{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5ODUxODY0", "number": 3059, "title": "SONARJAVA-3424 Implementation of S5867", "bodyText": "", "createdAt": "2020-06-25T08:57:33Z", "url": "https://github.com/SonarSource/sonar-java/pull/3059", "merged": true, "mergeCommit": {"oid": "1db61ed95706853021752a7d2eb83dacab864e6e"}, "closed": true, "closedAt": "2020-06-25T15:08:09Z", "author": {"login": "johann-beleites-sonarsource"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcurCTfABqjM0ODE0MjYyMTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuuRp_gBqjM0ODIyNzYzNjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8100c8807856fdd1025db0f0909e78abf1c6498c", "author": {"user": {"login": "johann-beleites-sonarsource", "name": "Johann Beleites"}}, "url": "https://github.com/SonarSource/sonar-java/commit/8100c8807856fdd1025db0f0909e78abf1c6498c", "committedDate": "2020-06-25T08:56:25Z", "message": "SONARJAVA-3424 Implementation of S5867"}, "afterCommit": {"oid": "e602d4ad9fae06f3bd0c05d9c03b86c798936602", "author": {"user": {"login": "johann-beleites-sonarsource", "name": "Johann Beleites"}}, "url": "https://github.com/SonarSource/sonar-java/commit/e602d4ad9fae06f3bd0c05d9c03b86c798936602", "committedDate": "2020-06-25T09:14:45Z", "message": "SONARJAVA-3424 Implementation of S5867"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MzI2MzY2", "url": "https://github.com/SonarSource/sonar-java/pull/3059#pullrequestreview-437326366", "createdAt": "2020-06-25T09:32:32Z", "commit": {"oid": "e602d4ad9fae06f3bd0c05d9c03b86c798936602"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwOTozMjozM1rOGoy7dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwOTozNDoxNVrOGoy_QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQzMDY0Ng==", "bodyText": "I'd prefer to move the bulk of this method into UnicodeUnawareCharClassFinder.after (removing the static modifier from UnicodeUnawareCharClassFinder) and keep the tradition of checkRegex being implemented as only new UnicodeUnawareCharClassFinder().visit(regexForLiterals);.", "url": "https://github.com/SonarSource/sonar-java/pull/3059#discussion_r445430646", "createdAt": "2020-06-25T09:32:33Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/regex/UnicodeAwareCharClassesCheck.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.regex;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.java.regex.RegexCheck;\n+import org.sonar.java.regex.RegexParseResult;\n+import org.sonar.java.regex.ast.CharacterRangeTree;\n+import org.sonar.java.regex.ast.EscapedCharacterClassTree;\n+import org.sonar.java.regex.ast.NonCapturingGroupTree;\n+import org.sonar.java.regex.ast.RegexBaseVisitor;\n+import org.sonar.java.regex.ast.RegexTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+\n+@Rule(key = \"S5867\")\n+public class UnicodeAwareCharClassesCheck extends AbstractRegexCheck {\n+\n+  private static final Set<Character> unicodeAwareClassesWithFlag = ImmutableSet.of('s', 'S', 'w', 'W');\n+  private static final Set<String> unicodeAwarePropertiesWithFlag = ImmutableSet.of(\n+    \"Lower\", \"Upper\", \"Alpha\", \"Alnum\", \"Punct\", \"Graph\", \"Print\", \"Blank\", \"Space\");\n+\n+  private static final Map<Character, Character> unicodeUnawareCharacterRanges = ImmutableMap.of(\n+    'a', 'z', 'A', 'Z');\n+\n+  @Override\n+  public void checkRegex(RegexParseResult regexForLiterals, MethodInvocationTree mit) {\n+    UnicodeUnawareCharClassFinder unicodeUnawareCharClassFinder = new UnicodeUnawareCharClassFinder();\n+    unicodeUnawareCharClassFinder.visit(regexForLiterals);\n+\n+    unicodeUnawareCharClassFinder.unicodeUnawareRange.forEach(unawareRange -> reportIssue(unawareRange,\n+      \"Replace this character range with a Unicode-aware character class.\", null, Collections.emptyList()));\n+\n+    if (!unicodeUnawareCharClassFinder.unicodeAwareWithFlag.isEmpty() &&\n+      !unicodeUnawareCharClassFinder.containsUnicodeCharacterFlag()) {\n+\n+      List<RegexCheck.RegexIssueLocation> secondaries = unicodeUnawareCharClassFinder.unicodeAwareWithFlag.stream()\n+        .map(tree -> new RegexIssueLocation(tree, \"Predefined/POSIX character class\"))\n+        .collect(Collectors.toList());\n+      reportIssue(ExpressionUtils.methodName(mit),\n+        \"Enable the \\\"UNICODE_CHARACTER_CLASS\\\" flag or use a Unicode-aware alternative.\", null, secondaries);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e602d4ad9fae06f3bd0c05d9c03b86c798936602"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQzMTYxNg==", "bodyText": "I think this getter can be removed. You access the other variables without a getter as well and if you move the code using the variables into after, there's no need for getters anyway.", "url": "https://github.com/SonarSource/sonar-java/pull/3059#discussion_r445431616", "createdAt": "2020-06-25T09:34:15Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/regex/UnicodeAwareCharClassesCheck.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.regex;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.java.regex.RegexCheck;\n+import org.sonar.java.regex.RegexParseResult;\n+import org.sonar.java.regex.ast.CharacterRangeTree;\n+import org.sonar.java.regex.ast.EscapedCharacterClassTree;\n+import org.sonar.java.regex.ast.NonCapturingGroupTree;\n+import org.sonar.java.regex.ast.RegexBaseVisitor;\n+import org.sonar.java.regex.ast.RegexTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+\n+@Rule(key = \"S5867\")\n+public class UnicodeAwareCharClassesCheck extends AbstractRegexCheck {\n+\n+  private static final Set<Character> unicodeAwareClassesWithFlag = ImmutableSet.of('s', 'S', 'w', 'W');\n+  private static final Set<String> unicodeAwarePropertiesWithFlag = ImmutableSet.of(\n+    \"Lower\", \"Upper\", \"Alpha\", \"Alnum\", \"Punct\", \"Graph\", \"Print\", \"Blank\", \"Space\");\n+\n+  private static final Map<Character, Character> unicodeUnawareCharacterRanges = ImmutableMap.of(\n+    'a', 'z', 'A', 'Z');\n+\n+  @Override\n+  public void checkRegex(RegexParseResult regexForLiterals, MethodInvocationTree mit) {\n+    UnicodeUnawareCharClassFinder unicodeUnawareCharClassFinder = new UnicodeUnawareCharClassFinder();\n+    unicodeUnawareCharClassFinder.visit(regexForLiterals);\n+\n+    unicodeUnawareCharClassFinder.unicodeUnawareRange.forEach(unawareRange -> reportIssue(unawareRange,\n+      \"Replace this character range with a Unicode-aware character class.\", null, Collections.emptyList()));\n+\n+    if (!unicodeUnawareCharClassFinder.unicodeAwareWithFlag.isEmpty() &&\n+      !unicodeUnawareCharClassFinder.containsUnicodeCharacterFlag()) {\n+\n+      List<RegexCheck.RegexIssueLocation> secondaries = unicodeUnawareCharClassFinder.unicodeAwareWithFlag.stream()\n+        .map(tree -> new RegexIssueLocation(tree, \"Predefined/POSIX character class\"))\n+        .collect(Collectors.toList());\n+      reportIssue(ExpressionUtils.methodName(mit),\n+        \"Enable the \\\"UNICODE_CHARACTER_CLASS\\\" flag or use a Unicode-aware alternative.\", null, secondaries);\n+    }\n+  }\n+\n+  private static class UnicodeUnawareCharClassFinder extends RegexBaseVisitor {\n+\n+    private final List<RegexTree> unicodeUnawareRange = new ArrayList<>();\n+    private final List<RegexTree> unicodeAwareWithFlag = new ArrayList<>();\n+    private boolean containsUnicodeCharacterFlag = false;\n+\n+    @Override\n+    public void visitCharacterRange(CharacterRangeTree tree) {\n+      Character expectedUpperBoundChar = unicodeUnawareCharacterRanges.get(tree.getLowerBound().getCharacter());\n+      if (expectedUpperBoundChar != null && expectedUpperBoundChar == tree.getUpperBound().getCharacter()) {\n+        unicodeUnawareRange.add(tree);\n+      }\n+    }\n+\n+    @Override\n+    public void visitEscapedCharacterClass(EscapedCharacterClassTree tree) {\n+      String property = tree.property();\n+      if ((property != null && unicodeAwarePropertiesWithFlag.contains(property)) ||\n+        unicodeAwareClassesWithFlag.contains(tree.getType())) {\n+\n+        unicodeAwareWithFlag.add(tree);\n+      }\n+    }\n+\n+    @Override\n+    protected void before(RegexParseResult regexParseResult) {\n+      containsUnicodeCharacterFlag |= regexParseResult.getInitialFlags().contains(Pattern.UNICODE_CHARACTER_CLASS);\n+    }\n+\n+    @Override\n+    protected void doVisitNonCapturingGroup(NonCapturingGroupTree tree) {\n+      containsUnicodeCharacterFlag |= flagActive(Pattern.UNICODE_CHARACTER_CLASS);\n+      super.doVisitNonCapturingGroup(tree);\n+    }\n+\n+    public boolean containsUnicodeCharacterFlag() {\n+      return containsUnicodeCharacterFlag;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e602d4ad9fae06f3bd0c05d9c03b86c798936602"}, "originalPosition": 108}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e602d4ad9fae06f3bd0c05d9c03b86c798936602", "author": {"user": {"login": "johann-beleites-sonarsource", "name": "Johann Beleites"}}, "url": "https://github.com/SonarSource/sonar-java/commit/e602d4ad9fae06f3bd0c05d9c03b86c798936602", "committedDate": "2020-06-25T09:14:45Z", "message": "SONARJAVA-3424 Implementation of S5867"}, "afterCommit": {"oid": "d34d92c074448b1cbe2b3e32ba25383635bc3cf6", "author": {"user": {"login": "johann-beleites-sonarsource", "name": "Johann Beleites"}}, "url": "https://github.com/SonarSource/sonar-java/commit/d34d92c074448b1cbe2b3e32ba25383635bc3cf6", "committedDate": "2020-06-25T11:25:17Z", "message": "SONARJAVA-3424 Implementation of S5867"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d34d92c074448b1cbe2b3e32ba25383635bc3cf6", "author": {"user": {"login": "johann-beleites-sonarsource", "name": "Johann Beleites"}}, "url": "https://github.com/SonarSource/sonar-java/commit/d34d92c074448b1cbe2b3e32ba25383635bc3cf6", "committedDate": "2020-06-25T11:25:17Z", "message": "SONARJAVA-3424 Implementation of S5867"}, "afterCommit": {"oid": "c8366bdbfe8fb3578be28bfd592d5780f40632bf", "author": {"user": {"login": "johann-beleites-sonarsource", "name": "Johann Beleites"}}, "url": "https://github.com/SonarSource/sonar-java/commit/c8366bdbfe8fb3578be28bfd592d5780f40632bf", "committedDate": "2020-06-25T11:26:12Z", "message": "SONARJAVA-3424 Implementation of S5867"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2b5368e54889fc1c5a0b35968dd6e62c2f28997", "author": {"user": {"login": "johann-beleites-sonarsource", "name": "Johann Beleites"}}, "url": "https://github.com/SonarSource/sonar-java/commit/d2b5368e54889fc1c5a0b35968dd6e62c2f28997", "committedDate": "2020-06-25T13:01:15Z", "message": "SONARJAVA-3424 Implementation of S5867"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8366bdbfe8fb3578be28bfd592d5780f40632bf", "author": {"user": {"login": "johann-beleites-sonarsource", "name": "Johann Beleites"}}, "url": "https://github.com/SonarSource/sonar-java/commit/c8366bdbfe8fb3578be28bfd592d5780f40632bf", "committedDate": "2020-06-25T11:26:12Z", "message": "SONARJAVA-3424 Implementation of S5867"}, "afterCommit": {"oid": "d2b5368e54889fc1c5a0b35968dd6e62c2f28997", "author": {"user": {"login": "johann-beleites-sonarsource", "name": "Johann Beleites"}}, "url": "https://github.com/SonarSource/sonar-java/commit/d2b5368e54889fc1c5a0b35968dd6e62c2f28997", "committedDate": "2020-06-25T13:01:15Z", "message": "SONARJAVA-3424 Implementation of S5867"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1646, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}