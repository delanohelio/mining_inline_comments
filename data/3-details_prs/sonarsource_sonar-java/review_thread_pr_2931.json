{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMTAwMDc0", "number": 2931, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1Mjo0N1rOD4XAKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1Mjo0N1rOD4XAKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDIzNzIyOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/DiamondOperatorCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1Mjo0N1rOGPI85g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjo1Mjo0N1rOGPI85g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyODQ4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static boolean usedAsArgumentShouldUseDiamon(NewClassTree newClassTree) {\n          \n          \n            \n              private static boolean usedAsArgumentShouldUseDiamond(NewClassTree newClassTree) {", "url": "https://github.com/SonarSource/sonar-java/pull/2931#discussion_r418528486", "createdAt": "2020-05-01T12:52:47Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/DiamondOperatorCheck.java", "diffHunk": "@@ -79,15 +82,63 @@ public boolean isCompatibleWithJavaVersion(JavaVersion version) {\n   public void visitNode(Tree tree) {\n     NewClassTree newClassTree = (NewClassTree) tree;\n     TypeTree newTypeTree = newClassTree.identifier();\n-    if (newClassTree.classBody() == null && isParameterizedType(newTypeTree)) {\n-      TypeTree type = getTypeFromExpression(tree.parent(), expressionKindsToCheck);\n-      if (type != null && isParameterizedType(type)) {\n-        reportIssue(\n-          ((ParameterizedTypeTree) newTypeTree).typeArguments(),\n-          \"Replace the type specification in this constructor call with the diamond operator (\\\"<>\\\").\" +\n-            context.getJavaVersion().java7CompatibilityMessage());\n-      }\n+    if (!isParameterizedType(newTypeTree) || newClassTree.classBody() != null) {\n+      return;\n+    }\n+    TypeTree type = getTypeFromExpression(tree.parent(), expressionKindsToCheck);\n+    if ((type != null && isParameterizedType(type))\n+      || usedAsArgumentShouldUseDiamon(newClassTree)) {\n+      reportIssue(\n+        ((ParameterizedTypeTree) newTypeTree).typeArguments(),\n+        \"Replace the type specification in this constructor call with the diamond operator (\\\"<>\\\").\" +\n+          context.getJavaVersion().java7CompatibilityMessage());\n+    }\n+  }\n+\n+  private static boolean usedAsArgumentShouldUseDiamon(NewClassTree newClassTree) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72e814ba7533bb5e318a51dd3fe7537ac08ed8ba"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4133, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}