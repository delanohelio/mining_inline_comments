{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MTk1NzA4", "number": 3297, "title": "SONARJAVA-3564 Implement intersects and supersetOf helper for regex automata", "bodyText": "", "createdAt": "2020-11-24T05:56:58Z", "url": "https://github.com/SonarSource/sonar-java/pull/3297", "merged": true, "mergeCommit": {"oid": "67a3ac75a96d7149490a5237437ec7949c8e9cf0"}, "closed": true, "closedAt": "2020-12-02T09:35:55Z", "author": {"login": "alban-auzeill"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfjdqjABqjQwMzA5NzA0MTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdh_QnLAFqTU0MjIzMzk1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a5a8a87f9a28718fcf7f807feb0f1df684ac5ccc", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/a5a8a87f9a28718fcf7f807feb0f1df684ac5ccc", "committedDate": "2020-11-24T05:56:03Z", "message": "SONARJAVA-3564 RegexParser set activeFlags on group and character AutomatonState"}, "afterCommit": {"oid": "d7aae3166cd62418c9a22e9e1ed3a5cc08ed54d9", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/d7aae3166cd62418c9a22e9e1ed3a5cc08ed54d9", "committedDate": "2020-11-24T06:07:44Z", "message": "SONARJAVA-3564 RegexParser set activeFlags on group and character AutomatonState"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MjcyMTk4", "url": "https://github.com/SonarSource/sonar-java/pull/3297#pullrequestreview-537272198", "createdAt": "2020-11-24T09:01:56Z", "commit": {"oid": "d7aae3166cd62418c9a22e9e1ed3a5cc08ed54d9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTowMTo1NlrOH4ymPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOToxODoyN1rOH4z18A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMxMTI5NA==", "bodyText": "It probably makes sense to initialize activeFlags in the constructor rather than parse and to get rid of initialFlags altogether (this would also entail getting rid of RegexParseResult.initialFlags, which should be fine because we can just use parseResult.getResult().activeFlags() instead).", "url": "https://github.com/SonarSource/sonar-java/pull/3297#discussion_r529311294", "createdAt": "2020-11-24T09:01:56Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-frontend/src/main/java/org/sonar/java/regex/RegexParser.java", "diffHunk": "@@ -81,6 +83,7 @@ public RegexParser(RegexSource source, FlagSet initialFlags) {\n   }\n \n   public RegexParseResult parse() {\n+    this.activeFlags = initialFlags;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7aae3166cd62418c9a22e9e1ed3a5cc08ed54d9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTMzMTY5Ng==", "bodyText": "If we decide to remove RegexParseResult.initialFlags, RegexTrees should never use FLAGS_HAVE_NO_EFFECT_ON_THIS_STATE.", "url": "https://github.com/SonarSource/sonar-java/pull/3297#discussion_r529331696", "createdAt": "2020-11-24T09:18:27Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-frontend/src/main/java/org/sonar/java/regex/ast/DisjunctionTree.java", "diffHunk": "@@ -30,7 +30,7 @@\n   private final List<JavaCharacter> orOperators;\n \n   public DisjunctionTree(RegexSource source, IndexRange range, List<RegexTree> alternatives, List<JavaCharacter> orOperators) {\n-    super(source, range);\n+    super(source, range, FLAGS_HAVE_NO_EFFECT_ON_THIS_STATE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7aae3166cd62418c9a22e9e1ed3a5cc08ed54d9"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "223db291699da8416bf065f3d41e2b2522b11e06", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/223db291699da8416bf065f3d41e2b2522b11e06", "committedDate": "2020-11-24T17:26:05Z", "message": "SONARJAVA-3564 Implement intersects and supersetOf helper for regex automata without LookAroundTree, BoundaryTree and DotTree support"}, "afterCommit": {"oid": "5a64f10c2f928331936d2810ba7dc72b656410ec", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/5a64f10c2f928331936d2810ba7dc72b656410ec", "committedDate": "2020-11-24T17:33:47Z", "message": "SONARJAVA-3564 Implement intersects and supersetOf helper for regex automata without LookAroundTree, BoundaryTree and DotTree support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a64f10c2f928331936d2810ba7dc72b656410ec", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/5a64f10c2f928331936d2810ba7dc72b656410ec", "committedDate": "2020-11-24T17:33:47Z", "message": "SONARJAVA-3564 Implement intersects and supersetOf helper for regex automata without LookAroundTree, BoundaryTree and DotTree support"}, "afterCommit": {"oid": "b1729f681889270c0212b347c076535770f4159c", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/b1729f681889270c0212b347c076535770f4159c", "committedDate": "2020-11-24T18:20:03Z", "message": "SONARJAVA-3564 Implement intersects and supersetOf helper for regex automata without LookAroundTree, BoundaryTree and DotTree support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ddeed10f51cf2c1850cb952b50c1706f21217123", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/ddeed10f51cf2c1850cb952b50c1706f21217123", "committedDate": "2020-11-24T20:43:40Z", "message": "SONARJAVA-3564 RegexParser set activeFlags for type of AutomatonState"}, "afterCommit": {"oid": "99b73e0db24372a894bfb05c1c3e0ec8f227e548", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/99b73e0db24372a894bfb05c1c3e0ec8f227e548", "committedDate": "2020-11-24T21:20:13Z", "message": "SONARJAVA-3564 Fix ReluctantQuantifierCheck getActiveFlagSet() removal"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fdc6c9c50f288a1f74d8a68d41ddc95b42458424", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/fdc6c9c50f288a1f74d8a68d41ddc95b42458424", "committedDate": "2020-11-25T07:20:19Z", "message": "SONARJAVA-3564 DotTree support to intersects and supersetOf helper for regex automata"}, "afterCommit": {"oid": "469bfdf9c017ef7cd5561b125174e4081e2d3a16", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/469bfdf9c017ef7cd5561b125174e4081e2d3a16", "committedDate": "2020-11-25T07:54:09Z", "message": "SONARJAVA-3564 DotTree support to intersects and supersetOf helper for regex automata"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "469bfdf9c017ef7cd5561b125174e4081e2d3a16", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/469bfdf9c017ef7cd5561b125174e4081e2d3a16", "committedDate": "2020-11-25T07:54:09Z", "message": "SONARJAVA-3564 DotTree support to intersects and supersetOf helper for regex automata"}, "afterCommit": {"oid": "8c0cec7c6ca2e4eb31b910ef21e1ce3680a99127", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/8c0cec7c6ca2e4eb31b910ef21e1ce3680a99127", "committedDate": "2020-11-26T08:57:26Z", "message": "SONARJAVA-3550 Rule S5994: Regex patterns following a possessive quantifier should not always fail"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c0cec7c6ca2e4eb31b910ef21e1ce3680a99127", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/8c0cec7c6ca2e4eb31b910ef21e1ce3680a99127", "committedDate": "2020-11-26T08:57:26Z", "message": "SONARJAVA-3550 Rule S5994: Regex patterns following a possessive quantifier should not always fail"}, "afterCommit": {"oid": "8d756a13783c4115bcf19138212d3f1ce1e7eae8", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/8d756a13783c4115bcf19138212d3f1ce1e7eae8", "committedDate": "2020-11-26T09:29:23Z", "message": "SONARJAVA-3550 Add a regex database list to test regex rules"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8d756a13783c4115bcf19138212d3f1ce1e7eae8", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/8d756a13783c4115bcf19138212d3f1ce1e7eae8", "committedDate": "2020-11-26T09:29:23Z", "message": "SONARJAVA-3550 Add a regex database list to test regex rules"}, "afterCommit": {"oid": "5afbfeeef0963237e9835bd551e07921414592fa", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/5afbfeeef0963237e9835bd551e07921414592fa", "committedDate": "2020-11-26T09:28:00Z", "message": "SONARJAVA-3550 Rule S5994: Regex patterns following a possessive quantifier should not always fail"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwOTI0Njgy", "url": "https://github.com/SonarSource/sonar-java/pull/3297#pullrequestreview-540924682", "createdAt": "2020-11-30T13:50:49Z", "commit": {"oid": "5afbfeeef0963237e9835bd551e07921414592fa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxMzo1MDo1MFrOH778qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTowODo1M1rOH8N6dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjYxMDIxNg==", "bodyText": "This doesn't really test what I wanted to test. The intent was to have a regex where the reluctantly quantified bit is subject to a flag, but the part after the reluctant quantifier is not. Previously the flag wouldn't have been taken into account in that case because it called flagActive for both arguments after both have been parsed. With the new system, both arguments should have accurate flags.\nSo to test this with the features we currently support, (?U:\\\\s*?)\\u202F would be an example of a current FN that should be fixed by the change in how flags are tracked.", "url": "https://github.com/SonarSource/sonar-java/pull/3297#discussion_r532610216", "createdAt": "2020-11-30T13:50:50Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks-test-sources/src/main/java/checks/regex/ReluctantQuantifierCheck.java", "diffHunk": "@@ -21,7 +21,8 @@ void noncompliant(String str) {\n     str.matches(\".*?\\\\P{L}\"); // Noncompliant [[sc=18;ec=21]] {{Replace this use of a reluctant quantifier with \"\\\\p{L}*+\".}}\n     str.matches(\"\\\\[.*?\\\\]\"); // Noncompliant [[sc=21;ec=24]] {{Replace this use of a reluctant quantifier with \"[^\\\\]]*+\".}}\n     str.matches(\".+?[abc]\"); // Noncompliant [[sc=18;ec=21]] {{Replace this use of a reluctant quantifier with \"[^abc]++\".}}\n-    \n+    str.matches(\"(?i:.*?[a-z])\"); // Noncompliant [[sc=22;ec=25]] {{Replace this use of a reluctant quantifier with \"[^a-z]*+\".}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5afbfeeef0963237e9835bd551e07921414592fa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc0NzgwMg==", "bodyText": "Should be Character.MAX_CODE_POINT without the - 1 unless I'm missing something.", "url": "https://github.com/SonarSource/sonar-java/pull/3297#discussion_r532747802", "createdAt": "2020-11-30T16:55:13Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/helpers/SimplifiedRegexCharacterClass.java", "diffHunk": "@@ -45,38 +50,69 @@\n    * non-null and the tree returned by {@code getValue} will be the element of the character class which matches that\n    * code point.\n    */\n-  private TreeMap<Integer, CharacterClassElementTree> contents = new TreeMap<>();\n+  private TreeMap<Integer, RegexSyntaxElement> contents = new TreeMap<>();\n \n   private boolean containsUnknownCharacters = false;\n \n   public SimplifiedRegexCharacterClass() {\n   }\n \n-  public SimplifiedRegexCharacterClass(CharacterClassElementTree tree, FlagSet flags) {\n-    add(tree, flags);\n+  public SimplifiedRegexCharacterClass(CharacterClassElementTree tree) {\n+    add(tree);\n+  }\n+\n+  public SimplifiedRegexCharacterClass(DotTree tree) {\n+    char[] orderedExcludedCharacters;\n+    if (tree.activeFlags().contains(Pattern.DOTALL)) {\n+      orderedExcludedCharacters = new char[] {};\n+    } else if (tree.activeFlags().contains(Pattern.UNIX_LINES)) {\n+      orderedExcludedCharacters = new char[] {'\\n'};\n+    } else {\n+      orderedExcludedCharacters = new char[] {'\\n', '\\r', '\\u0085', '\\u2028', '\\u2029'};\n+    }\n+    int from = 0;\n+    for (char excludedCharacter : orderedExcludedCharacters) {\n+      int to = excludedCharacter - 1;\n+      if (to > from) {\n+        addRange(from, to, tree);\n+      }\n+      from = excludedCharacter + 1;\n+    }\n+    addRange(from, Character.MAX_CODE_POINT - 1, tree);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5afbfeeef0963237e9835bd551e07921414592fa"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3MzkzMQ==", "bodyText": "Create ticket", "url": "https://github.com/SonarSource/sonar-java/pull/3297#discussion_r532773931", "createdAt": "2020-11-30T17:32:20Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks/src/test/java/org/sonar/java/checks/helpers/SimplifiedRegexCharacterClassTest.java", "diffHunk": "@@ -52,4 +69,226 @@ void testIntersectionWithTrueAsDefaultAnswer() {\n     assertFalse(empty.intersects(aToZ, true));\n     assertFalse(empty.intersects(unknown, true));\n   }\n+\n+  @Test\n+  void intersects_dot() {\n+    assertIntersects(\".\", \"a\", false, NO_FLAGS).isTrue();\n+    assertIntersects(\".\", \".\", false, NO_FLAGS).isTrue();\n+    assertIntersects(\".\", \"\\0\", false, NO_FLAGS).isTrue();\n+    assertIntersects(\".\", \"\\uFFFF\", false, NO_FLAGS).isTrue();\n+    assertIntersects(\"a\", \".\", true, NO_FLAGS).isTrue();\n+    assertIntersects(\".\", \"[a-z]\", false, NO_FLAGS).isTrue();\n+    assertIntersects(\"[a-z]\", \".\", false, NO_FLAGS).isTrue();\n+\n+    // by default [\\r\\n\\u0085\\u2028\\u2029] excluded from DotTree\n+    assertIntersects(\".\", \"[\\r\\n\\u0085\\u2028\\u2029]\", false, NO_FLAGS).isFalse();\n+    assertIntersects(\".\", \"\\b\", false, NO_FLAGS).isTrue();\n+    assertIntersects(\".\", \"\\f\", false, NO_FLAGS).isTrue();\n+    assertIntersects(\".\", \" \", false, NO_FLAGS).isTrue();\n+    assertIntersects(\".\", \"\\t\", false, NO_FLAGS).isTrue();\n+  }\n+   \n+  @Test\n+  void intersects_dot_unix_lines() {\n+    // only \\n excluded when UNIX_LINES is set\n+    assertIntersects(\".\", \"\\n\", false, Pattern.UNIX_LINES).isFalse();\n+    assertIntersects(\".\", \"[^a]\", false, Pattern.UNIX_LINES).isTrue();\n+    assertIntersects(\".\", \"\\b\", false, Pattern.UNIX_LINES).isTrue();\n+    assertIntersects(\".\", \"\\t\", false, Pattern.UNIX_LINES).isTrue();\n+    assertIntersects(\".\", \"\\f\", false, Pattern.UNIX_LINES).isTrue();\n+    assertIntersects(\".\", \" \", false, Pattern.UNIX_LINES).isTrue();\n+    assertIntersects(\".\", \"\\r\", false, Pattern.UNIX_LINES).isTrue();\n+    assertIntersects(\".\", \"\\u0085\", false, Pattern.UNIX_LINES).isTrue();\n+    assertIntersects(\".\", \"\\u2028\", false, Pattern.UNIX_LINES).isTrue();\n+    assertIntersects(\".\", \"\\u2029\", false, Pattern.UNIX_LINES).isTrue();\n+    assertIntersects(\".\", \".\", false, Pattern.UNIX_LINES).isTrue();\n+  }\n+\n+  @Test\n+  void intersects_dot_all() {\n+    // no exclusion and UNIX_LINES is ignored when DOTALL is set\n+    assertIntersects(\".\", \"\\n\", false, Pattern.DOTALL).isTrue();\n+    assertIntersects(\".\", \"[^a]\", false, Pattern.DOTALL).isTrue();\n+    assertIntersects(\".\", \"\\n\", false, Pattern.UNIX_LINES | Pattern.DOTALL).isTrue();\n+    assertIntersects(\".\", \"\\b\", false, Pattern.DOTALL).isTrue();\n+    assertIntersects(\".\", \"\\t\", false, Pattern.DOTALL).isTrue();\n+    assertIntersects(\".\", \"\\f\", false, Pattern.DOTALL).isTrue();\n+    assertIntersects(\".\", \" \", false, Pattern.DOTALL).isTrue();\n+    assertIntersects(\".\", \"\\r\", false, Pattern.DOTALL).isTrue();\n+    assertIntersects(\".\", \"\\u0085\", false, Pattern.DOTALL).isTrue();\n+    assertIntersects(\".\", \"\\u2028\", false, Pattern.DOTALL).isTrue();\n+    assertIntersects(\".\", \"\\u2029\", false, Pattern.DOTALL).isTrue();\n+    assertIntersects(\".\", \".\", false, Pattern.DOTALL).isTrue();\n+  }\n+\n+  @Test\n+  void intersects_with_utf16() {\n+    String maxCodePoint = new String(Character.toChars(Character.MAX_CODE_POINT));\n+    // two characters\n+    assertThat(maxCodePoint).hasSize(2);\n+    // but a single code point\n+    assertThat(maxCodePoint.codePoints().count()).isEqualTo(1);\n+    // and java Pattern support it\n+    assertThat(maxCodePoint).matches(\".\");\n+\n+    RegexTree result = parseRegex(maxCodePoint, new FlagSet()).getResult();\n+    // FIXME result should be a single PlainCharacterTree and not a SequenceTree of two PlainCharacterTree s\n+    // In oder to assert: assertIntersects(\".\", maxCodePoint, false, NO_FLAGS).isTrue();\n+    // Instead of:\n+    assertThat(result).isInstanceOf(SequenceTree.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5afbfeeef0963237e9835bd551e07921414592fa"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjgwODkxMQ==", "bodyText": "If that only contains unknown characters and this is empty, the result should still be true false even if the default answer is true. So return !isEmpty() || !that.containsUnknownCharacters;.", "url": "https://github.com/SonarSource/sonar-java/pull/3297#discussion_r532808911", "createdAt": "2020-11-30T18:27:20Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/helpers/SimplifiedRegexCharacterClass.java", "diffHunk": "@@ -87,9 +123,36 @@ public boolean intersects(SimplifiedRegexCharacterClass that, boolean defaultAns\n     return false;\n   }\n \n-  public void addRange(int from, int to, CharacterClassElementTree tree) {\n+  public boolean supersetOf(SimplifiedRegexCharacterClass that, boolean defaultAnswer) {\n+    if (that.containsUnknownCharacters && !defaultAnswer) {\n+      return false;\n+    }\n+    Iterator<Map.Entry<Integer, RegexSyntaxElement>> thatIter = that.contents.entrySet().iterator();\n+    if (!thatIter.hasNext()) {\n+      // that.contents is empty, any set is a superset of it\n+      return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5afbfeeef0963237e9835bd551e07921414592fa"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjg5MTc4Mw==", "bodyText": "There's a bug here if that ends with a range that goes up to MAX_CODE_POINT (inclusive), in which case the last entry of that.contents won't be a null entry. I've fixed the same bug for intersects in my PR.", "url": "https://github.com/SonarSource/sonar-java/pull/3297#discussion_r532891783", "createdAt": "2020-11-30T20:44:39Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/helpers/SimplifiedRegexCharacterClass.java", "diffHunk": "@@ -87,9 +123,36 @@ public boolean intersects(SimplifiedRegexCharacterClass that, boolean defaultAns\n     return false;\n   }\n \n-  public void addRange(int from, int to, CharacterClassElementTree tree) {\n+  public boolean supersetOf(SimplifiedRegexCharacterClass that, boolean defaultAnswer) {\n+    if (that.containsUnknownCharacters && !defaultAnswer) {\n+      return false;\n+    }\n+    Iterator<Map.Entry<Integer, RegexSyntaxElement>> thatIter = that.contents.entrySet().iterator();\n+    if (!thatIter.hasNext()) {\n+      // that.contents is empty, any set is a superset of it\n+      return true;\n+    }\n+    Map.Entry<Integer, RegexSyntaxElement> thatEntry = thatIter.next();\n+    while (thatIter.hasNext()) {\n+      Map.Entry<Integer, RegexSyntaxElement> thatNextEntry = thatIter.next();\n+      if (thatEntry.getValue() != null) {\n+        Map.Entry<Integer, RegexSyntaxElement> thisBefore = contents.floorEntry(thatEntry.getKey());\n+        if (thisBefore == null || thisBefore.getValue() == null) {\n+          return false;\n+        }\n+        NavigableMap<Integer, RegexSyntaxElement> thisSubMap = contents.subMap(thatEntry.getKey(), false, thatNextEntry.getKey(), false);\n+        if (thisSubMap.values().stream().anyMatch(Objects::isNull)) {\n+          return false;\n+        }\n+      }\n+      thatEntry = thatNextEntry;\n+    }\n+    return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5afbfeeef0963237e9835bd551e07921414592fa"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkwNDU2NA==", "bodyText": "I believe we should still report the issue if the continuation is not a RegexSyntaxElement. If the non-regex-syntax continuation has a single successor (i.e. it's not a branch), we can just report on that successor instead (or, if it's still not a regex syntax element, keep following single edges until we find one or a branch). And if it's a branch (as might be the case for something like (xx++)+x) we should probably still report by only reporting on the repetition itself with the message adjusted accordingly.", "url": "https://github.com/SonarSource/sonar-java/pull/3297#discussion_r532904564", "createdAt": "2020-11-30T21:08:53Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/regex/PossessiveQuantifierContinuationCheck.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.regex;\n+\n+import java.util.Collections;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.RegexTreeHelper;\n+import org.sonar.java.checks.helpers.SubAutomaton;\n+import org.sonar.java.regex.RegexCheck;\n+import org.sonar.java.regex.RegexParseResult;\n+import org.sonar.java.regex.ast.AutomatonState;\n+import org.sonar.java.regex.ast.FinalState;\n+import org.sonar.java.regex.ast.Quantifier;\n+import org.sonar.java.regex.ast.RegexBaseVisitor;\n+import org.sonar.java.regex.ast.RegexSyntaxElement;\n+import org.sonar.java.regex.ast.RepetitionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+\n+@Rule(key = \"S5994\")\n+public class PossessiveQuantifierContinuationCheck extends AbstractRegexCheck {\n+\n+  private static final String MESSAGE = \"Change this impossible to match sub-pattern that conflicts with the previous possessive quantifier.\";\n+\n+  @Override\n+  public void checkRegex(RegexParseResult regexForLiterals, MethodInvocationTree mit) {\n+    new Visitor(regexForLiterals.getFinalState()).visit(regexForLiterals);\n+  }\n+\n+  private class Visitor extends RegexBaseVisitor {\n+\n+    private final FinalState finalState;\n+\n+    public Visitor(FinalState finalState) {\n+      this.finalState = finalState;\n+    }\n+\n+    @Override\n+    public void visitRepetition(RepetitionTree repetitionTree) {\n+      AutomatonState continuation = repetitionTree.continuation();\n+      if (doesRepetitionContinuationAlwaysFail(repetitionTree) && continuation instanceof RegexSyntaxElement) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5afbfeeef0963237e9835bd551e07921414592fa"}, "originalPosition": 57}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5afbfeeef0963237e9835bd551e07921414592fa", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/5afbfeeef0963237e9835bd551e07921414592fa", "committedDate": "2020-11-26T09:28:00Z", "message": "SONARJAVA-3550 Rule S5994: Regex patterns following a possessive quantifier should not always fail"}, "afterCommit": {"oid": "22e85b2566b0b63fb173008e9dfe9e8e29405219", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/22e85b2566b0b63fb173008e9dfe9e8e29405219", "committedDate": "2020-12-01T09:41:06Z", "message": "SONARJAVA-3550 Rule S5994: Regex patterns following a possessive quantifier should not always fail"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "351d8fbbd4b519715a1bbcbc94b4e4c6b6a37c57", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/351d8fbbd4b519715a1bbcbc94b4e4c6b6a37c57", "committedDate": "2020-12-01T18:45:18Z", "message": "SONARJAVA-3564 RegexParser set activeFlags on group and character AutomatonState"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dfedf677d8a56ac078b5f37af873fab0e307630", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/2dfedf677d8a56ac078b5f37af873fab0e307630", "committedDate": "2020-12-01T18:45:19Z", "message": "SONARJAVA-3564 Implement supersetOf helper for regex character classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e004a11fe6918210d4ade5b7a214204bc2cd5132", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/e004a11fe6918210d4ade5b7a214204bc2cd5132", "committedDate": "2020-12-01T18:45:19Z", "message": "SONARJAVA-3564 Implement intersects and supersetOf helper for regex automata without LookAroundTree, BoundaryTree and DotTree support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53063b9bbd2d625a6ba6fb5efde28012011f0663", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/53063b9bbd2d625a6ba6fb5efde28012011f0663", "committedDate": "2020-12-01T18:45:19Z", "message": "SONARJAVA-3564 RegexParser set activeFlags for type of AutomatonState"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "076c6c4b3c1109873c944b85ef26ce91a3541494", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/076c6c4b3c1109873c944b85ef26ce91a3541494", "committedDate": "2020-12-01T18:45:20Z", "message": "SONARJAVA-3564 Fix ReluctantQuantifierCheck getActiveFlagSet() removal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72bc32cdf3fe00613011109bbb3bb744280cfa57", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/72bc32cdf3fe00613011109bbb3bb744280cfa57", "committedDate": "2020-12-01T18:45:20Z", "message": "SONARJAVA-3564 DotTree support to intersects and supersetOf helper for regex automata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "726096392f5f93b17ac27efafe85852f95e6e831", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/726096392f5f93b17ac27efafe85852f95e6e831", "committedDate": "2020-12-01T18:45:21Z", "message": "SONARJAVA-3564 intersects and supersetOf should not match empty expressions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "448b0301074640353c5b26bd156696f890f7ecdc", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/448b0301074640353c5b26bd156696f890f7ecdc", "committedDate": "2020-12-01T14:51:16Z", "message": "SONARJAVA-3564 ReluctantQuantifierCheck support mixed active flags"}, "afterCommit": {"oid": "fff3f614e12cbc8dce52b8046446c41a6dace2fb", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/fff3f614e12cbc8dce52b8046446c41a6dace2fb", "committedDate": "2020-12-01T18:45:22Z", "message": "SONARJAVA-3564 S5994 fix FN when repetition continuation is not a RegexSyntaxElement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b4d4c9ead12c3ed122e55ca6d7315f41773f988", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/3b4d4c9ead12c3ed122e55ca6d7315f41773f988", "committedDate": "2020-12-01T19:00:00Z", "message": "SONARJAVA-3550 Rule S5994: Regex patterns following a possessive quantifier should not always fail"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee8584e9d9108b45467c211dadf5d42ede25215d", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/ee8584e9d9108b45467c211dadf5d42ede25215d", "committedDate": "2020-12-01T19:00:00Z", "message": "SONARJAVA-3564 ReluctantQuantifierCheck support mixed active flags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ef074aee7950c2b912ec19ee7417c1e711ee319", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/8ef074aee7950c2b912ec19ee7417c1e711ee319", "committedDate": "2020-12-01T19:00:00Z", "message": "SONARJAVA-3564 fix SimplifiedRegexCharacterClass for Character.MAX_CODE_POINT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f516f9cf5c5d8879daef3770a135b351277e62a0", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/f516f9cf5c5d8879daef3770a135b351277e62a0", "committedDate": "2020-12-01T19:00:00Z", "message": "SONARJAVA-3564 S5994 fix FN when repetition continuation is not a RegexSyntaxElement"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fff3f614e12cbc8dce52b8046446c41a6dace2fb", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/fff3f614e12cbc8dce52b8046446c41a6dace2fb", "committedDate": "2020-12-01T18:45:22Z", "message": "SONARJAVA-3564 S5994 fix FN when repetition continuation is not a RegexSyntaxElement"}, "afterCommit": {"oid": "f516f9cf5c5d8879daef3770a135b351277e62a0", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/f516f9cf5c5d8879daef3770a135b351277e62a0", "committedDate": "2020-12-01T19:00:00Z", "message": "SONARJAVA-3564 S5994 fix FN when repetition continuation is not a RegexSyntaxElement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c76e42d6f9a89d68e2cf33aa4646d55b45877f5b", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/c76e42d6f9a89d68e2cf33aa4646d55b45877f5b", "committedDate": "2020-12-01T19:25:21Z", "message": "SONARJAVA-3564 Reduce complexity of SimplifiedRegexCharacterClass#supersetOf"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMjMzOTU1", "url": "https://github.com/SonarSource/sonar-java/pull/3297#pullrequestreview-542233955", "createdAt": "2020-12-01T19:38:54Z", "commit": {"oid": "c76e42d6f9a89d68e2cf33aa4646d55b45877f5b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1958, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}