{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMjU2ODg3", "number": 3287, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMToxNjowMFrOE6_jUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMToxNjowNVrOE6_jbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjk0MDk3OnYy", "diffSide": "RIGHT", "path": "java-checks-test-sources/src/main/java/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMToxNjowMFrOH2YPfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMToxNjowMFrOH2YPfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc4MjMzMg==", "bodyText": "I'd suggest adding a case @Autowired private Bar withInitializer = new Bar(); (maybe to non-compiling examples if doesn't compile) and decide what we want to do in such case.", "url": "https://github.com/SonarSource/sonar-java/pull/3287#discussion_r526782332", "createdAt": "2020-11-19T11:16:00Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks-test-sources/src/main/java/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package checks.spring;\n+\n+import javax.inject.Inject;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+\n+class SpringConfigurationWithAutowiredFieldsCheck {\n+  class Bar { }\n+\n+  class Foo {\n+    private final Bar bar;\n+    public Foo(Bar bar) { this.bar = bar; }\n+  }\n+\n+  @Configuration\n+  class A {\n+\n+    @Autowired private Bar singleUsage; // Noncompliant [[sc=28;ec=39]] {{Inject this field value directly into \"method\", the only method that uses it.}}\n+    @Inject private Bar jsr330; // Noncompliant [[sc=25;ec=31]] {{Inject this field value directly into \"jsr330\", the only method that uses it.}}\n+    @Autowired private Bar multipleUsage;\n+    @Autowired private Bar notUsedInBeanMethod;\n+    @Autowired private Bar notUsed;\n+    private Bar notAutowired;\n+    @Autowired(required=false) private Bar withInitializer = new Bar();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6471935bbb58ba8fe12e54bd267c4981a77f3134"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjk0MTI3OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMToxNjowNVrOH2YPrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMToxNjowNVrOH2YPrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc4MjM4Mg==", "bodyText": "As far as I remember Spring. @Autowired annotation by default has required = true. So the initializer won't make sense, because the project will fail if no @Bean found (or even won't compile). Maybe it will be nice to check that required=false there. On the other hand, it's an additional check, so maybe we can leave it as it is.", "url": "https://github.com/SonarSource/sonar-java/pull/3287#discussion_r526782382", "createdAt": "2020-11-19T11:16:05Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/spring/SpringConfigurationWithAutowiredFieldsCheck.java", "diffHunk": "@@ -78,6 +78,10 @@ private static void collectAutowiredFields(Tree tree, Map<Symbol, VariableTree>\n       return;\n     }\n     VariableTree variable = (VariableTree) tree;\n+    if (variable.initializer() != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6471935bbb58ba8fe12e54bd267c4981a77f3134"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3836, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}