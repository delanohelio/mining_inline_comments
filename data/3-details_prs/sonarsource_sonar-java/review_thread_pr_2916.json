{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3Nzc4MzM0", "number": 2916, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDoyOTozM1rOD2ttUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDoyOTozM1rOD2ttUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4Njk4NTc2OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/JUnitMethodDeclarationCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDoyOTozM1rOGMmLYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDoyOTozM1rOGMmLYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg2MTYwMA==", "bodyText": "JUnit 5 has 5 different test annotations.\nHere, we can use: org.sonar.java.checks.helpers.UnitTestUtils#hasJUnit5TestAnnotation(...)\nSo we can support the following test:\nclass JUnitMethodDeclarationCheck_JUnit5ParameterizedTest {\n  public void setUp() { } // Noncompliant\n  @ParameterizedTest\n  @ValueSource(strings = {\"a\", \"b\", \"c\"})\n  void test(String value) { }\n}", "url": "https://github.com/SonarSource/sonar-java/pull/2916#discussion_r415861600", "createdAt": "2020-04-27T14:29:33Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/JUnitMethodDeclarationCheck.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang.StringUtils;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S2391\")\n+public class JUnitMethodDeclarationCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String JUNIT_FRAMEWORK_TEST = \"junit.framework.Test\";\n+  private static final String JUNIT_SETUP = \"setUp\";\n+  private static final String JUNIT_TEARDOWN = \"tearDown\";\n+  private static final String JUNIT_SUITE = \"suite\";\n+  private static final int MAX_STRING_DISTANCE = 3;\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.CLASS);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    ClassTree classTree = (ClassTree) tree;\n+\n+    List<MethodTree> methods = classTree.members().stream()\n+      .filter(member -> member.is(Tree.Kind.METHOD))\n+      .map(MethodTree.class::cast)\n+      .collect(Collectors.toList());\n+\n+    int jUnitVersion = getJUnitVersion(classTree, methods);\n+    if (jUnitVersion > 0) {\n+      methods.forEach(methodTree -> checkJUnitMethod(methodTree, jUnitVersion));\n+    }\n+  }\n+\n+  private static int getJUnitVersion(ClassTree classTree, List<MethodTree> methods) {\n+    if (isJunit3Class(classTree)) {\n+      return 3;\n+    }\n+    boolean containsJUnit4Tests = false;\n+    for (MethodTree methodTree : methods) {\n+      SymbolMetadata metadata = methodTree.symbol().metadata();\n+      containsJUnit4Tests |= metadata.isAnnotatedWith(\"org.junit.Test\");\n+      if (metadata.isAnnotatedWith(\"org.junit.jupiter.api.Test\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ba030a6f7693d12e19bfbfe62437a73b42b7e8e"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4116, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}