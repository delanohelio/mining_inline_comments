{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MDkwNjc5", "number": 2945, "title": "SONARJAVA-2944 Rule S4970: Derived exceptions should not hide their parents catch block", "bodyText": "", "createdAt": "2020-05-06T13:18:25Z", "url": "https://github.com/SonarSource/sonar-java/pull/2945", "merged": true, "mergeCommit": {"oid": "17d05cd024e4261747e79af5236717c86a4b10c3"}, "closed": true, "closedAt": "2020-05-07T13:57:06Z", "author": {"login": "quentin-jaquier-sonarsource"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceokD2ABqjMzMDg0NTgxMDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABce8aCKgH2gAyNDE0MDkwNjc5OjIzZDY4MzU5ZmE5Y2E1OGQwMDdmYWY3YTNjYzk2N2M0ODM3NTMxN2M=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e757e8d2cc428b7c05c7d0bde547d560f93412f", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/9e757e8d2cc428b7c05c7d0bde547d560f93412f", "committedDate": "2020-05-06T13:17:19Z", "message": "SONARJAVA-2944 Rule S4970: Derived exceptions should not hide their parents catch block"}, "afterCommit": {"oid": "a67aef7d53ac253d237df146e3ed4c36eb559741", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/a67aef7d53ac253d237df146e3ed4c36eb559741", "committedDate": "2020-05-06T13:19:07Z", "message": "SONARJAVA-2944 Rule S4970: Derived exceptions should not hide their parents catch block"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34239000069a04b2a2065af41c0b528fcf3f2687", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/34239000069a04b2a2065af41c0b528fcf3f2687", "committedDate": "2020-05-06T15:30:11Z", "message": "SONARJAVA-2944 Rule S4970: Derived exceptions should not hide their parents catch block"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a67aef7d53ac253d237df146e3ed4c36eb559741", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/a67aef7d53ac253d237df146e3ed4c36eb559741", "committedDate": "2020-05-06T13:19:07Z", "message": "SONARJAVA-2944 Rule S4970: Derived exceptions should not hide their parents catch block"}, "afterCommit": {"oid": "34239000069a04b2a2065af41c0b528fcf3f2687", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/34239000069a04b2a2065af41c0b528fcf3f2687", "committedDate": "2020-05-06T15:30:11Z", "message": "SONARJAVA-2944 Rule S4970: Derived exceptions should not hide their parents catch block"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MjUwMDAy", "url": "https://github.com/SonarSource/sonar-java/pull/2945#pullrequestreview-407250002", "createdAt": "2020-05-07T08:20:58Z", "commit": {"oid": "34239000069a04b2a2065af41c0b528fcf3f2687"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODoyMDo1OFrOGRzpSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo0MTo0MlrOGR0bcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyNTEyOA==", "bodyText": "I don't see test cases where lambdas or anonymous classes are used, therefore these lines are not covered. Can you add some?", "url": "https://github.com/SonarSource/sonar-java/pull/2945#discussion_r421325128", "createdAt": "2020-05-07T08:20:58Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/UnreachableCatchCheck.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.CatchTree;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.LambdaExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.SyntaxToken;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.TryStatementTree;\n+import org.sonar.plugins.java.api.tree.TypeTree;\n+import org.sonar.plugins.java.api.tree.UnionTypeTree;\n+\n+@Rule(key = \"S4970\")\n+public class UnreachableCatchCheck extends IssuableSubscriptionVisitor {\n+\n+  private Map<Type, SyntaxToken> typeToCatchToken = new HashMap<>();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.TRY_STATEMENT);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    TryStatementTree tryStatementTree = (TryStatementTree) tree;\n+    typeToCatchToken.clear();\n+    Multimap<Type, Type> derivedToBase = getDerivedTypesCaughtBeforeBaseType(tryStatementTree.catches());\n+\n+    if (derivedToBase.isEmpty()) {\n+      return;\n+    }\n+\n+    MethodThrownTypeCollector collector = new MethodThrownTypeCollector();\n+    tryStatementTree.block().accept(collector);\n+    List<Type> thrownTypes = collector.thrownTypes;\n+\n+    derivedToBase.entries().forEach(entry -> {\n+      Type derivedType = entry.getKey();\n+      Type baseType = entry.getValue();\n+\n+      // Catching a derived type before the base type is fine if the body of the try throws an exception which is a subtype of the base type,\n+      // but not of the derived type. We have to make sure that we are not in this situation before reporting an issue.\n+      if (isHidden(baseType, derivedType, thrownTypes)) {\n+        reportIssue(typeToCatchToken.get(baseType),\n+          \"Remove this catch block because it is unreachable as hidden by previous catch blocks.\",\n+          Collections.singletonList(new JavaFileScannerContext.Location(\"Already catch the exception\", typeToCatchToken.get(derivedType))),\n+          null);\n+      }\n+    });\n+  }\n+\n+  private Multimap<Type, Type> getDerivedTypesCaughtBeforeBaseType(List<CatchTree> catches) {\n+    Multimap<Type, Type> derivedBeforeBase = HashMultimap.create();\n+\n+    List<Type> catchTypes = catches.stream()\n+      .flatMap(c -> {\n+        List<Type> types = new ArrayList<>();\n+        collectTypesFromTypeTree(c.parameter().type(), types, c.catchKeyword());\n+        return types.stream();\n+      })\n+      .filter(UnreachableCatchCheck::isChecked)\n+      .collect(Collectors.toList());\n+\n+    for (int i = 0; i < catchTypes.size() - 1; i++) {\n+      Type topType = catchTypes.get(0);\n+      for (int j = i + 1; j < catchTypes.size(); j++) {\n+        Type bottomType = catchTypes.get(j);\n+        if (topType.isSubtypeOf(bottomType)) {\n+          derivedBeforeBase.put(topType, bottomType);\n+        }\n+      }\n+    }\n+    return derivedBeforeBase;\n+  }\n+\n+  private void collectTypesFromTypeTree(TypeTree typeTree, List<Type> types, SyntaxToken correspondingCatch) {\n+    if (typeTree.is(Tree.Kind.UNION_TYPE)) {\n+      ((UnionTypeTree) typeTree).typeAlternatives().forEach(t -> collectTypesFromTypeTree(t, types, correspondingCatch));\n+    } else {\n+      Type type = typeTree.symbolType();\n+      typeToCatchToken.put(type, correspondingCatch);\n+      types.add(type);\n+    }\n+  }\n+\n+  private static boolean isChecked(Type type) {\n+    return !type.isSubtypeOf(\"java.lang.RuntimeException\")\n+      && !type.isSubtypeOf(\"java.lang.Error\")\n+      && !type.is(\"java.lang.Throwable\");\n+  }\n+\n+  private static boolean isHidden(Type baseType, Type derivedType, List<Type> thrownTypes) {\n+    return thrownTypes.stream().noneMatch(thrownType ->\n+      thrownType.isSubtypeOf(baseType) && !thrownType.isSubtypeOf(derivedType)\n+    );\n+  }\n+\n+  private static class MethodThrownTypeCollector extends BaseTreeVisitor {\n+    List<Type> thrownTypes = new ArrayList<>();\n+\n+    @Override\n+    public void visitMethodInvocation(MethodInvocationTree mit) {\n+      addAllThrownTypes(mit.symbol());\n+      super.visitMethodInvocation(mit);\n+    }\n+\n+    @Override\n+    public void visitNewClass(NewClassTree tree) {\n+      addAllThrownTypes(tree.constructorSymbol());\n+      super.visitNewClass(tree);\n+    }\n+\n+    private void addAllThrownTypes(Symbol symbol) {\n+      if (symbol.isMethodSymbol()) {\n+        thrownTypes.addAll(((Symbol.MethodSymbol) symbol).thrownTypes());\n+      }\n+    }\n+\n+    @Override\n+    public void visitClass(ClassTree tree) {\n+      // Skip class\n+    }\n+\n+    @Override\n+    public void visitLambdaExpression(LambdaExpressionTree lambdaExpressionTree) {\n+      // Skip lambdas\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34239000069a04b2a2065af41c0b528fcf3f2687"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMyOTkwNA==", "bodyText": "I think we should also visit the thrown statements, to collect which exceptions are manually thrown within the block (even if it's an ugly practice).\nI also feel that the visitor class should be renamed. What about simply ThrownExceptionCollector?", "url": "https://github.com/SonarSource/sonar-java/pull/2945#discussion_r421329904", "createdAt": "2020-05-07T08:28:42Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/UnreachableCatchCheck.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.CatchTree;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.LambdaExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.SyntaxToken;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.TryStatementTree;\n+import org.sonar.plugins.java.api.tree.TypeTree;\n+import org.sonar.plugins.java.api.tree.UnionTypeTree;\n+\n+@Rule(key = \"S4970\")\n+public class UnreachableCatchCheck extends IssuableSubscriptionVisitor {\n+\n+  private Map<Type, SyntaxToken> typeToCatchToken = new HashMap<>();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.TRY_STATEMENT);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    TryStatementTree tryStatementTree = (TryStatementTree) tree;\n+    typeToCatchToken.clear();\n+    Multimap<Type, Type> derivedToBase = getDerivedTypesCaughtBeforeBaseType(tryStatementTree.catches());\n+\n+    if (derivedToBase.isEmpty()) {\n+      return;\n+    }\n+\n+    MethodThrownTypeCollector collector = new MethodThrownTypeCollector();\n+    tryStatementTree.block().accept(collector);\n+    List<Type> thrownTypes = collector.thrownTypes;\n+\n+    derivedToBase.entries().forEach(entry -> {\n+      Type derivedType = entry.getKey();\n+      Type baseType = entry.getValue();\n+\n+      // Catching a derived type before the base type is fine if the body of the try throws an exception which is a subtype of the base type,\n+      // but not of the derived type. We have to make sure that we are not in this situation before reporting an issue.\n+      if (isHidden(baseType, derivedType, thrownTypes)) {\n+        reportIssue(typeToCatchToken.get(baseType),\n+          \"Remove this catch block because it is unreachable as hidden by previous catch blocks.\",\n+          Collections.singletonList(new JavaFileScannerContext.Location(\"Already catch the exception\", typeToCatchToken.get(derivedType))),\n+          null);\n+      }\n+    });\n+  }\n+\n+  private Multimap<Type, Type> getDerivedTypesCaughtBeforeBaseType(List<CatchTree> catches) {\n+    Multimap<Type, Type> derivedBeforeBase = HashMultimap.create();\n+\n+    List<Type> catchTypes = catches.stream()\n+      .flatMap(c -> {\n+        List<Type> types = new ArrayList<>();\n+        collectTypesFromTypeTree(c.parameter().type(), types, c.catchKeyword());\n+        return types.stream();\n+      })\n+      .filter(UnreachableCatchCheck::isChecked)\n+      .collect(Collectors.toList());\n+\n+    for (int i = 0; i < catchTypes.size() - 1; i++) {\n+      Type topType = catchTypes.get(0);\n+      for (int j = i + 1; j < catchTypes.size(); j++) {\n+        Type bottomType = catchTypes.get(j);\n+        if (topType.isSubtypeOf(bottomType)) {\n+          derivedBeforeBase.put(topType, bottomType);\n+        }\n+      }\n+    }\n+    return derivedBeforeBase;\n+  }\n+\n+  private void collectTypesFromTypeTree(TypeTree typeTree, List<Type> types, SyntaxToken correspondingCatch) {\n+    if (typeTree.is(Tree.Kind.UNION_TYPE)) {\n+      ((UnionTypeTree) typeTree).typeAlternatives().forEach(t -> collectTypesFromTypeTree(t, types, correspondingCatch));\n+    } else {\n+      Type type = typeTree.symbolType();\n+      typeToCatchToken.put(type, correspondingCatch);\n+      types.add(type);\n+    }\n+  }\n+\n+  private static boolean isChecked(Type type) {\n+    return !type.isSubtypeOf(\"java.lang.RuntimeException\")\n+      && !type.isSubtypeOf(\"java.lang.Error\")\n+      && !type.is(\"java.lang.Throwable\");\n+  }\n+\n+  private static boolean isHidden(Type baseType, Type derivedType, List<Type> thrownTypes) {\n+    return thrownTypes.stream().noneMatch(thrownType ->\n+      thrownType.isSubtypeOf(baseType) && !thrownType.isSubtypeOf(derivedType)\n+    );\n+  }\n+\n+  private static class MethodThrownTypeCollector extends BaseTreeVisitor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34239000069a04b2a2065af41c0b528fcf3f2687"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTMzNzk2OQ==", "bodyText": "what a mega map at the end. Don't you fear to have duplicates?\nif we have the following relationships (<- is subtype of):\nA <- B <- C <- D\n\nYou will end up having in the map:\nA: B,C,D // not even necessarily ordered, and could be C,D,B\nB: C,D\nC: D\n\nwhich is redundant.", "url": "https://github.com/SonarSource/sonar-java/pull/2945#discussion_r421337969", "createdAt": "2020-05-07T08:41:42Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/UnreachableCatchCheck.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.CatchTree;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.LambdaExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.SyntaxToken;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.TryStatementTree;\n+import org.sonar.plugins.java.api.tree.TypeTree;\n+import org.sonar.plugins.java.api.tree.UnionTypeTree;\n+\n+@Rule(key = \"S4970\")\n+public class UnreachableCatchCheck extends IssuableSubscriptionVisitor {\n+\n+  private Map<Type, SyntaxToken> typeToCatchToken = new HashMap<>();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.TRY_STATEMENT);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    TryStatementTree tryStatementTree = (TryStatementTree) tree;\n+    typeToCatchToken.clear();\n+    Multimap<Type, Type> derivedToBase = getDerivedTypesCaughtBeforeBaseType(tryStatementTree.catches());\n+\n+    if (derivedToBase.isEmpty()) {\n+      return;\n+    }\n+\n+    MethodThrownTypeCollector collector = new MethodThrownTypeCollector();\n+    tryStatementTree.block().accept(collector);\n+    List<Type> thrownTypes = collector.thrownTypes;\n+\n+    derivedToBase.entries().forEach(entry -> {\n+      Type derivedType = entry.getKey();\n+      Type baseType = entry.getValue();\n+\n+      // Catching a derived type before the base type is fine if the body of the try throws an exception which is a subtype of the base type,\n+      // but not of the derived type. We have to make sure that we are not in this situation before reporting an issue.\n+      if (isHidden(baseType, derivedType, thrownTypes)) {\n+        reportIssue(typeToCatchToken.get(baseType),\n+          \"Remove this catch block because it is unreachable as hidden by previous catch blocks.\",\n+          Collections.singletonList(new JavaFileScannerContext.Location(\"Already catch the exception\", typeToCatchToken.get(derivedType))),\n+          null);\n+      }\n+    });\n+  }\n+\n+  private Multimap<Type, Type> getDerivedTypesCaughtBeforeBaseType(List<CatchTree> catches) {\n+    Multimap<Type, Type> derivedBeforeBase = HashMultimap.create();\n+\n+    List<Type> catchTypes = catches.stream()\n+      .flatMap(c -> {\n+        List<Type> types = new ArrayList<>();\n+        collectTypesFromTypeTree(c.parameter().type(), types, c.catchKeyword());\n+        return types.stream();\n+      })\n+      .filter(UnreachableCatchCheck::isChecked)\n+      .collect(Collectors.toList());\n+\n+    for (int i = 0; i < catchTypes.size() - 1; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34239000069a04b2a2065af41c0b528fcf3f2687"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "957fc31b7205908769a38a8bcab2368e1af7db4e", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/957fc31b7205908769a38a8bcab2368e1af7db4e", "committedDate": "2020-05-07T11:11:00Z", "message": "Improve coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccc1c1a0343ac74d664bc1a7449cba576e3d5765", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/ccc1c1a0343ac74d664bc1a7449cba576e3d5765", "committedDate": "2020-05-07T11:15:23Z", "message": "Support exception thrown directly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23d68359fa9ca58d007faf7a3cc967c48375317c", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/23d68359fa9ca58d007faf7a3cc967c48375317c", "committedDate": "2020-05-07T12:26:33Z", "message": "Avoid issue duplication"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1683, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}