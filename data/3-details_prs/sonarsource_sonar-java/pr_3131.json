{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MDc3Nzgz", "number": 3131, "title": "SONARJAVA-3345 S3518 (division by zero) should handle BigDecimal and BigInteger", "bodyText": "", "createdAt": "2020-08-06T14:50:55Z", "url": "https://github.com/SonarSource/sonar-java/pull/3131", "merged": true, "mergeCommit": {"oid": "df5828725014529e129b577f7665d1c17b2e5564"}, "closed": true, "closedAt": "2020-08-17T11:08:54Z", "author": {"login": "quentin-jaquier-sonarsource"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9b_ARgFqTQ2Mzk3NDc2MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-wftgABqjM2NTUzMjcxMjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzOTc0NzYw", "url": "https://github.com/SonarSource/sonar-java/pull/3131#pullrequestreview-463974760", "createdAt": "2020-08-10T06:11:01Z", "commit": {"oid": "9288cf9e8b36cbb90391bef5e2be28600b221787"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjoxMTowMVrOG-CVhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjoxMTowMVrOG-CVhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMzE3NA==", "bodyText": "I addition to the above use cases, we should probably also support:\n\nThe BigInteger.ZERO and BigDecimal.ZERO identifiers\n\n  void zeroConstantBigInt(BigInteger r) {\n    BigInteger z1 = BigInteger.ZERO;\n    r = r.divide(z1); // Noncompliant\n  }\n\nKeeping \"ZERO\" constraint through \"valueOf\" from long, double to BigInteger, BigDecimal\n\n  void valueOfBigInt(BigInteger r) {\n    long z1 = 0;\n    BigInteger z2 = BigInteger.valueOf(z1);\n    r = r.divide(z2); // Noncompliant\n  }\n\nKeeping \"ZERO\" constraint through BigDecimal constructor from BigInteger, double, int, long\n\n  void constructorBigDecimal(BigDecimal r) {\n    double z1 = 0;\n    BigDecimal z2 = new BigDecimal(z1);\n    r = r.divide(z2); // Noncompliant\n  }\n\nKeeping \"ZERO\" constraint through \"toBigInteger\", \"toBigIntegerExact\", \"shortValueExact\", \"round\", \"\tremainder\", \"pow\", \"longValueExact\", \"longValue\" , \"\tintValueExact\", \"intValue\", \"floatValue\", \"doubleValue\", \"byteValueExact\", \"abs\", \tshiftLeft, shiftRight\nSupport \tBigDecimal.divideToIntegralValue like BigDecimal.divide", "url": "https://github.com/SonarSource/sonar-java/pull/3131#discussion_r467703174", "createdAt": "2020-08-10T06:11:01Z", "author": {"login": "alban-auzeill"}, "path": "java-frontend/src/test/files/se/DivisionByZeroCheck.java", "diffHunk": "@@ -495,3 +498,67 @@ private int g(int x, int y) {\n     }\n   }\n }\n+\n+class BigIntegerAndDecimal {\n+  void simpleBigInt(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0); // flow@simpleBigInt {{'valueOf()' can return zero.}} flow@simpleBigInt {{Implies 'z1' can be zero.}}\n+    BigInteger z2 = z1; // flow@simpleBigInt {{Implies 'z2' has the same value as 'z1'.}}\n+    r = r.divide(z2); // Noncompliant [[flows=simpleBigInt]] {{Make sure \"z2\" can't be zero before doing this division.}} flow@simpleBigInt {{Division by zero.}}\n+  }\n+\n+  void simpleBigDec(BigDecimal r) {\n+    BigDecimal z1 = BigDecimal.valueOf(0);;\n+    BigDecimal z2 = z1;\n+    r = r.divide(z2); // Noncompliant\n+  }\n+\n+  void bigMultiply(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger b1 = BigInteger.valueOf(4);\n+    BigInteger mult1 = z1.multiply(b1);\n+\n+    r = r.divide(mult1); // Noncompliant\n+  }\n+\n+  void bigMultiply2(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger b1 = BigInteger.valueOf(4);\n+    BigInteger mult2 = b1.multiply(z1);\n+\n+    r = r.divide(mult2); // Noncompliant\n+  }\n+\n+  void bigMultiplyChained(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger b1 = BigInteger.valueOf(4);\n+    r = r.divide(z1.multiply(b1)); // Noncompliant\n+  }\n+\n+  void bigPlus(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger z2 = BigInteger.valueOf(0);\n+    BigInteger sum1 = z1.add(z2);\n+\n+    r = r.divide(sum1); // Noncompliant\n+  }\n+\n+  void bigMinus(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger z2 = BigInteger.valueOf(0);\n+    BigInteger sum1 = z1.subtract(z2);\n+\n+    r = r.divide(sum1); // Noncompliant\n+  }\n+\n+  void bigRemainder(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger v1 = BigInteger.valueOf(42);\n+    BigInteger z2 = z1.multiply(v1);\n+    r = r.remainder(z2); // Noncompliant\n+  }\n+\n+  void simpleBigInt(BigInteger r, int value) {\n+    BigInteger z1 = BigInteger.valueOf(value);\n+    r = r.divide(z1); // Compliant\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9288cf9e8b36cbb90391bef5e2be28600b221787"}, "originalPosition": 74}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2f2c771de0561f9957b4d238f014d7bbab35200", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/c2f2c771de0561f9957b4d238f014d7bbab35200", "committedDate": "2020-08-10T12:29:56Z", "message": "Add support to BigDecimal constructor"}, "afterCommit": {"oid": "61b81a35f2ea22e719e976b229ca4c42755a024b", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/61b81a35f2ea22e719e976b229ca4c42755a024b", "committedDate": "2020-08-10T13:31:09Z", "message": "Fix code smells"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "721b3c4ff4e32f45ceb6ddec5060d2991fa4b5a9", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/721b3c4ff4e32f45ceb6ddec5060d2991fa4b5a9", "committedDate": "2020-08-14T08:37:47Z", "message": "SONARJAVA-3345 Simple handling of BigDecimal and BigInteger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2f999a0f9b940958374caced2b32d07aab1eb2d", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/e2f999a0f9b940958374caced2b32d07aab1eb2d", "committedDate": "2020-08-14T08:37:47Z", "message": "SONARJAVA-3345 support additional operations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c17d150620765d552d803b0be00389bb3be9f96", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/6c17d150620765d552d803b0be00389bb3be9f96", "committedDate": "2020-08-14T08:38:48Z", "message": "SONARJAVA-3345 Update rule description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "562561ed21d4f891998ba4da8c57741c23ba9614", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/562561ed21d4f891998ba4da8c57741c23ba9614", "committedDate": "2020-08-14T08:38:48Z", "message": "Add support for divideAndRemainder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9bc7e8d6890681753276bfaba2f27a3cd75b79b", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/a9bc7e8d6890681753276bfaba2f27a3cd75b79b", "committedDate": "2020-08-14T08:38:48Z", "message": "Add support for \"ZERO\" constant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31fae75cbd7eaa5839e54db8160fa97e0d77b2b5", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/31fae75cbd7eaa5839e54db8160fa97e0d77b2b5", "committedDate": "2020-08-14T08:38:48Z", "message": "Keep constraints from primitive types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b443b0ebb2d3f9e576f13f52a1906659c6406ce", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/6b443b0ebb2d3f9e576f13f52a1906659c6406ce", "committedDate": "2020-08-14T08:38:48Z", "message": "Keep constraints though operations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed31a615e0a0103f1038512057eaa14ef71db24d", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/ed31a615e0a0103f1038512057eaa14ef71db24d", "committedDate": "2020-08-14T08:38:48Z", "message": "Add support to BigDecimal constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2dce0aade9e9aef0d5a71e216959dc6c649d6d4", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/b2dce0aade9e9aef0d5a71e216959dc6c649d6d4", "committedDate": "2020-08-14T08:38:48Z", "message": "Fix code smells"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ad350c6f187911cefdb0435676c8c9200a9099d", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/1ad350c6f187911cefdb0435676c8c9200a9099d", "committedDate": "2020-08-14T08:38:48Z", "message": "Revert \"Add support to BigDecimal constructor\"\n\nThis reverts commit 442c3f3a09dd8bf253764b02961e30d5f55a4d76."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f70961b64d4db723e45049beeff8d87a83f8ba2", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/0f70961b64d4db723e45049beeff8d87a83f8ba2", "committedDate": "2020-08-14T08:38:48Z", "message": "Add test in Condition always true or false and fix formatting"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "61b81a35f2ea22e719e976b229ca4c42755a024b", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/61b81a35f2ea22e719e976b229ca4c42755a024b", "committedDate": "2020-08-10T13:31:09Z", "message": "Fix code smells"}, "afterCommit": {"oid": "0f70961b64d4db723e45049beeff8d87a83f8ba2", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/0f70961b64d4db723e45049beeff8d87a83f8ba2", "committedDate": "2020-08-14T08:38:48Z", "message": "Add test in Condition always true or false and fix formatting"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1675, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}