{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMjY0NjQ0", "number": 2850, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDozNToxNlrODjxGtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDozNToxNlrODjxGtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODMxMjg1OnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/se/checks/XxeProcessingCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDozNToxNlrOFvwfAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxMDo0Mzo1MlrOFvwvyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYyMTc2MQ==", "bodyText": "why not create as well a setAttributeMatcher  then? It seems to me that it would simplify the whole list", "url": "https://github.com/SonarSource/sonar-java/pull/2850#discussion_r385621761", "createdAt": "2020-02-28T10:35:16Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/se/checks/XxeProcessingCheck.java", "diffHunk": "@@ -145,57 +152,45 @@\n   private static final Map<MethodMatcher, Predicate<ConstraintsByDomain>> CONDITIONS_FOR_SECURED_BY_TYPE_NEW_CLASS = ImmutableMap.of(\n     SAX_BUILDER_CONSTRUCTOR,\n     c -> (c.hasConstraint(AttributeDTD.SECURED) && c.hasConstraint(AttributeSchema.SECURED))\n-      || c.hasConstraint(FeatureDisallowDoctypeDecl.SECURED));\n+      || c.hasConstraint(FeatureDisallowDoctypeDecl.SECURED),\n+    SAX_READER_CONSTRUCTOR,\n+    c -> c.hasConstraint(FeatureDisallowDoctypeDecl.SECURED)\n+      || c.hasConstraint(FeatureExternalGeneralEntities.SECURED));\n \n   private static final MethodMatcherCollection FEATURES_AND_PROPERTIES_SETTERS = MethodMatcherCollection.create(\n-    MethodMatcher.create()\n-      .typeDefinition(TypeCriteria.subtypeOf(XML_INPUT_FACTORY))\n-      .name(SET_PROPERTY)\n-      .parameters(JAVA_LANG_STRING, JAVA_LANG_OBJECT),\n-    MethodMatcher.create()\n-      .typeDefinition(TypeCriteria.subtypeOf(DOCUMENT_BUILDER_FACTORY))\n-      .name(SET_FEATURE)\n-      .parameters(JAVA_LANG_STRING, BOOLEAN),\n+    setPropertyMatcher(XML_INPUT_FACTORY),\n+    setFeatureMatcher(DOCUMENT_BUILDER_FACTORY),\n     MethodMatcher.create()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b95b706591bac9e23beca25c732b2ac16e9cb11"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYyNjA1OQ==", "bodyText": "True, I though it was used only once", "url": "https://github.com/SonarSource/sonar-java/pull/2850#discussion_r385626059", "createdAt": "2020-02-28T10:43:52Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-frontend/src/main/java/org/sonar/java/se/checks/XxeProcessingCheck.java", "diffHunk": "@@ -145,57 +152,45 @@\n   private static final Map<MethodMatcher, Predicate<ConstraintsByDomain>> CONDITIONS_FOR_SECURED_BY_TYPE_NEW_CLASS = ImmutableMap.of(\n     SAX_BUILDER_CONSTRUCTOR,\n     c -> (c.hasConstraint(AttributeDTD.SECURED) && c.hasConstraint(AttributeSchema.SECURED))\n-      || c.hasConstraint(FeatureDisallowDoctypeDecl.SECURED));\n+      || c.hasConstraint(FeatureDisallowDoctypeDecl.SECURED),\n+    SAX_READER_CONSTRUCTOR,\n+    c -> c.hasConstraint(FeatureDisallowDoctypeDecl.SECURED)\n+      || c.hasConstraint(FeatureExternalGeneralEntities.SECURED));\n \n   private static final MethodMatcherCollection FEATURES_AND_PROPERTIES_SETTERS = MethodMatcherCollection.create(\n-    MethodMatcher.create()\n-      .typeDefinition(TypeCriteria.subtypeOf(XML_INPUT_FACTORY))\n-      .name(SET_PROPERTY)\n-      .parameters(JAVA_LANG_STRING, JAVA_LANG_OBJECT),\n-    MethodMatcher.create()\n-      .typeDefinition(TypeCriteria.subtypeOf(DOCUMENT_BUILDER_FACTORY))\n-      .name(SET_FEATURE)\n-      .parameters(JAVA_LANG_STRING, BOOLEAN),\n+    setPropertyMatcher(XML_INPUT_FACTORY),\n+    setFeatureMatcher(DOCUMENT_BUILDER_FACTORY),\n     MethodMatcher.create()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTYyMTc2MQ=="}, "originalCommit": {"oid": "5b95b706591bac9e23beca25c732b2ac16e9cb11"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4063, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}