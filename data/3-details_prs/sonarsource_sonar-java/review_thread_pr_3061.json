{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNDM2NjQz", "number": 3061, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMTo1ODoxN1rOEJGzcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMTo1ODoxN1rOEJGzcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3OTg0MTE1OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/regex/CanonEqFlagInRegexCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMTo1ODoxN1rOGpeM4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMTo1ODoxN1rOGpeM4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjEzOTYxNw==", "bodyText": "Nice catch that enabling the flag might require using a different method and to include this in the message. \ud83d\udc4d", "url": "https://github.com/SonarSource/sonar-java/pull/3061#discussion_r446139617", "createdAt": "2020-06-26T11:58:17Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/regex/CanonEqFlagInRegexCheck.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.regex;\n+\n+import java.text.Normalizer;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.java.regex.RegexParseResult;\n+import org.sonar.java.regex.ast.CharacterClassTree;\n+import org.sonar.java.regex.ast.JavaCharacter;\n+import org.sonar.java.regex.ast.PlainCharacterTree;\n+import org.sonar.java.regex.ast.RegexBaseVisitor;\n+import org.sonar.java.regex.ast.RegexTree;\n+import org.sonar.java.regex.ast.SequenceTree;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+\n+@Rule(key = \"S5854\")\n+public class CanonEqFlagInRegexCheck extends AbstractRegexCheck {\n+\n+  protected static final MethodMatchers STRING_MATCHES = MethodMatchers.create()\n+    .ofTypes(JAVA_LANG_STRING)\n+    .names(\"matches\")\n+    .addParametersMatcher(JAVA_LANG_STRING)\n+    .build();\n+\n+  protected static final MethodMatchers STRING_REPLACE_ALL = MethodMatchers.create()\n+    .ofTypes(JAVA_LANG_STRING)\n+    .names(\"replaceAll\")\n+    .addParametersMatcher(JAVA_LANG_STRING, JAVA_LANG_STRING)\n+    .build();\n+\n+  protected static final MethodMatchers STRING_REPLACE_FIRST = MethodMatchers.create()\n+    .ofTypes(JAVA_LANG_STRING)\n+    .names(\"replaceFirst\")\n+    .addParametersMatcher(JAVA_LANG_STRING, JAVA_LANG_STRING)\n+    .build();\n+\n+  protected static final MethodMatchers PATTERN_MATCHES = MethodMatchers.create()\n+    .ofTypes(\"java.util.regex.Pattern\")\n+    .names(\"matches\")\n+    .addParametersMatcher(JAVA_LANG_STRING, \"java.lang.CharSequence\")\n+    .build();\n+\n+  @Override\n+  public void checkRegex(RegexParseResult regexForLiterals, MethodInvocationTree mit) {\n+    if (regexForLiterals.getInitialFlags().contains(Pattern.CANON_EQ)) {\n+      return;\n+    }\n+    PlainCharacterVisitor visitor = new PlainCharacterVisitor();\n+    visitor.visit(regexForLiterals);\n+\n+    if (!visitor.subjectToNormalization.isEmpty()) {\n+      String endOfMessage;\n+      if (STRING_MATCHES.matches(mit) || PATTERN_MATCHES.matches(mit)) {\n+        endOfMessage = \"\\\"Pattern.compile(regex, CANON_EQ).matcher(input).matches()\\\"\";\n+      } else if (STRING_REPLACE_ALL.matches(mit)) {\n+        endOfMessage = \"\\\"Pattern.compile(pattern, CANON_EQ).matcher(input).replaceAll(replacement)\\\"\";\n+      } else if (STRING_REPLACE_FIRST.matches(mit)) {\n+        endOfMessage = \"\\\"Pattern.compile(pattern, CANON_EQ).matcher(input).replaceFirst(replacement)\\\"\";\n+      } else {\n+        endOfMessage = \"this pattern\";\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6003e8dd63331c84913cfdb4b6a734d16b088784"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3938, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}