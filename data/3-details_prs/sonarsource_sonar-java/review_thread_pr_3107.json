{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NTAzMTkx", "number": 3107, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjozMjoyN1rOEN5YDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjozODowMFrOEN5hDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDA2OTkwOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/StaticMultithreadedUnsafeFieldsCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjozMjoyN1rOGwwbEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjozMjoyN1rOGwwbEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3ODE5Mw==", "bodyText": "The method should probably be renamed since it's no longer just about the type. Maybe just isForbidden.", "url": "https://github.com/SonarSource/sonar-java/pull/3107#discussion_r453778193", "createdAt": "2020-07-13T16:32:27Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/StaticMultithreadedUnsafeFieldsCheck.java", "diffHunk": "@@ -61,8 +68,20 @@ public void visitNode(Tree tree) {\n   }\n \n   private static boolean isForbiddenType(VariableTree variableTree) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a481f92a6a48f741df51e5cef02c7fd350ef7b4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDA3NzQxOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/StaticMultithreadedUnsafeFieldsCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjozNDoxOVrOGwwflw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjozNDoxOVrOGwwflw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc3OTM1MQ==", "bodyText": "The two ifs that return false can be combined into one:\nif (initializer == null || initializer.is(Tree.Kind.NULL_LITERAL)) {\n  return false;\n}", "url": "https://github.com/SonarSource/sonar-java/pull/3107#discussion_r453779351", "createdAt": "2020-07-13T16:34:19Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/StaticMultithreadedUnsafeFieldsCheck.java", "diffHunk": "@@ -61,8 +68,20 @@ public void visitNode(Tree tree) {\n   }\n \n   private static boolean isForbiddenType(VariableTree variableTree) {\n+    if (isForbiddenType(variableTree.type().symbolType())) {\n+      return true;\n+    }\n     ExpressionTree initializer = variableTree.initializer();\n-    return isForbiddenType(variableTree.type().symbolType()) || (initializer != null && !initializer.is(Tree.Kind.NULL_LITERAL) && isForbiddenType(initializer.symbolType()));\n+    if (initializer == null) {\n+      return false;\n+    }\n+    if (initializer.is(Tree.Kind.NULL_LITERAL)) {\n+      return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a481f92a6a48f741df51e5cef02c7fd350ef7b4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMDA5MjkzOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/StaticMultithreadedUnsafeFieldsCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjozODowMFrOGwwoyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjozODowMFrOGwwoyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc4MTcwNw==", "bodyText": "This will break the case where the initializer is a method call returning a forbidden type (which should be added as a test case since currently there are only test where a constructor is called rather than a method). The check for isForbiddenType(initializer.symbolType()) should come before this one. Or alternatively this one should only return if the method matcher matches, i.e.:\nif (initializer.is(Tree.Kind.METHOD_INVOCATION) && GET_DATE_INSTANCE.matches((MethodInvocationTree) initializer)) {\n  return true;\n}", "url": "https://github.com/SonarSource/sonar-java/pull/3107#discussion_r453781707", "createdAt": "2020-07-13T16:38:00Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/StaticMultithreadedUnsafeFieldsCheck.java", "diffHunk": "@@ -61,8 +68,20 @@ public void visitNode(Tree tree) {\n   }\n \n   private static boolean isForbiddenType(VariableTree variableTree) {\n+    if (isForbiddenType(variableTree.type().symbolType())) {\n+      return true;\n+    }\n     ExpressionTree initializer = variableTree.initializer();\n-    return isForbiddenType(variableTree.type().symbolType()) || (initializer != null && !initializer.is(Tree.Kind.NULL_LITERAL) && isForbiddenType(initializer.symbolType()));\n+    if (initializer == null) {\n+      return false;\n+    }\n+    if (initializer.is(Tree.Kind.NULL_LITERAL)) {\n+      return false;\n+    }\n+    if (initializer.is(Tree.Kind.METHOD_INVOCATION)) {\n+      return GET_DATE_INSTANCE.matches((MethodInvocationTree) initializer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a481f92a6a48f741df51e5cef02c7fd350ef7b4"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3959, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}