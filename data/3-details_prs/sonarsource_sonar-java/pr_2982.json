{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3MTgwMjM5", "number": 2982, "title": "Regex/sebastian/improve parser", "bodyText": "", "createdAt": "2020-06-03T12:49:05Z", "url": "https://github.com/SonarSource/sonar-java/pull/2982", "merged": true, "mergeCommit": {"oid": "c8f44d0149cfecc5a8357f237d9ef5c47284b0b1"}, "closed": true, "closedAt": "2020-06-04T09:19:13Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcno8JvAH2gAyNDI3MTgwMjM5OjlkYzFhNTAzMGFmNWEyZDMzMTNmZDc1YTkyZDQwZTAwNjllZjI3YTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcn6AaCABqjM0MDU3NjgwNjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9dc1a5030af5a2d3313fd75a92d40e0069ef27a7", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/9dc1a5030af5a2d3313fd75a92d40e0069ef27a7", "committedDate": "2020-06-03T12:51:02Z", "message": "Handle Java string escape sequences in regex parser"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d0e86735ccef65cb7f5180749761b5b75fbc5051", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/d0e86735ccef65cb7f5180749761b5b75fbc5051", "committedDate": "2020-06-03T12:43:17Z", "message": "Rework handling of escapes in Regex parser\n\nProcessing now works in three stages:\n\n* Handling Unicode escapes\n* Handling non-Unicode Java escape sequences\n* Actually parse the regex"}, "afterCommit": {"oid": "46274c8a91ca2bdb770aece46dc2e0981aaf604d", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/46274c8a91ca2bdb770aece46dc2e0981aaf604d", "committedDate": "2020-06-03T12:51:02Z", "message": "Rework handling of escapes in Regex parser\n\nProcessing now works in three stages:\n\n* Handling Unicode escapes\n* Handling non-Unicode Java escape sequences\n* Actually parse the regex"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd54df0444696cfef08bb38c9d2847afac49446a", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/cd54df0444696cfef08bb38c9d2847afac49446a", "committedDate": "2020-06-03T13:19:22Z", "message": "Rework handling of escapes in Regex parser\n\nProcessing now works in three stages:\n\n* Handling Unicode escapes\n* Handling non-Unicode Java escape sequences\n* Actually parse the regex"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46274c8a91ca2bdb770aece46dc2e0981aaf604d", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/46274c8a91ca2bdb770aece46dc2e0981aaf604d", "committedDate": "2020-06-03T12:51:02Z", "message": "Rework handling of escapes in Regex parser\n\nProcessing now works in three stages:\n\n* Handling Unicode escapes\n* Handling non-Unicode Java escape sequences\n* Actually parse the regex"}, "afterCommit": {"oid": "cd54df0444696cfef08bb38c9d2847afac49446a", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/cd54df0444696cfef08bb38c9d2847afac49446a", "committedDate": "2020-06-03T13:19:22Z", "message": "Rework handling of escapes in Regex parser\n\nProcessing now works in three stages:\n\n* Handling Unicode escapes\n* Handling non-Unicode Java escape sequences\n* Actually parse the regex"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f3624588f307a670b1310327f46869926327dd9", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/7f3624588f307a670b1310327f46869926327dd9", "committedDate": "2020-06-03T15:28:08Z", "message": "Support escaped meta characters in regex parser"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MTYwODE5", "url": "https://github.com/SonarSource/sonar-java/pull/2982#pullrequestreview-424160819", "createdAt": "2020-06-04T07:12:39Z", "commit": {"oid": "7f3624588f307a670b1310327f46869926327dd9"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzoxMjo0MFrOGe4rmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzoyMTo0NVrOGe49Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzOTEzMQ==", "bodyText": "Should be annotated with @CheckForNull", "url": "https://github.com/SonarSource/sonar-java/pull/2982#discussion_r435039131", "createdAt": "2020-06-04T07:12:40Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/regex/JavaCharacterParser.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.regex;\n+\n+import org.sonar.java.regex.ast.IndexRange;\n+import org.sonar.java.regex.ast.JavaCharacter;\n+import org.sonar.java.regex.ast.RegexSource;\n+\n+/**\n+ * Parse the contents of string literals and provide the individual characters of the string after processing escape\n+ * sequences\n+ */\n+public class JavaCharacterParser {\n+\n+  public static final int EOF = -1;\n+\n+  private final RegexSource source;\n+\n+  private final JavaUnicodeEscapeParser unicodeProcessedCharacters;\n+\n+  private JavaCharacter current;\n+\n+  public JavaCharacterParser(RegexSource source) {\n+    this.source = source;\n+    this.unicodeProcessedCharacters = new JavaUnicodeEscapeParser(source);\n+    moveNext();\n+  }\n+\n+  public void moveNext() {\n+    current = parseJavaCharacter();\n+  }\n+\n+  public JavaCharacter getCurrent() {\n+    return current;\n+  }\n+\n+  public int getCurrentChar() {\n+    if (current != null) {\n+      return current.getCharacter();\n+    } else {\n+      return EOF;\n+    }\n+  }\n+\n+  public IndexRange getCurrentIndexRange() {\n+    if (current != null) {\n+      return current.getRange();\n+    } else {\n+      return new IndexRange(source.length(), source.length());\n+    }\n+  }\n+\n+  public int getCurrentStartIndex() {\n+    if (current == null) {\n+      return source.length();\n+    } else {\n+      return current.getRange().getBeginningOffset();\n+    }\n+  }\n+\n+  public boolean isAtEnd() {\n+    return current == null;\n+  }\n+\n+  public boolean isNotAtEnd() {\n+    return current != null;\n+  }\n+\n+  public boolean currentIs(char ch) {\n+    return current != null && current.getCharacter() == ch;\n+  }\n+\n+  private JavaCharacter parseJavaCharacter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f3624588f307a670b1310327f46869926327dd9"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzOTYyNA==", "bodyText": "I would annotate this field with @Nullable and explicitly document when it will be null (end of source?)", "url": "https://github.com/SonarSource/sonar-java/pull/2982#discussion_r435039624", "createdAt": "2020-06-04T07:13:37Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/regex/JavaCharacterParser.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.regex;\n+\n+import org.sonar.java.regex.ast.IndexRange;\n+import org.sonar.java.regex.ast.JavaCharacter;\n+import org.sonar.java.regex.ast.RegexSource;\n+\n+/**\n+ * Parse the contents of string literals and provide the individual characters of the string after processing escape\n+ * sequences\n+ */\n+public class JavaCharacterParser {\n+\n+  public static final int EOF = -1;\n+\n+  private final RegexSource source;\n+\n+  private final JavaUnicodeEscapeParser unicodeProcessedCharacters;\n+\n+  private JavaCharacter current;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f3624588f307a670b1310327f46869926327dd9"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0MDIzMQ==", "bodyText": "Should be annotated with @CheckForNull as well, when encountering invalid string literals.", "url": "https://github.com/SonarSource/sonar-java/pull/2982#discussion_r435040231", "createdAt": "2020-06-04T07:14:54Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/regex/JavaCharacterParser.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.regex;\n+\n+import org.sonar.java.regex.ast.IndexRange;\n+import org.sonar.java.regex.ast.JavaCharacter;\n+import org.sonar.java.regex.ast.RegexSource;\n+\n+/**\n+ * Parse the contents of string literals and provide the individual characters of the string after processing escape\n+ * sequences\n+ */\n+public class JavaCharacterParser {\n+\n+  public static final int EOF = -1;\n+\n+  private final RegexSource source;\n+\n+  private final JavaUnicodeEscapeParser unicodeProcessedCharacters;\n+\n+  private JavaCharacter current;\n+\n+  public JavaCharacterParser(RegexSource source) {\n+    this.source = source;\n+    this.unicodeProcessedCharacters = new JavaUnicodeEscapeParser(source);\n+    moveNext();\n+  }\n+\n+  public void moveNext() {\n+    current = parseJavaCharacter();\n+  }\n+\n+  public JavaCharacter getCurrent() {\n+    return current;\n+  }\n+\n+  public int getCurrentChar() {\n+    if (current != null) {\n+      return current.getCharacter();\n+    } else {\n+      return EOF;\n+    }\n+  }\n+\n+  public IndexRange getCurrentIndexRange() {\n+    if (current != null) {\n+      return current.getRange();\n+    } else {\n+      return new IndexRange(source.length(), source.length());\n+    }\n+  }\n+\n+  public int getCurrentStartIndex() {\n+    if (current == null) {\n+      return source.length();\n+    } else {\n+      return current.getRange().getBeginningOffset();\n+    }\n+  }\n+\n+  public boolean isAtEnd() {\n+    return current == null;\n+  }\n+\n+  public boolean isNotAtEnd() {\n+    return current != null;\n+  }\n+\n+  public boolean currentIs(char ch) {\n+    return current != null && current.getCharacter() == ch;\n+  }\n+\n+  private JavaCharacter parseJavaCharacter() {\n+    JavaCharacter javaCharacter = unicodeProcessedCharacters.getCurrent();\n+    if (javaCharacter == null) {\n+      return null;\n+    }\n+    if (javaCharacter.getCharacter() == '\\\\') {\n+      return parseJavaEscapeSequence(javaCharacter);\n+    }\n+    unicodeProcessedCharacters.moveNext();\n+    return javaCharacter;\n+  }\n+\n+  private JavaCharacter parseJavaEscapeSequence(JavaCharacter backslash) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f3624588f307a670b1310327f46869926327dd9"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0MzY3MA==", "bodyText": "I think I would move out of the switch the statement unicodeProcessedCharacters.moveNext();, I think it simplifies a bit:\n    switch (ch) {\n      case 'n':\n        ch = '\\n';\n        break;\n      case 'r':\n        ch = '\\r';\n        break;\n      case 'f':\n        ch = '\\f';\n        break;\n      case 'b':\n        ch = '\\b';\n        break;\n      case 't':\n        ch = '\\t';\n        break;\n      default:\n        if (isOctalDigit(ch)) {\n          StringBuilder codeUnit = new StringBuilder(3);\n          for (int i = 0; i < 3 && javaCharacter != null && isOctalDigit(javaCharacter.getCharacter()); i++) {\n            codeUnit.append(javaCharacter.getCharacter());\n            unicodeProcessedCharacters.moveNext();\n            javaCharacter = unicodeProcessedCharacters.getCurrent();\n          }\n          ch = (char) Integer.parseInt(codeUnit.toString(), 8);\n          return new JavaCharacter(source, backslash.getRange().extendTo(getCurrentStartIndex()), ch);\n        }\n    }\n    unicodeProcessedCharacters.moveNext();\n    return new JavaCharacter(source, backslash.getRange().extendTo(getCurrentStartIndex()), ch);", "url": "https://github.com/SonarSource/sonar-java/pull/2982#discussion_r435043670", "createdAt": "2020-06-04T07:21:45Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/regex/JavaCharacterParser.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.regex;\n+\n+import org.sonar.java.regex.ast.IndexRange;\n+import org.sonar.java.regex.ast.JavaCharacter;\n+import org.sonar.java.regex.ast.RegexSource;\n+\n+/**\n+ * Parse the contents of string literals and provide the individual characters of the string after processing escape\n+ * sequences\n+ */\n+public class JavaCharacterParser {\n+\n+  public static final int EOF = -1;\n+\n+  private final RegexSource source;\n+\n+  private final JavaUnicodeEscapeParser unicodeProcessedCharacters;\n+\n+  private JavaCharacter current;\n+\n+  public JavaCharacterParser(RegexSource source) {\n+    this.source = source;\n+    this.unicodeProcessedCharacters = new JavaUnicodeEscapeParser(source);\n+    moveNext();\n+  }\n+\n+  public void moveNext() {\n+    current = parseJavaCharacter();\n+  }\n+\n+  public JavaCharacter getCurrent() {\n+    return current;\n+  }\n+\n+  public int getCurrentChar() {\n+    if (current != null) {\n+      return current.getCharacter();\n+    } else {\n+      return EOF;\n+    }\n+  }\n+\n+  public IndexRange getCurrentIndexRange() {\n+    if (current != null) {\n+      return current.getRange();\n+    } else {\n+      return new IndexRange(source.length(), source.length());\n+    }\n+  }\n+\n+  public int getCurrentStartIndex() {\n+    if (current == null) {\n+      return source.length();\n+    } else {\n+      return current.getRange().getBeginningOffset();\n+    }\n+  }\n+\n+  public boolean isAtEnd() {\n+    return current == null;\n+  }\n+\n+  public boolean isNotAtEnd() {\n+    return current != null;\n+  }\n+\n+  public boolean currentIs(char ch) {\n+    return current != null && current.getCharacter() == ch;\n+  }\n+\n+  private JavaCharacter parseJavaCharacter() {\n+    JavaCharacter javaCharacter = unicodeProcessedCharacters.getCurrent();\n+    if (javaCharacter == null) {\n+      return null;\n+    }\n+    if (javaCharacter.getCharacter() == '\\\\') {\n+      return parseJavaEscapeSequence(javaCharacter);\n+    }\n+    unicodeProcessedCharacters.moveNext();\n+    return javaCharacter;\n+  }\n+\n+  private JavaCharacter parseJavaEscapeSequence(JavaCharacter backslash) {\n+    unicodeProcessedCharacters.moveNext();\n+    JavaCharacter javaCharacter = unicodeProcessedCharacters.getCurrent();\n+    if (javaCharacter == null) {\n+      // Should only happen in case of syntactically invalid string literals\n+      return null;\n+    }\n+    char ch = javaCharacter.getCharacter();\n+    switch (ch) {\n+      case 'n':\n+        ch = '\\n';\n+        unicodeProcessedCharacters.moveNext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f3624588f307a670b1310327f46869926327dd9"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34b560f2acc1b83e675098a05a691befe2b0a69d", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/34b560f2acc1b83e675098a05a691befe2b0a69d", "committedDate": "2020-06-04T08:43:53Z", "message": "Fixes from review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63a3aad75ba8f9b44e111b953f106ca4600b0620", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/63a3aad75ba8f9b44e111b953f106ca4600b0620", "committedDate": "2020-06-04T08:34:24Z", "message": "Fixes from review"}, "afterCommit": {"oid": "34b560f2acc1b83e675098a05a691befe2b0a69d", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/34b560f2acc1b83e675098a05a691befe2b0a69d", "committedDate": "2020-06-04T08:43:53Z", "message": "Fixes from review"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1707, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}