{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2Nzg0MDc1", "number": 3232, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDoxNTo0OFrOEpw12A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDoxNTo0OFrOEpw12A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjI3Mjg4OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/security/DataHashingCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDoxNTo0OFrOHbob3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMTowODoxNlrOHbpwTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczNjA5Mw==", "bodyText": "The result of this method is used without null check, relying on the fact that DEPRECATED_HASH_CLASSES set contains exactly all the value of DeprecatedSpringPasswordEncoder, synchronization that has to be done \"by hand\". I'm not sure it's a good pattern, I would rather return an Optional here or consistently check it for null.", "url": "https://github.com/SonarSource/sonar-java/pull/3232#discussion_r498736093", "createdAt": "2020-10-02T10:15:48Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/DataHashingCheck.java", "diffHunk": "@@ -19,9 +19,33 @@\n  */\n package org.sonar.java.checks.security;\n \n+import com.google.common.collect.ImmutableSet;\n+import java.util.Set;\n import org.sonar.check.Rule;\n import org.sonar.java.checks.AbstractHashAlgorithmChecker;\n \n @Rule(key = \"S4790\")\n public class DataHashingCheck extends AbstractHashAlgorithmChecker {\n+\n+  public static final Set<String> DEPRECATED_HASH_CLASSES = ImmutableSet.of(\n+    DeprecatedSpringPasswordEncoder.MD5.classFqn,\n+    DeprecatedSpringPasswordEncoder.SHA.classFqn,\n+    DeprecatedSpringPasswordEncoder.LDAP.classFqn,\n+    DeprecatedSpringPasswordEncoder.MD4.classFqn,\n+    DeprecatedSpringPasswordEncoder.MESSAGE_DIGEST.classFqn,\n+    DeprecatedSpringPasswordEncoder.NO_OP.classFqn,\n+    DeprecatedSpringPasswordEncoder.STANDARD.classFqn\n+  );\n+\n+  private static final String MESSAGE = \"Make sure this weak hash algorithm is not used in a sensitive context here.\";\n+\n+  @Override\n+  protected String getMessageForClass(String className) {\n+    return DEPRECATED_HASH_CLASSES.contains(className) ? MESSAGE : null;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a4629cee383345f8fc730080202356b746a14df"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc1NzcwOQ==", "bodyText": "I refactored it, but to my mind, as far as the implementation of AbstractMethodDetection and AbstractHashAlgorithmChecker guarantees there will never happen null. If someone will need to add a new class and forget to update it, there will be problem during implementation and testing. So will never go to production.\nOn the other hand, if we just hide someone's mistake by adding optional, that might not be a good experience to fix it.", "url": "https://github.com/SonarSource/sonar-java/pull/3232#discussion_r498757709", "createdAt": "2020-10-02T11:08:16Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/DataHashingCheck.java", "diffHunk": "@@ -19,9 +19,33 @@\n  */\n package org.sonar.java.checks.security;\n \n+import com.google.common.collect.ImmutableSet;\n+import java.util.Set;\n import org.sonar.check.Rule;\n import org.sonar.java.checks.AbstractHashAlgorithmChecker;\n \n @Rule(key = \"S4790\")\n public class DataHashingCheck extends AbstractHashAlgorithmChecker {\n+\n+  public static final Set<String> DEPRECATED_HASH_CLASSES = ImmutableSet.of(\n+    DeprecatedSpringPasswordEncoder.MD5.classFqn,\n+    DeprecatedSpringPasswordEncoder.SHA.classFqn,\n+    DeprecatedSpringPasswordEncoder.LDAP.classFqn,\n+    DeprecatedSpringPasswordEncoder.MD4.classFqn,\n+    DeprecatedSpringPasswordEncoder.MESSAGE_DIGEST.classFqn,\n+    DeprecatedSpringPasswordEncoder.NO_OP.classFqn,\n+    DeprecatedSpringPasswordEncoder.STANDARD.classFqn\n+  );\n+\n+  private static final String MESSAGE = \"Make sure this weak hash algorithm is not used in a sensitive context here.\";\n+\n+  @Override\n+  protected String getMessageForClass(String className) {\n+    return DEPRECATED_HASH_CLASSES.contains(className) ? MESSAGE : null;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczNjA5Mw=="}, "originalCommit": {"oid": "6a4629cee383345f8fc730080202356b746a14df"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3788, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}