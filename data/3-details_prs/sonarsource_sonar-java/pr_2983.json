{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3MzAwNjE0", "number": 2983, "title": "[REGEX] Extends cases supported by AbstractRegexCheck", "bodyText": "", "createdAt": "2020-06-03T15:53:00Z", "url": "https://github.com/SonarSource/sonar-java/pull/2983", "merged": true, "mergeCommit": {"oid": "3ee7baea05ea51d15bd31d5cbb45b944a7a553b1"}, "closed": true, "closedAt": "2020-06-04T15:47:09Z", "author": {"login": "m-g-sonar"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnrjbygBqjM0MDI4NTc1MDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcn_dWEAH2gAyNDI3MzAwNjE0OjVmMWMwYjgxNGMwYjQ3YTM0YjI4MDViZDYyNTA2MTYyMTU1ZWZjZmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ead80eac3e7fc67544cfdec0b53488a5b2c4e2e", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/8ead80eac3e7fc67544cfdec0b53488a5b2c4e2e", "committedDate": "2020-06-03T15:47:44Z", "message": "[REGEX] Extends cases supported by AbstractRegexCheck\n\nAdd support of:\n- Concatened Strings\n- Usage of Variables\n\nAnd define a dedicated interface for regex parser"}, "afterCommit": {"oid": "f5de8b30534a2be213f27f0b14cb4eabba26b2f4", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/f5de8b30534a2be213f27f0b14cb4eabba26b2f4", "committedDate": "2020-06-03T15:53:34Z", "message": "[REGEX] Extends cases supported by AbstractRegexCheck\n\nAdd support of:\n- Concatened Strings\n- Usage of Variables\n\nAnd define a dedicated interface for regex parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e0a4735c803bb69ad9877b591fa62f0d6341638", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/7e0a4735c803bb69ad9877b591fa62f0d6341638", "committedDate": "2020-06-04T09:45:24Z", "message": "[REGEX] Extends cases supported by AbstractRegexCheck\n\nAdd support of:\n- Concatened Strings\n- Usage of Variables\n\nAnd define a dedicated interface for regex parser"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5de8b30534a2be213f27f0b14cb4eabba26b2f4", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/f5de8b30534a2be213f27f0b14cb4eabba26b2f4", "committedDate": "2020-06-03T15:53:34Z", "message": "[REGEX] Extends cases supported by AbstractRegexCheck\n\nAdd support of:\n- Concatened Strings\n- Usage of Variables\n\nAnd define a dedicated interface for regex parser"}, "afterCommit": {"oid": "7e0a4735c803bb69ad9877b591fa62f0d6341638", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/7e0a4735c803bb69ad9877b591fa62f0d6341638", "committedDate": "2020-06-04T09:45:24Z", "message": "[REGEX] Extends cases supported by AbstractRegexCheck\n\nAdd support of:\n- Concatened Strings\n- Usage of Variables\n\nAnd define a dedicated interface for regex parser"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDIzNDg1", "url": "https://github.com/SonarSource/sonar-java/pull/2983#pullrequestreview-424423485", "createdAt": "2020-06-04T13:10:12Z", "commit": {"oid": "7e0a4735c803bb69ad9877b591fa62f0d6341638"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoxMDoxM1rOGfE8RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoxMDoxM1rOGfE8RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0MDAwNQ==", "bodyText": "Is there a way to check whether a variable is effectively final? Because I'd like this to work with locals and locals are rarely explicitly defined as final.", "url": "https://github.com/SonarSource/sonar-java/pull/2983#discussion_r435240005", "createdAt": "2020-06-04T13:10:13Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/regex/AbstractRegexCheck.java", "diffHunk": "@@ -53,27 +62,84 @@\n       .withAnyParameters()\n       .build());\n \n+  private RegexScannerContext regexContext;\n+\n   @Override\n-  protected MethodMatchers getMethodInvocationMatchers() {\n+  public final void setContext(JavaFileScannerContext context) {\n+    this.regexContext = (RegexScannerContext) context;\n+    super.setContext(context);\n+  }\n+\n+  @Override\n+  protected final MethodMatchers getMethodInvocationMatchers() {\n     return REGEX_METHODS;\n   }\n \n   @Override\n-  protected void onMethodInvocationFound(MethodInvocationTree mit) {\n+  protected final void onMethodInvocationFound(MethodInvocationTree mit) {\n     Arguments args = mit.arguments();\n     if (args.isEmpty()) {\n       return;\n     }\n-    ExpressionTree arg0 = args.get(0);\n-    if (arg0.is(Tree.Kind.STRING_LITERAL)) {\n-      checkRegex(((DefaultJavaFileScannerContext) context).regexForLiterals((LiteralTree) arg0), mit);\n+    getLiterals(args.get(0))\n+      .map(regexContext::regexForLiterals)\n+      .ifPresent(result -> checkRegex(result, mit));\n+  }\n+\n+  @VisibleForTesting\n+  protected static Optional<LiteralTree[]> getLiterals(ExpressionTree expr) {\n+    switch (expr.kind()) {\n+      case PLUS:\n+        return getLiteralsFromStringConcatenation((BinaryExpressionTree) expr);\n+      case IDENTIFIER:\n+        return getLiteralsFromFinalVariables((IdentifierTree) expr);\n+      case PARENTHESIZED_EXPRESSION:\n+        return getLiterals(ExpressionUtils.skipParentheses(expr));\n+      case STRING_LITERAL:\n+        return Optional.of(new LiteralTree[] {(LiteralTree) expr});\n+      default:\n+        return Optional.empty();\n+    }\n+  }\n+\n+  private static Optional<LiteralTree[]> getLiteralsFromStringConcatenation(BinaryExpressionTree expr) {\n+    Optional<LiteralTree[]> leftLiterals = getLiterals(expr.leftOperand());\n+    if (!leftLiterals.isPresent()) {\n+      return Optional.empty();\n+    }\n+    Optional<LiteralTree[]> rightLiterals = getLiterals(expr.rightOperand());\n+    if (!rightLiterals.isPresent()) {\n+      return Optional.empty();\n+    }\n+    LiteralTree[] combined = Streams.concat(Arrays.stream(leftLiterals.get()), Arrays.stream(rightLiterals.get())).toArray(LiteralTree[]::new);\n+    return Optional.of(combined);\n+  }\n+\n+  private static Optional<LiteralTree[]> getLiteralsFromFinalVariables(IdentifierTree identifier) {\n+    Symbol symbol = identifier.symbol();\n+    if (!symbol.isVariableSymbol()) {\n+      return Optional.empty();\n+    }\n+\n+    Symbol.VariableSymbol variableSymbol = (Symbol.VariableSymbol) symbol;\n+    if (!variableSymbol.isFinal()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e0a4735c803bb69ad9877b591fa62f0d6341638"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f1c0b814c0b47a34b2805bd62506162155efcfc", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/5f1c0b814c0b47a34b2805bd62506162155efcfc", "committedDate": "2020-06-04T15:05:12Z", "message": "fix from review: add support of effectively final variables"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1709, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}