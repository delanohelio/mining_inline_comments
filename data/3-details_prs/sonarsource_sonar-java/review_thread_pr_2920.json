{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NDQ2Njk5", "number": 2920, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMTo1NzowNFrOD1vP1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjo0MTowN1rOD1wUvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3Njc1MjIzOnYy", "diffSide": "RIGHT", "path": "java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMTo1NzowNFrOGLUNxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjozMzo0MVrOGLVihw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUxODcyNQ==", "bodyText": "We should add a test to assert that we look at org.junit.jupiter.api.Test and no other annotations.\ne.g.:\n@org.junit.Test\npublic void testPublic() {} // Compliant, JUnit 4", "url": "https://github.com/SonarSource/sonar-java/pull/2920#discussion_r414518725", "createdAt": "2020-04-24T11:57:04Z", "author": {"login": "alban-auzeill"}, "path": "java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package checks;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class TestClassAndMethodVisibilityCheckTest {\n+\n+  @Test\n+  public void testPublic() {} // Noncompliant [[sc=3;ec=9]] {{Remove this access modifier}}\n+\n+  @Test\n+  protected void testProtected() {} // Noncompliant [[sc=3;ec=12]] {{Remove this access modifier}}\n+\n+  @Test\n+  private void testPrivate() {} // Noncompliant [[sc=3;ec=10]] {{Remove this access modifier}}\n+\n+  @Test\n+  void testDefault() {} // compliant\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e128e6d15536aeb7fe0955d14a5822c48627849d"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU0MDQyMw==", "bodyText": "\u1e81e should add a test with other modifiers (e.g. final or synchronized) to show the rule only target public, private and protected", "url": "https://github.com/SonarSource/sonar-java/pull/2920#discussion_r414540423", "createdAt": "2020-04-24T12:33:41Z", "author": {"login": "alban-auzeill"}, "path": "java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package checks;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class TestClassAndMethodVisibilityCheckTest {\n+\n+  @Test\n+  public void testPublic() {} // Noncompliant [[sc=3;ec=9]] {{Remove this access modifier}}\n+\n+  @Test\n+  protected void testProtected() {} // Noncompliant [[sc=3;ec=12]] {{Remove this access modifier}}\n+\n+  @Test\n+  private void testPrivate() {} // Noncompliant [[sc=3;ec=10]] {{Remove this access modifier}}\n+\n+  @Test\n+  void testDefault() {} // compliant\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUxODcyNQ=="}, "originalCommit": {"oid": "e128e6d15536aeb7fe0955d14a5822c48627849d"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3Njc3NzE5OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjowMzozNFrOGLUcDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjo0Nzo0OVrOGLWEHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMjM4MQ==", "bodyText": "The rule target properly METHOD, but for CLASS it's more complicated. A JUnit 5 test class is a class that contains at least one test method. I would probably register only on CLASS, then check all members for test methods. So I could at the same time check if one test method exists and check if each test method is compliant.", "url": "https://github.com/SonarSource/sonar-java/pull/2920#discussion_r414522381", "createdAt": "2020-04-24T12:03:34Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.ModifiersTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5786\")\n+public class TestClassAndMethodVisibilityCheck extends IssuableSubscriptionVisitor {\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD, Tree.Kind.CLASS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e128e6d15536aeb7fe0955d14a5822c48627849d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU0OTAyMg==", "bodyText": "Ah of course, I'm not filtering properly, my bad", "url": "https://github.com/SonarSource/sonar-java/pull/2920#discussion_r414549022", "createdAt": "2020-04-24T12:47:49Z", "author": {"login": "johann-beleites-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.ModifiersTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5786\")\n+public class TestClassAndMethodVisibilityCheck extends IssuableSubscriptionVisitor {\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD, Tree.Kind.CLASS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyMjM4MQ=="}, "originalCommit": {"oid": "e128e6d15536aeb7fe0955d14a5822c48627849d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NjgwNDg3OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjoxMDoxNlrOGLUryQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjoxMDoxNlrOGLUryQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyNjQwOQ==", "bodyText": "There's not only org.junit.jupiter.api.Test that indicate it's a JUnit 5 test method, you can use UnitTestUtils.hasJUnit5TestAnnotation(...)\nI recently use it in JunitNestedAnnotationCheck:\n  private static boolean hasJUnit5TestMethods(ClassTree classTree) {\n    return classTree.members().stream()\n      .filter(member -> member.is(Tree.Kind.METHOD))\n      .map(MethodTree.class::cast)\n      .anyMatch(UnitTestUtils::hasJUnit5TestAnnotation);\n  }", "url": "https://github.com/SonarSource/sonar-java/pull/2920#discussion_r414526409", "createdAt": "2020-04-24T12:10:16Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.ModifiersTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5786\")\n+public class TestClassAndMethodVisibilityCheck extends IssuableSubscriptionVisitor {\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD, Tree.Kind.CLASS);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (!hasSemantic()) {\n+      return;\n+    }\n+\n+    ModifiersTree modifiers;\n+    Symbol symbol;\n+    if (tree.is(Tree.Kind.METHOD)) {\n+      MethodTree methodTree = (MethodTree) tree;\n+      symbol = methodTree.symbol();\n+      modifiers = methodTree.modifiers();\n+    } else {\n+      ClassTree classTree = (ClassTree) tree;\n+      symbol = classTree.symbol();\n+      modifiers = classTree.modifiers();\n+    }\n+\n+    if (symbol.metadata().isAnnotatedWith(\"org.junit.jupiter.api.Test\") && !symbol.isPackageVisibility()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e128e6d15536aeb7fe0955d14a5822c48627849d"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3Njg0NzQxOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjoyMTowMlrOGLVEcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjoyMTowMlrOGLVEcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzMjcyMQ==", "bodyText": "why parallelStream() and not stream()?", "url": "https://github.com/SonarSource/sonar-java/pull/2920#discussion_r414532721", "createdAt": "2020-04-24T12:21:02Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.ModifiersTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5786\")\n+public class TestClassAndMethodVisibilityCheck extends IssuableSubscriptionVisitor {\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD, Tree.Kind.CLASS);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (!hasSemantic()) {\n+      return;\n+    }\n+\n+    ModifiersTree modifiers;\n+    Symbol symbol;\n+    if (tree.is(Tree.Kind.METHOD)) {\n+      MethodTree methodTree = (MethodTree) tree;\n+      symbol = methodTree.symbol();\n+      modifiers = methodTree.modifiers();\n+    } else {\n+      ClassTree classTree = (ClassTree) tree;\n+      symbol = classTree.symbol();\n+      modifiers = classTree.modifiers();\n+    }\n+\n+    if (symbol.metadata().isAnnotatedWith(\"org.junit.jupiter.api.Test\") && !symbol.isPackageVisibility()) {\n+      Tree questionableNode = modifiers.modifiers().parallelStream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e128e6d15536aeb7fe0955d14a5822c48627849d"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3Njg2Nzk3OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjoyNTo1OFrOGLVQWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjoyNTo1OFrOGLVQWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzNTc2OQ==", "bodyText": "By adding the following constant:\nprivate static final List<Modifier> NON_COMPLIANT_MODIFIERS = Arrays.asList(Modifier.PUBLIC, Modifier.PRIVATE, Modifier.PROTECTED);\n\nwe could simplify the implementation like this:\n      modifiers.modifiers().stream()\n        .filter(modifierKeyword -> NON_COMPLIANT_MODIFIERS.contains(modifierKeyword.modifier()))\n        .map(Tree.class::cast)\n        .findFirst()\n        .ifPresent(modifierKeyword -> reportIssue(modifierKeyword, \"Remove this access modifier\"));", "url": "https://github.com/SonarSource/sonar-java/pull/2920#discussion_r414535769", "createdAt": "2020-04-24T12:25:58Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/main/java/org/sonar/java/checks/TestClassAndMethodVisibilityCheck.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.ModifiersTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5786\")\n+public class TestClassAndMethodVisibilityCheck extends IssuableSubscriptionVisitor {\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Arrays.asList(Tree.Kind.METHOD, Tree.Kind.CLASS);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (!hasSemantic()) {\n+      return;\n+    }\n+\n+    ModifiersTree modifiers;\n+    Symbol symbol;\n+    if (tree.is(Tree.Kind.METHOD)) {\n+      MethodTree methodTree = (MethodTree) tree;\n+      symbol = methodTree.symbol();\n+      modifiers = methodTree.modifiers();\n+    } else {\n+      ClassTree classTree = (ClassTree) tree;\n+      symbol = classTree.symbol();\n+      modifiers = classTree.modifiers();\n+    }\n+\n+    if (symbol.metadata().isAnnotatedWith(\"org.junit.jupiter.api.Test\") && !symbol.isPackageVisibility()) {\n+      Tree questionableNode = modifiers.modifiers().parallelStream()\n+        .filter(keywordTree -> {\n+          Modifier modifier = keywordTree.modifier();\n+          return modifier.equals(Modifier.PUBLIC) || modifier.equals(Modifier.PRIVATE) || modifier.equals(Modifier.PROTECTED);\n+        })\n+        .map(modifierKeywordTree -> (Tree) modifierKeywordTree)\n+        .findFirst()\n+        .orElse(tree);\n+\n+      reportIssue(questionableNode, \"Remove this access modifier\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e128e6d15536aeb7fe0955d14a5822c48627849d"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NjkxMzUxOnYy", "diffSide": "RIGHT", "path": "java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjozNzoyMFrOGLVrBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjozNzoyMFrOGLVrBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU0MjU5Nw==", "bodyText": "we should add some test cases about CLASS like:\n  public static class WithoutTest { // Compliant\n\n  }\n\n  public static class PublicWithOneTest { // Noncompliant\n    @Test\n    void test() {}\n  }\n\n  static class WithOneTest { // Compliant\n    @Test\n    void test() {}\n  }", "url": "https://github.com/SonarSource/sonar-java/pull/2920#discussion_r414542597", "createdAt": "2020-04-24T12:37:20Z", "author": {"login": "alban-auzeill"}, "path": "java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package checks;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class TestClassAndMethodVisibilityCheckTest {\n+\n+  @Test\n+  public void testPublic() {} // Noncompliant [[sc=3;ec=9]] {{Remove this access modifier}}\n+\n+  @Test\n+  protected void testProtected() {} // Noncompliant [[sc=3;ec=12]] {{Remove this access modifier}}\n+\n+  @Test\n+  private void testPrivate() {} // Noncompliant [[sc=3;ec=10]] {{Remove this access modifier}}\n+\n+  @Test\n+  void testDefault() {} // compliant\n+\n+  public void noTestHere() {} // compliant - this rule only applies to test methods\n+\n+  void noTestHereEither() {} // compliant", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e128e6d15536aeb7fe0955d14a5822c48627849d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NjkyODYwOnYy", "diffSide": "RIGHT", "path": "java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjo0MTowN1rOGLVz4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjo0MTowN1rOGLVz4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU0NDg2Nw==", "bodyText": "Usually, when the message is constant, we test it only once.\nSo, here it's ok, you can use // Noncompliant [[sc=3;ec=9]] {{Remove this access modifier}}\nAnd elsewhere it's enough to use // Noncompliant, without the location and the message", "url": "https://github.com/SonarSource/sonar-java/pull/2920#discussion_r414544867", "createdAt": "2020-04-24T12:41:07Z", "author": {"login": "alban-auzeill"}, "path": "java-checks-test-sources/src/main/java/checks/TestClassAndMethodVisibilityCheckTest.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package checks;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class TestClassAndMethodVisibilityCheckTest {\n+\n+  @Test\n+  public void testPublic() {} // Noncompliant [[sc=3;ec=9]] {{Remove this access modifier}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e128e6d15536aeb7fe0955d14a5822c48627849d"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4120, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}