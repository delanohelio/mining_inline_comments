{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NjU4OTk0", "number": 3016, "title": "Rule S5869: Character classes in regular expressions should not ...", "bodyText": "... contain the same character twice", "createdAt": "2020-06-15T16:52:35Z", "url": "https://github.com/SonarSource/sonar-java/pull/3016", "merged": true, "mergeCommit": {"oid": "3055b4a54d16166de1a145d9176075d71d8c65fa"}, "closed": true, "closedAt": "2020-06-17T16:45:13Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrjsXrABqjM0NDUzMzg1OTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsMF_KgH2gAyNDM0NjU4OTk0OjczYmM2NmFlMDJiNTllN2Y5ZjZjOTdjYjg5NWE1ZjM0ZjU3ODlkNDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09532219f12860f98fb95d7b1d1663a8352e67ec", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/09532219f12860f98fb95d7b1d1663a8352e67ec", "committedDate": "2020-06-15T16:40:36Z", "message": "Rule S5869: Character classes in regular expressions should not ...\n\n... contain the same character twice"}, "afterCommit": {"oid": "8125b5d3899c821fe973f03b42fae44fdb5e7ef3", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/8125b5d3899c821fe973f03b42fae44fdb5e7ef3", "committedDate": "2020-06-15T16:59:02Z", "message": "SONARJAVA-3427 Rule S5869: Character classes in regular ...\n\n... expressions should not contain the same character twice"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8125b5d3899c821fe973f03b42fae44fdb5e7ef3", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/8125b5d3899c821fe973f03b42fae44fdb5e7ef3", "committedDate": "2020-06-15T16:59:02Z", "message": "SONARJAVA-3427 Rule S5869: Character classes in regular ...\n\n... expressions should not contain the same character twice"}, "afterCommit": {"oid": "88bfa432b38378c89e435aefe1aef365afdcde80", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/88bfa432b38378c89e435aefe1aef365afdcde80", "committedDate": "2020-06-16T11:50:31Z", "message": "SONARJAVA-3427 Rule S5869: Character classes in regular ...\n\n... expressions should not contain the same character twice"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "88bfa432b38378c89e435aefe1aef365afdcde80", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/88bfa432b38378c89e435aefe1aef365afdcde80", "committedDate": "2020-06-16T11:50:31Z", "message": "SONARJAVA-3427 Rule S5869: Character classes in regular ...\n\n... expressions should not contain the same character twice"}, "afterCommit": {"oid": "dfdee33be36bc58bee9c39918941d856046bcd15", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/dfdee33be36bc58bee9c39918941d856046bcd15", "committedDate": "2020-06-16T13:21:46Z", "message": "SONARJAVA-3427 Rule S5869: Character classes in regular ...\n\n... expressions should not contain the same character twice"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dfdee33be36bc58bee9c39918941d856046bcd15", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/dfdee33be36bc58bee9c39918941d856046bcd15", "committedDate": "2020-06-16T13:21:46Z", "message": "SONARJAVA-3427 Rule S5869: Character classes in regular ...\n\n... expressions should not contain the same character twice"}, "afterCommit": {"oid": "49c2a1097d3f05023c88b24dbd926dcd052f58cc", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/49c2a1097d3f05023c88b24dbd926dcd052f58cc", "committedDate": "2020-06-16T15:29:03Z", "message": "Add tests for base visitor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42212f4326b1d605dbc9488bd147c00f74cde4c5", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/42212f4326b1d605dbc9488bd147c00f74cde4c5", "committedDate": "2020-06-17T14:08:52Z", "message": "SONARJAVA-3427 Rule S5869: Character classes in regular ...\n\n... expressions should not contain the same character twice"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cca44d1b0634b7f380219266435b34d649101590", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/cca44d1b0634b7f380219266435b34d649101590", "committedDate": "2020-06-17T14:08:52Z", "message": "Add tests for base visitor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "49c2a1097d3f05023c88b24dbd926dcd052f58cc", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/49c2a1097d3f05023c88b24dbd926dcd052f58cc", "committedDate": "2020-06-16T15:29:03Z", "message": "Add tests for base visitor"}, "afterCommit": {"oid": "cca44d1b0634b7f380219266435b34d649101590", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/cca44d1b0634b7f380219266435b34d649101590", "committedDate": "2020-06-17T14:08:52Z", "message": "Add tests for base visitor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNDgyNjE4", "url": "https://github.com/SonarSource/sonar-java/pull/3016#pullrequestreview-432482618", "createdAt": "2020-06-17T14:50:17Z", "commit": {"oid": "cca44d1b0634b7f380219266435b34d649101590"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDo1MDoxN1rOGlJd5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDo1OToxN1rOGlJ5bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwNTYwNw==", "bodyText": "I would prefer to have this logic within the constructor of the DuplicateFinder, so we could rewrite this whole block such as:\nif (!regexForLiterals.hasSyntaxErrors()) {\n  regexForLiterals.getResult().accept(new DuplicateFinder(mit));\n}\n\n...\n\nprivate class DuplicateFinder extends RegexBaseVisitor {\n  private DuplicateFinder(MethodInvocationTree mit) {\n    setActiveFlags(getFlags(mit));\n  }\n\n  ...\n}\n\n\nOr, what about having a final method setActiveFlags(MethodInvocationTree mit) within the RegexBaseVisitor, which would itself calls the currently private getFlags(mit) ?\nSo in our case we could just call myVisitor.setActiveFlags(mit). I have the feeling that we will always have to call getFlags and setActiveFlags together.", "url": "https://github.com/SonarSource/sonar-java/pull/3016#discussion_r441605607", "createdAt": "2020-06-17T14:50:17Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/regex/DuplicatesInCharacterClassCheck.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.regex;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.regex.RegexParseResult;\n+import org.sonar.java.regex.ast.CharacterClassUnionTree;\n+import org.sonar.java.regex.ast.CharacterRangeTree;\n+import org.sonar.java.regex.ast.PlainCharacterTree;\n+import org.sonar.java.regex.ast.RegexBaseVisitor;\n+import org.sonar.java.regex.ast.RegexTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+\n+@Rule(key = \"S5869\")\n+public class DuplicatesInCharacterClassCheck extends AbstractRegexCheck {\n+\n+  private static final String MESSAGE = \"Remove duplicates in this character class.\";\n+\n+  @Override\n+  public void checkRegex(RegexParseResult regexForLiterals, MethodInvocationTree mit) {\n+    if (!regexForLiterals.hasSyntaxErrors()) {\n+      DuplicateFinder duplicateFinder = new DuplicateFinder();\n+      duplicateFinder.setActiveFlags(getFlags(mit));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cca44d1b0634b7f380219266435b34d649101590"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYxMjY1NA==", "bodyText": "Why not using another message here? it seems to me to be strange to have the same message for all secondaries.", "url": "https://github.com/SonarSource/sonar-java/pull/3016#discussion_r441612654", "createdAt": "2020-06-17T14:59:17Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/regex/DuplicatesInCharacterClassCheck.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.regex;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.regex.RegexParseResult;\n+import org.sonar.java.regex.ast.CharacterClassUnionTree;\n+import org.sonar.java.regex.ast.CharacterRangeTree;\n+import org.sonar.java.regex.ast.PlainCharacterTree;\n+import org.sonar.java.regex.ast.RegexBaseVisitor;\n+import org.sonar.java.regex.ast.RegexTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+\n+@Rule(key = \"S5869\")\n+public class DuplicatesInCharacterClassCheck extends AbstractRegexCheck {\n+\n+  private static final String MESSAGE = \"Remove duplicates in this character class.\";\n+\n+  @Override\n+  public void checkRegex(RegexParseResult regexForLiterals, MethodInvocationTree mit) {\n+    if (!regexForLiterals.hasSyntaxErrors()) {\n+      DuplicateFinder duplicateFinder = new DuplicateFinder();\n+      duplicateFinder.setActiveFlags(getFlags(mit));\n+      duplicateFinder.visit(regexForLiterals.getResult());\n+    }\n+  }\n+\n+  private class DuplicateFinder extends RegexBaseVisitor {\n+\n+    @Override\n+    public void visitCharacterClassUnion(CharacterClassUnionTree tree) {\n+      List<RegexTree> duplicates = new ArrayList<>();\n+      TreeMap<Character, Boolean> inCharacterClass = new TreeMap<>();\n+      for (RegexTree element : tree.getCharacterClasses()) {\n+        if (element.is(RegexTree.Kind.PLAIN_CHARACTER)) {\n+          char ch = ((PlainCharacterTree) element).getCharacter();\n+          processRange(duplicates, inCharacterClass, ch, ch, element);\n+        } else if (element.is(RegexTree.Kind.CHARACTER_RANGE)) {\n+          CharacterRangeTree range = (CharacterRangeTree) element;\n+          char lower = range.getLowerBound().getCharacter();\n+          char upper = range.getUpperBound().getCharacter();\n+          processRange(duplicates, inCharacterClass, lower, upper, range);\n+        }\n+      }\n+      if (!duplicates.isEmpty()) {\n+        List<RegexIssueLocation> secondaries = duplicates.stream()\n+          .skip(1)\n+          .map(duplicate -> new RegexIssueLocation(duplicate, MESSAGE))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cca44d1b0634b7f380219266435b34d649101590"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73bc66ae02b59e7f9f6c97cb895a5f34f5789d45", "author": {"user": {"login": "sebastian-hungerecker-sonarsource", "name": "Sebastian Hungerecker"}}, "url": "https://github.com/SonarSource/sonar-java/commit/73bc66ae02b59e7f9f6c97cb895a5f34f5789d45", "committedDate": "2020-06-17T16:04:09Z", "message": "Fixes from review"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1724, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}