{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MDIxNjcx", "number": 2819, "title": "SONARJAVA-3298 S2755 FN when two factories are used in the same method", "bodyText": "", "createdAt": "2020-02-17T09:11:06Z", "url": "https://github.com/SonarSource/sonar-java/pull/2819", "merged": true, "mergeCommit": {"oid": "eeecf1cb59bb4a9e564f4eed94f4de5d54d79bfc"}, "closed": true, "closedAt": "2020-02-18T15:20:31Z", "author": {"login": "quentin-jaquier-sonarsource"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFOHAxABqjMwNDM5MTAyMTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFiKZfABqjMwNDcxOTMyNTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "855dd4f84eeb1a66eb7a5206af76f15229d45cd6", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/855dd4f84eeb1a66eb7a5206af76f15229d45cd6", "committedDate": "2020-02-17T09:09:35Z", "message": "SONARJAVA-3298 S2755 FN when two factories are used in the same method"}, "afterCommit": {"oid": "cc8639128e1809308051b65d59f3d74719dbd072", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/cc8639128e1809308051b65d59f3d74719dbd072", "committedDate": "2020-02-17T14:19:02Z", "message": "Remove duplication"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc8639128e1809308051b65d59f3d74719dbd072", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/cc8639128e1809308051b65d59f3d74719dbd072", "committedDate": "2020-02-17T14:19:02Z", "message": "Remove duplication"}, "afterCommit": {"oid": "87c92eae48dbaff2457202774194d1423f018822", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/87c92eae48dbaff2457202774194d1423f018822", "committedDate": "2020-02-17T14:47:55Z", "message": "Remove duplication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9094be21ce582e0cf228454a254fedd05638194", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/d9094be21ce582e0cf228454a254fedd05638194", "committedDate": "2020-02-18T13:16:51Z", "message": "SONARJAVA-3298 S2755 FN when two factories are used in the same method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b350b13c627fa40e9aee283a5d0163765ca49a69", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/b350b13c627fa40e9aee283a5d0163765ca49a69", "committedDate": "2020-02-18T13:16:51Z", "message": "Remove duplication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3402a323279823dfdd796b4ff046771f96735af0", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/3402a323279823dfdd796b4ff046771f96735af0", "committedDate": "2020-02-18T13:16:51Z", "message": "Refactor code to avoid extra interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3aa70f009adfc4ab24d5405ab7affd372e476e48", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/3aa70f009adfc4ab24d5405ab7affd372e476e48", "committedDate": "2020-02-18T13:29:48Z", "message": "Migrate test file to checks-test module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMzMwOTM2", "url": "https://github.com/SonarSource/sonar-java/pull/2819#pullrequestreview-360330936", "createdAt": "2020-02-18T13:22:00Z", "commit": {"oid": "a8a44357fb6c09414c197c0b7c5195c64176ada8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMzoyMjowMFrOFrCETw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMzoyOTowOFrOFrCSyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY2Njk1OQ==", "bodyText": "this can be simplified to:\nreturn methodSelect.is(Tree.Kind.MEMBER_SELECT) \n  && extractIdentifierSymbol(((MemberSelectExpressionTree) methodSelect).expression()).filter(s -> s.equals(variable)).isPresent();", "url": "https://github.com/SonarSource/sonar-java/pull/2819#discussion_r380666959", "createdAt": "2020-02-18T13:22:00Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/CryptographicKeySizeCheck.java", "diffHunk": "@@ -143,12 +123,9 @@ public void visitMethodInvocation(MethodInvocationTree mit) {\n     }\n \n     private boolean isSameVariableSymbol(MethodInvocationTree mit) {\n-      Tree methodSelect = mit.methodSelect();\n+      ExpressionTree methodSelect = mit.methodSelect();\n       if (methodSelect.is(Tree.Kind.MEMBER_SELECT)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a44357fb6c09414c197c0b7c5195c64176ada8"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY2ODYzMw==", "bodyText": "Isn't this method the same as in:\nhttps://github.com/SonarSource/sonar-java/pull/2819/files#diff-ad75e35ac7cb0aad007e6d9e495bbae8R127\nMaybe you can make it static and public, outside of the inner class, to be reused from the outsilde-", "url": "https://github.com/SonarSource/sonar-java/pull/2819#discussion_r380668633", "createdAt": "2020-02-18T13:25:10Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/TriggeringSecuringHelper.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.security;\n+\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import org.sonar.java.matcher.MethodMatcher;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+import static org.sonar.java.model.ExpressionUtils.extractIdentifierSymbol;\n+import static org.sonar.java.model.ExpressionUtils.getAssignedSymbol;\n+\n+/**\n+ * Helper class implementing the following behavior:\n+ *\n+ * 1. Test if a {@link MethodInvocationTree} matches the triggering method matcher given to constructor.\n+ * 2. If found, get enclosing method (if any).\n+ * 3. Visit the body of the enclosing method, calling {@link #processSecuringMethodInvocation(MethodInvocationTree)} for each method invocation.\n+ * 4. At the end of the visit, return true if the variable was secured inside the body of the enclosing method.\n+ *\n+ * It also makes sure that the triggering and securing method call is made on the same symbol.\n+ *\n+ */\n+public abstract class TriggeringSecuringHelper implements Predicate<MethodInvocationTree> {\n+\n+  private final MethodMatcher triggeringInvocationMatcher;\n+\n+  public abstract void resetState();\n+\n+  /**\n+   * The method visitor call this method for all method invocation in the method containing the triggering call.\n+   * It typically contributes to define if the triggering call is secured or not.\n+   * (see {@link #isSecured()})\n+   */\n+  public abstract void processSecuringMethodInvocation(MethodInvocationTree mit);\n+\n+  /**\n+   * At the end of the visit of the enclosing method body, return true if all expected securing method call were found.\n+   */\n+  public abstract boolean isSecured();\n+\n+  TriggeringSecuringHelper(MethodMatcher triggeringInvocationMatcher) {\n+    this.triggeringInvocationMatcher = triggeringInvocationMatcher;\n+  }\n+\n+  @Override\n+  public boolean test(MethodInvocationTree mit) {\n+    if (triggeringInvocationMatcher.matches(mit)) {\n+      MethodTree enclosingMethod = ExpressionUtils.getEnclosingMethod(mit);\n+      if (enclosingMethod != null) {\n+        Optional<Symbol> assignedSymbol = getAssignedSymbol(mit);\n+        if (assignedSymbol.isPresent()) {\n+          resetState();\n+          enclosingMethod.accept(new MethodVisitor(assignedSymbol.get()));\n+          return !isSecured();\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  private class MethodVisitor extends BaseTreeVisitor {\n+\n+    private Symbol variable;\n+\n+    private MethodVisitor(Symbol variable) {\n+      this.variable = variable;\n+    }\n+\n+    @Override\n+    public void visitMethodInvocation(MethodInvocationTree methodInvocation) {\n+      if (isSameVariableSymbol(methodInvocation)) {\n+        processSecuringMethodInvocation(methodInvocation);\n+      }\n+      super.visitMethodInvocation(methodInvocation);\n+    }\n+\n+    private boolean isSameVariableSymbol(MethodInvocationTree mit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a44357fb6c09414c197c0b7c5195c64176ada8"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY2ODc3NA==", "bodyText": "This can also be simplified.", "url": "https://github.com/SonarSource/sonar-java/pull/2819#discussion_r380668774", "createdAt": "2020-02-18T13:25:27Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/TriggeringSecuringHelper.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.security;\n+\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import org.sonar.java.matcher.MethodMatcher;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+import static org.sonar.java.model.ExpressionUtils.extractIdentifierSymbol;\n+import static org.sonar.java.model.ExpressionUtils.getAssignedSymbol;\n+\n+/**\n+ * Helper class implementing the following behavior:\n+ *\n+ * 1. Test if a {@link MethodInvocationTree} matches the triggering method matcher given to constructor.\n+ * 2. If found, get enclosing method (if any).\n+ * 3. Visit the body of the enclosing method, calling {@link #processSecuringMethodInvocation(MethodInvocationTree)} for each method invocation.\n+ * 4. At the end of the visit, return true if the variable was secured inside the body of the enclosing method.\n+ *\n+ * It also makes sure that the triggering and securing method call is made on the same symbol.\n+ *\n+ */\n+public abstract class TriggeringSecuringHelper implements Predicate<MethodInvocationTree> {\n+\n+  private final MethodMatcher triggeringInvocationMatcher;\n+\n+  public abstract void resetState();\n+\n+  /**\n+   * The method visitor call this method for all method invocation in the method containing the triggering call.\n+   * It typically contributes to define if the triggering call is secured or not.\n+   * (see {@link #isSecured()})\n+   */\n+  public abstract void processSecuringMethodInvocation(MethodInvocationTree mit);\n+\n+  /**\n+   * At the end of the visit of the enclosing method body, return true if all expected securing method call were found.\n+   */\n+  public abstract boolean isSecured();\n+\n+  TriggeringSecuringHelper(MethodMatcher triggeringInvocationMatcher) {\n+    this.triggeringInvocationMatcher = triggeringInvocationMatcher;\n+  }\n+\n+  @Override\n+  public boolean test(MethodInvocationTree mit) {\n+    if (triggeringInvocationMatcher.matches(mit)) {\n+      MethodTree enclosingMethod = ExpressionUtils.getEnclosingMethod(mit);\n+      if (enclosingMethod != null) {\n+        Optional<Symbol> assignedSymbol = getAssignedSymbol(mit);\n+        if (assignedSymbol.isPresent()) {\n+          resetState();\n+          enclosingMethod.accept(new MethodVisitor(assignedSymbol.get()));\n+          return !isSecured();\n+        }\n+      }\n+    }\n+    return false;\n+  }\n+\n+  private class MethodVisitor extends BaseTreeVisitor {\n+\n+    private Symbol variable;\n+\n+    private MethodVisitor(Symbol variable) {\n+      this.variable = variable;\n+    }\n+\n+    @Override\n+    public void visitMethodInvocation(MethodInvocationTree methodInvocation) {\n+      if (isSameVariableSymbol(methodInvocation)) {\n+        processSecuringMethodInvocation(methodInvocation);\n+      }\n+      super.visitMethodInvocation(methodInvocation);\n+    }\n+\n+    private boolean isSameVariableSymbol(MethodInvocationTree mit) {\n+      ExpressionTree methodSelect = mit.methodSelect();\n+      if (methodSelect.is(Tree.Kind.MEMBER_SELECT)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a44357fb6c09414c197c0b7c5195c64176ada8"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY3MDExNQ==", "bodyText": "javadoc is missing for this part. If it's required to call it at some point, then document why.", "url": "https://github.com/SonarSource/sonar-java/pull/2819#discussion_r380670115", "createdAt": "2020-02-18T13:28:02Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/TriggeringSecuringHelper.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.security;\n+\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import org.sonar.java.matcher.MethodMatcher;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+import static org.sonar.java.model.ExpressionUtils.extractIdentifierSymbol;\n+import static org.sonar.java.model.ExpressionUtils.getAssignedSymbol;\n+\n+/**\n+ * Helper class implementing the following behavior:\n+ *\n+ * 1. Test if a {@link MethodInvocationTree} matches the triggering method matcher given to constructor.\n+ * 2. If found, get enclosing method (if any).\n+ * 3. Visit the body of the enclosing method, calling {@link #processSecuringMethodInvocation(MethodInvocationTree)} for each method invocation.\n+ * 4. At the end of the visit, return true if the variable was secured inside the body of the enclosing method.\n+ *\n+ * It also makes sure that the triggering and securing method call is made on the same symbol.\n+ *\n+ */\n+public abstract class TriggeringSecuringHelper implements Predicate<MethodInvocationTree> {\n+\n+  private final MethodMatcher triggeringInvocationMatcher;\n+\n+  public abstract void resetState();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a44357fb6c09414c197c0b7c5195c64176ada8"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY3MDY2NQ==", "bodyText": "Could you take the opportunity to move the test file into the new module?", "url": "https://github.com/SonarSource/sonar-java/pull/2819#discussion_r380670665", "createdAt": "2020-02-18T13:29:08Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/test/files/checks/security/XmlExternalEntityProcessingCheck.java", "diffHunk": "@@ -1,5 +1,9 @@\n+import javax.xml.parsers.ParserConfigurationException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a44357fb6c09414c197c0b7c5195c64176ada8"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c408d56e639e1f183ac31f4bbd948e12c7d5807", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/6c408d56e639e1f183ac31f4bbd948e12c7d5807", "committedDate": "2020-02-18T13:43:21Z", "message": "Fix from review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a8a44357fb6c09414c197c0b7c5195c64176ada8", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/a8a44357fb6c09414c197c0b7c5195c64176ada8", "committedDate": "2020-02-18T11:58:07Z", "message": "Refactor code to avoid extra interface"}, "afterCommit": {"oid": "6c408d56e639e1f183ac31f4bbd948e12c7d5807", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/6c408d56e639e1f183ac31f4bbd948e12c7d5807", "committedDate": "2020-02-18T13:43:21Z", "message": "Fix from review"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1843, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}