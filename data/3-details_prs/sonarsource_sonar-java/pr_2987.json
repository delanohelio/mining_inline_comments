{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MjYyMTYx", "number": 2987, "title": "SONARJAVA-3399 Rule S5845: Assertions of dissimilar types should not be made", "bodyText": "", "createdAt": "2020-06-05T07:02:34Z", "url": "https://github.com/SonarSource/sonar-java/pull/2987", "merged": true, "mergeCommit": {"oid": "1fc4fc548b22337de84fbbd9da54d0e967334cb5"}, "closed": true, "closedAt": "2020-06-08T11:52:34Z", "author": {"login": "alban-auzeill"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoSTDGgFqTQyNTA4NzEyNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpNdA3ABqjM0MTkyNTEyNTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MDg3MTI2", "url": "https://github.com/SonarSource/sonar-java/pull/2987#pullrequestreview-425087126", "createdAt": "2020-06-05T08:11:35Z", "commit": {"oid": "bec75a1865f3ec9efb30b18c4e0ef74124466f05"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwODoxMTozNVrOGfkqXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMjoxMzoyM1rOGfsBig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc1OTcxMQ==", "bodyText": "There is no need for this check anymore.\nYou can also remove the related test.", "url": "https://github.com/SonarSource/sonar-java/pull/2987#discussion_r435759711", "createdAt": "2020-06-05T08:11:35Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/AssertionTypesCheck.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.java.model.JUtils;\n+import org.sonar.java.resolve.Symbols;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5845\")\n+public class AssertionTypesCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String JAVA_LANG_OBJECT = \"java.lang.Object\";\n+\n+  private static final String JUNIT4_ASSERTIONS = \"org.junit.Assert\";\n+  private static final String JUNIT5_ASSERTIONS = \"org.junit.jupiter.api.Assertions\";\n+  private static final String ASSERT_NULL = \"assertNull\";\n+  private static final String ASSERT_NOT_NULL = \"assertNotNull\";\n+  private static final String JAVA_LANG_STRING = \"java.lang.String\";\n+  private static final String ASSERT_EQUALS = \"assertEquals\";\n+  private static final String ASSERT_NOT_EQUALS = \"assertNotEquals\";\n+\n+  private static final MethodMatchers ASSERT_NULLABLE_FIRST_ARGUMENT = MethodMatchers.or(\n+    MethodMatchers.create()\n+      .ofTypes(JUNIT4_ASSERTIONS)\n+      .names(ASSERT_NULL, ASSERT_NOT_NULL)\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .build(),\n+    MethodMatchers.create()\n+      .ofTypes(JUNIT5_ASSERTIONS)\n+      .names(ASSERT_NULL, ASSERT_NOT_NULL)\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+      .build());\n+\n+  private static final MethodMatchers ASSERT_NULLABLE_SECOND_ARGUMENT = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERTIONS)\n+    .names(ASSERT_NULL, ASSERT_NOT_NULL)\n+    .addParametersMatcher(JAVA_LANG_STRING, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERT_EQUALS_SECOND_AND_FIRST_ARGUMENTS = MethodMatchers.or(\n+    MethodMatchers.create()\n+      .ofTypes(JUNIT4_ASSERTIONS)\n+      .names(ASSERT_EQUALS)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+      .build(),\n+    MethodMatchers.create()\n+      .ofTypes(JUNIT5_ASSERTIONS)\n+      .names(ASSERT_EQUALS)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY)\n+      .build());\n+\n+  private static final MethodMatchers ASSERT_EQUALS_THIRD_AND_SECOND_ARGUMENTS = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERTIONS)\n+    .names(ASSERT_EQUALS)\n+    .addParametersMatcher(JAVA_LANG_STRING, MethodMatchers.ANY, MethodMatchers.ANY)\n+    .addParametersMatcher(JAVA_LANG_STRING, MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERT_NOT_EQUALS_SECOND_AND_FIRST_ARGUMENTS = MethodMatchers.or(\n+    MethodMatchers.create()\n+      .ofTypes(JUNIT4_ASSERTIONS)\n+      .names(ASSERT_NOT_EQUALS)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+      .build(),\n+    MethodMatchers.create()\n+      .ofTypes(JUNIT5_ASSERTIONS)\n+      .names(ASSERT_NOT_EQUALS)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY)\n+      .build());\n+\n+  private static final MethodMatchers ASSERT_NOT_EQUALS_THIRD_AND_SECOND_ARGUMENTS = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERTIONS)\n+    .names(ASSERT_NOT_EQUALS)\n+    .addParametersMatcher(JAVA_LANG_STRING, MethodMatchers.ANY, MethodMatchers.ANY)\n+    .addParametersMatcher(JAVA_LANG_STRING, MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERTJ_ASSERT_THAT = MethodMatchers.create()\n+    .ofTypes(\n+      \"org.assertj.core.api.Assertions\",\n+      \"org.assertj.core.api.AssertionsForInterfaceTypes\",\n+      \"org.assertj.core.api.AssertionsForClassTypes\")\n+    .names(\"assertThat\", \"assertThatObject\")\n+    .addParametersMatcher(MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERTJ_NULL_AND_NOT_NULL = MethodMatchers.create()\n+    .ofAnyType()\n+    .names(\"isNull\", \"isNotNull\")\n+    .addWithoutParametersMatcher()\n+    .build();\n+\n+  private static final MethodMatchers ASSERTJ_POSITIVE_PREDICATES = MethodMatchers.create()\n+    .ofAnyType()\n+    .names(\"isEqualTo\", \"isSameAs\")\n+    .addParametersMatcher(MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERTJ_NEGATIVE_PREDICATES = MethodMatchers.create()\n+    .ofAnyType()\n+    .names(\"isNotEqualTo\", \"isNotSameAs\")\n+    .addParametersMatcher(MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERTJ_CONFIGURATION = MethodMatchers.create()\n+    .ofAnyType()\n+    .names(\"as\", \"describedAs\", \"withFailMessage\", \"overridingErrorMessage\")\n+    .withAnyParameters()\n+    .build();\n+\n+  private static final String MESSAGE = \"Change the assertion arguments to not compare dissimilar types.\";\n+\n+  private enum Option {\n+    ACCEPT_DISSIMILAR_INTERFACE,\n+    REJECT_DISSIMILAR_INTERFACE,\n+  }\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (!hasSemantic()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bec75a1865f3ec9efb30b18c4e0ef74124466f05"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3MDcxNA==", "bodyText": "Maybe we could try to have a more precise message, to make it clear that you are comparing a primitive with null, which does not make sense.", "url": "https://github.com/SonarSource/sonar-java/pull/2987#discussion_r435770714", "createdAt": "2020-06-05T08:32:17Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/AssertionTypesCheck.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.java.model.JUtils;\n+import org.sonar.java.resolve.Symbols;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5845\")\n+public class AssertionTypesCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String JAVA_LANG_OBJECT = \"java.lang.Object\";\n+\n+  private static final String JUNIT4_ASSERTIONS = \"org.junit.Assert\";\n+  private static final String JUNIT5_ASSERTIONS = \"org.junit.jupiter.api.Assertions\";\n+  private static final String ASSERT_NULL = \"assertNull\";\n+  private static final String ASSERT_NOT_NULL = \"assertNotNull\";\n+  private static final String JAVA_LANG_STRING = \"java.lang.String\";\n+  private static final String ASSERT_EQUALS = \"assertEquals\";\n+  private static final String ASSERT_NOT_EQUALS = \"assertNotEquals\";\n+\n+  private static final MethodMatchers ASSERT_NULLABLE_FIRST_ARGUMENT = MethodMatchers.or(\n+    MethodMatchers.create()\n+      .ofTypes(JUNIT4_ASSERTIONS)\n+      .names(ASSERT_NULL, ASSERT_NOT_NULL)\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .build(),\n+    MethodMatchers.create()\n+      .ofTypes(JUNIT5_ASSERTIONS)\n+      .names(ASSERT_NULL, ASSERT_NOT_NULL)\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+      .build());\n+\n+  private static final MethodMatchers ASSERT_NULLABLE_SECOND_ARGUMENT = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERTIONS)\n+    .names(ASSERT_NULL, ASSERT_NOT_NULL)\n+    .addParametersMatcher(JAVA_LANG_STRING, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERT_EQUALS_SECOND_AND_FIRST_ARGUMENTS = MethodMatchers.or(\n+    MethodMatchers.create()\n+      .ofTypes(JUNIT4_ASSERTIONS)\n+      .names(ASSERT_EQUALS)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+      .build(),\n+    MethodMatchers.create()\n+      .ofTypes(JUNIT5_ASSERTIONS)\n+      .names(ASSERT_EQUALS)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY)\n+      .build());\n+\n+  private static final MethodMatchers ASSERT_EQUALS_THIRD_AND_SECOND_ARGUMENTS = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERTIONS)\n+    .names(ASSERT_EQUALS)\n+    .addParametersMatcher(JAVA_LANG_STRING, MethodMatchers.ANY, MethodMatchers.ANY)\n+    .addParametersMatcher(JAVA_LANG_STRING, MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERT_NOT_EQUALS_SECOND_AND_FIRST_ARGUMENTS = MethodMatchers.or(\n+    MethodMatchers.create()\n+      .ofTypes(JUNIT4_ASSERTIONS)\n+      .names(ASSERT_NOT_EQUALS)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+      .build(),\n+    MethodMatchers.create()\n+      .ofTypes(JUNIT5_ASSERTIONS)\n+      .names(ASSERT_NOT_EQUALS)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY)\n+      .build());\n+\n+  private static final MethodMatchers ASSERT_NOT_EQUALS_THIRD_AND_SECOND_ARGUMENTS = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERTIONS)\n+    .names(ASSERT_NOT_EQUALS)\n+    .addParametersMatcher(JAVA_LANG_STRING, MethodMatchers.ANY, MethodMatchers.ANY)\n+    .addParametersMatcher(JAVA_LANG_STRING, MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERTJ_ASSERT_THAT = MethodMatchers.create()\n+    .ofTypes(\n+      \"org.assertj.core.api.Assertions\",\n+      \"org.assertj.core.api.AssertionsForInterfaceTypes\",\n+      \"org.assertj.core.api.AssertionsForClassTypes\")\n+    .names(\"assertThat\", \"assertThatObject\")\n+    .addParametersMatcher(MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERTJ_NULL_AND_NOT_NULL = MethodMatchers.create()\n+    .ofAnyType()\n+    .names(\"isNull\", \"isNotNull\")\n+    .addWithoutParametersMatcher()\n+    .build();\n+\n+  private static final MethodMatchers ASSERTJ_POSITIVE_PREDICATES = MethodMatchers.create()\n+    .ofAnyType()\n+    .names(\"isEqualTo\", \"isSameAs\")\n+    .addParametersMatcher(MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERTJ_NEGATIVE_PREDICATES = MethodMatchers.create()\n+    .ofAnyType()\n+    .names(\"isNotEqualTo\", \"isNotSameAs\")\n+    .addParametersMatcher(MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERTJ_CONFIGURATION = MethodMatchers.create()\n+    .ofAnyType()\n+    .names(\"as\", \"describedAs\", \"withFailMessage\", \"overridingErrorMessage\")\n+    .withAnyParameters()\n+    .build();\n+\n+  private static final String MESSAGE = \"Change the assertion arguments to not compare dissimilar types.\";\n+\n+  private enum Option {\n+    ACCEPT_DISSIMILAR_INTERFACE,\n+    REJECT_DISSIMILAR_INTERFACE,\n+  }\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (!hasSemantic()) {\n+      return;\n+    }\n+    MethodInvocationTree mit = (MethodInvocationTree) tree;\n+    if (ASSERT_NULLABLE_FIRST_ARGUMENT.matches(mit)) {\n+      checkNullableAssertion(new Argument(mit, 0));\n+    } else if (ASSERT_NULLABLE_SECOND_ARGUMENT.matches(mit)) {\n+      checkNullableAssertion(new Argument(mit, 1));\n+    } else if (ASSERT_EQUALS_SECOND_AND_FIRST_ARGUMENTS.matches(mit)) {\n+      checkCompatibleTypes(new Argument(mit, 1), new Argument(mit, 0), Option.ACCEPT_DISSIMILAR_INTERFACE);\n+    } else if (ASSERT_EQUALS_THIRD_AND_SECOND_ARGUMENTS.matches(mit)) {\n+      checkCompatibleTypes(new Argument(mit, 2), new Argument(mit, 1), Option.ACCEPT_DISSIMILAR_INTERFACE);\n+    } else if (ASSERT_NOT_EQUALS_SECOND_AND_FIRST_ARGUMENTS.matches(mit)) {\n+      checkCompatibleTypes(new Argument(mit, 1), new Argument(mit, 0), Option.REJECT_DISSIMILAR_INTERFACE);\n+    } else if (ASSERT_NOT_EQUALS_THIRD_AND_SECOND_ARGUMENTS.matches(mit)) {\n+      checkCompatibleTypes(new Argument(mit, 2), new Argument(mit, 1), Option.REJECT_DISSIMILAR_INTERFACE);\n+    } else if (ASSERTJ_ASSERT_THAT.matches(mit)) {\n+      checkSubsequentAssertJPredicateCompatibleTypes(new Argument(mit, 0), mit);\n+    }\n+  }\n+\n+  private void checkSubsequentAssertJPredicateCompatibleTypes(Argument actual, MethodInvocationTree previousMethod) {\n+    MethodTreeUtils.consecutiveMethodInvocation(previousMethod)\n+      .ifPresent(mit -> {\n+        boolean checkFollowingMethod = true;\n+        if (ASSERTJ_NULL_AND_NOT_NULL.matches(mit)) {\n+          checkNullableAssertion(ExpressionUtils.methodName(mit), actual);\n+        } else if (ASSERTJ_POSITIVE_PREDICATES.matches(mit)) {\n+          checkCompatibleTypes(actual, new Argument(mit, 0), Option.ACCEPT_DISSIMILAR_INTERFACE);\n+        } else if (ASSERTJ_NEGATIVE_PREDICATES.matches(mit)) {\n+          checkCompatibleTypes(actual, new Argument(mit, 0), Option.REJECT_DISSIMILAR_INTERFACE);\n+        } else if (!ASSERTJ_CONFIGURATION.matches(mit)) {\n+          // stop checking when methods like: extracting, using*, filtered*\n+          checkFollowingMethod = false;\n+        }\n+        if (checkFollowingMethod) {\n+          checkSubsequentAssertJPredicateCompatibleTypes(actual, mit);\n+        }\n+      });\n+  }\n+\n+  private void checkNullableAssertion(Argument actual) {\n+    checkNullableAssertion(actual.expression, actual);\n+  }\n+\n+  private void checkNullableAssertion(Tree issueLocation, Argument actual) {\n+    if (actual.isPrimitive()) {\n+      reportIssue(issueLocation, MESSAGE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bec75a1865f3ec9efb30b18c4e0ef74124466f05"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc3NTI3Mg==", "bodyText": "SECOND_AND_FIRST_ARGUMENTS sounds strange. I understand that you will then pass them in this order to the next function, but does it justify this strange name?\nSame for the other matchers.", "url": "https://github.com/SonarSource/sonar-java/pull/2987#discussion_r435775272", "createdAt": "2020-06-05T08:40:24Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/AssertionTypesCheck.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.java.model.JUtils;\n+import org.sonar.java.resolve.Symbols;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5845\")\n+public class AssertionTypesCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final String JAVA_LANG_OBJECT = \"java.lang.Object\";\n+\n+  private static final String JUNIT4_ASSERTIONS = \"org.junit.Assert\";\n+  private static final String JUNIT5_ASSERTIONS = \"org.junit.jupiter.api.Assertions\";\n+  private static final String ASSERT_NULL = \"assertNull\";\n+  private static final String ASSERT_NOT_NULL = \"assertNotNull\";\n+  private static final String JAVA_LANG_STRING = \"java.lang.String\";\n+  private static final String ASSERT_EQUALS = \"assertEquals\";\n+  private static final String ASSERT_NOT_EQUALS = \"assertNotEquals\";\n+\n+  private static final MethodMatchers ASSERT_NULLABLE_FIRST_ARGUMENT = MethodMatchers.or(\n+    MethodMatchers.create()\n+      .ofTypes(JUNIT4_ASSERTIONS)\n+      .names(ASSERT_NULL, ASSERT_NOT_NULL)\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .build(),\n+    MethodMatchers.create()\n+      .ofTypes(JUNIT5_ASSERTIONS)\n+      .names(ASSERT_NULL, ASSERT_NOT_NULL)\n+      .addParametersMatcher(MethodMatchers.ANY)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+      .build());\n+\n+  private static final MethodMatchers ASSERT_NULLABLE_SECOND_ARGUMENT = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERTIONS)\n+    .names(ASSERT_NULL, ASSERT_NOT_NULL)\n+    .addParametersMatcher(JAVA_LANG_STRING, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERT_EQUALS_SECOND_AND_FIRST_ARGUMENTS = MethodMatchers.or(\n+    MethodMatchers.create()\n+      .ofTypes(JUNIT4_ASSERTIONS)\n+      .names(ASSERT_EQUALS)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+      .build(),\n+    MethodMatchers.create()\n+      .ofTypes(JUNIT5_ASSERTIONS)\n+      .names(ASSERT_EQUALS)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY)\n+      .build());\n+\n+  private static final MethodMatchers ASSERT_EQUALS_THIRD_AND_SECOND_ARGUMENTS = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERTIONS)\n+    .names(ASSERT_EQUALS)\n+    .addParametersMatcher(JAVA_LANG_STRING, MethodMatchers.ANY, MethodMatchers.ANY)\n+    .addParametersMatcher(JAVA_LANG_STRING, MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERT_NOT_EQUALS_SECOND_AND_FIRST_ARGUMENTS = MethodMatchers.or(\n+    MethodMatchers.create()\n+      .ofTypes(JUNIT4_ASSERTIONS)\n+      .names(ASSERT_NOT_EQUALS)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+      .build(),\n+    MethodMatchers.create()\n+      .ofTypes(JUNIT5_ASSERTIONS)\n+      .names(ASSERT_NOT_EQUALS)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY)\n+      .addParametersMatcher(MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY)\n+      .build());\n+\n+  private static final MethodMatchers ASSERT_NOT_EQUALS_THIRD_AND_SECOND_ARGUMENTS = MethodMatchers.create()\n+    .ofTypes(JUNIT4_ASSERTIONS)\n+    .names(ASSERT_NOT_EQUALS)\n+    .addParametersMatcher(JAVA_LANG_STRING, MethodMatchers.ANY, MethodMatchers.ANY)\n+    .addParametersMatcher(JAVA_LANG_STRING, MethodMatchers.ANY, MethodMatchers.ANY, MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERTJ_ASSERT_THAT = MethodMatchers.create()\n+    .ofTypes(\n+      \"org.assertj.core.api.Assertions\",\n+      \"org.assertj.core.api.AssertionsForInterfaceTypes\",\n+      \"org.assertj.core.api.AssertionsForClassTypes\")\n+    .names(\"assertThat\", \"assertThatObject\")\n+    .addParametersMatcher(MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERTJ_NULL_AND_NOT_NULL = MethodMatchers.create()\n+    .ofAnyType()\n+    .names(\"isNull\", \"isNotNull\")\n+    .addWithoutParametersMatcher()\n+    .build();\n+\n+  private static final MethodMatchers ASSERTJ_POSITIVE_PREDICATES = MethodMatchers.create()\n+    .ofAnyType()\n+    .names(\"isEqualTo\", \"isSameAs\")\n+    .addParametersMatcher(MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERTJ_NEGATIVE_PREDICATES = MethodMatchers.create()\n+    .ofAnyType()\n+    .names(\"isNotEqualTo\", \"isNotSameAs\")\n+    .addParametersMatcher(MethodMatchers.ANY)\n+    .build();\n+\n+  private static final MethodMatchers ASSERTJ_CONFIGURATION = MethodMatchers.create()\n+    .ofAnyType()\n+    .names(\"as\", \"describedAs\", \"withFailMessage\", \"overridingErrorMessage\")\n+    .withAnyParameters()\n+    .build();\n+\n+  private static final String MESSAGE = \"Change the assertion arguments to not compare dissimilar types.\";\n+\n+  private enum Option {\n+    ACCEPT_DISSIMILAR_INTERFACE,\n+    REJECT_DISSIMILAR_INTERFACE,\n+  }\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    if (!hasSemantic()) {\n+      return;\n+    }\n+    MethodInvocationTree mit = (MethodInvocationTree) tree;\n+    if (ASSERT_NULLABLE_FIRST_ARGUMENT.matches(mit)) {\n+      checkNullableAssertion(new Argument(mit, 0));\n+    } else if (ASSERT_NULLABLE_SECOND_ARGUMENT.matches(mit)) {\n+      checkNullableAssertion(new Argument(mit, 1));\n+    } else if (ASSERT_EQUALS_SECOND_AND_FIRST_ARGUMENTS.matches(mit)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bec75a1865f3ec9efb30b18c4e0ef74124466f05"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg3NjQ5NQ==", "bodyText": "Maybe it's worth to put a concrete example of possible FP (when a is initialized with a B()),", "url": "https://github.com/SonarSource/sonar-java/pull/2987#discussion_r435876495", "createdAt": "2020-06-05T12:05:11Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks-test-sources/src/main/java/checks/AssertionTypesCheck_JUnit5.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package checks;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+public class AssertionTypesCheck_JUnit5 {\n+\n+  @Test\n+  void test_junit() {\n+    assertNotNull(bytePrimitive()); // Noncompliant [[sc=19;ec=34]] {{Change the assertion arguments to not compare dissimilar types.}}\n+    assertNotNull(shortPrimitive(), \"msg\"); // Noncompliant\n+    assertNotNull(intPrimitive(), () -> \"msg\"); // Noncompliant\n+    assertNotNull(charPrimitive()); // Noncompliant\n+    assertNotNull(getString(), \"msg\"); // Compliant\n+\n+    assertNotNull(null);\n+\n+    assertNull(longPrimitive()); // Noncompliant\n+    assertNull(floatPrimitive(), \"msg\"); // Noncompliant\n+    assertNull(doublePrimitive(), () -> \"msg\"); // Noncompliant\n+\n+    assertEquals(\n+      null, // Noncompliant [[sc=7;ec=11;secondary=28]] {{Change the assertion arguments to not compare dissimilar types.}}\n+      doublePrimitive());\n+    assertEquals(null, booleanPrimitive(), \"msg\"); // Noncompliant\n+\n+    assertNotEquals(null, doublePrimitive()); // Noncompliant\n+    assertNotEquals(null, booleanPrimitive(), \"msg\"); // Noncompliant\n+\n+    assertNotEquals(42, intArray()); // Noncompliant\n+    assertNotEquals(new int[] {42}, intPrimitive()); // Noncompliant\n+\n+    Object o = new A();\n+    A a = new A();\n+    A a2 = new A();\n+    B b = new B();\n+    X x = new X();\n+    Y y = new Y();\n+    I1 i1 = new B();\n+    I2 i2 = new Y();\n+\n+    assertNotEquals(new int[] {42}, o); // Compliant\n+    assertNotEquals(new int[] {42}, a); // Noncompliant\n+\n+    assertNotEquals(new A[] {}, new A[] {});     // Compliant\n+    assertNotEquals(new A[] {}, new B[] {});     // Compliant\n+    assertNotEquals(new A[] {}, new X[] {});     // Noncompliant\n+    assertNotEquals(new A[][] {}, new A[] {});   // Noncompliant\n+    assertNotEquals(new A[][] {}, new B[][] {}); // Compliant\n+    assertNotEquals(new A[][] {}, new X[][] {}); // Noncompliant\n+\n+    assertNotEquals(new int[] {}, new int[] {}); // Compliant\n+    assertNotEquals(new A[] {}, new int[] {});   // Noncompliant\n+    assertNotEquals(new long[] {}, new int[] {});// Noncompliant\n+\n+    assertNotEquals(a, a2);         // Compliant\n+    assertNotEquals(b, new B(){});  // Compliant\n+    assertNotEquals(b, i1);         // Compliant\n+    assertNotEquals(i1, b);         // Compliant\n+    assertNotEquals(b, new I1(){}); // Noncompliant\n+    assertNotEquals(b, i2);         // Noncompliant\n+    assertNotEquals(a, b);          // Compliant\n+    assertNotEquals(b, a);          // Compliant\n+    assertNotEquals(b, o);          // Compliant\n+\n+    assertNotEquals(a, x);          // Noncompliant\n+    assertEquals(a, x);             // Noncompliant\n+\n+    // Here we are not sure, but it seems valuable to raise an issue that\n+    // could be a false-positive because the negative assertion is useless by\n+    // always passing if types are dissimilar\n+    assertNotEquals(a, i1);         // Noncompliant", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bec75a1865f3ec9efb30b18c4e0ef74124466f05"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg4MDMzMA==", "bodyText": "It's a nitpick, but I would put these lines after line 81.\nIt could help to understand that the problematic case is when the first argument is in fact a subtype implementing the interface, a situation not possible when the class is final!", "url": "https://github.com/SonarSource/sonar-java/pull/2987#discussion_r435880330", "createdAt": "2020-06-05T12:13:23Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks-test-sources/src/main/java/checks/AssertionTypesCheck_JUnit5.java", "diffHunk": "@@ -0,0 +1,184 @@\n+package checks;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+public class AssertionTypesCheck_JUnit5 {\n+\n+  @Test\n+  void test_junit() {\n+    assertNotNull(bytePrimitive()); // Noncompliant [[sc=19;ec=34]] {{Change the assertion arguments to not compare dissimilar types.}}\n+    assertNotNull(shortPrimitive(), \"msg\"); // Noncompliant\n+    assertNotNull(intPrimitive(), () -> \"msg\"); // Noncompliant\n+    assertNotNull(charPrimitive()); // Noncompliant\n+    assertNotNull(getString(), \"msg\"); // Compliant\n+\n+    assertNotNull(null);\n+\n+    assertNull(longPrimitive()); // Noncompliant\n+    assertNull(floatPrimitive(), \"msg\"); // Noncompliant\n+    assertNull(doublePrimitive(), () -> \"msg\"); // Noncompliant\n+\n+    assertEquals(\n+      null, // Noncompliant [[sc=7;ec=11;secondary=28]] {{Change the assertion arguments to not compare dissimilar types.}}\n+      doublePrimitive());\n+    assertEquals(null, booleanPrimitive(), \"msg\"); // Noncompliant\n+\n+    assertNotEquals(null, doublePrimitive()); // Noncompliant\n+    assertNotEquals(null, booleanPrimitive(), \"msg\"); // Noncompliant\n+\n+    assertNotEquals(42, intArray()); // Noncompliant\n+    assertNotEquals(new int[] {42}, intPrimitive()); // Noncompliant\n+\n+    Object o = new A();\n+    A a = new A();\n+    A a2 = new A();\n+    B b = new B();\n+    X x = new X();\n+    Y y = new Y();\n+    I1 i1 = new B();\n+    I2 i2 = new Y();\n+\n+    assertNotEquals(new int[] {42}, o); // Compliant\n+    assertNotEquals(new int[] {42}, a); // Noncompliant\n+\n+    assertNotEquals(new A[] {}, new A[] {});     // Compliant\n+    assertNotEquals(new A[] {}, new B[] {});     // Compliant\n+    assertNotEquals(new A[] {}, new X[] {});     // Noncompliant\n+    assertNotEquals(new A[][] {}, new A[] {});   // Noncompliant\n+    assertNotEquals(new A[][] {}, new B[][] {}); // Compliant\n+    assertNotEquals(new A[][] {}, new X[][] {}); // Noncompliant\n+\n+    assertNotEquals(new int[] {}, new int[] {}); // Compliant\n+    assertNotEquals(new A[] {}, new int[] {});   // Noncompliant\n+    assertNotEquals(new long[] {}, new int[] {});// Noncompliant\n+\n+    assertNotEquals(a, a2);         // Compliant\n+    assertNotEquals(b, new B(){});  // Compliant\n+    assertNotEquals(b, i1);         // Compliant\n+    assertNotEquals(i1, b);         // Compliant\n+    assertNotEquals(b, new I1(){}); // Noncompliant\n+    assertNotEquals(b, i2);         // Noncompliant\n+    assertNotEquals(a, b);          // Compliant\n+    assertNotEquals(b, a);          // Compliant\n+    assertNotEquals(b, o);          // Compliant\n+\n+    assertNotEquals(a, x);          // Noncompliant\n+    assertEquals(a, x);             // Noncompliant\n+\n+    // Here we are not sure, but it seems valuable to raise an issue that\n+    // could be a false-positive because the negative assertion is useless by\n+    // always passing if types are dissimilar\n+    assertNotEquals(a, i1);         // Noncompliant\n+\n+    // Here we are not sure, but it seems NOT valuable to raise an issue that\n+    // could be a false-positive because the positive assertion is helpful and\n+    // always fails if types are dissimilar\n+    assertEquals(a, i1);            // Compliant\n+\n+    assertNotEquals(a, i2);         // Noncompliant\n+    assertEquals(a, i2);            // Compliant\n+    assertEquals(a, x);             // Noncompliant\n+\n+    assertNotEquals(i1, i1);         // Compliant\n+    assertEquals(i1, i1);            // Compliant\n+\n+    assertNotEquals(i1, i2);         // Noncompliant\n+    assertEquals(i1, i2);            // Compliant\n+\n+    assertNotEquals(y, i1);         // Noncompliant\n+    // Y is a final class\n+    assertEquals(y, i1);            // Noncompliant", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bec75a1865f3ec9efb30b18c4e0ef74124466f05"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "287c36f930b4338f6a0dc38f6b4d31241a8b492b", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/287c36f930b4338f6a0dc38f6b4d31241a8b492b", "committedDate": "2020-06-08T09:57:13Z", "message": "SONARJAVA-3399 Rule S5845: Assertions of dissimilar types should not be made"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0af028fc9fe27c9fd4147c6fe232ed60b270886", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/b0af028fc9fe27c9fd4147c6fe232ed60b270886", "committedDate": "2020-06-08T09:57:13Z", "message": "Fix from review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db763ba47ce785b1a31da725358f8b940f49d456", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/db763ba47ce785b1a31da725358f8b940f49d456", "committedDate": "2020-06-08T09:42:25Z", "message": "Fix from review"}, "afterCommit": {"oid": "b0af028fc9fe27c9fd4147c6fe232ed60b270886", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/b0af028fc9fe27c9fd4147c6fe232ed60b270886", "committedDate": "2020-06-08T09:57:13Z", "message": "Fix from review"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1713, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}