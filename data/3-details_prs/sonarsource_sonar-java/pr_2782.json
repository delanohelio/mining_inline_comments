{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMzQ1OTAx", "number": 2782, "title": "SONARJAVA-3207 Rule S5547: Cipher algorithms should be robust", "bodyText": "", "createdAt": "2020-02-03T14:24:38Z", "url": "https://github.com/SonarSource/sonar-java/pull/2782", "merged": true, "mergeCommit": {"oid": "a4a67af0415e70eb62638bc3874ea1d3eaba3499"}, "closed": true, "closedAt": "2020-02-05T06:04:21Z", "author": {"login": "alban-auzeill"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAumbEgBqjMwMDI2MzUzMTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBPE2mgBqjMwMDg2NTA3Nzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b82c4b204a5170d0409d441fc59889362fe14728", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/b82c4b204a5170d0409d441fc59889362fe14728", "committedDate": "2020-02-03T14:17:09Z", "message": "SONARJAVA-3207 Rule S5547: Cipher algorithms should be robust"}, "afterCommit": {"oid": "0381e22a1c33f268d08b9d2d7e69e50615ae70c5", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/0381e22a1c33f268d08b9d2d7e69e50615ae70c5", "committedDate": "2020-02-03T15:22:55Z", "message": "SONARJAVA-3208 Deprecate S2278 and S2258 in favor of S5547"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyODMzMzEy", "url": "https://github.com/SonarSource/sonar-java/pull/2782#pullrequestreview-352833312", "createdAt": "2020-02-04T09:35:26Z", "commit": {"oid": "0381e22a1c33f268d08b9d2d7e69e50615ae70c5"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOTozNToyNlrOFlNbdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOTo0Njo0N1rOFlNyJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU2MTY1Mg==", "bodyText": "In this check, we did something similar and we used ExpressionsHelper.getConstantValueAsString.  We may want to use it to be consistent.\nIt would also avoid to trim the quotes at line 74.", "url": "https://github.com/SonarSource/sonar-java/pull/2782#discussion_r374561652", "createdAt": "2020-02-04T09:35:26Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/StrongCipherAlgorithmCheck.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.JavaPropertiesHelper;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.matcher.MethodMatcher;\n+import org.sonar.java.model.LiteralUtils;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.LiteralTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.NewClassTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5547\")\n+public class StrongCipherAlgorithmCheck extends AbstractMethodDetection {\n+\n+  private static final String MESSAGE = \"Use a strong cipher algorithm.\";\n+\n+  private static final Set<String> VULNERABLE_ALGORITHMS = Stream.of(\"DES\", \"DESede\", \"RC2\", \"RC4\", \"Blowfish\")\n+    .map(name -> name.toUpperCase(Locale.ROOT)).collect(Collectors.toSet());\n+\n+  @Override\n+  protected List<MethodMatcher> getMethodInvocationMatchers() {\n+    return Arrays.asList(\n+      MethodMatcher.create().typeDefinition(\"javax.crypto.Cipher\").name(\"getInstance\").withAnyParameters(),\n+      MethodMatcher.create().typeDefinition(\"javax.crypto.NullCipher\").name(\"<init>\").withAnyParameters());\n+  }\n+\n+  @Override\n+  protected void onConstructorFound(NewClassTree newClassTree) {\n+    reportIssue(newClassTree.identifier(), MESSAGE);\n+  }\n+\n+  @Override\n+  protected void onMethodInvocationFound(MethodInvocationTree mit) {\n+    ExpressionTree firstArg = mit.arguments().get(0);\n+    ExpressionTree value = getValueOrPropertyDefaultValue(firstArg);\n+    if (value.is(Tree.Kind.STRING_LITERAL)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0381e22a1c33f268d08b9d2d7e69e50615ae70c5"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU2NjI0OA==", "bodyText": "I think it's better to remove the assignments for clarity.", "url": "https://github.com/SonarSource/sonar-java/pull/2782#discussion_r374566248", "createdAt": "2020-02-04T09:44:35Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/test/files/checks/StrongCipherAlgorithmCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+import javax.crypto.Cipher;\n+import javax.crypto.NullCipher;\n+import javax.crypto.NoSuchPaddingException;\n+import java.security.NoSuchAlgorithmException;\n+\n+class MyCipher extends Cipher {\n+  public MyCipher() {\n+    super(null, null, \"\");\n+  }\n+}\n+\n+class A {\n+  void foo() throws NoSuchAlgorithmException, NoSuchPaddingException {\n+    Cipher c;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0381e22a1c33f268d08b9d2d7e69e50615ae70c5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU2NzQ2Mg==", "bodyText": "What is this call?", "url": "https://github.com/SonarSource/sonar-java/pull/2782#discussion_r374567462", "createdAt": "2020-02-04T09:46:47Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/test/files/checks/StrongCipherAlgorithmCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+import javax.crypto.Cipher;\n+import javax.crypto.NullCipher;\n+import javax.crypto.NoSuchPaddingException;\n+import java.security.NoSuchAlgorithmException;\n+\n+class MyCipher extends Cipher {\n+  public MyCipher() {\n+    super(null, null, \"\");\n+  }\n+}\n+\n+class A {\n+  void foo() throws NoSuchAlgorithmException, NoSuchPaddingException {\n+    Cipher c;\n+    c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\"); // Noncompliant [[sc=28;ec=53]] {{Use a strong cipher algorithm.}}\n+    c = Cipher.getInstance(\"DES/ECB/PKCS5Padding\");// Noncompliant\n+    c = Cipher.getInstance(\"RC2/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"AES/GCM/NoPadding\");//Compliant\n+    c = new NullCipher(); // Noncompliant [[sc=13;ec=23]] {{Use a strong cipher algorithm.}}\n+    c = new javax.crypto.NullCipher(); // Noncompliant\n+    c = new MyCipher();\n+\n+    // DES\n+    c = Cipher.getInstance(\"DES\"); // Noncompliant\n+    c = Cipher.getInstance(\"DES/ECB\"); // Noncompliant\n+    c = Cipher.getInstance(\"DES/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"DES/GCM\"); // Noncompliant\n+    c = Cipher.getInstance(\"DES/GCM/NoPadding\"); // Noncompliant\n+    c = Cipher.getInstance(\"DES/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    // 3DES\n+    c = Cipher.getInstance(\"DESede\"); // Noncompliant\n+    c = Cipher.getInstance(\"DESede/ECB\"); // Noncompliant\n+    c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"DESede/GCM\"); // Noncompliant\n+    c = Cipher.getInstance(\"DESede/GCM/NoPadding\"); // Noncompliant\n+    c = Cipher.getInstance(\"DESede/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    // RC2\n+    c = Cipher.getInstance(\"RC2\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC2/ECB\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC2/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC2/GCM\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC2/GCM/NoPadding\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC2/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    // RC4\n+    c = Cipher.getInstance(\"RC4\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC4/ECB\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC4/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC4/GCM\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC4/GCM/NoPadding\"); // Noncompliant\n+    c = Cipher.getInstance(\"RC4/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    // Blowfish\n+    c = Cipher.getInstance(\"Blowfish\"); // Noncompliant\n+    c = Cipher.getInstance(\"Blowfish/ECB\"); // Noncompliant\n+    c = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\"); // Noncompliant\n+    c = Cipher.getInstance(\"Blowfish/GCM\"); // Noncompliant\n+    c = Cipher.getInstance(\"Blowfish/GCM/NoPadding\"); // Noncompliant\n+    c = Cipher.getInstance(\"Blowfish/GCM/PKCS5Padding\"); // Noncompliant\n+\n+    c = Cipher.getInstance(\"AES/GCM/NoPadding\"); // Compliant\n+\n+    c.getBlockSize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0381e22a1c33f268d08b9d2d7e69e50615ae70c5"}, "originalPosition": 65}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0381e22a1c33f268d08b9d2d7e69e50615ae70c5", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/0381e22a1c33f268d08b9d2d7e69e50615ae70c5", "committedDate": "2020-02-03T15:22:55Z", "message": "SONARJAVA-3208 Deprecate S2278 and S2258 in favor of S5547"}, "afterCommit": {"oid": "98eeb3245e614e67d72fe0ab190373cb924dc5e7", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/98eeb3245e614e67d72fe0ab190373cb924dc5e7", "committedDate": "2020-02-04T14:01:40Z", "message": "Fix from review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMTIwMzg0", "url": "https://github.com/SonarSource/sonar-java/pull/2782#pullrequestreview-353120384", "createdAt": "2020-02-04T16:30:28Z", "commit": {"oid": "98eeb3245e614e67d72fe0ab190373cb924dc5e7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98eeb3245e614e67d72fe0ab190373cb924dc5e7", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/98eeb3245e614e67d72fe0ab190373cb924dc5e7", "committedDate": "2020-02-04T14:01:40Z", "message": "Fix from review"}, "afterCommit": {"oid": "1a81eec9379d1bfd7041d229608a02438faa77d5", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/1a81eec9379d1bfd7041d229608a02438faa77d5", "committedDate": "2020-02-04T17:03:42Z", "message": "Fix from review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "829721bbe02202d5fb163cf899f632696f0f73d4", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/829721bbe02202d5fb163cf899f632696f0f73d4", "committedDate": "2020-02-05T05:13:27Z", "message": "SONARJAVA-3207 Rule S5547: Cipher algorithms should be robust"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bab65334d2639bc55c622f87f5901677fe695de3", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/bab65334d2639bc55c622f87f5901677fe695de3", "committedDate": "2020-02-05T05:13:27Z", "message": "SONARJAVA-3208 Deprecate S2278 and S2258 in favor of S5547"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a81eec9379d1bfd7041d229608a02438faa77d5", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/1a81eec9379d1bfd7041d229608a02438faa77d5", "committedDate": "2020-02-04T17:03:42Z", "message": "Fix from review"}, "afterCommit": {"oid": "bab65334d2639bc55c622f87f5901677fe695de3", "author": {"user": {"login": "alban-auzeill", "name": "Alban Auzeill"}}, "url": "https://github.com/SonarSource/sonar-java/commit/bab65334d2639bc55c622f87f5901677fe695de3", "committedDate": "2020-02-05T05:13:27Z", "message": "SONARJAVA-3208 Deprecate S2278 and S2258 in favor of S5547"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1814, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}