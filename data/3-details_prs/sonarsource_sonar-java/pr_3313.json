{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMDA3MTY1", "number": 3313, "title": "SONARJAVA-3610 Rule S6070: The regex escape sequence \\cX should only be used with characters in the @-_ range", "bodyText": "", "createdAt": "2020-12-02T13:11:46Z", "url": "https://github.com/SonarSource/sonar-java/pull/3313", "merged": true, "mergeCommit": {"oid": "f89a241a77c9bc0c187f830f4d2a71462b39ab7c"}, "closed": true, "closedAt": "2020-12-02T16:19:23Z", "author": {"login": "quentin-jaquier-sonarsource"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiOJO8gH2gAyNTMxMDA3MTY1OjVmNmU5Zjk0ZjFmMWM5Y2QwNjkwYzM3NWIzMzdkMWEzMWJkYmJlZGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiQ_-QgFqTU0MzAwNTIzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5f6e9f94f1f1c9cd0690c375b337d1a31bdbbedf", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/5f6e9f94f1f1c9cd0690c375b337d1a31bdbbedf", "committedDate": "2020-12-02T12:59:25Z", "message": "SONARJAVA-3610 Rule S6070: The regex escape sequence \\cX should only be used with characters in the @-_ range"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyODYwOTIz", "url": "https://github.com/SonarSource/sonar-java/pull/3313#pullrequestreview-542860923", "createdAt": "2020-12-02T13:59:56Z", "commit": {"oid": "5f6e9f94f1f1c9cd0690c375b337d1a31bdbbedf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzo1OTo1NlrOH9cNNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzo1OTo1NlrOH9cNNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE4NzMxOA==", "bodyText": "This should be matches. I don't think there can ever be a case where it makes a difference (i.e. a case where \\\\cX somehow appears as a substring in some other escape sequence), but since we're not looking for a substring match, we shouldn't be using find.", "url": "https://github.com/SonarSource/sonar-java/pull/3313#discussion_r534187318", "createdAt": "2020-12-02T13:59:56Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/regex/EscapeSequenceControlCharacterCheck.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.regex;\n+\n+import java.util.Collections;\n+import java.util.regex.Pattern;\n+import org.sonar.check.Rule;\n+import org.sonar.java.regex.RegexParseResult;\n+import org.sonar.java.regex.ast.PlainCharacterTree;\n+import org.sonar.java.regex.ast.RegexBaseVisitor;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+\n+@Rule(key = \"S6070\")\n+public class EscapeSequenceControlCharacterCheck extends AbstractRegexCheck {\n+\n+  private static final String MESSAGE = \"Remove or replace this problematic use of \\\\c.\";\n+\n+  private static final Pattern WRONG_ESCAPED_SEQUENCE = Pattern.compile(\"\\\\\\\\c[^@-_]\");\n+\n+  @Override\n+  public void checkRegex(RegexParseResult regexForLiterals, ExpressionTree methodInvocationOrAnnotation) {\n+    new WrongEscapeSequenceVisitor().visit(regexForLiterals);\n+  }\n+\n+  private class WrongEscapeSequenceVisitor extends RegexBaseVisitor {\n+    @Override\n+    public void visitPlainCharacter(PlainCharacterTree tree) {\n+      if (WRONG_ESCAPED_SEQUENCE.matcher(tree.getText()).find()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f6e9f94f1f1c9cd0690c375b337d1a31bdbbedf"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec9ff0c58868a62135f34ba35a9f3007d803d9d5", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/ec9ff0c58868a62135f34ba35a9f3007d803d9d5", "committedDate": "2020-12-02T15:13:05Z", "message": "Use matches and fix the regex to match two backslashes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzMDA1MjMz", "url": "https://github.com/SonarSource/sonar-java/pull/3313#pullrequestreview-543005233", "createdAt": "2020-12-02T16:19:01Z", "commit": {"oid": "ec9ff0c58868a62135f34ba35a9f3007d803d9d5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1847, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}