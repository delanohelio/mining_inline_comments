{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0NjcxMDAx", "number": 3292, "title": "SONARJAVA-3482 Support character classes as operand to reluctant quantifier in rule S5857", "bodyText": "\u2026", "createdAt": "2020-11-20T12:22:55Z", "url": "https://github.com/SonarSource/sonar-java/pull/3292", "merged": true, "mergeCommit": {"oid": "feba0332113474f11ec0b1ac945e38e94630bde7"}, "closed": true, "closedAt": "2020-11-23T13:44:09Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdeV3rTgH2gAyNTI0NjcxMDAxOjc4MDY0YjJmMjQyNzJhYzY1Zjk3ZjYwYzAxZjMzM2QxZTdjZGI1NWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfU4qogFqTUzNjQ1NTkzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "78064b2f24272ac65f97f60c01f333d1e7cdb55b", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/78064b2f24272ac65f97f60c01f333d1e7cdb55b", "committedDate": "2020-11-20T11:43:47Z", "message": "SONARJAVA-3482 Support character classes as operand to reluctant quantifier in rule S5857"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1NjE1MDk4", "url": "https://github.com/SonarSource/sonar-java/pull/3292#pullrequestreview-535615098", "createdAt": "2020-11-20T17:09:26Z", "commit": {"oid": "78064b2f24272ac65f97f60c01f333d1e7cdb55b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzowOToyNlrOH3YhjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzowOToyNlrOH3YhjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgzNTUzMw==", "bodyText": "In these cases (and the later ones involving \\s, \\d and \\w), the suggested replacement is too complicated because those classes don't contain >, so there's no need to exclude it. This also means that there's no potential for catastrophic backtracking behavior here, so using the ? here is not really problematic, but also entirely unnecessary (the regex would behave the same without it and be somewhat more efficient).\nSo in cases like this there should either be no issue or the message should instead be something along the lines of \"Make this regex greedy\" or \"Remove this '?'\".\nTo check whether a character class overlaps with the character after it, new SimplifiedRegexCharacterClass(base).intersects(new SimplifiedRegexCharacterClass(escapedClass), false) can be used in the code.", "url": "https://github.com/SonarSource/sonar-java/pull/3292#discussion_r527835533", "createdAt": "2020-11-20T17:09:26Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks-test-sources/src/main/java/checks/regex/ReluctantQuantifierCheck.java", "diffHunk": "@@ -4,7 +4,21 @@\n \n   void noncompliant(String str) {\n     str.matches(\"<.+?>\"); // Noncompliant [[sc=19;ec=22]] {{Replace this use of a reluctant quantifier with \"[^>]++\".}}\n+    str.matches(\"<\\\\S+?>\"); // Noncompliant [[sc=19;ec=24]] {{Replace this use of a reluctant quantifier with \"[^>\\\\s]++\".}}\n+    str.matches(\"<\\\\D+?>\"); // Noncompliant [[sc=19;ec=24]] {{Replace this use of a reluctant quantifier with \"[^>\\\\d]++\".}}\n+    str.matches(\"<\\\\W+?>\"); // Noncompliant [[sc=19;ec=24]] {{Replace this use of a reluctant quantifier with \"[^>\\\\w]++\".}}\n+    str.matches(\"<\\\\s+?>\"); // Noncompliant [[sc=19;ec=24]] {{Replace this use of a reluctant quantifier with \"[^>\\\\S]++\".}}\n+    str.matches(\"<\\\\d+?>\"); // Noncompliant [[sc=19;ec=24]] {{Replace this use of a reluctant quantifier with \"[^>\\\\D]++\".}}\n+    str.matches(\"<\\\\w+?>\"); // Noncompliant [[sc=19;ec=24]] {{Replace this use of a reluctant quantifier with \"[^>\\\\W]++\".}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78064b2f24272ac65f97f60c01f333d1e7cdb55b"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8716d085712c0ef8dec878d0f70a9c50e0e0883c", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/8716d085712c0ef8dec878d0f70a9c50e0e0883c", "committedDate": "2020-11-23T09:55:26Z", "message": "SONARJAVA-3482 Support character classes as operand to reluctant quantifier in rule S5857"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MzgwMDk2", "url": "https://github.com/SonarSource/sonar-java/pull/3292#pullrequestreview-536380096", "createdAt": "2020-11-23T11:19:46Z", "commit": {"oid": "8716d085712c0ef8dec878d0f70a9c50e0e0883c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMToxOTo0N1rOH4JFuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMToxOTo0N1rOH4JFuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYzMTIyNQ==", "bodyText": "Instead of new FlagSet(), we should be calling getFlagSet() here. Otherwise it won't take flags into account for cases like \"(?i)[a-z]*?X\" or Pattern.compile(\"[a-z]*?X\", Pattern.CASE_INSENSITIVE).\nEven with that change we can still get wrong results if a flag is only enabled for part of the regex (e.g. (?i:[a-z]*?)X where the i flag would already be unset by the time we call getFlagSet), but that's actually pretty tricky to handle with the current API. @alban-auzeill  is currently working on a change that will make it easy to query the flags for a specific RegexTree, so it's best to just use getFlags() for now and then we can replace it with base.getFlags() and tree.getFlags() respectively afterwards once Alban adds that method.", "url": "https://github.com/SonarSource/sonar-java/pull/3292#discussion_r528631225", "createdAt": "2020-11-23T11:19:47Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/regex/ReluctantQuantifierCheck.java", "diffHunk": "@@ -104,9 +108,30 @@ private String makePossessive(Quantifier quantifier) {\n       return Optional.of(result);\n     }\n \n+    private boolean hasNoIntersection(CharacterClassElementTree tree, @Nullable CharacterClassElementTree base) {\n+      return base != null && !new SimplifiedRegexCharacterClass(base, new FlagSet()).intersects(new SimplifiedRegexCharacterClass(tree, new FlagSet()), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8716d085712c0ef8dec878d0f70a9c50e0e0883c"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56f05e2a9c5e3a92eda73074e7dfc7ba2a86d9cb", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/56f05e2a9c5e3a92eda73074e7dfc7ba2a86d9cb", "committedDate": "2020-11-23T13:01:04Z", "message": "Adjust review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NDU1OTMy", "url": "https://github.com/SonarSource/sonar-java/pull/3292#pullrequestreview-536455932", "createdAt": "2020-11-23T13:08:53Z", "commit": {"oid": "56f05e2a9c5e3a92eda73074e7dfc7ba2a86d9cb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1952, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}