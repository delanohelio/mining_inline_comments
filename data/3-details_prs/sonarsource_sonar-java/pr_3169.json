{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxMjk0MTM4", "number": 3169, "title": "SONARJAVA-3372 Rule S5803: Class members annotated with @VisibleForTesting should not be accessed from production code", "bodyText": "", "createdAt": "2020-09-07T11:10:25Z", "url": "https://github.com/SonarSource/sonar-java/pull/3169", "merged": true, "mergeCommit": {"oid": "6e5b86f58d2573b1319dda4de9ccb54fdaf53921"}, "closed": true, "closedAt": "2020-09-09T09:41:52Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdGhIJmgBqjM3MzY2NzU4NzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHI2FMgFqTQ4NDgzMTEzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc1bf2e4ae9dc60d9a2f5a507987fa368c1b00bf", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/bc1bf2e4ae9dc60d9a2f5a507987fa368c1b00bf", "committedDate": "2020-09-07T11:06:04Z", "message": "Basic Implementation"}, "afterCommit": {"oid": "563dc0ced23e798ed55fa0f95aaac8e7e140051e", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/563dc0ced23e798ed55fa0f95aaac8e7e140051e", "committedDate": "2020-09-07T11:16:18Z", "message": "Basic Implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1b7a38c4fe92398ffe4adff6a336362f4e021e26", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/1b7a38c4fe92398ffe4adff6a336362f4e021e26", "committedDate": "2020-09-07T12:38:18Z", "message": "Add class check & refactoring\n\nFix ruling tests"}, "afterCommit": {"oid": "76054202705491c19ff6b4e05985db1c8aa0175c", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/76054202705491c19ff6b4e05985db1c8aa0175c", "committedDate": "2020-09-07T13:00:21Z", "message": "Add class check & refactoring\n\nFix ruling tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76054202705491c19ff6b4e05985db1c8aa0175c", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/76054202705491c19ff6b4e05985db1c8aa0175c", "committedDate": "2020-09-07T13:00:21Z", "message": "Add class check & refactoring\n\nFix ruling tests"}, "afterCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/2624d79bad1c750ef365cbdd446f4af071acd1de", "committedDate": "2020-09-07T13:29:18Z", "message": "Add class check & refactoring\n\nFix ruling tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNjcyNjQ3", "url": "https://github.com/SonarSource/sonar-java/pull/3169#pullrequestreview-483672647", "createdAt": "2020-09-07T17:21:23Z", "commit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzoyMToyNFrOHOFRLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzo0OTo0N1rOHOFn3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyODQzMQ==", "bodyText": "There is a suspicious extra space at the end of the title. You might want to check on Jira.", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484528431", "createdAt": "2020-09-07T17:21:24Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S5803_java.json", "diffHunk": "@@ -0,0 +1,12 @@\n+{\n+  \"title\": \"Class members annotated with \\\"@VisibleForTesting\\\" should not be accessed from production code \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyODgxOQ==", "bodyText": "Why not be even more precise and add the folder which will contain directly the classes we are searching for?", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484528819", "createdAt": "2020-09-07T17:23:09Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/test/java/org/sonar/java/checks/VisibleForTestingUsageCheckTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.io.File;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.sonar.java.checks.verifier.JavaCheckVerifier;\n+import org.sonar.java.testing.FilesUtils;\n+\n+import static org.sonar.java.CheckTestUtils.testSourcesPath;\n+\n+class VisibleForTestingUsageCheckTest {\n+  @Test\n+  void test() {\n+    List<File> classPath = FilesUtils.getClassPath(FilesUtils.DEFAULT_TEST_JARS_DIRECTORY);\n+    classPath.add(new File(\"../java-checks-test-sources/target/classes\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyOTIyMQ==", "bodyText": "&nbsp; is suspicious here. Also, RSPEC mentions classes, while here we only have methods and fields. I guess you should re-generate the  metadada.", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484529221", "createdAt": "2020-09-07T17:25:03Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S5803_java.html", "diffHunk": "@@ -0,0 +1,30 @@\n+<p><code>@VisibleForTesting</code>&nbsp;can be used to mark methods and fields whose visibility restrictions have been relaxed more than necessary for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyOTQxMw==", "bodyText": "missing g at the end :)\nAlso, I fee that it would be nice to mark the fully qualified names with <code> blocks", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484529413", "createdAt": "2020-09-07T17:25:54Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S5803_java.html", "diffHunk": "@@ -0,0 +1,30 @@\n+<p><code>@VisibleForTesting</code>&nbsp;can be used to mark methods and fields whose visibility restrictions have been relaxed more than necessary for\n+the API to allow for easier unit testing.</p>\n+<p>Access to such methods and fields only possible thanks to this relaxed visibility is fine for test code, but it should be avoided in production\n+code.</p>\n+<p>Supported framework:</p>\n+<p> * Guava (com.google.common.annotations.VisibleForTestin)</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMjIwMg==", "bodyText": "Here is the only missing condition in term of coverage (owner == null probably).\nI feel that we might be missing the point. For me, the only way to have a missing owner is to have a symbol not correctly resolved, and, therefore, marked as being unknown (package symbols can not occur here). I would consequently only test like this:\nreturn !symbol.isUnknown() && (symbol.isTypeSymbol() || symbol.owner().isTypeSymbol());\nNow, in order to cover it, simply create a test file under java-checks-test-sources/src/main/files/non-compiling/checks, and then add a test such as:\n  @Test\n  void test_non_compiling() {\n    JavaCheckVerifier.newVerifier()\n      .onFile(nonCompilingTestSourcesPath(\"checks/VisibleForTestingUsageCheck.java\"))\n      .withCheck(new VisibleForTestingUsageCheck())\n      .verifyIssues();\n  }\nAnd as a test code something like:\nclass VisibleForTestingUsageCheck {\n  @com.google.common.annotations.VisibleForTesting \n  void bar() { }\n\n  void foo() {\n    unknown(); // Compliant\n  }\n}\n\nclass VisibleForTestingUsageCheck2 {\n  void qix() {\n    new VisibleForTestingUsageCheck()\n      .bar(); // Noncompliant\n  }\n}", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484532202", "createdAt": "2020-09-07T17:40:05Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5803\")\n+public class VisibleForTestingUsageCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final List<String> ANNOTATIONS = Arrays.asList(\n+    \"com.google.common.annotations.VisibleForTesting\",\n+    \"org.assertj.core.util.VisibleForTesting\",\n+    \"androidx.annotation.VisibleForTesting\",\n+    \"org.apache.flink.annotation.VisibleForTesting\"\n+  );\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.IDENTIFIER);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    IdentifierTree identifier = (IdentifierTree) tree;\n+    Symbol symbol = identifier.symbol();\n+    SymbolMetadata metadata = symbol.metadata();\n+    if (metadata.annotations().isEmpty()) {\n+      return;\n+    }\n+\n+    boolean inTheSameFile = symbol.declaration() != null;\n+    if (isFieldMethodOrClass(symbol) && !inTheSameFile\n+      && (ANNOTATIONS.stream().anyMatch(metadata::isAnnotatedWith))) {\n+      reportIssue(identifier, String.format(\"Remove this usage of \\\"%s\\\", it is annotated with @VisibleForTesting and should not be accessed from production code.\",\n+        identifier.name()));\n+    }\n+  }\n+\n+  private static boolean isFieldMethodOrClass(Symbol symbol) {\n+    Symbol owner = symbol.owner();\n+    return ((owner != null) && owner.isTypeSymbol()) || symbol.isTypeSymbol();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMjM0NQ==", "bodyText": "you can probably already return here if the symbol is unknown.", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484532345", "createdAt": "2020-09-07T17:40:43Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5803\")\n+public class VisibleForTestingUsageCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final List<String> ANNOTATIONS = Arrays.asList(\n+    \"com.google.common.annotations.VisibleForTesting\",\n+    \"org.assertj.core.util.VisibleForTesting\",\n+    \"androidx.annotation.VisibleForTesting\",\n+    \"org.apache.flink.annotation.VisibleForTesting\"\n+  );\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.IDENTIFIER);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    IdentifierTree identifier = (IdentifierTree) tree;\n+    Symbol symbol = identifier.symbol();\n+    SymbolMetadata metadata = symbol.metadata();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMjk2OQ==", "bodyText": "in fact, isFieldMethodOrClass() is probably simply !symbol.isUnknown() && !symbol.isPackageSymbol().\nBy construction, it will then only be a method, a variable or a type... As we don't have other kinds of symbol.", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484532969", "createdAt": "2020-09-07T17:43:32Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5803\")\n+public class VisibleForTestingUsageCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final List<String> ANNOTATIONS = Arrays.asList(\n+    \"com.google.common.annotations.VisibleForTesting\",\n+    \"org.assertj.core.util.VisibleForTesting\",\n+    \"androidx.annotation.VisibleForTesting\",\n+    \"org.apache.flink.annotation.VisibleForTesting\"\n+  );\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.IDENTIFIER);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    IdentifierTree identifier = (IdentifierTree) tree;\n+    Symbol symbol = identifier.symbol();\n+    SymbolMetadata metadata = symbol.metadata();\n+    if (metadata.annotations().isEmpty()) {\n+      return;\n+    }\n+\n+    boolean inTheSameFile = symbol.declaration() != null;\n+    if (isFieldMethodOrClass(symbol) && !inTheSameFile", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMzUwNA==", "bodyText": "I think I would move this below, after we are sure it's a valid symbol to be considered", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484533504", "createdAt": "2020-09-07T17:46:07Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5803\")\n+public class VisibleForTestingUsageCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final List<String> ANNOTATIONS = Arrays.asList(\n+    \"com.google.common.annotations.VisibleForTesting\",\n+    \"org.assertj.core.util.VisibleForTesting\",\n+    \"androidx.annotation.VisibleForTesting\",\n+    \"org.apache.flink.annotation.VisibleForTesting\"\n+  );\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.IDENTIFIER);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    IdentifierTree identifier = (IdentifierTree) tree;\n+    Symbol symbol = identifier.symbol();\n+    SymbolMetadata metadata = symbol.metadata();\n+    if (metadata.annotations().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzNDIzNg==", "bodyText": "This one looks like a FP to me (while a bit borderline), we are inside a class itself annotated with @VisibleForTesting, so it feels to me that it's OK to do call a something which is also annotated with VisibleForTesting. What's your opinion of it?", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484534236", "createdAt": "2020-09-07T17:49:47Z", "author": {"login": "m-g-sonar"}, "path": "its/ruling/src/test/resources/guava/java-S5803.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{\n+'com.google.guava:guava:src/com/google/common/io/Closer.java':[\n+252,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 3}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32b6afaf11d17af6a576511b62f17a464e4c54b8", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/32b6afaf11d17af6a576511b62f17a464e4c54b8", "committedDate": "2020-09-08T13:30:03Z", "message": "Initial commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa2793945b29b6c4f328685a0453313832531c1a", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/aa2793945b29b6c4f328685a0453313832531c1a", "committedDate": "2020-09-08T13:30:03Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcec0331aa04b6a9625a174a3700aa7621bf0088", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/fcec0331aa04b6a9625a174a3700aa7621bf0088", "committedDate": "2020-09-08T13:30:03Z", "message": "Basic Implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ee829b158bf13905b37bcf2aac523b2d7ab87c2", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/3ee829b158bf13905b37bcf2aac523b2d7ab87c2", "committedDate": "2020-09-08T13:30:03Z", "message": "Add constructor check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5e075e9877b84e25851edcc704b7c21a9c14510", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/b5e075e9877b84e25851edcc704b7c21a9c14510", "committedDate": "2020-09-08T13:30:03Z", "message": "Add class check & refactoring\n\nFix ruling tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32090b4c9b8f4159d25955b65ee54fe51c15a330", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/32090b4c9b8f4159d25955b65ee54fe51c15a330", "committedDate": "2020-09-08T13:30:03Z", "message": "WIP"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/2624d79bad1c750ef365cbdd446f4af071acd1de", "committedDate": "2020-09-07T13:29:18Z", "message": "Add class check & refactoring\n\nFix ruling tests"}, "afterCommit": {"oid": "e595834f9d770dfe57dab1a6c2b6cffb888312d8", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/e595834f9d770dfe57dab1a6c2b6cffb888312d8", "committedDate": "2020-09-09T06:19:59Z", "message": "Update Implementation to report only first issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56f4ba2b3bc301ac8f80571a94bbb4cf668e41d6", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/56f4ba2b3bc301ac8f80571a94bbb4cf668e41d6", "committedDate": "2020-09-09T07:04:43Z", "message": "Update Implementation to report only first issue"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e595834f9d770dfe57dab1a6c2b6cffb888312d8", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/e595834f9d770dfe57dab1a6c2b6cffb888312d8", "committedDate": "2020-09-09T06:19:59Z", "message": "Update Implementation to report only first issue"}, "afterCommit": {"oid": "56f4ba2b3bc301ac8f80571a94bbb4cf668e41d6", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/56f4ba2b3bc301ac8f80571a94bbb4cf668e41d6", "committedDate": "2020-09-09T07:04:43Z", "message": "Update Implementation to report only first issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NzgxMjU5", "url": "https://github.com/SonarSource/sonar-java/pull/3169#pullrequestreview-484781259", "createdAt": "2020-09-09T08:34:15Z", "commit": {"oid": "56f4ba2b3bc301ac8f80571a94bbb4cf668e41d6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODozNDoxNVrOHO8oeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODozNDoxNVrOHO8oeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQzNTUxNA==", "bodyText": "Wops, it seems to me that this HTML file is completely broken. did you double-check how it looks in SonarQube?", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r485435514", "createdAt": "2020-09-09T08:34:15Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S5803_java.html", "diffHunk": "@@ -0,0 +1,43 @@\n+<p>@VisibleForTesting can be used to mark methods, fields and classes whose visibility restrictions have been relaxed more than necessary for the API\n+to allow for easier unit testing.</p>\n+<p>Access to such methods, fields and classes only possible thanks to this relaxed visibility is fine for test code, but it should be avoided in\n+production code.</p>\n+<p>Supported framework:</p>\n+<p> * Guava</p>\n+<pre>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f4ba2b3bc301ac8f80571a94bbb4cf668e41d6"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c34c25805b8cf00c1bb548ccab1b7050b8a3ad91", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/c34c25805b8cf00c1bb548ccab1b7050b8a3ad91", "committedDate": "2020-09-09T09:11:26Z", "message": "Update rule description"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0ODMxMTMw", "url": "https://github.com/SonarSource/sonar-java/pull/3169#pullrequestreview-484831130", "createdAt": "2020-09-09T09:33:01Z", "commit": {"oid": "c34c25805b8cf00c1bb548ccab1b7050b8a3ad91"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1975, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}