{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwOTM0MzU5", "number": 2787, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwOTowMzo1NVrODdQXzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwOTowNToyMlrODdQZTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDAzNTMyOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/security/CipherBlockChainingCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwOTowMzo1NlrOFlwLfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwOTowMzo1NlrOFlwLfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzMTAwNA==", "bodyText": "you should reuse declaration instead of symbol.declaration() here.", "url": "https://github.com/SonarSource/sonar-java/pull/2787#discussion_r375131004", "createdAt": "2020-02-05T09:03:56Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/CipherBlockChainingCheck.java", "diffHunk": "@@ -56,6 +70,24 @@ protected void onConstructorFound(NewClassTree newClassTree) {\n     }\n   }\n \n+  private static boolean isDynamicallyGenerated(ExpressionTree tree) {\n+    if (tree.is(Tree.Kind.IDENTIFIER)) {\n+      Symbol symbol = ((IdentifierTree) tree).symbol();\n+      VariableTree declaration = ((Symbol.VariableSymbol) symbol).declaration();\n+      return declaration != null &&\n+        (isSecureRandomGenerateSeed(declaration.initializer()) ||\n+          getReassignments(symbol.declaration(), symbol.usages()).stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689b12b3098115cdbfcd407bacec4695e8b3f5c2"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMDAzOTE4OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/security/CipherBlockChainingCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwOTowNToyMlrOFlwN9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMzo1OToyNFrOFl4pzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzMTYzOQ==", "bodyText": "ECJ can be quite tricky here. In case of strange resolution/recovery from its engine, it might assign an unknown symbol rather than a VariableSymbol. Before casting, I would check that the symbol is not unknown.", "url": "https://github.com/SonarSource/sonar-java/pull/2787#discussion_r375131639", "createdAt": "2020-02-05T09:05:22Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/CipherBlockChainingCheck.java", "diffHunk": "@@ -56,6 +70,24 @@ protected void onConstructorFound(NewClassTree newClassTree) {\n     }\n   }\n \n+  private static boolean isDynamicallyGenerated(ExpressionTree tree) {\n+    if (tree.is(Tree.Kind.IDENTIFIER)) {\n+      Symbol symbol = ((IdentifierTree) tree).symbol();\n+      VariableTree declaration = ((Symbol.VariableSymbol) symbol).declaration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "689b12b3098115cdbfcd407bacec4695e8b3f5c2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI2OTgzNg==", "bodyText": "Good to know!", "url": "https://github.com/SonarSource/sonar-java/pull/2787#discussion_r375269836", "createdAt": "2020-02-05T13:59:24Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/security/CipherBlockChainingCheck.java", "diffHunk": "@@ -56,6 +70,24 @@ protected void onConstructorFound(NewClassTree newClassTree) {\n     }\n   }\n \n+  private static boolean isDynamicallyGenerated(ExpressionTree tree) {\n+    if (tree.is(Tree.Kind.IDENTIFIER)) {\n+      Symbol symbol = ((IdentifierTree) tree).symbol();\n+      VariableTree declaration = ((Symbol.VariableSymbol) symbol).declaration();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTEzMTYzOQ=="}, "originalCommit": {"oid": "689b12b3098115cdbfcd407bacec4695e8b3f5c2"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4161, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}