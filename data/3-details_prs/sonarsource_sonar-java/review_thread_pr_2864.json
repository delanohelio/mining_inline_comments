{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0OTExMzI4", "number": 2864, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODo0Njo1MlrODm-5JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDoxNToxNlrODpIN1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjAyOTE3OnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/JavaSquid.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODo0Njo1MlrOF0to9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODo0Njo1MlrOF0to9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgxODAzOA==", "bodyText": "Why not be consistent with classpath and testClasspath and initialize with empty list ?", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r390818038", "createdAt": "2020-03-11T08:46:52Z", "author": {"login": "benzonico"}, "path": "java-frontend/src/main/java/org/sonar/java/JavaSquid.java", "diffHunk": "@@ -81,6 +83,9 @@ public JavaSquid(JavaVersion javaVersion, boolean xFileEnabled,\n       classpath = sonarComponents.getJavaClasspath();\n       testClasspath = sonarComponents.getJavaTestClasspath();\n       testCodeVisitors.addAll(sonarComponents.testCheckClasses());\n+      generatedCodeVisitors = sonarComponents.generatedCodeVisitors();\n+    } else {\n+      generatedCodeVisitors = Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa00bc96f821a6a1337545eedd1e7acbdd41ac58"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjAzMzQxOnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/model/VisitorsBridge.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODo0ODoxM1rOF0trqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwODo0ODoxM1rOF0trqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDgxODcyOA==", "bodyText": "I think this comments deserve a bit of more precise wording : I thought at first that semantic won't be triggered for this file whereas it is only about feeding semantic data to SQ api.", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r390818728", "createdAt": "2020-03-11T08:48:13Z", "author": {"login": "benzonico"}, "path": "java-frontend/src/main/java/org/sonar/java/model/VisitorsBridge.java", "diffHunk": "@@ -126,7 +127,9 @@ public void setJavaVersion(JavaVersion javaVersion) {\n   public void visitFile(@Nullable Tree parsedTree) {\n     JavaTree.CompilationUnitTreeImpl tree = new JavaTree.CompilationUnitTreeImpl(null, new ArrayList<>(), new ArrayList<>(), null, null);\n     boolean fileParsed = parsedTree != null;\n-    if (fileParsed && parsedTree.is(Tree.Kind.COMPILATION_UNIT)) {\n+    // don't create symbol table for generated files (jsp)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa00bc96f821a6a1337545eedd1e7acbdd41ac58"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjkyOTQ4OnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/JavaSquid.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoxNjoyM1rOF27lUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDozNDowMlrOF3WXNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0MzYzMw==", "bodyText": "if this method is now supposed to be called only by tests, I would annotated it by @VisibleForTests and potentially change its visibility.", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393143633", "createdAt": "2020-03-16T16:16:23Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/JavaSquid.java", "diffHunk": "@@ -91,19 +94,28 @@ public JavaSquid(JavaVersion javaVersion, boolean xFileEnabled,\n     astScannerForTests = new JavaAstScanner(sonarComponents);\n     astScannerForTests.setVisitorBridge(createVisitorBridge(testCodeVisitors, testClasspath, javaVersion, sonarComponents, SymbolicExecutionMode.DISABLED));\n \n+    //AstScanner for generated files\n+    astScannerForGeneratedFiles = new JavaAstScanner(sonarComponents);\n+    astScannerForGeneratedFiles.setVisitorBridge(createVisitorBridge(generatedCodeVisitors, classpath, javaVersion, sonarComponents, SymbolicExecutionMode.DISABLED));\n   }\n \n-  private static VisitorsBridge createVisitorBridge(\n-    Iterable<JavaCheck> codeVisitors, List<File> classpath, JavaVersion javaVersion, @Nullable SonarComponents sonarComponents, SymbolicExecutionMode symbolicExecutionMode) {\n+  private static VisitorsBridge createVisitorBridge(Iterable<? extends JavaCheck> codeVisitors, List<File> classpath,\n+                                                    JavaVersion javaVersion, @Nullable SonarComponents sonarComponents,\n+                                                    SymbolicExecutionMode symbolicExecutionMode) {\n     VisitorsBridge visitorsBridge = new VisitorsBridge(codeVisitors, classpath, sonarComponents, symbolicExecutionMode);\n     visitorsBridge.setJavaVersion(javaVersion);\n     return visitorsBridge;\n   }\n \n \n   public void scan(Iterable<InputFile> sourceFiles, Iterable<InputFile> testFiles) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4MjM5MQ==", "bodyText": "I removed this overload, and instead added emptyList() parameter to the callers in tests.", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393582391", "createdAt": "2020-03-17T10:34:02Z", "author": {"login": "saberduck"}, "path": "java-frontend/src/main/java/org/sonar/java/JavaSquid.java", "diffHunk": "@@ -91,19 +94,28 @@ public JavaSquid(JavaVersion javaVersion, boolean xFileEnabled,\n     astScannerForTests = new JavaAstScanner(sonarComponents);\n     astScannerForTests.setVisitorBridge(createVisitorBridge(testCodeVisitors, testClasspath, javaVersion, sonarComponents, SymbolicExecutionMode.DISABLED));\n \n+    //AstScanner for generated files\n+    astScannerForGeneratedFiles = new JavaAstScanner(sonarComponents);\n+    astScannerForGeneratedFiles.setVisitorBridge(createVisitorBridge(generatedCodeVisitors, classpath, javaVersion, sonarComponents, SymbolicExecutionMode.DISABLED));\n   }\n \n-  private static VisitorsBridge createVisitorBridge(\n-    Iterable<JavaCheck> codeVisitors, List<File> classpath, JavaVersion javaVersion, @Nullable SonarComponents sonarComponents, SymbolicExecutionMode symbolicExecutionMode) {\n+  private static VisitorsBridge createVisitorBridge(Iterable<? extends JavaCheck> codeVisitors, List<File> classpath,\n+                                                    JavaVersion javaVersion, @Nullable SonarComponents sonarComponents,\n+                                                    SymbolicExecutionMode symbolicExecutionMode) {\n     VisitorsBridge visitorsBridge = new VisitorsBridge(codeVisitors, classpath, sonarComponents, symbolicExecutionMode);\n     visitorsBridge.setJavaVersion(javaVersion);\n     return visitorsBridge;\n   }\n \n \n   public void scan(Iterable<InputFile> sourceFiles, Iterable<InputFile> testFiles) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0MzYzMw=="}, "originalCommit": {"oid": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjkzNzMxOnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/JavaSquid.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoxODoyMFrOF27qWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDozNjowMlrOF3Wbbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0NDkyMQ==", "bodyText": "I don't understand this change, It seems to me that generatedCodeVisitors are JavaCheck, the change of method signature should not be required.", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393144921", "createdAt": "2020-03-16T16:18:20Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/JavaSquid.java", "diffHunk": "@@ -91,19 +94,28 @@ public JavaSquid(JavaVersion javaVersion, boolean xFileEnabled,\n     astScannerForTests = new JavaAstScanner(sonarComponents);\n     astScannerForTests.setVisitorBridge(createVisitorBridge(testCodeVisitors, testClasspath, javaVersion, sonarComponents, SymbolicExecutionMode.DISABLED));\n \n+    //AstScanner for generated files\n+    astScannerForGeneratedFiles = new JavaAstScanner(sonarComponents);\n+    astScannerForGeneratedFiles.setVisitorBridge(createVisitorBridge(generatedCodeVisitors, classpath, javaVersion, sonarComponents, SymbolicExecutionMode.DISABLED));\n   }\n \n-  private static VisitorsBridge createVisitorBridge(\n-    Iterable<JavaCheck> codeVisitors, List<File> classpath, JavaVersion javaVersion, @Nullable SonarComponents sonarComponents, SymbolicExecutionMode symbolicExecutionMode) {\n+  private static VisitorsBridge createVisitorBridge(Iterable<? extends JavaCheck> codeVisitors, List<File> classpath,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4MzQ3MQ==", "bodyText": "removed, this was leftover from some refactoring", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393583471", "createdAt": "2020-03-17T10:36:02Z", "author": {"login": "saberduck"}, "path": "java-frontend/src/main/java/org/sonar/java/JavaSquid.java", "diffHunk": "@@ -91,19 +94,28 @@ public JavaSquid(JavaVersion javaVersion, boolean xFileEnabled,\n     astScannerForTests = new JavaAstScanner(sonarComponents);\n     astScannerForTests.setVisitorBridge(createVisitorBridge(testCodeVisitors, testClasspath, javaVersion, sonarComponents, SymbolicExecutionMode.DISABLED));\n \n+    //AstScanner for generated files\n+    astScannerForGeneratedFiles = new JavaAstScanner(sonarComponents);\n+    astScannerForGeneratedFiles.setVisitorBridge(createVisitorBridge(generatedCodeVisitors, classpath, javaVersion, sonarComponents, SymbolicExecutionMode.DISABLED));\n   }\n \n-  private static VisitorsBridge createVisitorBridge(\n-    Iterable<JavaCheck> codeVisitors, List<File> classpath, JavaVersion javaVersion, @Nullable SonarComponents sonarComponents, SymbolicExecutionMode symbolicExecutionMode) {\n+  private static VisitorsBridge createVisitorBridge(Iterable<? extends JavaCheck> codeVisitors, List<File> classpath,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0NDkyMQ=="}, "originalCommit": {"oid": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjk0ODExOnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/model/GeneratedFile.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyMDo1NFrOF27xEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDo0MjoyMlrOF3WpSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0NjY0Mg==", "bodyText": "How can you be sure of that? If you transpile these files, while not using directly a predefined charset such as UTF-8?", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393146642", "createdAt": "2020-03-16T16:20:54Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/model/GeneratedFile.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.model;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.annotation.CheckForNull;\n+import org.sonar.api.batch.fs.InputFile;\n+import org.sonar.api.batch.fs.TextPointer;\n+import org.sonar.api.batch.fs.TextRange;\n+\n+public class GeneratedFile implements InputFile {\n+\n+  private final Path path;\n+\n+  private final InputFile source;\n+\n+  public GeneratedFile(Path path, InputFile source) {\n+    this.path = path;\n+    this.source = source;\n+  }\n+\n+  public InputFile getSource() {\n+    return source;\n+  }\n+\n+  @Override\n+  public String relativePath() {\n+    return path.toString();\n+  }\n+\n+  @Override\n+  public String absolutePath() {\n+    return path.toAbsolutePath().toString();\n+  }\n+\n+  @Override\n+  public File file() {\n+    return path.toFile();\n+  }\n+\n+  @Override\n+  public Path path() {\n+    return path;\n+  }\n+\n+  @Override\n+  public URI uri() {\n+    return path.toUri();\n+  }\n+\n+  @Override\n+  public String filename() {\n+    return path.getFileName().toString();\n+  }\n+\n+  @CheckForNull\n+  @Override\n+  public String language() {\n+    return \"java\";\n+  }\n+\n+  @Override\n+  public Type type() {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public InputStream inputStream() throws IOException {\n+    return Files.newInputStream(path);\n+  }\n+\n+  @Override\n+  public String contents() throws IOException {\n+    return new String(Files.readAllBytes(path), charset());\n+  }\n+\n+  @Override\n+  public Status status() {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public int lines() {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public boolean isEmpty() {\n+    return false;\n+  }\n+\n+  @Override\n+  public TextPointer newPointer(int line, int lineOffset) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public TextRange newRange(TextPointer start, TextPointer end) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public TextRange newRange(int startLine, int startLineOffset, int endLine, int endLineOffset) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public TextRange selectLine(int line) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public Charset charset() {\n+    return Charset.defaultCharset();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4NzAxOQ==", "bodyText": "ok, I found the option how to explicitly set encoding for Jasper, so we can use UTF-8 explicitly.", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393587019", "createdAt": "2020-03-17T10:42:22Z", "author": {"login": "saberduck"}, "path": "java-frontend/src/main/java/org/sonar/java/model/GeneratedFile.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.model;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.annotation.CheckForNull;\n+import org.sonar.api.batch.fs.InputFile;\n+import org.sonar.api.batch.fs.TextPointer;\n+import org.sonar.api.batch.fs.TextRange;\n+\n+public class GeneratedFile implements InputFile {\n+\n+  private final Path path;\n+\n+  private final InputFile source;\n+\n+  public GeneratedFile(Path path, InputFile source) {\n+    this.path = path;\n+    this.source = source;\n+  }\n+\n+  public InputFile getSource() {\n+    return source;\n+  }\n+\n+  @Override\n+  public String relativePath() {\n+    return path.toString();\n+  }\n+\n+  @Override\n+  public String absolutePath() {\n+    return path.toAbsolutePath().toString();\n+  }\n+\n+  @Override\n+  public File file() {\n+    return path.toFile();\n+  }\n+\n+  @Override\n+  public Path path() {\n+    return path;\n+  }\n+\n+  @Override\n+  public URI uri() {\n+    return path.toUri();\n+  }\n+\n+  @Override\n+  public String filename() {\n+    return path.getFileName().toString();\n+  }\n+\n+  @CheckForNull\n+  @Override\n+  public String language() {\n+    return \"java\";\n+  }\n+\n+  @Override\n+  public Type type() {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public InputStream inputStream() throws IOException {\n+    return Files.newInputStream(path);\n+  }\n+\n+  @Override\n+  public String contents() throws IOException {\n+    return new String(Files.readAllBytes(path), charset());\n+  }\n+\n+  @Override\n+  public Status status() {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public int lines() {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public boolean isEmpty() {\n+    return false;\n+  }\n+\n+  @Override\n+  public TextPointer newPointer(int line, int lineOffset) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public TextRange newRange(TextPointer start, TextPointer end) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public TextRange newRange(int startLine, int startLineOffset, int endLine, int endLineOffset) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public TextRange selectLine(int line) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  @Override\n+  public Charset charset() {\n+    return Charset.defaultCharset();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0NjY0Mg=="}, "originalCommit": {"oid": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjk2OTMwOnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/model/VisitorsBridge.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyNjowOFrOF27-tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMToxMjowMVrOF3Xmgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MDEzNA==", "bodyText": "I don't see why this type needs to be specified. it's seems unrelated to your change,", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393150134", "createdAt": "2020-03-16T16:26:08Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/model/VisitorsBridge.java", "diffHunk": "@@ -85,11 +86,13 @@ public VisitorsBridge(JavaFileScanner visitor) {\n   }\n \n   @VisibleForTesting\n-  public VisitorsBridge(Iterable visitors, List<File> projectClasspath, @Nullable SonarComponents sonarComponents) {\n+  public VisitorsBridge(Iterable<? extends JavaCheck> visitors, List<File> projectClasspath,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYwMjY5MA==", "bodyText": "it's not strictly related to this PR, but I wanted to remove usage of raw type to benefit from compiler checking the correctness of types.", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393602690", "createdAt": "2020-03-17T11:12:01Z", "author": {"login": "saberduck"}, "path": "java-frontend/src/main/java/org/sonar/java/model/VisitorsBridge.java", "diffHunk": "@@ -85,11 +86,13 @@ public VisitorsBridge(JavaFileScanner visitor) {\n   }\n \n   @VisibleForTesting\n-  public VisitorsBridge(Iterable visitors, List<File> projectClasspath, @Nullable SonarComponents sonarComponents) {\n+  public VisitorsBridge(Iterable<? extends JavaCheck> visitors, List<File> projectClasspath,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MDEzNA=="}, "originalCommit": {"oid": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjk3NjkxOnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/SonarComponents.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyODoxMVrOF28D4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyODoxMVrOF28D4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MTQ1OQ==", "bodyText": "c? explicit name maybe?", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393151459", "createdAt": "2020-03-16T16:28:11Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/SonarComponents.java", "diffHunk": "@@ -193,6 +195,13 @@ public void registerTestCheckClasses(String repositoryKey, Iterable<Class<? exte\n     return visitors;\n   }\n \n+  public List<JavaCheck> generatedCodeVisitors() {\n+    return allChecks.stream()\n+      .flatMap(c -> c.all().stream())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fa6c77058d8f83fd40fd8ace42298f7030778a3"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjk4MDA5OnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/SonarComponents.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyOTowMVrOF28GAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyOTowMVrOF28GAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1MjAwMg==", "bodyText": "c? please use a more explicit variable name. as c.all() is really not helping.", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393152002", "createdAt": "2020-03-16T16:29:01Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/SonarComponents.java", "diffHunk": "@@ -193,6 +195,13 @@ public void registerTestCheckClasses(String repositoryKey, Iterable<Class<? exte\n     return visitors;\n   }\n \n+  public List<JavaCheck> generatedCodeVisitors() {\n+    return allChecks.stream()\n+      .flatMap(c -> c.all().stream())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjk5MTQ5OnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/plugins/java/api/GeneratedCodeVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjozMjowNlrOF28NqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzowMjo0OFrOF29nhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1Mzk2MA==", "bodyText": "I don't see any mechanism which would prevent people writing custom rules to use this as well, expecting their code to be executed on \"generated code\". (code annotated with @Generated?).\nWhile I understand that we don't necessarily want to expose everything, I would appreciate to have it a bit more explicit. note any kind of generated code is going to be analyzed by such rule.", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393153960", "createdAt": "2020-03-16T16:32:06Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/plugins/java/api/GeneratedCodeVisitor.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.plugins.java.api;\n+\n+import com.google.common.annotations.Beta;\n+\n+/**\n+ * Marker interface for code visitors which are invoked on generated code\n+ */\n+@Beta\n+public interface GeneratedCodeVisitor extends JavaCheck {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE3Njk2Ng==", "bodyText": "I am not sure I understand the comment, do you just want to improve javadoc?", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393176966", "createdAt": "2020-03-16T17:02:48Z", "author": {"login": "saberduck"}, "path": "java-frontend/src/main/java/org/sonar/plugins/java/api/GeneratedCodeVisitor.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.plugins.java.api;\n+\n+import com.google.common.annotations.Beta;\n+\n+/**\n+ * Marker interface for code visitors which are invoked on generated code\n+ */\n+@Beta\n+public interface GeneratedCodeVisitor extends JavaCheck {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1Mzk2MA=="}, "originalCommit": {"oid": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzAxNjAxOnYy", "diffSide": "RIGHT", "path": "java-jsp/src/main/java/org/sonar/java/jsp/Jasper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjozODoxM1rOF28drQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMToyMTo0NVrOF3X5xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1ODA2MQ==", "bodyText": "What if there is no JSP language registered? is it always the case?", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393158061", "createdAt": "2020-03-16T16:38:13Z", "author": {"login": "m-g-sonar"}, "path": "java-jsp/src/main/java/org/sonar/java/jsp/Jasper.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.jsp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+import org.apache.jasper.JspC;\n+import org.sonar.api.batch.fs.FileSystem;\n+import org.sonar.api.batch.fs.InputFile;\n+import org.sonar.api.batch.sensor.SensorContext;\n+import org.sonar.api.scanner.ScannerSide;\n+import org.sonar.api.utils.log.Logger;\n+import org.sonar.api.utils.log.Loggers;\n+import org.sonar.java.AnalysisException;\n+import org.sonar.java.model.GeneratedFile;\n+\n+import static java.util.Arrays.asList;\n+\n+@ScannerSide\n+public class Jasper {\n+\n+  private static final Logger LOG = Loggers.get(Jasper.class);\n+\n+  public List<InputFile> generateFiles(SensorContext context, List<File> javaClasspath) {\n+    try {\n+      List<Path> jspFiles = jspFiles(context.fileSystem());\n+      LOG.debug(\"Found {} JSP files.\", jspFiles.size());\n+      Path outputDir = outputDir(context);\n+      Jasper.compileJspFiles(jspFiles, javaClasspath, outputDir);\n+      try (Stream<Path> fileStream = Files.walk(outputDir)) {\n+        List<InputFile> generatedFiles = fileStream\n+          .filter(p -> p.toString().endsWith(\".java\"))\n+          .map(path -> new GeneratedFile(path, findSource(path, context.fileSystem())))\n+          .collect(Collectors.toList());\n+        LOG.debug(\"Generated {} Java files.\", generatedFiles.size());\n+        return generatedFiles;\n+      }\n+    } catch (Exception e) {\n+      LOG.warn(\"Failed to transpile JSP files.\", e);\n+      return Collections.emptyList();\n+    }\n+  }\n+\n+  private static List<Path> jspFiles(FileSystem fs) {\n+    Iterable<InputFile> inputFiles = fs.inputFiles(fs.predicates().hasLanguage(\"jsp\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzYwNzYyMQ==", "bodyText": "html plugin is part of default distribution, so I believe it is safe to assume that it is available. If it's not available we will not find any files and nothing is executed.", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r393607621", "createdAt": "2020-03-17T11:21:45Z", "author": {"login": "saberduck"}, "path": "java-jsp/src/main/java/org/sonar/java/jsp/Jasper.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.jsp;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import java.util.stream.StreamSupport;\n+import org.apache.jasper.JspC;\n+import org.sonar.api.batch.fs.FileSystem;\n+import org.sonar.api.batch.fs.InputFile;\n+import org.sonar.api.batch.sensor.SensorContext;\n+import org.sonar.api.scanner.ScannerSide;\n+import org.sonar.api.utils.log.Logger;\n+import org.sonar.api.utils.log.Loggers;\n+import org.sonar.java.AnalysisException;\n+import org.sonar.java.model.GeneratedFile;\n+\n+import static java.util.Arrays.asList;\n+\n+@ScannerSide\n+public class Jasper {\n+\n+  private static final Logger LOG = Loggers.get(Jasper.class);\n+\n+  public List<InputFile> generateFiles(SensorContext context, List<File> javaClasspath) {\n+    try {\n+      List<Path> jspFiles = jspFiles(context.fileSystem());\n+      LOG.debug(\"Found {} JSP files.\", jspFiles.size());\n+      Path outputDir = outputDir(context);\n+      Jasper.compileJspFiles(jspFiles, javaClasspath, outputDir);\n+      try (Stream<Path> fileStream = Files.walk(outputDir)) {\n+        List<InputFile> generatedFiles = fileStream\n+          .filter(p -> p.toString().endsWith(\".java\"))\n+          .map(path -> new GeneratedFile(path, findSource(path, context.fileSystem())))\n+          .collect(Collectors.toList());\n+        LOG.debug(\"Generated {} Java files.\", generatedFiles.size());\n+        return generatedFiles;\n+      }\n+    } catch (Exception e) {\n+      LOG.warn(\"Failed to transpile JSP files.\", e);\n+      return Collections.emptyList();\n+    }\n+  }\n+\n+  private static List<Path> jspFiles(FileSystem fs) {\n+    Iterable<InputFile> inputFiles = fs.inputFiles(fs.predicates().hasLanguage(\"jsp\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE1ODA2MQ=="}, "originalCommit": {"oid": "c298453a66b1c166d660a5ba02b0c5e2b5b3a17b"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDUyNTQzOnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/SonarComponents.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDoxNDozNVrOF4G4og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDoxNDozNVrOF4G4og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3NzM3OA==", "bodyText": "should be called jspCodeVisitors()", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r394377378", "createdAt": "2020-03-18T14:14:35Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/SonarComponents.java", "diffHunk": "@@ -193,6 +195,13 @@ public void registerTestCheckClasses(String repositoryKey, Iterable<Class<? exte\n     return visitors;\n   }\n \n+  public List<JavaCheck> generatedCodeVisitors() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50d4d57dc4389ae58e3a71822d06e2c76a8918f6"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDUyODIxOnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/model/GeneratedFile.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDoxNToxNlrOF4G6gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDoxNToxNlrOF4G6gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM3Nzg1OA==", "bodyText": "Should be called JspFile", "url": "https://github.com/SonarSource/sonar-java/pull/2864#discussion_r394377858", "createdAt": "2020-03-18T14:15:16Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/model/GeneratedFile.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.model;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.URI;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.annotation.CheckForNull;\n+import org.sonar.api.batch.fs.InputFile;\n+import org.sonar.api.batch.fs.TextPointer;\n+import org.sonar.api.batch.fs.TextRange;\n+\n+public class GeneratedFile implements InputFile {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50d4d57dc4389ae58e3a71822d06e2c76a8918f6"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4074, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}