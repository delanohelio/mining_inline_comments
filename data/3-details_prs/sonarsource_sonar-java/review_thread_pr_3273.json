{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNjYyODUz", "number": 3273, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToxMDo1M1rOE560QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOToyMjoxOFrOE6eNgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTY3OTM3OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/MethodOnlyCallsSuperCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToxMDo1M1rOH0rF1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzo0MDoyNVrOH01NLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5NDAwNg==", "bodyText": "Let's double check we won't get NPE here", "url": "https://github.com/SonarSource/sonar-java/pull/3273#discussion_r524994006", "createdAt": "2020-11-17T09:10:53Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/MethodOnlyCallsSuperCheck.java", "diffHunk": "@@ -156,4 +164,9 @@ private static boolean hasAnnotationDifferentFromOverride(List<AnnotationTree> a\n     return false;\n   }\n \n+  private static boolean isClassAnnotatedWithTransactional(MethodTree methodTree) {\n+    SymbolMetadata metadata = methodTree.symbol().enclosingClass().metadata();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37859c4681e7cccb7bdd41537a8edc9c04c17414"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTE1OTcyNw==", "bodyText": "enclosingClass() returns null for package symbol, since we are on a MethodTree, this is not possible.\nI'm still in favor of defensive programming though, even if we will miss coverage, I will add it.", "url": "https://github.com/SonarSource/sonar-java/pull/3273#discussion_r525159727", "createdAt": "2020-11-17T13:40:25Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/MethodOnlyCallsSuperCheck.java", "diffHunk": "@@ -156,4 +164,9 @@ private static boolean hasAnnotationDifferentFromOverride(List<AnnotationTree> a\n     return false;\n   }\n \n+  private static boolean isClassAnnotatedWithTransactional(MethodTree methodTree) {\n+    SymbolMetadata metadata = methodTree.symbol().enclosingClass().metadata();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5NDAwNg=="}, "originalCommit": {"oid": "37859c4681e7cccb7bdd41537a8edc9c04c17414"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzQ3ODQwOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/MethodOnlyCallsSuperCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwOToyMjoxOFrOH1kUiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMTowMDowOFrOH1oTbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkzMTY1Ng==", "bodyText": "I checked a couple of variants, this check seems to be redundant. Even if we put method outside of the class, we're not able to parse the file. So I can't imagine the situation where the enclosing class will be null. So let's remove this null check. If we see any problems on peach with it we still can add the check and at least find the proper test case.", "url": "https://github.com/SonarSource/sonar-java/pull/3273#discussion_r525931656", "createdAt": "2020-11-18T09:22:18Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/MethodOnlyCallsSuperCheck.java", "diffHunk": "@@ -156,4 +161,14 @@ private static boolean hasAnnotationDifferentFromOverride(List<AnnotationTree> a\n     return false;\n   }\n \n+  private static boolean isClassAnnotatedWithTransactional(MethodTree methodTree) {\n+    Symbol.TypeSymbol typeSymbol = methodTree.symbol().enclosingClass();\n+    if (typeSymbol != null){\n+      SymbolMetadata metadata = typeSymbol.metadata();\n+      return TRANSACTIONAL_ANNOTATIONS.stream().anyMatch(metadata::isAnnotatedWith);\n+    }\n+    // Defensive programming, should not be possible, enclosingClass returns null only for package symbol.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7354f09c385d72324260ad093205dc8b2540088c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk5NjkxMQ==", "bodyText": "Okay, that makes sense. In addition, I double-checked and it seems there are other rules that do not perform the check, and nothing went wrong, so I believe it fine to not do it.", "url": "https://github.com/SonarSource/sonar-java/pull/3273#discussion_r525996911", "createdAt": "2020-11-18T11:00:08Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/MethodOnlyCallsSuperCheck.java", "diffHunk": "@@ -156,4 +161,14 @@ private static boolean hasAnnotationDifferentFromOverride(List<AnnotationTree> a\n     return false;\n   }\n \n+  private static boolean isClassAnnotatedWithTransactional(MethodTree methodTree) {\n+    Symbol.TypeSymbol typeSymbol = methodTree.symbol().enclosingClass();\n+    if (typeSymbol != null){\n+      SymbolMetadata metadata = typeSymbol.metadata();\n+      return TRANSACTIONAL_ANNOTATIONS.stream().anyMatch(metadata::isAnnotatedWith);\n+    }\n+    // Defensive programming, should not be possible, enclosingClass returns null only for package symbol.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTkzMTY1Ng=="}, "originalCommit": {"oid": "7354f09c385d72324260ad093205dc8b2540088c"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3811, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}