{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NjA2ODgy", "number": 3014, "title": "Continuing S5856", "bodyText": "", "createdAt": "2020-06-15T15:15:34Z", "url": "https://github.com/SonarSource/sonar-java/pull/3014", "merged": true, "mergeCommit": {"oid": "b54592f9894b20d59a2bee1432b5ef7f9a1c396d"}, "closed": true, "closedAt": "2020-06-17T08:28:56Z", "author": {"login": "m-g-sonar"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcriNw_AFqTQzMDc0NDYyNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsEi7JgBqjM0NTIxNjEyOTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNzQ0NjI3", "url": "https://github.com/SonarSource/sonar-java/pull/3014#pullrequestreview-430744627", "createdAt": "2020-06-15T15:16:37Z", "commit": {"oid": "d182d5e89ea1c2028d2079774bcc439d8b6c8920"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNToxNjozN1rOGj21PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNToxNjozN1rOGj21PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1MTcwOQ==", "bodyText": "There is something fishy here... related to reporting.", "url": "https://github.com/SonarSource/sonar-java/pull/3014#discussion_r440251709", "createdAt": "2020-06-15T15:16:37Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/regex/ast/BackReferenceTree.java", "diffHunk": "@@ -28,7 +28,7 @@\n   private final JavaCharacter key;\n \n   public BackReferenceTree(RegexSource source, JavaCharacter backslash, @Nullable JavaCharacter key, JavaCharacter start, JavaCharacter end) {\n-    super(source, backslash.getRange().merge(end.getRange()));\n+    super(source, backslash.getRange().extendTo(end.getRange().getBeginningOffset()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d182d5e89ea1c2028d2079774bcc439d8b6c8920"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d182d5e89ea1c2028d2079774bcc439d8b6c8920", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/d182d5e89ea1c2028d2079774bcc439d8b6c8920", "committedDate": "2020-06-15T15:15:09Z", "message": "SONARJAVA-3420 Handle invalid groups in S5856"}, "afterCommit": {"oid": "5fb379d96591b9df9cb6adbdaab98cacdca992f6", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/5fb379d96591b9df9cb6adbdaab98cacdca992f6", "committedDate": "2020-06-15T15:20:58Z", "message": "fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5fb379d96591b9df9cb6adbdaab98cacdca992f6", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/5fb379d96591b9df9cb6adbdaab98cacdca992f6", "committedDate": "2020-06-15T15:20:58Z", "message": "fix"}, "afterCommit": {"oid": "9cd753bf7f2d6ebab94a7fe8ebc85598b30cca68", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/9cd753bf7f2d6ebab94a7fe8ebc85598b30cca68", "committedDate": "2020-06-15T17:59:00Z", "message": "SONARJAVA-3420 Handle invalid groups in S5856"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10d931c6dd746060a77dbc6891b53dc9e1b542b5", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/10d931c6dd746060a77dbc6891b53dc9e1b542b5", "committedDate": "2020-06-16T09:05:17Z", "message": "[REGEX] Add group numbers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48a9da839a368928e9c4bef513370b369d7fac5a", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/48a9da839a368928e9c4bef513370b369d7fac5a", "committedDate": "2020-06-16T09:05:17Z", "message": "[REGEX] Make group names Optional"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9760169c20d11e301e831c1179ade6e9530a1734", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/9760169c20d11e301e831c1179ade6e9530a1734", "committedDate": "2020-06-16T09:05:17Z", "message": "[REGEX] Fix issue with reporting of empty locations"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9cd753bf7f2d6ebab94a7fe8ebc85598b30cca68", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/9cd753bf7f2d6ebab94a7fe8ebc85598b30cca68", "committedDate": "2020-06-15T17:59:00Z", "message": "SONARJAVA-3420 Handle invalid groups in S5856"}, "afterCommit": {"oid": "b9b0e5556ab88d9ccdd73f82c9e28e7d702dace3", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/b9b0e5556ab88d9ccdd73f82c9e28e7d702dace3", "committedDate": "2020-06-16T09:05:17Z", "message": "SONARJAVA-3420 Handle invalid groups in S5856"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNjc2OTAz", "url": "https://github.com/SonarSource/sonar-java/pull/3014#pullrequestreview-431676903", "createdAt": "2020-06-16T16:18:58Z", "commit": {"oid": "b9b0e5556ab88d9ccdd73f82c9e28e7d702dace3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjoxODo1OFrOGkjKYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjoyNjozMlrOGkjdHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3ODAxNg==", "bodyText": "Interestingly, unlike named back references, numbered back references don't cause an exception when they don't exist. They just don't match anything when the group doesn't exist yet. You could even produce a marginally useful regex that refers to a group defined later that can actually produce a match: (?:(?:x|\\\\1)(.))+. This will match strings where the first character is an x and every other odd-numbered character is either an x or equal to the previous character. The equivalent using named captures will throw an exception.\nSo we might consider either not complaining about numbered back references at all (so we'd only be complaining about errors that cause an exception) or only complaining if the numbered back reference refers to a group that does not exist in the regex at all (i.e. referring to a group defined later would be allowed when using numbers), in which case the regex would still not cause an exception, but definitely be wrong.\nOn the other hand, we might also just say \"99% of the time referencing a not-yet-defined group is a mistake and the 1% FPs is acceptable\" and just leave it as-is.", "url": "https://github.com/SonarSource/sonar-java/pull/3014#discussion_r440978016", "createdAt": "2020-06-16T16:18:58Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks-test-sources/src/main/java/checks/regex/InvalidRegexCheck.java", "diffHunk": "@@ -13,10 +13,26 @@ void noncompliant(String str) {\n     str.replaceAll(\"x{1,2,3}|(\", \"x\"); // Noncompliant [[sc=26;ec=27;secondary=13,13]] {{Fix the syntax errors inside this regex.}}\n \n     str.matches(\"(\\\\w+-(\\\\d+)\"); // Noncompliant [[sc=30;ec=31;secondary=15]] {{Fix the syntax error inside this regex.}}\n+  }\n+\n+  void noncompliant_backreference(String str) {\n+    str.matches(\"(\\\\w+)-\\\\2\"); // Noncompliant {{Fix the back reference error inside this regex.}}\n+\n+    str.matches(\"(?<name>\\\\w+)-\\\\k<nae>\"); // Noncompliant {{Fix the back reference error inside this regex.}}\n \n-    str.matches(\"(\\\\w+)-\\\\2\"); // False Negative - group numbers not handled in rule\n+    str.matches(\n+      \"(?<g1>ab)\"\n+        + \"\\\\k<g2>\" // Noncompliant [[sc=12;ec=19;secondary=25,26]] {{Fix the back reference errors inside this regex.}}\n+        + \"\\\\k<g3>\"\n+        + \"(?<g2>cd)\"\n+        + \"(?<g3>ed)\");\n \n-    str.matches(\"(?<name>\\\\w+)-\\\\k<nae>\"); // False Negative - group names not handled in rule\n+    str.matches(\n+      \"(?<g1>ab)\"\n+        + \"\\\\2\" // Noncompliant [[sc=12;ec=15;secondary=32,33]] {{Fix the back reference errors inside this regex.}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9b0e5556ab88d9ccdd73f82c9e28e7d702dace3"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4MjgxMg==", "bodyText": "On second thought, given that they do not cause an exception, it'd probably be best to not handle numeric back references here and instead handle them in the \"this pattern can never match\" rule.", "url": "https://github.com/SonarSource/sonar-java/pull/3014#discussion_r440982812", "createdAt": "2020-06-16T16:26:32Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-checks-test-sources/src/main/java/checks/regex/InvalidRegexCheck.java", "diffHunk": "@@ -13,10 +13,26 @@ void noncompliant(String str) {\n     str.replaceAll(\"x{1,2,3}|(\", \"x\"); // Noncompliant [[sc=26;ec=27;secondary=13,13]] {{Fix the syntax errors inside this regex.}}\n \n     str.matches(\"(\\\\w+-(\\\\d+)\"); // Noncompliant [[sc=30;ec=31;secondary=15]] {{Fix the syntax error inside this regex.}}\n+  }\n+\n+  void noncompliant_backreference(String str) {\n+    str.matches(\"(\\\\w+)-\\\\2\"); // Noncompliant {{Fix the back reference error inside this regex.}}\n+\n+    str.matches(\"(?<name>\\\\w+)-\\\\k<nae>\"); // Noncompliant {{Fix the back reference error inside this regex.}}\n \n-    str.matches(\"(\\\\w+)-\\\\2\"); // False Negative - group numbers not handled in rule\n+    str.matches(\n+      \"(?<g1>ab)\"\n+        + \"\\\\k<g2>\" // Noncompliant [[sc=12;ec=19;secondary=25,26]] {{Fix the back reference errors inside this regex.}}\n+        + \"\\\\k<g3>\"\n+        + \"(?<g2>cd)\"\n+        + \"(?<g3>ed)\");\n \n-    str.matches(\"(?<name>\\\\w+)-\\\\k<nae>\"); // False Negative - group names not handled in rule\n+    str.matches(\n+      \"(?<g1>ab)\"\n+        + \"\\\\2\" // Noncompliant [[sc=12;ec=15;secondary=32,33]] {{Fix the back reference errors inside this regex.}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk3ODAxNg=="}, "originalCommit": {"oid": "b9b0e5556ab88d9ccdd73f82c9e28e7d702dace3"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf6971820690615ccc8b4dc357c661cfaf081121", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/cf6971820690615ccc8b4dc357c661cfaf081121", "committedDate": "2020-06-17T07:16:18Z", "message": "SONARJAVA-3420 Handle invalid groups in S5856"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9b0e5556ab88d9ccdd73f82c9e28e7d702dace3", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/b9b0e5556ab88d9ccdd73f82c9e28e7d702dace3", "committedDate": "2020-06-16T09:05:17Z", "message": "SONARJAVA-3420 Handle invalid groups in S5856"}, "afterCommit": {"oid": "cf6971820690615ccc8b4dc357c661cfaf081121", "author": {"user": {"login": "m-g-sonar", "name": "Michael Gumowski"}}, "url": "https://github.com/SonarSource/sonar-java/commit/cf6971820690615ccc8b4dc357c661cfaf081121", "committedDate": "2020-06-17T07:16:18Z", "message": "SONARJAVA-3420 Handle invalid groups in S5856"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1722, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}