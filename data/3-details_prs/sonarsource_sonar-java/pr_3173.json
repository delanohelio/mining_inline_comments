{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0OTkxNTI5", "number": 3173, "title": "SONARJAVA-3511 Rule S5961: Test methods should not contain too many assertions", "bodyText": "", "createdAt": "2020-09-11T11:58:08Z", "url": "https://github.com/SonarSource/sonar-java/pull/3173", "merged": true, "mergeCommit": {"oid": "93607a9640745d82395ecefe6d698b4c3b763b26"}, "closed": true, "closedAt": "2020-09-16T07:57:25Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdH4q13gBqjM3NTcyMzg0MDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJXqyFAFqTQ4OTM2Nzk0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f8f747f424b2e57128e8d14215d3b0717e094dbd", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/f8f747f424b2e57128e8d14215d3b0717e094dbd", "committedDate": "2020-09-11T11:56:14Z", "message": "Implement rule & refactoring"}, "afterCommit": {"oid": "e4332fd6c796290ac9ead87e3913a6796d31a02b", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/e4332fd6c796290ac9ead87e3913a6796d31a02b", "committedDate": "2020-09-11T17:15:53Z", "message": "Implement rule & refactoring"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e4332fd6c796290ac9ead87e3913a6796d31a02b", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/e4332fd6c796290ac9ead87e3913a6796d31a02b", "committedDate": "2020-09-11T17:15:53Z", "message": "Implement rule & refactoring"}, "afterCommit": {"oid": "359daa1f7589f52b37579da05b5aa93f0d80022d", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/359daa1f7589f52b37579da05b5aa93f0d80022d", "committedDate": "2020-09-11T19:03:17Z", "message": "Update tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "359daa1f7589f52b37579da05b5aa93f0d80022d", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/359daa1f7589f52b37579da05b5aa93f0d80022d", "committedDate": "2020-09-11T19:03:17Z", "message": "Update tests"}, "afterCommit": {"oid": "2f8d8ce43bcef3469dc1597f10a2394e47d1bb31", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/2f8d8ce43bcef3469dc1597f10a2394e47d1bb31", "committedDate": "2020-09-14T07:05:44Z", "message": "Update tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f8d8ce43bcef3469dc1597f10a2394e47d1bb31", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/2f8d8ce43bcef3469dc1597f10a2394e47d1bb31", "committedDate": "2020-09-14T07:05:44Z", "message": "Update tests"}, "afterCommit": {"oid": "0c77fa79ce33f4bf56c6855c37d2b8998ed90d83", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/0c77fa79ce33f4bf56c6855c37d2b8998ed90d83", "committedDate": "2020-09-14T07:10:55Z", "message": "Update tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c77fa79ce33f4bf56c6855c37d2b8998ed90d83", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/0c77fa79ce33f4bf56c6855c37d2b8998ed90d83", "committedDate": "2020-09-14T07:10:55Z", "message": "Update tests"}, "afterCommit": {"oid": "02a18ad62bf3eba02c18f8dd541bb51ca0cb5057", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/02a18ad62bf3eba02c18f8dd541bb51ca0cb5057", "committedDate": "2020-09-14T08:55:01Z", "message": "Update tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02a18ad62bf3eba02c18f8dd541bb51ca0cb5057", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/02a18ad62bf3eba02c18f8dd541bb51ca0cb5057", "committedDate": "2020-09-14T08:55:01Z", "message": "Update tests"}, "afterCommit": {"oid": "eca9a78a401b0f7099025a88897f0ac41f0e0dd5", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/eca9a78a401b0f7099025a88897f0ac41f0e0dd5", "committedDate": "2020-09-14T09:39:36Z", "message": "Update tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0fae7596f97004f2abe86825ed6f2eca443f655b", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/0fae7596f97004f2abe86825ed6f2eca443f655b", "committedDate": "2020-09-14T11:03:58Z", "message": "Update tests"}, "afterCommit": {"oid": "0241a1d1b57d75af1b02ef55cd9ec65a3f69557c", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/0241a1d1b57d75af1b02ef55cd9ec65a3f69557c", "committedDate": "2020-09-14T11:09:45Z", "message": "SONARJAVA-3511 Rule S5961: Test methods should not contain too many assertions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NjU1NzA0", "url": "https://github.com/SonarSource/sonar-java/pull/3173#pullrequestreview-487655704", "createdAt": "2020-09-14T11:20:00Z", "commit": {"oid": "0241a1d1b57d75af1b02ef55cd9ec65a3f69557c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMToyMDowMFrOHRPLbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMToyMDowMFrOHRPLbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgzNjUyNA==", "bodyText": "This case is not covered in tests because as I found there is only one method starting with \"time\", which is time itself and it is true for name.equals(\"time\") if I remove this line, could hit performance a little(very little), I wanted to remove startsWith(..) but maybe I am missing something", "url": "https://github.com/SonarSource/sonar-java/pull/3173#discussion_r487836524", "createdAt": "2020-09-14T11:20:00Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/helpers/UnitTestUtils.java", "diffHunk": "@@ -34,6 +36,38 @@\n \n public final class UnitTestUtils {\n \n+  public static final Pattern ASSERTION_METHODS_PATTERN = Pattern.compile(\"(assert|verify|fail|should|check|expect|validate).*\");\n+  public static final Pattern TEST_METHODS_PATTERN = Pattern.compile(\"test.*|.*Test\");\n+\n+  public static final MethodMatchers ASSERTION_INVOCATION_MATCHERS = MethodMatchers.or(\n+    // fest 1.x / 2.X\n+    MethodMatchers.create().ofSubTypes(\"org.fest.assertions.GenericAssert\", \"org.fest.assertions.api.AbstractAssert\").anyName().withAnyParameters().build(),\n+    // rest assured 2.0\n+    MethodMatchers.create().ofTypes(\"io.restassured.response.ValidatableResponseOptions\")\n+      .name(name -> name.equals(\"body\") ||\n+        name.equals(\"time\") ||\n+        name.startsWith(\"time\") ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0241a1d1b57d75af1b02ef55cd9ec65a3f69557c"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MzY0ODg2", "url": "https://github.com/SonarSource/sonar-java/pull/3173#pullrequestreview-488364886", "createdAt": "2020-09-15T06:35:28Z", "commit": {"oid": "0241a1d1b57d75af1b02ef55cd9ec65a3f69557c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjozNToyOFrOHRyxTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjo0NjozN1rOHRzEgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQxOTY2MQ==", "bodyText": "If the default 10 is too noisy, I would adjust it to a more appropriate number by default, to have a rule \"already configured for most cases\" when it is enabled. 50 looks like too far away from the default to me.\nCould you have a look at the distribution of values on our test projects? Then the boundary could be set to catch 5-10% of them.", "url": "https://github.com/SonarSource/sonar-java/pull/3173#discussion_r488419661", "createdAt": "2020-09-15T06:35:28Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/TooManyAssertionsCheck.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.sonar.check.Rule;\n+import org.sonar.check.RuleProperty;\n+import org.sonar.java.model.ModifiersUtils;\n+import org.sonar.plugins.java.api.JavaFileScanner;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodReferenceTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+import static org.sonar.java.checks.helpers.UnitTestUtils.ASSERTION_INVOCATION_MATCHERS;\n+import static org.sonar.java.checks.helpers.UnitTestUtils.ASSERTION_METHODS_PATTERN;\n+import static org.sonar.java.checks.helpers.UnitTestUtils.REACTIVE_X_TEST_METHODS;\n+import static org.sonar.java.checks.helpers.UnitTestUtils.TEST_METHODS_PATTERN;\n+import static org.sonar.java.checks.helpers.UnitTestUtils.isUnitTest;\n+import static org.sonar.java.model.ExpressionUtils.methodName;\n+\n+@Rule(key = \"S5961\")\n+public class TooManyAssertionsCheck extends BaseTreeVisitor implements JavaFileScanner {\n+\n+  private static final int DEFAULT_MAX = 10;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0241a1d1b57d75af1b02ef55cd9ec65a3f69557c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyMDc2NQ==", "bodyText": "shouldn't you also remove the ASSERTION_INVOCATION_MATCHERS and REACTIVE_X_TEST_METHODS constants from this file, since you duplicated it in UnitTestUtils?", "url": "https://github.com/SonarSource/sonar-java/pull/3173#discussion_r488420765", "createdAt": "2020-09-15T06:38:05Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertionsInTestsCheck.java", "diffHunk": "@@ -172,23 +173,6 @@ private static boolean expectAssertion(MethodTree methodTree) {\n     return false;\n   }\n \n-  private static boolean isUnitTest(MethodTree methodTree) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0241a1d1b57d75af1b02ef55cd9ec65a3f69557c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyMjQ3MA==", "bodyText": "you already have the declaration in the visitMethod() method (L70), why not directly use it instead of the symbol?\nSo you would not have to jump into the declaration. You can these the symbol inside this method the.", "url": "https://github.com/SonarSource/sonar-java/pull/3173#discussion_r488422470", "createdAt": "2020-09-15T06:41:52Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/TooManyAssertionsCheck.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.sonar.check.Rule;\n+import org.sonar.check.RuleProperty;\n+import org.sonar.java.model.ModifiersUtils;\n+import org.sonar.plugins.java.api.JavaFileScanner;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodReferenceTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+import static org.sonar.java.checks.helpers.UnitTestUtils.ASSERTION_INVOCATION_MATCHERS;\n+import static org.sonar.java.checks.helpers.UnitTestUtils.ASSERTION_METHODS_PATTERN;\n+import static org.sonar.java.checks.helpers.UnitTestUtils.REACTIVE_X_TEST_METHODS;\n+import static org.sonar.java.checks.helpers.UnitTestUtils.TEST_METHODS_PATTERN;\n+import static org.sonar.java.checks.helpers.UnitTestUtils.isUnitTest;\n+import static org.sonar.java.model.ExpressionUtils.methodName;\n+\n+@Rule(key = \"S5961\")\n+public class TooManyAssertionsCheck extends BaseTreeVisitor implements JavaFileScanner {\n+\n+  private static final int DEFAULT_MAX = 10;\n+\n+  @RuleProperty(key = \"MaximumAssertionNumber\", description = \"The maximum authorized number of assertions in a test method\", defaultValue = \"\" + DEFAULT_MAX)\n+  public int maximumAssertionNumber = DEFAULT_MAX;\n+\n+  private final Map<Symbol, Integer> assertionsInMethod = new HashMap<>();\n+  private JavaFileScannerContext context;\n+\n+  @Override\n+  public void scanFile(JavaFileScannerContext context) {\n+    this.context = context;\n+    assertionsInMethod.clear();\n+    scan(context.getTree());\n+    assertionsInMethod.clear();\n+  }\n+\n+  @Override\n+  public void visitMethod(MethodTree methodTree) {\n+    if (ModifiersUtils.hasModifier(methodTree.modifiers(), Modifier.ABSTRACT)) {\n+      return;\n+    }\n+\n+    if (isUnitTest(methodTree) && numberOfAssertions(methodTree.symbol()) > maximumAssertionNumber) {\n+      context.reportIssue(this, methodTree.simpleName(), String.format(\"Refactor this method in order to have less than %d assertions.\", maximumAssertionNumber));\n+    }\n+  }\n+\n+  private int numberOfAssertions(Symbol symbol) {\n+    if (!assertionsInMethod.containsKey(symbol)) {\n+      assertionsInMethod.put(symbol, 0);\n+      Tree declaration = symbol.declaration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0241a1d1b57d75af1b02ef55cd9ec65a3f69557c"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyMjkyMQ==", "bodyText": "I don't see the interest of using a BaseTreeVisitor if you are only visiting methods. Use an IssuableSubscriptionVisitor, it will be simpler.", "url": "https://github.com/SonarSource/sonar-java/pull/3173#discussion_r488422921", "createdAt": "2020-09-15T06:43:00Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/TooManyAssertionsCheck.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.sonar.check.Rule;\n+import org.sonar.check.RuleProperty;\n+import org.sonar.java.model.ModifiersUtils;\n+import org.sonar.plugins.java.api.JavaFileScanner;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodReferenceTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+import static org.sonar.java.checks.helpers.UnitTestUtils.ASSERTION_INVOCATION_MATCHERS;\n+import static org.sonar.java.checks.helpers.UnitTestUtils.ASSERTION_METHODS_PATTERN;\n+import static org.sonar.java.checks.helpers.UnitTestUtils.REACTIVE_X_TEST_METHODS;\n+import static org.sonar.java.checks.helpers.UnitTestUtils.TEST_METHODS_PATTERN;\n+import static org.sonar.java.checks.helpers.UnitTestUtils.isUnitTest;\n+import static org.sonar.java.model.ExpressionUtils.methodName;\n+\n+@Rule(key = \"S5961\")\n+public class TooManyAssertionsCheck extends BaseTreeVisitor implements JavaFileScanner {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0241a1d1b57d75af1b02ef55cd9ec65a3f69557c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyMzE2OQ==", "bodyText": "2 comments:\n\n\nWith an IssuableSubscriptionVisitor, you could directly call reportIssue(methodTree.simpleName())\n\n\nI think it would be valuable to use secondaries on all the assertions, in order to proof our count.", "url": "https://github.com/SonarSource/sonar-java/pull/3173#discussion_r488423169", "createdAt": "2020-09-15T06:43:37Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/TooManyAssertionsCheck.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.sonar.check.Rule;\n+import org.sonar.check.RuleProperty;\n+import org.sonar.java.model.ModifiersUtils;\n+import org.sonar.plugins.java.api.JavaFileScanner;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodReferenceTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+import static org.sonar.java.checks.helpers.UnitTestUtils.ASSERTION_INVOCATION_MATCHERS;\n+import static org.sonar.java.checks.helpers.UnitTestUtils.ASSERTION_METHODS_PATTERN;\n+import static org.sonar.java.checks.helpers.UnitTestUtils.REACTIVE_X_TEST_METHODS;\n+import static org.sonar.java.checks.helpers.UnitTestUtils.TEST_METHODS_PATTERN;\n+import static org.sonar.java.checks.helpers.UnitTestUtils.isUnitTest;\n+import static org.sonar.java.model.ExpressionUtils.methodName;\n+\n+@Rule(key = \"S5961\")\n+public class TooManyAssertionsCheck extends BaseTreeVisitor implements JavaFileScanner {\n+\n+  private static final int DEFAULT_MAX = 10;\n+\n+  @RuleProperty(key = \"MaximumAssertionNumber\", description = \"The maximum authorized number of assertions in a test method\", defaultValue = \"\" + DEFAULT_MAX)\n+  public int maximumAssertionNumber = DEFAULT_MAX;\n+\n+  private final Map<Symbol, Integer> assertionsInMethod = new HashMap<>();\n+  private JavaFileScannerContext context;\n+\n+  @Override\n+  public void scanFile(JavaFileScannerContext context) {\n+    this.context = context;\n+    assertionsInMethod.clear();\n+    scan(context.getTree());\n+    assertionsInMethod.clear();\n+  }\n+\n+  @Override\n+  public void visitMethod(MethodTree methodTree) {\n+    if (ModifiersUtils.hasModifier(methodTree.modifiers(), Modifier.ABSTRACT)) {\n+      return;\n+    }\n+\n+    if (isUnitTest(methodTree) && numberOfAssertions(methodTree.symbol()) > maximumAssertionNumber) {\n+      context.reportIssue(this, methodTree.simpleName(), String.format(\"Refactor this method in order to have less than %d assertions.\", maximumAssertionNumber));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0241a1d1b57d75af1b02ef55cd9ec65a3f69557c"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyNDU3OA==", "bodyText": "the field name sounds complicated for a so simple purpose. Why not calling it maximum or threshold only?", "url": "https://github.com/SonarSource/sonar-java/pull/3173#discussion_r488424578", "createdAt": "2020-09-15T06:46:37Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/TooManyAssertionsCheck.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.sonar.check.Rule;\n+import org.sonar.check.RuleProperty;\n+import org.sonar.java.model.ModifiersUtils;\n+import org.sonar.plugins.java.api.JavaFileScanner;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.tree.BaseTreeVisitor;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodReferenceTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+import static org.sonar.java.checks.helpers.UnitTestUtils.ASSERTION_INVOCATION_MATCHERS;\n+import static org.sonar.java.checks.helpers.UnitTestUtils.ASSERTION_METHODS_PATTERN;\n+import static org.sonar.java.checks.helpers.UnitTestUtils.REACTIVE_X_TEST_METHODS;\n+import static org.sonar.java.checks.helpers.UnitTestUtils.TEST_METHODS_PATTERN;\n+import static org.sonar.java.checks.helpers.UnitTestUtils.isUnitTest;\n+import static org.sonar.java.model.ExpressionUtils.methodName;\n+\n+@Rule(key = \"S5961\")\n+public class TooManyAssertionsCheck extends BaseTreeVisitor implements JavaFileScanner {\n+\n+  private static final int DEFAULT_MAX = 10;\n+\n+  @RuleProperty(key = \"MaximumAssertionNumber\", description = \"The maximum authorized number of assertions in a test method\", defaultValue = \"\" + DEFAULT_MAX)\n+  public int maximumAssertionNumber = DEFAULT_MAX;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0241a1d1b57d75af1b02ef55cd9ec65a3f69557c"}, "originalPosition": 51}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26a961d9929187e4a4295e40ef7c3b9f43418d38", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/26a961d9929187e4a4295e40ef7c3b9f43418d38", "committedDate": "2020-09-15T08:45:14Z", "message": "Change BaseTreeVisitor -> IssuableSuscriptionVisitor, add secondaries to reporting issuess & refactorig"}, "afterCommit": {"oid": "eb139f08cd6a65f60b5bf0b31238ec82183673a6", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/eb139f08cd6a65f60b5bf0b31238ec82183673a6", "committedDate": "2020-09-15T13:53:11Z", "message": "Change BaseTreeVisitor -> IssuableSuscriptionVisitor, add secondaries to reporting issuess & refactorig"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eb139f08cd6a65f60b5bf0b31238ec82183673a6", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/eb139f08cd6a65f60b5bf0b31238ec82183673a6", "committedDate": "2020-09-15T13:53:11Z", "message": "Change BaseTreeVisitor -> IssuableSuscriptionVisitor, add secondaries to reporting issuess & refactorig"}, "afterCommit": {"oid": "429d4c972a600ce460d0de3fb88245534040bebb", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/429d4c972a600ce460d0de3fb88245534040bebb", "committedDate": "2020-09-15T14:05:03Z", "message": "Change BaseTreeVisitor -> IssuableSuscriptionVisitor, add secondaries to reporting issuess & refactorig"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "429d4c972a600ce460d0de3fb88245534040bebb", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/429d4c972a600ce460d0de3fb88245534040bebb", "committedDate": "2020-09-15T14:05:03Z", "message": "Change BaseTreeVisitor -> IssuableSuscriptionVisitor, add secondaries to reporting issuess & refactorig"}, "afterCommit": {"oid": "42e05871e5e0f44472d07b306e9209f0d617b14e", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/42e05871e5e0f44472d07b306e9209f0d617b14e", "committedDate": "2020-09-15T14:07:32Z", "message": "Change BaseTreeVisitor -> IssuableSuscriptionVisitor, add secondaries to reporting issuess & refactorig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eecef3ba1250d8c851436107f1d59c988c56ea15", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/eecef3ba1250d8c851436107f1d59c988c56ea15", "committedDate": "2020-09-16T06:40:20Z", "message": "SONARJAVA-3511 Rule S5961: Test methods should not contain too many assertions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e29b97a4c043fb76fd240fd7038a28fda493b00", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/9e29b97a4c043fb76fd240fd7038a28fda493b00", "committedDate": "2020-09-16T06:40:23Z", "message": "Change BaseTreeVisitor -> IssuableSuscriptionVisitor, add secondaries to reporting issuess & refactorig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab21297aef4c1952e5f48e9bbb8e88a6fba71c69", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/ab21297aef4c1952e5f48e9bbb8e88a6fba71c69", "committedDate": "2020-09-16T06:40:23Z", "message": "Fix StackOverflow Error in case of recursive functions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66dd85fdc40ffb5ff227a70b8894d428b0947680", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/66dd85fdc40ffb5ff227a70b8894d428b0947680", "committedDate": "2020-09-15T15:05:46Z", "message": "Fix StackOverflow Error in case of recursive functions"}, "afterCommit": {"oid": "ab21297aef4c1952e5f48e9bbb8e88a6fba71c69", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/ab21297aef4c1952e5f48e9bbb8e88a6fba71c69", "committedDate": "2020-09-16T06:40:23Z", "message": "Fix StackOverflow Error in case of recursive functions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MzY3OTQ2", "url": "https://github.com/SonarSource/sonar-java/pull/3173#pullrequestreview-489367946", "createdAt": "2020-09-16T07:57:06Z", "commit": {"oid": "ab21297aef4c1952e5f48e9bbb8e88a6fba71c69"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1979, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}