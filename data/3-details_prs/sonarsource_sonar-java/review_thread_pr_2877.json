{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NzQ0NTUy", "number": 2877, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDowMzo0NlrODpH53g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDowMzo0NlrODpH53g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDQ3NzEwOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/serialization/SerializableObjectInSessionCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDowMzo0NlrOF4GZeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDo1MzozM1rOF4It6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2OTQwMA==", "bodyText": "So it means that an argument with unknown type is considered as not serializable?\nShould we consider making the unknown check inside isNotSerializable and provide the same behavior for all rules using it?\nI'm saying this since the other rule (S2118) using isNotSerializable is also reporting an arguable issue with a similar message if we run it against an unknown type.\n\nMake the \"!Unknown!\" class \"Serializable\" or don't write it.", "url": "https://github.com/SonarSource/sonar-java/pull/2877#discussion_r394369400", "createdAt": "2020-03-18T14:03:46Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/serialization/SerializableObjectInSessionCheck.java", "diffHunk": "@@ -44,6 +44,9 @@\n   protected void onMethodInvocationFound(MethodInvocationTree mit) {\n     ExpressionTree argument = mit.arguments().get(1);\n     Type type = argument.symbolType();\n+    if (type.isUnknown()) {\n+      return;\n+    }\n     if (ExpressionsHelper.isNotSerializable(argument)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0fb42ff6b0451762a8f958a1474c8f8c375f962"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQwNzQwMg==", "bodyText": "Argh, I didn't realized that we were calling ExpresisonHelper to detect this. Good catch, I'm going to move the fix in the Helper class.", "url": "https://github.com/SonarSource/sonar-java/pull/2877#discussion_r394407402", "createdAt": "2020-03-18T14:53:33Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/serialization/SerializableObjectInSessionCheck.java", "diffHunk": "@@ -44,6 +44,9 @@\n   protected void onMethodInvocationFound(MethodInvocationTree mit) {\n     ExpressionTree argument = mit.arguments().get(1);\n     Type type = argument.symbolType();\n+    if (type.isUnknown()) {\n+      return;\n+    }\n     if (ExpressionsHelper.isNotSerializable(argument)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDM2OTQwMA=="}, "originalCommit": {"oid": "a0fb42ff6b0451762a8f958a1474c8f8c375f962"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4084, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}