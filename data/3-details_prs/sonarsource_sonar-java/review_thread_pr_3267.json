{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNjk1ODA3", "number": 3267, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDowMTowMlrOE5XjNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDowMTowMlrOE5XjNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTkwMTMyOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/CompareStringsBoxedTypesWithEqualsCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDowMTowMlrOHzx-3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDowMTowMlrOHzx-3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA1ODMzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static boolean isCompareWithBoleanConstant(ExpressionTree left, ExpressionTree right) {\n          \n          \n            \n              private static boolean isCompareWithBooleanConstant(ExpressionTree left, ExpressionTree right) {", "url": "https://github.com/SonarSource/sonar-java/pull/3267#discussion_r524058334", "createdAt": "2020-11-16T10:01:02Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/CompareStringsBoxedTypesWithEqualsCheck.java", "diffHunk": "@@ -31,9 +33,15 @@ protected void checkEqualityExpression(BinaryExpressionTree tree) {\n     Type leftOpType = tree.leftOperand().symbolType();\n     Type rightOpType = tree.rightOperand().symbolType();\n     if (!isNullComparison(leftOpType, rightOpType)\n+      && !isCompareWithBoleanConstant(tree.leftOperand(), tree.rightOperand())\n       && (isStringType(leftOpType, rightOpType) || isBoxedType(leftOpType, rightOpType))) {\n       reportIssue(tree.operatorToken());\n     }\n   }\n+  \n+  private static boolean isCompareWithBoleanConstant(ExpressionTree left, ExpressionTree right) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b34210f0af5df355c0c434a0f190fd2cf61fbda2"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3800, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}