{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1MjY3NTA5", "number": 3174, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0OTo0NlrOEjDD5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1NjowOFrOEjDOJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTg1NzY1OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertionArgumentOrderCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0OTo0NlrOHRMMuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo0OTo0NlrOHRMMuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc4NzcwNQ==", "bodyText": "Maybe it would be nice if you move all string literals into constants to have the consistency here", "url": "https://github.com/SonarSource/sonar-java/pull/3174#discussion_r487787705", "createdAt": "2020-09-14T09:49:46Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertionArgumentOrderCheck.java", "diffHunk": "@@ -59,12 +65,17 @@\n   protected MethodMatchers getMethodInvocationMatchers() {\n     return MethodMatchers.or(\n       MethodMatchers.create().ofTypes(ORG_JUNIT_ASSERT)\n-        .names(\"assertEquals\", \"assertSame\", \"assertNotSame\")\n+        .names(ASSERT_EQUALS, ASSERT_SAME, ASSERT_NOT_SAME)\n+        .withAnyParameters()\n+        .build(),\n+      // TestNG\n+      MethodMatchers.create().ofTypes(ORG_TESTNG_ASSERT)\n+        .names(ASSERT_EQUALS, ASSERT_NOT_EQUALS, ASSERT_SAME, ASSERT_NOT_SAME)\n         .withAnyParameters()\n         .build(),\n       // JUnit 5\n       MethodMatchers.create().ofTypes(ORG_JUNIT5_ASSERTIONS)\n-        .names(\"assertArrayEquals\", \"assertEquals\", \"assertIterableEquals\", \"assertLinesMatch\", \"assertNotEquals\", \"assertNotSame\", \"assertSame\")\n+        .names(\"assertArrayEquals\", ASSERT_EQUALS, \"assertIterableEquals\", \"assertLinesMatch\", ASSERT_NOT_EQUALS, ASSERT_NOT_SAME, ASSERT_SAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c33918fcfc77f84129d6916ba030b252c9bb16b1"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTg3NDAwOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertionArgumentOrderCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1NDowMFrOHRMWng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1NDowMFrOHRMWng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5MDIzOA==", "bodyText": "This message could be extracted to string constants, cause it's used in few places.", "url": "https://github.com/SonarSource/sonar-java/pull/3174#discussion_r487790238", "createdAt": "2020-09-14T09:54:00Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertionArgumentOrderCheck.java", "diffHunk": "@@ -77,11 +88,14 @@ protected MethodMatchers getMethodInvocationMatchers() {\n \n   @Override\n   protected void onMethodInvocationFound(MethodInvocationTree mit) {\n-    if (mit.symbol().owner().type().is(ORG_JUNIT5_ASSERTIONS)) {\n+    Type ownerType = mit.symbol().owner().type();\n+    if (ownerType.is(ORG_JUNIT5_ASSERTIONS)) {\n       checkArguments(mit.arguments().get(0), mit.arguments().get(1), \"expected value, actual value\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c33918fcfc77f84129d6916ba030b252c9bb16b1"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTg3Njk1OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertionArgumentOrderCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1NDozN1rOHRMYXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1NDozN1rOHRMYXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5MDY4NQ==", "bodyText": "Could be moved to constants too.", "url": "https://github.com/SonarSource/sonar-java/pull/3174#discussion_r487790685", "createdAt": "2020-09-14T09:54:37Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertionArgumentOrderCheck.java", "diffHunk": "@@ -77,11 +88,14 @@ protected MethodMatchers getMethodInvocationMatchers() {\n \n   @Override\n   protected void onMethodInvocationFound(MethodInvocationTree mit) {\n-    if (mit.symbol().owner().type().is(ORG_JUNIT5_ASSERTIONS)) {\n+    Type ownerType = mit.symbol().owner().type();\n+    if (ownerType.is(ORG_JUNIT5_ASSERTIONS)) {\n       checkArguments(mit.arguments().get(0), mit.arguments().get(1), \"expected value, actual value\");\n-    } else if (mit.symbol().owner().type().is(ORG_JUNIT_ASSERT)) {\n+    } else if (ownerType.is(ORG_JUNIT_ASSERT)) {\n       ExpressionTree argToCheck = getActualArgument(mit);\n       checkArguments(previousArg(argToCheck, mit), argToCheck, \"expected value, actual value\");\n+    } else if (ownerType.is(ORG_TESTNG_ASSERT)) {\n+      checkArguments(mit.arguments().get(1), mit.arguments().get(0), \"actual value, expected value\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c33918fcfc77f84129d6916ba030b252c9bb16b1"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MTg4Mzg4OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertionArgumentOrderCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwOTo1NjowOFrOHRMcWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNToxNTowMFrOHRZ7-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5MTcwNw==", "bodyText": "I am not sure whether these matchers could be used in other places. If so, might be a nice candidate for moving to Utils/Helpers", "url": "https://github.com/SonarSource/sonar-java/pull/3174#discussion_r487791707", "createdAt": "2020-09-14T09:56:08Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertionArgumentOrderCheck.java", "diffHunk": "@@ -59,12 +65,17 @@\n   protected MethodMatchers getMethodInvocationMatchers() {\n     return MethodMatchers.or(\n       MethodMatchers.create().ofTypes(ORG_JUNIT_ASSERT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c33918fcfc77f84129d6916ba030b252c9bb16b1"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxMjc5Mg==", "bodyText": "This matcher is related to 4 specific methods of org.junit.Assert that have an expected and an actual argument. I didn't find this exact need in other rules related to org.junit.Assert, so I keep this matcher here for now.", "url": "https://github.com/SonarSource/sonar-java/pull/3174#discussion_r488012792", "createdAt": "2020-09-14T15:15:00Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertionArgumentOrderCheck.java", "diffHunk": "@@ -59,12 +65,17 @@\n   protected MethodMatchers getMethodInvocationMatchers() {\n     return MethodMatchers.or(\n       MethodMatchers.create().ofTypes(ORG_JUNIT_ASSERT)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzc5MTcwNw=="}, "originalCommit": {"oid": "c33918fcfc77f84129d6916ba030b252c9bb16b1"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3884, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}