{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3MTcyMjY0", "number": 2981, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDo1NDoyMVrOECmZRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDo1NDoyMVrOECmZRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMTYxNjY4OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertJTestForEmptinessCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNDo1NDoyMVrOGfJ9ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwNzoxOTo0N1rOGfjGUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyMjIxMg==", "bodyText": "Is there an reason to use addParametersMatcher(MethodMatchers.ANY) over withAnyParameters()?\nEdit: Just saw that you use both further down in the file.", "url": "https://github.com/SonarSource/sonar-java/pull/2981#discussion_r435322212", "createdAt": "2020-06-04T14:54:21Z", "author": {"login": "johann-beleites-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertJTestForEmptinessCheck.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.ParenthesizedTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.TypeCastTree;\n+\n+@Rule(key = \"S5841\")\n+public class AssertJTestForEmptinessCheck extends AbstractMethodDetection {\n+\n+  private static final MethodMatchers ASSERTJ_NOT_TESTING_SIZE = MethodMatchers.create()\n+    .ofSubTypes(\"org.assertj.core.api.AbstractAssert\")\n+    .name(name ->\n+      \"as\".equals(name) || \"describedAs\".equals(name) || \"withFailMessage\".equals(name) || \"overridingErrorMessage\".equals(name)\n+        || \"isNotNull\".equals(name) || \"asList\".equals(name) || name.contains(\"InstanceOf\")|| name.startsWith(\"using\")\n+        || name.startsWith(\"extracting\") || name.startsWith(\"filtered\") || name.startsWith(\"doesNotContain\") || name.startsWith(\"all\")\n+    ).withAnyParameters()\n+    .build();\n+\n+  private static final MethodMatchers ASSERT_THAT_MATCHER = MethodMatchers.create()\n+    .ofSubTypes(\"org.assertj.core.api.Assertions\", \"org.assertj.core.api.AssertionsForInterfaceTypes\", \"org.assertj.core.api.AssertionsForClassTypes\")\n+    .names(\"assertThat\", \"assertThatObject\").addParametersMatcher(MethodMatchers.ANY).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65d48e5a65e6421224ba265701c7558c754622af"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTczNDA5OA==", "bodyText": "withAnyParameters() will match any number of parameters, of any type.\naddParametersMatcher(MethodMatchers.ANY) will match exactly one parameter with any type.\nI use the latter here in order to be sure that I will not be out of bound when I access the argument at line 102 (even if it is not possible currently, I prefer to be safe).\nFor getMethodInvocationMatchers, doesNotContain can take an index as second argument, the rule does not apply then.\nDoes it make sense?", "url": "https://github.com/SonarSource/sonar-java/pull/2981#discussion_r435734098", "createdAt": "2020-06-05T07:19:47Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertJTestForEmptinessCheck.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.Collections;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.checks.methods.AbstractMethodDetection;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.ParenthesizedTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+import org.sonar.plugins.java.api.tree.TypeCastTree;\n+\n+@Rule(key = \"S5841\")\n+public class AssertJTestForEmptinessCheck extends AbstractMethodDetection {\n+\n+  private static final MethodMatchers ASSERTJ_NOT_TESTING_SIZE = MethodMatchers.create()\n+    .ofSubTypes(\"org.assertj.core.api.AbstractAssert\")\n+    .name(name ->\n+      \"as\".equals(name) || \"describedAs\".equals(name) || \"withFailMessage\".equals(name) || \"overridingErrorMessage\".equals(name)\n+        || \"isNotNull\".equals(name) || \"asList\".equals(name) || name.contains(\"InstanceOf\")|| name.startsWith(\"using\")\n+        || name.startsWith(\"extracting\") || name.startsWith(\"filtered\") || name.startsWith(\"doesNotContain\") || name.startsWith(\"all\")\n+    ).withAnyParameters()\n+    .build();\n+\n+  private static final MethodMatchers ASSERT_THAT_MATCHER = MethodMatchers.create()\n+    .ofSubTypes(\"org.assertj.core.api.Assertions\", \"org.assertj.core.api.AssertionsForInterfaceTypes\", \"org.assertj.core.api.AssertionsForClassTypes\")\n+    .names(\"assertThat\", \"assertThatObject\").addParametersMatcher(MethodMatchers.ANY).build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTMyMjIxMg=="}, "originalCommit": {"oid": "65d48e5a65e6421224ba265701c7558c754622af"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4020, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}