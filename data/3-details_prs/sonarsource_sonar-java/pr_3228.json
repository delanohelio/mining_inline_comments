{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MDA3NjIw", "number": 3228, "title": "SONARJAVA-3542 RSPEC-5993 Constructors of an \"abstract\" class should not be declared \"public\"", "bodyText": ".", "createdAt": "2020-10-01T06:45:45Z", "url": "https://github.com/SonarSource/sonar-java/pull/3228", "merged": true, "mergeCommit": {"oid": "85fb605befb2cde361e282079e71c90e9de012ed"}, "closed": true, "closedAt": "2020-10-01T15:10:32Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdN-U0JAH2gAyNDk2MDA3NjIwOmI2MWI0ODM3OTRkODhiNDViNTI5MTI0MTRiM2MyMDI5NWFlZjBmZjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOSTsxgH2gAyNDk2MDA3NjIwOjUyOGI3ZDNlMjRiZmE0MjlmZWE4MWZjNDU3M2IwMjVkNjNkNmNmMTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b61b483794d88b45b52912414b3c20295aef0ff1", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/b61b483794d88b45b52912414b3c20295aef0ff1", "committedDate": "2020-09-30T15:15:06Z", "message": "Add new rule description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d164f2916f33b77d57280858ee0c8564beedbe2", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/1d164f2916f33b77d57280858ee0c8564beedbe2", "committedDate": "2020-09-30T16:25:34Z", "message": "Implement rule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28bb9c19f832651174b1ed1471f8e782964297d3", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/28bb9c19f832651174b1ed1471f8e782964297d3", "committedDate": "2020-10-01T06:53:16Z", "message": "Update ruling tests results"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07438e2d39ccc4deae27d0672679e400d421b6bb", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/07438e2d39ccc4deae27d0672679e400d421b6bb", "committedDate": "2020-09-30T16:27:50Z", "message": "Update ruling tests results"}, "afterCommit": {"oid": "28bb9c19f832651174b1ed1471f8e782964297d3", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/28bb9c19f832651174b1ed1471f8e782964297d3", "committedDate": "2020-10-01T06:53:16Z", "message": "Update ruling tests results"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c42858143bcac3d62a63e2923a7383e81243afd6", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/c42858143bcac3d62a63e2923a7383e81243afd6", "committedDate": "2020-10-01T13:19:46Z", "message": "Skip private classes from this rule."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMzg5OTI3", "url": "https://github.com/SonarSource/sonar-java/pull/3228#pullrequestreview-500389927", "createdAt": "2020-10-01T14:12:08Z", "commit": {"oid": "c42858143bcac3d62a63e2923a7383e81243afd6"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDoxMjowOFrOHbMVoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxNDoxMzo0MVrOHbMakQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI3NTc0NA==", "bodyText": "You can use MethodTree.class::cast instead of the lambda", "url": "https://github.com/SonarSource/sonar-java/pull/3228#discussion_r498275744", "createdAt": "2020-10-01T14:12:08Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ModifiersUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.ModifierKeywordTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5993\")\n+public class PublicConstructorInAbstractClassCheck extends IssuableSubscriptionVisitor {\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.CLASS);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    ClassTree classTree = (ClassTree) tree;\n+    if (ModifiersUtils.hasModifier(classTree.modifiers(), Modifier.PRIVATE)) {\n+      return;\n+    }\n+\n+    Optional<ModifierKeywordTree> abstractKeyword = ModifiersUtils.findModifier(classTree.modifiers(), Modifier.ABSTRACT);\n+\n+    abstractKeyword.ifPresent(keyword -> {\n+      JavaFileScannerContext.Location secondaryLocation = new JavaFileScannerContext.Location(\"This class is \\\"abstract\\\".\", keyword);\n+      classTree.members().stream()\n+        .filter(PublicConstructorInAbstractClassCheck::isaConstructor)\n+        .map(member -> ((MethodTree) member))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c42858143bcac3d62a63e2923a7383e81243afd6"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI3NTkyMQ==", "bodyText": "I would prefer isConstructor()", "url": "https://github.com/SonarSource/sonar-java/pull/3228#discussion_r498275921", "createdAt": "2020-10-01T14:12:22Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ModifiersUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.ModifierKeywordTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5993\")\n+public class PublicConstructorInAbstractClassCheck extends IssuableSubscriptionVisitor {\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.CLASS);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    ClassTree classTree = (ClassTree) tree;\n+    if (ModifiersUtils.hasModifier(classTree.modifiers(), Modifier.PRIVATE)) {\n+      return;\n+    }\n+\n+    Optional<ModifierKeywordTree> abstractKeyword = ModifiersUtils.findModifier(classTree.modifiers(), Modifier.ABSTRACT);\n+\n+    abstractKeyword.ifPresent(keyword -> {\n+      JavaFileScannerContext.Location secondaryLocation = new JavaFileScannerContext.Location(\"This class is \\\"abstract\\\".\", keyword);\n+      classTree.members().stream()\n+        .filter(PublicConstructorInAbstractClassCheck::isaConstructor)\n+        .map(member -> ((MethodTree) member))\n+        .map(methodTree -> ModifiersUtils.findModifier(methodTree.modifiers(), Modifier.PUBLIC))\n+        .filter(Optional::isPresent)\n+        .map(Optional::get)\n+        .forEach(modifier -> reportIssue(modifier, \"Change the visibility of this constructor to \\\"protected\\\".\",\n+          Collections.singletonList(secondaryLocation), null));\n+    });\n+  }\n+\n+  private static boolean isaConstructor(Tree member) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c42858143bcac3d62a63e2923a7383e81243afd6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI3NjMzNg==", "bodyText": "Let's make the list of secondaries outside this stream to not have to do it again.", "url": "https://github.com/SonarSource/sonar-java/pull/3228#discussion_r498276336", "createdAt": "2020-10-01T14:12:53Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ModifiersUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.ModifierKeywordTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5993\")\n+public class PublicConstructorInAbstractClassCheck extends IssuableSubscriptionVisitor {\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.CLASS);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    ClassTree classTree = (ClassTree) tree;\n+    if (ModifiersUtils.hasModifier(classTree.modifiers(), Modifier.PRIVATE)) {\n+      return;\n+    }\n+\n+    Optional<ModifierKeywordTree> abstractKeyword = ModifiersUtils.findModifier(classTree.modifiers(), Modifier.ABSTRACT);\n+\n+    abstractKeyword.ifPresent(keyword -> {\n+      JavaFileScannerContext.Location secondaryLocation = new JavaFileScannerContext.Location(\"This class is \\\"abstract\\\".\", keyword);\n+      classTree.members().stream()\n+        .filter(PublicConstructorInAbstractClassCheck::isaConstructor)\n+        .map(member -> ((MethodTree) member))\n+        .map(methodTree -> ModifiersUtils.findModifier(methodTree.modifiers(), Modifier.PUBLIC))\n+        .filter(Optional::isPresent)\n+        .map(Optional::get)\n+        .forEach(modifier -> reportIssue(modifier, \"Change the visibility of this constructor to \\\"protected\\\".\",\n+          Collections.singletonList(secondaryLocation), null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c42858143bcac3d62a63e2923a7383e81243afd6"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODI3NzAwOQ==", "bodyText": "I would inline this into a method isPublic(MethodTree) to be able to use a method reference again.", "url": "https://github.com/SonarSource/sonar-java/pull/3228#discussion_r498277009", "createdAt": "2020-10-01T14:13:41Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/PublicConstructorInAbstractClassCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ModifiersUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.tree.ClassTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.Modifier;\n+import org.sonar.plugins.java.api.tree.ModifierKeywordTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5993\")\n+public class PublicConstructorInAbstractClassCheck extends IssuableSubscriptionVisitor {\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.CLASS);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    ClassTree classTree = (ClassTree) tree;\n+    if (ModifiersUtils.hasModifier(classTree.modifiers(), Modifier.PRIVATE)) {\n+      return;\n+    }\n+\n+    Optional<ModifierKeywordTree> abstractKeyword = ModifiersUtils.findModifier(classTree.modifiers(), Modifier.ABSTRACT);\n+\n+    abstractKeyword.ifPresent(keyword -> {\n+      JavaFileScannerContext.Location secondaryLocation = new JavaFileScannerContext.Location(\"This class is \\\"abstract\\\".\", keyword);\n+      classTree.members().stream()\n+        .filter(PublicConstructorInAbstractClassCheck::isaConstructor)\n+        .map(member -> ((MethodTree) member))\n+        .map(methodTree -> ModifiersUtils.findModifier(methodTree.modifiers(), Modifier.PUBLIC))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c42858143bcac3d62a63e2923a7383e81243afd6"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "528b7d3e24bfa429fea81fc4573b025d63d6cf11", "author": {"user": {"login": "margarita-nedzelska-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/528b7d3e24bfa429fea81fc4573b025d63d6cf11", "committedDate": "2020-10-01T14:31:59Z", "message": "Refactoring"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1905, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}