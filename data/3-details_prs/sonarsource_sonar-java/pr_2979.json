{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NTQyMTI2", "number": 2979, "title": "SONARJAVA-3402 Rule S5853: Consecutive AssertJ \"assertThat\" statement should be chained", "bodyText": "", "createdAt": "2020-06-02T12:07:56Z", "url": "https://github.com/SonarSource/sonar-java/pull/2979", "merged": true, "mergeCommit": {"oid": "d17aa37a6762bf0959a0de20ef0f4fa0d8d01036"}, "closed": true, "closedAt": "2020-06-09T11:14:47Z", "author": {"login": "quentin-jaquier-sonarsource"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcn-WslAFqTQyNDQ1MTgyMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpgjjDABqjM0MjM2MDkyOTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NDUxODIx", "url": "https://github.com/SonarSource/sonar-java/pull/2979#pullrequestreview-424451821", "createdAt": "2020-06-04T13:34:13Z", "commit": {"oid": "1c0fb58d66cbd150da80c98aece51dbddf805341"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzozNDoxM1rOGfF-Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzozNDoxM1rOGfF-Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI1Njg0Mg==", "bodyText": "Checking METHOD_INVOCATION only at the root of an ExpressionTree is not enough, we can still have false-positives like:\n    assertThat(getRandomArray().length).isNotEqualTo(3); // false-positive\n    assertThat(getRandomArray().length).isNotEqualTo(4); \n\nI would start from e1\nfor all MEMBER_SELECT replace by MemberSelectExpressionTree#expression()\nAnd finally, check METHOD_INVOCATION", "url": "https://github.com/SonarSource/sonar-java/pull/2979#discussion_r435256842", "createdAt": "2020-06-04T13:34:13Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertJConsecutiveAssertionCheck.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n+import org.sonar.check.Rule;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.java.model.SyntacticEquivalence;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.BlockTree;\n+import org.sonar.plugins.java.api.tree.ExpressionStatementTree;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MemberSelectExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.MethodTree;\n+import org.sonar.plugins.java.api.tree.StatementTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+import static org.sonar.java.checks.helpers.UnitTestUtils.hasTestAnnotation;\n+\n+@Rule(key = \"S5853\")\n+public class AssertJConsecutiveAssertionCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final MethodMatchers ASSERT_THAT_MATCHER = MethodMatchers.create()\n+    .ofSubTypes(\"org.assertj.core.api.Assertions\").names(\"assertThat\").addParametersMatcher(MethodMatchers.ANY).build();\n+\n+  public static final MethodMatchers ASSERTJ_SET_CONTEXT_METHODS = MethodMatchers.create()\n+    .ofSubTypes(\"org.assertj.core.api.AbstractAssert\")\n+    .name(name ->\n+      name.startsWith(\"extracting\") || name.startsWith(\"using\") || name.startsWith(\"filtered\")\n+    ).withAnyParameters()\n+    .build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodTree methodTree = (MethodTree) tree;\n+    if (hasTestAnnotation(methodTree)) {\n+      BlockTree block = methodTree.block();\n+      if (block != null) {\n+        reportConsecutiveAssertions(block.body());\n+      }\n+    }\n+  }\n+\n+  private void reportConsecutiveAssertions(List<StatementTree> statements) {\n+    ExpressionTree currentArgument = null;\n+    MethodInvocationTree currentMit = null;\n+    List<MethodInvocationTree> equivalentInvocations = new ArrayList<>();\n+\n+    for (StatementTree statement : statements) {\n+      Optional<MethodInvocationTree> assertThatInvocation = getSimpleAssertSubjectInvocation(statement);\n+\n+      if (assertThatInvocation.isPresent()) {\n+        MethodInvocationTree mit = assertThatInvocation.get();\n+        ExpressionTree arg = mit.arguments().get(0);\n+        if (currentArgument == null) {\n+          currentMit = mit;\n+          currentArgument = arg;\n+        } else if (areEquivalent(currentArgument, arg)) {\n+          equivalentInvocations.add(mit);\n+        }\n+      } else {\n+        // We have something else than an assertion subject between two calls\n+        reportIssueIfMultipleCalls(currentMit, equivalentInvocations);\n+\n+        currentArgument = null;\n+        currentMit = null;\n+        equivalentInvocations.clear();\n+      }\n+    }\n+\n+    reportIssueIfMultipleCalls(currentMit, equivalentInvocations);\n+  }\n+\n+  private static Optional<MethodInvocationTree> getSimpleAssertSubjectInvocation(StatementTree statement) {\n+    if (statement.is(Tree.Kind.EXPRESSION_STATEMENT)) {\n+      ExpressionTree expression = ((ExpressionStatementTree) statement).expression();\n+      if (expression.is(Tree.Kind.METHOD_INVOCATION)) {\n+        // First method invocation should be an assertion predicate, if not (incomplete assertion), we will not find anything\n+        return getSimpleAssertSubjectInvocation(((MethodInvocationTree) expression).methodSelect());\n+      }\n+    }\n+    return Optional.empty();\n+  }\n+\n+  private static Optional<MethodInvocationTree> getSimpleAssertSubjectInvocation(ExpressionTree expressionTree) {\n+    if (expressionTree.is(Tree.Kind.MEMBER_SELECT)) {\n+      ExpressionTree memberSelectExpression = ((MemberSelectExpressionTree) expressionTree).expression();\n+      if (memberSelectExpression.is(Tree.Kind.METHOD_INVOCATION)) {\n+        MethodInvocationTree mit = (MethodInvocationTree) memberSelectExpression;\n+        if (ASSERT_THAT_MATCHER.matches(mit)) {\n+          return Optional.of(mit);\n+        } else if (ASSERTJ_SET_CONTEXT_METHODS.matches(mit)) {\n+          return Optional.empty();\n+        } else {\n+          return getSimpleAssertSubjectInvocation(mit.methodSelect());\n+        }\n+      }\n+    }\n+    return Optional.empty();\n+  }\n+\n+  private static boolean areEquivalent(ExpressionTree e1, ExpressionTree e2) {\n+    if (e1.is(Tree.Kind.METHOD_INVOCATION)) {\n+      // Two method invocation can return different values.\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c0fb58d66cbd150da80c98aece51dbddf805341"}, "originalPosition": 136}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a69ae475695ae86983d4007e591ee49944ec60de", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/a69ae475695ae86983d4007e591ee49944ec60de", "committedDate": "2020-06-05T14:03:45Z", "message": "Correctly support consecutive assertions and returning differents values"}, "afterCommit": {"oid": "99562f8b885bb18042245c7f54644938d27385e8", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/99562f8b885bb18042245c7f54644938d27385e8", "committedDate": "2020-06-05T14:22:19Z", "message": "Correctly support consecutive assertions and returning differents values"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2ODUyNjgz", "url": "https://github.com/SonarSource/sonar-java/pull/2979#pullrequestreview-426852683", "createdAt": "2020-06-09T07:19:41Z", "commit": {"oid": "f1e3887cd9aec7450afd000f6225573ec059ec2f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac260bc672f86de782a25b9e61472fddc4d5e090", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/ac260bc672f86de782a25b9e61472fddc4d5e090", "committedDate": "2020-06-09T08:12:25Z", "message": "SONARJAVA-3402 Rule S5853: Consecutive AssertJ \"assertThat\" statement should be chained"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34f68e0395239648d8dd5aca7cb6736b60c47b0e", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/34f68e0395239648d8dd5aca7cb6736b60c47b0e", "committedDate": "2020-06-09T08:12:25Z", "message": "Correctly support consecutive assertions and returning differents values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8af71561a7a70c9e685052a76a8e11383b5f6922", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/8af71561a7a70c9e685052a76a8e11383b5f6922", "committedDate": "2020-06-09T08:12:25Z", "message": "Update ruling"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1e3887cd9aec7450afd000f6225573ec059ec2f", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/f1e3887cd9aec7450afd000f6225573ec059ec2f", "committedDate": "2020-06-05T15:18:44Z", "message": "Update ruling"}, "afterCommit": {"oid": "8af71561a7a70c9e685052a76a8e11383b5f6922", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/8af71561a7a70c9e685052a76a8e11383b5f6922", "committedDate": "2020-06-09T08:12:25Z", "message": "Update ruling"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1700, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}