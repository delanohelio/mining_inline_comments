{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNTE1MTI3", "number": 2853, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoxMjo1MVrODkNd-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDo0MDoxMlrODkOBcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Mjk1OTk0OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/CollectionInappropriateCallsCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDoxMjo1MVrOFwaBNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxNTo0NDo0MlrOFwkYvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwMjI2MA==", "bodyText": "What about removeAll from Collection?", "url": "https://github.com/SonarSource/sonar-java/pull/2853#discussion_r386302260", "createdAt": "2020-03-02T10:12:51Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/CollectionInappropriateCallsCheck.java", "diffHunk": "@@ -39,52 +40,93 @@\n import org.sonar.plugins.java.api.tree.Tree.Kind;\n \n @Rule(key = \"S2175\")\n-public class CollectionInappropriateCallsCheck extends AbstractMethodDetection {\n+public class CollectionInappropriateCallsCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final List<TypeChecker> TYPE_CHECKERS = new TypeCheckerBuilder()\n+    .on(\"java.util.Collection\")\n+      .method(\"remove\").argument(1).outOf(1).shouldMatchParametrizedType(1)\n+      .method(\"contains\").argument(1).outOf(1).shouldMatchParametrizedType(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbc18597ffa87f158a6fde02eaf254c8f180c36f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQ3MjEyNA==", "bodyText": "\ud83d\ude31 I forgot the first case of the ticket! Thanks, it's fixed.", "url": "https://github.com/SonarSource/sonar-java/pull/2853#discussion_r386472124", "createdAt": "2020-03-02T15:44:42Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/main/java/org/sonar/java/checks/CollectionInappropriateCallsCheck.java", "diffHunk": "@@ -39,52 +40,93 @@\n import org.sonar.plugins.java.api.tree.Tree.Kind;\n \n @Rule(key = \"S2175\")\n-public class CollectionInappropriateCallsCheck extends AbstractMethodDetection {\n+public class CollectionInappropriateCallsCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final List<TypeChecker> TYPE_CHECKERS = new TypeCheckerBuilder()\n+    .on(\"java.util.Collection\")\n+      .method(\"remove\").argument(1).outOf(1).shouldMatchParametrizedType(1)\n+      .method(\"contains\").argument(1).outOf(1).shouldMatchParametrizedType(1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMwMjI2MA=="}, "originalCommit": {"oid": "bbc18597ffa87f158a6fde02eaf254c8f180c36f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzAzODIwOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/CollectionInappropriateCallsCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDozNjowMlrOFwavqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDozNjowMlrOFwavqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxNDE1NQ==", "bodyText": "This builder is not building a single TypeChecker, but a List<TypeChecker>. You could rename it to TypeCheckerListBuilder.", "url": "https://github.com/SonarSource/sonar-java/pull/2853#discussion_r386314155", "createdAt": "2020-03-02T10:36:02Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/CollectionInappropriateCallsCheck.java", "diffHunk": "@@ -130,4 +171,65 @@ private static boolean autoboxing(Type argumentType, Type collectionParameterTyp\n       && JUtils.isPrimitiveWrapper(collectionParameterType)\n       && isSubtypeOf(JUtils.primitiveWrapperType(argumentType), collectionParameterType);\n   }\n+\n+  private static class TypeChecker {\n+    private final String methodOwnerType;\n+    private final MethodMatcher methodMatcher;\n+    private final int argumentIndex;\n+    private final int parametrizedTypeIndex;\n+\n+    private TypeChecker(String methodOwnerType, MethodMatcher methodMatcher, int argumentIndex, int parametrizedTypeIndex) {\n+      this.methodOwnerType = methodOwnerType;\n+      this.methodMatcher = methodMatcher;\n+      this.argumentIndex = argumentIndex;\n+      this.parametrizedTypeIndex = parametrizedTypeIndex;\n+    }\n+  }\n+\n+  private static class TypeCheckerBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbc18597ffa87f158a6fde02eaf254c8f180c36f"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzA1MDcyOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/CollectionInappropriateCallsCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDo0MDoxMlrOFwa3PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMDo0MDoxMlrOFwa3PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMxNjA5Mg==", "bodyText": "It is implicit that shouldMatchParametrizedType is doing so much work, you could add an additional method add(), performing this additional work.\nOr maybe find a better name for it?\nIn any case, it should be clear at which point we build a TypeChecker and add it to the list.", "url": "https://github.com/SonarSource/sonar-java/pull/2853#discussion_r386316092", "createdAt": "2020-03-02T10:40:12Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/CollectionInappropriateCallsCheck.java", "diffHunk": "@@ -130,4 +171,65 @@ private static boolean autoboxing(Type argumentType, Type collectionParameterTyp\n       && JUtils.isPrimitiveWrapper(collectionParameterType)\n       && isSubtypeOf(JUtils.primitiveWrapperType(argumentType), collectionParameterType);\n   }\n+\n+  private static class TypeChecker {\n+    private final String methodOwnerType;\n+    private final MethodMatcher methodMatcher;\n+    private final int argumentIndex;\n+    private final int parametrizedTypeIndex;\n+\n+    private TypeChecker(String methodOwnerType, MethodMatcher methodMatcher, int argumentIndex, int parametrizedTypeIndex) {\n+      this.methodOwnerType = methodOwnerType;\n+      this.methodMatcher = methodMatcher;\n+      this.argumentIndex = argumentIndex;\n+      this.parametrizedTypeIndex = parametrizedTypeIndex;\n+    }\n+  }\n+\n+  private static class TypeCheckerBuilder {\n+\n+    private final List<TypeChecker> typeCheckers = new ArrayList<>();\n+\n+    private String methodOwnerType;\n+    private String methodName;\n+    private int argumentPosition;\n+    private int argumentCount;\n+\n+    private TypeCheckerBuilder on(String methodOwnerType) {\n+      this.methodOwnerType = methodOwnerType;\n+      return this;\n+    }\n+\n+    private TypeCheckerBuilder method(String methodName) {\n+      this.methodName = methodName;\n+      return this;\n+    }\n+\n+    private TypeCheckerBuilder argument(int argumentPosition) {\n+      this.argumentPosition = argumentPosition;\n+      return this;\n+    }\n+\n+    private TypeCheckerBuilder outOf(int argumentCount) {\n+      this.argumentCount = argumentCount;\n+      return this;\n+    }\n+\n+    private TypeCheckerBuilder shouldMatchParametrizedType(int parametrizedTypePosition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbc18597ffa87f158a6fde02eaf254c8f180c36f"}, "originalPosition": 222}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4066, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}