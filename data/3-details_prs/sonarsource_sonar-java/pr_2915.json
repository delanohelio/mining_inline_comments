{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NDAzOTA2", "number": 2915, "title": "SONARJAVA-3365 Improved rule S1607 description, message and title. ", "bodyText": "Added more explicit explanations about the assumeX methods.", "createdAt": "2020-04-22T16:35:12Z", "url": "https://github.com/SonarSource/sonar-java/pull/2915", "merged": true, "mergeCommit": {"oid": "ca82363ad5aad26f9cb8738d0c1cd02fa1029d68"}, "closed": true, "closedAt": "2020-04-24T13:31:04Z", "author": {"login": "johann-beleites-sonarsource"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaKVEzgH2gAyNDA3NDAzOTA2OmI3NGY2YWZkZTI5YmJjYWI0OTgxNTAyMTgzMDdmYWRlN2ZiMDMwYzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaxgI9AFqTM5OTk0NTc4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b74f6afde29bbcab498150218307fade7fb030c0", "author": {"user": null}, "url": "https://github.com/SonarSource/sonar-java/commit/b74f6afde29bbcab498150218307fade7fb030c0", "committedDate": "2020-04-22T15:50:11Z", "message": "SONARJAVA-3365 Improved rule S1607 description, message and title. Added more explicit explanations about the assumeX methods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a9bcfa3ac0e03801fe3bed63a7920ae1b17e047", "author": {"user": null}, "url": "https://github.com/SonarSource/sonar-java/commit/9a9bcfa3ac0e03801fe3bed63a7920ae1b17e047", "committedDate": "2020-04-22T16:03:33Z", "message": "Fixed code style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4ODcxNzY5", "url": "https://github.com/SonarSource/sonar-java/pull/2915#pullrequestreview-398871769", "createdAt": "2020-04-23T08:26:07Z", "commit": {"oid": "9a9bcfa3ac0e03801fe3bed63a7920ae1b17e047"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwODoyNjowOFrOGKdGhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMDowNDozMlrOGKhU8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYxNTc1MA==", "bodyText": "Usually, we try to use comments only when the code is not explicit enough, or when something unusual happens and you can't name/organize it in a clear way.\nFor example, the one at line 65 makes sense to me, one can wonder why we are reporting assume, since it is an unusual way to skip tests.\nThis one seems superfluous to me though, the next line sounds clear enough.", "url": "https://github.com/SonarSource/sonar-java/pull/2915#discussion_r413615750", "createdAt": "2020-04-23T08:26:08Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/IgnoredTestsCheck.java", "diffHunk": "@@ -53,24 +53,35 @@ public void visitNode(Tree tree) {\n     }\n     MethodTree methodTree = (MethodTree) tree;\n     SymbolMetadata symbolMetadata = methodTree.symbol().metadata();\n-    if (isSilentlyIgnored(symbolMetadata, \"org.junit.Ignore\") || isSilentlyIgnored(symbolMetadata, \"org.junit.jupiter.api.Disabled\")) {\n-      reportIssue(methodTree.simpleName(), \"Fix or remove this skipped unit test\");\n+\n+    // check for @Ignore or @Disabled annotations\n+    boolean hasIgnoreAnnotation = isSilentlyIgnored(symbolMetadata, \"org.junit.Ignore\");\n+    boolean hasDisabledAnnotation = isSilentlyIgnored(symbolMetadata, \"org.junit.jupiter.api.Disabled\");\n+    if (hasIgnoreAnnotation || hasDisabledAnnotation) {\n+      reportIssue(methodTree.simpleName(), String.format(\"Either add an explanation about why this test is skipped or remove the \" +\n+        \"\\\"@%s\\\" annotation.\", hasIgnoreAnnotation ? \"Ignore\" : \"Disabled\"));\n     }\n+\n+    // check for \"assumeFalse(true)\" and \"assumeTrue(false)\"-calls, which may also result in permanent skipping of the given test\n     BlockTree block = methodTree.block();\n-    if(block != null) {\n+    if (block != null) {\n       block.body().stream()\n         .filter(s -> s.is(Tree.Kind.EXPRESSION_STATEMENT))\n         .map(s -> ((ExpressionStatementTree) s).expression())\n         .filter(s -> s.is(Tree.Kind.METHOD_INVOCATION))\n         .map(MethodInvocationTree.class::cast)\n         .filter(ASSUME_METHODS::matches)\n         .filter(IgnoredTestsCheck::hasConstantOppositeArg)\n-        .forEach(mit -> reportIssue(mit.methodSelect(), \"Fix or remove this skipped unit test\"));\n+        .forEach(mit -> reportIssue(mit, \"Either remove this assumption or use an @Ignore or @Disabled annotation in combination with \" +\n+          \"an explanation about why this test is skipped.\"));\n     }\n   }\n \n   private static boolean isSilentlyIgnored(SymbolMetadata symbolMetadata, String annotation) {\n     List<SymbolMetadata.AnnotationValue> annotationValues = symbolMetadata.valuesForAnnotation(annotation);\n+\n+    // check that an annotation of the given type is present and whether that annotation has any values that are passed to it (i.e. an\n+    // explanation for why the test is ignored)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9bcfa3ac0e03801fe3bed63a7920ae1b17e047"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzY4NDk3Nw==", "bodyText": "As a general observation, always think twice about what tree is reported, it will define what is highlighted in the different products, if the tree is too big, it will result in something ugly.\nThis is especially true for method invocation: arguments can be unusually long, a huge lambda for example!\nIn this case, it will always be true or false, it can't go wrong... Can it?\nFirst, it can be more than just literals, if you look at line 78, .asConstant(Boolean.class); also checks if the tree is a reference to a constant. So this code:\nprivate static final boolean ignoreTest = false;\n// ...\nassumeTrue(ignoreTest);\nwill also report an issue.\nThen, what if someone is using strange formatting, fully qualified name...\nPutting all together, you can end up with something like that:\norg.junit.Assume.assumeTrue(\n// We use assumeTrue to ignore test because ...\nMyLongTestHelperClass.IGNORE_TEST_WITH_ASSUME_TRUE\n);\nwith everything highlighted!\nI agree that this is really unlikely to happen, but it illustrates well what can go wrong!\nI believe reporting on the method name is enough here.\nBy the way, you can use ExpressionUtils::methodName for this purpose.", "url": "https://github.com/SonarSource/sonar-java/pull/2915#discussion_r413684977", "createdAt": "2020-04-23T10:04:32Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/IgnoredTestsCheck.java", "diffHunk": "@@ -53,24 +53,35 @@ public void visitNode(Tree tree) {\n     }\n     MethodTree methodTree = (MethodTree) tree;\n     SymbolMetadata symbolMetadata = methodTree.symbol().metadata();\n-    if (isSilentlyIgnored(symbolMetadata, \"org.junit.Ignore\") || isSilentlyIgnored(symbolMetadata, \"org.junit.jupiter.api.Disabled\")) {\n-      reportIssue(methodTree.simpleName(), \"Fix or remove this skipped unit test\");\n+\n+    // check for @Ignore or @Disabled annotations\n+    boolean hasIgnoreAnnotation = isSilentlyIgnored(symbolMetadata, \"org.junit.Ignore\");\n+    boolean hasDisabledAnnotation = isSilentlyIgnored(symbolMetadata, \"org.junit.jupiter.api.Disabled\");\n+    if (hasIgnoreAnnotation || hasDisabledAnnotation) {\n+      reportIssue(methodTree.simpleName(), String.format(\"Either add an explanation about why this test is skipped or remove the \" +\n+        \"\\\"@%s\\\" annotation.\", hasIgnoreAnnotation ? \"Ignore\" : \"Disabled\"));\n     }\n+\n+    // check for \"assumeFalse(true)\" and \"assumeTrue(false)\"-calls, which may also result in permanent skipping of the given test\n     BlockTree block = methodTree.block();\n-    if(block != null) {\n+    if (block != null) {\n       block.body().stream()\n         .filter(s -> s.is(Tree.Kind.EXPRESSION_STATEMENT))\n         .map(s -> ((ExpressionStatementTree) s).expression())\n         .filter(s -> s.is(Tree.Kind.METHOD_INVOCATION))\n         .map(MethodInvocationTree.class::cast)\n         .filter(ASSUME_METHODS::matches)\n         .filter(IgnoredTestsCheck::hasConstantOppositeArg)\n-        .forEach(mit -> reportIssue(mit.methodSelect(), \"Fix or remove this skipped unit test\"));\n+        .forEach(mit -> reportIssue(mit, \"Either remove this assumption or use an @Ignore or @Disabled annotation in combination with \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a9bcfa3ac0e03801fe3bed63a7920ae1b17e047"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e2eb073823631d9e53e11a4a88edd9056ae83ca", "author": {"user": null}, "url": "https://github.com/SonarSource/sonar-java/commit/7e2eb073823631d9e53e11a4a88edd9056ae83ca", "committedDate": "2020-04-24T09:29:40Z", "message": "SONARJAVA-3365 Removed comment, reduced code to be highlighted for the IgnoredTestsCheck (assume logic part)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df5ea85c7cac05146d7eebb31100f9787d37d935", "author": {"user": null}, "url": "https://github.com/SonarSource/sonar-java/commit/df5ea85c7cac05146d7eebb31100f9787d37d935", "committedDate": "2020-04-24T09:48:28Z", "message": "Merge branch 'master' into SONARJAVA-3365"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a0c20a867d6a02290e69d9a755d51983339d48d", "author": {"user": null}, "url": "https://github.com/SonarSource/sonar-java/commit/5a0c20a867d6a02290e69d9a755d51983339d48d", "committedDate": "2020-04-24T10:50:47Z", "message": "SONARJAVA-3365 Added secondary location to rule 3365 in cases where an assume call is made with a constant boolean value."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a5058c34bcf2275e96681f5356ba207c2c793f8", "author": {"user": null}, "url": "https://github.com/SonarSource/sonar-java/commit/2a5058c34bcf2275e96681f5356ba207c2c793f8", "committedDate": "2020-04-24T10:54:26Z", "message": "SONARJAVA-3365 updated test to improved assume-logic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5OTQ1Nzg5", "url": "https://github.com/SonarSource/sonar-java/pull/2915#pullrequestreview-399945789", "createdAt": "2020-04-24T13:28:34Z", "commit": {"oid": "2a5058c34bcf2275e96681f5356ba207c2c793f8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1780, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}