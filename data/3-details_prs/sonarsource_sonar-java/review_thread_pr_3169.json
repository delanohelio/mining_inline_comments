{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxMjk0MTM4", "number": 3169, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzoyMToyNFrOEg_z2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODozNDoxNVrOEhkOeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDM1MzUzOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S5803_java.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzoyMToyNFrOHOFRLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMDoyMzozMFrOHOWmAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyODQzMQ==", "bodyText": "There is a suspicious extra space at the end of the title. You might want to check on Jira.", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484528431", "createdAt": "2020-09-07T17:21:24Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S5803_java.json", "diffHunk": "@@ -0,0 +1,12 @@\n+{\n+  \"title\": \"Class members annotated with \\\"@VisibleForTesting\\\" should not be accessed from production code \",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgxMjI5MA==", "bodyText": "In the ticket title in Jira there is a space at the end. Will fix on both sides", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484812290", "createdAt": "2020-09-08T10:23:30Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S5803_java.json", "diffHunk": "@@ -0,0 +1,12 @@\n+{\n+  \"title\": \"Class members annotated with \\\"@VisibleForTesting\\\" should not be accessed from production code \",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyODQzMQ=="}, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDM1NjQwOnYy", "diffSide": "RIGHT", "path": "java-checks/src/test/java/org/sonar/java/checks/VisibleForTestingUsageCheckTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzoyMzowOVrOHOFSsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzoyMzowOVrOHOFSsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyODgxOQ==", "bodyText": "Why not be even more precise and add the folder which will contain directly the classes we are searching for?", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484528819", "createdAt": "2020-09-07T17:23:09Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/test/java/org/sonar/java/checks/VisibleForTestingUsageCheckTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.io.File;\n+import java.util.List;\n+import org.junit.jupiter.api.Test;\n+import org.sonar.java.checks.verifier.JavaCheckVerifier;\n+import org.sonar.java.testing.FilesUtils;\n+\n+import static org.sonar.java.CheckTestUtils.testSourcesPath;\n+\n+class VisibleForTestingUsageCheckTest {\n+  @Test\n+  void test() {\n+    List<File> classPath = FilesUtils.getClassPath(FilesUtils.DEFAULT_TEST_JARS_DIRECTORY);\n+    classPath.add(new File(\"../java-checks-test-sources/target/classes\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDM1OTIyOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S5803_java.html", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzoyNTowM1rOHOFURQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzoyNTowM1rOHOFURQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyOTIyMQ==", "bodyText": "&nbsp; is suspicious here. Also, RSPEC mentions classes, while here we only have methods and fields. I guess you should re-generate the  metadada.", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484529221", "createdAt": "2020-09-07T17:25:03Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S5803_java.html", "diffHunk": "@@ -0,0 +1,30 @@\n+<p><code>@VisibleForTesting</code>&nbsp;can be used to mark methods and fields whose visibility restrictions have been relaxed more than necessary for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDM2MDc0OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S5803_java.html", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzoyNTo1NFrOHOFVBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzoyNTo1NFrOHOFVBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyOTQxMw==", "bodyText": "missing g at the end :)\nAlso, I fee that it would be nice to mark the fully qualified names with <code> blocks", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484529413", "createdAt": "2020-09-07T17:25:54Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S5803_java.html", "diffHunk": "@@ -0,0 +1,30 @@\n+<p><code>@VisibleForTesting</code>&nbsp;can be used to mark methods and fields whose visibility restrictions have been relaxed more than necessary for\n+the API to allow for easier unit testing.</p>\n+<p>Access to such methods and fields only possible thanks to this relaxed visibility is fine for test code, but it should be avoided in production\n+code.</p>\n+<p>Supported framework:</p>\n+<p> * Guava (com.google.common.annotations.VisibleForTestin)</p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDM4MDk1OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzo0MDowNVrOHOFf6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzo0MDowNVrOHOFf6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMjIwMg==", "bodyText": "Here is the only missing condition in term of coverage (owner == null probably).\nI feel that we might be missing the point. For me, the only way to have a missing owner is to have a symbol not correctly resolved, and, therefore, marked as being unknown (package symbols can not occur here). I would consequently only test like this:\nreturn !symbol.isUnknown() && (symbol.isTypeSymbol() || symbol.owner().isTypeSymbol());\nNow, in order to cover it, simply create a test file under java-checks-test-sources/src/main/files/non-compiling/checks, and then add a test such as:\n  @Test\n  void test_non_compiling() {\n    JavaCheckVerifier.newVerifier()\n      .onFile(nonCompilingTestSourcesPath(\"checks/VisibleForTestingUsageCheck.java\"))\n      .withCheck(new VisibleForTestingUsageCheck())\n      .verifyIssues();\n  }\nAnd as a test code something like:\nclass VisibleForTestingUsageCheck {\n  @com.google.common.annotations.VisibleForTesting \n  void bar() { }\n\n  void foo() {\n    unknown(); // Compliant\n  }\n}\n\nclass VisibleForTestingUsageCheck2 {\n  void qix() {\n    new VisibleForTestingUsageCheck()\n      .bar(); // Noncompliant\n  }\n}", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484532202", "createdAt": "2020-09-07T17:40:05Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5803\")\n+public class VisibleForTestingUsageCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final List<String> ANNOTATIONS = Arrays.asList(\n+    \"com.google.common.annotations.VisibleForTesting\",\n+    \"org.assertj.core.util.VisibleForTesting\",\n+    \"androidx.annotation.VisibleForTesting\",\n+    \"org.apache.flink.annotation.VisibleForTesting\"\n+  );\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.IDENTIFIER);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    IdentifierTree identifier = (IdentifierTree) tree;\n+    Symbol symbol = identifier.symbol();\n+    SymbolMetadata metadata = symbol.metadata();\n+    if (metadata.annotations().isEmpty()) {\n+      return;\n+    }\n+\n+    boolean inTheSameFile = symbol.declaration() != null;\n+    if (isFieldMethodOrClass(symbol) && !inTheSameFile\n+      && (ANNOTATIONS.stream().anyMatch(metadata::isAnnotatedWith))) {\n+      reportIssue(identifier, String.format(\"Remove this usage of \\\"%s\\\", it is annotated with @VisibleForTesting and should not be accessed from production code.\",\n+        identifier.name()));\n+    }\n+  }\n+\n+  private static boolean isFieldMethodOrClass(Symbol symbol) {\n+    Symbol owner = symbol.owner();\n+    return ((owner != null) && owner.isTypeSymbol()) || symbol.isTypeSymbol();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDM4MjAxOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzo0MDo0M1rOHOFgeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzo0MDo0M1rOHOFgeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMjM0NQ==", "bodyText": "you can probably already return here if the symbol is unknown.", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484532345", "createdAt": "2020-09-07T17:40:43Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5803\")\n+public class VisibleForTestingUsageCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final List<String> ANNOTATIONS = Arrays.asList(\n+    \"com.google.common.annotations.VisibleForTesting\",\n+    \"org.assertj.core.util.VisibleForTesting\",\n+    \"androidx.annotation.VisibleForTesting\",\n+    \"org.apache.flink.annotation.VisibleForTesting\"\n+  );\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.IDENTIFIER);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    IdentifierTree identifier = (IdentifierTree) tree;\n+    Symbol symbol = identifier.symbol();\n+    SymbolMetadata metadata = symbol.metadata();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDM4NjY4OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzo0MzozMlrOHOFi6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzoyNjo1N1rOHOQJcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMjk2OQ==", "bodyText": "in fact, isFieldMethodOrClass() is probably simply !symbol.isUnknown() && !symbol.isPackageSymbol().\nBy construction, it will then only be a method, a variable or a type... As we don't have other kinds of symbol.", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484532969", "createdAt": "2020-09-07T17:43:32Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5803\")\n+public class VisibleForTestingUsageCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final List<String> ANNOTATIONS = Arrays.asList(\n+    \"com.google.common.annotations.VisibleForTesting\",\n+    \"org.assertj.core.util.VisibleForTesting\",\n+    \"androidx.annotation.VisibleForTesting\",\n+    \"org.apache.flink.annotation.VisibleForTesting\"\n+  );\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.IDENTIFIER);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    IdentifierTree identifier = (IdentifierTree) tree;\n+    Symbol symbol = identifier.symbol();\n+    SymbolMetadata metadata = symbol.metadata();\n+    if (metadata.annotations().isEmpty()) {\n+      return;\n+    }\n+\n+    boolean inTheSameFile = symbol.declaration() != null;\n+    if (isFieldMethodOrClass(symbol) && !inTheSameFile", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcwNjY3NA==", "bodyText": "@m-g-sonar for methods and classes it's easy, we can test them with symbol.isMethodSymbol() for symbol.isTypeSymbol().\nBut for fields, symbol.isVariableSymbol() is not enough. We want to exclude local variables, method parameters, and lambda parameters. I think the owner of a local variable is the method declaration. What is the best way to test if a symbol is a class field?", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484706674", "createdAt": "2020-09-08T07:26:57Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5803\")\n+public class VisibleForTestingUsageCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final List<String> ANNOTATIONS = Arrays.asList(\n+    \"com.google.common.annotations.VisibleForTesting\",\n+    \"org.assertj.core.util.VisibleForTesting\",\n+    \"androidx.annotation.VisibleForTesting\",\n+    \"org.apache.flink.annotation.VisibleForTesting\"\n+  );\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.IDENTIFIER);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    IdentifierTree identifier = (IdentifierTree) tree;\n+    Symbol symbol = identifier.symbol();\n+    SymbolMetadata metadata = symbol.metadata();\n+    if (metadata.annotations().isEmpty()) {\n+      return;\n+    }\n+\n+    boolean inTheSameFile = symbol.declaration() != null;\n+    if (isFieldMethodOrClass(symbol) && !inTheSameFile", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMjk2OQ=="}, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDM5MDcwOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzo0NjowN1rOHOFlAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzo0NjowN1rOHOFlAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzMzUwNA==", "bodyText": "I think I would move this below, after we are sure it's a valid symbol to be considered", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484533504", "createdAt": "2020-09-07T17:46:07Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/VisibleForTestingUsageCheck.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.SymbolMetadata;\n+import org.sonar.plugins.java.api.tree.IdentifierTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5803\")\n+public class VisibleForTestingUsageCheck extends IssuableSubscriptionVisitor {\n+\n+  private static final List<String> ANNOTATIONS = Arrays.asList(\n+    \"com.google.common.annotations.VisibleForTesting\",\n+    \"org.assertj.core.util.VisibleForTesting\",\n+    \"androidx.annotation.VisibleForTesting\",\n+    \"org.apache.flink.annotation.VisibleForTesting\"\n+  );\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.IDENTIFIER);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    IdentifierTree identifier = (IdentifierTree) tree;\n+    Symbol symbol = identifier.symbol();\n+    SymbolMetadata metadata = symbol.metadata();\n+    if (metadata.annotations().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDM5NjIwOnYy", "diffSide": "RIGHT", "path": "its/ruling/src/test/resources/guava/java-S5803.json", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzo0OTo0N1rOHOFn3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODozMDozOFrOHO8f9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzNDIzNg==", "bodyText": "This one looks like a FP to me (while a bit borderline), we are inside a class itself annotated with @VisibleForTesting, so it feels to me that it's OK to do call a something which is also annotated with VisibleForTesting. What's your opinion of it?", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484534236", "createdAt": "2020-09-07T17:49:47Z", "author": {"login": "m-g-sonar"}, "path": "its/ruling/src/test/resources/guava/java-S5803.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{\n+'com.google.guava:guava:src/com/google/common/io/Closer.java':[\n+252,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg0OTg3MA==", "bodyText": "I think we should exclude those members, is the owner is annotated @VisibleForTesting too", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r484849870", "createdAt": "2020-09-08T11:38:22Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "its/ruling/src/test/resources/guava/java-S5803.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{\n+'com.google.guava:guava:src/com/google/common/io/Closer.java':[\n+252,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzNDIzNg=="}, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTM1NTE2Mw==", "bodyText": "I thought about it and I think we should report this issue. The 'Logger', which is used inside 'Closer' and 'Closer' are in different files, so if 'Logger' is marked as private, it is not visible in 'Closer'", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r485355163", "createdAt": "2020-09-09T05:55:04Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "its/ruling/src/test/resources/guava/java-S5803.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{\n+'com.google.guava:guava:src/com/google/common/io/Closer.java':[\n+252,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzNDIzNg=="}, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQzMzMzMg==", "bodyText": "Fine by me!", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r485433332", "createdAt": "2020-09-09T08:30:38Z", "author": {"login": "m-g-sonar"}, "path": "its/ruling/src/test/resources/guava/java-S5803.json", "diffHunk": "@@ -0,0 +1,10 @@\n+{\n+'com.google.guava:guava:src/com/google/common/io/Closer.java':[\n+252,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUzNDIzNg=="}, "originalCommit": {"oid": "2624d79bad1c750ef365cbdd446f4af071acd1de"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjMxOTkyOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S5803_java.html", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwODozNDoxNVrOHO8oeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOToyOTozN1rOHO-6_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQzNTUxNA==", "bodyText": "Wops, it seems to me that this HTML file is completely broken. did you double-check how it looks in SonarQube?", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r485435514", "createdAt": "2020-09-09T08:34:15Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S5803_java.html", "diffHunk": "@@ -0,0 +1,43 @@\n+<p>@VisibleForTesting can be used to mark methods, fields and classes whose visibility restrictions have been relaxed more than necessary for the API\n+to allow for easier unit testing.</p>\n+<p>Access to such methods, fields and classes only possible thanks to this relaxed visibility is fine for test code, but it should be avoided in\n+production code.</p>\n+<p>Supported framework:</p>\n+<p> * Guava</p>\n+<pre>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f4ba2b3bc301ac8f80571a94bbb4cf668e41d6"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ1MTgzMw==", "bodyText": "looking into it. Looks like need to update the Jira and regenerate", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r485451833", "createdAt": "2020-09-09T08:57:52Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S5803_java.html", "diffHunk": "@@ -0,0 +1,43 @@\n+<p>@VisibleForTesting can be used to mark methods, fields and classes whose visibility restrictions have been relaxed more than necessary for the API\n+to allow for easier unit testing.</p>\n+<p>Access to such methods, fields and classes only possible thanks to this relaxed visibility is fine for test code, but it should be avoided in\n+production code.</p>\n+<p>Supported framework:</p>\n+<p> * Guava</p>\n+<pre>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQzNTUxNA=="}, "originalCommit": {"oid": "56f4ba2b3bc301ac8f80571a94bbb4cf668e41d6"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ3MzAyMQ==", "bodyText": "Updated", "url": "https://github.com/SonarSource/sonar-java/pull/3169#discussion_r485473021", "createdAt": "2020-09-09T09:29:37Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S5803_java.html", "diffHunk": "@@ -0,0 +1,43 @@\n+<p>@VisibleForTesting can be used to mark methods, fields and classes whose visibility restrictions have been relaxed more than necessary for the API\n+to allow for easier unit testing.</p>\n+<p>Access to such methods, fields and classes only possible thanks to this relaxed visibility is fine for test code, but it should be avoided in\n+production code.</p>\n+<p>Supported framework:</p>\n+<p> * Guava</p>\n+<pre>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQzNTUxNA=="}, "originalCommit": {"oid": "56f4ba2b3bc301ac8f80571a94bbb4cf668e41d6"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3876, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}