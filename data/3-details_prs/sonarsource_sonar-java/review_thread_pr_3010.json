{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNzM2MDA1", "number": 3010, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNTozNjowMFrOEFGi7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjoxNToyNVrOEFHZsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzg1NTgyOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertJChainSimplificationIndex.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNTozNjowMFrOGjIgFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNTozNjowMFrOGjIgFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5MjYyOA==", "bodyText": "The name is misleading, it does not target only Strings.", "url": "https://github.com/SonarSource/sonar-java/pull/3010#discussion_r439492628", "createdAt": "2020-06-12T15:36:00Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/AssertJChainSimplificationIndex.java", "diffHunk": "@@ -260,8 +294,12 @@ private AssertJChainSimplificationIndex() {\n       .addWithoutParametersMatcher().build();\n     public static final MethodMatchers INDEX_OF_STRING = MethodMatchers.create().ofTypes(JAVA_LANG_STRING)\n       .names(\"indexOf\").addParametersMatcher(JAVA_LANG_STRING).build();\n-    public static final MethodMatchers IS_EMPTY = MethodMatchers.create().ofTypes(JAVA_LANG_STRING, JAVA_UTIL_COLLECTION, JAVA_UTIL_MAP)\n-      .names(AssertJChainSimplificationIndex.IS_EMPTY).addWithoutParametersMatcher().build();\n+    public static final MethodMatchers IS_EMPTY_STRING = MethodMatchers.create().ofTypes(JAVA_LANG_STRING, JAVA_UTIL_COLLECTION, JAVA_UTIL_MAP)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "222f37cdc363cd2a5afe912f6277ebfb7c3d364e"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzk5NjAwOnYy", "diffSide": "RIGHT", "path": "java-checks-test-sources/src/main/java/checks/AssertJChainSimplificationCheckTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjoxNToyNVrOGjJ4Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwOToyMzoxM1rOGjqJMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxNTE3NA==", "bodyText": "Do we really want to propose isNotEmpty() here?\nSame for the others, I feel that we should stick to one variant.", "url": "https://github.com/SonarSource/sonar-java/pull/3010#discussion_r439515174", "createdAt": "2020-06-12T16:15:25Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks-test-sources/src/main/java/checks/AssertJChainSimplificationCheckTest.java", "diffHunk": "@@ -305,6 +310,17 @@ void pathRelatedAssertionChains() {\n     assertThat(getPath().isAbsolute()).isFalse(); // Noncompliant\t{{Use assertThat(actual).isRelative() instead}}\n   }\n \n+  void optionalRelatedAssertionChains() {\n+    assertThat(Optional.empty().isPresent()).isTrue(); // Noncompliant {{Use assertThat(actual).isPresent() or assertThat(actual).isNotEmpty() instead}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "222f37cdc363cd2a5afe912f6277ebfb7c3d364e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUyNTE2NQ==", "bodyText": "I considered that as well but then went with both as I felt like different phrasings might make sense in different contexts. Maybe you've established to always use isPresent() and isEmpty(), then suggesting only isNotPresent() seems a little unfitting. But perhaps someone else usually uses isPresent() and isNotPresent() throughout their code, then suggesting isEmpty() would seem off. That's why I went for including both, especially as the docs don't seem to suggest one more than the other. WDYT?", "url": "https://github.com/SonarSource/sonar-java/pull/3010#discussion_r439525165", "createdAt": "2020-06-12T16:33:54Z", "author": {"login": "johann-beleites-sonarsource"}, "path": "java-checks-test-sources/src/main/java/checks/AssertJChainSimplificationCheckTest.java", "diffHunk": "@@ -305,6 +310,17 @@ void pathRelatedAssertionChains() {\n     assertThat(getPath().isAbsolute()).isFalse(); // Noncompliant\t{{Use assertThat(actual).isRelative() instead}}\n   }\n \n+  void optionalRelatedAssertionChains() {\n+    assertThat(Optional.empty().isPresent()).isTrue(); // Noncompliant {{Use assertThat(actual).isPresent() or assertThat(actual).isNotEmpty() instead}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxNTE3NA=="}, "originalCommit": {"oid": "222f37cdc363cd2a5afe912f6277ebfb7c3d364e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAwODM3MA==", "bodyText": "I see, it's true that it works fine for all other cases, there is just this one that sounds strange when you look at it separately, but as a whole, it makes sense to propose both.", "url": "https://github.com/SonarSource/sonar-java/pull/3010#discussion_r440008370", "createdAt": "2020-06-15T08:23:16Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks-test-sources/src/main/java/checks/AssertJChainSimplificationCheckTest.java", "diffHunk": "@@ -305,6 +310,17 @@ void pathRelatedAssertionChains() {\n     assertThat(getPath().isAbsolute()).isFalse(); // Noncompliant\t{{Use assertThat(actual).isRelative() instead}}\n   }\n \n+  void optionalRelatedAssertionChains() {\n+    assertThat(Optional.empty().isPresent()).isTrue(); // Noncompliant {{Use assertThat(actual).isPresent() or assertThat(actual).isNotEmpty() instead}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxNTE3NA=="}, "originalCommit": {"oid": "222f37cdc363cd2a5afe912f6277ebfb7c3d364e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA0MzgyNQ==", "bodyText": "I see, I agree that isNotEmpty() seems like the least intuitive method of those. I have one more thought that came to mind: what do you think of the fact that for collections AssertJ offers isEmpty() and isNotEmpty(). So there might be a natural tendency to those methods for some users over is(Not)Present(). Should that be something to consider here?", "url": "https://github.com/SonarSource/sonar-java/pull/3010#discussion_r440043825", "createdAt": "2020-06-15T09:23:13Z", "author": {"login": "johann-beleites-sonarsource"}, "path": "java-checks-test-sources/src/main/java/checks/AssertJChainSimplificationCheckTest.java", "diffHunk": "@@ -305,6 +310,17 @@ void pathRelatedAssertionChains() {\n     assertThat(getPath().isAbsolute()).isFalse(); // Noncompliant\t{{Use assertThat(actual).isRelative() instead}}\n   }\n \n+  void optionalRelatedAssertionChains() {\n+    assertThat(Optional.empty().isPresent()).isTrue(); // Noncompliant {{Use assertThat(actual).isPresent() or assertThat(actual).isNotEmpty() instead}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUxNTE3NA=="}, "originalCommit": {"oid": "222f37cdc363cd2a5afe912f6277ebfb7c3d364e"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4039, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}