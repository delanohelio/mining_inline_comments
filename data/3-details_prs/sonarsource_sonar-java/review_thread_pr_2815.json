{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0OTQ3ODMw", "number": 2815, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTozMToyM1rODgUiiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDoyMjoxMVrODh1LiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjE3NTQ3OnYy", "diffSide": "RIGHT", "path": "its/ruling/src/test/resources/guava/java-S3457.json", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTozMToyM1rOFqdlEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDozNjozOFrOHqVx3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA2OTEzOQ==", "bodyText": "All these 9 issues are FPs. The issue message says: Format specifiers should be used instead of string concatenation., but the method which is called is: java.util.logging.Logger.log(Level, String, Throwable).\nConsequently, you HAVE to use string concatenation", "url": "https://github.com/SonarSource/sonar-java/pull/2815#discussion_r380069139", "createdAt": "2020-02-17T09:31:23Z", "author": {"login": "m-g-sonar"}, "path": "its/ruling/src/test/resources/guava/java-S3457.json", "diffHunk": "@@ -0,0 +1,25 @@\n+{\n+'com.google.guava:guava:src/com/google/common/io/Closer.java':[", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4e9d9730653337b57236a5c2424c4b538d7eb4"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5MjExMQ==", "bodyText": "\ud83d\ude2b My understanding of java.util.logging.Logger was wrong.\nI thought that:\nLOG.log(Level.WARNING, \"Message: \" + param, ex);\nIs equivalent to:\nLOG.log(Level.WARNING, \"Message: {0}\", new Object[] {param, ex});\nBut, I tested it and it's not like slf4j. The last parameter of log(Level level, String msg, Object params[]) is not handled like thrown in log(Level level, String msg, Throwable thrown).\nIn conclusion, I also think these are FPs.", "url": "https://github.com/SonarSource/sonar-java/pull/2815#discussion_r380292111", "createdAt": "2020-02-17T17:01:53Z", "author": {"login": "alban-auzeill"}, "path": "its/ruling/src/test/resources/guava/java-S3457.json", "diffHunk": "@@ -0,0 +1,25 @@\n+{\n+'com.google.guava:guava:src/com/google/common/io/Closer.java':[", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA2OTEzOQ=="}, "originalCommit": {"oid": "0b4e9d9730653337b57236a5c2424c4b538d7eb4"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjEyOTAwMw==", "bodyText": "So it was 9 FPs, because of the wrong message: Format specifiers should be used instead of string concatenation\nFor those 9 issues, I changed the message to: Lambda should be used to differ string concatenation.\nFor example, in case of src/com/google/common/io/Closer.java:252:\n      Closeables.logger.log(Level.WARNING,\n          \"Suppressing exception thrown when closing \" + closeable, suppressed);\n\nCan be changed into:\n      Closeables.logger.log(Level.WARNING,\n          suppressed, () -> \"Suppressing exception thrown when closing \" + closeable);", "url": "https://github.com/SonarSource/sonar-java/pull/2815#discussion_r382129003", "createdAt": "2020-02-20T16:54:42Z", "author": {"login": "alban-auzeill"}, "path": "its/ruling/src/test/resources/guava/java-S3457.json", "diffHunk": "@@ -0,0 +1,25 @@\n+{\n+'com.google.guava:guava:src/com/google/common/io/Closer.java':[", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA2OTEzOQ=="}, "originalCommit": {"oid": "0b4e9d9730653337b57236a5c2424c4b538d7eb4"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDExNjI5Mg==", "bodyText": "I have a question about your new message, \"Lambda should be used to differ string concatenation.\"  It makes no sense as written.\n\"Differ\" means \"is different from,\" as in \"This thing differs from that thing because it is orange.\"\n\"Defer\" means delay or postpone, as in \"Let us defer that decision until next week.\"\nDo you mean \"Lambda should be used to postpone/delay string concatenation\"?", "url": "https://github.com/SonarSource/sonar-java/pull/2815#discussion_r510116292", "createdAt": "2020-10-22T12:22:53Z", "author": {"login": "FredWRobinson"}, "path": "its/ruling/src/test/resources/guava/java-S3457.json", "diffHunk": "@@ -0,0 +1,25 @@\n+{\n+'com.google.guava:guava:src/com/google/common/io/Closer.java':[", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA2OTEzOQ=="}, "originalCommit": {"oid": "0b4e9d9730653337b57236a5c2424c4b538d7eb4"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1OTA3MQ==", "bodyText": "Indeed @FredWRobinson, that's the second option which is correct. It's a typo. I created the following ticket to track the change: SONARJAVA-3587\nNote that we are not really following messages on closed pull requests. If you want to be sure to reach us, don't hesitate to use https://community.sonarsource.com/\nCheers,\nMichael", "url": "https://github.com/SonarSource/sonar-java/pull/2815#discussion_r514159071", "createdAt": "2020-10-29T10:36:38Z", "author": {"login": "m-g-sonar"}, "path": "its/ruling/src/test/resources/guava/java-S3457.json", "diffHunk": "@@ -0,0 +1,25 @@\n+{\n+'com.google.guava:guava:src/com/google/common/io/Closer.java':[", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA2OTEzOQ=="}, "originalCommit": {"oid": "0b4e9d9730653337b57236a5c2424c4b538d7eb4"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjE5MDE5OnYy", "diffSide": "RIGHT", "path": "java-checks/src/test/files/checks/PrintfMisuseCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTozNjowMFrOFqduBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTozNjowMFrOFqduBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA3MTQyOQ==", "bodyText": "to me the error message is wrong here. It should be something like Remove this argument formatter because it won't be consumed.", "url": "https://github.com/SonarSource/sonar-java/pull/2815#discussion_r380071429", "createdAt": "2020-02-17T09:36:00Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/test/files/checks/PrintfMisuseCheck.java", "diffHunk": "@@ -182,13 +185,18 @@ void foo(Calendar c){\n     slf4jLog.debug(\"message {} {}\", new Object[]{1, 2, 3}); // Noncompliant\n     slf4jLog.debug(\"message {} {} {}\", new Object[]{1, 2, 3}); // compliant\n     slf4jLog.debug(\"message \", new Exception());\n-    slf4jLog.debug(\"message {}\", new Exception());\n+    slf4jLog.debug(\"message {}\", new Exception()); // Noncompliant {{Missing argument for the first parameter.}}\n \n-    slf4jLog.error(\"message {}\");\n+    slf4jLog.error(\"message {}\"); // Noncompliant {{Missing argument for the first parameter.}}\n+    slf4jLog.error(\"message {}\", new Exception()); // Noncompliant {{Missing argument for the first parameter.}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4e9d9730653337b57236a5c2424c4b538d7eb4"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MjE5MzMzOnYy", "diffSide": "RIGHT", "path": "java-checks/src/test/files/checks/PrintfMisuseCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTozNzowMFrOFqdwBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTozNzowMFrOFqdwBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA3MTk0Mw==", "bodyText": "this is a FP to me. You don't have the choice to use concatenation if you want to use the \"Throwable\" method.", "url": "https://github.com/SonarSource/sonar-java/pull/2815#discussion_r380071943", "createdAt": "2020-02-17T09:37:00Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/test/files/checks/PrintfMisuseCheck.java", "diffHunk": "@@ -224,6 +232,9 @@ void foo(Calendar c){\n     java.util.logging.Logger logger4 = getLog();\n     logger4.log(java.util.logging.Level.WARNING, \"som.foo.errorcode\", 404); // Noncompliant\n     this.loggerField.log(java.util.logging.Level.WARNING, \"som.foo.errorcode\", 404);\n+    String additionalMessage = \"...\";\n+    logger4.log(java.util.logging.Level.WARNING, \"message \" + additionalMessage, new Exception());  // Noncompliant {{Format specifiers should be used instead of string concatenation.}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4e9d9730653337b57236a5c2424c4b538d7eb4"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2ODAwOTA1OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/AbstractPrintfChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDoyMjoxMVrOFsyM7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMDoyMjoxMVrOFsyM7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUwNDE3NQ==", "bodyText": "useless parenthesis", "url": "https://github.com/SonarSource/sonar-java/pull/2815#discussion_r382504175", "createdAt": "2020-02-21T10:22:11Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/AbstractPrintfChecker.java", "diffHunk": "@@ -120,25 +133,29 @@ protected final void checkFormatting(MethodInvocationTree mit, boolean isMessage\n     }\n     if (formatTree.is(Tree.Kind.STRING_LITERAL)) {\n       String formatString = LiteralUtils.trimQuotes(((LiteralTree) formatTree).value());\n-      if (mit.symbol().owner().type().is(ORG_APACHE_LOGGING_LOG4J_LOGGER)) {\n-        // Log4J supports both approaches\n-        isMessageFormat = formatString.contains(\"{}\");\n+      if (isMessageFormat && isProbablyLog4jFormatterLogger(mit, formatString)) {\n+        isMessageFormat = false;\n       }\n       if (isMessageFormat) {\n         handleMessageFormat(mit, formatString, args);\n       } else {\n         handlePrintfFormat(mit, formatString, args);\n       }\n     } else {\n-      handleOtherFormatTree(mit, formatTree);\n+      handleOtherFormatTree(mit, formatTree, args);\n     }\n   }\n \n+  private static boolean isProbablyLog4jFormatterLogger(MethodInvocationTree mit, String formatString) {\n+    return mit.symbol().owner().type().is(ORG_APACHE_LOGGING_LOG4J_LOGGER) &&\n+          (!formatString.contains(\"{}\") && formatString.contains(\"%\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf17a39e70ed86a2e2faeb94edb31f2a6973ec8b"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4189, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}