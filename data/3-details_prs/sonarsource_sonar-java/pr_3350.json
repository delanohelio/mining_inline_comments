{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5Mzc0NzEx", "number": 3350, "title": "SONARJAVA-3620 FP in S2384 when unmodifiable collection is returned", "bodyText": "", "createdAt": "2020-12-14T11:22:16Z", "url": "https://github.com/SonarSource/sonar-java/pull/3350", "merged": true, "mergeCommit": {"oid": "3cd1c49d5250942930657b7605cbb8a4c0e295a3"}, "closed": true, "closedAt": "2020-12-15T12:59:00Z", "author": {"login": "quentin-jaquier-sonarsource"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmD62QgH2gAyNTM5Mzc0NzExOjljNTBkOTQwOWI1N2VjNGI4NTg5YmE3ZTNiYjllOTQ4ZDZlOGExNTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmYxt5gFqTU1MjM0MTA3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9c50d9409b57ec4b8589ba7e3bb9e948d6e8a155", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/9c50d9409b57ec4b8589ba7e3bb9e948d6e8a155", "committedDate": "2020-12-14T11:20:21Z", "message": "SONARJAVA-3620 FP in S2384 when unmodifiable collection is returned"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMjc4NzE0", "url": "https://github.com/SonarSource/sonar-java/pull/3350#pullrequestreview-551278714", "createdAt": "2020-12-14T11:26:53Z", "commit": {"oid": "9c50d9409b57ec4b8589ba7e3bb9e948d6e8a155"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMToyNjo1M1rOIFMFAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMToyNjo1M1rOIFMFAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMxMTY4MQ==", "bodyText": "// symbol is private, so declaration can only be null if assignment is done in static block\n\nI did not manage to reproduce a case where the declaration is null, but I still added a null check because I was not convinced by this comment.\nI think it makes sense to keep it for defensive programming.", "url": "https://github.com/SonarSource/sonar-java/pull/3350#discussion_r542311681", "createdAt": "2020-12-14T11:26:53Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/MutableMembersUsageCheck.java", "diffHunk": "@@ -149,18 +149,21 @@ private static boolean isThis(ExpressionTree expression) {\n     return expression.is(Tree.Kind.IDENTIFIER) && ((IdentifierTree) expression).name().equals(\"this\");\n   }\n \n-  private static boolean isImmutableFinalVariable(Symbol.VariableSymbol symbol) {\n-    if (symbol.isFinal()) {\n-      VariableTree declaration = symbol.declaration();\n-      // symbol is private, so declaration can only be null if assignment is done in static block", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c50d9409b57ec4b8589ba7e3bb9e948d6e8a155"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMzQxMDc4", "url": "https://github.com/SonarSource/sonar-java/pull/3350#pullrequestreview-552341078", "createdAt": "2020-12-15T11:08:22Z", "commit": {"oid": "9c50d9409b57ec4b8589ba7e3bb9e948d6e8a155"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTowODoyMlrOIGFd8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMTowODoyMlrOIGFd8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzI1MTk1NQ==", "bodyText": "Maybe Objects.requireNonNull will be a better option here, cause I can't imagine a situation when declaration is null for private fields. But null check is also fine for me", "url": "https://github.com/SonarSource/sonar-java/pull/3350#discussion_r543251955", "createdAt": "2020-12-15T11:08:22Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/MutableMembersUsageCheck.java", "diffHunk": "@@ -149,18 +149,21 @@ private static boolean isThis(ExpressionTree expression) {\n     return expression.is(Tree.Kind.IDENTIFIER) && ((IdentifierTree) expression).name().equals(\"this\");\n   }\n \n-  private static boolean isImmutableFinalVariable(Symbol.VariableSymbol symbol) {\n-    if (symbol.isFinal()) {\n-      VariableTree declaration = symbol.declaration();\n-      // symbol is private, so declaration can only be null if assignment is done in static block", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjMxMTY4MQ=="}, "originalCommit": {"oid": "9c50d9409b57ec4b8589ba7e3bb9e948d6e8a155"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1865, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}