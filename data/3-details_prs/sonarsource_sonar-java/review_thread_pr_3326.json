{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzNTU3NjMz", "number": 3326, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToyMzoyMFrOFCaH5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToyMzoyMFrOFCaH5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4MDY5NDc3OnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/model/VisitorsBridge.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToyMzoyMFrOIBi_-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMDo1MDowM1rOICOVig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ5MjkyMA==", "bodyText": "If I understand correctly, this code is inspired by the one from Guava, and is used to detect loops at the same time. Still, I believe it could use a few comments explaining the idea behind it.\nIn addition, we should cover this code somehow.", "url": "https://github.com/SonarSource/sonar-java/pull/3326#discussion_r538492920", "createdAt": "2020-12-08T15:23:20Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-frontend/src/main/java/org/sonar/java/model/VisitorsBridge.java", "diffHunk": "@@ -305,4 +304,21 @@ private final void forEach(Collection<SubscriptionVisitor> visitors, Consumer<Su\n       }\n     }\n   }\n+  private static Throwable getRootCause(Throwable throwable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b40f81983cff3537cbd6884b72167f148ee1dc2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTIwMjk1NA==", "bodyText": "Yes, the code is actually the same as in guava. It uses the standard algorithm to find a loop, which is having 2 pointers. one normal and other 2x times slower, increments on each second iteration. And if at some point 2 pointers are equal it means that we have a cycle here.", "url": "https://github.com/SonarSource/sonar-java/pull/3326#discussion_r539202954", "createdAt": "2020-12-09T10:50:03Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-frontend/src/main/java/org/sonar/java/model/VisitorsBridge.java", "diffHunk": "@@ -305,4 +304,21 @@ private final void forEach(Collection<SubscriptionVisitor> visitors, Consumer<Su\n       }\n     }\n   }\n+  private static Throwable getRootCause(Throwable throwable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ5MjkyMA=="}, "originalCommit": {"oid": "4b40f81983cff3537cbd6884b72167f148ee1dc2"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3705, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}