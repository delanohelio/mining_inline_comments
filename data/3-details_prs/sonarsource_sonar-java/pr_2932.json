{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMTExNTc4", "number": 2932, "title": "SONARJAVA-3360 Rule S5778: Only one method invocation is expected when testing runtime exceptions", "bodyText": "", "createdAt": "2020-05-01T12:24:01Z", "url": "https://github.com/SonarSource/sonar-java/pull/2932", "merged": true, "mergeCommit": {"oid": "a325379fa8e1753c0e30e6bfd38570a202f5652f"}, "closed": true, "closedAt": "2020-05-04T15:08:13Z", "author": {"login": "quentin-jaquier-sonarsource"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdAyQpgH2gAyNDEyMTExNTc4OjU0YzU0NTU1MzI5ODY4YzEwMjY5ZTNiODA4ZDlmNGQwY2JmZmE3OTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceApJMgFqTQwNTA2MDMwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "54c54555329868c10269e3b808d9f4d0cbffa792", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/54c54555329868c10269e3b808d9f4d0cbffa792", "committedDate": "2020-05-01T12:24:47Z", "message": "SONARJAVA-3360 Rule S5778: Only one method invocation is expected when testing runtime exceptions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "126e6e0066f6b502ab9bb134598964f8e5747e34", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/126e6e0066f6b502ab9bb134598964f8e5747e34", "committedDate": "2020-05-01T12:23:40Z", "message": "SONARJAVA-3360 Rule S5778: Only one method invocation is expected when testing runtime exceptions"}, "afterCommit": {"oid": "54c54555329868c10269e3b808d9f4d0cbffa792", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/54c54555329868c10269e3b808d9f4d0cbffa792", "committedDate": "2020-05-01T12:24:47Z", "message": "SONARJAVA-3360 Rule S5778: Only one method invocation is expected when testing runtime exceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca5ab15c724bdada8ff95b4a80f32f3a1b062411", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/ca5ab15c724bdada8ff95b4a80f32f3a1b062411", "committedDate": "2020-05-01T13:25:54Z", "message": "Improve coverage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0ODA1NTAw", "url": "https://github.com/SonarSource/sonar-java/pull/2932#pullrequestreview-404805500", "createdAt": "2020-05-04T08:48:15Z", "commit": {"oid": "ca5ab15c724bdada8ff95b4a80f32f3a1b062411"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODo0ODoxNlrOGP3k3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwODo1MDo0MFrOGP3qPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI5MjM4Mw==", "bodyText": "I really don't like this message in fact... \"expected\" does not make sense. I would prefer to have \"This call can throw an exception\" instead, and ideally, even the name of the exception!", "url": "https://github.com/SonarSource/sonar-java/pull/2932#discussion_r419292383", "createdAt": "2020-05-04T08:48:16Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/AbstractOneExpectedExceptionRule.java", "diffHunk": "@@ -128,66 +127,42 @@ private static boolean isTryCatchFail(TryStatementTree tree) {\n     return false;\n   }\n \n-  private void reportMultipleCallThrowingExceptionInTree(List<Type> expectedExceptions, Tree treeToVisit, Tree reportLocation, String placeToRefactor) {\n-    List<Type> checkedTypes = expectedExceptions.stream()\n-      .filter(OneExpectedCheckExceptionCheck::isChecked)\n-      .collect(Collectors.toList());\n-\n-    if (checkedTypes.isEmpty()) {\n-      return;\n-    }\n-\n-    MethodInvocationThrowing visitor = new MethodInvocationThrowing(checkedTypes);\n-    treeToVisit.accept(visitor);\n-    List<Tree> invocationTree = visitor.invocationTree;\n-    if (invocationTree.size() > 1) {\n-      reportIssue(reportLocation,\n-        String.format(\"Refactor the %s in order to have only one invocation throwing an expected exception.\", placeToRefactor),\n-        secondaryLocations(invocationTree),\n-        null);\n-    }\n-  }\n+  abstract void reportMultipleCallInTree(List<Type> expectedExceptions, Tree treeToVisit, Tree reportLocation, String placeToRefactor);\n \n-  private static boolean isChecked(Type type) {\n+  static boolean isChecked(Type type) {\n     return !type.isSubtypeOf(\"java.lang.RuntimeException\") && !type.isSubtypeOf(\"java.lang.Error\");\n   }\n \n-  private static List<JavaFileScannerContext.Location> secondaryLocations(List<Tree> methodInvocationTrees) {\n+  static List<JavaFileScannerContext.Location> secondaryLocations(List<Tree> methodInvocationTrees) {\n     return methodInvocationTrees.stream()\n       .map(expr -> new JavaFileScannerContext.Location(\"This call can throw an expected exception\", expr))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca5ab15c724bdada8ff95b4a80f32f3a1b062411"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI5MzM1OQ==", "bodyText": "Here as well, \"an expected\" feels bad. It can happen only once, according to the way it is tested, so, to me it should be \"the expected exception\", or even \"the exception\".", "url": "https://github.com/SonarSource/sonar-java/pull/2932#discussion_r419293359", "createdAt": "2020-05-04T08:49:53Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/OneExpectedCheckedExceptionCheck.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.semantic.Symbol;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5783\")\n+public class OneExpectedCheckedExceptionCheck extends AbstractOneExpectedExceptionRule {\n+\n+  @Override\n+  void reportMultipleCallInTree(List<Type> expectedExceptions, Tree treeToVisit, Tree reportLocation, String placeToRefactor) {\n+    List<Type> checkedTypes = expectedExceptions.stream()\n+      .filter(AbstractOneExpectedExceptionRule::isChecked)\n+      .collect(Collectors.toList());\n+\n+    if (checkedTypes.isEmpty()) {\n+      return;\n+    }\n+\n+    MethodInvocationCollector visitor = new MethodInvocationCollector(symbol -> throwExpectedException(symbol, checkedTypes));\n+    treeToVisit.accept(visitor);\n+    List<Tree> invocationTree = visitor.invocationTree;\n+    if (invocationTree.size() > 1) {\n+      reportIssue(reportLocation,\n+        String.format(\"Refactor the %s in order to have only one invocation throwing an expected exception.\", placeToRefactor),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca5ab15c724bdada8ff95b4a80f32f3a1b062411"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTI5Mzc1OQ==", "bodyText": "I would change it to \"the excepted exception\", or even \"the exception\". Simplicity is a key.", "url": "https://github.com/SonarSource/sonar-java/pull/2932#discussion_r419293759", "createdAt": "2020-05-04T08:50:40Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/OneExpectedRuntimeExceptionCheck.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.plugins.java.api.semantic.Type;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S5778\")\n+public class OneExpectedRuntimeExceptionCheck extends AbstractOneExpectedExceptionRule {\n+\n+  @Override\n+  void reportMultipleCallInTree(List<Type> expectedExceptions, Tree treeToVisit, Tree reportLocation, String placeToRefactor) {\n+    List<Type> checkedTypes = expectedExceptions.stream()\n+      .filter(e -> !isChecked(e))\n+      .collect(Collectors.toList());\n+\n+    if (checkedTypes.isEmpty()) {\n+      return;\n+    }\n+\n+    MethodInvocationCollector visitor = new MethodInvocationCollector(symbol -> !JUNIT_FAIL_MATCHER.matches(symbol));\n+    treeToVisit.accept(visitor);\n+    List<Tree> invocationTree = visitor.invocationTree;\n+    if (invocationTree.size() > 1) {\n+      reportIssue(reportLocation,\n+        String.format(\"Refactor the %s in order to have only one invocation throwing an expected exception.\", placeToRefactor),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca5ab15c724bdada8ff95b4a80f32f3a1b062411"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91de3973229ad48b7569671c22d0acb26802fa9f", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/91de3973229ad48b7569671c22d0acb26802fa9f", "committedDate": "2020-05-04T14:34:02Z", "message": "Simplify message"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MDYwMzA2", "url": "https://github.com/SonarSource/sonar-java/pull/2932#pullrequestreview-405060306", "createdAt": "2020-05-04T14:48:45Z", "commit": {"oid": "91de3973229ad48b7569671c22d0acb26802fa9f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1800, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}