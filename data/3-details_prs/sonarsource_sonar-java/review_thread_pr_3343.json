{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1ODIzNjIx", "number": 3343, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowNzo0MFrOFDd-eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzoyMzozNlrOFDeaLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTgxMTc2OnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/collections/SetUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowNzo0MFrOIDIYtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowNzo0MFrOIDIYtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE1NDAzNw==", "bodyText": "I'm not sure about this implementation. According to the documentation of Guava, why not go for:\nSet<T> newSet1 = new HashSet<>(set1);\nnewSet1.removeAll(set2);\nreturn newSet1;", "url": "https://github.com/SonarSource/sonar-java/pull/3343#discussion_r540154037", "createdAt": "2020-12-10T13:07:40Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/collections/SetUtils.java", "diffHunk": "@@ -47,4 +47,18 @@ private SetUtils() {\n       .flatMap(Set::stream)\n       .collect(Collectors.toSet());\n   }\n+\n+  public static <T> Set<T> difference(Set<T> set1, Set<T> set2) {\n+    return set1.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25da64e3ba157800c90071180497b0e7573b5e2e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTgxNDU4OnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/collections/SetUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowODoyN1rOIDIaZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzowODoyN1rOIDIaZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE1NDQ2OQ==", "bodyText": "this is a set, not a list", "url": "https://github.com/SonarSource/sonar-java/pull/3343#discussion_r540154469", "createdAt": "2020-12-10T13:08:27Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/collections/SetUtils.java", "diffHunk": "@@ -47,4 +47,18 @@ private SetUtils() {\n       .flatMap(Set::stream)\n       .collect(Collectors.toSet());\n   }\n+\n+  public static <T> Set<T> difference(Set<T> set1, Set<T> set2) {\n+    return set1.stream()\n+      .filter(elem -> !set2.contains(elem))\n+      .collect(Collectors.toSet());\n+  }\n+\n+  public static <T> T getOnlyElement(Set<T> set) {\n+    if (set.size() == 1) {\n+      return set.iterator().next();\n+    }\n+    throw new IllegalArgumentException(String.format(\"Expected list of size 1, but was list of size %d.\", set.size()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25da64e3ba157800c90071180497b0e7573b5e2e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTgzODMzOnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/model/VisitorsBridgeForTests.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzoxNDowM1rOIDIoiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzoxNDowM1rOIDIoiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE1ODA4OA==", "bodyText": "I think it might be simpler to write a new method in SymbolicExecutionMode accepting an Iterable instead of an array.", "url": "https://github.com/SonarSource/sonar-java/pull/3343#discussion_r540158088", "createdAt": "2020-12-10T13:14:03Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/model/VisitorsBridgeForTests.java", "diffHunk": "@@ -58,7 +58,8 @@ public VisitorsBridgeForTests(Iterable<? extends JavaCheck> visitors, @Nullable\n   }\n \n   public VisitorsBridgeForTests(Iterable<? extends JavaCheck> visitors, List<File> projectClasspath, @Nullable SonarComponents sonarComponents) {\n-    super(visitors, projectClasspath, sonarComponents, SymbolicExecutionMode.getMode(Iterables.toArray(visitors, JavaCheck.class)));\n+    super(visitors, projectClasspath, sonarComponents, SymbolicExecutionMode.getMode(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25da64e3ba157800c90071180497b0e7573b5e2e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTg2ODcxOnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/model/statement/SwitchExpressionTreeImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzoyMDozM1rOIDI5og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDo1Mzo1MFrOIDNLOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE2MjQ2Ng==", "bodyText": "The more I read about all these changes, the more I think that having children()  returning Iterable<Tree> in the JavaTree is stupid... we should have go for a List<Tree> from day one, or a least a Collection. It does not make sense to use an Iterable anymore. If you are searching for something else to improve, go for it!", "url": "https://github.com/SonarSource/sonar-java/pull/3343#discussion_r540162466", "createdAt": "2020-12-10T13:20:33Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/model/statement/SwitchExpressionTreeImpl.java", "diffHunk": "@@ -101,7 +101,7 @@ public void accept(TreeVisitor visitor) {\n \n   @Override\n   public Iterable<Tree> children() {\n-    return Iterables.concat(\n+    return ListUtils.concat(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25da64e3ba157800c90071180497b0e7573b5e2e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5NTg4MA==", "bodyText": "It looks like there are cases where we use custom implementation of Iterable. So maybe we can update this in other PR", "url": "https://github.com/SonarSource/sonar-java/pull/3343#discussion_r540195880", "createdAt": "2020-12-10T14:07:21Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-frontend/src/main/java/org/sonar/java/model/statement/SwitchExpressionTreeImpl.java", "diffHunk": "@@ -101,7 +101,7 @@ public void accept(TreeVisitor visitor) {\n \n   @Override\n   public Iterable<Tree> children() {\n-    return Iterables.concat(\n+    return ListUtils.concat(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE2MjQ2Ng=="}, "originalCommit": {"oid": "25da64e3ba157800c90071180497b0e7573b5e2e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIzMjUwNg==", "bodyText": "Here it is #3345 :)", "url": "https://github.com/SonarSource/sonar-java/pull/3343#discussion_r540232506", "createdAt": "2020-12-10T14:53:50Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-frontend/src/main/java/org/sonar/java/model/statement/SwitchExpressionTreeImpl.java", "diffHunk": "@@ -101,7 +101,7 @@ public void accept(TreeVisitor visitor) {\n \n   @Override\n   public Iterable<Tree> children() {\n-    return Iterables.concat(\n+    return ListUtils.concat(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE2MjQ2Ng=="}, "originalCommit": {"oid": "25da64e3ba157800c90071180497b0e7573b5e2e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MTg4MjY4OnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/se/NullableAnnotationUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzoyMzozNlrOIDJBuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMzoyMzozNlrOIDJBuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE2NDUzNg==", "bodyText": "style, can you please align it as in others?\n  Stream.of(STRONG_NULLABLE_ANNOTATIONS, WEAK_NULLABLE_ANNOTATIONS)\n    .flatMap(Set::stream)\n    .collect(Collectors.toSet()));", "url": "https://github.com/SonarSource/sonar-java/pull/3343#discussion_r540164536", "createdAt": "2020-12-10T13:23:36Z", "author": {"login": "m-g-sonar"}, "path": "java-frontend/src/main/java/org/sonar/java/se/NullableAnnotationUtils.java", "diffHunk": "@@ -65,28 +67,31 @@ private NullableAnnotationUtils() {\n     \"org.springframework.lang.Nullable\",\n     \"reactor.util.annotation.Nullable\");\n \n-  private static final Set<String> NULLABLE_ANNOTATIONS = new ImmutableSet.Builder<String>()\n-    .add(\"android.annotation.Nullable\")\n-    .add(\"android.support.annotation.Nullable\")\n-    .add(\"androidx.annotation.Nullable\")\n-    .add(\"com.sun.istack.internal.Nullable\")\n-    .add(\"edu.umd.cs.findbugs.annotations.Nullable\")\n-    .add(\"io.reactivex.annotations.Nullable\")\n-    .add(\"io.reactivex.rxjava3.annotations.Nullable\")\n-    .add(\"javax.annotation.Nullable\")\n-    .add(\"org.checkerframework.checker.nullness.compatqual.NullableDecl\")\n-    .add(\"org.checkerframework.checker.nullness.compatqual.NullableType\")\n-    .add(\"org.checkerframework.checker.nullness.qual.Nullable\")\n-    .add(\"org.eclipse.jdt.annotation.Nullable\")\n-    .add(\"org.eclipse.jgit.annotations.Nullable\")\n-    .add(\"org.jetbrains.annotations.Nullable\")\n-    .add(\"org.jmlspecs.annotation.Nullable\")\n-    .add(\"org.netbeans.api.annotations.common.NullAllowed\")\n-    .add(\"org.netbeans.api.annotations.common.NullUnknown\")\n-    .addAll(STRONG_NULLABLE_ANNOTATIONS)\n-    .build();\n-\n-  private static final Set<String> NONNULL_ANNOTATIONS = ImmutableSet.of(\n+\n+  private static final Set<String> WEAK_NULLABLE_ANNOTATIONS = SetUtils.immutableSetOf(\n+    \"android.annotation.Nullable\",\n+    \"android.support.annotation.Nullable\",\n+    \"androidx.annotation.Nullable\",\n+    \"com.sun.istack.internal.Nullable\",\n+    \"edu.umd.cs.findbugs.annotations.Nullable\",\n+    \"io.reactivex.annotations.Nullable\",\n+    \"io.reactivex.rxjava3.annotations.Nullable\",\n+    \"javax.annotation.Nullable\",\n+    \"org.checkerframework.checker.nullness.compatqual.NullableDecl\",\n+    \"org.checkerframework.checker.nullness.compatqual.NullableType\",\n+    \"org.checkerframework.checker.nullness.qual.Nullable\",\n+    \"org.eclipse.jdt.annotation.Nullable\",\n+    \"org.eclipse.jgit.annotations.Nullable\",\n+    \"org.jetbrains.annotations.Nullable\",\n+    \"org.jmlspecs.annotation.Nullable\",\n+    \"org.netbeans.api.annotations.common.NullAllowed\",\n+    \"org.netbeans.api.annotations.common.NullUnknown\");\n+\n+  private static final Set<String> NULLABLE_ANNOTATIONS = Collections.unmodifiableSet(\n+    Stream.of(STRONG_NULLABLE_ANNOTATIONS, WEAK_NULLABLE_ANNOTATIONS)\n+    .flatMap(Set::stream).collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25da64e3ba157800c90071180497b0e7573b5e2e"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3713, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}