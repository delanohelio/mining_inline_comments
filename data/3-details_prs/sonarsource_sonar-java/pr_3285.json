{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzMTg1NTA5", "number": 3285, "title": "SONARJAVA-3608 Rule S6068: Call to Mockito method \"verify\", \"when\" or \"given\" should be simplified", "bodyText": "", "createdAt": "2020-11-18T13:27:40Z", "url": "https://github.com/SonarSource/sonar-java/pull/3285", "merged": true, "mergeCommit": {"oid": "56a4ad54884e58a560b4a4202a0697bc5143db1d"}, "closed": true, "closedAt": "2020-11-20T14:36:48Z", "author": {"login": "quentin-jaquier-sonarsource"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddvWTIABqjQwMTEwNzgxMTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdeW9tugH2gAyNTIzMTg1NTA5Ojc4NGFkODEzMmE1MzU0OGEzNWVkOWI1MjQzZGUwOTVmMTNlNGQwMTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0dfed375d8dcb032936c1642468a05c7bdfa00b", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/c0dfed375d8dcb032936c1642468a05c7bdfa00b", "committedDate": "2020-11-18T13:23:42Z", "message": "SONARJAVA-3608 Rule S6068: Call to Mockito method \"verify\", \"when\" or \"given\" should be simplified"}, "afterCommit": {"oid": "8aafe591a8e7e62e93f209d5524afe5ba4951c84", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/8aafe591a8e7e62e93f209d5524afe5ba4951c84", "committedDate": "2020-11-18T14:50:41Z", "message": "SONARJAVA-3608 Rule S6068: Call to Mockito method \"verify\", \"when\" or \"given\" should be simplified"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03b133de1408817cf7e7c759546ee7440fbe3736", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/03b133de1408817cf7e7c759546ee7440fbe3736", "committedDate": "2020-11-19T16:18:59Z", "message": "SONARJAVA-3608 Rule S6068: Call to Mockito method \"verify\", \"when\" or \"given\" should be simplified"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8aafe591a8e7e62e93f209d5524afe5ba4951c84", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/8aafe591a8e7e62e93f209d5524afe5ba4951c84", "committedDate": "2020-11-18T14:50:41Z", "message": "SONARJAVA-3608 Rule S6068: Call to Mockito method \"verify\", \"when\" or \"given\" should be simplified"}, "afterCommit": {"oid": "03b133de1408817cf7e7c759546ee7440fbe3736", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/03b133de1408817cf7e7c759546ee7440fbe3736", "committedDate": "2020-11-19T16:18:59Z", "message": "SONARJAVA-3608 Rule S6068: Call to Mockito method \"verify\", \"when\" or \"given\" should be simplified"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MjYyNzUy", "url": "https://github.com/SonarSource/sonar-java/pull/3285#pullrequestreview-535262752", "createdAt": "2020-11-20T09:30:59Z", "commit": {"oid": "03b133de1408817cf7e7c759546ee7440fbe3736"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTozMTowMlrOH3H3ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTo0MjowM1rOH3IQnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MjY4Mg==", "bodyText": "remove secondary= here", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527562682", "createdAt": "2020-11-20T09:31:02Z", "author": {"login": "m-g-sonar"}, "path": "java-checks-test-sources/src/main/java/checks/tests/MockitoEqSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package checks.tests;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InOrder;\n+import org.mockito.Mockito;\n+\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.endsWith;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doCallRealMethod;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class MockitoEqSimplificationCheck {\n+\n+  @Captor\n+  ArgumentCaptor<Object> captor;\n+\n+  @Test\n+  public void myTest() {\n+    Foo foo = mock(Foo.class);\n+    Object v1 = new Object();\n+    Object v2 = new Object();\n+    Object v3 = new Object();\n+    Object v4 = new Object();\n+    Object v5 = new Object();\n+\n+    given(foo.bar(eq(v1), eq(v2), eq(v3))).willReturn(null); // Noncompliant [[sc=19;ec=21;secondary=34,34]] {{Remove these useless \"eq\" invocation and directly use the value.}}\n+    when(foo.baz(eq(v4), eq(v5))).thenReturn(\"foo\"); // Noncompliant [[sc=18;ec=20;secondary=35]] {{Remove these useless \"eq\" invocation and directly use the value.}}\n+    doThrow(new RuntimeException()).when(foo).quux(eq(42)); // Noncompliant [[sc=52;ec=54;secondary=]] {{Remove this useless \"eq\" invocation and directly use the value.}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03b133de1408817cf7e7c759546ee7440fbe3736"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2NTA4Nw==", "bodyText": "METHODS_USING_EQ_IN_ARGUMENTS", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527565087", "createdAt": "2020-11-20T09:35:11Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6068\")\n+public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n+  private static final String MOCKITO = \"org.mockito.Mockito\";\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03b133de1408817cf7e7c759546ee7440fbe3736"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2NTMzOQ==", "bodyText": "METHODS_USING_EQ_IN_CONSECUTIVE_CALL", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527565339", "createdAt": "2020-11-20T09:35:37Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6068\")\n+public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n+  private static final String MOCKITO = \"org.mockito.Mockito\";\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n+      .addParametersMatcher(MethodMatchers.ANY).build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n+      .addParametersMatcher(MethodMatchers.ANY).build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03b133de1408817cf7e7c759546ee7440fbe3736"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2NTYwOA==", "bodyText": "MOCKITO_EQ", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527565608", "createdAt": "2020-11-20T09:36:06Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6068\")\n+public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n+  private static final String MOCKITO = \"org.mockito.Mockito\";\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n+      .addParametersMatcher(MethodMatchers.ANY).build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n+      .addParametersMatcher(MethodMatchers.ANY).build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.InOrder\").names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.stubbing.Stubber\").names(\"when\").withAnyParameters().build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_MATCHERS = MethodMatchers.create()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03b133de1408817cf7e7c759546ee7440fbe3736"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2NjU3OQ==", "bodyText": "be careful with nested parenthesis here", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527566579", "createdAt": "2020-11-20T09:37:46Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6068\")\n+public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n+  private static final String MOCKITO = \"org.mockito.Mockito\";\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n+      .addParametersMatcher(MethodMatchers.ANY).build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n+      .addParametersMatcher(MethodMatchers.ANY).build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.InOrder\").names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.stubbing.Stubber\").names(\"when\").withAnyParameters().build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_MATCHERS = MethodMatchers.create()\n+    .ofTypes(\"org.mockito.Matchers\")\n+    .names(\"eq\").withAnyParameters().build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree mit = (MethodInvocationTree) tree;\n+\n+    if (MOCKITO_EQ_USED_IN_ARGUMENTS.matches(mit)) {\n+      ExpressionTree argument = mit.arguments().get(0);\n+      if (argument.is(Tree.Kind.METHOD_INVOCATION)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03b133de1408817cf7e7c759546ee7440fbe3736"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2NjkwNQ==", "bodyText": "skip parenthesis", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527566905", "createdAt": "2020-11-20T09:38:16Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6068\")\n+public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n+  private static final String MOCKITO = \"org.mockito.Mockito\";\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n+      .addParametersMatcher(MethodMatchers.ANY).build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n+      .addParametersMatcher(MethodMatchers.ANY).build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.InOrder\").names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.stubbing.Stubber\").names(\"when\").withAnyParameters().build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_MATCHERS = MethodMatchers.create()\n+    .ofTypes(\"org.mockito.Matchers\")\n+    .names(\"eq\").withAnyParameters().build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree mit = (MethodInvocationTree) tree;\n+\n+    if (MOCKITO_EQ_USED_IN_ARGUMENTS.matches(mit)) {\n+      ExpressionTree argument = mit.arguments().get(0);\n+      if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+        reportUselessEqUsage(((MethodInvocationTree) argument).arguments());\n+      }\n+    } else if (MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL.matches(mit)) {\n+      MethodTreeUtils.consecutiveMethodInvocation(mit).ifPresent(m -> reportUselessEqUsage(m.arguments()));\n+    }\n+  }\n+\n+  private void reportUselessEqUsage(Arguments arguments) {\n+    List<MethodInvocationTree> eqs = new ArrayList<>();\n+\n+    for (Tree t : arguments) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03b133de1408817cf7e7c759546ee7440fbe3736"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2NzM3MA==", "bodyText": "worth a comment", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527567370", "createdAt": "2020-11-20T09:39:08Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6068\")\n+public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n+  private static final String MOCKITO = \"org.mockito.Mockito\";\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n+      .addParametersMatcher(MethodMatchers.ANY).build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n+      .addParametersMatcher(MethodMatchers.ANY).build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.InOrder\").names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.stubbing.Stubber\").names(\"when\").withAnyParameters().build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_MATCHERS = MethodMatchers.create()\n+    .ofTypes(\"org.mockito.Matchers\")\n+    .names(\"eq\").withAnyParameters().build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree mit = (MethodInvocationTree) tree;\n+\n+    if (MOCKITO_EQ_USED_IN_ARGUMENTS.matches(mit)) {\n+      ExpressionTree argument = mit.arguments().get(0);\n+      if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+        reportUselessEqUsage(((MethodInvocationTree) argument).arguments());\n+      }\n+    } else if (MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL.matches(mit)) {\n+      MethodTreeUtils.consecutiveMethodInvocation(mit).ifPresent(m -> reportUselessEqUsage(m.arguments()));\n+    }\n+  }\n+\n+  private void reportUselessEqUsage(Arguments arguments) {\n+    List<MethodInvocationTree> eqs = new ArrayList<>();\n+\n+    for (Tree t : arguments) {\n+      if (t.is(Tree.Kind.METHOD_INVOCATION) && MOCKITO_EQ_MATCHERS.matches((MethodInvocationTree) t)) {\n+        eqs.add((MethodInvocationTree) t);\n+      } else {\n+        return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03b133de1408817cf7e7c759546ee7440fbe3736"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2Nzk3Nw==", "bodyText": "I realize I forgot to add them in the rule description, but I tend to prefer adding parenthesis when discussing methods, to make it clear \"eq(...)\"", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527567977", "createdAt": "2020-11-20T09:40:11Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6068\")\n+public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n+  private static final String MOCKITO = \"org.mockito.Mockito\";\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n+      .addParametersMatcher(MethodMatchers.ANY).build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n+      .addParametersMatcher(MethodMatchers.ANY).build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.InOrder\").names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.stubbing.Stubber\").names(\"when\").withAnyParameters().build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_MATCHERS = MethodMatchers.create()\n+    .ofTypes(\"org.mockito.Matchers\")\n+    .names(\"eq\").withAnyParameters().build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree mit = (MethodInvocationTree) tree;\n+\n+    if (MOCKITO_EQ_USED_IN_ARGUMENTS.matches(mit)) {\n+      ExpressionTree argument = mit.arguments().get(0);\n+      if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+        reportUselessEqUsage(((MethodInvocationTree) argument).arguments());\n+      }\n+    } else if (MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL.matches(mit)) {\n+      MethodTreeUtils.consecutiveMethodInvocation(mit).ifPresent(m -> reportUselessEqUsage(m.arguments()));\n+    }\n+  }\n+\n+  private void reportUselessEqUsage(Arguments arguments) {\n+    List<MethodInvocationTree> eqs = new ArrayList<>();\n+\n+    for (Tree t : arguments) {\n+      if (t.is(Tree.Kind.METHOD_INVOCATION) && MOCKITO_EQ_MATCHERS.matches((MethodInvocationTree) t)) {\n+        eqs.add((MethodInvocationTree) t);\n+      } else {\n+        return;\n+      }\n+    }\n+\n+    if (!eqs.isEmpty()) {\n+      reportIssue(ExpressionUtils.methodName(eqs.get(0)), String.format(\n+        \"Remove %s useless \\\"eq\\\" invocation and directly use the value.\", eqs.size() == 1 ? \"this\" : \"these\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03b133de1408817cf7e7c759546ee7440fbe3736"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2ODgwMA==", "bodyText": "I feel this will violate @nicolas-harraudeau-sonarsource 's rule about never having text in secondaries. Can you check?", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527568800", "createdAt": "2020-11-20T09:41:36Z", "author": {"login": "m-g-sonar"}, "path": "java-checks/src/main/java/org/sonar/java/checks/tests/MockitoEqSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * SonarQube Java\n+ * Copyright (C) 2012-2020 SonarSource SA\n+ * mailto:info AT sonarsource DOT com\n+ *\n+ * This program is free software; you can redistribute it and/or\n+ * modify it under the terms of the GNU Lesser General Public\n+ * License as published by the Free Software Foundation; either\n+ * version 3 of the License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n+ * Lesser General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU Lesser General Public License\n+ * along with this program; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n+ */\n+package org.sonar.java.checks.tests;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.sonar.check.Rule;\n+import org.sonar.java.checks.helpers.MethodTreeUtils;\n+import org.sonar.java.model.ExpressionUtils;\n+import org.sonar.plugins.java.api.IssuableSubscriptionVisitor;\n+import org.sonar.plugins.java.api.JavaFileScannerContext;\n+import org.sonar.plugins.java.api.semantic.MethodMatchers;\n+import org.sonar.plugins.java.api.tree.Arguments;\n+import org.sonar.plugins.java.api.tree.ExpressionTree;\n+import org.sonar.plugins.java.api.tree.MethodInvocationTree;\n+import org.sonar.plugins.java.api.tree.Tree;\n+\n+@Rule(key = \"S6068\")\n+public class MockitoEqSimplificationCheck extends IssuableSubscriptionVisitor {\n+  private static final String MOCKITO = \"org.mockito.Mockito\";\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_ARGUMENTS = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"when\")\n+      .addParametersMatcher(MethodMatchers.ANY).build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.BDDMockito\").names(\"given\")\n+      .addParametersMatcher(MethodMatchers.ANY).build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL = MethodMatchers.or(\n+    MethodMatchers.create().ofTypes(MOCKITO).names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.InOrder\").names(\"verify\").withAnyParameters().build(),\n+    MethodMatchers.create().ofTypes(\"org.mockito.stubbing.Stubber\").names(\"when\").withAnyParameters().build()\n+  );\n+\n+  private static final MethodMatchers MOCKITO_EQ_MATCHERS = MethodMatchers.create()\n+    .ofTypes(\"org.mockito.Matchers\")\n+    .names(\"eq\").withAnyParameters().build();\n+\n+  @Override\n+  public List<Tree.Kind> nodesToVisit() {\n+    return Collections.singletonList(Tree.Kind.METHOD_INVOCATION);\n+  }\n+\n+  @Override\n+  public void visitNode(Tree tree) {\n+    MethodInvocationTree mit = (MethodInvocationTree) tree;\n+\n+    if (MOCKITO_EQ_USED_IN_ARGUMENTS.matches(mit)) {\n+      ExpressionTree argument = mit.arguments().get(0);\n+      if (argument.is(Tree.Kind.METHOD_INVOCATION)) {\n+        reportUselessEqUsage(((MethodInvocationTree) argument).arguments());\n+      }\n+    } else if (MOCKITO_EQ_USED_IN_CONSECUTIVE_CALL.matches(mit)) {\n+      MethodTreeUtils.consecutiveMethodInvocation(mit).ifPresent(m -> reportUselessEqUsage(m.arguments()));\n+    }\n+  }\n+\n+  private void reportUselessEqUsage(Arguments arguments) {\n+    List<MethodInvocationTree> eqs = new ArrayList<>();\n+\n+    for (Tree t : arguments) {\n+      if (t.is(Tree.Kind.METHOD_INVOCATION) && MOCKITO_EQ_MATCHERS.matches((MethodInvocationTree) t)) {\n+        eqs.add((MethodInvocationTree) t);\n+      } else {\n+        return;\n+      }\n+    }\n+\n+    if (!eqs.isEmpty()) {\n+      reportIssue(ExpressionUtils.methodName(eqs.get(0)), String.format(\n+        \"Remove %s useless \\\"eq\\\" invocation and directly use the value.\", eqs.size() == 1 ? \"this\" : \"these\"),\n+        eqs.stream()\n+          .skip(1)\n+          .map(eq -> new JavaFileScannerContext.Location(\"\", ExpressionUtils.methodName(eq)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03b133de1408817cf7e7c759546ee7440fbe3736"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2OTA1Mw==", "bodyText": "\ud83d\udc4d\ud83c\udffb", "url": "https://github.com/SonarSource/sonar-java/pull/3285#discussion_r527569053", "createdAt": "2020-11-20T09:42:03Z", "author": {"login": "m-g-sonar"}, "path": "java-checks-test-sources/src/main/java/checks/tests/MockitoEqSimplificationCheck.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package checks.tests;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InOrder;\n+import org.mockito.Mockito;\n+\n+import static org.mockito.BDDMockito.given;\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.endsWith;\n+import static org.mockito.Matchers.eq;\n+import static org.mockito.Mockito.doCallRealMethod;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+public class MockitoEqSimplificationCheck {\n+\n+  @Captor\n+  ArgumentCaptor<Object> captor;\n+\n+  @Test\n+  public void myTest() {\n+    Foo foo = mock(Foo.class);\n+    Object v1 = new Object();\n+    Object v2 = new Object();\n+    Object v3 = new Object();\n+    Object v4 = new Object();\n+    Object v5 = new Object();\n+\n+    given(foo.bar(eq(v1), eq(v2), eq(v3))).willReturn(null); // Noncompliant [[sc=19;ec=21;secondary=34,34]] {{Remove these useless \"eq\" invocation and directly use the value.}}\n+    when(foo.baz(eq(v4), eq(v5))).thenReturn(\"foo\"); // Noncompliant [[sc=18;ec=20;secondary=35]] {{Remove these useless \"eq\" invocation and directly use the value.}}\n+    doThrow(new RuntimeException()).when(foo).quux(eq(42)); // Noncompliant [[sc=52;ec=54;secondary=]] {{Remove this useless \"eq\" invocation and directly use the value.}}\n+    doCallRealMethod().when(foo).baz(eq(v4), eq(v5)); // Noncompliant\n+    verify(foo).bar(eq(v1), eq(v2), eq(v3));   // Noncompliant\n+    verify(foo, never()).bar(eq(v1), eq(v2), eq(v3)); // Noncompliant\n+\n+    InOrder inOrder = Mockito.inOrder(foo);\n+    inOrder.verify(foo).bar(eq(v1), eq(v2), eq(v3)); // Noncompliant\n+    inOrder.verify(foo).baz(eq(v1), eq(v2)); // Noncompliant\n+\n+    given(foo.bar(v1, v2, v3)).willReturn(null);\n+    when(foo.baz(v4, v5)).thenReturn(\"foo\");\n+    doThrow(new RuntimeException()).when(foo).quux(42);\n+    doCallRealMethod().when(foo).baz(v4, v5);\n+    verify(foo).bar(v1, v2, v3);\n+    verify(foo, never()).bar(v1, v2, v3);\n+\n+    given(foo.noArg()).willReturn(null);\n+    verify(foo).noArg();\n+\n+    InOrder inOrder2 = Mockito.inOrder(foo);\n+    inOrder2.verify(foo).bar(v1, v2, v3);\n+    inOrder2.verify(foo).baz(v1, v2);\n+\n+    // No issue when mixed:\n+\n+    given(foo.bar(eq(v1), endsWith(\"\"), v3)).willReturn(null);\n+    given(foo.bar(eq(v1), any(), eq(v3))).willReturn(null);\n+    given(foo.baz(eq(v1), captor.capture())).willReturn(null);\n+\n+    // When raw values are mixed with matchers, Mockito will throw InvalidUseOfMatchersException.\n+    // S6073 should cover this case.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03b133de1408817cf7e7c759546ee7440fbe3736"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "784ad8132a53548a35ed9b5243de095f13e4d019", "author": {"user": {"login": "quentin-jaquier-sonarsource", "name": null}}, "url": "https://github.com/SonarSource/sonar-java/commit/784ad8132a53548a35ed9b5243de095f13e4d019", "committedDate": "2020-11-20T13:00:17Z", "message": "Fix from review"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1944, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}