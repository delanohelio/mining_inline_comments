{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMDczOTQz", "number": 2800, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjowMjozMVrODebX7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOTo0MDowMVrODevGJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjMyMzY3OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/CORSCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjowMjozMVrOFnjlVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjowMjozMVrOFnjlVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAyMTc4MA==", "bodyText": "This is to support the case:\n\nCorsConfiguration: raises only when addAllowedOrigin(\"*\")", "url": "https://github.com/SonarSource/sonar-java/pull/2800#discussion_r377021780", "createdAt": "2020-02-10T12:02:31Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/CORSCheck.java", "diffHunk": "@@ -90,24 +84,46 @@ private void checkMethod(Tree tree) {\n     }\n   }\n \n+  private void checkAnnotation(AnnotationTree tree) {\n+    if (tree.arguments().stream().noneMatch(CORSCheck::isAssignSpecificOrigin)) {\n+      reportTree(tree.annotationType());\n+    }\n+  }\n+\n+  private static boolean isAssignSpecificOrigin(Tree tree) {\n+    if (tree.is(Tree.Kind.ASSIGNMENT)) {\n+      AssignmentExpressionTree assignment = (AssignmentExpressionTree) tree;\n+      ExpressionTree variable = assignment.variable();\n+      return variable.is(Tree.Kind.IDENTIFIER) &&\n+        \"origins\".equals(((IdentifierTree) variable).name()) &&\n+        !isStar(assignment.expression());\n+    }\n+    return false;\n+  }\n+\n   private void reportTree(Tree tree) {\n     reportIssue(tree, MESSAGE);\n   }\n \n+  private static boolean isStar(ExpressionTree expressionTree) {\n+    String value = ExpressionsHelper.getConstantValueAsString(expressionTree).value();\n+    return value != null && value.equals(\"*\");\n+  }\n+\n   private class MethodInvocationVisitor extends BaseTreeVisitor {\n     List<MethodInvocationTree> addAllowedOrigin = new ArrayList<>();\n     List<MethodInvocationTree> applyPermit = new ArrayList<>();\n \n     @Override\n     public void visitMethodInvocation(MethodInvocationTree mit) {\n       if (SET_ADD_HEADER_MATCHER.anyMatch(mit)) {\n-        String constantCORS = ExpressionsHelper.getConstantValueAsString(mit.arguments().get(0)).value();\n-        if (constantCORS != null && HTTP_HEADERS.contains(constantCORS.toLowerCase(Locale.ENGLISH))) {\n+        String headerName = ExpressionsHelper.getConstantValueAsString(mit.arguments().get(0)).value();\n+        if (ACCESS_CONTROL_ALLOW_ORIGIN.equalsIgnoreCase(headerName) && isStar(mit.arguments().get(1))) {\n           reportTree(mit.methodSelect());\n         }\n       } else if (APPLY_PERMIT_DEFAULT_VALUES.matches(mit)) {\n         applyPermit.add(mit);\n-      } else if (ADD_ALLOWED_ORIGIN.matches(mit)) {\n+      } else if (ADD_ALLOWED_ORIGIN.matches(mit) && isStar(mit.arguments().get(0))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86a5283063c09fa5a1fe93f34a18354f87a523fc"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjMyNTg2OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/CORSCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjowMzoyM1rOFnjmtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjowMzoyM1rOFnjmtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAyMjEzNQ==", "bodyText": "This is to support the case:\n\nHttpServletResponse: raise only when \"Access-Control-Allow-Origin\" header is set to \"*\"", "url": "https://github.com/SonarSource/sonar-java/pull/2800#discussion_r377022135", "createdAt": "2020-02-10T12:03:23Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/CORSCheck.java", "diffHunk": "@@ -90,24 +84,46 @@ private void checkMethod(Tree tree) {\n     }\n   }\n \n+  private void checkAnnotation(AnnotationTree tree) {\n+    if (tree.arguments().stream().noneMatch(CORSCheck::isAssignSpecificOrigin)) {\n+      reportTree(tree.annotationType());\n+    }\n+  }\n+\n+  private static boolean isAssignSpecificOrigin(Tree tree) {\n+    if (tree.is(Tree.Kind.ASSIGNMENT)) {\n+      AssignmentExpressionTree assignment = (AssignmentExpressionTree) tree;\n+      ExpressionTree variable = assignment.variable();\n+      return variable.is(Tree.Kind.IDENTIFIER) &&\n+        \"origins\".equals(((IdentifierTree) variable).name()) &&\n+        !isStar(assignment.expression());\n+    }\n+    return false;\n+  }\n+\n   private void reportTree(Tree tree) {\n     reportIssue(tree, MESSAGE);\n   }\n \n+  private static boolean isStar(ExpressionTree expressionTree) {\n+    String value = ExpressionsHelper.getConstantValueAsString(expressionTree).value();\n+    return value != null && value.equals(\"*\");\n+  }\n+\n   private class MethodInvocationVisitor extends BaseTreeVisitor {\n     List<MethodInvocationTree> addAllowedOrigin = new ArrayList<>();\n     List<MethodInvocationTree> applyPermit = new ArrayList<>();\n \n     @Override\n     public void visitMethodInvocation(MethodInvocationTree mit) {\n       if (SET_ADD_HEADER_MATCHER.anyMatch(mit)) {\n-        String constantCORS = ExpressionsHelper.getConstantValueAsString(mit.arguments().get(0)).value();\n-        if (constantCORS != null && HTTP_HEADERS.contains(constantCORS.toLowerCase(Locale.ENGLISH))) {\n+        String headerName = ExpressionsHelper.getConstantValueAsString(mit.arguments().get(0)).value();\n+        if (ACCESS_CONTROL_ALLOW_ORIGIN.equalsIgnoreCase(headerName) && isStar(mit.arguments().get(1))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86a5283063c09fa5a1fe93f34a18354f87a523fc"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTU1MjI1OnYy", "diffSide": "RIGHT", "path": "java-checks/src/test/files/checks/CORSCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOTozOTowNlrOFoCRMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOTozOTowNlrOFoCRMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUyNDUyOQ==", "bodyText": "I juste realized that the key value is an alias for origins, this one, and a few following ones are in fact compliant!", "url": "https://github.com/SonarSource/sonar-java/pull/2800#discussion_r377524529", "createdAt": "2020-02-11T09:39:06Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/test/files/checks/CORSCheck.java", "diffHunk": "@@ -1,53 +1,86 @@\n-import org.springframework.stereotype.Controller;\n+import java.io.IOException;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.ui.ModelMap;\n import org.springframework.web.bind.annotation.CrossOrigin;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PostMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.SessionAttributes;\n-import org.springframework.web.bind.support.SessionStatus;\n import org.springframework.web.cors.CorsConfiguration;\n-import javax.servlet.ServletContext;\n import javax.servlet.ServletException;\n-import javax.servlet.UnavailableException;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import org.springframework.web.cors.UrlBasedCorsConfigurationSource;\n+import org.springframework.web.filter.CorsFilter;\n \n class A {\n \n   // === Java Servlet ===\n-  @Override\n   protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n     resp.setHeader(\"Content-Type\", \"text/plain; charset=utf-8\");\n-    resp.setHeader(\"Access-Control-Allow-Origin\", \"http://localhost:8080\"); // Noncompliant [[sc=5;ec=19]]\n-    resp.setHeader(\"Access-Control-Allow-Credentials\", \"true\"); // Noncompliant [[sc=5;ec=19]]\n-    resp.setHeader(\"Access-Control-Allow-Methods\", \"GET\"); // Noncompliant\n+    resp.setHeader(\"Access-Control-Allow-Origin\", \"*\"); // Noncompliant [[sc=5;ec=19]]\n     // header names are case insensitive. see https://stackoverflow.com/questions/5258977/are-http-headers-case-sensitive/5259004#5259004\n-    resp.setHeader(\"access-control-allow-Methods\", \"GET\"); // Noncompliant\n+    resp.setHeader(\"Access-control-allow-Origin\", \"*\"); // Noncompliant [[sc=5;ec=19]]\n+    resp.setHeader(\"Access-Control-Allow-Origin\", \"http://localhost:8080\"); // Compliant\n+\n+    resp.setHeader(\"Access-Control-Allow-Credentials\", \"true\"); // Compliant\n+    resp.setHeader(\"Access-Control-Allow-Credentials\", \"*\"); // Compliant\n+    resp.setHeader(\"access-control-allow-Methods\", \"GET\"); // Compliant\n+    resp.setHeader(\"Access-Control-Allow-Methods\", \"*\"); // Compliant\n \n     resp.addHeader(\"Content-Type\", \"text/plain; charset=utf-8\");\n-    resp.addHeader(\"Access-Control-Allow-Origin\", \"http://localhost:8080\"); // Noncompliant [[sc=5;ec=19]]\n-    resp.addHeader(\"Access-Control-Allow-Credentials\", \"true\"); // Noncompliant\n-    resp.addHeader(\"Access-Control-Allow-Methods\", \"GET\"); // Noncompliant\n-    resp.addHeader(\"Access-Control-Allow-Methods\", null); // Noncompliant\n-    resp.addHeader(null, \"GET\");\n+    resp.addHeader(\"Access-Control-Allow-Origin\", \"*\"); // Noncompliant [[sc=5;ec=19]]\n+    resp.addHeader(\"Access-Control-Allow-Origin\", \"http://localhost:8080\"); // // Compliant\n+    resp.addHeader(\"Access-Control-Allow-Credentials\", \"true\"); // Compliant\n+    resp.addHeader(\"Access-Control-Allow-Methods\", \"GET\"); // Compliant\n+\n+    resp.addHeader(\"Access-control-allow-Origin\", null); // Compliant\n+    resp.addHeader(null, \"*\"); // Compliant\n \n     resp.getWriter().write(\"response\");\n   }\n   // === Spring MVC Controller annotation ===\n-  @CrossOrigin(origins = \"http://domain1.com\") // Noncompliant [[sc=4;ec=15]] {{Make sure that enabling CORS is safe here.}}\n+  @CrossOrigin(origins = \"*\") // Noncompliant [[sc=4;ec=15]] {{Make sure that enabling CORS is safe here.}}\n   @RequestMapping(\"\")\n   public class TestController {\n     public String home(ModelMap model) {\n       model.addAttribute(\"message\", \"ok \");\n       return \"view\";\n     }\n \n-    @CrossOrigin(origins = \"http://domain2.com\") // Noncompliant\n+    @CrossOrigin(\"*\") // Noncompliant\n     @RequestMapping(value = \"/test1\")\n     public ResponseEntity<String> test1() {\n       return ResponseEntity.ok().body(\"ok\");\n     }\n+\n+    @CrossOrigin // Noncompliant\n+    @RequestMapping(value = \"/test2\")\n+    public ResponseEntity<String> test2() {\n+      return ResponseEntity.ok().body(\"ok\");\n+    }\n+\n+    @CrossOrigin(\"http://domain2.com\") // Noncompliant", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86a5283063c09fa5a1fe93f34a18354f87a523fc"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTU1NDkyOnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/CORSCheck.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOTo0MDowMVrOFoCTBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOTo0MDowMVrOFoCTBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUyNDk5OQ==", "bodyText": "I would change the isStar method by containsStar rule to cover:\n    @CrossOrigin(origins = {\"*\"}) // Noncompliant\nand\n    @CrossOrigin(origins = {\"http://localhost:7777\", \"*\"}) // Noncompliant", "url": "https://github.com/SonarSource/sonar-java/pull/2800#discussion_r377524999", "createdAt": "2020-02-11T09:40:01Z", "author": {"login": "alban-auzeill"}, "path": "java-checks/src/main/java/org/sonar/java/checks/CORSCheck.java", "diffHunk": "@@ -90,24 +84,46 @@ private void checkMethod(Tree tree) {\n     }\n   }\n \n+  private void checkAnnotation(AnnotationTree tree) {\n+    if (tree.arguments().stream().noneMatch(CORSCheck::isAssignSpecificOrigin)) {\n+      reportTree(tree.annotationType());\n+    }\n+  }\n+\n+  private static boolean isAssignSpecificOrigin(Tree tree) {\n+    if (tree.is(Tree.Kind.ASSIGNMENT)) {\n+      AssignmentExpressionTree assignment = (AssignmentExpressionTree) tree;\n+      ExpressionTree variable = assignment.variable();\n+      return variable.is(Tree.Kind.IDENTIFIER) &&\n+        \"origins\".equals(((IdentifierTree) variable).name()) &&\n+        !isStar(assignment.expression());\n+    }\n+    return false;\n+  }\n+\n   private void reportTree(Tree tree) {\n     reportIssue(tree, MESSAGE);\n   }\n \n+  private static boolean isStar(ExpressionTree expressionTree) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86a5283063c09fa5a1fe93f34a18354f87a523fc"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4178, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}