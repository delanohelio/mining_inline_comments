{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNjkzOTM5", "number": 3274, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTozNzoyMlrOE57hTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjoxNzo1OFrOE5_X0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTc5NDY5OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/ConstantsShouldBeStaticFinalCheck.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTozNzoyMlrOH0sMrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTozNzoyMlrOH0sMrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAxMjE0Mw==", "bodyText": "Would be nice to extract it to a separate method. And combine these 2 conditions using Predicate.or() if possible.", "url": "https://github.com/SonarSource/sonar-java/pull/3274#discussion_r525012143", "createdAt": "2020-11-17T09:37:22Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/ConstantsShouldBeStaticFinalCheck.java", "diffHunk": "@@ -96,7 +96,14 @@ private static boolean hasConstantInitializer(VariableTree variableTree) {\n       if (init.is(Tree.Kind.NEW_ARRAY)) {\n         return false;\n       }\n-      return !containsChildrenOfKind((JavaTree) init, Tree.Kind.METHOD_INVOCATION, Tree.Kind.NEW_CLASS);\n+      return !containsChildMatchingPredicate((JavaTree) init, tree -> {\n+          if (tree.is(Tree.Kind.IDENTIFIER)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a2f70ffa33a2085d7766718198a9ff109492016"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjQyNTc4OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/java/org/sonar/java/checks/ConstantsShouldBeStaticFinalCheck.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjoxNzo1OFrOH0yNMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjo1NjoyMFrOH0zi6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExMDU3Ng==", "bodyText": "Looks like my suggestion was not that elegant. For me it will be more readable to use lambda.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ((Predicate<Tree>) ConstantsShouldBeStaticFinalCheck::isIgnoredKind).or(ConstantsShouldBeStaticFinalCheck::isThisOrSuper));\n          \n          \n            \n                    (tree -> isIgnoredKind(tree) || isThisOrSuper(tree)));", "url": "https://github.com/SonarSource/sonar-java/pull/3274#discussion_r525110576", "createdAt": "2020-11-17T12:17:58Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/ConstantsShouldBeStaticFinalCheck.java", "diffHunk": "@@ -96,7 +96,20 @@ private static boolean hasConstantInitializer(VariableTree variableTree) {\n       if (init.is(Tree.Kind.NEW_ARRAY)) {\n         return false;\n       }\n-      return !containsChildrenOfKind((JavaTree) init, Tree.Kind.METHOD_INVOCATION, Tree.Kind.NEW_CLASS);\n+      return !containsChildMatchingPredicate((JavaTree) init,\n+        ((Predicate<Tree>) ConstantsShouldBeStaticFinalCheck::isIgnoredKind).or(ConstantsShouldBeStaticFinalCheck::isThisOrSuper));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2b535f9753ed608975353c760e6bfaea0003896"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzMjUyMg==", "bodyText": "Of course, thanks!", "url": "https://github.com/SonarSource/sonar-java/pull/3274#discussion_r525132522", "createdAt": "2020-11-17T12:56:20Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-checks/src/main/java/org/sonar/java/checks/ConstantsShouldBeStaticFinalCheck.java", "diffHunk": "@@ -96,7 +96,20 @@ private static boolean hasConstantInitializer(VariableTree variableTree) {\n       if (init.is(Tree.Kind.NEW_ARRAY)) {\n         return false;\n       }\n-      return !containsChildrenOfKind((JavaTree) init, Tree.Kind.METHOD_INVOCATION, Tree.Kind.NEW_CLASS);\n+      return !containsChildMatchingPredicate((JavaTree) init,\n+        ((Predicate<Tree>) ConstantsShouldBeStaticFinalCheck::isIgnoredKind).or(ConstantsShouldBeStaticFinalCheck::isThisOrSuper));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTExMDU3Ng=="}, "originalCommit": {"oid": "d2b535f9753ed608975353c760e6bfaea0003896"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3814, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}