{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MDc3Nzgz", "number": 3131, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjoxMTowMVrOEWqnjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjoxMTowMVrOEWqnjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjAyMzgwOnYy", "diffSide": "RIGHT", "path": "java-frontend/src/test/files/se/DivisionByZeroCheck.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjoxMTowMVrOG-CVhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwOToyMTowMFrOHADVPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMzE3NA==", "bodyText": "I addition to the above use cases, we should probably also support:\n\nThe BigInteger.ZERO and BigDecimal.ZERO identifiers\n\n  void zeroConstantBigInt(BigInteger r) {\n    BigInteger z1 = BigInteger.ZERO;\n    r = r.divide(z1); // Noncompliant\n  }\n\nKeeping \"ZERO\" constraint through \"valueOf\" from long, double to BigInteger, BigDecimal\n\n  void valueOfBigInt(BigInteger r) {\n    long z1 = 0;\n    BigInteger z2 = BigInteger.valueOf(z1);\n    r = r.divide(z2); // Noncompliant\n  }\n\nKeeping \"ZERO\" constraint through BigDecimal constructor from BigInteger, double, int, long\n\n  void constructorBigDecimal(BigDecimal r) {\n    double z1 = 0;\n    BigDecimal z2 = new BigDecimal(z1);\n    r = r.divide(z2); // Noncompliant\n  }\n\nKeeping \"ZERO\" constraint through \"toBigInteger\", \"toBigIntegerExact\", \"shortValueExact\", \"round\", \"\tremainder\", \"pow\", \"longValueExact\", \"longValue\" , \"\tintValueExact\", \"intValue\", \"floatValue\", \"doubleValue\", \"byteValueExact\", \"abs\", \tshiftLeft, shiftRight\nSupport \tBigDecimal.divideToIntegralValue like BigDecimal.divide", "url": "https://github.com/SonarSource/sonar-java/pull/3131#discussion_r467703174", "createdAt": "2020-08-10T06:11:01Z", "author": {"login": "alban-auzeill"}, "path": "java-frontend/src/test/files/se/DivisionByZeroCheck.java", "diffHunk": "@@ -495,3 +498,67 @@ private int g(int x, int y) {\n     }\n   }\n }\n+\n+class BigIntegerAndDecimal {\n+  void simpleBigInt(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0); // flow@simpleBigInt {{'valueOf()' can return zero.}} flow@simpleBigInt {{Implies 'z1' can be zero.}}\n+    BigInteger z2 = z1; // flow@simpleBigInt {{Implies 'z2' has the same value as 'z1'.}}\n+    r = r.divide(z2); // Noncompliant [[flows=simpleBigInt]] {{Make sure \"z2\" can't be zero before doing this division.}} flow@simpleBigInt {{Division by zero.}}\n+  }\n+\n+  void simpleBigDec(BigDecimal r) {\n+    BigDecimal z1 = BigDecimal.valueOf(0);;\n+    BigDecimal z2 = z1;\n+    r = r.divide(z2); // Noncompliant\n+  }\n+\n+  void bigMultiply(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger b1 = BigInteger.valueOf(4);\n+    BigInteger mult1 = z1.multiply(b1);\n+\n+    r = r.divide(mult1); // Noncompliant\n+  }\n+\n+  void bigMultiply2(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger b1 = BigInteger.valueOf(4);\n+    BigInteger mult2 = b1.multiply(z1);\n+\n+    r = r.divide(mult2); // Noncompliant\n+  }\n+\n+  void bigMultiplyChained(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger b1 = BigInteger.valueOf(4);\n+    r = r.divide(z1.multiply(b1)); // Noncompliant\n+  }\n+\n+  void bigPlus(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger z2 = BigInteger.valueOf(0);\n+    BigInteger sum1 = z1.add(z2);\n+\n+    r = r.divide(sum1); // Noncompliant\n+  }\n+\n+  void bigMinus(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger z2 = BigInteger.valueOf(0);\n+    BigInteger sum1 = z1.subtract(z2);\n+\n+    r = r.divide(sum1); // Noncompliant\n+  }\n+\n+  void bigRemainder(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger v1 = BigInteger.valueOf(42);\n+    BigInteger z2 = z1.multiply(v1);\n+    r = r.remainder(z2); // Noncompliant\n+  }\n+\n+  void simpleBigInt(BigInteger r, int value) {\n+    BigInteger z1 = BigInteger.valueOf(value);\n+    r = r.divide(z1); // Compliant\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9288cf9e8b36cbb90391bef5e2be28600b221787"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzg3NTI1Ng==", "bodyText": "Good point! I added one commit for each case that you stated.", "url": "https://github.com/SonarSource/sonar-java/pull/3131#discussion_r467875256", "createdAt": "2020-08-10T12:41:13Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-frontend/src/test/files/se/DivisionByZeroCheck.java", "diffHunk": "@@ -495,3 +498,67 @@ private int g(int x, int y) {\n     }\n   }\n }\n+\n+class BigIntegerAndDecimal {\n+  void simpleBigInt(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0); // flow@simpleBigInt {{'valueOf()' can return zero.}} flow@simpleBigInt {{Implies 'z1' can be zero.}}\n+    BigInteger z2 = z1; // flow@simpleBigInt {{Implies 'z2' has the same value as 'z1'.}}\n+    r = r.divide(z2); // Noncompliant [[flows=simpleBigInt]] {{Make sure \"z2\" can't be zero before doing this division.}} flow@simpleBigInt {{Division by zero.}}\n+  }\n+\n+  void simpleBigDec(BigDecimal r) {\n+    BigDecimal z1 = BigDecimal.valueOf(0);;\n+    BigDecimal z2 = z1;\n+    r = r.divide(z2); // Noncompliant\n+  }\n+\n+  void bigMultiply(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger b1 = BigInteger.valueOf(4);\n+    BigInteger mult1 = z1.multiply(b1);\n+\n+    r = r.divide(mult1); // Noncompliant\n+  }\n+\n+  void bigMultiply2(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger b1 = BigInteger.valueOf(4);\n+    BigInteger mult2 = b1.multiply(z1);\n+\n+    r = r.divide(mult2); // Noncompliant\n+  }\n+\n+  void bigMultiplyChained(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger b1 = BigInteger.valueOf(4);\n+    r = r.divide(z1.multiply(b1)); // Noncompliant\n+  }\n+\n+  void bigPlus(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger z2 = BigInteger.valueOf(0);\n+    BigInteger sum1 = z1.add(z2);\n+\n+    r = r.divide(sum1); // Noncompliant\n+  }\n+\n+  void bigMinus(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger z2 = BigInteger.valueOf(0);\n+    BigInteger sum1 = z1.subtract(z2);\n+\n+    r = r.divide(sum1); // Noncompliant\n+  }\n+\n+  void bigRemainder(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger v1 = BigInteger.valueOf(42);\n+    BigInteger z2 = z1.multiply(v1);\n+    r = r.remainder(z2); // Noncompliant\n+  }\n+\n+  void simpleBigInt(BigInteger r, int value) {\n+    BigInteger z1 = BigInteger.valueOf(value);\n+    r = r.divide(z1); // Compliant\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMzE3NA=="}, "originalCommit": {"oid": "9288cf9e8b36cbb90391bef5e2be28600b221787"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgxNjYzOA==", "bodyText": "Nice job!\nUnfortunately, now we raise a FP on the following code:\n    BigDecimal x = new BigDecimal(0);\n    BigDecimal y = new BigDecimal(0);\n    if (x == y) { // false-positive \"always true\"\n      System.out.println(\"1\");\n    } else {\n      System.out.println(\"2\"); // <==\n    }", "url": "https://github.com/SonarSource/sonar-java/pull/3131#discussion_r469816638", "createdAt": "2020-08-13T09:21:00Z", "author": {"login": "alban-auzeill"}, "path": "java-frontend/src/test/files/se/DivisionByZeroCheck.java", "diffHunk": "@@ -495,3 +498,67 @@ private int g(int x, int y) {\n     }\n   }\n }\n+\n+class BigIntegerAndDecimal {\n+  void simpleBigInt(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0); // flow@simpleBigInt {{'valueOf()' can return zero.}} flow@simpleBigInt {{Implies 'z1' can be zero.}}\n+    BigInteger z2 = z1; // flow@simpleBigInt {{Implies 'z2' has the same value as 'z1'.}}\n+    r = r.divide(z2); // Noncompliant [[flows=simpleBigInt]] {{Make sure \"z2\" can't be zero before doing this division.}} flow@simpleBigInt {{Division by zero.}}\n+  }\n+\n+  void simpleBigDec(BigDecimal r) {\n+    BigDecimal z1 = BigDecimal.valueOf(0);;\n+    BigDecimal z2 = z1;\n+    r = r.divide(z2); // Noncompliant\n+  }\n+\n+  void bigMultiply(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger b1 = BigInteger.valueOf(4);\n+    BigInteger mult1 = z1.multiply(b1);\n+\n+    r = r.divide(mult1); // Noncompliant\n+  }\n+\n+  void bigMultiply2(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger b1 = BigInteger.valueOf(4);\n+    BigInteger mult2 = b1.multiply(z1);\n+\n+    r = r.divide(mult2); // Noncompliant\n+  }\n+\n+  void bigMultiplyChained(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger b1 = BigInteger.valueOf(4);\n+    r = r.divide(z1.multiply(b1)); // Noncompliant\n+  }\n+\n+  void bigPlus(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger z2 = BigInteger.valueOf(0);\n+    BigInteger sum1 = z1.add(z2);\n+\n+    r = r.divide(sum1); // Noncompliant\n+  }\n+\n+  void bigMinus(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger z2 = BigInteger.valueOf(0);\n+    BigInteger sum1 = z1.subtract(z2);\n+\n+    r = r.divide(sum1); // Noncompliant\n+  }\n+\n+  void bigRemainder(BigInteger r) {\n+    BigInteger z1 = BigInteger.valueOf(0);\n+    BigInteger v1 = BigInteger.valueOf(42);\n+    BigInteger z2 = z1.multiply(v1);\n+    r = r.remainder(z2); // Noncompliant\n+  }\n+\n+  void simpleBigInt(BigInteger r, int value) {\n+    BigInteger z1 = BigInteger.valueOf(value);\n+    r = r.divide(z1); // Compliant\n+  }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMzE3NA=="}, "originalCommit": {"oid": "9288cf9e8b36cbb90391bef5e2be28600b221787"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3979, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}