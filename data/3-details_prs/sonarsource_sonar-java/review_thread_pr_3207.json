{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMDQ0OTc4", "number": 3207, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODoyODoxOVrOEmb7WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODoyODoxOVrOEmb7WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzM4OTA0OnYy", "diffSide": "RIGHT", "path": "java-frontend/src/main/java/org/sonar/java/regex/RegexParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODoyODoxOVrOHWdFxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOToxMjowNFrOHWfsCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMwNzMzMw==", "bodyText": "From the SO post linked in the ticket:\n\nWhen \\c is followed by an ASCII lowercase letter, chr(ord($char) ^ 0x60).\n\nAs you explained to me, this is not the case in Java, so the implementation is fine.\nCan you maybe add a comment in the ticket, to explain this briefly?", "url": "https://github.com/SonarSource/sonar-java/pull/3207#discussion_r493307333", "createdAt": "2020-09-23T08:28:19Z", "author": {"login": "quentin-jaquier-sonarsource"}, "path": "java-frontend/src/main/java/org/sonar/java/regex/RegexParser.java", "diffHunk": "@@ -453,17 +454,74 @@ private RegexTree parseEscapeSequence() {\n           return parseUnicodeEscape(backslash);\n         case 'x':\n           return parseHexEscape(backslash);\n+        case 't':\n+        case 'n':\n+        case 'r':\n+        case 'f':\n+        case 'a':\n+        case 'e':\n+          characters.moveNext();\n+          char c = simpleEscapeToCharacter(character.getCharacter());\n+          IndexRange range = backslash.getRange().extendTo(characters.getCurrentStartIndex());\n+          return plainCharacter(new JavaCharacter(source, range, c, true));\n+        case 'c':\n+          return parseControlSequence(backslash);\n+        case 'N':\n+          return parseNamedUnicodeCharacter(backslash);\n+        case 'R':\n+        case 'X':\n+          characters.moveNext();\n+          return new MiscEscapeSequenceTree(source, backslash.getRange().extendTo(characters.getCurrentStartIndex()));\n         case 'E':\n           error(\"\\\\E used without \\\\Q\");\n           // Fallthrough\n         default:\n-          // TODO other kind of escape sequences such as special characters, N, R or X\n           characters.moveNext();\n           return new PlainCharacterTree(source, backslash.getRange().merge(character.getRange()), character);\n       }\n     }\n   }\n \n+  private RegexTree parseNamedUnicodeCharacter(JavaCharacter backslash) {\n+    return parseEscapedSequence('{', '}', \"a Unicode character name\", content ->\n+      // TODO: Once we move to Java 9+, use Character.codePointOf to produce a PlainCharacterTree with the named Unicode\n+      //       character instead of a MiscEscapeSequenceTree and produce a syntax error for illegal character names\n+      new MiscEscapeSequenceTree(source, backslash.getRange().merge(content.closer.getRange()))\n+    );\n+  }\n+\n+  private RegexTree parseControlSequence(JavaCharacter backslash) {\n+    JavaCharacter c = characters.getCurrent();\n+    characters.moveNext();\n+    if (characters.isAtEnd()) {\n+      expected(\"any character\");\n+      return plainCharacter(c);\n+    }\n+    char controlCharacter = (char) (0x40 ^ characters.getCurrentChar());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e03d73a6f2281dfe7308e6e95d666189f2bd3049"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0OTg5Ng==", "bodyText": "Done.", "url": "https://github.com/SonarSource/sonar-java/pull/3207#discussion_r493349896", "createdAt": "2020-09-23T09:12:04Z", "author": {"login": "sebastian-hungerecker-sonarsource"}, "path": "java-frontend/src/main/java/org/sonar/java/regex/RegexParser.java", "diffHunk": "@@ -453,17 +454,74 @@ private RegexTree parseEscapeSequence() {\n           return parseUnicodeEscape(backslash);\n         case 'x':\n           return parseHexEscape(backslash);\n+        case 't':\n+        case 'n':\n+        case 'r':\n+        case 'f':\n+        case 'a':\n+        case 'e':\n+          characters.moveNext();\n+          char c = simpleEscapeToCharacter(character.getCharacter());\n+          IndexRange range = backslash.getRange().extendTo(characters.getCurrentStartIndex());\n+          return plainCharacter(new JavaCharacter(source, range, c, true));\n+        case 'c':\n+          return parseControlSequence(backslash);\n+        case 'N':\n+          return parseNamedUnicodeCharacter(backslash);\n+        case 'R':\n+        case 'X':\n+          characters.moveNext();\n+          return new MiscEscapeSequenceTree(source, backslash.getRange().extendTo(characters.getCurrentStartIndex()));\n         case 'E':\n           error(\"\\\\E used without \\\\Q\");\n           // Fallthrough\n         default:\n-          // TODO other kind of escape sequences such as special characters, N, R or X\n           characters.moveNext();\n           return new PlainCharacterTree(source, backslash.getRange().merge(character.getRange()), character);\n       }\n     }\n   }\n \n+  private RegexTree parseNamedUnicodeCharacter(JavaCharacter backslash) {\n+    return parseEscapedSequence('{', '}', \"a Unicode character name\", content ->\n+      // TODO: Once we move to Java 9+, use Character.codePointOf to produce a PlainCharacterTree with the named Unicode\n+      //       character instead of a MiscEscapeSequenceTree and produce a syntax error for illegal character names\n+      new MiscEscapeSequenceTree(source, backslash.getRange().merge(content.closer.getRange()))\n+    );\n+  }\n+\n+  private RegexTree parseControlSequence(JavaCharacter backslash) {\n+    JavaCharacter c = characters.getCurrent();\n+    characters.moveNext();\n+    if (characters.isAtEnd()) {\n+      expected(\"any character\");\n+      return plainCharacter(c);\n+    }\n+    char controlCharacter = (char) (0x40 ^ characters.getCurrentChar());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMwNzMzMw=="}, "originalCommit": {"oid": "e03d73a6f2281dfe7308e6e95d666189f2bd3049"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3756, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}