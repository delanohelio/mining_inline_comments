{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1ODkxNTUy", "number": 3296, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTowMzo1OVrOE8q1XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTowMzo1OVrOE8q1XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDUxODA0OnYy", "diffSide": "RIGHT", "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S1130_java.html", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTowMzo1OVrOH47plg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTowMzo1OVrOH47plg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ1OTYwNg==", "bodyText": "Can we use a space instead of \"&nbsp;\" here?", "url": "https://github.com/SonarSource/sonar-java/pull/3296#discussion_r529459606", "createdAt": "2020-11-24T11:03:59Z", "author": {"login": "margarita-nedzelska-sonarsource"}, "path": "java-checks/src/main/resources/org/sonar/l10n/java/rules/java/S1130_java.html", "diffHunk": "@@ -1,31 +1,26 @@\n <p>An exception in a <code>throws</code> declaration in Java is superfluous if it is:</p>\n-<ul>\n-  <li> listed multiple times </li>\n-  <li> a subclass of another listed exception </li>\n-  <li> a <code>RuntimeException</code>, or one of its descendants </li>\n-  <li> completely unnecessary because the declared exception type cannot actually be thrown </li>\n-</ul>\n+<p> * listed multiple times</p>\n+<p> * a subclass of another listed exception</p>\n+<p> * completely unnecessary because the declared exception type cannot actually be thrown</p>\n <h2>Noncompliant Code Example</h2>\n <pre>\n void foo() throws MyException, MyException {}  // Noncompliant; should be listed once\n void bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable\n-void baz() throws RuntimeException {}  // Noncompliant; RuntimeException can always be thrown\n </pre>\n <h2>Compliant Solution</h2>\n <pre>\n void foo() throws MyException {}\n void bar() throws Throwable {}\n-void baz() {}\n </pre>\n <h2>Exceptions</h2>\n <p>The rule will not raise any issue for exceptions that cannot be thrown from the method body:</p>\n-<ul>\n-  <li> in overriding and implementation methods </li>\n-  <li> in interface <code>default</code> methods </li>\n-  <li> in non-private methods that only <code>throw</code>, have empty bodies, or a single return statement . </li>\n-  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the exception is documented with a proper\n-  javadoc. </li>\n-</ul>\n+<p> * in overriding and implementation methods</p>\n+<p> * in interface <code>default</code> methods</p>\n+<p> * in non-private methods that only <code>throw</code>, have empty bodies, or a single return statement.</p>\n+<p> * in overridable methods (non-final, or not member of a final class, non-static, non-private), if the exception is documented with a proper\n+JavaDoc</p>\n+<p>Also, the rule won't raise issues on&nbsp;<code>RuntimeException</code>, or one of its descendants, because explicating runtime exceptions which", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba581ef24f4ab5195846973d24142ecb8f773880"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3848, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}