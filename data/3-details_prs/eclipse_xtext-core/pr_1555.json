{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1MTcxNjY1", "number": 1555, "title": "[eclipse/xtext#1777] ported xtend code to java", "bodyText": "[eclipse/xtext#1777] ported xtend code to java\nSigned-off-by: Christian Dietrich christian.dietrich@itemis.de", "createdAt": "2020-08-09T16:20:19Z", "url": "https://github.com/eclipse/xtext-core/pull/1555", "merged": true, "mergeCommit": {"oid": "27160af966a7e3205e4ef419c913cd05f37f970d"}, "closed": true, "closedAt": "2020-08-24T07:52:49Z", "author": {"login": "cdietrich"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9QylsABqjM2MzY2MjIyMTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdB9z3OgFqTQ3MzE5MjQ0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5ec1d2983c1f10433add3150bdc32c84df1132f1", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/5ec1d2983c1f10433add3150bdc32c84df1132f1", "committedDate": "2020-08-09T15:48:04Z", "message": "[eclipse/xtext#1777] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "b99a134373e1cb96041bd2ed36f6dafee4df5751", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/b99a134373e1cb96041bd2ed36f6dafee4df5751", "committedDate": "2020-08-09T17:09:02Z", "message": "[eclipse/xtext#1777] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b99a134373e1cb96041bd2ed36f6dafee4df5751", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/b99a134373e1cb96041bd2ed36f6dafee4df5751", "committedDate": "2020-08-09T17:09:02Z", "message": "[eclipse/xtext#1777] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "b48c3853fdcb0d280c3396cb46e91be0c5e89a5a", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/b48c3853fdcb0d280c3396cb46e91be0c5e89a5a", "committedDate": "2020-08-09T17:13:35Z", "message": "[eclipse/xtext#1777] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b48c3853fdcb0d280c3396cb46e91be0c5e89a5a", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/b48c3853fdcb0d280c3396cb46e91be0c5e89a5a", "committedDate": "2020-08-09T17:13:35Z", "message": "[eclipse/xtext#1777] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "240c752d704b4cb4c7ac187f7e26a4a171866706", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/240c752d704b4cb4c7ac187f7e26a4a171866706", "committedDate": "2020-08-09T17:14:10Z", "message": "[eclipse/xtext#1777] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "240c752d704b4cb4c7ac187f7e26a4a171866706", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/240c752d704b4cb4c7ac187f7e26a4a171866706", "committedDate": "2020-08-09T17:14:10Z", "message": "[eclipse/xtext#1777] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "d703623767550c284b1b3f8b4b72bb46a39543b6", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/d703623767550c284b1b3f8b4b72bb46a39543b6", "committedDate": "2020-08-09T17:25:19Z", "message": "[eclipse/xtext#1777] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d703623767550c284b1b3f8b4b72bb46a39543b6", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/d703623767550c284b1b3f8b4b72bb46a39543b6", "committedDate": "2020-08-09T17:25:19Z", "message": "[eclipse/xtext#1777] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "9f15e153082c65089a529dd3245b37b31e4cf602", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/9f15e153082c65089a529dd3245b37b31e4cf602", "committedDate": "2020-08-09T17:56:01Z", "message": "[eclipse/xtext#1777] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9f15e153082c65089a529dd3245b37b31e4cf602", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/9f15e153082c65089a529dd3245b37b31e4cf602", "committedDate": "2020-08-09T17:56:01Z", "message": "[eclipse/xtext#1777] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "06f49891fbd8930b93990e8b7b33afd171772b62", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/06f49891fbd8930b93990e8b7b33afd171772b62", "committedDate": "2020-08-09T18:07:42Z", "message": "[eclipse/xtext#1777] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "06f49891fbd8930b93990e8b7b33afd171772b62", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/06f49891fbd8930b93990e8b7b33afd171772b62", "committedDate": "2020-08-09T18:07:42Z", "message": "[eclipse/xtext#1777] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "db412bb9ae7ac38029e7eb5bbbf36e0f18198cd9", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/db412bb9ae7ac38029e7eb5bbbf36e0f18198cd9", "committedDate": "2020-08-09T18:57:01Z", "message": "[eclipse/xtext#1777] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db412bb9ae7ac38029e7eb5bbbf36e0f18198cd9", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/db412bb9ae7ac38029e7eb5bbbf36e0f18198cd9", "committedDate": "2020-08-09T18:57:01Z", "message": "[eclipse/xtext#1777] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "5fbd4572a8d21835c4ef6d473f71edaae2db34e5", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/5fbd4572a8d21835c4ef6d473f71edaae2db34e5", "committedDate": "2020-08-09T18:59:21Z", "message": "[eclipse/xtext#1777] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7297fd4786a80e23bc20d41d9615ff6dbe446d3d", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/7297fd4786a80e23bc20d41d9615ff6dbe446d3d", "committedDate": "2020-08-09T19:13:06Z", "message": "[eclipse/xtext#1777] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5fbd4572a8d21835c4ef6d473f71edaae2db34e5", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/5fbd4572a8d21835c4ef6d473f71edaae2db34e5", "committedDate": "2020-08-09T18:59:21Z", "message": "[eclipse/xtext#1777] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "7297fd4786a80e23bc20d41d9615ff6dbe446d3d", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/7297fd4786a80e23bc20d41d9615ff6dbe446d3d", "committedDate": "2020-08-09T19:13:06Z", "message": "[eclipse/xtext#1777] ported xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzOTc1Nzgx", "url": "https://github.com/eclipse/xtext-core/pull/1555#pullrequestreview-463975781", "createdAt": "2020-08-10T06:14:21Z", "commit": {"oid": "7297fd4786a80e23bc20d41d9615ff6dbe446d3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjoxNDoyMVrOG-CYrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjoxNDoyMVrOG-CYrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwMzk4Mw==", "bodyText": "this. not needed here, and on the lines 109, 126, 127, 131, and 134.", "url": "https://github.com/eclipse/xtext-core/pull/1555#discussion_r467703983", "createdAt": "2020-08-10T06:14:21Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/TypeReference.java", "diffHunk": "@@ -0,0 +1,296 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator.model;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.eclipse.emf.codegen.ecore.genmodel.GenClass;\n+import org.eclipse.emf.codegen.ecore.genmodel.GenPackage;\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EPackage;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xtext.generator.IXtextGeneratorLanguage;\n+import org.eclipse.xtext.xtext.generator.util.GenModelUtil2;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.Iterables;\n+\n+/**\n+ * Reference to a Java type. Use this for automatic import of types in\n+ * {@link JavaFileAccess} and {@link XtendFileAccess}.\n+ */\n+public class TypeReference {\n+\tpublic static class QualifiedClassName {\n+\t\tprivate final String packageName;\n+\n+\t\tprivate final String className;\n+\n+\t\tpublic String getPackageName() {\n+\t\t\treturn packageName;\n+\t\t}\n+\n+\t\tpublic String getClassName() {\n+\t\t\treturn className;\n+\t\t}\n+\n+\t\tpublic QualifiedClassName(String packageName, String className) {\n+\t\t\tthis.packageName = packageName;\n+\t\t\tthis.className = className;\n+\t\t}\n+\t}\n+\n+\tpublic static TypeReference typeRef(String name, TypeReference... arguments) {\n+\t\treturn new TypeReference(name, arguments == null ? null : Arrays.asList(arguments));\n+\t}\n+\n+\t/**\n+\t * @deprecated this method is available for backwards compatibility reasons\n+\t */\n+\t@Deprecated\n+\tpublic static TypeReference guessTypeRef(String name, TypeReference... arguments) {\n+\t\treturn new TypeReference(name, arguments == null ? null : Arrays.asList(arguments), false);\n+\t}\n+\n+\tpublic static TypeReference typeRef(Class<?> clazz, TypeReference... arguments) {\n+\t\treturn new TypeReference(clazz, arguments == null ? null : Arrays.asList(arguments));\n+\t}\n+\n+\tpublic static TypeReference typeRef(EClass clazz, IXtextGeneratorLanguage language) {\n+\t\tResourceSet _resourceSet = language.getResourceSet();\n+\t\treturn new TypeReference(clazz, _resourceSet);\n+\t}\n+\n+\tprivate final String packageName;\n+\n+\tprivate final List<String> simpleNames;\n+\n+\tprivate final List<TypeReference> typeArguments;\n+\n+\tpublic TypeReference(String qualifiedName) {\n+\t\tthis(qualifiedName, ((List<TypeReference>) null));\n+\t}\n+\n+\tpublic TypeReference(String qualifiedName, List<TypeReference> arguments) {\n+\t\tthis(qualifiedName, arguments, true);\n+\t}\n+\n+\tprivate TypeReference(String qualifiedName, List<TypeReference> arguments, boolean strict) {\n+\t\tthis(TypeReference.getPackageName(qualifiedName, strict), TypeReference.getClassName(qualifiedName, strict),\n+\t\t\t\targuments);\n+\t}\n+\n+\tpublic TypeReference(String packageName, String className) {\n+\t\tthis(packageName, className, null);\n+\t}\n+\n+\tpublic TypeReference(String packageName, String className, List<TypeReference> arguments) {\n+\t\tif (packageName == null) {\n+\t\t\tthrow new IllegalArgumentException(\"Invalid package name: \" + packageName);\n+\t\t}\n+\t\tif (className == null) {\n+\t\t\tthrow new IllegalArgumentException(\"Invalid class name: \" + className);\n+\t\t}\n+\t\tthis.packageName = packageName;\n+\t\tthis.simpleNames = Arrays.asList(className.split(\"\\\\.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7297fd4786a80e23bc20d41d9615ff6dbe446d3d"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzOTc5NTcy", "url": "https://github.com/eclipse/xtext-core/pull/1555#pullrequestreview-463979572", "createdAt": "2020-08-10T06:25:24Z", "commit": {"oid": "7297fd4786a80e23bc20d41d9615ff6dbe446d3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjoyNToyNVrOG-CldQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjoyNToyNVrOG-CldQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwNzI1Mw==", "bodyText": "\"Couldn't initialize Xcore support. Is it on the classpath?\"\nYou might like to change the log message to the following - Couldn't initialize Xcore support. It is possible that the library \"org.eclipse.emf.ecore.xcore\" is missing from the project classpath.", "url": "https://github.com/eclipse/xtext-core/pull/1555#discussion_r467707253", "createdAt": "2020-08-10T06:25:25Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/XtextGeneratorResourceSetInitializer.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator;\n+\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.emf.codegen.ecore.genmodel.GenModel;\n+import org.eclipse.emf.codegen.ecore.genmodel.GenModelPackage;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.common.util.WrappedException;\n+import org.eclipse.emf.ecore.EPackage;\n+import org.eclipse.emf.ecore.EcorePackage;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.mwe.utils.GenModelHelper;\n+import org.eclipse.emf.mwe.utils.StandaloneSetup;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+\n+import com.google.common.collect.Iterables;\n+\n+/**\n+ * Initializes a resource set in order to load the grammar of a language. The\n+ * resources to include are specified via\n+ * {@link XtextGeneratorLanguage#addReferencedResource(String)}.\n+ */\n+public class XtextGeneratorResourceSetInitializer {\n+\tprivate static final Logger LOG = Logger.getLogger(XtextGeneratorResourceSetInitializer.class);\n+\n+\tpublic void initialize(ResourceSet resourceSet, List<String> referencedResources) {\n+\t\tStandaloneSetup delegate = new StandaloneSetup();\n+\t\tdelegate.setResourceSet(resourceSet);\n+\t\tresourceSet.getPackageRegistry().put(EcorePackage.eNS_URI, EcorePackage.eINSTANCE);\n+\t\treferencedResources.forEach((String it) -> {\n+\t\t\tloadResource(it, resourceSet);\n+\t\t});\n+\t\tregisterGenModels(resourceSet);\n+\t\tregisterEPackages(resourceSet);\n+\t}\n+\n+\tprivate void loadResource(String loadedResource, ResourceSet resourceSet) {\n+\t\tURI loadedResourceUri = URI.createURI(loadedResource);\n+\t\tensureResourceCanBeLoaded(loadedResourceUri, resourceSet);\n+\t\tresourceSet.getResource(loadedResourceUri, true);\n+\t}\n+\n+\tprivate void ensureResourceCanBeLoaded(URI loadedResource, ResourceSet resourceSet) {\n+\t\tString fileExtension = loadedResource.fileExtension();\n+\t\tif (fileExtension != null) {\n+\t\t\tswitch (fileExtension) {\n+\t\t\tcase \"genmodel\":\n+\t\t\t\tGenModelPackage.eINSTANCE.getEFactoryInstance();\n+\t\t\t\tIResourceServiceProvider resourceServiceProvider = IResourceServiceProvider.Registry.INSTANCE\n+\t\t\t\t\t\t.getResourceServiceProvider(loadedResource);\n+\t\t\t\tif (resourceServiceProvider == null) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tClass<?> genModelSupport = Class.forName(\"org.eclipse.emf.codegen.ecore.xtext.GenModelSupport\");\n+\t\t\t\t\t\tObject instance = genModelSupport.getDeclaredConstructor().newInstance();\n+\t\t\t\t\t\tgenModelSupport.getDeclaredMethod(\"createInjectorAndDoEMFRegistration\").invoke(instance);\n+\t\t\t\t\t} catch (ClassNotFoundException e) {\n+\t\t\t\t\t\tLOG.debug(\n+\t\t\t\t\t\t\t\t\"org.eclipse.emf.codegen.ecore.xtext.GenModelSupport not found, GenModels will not be indexed\");\n+\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\tLOG.error(\"Couldn't initialize GenModel support.\", e);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn;\n+\t\t\tcase \"ecore\":\n+\t\t\t\tIResourceServiceProvider resourceServiceProvider2 = IResourceServiceProvider.Registry.INSTANCE\n+\t\t\t\t\t\t.getResourceServiceProvider(loadedResource);\n+\t\t\t\tif (resourceServiceProvider2 == null) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tClass<?> ecore = Class.forName(\"org.eclipse.xtext.ecore.EcoreSupportStandaloneSetup\");\n+\t\t\t\t\t\tecore.getDeclaredMethod(\"setup\", new Class[] {}).invoke(null);\n+\t\t\t\t\t} catch (ClassNotFoundException e) {\n+\t\t\t\t\t\tLOG.error(\"Couldn't initialize Ecore support. Is 'org.eclipse.xtext.ecore' on the classpath?\");\n+\t\t\t\t\t\tLOG.debug(e.getMessage(), e);\n+\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\tLOG.error(\"Couldn't initialize Ecore support.\", e);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn;\n+\t\t\tcase \"xcore\":\n+\t\t\t\tIResourceServiceProvider resourceServiceProvider3 = IResourceServiceProvider.Registry.INSTANCE\n+\t\t\t\t\t\t.getResourceServiceProvider(loadedResource);\n+\t\t\t\tif (resourceServiceProvider3 == null) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tClass<?> xcore = Class.forName(\"org.eclipse.emf.ecore.xcore.XcoreStandaloneSetup\");\n+\t\t\t\t\t\txcore.getDeclaredMethod(\"doSetup\", new Class[] {}).invoke(null);\n+\t\t\t\t\t} catch (ClassNotFoundException e) {\n+\t\t\t\t\t\tLOG.error(\"Couldn't initialize Xcore support. Is it on the classpath?\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7297fd4786a80e23bc20d41d9615ff6dbe446d3d"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzOTgxMDMx", "url": "https://github.com/eclipse/xtext-core/pull/1555#pullrequestreview-463981031", "createdAt": "2020-08-10T06:29:33Z", "commit": {"oid": "7297fd4786a80e23bc20d41d9615ff6dbe446d3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjoyOTozM1rOG-CqHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjoyOTozM1rOG-CqHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcwODQ0NA==", "bodyText": "\"Couldn't initialize Ecore support. Is 'org.eclipse.xtext.ecore' on the classpath?\" -> Couldn't initialize Ecore support. It is possible that the library \"org.eclipse.xtext.ecore\" is missing from the project classpath.", "url": "https://github.com/eclipse/xtext-core/pull/1555#discussion_r467708444", "createdAt": "2020-08-10T06:29:33Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/XtextGeneratorResourceSetInitializer.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator;\n+\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.emf.codegen.ecore.genmodel.GenModel;\n+import org.eclipse.emf.codegen.ecore.genmodel.GenModelPackage;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.common.util.WrappedException;\n+import org.eclipse.emf.ecore.EPackage;\n+import org.eclipse.emf.ecore.EcorePackage;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.mwe.utils.GenModelHelper;\n+import org.eclipse.emf.mwe.utils.StandaloneSetup;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+\n+import com.google.common.collect.Iterables;\n+\n+/**\n+ * Initializes a resource set in order to load the grammar of a language. The\n+ * resources to include are specified via\n+ * {@link XtextGeneratorLanguage#addReferencedResource(String)}.\n+ */\n+public class XtextGeneratorResourceSetInitializer {\n+\tprivate static final Logger LOG = Logger.getLogger(XtextGeneratorResourceSetInitializer.class);\n+\n+\tpublic void initialize(ResourceSet resourceSet, List<String> referencedResources) {\n+\t\tStandaloneSetup delegate = new StandaloneSetup();\n+\t\tdelegate.setResourceSet(resourceSet);\n+\t\tresourceSet.getPackageRegistry().put(EcorePackage.eNS_URI, EcorePackage.eINSTANCE);\n+\t\treferencedResources.forEach((String it) -> {\n+\t\t\tloadResource(it, resourceSet);\n+\t\t});\n+\t\tregisterGenModels(resourceSet);\n+\t\tregisterEPackages(resourceSet);\n+\t}\n+\n+\tprivate void loadResource(String loadedResource, ResourceSet resourceSet) {\n+\t\tURI loadedResourceUri = URI.createURI(loadedResource);\n+\t\tensureResourceCanBeLoaded(loadedResourceUri, resourceSet);\n+\t\tresourceSet.getResource(loadedResourceUri, true);\n+\t}\n+\n+\tprivate void ensureResourceCanBeLoaded(URI loadedResource, ResourceSet resourceSet) {\n+\t\tString fileExtension = loadedResource.fileExtension();\n+\t\tif (fileExtension != null) {\n+\t\t\tswitch (fileExtension) {\n+\t\t\tcase \"genmodel\":\n+\t\t\t\tGenModelPackage.eINSTANCE.getEFactoryInstance();\n+\t\t\t\tIResourceServiceProvider resourceServiceProvider = IResourceServiceProvider.Registry.INSTANCE\n+\t\t\t\t\t\t.getResourceServiceProvider(loadedResource);\n+\t\t\t\tif (resourceServiceProvider == null) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tClass<?> genModelSupport = Class.forName(\"org.eclipse.emf.codegen.ecore.xtext.GenModelSupport\");\n+\t\t\t\t\t\tObject instance = genModelSupport.getDeclaredConstructor().newInstance();\n+\t\t\t\t\t\tgenModelSupport.getDeclaredMethod(\"createInjectorAndDoEMFRegistration\").invoke(instance);\n+\t\t\t\t\t} catch (ClassNotFoundException e) {\n+\t\t\t\t\t\tLOG.debug(\n+\t\t\t\t\t\t\t\t\"org.eclipse.emf.codegen.ecore.xtext.GenModelSupport not found, GenModels will not be indexed\");\n+\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\tLOG.error(\"Couldn't initialize GenModel support.\", e);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\treturn;\n+\t\t\tcase \"ecore\":\n+\t\t\t\tIResourceServiceProvider resourceServiceProvider2 = IResourceServiceProvider.Registry.INSTANCE\n+\t\t\t\t\t\t.getResourceServiceProvider(loadedResource);\n+\t\t\t\tif (resourceServiceProvider2 == null) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tClass<?> ecore = Class.forName(\"org.eclipse.xtext.ecore.EcoreSupportStandaloneSetup\");\n+\t\t\t\t\t\tecore.getDeclaredMethod(\"setup\", new Class[] {}).invoke(null);\n+\t\t\t\t\t} catch (ClassNotFoundException e) {\n+\t\t\t\t\t\tLOG.error(\"Couldn't initialize Ecore support. Is 'org.eclipse.xtext.ecore' on the classpath?\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7297fd4786a80e23bc20d41d9615ff6dbe446d3d"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzOTkwOTE3", "url": "https://github.com/eclipse/xtext-core/pull/1555#pullrequestreview-463990917", "createdAt": "2020-08-10T06:54:57Z", "commit": {"oid": "7297fd4786a80e23bc20d41d9615ff6dbe446d3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjo1NDo1N1rOG-DJvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjo1NDo1N1rOG-DJvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxNjU0Mg==", "bodyText": "For CNF, an error message is logged on lines 83, and 98. Here, a debug message is logged\nJust to be consistent with other log messages, you might like to change it to - Couldn't initialize Ecore support. It is possible that the library \"org.eclipse.xtext.ecore\" is missing from the project classpath.", "url": "https://github.com/eclipse/xtext-core/pull/1555#discussion_r467716542", "createdAt": "2020-08-10T06:54:57Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/XtextGeneratorResourceSetInitializer.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator;\n+\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.emf.codegen.ecore.genmodel.GenModel;\n+import org.eclipse.emf.codegen.ecore.genmodel.GenModelPackage;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.common.util.WrappedException;\n+import org.eclipse.emf.ecore.EPackage;\n+import org.eclipse.emf.ecore.EcorePackage;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.mwe.utils.GenModelHelper;\n+import org.eclipse.emf.mwe.utils.StandaloneSetup;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+\n+import com.google.common.collect.Iterables;\n+\n+/**\n+ * Initializes a resource set in order to load the grammar of a language. The\n+ * resources to include are specified via\n+ * {@link XtextGeneratorLanguage#addReferencedResource(String)}.\n+ */\n+public class XtextGeneratorResourceSetInitializer {\n+\tprivate static final Logger LOG = Logger.getLogger(XtextGeneratorResourceSetInitializer.class);\n+\n+\tpublic void initialize(ResourceSet resourceSet, List<String> referencedResources) {\n+\t\tStandaloneSetup delegate = new StandaloneSetup();\n+\t\tdelegate.setResourceSet(resourceSet);\n+\t\tresourceSet.getPackageRegistry().put(EcorePackage.eNS_URI, EcorePackage.eINSTANCE);\n+\t\treferencedResources.forEach((String it) -> {\n+\t\t\tloadResource(it, resourceSet);\n+\t\t});\n+\t\tregisterGenModels(resourceSet);\n+\t\tregisterEPackages(resourceSet);\n+\t}\n+\n+\tprivate void loadResource(String loadedResource, ResourceSet resourceSet) {\n+\t\tURI loadedResourceUri = URI.createURI(loadedResource);\n+\t\tensureResourceCanBeLoaded(loadedResourceUri, resourceSet);\n+\t\tresourceSet.getResource(loadedResourceUri, true);\n+\t}\n+\n+\tprivate void ensureResourceCanBeLoaded(URI loadedResource, ResourceSet resourceSet) {\n+\t\tString fileExtension = loadedResource.fileExtension();\n+\t\tif (fileExtension != null) {\n+\t\t\tswitch (fileExtension) {\n+\t\t\tcase \"genmodel\":\n+\t\t\t\tGenModelPackage.eINSTANCE.getEFactoryInstance();\n+\t\t\t\tIResourceServiceProvider resourceServiceProvider = IResourceServiceProvider.Registry.INSTANCE\n+\t\t\t\t\t\t.getResourceServiceProvider(loadedResource);\n+\t\t\t\tif (resourceServiceProvider == null) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tClass<?> genModelSupport = Class.forName(\"org.eclipse.emf.codegen.ecore.xtext.GenModelSupport\");\n+\t\t\t\t\t\tObject instance = genModelSupport.getDeclaredConstructor().newInstance();\n+\t\t\t\t\t\tgenModelSupport.getDeclaredMethod(\"createInjectorAndDoEMFRegistration\").invoke(instance);\n+\t\t\t\t\t} catch (ClassNotFoundException e) {\n+\t\t\t\t\t\tLOG.debug(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7297fd4786a80e23bc20d41d9615ff6dbe446d3d"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzOTkyMDk1", "url": "https://github.com/eclipse/xtext-core/pull/1555#pullrequestreview-463992095", "createdAt": "2020-08-10T06:57:45Z", "commit": {"oid": "7297fd4786a80e23bc20d41d9615ff6dbe446d3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjo1Nzo0NVrOG-DNhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwNjo1Nzo0NVrOG-DNhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxNzUxMQ==", "bodyText": "I assume Exceptions.sneakyThrow(e); was used intentionally here.", "url": "https://github.com/eclipse/xtext-core/pull/1555#discussion_r467717511", "createdAt": "2020-08-10T06:57:45Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/XtextDirectoryCleaner.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.emf.mwe.utils.DirectoryCleaner;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.eclipse.xtext.xtext.generator.model.IXtextGeneratorFileSystemAccess;\n+import org.eclipse.xtext.xtext.generator.model.project.ISubProjectConfig;\n+import org.eclipse.xtext.xtext.generator.model.project.IXtextProjectConfig;\n+\n+import com.google.common.base.Predicates;\n+import com.google.common.collect.FluentIterable;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+\n+/**\n+ * This component cleans all directories for generated code according to the\n+ * project configuration (usually 'src-gen' for plain layout and\n+ * 'src/main/xtext-gen' for Maven/Gradle layout).\n+ * \n+ * @noextend This class should not be extended by clients.\n+ */\n+public class XtextDirectoryCleaner implements IGuiceAwareGeneratorComponent {\n+\t@Inject\n+\tprivate IXtextProjectConfig config;\n+\n+\tprivate boolean enabled = true;\n+\n+\tprivate boolean useDefaultExcludes = true;\n+\n+\tprivate List<String> excludes = new ArrayList<>();\n+\n+\tprivate List<String> extraDirectories = new ArrayList<>();\n+\n+\tpublic void addExtraDirectory(String directory) {\n+\t\textraDirectories.add(directory);\n+\t}\n+\n+\tpublic void addExclude(String exclude) {\n+\t\texcludes.add(exclude);\n+\t}\n+\n+\tpublic void clean() {\n+\t\tif (!enabled) {\n+\t\t\treturn;\n+\t\t}\n+\t\tArrayList<String> directories = new ArrayList<>();\n+\t\tIterable<IXtextGeneratorFileSystemAccess> fsas = Iterables.concat(\n+\t\t\t\tLists.transform(config.getEnabledProjects(), ISubProjectConfig::getSrcGen),\n+\t\t\t\tLists.newArrayList(config.getRuntime().getEcoreModel()));\n+\t\tIterables.addAll(directories, FluentIterable.from(fsas).filter(Predicates.notNull())\n+\t\t\t\t.transform(IXtextGeneratorFileSystemAccess::getPath).filter(it -> new File(it).isDirectory()));\n+\t\tIterables.addAll(directories, extraDirectories);\n+\t\tDirectoryCleaner delegate = new DirectoryCleaner();\n+\t\tdelegate.setUseDefaultExcludes(useDefaultExcludes);\n+\t\texcludes.forEach(it -> delegate.addExclude(it));\n+\t\tfor (String it : directories) {\n+\t\t\ttry {\n+\t\t\t\tdelegate.cleanFolder(it);\n+\t\t\t} catch (FileNotFoundException e) {\n+\t\t\t\tthrow Exceptions.sneakyThrow(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7297fd4786a80e23bc20d41d9615ff6dbe446d3d"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMTkyNDQx", "url": "https://github.com/eclipse/xtext-core/pull/1555#pullrequestreview-473192441", "createdAt": "2020-08-24T07:45:02Z", "commit": {"oid": "7297fd4786a80e23bc20d41d9615ff6dbe446d3d"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzo0NTowM1rOHFYO6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzo0Nzo1N1rOHFYV9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQwMTk2Mg==", "bodyText": "Indentation mixed up?", "url": "https://github.com/eclipse/xtext-core/pull/1555#discussion_r475401962", "createdAt": "2020-08-24T07:45:03Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/resource/AbstractXtextResourceSetTest.java", "diffHunk": "@@ -0,0 +1,261 @@\n+/*******************************************************************************\n+ * Copyright (c) 2012, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.resource;\n+\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.junit.Test;\n+\n+public abstract class AbstractXtextResourceSetTest extends AbstractResourceSetTest {\n+\t\n+\t@Override\n+\t  protected abstract XtextResourceSet createEmptyResourceSet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7297fd4786a80e23bc20d41d9615ff6dbe446d3d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQwMjU5OA==", "bodyText": "I'm not a big fan of this newHashMap(Pair(..)) stuff... given this is only a test, I'm ok with it though.", "url": "https://github.com/eclipse/xtext-core/pull/1555#discussion_r475402598", "createdAt": "2020-08-24T07:46:20Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/resource/containers/LiveShadowedChunkedContainerTest.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/**\n+ * Copyright (c) 2017, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.resource.containers;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.xtext.naming.QualifiedName;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+import org.eclipse.xtext.resource.IResourceDescription;\n+import org.eclipse.xtext.resource.LiveContainerTestLanguageInjectorProvider;\n+import org.eclipse.xtext.resource.XtextResourceSet;\n+import org.eclipse.xtext.resource.impl.ChunkedResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.LiveShadowedChunkedResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsData;\n+import org.eclipse.xtext.resource.liveContainerTestLanguage.LiveContainerTestLanguagePackage;\n+import org.eclipse.xtext.resource.liveContainerTestLanguage.Model;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.testing.util.ParseHelper;\n+import org.eclipse.xtext.workspace.ProjectConfigAdapter;\n+import org.eclipse.xtext.workspace.WorkspaceConfig;\n+import org.eclipse.xtext.xbase.lib.CollectionLiterals;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+import org.eclipse.xtext.xbase.lib.Pair;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(LiveContainerTestLanguageInjectorProvider.class)\n+public class LiveShadowedChunkedContainerTest {\n+\t@Inject\n+\tprivate ParseHelper<Model> parseHelper;\n+\n+\t@Inject\n+\tprivate Provider<XtextResourceSet> resourceSetProvider;\n+\n+\t@Inject\n+\tprivate IResourceDescription.Manager resourceDescriptionManager;\n+\n+\t@Inject\n+\tprivate Provider<LiveShadowedChunkedResourceDescriptions> provider;\n+\n+\tprivate WorkspaceConfig workspaceConfig;\n+\n+\tprivate ProjectConfig fooProject;\n+\n+\tprivate ProjectConfig barProject;\n+\n+\tprivate URI fooURI;\n+\n+\tprivate URI barURI;\n+\n+\tprivate XtextResourceSet rs1;\n+\n+\tprivate LiveShadowedChunkedContainer fooContainer;\n+\n+\tprivate LiveShadowedChunkedContainer barContainer;\n+\n+\tprivate LiveShadowedChunkedResourceDescriptions liveShadowedChunkedResourceDescriptions;\n+\n+\t@Before\n+\tpublic void setUp() throws Exception {\n+\t\tworkspaceConfig = new WorkspaceConfig();\n+\t\tfooProject = new ProjectConfig(\"foo\", workspaceConfig);\n+\t\tbarProject = new ProjectConfig(\"bar\", workspaceConfig);\n+\t\tXtextResourceSet rs0 = resourceSetProvider.get();\n+\t\tfooURI = IterableExtensions.head(fooProject.getSourceFolders()).getPath().trimSegments(1)\n+\t\t\t\t.appendSegment(\"foo.livecontainertestlanguage\");\n+\t\tbarURI = IterableExtensions.head(barProject.getSourceFolders()).getPath().trimSegments(1)\n+\t\t\t\t.appendSegment(\"bar.livecontainertestlanguage\");\n+\t\tMap<String, ResourceDescriptionsData> chunks = Collections.unmodifiableMap(CollectionLiterals.newHashMap(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7297fd4786a80e23bc20d41d9615ff6dbe446d3d"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQwMzc2NQ==", "bodyText": "Yes, your assumption is correct. We could consider throwing a RuntimeIOException though it wouldn't change much.", "url": "https://github.com/eclipse/xtext-core/pull/1555#discussion_r475403765", "createdAt": "2020-08-24T07:47:57Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/XtextDirectoryCleaner.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.emf.mwe.utils.DirectoryCleaner;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.eclipse.xtext.xtext.generator.model.IXtextGeneratorFileSystemAccess;\n+import org.eclipse.xtext.xtext.generator.model.project.ISubProjectConfig;\n+import org.eclipse.xtext.xtext.generator.model.project.IXtextProjectConfig;\n+\n+import com.google.common.base.Predicates;\n+import com.google.common.collect.FluentIterable;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+\n+/**\n+ * This component cleans all directories for generated code according to the\n+ * project configuration (usually 'src-gen' for plain layout and\n+ * 'src/main/xtext-gen' for Maven/Gradle layout).\n+ * \n+ * @noextend This class should not be extended by clients.\n+ */\n+public class XtextDirectoryCleaner implements IGuiceAwareGeneratorComponent {\n+\t@Inject\n+\tprivate IXtextProjectConfig config;\n+\n+\tprivate boolean enabled = true;\n+\n+\tprivate boolean useDefaultExcludes = true;\n+\n+\tprivate List<String> excludes = new ArrayList<>();\n+\n+\tprivate List<String> extraDirectories = new ArrayList<>();\n+\n+\tpublic void addExtraDirectory(String directory) {\n+\t\textraDirectories.add(directory);\n+\t}\n+\n+\tpublic void addExclude(String exclude) {\n+\t\texcludes.add(exclude);\n+\t}\n+\n+\tpublic void clean() {\n+\t\tif (!enabled) {\n+\t\t\treturn;\n+\t\t}\n+\t\tArrayList<String> directories = new ArrayList<>();\n+\t\tIterable<IXtextGeneratorFileSystemAccess> fsas = Iterables.concat(\n+\t\t\t\tLists.transform(config.getEnabledProjects(), ISubProjectConfig::getSrcGen),\n+\t\t\t\tLists.newArrayList(config.getRuntime().getEcoreModel()));\n+\t\tIterables.addAll(directories, FluentIterable.from(fsas).filter(Predicates.notNull())\n+\t\t\t\t.transform(IXtextGeneratorFileSystemAccess::getPath).filter(it -> new File(it).isDirectory()));\n+\t\tIterables.addAll(directories, extraDirectories);\n+\t\tDirectoryCleaner delegate = new DirectoryCleaner();\n+\t\tdelegate.setUseDefaultExcludes(useDefaultExcludes);\n+\t\texcludes.forEach(it -> delegate.addExclude(it));\n+\t\tfor (String it : directories) {\n+\t\t\ttry {\n+\t\t\t\tdelegate.cleanFolder(it);\n+\t\t\t} catch (FileNotFoundException e) {\n+\t\t\t\tthrow Exceptions.sneakyThrow(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzcxNzUxMQ=="}, "originalCommit": {"oid": "7297fd4786a80e23bc20d41d9615ff6dbe446d3d"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4634, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}