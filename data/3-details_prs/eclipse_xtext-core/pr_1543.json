{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MjYyMDY0", "number": 1543, "title": "Fixed spaces after ML comments in format", "bodyText": "Replaces #199 (which was on a fork instead of a branch)", "createdAt": "2020-07-13T13:37:33Z", "url": "https://github.com/eclipse/xtext-core/pull/1543", "merged": true, "mergeCommit": {"oid": "c15d749416812272844a6951149d567d093e4129"}, "closed": true, "closedAt": "2020-08-26T09:07:24Z", "author": {"login": "tivervac"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1vsG3gFqTQ1MDQ3MDg5OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCnUAZAFqTQ3NTI1NDAzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNDcwODk5", "url": "https://github.com/eclipse/xtext-core/pull/1543#pullrequestreview-450470899", "createdAt": "2020-07-17T08:29:37Z", "commit": {"oid": "9004bca61a23cd8351bc039211cca1ede03fd98b"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODoyOTozN1rOGzKQ9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODozNzoyOFrOGzKhQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjI5ODc0Mg==", "bodyText": "where does the indentation come from?\nI cannot seem to find it in the format(IDList..) impl above.\nIt looks like the tokenization should be\n<idList><space><sl-comment incl newline since it's part of the token>\n<a>", "url": "https://github.com/eclipse/xtext-core/pull/1543#discussion_r456298742", "createdAt": "2020-07-17T08:29:37Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/formatting2/internal/CommentWithSpacesFormatterTest.xtend", "diffHunk": "@@ -0,0 +1,191 @@\n+/*******************************************************************************\n+ * Copyright (c) 2017 TypeFox GmbH (http://www.typefox.io) and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *******************************************************************************/\n+package org.eclipse.xtext.formatting2.internal\n+\n+import com.google.inject.Inject\n+import org.eclipse.xtext.formatting2.IFormattableDocument\n+import org.eclipse.xtext.formatting2.IHiddenRegionFormatting\n+import org.eclipse.xtext.formatting2.ITextReplacer\n+import org.eclipse.xtext.formatting2.ITextReplacerContext\n+import org.eclipse.xtext.formatting2.internal.formattertestlanguage.IDList\n+import org.eclipse.xtext.formatting2.internal.tests.FormatterTestLanguageInjectorProvider\n+import org.eclipse.xtext.formatting2.regionaccess.ITextRegionExtensions\n+import org.eclipse.xtext.formatting2.regionaccess.ITextSegment\n+import org.eclipse.xtext.testing.InjectWith\n+import org.eclipse.xtext.testing.XtextRunner\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+/**\n+ * @author Moritz Eysholdt - Initial contribution and API\n+ */\n+@RunWith(XtextRunner)\n+@InjectWith(FormatterTestLanguageInjectorProvider)\n+class CommentWithSpacesFormatterTest {\n+\n+\t@Inject extension GenericFormatterTester\n+\n+\tstatic class TabsAndSpacesSupportingFormatter extends GenericFormatter<IDList> {\n+\t\toverride format(IDList model, ITextRegionExtensions regionAccess, extension IFormattableDocument document) {\n+\t\t\tmodel.regionFor.keyword(\"idlist\").append[oneSpace].append[newLines = 0 highPriority]\n+\t\t}\n+\n+\t\toverride ITextReplacer createWhitespaceReplacer(ITextSegment hiddens, IHiddenRegionFormatting formatting) {\n+\t\t\treturn new TabAndSpacesSupportingWhiteSpaceReplacer(hiddens, formatting);\n+\t\t}\n+\t}\n+\n+\t@Test def void SL_inline() {\n+\t\tassertFormatted[\n+\t\t\ttoBeFormatted = '''\n+\t\t\t\tidlist  //x\n+\t\t\t\ta\n+\t\t\t'''\n+\t\t\tformatter = new TabsAndSpacesSupportingFormatter()\n+\t\t\t// space before a because we replace by newline + indentation + space\n+\t\t\t// in the TabAndSpacesSupportingWhiteSpaceReplacer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9004bca61a23cd8351bc039211cca1ede03fd98b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwMDU4Nw==", "bodyText": "We are at 2.23 now  :(", "url": "https://github.com/eclipse/xtext-core/pull/1543#discussion_r456300587", "createdAt": "2020-07-17T08:33:02Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext/src/org/eclipse/xtext/formatting2/internal/HiddenRegionReplacer.java", "diffHunk": "@@ -45,7 +45,19 @@ public HiddenRegionReplacer(IHiddenRegion region, IHiddenRegionFormatting format\n \tprotected void applyHiddenRegionFormatting(List<ITextReplacer> replacers) {\n \t\tIHiddenRegionFormatting separator = findWhitespaceThatSeparatesSemanticRegions(replacers).getFormatting();\n \n-\t\t// 1. apply indentation \n+\t\tapplyIndentation(replacers, separator);\n+\n+\t\tapplySeparatorConfiguration(separator);\n+\n+\t\tapplyPriorityAndDefaultFormatting(replacers, separator);\n+\n+\t\tintroduceNewlinesAroundMLComments(replacers);\n+\t}\n+\n+\t/**\n+\t * @since 2.15", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9004bca61a23cd8351bc039211cca1ede03fd98b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwMDg0NA==", "bodyText": "Is it correct to use identity comparison here?", "url": "https://github.com/eclipse/xtext-core/pull/1543#discussion_r456300844", "createdAt": "2020-07-17T08:33:34Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext/src/org/eclipse/xtext/formatting2/internal/HiddenRegionReplacer.java", "diffHunk": "@@ -56,26 +68,52 @@ protected void applyHiddenRegionFormatting(List<ITextReplacer> replacers) {\n \t\t} else if (dec != null) {\n \t\t\tseparator.setIndentationDecrease(dec);\n \t\t}\n+\t}\n \n-\t\t// 2. apply NewLine and space configuration to the first whitespace region that follows or contains a linewrap.  \n+\t/**\n+\t * Apply NewLine and space configuration to the first whitespace region that follows or contains a linewrap.\n+\t * @since 2.15 \n+\t */\n+\tprotected void applySeparatorConfiguration(IHiddenRegionFormatting separator) {\n \t\tseparator.setNewLinesDefault(formatting.getNewLineDefault());\n \t\tseparator.setNewLinesMax(formatting.getNewLineMax());\n \t\tseparator.setNewLinesMin(formatting.getNewLineMin());\n \t\tseparator.setSpace(formatting.getSpace());\n+\t}\n \n-\t\t// 3. apply the 'priority' configuration for all and set a default formatting\n-\t\tfor (ITextReplacer replacer : replacers)\n+\t/**\n+\t * @since 2.15\n+\t */\n+\tprotected void applyPriorityAndDefaultFormatting(List<ITextReplacer> replacers, IHiddenRegionFormatting separator) {\n+\t\tfor (int i = 0; i < replacers.size(); i++) {\n+\t\t\tITextReplacer replacer = replacers.get(i);\n \t\t\tif (replacer instanceof WhitespaceReplacer) {\n \t\t\t\tIHiddenRegionFormatting formatting2 = ((WhitespaceReplacer) replacer).getFormatting();\n \t\t\t\tformatting2.setPriority(formatting.getPriority());\n \t\t\t\tif (formatting2 != separator) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9004bca61a23cd8351bc039211cca1ede03fd98b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwMTI0OQ==", "bodyText": "The comment says don't add single spaces but all test cases do have spaces after the comments?", "url": "https://github.com/eclipse/xtext-core/pull/1543#discussion_r456301249", "createdAt": "2020-07-17T08:34:21Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext/src/org/eclipse/xtext/formatting2/internal/HiddenRegionReplacer.java", "diffHunk": "@@ -56,26 +68,52 @@ protected void applyHiddenRegionFormatting(List<ITextReplacer> replacers) {\n \t\t} else if (dec != null) {\n \t\t\tseparator.setIndentationDecrease(dec);\n \t\t}\n+\t}\n \n-\t\t// 2. apply NewLine and space configuration to the first whitespace region that follows or contains a linewrap.  \n+\t/**\n+\t * Apply NewLine and space configuration to the first whitespace region that follows or contains a linewrap.\n+\t * @since 2.15 \n+\t */\n+\tprotected void applySeparatorConfiguration(IHiddenRegionFormatting separator) {\n \t\tseparator.setNewLinesDefault(formatting.getNewLineDefault());\n \t\tseparator.setNewLinesMax(formatting.getNewLineMax());\n \t\tseparator.setNewLinesMin(formatting.getNewLineMin());\n \t\tseparator.setSpace(formatting.getSpace());\n+\t}\n \n-\t\t// 3. apply the 'priority' configuration for all and set a default formatting\n-\t\tfor (ITextReplacer replacer : replacers)\n+\t/**\n+\t * @since 2.15\n+\t */\n+\tprotected void applyPriorityAndDefaultFormatting(List<ITextReplacer> replacers, IHiddenRegionFormatting separator) {\n+\t\tfor (int i = 0; i < replacers.size(); i++) {\n+\t\t\tITextReplacer replacer = replacers.get(i);\n \t\t\tif (replacer instanceof WhitespaceReplacer) {\n \t\t\t\tIHiddenRegionFormatting formatting2 = ((WhitespaceReplacer) replacer).getFormatting();\n \t\t\t\tformatting2.setPriority(formatting.getPriority());\n \t\t\t\tif (formatting2 != separator) {\n-\t\t\t\t\tformatting2.setSpace(replacer.getRegion().getOffset() > 0 ? \" \" : \"\");\n+\t\t\t\t\tITextReplacer previous = (i == 0) ? null : replacers.get(i - 1);\n+\t\t\t\t\tITextReplacer next = (i + 1 >= replacers.size()) ? null : replacers.get(i + 1);\n+\t\t\t\t\t// Don't add single spaces after comments", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9004bca61a23cd8351bc039211cca1ede03fd98b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwMTQ0NQ==", "bodyText": "Isn't this comment true for other tokens, too?", "url": "https://github.com/eclipse/xtext-core/pull/1543#discussion_r456301445", "createdAt": "2020-07-17T08:34:45Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext/src/org/eclipse/xtext/formatting2/internal/HiddenRegionReplacer.java", "diffHunk": "@@ -56,26 +68,52 @@ protected void applyHiddenRegionFormatting(List<ITextReplacer> replacers) {\n \t\t} else if (dec != null) {\n \t\t\tseparator.setIndentationDecrease(dec);\n \t\t}\n+\t}\n \n-\t\t// 2. apply NewLine and space configuration to the first whitespace region that follows or contains a linewrap.  \n+\t/**\n+\t * Apply NewLine and space configuration to the first whitespace region that follows or contains a linewrap.\n+\t * @since 2.15 \n+\t */\n+\tprotected void applySeparatorConfiguration(IHiddenRegionFormatting separator) {\n \t\tseparator.setNewLinesDefault(formatting.getNewLineDefault());\n \t\tseparator.setNewLinesMax(formatting.getNewLineMax());\n \t\tseparator.setNewLinesMin(formatting.getNewLineMin());\n \t\tseparator.setSpace(formatting.getSpace());\n+\t}\n \n-\t\t// 3. apply the 'priority' configuration for all and set a default formatting\n-\t\tfor (ITextReplacer replacer : replacers)\n+\t/**\n+\t * @since 2.15\n+\t */\n+\tprotected void applyPriorityAndDefaultFormatting(List<ITextReplacer> replacers, IHiddenRegionFormatting separator) {\n+\t\tfor (int i = 0; i < replacers.size(); i++) {\n+\t\t\tITextReplacer replacer = replacers.get(i);\n \t\t\tif (replacer instanceof WhitespaceReplacer) {\n \t\t\t\tIHiddenRegionFormatting formatting2 = ((WhitespaceReplacer) replacer).getFormatting();\n \t\t\t\tformatting2.setPriority(formatting.getPriority());\n \t\t\t\tif (formatting2 != separator) {\n-\t\t\t\t\tformatting2.setSpace(replacer.getRegion().getOffset() > 0 ? \" \" : \"\");\n+\t\t\t\t\tITextReplacer previous = (i == 0) ? null : replacers.get(i - 1);\n+\t\t\t\t\tITextReplacer next = (i + 1 >= replacers.size()) ? null : replacers.get(i + 1);\n+\t\t\t\t\t// Don't add single spaces after comments\n+\t\t\t\t\tif (previous == null || !(previous instanceof CommentReplacer)) {\n+\t\t\t\t\t\t// Don't add spaces before ML comments because in the next step\n+\t\t\t\t\t\t// a newline will be added in front of ML comments.\n+\t\t\t\t\t\t// You don't want to end up with a ML comment on a newline that\n+\t\t\t\t\t\t// starts with a space", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9004bca61a23cd8351bc039211cca1ede03fd98b"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwMTYxMg==", "bodyText": "Not sure about this guard here.", "url": "https://github.com/eclipse/xtext-core/pull/1543#discussion_r456301612", "createdAt": "2020-07-17T08:35:03Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext/src/org/eclipse/xtext/formatting2/internal/MultilineCommentReplacer.java", "diffHunk": "@@ -36,8 +36,12 @@ public void configureWhitespace(WhitespaceReplacer leading, WhitespaceReplacer t\n \t\t\tenforceNewLine(leading);\n \t\t\tenforceNewLine(trailing);\n \t\t} else {\n-\t\t\tenforceSingleSpace(leading);\n-\t\t\tenforceSingleSpace(trailing);\n+\t\t\tif (!leading.getRegion().isMultiline()) {\n+\t\t\t\tenforceSingleSpace(leading);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9004bca61a23cd8351bc039211cca1ede03fd98b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwMjkxMg==", "bodyText": "Please add test cases with multi-line multiline comments.\nidlist  /* i\nj *//*y*/  a\n\nidlist  /* i\nj *//*x\n               y*/  a\n\nidlist  /* n *//*x\n               y*/  a", "url": "https://github.com/eclipse/xtext-core/pull/1543#discussion_r456302912", "createdAt": "2020-07-17T08:37:28Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/formatting2/internal/CommentFormatterTest.xtend", "diffHunk": "@@ -66,14 +69,24 @@ class CommentFormatterTest {\n \t\t\ttoBeFormatted = '''\n \t\t\t\tidlist  /*x*/  a\n \t\t\t'''\n-\t\t\tformatter = [ IDList model, extension regions, extension document |\n-\t\t\t\tmodel.regionFor.keyword(\"idlist\").append[oneSpace]\n-\t\t\t]\n+\t\t\tformatter = new CustomFormatter()\n \t\t\texpectation = '''\n \t\t\t\tidlist /*x*/ a\n \t\t\t'''\n \t\t]\n \t}\n+\n+\t@Test def void MLSL_double_inline() {\n+\t\tassertFormatted[\n+\t\t\ttoBeFormatted = '''\n+\t\t\t\tidlist  /*x*//*y*/  a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9004bca61a23cd8351bc039211cca1ede03fd98b"}, "originalPosition": 64}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5c4d9b4f5fe971356120832af95e75ca62a44377", "author": {"user": {"login": "tivervac", "name": "Titouan Vervack"}}, "url": "https://github.com/eclipse/xtext-core/commit/5c4d9b4f5fe971356120832af95e75ca62a44377", "committedDate": "2020-07-20T09:43:08Z", "message": "Review comments\n\nSigned-off-by: Titouan Vervack <titouan.vervack@sigasi.com>"}, "afterCommit": {"oid": "9e9db566e51a2b7ffd518f2c5847172b1dc33b86", "author": {"user": {"login": "tivervac", "name": "Titouan Vervack"}}, "url": "https://github.com/eclipse/xtext-core/commit/9e9db566e51a2b7ffd518f2c5847172b1dc33b86", "committedDate": "2020-08-24T11:57:58Z", "message": "Review comments\n\nSigned-off-by: Titouan Vervack <titouan.vervack@sigasi.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35269d4cf9edd9e94467922070fef6326bb88674", "author": {"user": {"login": "tivervac", "name": "Titouan Vervack"}}, "url": "https://github.com/eclipse/xtext-core/commit/35269d4cf9edd9e94467922070fef6326bb88674", "committedDate": "2020-08-26T08:10:39Z", "message": "Fixed spaces after ML comments\n\nSigned-off-by: Titouan Vervack <titouan.vervack@sigasi.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cebdd301e50b68265f335fa691ce372226e2c74", "author": {"user": {"login": "tivervac", "name": "Titouan Vervack"}}, "url": "https://github.com/eclipse/xtext-core/commit/7cebdd301e50b68265f335fa691ce372226e2c74", "committedDate": "2020-08-26T08:10:39Z", "message": "Review comments\n\nSigned-off-by: Titouan Vervack <titouan.vervack@sigasi.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "51774adca76560698ae261e5af8107a3aa2b15b3", "author": {"user": {"login": "szarnekow", "name": "Sebastian Zarnekow"}}, "url": "https://github.com/eclipse/xtext-core/commit/51774adca76560698ae261e5af8107a3aa2b15b3", "committedDate": "2020-08-24T11:58:57Z", "message": "Adjust pipelines"}, "afterCommit": {"oid": "7cebdd301e50b68265f335fa691ce372226e2c74", "author": {"user": {"login": "tivervac", "name": "Titouan Vervack"}}, "url": "https://github.com/eclipse/xtext-core/commit/7cebdd301e50b68265f335fa691ce372226e2c74", "committedDate": "2020-08-26T08:10:39Z", "message": "Review comments\n\nSigned-off-by: Titouan Vervack <titouan.vervack@sigasi.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MjU0MDMx", "url": "https://github.com/eclipse/xtext-core/pull/1543#pullrequestreview-475254031", "createdAt": "2020-08-26T08:13:14Z", "commit": {"oid": "7cebdd301e50b68265f335fa691ce372226e2c74"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4620, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}