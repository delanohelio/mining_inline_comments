{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NDgxODM2", "number": 1552, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTowMToxN1rOEWIzOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTowNDoyMlrOEWI3Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjQ4MzEyOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext/src/org/eclipse/xtext/xtext/ecoreInference/Xtext2EcoreInterpretationContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTowMToxN1rOG9SQKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMToyMDowN1rOG9WHew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkxNTM3MQ==", "bodyText": "is this an expected case or an error case?", "url": "https://github.com/eclipse/xtext-core/pull/1552#discussion_r466915371", "createdAt": "2020-08-07T09:01:17Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext/src/org/eclipse/xtext/xtext/ecoreInference/Xtext2EcoreInterpretationContext.java", "diffHunk": "@@ -190,8 +212,16 @@ public Xtext2EcoreInterpretationContext mergeSpawnedContexts(List<Xtext2EcoreInt\n \t\treturn result;\n \t}\n \n+\tpublic Collection<EClassifierInfo> getCurrentTypes() {\n+\t\treturn currentTypes;\n+\t}\n+\t\n \tpublic EClassifierInfo getCurrentCompatibleType() {\n-\t\treturn eClassifierInfos.getCompatibleTypeOf(currentTypes);\n+\t\ttry {\n+\t\t\treturn eClassifierInfos.getCompatibleTypeOf(currentTypes);\n+\t\t} catch(IllegalArgumentException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39c439b30f4491dd6ef0f02b2a911e7f178952a9"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3ODY4Mw==", "bodyText": "It used to be there. I think it doesn't really happen in practice but I wanted to keep the catch clause.", "url": "https://github.com/eclipse/xtext-core/pull/1552#discussion_r466978683", "createdAt": "2020-08-07T11:20:07Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext/src/org/eclipse/xtext/xtext/ecoreInference/Xtext2EcoreInterpretationContext.java", "diffHunk": "@@ -190,8 +212,16 @@ public Xtext2EcoreInterpretationContext mergeSpawnedContexts(List<Xtext2EcoreInt\n \t\treturn result;\n \t}\n \n+\tpublic Collection<EClassifierInfo> getCurrentTypes() {\n+\t\treturn currentTypes;\n+\t}\n+\t\n \tpublic EClassifierInfo getCurrentCompatibleType() {\n-\t\treturn eClassifierInfos.getCompatibleTypeOf(currentTypes);\n+\t\ttry {\n+\t\t\treturn eClassifierInfos.getCompatibleTypeOf(currentTypes);\n+\t\t} catch(IllegalArgumentException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkxNTM3MQ=="}, "originalCommit": {"oid": "39c439b30f4491dd6ef0f02b2a911e7f178952a9"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjQ4NTQyOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext/src/org/eclipse/xtext/xtext/ecoreInference/EClassifierInfoAccess.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTowMTo1MlrOG9SRig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMToyMDo1NlrOG9WItg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkxNTcyMg==", "bodyText": "do we want to add a since anyway?", "url": "https://github.com/eclipse/xtext-core/pull/1552#discussion_r466915722", "createdAt": "2020-08-07T09:01:52Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext/src/org/eclipse/xtext/xtext/ecoreInference/EClassifierInfoAccess.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Sebastian Zarnekow and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.xtext.ecoreInference;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * Encapsulates the access to the type information during the static analysis of Xtext grammar rules.\n+ */\n+interface EClassifierInfoAccess {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39c439b30f4491dd6ef0f02b2a911e7f178952a9"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3ODk5OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/eclipse/xtext-core/pull/1552#discussion_r466978998", "createdAt": "2020-08-07T11:20:56Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext/src/org/eclipse/xtext/xtext/ecoreInference/EClassifierInfoAccess.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Sebastian Zarnekow and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.xtext.ecoreInference;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+\n+/**\n+ * Encapsulates the access to the type information during the static analysis of Xtext grammar rules.\n+ */\n+interface EClassifierInfoAccess {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkxNTcyMg=="}, "originalCommit": {"oid": "39c439b30f4491dd6ef0f02b2a911e7f178952a9"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjQ5Mjk1OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext/src/org/eclipse/xtext/xtext/ecoreInference/EClassifierInfo.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTowNDoyMlrOG9SWaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMToyMDo1MFrOG9WIiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkxNjk2OA==", "bodyText": "do we need instanceof EClass check here?", "url": "https://github.com/eclipse/xtext-core/pull/1552#discussion_r466916968", "createdAt": "2020-08-07T09:04:22Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext/src/org/eclipse/xtext/xtext/ecoreInference/EClassifierInfo.java", "diffHunk": "@@ -299,14 +306,24 @@ public boolean isFeatureSemanticallyEqualApartFromType(EStructuralFeature f1, ES\n \t\t\treturn result;\n \t\t}\n \n-\t\tpublic boolean isFeatureSemanticallyEqualTo(EStructuralFeature f1, EStructuralFeature f2) {\n+\t\tprivate boolean isFeatureSemanticallyEqualTo(EStructuralFeature f1, EStructuralFeature f2, Set<EClassifier> f2Types) {\n+\t\t\tif (f1 == f2) {\n+\t\t\t\treturn true;\n+\t\t\t}\n \t\t\tboolean result = isFeatureSemanticallyEqualApartFromType(f1, f2);\n \t\t\tif (f1 instanceof EReference && f2 instanceof EReference) {\n \t\t\t\tEClass f1Type = (EClass) f1.getEType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39c439b30f4491dd6ef0f02b2a911e7f178952a9"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3ODk1NQ==", "bodyText": "EReferences will return an EClass from their type. I can add an explicit cast to f1 and use getEReferenceType instead.", "url": "https://github.com/eclipse/xtext-core/pull/1552#discussion_r466978955", "createdAt": "2020-08-07T11:20:50Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext/src/org/eclipse/xtext/xtext/ecoreInference/EClassifierInfo.java", "diffHunk": "@@ -299,14 +306,24 @@ public boolean isFeatureSemanticallyEqualApartFromType(EStructuralFeature f1, ES\n \t\t\treturn result;\n \t\t}\n \n-\t\tpublic boolean isFeatureSemanticallyEqualTo(EStructuralFeature f1, EStructuralFeature f2) {\n+\t\tprivate boolean isFeatureSemanticallyEqualTo(EStructuralFeature f1, EStructuralFeature f2, Set<EClassifier> f2Types) {\n+\t\t\tif (f1 == f2) {\n+\t\t\t\treturn true;\n+\t\t\t}\n \t\t\tboolean result = isFeatureSemanticallyEqualApartFromType(f1, f2);\n \t\t\tif (f1 instanceof EReference && f2 instanceof EReference) {\n \t\t\t\tEClass f1Type = (EClass) f1.getEType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkxNjk2OA=="}, "originalCommit": {"oid": "39c439b30f4491dd6ef0f02b2a911e7f178952a9"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 950, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}