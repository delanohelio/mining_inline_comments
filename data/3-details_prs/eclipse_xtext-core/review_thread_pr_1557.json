{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMDAwNjU0", "number": 1557, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODoxOTo1N1rOEZ3jLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzozMToxNlrOEbcKBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTU5OTgyOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xtext.generator/xtend-gen/org/eclipse/xtext/xtext/generator/ui/contentAssist/ContentAssistFragment2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODoxOTo1N1rOHC8csQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODoxOTo1N1rOHC8csQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg0OTU4NQ==", "bodyText": "the current api here really is bad and i did not want to break. what do you think?", "url": "https://github.com/eclipse/xtext-core/pull/1557#discussion_r472849585", "createdAt": "2020-08-19T08:19:57Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.xtext.generator/xtend-gen/org/eclipse/xtext/xtext/generator/ui/contentAssist/ContentAssistFragment2.java", "diffHunk": "@@ -241,6 +241,17 @@ protected GeneratedJavaFileAccess generateGenJavaProposalProvider() {\n         return _xblockexpression_1;\n       };\n       final ArrayList<AbstractRule> remainingRules = IterableExtensions.<AbstractRule, ArrayList<AbstractRule>>fold(this.getGrammar().getRules(), CollectionLiterals.<AbstractRule>newArrayList(), _function_1);\n+      _xblockexpression = this.generateGenJavaProposalProvider(assignments, remainingRules);\n+    }\n+    return _xblockexpression;\n+  }\n+  \n+  /**\n+   * @since 2.23\n+   */\n+  protected GeneratedJavaFileAccess generateGenJavaProposalProvider(final List<Assignment> assignments, final List<AbstractRule> remainingRules) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e38a4e32e1ac81321e80a17a2d9013dba3bee517"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjA3NTA0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/ui/contentAssist/ContentAssistFragment2.xtend", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzoyODo1NVrOHFXvqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzoyODo1NVrOHFXvqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5Mzk2Mg==", "bodyText": "While we are at it: does it make sense to extract methods getAssignments and getRemainingRules?", "url": "https://github.com/eclipse/xtext-core/pull/1557#discussion_r475393962", "createdAt": "2020-08-24T07:28:55Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/ui/contentAssist/ContentAssistFragment2.xtend", "diffHunk": "@@ -159,11 +160,25 @@ class ContentAssistFragment2 extends AbstractInheritingFragment {\n \t\t// take the non-abstract class signature for the src-gen class in case of !generateStub\n \t\t//  as proposalProviders of sub languages refer to 'grammar.proposalProviderClass',\n \t\t//  see 'getGenProposalProviderSuperClass(...)'\n+\t\tgenerateGenJavaProposalProvider(assignments, remainingRules)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e38a4e32e1ac81321e80a17a2d9013dba3bee517"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjA4MzI0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/ui/contentAssist/ContentAssistFragment2.xtend", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzozMToxNlrOHFX0MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzozMToxNlrOHFX0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5NTEyMQ==", "bodyText": "I'd like to have a better name for remainingRules, maybe just rules or rulesToComplete ? Same for the method above.", "url": "https://github.com/eclipse/xtext-core/pull/1557#discussion_r475395121", "createdAt": "2020-08-24T07:31:16Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/ui/contentAssist/ContentAssistFragment2.xtend", "diffHunk": "@@ -159,11 +160,25 @@ class ContentAssistFragment2 extends AbstractInheritingFragment {\n \t\t// take the non-abstract class signature for the src-gen class in case of !generateStub\n \t\t//  as proposalProviders of sub languages refer to 'grammar.proposalProviderClass',\n \t\t//  see 'getGenProposalProviderSuperClass(...)'\n+\t\tgenerateGenJavaProposalProvider(assignments, remainingRules)\n+\t}\n+\n+\t/**\n+\t * @since 2.23\n+\t */\n+\tprotected def GeneratedJavaFileAccess generateGenJavaProposalProvider(List<Assignment> assignments, List<AbstractRule> remainingRules) {\n \t\tval genClass =\n \t\t\tif (isGenerateStub) grammar.genProposalProviderClass else grammar.proposalProviderClass;\n \t\t\n+\t\tval superClass = grammar.genProposalProviderSuperClass\n+\t\tgenerateGenJavaProposalProvider(assignments, remainingRules, genClass, superClass)\n+\t}\n+\n+\t/**\n+\t * @since 2.23\n+\t */\n+\tprotected def GeneratedJavaFileAccess generateGenJavaProposalProvider(List<Assignment> assignments, List<AbstractRule> remainingRules, TypeReference genClass, TypeReference superClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e38a4e32e1ac81321e80a17a2d9013dba3bee517"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 956, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}