{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NTQ0NjA3", "number": 1358, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwNjowMjo0M1rODaqEhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwNjowMzo0MlrODaqErA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Mjc4ODU0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/nodemodel/BasicNodeIterable.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwNjowMjo0M1rOFhu8Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxMjoxOTozN1rOFhvz0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkxNjQzMQ==", "bodyText": "The copyright header should list your name I suppose", "url": "https://github.com/eclipse/xtext-core/pull/1358#discussion_r370916431", "createdAt": "2020-01-25T06:02:43Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/nodemodel/BasicNodeIterable.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc4699fb40b9d2e8276154729ec60ff969cda68b"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkyNjY0Mg==", "bodyText": "\"(c) 2020 Robert Lewis\" or \"(c) 2020 Robert Lewis and others\"?\nGiven the work I'm building on here, it could be argued this isn't 100% my work.", "url": "https://github.com/eclipse/xtext-core/pull/1358#discussion_r370926642", "createdAt": "2020-01-25T10:41:20Z", "author": {"login": "rablewis"}, "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/nodemodel/BasicNodeIterable.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkxNjQzMQ=="}, "originalCommit": {"oid": "dc4699fb40b9d2e8276154729ec60ff969cda68b"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzMDY0Mg==", "bodyText": "we ususally do the and others pattern", "url": "https://github.com/eclipse/xtext-core/pull/1358#discussion_r370930642", "createdAt": "2020-01-25T12:19:37Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/nodemodel/BasicNodeIterable.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkxNjQzMQ=="}, "originalCommit": {"oid": "dc4699fb40b9d2e8276154729ec60ff969cda68b"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5Mjc4ODkyOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/nodemodel/BasicNodeIteratorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQwNjowMzo0MlrOFhu8eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxNDo1NzoyN1rOFhwPSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkxNjQ3NA==", "bodyText": "The variable declaration is not necessary", "url": "https://github.com/eclipse/xtext-core/pull/1358#discussion_r370916474", "createdAt": "2020-01-25T06:03:42Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/nodemodel/BasicNodeIteratorTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *******************************************************************************/\n+package org.eclipse.xtext.nodemodel;\n+\n+import java.util.NoSuchElementException;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.impl.EObjectImpl;\n+import org.eclipse.xtext.nodemodel.impl.AbstractNode;\n+import org.eclipse.xtext.nodemodel.impl.NodeModelBuilder;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * @author Robert Lewis - Initial contribution and API\n+ */\n+public class BasicNodeIteratorTest {\n+\t\n+\tprivate static AbstractNode getSingleNode() {\n+\t\treturn new RootNode();\n+\t}\n+\t\n+\tpublic static AbstractNode nodeWithTwoSiblings() {\n+\t\tNodeModelBuilder builder = new NodeModelBuilder();\n+\t\tString text = \"alpha beta gamma\";\n+\t\t\n+\t\tRootNode root = new RootNode();\n+\t\troot.basicSetCompleteContent(text);\n+\t\t\n+\t\tEObject alpha = new EObjectImpl() {};\n+\t\tILeafNode alphaNode = builder.newLeafNode(text.indexOf(\"alpha\"), \"alpha\".length(), alpha, false, null, root);\n+\t\t\n+\t\tEObject beta = new EObjectImpl() {};\n+\t\tILeafNode betaNode = builder.newLeafNode(text.indexOf(\"beta\"), \"beta\".length(), beta, false, null, root);\n+\t\t\n+\t\tEObject gamma = new EObjectImpl() {};\n+\t\tILeafNode gammaNode = builder.newLeafNode(text.indexOf(\"gamma\"), \"gamma\".length(), gamma, false, null, root);\n+\t\t\n+\t\treturn root.basicGetFirstChild();\n+\n+\t}\n+\t\t\n+\t@Test(expected=NullPointerException.class)\n+\tpublic void testStartWithNullThrowsNPE() {\n+\t\tBasicNodeIterator it = new BasicNodeIterator(null);\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc4699fb40b9d2e8276154729ec60ff969cda68b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkzNzY3NA==", "bodyText": "Removed unnecessary variable declaration here and in other files.", "url": "https://github.com/eclipse/xtext-core/pull/1358#discussion_r370937674", "createdAt": "2020-01-25T14:57:27Z", "author": {"login": "rablewis"}, "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/nodemodel/BasicNodeIteratorTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.\n+ * All rights reserved. This program and the accompanying materials\n+ * are made available under the terms of the Eclipse Public License v1.0\n+ * which accompanies this distribution, and is available at\n+ * http://www.eclipse.org/legal/epl-v10.html\n+ *******************************************************************************/\n+package org.eclipse.xtext.nodemodel;\n+\n+import java.util.NoSuchElementException;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.impl.EObjectImpl;\n+import org.eclipse.xtext.nodemodel.impl.AbstractNode;\n+import org.eclipse.xtext.nodemodel.impl.NodeModelBuilder;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+/**\n+ * @author Robert Lewis - Initial contribution and API\n+ */\n+public class BasicNodeIteratorTest {\n+\t\n+\tprivate static AbstractNode getSingleNode() {\n+\t\treturn new RootNode();\n+\t}\n+\t\n+\tpublic static AbstractNode nodeWithTwoSiblings() {\n+\t\tNodeModelBuilder builder = new NodeModelBuilder();\n+\t\tString text = \"alpha beta gamma\";\n+\t\t\n+\t\tRootNode root = new RootNode();\n+\t\troot.basicSetCompleteContent(text);\n+\t\t\n+\t\tEObject alpha = new EObjectImpl() {};\n+\t\tILeafNode alphaNode = builder.newLeafNode(text.indexOf(\"alpha\"), \"alpha\".length(), alpha, false, null, root);\n+\t\t\n+\t\tEObject beta = new EObjectImpl() {};\n+\t\tILeafNode betaNode = builder.newLeafNode(text.indexOf(\"beta\"), \"beta\".length(), beta, false, null, root);\n+\t\t\n+\t\tEObject gamma = new EObjectImpl() {};\n+\t\tILeafNode gammaNode = builder.newLeafNode(text.indexOf(\"gamma\"), \"gamma\".length(), gamma, false, null, root);\n+\t\t\n+\t\treturn root.basicGetFirstChild();\n+\n+\t}\n+\t\t\n+\t@Test(expected=NullPointerException.class)\n+\tpublic void testStartWithNullThrowsNPE() {\n+\t\tBasicNodeIterator it = new BasicNodeIterator(null);\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkxNjQ3NA=="}, "originalCommit": {"oid": "dc4699fb40b9d2e8276154729ec60ff969cda68b"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1143, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}