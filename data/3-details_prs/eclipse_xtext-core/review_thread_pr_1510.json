{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MDU2MTM2", "number": 1510, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMTo0ODoxNlrOEA3AQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjoxNjozNVrOEA9FNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzM2NjQxOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMTo0ODoxNlrOGcZfzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo1MTowM1rOGcbURg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzMTA1NQ==", "bodyText": "@kthoms @szarnekow this is the algorithm i proposed in the bugzilla.\nwhat do you think?", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432431055", "createdAt": "2020-05-29T11:48:16Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -66,8 +74,23 @@ public void afterEach(ExtensionContext context) throws Exception {\n \t}\n \n \n+\tprivate static InjectWith getInjectWith(Class<?> cls) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29e583e16efb9a5264f427022a94ca3716130b9f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MDg3MA==", "bodyText": "Looks good to me.", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432460870", "createdAt": "2020-05-29T12:51:03Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -66,8 +74,23 @@ public void afterEach(ExtensionContext context) throws Exception {\n \t}\n \n \n+\tprivate static InjectWith getInjectWith(Class<?> cls) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzMTA1NQ=="}, "originalCommit": {"oid": "29e583e16efb9a5264f427022a94ca3716130b9f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzU1MTYwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjo1MDo1NlrOGcbUBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzo1NDo0NFrOGcdmww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MDgwNg==", "bodyText": "I'd go for org.junit.jupiter.api.extension.ExtensionConfigurationException instead.", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432460806", "createdAt": "2020-05-29T12:50:56Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -66,8 +74,23 @@ public void afterEach(ExtensionContext context) throws Exception {\n \t}\n \n \n+\tprivate static InjectWith getInjectWith(Class<?> cls) {\n+\t\tInjectWith result = null;\n+\t\twhile (cls != null) {\n+\t\t\tInjectWith iw = cls.getAnnotation(InjectWith.class);\n+\t\t\tif (iw != null) {\n+\t\t\t\tif( result != null ) {\n+\t\t\t\t\tthrow new AssertionError(\"Mulitple annotations @InjectWith are found (outer/inner class). Only a single one is supported.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29e583e16efb9a5264f427022a94ca3716130b9f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ5ODM3MQ==", "bodyText": "done", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432498371", "createdAt": "2020-05-29T13:54:44Z", "author": {"login": "frankbenoit"}, "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -66,8 +74,23 @@ public void afterEach(ExtensionContext context) throws Exception {\n \t}\n \n \n+\tprivate static InjectWith getInjectWith(Class<?> cls) {\n+\t\tInjectWith result = null;\n+\t\twhile (cls != null) {\n+\t\t\tInjectWith iw = cls.getAnnotation(InjectWith.class);\n+\t\t\tif (iw != null) {\n+\t\t\t\tif( result != null ) {\n+\t\t\t\t\tthrow new AssertionError(\"Mulitple annotations @InjectWith are found (outer/inner class). Only a single one is supported.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2MDgwNg=="}, "originalCommit": {"oid": "29e583e16efb9a5264f427022a94ca3716130b9f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mzg0NTQ2OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoxMTo0OFrOGcePdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyNTozMFrOGce_Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwODc5MA==", "bodyText": "Cosmetics: unnecessary blank line.", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432508790", "createdAt": "2020-05-29T14:11:48Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -51,11 +53,18 @@ public void beforeEach(ExtensionContext context) throws Exception {\n \t\t}\n \t\tif (injectorProvider != null) {\n \t\t\tInjector injector = injectorProvider.getInjector();\n-\t\t\tif (injector != null)\n-\t\t\t\tinjector.injectMembers(context.getRequiredTestInstance());\n+\t\t\tif (injector != null) {\n+\t\t\t\tObject testInstance = context.getRequiredTestInstance();\n+\t\t\t\tTestInstances requiredTestInstances = context.getRequiredTestInstances();\n+\t\t\t\tinjector.injectMembers(testInstance);\n+\t\t\t\tfor (Object o : requiredTestInstances.getEnclosingInstances()) {\n+\t\t\t\t\tinjector.injectMembers(o);\n+\t\t\t\t\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34dd4b74fc13a86d6c89a89be5e16d20539dca69"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUyMTAzNQ==", "bodyText": "done", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432521035", "createdAt": "2020-05-29T14:25:30Z", "author": {"login": "frankbenoit"}, "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -51,11 +53,18 @@ public void beforeEach(ExtensionContext context) throws Exception {\n \t\t}\n \t\tif (injectorProvider != null) {\n \t\t\tInjector injector = injectorProvider.getInjector();\n-\t\t\tif (injector != null)\n-\t\t\t\tinjector.injectMembers(context.getRequiredTestInstance());\n+\t\t\tif (injector != null) {\n+\t\t\t\tObject testInstance = context.getRequiredTestInstance();\n+\t\t\t\tTestInstances requiredTestInstances = context.getRequiredTestInstances();\n+\t\t\t\tinjector.injectMembers(testInstance);\n+\t\t\t\tfor (Object o : requiredTestInstances.getEnclosingInstances()) {\n+\t\t\t\t\tinjector.injectMembers(o);\n+\t\t\t\t\t", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwODc5MA=="}, "originalCommit": {"oid": "34dd4b74fc13a86d6c89a89be5e16d20539dca69"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mzg0ODQzOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoxMjoyOFrOGceRPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMzoxMFrOGce2Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwOTI0Nw==", "bodyText": "Please add a small note about the injection into @Nested objects to the JavaDoc", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432509247", "createdAt": "2020-05-29T14:12:28Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -15,7 +15,9 @@\n import org.eclipse.xtext.testing.InjectWith;\n import org.junit.jupiter.api.extension.AfterEachCallback;\n import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.TestInstances;\n \n import com.google.common.collect.ClassToInstanceMap;\n import com.google.common.collect.MutableClassToInstanceMap;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34dd4b74fc13a86d6c89a89be5e16d20539dca69"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxODczNQ==", "bodyText": "done", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432518735", "createdAt": "2020-05-29T14:23:10Z", "author": {"login": "frankbenoit"}, "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -15,7 +15,9 @@\n import org.eclipse.xtext.testing.InjectWith;\n import org.junit.jupiter.api.extension.AfterEachCallback;\n import org.junit.jupiter.api.extension.BeforeEachCallback;\n+import org.junit.jupiter.api.extension.ExtensionConfigurationException;\n import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.TestInstances;\n \n import com.google.common.collect.ClassToInstanceMap;\n import com.google.common.collect.MutableClassToInstanceMap;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwOTI0Nw=="}, "originalCommit": {"oid": "34dd4b74fc13a86d6c89a89be5e16d20539dca69"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mzg1MTQ0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoxMzowMFrOGceS6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMzoxNlrOGce2qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwOTY3NA==", "bodyText": "Cosmetics: Spacing looks inconsistent.", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432509674", "createdAt": "2020-05-29T14:13:00Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -66,8 +75,26 @@ public void afterEach(ExtensionContext context) throws Exception {\n \t}\n \n \n+\tprivate static InjectWith getInjectWith(Class<?> cls) {\n+\t\tInjectWith result = null;\n+\t\tClass<?> firstClassMatched = null;\n+\t\twhile (cls != null) {\n+\t\t\tInjectWith iw = cls.getAnnotation(InjectWith.class);\n+\t\t\tif (iw != null) {\n+\t\t\t\tif( result != null ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34dd4b74fc13a86d6c89a89be5e16d20539dca69"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxODgyNA==", "bodyText": "done", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432518824", "createdAt": "2020-05-29T14:23:16Z", "author": {"login": "frankbenoit"}, "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -66,8 +75,26 @@ public void afterEach(ExtensionContext context) throws Exception {\n \t}\n \n \n+\tprivate static InjectWith getInjectWith(Class<?> cls) {\n+\t\tInjectWith result = null;\n+\t\tClass<?> firstClassMatched = null;\n+\t\twhile (cls != null) {\n+\t\t\tInjectWith iw = cls.getAnnotation(InjectWith.class);\n+\t\t\tif (iw != null) {\n+\t\t\t\tif( result != null ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUwOTY3NA=="}, "originalCommit": {"oid": "34dd4b74fc13a86d6c89a89be5e16d20539dca69"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5Mzg1NTI3OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoxMzo1M1rOGceVQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDoyMzoyMlrOGce3CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxMDI3NA==", "bodyText": "Typo in exception message: 'Mulitple'", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432510274", "createdAt": "2020-05-29T14:13:53Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -66,8 +75,26 @@ public void afterEach(ExtensionContext context) throws Exception {\n \t}\n \n \n+\tprivate static InjectWith getInjectWith(Class<?> cls) {\n+\t\tInjectWith result = null;\n+\t\tClass<?> firstClassMatched = null;\n+\t\twhile (cls != null) {\n+\t\t\tInjectWith iw = cls.getAnnotation(InjectWith.class);\n+\t\t\tif (iw != null) {\n+\t\t\t\tif( result != null ) {\n+\t\t\t\t\tthrow new ExtensionConfigurationException(String.format(\"Mulitple annotations @InjectWith are found (%s and %s). Only a single one is supported.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34dd4b74fc13a86d6c89a89be5e16d20539dca69"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxODkyMA==", "bodyText": "done", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432518920", "createdAt": "2020-05-29T14:23:22Z", "author": {"login": "frankbenoit"}, "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -66,8 +75,26 @@ public void afterEach(ExtensionContext context) throws Exception {\n \t}\n \n \n+\tprivate static InjectWith getInjectWith(Class<?> cls) {\n+\t\tInjectWith result = null;\n+\t\tClass<?> firstClassMatched = null;\n+\t\twhile (cls != null) {\n+\t\t\tInjectWith iw = cls.getAnnotation(InjectWith.class);\n+\t\t\tif (iw != null) {\n+\t\t\t\tif( result != null ) {\n+\t\t\t\t\tthrow new ExtensionConfigurationException(String.format(\"Mulitple annotations @InjectWith are found (%s and %s). Only a single one is supported.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUxMDI3NA=="}, "originalCommit": {"oid": "34dd4b74fc13a86d6c89a89be5e16d20539dca69"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDAzMjU3OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNDo1MDoxNlrOGcgGFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNTowMjo0MFrOGcgl4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzOTE1Ng==", "bodyText": "This should be {@link Nested nested} test classes - could be, that the JavaDoc validation will fail if we do it like is is done right now.", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432539156", "createdAt": "2020-05-29T14:50:16Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -28,6 +30,9 @@\n  * The extension retrieves an {@link Injector} to inject members in the instance\n  * under test before best execution and resets registries after execution.\n  * </p>\n+ * It takes care about JUnit5 @Nested test classes. That are inner classes that might", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2c850d669c6c8ab5b32214b885e73b617be1a19"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU0NzI5OA==", "bodyText": "done", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432547298", "createdAt": "2020-05-29T15:02:40Z", "author": {"login": "frankbenoit"}, "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -28,6 +30,9 @@\n  * The extension retrieves an {@link Injector} to inject members in the instance\n  * under test before best execution and resets registries after execution.\n  * </p>\n+ * It takes care about JUnit5 @Nested test classes. That are inner classes that might", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjUzOTE1Ng=="}, "originalCommit": {"oid": "b2c850d669c6c8ab5b32214b885e73b617be1a19"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDMzOTgxOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjowOTo0MVrOGcjJEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0Mzo0MVrOGcmT4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4OTA3Mg==", "bodyText": "may be They are inner classes", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432589072", "createdAt": "2020-05-29T16:09:41Z", "author": {"login": "miklossy"}, "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -28,6 +31,9 @@\n  * The extension retrieves an {@link Injector} to inject members in the instance\n  * under test before best execution and resets registries after execution.\n  * </p>\n+ * It takes care about JUnit5 {@link Nested nested} test classes. That are inner classes that might", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MDk5NQ==", "bodyText": "done", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432640995", "createdAt": "2020-05-29T17:43:41Z", "author": {"login": "frankbenoit"}, "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -28,6 +31,9 @@\n  * The extension retrieves an {@link Injector} to inject members in the instance\n  * under test before best execution and resets registries after execution.\n  * </p>\n+ * It takes care about JUnit5 {@link Nested nested} test classes. That are inner classes that might", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU4OTA3Mg=="}, "originalCommit": {"oid": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDM0NTYwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjoxMToyOVrOGcjM8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0MzozN1rOGcmTwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MDA2NQ==", "bodyText": "Maybe: Multiple @InjectWith annotations", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432590065", "createdAt": "2020-05-29T16:11:29Z", "author": {"login": "miklossy"}, "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -66,8 +78,26 @@ public void afterEach(ExtensionContext context) throws Exception {\n \t}\n \n \n+\tprivate static InjectWith getInjectWith(Class<?> cls) {\n+\t\tInjectWith result = null;\n+\t\tClass<?> firstClassMatched = null;\n+\t\twhile (cls != null) {\n+\t\t\tInjectWith iw = cls.getAnnotation(InjectWith.class);\n+\t\t\tif (iw != null) {\n+\t\t\t\tif(result != null) {\n+\t\t\t\t\tthrow new ExtensionConfigurationException(String.format(\"Multiple annotations @InjectWith are found (%s and %s). Only a single one is supported.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MDk2Mg==", "bodyText": "done", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432640962", "createdAt": "2020-05-29T17:43:37Z", "author": {"login": "frankbenoit"}, "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/extensions/InjectionExtension.java", "diffHunk": "@@ -66,8 +78,26 @@ public void afterEach(ExtensionContext context) throws Exception {\n \t}\n \n \n+\tprivate static InjectWith getInjectWith(Class<?> cls) {\n+\t\tInjectWith result = null;\n+\t\tClass<?> firstClassMatched = null;\n+\t\twhile (cls != null) {\n+\t\t\tInjectWith iw = cls.getAnnotation(InjectWith.class);\n+\t\t\tif (iw != null) {\n+\t\t\t\tif(result != null) {\n+\t\t\t\t\tthrow new ExtensionConfigurationException(String.format(\"Multiple annotations @InjectWith are found (%s and %s). Only a single one is supported.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MDA2NQ=="}, "originalCommit": {"oid": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDM0ODA2OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNested2Test.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjoxMjoxOVrOGcjOoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0MzozNFrOGcmTng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MDQ5Ng==", "bodyText": "Copyright Date 2020", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432590496", "createdAt": "2020-05-29T16:12:19Z", "author": {"login": "miklossy"}, "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNested2Test.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 itemis AG (http://www.itemis.eu) and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MDkyNg==", "bodyText": "done", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432640926", "createdAt": "2020-05-29T17:43:34Z", "author": {"login": "frankbenoit"}, "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNested2Test.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 itemis AG (http://www.itemis.eu) and others.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MDQ5Ng=="}, "originalCommit": {"oid": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDM1MDc5OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNested2Test.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjoxMzowNlrOGcjQZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0MzozMVrOGcmThw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MDk1MQ==", "bodyText": "Add . at the end of the sentence.", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432590951", "createdAt": "2020-05-29T16:13:06Z", "author": {"login": "miklossy"}, "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNested2Test.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.testing.tests;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.eclipse.xtext.testing.IInjectorProvider;\n+import org.eclipse.xtext.testing.IRegistryConfigurator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.extensions.InjectionExtension;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+\n+/**\n+ * Test for {@link InjectionExtension}.\n+ * Injection working for nested test classes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MDkwMw==", "bodyText": "done", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432640903", "createdAt": "2020-05-29T17:43:31Z", "author": {"login": "frankbenoit"}, "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNested2Test.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.testing.tests;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.eclipse.xtext.testing.IInjectorProvider;\n+import org.eclipse.xtext.testing.IRegistryConfigurator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.extensions.InjectionExtension;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+\n+/**\n+ * Test for {@link InjectionExtension}.\n+ * Injection working for nested test classes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MDk1MQ=="}, "originalCommit": {"oid": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDM1MTEwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNested2Test.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjoxMzoxMlrOGcjQmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0MzoyM1rOGcmTNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MTAwMQ==", "bodyText": "Add . at the end of the sentence.", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432591001", "createdAt": "2020-05-29T16:13:12Z", "author": {"login": "miklossy"}, "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNested2Test.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.testing.tests;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.eclipse.xtext.testing.IInjectorProvider;\n+import org.eclipse.xtext.testing.IRegistryConfigurator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.extensions.InjectionExtension;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+\n+/**\n+ * Test for {@link InjectionExtension}.\n+ * Injection working for nested test classes\n+ * Here the @InjectWith is attached to the inner class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MDgyMg==", "bodyText": "done", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432640822", "createdAt": "2020-05-29T17:43:23Z", "author": {"login": "frankbenoit"}, "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNested2Test.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.testing.tests;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.eclipse.xtext.testing.IInjectorProvider;\n+import org.eclipse.xtext.testing.IRegistryConfigurator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.extensions.InjectionExtension;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+\n+/**\n+ * Test for {@link InjectionExtension}.\n+ * Injection working for nested test classes\n+ * Here the @InjectWith is attached to the inner class", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MTAwMQ=="}, "originalCommit": {"oid": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDM1Mzk0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNestedTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjoxNDowN1rOGcjSiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0MzoxOVrOGcmTDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MTQ5OQ==", "bodyText": "Copyright Date 2020", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432591499", "createdAt": "2020-05-29T16:14:07Z", "author": {"login": "miklossy"}, "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNestedTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 itemis AG (http://www.itemis.eu) and others.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MDc4MQ==", "bodyText": "done", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432640781", "createdAt": "2020-05-29T17:43:19Z", "author": {"login": "frankbenoit"}, "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNestedTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 itemis AG (http://www.itemis.eu) and others.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MTQ5OQ=="}, "originalCommit": {"oid": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDM1NTc1OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNestedTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjoxNDozOFrOGcjTvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0MzoxMlrOGcmSyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MTgwNw==", "bodyText": "Add . at the end of the sentence.", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432591807", "createdAt": "2020-05-29T16:14:38Z", "author": {"login": "miklossy"}, "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNestedTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.testing.tests;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.eclipse.xtext.testing.IInjectorProvider;\n+import org.eclipse.xtext.testing.IRegistryConfigurator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.extensions.InjectionExtension;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+\n+/**\n+ * Test for {@link InjectionExtension}.\n+ * Injection working for nested test classes.\n+ * Here the @InjectWith is attached to the outer class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MDcxNA==", "bodyText": "done", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432640714", "createdAt": "2020-05-29T17:43:12Z", "author": {"login": "frankbenoit"}, "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNestedTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.testing.tests;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.eclipse.xtext.testing.IInjectorProvider;\n+import org.eclipse.xtext.testing.IRegistryConfigurator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.extensions.InjectionExtension;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+\n+/**\n+ * Test for {@link InjectionExtension}.\n+ * Injection working for nested test classes.\n+ * Here the @InjectWith is attached to the outer class", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5MTgwNw=="}, "originalCommit": {"oid": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NDM2MjEyOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNested2Test.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNjoxNjozNlrOGcjX6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo0Mjo1MVrOGcmSCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5Mjg3Mw==", "bodyText": "Please remove the unnecessary empty lines.", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432592873", "createdAt": "2020-05-29T16:16:36Z", "author": {"login": "miklossy"}, "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNested2Test.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.testing.tests;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.eclipse.xtext.testing.IInjectorProvider;\n+import org.eclipse.xtext.testing.IRegistryConfigurator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.extensions.InjectionExtension;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+\n+/**\n+ * Test for {@link InjectionExtension}.\n+ * Injection working for nested test classes\n+ * Here the @InjectWith is attached to the inner class\n+ * \n+ * @author Frank Benoit - Initial contribution and API\n+ */\n+@ExtendWith(InjectionExtension.class)\n+public class InjectionExtensionNested2Test {\n+\t\n+\tpublic static class MyInjectorProvider implements IRegistryConfigurator, IInjectorProvider {\n+\n+\t\t@Override\n+\t\tpublic Injector getInjector() {\n+\t\t\treturn Guice.createInjector(new Module(){\n+\t\t\t\t@Override\n+\t\t\t\tpublic void configure(Binder binder) {\n+\t\t\t\t\tbinder.bind(String.class)\n+\t\t\t\t\t.toInstance(INJECTED);\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void setupRegistry() {\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void restoreRegistry() {\n+\t\t}\n+\t}\n+\n+\tprivate static final String NOT_INJECTED = \"not-injected\";\n+\tprivate static final String INJECTED = \"injected\";\n+\t\n+\t@Inject \n+\tString testValue1 = NOT_INJECTED;\n+\t\n+\t@Test\n+\tvoid outerTest() {\n+\t\tassertEquals(NOT_INJECTED, testValue1);\n+\t}\n+\t\n+\t@Nested\n+\t@InjectWith(InjectionExtensionNested2Test.MyInjectorProvider.class)\n+\tclass NestedClass {\n+\t\t\n+\t\t@Inject \n+\t\tString testValue2 = \"\";\n+\n+\t\t@BeforeEach\n+\t\tpublic void setUp () {\n+\t\t\tassertEquals(INJECTED, testValue1);\n+\t\t\tassertEquals(INJECTED, testValue2);\n+\t\t}\n+\t\t\n+\t\t@Test\n+\t\tvoid innerTest() {\n+\t\t\tassertEquals(INJECTED, testValue1);\n+\t\t\tassertEquals(INJECTED, testValue2);\n+\t\t}\n+\t}\n+\t\n+\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0MDUyMQ==", "bodyText": "done", "url": "https://github.com/eclipse/xtext-core/pull/1510#discussion_r432640521", "createdAt": "2020-05-29T17:42:51Z", "author": {"login": "frankbenoit"}, "path": "org.eclipse.xtext.testing/tests/org/eclipse/xtext/testing/tests/InjectionExtensionNested2Test.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*******************************************************************************\n+ * Copyright (c) 2018 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.testing.tests;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.eclipse.xtext.testing.IInjectorProvider;\n+import org.eclipse.xtext.testing.IRegistryConfigurator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.extensions.InjectionExtension;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+import com.google.inject.Module;\n+\n+/**\n+ * Test for {@link InjectionExtension}.\n+ * Injection working for nested test classes\n+ * Here the @InjectWith is attached to the inner class\n+ * \n+ * @author Frank Benoit - Initial contribution and API\n+ */\n+@ExtendWith(InjectionExtension.class)\n+public class InjectionExtensionNested2Test {\n+\t\n+\tpublic static class MyInjectorProvider implements IRegistryConfigurator, IInjectorProvider {\n+\n+\t\t@Override\n+\t\tpublic Injector getInjector() {\n+\t\t\treturn Guice.createInjector(new Module(){\n+\t\t\t\t@Override\n+\t\t\t\tpublic void configure(Binder binder) {\n+\t\t\t\t\tbinder.bind(String.class)\n+\t\t\t\t\t.toInstance(INJECTED);\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void setupRegistry() {\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void restoreRegistry() {\n+\t\t}\n+\t}\n+\n+\tprivate static final String NOT_INJECTED = \"not-injected\";\n+\tprivate static final String INJECTED = \"injected\";\n+\t\n+\t@Inject \n+\tString testValue1 = NOT_INJECTED;\n+\t\n+\t@Test\n+\tvoid outerTest() {\n+\t\tassertEquals(NOT_INJECTED, testValue1);\n+\t}\n+\t\n+\t@Nested\n+\t@InjectWith(InjectionExtensionNested2Test.MyInjectorProvider.class)\n+\tclass NestedClass {\n+\t\t\n+\t\t@Inject \n+\t\tString testValue2 = \"\";\n+\n+\t\t@BeforeEach\n+\t\tpublic void setUp () {\n+\t\t\tassertEquals(INJECTED, testValue1);\n+\t\t\tassertEquals(INJECTED, testValue2);\n+\t\t}\n+\t\t\n+\t\t@Test\n+\t\tvoid innerTest() {\n+\t\t\tassertEquals(INJECTED, testValue1);\n+\t\t\tassertEquals(INJECTED, testValue2);\n+\t\t}\n+\t}\n+\t\n+\t", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjU5Mjg3Mw=="}, "originalCommit": {"oid": "2773685c4ffde33b0df980f56f7212a3ab2fbfc3"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1133, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}