{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczOTI4MTYy", "number": 1562, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNToyOTozNVrOEfQEww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNToyOTozNVrOEfQEww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMjA0Njc1OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext/src/org/eclipse/xtext/xtext/OverriddenValueInspector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNToyOTozNVrOHLaFLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjoxMzo0MlrOHLc0IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTcyMzY5Mw==", "bodyText": "is this safe regarding entry creating and multithreading?", "url": "https://github.com/eclipse/xtext-core/pull/1562#discussion_r481723693", "createdAt": "2020-09-02T05:29:35Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext/src/org/eclipse/xtext/xtext/OverriddenValueInspector.java", "diffHunk": "@@ -160,9 +170,16 @@ public Boolean caseRuleCall(RuleCall object) {\n \t\tif (!addVisited(parserRule))\n \t\t\treturn Boolean.FALSE;\n \t\tMultimap<String, AbstractElement> prevAssignedFeatures = assignedFeatures;\n-\t\tassignedFeatures = newMultimap();\n-\t\tdoSwitch(parserRule.getAlternatives());\n-\t\tfor (String feature : assignedFeatures.keySet())\n+\t\t\n+\t\t// Cannot use #computeIfAbsent since we will call this recursively and that causes ConcurrentModificationExceptions\n+\t\tImmutableMultimap<String, AbstractElement> assignedInCalledRule = assignedFeaturesAtEnd.get(parserRule);\n+\t\tif (assignedInCalledRule == null) {\n+\t\t\tassignedFeatures = newMultimap();\n+\t\t\tdoSwitch(parserRule.getAlternatives());\n+\t\t\tassignedInCalledRule = ImmutableMultimap.copyOf(assignedFeatures);\n+\t\t\tassignedFeaturesAtEnd.put(parserRule, assignedInCalledRule);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5f8b9f465d53e0db761c29172389be5e457cd1"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc2ODQ4MQ==", "bodyText": "It's instantiated during a single validation check-method (see XtextValidator). Therefore I'm sure that it's thread-safe as long as we don't do anything fancy with Executors from within that check itself.", "url": "https://github.com/eclipse/xtext-core/pull/1562#discussion_r481768481", "createdAt": "2020-09-02T06:13:42Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext/src/org/eclipse/xtext/xtext/OverriddenValueInspector.java", "diffHunk": "@@ -160,9 +170,16 @@ public Boolean caseRuleCall(RuleCall object) {\n \t\tif (!addVisited(parserRule))\n \t\t\treturn Boolean.FALSE;\n \t\tMultimap<String, AbstractElement> prevAssignedFeatures = assignedFeatures;\n-\t\tassignedFeatures = newMultimap();\n-\t\tdoSwitch(parserRule.getAlternatives());\n-\t\tfor (String feature : assignedFeatures.keySet())\n+\t\t\n+\t\t// Cannot use #computeIfAbsent since we will call this recursively and that causes ConcurrentModificationExceptions\n+\t\tImmutableMultimap<String, AbstractElement> assignedInCalledRule = assignedFeaturesAtEnd.get(parserRule);\n+\t\tif (assignedInCalledRule == null) {\n+\t\t\tassignedFeatures = newMultimap();\n+\t\t\tdoSwitch(parserRule.getAlternatives());\n+\t\t\tassignedInCalledRule = ImmutableMultimap.copyOf(assignedFeatures);\n+\t\t\tassignedFeaturesAtEnd.put(parserRule, assignedInCalledRule);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTcyMzY5Mw=="}, "originalCommit": {"oid": "0b5f8b9f465d53e0db761c29172389be5e457cd1"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 959, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}