{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MTY4MzY5", "number": 1448, "title": "[eclipse/xtext#1679] converted code to java", "bodyText": "[eclipse/xtext#1679] converted code to java\nSigned-off-by: Christian Dietrich christian.dietrich@itemis.de", "createdAt": "2020-04-17T14:33:01Z", "url": "https://github.com/eclipse/xtext-core/pull/1448", "merged": true, "mergeCommit": {"oid": "780ba573dd657c4c354155fb5808314f1578081a"}, "closed": true, "closedAt": "2020-04-21T10:45:55Z", "author": {"login": "cdietrich"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYiPg9gFqTM5NTUwODYyNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZxA8VABqjMyNTU1NjUwMDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NTA4NjI0", "url": "https://github.com/eclipse/xtext-core/pull/1448#pullrequestreview-395508624", "createdAt": "2020-04-17T14:33:58Z", "commit": {"oid": "44858224710823524454b1152e5ac649e58e4d52"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozMzo1OVrOGHQiYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozMzo1OVrOGHQiYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NDE2MA==", "bodyText": "in the old class type of field and getters was arraylist.\nok to change?", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410264160", "createdAt": "2020-04-17T14:33:59Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/ContentAssistEntry.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.editor.contentassist;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.xtext.util.ReplaceRegion;\n+import org.eclipse.xtext.util.TextRegion;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * @noreference\n+ */\n+public class ContentAssistEntry {\n+\n+\tpublic static final String KIND_TEXT = \"TEXT\";\n+\n+\tpublic static final String KIND_METHOD = \"METHOD\";\n+\n+\tpublic static final String KIND_FUNCTION = \"FUNCTION\";\n+\n+\tpublic static final String KIND_CONSTRUCTOR = \"CONSTRUCTOR\";\n+\n+\tpublic static final String KIND_FIELD = \"FIELD\";\n+\n+\tpublic static final String KIND_VARIABLE = \"VARIABLE\";\n+\n+\tpublic static final String KIND_CLASS = \"CLASS\";\n+\n+\tpublic static final String KIND_INTERFACE = \"INTERFACE\";\n+\n+\tpublic static final String KIND_MODULE = \"MODULE\";\n+\n+\tpublic static final String KIND_PROPERTY = \"PROPERTY\";\n+\n+\tpublic static final String KIND_UNIT = \"UNIT\";\n+\n+\tpublic static final String KIND_VALUE = \"VALUE\";\n+\n+\tpublic static final String KIND_ENUM = \"ENUM\";\n+\n+\tpublic static final String KIND_KEYWORD = \"KEYWORD\";\n+\n+\tpublic static final String KIND_SNIPPET = \"SNIPPET\";\n+\n+\tpublic static final String KIND_COLOR = \"COLOR\";\n+\n+\tpublic static final String KIND_FILE = \"FILE\";\n+\n+\tpublic static final String KIND_REFERENCE = \"REFERENCE\";\n+\n+\tpublic static final String KIND_UNKNOWN = \"UNKNOWN\";\n+\n+\t/**\n+\t * The prefix that should be replaced with this proposal.\n+\t */\n+\tprivate String prefix;\n+\n+\t/**\n+\t * The proposed text to be inserted.\n+\t */\n+\tprivate String proposal;\n+\n+\t/**\n+\t * The text seen by the user in the list of proposals.\n+\t */\n+\tprivate String label;\n+\n+\t/**\n+\t * Additional description to include in the list of proposals.\n+\t * <p>\n+\t * This property may not be supported by all editor frameworks.\n+\t * </p>\n+\t */\n+\tprivate String description;\n+\n+\t/**\n+\t * Documentation for the proposal proposals.\n+\t * <p>\n+\t * This property may not be supported by all editor frameworks.\n+\t * </p>\n+\t */\n+\tprivate String documentation;\n+\n+\t/**\n+\t * The absolute cursor position to apply after the proposal has been inserted. If omitted, the cursor it set to the\n+\t * end of the inserted proposal.\n+\t * <p>\n+\t * This property may not be supported by all editor frameworks.\n+\t * </p>\n+\t */\n+\tprivate Integer escapePosition;\n+\n+\t/**\n+\t * Additional text replacements to apply when this proposal is selected.\n+\t * <p>\n+\t * This property may not be supported by all editor frameworks.\n+\t * </p>\n+\t */\n+\tprivate final List<ReplaceRegion> textReplacements = new ArrayList<ReplaceRegion>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44858224710823524454b1152e5ac649e58e4d52"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NTE3OTIz", "url": "https://github.com/eclipse/xtext-core/pull/1448#pullrequestreview-395517923", "createdAt": "2020-04-17T14:44:45Z", "commit": {"oid": "44858224710823524454b1152e5ac649e58e4d52"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDo0NDo0NlrOGHQ9uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDo1NDozNlrOGHRVhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3MTE2Mw==", "bodyText": "s/proposal/Proposal/", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410271163", "createdAt": "2020-04-17T14:44:46Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalAcceptor.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.editor.contentassist;\n+\n+import java.util.Comparator;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.eclipse.xtext.xbase.lib.Pair;\n+\n+import com.google.common.collect.Iterables;\n+\n+/**\n+ * @author Sven Efftinge - Initial contribution and API\n+ * \n+ * @since 2.11\n+ */\n+public class IdeContentProposalAcceptor\n+\t\timplements IIdeContentProposalAcceptor, Comparator<Pair<Integer, ContentAssistEntry>> {\n+\n+\tprotected final Set<Pair<Integer, ContentAssistEntry>> entries = new TreeSet<Pair<Integer, ContentAssistEntry>>(\n+\t\t\tthis);\n+\n+\t@Override\n+\tpublic void accept(ContentAssistEntry entry, int priority) {\n+\t\tif (entry != null) {\n+\t\t\tif (entry.getProposal() == null)\n+\t\t\t\tthrow new IllegalArgumentException(\"proposal must not be null.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44858224710823524454b1152e5ac649e58e4d52"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3MjQ1Nw==", "bodyText": "Probably want to remove this", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410272457", "createdAt": "2020-04-17T14:46:48Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalCreator.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.editor.contentassist;\n+\n+import com.google.inject.Inject;\n+import org.eclipse.xtext.ide.editor.contentassist.ContentAssistContext;\n+import org.eclipse.xtext.ide.editor.contentassist.ContentAssistEntry;\n+import org.eclipse.xtext.ide.editor.contentassist.IPrefixMatcher;\n+import org.eclipse.xtext.ide.editor.contentassist.IProposalConflictHelper;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+import org.eclipse.xtext.xbase.lib.StringExtensions;\n+\n+/**\n+ * Factory for content assist entries. Whenever possible, you should use this creator instead of building entries\n+ * directly, since prefix matching and conflict handling is done here.\n+ * \n+ * @since 2.10\n+ * @noreference\n+ */\n+@SuppressWarnings(\"all\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44858224710823524454b1152e5ac649e58e4d52"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3NDAwNA==", "bodyText": "You can just use Strings.isNullOrEmpty here", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410274004", "createdAt": "2020-04-17T14:49:26Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalCreator.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.editor.contentassist;\n+\n+import com.google.inject.Inject;\n+import org.eclipse.xtext.ide.editor.contentassist.ContentAssistContext;\n+import org.eclipse.xtext.ide.editor.contentassist.ContentAssistEntry;\n+import org.eclipse.xtext.ide.editor.contentassist.IPrefixMatcher;\n+import org.eclipse.xtext.ide.editor.contentassist.IProposalConflictHelper;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+import org.eclipse.xtext.xbase.lib.StringExtensions;\n+\n+/**\n+ * Factory for content assist entries. Whenever possible, you should use this creator instead of building entries\n+ * directly, since prefix matching and conflict handling is done here.\n+ * \n+ * @since 2.10\n+ * @noreference\n+ */\n+@SuppressWarnings(\"all\")\n+public class IdeContentProposalCreator {\n+\t@Inject\n+\tprivate IPrefixMatcher prefixMatcher;\n+\n+\t@Inject\n+\tprivate IProposalConflictHelper conflictHelper;\n+\n+\t/**\n+\t * Returns an entry with the given proposal and the prefix from the context, or null if the proposal is not valid.\n+\t */\n+\tpublic ContentAssistEntry createProposal(String proposal, ContentAssistContext context) {\n+\t\treturn createProposal(proposal, context.getPrefix(), context, ContentAssistEntry.KIND_UNKNOWN, null);\n+\t}\n+\n+\t/**\n+\t * Returns an entry of kind snippet with the given proposal and label and the prefix from the context, or null if\n+\t * the proposal is not valid.\n+\t * \n+\t * @since 2.16\n+\t */\n+\tpublic ContentAssistEntry createSnippet(String proposal, String label, ContentAssistContext context) {\n+\t\treturn createProposal(proposal, context.getPrefix(), context, ContentAssistEntry.KIND_SNIPPET,\n+\t\t\t\t(it) -> it.setLabel(label));\n+\t}\n+\n+\t/**\n+\t * Returns an entry with the given proposal and the prefix from the context, or null if the proposal is not valid.\n+\t * If it is valid, the initializer function is applied to it.\n+\t */\n+\tpublic ContentAssistEntry createProposal(String proposal, ContentAssistContext context,\n+\t\t\tProcedure1<? super ContentAssistEntry> init) {\n+\t\treturn createProposal(proposal, context.getPrefix(), context, ContentAssistEntry.KIND_UNKNOWN, init);\n+\t}\n+\n+\t/**\n+\t * Returns an entry with the given proposal and the prefix from the context, or null if the proposal is not valid.\n+\t * If it is valid, the initializer function is applied to it.\n+\t */\n+\tpublic ContentAssistEntry createProposal(String proposal, ContentAssistContext context, String kind,\n+\t\t\tProcedure1<? super ContentAssistEntry> init) {\n+\t\treturn createProposal(proposal, context.getPrefix(), context, kind, init);\n+\t}\n+\n+\t/**\n+\t * Returns an entry with the given proposal and prefix, or null if the proposal is not valid. If it is valid, the\n+\t * initializer function is applied to it.\n+\t */\n+\tpublic ContentAssistEntry createProposal(String proposal, String prefix, ContentAssistContext context, String kind,\n+\t\t\tProcedure1<? super ContentAssistEntry> init) {\n+\t\tif (isValidProposal(proposal, prefix, context)) {\n+\t\t\tContentAssistEntry result = new ContentAssistEntry();\n+\t\t\tresult.setProposal(proposal);\n+\t\t\tresult.setPrefix(prefix);\n+\t\t\tif (kind != null) {\n+\t\t\t\tresult.setKind(kind);\n+\t\t\t}\n+\t\t\tif (init != null) {\n+\t\t\t\tinit.apply(result);\n+\t\t\t}\n+\t\t\treturn result;\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tpublic boolean isValidProposal(String proposal, String prefix, ContentAssistContext context) {\n+\t\treturn !StringExtensions.isNullOrEmpty(proposal) && prefixMatcher.isCandidateMatchingPrefix(proposal, prefix)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44858224710823524454b1152e5ac649e58e4d52"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3NDY5Mw==", "bodyText": "final?", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410274693", "createdAt": "2020-04-17T14:50:31Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeCrossrefProposalProvider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.editor.contentassist;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.xtext.CrossReference;\n+import org.eclipse.xtext.naming.IQualifiedNameConverter;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+import org.eclipse.xtext.scoping.IScope;\n+\n+import com.google.common.base.Predicate;\n+import com.google.inject.Inject;\n+\n+/**\n+ * Special content assist proposal provider for cross-references.\n+ * \n+ * @noreference\n+ */\n+public class IdeCrossrefProposalProvider {\n+\n+\tprivate static Logger LOG = Logger.getLogger(IdeCrossrefProposalProvider.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44858224710823524454b1152e5ac649e58e4d52"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI3NzI1Mg==", "bodyText": "Always returns an empty string by default*", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410277252", "createdAt": "2020-04-17T14:54:36Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/symbol/DocumentSymbolMapper.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2018, 2020 TypeFox and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.symbol;\n+\n+import java.util.ArrayList;\n+\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.lsp4j.DocumentSymbol;\n+import org.eclipse.lsp4j.Location;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.SymbolKind;\n+import org.eclipse.xtext.ide.server.DocumentExtensions;\n+import org.eclipse.xtext.naming.IQualifiedNameProvider;\n+import org.eclipse.xtext.naming.QualifiedName;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Maps an EObject to the corresponding {@link DocumentSymbol document symbol}.\n+ */\n+@Beta\n+@Singleton\n+public class DocumentSymbolMapper {\n+\t/**\n+\t * Provides {@link DocumentSymbol#detail detail} for a {@link DocumentSymbol document symbol}.\n+\t * <p>\n+\t * Always returns with an empty string by default.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44858224710823524454b1152e5ac649e58e4d52"}, "originalPosition": 37}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44858224710823524454b1152e5ac649e58e4d52", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/44858224710823524454b1152e5ac649e58e4d52", "committedDate": "2020-04-17T14:31:18Z", "message": "[eclipse/xtext#1679] converted code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "937baeb78cf9ae9d29a73552585f15bf6674b467", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/937baeb78cf9ae9d29a73552585f15bf6674b467", "committedDate": "2020-04-17T15:00:03Z", "message": "[eclipse/xtext#1679] converted code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "937baeb78cf9ae9d29a73552585f15bf6674b467", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/937baeb78cf9ae9d29a73552585f15bf6674b467", "committedDate": "2020-04-17T15:00:03Z", "message": "[eclipse/xtext#1679] converted code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/04d232f1959f19e99f9e354326bff82732c452d9", "committedDate": "2020-04-17T15:05:48Z", "message": "[eclipse/xtext#1679] converted code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODgzNDg2", "url": "https://github.com/eclipse/xtext-core/pull/1448#pullrequestreview-395883486", "createdAt": "2020-04-18T05:28:48Z", "commit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNToyODo0OFrOGHnVTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNToyODo0OFrOGHnVTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYzNzY0Ng==", "bodyText": "The class extends from Assert, you can just use assertEquals.", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410637646", "createdAt": "2020-04-18T05:28:48Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.util;\n+\n+import java.util.List;\n+\n+import org.eclipse.lsp4j.DocumentHighlight;\n+import org.eclipse.lsp4j.DocumentHighlightKind;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.xtext.ide.tests.testlanguage.TestLanguageIdeInjectorProvider;\n+import org.eclipse.xtext.ide.util.DocumentHighlightComparator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+\n+/**\n+ * Test for the null-safe {@link DocumentHighlightComparator}.\n+ * \n+ * <p>\n+ * This test focuses on the {@link DocumentHighlightKind} and the null-safety\n+ * other orderings are checked via the {@link RangeComparatorTest}.\n+ * \n+ * @author akos.kitta - Initial contribution and API\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(TestLanguageIdeInjectorProvider.class)\n+public class DocumentHighlightComparatorTest extends Assert {\n+\t@Inject\n+\tprivate DocumentHighlightComparator comparator;\n+\n+\t@Test\n+\tpublic void withoutNull() {\n+\t\tfinal List<? extends DocumentHighlight> input = sort(\n+\t\t\t\tLists.newArrayList(newHighlight(DocumentHighlightKind.Text, newRange(2, 2, 2, 2)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Text, newRange(1, 1, 1, 1)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(2, 2, 2, 2)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(1, 1, 1, 1)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(2, 2, 2, 2)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(1, 1, 1, 1))));\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getLine());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODgzNTAy", "url": "https://github.com/eclipse/xtext-core/pull/1448#pullrequestreview-395883502", "createdAt": "2020-04-18T05:29:05Z", "commit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNToyOTowNVrOGHnVxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNToyOTowNVrOGHnVxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYzNzc2Nw==", "bodyText": "PS comment above.", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410637767", "createdAt": "2020-04-18T05:29:05Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.util;\n+\n+import java.util.List;\n+\n+import org.eclipse.lsp4j.DocumentHighlight;\n+import org.eclipse.lsp4j.DocumentHighlightKind;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.xtext.ide.tests.testlanguage.TestLanguageIdeInjectorProvider;\n+import org.eclipse.xtext.ide.util.DocumentHighlightComparator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+\n+/**\n+ * Test for the null-safe {@link DocumentHighlightComparator}.\n+ * \n+ * <p>\n+ * This test focuses on the {@link DocumentHighlightKind} and the null-safety\n+ * other orderings are checked via the {@link RangeComparatorTest}.\n+ * \n+ * @author akos.kitta - Initial contribution and API\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(TestLanguageIdeInjectorProvider.class)\n+public class DocumentHighlightComparatorTest extends Assert {\n+\t@Inject\n+\tprivate DocumentHighlightComparator comparator;\n+\n+\t@Test\n+\tpublic void withoutNull() {\n+\t\tfinal List<? extends DocumentHighlight> input = sort(\n+\t\t\t\tLists.newArrayList(newHighlight(DocumentHighlightKind.Text, newRange(2, 2, 2, 2)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Text, newRange(1, 1, 1, 1)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(2, 2, 2, 2)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(1, 1, 1, 1)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(2, 2, 2, 2)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(1, 1, 1, 1))));\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Text, input.get(0).getKind());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Read, input.get(1).getKind());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Write, input.get(2).getKind());\n+\t\tAssert.assertEquals(2, input.get(3).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(2, input.get(3).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(2, input.get(3).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(2, input.get(3).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Text, input.get(3).getKind());\n+\t\tAssert.assertEquals(2, input.get(4).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(2, input.get(4).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(2, input.get(4).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(2, input.get(4).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Read, input.get(4).getKind());\n+\t\tAssert.assertEquals(2, input.get(5).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(2, input.get(5).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(2, input.get(5).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(2, input.get(5).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Write, input.get(5).getKind());\n+\t}\n+\n+\t@Test\n+\tpublic void withNull() {\n+\t\tfinal List<? extends DocumentHighlight> input = sort(\n+\t\t\t\tLists.newArrayList(null, newHighlight(DocumentHighlightKind.Text, newRange(1, 1, 1, 1)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(1, 1, 1, 1)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(1, 1, 1, 1))));\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getLine());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODgzNTcw", "url": "https://github.com/eclipse/xtext-core/pull/1448#pullrequestreview-395883570", "createdAt": "2020-04-18T05:30:33Z", "commit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNTozMDozM1rOGHnX7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNTozMDozM1rOGHnX7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYzODMxOA==", "bodyText": "Please remove final. Kindly do the same on lines 113, 118 too.", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410638318", "createdAt": "2020-04-18T05:30:33Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.util;\n+\n+import java.util.List;\n+\n+import org.eclipse.lsp4j.DocumentHighlight;\n+import org.eclipse.lsp4j.DocumentHighlightKind;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.xtext.ide.tests.testlanguage.TestLanguageIdeInjectorProvider;\n+import org.eclipse.xtext.ide.util.DocumentHighlightComparator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+\n+/**\n+ * Test for the null-safe {@link DocumentHighlightComparator}.\n+ * \n+ * <p>\n+ * This test focuses on the {@link DocumentHighlightKind} and the null-safety\n+ * other orderings are checked via the {@link RangeComparatorTest}.\n+ * \n+ * @author akos.kitta - Initial contribution and API\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(TestLanguageIdeInjectorProvider.class)\n+public class DocumentHighlightComparatorTest extends Assert {\n+\t@Inject\n+\tprivate DocumentHighlightComparator comparator;\n+\n+\t@Test\n+\tpublic void withoutNull() {\n+\t\tfinal List<? extends DocumentHighlight> input = sort(\n+\t\t\t\tLists.newArrayList(newHighlight(DocumentHighlightKind.Text, newRange(2, 2, 2, 2)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Text, newRange(1, 1, 1, 1)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(2, 2, 2, 2)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(1, 1, 1, 1)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(2, 2, 2, 2)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(1, 1, 1, 1))));\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Text, input.get(0).getKind());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Read, input.get(1).getKind());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Write, input.get(2).getKind());\n+\t\tAssert.assertEquals(2, input.get(3).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(2, input.get(3).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(2, input.get(3).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(2, input.get(3).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Text, input.get(3).getKind());\n+\t\tAssert.assertEquals(2, input.get(4).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(2, input.get(4).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(2, input.get(4).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(2, input.get(4).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Read, input.get(4).getKind());\n+\t\tAssert.assertEquals(2, input.get(5).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(2, input.get(5).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(2, input.get(5).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(2, input.get(5).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Write, input.get(5).getKind());\n+\t}\n+\n+\t@Test\n+\tpublic void withNull() {\n+\t\tfinal List<? extends DocumentHighlight> input = sort(\n+\t\t\t\tLists.newArrayList(null, newHighlight(DocumentHighlightKind.Text, newRange(1, 1, 1, 1)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Write, newRange(1, 1, 1, 1)),\n+\t\t\t\t\t\tnewHighlight(DocumentHighlightKind.Read, newRange(1, 1, 1, 1))));\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(0).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Text, input.get(0).getKind());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(1).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Read, input.get(1).getKind());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(2).getRange().getEnd().getCharacter());\n+\t\tAssert.assertEquals(DocumentHighlightKind.Write, input.get(2).getKind());\n+\t\tAssert.assertNull(IterableExtensions.last(input));\n+\t}\n+\n+\tprivate DocumentHighlight newHighlight(final DocumentHighlightKind kind, final Range range) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODgzNjE3", "url": "https://github.com/eclipse/xtext-core/pull/1448#pullrequestreview-395883617", "createdAt": "2020-04-18T05:31:16Z", "commit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNTozMToxNlrOGHnZBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNTozMToxNlrOGHnZBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYzODU5OA==", "bodyText": "Assert.assertEquals(...) -> assertEquals(...)", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410638598", "createdAt": "2020-04-18T05:31:16Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/RangeComparatorTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.util;\n+\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+import java.util.List;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.xtext.ide.tests.testlanguage.TestLanguageIdeInjectorProvider;\n+import org.eclipse.xtext.ide.util.RangeComparator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * Test for the null-safe {@link RangeComparator}.\n+ * \n+ * @author akos.kitta - Initial contribution and API\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(TestLanguageIdeInjectorProvider.class)\n+public class RangeComparatorTest extends Assert {\n+\t@Inject\n+\tprivate RangeComparator comparator;\n+\n+\t@Test\n+\tpublic void withoutNull() {\n+\t\tList<? extends Range> input = sort(Lists.newArrayList(newRange(1, 2, 1, 2), newRange(1, 1, 2, 1),\n+\t\t\t\tnewRange(1, 1, 1, 2), newRange(1, 1, 1, 1), newRange(2, 2, 2, 3)));\n+\t\tAssert.assertEquals(1, input.get(0).getStart().getLine());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODgzNjQz", "url": "https://github.com/eclipse/xtext-core/pull/1448#pullrequestreview-395883643", "createdAt": "2020-04-18T05:31:30Z", "commit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNTozMTozMFrOGHnZXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNTozMTozMFrOGHnZXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDYzODY4Nw==", "bodyText": "PS above comment.", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410638687", "createdAt": "2020-04-18T05:31:30Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/RangeComparatorTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.util;\n+\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+import java.util.List;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.xtext.ide.tests.testlanguage.TestLanguageIdeInjectorProvider;\n+import org.eclipse.xtext.ide.util.RangeComparator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * Test for the null-safe {@link RangeComparator}.\n+ * \n+ * @author akos.kitta - Initial contribution and API\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(TestLanguageIdeInjectorProvider.class)\n+public class RangeComparatorTest extends Assert {\n+\t@Inject\n+\tprivate RangeComparator comparator;\n+\n+\t@Test\n+\tpublic void withoutNull() {\n+\t\tList<? extends Range> input = sort(Lists.newArrayList(newRange(1, 2, 1, 2), newRange(1, 1, 2, 1),\n+\t\t\t\tnewRange(1, 1, 1, 2), newRange(1, 1, 1, 1), newRange(2, 2, 2, 3)));\n+\t\tAssert.assertEquals(1, input.get(0).getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(0).getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(0).getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(0).getEnd().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(1).getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(1).getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(1).getEnd().getLine());\n+\t\tAssert.assertEquals(2, input.get(1).getEnd().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(2).getStart().getLine());\n+\t\tAssert.assertEquals(1, input.get(2).getStart().getCharacter());\n+\t\tAssert.assertEquals(2, input.get(2).getEnd().getLine());\n+\t\tAssert.assertEquals(1, input.get(2).getEnd().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(3).getStart().getLine());\n+\t\tAssert.assertEquals(2, input.get(3).getStart().getCharacter());\n+\t\tAssert.assertEquals(1, input.get(3).getEnd().getLine());\n+\t\tAssert.assertEquals(2, input.get(3).getEnd().getCharacter());\n+\t\tAssert.assertEquals(2, input.get(4).getStart().getLine());\n+\t\tAssert.assertEquals(2, input.get(4).getStart().getCharacter());\n+\t\tAssert.assertEquals(2, input.get(4).getEnd().getLine());\n+\t\tAssert.assertEquals(3, input.get(4).getEnd().getCharacter());\n+\t}\n+\n+\t@Test\n+\tpublic void withNull() {\n+\t\tList<? extends Range> input = sort(Lists.newArrayList(newRange(2, 2, 2, 3), null, newRange(1, 1, 1, 1)));\n+\t\tAssert.assertEquals(1, input.get(0).getStart().getLine());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODg1MjE4", "url": "https://github.com/eclipse/xtext-core/pull/1448#pullrequestreview-395885218", "createdAt": "2020-04-18T05:59:33Z", "commit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNTo1OTozM1rOGHoEcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNTo1OTozM1rOGHoEcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY0OTcxMg==", "bodyText": "NL", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410649712", "createdAt": "2020-04-18T05:59:33Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeContentProposalAcceptor.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.editor.contentassist;\n+\n+import java.util.Comparator;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+import org.eclipse.xtext.xbase.lib.Pair;\n+\n+import com.google.common.collect.Iterables;\n+\n+/**\n+ * @author Sven Efftinge - Initial contribution and API\n+ * \n+ * @since 2.11\n+ */\n+public class IdeContentProposalAcceptor\n+\t\timplements IIdeContentProposalAcceptor, Comparator<Pair<Integer, ContentAssistEntry>> {\n+\n+\tprotected final Set<Pair<Integer, ContentAssistEntry>> entries = new TreeSet<Pair<Integer, ContentAssistEntry>>(\n+\t\t\tthis);\n+\n+\t@Override\n+\tpublic void accept(ContentAssistEntry entry, int priority) {\n+\t\tif (entry != null) {\n+\t\t\tif (entry.getProposal() == null)\n+\t\t\t\tthrow new IllegalArgumentException(\"Proposal must not be null.\");\n+\t\t\tentries.add(Pair.of(priority, entry));\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean canAcceptMoreProposals() {\n+\t\treturn entries.size() < 100;\n+\t}\n+\n+\t@Override\n+\tpublic int compare(Pair<Integer, ContentAssistEntry> p1, Pair<Integer, ContentAssistEntry> p2) {\n+\t\tint prioResult = p2.getKey().compareTo(p1.getKey());\n+\t\tif (prioResult != 0)\n+\t\t\treturn prioResult;\n+\t\tString s1 = p1.getValue().getLabel() != null ? p1.getValue().getLabel() : p1.getValue().getProposal();\n+\t\tString s2 = p2.getValue().getLabel() != null ? p2.getValue().getLabel() : p2.getValue().getProposal();\n+\t\tint ignoreCase = s1.compareToIgnoreCase(s2);\n+\t\tif (ignoreCase == 0) {\n+\t\t\treturn s1.compareTo(s2);\n+\t\t}\n+\t\treturn ignoreCase;\n+\t}\n+\n+\tpublic Iterable<ContentAssistEntry> getEntries() {\n+\t\treturn Iterables.transform(entries, e -> e.getValue());\n+\t}\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODg1MzY1", "url": "https://github.com/eclipse/xtext-core/pull/1448#pullrequestreview-395885365", "createdAt": "2020-04-18T06:02:49Z", "commit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNjowMjo0OVrOGHoJCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNjowMjo0OVrOGHoJCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY1MDg4OA==", "bodyText": "return this.qualifiedNameConverter -> return qualifiedNameConverter", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410650888", "createdAt": "2020-04-18T06:02:49Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeCrossrefProposalProvider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.editor.contentassist;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.xtext.CrossReference;\n+import org.eclipse.xtext.naming.IQualifiedNameConverter;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+import org.eclipse.xtext.scoping.IScope;\n+\n+import com.google.common.base.Predicate;\n+import com.google.inject.Inject;\n+\n+/**\n+ * Special content assist proposal provider for cross-references.\n+ * \n+ * @noreference\n+ */\n+public class IdeCrossrefProposalProvider {\n+\n+\tprivate static final Logger LOG = Logger.getLogger(IdeCrossrefProposalProvider.class);\n+\n+\t@Inject\n+\tprivate IQualifiedNameConverter qualifiedNameConverter;\n+\n+\t@Inject\n+\tprivate IdeContentProposalCreator proposalCreator;\n+\n+\t@Inject\n+\tprivate IdeContentProposalPriorities proposalPriorities;\n+\n+\tpublic void lookupCrossReference(IScope scope, CrossReference crossReference, ContentAssistContext context,\n+\t\t\tIIdeContentProposalAcceptor acceptor, Predicate<IEObjectDescription> filter) {\n+\t\ttry {\n+\t\t\tfor (IEObjectDescription candidate : queryScope(scope, crossReference, context)) {\n+\t\t\t\tif (!acceptor.canAcceptMoreProposals()) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tif (filter.apply(candidate)) {\n+\t\t\t\t\tContentAssistEntry entry = createProposal(candidate, crossReference, context);\n+\t\t\t\t\tacceptor.accept(entry, proposalPriorities.getCrossRefPriority(candidate, entry));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (UnsupportedOperationException uoe) {\n+\t\t\tLOG.error(\"Failed to create content assist proposals for cross-reference.\", uoe);\n+\t\t}\n+\t}\n+\n+\tprotected Iterable<IEObjectDescription> queryScope(IScope scope, CrossReference crossReference,\n+\t\t\tContentAssistContext context) {\n+\t\treturn scope.getAllElements();\n+\t}\n+\n+\tprotected ContentAssistEntry createProposal(IEObjectDescription candidate, CrossReference crossRef,\n+\t\t\tContentAssistContext context) {\n+\t\treturn proposalCreator.createProposal(qualifiedNameConverter.toString(candidate.getName()), context, (e) -> {\n+\t\t\te.setSource(candidate);\n+\t\t\te.setDescription(candidate.getEClass() != null ? candidate.getEClass().getName() : null);\n+\t\t\te.setKind(ContentAssistEntry.KIND_REFERENCE);\n+\t\t});\n+\t}\n+\n+\tprotected IQualifiedNameConverter getQualifiedNameConverter() {\n+\t\treturn this.qualifiedNameConverter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODg1Mzg2", "url": "https://github.com/eclipse/xtext-core/pull/1448#pullrequestreview-395885386", "createdAt": "2020-04-18T06:03:11Z", "commit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNjowMzoxMVrOGHoJpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNjowMzoxMVrOGHoJpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY1MTA0NA==", "bodyText": "return this.proposalCreator -> return proposalCreator", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410651044", "createdAt": "2020-04-18T06:03:11Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/contentassist/IdeCrossrefProposalProvider.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*******************************************************************************\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.editor.contentassist;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.xtext.CrossReference;\n+import org.eclipse.xtext.naming.IQualifiedNameConverter;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+import org.eclipse.xtext.scoping.IScope;\n+\n+import com.google.common.base.Predicate;\n+import com.google.inject.Inject;\n+\n+/**\n+ * Special content assist proposal provider for cross-references.\n+ * \n+ * @noreference\n+ */\n+public class IdeCrossrefProposalProvider {\n+\n+\tprivate static final Logger LOG = Logger.getLogger(IdeCrossrefProposalProvider.class);\n+\n+\t@Inject\n+\tprivate IQualifiedNameConverter qualifiedNameConverter;\n+\n+\t@Inject\n+\tprivate IdeContentProposalCreator proposalCreator;\n+\n+\t@Inject\n+\tprivate IdeContentProposalPriorities proposalPriorities;\n+\n+\tpublic void lookupCrossReference(IScope scope, CrossReference crossReference, ContentAssistContext context,\n+\t\t\tIIdeContentProposalAcceptor acceptor, Predicate<IEObjectDescription> filter) {\n+\t\ttry {\n+\t\t\tfor (IEObjectDescription candidate : queryScope(scope, crossReference, context)) {\n+\t\t\t\tif (!acceptor.canAcceptMoreProposals()) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\t\t\t\tif (filter.apply(candidate)) {\n+\t\t\t\t\tContentAssistEntry entry = createProposal(candidate, crossReference, context);\n+\t\t\t\t\tacceptor.accept(entry, proposalPriorities.getCrossRefPriority(candidate, entry));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (UnsupportedOperationException uoe) {\n+\t\t\tLOG.error(\"Failed to create content assist proposals for cross-reference.\", uoe);\n+\t\t}\n+\t}\n+\n+\tprotected Iterable<IEObjectDescription> queryScope(IScope scope, CrossReference crossReference,\n+\t\t\tContentAssistContext context) {\n+\t\treturn scope.getAllElements();\n+\t}\n+\n+\tprotected ContentAssistEntry createProposal(IEObjectDescription candidate, CrossReference crossRef,\n+\t\t\tContentAssistContext context) {\n+\t\treturn proposalCreator.createProposal(qualifiedNameConverter.toString(candidate.getName()), context, (e) -> {\n+\t\t\te.setSource(candidate);\n+\t\t\te.setDescription(candidate.getEClass() != null ? candidate.getEClass().getName() : null);\n+\t\t\te.setKind(ContentAssistEntry.KIND_REFERENCE);\n+\t\t});\n+\t}\n+\n+\tprotected IQualifiedNameConverter getQualifiedNameConverter() {\n+\t\treturn this.qualifiedNameConverter;\n+\t}\n+\n+\tprotected IdeContentProposalCreator getProposalCreator() {\n+\t\treturn this.proposalCreator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODg1NDYw", "url": "https://github.com/eclipse/xtext-core/pull/1448#pullrequestreview-395885460", "createdAt": "2020-04-18T06:04:41Z", "commit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNjowNDo0MVrOGHoL7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNjowNDo0MVrOGHoL7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY1MTYyOQ==", "bodyText": "The indentation of the code inside the while-loop looks incorrect. Please confirm.", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410651629", "createdAt": "2020-04-18T06:04:41Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/hierarchy/DefaultHierarchyNode.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.editor.hierarchy;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+import org.eclipse.xtext.util.Wrapper;\n+\n+import com.google.common.base.Objects;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @since 2.10\n+ */\n+public class DefaultHierarchyNode implements IHierarchyNode {\n+\tprivate IHierarchyNode parent;\n+\n+\tprivate boolean mayHaveChildren;\n+\n+\tprivate IEObjectDescription element;\n+\n+\tprivate final List<IHierarchyNodeReference> references = new ArrayList<>();\n+\n+\tprivate Wrapper<Boolean> recursive;\n+\n+\t@Override\n+\tpublic Object getNavigationElement() {\n+\t\tif (!references.isEmpty()) {\n+\t\t\treturn references.get(0);\n+\t\t} else {\n+\t\t\treturn element;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean isRecursive() {\n+\t\tif (recursive == null) {\n+\t\t\trecursive = Wrapper.wrap(internalIsRecursive());\n+\t\t}\n+\t\treturn recursive.get().booleanValue();\n+\t}\n+\n+\tprotected boolean internalIsRecursive() {\n+\t\tIHierarchyNode node = parent;\n+\t\twhile (node != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODg1NDgx", "url": "https://github.com/eclipse/xtext-core/pull/1448#pullrequestreview-395885481", "createdAt": "2020-04-18T06:05:04Z", "commit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNjowNTowNFrOGHoMfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNjowNTowNFrOGHoMfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY1MTc3Mg==", "bodyText": "this.mayHaveChildren -> mayHaveChildren", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410651772", "createdAt": "2020-04-18T06:05:04Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/hierarchy/DefaultHierarchyNode.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.editor.hierarchy;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+import org.eclipse.xtext.util.Wrapper;\n+\n+import com.google.common.base.Objects;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @since 2.10\n+ */\n+public class DefaultHierarchyNode implements IHierarchyNode {\n+\tprivate IHierarchyNode parent;\n+\n+\tprivate boolean mayHaveChildren;\n+\n+\tprivate IEObjectDescription element;\n+\n+\tprivate final List<IHierarchyNodeReference> references = new ArrayList<>();\n+\n+\tprivate Wrapper<Boolean> recursive;\n+\n+\t@Override\n+\tpublic Object getNavigationElement() {\n+\t\tif (!references.isEmpty()) {\n+\t\t\treturn references.get(0);\n+\t\t} else {\n+\t\t\treturn element;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean isRecursive() {\n+\t\tif (recursive == null) {\n+\t\t\trecursive = Wrapper.wrap(internalIsRecursive());\n+\t\t}\n+\t\treturn recursive.get().booleanValue();\n+\t}\n+\n+\tprotected boolean internalIsRecursive() {\n+\t\tIHierarchyNode node = parent;\n+\t\twhile (node != null) {\n+\t\t\t\tURI nodeElementUri = node.getElement().getEObjectURI();\n+\t\t\t\tURI elementUri = this.element.getEObjectURI();\n+\t\t\t\tif (Objects.equal(nodeElementUri, elementUri)) {\n+\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t\t\tnode = node.getParent();\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic boolean mayHaveChildren() {\n+\t\treturn this.mayHaveChildren;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODg1NTMw", "url": "https://github.com/eclipse/xtext-core/pull/1448#pullrequestreview-395885530", "createdAt": "2020-04-18T06:06:03Z", "commit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNjowNjowM1rOGHoN4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNjowNjowM1rOGHoN4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY1MjEzMQ==", "bodyText": "this.roots -> roots", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410652131", "createdAt": "2020-04-18T06:06:03Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/hierarchy/DefaultHierarchyRoot.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.editor.hierarchy;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @since 2.10\n+ */\n+public class DefaultHierarchyRoot implements IHierarchyRoot {\n+\tprivate final List<IHierarchyNode> roots = new ArrayList<>();\n+\n+\tpublic List<IHierarchyNode> getRoots() {\n+\t\treturn this.roots;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODg1NjU4", "url": "https://github.com/eclipse/xtext-core/pull/1448#pullrequestreview-395885658", "createdAt": "2020-04-18T06:08:16Z", "commit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNjowODoxNlrOGHoRUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQwNjowODoxNlrOGHoRUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY1MzAwOQ==", "bodyText": "new ArrayList<>() -> Collections.emptyList()", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r410653009", "createdAt": "2020-04-18T06:08:16Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/symbol/DocumentSymbolMapper.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/**\n+ * Copyright (c) 2018, 2020 TypeFox and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.symbol;\n+\n+import java.util.ArrayList;\n+\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.lsp4j.DocumentSymbol;\n+import org.eclipse.lsp4j.Location;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.SymbolKind;\n+import org.eclipse.xtext.ide.server.DocumentExtensions;\n+import org.eclipse.xtext.naming.IQualifiedNameProvider;\n+import org.eclipse.xtext.naming.QualifiedName;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Maps an EObject to the corresponding {@link DocumentSymbol document symbol}.\n+ */\n+@Beta\n+@Singleton\n+public class DocumentSymbolMapper {\n+\t/**\n+\t * Provides {@link DocumentSymbol#detail detail} for a {@link DocumentSymbol document symbol}.\n+\t * <p>\n+\t * Always returns an empty string by default.\n+\t * \n+\t * @see DocumentSymbol#detail\n+\t */\n+\t@Beta\n+\t@Singleton\n+\tpublic static class DocumentSymbolDetailsProvider {\n+\t\tpublic String getDetails(EObject object) {\n+\t\t\treturn \"\";\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Provides a human-readable name for the document symbol.\n+\t * \n+\t * @see DocumentSymbol#name\n+\t */\n+\t@Beta\n+\t@Singleton\n+\tpublic static class DocumentSymbolNameProvider {\n+\t\t@Inject\n+\t\tprivate IQualifiedNameProvider qualifiedNameProvider;\n+\n+\t\tpublic String getName(EObject object) {\n+\t\t\treturn getName(object != null ? qualifiedNameProvider.getFullyQualifiedName(object) : null);\n+\t\t}\n+\n+\t\tpublic String getName(IEObjectDescription description) {\n+\t\t\treturn getName(description != null ? description.getName() : null);\n+\t\t}\n+\n+\t\tprotected String getName(QualifiedName qualifiedName) {\n+\t\t\tif (qualifiedName != null) {\n+\t\t\t\treturn qualifiedName.toString();\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Provides the {@link SymbolKind symbol kind} information for the document symbol.\n+\t * \n+\t * @see DocumentSymbol#kind\n+\t */\n+\t@Beta\n+\t@Singleton\n+\tpublic static class DocumentSymbolKindProvider {\n+\t\tpublic SymbolKind getSymbolKind(EObject object) {\n+\t\t\treturn getSymbolKind(object != null ? object.eClass() : null);\n+\t\t}\n+\n+\t\tpublic SymbolKind getSymbolKind(IEObjectDescription description) {\n+\t\t\treturn this.getSymbolKind(description != null ? description.getEClass() : null);\n+\t\t}\n+\n+\t\tprotected SymbolKind getSymbolKind(EClass clazz) {\n+\t\t\treturn SymbolKind.Property;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Provides {@link DocumentSymbol#range range} and {@link DocumentSymbol#selectionRange selection range} for a\n+\t * document symbol.\n+\t * \n+\t * @see DocumentSymbol#range\n+\t * @see DocumentSymbol#selectionRange\n+\t */\n+\t@Beta\n+\t@Singleton\n+\tpublic static class DocumentSymbolRangeProvider {\n+\t\t@Inject\n+\t\tprivate DocumentExtensions documentExtensions;\n+\n+\t\t/**\n+\t\t * The range enclosing this symbol not including leading/trailing whitespace but everything else like comments.\n+\t\t */\n+\t\tpublic Range getRange(EObject object) {\n+\t\t\tLocation newFullLocation = documentExtensions.newFullLocation(object);\n+\t\t\tif (newFullLocation != null) {\n+\t\t\t\treturn newFullLocation.getRange();\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\t/**\n+\t\t * The range that should be selected and revealed when this symbol is being picked, e.g the name of a function.\n+\t\t */\n+\t\tpublic Range getSelectionRange(EObject object) {\n+\t\t\tLocation newLocation = documentExtensions.newLocation(object);\n+\t\t\tif (newLocation != null) {\n+\t\t\t\treturn newLocation.getRange();\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Determines whether a document symbol can be marked as {@link DocumentSymbol#deprecated deprecated}.\n+\t * \n+\t * @see DocumentSymbol#deprecated\n+\t */\n+\t@Beta\n+\t@Singleton\n+\tpublic static class DocumentSymbolDeprecationInfoProvider {\n+\t\tpublic boolean isDeprecated(EObject object) {\n+\t\t\treturn false;\n+\t\t}\n+\n+\t\tpublic boolean isDeprecated(IEObjectDescription description) {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Inject\n+\tprivate DocumentSymbolMapper.DocumentSymbolNameProvider nameProvider;\n+\n+\t@Inject\n+\tprivate DocumentSymbolMapper.DocumentSymbolKindProvider kindProvider;\n+\n+\t@Inject\n+\tprivate DocumentSymbolMapper.DocumentSymbolRangeProvider rangeProvider;\n+\n+\t@Inject\n+\tprivate DocumentSymbolMapper.DocumentSymbolDetailsProvider detailsProvider;\n+\n+\t@Inject\n+\tprivate DocumentSymbolMapper.DocumentSymbolDeprecationInfoProvider deprecationInfoProvider;\n+\n+\t/**\n+\t * Converts the {@code EObject} argument into a {@link DocumentSymbol document symbol} without the\n+\t * {@link DocumentSymbol#children children} information filled in.\n+\t */\n+\tpublic DocumentSymbol toDocumentSymbol(EObject object) {\n+\t\tDocumentSymbol documentSymbol = new DocumentSymbol();\n+\t\tString objectName = nameProvider.getName(object);\n+\t\tif (objectName != null) {\n+\t\t\tdocumentSymbol.setName(objectName);\n+\t\t}\n+\t\tSymbolKind objectKind = kindProvider.getSymbolKind(object);\n+\t\tif (objectKind != null) {\n+\t\t\tdocumentSymbol.setKind(objectKind);\n+\t\t}\n+\t\tRange objectRange = rangeProvider.getRange(object);\n+\t\tif (objectRange != null) {\n+\t\t\tdocumentSymbol.setRange(objectRange);\n+\t\t}\n+\t\tRange objectSelectionRange = rangeProvider.getSelectionRange(object);\n+\t\tif (objectSelectionRange != null) {\n+\t\t\tdocumentSymbol.setSelectionRange(objectSelectionRange);\n+\t\t}\n+\t\tdocumentSymbol.setDetail(detailsProvider.getDetails(object));\n+\t\tdocumentSymbol.setDeprecated(deprecationInfoProvider.isDeprecated(object));\n+\t\tdocumentSymbol.setChildren(new ArrayList<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9"}, "originalPosition": 189}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "04d232f1959f19e99f9e354326bff82732c452d9", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/04d232f1959f19e99f9e354326bff82732c452d9", "committedDate": "2020-04-17T15:05:48Z", "message": "[eclipse/xtext#1679] converted code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "7f42c5148816f793c86a0994bf9644deb589c2ca", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/7f42c5148816f793c86a0994bf9644deb589c2ca", "committedDate": "2020-04-18T09:44:22Z", "message": "[eclipse/xtext#1679] converted code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7f42c5148816f793c86a0994bf9644deb589c2ca", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/7f42c5148816f793c86a0994bf9644deb589c2ca", "committedDate": "2020-04-18T09:44:22Z", "message": "[eclipse/xtext#1679] converted code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "1324f2f7a0f1df18dff813ad1e6cb2cd0eea12b8", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/1324f2f7a0f1df18dff813ad1e6cb2cd0eea12b8", "committedDate": "2020-04-18T15:03:54Z", "message": "[eclipse/xtext#1679] converted code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MTY1MDcx", "url": "https://github.com/eclipse/xtext-core/pull/1448#pullrequestreview-397165071", "createdAt": "2020-04-21T09:44:00Z", "commit": {"oid": "1324f2f7a0f1df18dff813ad1e6cb2cd0eea12b8"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTo0NDowMFrOGI8tqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOTo0NDowNlrOGI8t6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAzNjUyMw==", "bodyText": "safety.", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r412036523", "createdAt": "2020-04-21T09:44:00Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.util;\n+\n+import java.util.List;\n+\n+import org.eclipse.lsp4j.DocumentHighlight;\n+import org.eclipse.lsp4j.DocumentHighlightKind;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.xtext.ide.tests.testlanguage.TestLanguageIdeInjectorProvider;\n+import org.eclipse.xtext.ide.util.DocumentHighlightComparator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+\n+/**\n+ * Test for the null-safe {@link DocumentHighlightComparator}.\n+ * \n+ * <p>\n+ * This test focuses on the {@link DocumentHighlightKind} and the null-safety", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1324f2f7a0f1df18dff813ad1e6cb2cd0eea12b8"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAzNjU4Ng==", "bodyText": "Other", "url": "https://github.com/eclipse/xtext-core/pull/1448#discussion_r412036586", "createdAt": "2020-04-21T09:44:06Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/util/DocumentHighlightComparatorTest.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.util;\n+\n+import java.util.List;\n+\n+import org.eclipse.lsp4j.DocumentHighlight;\n+import org.eclipse.lsp4j.DocumentHighlightKind;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.xtext.ide.tests.testlanguage.TestLanguageIdeInjectorProvider;\n+import org.eclipse.xtext.ide.util.DocumentHighlightComparator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+\n+/**\n+ * Test for the null-safe {@link DocumentHighlightComparator}.\n+ * \n+ * <p>\n+ * This test focuses on the {@link DocumentHighlightKind} and the null-safety\n+ * other orderings are checked via the {@link RangeComparatorTest}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1324f2f7a0f1df18dff813ad1e6cb2cd0eea12b8"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fe502ea95e1d266803d20584ce9d52d1b99891a", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/8fe502ea95e1d266803d20584ce9d52d1b99891a", "committedDate": "2020-04-21T10:19:18Z", "message": "[eclipse/xtext#1679] converted code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1324f2f7a0f1df18dff813ad1e6cb2cd0eea12b8", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/1324f2f7a0f1df18dff813ad1e6cb2cd0eea12b8", "committedDate": "2020-04-18T15:03:54Z", "message": "[eclipse/xtext#1679] converted code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "8fe502ea95e1d266803d20584ce9d52d1b99891a", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-core/commit/8fe502ea95e1d266803d20584ce9d52d1b99891a", "committedDate": "2020-04-21T10:19:18Z", "message": "[eclipse/xtext#1679] converted code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4757, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}