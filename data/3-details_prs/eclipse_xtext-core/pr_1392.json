{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MTg4OTc0", "number": 1392, "title": "[LS] support multiple workspace root folders", "bodyText": "Fixes #1238", "createdAt": "2020-02-19T14:05:17Z", "url": "https://github.com/eclipse/xtext-core/pull/1392", "merged": true, "mergeCommit": {"oid": "7db186699e277efde7abb0b735f6beb6d7c5a2c1"}, "closed": true, "closedAt": "2020-02-20T15:09:43Z", "author": {"login": "JanKoehnlein"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcF3YUtgFqTM2MTE1MjgwMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGJAJYABqjMwNTUzNTE3ODA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMTUyODAw", "url": "https://github.com/eclipse/xtext-core/pull/1392#pullrequestreview-361152800", "createdAt": "2020-02-19T14:27:02Z", "commit": {"oid": "52d115d152716577242a3d816affa28c12847d74"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDoyNzowMlrOFrqKEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDoyNzowMlrOFrqKEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMyMzc5Mw==", "bodyText": "should be 2.21", "url": "https://github.com/eclipse/xtext-core/pull/1392#discussion_r381323793", "createdAt": "2020-02-19T14:27:02Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/IMultiRootWorkspaceConfigFactory.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.server;\n+\n+import java.util.List;\n+\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+import org.eclipse.xtext.workspace.IWorkspaceConfig;\n+\n+/**\n+ * @author Jan Koehnlein - Initial contribution and API\n+ * @since 2.11", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52d115d152716577242a3d816affa28c12847d74"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMTUzNjcw", "url": "https://github.com/eclipse/xtext-core/pull/1392#pullrequestreview-361153670", "createdAt": "2020-02-19T14:28:03Z", "commit": {"oid": "52d115d152716577242a3d816affa28c12847d74"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDoyODowNFrOFrqMtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDoyODowNFrOFrqMtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMyNDQ3MQ==", "bodyText": "missing @since", "url": "https://github.com/eclipse/xtext-core/pull/1392#discussion_r381324471", "createdAt": "2020-02-19T14:28:04Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ProjectManager.java", "diffHunk": "@@ -215,4 +215,12 @@ public ProjectDescription getProjectDescription() {\n \tpublic IProjectConfig getProjectConfig() {\n \t\treturn projectConfig;\n \t}\n+\t\n+\tpublic void delete() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52d115d152716577242a3d816affa28c12847d74"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMTQ1ODY3", "url": "https://github.com/eclipse/xtext-core/pull/1392#pullrequestreview-361145867", "createdAt": "2020-02-19T14:18:56Z", "commit": {"oid": "52d115d152716577242a3d816affa28c12847d74"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDoxODo1NlrOFrp1Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNDozNzoxMFrOFrqlcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMxODQ1OA==", "bodyText": "This does only work for empty directories.\nThe org.junit.rules.TemporaryFolder rule may be the better choice here.", "url": "https://github.com/eclipse/xtext-core/pull/1392#discussion_r381318458", "createdAt": "2020-02-19T14:18:56Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/server/WorkspaceFoldersTest.xtend", "diffHunk": "@@ -0,0 +1,123 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.tests.server\n+\n+import com.google.inject.AbstractModule\n+import com.google.inject.Inject\n+import com.google.inject.Module\n+import com.google.inject.Scopes\n+import java.io.File\n+import java.io.FileWriter\n+import java.util.concurrent.CompletableFuture\n+import org.eclipse.lsp4j.DidChangeWorkspaceFoldersParams\n+import org.eclipse.lsp4j.WorkspaceFolder\n+import org.eclipse.lsp4j.WorkspaceFoldersChangeEvent\n+import org.eclipse.xtext.ide.server.UriExtensions\n+import org.eclipse.xtext.ide.server.WorkspaceManager\n+import org.eclipse.xtext.util.Files\n+import org.eclipse.xtext.util.Modules2\n+import org.junit.Test\n+\n+import static org.junit.Assert.assertEquals\n+\n+/**\n+ * @author Jan Koehnlein - Initial contribution and API\n+ */\n+class WorkspaceFoldersTest extends AbstractTestLangLanguageServerTest {\n+\t\n+\t@Inject extension UriExtensions\n+\t\n+\t@Inject WorkspaceManager workspaceManager\n+\t\n+\t@Test\n+\tdef void testInitialize() {\n+\t\tval rootFolder1 = getRoot('root1') \n+\t\tval rootFolder2 = getRoot('root2') \n+\t\twriteFile(rootFolder1, \"one.testlang\", '''\n+\t\t\ttype Foo {\n+\t\t\t\tBar bar\n+\t\t\t}\n+\t\t''')\n+\t\tval twoUri = writeFile(rootFolder2, \"two.testlang\", '''\n+\t\t\ttype Bar {\n+\t\t\t\tFoo foo\n+\t\t\t}\n+\t\t''')\n+\t\tinitialize[ \n+\t\t\tworkspaceFolders = #[\n+\t\t\t\tnew WorkspaceFolder(rootFolder1.toURI.toUriString, 'root1'),\n+\t\t\t\tnew WorkspaceFolder(rootFolder2.toURI.toUriString, 'root2')\n+\t\t\t]\n+\t\t]\n+\t\tassertEquals(2, diagnostics.size)\n+\t\tassertEquals(1, diagnostics.get(twoUri).size)\n+\t\twithBuild [\n+\t\t\tlanguageServer.didChangeWorkspaceFolders(new DidChangeWorkspaceFoldersParams => [\n+\t\t\t\tevent = new WorkspaceFoldersChangeEvent => [\n+\t\t\t\t\tremoved = #[\n+\t\t\t\t\t\tnew WorkspaceFolder(rootFolder2.toURI.toUriString, 'root2')\n+\t\t\t\t\t]\n+\t\t\t\t]\n+\t\t\t])\n+\t\t]\t\n+\t\tassertEquals(0, diagnostics.get(twoUri).size)\n+\t\twithBuild [\n+\t\t\tlanguageServer.didChangeWorkspaceFolders(new DidChangeWorkspaceFoldersParams => [\n+\t\t\t\tevent = new WorkspaceFoldersChangeEvent => [\n+\t\t\t\t\tadded = #[\n+\t\t\t\t\t\tnew WorkspaceFolder(rootFolder2.toURI.toUriString, 'root2')\n+\t\t\t\t\t]\n+\t\t\t\t]\n+\t\t\t])\n+\t\t]\t\n+\t\tassertEquals(1, diagnostics.get(twoUri).size)\n+\t}\n+\n+\tprotected def void withBuild(()=>void lambda) {\n+\t\tval future = new CompletableFuture<Void>()\n+\t\tworkspaceManager.addBuildListener[  \n+\t\t\tworkspaceManager.removeBuildListener(self)\n+\t\t\tfuture.complete(null)\t\t\t\n+\t\t]\n+\t\tlambda.apply\n+\t\tfuture.get\n+\t}\n+\n+    protected def getRoot(String path) {\n+        val root = new File(path)\n+        if (!root.mkdirs) {\n+            Files.cleanFolder(root, null, true, false)\n+        }\n+        root.deleteOnExit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52d115d152716577242a3d816affa28c12847d74"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMyMTc0NA==", "bodyText": "Why did you decide to make this not a subtype of IWorkspaceConfigFactory ?", "url": "https://github.com/eclipse/xtext-core/pull/1392#discussion_r381321744", "createdAt": "2020-02-19T14:24:03Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/IMultiRootWorkspaceConfigFactory.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.server;\n+\n+import java.util.List;\n+\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+import org.eclipse.xtext.workspace.IWorkspaceConfig;\n+\n+/**\n+ * @author Jan Koehnlein - Initial contribution and API\n+ * @since 2.11\n+ */\n+public interface IMultiRootWorkspaceConfigFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52d115d152716577242a3d816affa28c12847d74"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMyNDc4Ng==", "bodyText": "The debugging experience would be improved if the workspaceFolder name would be used as a prefix here.", "url": "https://github.com/eclipse/xtext-core/pull/1392#discussion_r381324786", "createdAt": "2020-02-19T14:28:31Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/MultiRootWorkspaceConfigFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.server;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+import org.eclipse.xtext.workspace.FileProjectConfig;\n+import org.eclipse.xtext.workspace.IWorkspaceConfig;\n+import org.eclipse.xtext.workspace.WorkspaceConfig;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Creates one project per workspace root folder.\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.21\n+ */\n+public class MultiRootWorkspaceConfigFactory implements IWorkspaceConfigFactory, IMultiRootWorkspaceConfigFactory {\n+\n+\t@Inject UriExtensions uriExtensions;\n+\t\n+\t@Override\n+\tpublic IWorkspaceConfig getWorkspaceConfig(List<WorkspaceFolder> workspaceFolders) {\n+\t\tWorkspaceConfig workspaceConfig = new WorkspaceConfig();\n+\t\tSet<String> existingProjectNames = new HashSet<>();\n+\t\tfor(WorkspaceFolder workspaceFolder: workspaceFolders) \n+\t\t\taddProjectsForWorkspaceFolder(workspaceConfig, workspaceFolder, existingProjectNames);\n+\t\treturn workspaceConfig;\n+\t}\n+\n+\t@Override\n+\tpublic IWorkspaceConfig getWorkspaceConfig(URI workspaceBaseURI) {\n+\t\tWorkspaceConfig workspaceConfig = new WorkspaceConfig();\n+\t\taddProjectsForWorkspaceFolder(workspaceConfig, new WorkspaceFolder(uriExtensions.toUriString(workspaceBaseURI), \"workspace\"), new HashSet<>());\n+\t\treturn workspaceConfig;\n+\t}\n+\n+\tprotected void addProjectsForWorkspaceFolder(WorkspaceConfig workspaceConfig, WorkspaceFolder workspaceFolder, Set<String> existingNames) {\n+\t\tif (workspaceFolder != null && workspaceFolder.getUri() != null) {\n+\t\t\tFileProjectConfig project = new FileProjectConfig(uriExtensions.toUri(workspaceFolder.getUri()), getUniqueProjectName(workspaceFolder.getName(), existingNames));\n+\t\t\tproject.addSourceFolder(\".\");\n+\t\t\tworkspaceConfig.addProject(project);\n+\t\t}\n+\t}\n+\t\n+\t/**\n+\t * Project names have to be unique, as the WorkspaceManager uses them as keys in a map.\n+\t */\n+\tprotected String getUniqueProjectName(String proposal, Set<String> existingNames){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52d115d152716577242a3d816affa28c12847d74"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMyNTk4OA==", "bodyText": "I had another expectation from the method name delete.\nMaybe removeAllIssues or discardAllIssues?", "url": "https://github.com/eclipse/xtext-core/pull/1392#discussion_r381325988", "createdAt": "2020-02-19T14:30:09Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ProjectManager.java", "diffHunk": "@@ -215,4 +215,12 @@ public ProjectDescription getProjectDescription() {\n \tpublic IProjectConfig getProjectConfig() {\n \t\treturn projectConfig;\n \t}\n+\t\n+\tpublic void delete() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52d115d152716577242a3d816affa28c12847d74"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMyNjk3Nw==", "bodyText": "Clients that used to have bound ProjectWorkspaceConfigFactory to their special subtype would now be broken. If MultiRootWorkspaceConfigFactory was a subtype of ProjectWorkspaceConfigFactory, that could be mitigated.", "url": "https://github.com/eclipse/xtext-core/pull/1392#discussion_r381326977", "createdAt": "2020-02-19T14:31:32Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/ServerModule.xtend", "diffHunk": "@@ -28,9 +28,8 @@ class ServerModule extends AbstractModule {\n \t\t\n     \tbind(LanguageServer).to(LanguageServerImpl)\n         bind(IResourceServiceProvider.Registry).toProvider(ResourceServiceProviderServiceLoader)\n-        bind(IWorkspaceConfigFactory).to(ProjectWorkspaceConfigFactory)\n+        bind(IWorkspaceConfigFactory).to(MultiRootWorkspaceConfigFactory)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52d115d152716577242a3d816affa28c12847d74"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMyOTQ3Mg==", "bodyText": "Do I understand this correctly: this change here turns all the tests into MultiWorkspaceRootTests? Or are there still tests for \"old\" clients?", "url": "https://github.com/eclipse/xtext-core/pull/1392#discussion_r381329472", "createdAt": "2020-02-19T14:35:17Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/AbstractLanguageServerTest.xtend", "diffHunk": "@@ -190,6 +191,9 @@ abstract class AbstractLanguageServerTest implements Endpoint {\n \t\tval params = new InitializeParams => [\n \t\t\tprocessId = 1\n \t\t\trootUri = root.toURI.normalize.toUriString\n+\t\t\tworkspaceFolders = #[", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52d115d152716577242a3d816affa28c12847d74"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTMzMDgwMA==", "bodyText": "See question above on the interface IMultiRootWorkspaceConfigFactory - this code here suggests that the \"normal\" workspaceConfigFactory and the multi root incarnation of it are in an inheritance relationship.", "url": "https://github.com/eclipse/xtext-core/pull/1392#discussion_r381330800", "createdAt": "2020-02-19T14:37:10Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/WorkspaceManager.java", "diffHunk": "@@ -141,16 +149,68 @@ public void setBuildManager(BuildManager buildManager) {\n \t */\n \tpublic void initialize(URI baseDir, Procedure2<? super URI, ? super Iterable<Issue>> issueAcceptor,\n \t\t\tCancelIndicator cancelIndicator) {\n-\t\tthis.baseDir = baseDir;\n+\t\tif (isSupportsWorkspaceFolders()) {\n+\t\t\tWorkspaceFolder workspaceFolder = new WorkspaceFolder(uriExtensions.toUriString(baseDir), \"workspace\");\n+\t\t\tinitialize(Collections.singletonList(workspaceFolder), issueAcceptor, cancelIndicator);\t\t\t\n+\t\t} else {\n+\t\t\tthis.baseDir = baseDir;\n+\t\t\tthis.issueAcceptor = issueAcceptor;\n+\t\t\trefreshWorkspaceConfig(cancelIndicator);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Initialize a workspace with the given workspace folders.\n+\t *\n+\t * @param workspaceFolders\n+\t *            the list of workspace root folders\n+\t * @param issueAcceptor\n+\t *            the issue acceptor\n+\t * @param cancelIndicator\n+\t *            allows to cancel the initialization\n+\t * @since 2.21\n+\t */\n+\tpublic void initialize(List<WorkspaceFolder> workspaceFolders, Procedure2<? super URI, ? super Iterable<Issue>> issueAcceptor,\n+\t\t\tCancelIndicator cancelIndicator) {\n+\t\tthis.workspaceFolders = new ArrayList<>(workspaceFolders);\n \t\tthis.issueAcceptor = issueAcceptor;\n \t\trefreshWorkspaceConfig(cancelIndicator);\n \t}\n \n+\t/**\n+\t * @return whether this workspace manager supports multiple workspace root folders.\n+\t * @since 2.21\n+\t */\n+\tpublic boolean isSupportsWorkspaceFolders() {\n+\t\treturn workspaceConfigFactory instanceof IMultiRootWorkspaceConfigFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52d115d152716577242a3d816affa28c12847d74"}, "originalPosition": 67}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "52d115d152716577242a3d816affa28c12847d74", "author": {"user": {"login": "JanKoehnlein", "name": "Jan Koehnlein"}}, "url": "https://github.com/eclipse/xtext-core/commit/52d115d152716577242a3d816affa28c12847d74", "committedDate": "2020-02-19T10:29:45Z", "message": "[LS] support multiple workspace root folders\n\nFixes #1238"}, "afterCommit": {"oid": "193089fe0069579dabe0fad64f3ecee6dec34015", "author": {"user": {"login": "JanKoehnlein", "name": "Jan Koehnlein"}}, "url": "https://github.com/eclipse/xtext-core/commit/193089fe0069579dabe0fad64f3ecee6dec34015", "committedDate": "2020-02-19T15:11:16Z", "message": "[LS] support multiple workspace root folders\n\nFixes #1238"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNDEyODQ3", "url": "https://github.com/eclipse/xtext-core/pull/1392#pullrequestreview-361412847", "createdAt": "2020-02-19T20:28:28Z", "commit": {"oid": "193089fe0069579dabe0fad64f3ecee6dec34015"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDoyODoyOFrOFr2d-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDozNTozOFrOFr2sCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUyNTQ5OQ==", "bodyText": "Mixed whitespace", "url": "https://github.com/eclipse/xtext-core/pull/1392#discussion_r381525499", "createdAt": "2020-02-19T20:28:28Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/server/WorkspaceFoldersTest.xtend", "diffHunk": "@@ -0,0 +1,126 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.tests.server\n+\n+import com.google.inject.AbstractModule\n+import com.google.inject.Inject\n+import com.google.inject.Module\n+import com.google.inject.Scopes\n+import java.io.File\n+import java.io.FileWriter\n+import java.util.concurrent.CompletableFuture\n+import org.eclipse.lsp4j.DidChangeWorkspaceFoldersParams\n+import org.eclipse.lsp4j.WorkspaceFolder\n+import org.eclipse.lsp4j.WorkspaceFoldersChangeEvent\n+import org.eclipse.xtext.ide.server.UriExtensions\n+import org.eclipse.xtext.ide.server.WorkspaceManager\n+import org.eclipse.xtext.util.Files\n+import org.eclipse.xtext.util.Modules2\n+import org.junit.Test\n+\n+import static org.junit.Assert.assertEquals\n+import org.junit.rules.TemporaryFolder\n+\n+/**\n+ * @author Jan Koehnlein - Initial contribution and API\n+ */\n+class WorkspaceFoldersTest extends AbstractTestLangLanguageServerTest {\n+\t\n+\t@Inject extension UriExtensions\n+\t\n+\t@Inject WorkspaceManager workspaceManager\n+\t\n+\t@Inject extension TemporaryFolder \n+\t\n+\t@Test\n+\tdef void testInitialize() {\n+\t\tval rootFolder1 = getRoot('root1') \n+\t\tval rootFolder2 = getRoot('root2') \n+\t\twriteFile(rootFolder1, \"one.testlang\", '''\n+\t\t\ttype Foo {\n+\t\t\t\tBar bar\n+\t\t\t}\n+\t\t''')\n+\t\tval twoUri = writeFile(rootFolder2, \"two.testlang\", '''\n+\t\t\ttype Bar {\n+\t\t\t\tFoo foo\n+\t\t\t}\n+\t\t''')\n+\t\tinitialize[ \n+\t\t\tworkspaceFolders = #[\n+\t\t\t\tnew WorkspaceFolder(rootFolder1.toURI.toUriString, 'root1'),\n+\t\t\t\tnew WorkspaceFolder(rootFolder2.toURI.toUriString, 'root2')\n+\t\t\t]\n+\t\t]\n+\t\tassertEquals(2, diagnostics.size)\n+\t\tassertEquals(1, diagnostics.get(twoUri).size)\n+\t\twithBuild [\n+\t\t\tlanguageServer.didChangeWorkspaceFolders(new DidChangeWorkspaceFoldersParams => [\n+\t\t\t\tevent = new WorkspaceFoldersChangeEvent => [\n+\t\t\t\t\tremoved = #[\n+\t\t\t\t\t\tnew WorkspaceFolder(rootFolder2.toURI.toUriString, 'root2')\n+\t\t\t\t\t]\n+\t\t\t\t]\n+\t\t\t])\n+\t\t]\t\n+\t\tassertEquals(0, diagnostics.get(twoUri).size)\n+\t\twithBuild [\n+\t\t\tlanguageServer.didChangeWorkspaceFolders(new DidChangeWorkspaceFoldersParams => [\n+\t\t\t\tevent = new WorkspaceFoldersChangeEvent => [\n+\t\t\t\t\tadded = #[\n+\t\t\t\t\t\tnew WorkspaceFolder(rootFolder2.toURI.toUriString, 'root2')\n+\t\t\t\t\t]\n+\t\t\t\t]\n+\t\t\t])\n+\t\t]\t\n+\t\tassertEquals(1, diagnostics.get(twoUri).size)\n+\t}\n+\n+\tprotected def void withBuild(()=>void lambda) {\n+\t\tval future = new CompletableFuture<Void>()\n+\t\tworkspaceManager.addBuildListener[  \n+\t\t\tworkspaceManager.removeBuildListener(self)\n+\t\t\tfuture.complete(null)\t\t\t\n+\t\t]\n+\t\tlambda.apply\n+\t\tfuture.get\n+\t}\n+\n+    protected def getRoot(String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "193089fe0069579dabe0fad64f3ecee6dec34015"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUyNzA3MQ==", "bodyText": "Probably want your full name here", "url": "https://github.com/eclipse/xtext-core/pull/1392#discussion_r381527071", "createdAt": "2020-02-19T20:31:34Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/MultiRootWorkspaceConfigFactory.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.server;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.lsp4j.WorkspaceFolder;\n+import org.eclipse.xtext.workspace.FileProjectConfig;\n+import org.eclipse.xtext.workspace.IWorkspaceConfig;\n+import org.eclipse.xtext.workspace.WorkspaceConfig;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Creates one project per workspace root folder.\n+ * \n+ * @author koehnlein - Initial contribution and API", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "193089fe0069579dabe0fad64f3ecee6dec34015"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUyOTA5OA==", "bodyText": "Seems like a weird name to me. I'd prefer something like supportsWorkspaceFolders", "url": "https://github.com/eclipse/xtext-core/pull/1392#discussion_r381529098", "createdAt": "2020-02-19T20:35:38Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/WorkspaceManager.java", "diffHunk": "@@ -141,16 +149,68 @@ public void setBuildManager(BuildManager buildManager) {\n \t */\n \tpublic void initialize(URI baseDir, Procedure2<? super URI, ? super Iterable<Issue>> issueAcceptor,\n \t\t\tCancelIndicator cancelIndicator) {\n-\t\tthis.baseDir = baseDir;\n+\t\tif (isSupportsWorkspaceFolders()) {\n+\t\t\tWorkspaceFolder workspaceFolder = new WorkspaceFolder(uriExtensions.toUriString(baseDir), \"workspace\");\n+\t\t\tinitialize(Collections.singletonList(workspaceFolder), issueAcceptor, cancelIndicator);\t\t\t\n+\t\t} else {\n+\t\t\tthis.baseDir = baseDir;\n+\t\t\tthis.issueAcceptor = issueAcceptor;\n+\t\t\trefreshWorkspaceConfig(cancelIndicator);\n+\t\t}\n+\t}\n+\n+\t/**\n+\t * Initialize a workspace with the given workspace folders.\n+\t *\n+\t * @param workspaceFolders\n+\t *            the list of workspace root folders\n+\t * @param issueAcceptor\n+\t *            the issue acceptor\n+\t * @param cancelIndicator\n+\t *            allows to cancel the initialization\n+\t * @since 2.21\n+\t */\n+\tpublic void initialize(List<WorkspaceFolder> workspaceFolders, Procedure2<? super URI, ? super Iterable<Issue>> issueAcceptor,\n+\t\t\tCancelIndicator cancelIndicator) {\n+\t\tthis.workspaceFolders = new ArrayList<>(workspaceFolders);\n \t\tthis.issueAcceptor = issueAcceptor;\n \t\trefreshWorkspaceConfig(cancelIndicator);\n \t}\n \n+\t/**\n+\t * @return whether this workspace manager supports multiple workspace root folders.\n+\t * @since 2.21\n+\t */\n+\tpublic boolean isSupportsWorkspaceFolders() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "193089fe0069579dabe0fad64f3ecee6dec34015"}, "originalPosition": 66}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "193089fe0069579dabe0fad64f3ecee6dec34015", "author": {"user": {"login": "JanKoehnlein", "name": "Jan Koehnlein"}}, "url": "https://github.com/eclipse/xtext-core/commit/193089fe0069579dabe0fad64f3ecee6dec34015", "committedDate": "2020-02-19T15:11:16Z", "message": "[LS] support multiple workspace root folders\n\nFixes #1238"}, "afterCommit": {"oid": "89e84bffa10683317e35a96903a9b4013298aa08", "author": {"user": {"login": "JanKoehnlein", "name": "Jan Koehnlein"}}, "url": "https://github.com/eclipse/xtext-core/commit/89e84bffa10683317e35a96903a9b4013298aa08", "committedDate": "2020-02-20T10:04:46Z", "message": "[LS] support multiple workspace root folders\n\nFixes #1238"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNzc2ODk3", "url": "https://github.com/eclipse/xtext-core/pull/1392#pullrequestreview-361776897", "createdAt": "2020-02-20T10:10:00Z", "commit": {"oid": "89e84bffa10683317e35a96903a9b4013298aa08"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMDoxMDowMFrOFsNbBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMDoxNzo1OVrOFsNsOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkwMTU3NQ==", "bodyText": "Must be a public field and annotated with @Rule to take effect.\nThe Javadoc of TemporaryFolder has an example.", "url": "https://github.com/eclipse/xtext-core/pull/1392#discussion_r381901575", "createdAt": "2020-02-20T10:10:00Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/server/WorkspaceFoldersTest.xtend", "diffHunk": "@@ -0,0 +1,126 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.tests.server\n+\n+import com.google.inject.AbstractModule\n+import com.google.inject.Inject\n+import com.google.inject.Module\n+import com.google.inject.Scopes\n+import java.io.File\n+import java.io.FileWriter\n+import java.util.concurrent.CompletableFuture\n+import org.eclipse.lsp4j.DidChangeWorkspaceFoldersParams\n+import org.eclipse.lsp4j.WorkspaceFolder\n+import org.eclipse.lsp4j.WorkspaceFoldersChangeEvent\n+import org.eclipse.xtext.ide.server.UriExtensions\n+import org.eclipse.xtext.ide.server.WorkspaceManager\n+import org.eclipse.xtext.util.Files\n+import org.eclipse.xtext.util.Modules2\n+import org.junit.Test\n+\n+import static org.junit.Assert.assertEquals\n+import org.junit.rules.TemporaryFolder\n+\n+/**\n+ * @author Jan Koehnlein - Initial contribution and API\n+ */\n+class WorkspaceFoldersTest extends AbstractTestLangLanguageServerTest {\n+\n+\t@Inject extension UriExtensions\n+\n+\t@Inject WorkspaceManager workspaceManager\n+\n+\t@Inject extension TemporaryFolder ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e84bffa10683317e35a96903a9b4013298aa08"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkwMTc3OQ==", "bodyText": "This shouldn't be necessary when working with the TemporaryFolder rule", "url": "https://github.com/eclipse/xtext-core/pull/1392#discussion_r381901779", "createdAt": "2020-02-20T10:10:22Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/server/WorkspaceFoldersTest.xtend", "diffHunk": "@@ -0,0 +1,126 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.tests.server\n+\n+import com.google.inject.AbstractModule\n+import com.google.inject.Inject\n+import com.google.inject.Module\n+import com.google.inject.Scopes\n+import java.io.File\n+import java.io.FileWriter\n+import java.util.concurrent.CompletableFuture\n+import org.eclipse.lsp4j.DidChangeWorkspaceFoldersParams\n+import org.eclipse.lsp4j.WorkspaceFolder\n+import org.eclipse.lsp4j.WorkspaceFoldersChangeEvent\n+import org.eclipse.xtext.ide.server.UriExtensions\n+import org.eclipse.xtext.ide.server.WorkspaceManager\n+import org.eclipse.xtext.util.Files\n+import org.eclipse.xtext.util.Modules2\n+import org.junit.Test\n+\n+import static org.junit.Assert.assertEquals\n+import org.junit.rules.TemporaryFolder\n+\n+/**\n+ * @author Jan Koehnlein - Initial contribution and API\n+ */\n+class WorkspaceFoldersTest extends AbstractTestLangLanguageServerTest {\n+\n+\t@Inject extension UriExtensions\n+\n+\t@Inject WorkspaceManager workspaceManager\n+\n+\t@Inject extension TemporaryFolder \n+\n+\t@Test\n+\tdef void testInitialize() {\n+\t\tval rootFolder1 = getRoot('root1') \n+\t\tval rootFolder2 = getRoot('root2') \n+\t\twriteFile(rootFolder1, \"one.testlang\", '''\n+\t\t\ttype Foo {\n+\t\t\t\tBar bar\n+\t\t\t}\n+\t\t''')\n+\t\tval twoUri = writeFile(rootFolder2, \"two.testlang\", '''\n+\t\t\ttype Bar {\n+\t\t\t\tFoo foo\n+\t\t\t}\n+\t\t''')\n+\t\tinitialize[ \n+\t\t\tworkspaceFolders = #[\n+\t\t\t\tnew WorkspaceFolder(rootFolder1.toURI.toUriString, 'root1'),\n+\t\t\t\tnew WorkspaceFolder(rootFolder2.toURI.toUriString, 'root2')\n+\t\t\t]\n+\t\t]\n+\t\tassertEquals(2, diagnostics.size)\n+\t\tassertEquals(1, diagnostics.get(twoUri).size)\n+\t\twithBuild [\n+\t\t\tlanguageServer.didChangeWorkspaceFolders(new DidChangeWorkspaceFoldersParams => [\n+\t\t\t\tevent = new WorkspaceFoldersChangeEvent => [\n+\t\t\t\t\tremoved = #[\n+\t\t\t\t\t\tnew WorkspaceFolder(rootFolder2.toURI.toUriString, 'root2')\n+\t\t\t\t\t]\n+\t\t\t\t]\n+\t\t\t])\n+\t\t]\t\n+\t\tassertEquals(0, diagnostics.get(twoUri).size)\n+\t\twithBuild [\n+\t\t\tlanguageServer.didChangeWorkspaceFolders(new DidChangeWorkspaceFoldersParams => [\n+\t\t\t\tevent = new WorkspaceFoldersChangeEvent => [\n+\t\t\t\t\tadded = #[\n+\t\t\t\t\t\tnew WorkspaceFolder(rootFolder2.toURI.toUriString, 'root2')\n+\t\t\t\t\t]\n+\t\t\t\t]\n+\t\t\t])\n+\t\t]\t\n+\t\tassertEquals(1, diagnostics.get(twoUri).size)\n+\t}\n+\n+\tprotected def void withBuild(()=>void lambda) {\n+\t\tval future = new CompletableFuture<Void>()\n+\t\tworkspaceManager.addBuildListener[  \n+\t\t\tworkspaceManager.removeBuildListener(self)\n+\t\t\tfuture.complete(null)\t\t\t\n+\t\t]\n+\t\tlambda.apply\n+\t\tfuture.get\n+\t}\n+\n+\tprotected def getRoot(String path) {\n+\t\tval root = newFolder(path)\n+\t\tif (!root.mkdirs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e84bffa10683317e35a96903a9b4013298aa08"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTkwNTk3OQ==", "bodyText": "I've the feeling that baseDir should be removed and the list of workspaceFolders should always be used.\nIf isSupports..() is false, the baseDir could be unwrapped from the a single workspaceFolder.\nCan we add a protected getter for the workspaceFolders?", "url": "https://github.com/eclipse/xtext-core/pull/1392#discussion_r381905979", "createdAt": "2020-02-20T10:17:59Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/WorkspaceManager.java", "diffHunk": "@@ -60,11 +63,16 @@\n \n \t@Inject\n \tprivate IProjectDescriptionFactory projectDescriptionFactory;\n+\t\n+\t@Inject \n+\tprivate UriExtensions uriExtensions;\n \n \tprivate BuildManager buildManager;\n \n \tprivate URI baseDir;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89e84bffa10683317e35a96903a9b4013298aa08"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2cd8edd53dc44f06f67aa733344ce2a335c4e8e", "author": {"user": {"login": "JanKoehnlein", "name": "Jan Koehnlein"}}, "url": "https://github.com/eclipse/xtext-core/commit/e2cd8edd53dc44f06f67aa733344ce2a335c4e8e", "committedDate": "2020-02-20T10:58:38Z", "message": "[LS] support multiple workspace root folders\n\nFixes #1238"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89e84bffa10683317e35a96903a9b4013298aa08", "author": {"user": {"login": "JanKoehnlein", "name": "Jan Koehnlein"}}, "url": "https://github.com/eclipse/xtext-core/commit/89e84bffa10683317e35a96903a9b4013298aa08", "committedDate": "2020-02-20T10:04:46Z", "message": "[LS] support multiple workspace root folders\n\nFixes #1238"}, "afterCommit": {"oid": "e2cd8edd53dc44f06f67aa733344ce2a335c4e8e", "author": {"user": {"login": "JanKoehnlein", "name": "Jan Koehnlein"}}, "url": "https://github.com/eclipse/xtext-core/commit/e2cd8edd53dc44f06f67aa733344ce2a335c4e8e", "committedDate": "2020-02-20T10:58:38Z", "message": "[LS] support multiple workspace root folders\n\nFixes #1238"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4699, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}