{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5NDg0MDE3", "number": 1597, "title": "Semantic quickfix (generic IDE integration)", "bodyText": "This PR adds declarative quickfix support for LSP (loosely based on the Eclipse implementation). This is my first PR, so it would be nice if anyone could give me hints what is missing.\nIf I did something wrong, please just let me know. Hope this can be useful. Cheers, Heiner. \ud83d\ude04", "createdAt": "2020-10-24T19:40:18Z", "url": "https://github.com/eclipse/xtext-core/pull/1597", "merged": true, "mergeCommit": {"oid": "7a2d72fbefe9b1422b197ac88b6fe435e4e649c9"}, "closed": true, "closedAt": "2020-11-02T09:26:39Z", "author": {"login": "imhotep82"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVwulLABqjM5MTcxNTMyNTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYhHDFgFqTUyMTQ1NjU5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4615a8f9aad157ae514395f8bff84cb52985f3ea", "author": {"user": {"login": "heinrichWeichert", "name": "Heinrich Weichert"}}, "url": "https://github.com/eclipse/xtext-core/commit/4615a8f9aad157ae514395f8bff84cb52985f3ea", "committedDate": "2020-10-24T15:29:44Z", "message": "Fix typo"}, "afterCommit": {"oid": "30935a66fdf78bfffbc3811fc1e49e7b80486056", "author": {"user": {"login": "heinrichWeichert", "name": "Heinrich Weichert"}}, "url": "https://github.com/eclipse/xtext-core/commit/30935a66fdf78bfffbc3811fc1e49e7b80486056", "committedDate": "2020-10-24T19:54:14Z", "message": "Introduce quickfix API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "30935a66fdf78bfffbc3811fc1e49e7b80486056", "author": {"user": {"login": "heinrichWeichert", "name": "Heinrich Weichert"}}, "url": "https://github.com/eclipse/xtext-core/commit/30935a66fdf78bfffbc3811fc1e49e7b80486056", "committedDate": "2020-10-24T19:54:14Z", "message": "Introduce quickfix API"}, "afterCommit": {"oid": "d4a330f31ef0528aa1ee9e8e18c5e6f1ef77b076", "author": {"user": {"login": "heinrichWeichert", "name": "Heinrich Weichert"}}, "url": "https://github.com/eclipse/xtext-core/commit/d4a330f31ef0528aa1ee9e8e18c5e6f1ef77b076", "committedDate": "2020-10-24T19:56:32Z", "message": "Introduce quickfix API\n\nSigned-off-by: Heinrich Weichert <heinrich.weichert@avl.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MzI2Njkz", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516326693", "createdAt": "2020-10-25T05:45:54Z", "commit": {"oid": "d4a330f31ef0528aa1ee9e8e18c5e6f1ef77b076"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNTo0NTo1NFrOHn2lmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwNTo0NTo1NFrOHn2lmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU1MDg3NQ==", "bodyText": "Why this", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511550875", "createdAt": "2020-10-25T05:45:54Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/QuickFixInjectorProvider.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import org.eclipse.xtext.testlanguages.fileAware.FileAwareTestLanguageRuntimeModule;\n+import org.eclipse.xtext.testlanguages.fileAware.ide.FileAwareTestLanguageIdeModule;\n+import org.eclipse.xtext.testlanguages.fileAware.ide.FileAwareTestLanguageIdeSetup;\n+import org.eclipse.xtext.testlanguages.fileAware.ide.tests.FileAwareTestLanguageIdeInjectorProvider;\n+import org.eclipse.xtext.util.Modules2;\n+\n+import com.google.inject.Binder;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+\n+public class QuickFixInjectorProvider extends FileAwareTestLanguageIdeInjectorProvider {\n+\n+\t// overridden to avoid NPE in org.eclipse.xtext.resource.impl.LiveShadowedResourceDescriptions.getAllResourceDescriptions()\n+\t@Override\n+\tpublic Injector internalCreateInjector() {\n+\t\treturn new FileAwareTestLanguageIdeSetup() {\n+\t\t\t@Override\n+\t\t\tpublic Injector createInjector() {\n+\t\t\t\treturn Guice.createInjector(Modules2.mixin(new FileAwareTestLanguageRuntimeModule(), new FileAwareTestLanguageIdeModule() {\n+\t\t\t\t\t@Override\n+\t\t\t\t\tpublic void configureIResourceDescriptionsLiveScope(Binder binder) {\n+\t\t\t\t\t\t// do not override runtime binding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4a330f31ef0528aa1ee9e8e18c5e6f1ef77b076"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MzQ5NDAy", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516349402", "createdAt": "2020-10-25T11:33:01Z", "commit": {"oid": "d4a330f31ef0528aa1ee9e8e18c5e6f1ef77b076"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQxMTozMzowMVrOHn4nKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQxMTo1MDoxNVrOHn4unQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU4NDA0MA==", "bodyText": "s/that the/the/\ns/are to/to/", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511584040", "createdAt": "2020-10-25T11:33:01Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/AbstractIdeQuickfixTest.xtend", "diffHunk": "@@ -0,0 +1,174 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import com.google.inject.Inject\n+import java.util.concurrent.CompletableFuture\n+import java.util.function.Function\n+import org.eclipse.emf.common.util.URI\n+import org.eclipse.emf.ecore.EClass\n+import org.eclipse.emf.ecore.EObject\n+import org.eclipse.lsp4j.CodeActionContext\n+import org.eclipse.lsp4j.CodeActionParams\n+import org.eclipse.lsp4j.Diagnostic\n+import org.eclipse.lsp4j.DiagnosticSeverity\n+import org.eclipse.lsp4j.Position\n+import org.eclipse.lsp4j.Range\n+import org.eclipse.lsp4j.TextDocumentIdentifier\n+import org.eclipse.xtend.lib.annotations.Data\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticResolution\n+import org.eclipse.xtext.ide.editor.quickfix.IQuickFixProvider\n+import org.eclipse.xtext.ide.server.Document\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2\n+import org.eclipse.xtext.nodemodel.util.NodeModelUtils\n+import org.eclipse.xtext.resource.FileExtensionProvider\n+import org.eclipse.xtext.resource.XtextResource\n+import org.eclipse.xtext.testing.util.InMemoryURIHandler\n+import org.eclipse.xtext.util.CancelIndicator\n+\n+import static org.eclipse.xtext.util.Strings.toUnixLineSeparator\n+import static org.junit.Assert.assertEquals\n+\n+abstract class AbstractIdeQuickfixTest {\n+\n+\t@Inject\n+\tIQuickFixProvider quickFixProvider\n+\t@Inject\n+\textension QuickFixTestHelper\n+\t@Inject\n+\textension FileExtensionProvider\n+\n+\t/**\n+\t * Test that the expected quickfixes are offered on a given validation issue in a given DSL text.\n+\t * \n+\t * @param it The initial DSL text.\n+\t * @param issueCode The code of the validation issue to that the offered quickfixes are to test.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4a330f31ef0528aa1ee9e8e18c5e6f1ef77b076"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU4NDQ2OQ==", "bodyText": "Nitpick probably don't need any empty lines in this @Data, it's supposed to be very concise", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511584469", "createdAt": "2020-10-25T11:36:27Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/AbstractIdeQuickfixTest.xtend", "diffHunk": "@@ -0,0 +1,174 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import com.google.inject.Inject\n+import java.util.concurrent.CompletableFuture\n+import java.util.function.Function\n+import org.eclipse.emf.common.util.URI\n+import org.eclipse.emf.ecore.EClass\n+import org.eclipse.emf.ecore.EObject\n+import org.eclipse.lsp4j.CodeActionContext\n+import org.eclipse.lsp4j.CodeActionParams\n+import org.eclipse.lsp4j.Diagnostic\n+import org.eclipse.lsp4j.DiagnosticSeverity\n+import org.eclipse.lsp4j.Position\n+import org.eclipse.lsp4j.Range\n+import org.eclipse.lsp4j.TextDocumentIdentifier\n+import org.eclipse.xtend.lib.annotations.Data\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticResolution\n+import org.eclipse.xtext.ide.editor.quickfix.IQuickFixProvider\n+import org.eclipse.xtext.ide.server.Document\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2\n+import org.eclipse.xtext.nodemodel.util.NodeModelUtils\n+import org.eclipse.xtext.resource.FileExtensionProvider\n+import org.eclipse.xtext.resource.XtextResource\n+import org.eclipse.xtext.testing.util.InMemoryURIHandler\n+import org.eclipse.xtext.util.CancelIndicator\n+\n+import static org.eclipse.xtext.util.Strings.toUnixLineSeparator\n+import static org.junit.Assert.assertEquals\n+\n+abstract class AbstractIdeQuickfixTest {\n+\n+\t@Inject\n+\tIQuickFixProvider quickFixProvider\n+\t@Inject\n+\textension QuickFixTestHelper\n+\t@Inject\n+\textension FileExtensionProvider\n+\n+\t/**\n+\t * Test that the expected quickfixes are offered on a given validation issue in a given DSL text.\n+\t * \n+\t * @param it The initial DSL text.\n+\t * @param issueCode The code of the validation issue to that the offered quickfixes are to test.\n+\t * @param quickfixes The quickfixes that are expected to be offered on the given <code>issueCode</code>.\n+\t * Each expected quickfix should be described by the following triple:\n+\t * <ol>\n+\t * \t<li>the quickfix label</li>\n+\t * \t<li>the quickfix description</li>\n+\t * \t<li>the DSL text after the quickfix application</li>\n+\t * </ol>\n+\t */\n+\tdef void testQuickfixesOn(CharSequence it, String issueCode, EClass type,\n+\t\tQuickfix... quickfixes) {\n+\t\t\n+\t\tcreateInMemoryFile(type).quickfixesAreOffered(issueCode, it.toString, quickfixes)\n+\t}\n+\n+\tprotected def EObject createInMemoryFile(CharSequence content, EClass type) {\n+\t\tvar fs = new InMemoryURIHandler()\n+\t\tval fileName = \"inmemory:/file1.\" + primaryFileExtension\n+\t\tfs += fileName -> content.toString // call converts line-breaks\n+\n+\t\tval rs = fs.createResourceSet\n+\n+\t\trs.contents(fileName, type.instanceClass) as EObject\n+\t}\n+\n+\tprivate def void quickfixesAreOffered(EObject target, String issueCode, String originalText,\n+\t\tQuickfix... expected) {\n+\t\tval expectedSorted = expected.sortBy[label]\n+\t\tval elementNode = NodeModelUtils.getNode(target)\n+\n+\t\tval elementStartPosition = NodeModelUtils.getLineAndColumn(elementNode, elementNode.offset)\n+\t\tval elementEndPosition = NodeModelUtils.getLineAndColumn(elementNode, elementNode.endOffset)\n+\n+\t\tval startPos = new Position(elementStartPosition.line - 1, elementStartPosition.column - 1)\n+\t\tval endPos = new Position(elementEndPosition.line - 1, elementEndPosition.column - 1)\n+\n+\t\tval issue = new Diagnostic => [\n+\t\t\tcode = issueCode\n+\t\t\tmessage = \"error\"\n+\t\t\tseverity = DiagnosticSeverity.Error\n+\t\t\tsource = \"source\"\n+\t\t\trange = new Range(startPos, endPos)\n+\t\t]\n+\n+\t\tval options = new ICodeActionService2.Options()\n+\t\toptions.cancelIndicator = CancelIndicator.NullImpl\n+\t\toptions.document = new Document(0, toUnixLineSeparator(originalText))\n+\t\toptions.resource = target.eResource as XtextResource\n+\n+\t\toptions.languageServerAccess = new ILanguageServerAccess() {\n+\n+\t\t\toverride addBuildListener(IBuildListener listener) {\n+\t\t\t\t// stub\n+\t\t\t}\n+\n+\t\t\toverride <T> doRead(String uri, Function<Context, T> function) {\n+\t\t\t\tval ctx = new ILanguageServerAccess.Context(options.resource, options.document,\n+\t\t\t\t\ttrue, CancelIndicator.NullImpl)\n+\t\t\t\tCompletableFuture.completedFuture(function.apply(ctx));\n+\t\t\t}\n+\n+\t\t\toverride <T> doReadIndex(Function<? super IndexContext, ? extends T> function) {\n+\t\t\t\tnull\n+\t\t\t}\n+\n+\t\t\toverride getInitializeParams() {\n+\t\t\t\tnull\n+\t\t\t}\n+\n+\t\t\toverride getInitializeResult() {\n+\t\t\t\tnull\n+\t\t\t}\n+\n+\t\t\toverride getLanguageClient() {\n+\t\t\t\tnull\n+\t\t\t}\n+\n+\t\t\toverride newLiveScopeResourceSet(URI uri) {\n+\t\t\t\toptions.resource.resourceSet\n+\t\t\t}\n+\n+\t\t}\n+\n+\t\toptions.codeActionParams = new CodeActionParams => [\n+\t\t\tcontext = new CodeActionContext => [\n+\t\t\t\tdiagnostics = #[issue]\n+\t\t\t]\n+\t\t\trange = new Range(startPos, endPos)\n+\t\t\ttextDocument = new TextDocumentIdentifier(target.eResource.URI.toString)\n+\t\t]\n+\n+\t\tval actualIssueResolutions = quickFixProvider.getResolutions(options, issue).sortBy[label]\n+\t\tassertEquals(\"The number of quickfixes does not match!\", expectedSorted.size,\n+\t\t\tactualIssueResolutions.size)\n+\t\tfor (i : 0 ..< actualIssueResolutions.size) {\n+\t\t\tval actualIssueResolution = actualIssueResolutions.get(i)\n+\t\t\tval expectedIssueResolution = expectedSorted.get(i)\n+\t\t\tassertEquals(expectedIssueResolution.label, actualIssueResolution.label)\n+\t\t\t// TODO description?\n+\t\t\tassertEquals(expectedIssueResolution.description, actualIssueResolution.label)\n+\t\t\tassertIssueResolutionResult(toUnixLineSeparator(expectedIssueResolution.result), actualIssueResolution,\n+\t\t\t\toriginalText, options.document)\n+\t\t}\n+\t}\n+\n+\tprotected def void assertIssueResolutionResult(String expectedResult,\n+\t\tDiagnosticResolution actualIssueResolution, String originalText, Document doc) {\n+\t\tval edit = actualIssueResolution.apply\n+\t\tval changedDocument = doc.applyChanges(edit.changes.values.flatMap[toList])\n+\n+\t\tassertEquals(expectedResult, changedDocument.contents)\n+\t}\n+\n+\t@Data\n+\tprotected static class Quickfix {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4a330f31ef0528aa1ee9e8e18c5e6f1ef77b076"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU4NDYzMA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511584630", "createdAt": "2020-10-25T11:38:13Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/QuickFixTestHelper.xtend", "diffHunk": "@@ -0,0 +1,27 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.tests.editor.quickfix\n+\n+import com.google.common.base.Preconditions\n+import org.eclipse.emf.common.util.URI\n+import org.eclipse.emf.ecore.resource.ResourceSet\n+import org.eclipse.xtext.ide.tests.serializer.ChangeSerializerTestHelper\n+\n+class QuickFixTestHelper extends ChangeSerializerTestHelper {\n+\n+\t//TODO resource text marker <|> like in Proposal tests\t", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4a330f31ef0528aa1ee9e8e18c5e6f1ef77b076"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU4NDY5Mw==", "bodyText": "Xtext is trying to reduce the amount of xtend code in the codebase. This class doesn't gain too much from being xtend, could you write it in Java instead?", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511584693", "createdAt": "2020-10-25T11:38:56Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/QuickFixTestHelper.xtend", "diffHunk": "@@ -0,0 +1,27 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.tests.editor.quickfix\n+\n+import com.google.common.base.Preconditions\n+import org.eclipse.emf.common.util.URI\n+import org.eclipse.emf.ecore.resource.ResourceSet\n+import org.eclipse.xtext.ide.tests.serializer.ChangeSerializerTestHelper\n+\n+class QuickFixTestHelper extends ChangeSerializerTestHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4a330f31ef0528aa1ee9e8e18c5e6f1ef77b076"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU4NDc5Mw==", "bodyText": "No need for final arguments or final parameters, they don't offer much value and make the code harder to read. There's quite a few more in the code", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511584793", "createdAt": "2020-10-25T11:39:58Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/quickfix/AbstractDeclarativeIdeQuickfixProvider.java", "diffHunk": "@@ -0,0 +1,86 @@\n+package org.eclipse.xtext.ide.editor.quickfix;\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2.Options;\n+\n+import com.google.common.base.Predicate;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+\n+public class AbstractDeclarativeIdeQuickfixProvider implements IQuickFixProvider {\n+\n+\tprivate static final Logger LOG = Logger.getLogger(AbstractDeclarativeIdeQuickfixProvider.class);\n+\n+\t@Inject\n+\tprivate Provider<DiagnosticResolutionAcceptor> issueResolutionAcceptorProvider;\n+\n+\tprivate Predicate<Method> getFixMethodPredicate(final String issueCode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4a330f31ef0528aa1ee9e8e18c5e6f1ef77b076"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU4NTIzNw==", "bodyText": "Aren't we 2.24 already?", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511585237", "createdAt": "2020-10-25T11:44:07Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/quickfix/DiagnosticResolution.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.editor.quickfix;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.common.util.WrappedException;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticModificationContext.Factory;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer.IModification;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2.Options;\n+import org.eclipse.xtext.ide.server.rename.ChangeConverter2;\n+import org.eclipse.xtext.resource.EObjectAtOffsetHelper;\n+import org.eclipse.xtext.resource.XtextResource;\n+\n+public class DiagnosticResolution {\n+\n+\tprivate final String label;\n+\n+\tprivate final IModification<EObject> modification;\n+\n+\tprivate final Factory factory;\n+\n+\tprivate final int relevance;\n+\n+\tprivate Options options;\n+\n+\tpublic DiagnosticResolution(final String label, final Factory modificationContextFactory,\n+\t\t\tfinal IModification<EObject> modification) {\n+\t\tthis(label, modificationContextFactory, modification, 0);\n+\t}\n+\n+\t/**\n+\t * @since 2.22", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4a330f31ef0528aa1ee9e8e18c5e6f1ef77b076"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU4NTYxMA==", "bodyText": "Might as well just use new ArrayList<>();", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511585610", "createdAt": "2020-10-25T11:47:36Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/quickfix/DiagnosticResolutionAcceptor.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.editor.quickfix;\n+\n+import java.util.List;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer.IModification;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2.Options;\n+\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+\n+public class DiagnosticResolutionAcceptor {\n+\n+\tprivate final List<DiagnosticResolution> issues = Lists.newArrayList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4a330f31ef0528aa1ee9e8e18c5e6f1ef77b076"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU4NTc5OQ==", "bodyText": "Abundant empty line", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511585799", "createdAt": "2020-10-25T11:49:12Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/quickfix/QuickFixes.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.editor.quickfix;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation Container for @{@link QuickFix} annotations. You can mark a method in a {@link AbstractDeclarativeIdeQuickfixProvider} with this annotation to\n+ * specify which issue codes the method offers quick-fixes for.\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4a330f31ef0528aa1ee9e8e18c5e6f1ef77b076"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU4NTk0OQ==", "bodyText": "Hmm, I only see @QuickFix being mentioned, not @QuickFixes, am I missing something?", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511585949", "createdAt": "2020-10-25T11:50:15Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/quickfix/QuickFixes.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.editor.quickfix;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation Container for @{@link QuickFix} annotations. You can mark a method in a {@link AbstractDeclarativeIdeQuickfixProvider} with this annotation to\n+ * specify which issue codes the method offers quick-fixes for.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4a330f31ef0528aa1ee9e8e18c5e6f1ef77b076"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDc1ODI2", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516475826", "createdAt": "2020-10-26T05:27:52Z", "commit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNToyNzo1MlrOHoBRuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNToyNzo1MlrOHoBRuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNjAxMQ==", "bodyText": "add @since 2.24", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511726011", "createdAt": "2020-10-26T05:27:52Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/AbstractIdeQuickfixTest.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/**\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.CodeActionContext;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.DiagnosticSeverity;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextDocumentIdentifier;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticResolution;\n+import org.eclipse.xtext.ide.editor.quickfix.IQuickFixProvider;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2;\n+import org.eclipse.xtext.nodemodel.ICompositeNode;\n+import org.eclipse.xtext.nodemodel.util.NodeModelUtils;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.impl.ChunkedResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsData;\n+import org.eclipse.xtext.testing.util.InMemoryURIHandler;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.LineAndColumn;\n+import org.eclipse.xtext.util.Strings;\n+import org.eclipse.xtext.xbase.lib.CollectionLiterals;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ObjectExtensions;\n+import org.eclipse.xtext.xbase.lib.Pair;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+import org.junit.Assert;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Heinrich Weichert", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDc1OTU0", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516475954", "createdAt": "2020-10-26T05:28:22Z", "commit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNToyODoyMlrOHoBSGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNToyODoyMlrOHoBSGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNjEwNA==", "bodyText": "undo this change", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511726104", "createdAt": "2020-10-26T05:28:22Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/.settings/org.eclipse.jdt.core.prefs", "diffHunk": "@@ -1,4 +1,7 @@\n eclipse.preferences.version=1\n+org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDc2MTIx", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516476121", "createdAt": "2020-10-26T05:29:01Z", "commit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNToyOTowMlrOHoBSpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNToyOTowMlrOHoBSpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNjI0Nw==", "bodyText": "@since 2.24 on the class is enhough", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511726247", "createdAt": "2020-10-26T05:29:02Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/quickfix/DiagnosticResolution.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.editor.quickfix;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.common.util.WrappedException;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticModificationContext.Factory;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer.IModification;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2.Options;\n+import org.eclipse.xtext.ide.server.rename.ChangeConverter2;\n+import org.eclipse.xtext.resource.EObjectAtOffsetHelper;\n+import org.eclipse.xtext.resource.XtextResource;\n+\n+/**\n+ * @since 2.24\n+ * \n+ * @author Heinrich Weichert\n+ */\n+public class DiagnosticResolution {\n+\n+\tprivate String label;\n+\n+\tprivate IModification<EObject> modification;\n+\n+\tprivate Factory factory;\n+\n+\tprivate int relevance;\n+\n+\tprivate Options options;\n+\n+\tpublic DiagnosticResolution(String label, Factory modificationContextFactory, IModification<EObject> modification) {\n+\t\tthis(label, modificationContextFactory, modification, 0);\n+\t}\n+\n+\t/**\n+\t * @since 2.24", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDc2NDQx", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516476441", "createdAt": "2020-10-26T05:30:15Z", "commit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozMDoxNVrOHoBTyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozMDoxNVrOHoBTyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNjUzOQ==", "bodyText": "please move the @sinces after the @auther (check also other places)", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511726539", "createdAt": "2020-10-26T05:30:15Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/quickfix/AbstractDeclarativeIdeQuickfixProvider.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package org.eclipse.xtext.ide.editor.quickfix;\n+\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2.Options;\n+\n+import com.google.common.base.Predicate;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+\n+/**\n+ * @since 2.24", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDc3MTQw", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516477140", "createdAt": "2020-10-26T05:32:57Z", "commit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozMjo1N1rOHoBV8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozMjo1N1rOHoBV8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNzA4OQ==", "bodyText": "please remove final from parameters (for fields it is ok)", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511727089", "createdAt": "2020-10-26T05:32:57Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/AbstractIdeQuickfixTest.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/**\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.CodeActionContext;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.DiagnosticSeverity;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextDocumentIdentifier;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticResolution;\n+import org.eclipse.xtext.ide.editor.quickfix.IQuickFixProvider;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2;\n+import org.eclipse.xtext.nodemodel.ICompositeNode;\n+import org.eclipse.xtext.nodemodel.util.NodeModelUtils;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.impl.ChunkedResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsData;\n+import org.eclipse.xtext.testing.util.InMemoryURIHandler;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.LineAndColumn;\n+import org.eclipse.xtext.util.Strings;\n+import org.eclipse.xtext.xbase.lib.CollectionLiterals;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ObjectExtensions;\n+import org.eclipse.xtext.xbase.lib.Pair;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+import org.junit.Assert;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Heinrich Weichert\n+ */\n+public abstract class AbstractIdeQuickfixTest {\n+\n+\tprotected static class Quickfix {\n+\t\tprivate final String label;\n+\t\tprivate final String description;\n+\t\tprivate final String result;\n+\n+\t\tpublic Quickfix(final String label, final String description, final String result) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDc3MTkz", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516477193", "createdAt": "2020-10-26T05:33:13Z", "commit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozMzoxM1rOHoBWIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozMzoxM1rOHoBWIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNzEzNg==", "bodyText": "remove finals from variables", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511727136", "createdAt": "2020-10-26T05:33:13Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/AbstractIdeQuickfixTest.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/**\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.CodeActionContext;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.DiagnosticSeverity;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextDocumentIdentifier;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticResolution;\n+import org.eclipse.xtext.ide.editor.quickfix.IQuickFixProvider;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2;\n+import org.eclipse.xtext.nodemodel.ICompositeNode;\n+import org.eclipse.xtext.nodemodel.util.NodeModelUtils;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.impl.ChunkedResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsData;\n+import org.eclipse.xtext.testing.util.InMemoryURIHandler;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.LineAndColumn;\n+import org.eclipse.xtext.util.Strings;\n+import org.eclipse.xtext.xbase.lib.CollectionLiterals;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ObjectExtensions;\n+import org.eclipse.xtext.xbase.lib.Pair;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+import org.junit.Assert;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Heinrich Weichert\n+ */\n+public abstract class AbstractIdeQuickfixTest {\n+\n+\tprotected static class Quickfix {\n+\t\tprivate final String label;\n+\t\tprivate final String description;\n+\t\tprivate final String result;\n+\n+\t\tpublic Quickfix(final String label, final String description, final String result) {\n+\t\t\tthis.label = label;\n+\t\t\tthis.description = description;\n+\t\t\tthis.result = result;\n+\t\t}\n+\n+\t\tpublic String getLabel() {\n+\t\t\treturn label;\n+\t\t}\n+\n+\t\tpublic String getDescription() {\n+\t\t\treturn description;\n+\t\t}\n+\n+\t\tpublic String getResult() {\n+\t\t\treturn result;\n+\t\t}\n+\t}\n+\n+\t@Inject\n+\tprivate IQuickFixProvider quickFixProvider;\n+\t@Inject\n+\tprivate QuickFixTestHelper quickFixTestHelper;\n+\t@Inject\n+\tprivate FileExtensionProvider fileExtensionProvider;\n+\n+\t/**\n+\t * Test that the expected quickfixes are offered on a given validation issue in a given DSL text.\n+\t *\n+\t * @param fileContents\n+\t *            The initial DSL text.\n+\t * @param issueCode\n+\t *            The code of the validation issue the offered quickfixes to test.\n+\t * @param quickfixes\n+\t *            The quickfixes that are expected to be offered on the given <code>issueCode</code>. Each expected quickfix should be described by the\n+\t *            following triple:\n+\t *            <ol>\n+\t *            <li>the quickfix label</li>\n+\t *            <li>the quickfix description</li>\n+\t *            <li>the DSL text after the quickfix application</li>\n+\t *            </ol>\n+\t */\n+\tpublic void testQuickfixesOn(final String fileContents, final String issueCode, final EClass type, final AbstractIdeQuickfixTest.Quickfix... quickfixes) {\n+\t\tquickfixesAreOffered(createInMemoryFile(fileContents, type), issueCode, fileContents, quickfixes);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tprivate <T> T createInMemoryFile(final CharSequence content, final EClass type) {\n+\t\tInMemoryURIHandler fs = new InMemoryURIHandler();\n+\t\tString _primaryFileExtension = this.fileExtensionProvider.getPrimaryFileExtension();\n+\t\tfinal String fileName = \"inmemory:/file1.\" + _primaryFileExtension;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDc3MzA3", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516477307", "createdAt": "2020-10-26T05:33:42Z", "commit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozMzo0MlrOHoBWeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozMzo0MlrOHoBWeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNzIyNg==", "bodyText": "finals", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511727226", "createdAt": "2020-10-26T05:33:42Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/QuickFixTestHelper.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/**\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.xtext.ide.tests.serializer.ChangeSerializerTestHelper;\n+import org.eclipse.xtext.xbase.lib.IteratorExtensions;\n+\n+import com.google.common.collect.Iterators;\n+\n+/**\n+ * \n+ * @author Heinrich Weichert\n+ */\n+public class QuickFixTestHelper extends ChangeSerializerTestHelper {\n+  @Override\n+  public <T extends Object> T contents(final ResourceSet rs, final String fileName, final Class<T> type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDc3NDI2", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516477426", "createdAt": "2020-10-26T05:34:08Z", "commit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozNDowOFrOHoBWyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozNDowOFrOHoBWyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNzMwNg==", "bodyText": "finals", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511727306", "createdAt": "2020-10-26T05:34:08Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.testlanguages.ide/src/org/eclipse/xtext/testlanguages/fileAware/ide/quickfix/FileAwareTestLanguageQuickFixProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.eclipse.xtext.testlanguages.fileAware.ide.quickfix;\n+\n+import org.eclipse.xtext.ide.editor.quickfix.AbstractDeclarativeIdeQuickfixProvider;\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticResolutionAcceptor;\n+import org.eclipse.xtext.ide.editor.quickfix.QuickFix;\n+import org.eclipse.xtext.testlanguages.fileAware.fileAware.Element;\n+import org.eclipse.xtext.xbase.lib.StringExtensions;\n+\n+public class FileAwareTestLanguageQuickFixProvider extends AbstractDeclarativeIdeQuickfixProvider {\n+\n+\tpublic static class IssueCodes {\n+\t\tprivate IssueCodes() {\n+\t\t\t// utility\n+\t\t}\n+\n+\t\tpublic static final String TESTISSUECODE = \"test\";\n+\t\tpublic static final String TESTLABEL = \"Change element name to first upper\";\n+\t}\n+\n+\t@QuickFix(IssueCodes.TESTISSUECODE)\n+\tpublic void removeUnusedVariable(final DiagnosticResolutionAcceptor acceptor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDc3NDY5", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516477469", "createdAt": "2020-10-26T05:34:17Z", "commit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozNDoxN1rOHoBW9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozNDoxN1rOHoBW9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNzM1MA==", "bodyText": "finals", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511727350", "createdAt": "2020-10-26T05:34:17Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.testlanguages/src/org/eclipse/xtext/testlanguages/fileAware/FileAwareTestLanguageRuntimeModule.java", "diffHunk": "@@ -17,16 +17,18 @@\n  * Use this class to register components to be used at runtime / without the Equinox extension registry.\n  */\n public class FileAwareTestLanguageRuntimeModule extends AbstractFileAwareTestLanguageRuntimeModule {\n-\t\n-\tpublic void configureIResourceDescriptionsLiveScope(Binder binder) {\n+\n+\t@Override\n+\tpublic void configureIResourceDescriptionsLiveScope(final Binder binder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDc3NTIw", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516477520", "createdAt": "2020-10-26T05:34:27Z", "commit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozNDoyN1rOHoBXPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozNDoyN1rOHoBXPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNzQyMg==", "bodyText": "finals", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511727422", "createdAt": "2020-10-26T05:34:27Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.testlanguages/src/org/eclipse/xtext/testlanguages/fileAware/validation/FileAwareTestLanguageValidator.java", "diffHunk": "@@ -3,23 +3,20 @@\n  */\n package org.eclipse.xtext.testlanguages.fileAware.validation;\n \n+import org.eclipse.xtext.testlanguages.fileAware.fileAware.Element;\n+import org.eclipse.xtext.validation.Check;\n \n /**\n- * This class contains custom validation rules. \n+ * This class contains custom validation rules.\n  *\n  * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation\n  */\n public class FileAwareTestLanguageValidator extends AbstractFileAwareTestLanguageValidator {\n-\t\n-//\tpublic static final INVALID_NAME = 'invalidName'\n-//\n-//\t@Check\n-//\tpublic void checkGreetingStartsWithCapital(Greeting greeting) {\n-//\t\tif (!Character.isUpperCase(greeting.getName().charAt(0))) {\n-//\t\t\twarning(\"Name should start with a capital\",\n-//\t\t\t\t\tFileAwareTestLanguagePackage.Literals.GREETING__NAME,\n-//\t\t\t\t\tINVALID_NAME);\n-//\t\t}\n-//\t}\n-\t\n+\n+\t@Check\n+\tpublic void checkElementNameStartsWithUpperCase(final Element element) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDc3NjE3", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516477617", "createdAt": "2020-10-26T05:34:49Z", "commit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozNDo0OVrOHoBXiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozNDo0OVrOHoBXiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNzQ5OQ==", "bodyText": "no constant for issue code", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511727499", "createdAt": "2020-10-26T05:34:49Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.testlanguages/src/org/eclipse/xtext/testlanguages/fileAware/validation/FileAwareTestLanguageValidator.java", "diffHunk": "@@ -3,23 +3,20 @@\n  */\n package org.eclipse.xtext.testlanguages.fileAware.validation;\n \n+import org.eclipse.xtext.testlanguages.fileAware.fileAware.Element;\n+import org.eclipse.xtext.validation.Check;\n \n /**\n- * This class contains custom validation rules. \n+ * This class contains custom validation rules.\n  *\n  * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation\n  */\n public class FileAwareTestLanguageValidator extends AbstractFileAwareTestLanguageValidator {\n-\t\n-//\tpublic static final INVALID_NAME = 'invalidName'\n-//\n-//\t@Check\n-//\tpublic void checkGreetingStartsWithCapital(Greeting greeting) {\n-//\t\tif (!Character.isUpperCase(greeting.getName().charAt(0))) {\n-//\t\t\twarning(\"Name should start with a capital\",\n-//\t\t\t\t\tFileAwareTestLanguagePackage.Literals.GREETING__NAME,\n-//\t\t\t\t\tINVALID_NAME);\n-//\t\t}\n-//\t}\n-\t\n+\n+\t@Check\n+\tpublic void checkElementNameStartsWithUpperCase(final Element element) {\n+\t\tif (!Character.isUpperCase(element.getName().charAt(0))) {\n+\t\t\twarning(\"Element name should start with a capital\", element, null, \"test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDc3NzA3", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516477707", "createdAt": "2020-10-26T05:35:09Z", "commit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozNTowOVrOHoBX2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozNTowOVrOHoBX2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNzU3OA==", "bodyText": "move to validator", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511727578", "createdAt": "2020-10-26T05:35:09Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.testlanguages.ide/src/org/eclipse/xtext/testlanguages/fileAware/ide/quickfix/FileAwareTestLanguageQuickFixProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.eclipse.xtext.testlanguages.fileAware.ide.quickfix;\n+\n+import org.eclipse.xtext.ide.editor.quickfix.AbstractDeclarativeIdeQuickfixProvider;\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticResolutionAcceptor;\n+import org.eclipse.xtext.ide.editor.quickfix.QuickFix;\n+import org.eclipse.xtext.testlanguages.fileAware.fileAware.Element;\n+import org.eclipse.xtext.xbase.lib.StringExtensions;\n+\n+public class FileAwareTestLanguageQuickFixProvider extends AbstractDeclarativeIdeQuickfixProvider {\n+\n+\tpublic static class IssueCodes {\n+\t\tprivate IssueCodes() {\n+\t\t\t// utility\n+\t\t}\n+\n+\t\tpublic static final String TESTISSUECODE = \"test\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDc4MDkw", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516478090", "createdAt": "2020-10-26T05:36:31Z", "commit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozNjozMVrOHoBZJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozNjozMVrOHoBZJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyNzkwOA==", "bodyText": "use new ArrayList<>() and remove the Unmodifiable list", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511727908", "createdAt": "2020-10-26T05:36:31Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/AbstractIdeQuickfixTest.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/**\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.CodeActionContext;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.DiagnosticSeverity;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextDocumentIdentifier;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticResolution;\n+import org.eclipse.xtext.ide.editor.quickfix.IQuickFixProvider;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2;\n+import org.eclipse.xtext.nodemodel.ICompositeNode;\n+import org.eclipse.xtext.nodemodel.util.NodeModelUtils;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.impl.ChunkedResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsData;\n+import org.eclipse.xtext.testing.util.InMemoryURIHandler;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.LineAndColumn;\n+import org.eclipse.xtext.util.Strings;\n+import org.eclipse.xtext.xbase.lib.CollectionLiterals;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ObjectExtensions;\n+import org.eclipse.xtext.xbase.lib.Pair;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+import org.junit.Assert;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Heinrich Weichert\n+ */\n+public abstract class AbstractIdeQuickfixTest {\n+\n+\tprotected static class Quickfix {\n+\t\tprivate final String label;\n+\t\tprivate final String description;\n+\t\tprivate final String result;\n+\n+\t\tpublic Quickfix(final String label, final String description, final String result) {\n+\t\t\tthis.label = label;\n+\t\t\tthis.description = description;\n+\t\t\tthis.result = result;\n+\t\t}\n+\n+\t\tpublic String getLabel() {\n+\t\t\treturn label;\n+\t\t}\n+\n+\t\tpublic String getDescription() {\n+\t\t\treturn description;\n+\t\t}\n+\n+\t\tpublic String getResult() {\n+\t\t\treturn result;\n+\t\t}\n+\t}\n+\n+\t@Inject\n+\tprivate IQuickFixProvider quickFixProvider;\n+\t@Inject\n+\tprivate QuickFixTestHelper quickFixTestHelper;\n+\t@Inject\n+\tprivate FileExtensionProvider fileExtensionProvider;\n+\n+\t/**\n+\t * Test that the expected quickfixes are offered on a given validation issue in a given DSL text.\n+\t *\n+\t * @param fileContents\n+\t *            The initial DSL text.\n+\t * @param issueCode\n+\t *            The code of the validation issue the offered quickfixes to test.\n+\t * @param quickfixes\n+\t *            The quickfixes that are expected to be offered on the given <code>issueCode</code>. Each expected quickfix should be described by the\n+\t *            following triple:\n+\t *            <ol>\n+\t *            <li>the quickfix label</li>\n+\t *            <li>the quickfix description</li>\n+\t *            <li>the DSL text after the quickfix application</li>\n+\t *            </ol>\n+\t */\n+\tpublic void testQuickfixesOn(final String fileContents, final String issueCode, final EClass type, final AbstractIdeQuickfixTest.Quickfix... quickfixes) {\n+\t\tquickfixesAreOffered(createInMemoryFile(fileContents, type), issueCode, fileContents, quickfixes);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tprivate <T> T createInMemoryFile(final CharSequence content, final EClass type) {\n+\t\tInMemoryURIHandler fs = new InMemoryURIHandler();\n+\t\tString _primaryFileExtension = this.fileExtensionProvider.getPrimaryFileExtension();\n+\t\tfinal String fileName = \"inmemory:/file1.\" + _primaryFileExtension;\n+\t\tString _string = content.toString();\n+\t\tPair<String, String> _mappedTo = Pair.of(fileName, _string);\n+\t\tthis.quickFixTestHelper.operator_add(fs, _mappedTo);\n+\t\tfinal ResourceSet rs = this.quickFixTestHelper.createResourceSet(fs);\n+\t\tfinal Map<String, ResourceDescriptionsData> dataMap = new HashMap<>();\n+\t\tdataMap.put(\"project\", ResourceDescriptionsData.ResourceSetAdapter.findResourceDescriptionsData(rs));\n+\t\tnew ChunkedResourceDescriptions(dataMap, rs);\n+\t\treturn (T) this.quickFixTestHelper.contents(rs, fileName, type.getInstanceClass());\n+\t}\n+\n+\tprivate void quickfixesAreOffered(final EObject target, final String issueCode, final String originalText,\n+\t\t\tfinal AbstractIdeQuickfixTest.Quickfix... expected) {\n+\t\tfinal List<AbstractIdeQuickfixTest.Quickfix> expectedSorted = IterableExtensions.sortBy(Arrays.asList(expected), it -> it.label);\n+\t\tfinal ICompositeNode elementNode = NodeModelUtils.getNode(target);\n+\t\tfinal LineAndColumn elementStartPosition = NodeModelUtils.getLineAndColumn(elementNode, elementNode.getOffset());\n+\t\tfinal LineAndColumn elementEndPosition = NodeModelUtils.getLineAndColumn(elementNode, elementNode.getEndOffset());\n+\t\tfinal Position startPos = new Position(elementStartPosition.getLine() - 1, elementStartPosition.getColumn() - 1);\n+\t\tfinal Position endPos = new Position(elementEndPosition.getLine() - 1, elementEndPosition.getColumn() - 1);\n+\t\tDiagnostic issue = new Diagnostic();\n+\t\tissue.setCode(issueCode);\n+\t\tissue.setMessage(\"error\");\n+\t\tissue.setSeverity(DiagnosticSeverity.Error);\n+\t\tissue.setSource(\"source\");\n+\t\tissue.setRange(new Range(startPos, endPos));\n+\n+\t\tfinal ICodeActionService2.Options options = new ICodeActionService2.Options();\n+\t\toptions.setCancelIndicator(CancelIndicator.NullImpl);\n+\t\toptions.setDocument(new Document(Integer.valueOf(0), Strings.toUnixLineSeparator(originalText)));\n+\t\toptions.setResource((XtextResource) target.eResource());\n+\t\toptions.setLanguageServerAccess(new ILanguageServerAccess() {\n+\t\t\t@Override\n+\t\t\tpublic void addBuildListener(final ILanguageServerAccess.IBuildListener listener) {\n+\t\t\t\t//\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic <T extends Object> CompletableFuture<T> doRead(final String uri, final Function<ILanguageServerAccess.Context, T> function) {\n+\t\t\t\tXtextResource _resource = options.getResource();\n+\t\t\t\tDocument _document = options.getDocument();\n+\t\t\t\tfinal ILanguageServerAccess.Context ctx = new ILanguageServerAccess.Context(_resource, _document,\n+\t\t\t\t\t\ttrue, CancelIndicator.NullImpl);\n+\t\t\t\treturn CompletableFuture.<T> completedFuture(function.apply(ctx));\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic <T extends Object> CompletableFuture<T> doReadIndex(final Function<? super ILanguageServerAccess.IndexContext, ? extends T> function) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic InitializeParams getInitializeParams() {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic InitializeResult getInitializeResult() {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic LanguageClient getLanguageClient() {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic ResourceSet newLiveScopeResourceSet(final URI uri) {\n+\t\t\t\tfinal ResourceSet resourceSet = options.getResource().getResourceSet();\n+\t\t\t\treturn resourceSet;\n+\t\t\t}\n+\t\t});\n+\t\tCodeActionParams codeActionParams = new CodeActionParams();\n+\t\tcodeActionParams.setRange(new Range(startPos, endPos));\n+\t\tcodeActionParams.setTextDocument(new TextDocumentIdentifier(target.eResource().getURI().toString()));\n+\t\n+\t\tCodeActionContext codeActionContext = new CodeActionContext();\n+\t\tcodeActionContext.setDiagnostics(Collections.unmodifiableList(CollectionLiterals.newArrayList(issue)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "originalPosition": 194}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDc4OTE0", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516478914", "createdAt": "2020-10-26T05:39:42Z", "commit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozOTo0MlrOHoBb5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTozOTo0MlrOHoBb5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyODYxNQ==", "bodyText": "check for unused imports", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511728615", "createdAt": "2020-10-26T05:39:42Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/AbstractIdeQuickfixTest.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/**\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.CodeActionContext;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.DiagnosticSeverity;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextDocumentIdentifier;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticResolution;\n+import org.eclipse.xtext.ide.editor.quickfix.IQuickFixProvider;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2;\n+import org.eclipse.xtext.nodemodel.ICompositeNode;\n+import org.eclipse.xtext.nodemodel.util.NodeModelUtils;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.impl.ChunkedResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsData;\n+import org.eclipse.xtext.testing.util.InMemoryURIHandler;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.LineAndColumn;\n+import org.eclipse.xtext.util.Strings;\n+import org.eclipse.xtext.xbase.lib.CollectionLiterals;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ObjectExtensions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDc5MDUz", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516479053", "createdAt": "2020-10-26T05:40:06Z", "commit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTo0MDowN1rOHoBcTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTo0MDowN1rOHoBcTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyODcxOA==", "bodyText": "please inline the \"_\" local vars", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511728718", "createdAt": "2020-10-26T05:40:07Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/AbstractIdeQuickfixTest.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/**\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.CodeActionContext;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.DiagnosticSeverity;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextDocumentIdentifier;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticResolution;\n+import org.eclipse.xtext.ide.editor.quickfix.IQuickFixProvider;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2;\n+import org.eclipse.xtext.nodemodel.ICompositeNode;\n+import org.eclipse.xtext.nodemodel.util.NodeModelUtils;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.impl.ChunkedResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsData;\n+import org.eclipse.xtext.testing.util.InMemoryURIHandler;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.LineAndColumn;\n+import org.eclipse.xtext.util.Strings;\n+import org.eclipse.xtext.xbase.lib.CollectionLiterals;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ObjectExtensions;\n+import org.eclipse.xtext.xbase.lib.Pair;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+import org.junit.Assert;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Heinrich Weichert\n+ */\n+public abstract class AbstractIdeQuickfixTest {\n+\n+\tprotected static class Quickfix {\n+\t\tprivate final String label;\n+\t\tprivate final String description;\n+\t\tprivate final String result;\n+\n+\t\tpublic Quickfix(final String label, final String description, final String result) {\n+\t\t\tthis.label = label;\n+\t\t\tthis.description = description;\n+\t\t\tthis.result = result;\n+\t\t}\n+\n+\t\tpublic String getLabel() {\n+\t\t\treturn label;\n+\t\t}\n+\n+\t\tpublic String getDescription() {\n+\t\t\treturn description;\n+\t\t}\n+\n+\t\tpublic String getResult() {\n+\t\t\treturn result;\n+\t\t}\n+\t}\n+\n+\t@Inject\n+\tprivate IQuickFixProvider quickFixProvider;\n+\t@Inject\n+\tprivate QuickFixTestHelper quickFixTestHelper;\n+\t@Inject\n+\tprivate FileExtensionProvider fileExtensionProvider;\n+\n+\t/**\n+\t * Test that the expected quickfixes are offered on a given validation issue in a given DSL text.\n+\t *\n+\t * @param fileContents\n+\t *            The initial DSL text.\n+\t * @param issueCode\n+\t *            The code of the validation issue the offered quickfixes to test.\n+\t * @param quickfixes\n+\t *            The quickfixes that are expected to be offered on the given <code>issueCode</code>. Each expected quickfix should be described by the\n+\t *            following triple:\n+\t *            <ol>\n+\t *            <li>the quickfix label</li>\n+\t *            <li>the quickfix description</li>\n+\t *            <li>the DSL text after the quickfix application</li>\n+\t *            </ol>\n+\t */\n+\tpublic void testQuickfixesOn(final String fileContents, final String issueCode, final EClass type, final AbstractIdeQuickfixTest.Quickfix... quickfixes) {\n+\t\tquickfixesAreOffered(createInMemoryFile(fileContents, type), issueCode, fileContents, quickfixes);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tprivate <T> T createInMemoryFile(final CharSequence content, final EClass type) {\n+\t\tInMemoryURIHandler fs = new InMemoryURIHandler();\n+\t\tString _primaryFileExtension = this.fileExtensionProvider.getPrimaryFileExtension();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "originalPosition": 117}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDc5MjUx", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516479251", "createdAt": "2020-10-26T05:40:41Z", "commit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTo0MDo0MVrOHoBc3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTo0MDo0MVrOHoBc3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyODg2Mw==", "bodyText": "remove finals", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511728863", "createdAt": "2020-10-26T05:40:41Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/AbstractIdeQuickfixTest.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/**\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.CodeActionContext;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.DiagnosticSeverity;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextDocumentIdentifier;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticResolution;\n+import org.eclipse.xtext.ide.editor.quickfix.IQuickFixProvider;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2;\n+import org.eclipse.xtext.nodemodel.ICompositeNode;\n+import org.eclipse.xtext.nodemodel.util.NodeModelUtils;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.impl.ChunkedResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsData;\n+import org.eclipse.xtext.testing.util.InMemoryURIHandler;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.LineAndColumn;\n+import org.eclipse.xtext.util.Strings;\n+import org.eclipse.xtext.xbase.lib.CollectionLiterals;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ObjectExtensions;\n+import org.eclipse.xtext.xbase.lib.Pair;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+import org.junit.Assert;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Heinrich Weichert\n+ */\n+public abstract class AbstractIdeQuickfixTest {\n+\n+\tprotected static class Quickfix {\n+\t\tprivate final String label;\n+\t\tprivate final String description;\n+\t\tprivate final String result;\n+\n+\t\tpublic Quickfix(final String label, final String description, final String result) {\n+\t\t\tthis.label = label;\n+\t\t\tthis.description = description;\n+\t\t\tthis.result = result;\n+\t\t}\n+\n+\t\tpublic String getLabel() {\n+\t\t\treturn label;\n+\t\t}\n+\n+\t\tpublic String getDescription() {\n+\t\t\treturn description;\n+\t\t}\n+\n+\t\tpublic String getResult() {\n+\t\t\treturn result;\n+\t\t}\n+\t}\n+\n+\t@Inject\n+\tprivate IQuickFixProvider quickFixProvider;\n+\t@Inject\n+\tprivate QuickFixTestHelper quickFixTestHelper;\n+\t@Inject\n+\tprivate FileExtensionProvider fileExtensionProvider;\n+\n+\t/**\n+\t * Test that the expected quickfixes are offered on a given validation issue in a given DSL text.\n+\t *\n+\t * @param fileContents\n+\t *            The initial DSL text.\n+\t * @param issueCode\n+\t *            The code of the validation issue the offered quickfixes to test.\n+\t * @param quickfixes\n+\t *            The quickfixes that are expected to be offered on the given <code>issueCode</code>. Each expected quickfix should be described by the\n+\t *            following triple:\n+\t *            <ol>\n+\t *            <li>the quickfix label</li>\n+\t *            <li>the quickfix description</li>\n+\t *            <li>the DSL text after the quickfix application</li>\n+\t *            </ol>\n+\t */\n+\tpublic void testQuickfixesOn(final String fileContents, final String issueCode, final EClass type, final AbstractIdeQuickfixTest.Quickfix... quickfixes) {\n+\t\tquickfixesAreOffered(createInMemoryFile(fileContents, type), issueCode, fileContents, quickfixes);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tprivate <T> T createInMemoryFile(final CharSequence content, final EClass type) {\n+\t\tInMemoryURIHandler fs = new InMemoryURIHandler();\n+\t\tString _primaryFileExtension = this.fileExtensionProvider.getPrimaryFileExtension();\n+\t\tfinal String fileName = \"inmemory:/file1.\" + _primaryFileExtension;\n+\t\tString _string = content.toString();\n+\t\tPair<String, String> _mappedTo = Pair.of(fileName, _string);\n+\t\tthis.quickFixTestHelper.operator_add(fs, _mappedTo);\n+\t\tfinal ResourceSet rs = this.quickFixTestHelper.createResourceSet(fs);\n+\t\tfinal Map<String, ResourceDescriptionsData> dataMap = new HashMap<>();\n+\t\tdataMap.put(\"project\", ResourceDescriptionsData.ResourceSetAdapter.findResourceDescriptionsData(rs));\n+\t\tnew ChunkedResourceDescriptions(dataMap, rs);\n+\t\treturn (T) this.quickFixTestHelper.contents(rs, fileName, type.getInstanceClass());\n+\t}\n+\n+\tprivate void quickfixesAreOffered(final EObject target, final String issueCode, final String originalText,\n+\t\t\tfinal AbstractIdeQuickfixTest.Quickfix... expected) {\n+\t\tfinal List<AbstractIdeQuickfixTest.Quickfix> expectedSorted = IterableExtensions.sortBy(Arrays.asList(expected), it -> it.label);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDgwMDc3", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516480077", "createdAt": "2020-10-26T05:43:54Z", "commit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTo0Mzo1NFrOHoBfjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTo0Mzo1NFrOHoBfjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyOTU0OA==", "bodyText": "i wonder if we should mark this as @Beta. that do you think @szarnekow", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511729548", "createdAt": "2020-10-26T05:43:54Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/quickfix/AbstractDeclarativeIdeQuickfixProvider.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package org.eclipse.xtext.ide.editor.quickfix;\n+\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+import java.lang.reflect.Method;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2.Options;\n+\n+import com.google.common.base.Predicate;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.Lists;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+\n+/**\n+ * @since 2.24\n+ * \n+ * @author Heinrich Weichert\n+ */\n+public class AbstractDeclarativeIdeQuickfixProvider implements IQuickFixProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDgwMTQw", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516480140", "createdAt": "2020-10-26T05:44:10Z", "commit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTo0NDoxMFrOHoBfuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTo0NDoxMFrOHoBfuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcyOTU5Mg==", "bodyText": "i wonder if we should mark this as @Beta. that do you think @szarnekow", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511729592", "createdAt": "2020-10-26T05:44:10Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/codeActions/QuickFixCodeActionService.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.server.codeActions;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.eclipse.lsp4j.CodeAction;\n+import org.eclipse.lsp4j.CodeActionKind;\n+import org.eclipse.lsp4j.Command;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.jsonrpc.messages.Either;\n+import org.eclipse.xtext.ide.editor.quickfix.AbstractDeclarativeIdeQuickfixProvider;\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticResolution;\n+import org.eclipse.xtext.ide.editor.quickfix.IQuickFixProvider;\n+import org.eclipse.xtext.ide.editor.quickfix.QuickFix;\n+\n+/**\n+ * {@link ICodeActionService2} handling quick-fixes annoted with {@link CodeActionKind#QuickFix}.\n+ * \n+ * @author Heinrich Weichert\n+ * \n+ * @see AbstractDeclarativeIdeQuickfixProvider\n+ * @see QuickFix\n+ * \n+ * @since 2.24\n+ */\n+public class QuickFixCodeActionService implements ICodeActionService2 {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDgxMTMx", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516481131", "createdAt": "2020-10-26T05:48:02Z", "commit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTo0ODowM1rOHoBjJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTo0ODowM1rOHoBjJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczMDQ3MA==", "bodyText": "unused import", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511730470", "createdAt": "2020-10-26T05:48:03Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/quickfix/DiagnosticResolutionAcceptor.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.editor.quickfix;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer.IModification;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2.Options;\n+\n+import com.google.common.collect.Lists;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NDgxNDAw", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516481400", "createdAt": "2020-10-26T05:49:04Z", "commit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTo0OTowNFrOHoBkKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNTo0OTowNFrOHoBkKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTczMDcyOQ==", "bodyText": "unused imports", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511730729", "createdAt": "2020-10-26T05:49:04Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/server/QuickFixCodeActionServiceTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.tests.server;\n+\n+import org.eclipse.xtext.ide.server.ServerModule;\n+import org.eclipse.xtext.ide.server.concurrent.RequestManager;\n+import org.eclipse.xtext.testing.AbstractLanguageServerTest;\n+import org.eclipse.xtext.testing.AbstractLanguageServerTest.DirectRequestManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e79f2903b3205fd24528e23d3c30b1ae5ddedb3"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NTc3OTcx", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516577971", "createdAt": "2020-10-26T09:04:46Z", "commit": {"oid": "ab782110ea93c4f864502620c7be4839866a7fe3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTowNDo0N1rOHoGOkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwOTowNDo0N1rOHoGOkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTgwNzEyMQ==", "bodyText": "remove finals", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r511807121", "createdAt": "2020-10-26T09:04:47Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.testlanguages.ide/src/org/eclipse/xtext/testlanguages/fileAware/ide/quickfix/FileAwareTestLanguageQuickFixProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.eclipse.xtext.testlanguages.fileAware.ide.quickfix;\n+\n+import org.eclipse.xtext.ide.editor.quickfix.AbstractDeclarativeIdeQuickfixProvider;\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticResolutionAcceptor;\n+import org.eclipse.xtext.ide.editor.quickfix.QuickFix;\n+import org.eclipse.xtext.testlanguages.fileAware.fileAware.Element;\n+import org.eclipse.xtext.testlanguages.fileAware.validation.FileAwareTestLanguageValidator;\n+import org.eclipse.xtext.xbase.lib.StringExtensions;\n+\n+public class FileAwareTestLanguageQuickFixProvider extends AbstractDeclarativeIdeQuickfixProvider {\n+\n+\tpublic static class IssueCodes {\n+\t\tprivate IssueCodes() {\n+\t\t\t// utility\n+\t\t}\n+\n+\t\tpublic static final String TESTLABEL = \"Change element name to first upper\";\n+\t}\n+\n+\t@QuickFix(FileAwareTestLanguageValidator.TESTISSUECODE)\n+\tpublic void removeUnusedVariable(final DiagnosticResolutionAcceptor acceptor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab782110ea93c4f864502620c7be4839866a7fe3"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd803d1961af447cd41183eeeac50b497ba3a013", "author": {"user": {"login": "heinrichWeichert", "name": "Heinrich Weichert"}}, "url": "https://github.com/eclipse/xtext-core/commit/fd803d1961af447cd41183eeeac50b497ba3a013", "committedDate": "2020-10-26T14:33:44Z", "message": "quickfix_ide: simplify test code\n\nSigned-off-by: Heinrich Weichert <heinrich.weichert@avl.com>"}, "afterCommit": {"oid": "d509c04282bbf0e05784d66fa0453209580e8e8a", "author": {"user": {"login": "heinrichWeichert", "name": "Heinrich Weichert"}}, "url": "https://github.com/eclipse/xtext-core/commit/d509c04282bbf0e05784d66fa0453209580e8e8a", "committedDate": "2020-10-26T14:45:34Z", "message": "Introduce quickfix API for generic IDE module\n\nSigned-off-by: Heinrich Weichert <heinrich.weichert@avl.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODU3Mjc2", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516857276", "createdAt": "2020-10-26T14:50:22Z", "commit": {"oid": "d509c04282bbf0e05784d66fa0453209580e8e8a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo1MDoyMlrOHoTOcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNDo1MDoyMlrOHoTOcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjAyMDA4Mg==", "bodyText": "shouldnt the to upper case which mimics the quickfix be dropped here?", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r512020082", "createdAt": "2020-10-26T14:50:22Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide.tests/testlang-src/org/eclipse/xtext/ide/tests/testlanguage/ide/server/CodeActionService.java", "diffHunk": "@@ -41,13 +42,13 @@\n /**\n  * @author Sven Efftinge - Initial contribution and API\n  */\n-public class CodeActionService implements ICodeActionService2 {\n+public class CodeActionService extends QuickFixCodeActionService {\n \t@Inject\n \tprivate IChangeSerializer serializer;\n \n \t@Override\n \tpublic List<Either<Command, CodeAction>> getCodeActions(ICodeActionService2.Options options) {\n-\t\tList<Either<Command, CodeAction>> actions = new ArrayList<>();\n+\t\tList<Either<Command, CodeAction>> actions = super.getCodeActions(options);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d509c04282bbf0e05784d66fa0453209580e8e8a"}, "originalPosition": 20}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fded98ba35f6399e64bf45ddc62a6808822a819b", "author": {"user": {"login": "heinrichWeichert", "name": "Heinrich Weichert"}}, "url": "https://github.com/eclipse/xtext-core/commit/fded98ba35f6399e64bf45ddc62a6808822a819b", "committedDate": "2020-10-26T15:01:25Z", "message": "quickfix_ide: remove duplicate test assertion\n\nSigned-off-by: Heinrich Weichert <heinrich.weichert@avl.com>"}, "afterCommit": {"oid": "f6d7458992da1c766c2023b5463e6575646f32a1", "author": {"user": {"login": "heinrichWeichert", "name": "Heinrich Weichert"}}, "url": "https://github.com/eclipse/xtext-core/commit/f6d7458992da1c766c2023b5463e6575646f32a1", "committedDate": "2020-10-26T15:12:07Z", "message": "Introduce quickfix API for generic IDE module\n\nSigned-off-by: Heinrich Weichert <heinrich.weichert@avl.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODgzNzI0", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516883724", "createdAt": "2020-10-26T15:15:26Z", "commit": {"oid": "f6d7458992da1c766c2023b5463e6575646f32a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNToxNToyNlrOHoUc0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNToxNToyNlrOHoUc0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA0MDE0NQ==", "bodyText": "please restore. otherwise we would have code action as command untested.", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r512040145", "createdAt": "2020-10-26T15:15:26Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide.tests/testlang-src/org/eclipse/xtext/ide/tests/testlanguage/ide/server/CodeActionService.java", "diffHunk": "@@ -41,39 +42,22 @@\n /**\n  * @author Sven Efftinge - Initial contribution and API\n  */\n-public class CodeActionService implements ICodeActionService2 {\n+public class CodeActionService extends QuickFixCodeActionService {\n \t@Inject\n \tprivate IChangeSerializer serializer;\n \n \t@Override\n \tpublic List<Either<Command, CodeAction>> getCodeActions(ICodeActionService2.Options options) {\n-\t\tList<Either<Command, CodeAction>> actions = new ArrayList<>();\n+\t\tList<Either<Command, CodeAction>> actions = super.getCodeActions(options);\n \t\tfor (Diagnostic d : options.getCodeActionParams().getContext().getDiagnostics()) {\n \t\t\tObject code = d.getCode().get();\n-\t\t\tif (TestLanguageValidator.INVALID_NAME.equals(code)) {\n-\t\t\t\tactions.add(Either.forLeft(fixInvalidName(d, options)));\n-\t\t\t} else if (TestLanguageValidator.UNSORTED_MEMBERS.equals(code)) {\n+\t\t\tif (TestLanguageValidator.UNSORTED_MEMBERS.equals(code)) {\n \t\t\t\tactions.add(Either.forRight(fixUnsortedMembers(d, options)));\n \t\t\t}\n \t\t}\n \t\treturn actions;\n \t}\n \n-\tprivate Command fixInvalidName(Diagnostic d, ICodeActionService2.Options options) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6d7458992da1c766c2023b5463e6575646f32a1"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODg5NTY4", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516889568", "createdAt": "2020-10-26T15:21:09Z", "commit": {"oid": "521cfdeffc8dbaec924e2d0a9f7f0f3e5348fb18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNToyMToxMFrOHoUueA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNToyMToxMFrOHoUueA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA0NDY2NA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r512044664", "createdAt": "2020-10-26T15:21:10Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/server/CodeActionTest.xtend", "diffHunk": "@@ -32,6 +32,12 @@ class CodeActionTest extends AbstractTestLangLanguageServerTest {\n \t\t\t\tedit : changes :\n \t\t\t\t    MyModel.testlang : Foo [[0, 5] .. [0, 8]]\n \t\t\t\tdocumentChanges : \n+\t\t\t\tcommand : my.textedit.command", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "521cfdeffc8dbaec924e2d0a9f7f0f3e5348fb18"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2ODk3ODQ2", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-516897846", "createdAt": "2020-10-26T15:29:01Z", "commit": {"oid": "521cfdeffc8dbaec924e2d0a9f7f0f3e5348fb18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNToyOTowMVrOHoVHKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNToyOTowMVrOHoVHKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjA1MDk4NA==", "bodyText": "i assume this class can be dropped/is redundant now?", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r512050984", "createdAt": "2020-10-26T15:29:01Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/server/QuickFixCodeActionServiceTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.tests.server;\n+\n+import org.eclipse.xtext.ide.server.ServerModule;\n+import org.eclipse.xtext.ide.server.concurrent.RequestManager;\n+import org.eclipse.xtext.util.Modules2;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+import org.junit.Test;\n+\n+import com.google.inject.Module;\n+\n+/**\n+ * @author Heinrich Weichert\n+ */\n+public class QuickFixCodeActionServiceTest extends AbstractTestLangLanguageServerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "521cfdeffc8dbaec924e2d0a9f7f0f3e5348fb18"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "521cfdeffc8dbaec924e2d0a9f7f0f3e5348fb18", "author": {"user": {"login": "heinrichWeichert", "name": "Heinrich Weichert"}}, "url": "https://github.com/eclipse/xtext-core/commit/521cfdeffc8dbaec924e2d0a9f7f0f3e5348fb18", "committedDate": "2020-10-26T15:18:03Z", "message": "quickfix_ide: rename command to make test more readable\n\nSigned-off-by: Heinrich Weichert <heinrich.weichert@avl.com>"}, "afterCommit": {"oid": "72a00ca85e68d7cf9fac5c487df556d8ab1c7c3e", "author": {"user": {"login": "heinrichWeichert", "name": "Heinrich Weichert"}}, "url": "https://github.com/eclipse/xtext-core/commit/72a00ca85e68d7cf9fac5c487df556d8ab1c7c3e", "committedDate": "2020-10-26T15:44:04Z", "message": "Introduce quickfix API for generic IDE module\n\nSigned-off-by: Heinrich Weichert <heinrich.weichert@avl.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "835e03b79b6de9cb35f7816f18484b0d9aaaade9", "author": {"user": {"login": "heinrichWeichert", "name": "Heinrich Weichert"}}, "url": "https://github.com/eclipse/xtext-core/commit/835e03b79b6de9cb35f7816f18484b0d9aaaade9", "committedDate": "2020-10-26T15:46:15Z", "message": "quickfix_ide: add beta annotation to new API\n\nSigned-off-by: Heinrich Weichert <heinrich.weichert@avl.com>"}, "afterCommit": {"oid": "5e9e96a7b728557d259d1b906d2e589eadeabbe4", "author": {"user": {"login": "heinrichWeichert", "name": "Heinrich Weichert"}}, "url": "https://github.com/eclipse/xtext-core/commit/5e9e96a7b728557d259d1b906d2e589eadeabbe4", "committedDate": "2020-10-26T16:01:17Z", "message": "Introduce quickfix API for generic IDE module (beta)\n\nSigned-off-by: Heinrich Weichert <heinrich.weichert@avl.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NTI1ODUy", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-518525852", "createdAt": "2020-10-28T10:38:24Z", "commit": {"oid": "5e9e96a7b728557d259d1b906d2e589eadeabbe4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDozODoyNFrOHpj0HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxMDo0OTo0MlrOHpkO9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0MDQ0NA==", "bodyText": "Can we agree on throwing UnsupportedOperationException in the methods that are no-ops?", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r513340444", "createdAt": "2020-10-28T10:38:24Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/AbstractIdeQuickfixTest.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.CodeActionContext;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.DiagnosticSeverity;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextDocumentIdentifier;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticResolution;\n+import org.eclipse.xtext.ide.editor.quickfix.IQuickFixProvider;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2;\n+import org.eclipse.xtext.nodemodel.ICompositeNode;\n+import org.eclipse.xtext.nodemodel.util.NodeModelUtils;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.impl.ChunkedResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsData;\n+import org.eclipse.xtext.testing.util.InMemoryURIHandler;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.LineAndColumn;\n+import org.eclipse.xtext.util.Strings;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.Pair;\n+import org.junit.Assert;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Heinrich Weichert\n+ * \n+ * @since 2.24\n+ */\n+public abstract class AbstractIdeQuickfixTest {\n+\n+\tprotected static class Quickfix {\n+\t\tprivate String label;\n+\t\tprivate String description;\n+\t\tprivate String result;\n+\n+\t\tpublic Quickfix(String label, String description, String result) {\n+\t\t\tthis.label = label;\n+\t\t\tthis.description = description;\n+\t\t\tthis.result = result;\n+\t\t}\n+\n+\t\tpublic String getLabel() {\n+\t\t\treturn label;\n+\t\t}\n+\n+\t\tpublic String getDescription() {\n+\t\t\treturn description;\n+\t\t}\n+\n+\t\tpublic String getResult() {\n+\t\t\treturn result;\n+\t\t}\n+\t}\n+\n+\t@Inject\n+\tprivate IQuickFixProvider quickFixProvider;\n+\t@Inject\n+\tprivate QuickFixTestHelper quickFixTestHelper;\n+\t@Inject\n+\tprivate FileExtensionProvider fileExtensionProvider;\n+\n+\t/**\n+\t * Test that the expected quickfixes are offered on a given validation issue in a given DSL text.\n+\t *\n+\t * @param fileContents\n+\t *            The initial DSL text.\n+\t * @param issueCode\n+\t *            The code of the validation issue the offered quickfixes to test.\n+\t * @param quickfixes\n+\t *            The quickfixes that are expected to be offered on the given <code>issueCode</code>. Each expected quickfix should be described by the\n+\t *            following triple:\n+\t *            <ol>\n+\t *            <li>the quickfix label</li>\n+\t *            <li>the quickfix description</li>\n+\t *            <li>the DSL text after the quickfix application</li>\n+\t *            </ol>\n+\t */\n+\tpublic void testQuickfixesOn(String fileContents, String issueCode, EClass type, AbstractIdeQuickfixTest.Quickfix... quickfixes) {\n+\t\tquickfixesAreOffered(createInMemoryFile(fileContents, type), issueCode, fileContents, quickfixes);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tprivate <T> T createInMemoryFile(CharSequence content, EClass type) {\n+\t\tInMemoryURIHandler fs = new InMemoryURIHandler();\n+\t\tString fileName = \"inmemory:/file1.\" + fileExtensionProvider.getPrimaryFileExtension();\n+\t\tPair<String, String> _mappedTo = Pair.of(fileName, content.toString());\n+\t\tthis.quickFixTestHelper.operator_add(fs, _mappedTo);\n+\t\tResourceSet rs = this.quickFixTestHelper.createResourceSet(fs);\n+\t\tMap<String, ResourceDescriptionsData> dataMap = new HashMap<>();\n+\t\tdataMap.put(\"project\", ResourceDescriptionsData.ResourceSetAdapter.findResourceDescriptionsData(rs));\n+\t\tnew ChunkedResourceDescriptions(dataMap, rs);\n+\t\treturn (T) this.quickFixTestHelper.contents(rs, fileName, type.getInstanceClass());\n+\t}\n+\n+\tprivate void quickfixesAreOffered(EObject target, String issueCode, String originalText,\n+\t\t\tAbstractIdeQuickfixTest.Quickfix... expected) {\n+\t\tList<AbstractIdeQuickfixTest.Quickfix> expectedSorted = IterableExtensions.sortBy(Arrays.asList(expected), it -> it.label);\n+\t\tICompositeNode elementNode = NodeModelUtils.getNode(target);\n+\t\tLineAndColumn elementStartPosition = NodeModelUtils.getLineAndColumn(elementNode, elementNode.getOffset());\n+\t\tLineAndColumn elementEndPosition = NodeModelUtils.getLineAndColumn(elementNode, elementNode.getEndOffset());\n+\t\tPosition startPos = new Position(elementStartPosition.getLine() - 1, elementStartPosition.getColumn() - 1);\n+\t\tPosition endPos = new Position(elementEndPosition.getLine() - 1, elementEndPosition.getColumn() - 1);\n+\t\tDiagnostic issue = new Diagnostic();\n+\t\tissue.setCode(issueCode);\n+\t\tissue.setMessage(\"error\");\n+\t\tissue.setSeverity(DiagnosticSeverity.Error);\n+\t\tissue.setSource(\"source\");\n+\t\tissue.setRange(new Range(startPos, endPos));\n+\n+\t\tICodeActionService2.Options options = new ICodeActionService2.Options();\n+\t\toptions.setCancelIndicator(CancelIndicator.NullImpl);\n+\t\toptions.setDocument(new Document(Integer.valueOf(0), Strings.toUnixLineSeparator(originalText)));\n+\t\toptions.setResource((XtextResource) target.eResource());\n+\t\toptions.setLanguageServerAccess(new ILanguageServerAccess() {\n+\t\t\t@Override\n+\t\t\tpublic void addBuildListener(ILanguageServerAccess.IBuildListener listener) {\n+\t\t\t\t//", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e9e96a7b728557d259d1b906d2e589eadeabbe4"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0MTEyMw==", "bodyText": "Hmm this mock im looks far too much like a mock to me. Please add a comment why newLiveScopeResourceSet does not create a new resource set.", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r513341123", "createdAt": "2020-10-28T10:39:29Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/AbstractIdeQuickfixTest.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.CodeActionContext;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.DiagnosticSeverity;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextDocumentIdentifier;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticResolution;\n+import org.eclipse.xtext.ide.editor.quickfix.IQuickFixProvider;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2;\n+import org.eclipse.xtext.nodemodel.ICompositeNode;\n+import org.eclipse.xtext.nodemodel.util.NodeModelUtils;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.impl.ChunkedResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsData;\n+import org.eclipse.xtext.testing.util.InMemoryURIHandler;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.LineAndColumn;\n+import org.eclipse.xtext.util.Strings;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.Pair;\n+import org.junit.Assert;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Heinrich Weichert\n+ * \n+ * @since 2.24\n+ */\n+public abstract class AbstractIdeQuickfixTest {\n+\n+\tprotected static class Quickfix {\n+\t\tprivate String label;\n+\t\tprivate String description;\n+\t\tprivate String result;\n+\n+\t\tpublic Quickfix(String label, String description, String result) {\n+\t\t\tthis.label = label;\n+\t\t\tthis.description = description;\n+\t\t\tthis.result = result;\n+\t\t}\n+\n+\t\tpublic String getLabel() {\n+\t\t\treturn label;\n+\t\t}\n+\n+\t\tpublic String getDescription() {\n+\t\t\treturn description;\n+\t\t}\n+\n+\t\tpublic String getResult() {\n+\t\t\treturn result;\n+\t\t}\n+\t}\n+\n+\t@Inject\n+\tprivate IQuickFixProvider quickFixProvider;\n+\t@Inject\n+\tprivate QuickFixTestHelper quickFixTestHelper;\n+\t@Inject\n+\tprivate FileExtensionProvider fileExtensionProvider;\n+\n+\t/**\n+\t * Test that the expected quickfixes are offered on a given validation issue in a given DSL text.\n+\t *\n+\t * @param fileContents\n+\t *            The initial DSL text.\n+\t * @param issueCode\n+\t *            The code of the validation issue the offered quickfixes to test.\n+\t * @param quickfixes\n+\t *            The quickfixes that are expected to be offered on the given <code>issueCode</code>. Each expected quickfix should be described by the\n+\t *            following triple:\n+\t *            <ol>\n+\t *            <li>the quickfix label</li>\n+\t *            <li>the quickfix description</li>\n+\t *            <li>the DSL text after the quickfix application</li>\n+\t *            </ol>\n+\t */\n+\tpublic void testQuickfixesOn(String fileContents, String issueCode, EClass type, AbstractIdeQuickfixTest.Quickfix... quickfixes) {\n+\t\tquickfixesAreOffered(createInMemoryFile(fileContents, type), issueCode, fileContents, quickfixes);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tprivate <T> T createInMemoryFile(CharSequence content, EClass type) {\n+\t\tInMemoryURIHandler fs = new InMemoryURIHandler();\n+\t\tString fileName = \"inmemory:/file1.\" + fileExtensionProvider.getPrimaryFileExtension();\n+\t\tPair<String, String> _mappedTo = Pair.of(fileName, content.toString());\n+\t\tthis.quickFixTestHelper.operator_add(fs, _mappedTo);\n+\t\tResourceSet rs = this.quickFixTestHelper.createResourceSet(fs);\n+\t\tMap<String, ResourceDescriptionsData> dataMap = new HashMap<>();\n+\t\tdataMap.put(\"project\", ResourceDescriptionsData.ResourceSetAdapter.findResourceDescriptionsData(rs));\n+\t\tnew ChunkedResourceDescriptions(dataMap, rs);\n+\t\treturn (T) this.quickFixTestHelper.contents(rs, fileName, type.getInstanceClass());\n+\t}\n+\n+\tprivate void quickfixesAreOffered(EObject target, String issueCode, String originalText,\n+\t\t\tAbstractIdeQuickfixTest.Quickfix... expected) {\n+\t\tList<AbstractIdeQuickfixTest.Quickfix> expectedSorted = IterableExtensions.sortBy(Arrays.asList(expected), it -> it.label);\n+\t\tICompositeNode elementNode = NodeModelUtils.getNode(target);\n+\t\tLineAndColumn elementStartPosition = NodeModelUtils.getLineAndColumn(elementNode, elementNode.getOffset());\n+\t\tLineAndColumn elementEndPosition = NodeModelUtils.getLineAndColumn(elementNode, elementNode.getEndOffset());\n+\t\tPosition startPos = new Position(elementStartPosition.getLine() - 1, elementStartPosition.getColumn() - 1);\n+\t\tPosition endPos = new Position(elementEndPosition.getLine() - 1, elementEndPosition.getColumn() - 1);\n+\t\tDiagnostic issue = new Diagnostic();\n+\t\tissue.setCode(issueCode);\n+\t\tissue.setMessage(\"error\");\n+\t\tissue.setSeverity(DiagnosticSeverity.Error);\n+\t\tissue.setSource(\"source\");\n+\t\tissue.setRange(new Range(startPos, endPos));\n+\n+\t\tICodeActionService2.Options options = new ICodeActionService2.Options();\n+\t\toptions.setCancelIndicator(CancelIndicator.NullImpl);\n+\t\toptions.setDocument(new Document(Integer.valueOf(0), Strings.toUnixLineSeparator(originalText)));\n+\t\toptions.setResource((XtextResource) target.eResource());\n+\t\toptions.setLanguageServerAccess(new ILanguageServerAccess() {\n+\t\t\t@Override\n+\t\t\tpublic void addBuildListener(ILanguageServerAccess.IBuildListener listener) {\n+\t\t\t\t//\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic <T extends Object> CompletableFuture<T> doRead(String uri, Function<ILanguageServerAccess.Context, T> function) {\n+\t\t\t\tXtextResource _resource = options.getResource();\n+\t\t\t\tDocument _document = options.getDocument();\n+\t\t\t\tILanguageServerAccess.Context ctx = new ILanguageServerAccess.Context(_resource, _document,\n+\t\t\t\t\t\ttrue, CancelIndicator.NullImpl);\n+\t\t\t\treturn CompletableFuture.<T> completedFuture(function.apply(ctx));\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic <T extends Object> CompletableFuture<T> doReadIndex(Function<? super ILanguageServerAccess.IndexContext, ? extends T> function) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic InitializeParams getInitializeParams() {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic InitializeResult getInitializeResult() {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic LanguageClient getLanguageClient() {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic ResourceSet newLiveScopeResourceSet(URI uri) {\n+\t\t\t\tResourceSet resourceSet = options.getResource().getResourceSet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e9e96a7b728557d259d1b906d2e589eadeabbe4"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0MTgxNQ==", "bodyText": "Nit: This line deserves a formatter to add spaces.", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r513341815", "createdAt": "2020-10-28T10:40:36Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/AbstractIdeQuickfixTest.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.CodeActionContext;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.DiagnosticSeverity;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextDocumentIdentifier;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticResolution;\n+import org.eclipse.xtext.ide.editor.quickfix.IQuickFixProvider;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2;\n+import org.eclipse.xtext.nodemodel.ICompositeNode;\n+import org.eclipse.xtext.nodemodel.util.NodeModelUtils;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.impl.ChunkedResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsData;\n+import org.eclipse.xtext.testing.util.InMemoryURIHandler;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.LineAndColumn;\n+import org.eclipse.xtext.util.Strings;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.Pair;\n+import org.junit.Assert;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Heinrich Weichert\n+ * \n+ * @since 2.24\n+ */\n+public abstract class AbstractIdeQuickfixTest {\n+\n+\tprotected static class Quickfix {\n+\t\tprivate String label;\n+\t\tprivate String description;\n+\t\tprivate String result;\n+\n+\t\tpublic Quickfix(String label, String description, String result) {\n+\t\t\tthis.label = label;\n+\t\t\tthis.description = description;\n+\t\t\tthis.result = result;\n+\t\t}\n+\n+\t\tpublic String getLabel() {\n+\t\t\treturn label;\n+\t\t}\n+\n+\t\tpublic String getDescription() {\n+\t\t\treturn description;\n+\t\t}\n+\n+\t\tpublic String getResult() {\n+\t\t\treturn result;\n+\t\t}\n+\t}\n+\n+\t@Inject\n+\tprivate IQuickFixProvider quickFixProvider;\n+\t@Inject\n+\tprivate QuickFixTestHelper quickFixTestHelper;\n+\t@Inject\n+\tprivate FileExtensionProvider fileExtensionProvider;\n+\n+\t/**\n+\t * Test that the expected quickfixes are offered on a given validation issue in a given DSL text.\n+\t *\n+\t * @param fileContents\n+\t *            The initial DSL text.\n+\t * @param issueCode\n+\t *            The code of the validation issue the offered quickfixes to test.\n+\t * @param quickfixes\n+\t *            The quickfixes that are expected to be offered on the given <code>issueCode</code>. Each expected quickfix should be described by the\n+\t *            following triple:\n+\t *            <ol>\n+\t *            <li>the quickfix label</li>\n+\t *            <li>the quickfix description</li>\n+\t *            <li>the DSL text after the quickfix application</li>\n+\t *            </ol>\n+\t */\n+\tpublic void testQuickfixesOn(String fileContents, String issueCode, EClass type, AbstractIdeQuickfixTest.Quickfix... quickfixes) {\n+\t\tquickfixesAreOffered(createInMemoryFile(fileContents, type), issueCode, fileContents, quickfixes);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tprivate <T> T createInMemoryFile(CharSequence content, EClass type) {\n+\t\tInMemoryURIHandler fs = new InMemoryURIHandler();\n+\t\tString fileName = \"inmemory:/file1.\" + fileExtensionProvider.getPrimaryFileExtension();\n+\t\tPair<String, String> _mappedTo = Pair.of(fileName, content.toString());\n+\t\tthis.quickFixTestHelper.operator_add(fs, _mappedTo);\n+\t\tResourceSet rs = this.quickFixTestHelper.createResourceSet(fs);\n+\t\tMap<String, ResourceDescriptionsData> dataMap = new HashMap<>();\n+\t\tdataMap.put(\"project\", ResourceDescriptionsData.ResourceSetAdapter.findResourceDescriptionsData(rs));\n+\t\tnew ChunkedResourceDescriptions(dataMap, rs);\n+\t\treturn (T) this.quickFixTestHelper.contents(rs, fileName, type.getInstanceClass());\n+\t}\n+\n+\tprivate void quickfixesAreOffered(EObject target, String issueCode, String originalText,\n+\t\t\tAbstractIdeQuickfixTest.Quickfix... expected) {\n+\t\tList<AbstractIdeQuickfixTest.Quickfix> expectedSorted = IterableExtensions.sortBy(Arrays.asList(expected), it -> it.label);\n+\t\tICompositeNode elementNode = NodeModelUtils.getNode(target);\n+\t\tLineAndColumn elementStartPosition = NodeModelUtils.getLineAndColumn(elementNode, elementNode.getOffset());\n+\t\tLineAndColumn elementEndPosition = NodeModelUtils.getLineAndColumn(elementNode, elementNode.getEndOffset());\n+\t\tPosition startPos = new Position(elementStartPosition.getLine() - 1, elementStartPosition.getColumn() - 1);\n+\t\tPosition endPos = new Position(elementEndPosition.getLine() - 1, elementEndPosition.getColumn() - 1);\n+\t\tDiagnostic issue = new Diagnostic();\n+\t\tissue.setCode(issueCode);\n+\t\tissue.setMessage(\"error\");\n+\t\tissue.setSeverity(DiagnosticSeverity.Error);\n+\t\tissue.setSource(\"source\");\n+\t\tissue.setRange(new Range(startPos, endPos));\n+\n+\t\tICodeActionService2.Options options = new ICodeActionService2.Options();\n+\t\toptions.setCancelIndicator(CancelIndicator.NullImpl);\n+\t\toptions.setDocument(new Document(Integer.valueOf(0), Strings.toUnixLineSeparator(originalText)));\n+\t\toptions.setResource((XtextResource) target.eResource());\n+\t\toptions.setLanguageServerAccess(new ILanguageServerAccess() {\n+\t\t\t@Override\n+\t\t\tpublic void addBuildListener(ILanguageServerAccess.IBuildListener listener) {\n+\t\t\t\t//\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic <T extends Object> CompletableFuture<T> doRead(String uri, Function<ILanguageServerAccess.Context, T> function) {\n+\t\t\t\tXtextResource _resource = options.getResource();\n+\t\t\t\tDocument _document = options.getDocument();\n+\t\t\t\tILanguageServerAccess.Context ctx = new ILanguageServerAccess.Context(_resource, _document,\n+\t\t\t\t\t\ttrue, CancelIndicator.NullImpl);\n+\t\t\t\treturn CompletableFuture.<T> completedFuture(function.apply(ctx));\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic <T extends Object> CompletableFuture<T> doReadIndex(Function<? super ILanguageServerAccess.IndexContext, ? extends T> function) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic InitializeParams getInitializeParams() {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic InitializeResult getInitializeResult() {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic LanguageClient getLanguageClient() {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic ResourceSet newLiveScopeResourceSet(URI uri) {\n+\t\t\t\tResourceSet resourceSet = options.getResource().getResourceSet();\n+\t\t\t\treturn resourceSet;\n+\t\t\t}\n+\t\t});\n+\t\tCodeActionParams codeActionParams = new CodeActionParams();\n+\t\tcodeActionParams.setRange(new Range(startPos, endPos));\n+\t\tcodeActionParams.setTextDocument(new TextDocumentIdentifier(target.eResource().getURI().toString()));\n+\t\n+\t\tCodeActionContext codeActionContext = new CodeActionContext();\n+\t\tcodeActionContext.setDiagnostics(Collections.singletonList(issue));\n+\t\tcodeActionParams.setContext(codeActionContext);\n+\t\n+\t\toptions.setCodeActionParams(codeActionParams);\n+\t\t\n+\t\tList<DiagnosticResolution> actualIssueResolutions = IterableExtensions.sortBy(this.quickFixProvider.getResolutions(options, issue),\n+\t\t\t\tDiagnosticResolution::getLabel);\n+\t\tAssert.assertEquals(\"The number of quickfixes does not match!\", expectedSorted.size(),\n+\t\t\t\tactualIssueResolutions.size());\n+\n+\t\tfor (int i=0;i<actualIssueResolutions.size();i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e9e96a7b728557d259d1b906d2e589eadeabbe4"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0MjMzOQ==", "bodyText": "Should we also normalize the fileContents to unix line endings?", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r513342339", "createdAt": "2020-10-28T10:41:28Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/AbstractIdeQuickfixTest.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.CodeActionContext;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.DiagnosticSeverity;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextDocumentIdentifier;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticResolution;\n+import org.eclipse.xtext.ide.editor.quickfix.IQuickFixProvider;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2;\n+import org.eclipse.xtext.nodemodel.ICompositeNode;\n+import org.eclipse.xtext.nodemodel.util.NodeModelUtils;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.impl.ChunkedResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsData;\n+import org.eclipse.xtext.testing.util.InMemoryURIHandler;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.LineAndColumn;\n+import org.eclipse.xtext.util.Strings;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.Pair;\n+import org.junit.Assert;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Heinrich Weichert\n+ * \n+ * @since 2.24\n+ */\n+public abstract class AbstractIdeQuickfixTest {\n+\n+\tprotected static class Quickfix {\n+\t\tprivate String label;\n+\t\tprivate String description;\n+\t\tprivate String result;\n+\n+\t\tpublic Quickfix(String label, String description, String result) {\n+\t\t\tthis.label = label;\n+\t\t\tthis.description = description;\n+\t\t\tthis.result = result;\n+\t\t}\n+\n+\t\tpublic String getLabel() {\n+\t\t\treturn label;\n+\t\t}\n+\n+\t\tpublic String getDescription() {\n+\t\t\treturn description;\n+\t\t}\n+\n+\t\tpublic String getResult() {\n+\t\t\treturn result;\n+\t\t}\n+\t}\n+\n+\t@Inject\n+\tprivate IQuickFixProvider quickFixProvider;\n+\t@Inject\n+\tprivate QuickFixTestHelper quickFixTestHelper;\n+\t@Inject\n+\tprivate FileExtensionProvider fileExtensionProvider;\n+\n+\t/**\n+\t * Test that the expected quickfixes are offered on a given validation issue in a given DSL text.\n+\t *\n+\t * @param fileContents\n+\t *            The initial DSL text.\n+\t * @param issueCode\n+\t *            The code of the validation issue the offered quickfixes to test.\n+\t * @param quickfixes\n+\t *            The quickfixes that are expected to be offered on the given <code>issueCode</code>. Each expected quickfix should be described by the\n+\t *            following triple:\n+\t *            <ol>\n+\t *            <li>the quickfix label</li>\n+\t *            <li>the quickfix description</li>\n+\t *            <li>the DSL text after the quickfix application</li>\n+\t *            </ol>\n+\t */\n+\tpublic void testQuickfixesOn(String fileContents, String issueCode, EClass type, AbstractIdeQuickfixTest.Quickfix... quickfixes) {\n+\t\tquickfixesAreOffered(createInMemoryFile(fileContents, type), issueCode, fileContents, quickfixes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e9e96a7b728557d259d1b906d2e589eadeabbe4"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0MzMxMQ==", "bodyText": "The code looks still to much like the Xtend-generated Java. Please do some more cleanup, e.g. Quickfix instead of AbstractIdeQuickfixTest.Quickfix", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r513343311", "createdAt": "2020-10-28T10:43:07Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/AbstractIdeQuickfixTest.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.CodeActionContext;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.DiagnosticSeverity;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextDocumentIdentifier;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticResolution;\n+import org.eclipse.xtext.ide.editor.quickfix.IQuickFixProvider;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2;\n+import org.eclipse.xtext.nodemodel.ICompositeNode;\n+import org.eclipse.xtext.nodemodel.util.NodeModelUtils;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.impl.ChunkedResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsData;\n+import org.eclipse.xtext.testing.util.InMemoryURIHandler;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.LineAndColumn;\n+import org.eclipse.xtext.util.Strings;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.Pair;\n+import org.junit.Assert;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Heinrich Weichert\n+ * \n+ * @since 2.24\n+ */\n+public abstract class AbstractIdeQuickfixTest {\n+\n+\tprotected static class Quickfix {\n+\t\tprivate String label;\n+\t\tprivate String description;\n+\t\tprivate String result;\n+\n+\t\tpublic Quickfix(String label, String description, String result) {\n+\t\t\tthis.label = label;\n+\t\t\tthis.description = description;\n+\t\t\tthis.result = result;\n+\t\t}\n+\n+\t\tpublic String getLabel() {\n+\t\t\treturn label;\n+\t\t}\n+\n+\t\tpublic String getDescription() {\n+\t\t\treturn description;\n+\t\t}\n+\n+\t\tpublic String getResult() {\n+\t\t\treturn result;\n+\t\t}\n+\t}\n+\n+\t@Inject\n+\tprivate IQuickFixProvider quickFixProvider;\n+\t@Inject\n+\tprivate QuickFixTestHelper quickFixTestHelper;\n+\t@Inject\n+\tprivate FileExtensionProvider fileExtensionProvider;\n+\n+\t/**\n+\t * Test that the expected quickfixes are offered on a given validation issue in a given DSL text.\n+\t *\n+\t * @param fileContents\n+\t *            The initial DSL text.\n+\t * @param issueCode\n+\t *            The code of the validation issue the offered quickfixes to test.\n+\t * @param quickfixes\n+\t *            The quickfixes that are expected to be offered on the given <code>issueCode</code>. Each expected quickfix should be described by the\n+\t *            following triple:\n+\t *            <ol>\n+\t *            <li>the quickfix label</li>\n+\t *            <li>the quickfix description</li>\n+\t *            <li>the DSL text after the quickfix application</li>\n+\t *            </ol>\n+\t */\n+\tpublic void testQuickfixesOn(String fileContents, String issueCode, EClass type, AbstractIdeQuickfixTest.Quickfix... quickfixes) {\n+\t\tquickfixesAreOffered(createInMemoryFile(fileContents, type), issueCode, fileContents, quickfixes);\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tprivate <T> T createInMemoryFile(CharSequence content, EClass type) {\n+\t\tInMemoryURIHandler fs = new InMemoryURIHandler();\n+\t\tString fileName = \"inmemory:/file1.\" + fileExtensionProvider.getPrimaryFileExtension();\n+\t\tPair<String, String> _mappedTo = Pair.of(fileName, content.toString());\n+\t\tthis.quickFixTestHelper.operator_add(fs, _mappedTo);\n+\t\tResourceSet rs = this.quickFixTestHelper.createResourceSet(fs);\n+\t\tMap<String, ResourceDescriptionsData> dataMap = new HashMap<>();\n+\t\tdataMap.put(\"project\", ResourceDescriptionsData.ResourceSetAdapter.findResourceDescriptionsData(rs));\n+\t\tnew ChunkedResourceDescriptions(dataMap, rs);\n+\t\treturn (T) this.quickFixTestHelper.contents(rs, fileName, type.getInstanceClass());\n+\t}\n+\n+\tprivate void quickfixesAreOffered(EObject target, String issueCode, String originalText,\n+\t\t\tAbstractIdeQuickfixTest.Quickfix... expected) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e9e96a7b728557d259d1b906d2e589eadeabbe4"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0MzUxMA==", "bodyText": "Is this a QuickfixExpectation?", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r513343510", "createdAt": "2020-10-28T10:43:27Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/AbstractIdeQuickfixTest.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.CodeActionContext;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.DiagnosticSeverity;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextDocumentIdentifier;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticResolution;\n+import org.eclipse.xtext.ide.editor.quickfix.IQuickFixProvider;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2;\n+import org.eclipse.xtext.nodemodel.ICompositeNode;\n+import org.eclipse.xtext.nodemodel.util.NodeModelUtils;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.impl.ChunkedResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsData;\n+import org.eclipse.xtext.testing.util.InMemoryURIHandler;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.LineAndColumn;\n+import org.eclipse.xtext.util.Strings;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.Pair;\n+import org.junit.Assert;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Heinrich Weichert\n+ * \n+ * @since 2.24\n+ */\n+public abstract class AbstractIdeQuickfixTest {\n+\n+\tprotected static class Quickfix {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e9e96a7b728557d259d1b906d2e589eadeabbe4"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0MzYxMg==", "bodyText": "Is this an expectation rather than a result?", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r513343612", "createdAt": "2020-10-28T10:43:37Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/AbstractIdeQuickfixTest.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.Function;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EClass;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.CodeActionContext;\n+import org.eclipse.lsp4j.CodeActionParams;\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.lsp4j.DiagnosticSeverity;\n+import org.eclipse.lsp4j.InitializeParams;\n+import org.eclipse.lsp4j.InitializeResult;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.lsp4j.TextDocumentIdentifier;\n+import org.eclipse.lsp4j.WorkspaceEdit;\n+import org.eclipse.lsp4j.services.LanguageClient;\n+import org.eclipse.xtext.ide.editor.quickfix.DiagnosticResolution;\n+import org.eclipse.xtext.ide.editor.quickfix.IQuickFixProvider;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.ILanguageServerAccess;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2;\n+import org.eclipse.xtext.nodemodel.ICompositeNode;\n+import org.eclipse.xtext.nodemodel.util.NodeModelUtils;\n+import org.eclipse.xtext.resource.FileExtensionProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.resource.impl.ChunkedResourceDescriptions;\n+import org.eclipse.xtext.resource.impl.ResourceDescriptionsData;\n+import org.eclipse.xtext.testing.util.InMemoryURIHandler;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.LineAndColumn;\n+import org.eclipse.xtext.util.Strings;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.Pair;\n+import org.junit.Assert;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Heinrich Weichert\n+ * \n+ * @since 2.24\n+ */\n+public abstract class AbstractIdeQuickfixTest {\n+\n+\tprotected static class Quickfix {\n+\t\tprivate String label;\n+\t\tprivate String description;\n+\t\tprivate String result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e9e96a7b728557d259d1b906d2e589eadeabbe4"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0MzgxNA==", "bodyText": "Formatting", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r513343814", "createdAt": "2020-10-28T10:43:57Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/QuickFixTestHelper.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/**\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.xtext.ide.tests.serializer.ChangeSerializerTestHelper;\n+import org.eclipse.xtext.xbase.lib.IteratorExtensions;\n+\n+import com.google.common.collect.Iterators;\n+\n+/**\n+ * \n+ * @author Heinrich Weichert\n+ */\n+class QuickFixTestHelper extends ChangeSerializerTestHelper {\n+  @Override\n+  public <T extends Object> T contents(ResourceSet rs, String fileName, Class<T> type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e9e96a7b728557d259d1b906d2e589eadeabbe4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0NDIwMg==", "bodyText": "Also the method name does not tell what this routine does.", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r513344202", "createdAt": "2020-10-28T10:44:31Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/QuickFixTestHelper.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/**\n+ * Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.xtext.ide.tests.serializer.ChangeSerializerTestHelper;\n+import org.eclipse.xtext.xbase.lib.IteratorExtensions;\n+\n+import com.google.common.collect.Iterators;\n+\n+/**\n+ * \n+ * @author Heinrich Weichert\n+ */\n+class QuickFixTestHelper extends ChangeSerializerTestHelper {\n+  @Override\n+  public <T extends Object> T contents(ResourceSet rs, String fileName, Class<T> type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0MzgxNA=="}, "originalCommit": {"oid": "5e9e96a7b728557d259d1b906d2e589eadeabbe4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0NDUyOA==", "bodyText": "Java is happier with a normal \"string\" + \"contatenation\"", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r513344528", "createdAt": "2020-10-28T10:44:58Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/TestLanguageQuickfixTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+* Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import org.eclipse.xtend2.lib.StringConcatenation;\n+import org.eclipse.xtext.ide.tests.testlanguage.TestLanguageIdeInjectorProvider;\n+import org.eclipse.xtext.ide.tests.testlanguage.testLanguage.TestLanguagePackage;\n+import org.eclipse.xtext.ide.tests.testlanguage.validation.TestLanguageValidator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * @author Heinrich Weichert\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(TestLanguageIdeInjectorProvider.class)\n+public class TestLanguageQuickfixTest extends AbstractIdeQuickfixTest {\n+\t\n+\t@Test\n+\tpublic void issueProducesTextualChange() {\n+\n+\t\tStringConcatenation actual = new StringConcatenation();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e9e96a7b728557d259d1b906d2e589eadeabbe4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0NDkxMw==", "bodyText": "This base class could offer a method Quickfix expect(String, String, String)", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r513344913", "createdAt": "2020-10-28T10:45:39Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/editor/quickfix/TestLanguageQuickfixTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/**\n+* Copyright (c) 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.tests.editor.quickfix;\n+\n+import org.eclipse.xtend2.lib.StringConcatenation;\n+import org.eclipse.xtext.ide.tests.testlanguage.TestLanguageIdeInjectorProvider;\n+import org.eclipse.xtext.ide.tests.testlanguage.testLanguage.TestLanguagePackage;\n+import org.eclipse.xtext.ide.tests.testlanguage.validation.TestLanguageValidator;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+/**\n+ * @author Heinrich Weichert\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(TestLanguageIdeInjectorProvider.class)\n+public class TestLanguageQuickfixTest extends AbstractIdeQuickfixTest {\n+\t\n+\t@Test\n+\tpublic void issueProducesTextualChange() {\n+\n+\t\tStringConcatenation actual = new StringConcatenation();\n+\t\tactual.append(\"package testLanguage {\");\n+\t\tactual.newLine();\n+\t\tactual.newLine();\n+\t\tactual.append(\"type myType {\");\n+\t\tactual.newLine();\n+\t\tactual.append(\"}}\");\n+\t\tactual.newLine();\n+\n+\t\t// quickfix replaces first char to Upper\n+\t\t// see: org.eclipse.xtext.ide.tests.testlanguage.ide.quickfix.TestLanguageQuickFixProvider.fixLowerCaseName(DiagnosticResolutionAcceptor)\n+\t\tString expected = actual.toString().replace(\"myType\", \"MyType\");\n+\n+\t\tAbstractIdeQuickfixTest.Quickfix quickfix = new AbstractIdeQuickfixTest.Quickfix(\"Change element name to first upper\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e9e96a7b728557d259d1b906d2e589eadeabbe4"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzM0NzMxNg==", "bodyText": "If we make this class package private, the bindings of the factory become meaningless since nobody can ever implement a subtype of the context.", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r513347316", "createdAt": "2020-10-28T10:49:42Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/quickfix/DiagnosticModificationContext.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.editor.quickfix;\n+\n+import javax.inject.Inject;\n+\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.ide.server.rename.ChangeConverter2;\n+\n+import com.google.inject.ImplementedBy;\n+\n+/**\n+ * @author Heinrich Weichert\n+\n+ * @since 2.24\n+ */\n+class DiagnosticModificationContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e9e96a7b728557d259d1b906d2e589eadeabbe4"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4caa5bb954ad8b3aa629a6755e932f980ddb7bc0", "author": {"user": {"login": "heinrichWeichert", "name": "Heinrich Weichert"}}, "url": "https://github.com/eclipse/xtext-core/commit/4caa5bb954ad8b3aa629a6755e932f980ddb7bc0", "committedDate": "2020-10-28T17:09:58Z", "message": "quickfix_ide: small cleanup\n\nSigned-off-by: Heinrich Weichert <heinrich.weichert@avl.com>"}, "afterCommit": {"oid": "db29fa69a6fc312d4d813950954ef959e32acb27", "author": {"user": {"login": "heinrichWeichert", "name": "Heinrich Weichert"}}, "url": "https://github.com/eclipse/xtext-core/commit/db29fa69a6fc312d4d813950954ef959e32acb27", "committedDate": "2020-10-28T17:29:42Z", "message": "quickfix_ide: implement review comments (except Command)\n\nSigned-off-by: Heinrich Weichert <heinrich.weichert@avl.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c88375632e45a118682bfc61f88cb672083a19e", "author": {"user": {"login": "heinrichWeichert", "name": "Heinrich Weichert"}}, "url": "https://github.com/eclipse/xtext-core/commit/1c88375632e45a118682bfc61f88cb672083a19e", "committedDate": "2020-10-28T17:54:35Z", "message": "quickfix_ide: small cleanup\n\nSigned-off-by: Heinrich Weichert <heinrich.weichert@avl.com>"}, "afterCommit": {"oid": "213b071e95dc49f8a1e319c49c77266abc73ff2b", "author": {"user": {"login": "heinrichWeichert", "name": "Heinrich Weichert"}}, "url": "https://github.com/eclipse/xtext-core/commit/213b071e95dc49f8a1e319c49c77266abc73ff2b", "committedDate": "2020-10-29T05:33:16Z", "message": "quickfix_ide: quickfix implementation for generic IDEs\n\nSigned-off-by: Heinrich Weichert <heinrich.weichert@avl.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "213b071e95dc49f8a1e319c49c77266abc73ff2b", "author": {"user": {"login": "heinrichWeichert", "name": "Heinrich Weichert"}}, "url": "https://github.com/eclipse/xtext-core/commit/213b071e95dc49f8a1e319c49c77266abc73ff2b", "committedDate": "2020-10-29T05:33:16Z", "message": "quickfix_ide: quickfix implementation for generic IDEs\n\nSigned-off-by: Heinrich Weichert <heinrich.weichert@avl.com>"}, "afterCommit": {"oid": "13c4e0c4406d01cb00fa28aa9ae53c52fd313163", "author": {"user": {"login": "heinrichWeichert", "name": "Heinrich Weichert"}}, "url": "https://github.com/eclipse/xtext-core/commit/13c4e0c4406d01cb00fa28aa9ae53c52fd313163", "committedDate": "2020-10-29T05:56:49Z", "message": "Introduce quickfix API for generic IDE module (beta)\n\nSigned-off-by: Heinrich Weichert <heinrich.weichert@avl.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTMwMDA4", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-521130008", "createdAt": "2020-10-31T10:44:35Z", "commit": {"oid": "13c4e0c4406d01cb00fa28aa9ae53c52fd313163"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxMDo0NDozNVrOHrmn7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxMDo0NDozNVrOHrmn7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ4MzYzMQ==", "bodyText": "add @Beta", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r515483631", "createdAt": "2020-10-31T10:44:35Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/quickfix/IQuickFixProvider.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.editor.quickfix;\n+\n+import java.util.List;\n+\n+import org.eclipse.lsp4j.Diagnostic;\n+import org.eclipse.xtext.ide.server.codeActions.ICodeActionService2.Options;\n+\n+/**\n+ * Quickfix for code actions in files.<br>\n+ * The quickfix itself is applied to a temporary resource.<br>\n+ * The textual edit can be composed by calling DiagnosticResolution#apply().\n+ *\n+ * @author Heinrich Weichert\n+ * \n+ * @since 2.24\n+ */\n+public interface IQuickFixProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13c4e0c4406d01cb00fa28aa9ae53c52fd313163"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTMwMDM0", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-521130034", "createdAt": "2020-10-31T10:45:05Z", "commit": {"oid": "13c4e0c4406d01cb00fa28aa9ae53c52fd313163"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxMDo0NTowNVrOHrmoJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxMDo0NTowNVrOHrmoJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ4MzY4Ng==", "bodyText": "add @Beta", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r515483686", "createdAt": "2020-10-31T10:45:05Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/quickfix/QuickFix.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.editor.quickfix;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Repeatable;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Semantic quick-fix. Multiple quick-fixes can be assigned to one method by wrapping it in one {@link QuickFixes}\n+ * annotation.\n+ * \n+ * @author Heinrich Weichert\n+ *\n+ * @since 2.24\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ ElementType.METHOD })\n+@Repeatable(QuickFixes.class)\n+public @interface QuickFix {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13c4e0c4406d01cb00fa28aa9ae53c52fd313163"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMTMwMDM4", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-521130038", "createdAt": "2020-10-31T10:45:13Z", "commit": {"oid": "13c4e0c4406d01cb00fa28aa9ae53c52fd313163"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxMDo0NToxM1rOHrmoKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQxMDo0NToxM1rOHrmoKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQ4MzY5MQ==", "bodyText": "add @Beta", "url": "https://github.com/eclipse/xtext-core/pull/1597#discussion_r515483691", "createdAt": "2020-10-31T10:45:13Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/editor/quickfix/QuickFixes.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.editor.quickfix;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation Container for @{@link QuickFix} annotations. You can mark a method in a\n+ * {@link AbstractDeclarativeIdeQuickfixProvider} with this annotation to specify which issue codes the method offers\n+ * quick-fixes for. \n+\n+ * @author Heinrich Weichert\n+ * \n+ * @since 2.24\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target({ ElementType.METHOD })\n+public @interface QuickFixes {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13c4e0c4406d01cb00fa28aa9ae53c52fd313163"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8525e34f321292a89f33490dbbe0f29a5435563", "author": {"user": {"login": "heinrichWeichert", "name": "Heinrich Weichert"}}, "url": "https://github.com/eclipse/xtext-core/commit/c8525e34f321292a89f33490dbbe0f29a5435563", "committedDate": "2020-10-31T11:40:50Z", "message": "Introduce quickfix API for generic IDE module (beta)\n\nSigned-off-by: Heinrich Weichert <heinrich.weichert@avl.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13c4e0c4406d01cb00fa28aa9ae53c52fd313163", "author": {"user": {"login": "heinrichWeichert", "name": "Heinrich Weichert"}}, "url": "https://github.com/eclipse/xtext-core/commit/13c4e0c4406d01cb00fa28aa9ae53c52fd313163", "committedDate": "2020-10-29T05:56:49Z", "message": "Introduce quickfix API for generic IDE module (beta)\n\nSigned-off-by: Heinrich Weichert <heinrich.weichert@avl.com>"}, "afterCommit": {"oid": "c8525e34f321292a89f33490dbbe0f29a5435563", "author": {"user": {"login": "heinrichWeichert", "name": "Heinrich Weichert"}}, "url": "https://github.com/eclipse/xtext-core/commit/c8525e34f321292a89f33490dbbe0f29a5435563", "committedDate": "2020-10-31T11:40:50Z", "message": "Introduce quickfix API for generic IDE module (beta)\n\nSigned-off-by: Heinrich Weichert <heinrich.weichert@avl.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNDU2NTk3", "url": "https://github.com/eclipse/xtext-core/pull/1597#pullrequestreview-521456597", "createdAt": "2020-11-02T09:26:00Z", "commit": {"oid": "c8525e34f321292a89f33490dbbe0f29a5435563"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4664, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}