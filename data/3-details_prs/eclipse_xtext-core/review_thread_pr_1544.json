{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MjY0NjY3", "number": 1544, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMTo1Mzo0OVrOEOOZNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMjoyNDoxN1rOEOPAeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzUxMzUxOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/formatting2/internal/FormatterSerializerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMTo1Mzo0OVrOGxQVzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMTo1Mzo0OVrOGxQVzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMwMTEzMg==", "bodyText": "No need for fqn", "url": "https://github.com/eclipse/xtext-core/pull/1544#discussion_r454301132", "createdAt": "2020-07-14T11:53:49Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/formatting2/internal/FormatterSerializerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.formatting2.internal;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.eclipse.xtext.formatting2.AbstractFormatter2;\n+import org.eclipse.xtext.formatting2.IFormattableDocument;\n+import org.eclipse.xtext.formatting2.IFormatter2;\n+import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;\n+import org.eclipse.xtext.formatting2.internal.formattertestlanguage.FormattertestlanguageFactory;\n+import org.eclipse.xtext.formatting2.internal.formattertestlanguage.IDList;\n+import org.eclipse.xtext.formatting2.internal.tests.FormatterTestLanguageInjectorProvider;\n+import org.eclipse.xtext.resource.IResourceFactory;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.eclipse.xtext.xbase.lib.Extension;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+\n+/**\n+ * @author Moritz Eysholdt - Initial contribution and API\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(FormatterSerializerIntegrationTest.InjectorProvider.class)\n+public class FormatterSerializerIntegrationTest {\n+\tpublic static class InjectorProvider extends FormatterTestLanguageInjectorProvider {\n+\t\t@Override\n+\t\tprotected Injector internalCreateInjector() {\n+\t\t\treturn new FormatterSerializerIntegrationTest.Setup().createInjectorAndDoEMFRegistration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ac67e0a0829f2af9907591a790b4f753252a46b"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzUxNjAwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/formatting2/internal/FormatterSerializerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMTo1NDo0MFrOGxQXYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMTo1NDo0MFrOGxQXYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMwMTUzOA==", "bodyText": "Can just be else (makes static analysis a lot happier)", "url": "https://github.com/eclipse/xtext-core/pull/1544#discussion_r454301538", "createdAt": "2020-07-14T11:54:40Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/formatting2/internal/FormatterSerializerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.formatting2.internal;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.eclipse.xtext.formatting2.AbstractFormatter2;\n+import org.eclipse.xtext.formatting2.IFormattableDocument;\n+import org.eclipse.xtext.formatting2.IFormatter2;\n+import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;\n+import org.eclipse.xtext.formatting2.internal.formattertestlanguage.FormattertestlanguageFactory;\n+import org.eclipse.xtext.formatting2.internal.formattertestlanguage.IDList;\n+import org.eclipse.xtext.formatting2.internal.tests.FormatterTestLanguageInjectorProvider;\n+import org.eclipse.xtext.resource.IResourceFactory;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.eclipse.xtext.xbase.lib.Extension;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+\n+/**\n+ * @author Moritz Eysholdt - Initial contribution and API\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(FormatterSerializerIntegrationTest.InjectorProvider.class)\n+public class FormatterSerializerIntegrationTest {\n+\tpublic static class InjectorProvider extends FormatterTestLanguageInjectorProvider {\n+\t\t@Override\n+\t\tprotected Injector internalCreateInjector() {\n+\t\t\treturn new FormatterSerializerIntegrationTest.Setup().createInjectorAndDoEMFRegistration();\n+\t\t}\n+\t}\n+\n+\tpublic static class Setup extends FormatterTestLanguageStandaloneSetup {\n+\t\t@Override\n+\t\tpublic Injector createInjector() {\n+\t\t\treturn Guice.createInjector(new Module());\n+\t\t}\n+\t}\n+\n+\tpublic static class Module extends FormatterTestLanguageRuntimeModule {\n+\t\tpublic Class<? extends IFormatter2> bindIFormatter2() {\n+\t\t\treturn Formatter.class;\n+\t\t}\n+\t}\n+\n+\tpublic static class Formatter extends AbstractFormatter2 {\n+\t\tprotected void _format(IDList model, @Extension IFormattableDocument document) {\n+\t\t\tdocument.append(this.textRegionExtensions.regionFor(model).keyword(\"idlist\"),\n+\t\t\t\t\t(IHiddenRegionFormatter it) -> {\n+\t\t\t\t\t\tit.setSpace(\"  \");\n+\t\t\t\t\t});\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void format(Object model, IFormattableDocument document) {\n+\t\t\tif (model instanceof XtextResource) {\n+\t\t\t\t_format((XtextResource) model, document);\n+\t\t\t\treturn;\n+\t\t\t} else if (model instanceof IDList) {\n+\t\t\t\t_format((IDList) model, document);\n+\t\t\t\treturn;\n+\t\t\t} else if (model instanceof EObject) {\n+\t\t\t\t_format((EObject) model, document);\n+\t\t\t\treturn;\n+\t\t\t} else if (model == null) {\n+\t\t\t\t_format((Void) null, document);\n+\t\t\t\treturn;\n+\t\t\t} else if (model != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ac67e0a0829f2af9907591a790b4f753252a46b"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzUyMDA0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/formatting2/internal/FormatterSerializerIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMTo1NTo1MlrOGxQZsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMTo1NTo1MlrOGxQZsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMwMjEyOA==", "bodyText": "It's just a test, I would add a throws declaration to the test or throw an AssertionError instead", "url": "https://github.com/eclipse/xtext-core/pull/1544#discussion_r454302128", "createdAt": "2020-07-14T11:55:52Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/formatting2/internal/FormatterSerializerIntegrationTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.formatting2.internal;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.util.Collections;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;\n+import org.eclipse.xtext.formatting2.AbstractFormatter2;\n+import org.eclipse.xtext.formatting2.IFormattableDocument;\n+import org.eclipse.xtext.formatting2.IFormatter2;\n+import org.eclipse.xtext.formatting2.IHiddenRegionFormatter;\n+import org.eclipse.xtext.formatting2.internal.formattertestlanguage.FormattertestlanguageFactory;\n+import org.eclipse.xtext.formatting2.internal.formattertestlanguage.IDList;\n+import org.eclipse.xtext.formatting2.internal.tests.FormatterTestLanguageInjectorProvider;\n+import org.eclipse.xtext.resource.IResourceFactory;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.testing.InjectWith;\n+import org.eclipse.xtext.testing.XtextRunner;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+import org.eclipse.xtext.xbase.lib.Extension;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import com.google.inject.Guice;\n+import com.google.inject.Inject;\n+import com.google.inject.Injector;\n+\n+/**\n+ * @author Moritz Eysholdt - Initial contribution and API\n+ */\n+@RunWith(XtextRunner.class)\n+@InjectWith(FormatterSerializerIntegrationTest.InjectorProvider.class)\n+public class FormatterSerializerIntegrationTest {\n+\tpublic static class InjectorProvider extends FormatterTestLanguageInjectorProvider {\n+\t\t@Override\n+\t\tprotected Injector internalCreateInjector() {\n+\t\t\treturn new FormatterSerializerIntegrationTest.Setup().createInjectorAndDoEMFRegistration();\n+\t\t}\n+\t}\n+\n+\tpublic static class Setup extends FormatterTestLanguageStandaloneSetup {\n+\t\t@Override\n+\t\tpublic Injector createInjector() {\n+\t\t\treturn Guice.createInjector(new Module());\n+\t\t}\n+\t}\n+\n+\tpublic static class Module extends FormatterTestLanguageRuntimeModule {\n+\t\tpublic Class<? extends IFormatter2> bindIFormatter2() {\n+\t\t\treturn Formatter.class;\n+\t\t}\n+\t}\n+\n+\tpublic static class Formatter extends AbstractFormatter2 {\n+\t\tprotected void _format(IDList model, @Extension IFormattableDocument document) {\n+\t\t\tdocument.append(this.textRegionExtensions.regionFor(model).keyword(\"idlist\"),\n+\t\t\t\t\t(IHiddenRegionFormatter it) -> {\n+\t\t\t\t\t\tit.setSpace(\"  \");\n+\t\t\t\t\t});\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void format(Object model, IFormattableDocument document) {\n+\t\t\tif (model instanceof XtextResource) {\n+\t\t\t\t_format((XtextResource) model, document);\n+\t\t\t\treturn;\n+\t\t\t} else if (model instanceof IDList) {\n+\t\t\t\t_format((IDList) model, document);\n+\t\t\t\treturn;\n+\t\t\t} else if (model instanceof EObject) {\n+\t\t\t\t_format((EObject) model, document);\n+\t\t\t\treturn;\n+\t\t\t} else if (model == null) {\n+\t\t\t\t_format((Void) null, document);\n+\t\t\t\treturn;\n+\t\t\t} else if (model != null) {\n+\t\t\t\t_format(model, document);\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Inject\n+\tprivate IResourceFactory factory;\n+\n+\t@Test\n+\tpublic void testFormatterIntegrationWithSerializer() {\n+\t\ttry {\n+\t\t\tResource resource = factory.createResource(URI.createURI(\"dummy.ext\"));\n+\t\t\tnew ResourceSetImpl().getResources().add(resource);\n+\t\t\tIDList model = FormattertestlanguageFactory.eINSTANCE.createIDList();\n+\t\t\tmodel.getIds().add(\"foo\");\n+\t\t\tresource.getContents().add(model);\n+\t\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n+\t\t\tresource.save(new BufferedOutputStream(out), Collections.emptyMap());\n+\t\t\tAssert.assertEquals(\"idlist  foo\", out.toString());\n+\t\t} catch (IOException e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ac67e0a0829f2af9907591a790b4f753252a46b"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzYwMjIwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/project/RuntimeProjectConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMjoyMTowMVrOGxRLaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMjoyMTowMVrOGxRLaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMxNDg1Nw==", "bodyText": "Might want to make a variable out of getRoot().getPath()", "url": "https://github.com/eclipse/xtext-core/pull/1544#discussion_r454314857", "createdAt": "2020-07-14T12:21:01Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.xtext.generator/src/org/eclipse/xtext/xtext/generator/model/project/RuntimeProjectConfig.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.generator.model.project;\n+\n+import org.eclipse.xtext.xtext.generator.model.IXtextGeneratorFileSystemAccess;\n+\n+import com.google.common.base.CharMatcher;\n+import com.google.inject.Injector;\n+\n+/**\n+ * Configuration of the runtime project, i.e. the main subproject containing the\n+ * language definition.\n+ * \n+ * @noextend This class should not be extended by clients.\n+ */\n+public class RuntimeProjectConfig extends BundleProjectConfig implements IRuntimeProjectConfig {\n+\tprivate String ecoreModelPath;\n+\n+\tprivate IXtextGeneratorFileSystemAccess ecoreModel;\n+\n+\tpublic void setEcoreModel(String path) {\n+\t\tthis.ecoreModelPath = path;\n+\t}\n+\n+\t/**\n+\t * Returns the root-relative path of the folder where the generated .ecore\n+\t * and .genmodel can be found. The path is delimited by '/', but does not\n+\t * begin or end with a separator.\n+\t */\n+\t@Override\n+\tpublic String getEcoreModelFolder() {\n+\t\tif (ecoreModel.getPath().startsWith(this.getRoot().getPath())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ac67e0a0829f2af9907591a790b4f753252a46b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzYxNDAwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xtext.wizard/src/org/eclipse/xtext/xtext/wizard/TestedProjectDescriptor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMjoyNDoxN1rOGxRSlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMjoyNDoxN1rOGxRSlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMxNjY5NA==", "bodyText": "Can just use files.stream().noneMatch(...) here", "url": "https://github.com/eclipse/xtext-core/pull/1544#discussion_r454316694", "createdAt": "2020-07-14T12:24:17Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.xtext.wizard/src/org/eclipse/xtext/xtext/wizard/TestedProjectDescriptor.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtext.wizard;\n+\n+import java.util.ArrayList;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+\n+import com.google.common.base.Objects;\n+import com.google.common.collect.Iterables;\n+\n+public abstract class TestedProjectDescriptor extends ProjectDescriptor {\n+\tpublic abstract TestProjectDescriptor getTestProject();\n+\n+\tpublic TestedProjectDescriptor(final WizardConfiguration config) {\n+\t\tsuper(config);\n+\t}\n+\n+\t@Override\n+\tpublic Set<ExternalDependency> getExternalDependencies() {\n+\t\tSet<ExternalDependency> deps = new LinkedHashSet<>();\n+\t\tIterables.addAll(deps, super.getExternalDependencies());\n+\t\tif (getTestProject().isInlined()) {\n+\t\t\tIterables.addAll(deps, getTestProject().getExternalDependencies());\n+\t\t}\n+\t\treturn deps;\n+\t}\n+\n+\t@Override\n+\tpublic Set<SourceFolderDescriptor> getSourceFolders() {\n+\t\tSet<SourceFolderDescriptor> sourceFolders = new LinkedHashSet<>();\n+\t\tIterables.addAll(sourceFolders, super.getSourceFolders());\n+\t\tif (getTestProject().isInlined()) {\n+\t\t\tIterables.addAll(sourceFolders, getTestProject().getSourceFolders());\n+\t\t}\n+\t\treturn sourceFolders;\n+\t}\n+\n+\t@Override\n+\tpublic Iterable<? extends AbstractFile> getFiles() {\n+\t\tList<AbstractFile> files = new ArrayList<>();\n+\t\tIterables.addAll(files, super.getFiles());\n+\t\tif (getTestProject().isInlined()) {\n+\t\t\tIterable<? extends AbstractFile> filtered = IterableExtensions.filter(getTestProject().getFiles(),\n+\t\t\t\t\t(AbstractFile fileFromTestProject) -> !IterableExtensions.exists(files,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ac67e0a0829f2af9907591a790b4f753252a46b"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 942, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}