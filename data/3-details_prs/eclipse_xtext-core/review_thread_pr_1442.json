{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMjI4OTk5", "number": 1442, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTo1MzozMlrODw-pzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTo0NTo0MVrODxENlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjg0NzUwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/server/AbstractTestLangLanguageServerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTo1MzozMlrOGEPqeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTo1MzozMlrOGEPqeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDEyMA==", "bodyText": "NL", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407104120", "createdAt": "2020-04-11T19:53:32Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide.tests/src/org/eclipse/xtext/ide/tests/server/AbstractTestLangLanguageServerTest.java", "diffHunk": "@@ -1,21 +1,22 @@\n-/**\n- * Copyright (c) 2016 TypeFox GmbH (http://www.typefox.io) and others.\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License 2.0 which is available at\n  * http://www.eclipse.org/legal/epl-2.0.\n- * \n+ *\n  * SPDX-License-Identifier: EPL-2.0\n- */\n+ *******************************************************************************/\n package org.eclipse.xtext.ide.tests.server;\n \n import org.eclipse.xtext.testing.AbstractLanguageServerTest;\n \n /**\n  * @author akosyakov - Initial contribution and API\n  */\n-@SuppressWarnings(\"all\")\n public abstract class AbstractTestLangLanguageServerTest extends AbstractLanguageServerTest {\n-  public AbstractTestLangLanguageServerTest() {\n-    super(\"testlang\");\n-  }\n-}\n+    \n+    public AbstractTestLangLanguageServerTest() {\n+        super(\"testlang\");\n+    }\n+    \n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjg1MDE3OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTo1NzoxM1rOGEPr0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTo1NzoxM1rOGEPr0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDQ2NQ==", "bodyText": "You could just do - private final Map<String, ExecutorService> instanceCache = new HashMap<>(3)", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407104465", "createdAt": "2020-04-11T19:57:13Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide;\n+\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.eclipse.xtext.util.DisposableRegistry;\n+import org.eclipse.xtext.util.IDisposable;\n+\n+import com.google.common.collect.Maps;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Provider for executor services. By calling {@link #dispose()} all created executor services are shut down.\n+ * <p>\n+ * In some situations it is necessary to use multiple instances of executor services in order to avoid deadlocks. That\n+ * can be achieved with the {@link #get(String)}\ufffdmethod, which will return a different instance for each key.\n+ */\n+@Singleton\n+public class ExecutorServiceProvider implements Provider<ExecutorService>, IDisposable {\n+\t@Inject\n+\tpublic void registerTo(DisposableRegistry disposableRegistry) {\n+\t\tdisposableRegistry.register(this);\n+\t}\n+\n+\tprivate final Map<String, ExecutorService> instanceCache = Maps", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjg1MTUwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTo1ODo0OFrOGEPsbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQxOTo1ODo0OFrOGEPsbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDYyMQ==", "bodyText": "instanceCache.clear()", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407104621", "createdAt": "2020-04-11T19:58:48Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide;\n+\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.eclipse.xtext.util.DisposableRegistry;\n+import org.eclipse.xtext.util.IDisposable;\n+\n+import com.google.common.collect.Maps;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Provider for executor services. By calling {@link #dispose()} all created executor services are shut down.\n+ * <p>\n+ * In some situations it is necessary to use multiple instances of executor services in order to avoid deadlocks. That\n+ * can be achieved with the {@link #get(String)}\ufffdmethod, which will return a different instance for each key.\n+ */\n+@Singleton\n+public class ExecutorServiceProvider implements Provider<ExecutorService>, IDisposable {\n+\t@Inject\n+\tpublic void registerTo(DisposableRegistry disposableRegistry) {\n+\t\tdisposableRegistry.register(this);\n+\t}\n+\n+\tprivate final Map<String, ExecutorService> instanceCache = Maps\n+\t\t\t.<String, ExecutorService>newHashMapWithExpectedSize(3);\n+\n+\t@Override\n+\tpublic ExecutorService get() {\n+\t\treturn get(null);\n+\t}\n+\n+\tpublic ExecutorService get(String key) {\n+\t\tExecutorService result = instanceCache.get(key);\n+\t\tif (result == null) {\n+\t\t\tsynchronized (instanceCache) {\n+\t\t\t\tresult = instanceCache.get(key);\n+\t\t\t\tif (result == null) {\n+\t\t\t\t\tresult = createInstance(key);\n+\t\t\t\t\tinstanceCache.put(key, result);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\tprotected ExecutorService createInstance(String key) {\n+\t\treturn Executors.newCachedThreadPool();\n+\t}\n+\n+\t@Override\n+\tpublic void dispose() {\n+\t\tfor (ExecutorService executorService : instanceCache.values()) {\n+\t\t\texecutorService.shutdown();\n+\t\t}\n+\t\tthis.instanceCache.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjg2MTE5OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/AlternativeImageDescription.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDoxMTozM1rOGEPxGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNjo1NTowNlrOGES04A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNTgxNg==", "bodyText": "How about replacing the above code with something like  return \"imageID's :\" + imageIDs.toString(), so that we can remove the reference to the ToStringBuilder type?", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407105816", "createdAt": "2020-04-11T20:11:33Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/AlternativeImageDescription.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.labels;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import org.eclipse.xtext.ide.labels.IImageDescription;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+public class AlternativeImageDescription implements IImageDescription {\n+\tprivate final List<String> imageIDs;\n+\n+\tpublic AlternativeImageDescription(Iterable<String> imageIDs) {\n+\t\tthis.imageIDs = ImmutableList.<String>copyOf(imageIDs);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((imageIDs == null) ? 0 : imageIDs.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (obj == null)\n+\t\t\treturn false;\n+\t\tif (getClass() != obj.getClass())\n+\t\t\treturn false;\n+\t\tAlternativeImageDescription other = (AlternativeImageDescription) obj;\n+\t\tif (imageIDs == null) {\n+\t\t\tif (other.imageIDs != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!imageIDs.equals(other.imageIDs))\n+\t\t\treturn false;\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\tb.add(\"imageIDs\", imageIDs);\n+\t\treturn b.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1NTkzNg==", "bodyText": "i wanted to keep the old impl for all of the toStrings", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407155936", "createdAt": "2020-04-12T06:55:06Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/AlternativeImageDescription.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.labels;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import org.eclipse.xtext.ide.labels.IImageDescription;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+public class AlternativeImageDescription implements IImageDescription {\n+\tprivate final List<String> imageIDs;\n+\n+\tpublic AlternativeImageDescription(Iterable<String> imageIDs) {\n+\t\tthis.imageIDs = ImmutableList.<String>copyOf(imageIDs);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((imageIDs == null) ? 0 : imageIDs.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (obj == null)\n+\t\t\treturn false;\n+\t\tif (getClass() != obj.getClass())\n+\t\t\treturn false;\n+\t\tAlternativeImageDescription other = (AlternativeImageDescription) obj;\n+\t\tif (imageIDs == null) {\n+\t\t\tif (other.imageIDs != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!imageIDs.equals(other.imageIDs))\n+\t\t\treturn false;\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tToStringBuilder b = new ToStringBuilder(this);\n+\t\tb.add(\"imageIDs\", imageIDs);\n+\t\treturn b.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNTgxNg=="}, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjg2MjAwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/DecoratedImageDescription.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDoxMjozNlrOGEPxgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNjo1NTozNVrOGES1CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNTkyMA==", "bodyText": "Can we remove the reference to the ToStringBuilder if possible ?", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407105920", "createdAt": "2020-04-11T20:12:36Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/DecoratedImageDescription.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.labels;\n+\n+import java.util.List;\n+\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+public class DecoratedImageDescription implements IImageDescription {\n+\tprivate final IImageDescription baseImage;\n+\n+\tprivate final List<IImageDescription> decorators;\n+\n+\tpublic DecoratedImageDescription(IImageDescription baseImage, IImageDescription... decorators) {\n+\t\tthis.baseImage = baseImage;\n+\t\tthis.decorators = ImmutableList.<IImageDescription>copyOf(decorators);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((baseImage == null) ? 0 : baseImage.hashCode());\n+\t\tresult = prime * result + ((decorators == null) ? 0 : decorators.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (obj == null)\n+\t\t\treturn false;\n+\t\tif (getClass() != obj.getClass())\n+\t\t\treturn false;\n+\t\tDecoratedImageDescription other = (DecoratedImageDescription) obj;\n+\t\tif (baseImage == null) {\n+\t\t\tif (other.baseImage != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!baseImage.equals(other.baseImage))\n+\t\t\treturn false;\n+\t\tif (decorators == null) {\n+\t\t\tif (other.decorators != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!decorators.equals(other.decorators))\n+\t\t\treturn false;\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tToStringBuilder b = new ToStringBuilder(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1NTk3Ng==", "bodyText": "can be refactored lated. i want to keep the current behaviour", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407155976", "createdAt": "2020-04-12T06:55:35Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/DecoratedImageDescription.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.labels;\n+\n+import java.util.List;\n+\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+import com.google.common.collect.ImmutableList;\n+\n+public class DecoratedImageDescription implements IImageDescription {\n+\tprivate final IImageDescription baseImage;\n+\n+\tprivate final List<IImageDescription> decorators;\n+\n+\tpublic DecoratedImageDescription(IImageDescription baseImage, IImageDescription... decorators) {\n+\t\tthis.baseImage = baseImage;\n+\t\tthis.decorators = ImmutableList.<IImageDescription>copyOf(decorators);\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((baseImage == null) ? 0 : baseImage.hashCode());\n+\t\tresult = prime * result + ((decorators == null) ? 0 : decorators.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (obj == null)\n+\t\t\treturn false;\n+\t\tif (getClass() != obj.getClass())\n+\t\t\treturn false;\n+\t\tDecoratedImageDescription other = (DecoratedImageDescription) obj;\n+\t\tif (baseImage == null) {\n+\t\t\tif (other.baseImage != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!baseImage.equals(other.baseImage))\n+\t\t\treturn false;\n+\t\tif (decorators == null) {\n+\t\t\tif (other.decorators != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!decorators.equals(other.decorators))\n+\t\t\treturn false;\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tToStringBuilder b = new ToStringBuilder(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNTkyMA=="}, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjg2NzMzOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleImageDescription.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDoxODo1OFrOGEP0CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDoxODo1OFrOGEP0CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNjU2OA==", "bodyText": "Please remove super()", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407106568", "createdAt": "2020-04-11T20:18:58Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleImageDescription.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.labels;\n+\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+public class SimpleImageDescription implements IImageDescription {\n+\tprivate final String imageID;\n+\n+\tpublic SimpleImageDescription(String imageID) {\n+\t\tsuper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjg2ODE3OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleImageDescription.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDoxOTo1NFrOGEP0bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNjo1Njo0N1rOGES1cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNjY2OA==", "bodyText": "return imageID", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407106668", "createdAt": "2020-04-11T20:19:54Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleImageDescription.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.labels;\n+\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+public class SimpleImageDescription implements IImageDescription {\n+\tprivate final String imageID;\n+\n+\tpublic SimpleImageDescription(String imageID) {\n+\t\tsuper();\n+\t\tthis.imageID = imageID;\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((imageID == null) ? 0 : imageID.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (obj == null)\n+\t\t\treturn false;\n+\t\tif (getClass() != obj.getClass())\n+\t\t\treturn false;\n+\t\tSimpleImageDescription other = (SimpleImageDescription) obj;\n+\t\tif (imageID == null) {\n+\t\t\tif (other.imageID != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!imageID.equals(other.imageID))\n+\t\t\treturn false;\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tToStringBuilder b = new ToStringBuilder(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1NjA4Mw==", "bodyText": "again i want to keep the behaviour of the old toString", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407156083", "createdAt": "2020-04-12T06:56:47Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleImageDescription.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.labels;\n+\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+public class SimpleImageDescription implements IImageDescription {\n+\tprivate final String imageID;\n+\n+\tpublic SimpleImageDescription(String imageID) {\n+\t\tsuper();\n+\t\tthis.imageID = imageID;\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((imageID == null) ? 0 : imageID.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (obj == null)\n+\t\t\treturn false;\n+\t\tif (getClass() != obj.getClass())\n+\t\t\treturn false;\n+\t\tSimpleImageDescription other = (SimpleImageDescription) obj;\n+\t\tif (imageID == null) {\n+\t\t\tif (other.imageID != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!imageID.equals(other.imageID))\n+\t\t\treturn false;\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tToStringBuilder b = new ToStringBuilder(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNjY2OA=="}, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjg4MDY5OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleNameLabelProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDozNTo1MlrOGEP6VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDozNTo1MlrOGEP6VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwODE4MQ==", "bodyText": "How about adding some documentation to this method.\nCalculates the simple-name based on the type of the passed {@code element}.\nIf the {@code element} is an instance of {@code EObject}, the value of the {@code name} attribute is returned.\nIf the {@code element} is an instance of {@code IEObjectDescription}, the value of the {@link QualifiedName#getLastSegment()} is returned.\nA {@code null} value is returned otherwise.", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407108181", "createdAt": "2020-04-11T20:35:52Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/SimpleNameLabelProvider.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.labels;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.ide.labels.INameLabelProvider;\n+import org.eclipse.xtext.resource.IEObjectDescription;\n+import org.eclipse.xtext.util.SimpleAttributeResolver;\n+\n+public class SimpleNameLabelProvider implements INameLabelProvider {\n+\t@Override\n+\tpublic String getNameLabel(Object element) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjg4NDgyOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDo0MTowNlrOGEP8Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDo0MTowNlrOGEP8Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwODY3NQ==", "bodyText": "Please use a simple for-loop so that we can get rid of the the reference to the IterableExtensions type.", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407108675", "createdAt": "2020-04-11T20:41:06Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.eclipse.emf.ecore.EAttribute;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Called to rename an element in the {@link IChangeSerializer} based refactoring.\n+ * \n+ * Clients may extend the {@link DefaultImpl} to customize the behavior or implement this interface directly.\n+ * \n+ * Changes are usually performed in the The {@link RenameContext}\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public interface IRenameStrategy2 {\n+\tclass DefaultImpl implements IRenameStrategy2 {\n+\t\t@Inject\n+\t\tprivate IResourceServiceProvider resourceServiceProvider;\n+\n+\t\tpublic boolean canHandle(RenameChange change) {\n+\t\t\treturn resourceServiceProvider.canHandle(change.getTargetURI());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void applyRename(RenameContext context) {\n+\t\t\tIterableExtensions.filter(context.getChanges(), (c) -> canHandle(c)).forEach((change) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjg4NTExOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDo0MTo0MVrOGEP8aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDo0MTo0MVrOGEP8aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwODcxMw==", "bodyText": "context.addModification(change, (EObject o) -> doRename(o, change, context));", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407108713", "createdAt": "2020-04-11T20:41:41Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.eclipse.emf.ecore.EAttribute;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Called to rename an element in the {@link IChangeSerializer} based refactoring.\n+ * \n+ * Clients may extend the {@link DefaultImpl} to customize the behavior or implement this interface directly.\n+ * \n+ * Changes are usually performed in the The {@link RenameContext}\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public interface IRenameStrategy2 {\n+\tclass DefaultImpl implements IRenameStrategy2 {\n+\t\t@Inject\n+\t\tprivate IResourceServiceProvider resourceServiceProvider;\n+\n+\t\tpublic boolean canHandle(RenameChange change) {\n+\t\t\treturn resourceServiceProvider.canHandle(change.getTargetURI());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void applyRename(RenameContext context) {\n+\t\t\tIterableExtensions.filter(context.getChanges(), (c) -> canHandle(c)).forEach((change) -> {\n+\t\t\t\tcontext.addModification(change, (EObject o) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjg4NTU1OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDo0MjoxN1rOGEP8mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDo0MjoxN1rOGEP8mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwODc2MA==", "bodyText": "a -> attribute", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407108760", "createdAt": "2020-04-11T20:42:17Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.eclipse.emf.ecore.EAttribute;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Called to rename an element in the {@link IChangeSerializer} based refactoring.\n+ * \n+ * Clients may extend the {@link DefaultImpl} to customize the behavior or implement this interface directly.\n+ * \n+ * Changes are usually performed in the The {@link RenameContext}\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public interface IRenameStrategy2 {\n+\tclass DefaultImpl implements IRenameStrategy2 {\n+\t\t@Inject\n+\t\tprivate IResourceServiceProvider resourceServiceProvider;\n+\n+\t\tpublic boolean canHandle(RenameChange change) {\n+\t\t\treturn resourceServiceProvider.canHandle(change.getTargetURI());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void applyRename(RenameContext context) {\n+\t\t\tIterableExtensions.filter(context.getChanges(), (c) -> canHandle(c)).forEach((change) -> {\n+\t\t\t\tcontext.addModification(change, (EObject o) -> {\n+\t\t\t\t\tdoRename(o, change, context);\n+\t\t\t\t});\n+\t\t\t});\n+\t\t}\n+\n+\t\tprotected void doRename(EObject target, RenameChange change, RenameContext context) {\n+\t\t\tEAttribute nameAttribute = getNameEAttribute(target);\n+\t\t\tif (nameAttribute != null) {\n+\t\t\t\ttarget.eSet(nameAttribute, change.getNewName());\n+\t\t\t} else {\n+\t\t\t\tcontext.getIssues().add(RefactoringIssueAcceptor.Severity.WARNING, \"Element of class \" + target.eClass().getName() + \" cannot be renamed.\");\n+\t\t\t}\n+\t\t}\n+\n+\t\tprotected EAttribute getNameEAttribute(EObject target) {\n+\t\t\tfor (EAttribute a : target.eClass().getEAllAttributes()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjg4ODE4OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDo0NToxNlrOGEP90g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNToyMDowNVrOGEp6PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTA3NA==", "bodyText": "Can't we use SimpleAttributeResolver.NAME_RESOLVER.apply(target) here?", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407109074", "createdAt": "2020-04-11T20:45:16Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.eclipse.emf.ecore.EAttribute;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Called to rename an element in the {@link IChangeSerializer} based refactoring.\n+ * \n+ * Clients may extend the {@link DefaultImpl} to customize the behavior or implement this interface directly.\n+ * \n+ * Changes are usually performed in the The {@link RenameContext}\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public interface IRenameStrategy2 {\n+\tclass DefaultImpl implements IRenameStrategy2 {\n+\t\t@Inject\n+\t\tprivate IResourceServiceProvider resourceServiceProvider;\n+\n+\t\tpublic boolean canHandle(RenameChange change) {\n+\t\t\treturn resourceServiceProvider.canHandle(change.getTargetURI());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void applyRename(RenameContext context) {\n+\t\t\tIterableExtensions.filter(context.getChanges(), (c) -> canHandle(c)).forEach((change) -> {\n+\t\t\t\tcontext.addModification(change, (EObject o) -> {\n+\t\t\t\t\tdoRename(o, change, context);\n+\t\t\t\t});\n+\t\t\t});\n+\t\t}\n+\n+\t\tprotected void doRename(EObject target, RenameChange change, RenameContext context) {\n+\t\t\tEAttribute nameAttribute = getNameEAttribute(target);\n+\t\t\tif (nameAttribute != null) {\n+\t\t\t\ttarget.eSet(nameAttribute, change.getNewName());\n+\t\t\t} else {\n+\t\t\t\tcontext.getIssues().add(RefactoringIssueAcceptor.Severity.WARNING, \"Element of class \" + target.eClass().getName() + \" cannot be renamed.\");\n+\t\t\t}\n+\t\t}\n+\n+\t\tprotected EAttribute getNameEAttribute(EObject target) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1NjUzMQ==", "bodyText": "dont now why this is done as its done. thus i keep the original impl.", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407156531", "createdAt": "2020-04-12T07:00:50Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.eclipse.emf.ecore.EAttribute;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Called to rename an element in the {@link IChangeSerializer} based refactoring.\n+ * \n+ * Clients may extend the {@link DefaultImpl} to customize the behavior or implement this interface directly.\n+ * \n+ * Changes are usually performed in the The {@link RenameContext}\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public interface IRenameStrategy2 {\n+\tclass DefaultImpl implements IRenameStrategy2 {\n+\t\t@Inject\n+\t\tprivate IResourceServiceProvider resourceServiceProvider;\n+\n+\t\tpublic boolean canHandle(RenameChange change) {\n+\t\t\treturn resourceServiceProvider.canHandle(change.getTargetURI());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void applyRename(RenameContext context) {\n+\t\t\tIterableExtensions.filter(context.getChanges(), (c) -> canHandle(c)).forEach((change) -> {\n+\t\t\t\tcontext.addModification(change, (EObject o) -> {\n+\t\t\t\t\tdoRename(o, change, context);\n+\t\t\t\t});\n+\t\t\t});\n+\t\t}\n+\n+\t\tprotected void doRename(EObject target, RenameChange change, RenameContext context) {\n+\t\t\tEAttribute nameAttribute = getNameEAttribute(target);\n+\t\t\tif (nameAttribute != null) {\n+\t\t\t\ttarget.eSet(nameAttribute, change.getNewName());\n+\t\t\t} else {\n+\t\t\t\tcontext.getIssues().add(RefactoringIssueAcceptor.Severity.WARNING, \"Element of class \" + target.eClass().getName() + \" cannot be renamed.\");\n+\t\t\t}\n+\t\t}\n+\n+\t\tprotected EAttribute getNameEAttribute(EObject target) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTA3NA=="}, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNDk2MA==", "bodyText": "Weird. It should really use org.eclipse.emf.ecore.impl.EClassImpl.getEStructuralFeature(String) and an instanceof EAttribute.", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407214960", "createdAt": "2020-04-12T15:37:03Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.eclipse.emf.ecore.EAttribute;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Called to rename an element in the {@link IChangeSerializer} based refactoring.\n+ * \n+ * Clients may extend the {@link DefaultImpl} to customize the behavior or implement this interface directly.\n+ * \n+ * Changes are usually performed in the The {@link RenameContext}\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public interface IRenameStrategy2 {\n+\tclass DefaultImpl implements IRenameStrategy2 {\n+\t\t@Inject\n+\t\tprivate IResourceServiceProvider resourceServiceProvider;\n+\n+\t\tpublic boolean canHandle(RenameChange change) {\n+\t\t\treturn resourceServiceProvider.canHandle(change.getTargetURI());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void applyRename(RenameContext context) {\n+\t\t\tIterableExtensions.filter(context.getChanges(), (c) -> canHandle(c)).forEach((change) -> {\n+\t\t\t\tcontext.addModification(change, (EObject o) -> {\n+\t\t\t\t\tdoRename(o, change, context);\n+\t\t\t\t});\n+\t\t\t});\n+\t\t}\n+\n+\t\tprotected void doRename(EObject target, RenameChange change, RenameContext context) {\n+\t\t\tEAttribute nameAttribute = getNameEAttribute(target);\n+\t\t\tif (nameAttribute != null) {\n+\t\t\t\ttarget.eSet(nameAttribute, change.getNewName());\n+\t\t\t} else {\n+\t\t\t\tcontext.getIssues().add(RefactoringIssueAcceptor.Severity.WARNING, \"Element of class \" + target.eClass().getName() + \" cannot be renamed.\");\n+\t\t\t}\n+\t\t}\n+\n+\t\tprotected EAttribute getNameEAttribute(EObject target) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTA3NA=="}, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNTAwNA==", "bodyText": "check for EType is missing, though.", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407215004", "createdAt": "2020-04-12T15:37:38Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.eclipse.emf.ecore.EAttribute;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Called to rename an element in the {@link IChangeSerializer} based refactoring.\n+ * \n+ * Clients may extend the {@link DefaultImpl} to customize the behavior or implement this interface directly.\n+ * \n+ * Changes are usually performed in the The {@link RenameContext}\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public interface IRenameStrategy2 {\n+\tclass DefaultImpl implements IRenameStrategy2 {\n+\t\t@Inject\n+\t\tprivate IResourceServiceProvider resourceServiceProvider;\n+\n+\t\tpublic boolean canHandle(RenameChange change) {\n+\t\t\treturn resourceServiceProvider.canHandle(change.getTargetURI());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void applyRename(RenameContext context) {\n+\t\t\tIterableExtensions.filter(context.getChanges(), (c) -> canHandle(c)).forEach((change) -> {\n+\t\t\t\tcontext.addModification(change, (EObject o) -> {\n+\t\t\t\t\tdoRename(o, change, context);\n+\t\t\t\t});\n+\t\t\t});\n+\t\t}\n+\n+\t\tprotected void doRename(EObject target, RenameChange change, RenameContext context) {\n+\t\t\tEAttribute nameAttribute = getNameEAttribute(target);\n+\t\t\tif (nameAttribute != null) {\n+\t\t\t\ttarget.eSet(nameAttribute, change.getNewName());\n+\t\t\t} else {\n+\t\t\t\tcontext.getIssues().add(RefactoringIssueAcceptor.Severity.WARNING, \"Element of class \" + target.eClass().getName() + \" cannot be renamed.\");\n+\t\t\t}\n+\t\t}\n+\n+\t\tprotected EAttribute getNameEAttribute(EObject target) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTA3NA=="}, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyMDM3Ng==", "bodyText": "i will keep it as is for now", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407220376", "createdAt": "2020-04-12T16:21:34Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.eclipse.emf.ecore.EAttribute;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Called to rename an element in the {@link IChangeSerializer} based refactoring.\n+ * \n+ * Clients may extend the {@link DefaultImpl} to customize the behavior or implement this interface directly.\n+ * \n+ * Changes are usually performed in the The {@link RenameContext}\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public interface IRenameStrategy2 {\n+\tclass DefaultImpl implements IRenameStrategy2 {\n+\t\t@Inject\n+\t\tprivate IResourceServiceProvider resourceServiceProvider;\n+\n+\t\tpublic boolean canHandle(RenameChange change) {\n+\t\t\treturn resourceServiceProvider.canHandle(change.getTargetURI());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void applyRename(RenameContext context) {\n+\t\t\tIterableExtensions.filter(context.getChanges(), (c) -> canHandle(c)).forEach((change) -> {\n+\t\t\t\tcontext.addModification(change, (EObject o) -> {\n+\t\t\t\t\tdoRename(o, change, context);\n+\t\t\t\t});\n+\t\t\t});\n+\t\t}\n+\n+\t\tprotected void doRename(EObject target, RenameChange change, RenameContext context) {\n+\t\t\tEAttribute nameAttribute = getNameEAttribute(target);\n+\t\t\tif (nameAttribute != null) {\n+\t\t\t\ttarget.eSet(nameAttribute, change.getNewName());\n+\t\t\t} else {\n+\t\t\t\tcontext.getIssues().add(RefactoringIssueAcceptor.Severity.WARNING, \"Element of class \" + target.eClass().getName() + \" cannot be renamed.\");\n+\t\t\t}\n+\t\t}\n+\n+\t\tprotected EAttribute getNameEAttribute(EObject target) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTA3NA=="}, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyNDk4OA==", "bodyText": "The original code scanned for EAttribute 'name' with eType 'EString' - do you want to drop the second condition?", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407524988", "createdAt": "2020-04-13T15:03:21Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.eclipse.emf.ecore.EAttribute;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Called to rename an element in the {@link IChangeSerializer} based refactoring.\n+ * \n+ * Clients may extend the {@link DefaultImpl} to customize the behavior or implement this interface directly.\n+ * \n+ * Changes are usually performed in the The {@link RenameContext}\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public interface IRenameStrategy2 {\n+\tclass DefaultImpl implements IRenameStrategy2 {\n+\t\t@Inject\n+\t\tprivate IResourceServiceProvider resourceServiceProvider;\n+\n+\t\tpublic boolean canHandle(RenameChange change) {\n+\t\t\treturn resourceServiceProvider.canHandle(change.getTargetURI());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void applyRename(RenameContext context) {\n+\t\t\tIterableExtensions.filter(context.getChanges(), (c) -> canHandle(c)).forEach((change) -> {\n+\t\t\t\tcontext.addModification(change, (EObject o) -> {\n+\t\t\t\t\tdoRename(o, change, context);\n+\t\t\t\t});\n+\t\t\t});\n+\t\t}\n+\n+\t\tprotected void doRename(EObject target, RenameChange change, RenameContext context) {\n+\t\t\tEAttribute nameAttribute = getNameEAttribute(target);\n+\t\t\tif (nameAttribute != null) {\n+\t\t\t\ttarget.eSet(nameAttribute, change.getNewName());\n+\t\t\t} else {\n+\t\t\t\tcontext.getIssues().add(RefactoringIssueAcceptor.Severity.WARNING, \"Element of class \" + target.eClass().getName() + \" cannot be renamed.\");\n+\t\t\t}\n+\t\t}\n+\n+\t\tprotected EAttribute getNameEAttribute(EObject target) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTA3NA=="}, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUzMjkxOA==", "bodyText": "sry will double check", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407532918", "createdAt": "2020-04-13T15:17:55Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.eclipse.emf.ecore.EAttribute;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Called to rename an element in the {@link IChangeSerializer} based refactoring.\n+ * \n+ * Clients may extend the {@link DefaultImpl} to customize the behavior or implement this interface directly.\n+ * \n+ * Changes are usually performed in the The {@link RenameContext}\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public interface IRenameStrategy2 {\n+\tclass DefaultImpl implements IRenameStrategy2 {\n+\t\t@Inject\n+\t\tprivate IResourceServiceProvider resourceServiceProvider;\n+\n+\t\tpublic boolean canHandle(RenameChange change) {\n+\t\t\treturn resourceServiceProvider.canHandle(change.getTargetURI());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void applyRename(RenameContext context) {\n+\t\t\tIterableExtensions.filter(context.getChanges(), (c) -> canHandle(c)).forEach((change) -> {\n+\t\t\t\tcontext.addModification(change, (EObject o) -> {\n+\t\t\t\t\tdoRename(o, change, context);\n+\t\t\t\t});\n+\t\t\t});\n+\t\t}\n+\n+\t\tprotected void doRename(EObject target, RenameChange change, RenameContext context) {\n+\t\t\tEAttribute nameAttribute = getNameEAttribute(target);\n+\t\t\tif (nameAttribute != null) {\n+\t\t\t\ttarget.eSet(nameAttribute, change.getNewName());\n+\t\t\t} else {\n+\t\t\t\tcontext.getIssues().add(RefactoringIssueAcceptor.Severity.WARNING, \"Element of class \" + target.eClass().getName() + \" cannot be renamed.\");\n+\t\t\t}\n+\t\t}\n+\n+\t\tprotected EAttribute getNameEAttribute(EObject target) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTA3NA=="}, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUzNDE0MQ==", "bodyText": "fixed", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407534141", "createdAt": "2020-04-13T15:20:05Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/IRenameStrategy2.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.eclipse.emf.ecore.EAttribute;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+import org.eclipse.xtext.resource.IResourceServiceProvider;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+\n+import com.google.inject.Inject;\n+\n+/**\n+ * Called to rename an element in the {@link IChangeSerializer} based refactoring.\n+ * \n+ * Clients may extend the {@link DefaultImpl} to customize the behavior or implement this interface directly.\n+ * \n+ * Changes are usually performed in the The {@link RenameContext}\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public interface IRenameStrategy2 {\n+\tclass DefaultImpl implements IRenameStrategy2 {\n+\t\t@Inject\n+\t\tprivate IResourceServiceProvider resourceServiceProvider;\n+\n+\t\tpublic boolean canHandle(RenameChange change) {\n+\t\t\treturn resourceServiceProvider.canHandle(change.getTargetURI());\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic void applyRename(RenameContext context) {\n+\t\t\tIterableExtensions.filter(context.getChanges(), (c) -> canHandle(c)).forEach((change) -> {\n+\t\t\t\tcontext.addModification(change, (EObject o) -> {\n+\t\t\t\t\tdoRename(o, change, context);\n+\t\t\t\t});\n+\t\t\t});\n+\t\t}\n+\n+\t\tprotected void doRename(EObject target, RenameChange change, RenameContext context) {\n+\t\t\tEAttribute nameAttribute = getNameEAttribute(target);\n+\t\t\tif (nameAttribute != null) {\n+\t\t\t\ttarget.eSet(nameAttribute, change.getNewName());\n+\t\t\t} else {\n+\t\t\t\tcontext.getIssues().add(RefactoringIssueAcceptor.Severity.WARNING, \"Element of class \" + target.eClass().getName() + \" cannot be renamed.\");\n+\t\t\t}\n+\t\t}\n+\n+\t\tprotected EAttribute getNameEAttribute(EObject target) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTA3NA=="}, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjg4OTYwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/RenameContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDo0Njo1NFrOGEP-fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDo0Njo1NFrOGEP-fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTI0NA==", "bodyText": "Please remove super()", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407109244", "createdAt": "2020-04-11T20:46:54Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/RenameContext.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import java.util.List;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.emf.ecore.util.EcoreUtil;\n+import org.eclipse.xtext.ide.serializer.IChangeSerializer;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class RenameContext {\n+\tprivate final List<? extends RenameChange> changes;\n+\n+\tprivate final ResourceSet resourceSet;\n+\n+\tprivate final IChangeSerializer changeSerializer;\n+\n+\tprivate final RefactoringIssueAcceptor issues;\n+\n+\tpublic RenameContext(List<? extends RenameChange> changes, ResourceSet resourceSet,\n+\t\t\tIChangeSerializer changeSerializer, RefactoringIssueAcceptor issues) {\n+\t\tsuper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjg5MDIxOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/ResourceRelocationChange.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDo0Nzo1MFrOGEP-xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDo0Nzo1MFrOGEP-xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTMxNw==", "bodyText": "Please remove super()", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407109317", "createdAt": "2020-04-11T20:47:50Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/ResourceRelocationChange.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * URIs can also refer to folders and non-Xtext resources.\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ResourceRelocationChange {\n+\tprivate final URI fromURI;\n+\n+\tprivate final URI toURI;\n+\n+\tprivate final boolean isFile;\n+\n+\tpublic ResourceRelocationChange(final URI fromURI, final URI toURI, final boolean isFile) {\n+\t\tsuper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjg5MDU2OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/ResourceRelocationChange.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDo0ODoxNFrOGEP-8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzowMjoyOVrOGES33w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTM2MQ==", "bodyText": "Remove reference to ToStringBuilder if possible.", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407109361", "createdAt": "2020-04-11T20:48:14Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/ResourceRelocationChange.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * URIs can also refer to folders and non-Xtext resources.\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ResourceRelocationChange {\n+\tprivate final URI fromURI;\n+\n+\tprivate final URI toURI;\n+\n+\tprivate final boolean isFile;\n+\n+\tpublic ResourceRelocationChange(final URI fromURI, final URI toURI, final boolean isFile) {\n+\t\tsuper();\n+\t\tthis.fromURI = fromURI;\n+\t\tthis.toURI = toURI;\n+\t\tthis.isFile = isFile;\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((fromURI == null) ? 0 : fromURI.hashCode());\n+\t\tresult = prime * result + (isFile ? 1231 : 1237);\n+\t\tresult = prime * result + ((toURI == null) ? 0 : toURI.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (obj == null)\n+\t\t\treturn false;\n+\t\tif (getClass() != obj.getClass())\n+\t\t\treturn false;\n+\t\tResourceRelocationChange other = (ResourceRelocationChange) obj;\n+\t\tif (fromURI == null) {\n+\t\t\tif (other.fromURI != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!fromURI.equals(other.fromURI))\n+\t\t\treturn false;\n+\t\tif (isFile != other.isFile)\n+\t\t\treturn false;\n+\t\tif (toURI == null) {\n+\t\t\tif (other.toURI != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!toURI.equals(other.toURI))\n+\t\t\treturn false;\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tToStringBuilder b = new ToStringBuilder(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1NjcwMw==", "bodyText": "wanted to keep it as i want to keep the behaviour", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407156703", "createdAt": "2020-04-12T07:02:29Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/ResourceRelocationChange.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+/**\n+ * URIs can also refer to folders and non-Xtext resources.\n+ * \n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ResourceRelocationChange {\n+\tprivate final URI fromURI;\n+\n+\tprivate final URI toURI;\n+\n+\tprivate final boolean isFile;\n+\n+\tpublic ResourceRelocationChange(final URI fromURI, final URI toURI, final boolean isFile) {\n+\t\tsuper();\n+\t\tthis.fromURI = fromURI;\n+\t\tthis.toURI = toURI;\n+\t\tthis.isFile = isFile;\n+\t}\n+\n+\t@Override\n+\tpublic int hashCode() {\n+\t\tfinal int prime = 31;\n+\t\tint result = 1;\n+\t\tresult = prime * result + ((fromURI == null) ? 0 : fromURI.hashCode());\n+\t\tresult = prime * result + (isFile ? 1231 : 1237);\n+\t\tresult = prime * result + ((toURI == null) ? 0 : toURI.hashCode());\n+\t\treturn result;\n+\t}\n+\n+\t@Override\n+\tpublic boolean equals(Object obj) {\n+\t\tif (this == obj)\n+\t\t\treturn true;\n+\t\tif (obj == null)\n+\t\t\treturn false;\n+\t\tif (getClass() != obj.getClass())\n+\t\t\treturn false;\n+\t\tResourceRelocationChange other = (ResourceRelocationChange) obj;\n+\t\tif (fromURI == null) {\n+\t\t\tif (other.fromURI != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!fromURI.equals(other.fromURI))\n+\t\t\treturn false;\n+\t\tif (isFile != other.isFile)\n+\t\t\treturn false;\n+\t\tif (toURI == null) {\n+\t\t\tif (other.toURI != null)\n+\t\t\t\treturn false;\n+\t\t} else if (!toURI.equals(other.toURI))\n+\t\t\treturn false;\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\tToStringBuilder b = new ToStringBuilder(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTM2MQ=="}, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjg5MDY4OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/BuildListener.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDo0ODoyNlrOGEP_AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDo0ODoyNlrOGEP_AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwOTM3Ng==", "bodyText": "NL", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407109376", "createdAt": "2020-04-11T20:48:26Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/BuildListener.java", "diffHunk": "@@ -1,21 +1,21 @@\n /*******************************************************************************\n- * Copyright (c) 2016 TypeFox GmbH (http://www.typefox.io) and others.\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n  * This program and the accompanying materials are made available under the\n  * terms of the Eclipse Public License 2.0 which is available at\n  * http://www.eclipse.org/legal/epl-2.0.\n  *\n  * SPDX-License-Identifier: EPL-2.0\n  *******************************************************************************/\n-package org.eclipse.xtext.ide.server\n+package org.eclipse.xtext.ide.server;\n \n-import org.eclipse.xtext.resource.IResourceDescription\n-import java.util.List\n+import org.eclipse.xtext.resource.IResourceDescription;\n+import java.util.List;\n \n /**\n  * @author Sven Efftinge - Initial contribution and API\n  */\n-interface BuildListener {\n+public interface BuildListener {\n \t\n-\tdef void afterBuild(List<IResourceDescription.Delta> deltas)\n+\tvoid afterBuild(List<IResourceDescription.Delta> deltas);\n \t\n }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjkwMDIxOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/hover/HoverService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDo1OTo1NFrOGEQDbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMDo1OTo1NFrOGEQDbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExMDUxMA==", "bodyText": "I believe, we don't need this check here. The call to resolveCrossReferencedElementAt(...) on line 59 would return a null value if the XtextResource#getParseResult() is null.", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407110510", "createdAt": "2020-04-11T20:59:54Z", "author": {"login": "nbhusare"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/hover/HoverService.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.hover;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.lsp4j.Hover;\n+import org.eclipse.lsp4j.HoverParams;\n+import org.eclipse.lsp4j.MarkupContent;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.xtext.documentation.IEObjectDocumentationProvider;\n+import org.eclipse.xtext.ide.server.Document;\n+import org.eclipse.xtext.ide.server.DocumentExtensions;\n+import org.eclipse.xtext.nodemodel.ILeafNode;\n+import org.eclipse.xtext.nodemodel.util.NodeModelUtils;\n+import org.eclipse.xtext.parser.IParseResult;\n+import org.eclipse.xtext.resource.EObjectAtOffsetHelper;\n+import org.eclipse.xtext.resource.ILocationInFileProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.util.CancelIndicator;\n+import org.eclipse.xtext.util.ITextRegion;\n+\n+import com.google.common.annotations.Beta;\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @since 2.11\n+ */\n+@Singleton\n+@Beta\n+public class HoverService implements IHoverService {\n+\t@Inject\n+\tprivate DocumentExtensions documentExtensions;\n+\n+\t@Inject\n+\tprivate EObjectAtOffsetHelper eObjectAtOffsetHelper;\n+\n+\t@Inject\n+\tprivate ILocationInFileProvider locationInFileProvider;\n+\n+\t@Inject\n+\tprivate IEObjectDocumentationProvider eObjectDocumentationProvider;\n+\n+\t@Override\n+\tpublic Hover hover(Document document, XtextResource resource, HoverParams params, CancelIndicator cancelIndicator) {\n+\t\tint offset = document.getOffSet(params.getPosition());\n+\t\tHoverContext context = createContext(document, resource, offset);\n+\t\treturn hover(context);\n+\t}\n+\n+\tprotected HoverContext createContext(Document document, XtextResource resource, int offset) {\n+\t\tEObject crossLinkedEObject = eObjectAtOffsetHelper.resolveCrossReferencedElementAt(resource, offset);\n+\t\tif (crossLinkedEObject != null) {\n+\t\t\tif (crossLinkedEObject.eIsProxy()) {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\t\t\tIParseResult parseResult = resource.getParseResult();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b85dbbe48f3b4d8dc2aeeb854331f4189443e84"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzc0NDYwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTozMToxNFrOGEWY3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNToxNToxOVrOGEpv3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNDMwMA==", "bodyText": "Should be a ConcurrentHashMap, otherwise the synchronization attempt in get(String) is completely flawed", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407214300", "createdAt": "2020-04-12T15:31:14Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide;\n+\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.eclipse.xtext.util.DisposableRegistry;\n+import org.eclipse.xtext.util.IDisposable;\n+\n+import com.google.common.collect.Maps;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Provider for executor services. By calling {@link #dispose()} all created executor services are shut down.\n+ * <p>\n+ * In some situations it is necessary to use multiple instances of executor services in order to avoid deadlocks. That\n+ * can be achieved with the {@link #get(String)}\ufffdmethod, which will return a different instance for each key.\n+ */\n+@Singleton\n+public class ExecutorServiceProvider implements Provider<ExecutorService>, IDisposable {\n+\t@Inject\n+\tpublic void registerTo(DisposableRegistry disposableRegistry) {\n+\t\tdisposableRegistry.register(this);\n+\t}\n+\n+\tprivate final Map<String, ExecutorService> instanceCache = Maps.newHashMapWithExpectedSize(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed16fcd87bee2d2f27a8be37d355718284b71c3"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyMDMwNw==", "bodyText": "why? there is a second read in the synchronized", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407220307", "createdAt": "2020-04-12T16:20:35Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide;\n+\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.eclipse.xtext.util.DisposableRegistry;\n+import org.eclipse.xtext.util.IDisposable;\n+\n+import com.google.common.collect.Maps;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Provider for executor services. By calling {@link #dispose()} all created executor services are shut down.\n+ * <p>\n+ * In some situations it is necessary to use multiple instances of executor services in order to avoid deadlocks. That\n+ * can be achieved with the {@link #get(String)}\ufffdmethod, which will return a different instance for each key.\n+ */\n+@Singleton\n+public class ExecutorServiceProvider implements Provider<ExecutorService>, IDisposable {\n+\t@Inject\n+\tpublic void registerTo(DisposableRegistry disposableRegistry) {\n+\t\tdisposableRegistry.register(this);\n+\t}\n+\n+\tprivate final Map<String, ExecutorService> instanceCache = Maps.newHashMapWithExpectedSize(3);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNDMwMA=="}, "originalCommit": {"oid": "aed16fcd87bee2d2f27a8be37d355718284b71c3"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyNjQ3OA==", "bodyText": "Thread A calls get, sees nothing and enters the synchronize block, calls get again, sees still nothing and starts to put things into the map (this is not an atomic operation). While the map is being modified, Thread B calls get and sees an inconsistent map state. This can be avoided by using a ConcurrentHashMap + computeIfAbsent", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407526478", "createdAt": "2020-04-13T15:06:07Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide;\n+\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.eclipse.xtext.util.DisposableRegistry;\n+import org.eclipse.xtext.util.IDisposable;\n+\n+import com.google.common.collect.Maps;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Provider for executor services. By calling {@link #dispose()} all created executor services are shut down.\n+ * <p>\n+ * In some situations it is necessary to use multiple instances of executor services in order to avoid deadlocks. That\n+ * can be achieved with the {@link #get(String)}\ufffdmethod, which will return a different instance for each key.\n+ */\n+@Singleton\n+public class ExecutorServiceProvider implements Provider<ExecutorService>, IDisposable {\n+\t@Inject\n+\tpublic void registerTo(DisposableRegistry disposableRegistry) {\n+\t\tdisposableRegistry.register(this);\n+\t}\n+\n+\tprivate final Map<String, ExecutorService> instanceCache = Maps.newHashMapWithExpectedSize(3);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNDMwMA=="}, "originalCommit": {"oid": "aed16fcd87bee2d2f27a8be37d355718284b71c3"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUzMDcyOQ==", "bodyText": "sry. can we do this in a separate PR. i am not able to think this properly through right now", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407530729", "createdAt": "2020-04-13T15:13:56Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide;\n+\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.eclipse.xtext.util.DisposableRegistry;\n+import org.eclipse.xtext.util.IDisposable;\n+\n+import com.google.common.collect.Maps;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Provider for executor services. By calling {@link #dispose()} all created executor services are shut down.\n+ * <p>\n+ * In some situations it is necessary to use multiple instances of executor services in order to avoid deadlocks. That\n+ * can be achieved with the {@link #get(String)}\ufffdmethod, which will return a different instance for each key.\n+ */\n+@Singleton\n+public class ExecutorServiceProvider implements Provider<ExecutorService>, IDisposable {\n+\t@Inject\n+\tpublic void registerTo(DisposableRegistry disposableRegistry) {\n+\t\tdisposableRegistry.register(this);\n+\t}\n+\n+\tprivate final Map<String, ExecutorService> instanceCache = Maps.newHashMapWithExpectedSize(3);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNDMwMA=="}, "originalCommit": {"oid": "aed16fcd87bee2d2f27a8be37d355718284b71c3"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUzMTQ4NA==", "bodyText": "Agreed.", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407531484", "createdAt": "2020-04-13T15:15:19Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide;\n+\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.eclipse.xtext.util.DisposableRegistry;\n+import org.eclipse.xtext.util.IDisposable;\n+\n+import com.google.common.collect.Maps;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Provider for executor services. By calling {@link #dispose()} all created executor services are shut down.\n+ * <p>\n+ * In some situations it is necessary to use multiple instances of executor services in order to avoid deadlocks. That\n+ * can be achieved with the {@link #get(String)}\ufffdmethod, which will return a different instance for each key.\n+ */\n+@Singleton\n+public class ExecutorServiceProvider implements Provider<ExecutorService>, IDisposable {\n+\t@Inject\n+\tpublic void registerTo(DisposableRegistry disposableRegistry) {\n+\t\tdisposableRegistry.register(this);\n+\t}\n+\n+\tprivate final Map<String, ExecutorService> instanceCache = Maps.newHashMapWithExpectedSize(3);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNDMwMA=="}, "originalCommit": {"oid": "aed16fcd87bee2d2f27a8be37d355718284b71c3"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzc0NDc3OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTozMTozMlrOGEWY9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTozMTozMlrOGEWY9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNDMyNQ==", "bodyText": "instanceCache.computeIfAbsent(..)", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407214325", "createdAt": "2020-04-12T15:31:32Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/ExecutorServiceProvider.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide;\n+\n+import java.util.Map;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import org.eclipse.xtext.util.DisposableRegistry;\n+import org.eclipse.xtext.util.IDisposable;\n+\n+import com.google.common.collect.Maps;\n+import com.google.inject.Inject;\n+import com.google.inject.Provider;\n+import com.google.inject.Singleton;\n+\n+/**\n+ * Provider for executor services. By calling {@link #dispose()} all created executor services are shut down.\n+ * <p>\n+ * In some situations it is necessary to use multiple instances of executor services in order to avoid deadlocks. That\n+ * can be achieved with the {@link #get(String)}\ufffdmethod, which will return a different instance for each key.\n+ */\n+@Singleton\n+public class ExecutorServiceProvider implements Provider<ExecutorService>, IDisposable {\n+\t@Inject\n+\tpublic void registerTo(DisposableRegistry disposableRegistry) {\n+\t\tdisposableRegistry.register(this);\n+\t}\n+\n+\tprivate final Map<String, ExecutorService> instanceCache = Maps.newHashMapWithExpectedSize(3);\n+\n+\t@Override\n+\tpublic ExecutorService get() {\n+\t\treturn get(null);\n+\t}\n+\n+\tpublic ExecutorService get(String key) {\n+\t\tExecutorService result = instanceCache.get(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed16fcd87bee2d2f27a8be37d355718284b71c3"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzc0NTM1OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/AlternativeImageDescription.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTozMjowMVrOGEWZOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTozMjowMVrOGEWZOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNDM5NQ==", "bodyText": "Unnecessary type argument", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407214395", "createdAt": "2020-04-12T15:32:01Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/labels/AlternativeImageDescription.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * Copyright (c) 2015, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.labels;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.List;\n+import org.eclipse.xtext.ide.labels.IImageDescription;\n+import org.eclipse.xtext.xbase.lib.util.ToStringBuilder;\n+\n+public class AlternativeImageDescription implements IImageDescription {\n+\tprivate final List<String> imageIDs;\n+\n+\tpublic AlternativeImageDescription(Iterable<String> imageIDs) {\n+\t\tthis.imageIDs = ImmutableList.<String>copyOf(imageIDs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed16fcd87bee2d2f27a8be37d355718284b71c3"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzc1MTEzOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/RefactoringIssueAcceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTozODoyNFrOGEWcDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTozODoyNFrOGEWcDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNTExNw==", "bodyText": "Unnecessary qualification. Can be Severity", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407215117", "createdAt": "2020-04-12T15:38:24Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/refactoring/RefactoringIssueAcceptor.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.refactoring;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.xtext.util.ITextRegion;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public interface RefactoringIssueAcceptor {\n+\tenum Severity {\n+\t\tFATAL, ERROR, WARNING, INFO, OK;\n+\t}\n+\n+\tvoid add(RefactoringIssueAcceptor.Severity severity, String message, URI uri, ResourceSet resourceSet);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed16fcd87bee2d2f27a8be37d355718284b71c3"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzc1MzYzOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/DocumentExtensions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTo0MTowN1rOGEWdSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNjoyMjo1OFrOGEWxVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNTQzMw==", "bodyText": "region is potentially an ITextRegionWithLineInformation. Maybe worthwhile to use the information rather than computing it again.", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407215433", "createdAt": "2020-04-12T15:41:07Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/DocumentExtensions.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.server;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.EStructuralFeature;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.lsp4j.Location;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.xtext.resource.ILocationInFileProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.util.LineAndColumn;\n+\n+import static org.eclipse.xtext.nodemodel.util.NodeModelUtils.*;\n+import org.eclipse.xtext.nodemodel.ICompositeNode;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @since 2.11\n+ */\n+@Singleton\n+public class DocumentExtensions {\n+\n+\t@Inject\n+\tprivate UriExtensions uriExtensions;\n+\n+\t@Inject\n+\tprivate ILocationInFileProvider locationInFileProvider;\n+\n+\tpublic Position newPosition(Resource resource, int offset) {\n+\t\tif (resource instanceof XtextResource) {\n+\t\t\tICompositeNode rootNode = ((XtextResource) resource).getParseResult().getRootNode();\n+\t\t\tLineAndColumn lineAndColumn = getLineAndColumn(rootNode, offset);\n+\t\t\treturn new Position(lineAndColumn.getLine() - 1, lineAndColumn.getColumn() - 1);\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tpublic Range newRange(Resource resource, int startOffset, int endOffset) {\n+\t\tPosition startPosition = newPosition(resource, startOffset);\n+\t\tif (startPosition == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tPosition endPosition = newPosition(resource, endOffset);\n+\t\tif (endPosition == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn new Range(startPosition, endPosition);\n+\t}\n+\n+\tpublic Range newRange(Resource resource, ITextRegion region) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed16fcd87bee2d2f27a8be37d355718284b71c3"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyMDU2NQ==", "bodyText": "dont get this one. can you elaborate?", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407220565", "createdAt": "2020-04-12T16:22:58Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/DocumentExtensions.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.xtext.ide.server;\n+\n+import com.google.inject.Inject;\n+import com.google.inject.Singleton;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.EStructuralFeature;\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.lsp4j.Location;\n+import org.eclipse.lsp4j.Position;\n+import org.eclipse.lsp4j.Range;\n+import org.eclipse.xtext.resource.ILocationInFileProvider;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.util.LineAndColumn;\n+\n+import static org.eclipse.xtext.nodemodel.util.NodeModelUtils.*;\n+import org.eclipse.xtext.nodemodel.ICompositeNode;\n+\n+/**\n+ * @author kosyakov - Initial contribution and API\n+ * @since 2.11\n+ */\n+@Singleton\n+public class DocumentExtensions {\n+\n+\t@Inject\n+\tprivate UriExtensions uriExtensions;\n+\n+\t@Inject\n+\tprivate ILocationInFileProvider locationInFileProvider;\n+\n+\tpublic Position newPosition(Resource resource, int offset) {\n+\t\tif (resource instanceof XtextResource) {\n+\t\t\tICompositeNode rootNode = ((XtextResource) resource).getParseResult().getRootNode();\n+\t\t\tLineAndColumn lineAndColumn = getLineAndColumn(rootNode, offset);\n+\t\t\treturn new Position(lineAndColumn.getLine() - 1, lineAndColumn.getColumn() - 1);\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tpublic Range newRange(Resource resource, int startOffset, int endOffset) {\n+\t\tPosition startPosition = newPosition(resource, startOffset);\n+\t\tif (startPosition == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tPosition endPosition = newPosition(resource, endOffset);\n+\t\tif (endPosition == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn new Range(startPosition, endPosition);\n+\t}\n+\n+\tpublic Range newRange(Resource resource, ITextRegion region) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNTQzMw=="}, "originalCommit": {"oid": "aed16fcd87bee2d2f27a8be37d355718284b71c3"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzc1NjE3OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTo0MzozMVrOGEWeew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTo0MzozMVrOGEWeew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNTczOQ==", "bodyText": "Indentation?", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407215739", "createdAt": "2020-04-12T15:43:31Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.rename;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.jsonrpc.ResponseErrorException;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseError;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseErrorCode;\n+import org.eclipse.xtext.ide.refactoring.RefactoringIssueAcceptor;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ServerRefactoringIssueAcceptor implements RefactoringIssueAcceptor {\n+\tpublic static class Issue {\n+\t\tprivate RefactoringIssueAcceptor.Severity severity;\n+\n+\t\tprivate String message;\n+\t}\n+\n+\tprivate List<ServerRefactoringIssueAcceptor.Issue> issues = new ArrayList<>();\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI uri, ResourceSet resourceSet) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI resourceUri) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, final EObject element) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, EObject element, ITextRegion region) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Exception exc, Logger log) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Object... params) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\tissues.add(issue);\n+\t}\n+\n+\tprotected boolean addIssue(RefactoringIssueAcceptor.Severity severity, String message) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\treturn issues.add(issue);\n+\t}\n+\n+\tpublic RefactoringIssueAcceptor.Severity getMaximumSeverity() {\n+\t\tif (issues.size() > 0) {\n+\t\t\tServerRefactoringIssueAcceptor.Issue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);\n+\t\t\tRefactoringIssueAcceptor.Severity severity = null;\n+\t\t\tif (minBySeverity != null) {\n+\t\t\t\tseverity = minBySeverity.severity;\n+\t\t\t}\n+\t\t\treturn severity;\n+\t\t} else {\n+\t\t\treturn RefactoringIssueAcceptor.Severity.OK;\n+\t\t}\n+\t}\n+\n+\tpublic ResponseError toResponseError() {\n+\t\t\tfinal RefactoringIssueAcceptor.Severity maxSeverity = getMaximumSeverity();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed16fcd87bee2d2f27a8be37d355718284b71c3"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzc1Njg5OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTo0NDowMVrOGEWe0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTo0NDowMVrOGEWe0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNTgyNg==", "bodyText": "Unnecessary final param", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407215826", "createdAt": "2020-04-12T15:44:01Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.rename;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.jsonrpc.ResponseErrorException;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseError;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseErrorCode;\n+import org.eclipse.xtext.ide.refactoring.RefactoringIssueAcceptor;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ServerRefactoringIssueAcceptor implements RefactoringIssueAcceptor {\n+\tpublic static class Issue {\n+\t\tprivate RefactoringIssueAcceptor.Severity severity;\n+\n+\t\tprivate String message;\n+\t}\n+\n+\tprivate List<ServerRefactoringIssueAcceptor.Issue> issues = new ArrayList<>();\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI uri, ResourceSet resourceSet) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI resourceUri) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, final EObject element) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, EObject element, ITextRegion region) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Exception exc, Logger log) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Object... params) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\tissues.add(issue);\n+\t}\n+\n+\tprotected boolean addIssue(RefactoringIssueAcceptor.Severity severity, String message) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\treturn issues.add(issue);\n+\t}\n+\n+\tpublic RefactoringIssueAcceptor.Severity getMaximumSeverity() {\n+\t\tif (issues.size() > 0) {\n+\t\t\tServerRefactoringIssueAcceptor.Issue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);\n+\t\t\tRefactoringIssueAcceptor.Severity severity = null;\n+\t\t\tif (minBySeverity != null) {\n+\t\t\t\tseverity = minBySeverity.severity;\n+\t\t\t}\n+\t\t\treturn severity;\n+\t\t} else {\n+\t\t\treturn RefactoringIssueAcceptor.Severity.OK;\n+\t\t}\n+\t}\n+\n+\tpublic ResponseError toResponseError() {\n+\t\t\tfinal RefactoringIssueAcceptor.Severity maxSeverity = getMaximumSeverity();\n+\t\t\tResponseError responseError = new ResponseError();\n+\t\t\tresponseError.setMessage(getMessageBySeverity(maxSeverity));\n+\t\t\tresponseError.setCode(getCodeBySeverity(maxSeverity));\n+\t\t\tList<Issue> bySeverity = IterableExtensions.sortBy(issues, (i) -> i.severity);\n+\t\t\tList<String> messages = ListExtensions.map(ListExtensions.reverse(bySeverity), (i) -> i.message);\n+\t\t\tresponseError.setData(IterableExtensions.join(messages, \"\\n\"));\n+\t\t\treturn responseError;\n+\t}\n+\n+\t/**\n+\t * @since 2.22\n+\t */\n+\tprotected int getCodeBySeverity(final RefactoringIssueAcceptor.Severity maxSeverity) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed16fcd87bee2d2f27a8be37d355718284b71c3"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzc1NzI1OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTo0NDoyNFrOGEWfAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTo0NDoyNFrOGEWfAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNTg3Mg==", "bodyText": "Unnecessary qualification I guess.", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407215872", "createdAt": "2020-04-12T15:44:24Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.rename;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.jsonrpc.ResponseErrorException;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseError;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseErrorCode;\n+import org.eclipse.xtext.ide.refactoring.RefactoringIssueAcceptor;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ServerRefactoringIssueAcceptor implements RefactoringIssueAcceptor {\n+\tpublic static class Issue {\n+\t\tprivate RefactoringIssueAcceptor.Severity severity;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed16fcd87bee2d2f27a8be37d355718284b71c3"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzc1NzcyOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTo0NTowMFrOGEWfQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNTowOToyMFrOGEpjDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNTkzOA==", "bodyText": "unnecessary local var", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407215938", "createdAt": "2020-04-12T15:45:00Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.rename;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.jsonrpc.ResponseErrorException;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseError;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseErrorCode;\n+import org.eclipse.xtext.ide.refactoring.RefactoringIssueAcceptor;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ServerRefactoringIssueAcceptor implements RefactoringIssueAcceptor {\n+\tpublic static class Issue {\n+\t\tprivate RefactoringIssueAcceptor.Severity severity;\n+\n+\t\tprivate String message;\n+\t}\n+\n+\tprivate List<ServerRefactoringIssueAcceptor.Issue> issues = new ArrayList<>();\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI uri, ResourceSet resourceSet) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI resourceUri) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, final EObject element) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, EObject element, ITextRegion region) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Exception exc, Logger log) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Object... params) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\tissues.add(issue);\n+\t}\n+\n+\tprotected boolean addIssue(RefactoringIssueAcceptor.Severity severity, String message) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\treturn issues.add(issue);\n+\t}\n+\n+\tpublic RefactoringIssueAcceptor.Severity getMaximumSeverity() {\n+\t\tif (issues.size() > 0) {\n+\t\t\tServerRefactoringIssueAcceptor.Issue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);\n+\t\t\tRefactoringIssueAcceptor.Severity severity = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed16fcd87bee2d2f27a8be37d355718284b71c3"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyMTIxMw==", "bodyText": "?", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407221213", "createdAt": "2020-04-12T16:28:03Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.rename;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.jsonrpc.ResponseErrorException;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseError;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseErrorCode;\n+import org.eclipse.xtext.ide.refactoring.RefactoringIssueAcceptor;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ServerRefactoringIssueAcceptor implements RefactoringIssueAcceptor {\n+\tpublic static class Issue {\n+\t\tprivate RefactoringIssueAcceptor.Severity severity;\n+\n+\t\tprivate String message;\n+\t}\n+\n+\tprivate List<ServerRefactoringIssueAcceptor.Issue> issues = new ArrayList<>();\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI uri, ResourceSet resourceSet) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI resourceUri) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, final EObject element) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, EObject element, ITextRegion region) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Exception exc, Logger log) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Object... params) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\tissues.add(issue);\n+\t}\n+\n+\tprotected boolean addIssue(RefactoringIssueAcceptor.Severity severity, String message) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\treturn issues.add(issue);\n+\t}\n+\n+\tpublic RefactoringIssueAcceptor.Severity getMaximumSeverity() {\n+\t\tif (issues.size() > 0) {\n+\t\t\tServerRefactoringIssueAcceptor.Issue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);\n+\t\t\tRefactoringIssueAcceptor.Severity severity = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNTkzOA=="}, "originalCommit": {"oid": "aed16fcd87bee2d2f27a8be37d355718284b71c3"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyODIwNA==", "bodyText": "since the issues iterable is not empty, minBySeverity cannot be null.\nCould be simplified to  return IterableExtensions.minBy(..).severity", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407528204", "createdAt": "2020-04-13T15:09:20Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.rename;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.jsonrpc.ResponseErrorException;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseError;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseErrorCode;\n+import org.eclipse.xtext.ide.refactoring.RefactoringIssueAcceptor;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ServerRefactoringIssueAcceptor implements RefactoringIssueAcceptor {\n+\tpublic static class Issue {\n+\t\tprivate RefactoringIssueAcceptor.Severity severity;\n+\n+\t\tprivate String message;\n+\t}\n+\n+\tprivate List<ServerRefactoringIssueAcceptor.Issue> issues = new ArrayList<>();\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI uri, ResourceSet resourceSet) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI resourceUri) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, final EObject element) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, EObject element, ITextRegion region) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Exception exc, Logger log) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Object... params) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\tissues.add(issue);\n+\t}\n+\n+\tprotected boolean addIssue(RefactoringIssueAcceptor.Severity severity, String message) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\treturn issues.add(issue);\n+\t}\n+\n+\tpublic RefactoringIssueAcceptor.Severity getMaximumSeverity() {\n+\t\tif (issues.size() > 0) {\n+\t\t\tServerRefactoringIssueAcceptor.Issue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);\n+\t\t\tRefactoringIssueAcceptor.Severity severity = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNTkzOA=="}, "originalCommit": {"oid": "aed16fcd87bee2d2f27a8be37d355718284b71c3"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzc1ODI4OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTo0NTo0MVrOGEWfhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNTowNzowNFrOGEpePA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNjAwNw==", "bodyText": "Maybe use Ordering.min instead.", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407216007", "createdAt": "2020-04-12T15:45:41Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.rename;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.jsonrpc.ResponseErrorException;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseError;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseErrorCode;\n+import org.eclipse.xtext.ide.refactoring.RefactoringIssueAcceptor;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ServerRefactoringIssueAcceptor implements RefactoringIssueAcceptor {\n+\tpublic static class Issue {\n+\t\tprivate RefactoringIssueAcceptor.Severity severity;\n+\n+\t\tprivate String message;\n+\t}\n+\n+\tprivate List<ServerRefactoringIssueAcceptor.Issue> issues = new ArrayList<>();\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI uri, ResourceSet resourceSet) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI resourceUri) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, final EObject element) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, EObject element, ITextRegion region) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Exception exc, Logger log) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Object... params) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\tissues.add(issue);\n+\t}\n+\n+\tprotected boolean addIssue(RefactoringIssueAcceptor.Severity severity, String message) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\treturn issues.add(issue);\n+\t}\n+\n+\tpublic RefactoringIssueAcceptor.Severity getMaximumSeverity() {\n+\t\tif (issues.size() > 0) {\n+\t\t\tServerRefactoringIssueAcceptor.Issue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed16fcd87bee2d2f27a8be37d355718284b71c3"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyMTEyMQ==", "bodyText": "?", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407221121", "createdAt": "2020-04-12T16:27:21Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.rename;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.jsonrpc.ResponseErrorException;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseError;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseErrorCode;\n+import org.eclipse.xtext.ide.refactoring.RefactoringIssueAcceptor;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ServerRefactoringIssueAcceptor implements RefactoringIssueAcceptor {\n+\tpublic static class Issue {\n+\t\tprivate RefactoringIssueAcceptor.Severity severity;\n+\n+\t\tprivate String message;\n+\t}\n+\n+\tprivate List<ServerRefactoringIssueAcceptor.Issue> issues = new ArrayList<>();\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI uri, ResourceSet resourceSet) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI resourceUri) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, final EObject element) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, EObject element, ITextRegion region) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Exception exc, Logger log) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Object... params) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\tissues.add(issue);\n+\t}\n+\n+\tprotected boolean addIssue(RefactoringIssueAcceptor.Severity severity, String message) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\treturn issues.add(issue);\n+\t}\n+\n+\tpublic RefactoringIssueAcceptor.Severity getMaximumSeverity() {\n+\t\tif (issues.size() > 0) {\n+\t\t\tServerRefactoringIssueAcceptor.Issue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNjAwNw=="}, "originalCommit": {"oid": "aed16fcd87bee2d2f27a8be37d355718284b71c3"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUyNjk3Mg==", "bodyText": "Keep it as is :)", "url": "https://github.com/eclipse/xtext-core/pull/1442#discussion_r407526972", "createdAt": "2020-04-13T15:07:04Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/rename/ServerRefactoringIssueAcceptor.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/**\n+ * Copyright (c) 2017, 2020 TypeFox GmbH (http://www.typefox.io) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.ide.server.rename;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.apache.log4j.Logger;\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.resource.ResourceSet;\n+import org.eclipse.lsp4j.jsonrpc.ResponseErrorException;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseError;\n+import org.eclipse.lsp4j.jsonrpc.messages.ResponseErrorCode;\n+import org.eclipse.xtext.ide.refactoring.RefactoringIssueAcceptor;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.ListExtensions;\n+\n+/**\n+ * @author koehnlein - Initial contribution and API\n+ * @since 2.13\n+ */\n+public class ServerRefactoringIssueAcceptor implements RefactoringIssueAcceptor {\n+\tpublic static class Issue {\n+\t\tprivate RefactoringIssueAcceptor.Severity severity;\n+\n+\t\tprivate String message;\n+\t}\n+\n+\tprivate List<ServerRefactoringIssueAcceptor.Issue> issues = new ArrayList<>();\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI uri, ResourceSet resourceSet) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, URI resourceUri) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, final EObject element) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, EObject element, ITextRegion region) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Exception exc, Logger log) {\n+\t\taddIssue(severity, message);\n+\t}\n+\n+\t@Override\n+\tpublic void add(RefactoringIssueAcceptor.Severity severity, String message, Object... params) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\tissues.add(issue);\n+\t}\n+\n+\tprotected boolean addIssue(RefactoringIssueAcceptor.Severity severity, String message) {\n+\t\tServerRefactoringIssueAcceptor.Issue issue = new ServerRefactoringIssueAcceptor.Issue();\n+\t\tissue.severity = severity;\n+\t\tissue.message = message;\n+\t\treturn issues.add(issue);\n+\t}\n+\n+\tpublic RefactoringIssueAcceptor.Severity getMaximumSeverity() {\n+\t\tif (issues.size() > 0) {\n+\t\t\tServerRefactoringIssueAcceptor.Issue minBySeverity = IterableExtensions.minBy(issues, (i) -> i.severity);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNjAwNw=="}, "originalCommit": {"oid": "aed16fcd87bee2d2f27a8be37d355718284b71c3"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1080, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}