{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NjU0MjE4", "number": 1631, "title": "[#1625] Added a lot of tests and a few fixes to the formatter.", "bodyText": "Signed-off-by: Arne Deutsch Arne.Deutsch@itemis.de", "createdAt": "2020-11-27T14:49:35Z", "url": "https://github.com/eclipse/xtext-core/pull/1631", "merged": true, "mergeCommit": {"oid": "7dae1773a9fc97d71695e947c8381b7f3d097f71"}, "closed": true, "closedAt": "2020-11-30T08:10:46Z", "author": {"login": "ArneDeutsch"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgothOAH2gAyNTI4NjU0MjE4OjJjMmQ1Yjk4N2U2OGM1NDE0M2QyOGFiZWZiMGJiZWFlNDE0NDhjZTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdhg0GGAFqTU0MDY3MzA3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2c2d5b987e68c54143d28abefb0bbeae41448ce7", "author": {"user": {"login": "ArneDeutsch", "name": "Arne Deutsch"}}, "url": "https://github.com/eclipse/xtext-core/commit/2c2d5b987e68c54143d28abefb0bbeae41448ce7", "committedDate": "2020-11-27T14:48:44Z", "message": "[#1625] Added a lot of tests and a few fixes to the formatter.\n\nSigned-off-by: Arne Deutsch <Arne.Deutsch@itemis.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwMDgzNzkw", "url": "https://github.com/eclipse/xtext-core/pull/1631#pullrequestreview-540083790", "createdAt": "2020-11-27T16:16:57Z", "commit": {"oid": "2c2d5b987e68c54143d28abefb0bbeae41448ce7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjoxNjo1N1rOH7DaQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNjoxNjo1N1rOH7DaQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY4MzkwNQ==", "bodyText": "wonder if simply using a real tab makes this more readable", "url": "https://github.com/eclipse/xtext-core/pull/1631#discussion_r531683905", "createdAt": "2020-11-27T16:16:57Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.tests/src/org/eclipse/xtext/formatting2/internal/JavaFormatterGrammarTest.java", "diffHunk": "@@ -181,7 +181,223 @@ public void conjunctedGuardExpressions() {\n \t\t\t\t);\n \t\t// @formatter:on\n \t}\n-\t\n+\n+\t@Test\n+\tpublic void bug287941TestLanguage() {\n+\t\t// @formatter:off\n+\t\tassertFormattedGrammar(\n+\t\t\t\t\"WhereEntry returns WhereEntry:\" + NL +\n+\t\t\t\tTAB + \"AndWhereEntry ({OrWhereEntry.entries+=current} \" + NL +\n+\t\t\t\tTAB + TAB + \"(\\\"or\\\" entries+=AndWhereEntry)+)?\" + NL +\n+\t\t\t\t\";\"\n+\t\t\t\t,\n+\t\t\t\t\"WhereEntry returns WhereEntry:\" + NL +\n+\t\t\t\tTAB + \"AndWhereEntry ({OrWhereEntry.entries+=current}\" + NL +\n+\t\t\t\tTAB + \"(\\\"or\\\" entries+=AndWhereEntry)+)?;\"\n+\t\t\t\t);\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\tpublic void codetemplates() {\n+\t\t// @formatter:off\n+\t\tassertFormattedGrammar(\n+\t\t\t\t\"Codetemplate:\" + NL +\n+\t\t\t\t\"  name=ValidID '(' id=ID ',' description = STRING ')' 'for' \" + NL +\n+\t\t\t\t\"        (context=[xtext::AbstractRule|ValidID] | keywordContext=STRING) \" + NL +\n+\t\t\t\t\"    body = TemplateBodyWithQuotes\" + NL +\n+\t\t\t\t\"  ; \"\n+\t\t\t\t,\n+\t\t\t\t\"Codetemplate:\" + NL +\n+\t\t\t\tTAB + \"name=ValidID '(' id=ID ',' description=STRING ')' 'for'\" + NL +\n+\t\t\t\tTAB + \"(context=[xtext::AbstractRule|ValidID] | keywordContext=STRING)\" + NL +\n+\t\t\t\tTAB + \"body=TemplateBodyWithQuotes;\"\n+\t\t\t\t);\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\tpublic void bug297105TestLanguage() {\n+\t\t// @formatter:off\n+\t\tassertFormattedGrammar(\n+\t\t\t\t\"Real hidden(): INT ? '.' (EXT_INT | INT);\"\n+\t\t\t\t,\n+\t\t\t\t\"Real hidden():\" + NL +\n+\t\t\t\tTAB + \"INT? '.' (EXT_INT | INT);\"\n+\t\t\t\t);\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\tpublic void xtextGrammarTestLanguage() {\n+\t\t// @formatter:off\n+\t\tassertFormattedGrammar(\n+\t\t\t\t\"ParserRule :\" + NL +\n+\t\t\t\t\"(\" + NL +\n+\t\t\t\tTAB +   \"  ^fragment?='fragment' RuleNameAndParams (wildcard?='*' | ReturnsClause?) \" + NL +\n+\t\t\t\tTAB + \"| RuleNameAndParams ReturnsClause?\" + NL +\n+\t\t\t\tTAB + \")\" + NL +\n+\t\t\t\tTAB + \"HiddenClause? ':'\" + NL +\n+\t\t\t\t\"   \" + TAB + \"alternatives=Alternatives   \" + NL +\n+\t\t\t\t\"    ';'\" + NL +\n+\t\t\t\t\";\"\n+\t\t\t\t,\n+\t\t\t\t\"ParserRule:\" + NL +\n+\t\t\t\tTAB + \"(^fragment?='fragment' RuleNameAndParams (wildcard?='*' | ReturnsClause?)\" + NL +\n+\t\t\t\tTAB + \"| RuleNameAndParams ReturnsClause?)\" + NL +\n+\t\t\t\tTAB + \"HiddenClause? ':'\" + NL +\n+\t\t\t\tTAB + \"alternatives=Alternatives\" + NL +\n+\t\t\t\tTAB + \"';';\"\n+\t\t\t\t);\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\tpublic void qualifiedTypes() {\n+\t\t// @formatter:off\n+\t\tassertFormattedGrammar(\n+\t\t\t\t\"AType returns root::AType:\" + NL +\n+\t\t\t\tTAB + \"'foo' {root::AType};\"\n+\t\t\t\t,\n+\t\t\t\t\"AType returns root::AType:\" + NL +\n+\t\t\t\tTAB + \"'foo' {root::AType};\"\n+\t\t\t\t);\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\tpublic void qualifiedTypes2() {\n+\t\t// @formatter:off\n+\t\tassertFormattedGrammar(\n+\t\t\t\t\"AType returns root :: AType :\" + NL +\n+\t\t\t\tTAB + \"'foo' { root :: AType };\"\n+\t\t\t\t,\n+\t\t\t\t\"AType returns root::AType:\" + NL +\n+\t\t\t\tTAB + \"'foo' {root::AType};\"\n+\t\t\t\t);\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\tpublic void pureXbase() {\n+\t\t// @formatter:off\n+\t\tassertFormattedGrammar(\n+\t\t\t\t\"@Override \" + NL +\n+\t\t\t\t\"XAssignment returns xbase::XExpression :\" + NL +\n+\t\t\t\t\"\t{xbase::XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |\" + NL +\n+\t\t\t\t\"\tXConditionalExpression (\" + NL +\n+\t\t\t\t\"\t\t=>({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment\" + NL +\n+\t\t\t\t\"\t)?;\"\n+\t\t\t\t,\n+\t\t\t\t\"@Override\" + NL +\n+\t\t\t\t\"XAssignment returns xbase::XExpression:\" + NL +\n+\t\t\t\tTAB + \"{xbase::XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |\" + NL +\n+\t\t\t\tTAB + \"XConditionalExpression (=>({xbase::XBinaryOperation.leftOperand=current}\" + NL +\n+\t\t\t\tTAB + \"feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;\"\n+\t\t\t\t);\n+\t\t// @formatter:on\n+\t}\n+\n+\t@Test\n+\tpublic void pureXbase2() {\n+\t\t// @formatter:off\n+\t\tassertFormattedGrammar(\n+\t\t\t\t\"XClosure returns XExpression:\" + NL +\n+\t\t\t\t\"\t=>({XClosure}\" + NL +\n+\t\t\t\t\"\t'[')\" + NL +\n+\t\t\t\t\"\t\t=>((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?='|')?\" + NL +\n+\t\t\t\t\"\t\texpression=XExpressionInClosure\" + NL +\n+\t\t\t\t\"\t']';\"\n+\t\t\t\t,\n+\t\t\t\t\"XClosure returns XExpression:\" + NL +\n+\t\t\t\tTAB + \"=>({XClosure}\" + NL +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c2d5b987e68c54143d28abefb0bbeae41448ce7"}, "originalPosition": 152}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNjczMDc1", "url": "https://github.com/eclipse/xtext-core/pull/1631#pullrequestreview-540673075", "createdAt": "2020-11-30T08:10:36Z", "commit": {"oid": "2c2d5b987e68c54143d28abefb0bbeae41448ce7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4696, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}