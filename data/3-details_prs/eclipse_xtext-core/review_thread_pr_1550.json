{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzODUyNzgx", "number": 1550, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwODoxNzo1OFrOEVuBDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwODoxNzo1OFrOEVuBDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjA5NDg1OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext/src/org/eclipse/xtext/generator/trace/node/TracedAccessorsProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwODoxNzo1OFrOG8oV_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwODoxNzo1OFrOG8oV_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyODczMg==", "bodyText": "It's a little sad that it's a different terminology here and above (name vs signature). But it is how it is.\nI'd really prefer a small refactoring towards FluentIterable to have a better flow when reading the code.\nEvent though it does not save much space:\nIterableExtensions.map(\n\tIterableExtensions.sortBy(IterableExtensions.filter(f.getDeclaredMethods(),\n\t\tit -> it.getSimpleName().startsWith(\"create\")\n\t\t\t&& IterableExtensions.isEmpty(it.getParameters())), MethodDeclaration::getSimpleName)\n\nvs\nFluentIterable.from(f.getDeclaredMethods())\n\t.filter(it-> it.getSimpleName().startsWith(\"create\") && isEmpty(it.getParameters()))\n\t.map(MethodDeclaration::getReturnType)\n\t.toSortedList(Comparator.comparing(TypeReference::getSimpleName))", "url": "https://github.com/eclipse/xtext-core/pull/1550#discussion_r466228732", "createdAt": "2020-08-06T08:17:58Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext/src/org/eclipse/xtext/generator/trace/node/TracedAccessorsProcessor.java", "diffHunk": "@@ -49,14 +50,14 @@ public void doTransform(MutableClassDeclaration annotatedClass, @Extension Trans\n \t\tfor (InterfaceDeclaration f : Iterables.filter(ListExtensions.map(Arrays.asList(factories), it -> it.getType()),\n \t\t\t\tInterfaceDeclaration.class)) {\n \t\t\tfor (TypeReference t : IterableExtensions.map(\n-\t\t\t\t\tIterableExtensions\n+\t\t\t\t\tIterableExtensions.sortBy(IterableExtensions\n \t\t\t\t\t\t\t.filter(f.getDeclaredMethods(),\n \t\t\t\t\t\t\t\t\tit -> it.getSimpleName().startsWith(\"create\")\n-\t\t\t\t\t\t\t\t\t\t\t&& IterableExtensions.isEmpty(it.getParameters())),\n+\t\t\t\t\t\t\t\t\t\t\t&& IterableExtensions.isEmpty(it.getParameters())), MethodDeclaration::getSimpleName),\n \t\t\t\t\tit -> it.getReturnType())) {\n-\t\t\t\tfor (ResolvedMethod getter : IterableExtensions.filter(\n+\t\t\t\tfor (ResolvedMethod getter : IterableExtensions.sortBy(IterableExtensions.filter(\n \t\t\t\t\t\tIterableExtensions.filter(t.getAllResolvedMethods(), it -> isSupportedGetter(it)),\n-\t\t\t\t\t\tit -> !iterableType.isAssignableFrom(it.getDeclaration().getReturnType()))) {\n+\t\t\t\t\t\tit -> !iterableType.isAssignableFrom(it.getDeclaration().getReturnType())), ResolvedMethod::getSimpleSignature)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6f8fdb4b053f174e7b08bd745ffb7607a4c6b15"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 948, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}