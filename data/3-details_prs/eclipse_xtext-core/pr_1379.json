{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNzYyMzQy", "number": 1379, "title": "[#622] Improved concurrency behavior of RequestManager", "bodyText": "The request manager was prone to races when a runnable was already in progress and a new write request was submitted in parallel. The runnable future would immediately be considered to be cancelled but the runnable would still continue to be processed.\nAlso there was a chance of deadlocks when a custom LSP command used the request manager to submit a modifying write request.\ncloses #622", "createdAt": "2020-02-08T21:52:14Z", "url": "https://github.com/eclipse/xtext-core/pull/1379", "merged": true, "mergeCommit": {"oid": "93b20b37947720ac6ac3d69843a03b7a8436d516"}, "closed": true, "closedAt": "2020-02-24T08:18:49Z", "author": {"login": "szarnekow"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDNYkBgFqTM1NjQ3Mjk1NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHI2AfgBqjMwNjM0MTY5ODY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NDcyOTU1", "url": "https://github.com/eclipse/xtext-core/pull/1379#pullrequestreview-356472955", "createdAt": "2020-02-11T08:23:27Z", "commit": {"oid": "a3fc1defb8d306a800363ff739c3f23c86ec262f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoyMzoyN1rOFoAQyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoyMzoyN1rOFoAQyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ5MTY1OQ==", "bodyText": "the may interrup is ignored by intention?", "url": "https://github.com/eclipse/xtext-core/pull/1379#discussion_r377491659", "createdAt": "2020-02-11T08:23:27Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/concurrent/AbstractRequest.java", "diffHunk": "@@ -10,17 +10,32 @@\n \n import java.util.concurrent.CompletableFuture;\n \n+import org.apache.log4j.Logger;\n+\n /**\n  * Abstract base type for read and write requests.\n  * \n  * @author kosyakov - Initial contribution and API\n  * @since 2.11\n  */\n public abstract class AbstractRequest<V> implements Runnable, Cancellable {\n+\t\n+\tprivate class ResultFuture extends CompletableFuture<V> {\n+\t\t@Override\n+\t\tpublic boolean cancel(boolean mayInterruptIfRunning) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3fc1defb8d306a800363ff739c3f23c86ec262f"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NDczMTI1", "url": "https://github.com/eclipse/xtext-core/pull/1379#pullrequestreview-356473125", "createdAt": "2020-02-11T08:23:50Z", "commit": {"oid": "a3fc1defb8d306a800363ff739c3f23c86ec262f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoyMzo1MVrOFoARXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoyMzo1MVrOFoARXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ5MTgwNA==", "bodyText": "package private by intention?", "url": "https://github.com/eclipse/xtext-core/pull/1379#discussion_r377491804", "createdAt": "2020-02-11T08:23:51Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/concurrent/AbstractRequest.java", "diffHunk": "@@ -34,19 +49,42 @@\n \n \tprotected AbstractRequest(RequestManager requestManager) {\n \t\tthis.requestManager = requestManager;\n-\t\tthis.result = new CompletableFuture<>();\n-\t\tthis.cancelIndicator = new RequestCancelIndicator(this.result);\n+\t\tthis.result = new ResultFuture();\n+\t\tthis.cancelIndicator = new RequestCancelIndicator(this);\n+\t}\n+\n+\tvoid cancelResult() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3fc1defb8d306a800363ff739c3f23c86ec262f"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NDc0Njcz", "url": "https://github.com/eclipse/xtext-core/pull/1379#pullrequestreview-356474673", "createdAt": "2020-02-11T08:27:01Z", "commit": {"oid": "a3fc1defb8d306a800363ff739c3f23c86ec262f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoyNzowMVrOFoAWDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODoyNzowMVrOFoAWDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ5MzAwNA==", "bodyText": "no logging here?", "url": "https://github.com/eclipse/xtext-core/pull/1379#discussion_r377493004", "createdAt": "2020-02-11T08:27:01Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/concurrent/WriteRequest.java", "diffHunk": "@@ -42,18 +42,23 @@ public void run() {\n \t\ttry {\n \t\t\tprevious.join();\n \t\t} catch (Throwable t) {\n-\t\t\t// We are not interested in results, only to make sure that all previous requests are finished before running next write request.\n+\t\t\tif (!requestManager.isCancelException(t)) {\n+\t\t\t\tLOG.error(\"Error during request: \", t);\n+\t\t\t}\n \t\t}\n \t\ttry {\n \t\t\tU intermediateResult = this.nonCancellable.apply();\n \t\t\tcancelIndicator.checkCanceled();\n-\t\t\tresult.complete(cancellable.apply(cancelIndicator, intermediateResult));\n+\t\t\tV writeResult = cancellable.apply(cancelIndicator, intermediateResult);\n+\t\t\tcomplete(writeResult);\n \t\t} catch (Throwable t) {\n-\t\t\tif (!requestManager.isCancelException(t)) {\n-\t\t\t\tLOG.error(\"Error during request: \", t);\n-\t\t\t}\n-\t\t\tresult.completeExceptionally(t);\n+\t\t\tcompleteExceptionally(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3fc1defb8d306a800363ff739c3f23c86ec262f"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NDc4MDcx", "url": "https://github.com/eclipse/xtext-core/pull/1379#pullrequestreview-356478071", "createdAt": "2020-02-11T08:34:09Z", "commit": {"oid": "a3fc1defb8d306a800363ff739c3f23c86ec262f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODozNDowOVrOFoAgVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODozNDowOVrOFoAgVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ5NTYzOQ==", "bodyText": "We could also make the fields protected. What do you think?", "url": "https://github.com/eclipse/xtext-core/pull/1379#discussion_r377495639", "createdAt": "2020-02-11T08:34:09Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/concurrent/RequestManager.java", "diffHunk": "@@ -51,18 +51,26 @@ public void shutdown() {\n \t\tparallel.shutdown();\n \t\tcancel();\n \t}\n+\t\n+\tprotected void setParallel(ExecutorService parallel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3fc1defb8d306a800363ff739c3f23c86ec262f"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NDc4NTgw", "url": "https://github.com/eclipse/xtext-core/pull/1379#pullrequestreview-356478580", "createdAt": "2020-02-11T08:35:06Z", "commit": {"oid": "a3fc1defb8d306a800363ff739c3f23c86ec262f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODozNTowNlrOFoAh3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODozNTowNlrOFoAh3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ5NjAzMA==", "bodyText": "unnecessary space.", "url": "https://github.com/eclipse/xtext-core/pull/1379#discussion_r377496030", "createdAt": "2020-02-11T08:35:06Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.testing/src/org/eclipse/xtext/testing/AbstractLanguageServerTest.xtend", "diffHunk": "@@ -134,7 +134,7 @@ abstract class AbstractLanguageServerTest implements Endpoint {\n \t\tModules2.mixin(new ServerModule, [\n \t\t\tbind(RequestManager).toInstance(new RequestManager() {\n \n-\t\t\t\toverride <V> runRead((CancelIndicator)=>V request) {\n+\t\t\t\toverride synchronized < V> runRead((CancelIndicator)=>V request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3fc1defb8d306a800363ff739c3f23c86ec262f"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3fc1defb8d306a800363ff739c3f23c86ec262f", "author": {"user": {"login": "szarnekow", "name": "Sebastian Zarnekow"}}, "url": "https://github.com/eclipse/xtext-core/commit/a3fc1defb8d306a800363ff739c3f23c86ec262f", "committedDate": "2020-02-10T10:01:25Z", "message": "Avoid warnings in test class: add synchronized modifier"}, "afterCommit": {"oid": "b5cea66092538d28b26d8d764c2bdd6f6f169cb9", "author": {"user": {"login": "szarnekow", "name": "Sebastian Zarnekow"}}, "url": "https://github.com/eclipse/xtext-core/commit/b5cea66092538d28b26d8d764c2bdd6f6f169cb9", "committedDate": "2020-02-11T11:03:51Z", "message": "Avoid warnings in test class: add synchronized modifier"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODQ3OTc0", "url": "https://github.com/eclipse/xtext-core/pull/1379#pullrequestreview-359847974", "createdAt": "2020-02-17T16:16:06Z", "commit": {"oid": "808ed37b22dffbf2a02a728be754b90b37e5e16f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjoxNjowNlrOFqp2gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMDo0ODo0MlrOFq9uUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3MDIxMA==", "bodyText": "Peculiar: xtend-gen code is not very efficient.", "url": "https://github.com/eclipse/xtext-core/pull/1379#discussion_r380270210", "createdAt": "2020-02-17T16:16:06Z", "author": {"login": "mark-christiaens"}, "path": "org.eclipse.xtext.testing/xtend-gen/org/eclipse/xtext/testing/AbstractLanguageServerTest.java", "diffHunk": "@@ -137,6 +138,62 @@\n @FinalFieldsConstructor\n @SuppressWarnings(\"all\")\n public abstract class AbstractLanguageServerTest implements Endpoint {\n+  /**\n+   * A request manager that will run the given read and write actions in the same thread immediatly, sequentially.\n+   */\n+  @Singleton\n+  public static class DirectRequestManager extends RequestManager {\n+    @Inject\n+    public DirectRequestManager(final OperationCanceledManager operationCanceledManager) {\n+      super(null, operationCanceledManager);\n+    }\n+    \n+    @Override\n+    public synchronized <V extends Object> CompletableFuture<V> runRead(final Function1<? super CancelIndicator, ? extends V> request) {\n+      final CompletableFuture<V> result = new CompletableFuture<V>();\n+      try {\n+        final CancelIndicator _function = () -> {\n+          return false;\n+        };\n+        result.complete(request.apply(_function));\n+      } catch (final Throwable _t) {\n+        if (_t instanceof Throwable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "808ed37b22dffbf2a02a728be754b90b37e5e16f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU2NTM4Mw==", "bodyText": "underyling -> underlying", "url": "https://github.com/eclipse/xtext-core/pull/1379#discussion_r380565383", "createdAt": "2020-02-18T09:53:56Z", "author": {"login": "mark-christiaens"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/concurrent/AbstractRequest.java", "diffHunk": "@@ -10,17 +10,32 @@\n \n import java.util.concurrent.CompletableFuture;\n \n+import org.apache.log4j.Logger;\n+\n /**\n  * Abstract base type for read and write requests.\n  * \n  * @author kosyakov - Initial contribution and API\n  * @since 2.11\n  */\n public abstract class AbstractRequest<V> implements Runnable, Cancellable {\n+\t\n+\tprivate class ResultFuture extends CompletableFuture<V> {\n+\t\t@Override\n+\t\tpublic boolean cancel(boolean mayInterruptIfRunning) {\n+\t\t\tAbstractRequest.this.cancel(mayInterruptIfRunning);\n+\t\t\treturn isCancelled();\n+\t\t}\n+\n+\t\tvoid doCancel(boolean mayInterruptIfRunning) {\n+\t\t\tsuper.cancel(mayInterruptIfRunning);\n+\t\t}\n+\t}\n+\t\n \t/**\n \t * The underyling future.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "808ed37b22dffbf2a02a728be754b90b37e5e16f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU3NzQ0MA==", "bodyText": "I'm not sure whether I understand it all but I think you are attempting to make sure that consumers of the readResult are canceled if the ReadRequest itself is canceled.  Suppose that a cancellation is requested after readResult is produced.  Then complete will go ahead  regardless since org.eclipse.xtext.ide.server.concurrent.AbstractRequest.cancel() doesn't cancel the ResultFuture?   Is that intended behaviour?", "url": "https://github.com/eclipse/xtext-core/pull/1379#discussion_r380577440", "createdAt": "2020-02-18T10:14:54Z", "author": {"login": "mark-christiaens"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/concurrent/ReadRequest.java", "diffHunk": "@@ -21,33 +22,58 @@\n public class ReadRequest<V> extends AbstractRequest<V> {\n \tprivate static final Logger LOG = Logger.getLogger(ReadRequest.class);\n \n-\tprivate final Function1<? super CancelIndicator, ? extends V> cancellable;\n+\tprivate final Function1<? super CancelIndicator, ? extends V> readOperation;\n+\n+\t/**\n+\t * The initializer future allows to track the running state of this request, e.g. if it was already started or not.\n+\t */\n+\tprivate final CompletableFuture<Void> initializer;\n \n \tprivate final ExecutorService executor;\n \n-\tpublic ReadRequest(RequestManager requestManager, Function1<? super CancelIndicator, ? extends V> cancellable,\n+\tpublic ReadRequest(RequestManager requestManager, Function1<? super CancelIndicator, ? extends V> readOperation,\n \t\t\tExecutorService executor) {\n \t\tsuper(requestManager);\n-\t\tthis.cancellable = cancellable;\n+\t\tthis.readOperation = readOperation;\n \t\tthis.executor = executor;\n+\t\tthis.initializer = new CompletableFuture<>();\n+\t\tthis.initializer.thenRun(this::doRun);\n \t}\n-\n+\t\n+\t@Override\n+\tprotected void cancel(boolean mayInterruptIfRunning) {\n+\t\tsuper.cancel(mayInterruptIfRunning);\n+\t\tif (initializer.cancel(mayInterruptIfRunning)) {\n+\t\t\tcancelResult(mayInterruptIfRunning);\n+\t\t}\n+\t}\n+\t\n \t@Override\n \tpublic void run() {\n-\t\tif (result.isCancelled()) {\n+\t\tinitializer.complete(null);\n+\t}\n+\n+\tprivate void doRun() {\n+\t\tif (isDone()) {\n \t\t\treturn;\n \t\t}\n \t\tthis.executor.submit(() -> {\n \t\t\ttry {\n+\t\t\t\tif (isDone()) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n \t\t\t\tcancelIndicator.checkCanceled();\n-\t\t\t\tresult.complete(cancellable.apply(cancelIndicator));\n+\t\t\t\tV readResult = readOperation.apply(cancelIndicator);\n+\t\t\t\tcomplete(readResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "808ed37b22dffbf2a02a728be754b90b37e5e16f"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU4NTgwMQ==", "bodyText": "Is synchronized necessary here?  IIUIC then there is a single connection (socket) that is feeding us read and write commands.  I think therefore there is only one thread invoking runRead and runWrite in a nice, sequential way?", "url": "https://github.com/eclipse/xtext-core/pull/1379#discussion_r380585801", "createdAt": "2020-02-18T10:29:53Z", "author": {"login": "mark-christiaens"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/concurrent/RequestManager.java", "diffHunk": "@@ -51,18 +55,26 @@ public void shutdown() {\n \t\tparallel.shutdown();\n \t\tcancel();\n \t}\n-\n+\t\n+\tprotected final OperationCanceledManager getOperationCanceledManager() {\n+\t\treturn operationCanceledManager;\n+\t}\n+\t\n+\tprotected final ExecutorService getParallelExecutorService() {\n+\t\treturn parallel;\n+\t}\n+\t\n \t/**\n \t * Run the given cancellable logic as a read request.\n \t */\n-\tpublic <V> CompletableFuture<V> runRead(Function1<? super CancelIndicator, ? extends V> cancellable) {\n+\tpublic synchronized <V> CompletableFuture<V> runRead(Function1<? super CancelIndicator, ? extends V> cancellable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "808ed37b22dffbf2a02a728be754b90b37e5e16f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU5NTc5NQ==", "bodyText": "I'd rename previous to allPreviousRequestResults or something to clarify that it is a future that will block until all previous requests have yielded a result (and hence all computation for these previous results is concluded).", "url": "https://github.com/eclipse/xtext-core/pull/1379#discussion_r380595795", "createdAt": "2020-02-18T10:48:42Z", "author": {"login": "mark-christiaens"}, "path": "org.eclipse.xtext.ide/src/org/eclipse/xtext/ide/server/concurrent/WriteRequest.java", "diffHunk": "@@ -42,18 +42,23 @@ public void run() {\n \t\ttry {\n \t\t\tprevious.join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "808ed37b22dffbf2a02a728be754b90b37e5e16f"}, "originalPosition": 2}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "808ed37b22dffbf2a02a728be754b90b37e5e16f", "author": {"user": {"login": "szarnekow", "name": "Sebastian Zarnekow"}}, "url": "https://github.com/eclipse/xtext-core/commit/808ed37b22dffbf2a02a728be754b90b37e5e16f", "committedDate": "2020-02-11T12:38:50Z", "message": "More view feedback"}, "afterCommit": {"oid": "0de5cbb27e0d8b13b49542fa3c0ed849ef5277bb", "author": {"user": {"login": "szarnekow", "name": "Sebastian Zarnekow"}}, "url": "https://github.com/eclipse/xtext-core/commit/0de5cbb27e0d8b13b49542fa3c0ed849ef5277bb", "committedDate": "2020-02-23T13:16:15Z", "message": "[#622] Improved concurrency behavior of RequestManager"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0de5cbb27e0d8b13b49542fa3c0ed849ef5277bb", "author": {"user": {"login": "szarnekow", "name": "Sebastian Zarnekow"}}, "url": "https://github.com/eclipse/xtext-core/commit/0de5cbb27e0d8b13b49542fa3c0ed849ef5277bb", "committedDate": "2020-02-23T13:16:15Z", "message": "[#622] Improved concurrency behavior of RequestManager"}, "afterCommit": {"oid": "5d26ea026a3b3ddc063b2b749cc944dcb86ad462", "author": {"user": {"login": "szarnekow", "name": "Sebastian Zarnekow"}}, "url": "https://github.com/eclipse/xtext-core/commit/5d26ea026a3b3ddc063b2b749cc944dcb86ad462", "committedDate": "2020-02-23T13:17:39Z", "message": "[#622] Improved concurrency behavior of RequestManager"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5d26ea026a3b3ddc063b2b749cc944dcb86ad462", "author": {"user": {"login": "szarnekow", "name": "Sebastian Zarnekow"}}, "url": "https://github.com/eclipse/xtext-core/commit/5d26ea026a3b3ddc063b2b749cc944dcb86ad462", "committedDate": "2020-02-23T13:17:39Z", "message": "[#622] Improved concurrency behavior of RequestManager"}, "afterCommit": {"oid": "5d3aa4a6c2160af5735ee0203db3bd6b82acf2ea", "author": {"user": {"login": "szarnekow", "name": "Sebastian Zarnekow"}}, "url": "https://github.com/eclipse/xtext-core/commit/5d3aa4a6c2160af5735ee0203db3bd6b82acf2ea", "committedDate": "2020-02-23T13:21:02Z", "message": "[#622] Improved concurrency behavior of RequestManager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "839e4e01b98bf4564cf5156bd38b878ce724a79b", "author": {"user": {"login": "szarnekow", "name": "Sebastian Zarnekow"}}, "url": "https://github.com/eclipse/xtext-core/commit/839e4e01b98bf4564cf5156bd38b878ce724a79b", "committedDate": "2020-02-23T13:21:39Z", "message": "[#622] Improved concurrency behavior of RequestManager"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5d3aa4a6c2160af5735ee0203db3bd6b82acf2ea", "author": {"user": {"login": "szarnekow", "name": "Sebastian Zarnekow"}}, "url": "https://github.com/eclipse/xtext-core/commit/5d3aa4a6c2160af5735ee0203db3bd6b82acf2ea", "committedDate": "2020-02-23T13:21:02Z", "message": "[#622] Improved concurrency behavior of RequestManager"}, "afterCommit": {"oid": "839e4e01b98bf4564cf5156bd38b878ce724a79b", "author": {"user": {"login": "szarnekow", "name": "Sebastian Zarnekow"}}, "url": "https://github.com/eclipse/xtext-core/commit/839e4e01b98bf4564cf5156bd38b878ce724a79b", "committedDate": "2020-02-23T13:21:39Z", "message": "[#622] Improved concurrency behavior of RequestManager"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4827, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}