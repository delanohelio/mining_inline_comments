{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxMzc3Mzgy", "number": 320, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODo1ODoyN1rOEuplfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMjo1MTowMlrOEu0R2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzUxMjk0OnYy", "diffSide": "RIGHT", "path": "docs/source/output.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODo1ODoyN1rOHjMfeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOTozNTo0OVrOHjNftQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2Njg3Mw==", "bodyText": "So this were icons we used to support while reading from the yml files?\nI think it should be \"icons\" and \"backwards\" (spelling) :)", "url": "https://github.com/dedica-team/nivio/pull/320#discussion_r506666873", "createdAt": "2020-10-16T18:58:27Z", "author": {"login": "mfbieber"}, "path": "docs/source/output.rst", "diffHunk": "@@ -20,31 +20,48 @@ Nivio indexes all landscape items in an in-memory search engine called Lucene. Y\n various item fields (see Model). For further information, see https://www.lucenetutorial.com/lucene-query-syntax.html\n \n \n-Item Icons and Background\n+Modifying Item Appearance\n -------------------------\n \n-The default icon of a item is determined by its item type (e.g. server, messagequeue, database...). To change the\n-appearance of a item to a vendor logo, for instance, the *icon* or *fill* property can be set. Both properties take\n-a valid URL.\n \n-While icon is rendered as centered image on the node, fill is used to paint the entire background and is more suitable\n-to be used with images, photos and so on.\n+Icons by Type\n+^^^^^^^^^^^^^\n+\n+The icon of an item is determined by its item type (e.g. server, database...) and defaults to a cog () .\n \n .. code-block:: yaml\n    :linenos:\n \n-   items:\n-      - identifier: foo\n-        shortName: blog1\n-        icon: http://my.custom/icon.png\n+    items:\n       - identifier: bar\n-        shortName: db2\n-        fill: http://my.custom/background.png\n+        type: database\n \n+As type values all items from https://materialdesignicons.com/ can be chosen. Just add the icon name without the \"svg\" suffix,\n+like \"account\".\n \n-Vendor Icons\n-------------\n+.. code-block:: yaml\n+   :linenos:\n \n+    items:\n+      - identifier: bar\n+        type: account\n+\n+The following types are translated icon to maintain backward compatibility:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59592cb85661e0ca2af25d725c86fa3170b27122"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4MzMxNw==", "bodyText": "true...", "url": "https://github.com/dedica-team/nivio/pull/320#discussion_r506683317", "createdAt": "2020-10-16T19:35:49Z", "author": {"login": "bonndan"}, "path": "docs/source/output.rst", "diffHunk": "@@ -20,31 +20,48 @@ Nivio indexes all landscape items in an in-memory search engine called Lucene. Y\n various item fields (see Model). For further information, see https://www.lucenetutorial.com/lucene-query-syntax.html\n \n \n-Item Icons and Background\n+Modifying Item Appearance\n -------------------------\n \n-The default icon of a item is determined by its item type (e.g. server, messagequeue, database...). To change the\n-appearance of a item to a vendor logo, for instance, the *icon* or *fill* property can be set. Both properties take\n-a valid URL.\n \n-While icon is rendered as centered image on the node, fill is used to paint the entire background and is more suitable\n-to be used with images, photos and so on.\n+Icons by Type\n+^^^^^^^^^^^^^\n+\n+The icon of an item is determined by its item type (e.g. server, database...) and defaults to a cog () .\n \n .. code-block:: yaml\n    :linenos:\n \n-   items:\n-      - identifier: foo\n-        shortName: blog1\n-        icon: http://my.custom/icon.png\n+    items:\n       - identifier: bar\n-        shortName: db2\n-        fill: http://my.custom/background.png\n+        type: database\n \n+As type values all items from https://materialdesignicons.com/ can be chosen. Just add the icon name without the \"svg\" suffix,\n+like \"account\".\n \n-Vendor Icons\n-------------\n+.. code-block:: yaml\n+   :linenos:\n \n+    items:\n+      - identifier: bar\n+        type: account\n+\n+The following types are translated icon to maintain backward compatibility:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2Njg3Mw=="}, "originalCommit": {"oid": "59592cb85661e0ca2af25d725c86fa3170b27122"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzUxNjY3OnYy", "diffSide": "RIGHT", "path": "docs/source/output.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxODo1OTo0MFrOHjMh0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOTozNjoxMlrOHjNgRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2NzQ3NQ==", "bodyText": "Great! \ud83d\udc4d", "url": "https://github.com/dedica-team/nivio/pull/320#discussion_r506667475", "createdAt": "2020-10-16T18:59:40Z", "author": {"login": "mfbieber"}, "path": "docs/source/output.rst", "diffHunk": "@@ -56,6 +73,52 @@ Vendor icons are work in progress.\n       - identifier: bar\n         icon: vendor://redis\n \n+To change the appearance of a item to a vendor logo, for instance, the *icon* or *fill* property can be set. Both properties take\n+a valid URL.\n+\n+External Images\n+^^^^^^^^^^^^^^^\n+\n+To include external images in the map, just set the icon (or fill, see below) property to a valid URL.\n+\n+.. code-block:: yaml\n+   :linenos:\n+\n+   items:\n+      - identifier: foo\n+        icon: http://my.custom/icon.png\n+\n+\n+Background fill\n+^^^^^^^^^^^^^^^\n+\n+While icon is rendered as centered image on the node, fill is used to paint the entire background and is more suitable\n+to be used with images, photos and so on.\n+\n+.. code-block:: yaml\n+   :linenos:\n+\n+   items:\n+      - identifier: bar\n+        fill: http://my.custom/background.png\n+\n+UTF-8 Symbols and shortname as Icons\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+If **NO** icon, type or fill value is set, but a shortname value is given, the value is displayed on the icon. The first\n+example would display \"FOOBAR\" on the item, the second an enlarged unicorn symbol (shortnames less than three chars are\n+enlarged).\n+\n+.. code-block:: yaml\n+   :linenos:\n+\n+   items:\n+      - identifier: bar\n+        shortname: FOOBAR\n+      - identifier: pony\n+        shortname: \ud83e\udd84\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59592cb85661e0ca2af25d725c86fa3170b27122"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4MzQ2Mg==", "bodyText": "I knew you'd like the \ud83e\udd84", "url": "https://github.com/dedica-team/nivio/pull/320#discussion_r506683462", "createdAt": "2020-10-16T19:36:12Z", "author": {"login": "bonndan"}, "path": "docs/source/output.rst", "diffHunk": "@@ -56,6 +73,52 @@ Vendor icons are work in progress.\n       - identifier: bar\n         icon: vendor://redis\n \n+To change the appearance of a item to a vendor logo, for instance, the *icon* or *fill* property can be set. Both properties take\n+a valid URL.\n+\n+External Images\n+^^^^^^^^^^^^^^^\n+\n+To include external images in the map, just set the icon (or fill, see below) property to a valid URL.\n+\n+.. code-block:: yaml\n+   :linenos:\n+\n+   items:\n+      - identifier: foo\n+        icon: http://my.custom/icon.png\n+\n+\n+Background fill\n+^^^^^^^^^^^^^^^\n+\n+While icon is rendered as centered image on the node, fill is used to paint the entire background and is more suitable\n+to be used with images, photos and so on.\n+\n+.. code-block:: yaml\n+   :linenos:\n+\n+   items:\n+      - identifier: bar\n+        fill: http://my.custom/background.png\n+\n+UTF-8 Symbols and shortname as Icons\n+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+If **NO** icon, type or fill value is set, but a shortname value is given, the value is displayed on the icon. The first\n+example would display \"FOOBAR\" on the item, the second an enlarged unicorn symbol (shortnames less than three chars are\n+enlarged).\n+\n+.. code-block:: yaml\n+   :linenos:\n+\n+   items:\n+      - identifier: bar\n+        shortname: FOOBAR\n+      - identifier: pony\n+        shortname: \ud83e\udd84\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY2NzQ3NQ=="}, "originalCommit": {"oid": "59592cb85661e0ca2af25d725c86fa3170b27122"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzU2MjUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/icons/LocalIcons.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOToxNTo0MlrOHjM99Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwNzowNjowN1rOHjXR1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY3NDY3Nw==", "bodyText": "Can't this be private?", "url": "https://github.com/dedica-team/nivio/pull/320#discussion_r506674677", "createdAt": "2020-10-16T19:15:42Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/icons/LocalIcons.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package de.bonndan.nivio.output.icons;\n+\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.Label;\n+import de.bonndan.nivio.util.URLHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.StringUtils;\n+\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static de.bonndan.nivio.output.icons.IconMapping.DEFAULT_ICON;\n+\n+/**\n+ * Provides icons and vendor icons as data.\n+ *\n+ *\n+ */\n+@Service\n+public class LocalIcons {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LocalIcons.class);\n+\n+    private final VendorIcons vendorIcons;\n+\n+    /**\n+     * default icon data url\n+     */\n+    private final String defaultIcon;\n+\n+    /**\n+     * data url cache\n+     */\n+    private final Map<String, String> iconDataUrls = new ConcurrentHashMap<>();\n+\n+\n+    public LocalIcons(VendorIcons vendorIcons) {\n+\n+        this.vendorIcons = vendorIcons;\n+        defaultIcon = getIconUrl(DEFAULT_ICON.getIcon(), false);\n+    }\n+\n+    public String getIconUrl(Item item) {\n+\n+        //icon label based\n+        String icon = item.getIcon();\n+        if (!StringUtils.isEmpty(icon)) {\n+\n+            if (icon.startsWith(VendorIcons.VENDOR_PREFIX)) {\n+                String key = icon.replace(VendorIcons.VENDOR_PREFIX, \"\").toLowerCase();\n+                return vendorIcons.getUrl(key).orElse(defaultIcon);\n+            }\n+\n+            String iconUrl = getIconUrl(icon, true);\n+            if(iconUrl != null) {\n+                return iconUrl;\n+            }\n+        }\n+\n+        //type based\n+        String type = item.getLabel(Label.type);\n+        if (StringUtils.isEmpty(type)) {\n+            return getIconUrl(DEFAULT_ICON.getIcon(), false);\n+        }\n+\n+        //fallback to item.type\n+        String iconName = IconMapping.of(type.toLowerCase()).map(IconMapping::getIcon).orElseGet(type::toLowerCase);\n+        return getIconUrl(iconName, true);\n+    }\n+\n+    /**\n+     * Provides an URL for a locally served icon.\n+     *\n+     * @return an url pointing to a file or a data url\n+     */\n+    String getIconUrl(String icon, boolean fallback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59592cb85661e0ca2af25d725c86fa3170b27122"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4NDI2Mg==", "bodyText": "I've been lazy and made it package-private for testing. \ud83d\ude48", "url": "https://github.com/dedica-team/nivio/pull/320#discussion_r506684262", "createdAt": "2020-10-16T19:38:00Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/icons/LocalIcons.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package de.bonndan.nivio.output.icons;\n+\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.Label;\n+import de.bonndan.nivio.util.URLHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.StringUtils;\n+\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static de.bonndan.nivio.output.icons.IconMapping.DEFAULT_ICON;\n+\n+/**\n+ * Provides icons and vendor icons as data.\n+ *\n+ *\n+ */\n+@Service\n+public class LocalIcons {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LocalIcons.class);\n+\n+    private final VendorIcons vendorIcons;\n+\n+    /**\n+     * default icon data url\n+     */\n+    private final String defaultIcon;\n+\n+    /**\n+     * data url cache\n+     */\n+    private final Map<String, String> iconDataUrls = new ConcurrentHashMap<>();\n+\n+\n+    public LocalIcons(VendorIcons vendorIcons) {\n+\n+        this.vendorIcons = vendorIcons;\n+        defaultIcon = getIconUrl(DEFAULT_ICON.getIcon(), false);\n+    }\n+\n+    public String getIconUrl(Item item) {\n+\n+        //icon label based\n+        String icon = item.getIcon();\n+        if (!StringUtils.isEmpty(icon)) {\n+\n+            if (icon.startsWith(VendorIcons.VENDOR_PREFIX)) {\n+                String key = icon.replace(VendorIcons.VENDOR_PREFIX, \"\").toLowerCase();\n+                return vendorIcons.getUrl(key).orElse(defaultIcon);\n+            }\n+\n+            String iconUrl = getIconUrl(icon, true);\n+            if(iconUrl != null) {\n+                return iconUrl;\n+            }\n+        }\n+\n+        //type based\n+        String type = item.getLabel(Label.type);\n+        if (StringUtils.isEmpty(type)) {\n+            return getIconUrl(DEFAULT_ICON.getIcon(), false);\n+        }\n+\n+        //fallback to item.type\n+        String iconName = IconMapping.of(type.toLowerCase()).map(IconMapping::getIcon).orElseGet(type::toLowerCase);\n+        return getIconUrl(iconName, true);\n+    }\n+\n+    /**\n+     * Provides an URL for a locally served icon.\n+     *\n+     * @return an url pointing to a file or a data url\n+     */\n+    String getIconUrl(String icon, boolean fallback) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY3NDY3Nw=="}, "originalCommit": {"oid": "59592cb85661e0ca2af25d725c86fa3170b27122"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4NzU0Nw==", "bodyText": "But I did not see it being used in the tests - did I overlook this?", "url": "https://github.com/dedica-team/nivio/pull/320#discussion_r506687547", "createdAt": "2020-10-16T19:45:19Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/icons/LocalIcons.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package de.bonndan.nivio.output.icons;\n+\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.Label;\n+import de.bonndan.nivio.util.URLHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.StringUtils;\n+\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static de.bonndan.nivio.output.icons.IconMapping.DEFAULT_ICON;\n+\n+/**\n+ * Provides icons and vendor icons as data.\n+ *\n+ *\n+ */\n+@Service\n+public class LocalIcons {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LocalIcons.class);\n+\n+    private final VendorIcons vendorIcons;\n+\n+    /**\n+     * default icon data url\n+     */\n+    private final String defaultIcon;\n+\n+    /**\n+     * data url cache\n+     */\n+    private final Map<String, String> iconDataUrls = new ConcurrentHashMap<>();\n+\n+\n+    public LocalIcons(VendorIcons vendorIcons) {\n+\n+        this.vendorIcons = vendorIcons;\n+        defaultIcon = getIconUrl(DEFAULT_ICON.getIcon(), false);\n+    }\n+\n+    public String getIconUrl(Item item) {\n+\n+        //icon label based\n+        String icon = item.getIcon();\n+        if (!StringUtils.isEmpty(icon)) {\n+\n+            if (icon.startsWith(VendorIcons.VENDOR_PREFIX)) {\n+                String key = icon.replace(VendorIcons.VENDOR_PREFIX, \"\").toLowerCase();\n+                return vendorIcons.getUrl(key).orElse(defaultIcon);\n+            }\n+\n+            String iconUrl = getIconUrl(icon, true);\n+            if(iconUrl != null) {\n+                return iconUrl;\n+            }\n+        }\n+\n+        //type based\n+        String type = item.getLabel(Label.type);\n+        if (StringUtils.isEmpty(type)) {\n+            return getIconUrl(DEFAULT_ICON.getIcon(), false);\n+        }\n+\n+        //fallback to item.type\n+        String iconName = IconMapping.of(type.toLowerCase()).map(IconMapping::getIcon).orElseGet(type::toLowerCase);\n+        return getIconUrl(iconName, true);\n+    }\n+\n+    /**\n+     * Provides an URL for a locally served icon.\n+     *\n+     * @return an url pointing to a file or a data url\n+     */\n+    String getIconUrl(String icon, boolean fallback) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY3NDY3Nw=="}, "originalCommit": {"oid": "59592cb85661e0ca2af25d725c86fa3170b27122"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwNzcwOQ==", "bodyText": "LocalIconsTest uses it. Maybe it were better to return an Optional and get rid of the boolean flag.", "url": "https://github.com/dedica-team/nivio/pull/320#discussion_r506707709", "createdAt": "2020-10-16T20:32:51Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/icons/LocalIcons.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package de.bonndan.nivio.output.icons;\n+\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.Label;\n+import de.bonndan.nivio.util.URLHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.StringUtils;\n+\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static de.bonndan.nivio.output.icons.IconMapping.DEFAULT_ICON;\n+\n+/**\n+ * Provides icons and vendor icons as data.\n+ *\n+ *\n+ */\n+@Service\n+public class LocalIcons {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LocalIcons.class);\n+\n+    private final VendorIcons vendorIcons;\n+\n+    /**\n+     * default icon data url\n+     */\n+    private final String defaultIcon;\n+\n+    /**\n+     * data url cache\n+     */\n+    private final Map<String, String> iconDataUrls = new ConcurrentHashMap<>();\n+\n+\n+    public LocalIcons(VendorIcons vendorIcons) {\n+\n+        this.vendorIcons = vendorIcons;\n+        defaultIcon = getIconUrl(DEFAULT_ICON.getIcon(), false);\n+    }\n+\n+    public String getIconUrl(Item item) {\n+\n+        //icon label based\n+        String icon = item.getIcon();\n+        if (!StringUtils.isEmpty(icon)) {\n+\n+            if (icon.startsWith(VendorIcons.VENDOR_PREFIX)) {\n+                String key = icon.replace(VendorIcons.VENDOR_PREFIX, \"\").toLowerCase();\n+                return vendorIcons.getUrl(key).orElse(defaultIcon);\n+            }\n+\n+            String iconUrl = getIconUrl(icon, true);\n+            if(iconUrl != null) {\n+                return iconUrl;\n+            }\n+        }\n+\n+        //type based\n+        String type = item.getLabel(Label.type);\n+        if (StringUtils.isEmpty(type)) {\n+            return getIconUrl(DEFAULT_ICON.getIcon(), false);\n+        }\n+\n+        //fallback to item.type\n+        String iconName = IconMapping.of(type.toLowerCase()).map(IconMapping::getIcon).orElseGet(type::toLowerCase);\n+        return getIconUrl(iconName, true);\n+    }\n+\n+    /**\n+     * Provides an URL for a locally served icon.\n+     *\n+     * @return an url pointing to a file or a data url\n+     */\n+    String getIconUrl(String icon, boolean fallback) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY3NDY3Nw=="}, "originalCommit": {"oid": "59592cb85661e0ca2af25d725c86fa3170b27122"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcxMjg1MQ==", "bodyText": "Oh, yes.\nYes, that would be better!", "url": "https://github.com/dedica-team/nivio/pull/320#discussion_r506712851", "createdAt": "2020-10-16T20:45:25Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/icons/LocalIcons.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package de.bonndan.nivio.output.icons;\n+\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.Label;\n+import de.bonndan.nivio.util.URLHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.StringUtils;\n+\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static de.bonndan.nivio.output.icons.IconMapping.DEFAULT_ICON;\n+\n+/**\n+ * Provides icons and vendor icons as data.\n+ *\n+ *\n+ */\n+@Service\n+public class LocalIcons {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LocalIcons.class);\n+\n+    private final VendorIcons vendorIcons;\n+\n+    /**\n+     * default icon data url\n+     */\n+    private final String defaultIcon;\n+\n+    /**\n+     * data url cache\n+     */\n+    private final Map<String, String> iconDataUrls = new ConcurrentHashMap<>();\n+\n+\n+    public LocalIcons(VendorIcons vendorIcons) {\n+\n+        this.vendorIcons = vendorIcons;\n+        defaultIcon = getIconUrl(DEFAULT_ICON.getIcon(), false);\n+    }\n+\n+    public String getIconUrl(Item item) {\n+\n+        //icon label based\n+        String icon = item.getIcon();\n+        if (!StringUtils.isEmpty(icon)) {\n+\n+            if (icon.startsWith(VendorIcons.VENDOR_PREFIX)) {\n+                String key = icon.replace(VendorIcons.VENDOR_PREFIX, \"\").toLowerCase();\n+                return vendorIcons.getUrl(key).orElse(defaultIcon);\n+            }\n+\n+            String iconUrl = getIconUrl(icon, true);\n+            if(iconUrl != null) {\n+                return iconUrl;\n+            }\n+        }\n+\n+        //type based\n+        String type = item.getLabel(Label.type);\n+        if (StringUtils.isEmpty(type)) {\n+            return getIconUrl(DEFAULT_ICON.getIcon(), false);\n+        }\n+\n+        //fallback to item.type\n+        String iconName = IconMapping.of(type.toLowerCase()).map(IconMapping::getIcon).orElseGet(type::toLowerCase);\n+        return getIconUrl(iconName, true);\n+    }\n+\n+    /**\n+     * Provides an URL for a locally served icon.\n+     *\n+     * @return an url pointing to a file or a data url\n+     */\n+    String getIconUrl(String icon, boolean fallback) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY3NDY3Nw=="}, "originalCommit": {"oid": "59592cb85661e0ca2af25d725c86fa3170b27122"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg0MzYwNA==", "bodyText": "done", "url": "https://github.com/dedica-team/nivio/pull/320#discussion_r506843604", "createdAt": "2020-10-17T07:06:07Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/icons/LocalIcons.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package de.bonndan.nivio.output.icons;\n+\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.Label;\n+import de.bonndan.nivio.util.URLHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.StringUtils;\n+\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static de.bonndan.nivio.output.icons.IconMapping.DEFAULT_ICON;\n+\n+/**\n+ * Provides icons and vendor icons as data.\n+ *\n+ *\n+ */\n+@Service\n+public class LocalIcons {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LocalIcons.class);\n+\n+    private final VendorIcons vendorIcons;\n+\n+    /**\n+     * default icon data url\n+     */\n+    private final String defaultIcon;\n+\n+    /**\n+     * data url cache\n+     */\n+    private final Map<String, String> iconDataUrls = new ConcurrentHashMap<>();\n+\n+\n+    public LocalIcons(VendorIcons vendorIcons) {\n+\n+        this.vendorIcons = vendorIcons;\n+        defaultIcon = getIconUrl(DEFAULT_ICON.getIcon(), false);\n+    }\n+\n+    public String getIconUrl(Item item) {\n+\n+        //icon label based\n+        String icon = item.getIcon();\n+        if (!StringUtils.isEmpty(icon)) {\n+\n+            if (icon.startsWith(VendorIcons.VENDOR_PREFIX)) {\n+                String key = icon.replace(VendorIcons.VENDOR_PREFIX, \"\").toLowerCase();\n+                return vendorIcons.getUrl(key).orElse(defaultIcon);\n+            }\n+\n+            String iconUrl = getIconUrl(icon, true);\n+            if(iconUrl != null) {\n+                return iconUrl;\n+            }\n+        }\n+\n+        //type based\n+        String type = item.getLabel(Label.type);\n+        if (StringUtils.isEmpty(type)) {\n+            return getIconUrl(DEFAULT_ICON.getIcon(), false);\n+        }\n+\n+        //fallback to item.type\n+        String iconName = IconMapping.of(type.toLowerCase()).map(IconMapping::getIcon).orElseGet(type::toLowerCase);\n+        return getIconUrl(iconName, true);\n+    }\n+\n+    /**\n+     * Provides an URL for a locally served icon.\n+     *\n+     * @return an url pointing to a file or a data url\n+     */\n+    String getIconUrl(String icon, boolean fallback) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY3NDY3Nw=="}, "originalCommit": {"oid": "59592cb85661e0ca2af25d725c86fa3170b27122"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzU4Mjk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/icons/LocalIcons.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOToyMzowOFrOHjNKww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwNzowNTo1OFrOHjXRnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY3Nzk1NQ==", "bodyText": "This is the only place where vendorIcons.getUrl() is used, so I was at first a little confused about what LocalIcons really is. I thought LocalIcons are icons addes by the user? Is this correct? (In this case, maybe a different naming would be better. Why not just Icons?)\nOr does it mean that there are not retrieved from a remote location such as the vendor icons?", "url": "https://github.com/dedica-team/nivio/pull/320#discussion_r506677955", "createdAt": "2020-10-16T19:23:08Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/icons/LocalIcons.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package de.bonndan.nivio.output.icons;\n+\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.Label;\n+import de.bonndan.nivio.util.URLHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.StringUtils;\n+\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static de.bonndan.nivio.output.icons.IconMapping.DEFAULT_ICON;\n+\n+/**\n+ * Provides icons and vendor icons as data.\n+ *\n+ *\n+ */\n+@Service\n+public class LocalIcons {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LocalIcons.class);\n+\n+    private final VendorIcons vendorIcons;\n+\n+    /**\n+     * default icon data url\n+     */\n+    private final String defaultIcon;\n+\n+    /**\n+     * data url cache\n+     */\n+    private final Map<String, String> iconDataUrls = new ConcurrentHashMap<>();\n+\n+\n+    public LocalIcons(VendorIcons vendorIcons) {\n+\n+        this.vendorIcons = vendorIcons;\n+        defaultIcon = getIconUrl(DEFAULT_ICON.getIcon(), false);\n+    }\n+\n+    public String getIconUrl(Item item) {\n+\n+        //icon label based\n+        String icon = item.getIcon();\n+        if (!StringUtils.isEmpty(icon)) {\n+\n+            if (icon.startsWith(VendorIcons.VENDOR_PREFIX)) {\n+                String key = icon.replace(VendorIcons.VENDOR_PREFIX, \"\").toLowerCase();\n+                return vendorIcons.getUrl(key).orElse(defaultIcon);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59592cb85661e0ca2af25d725c86fa3170b27122"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4NTI2MA==", "bodyText": "LocalIcons is a crappy name, but I had no better idea. It stands for the locally (fs) available svg icons that come shipped with nivio. They are loaded and embedded, so nivio does not serve anything anymore.", "url": "https://github.com/dedica-team/nivio/pull/320#discussion_r506685260", "createdAt": "2020-10-16T19:40:15Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/icons/LocalIcons.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package de.bonndan.nivio.output.icons;\n+\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.Label;\n+import de.bonndan.nivio.util.URLHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.StringUtils;\n+\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static de.bonndan.nivio.output.icons.IconMapping.DEFAULT_ICON;\n+\n+/**\n+ * Provides icons and vendor icons as data.\n+ *\n+ *\n+ */\n+@Service\n+public class LocalIcons {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LocalIcons.class);\n+\n+    private final VendorIcons vendorIcons;\n+\n+    /**\n+     * default icon data url\n+     */\n+    private final String defaultIcon;\n+\n+    /**\n+     * data url cache\n+     */\n+    private final Map<String, String> iconDataUrls = new ConcurrentHashMap<>();\n+\n+\n+    public LocalIcons(VendorIcons vendorIcons) {\n+\n+        this.vendorIcons = vendorIcons;\n+        defaultIcon = getIconUrl(DEFAULT_ICON.getIcon(), false);\n+    }\n+\n+    public String getIconUrl(Item item) {\n+\n+        //icon label based\n+        String icon = item.getIcon();\n+        if (!StringUtils.isEmpty(icon)) {\n+\n+            if (icon.startsWith(VendorIcons.VENDOR_PREFIX)) {\n+                String key = icon.replace(VendorIcons.VENDOR_PREFIX, \"\").toLowerCase();\n+                return vendorIcons.getUrl(key).orElse(defaultIcon);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY3Nzk1NQ=="}, "originalCommit": {"oid": "59592cb85661e0ca2af25d725c86fa3170b27122"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4NjIxNQ==", "bodyText": "Okay, I think for the users it is okay. As I developer, I now understand. Maybe we can add a brief comment to the class, so others developers understand too?\nIn this case I also did not come up with a better name. \"BuiltInIcons\" could be another idea.", "url": "https://github.com/dedica-team/nivio/pull/320#discussion_r506686215", "createdAt": "2020-10-16T19:42:19Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/icons/LocalIcons.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package de.bonndan.nivio.output.icons;\n+\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.Label;\n+import de.bonndan.nivio.util.URLHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.StringUtils;\n+\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static de.bonndan.nivio.output.icons.IconMapping.DEFAULT_ICON;\n+\n+/**\n+ * Provides icons and vendor icons as data.\n+ *\n+ *\n+ */\n+@Service\n+public class LocalIcons {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LocalIcons.class);\n+\n+    private final VendorIcons vendorIcons;\n+\n+    /**\n+     * default icon data url\n+     */\n+    private final String defaultIcon;\n+\n+    /**\n+     * data url cache\n+     */\n+    private final Map<String, String> iconDataUrls = new ConcurrentHashMap<>();\n+\n+\n+    public LocalIcons(VendorIcons vendorIcons) {\n+\n+        this.vendorIcons = vendorIcons;\n+        defaultIcon = getIconUrl(DEFAULT_ICON.getIcon(), false);\n+    }\n+\n+    public String getIconUrl(Item item) {\n+\n+        //icon label based\n+        String icon = item.getIcon();\n+        if (!StringUtils.isEmpty(icon)) {\n+\n+            if (icon.startsWith(VendorIcons.VENDOR_PREFIX)) {\n+                String key = icon.replace(VendorIcons.VENDOR_PREFIX, \"\").toLowerCase();\n+                return vendorIcons.getUrl(key).orElse(defaultIcon);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY3Nzk1NQ=="}, "originalCommit": {"oid": "59592cb85661e0ca2af25d725c86fa3170b27122"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcwOTI4MQ==", "bodyText": "One more ugly aspect is that it is named to handle local icons, but suddenly comes up with remote vendor icons. I don't like my design here.", "url": "https://github.com/dedica-team/nivio/pull/320#discussion_r506709281", "createdAt": "2020-10-16T20:36:43Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/icons/LocalIcons.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package de.bonndan.nivio.output.icons;\n+\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.Label;\n+import de.bonndan.nivio.util.URLHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.StringUtils;\n+\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static de.bonndan.nivio.output.icons.IconMapping.DEFAULT_ICON;\n+\n+/**\n+ * Provides icons and vendor icons as data.\n+ *\n+ *\n+ */\n+@Service\n+public class LocalIcons {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LocalIcons.class);\n+\n+    private final VendorIcons vendorIcons;\n+\n+    /**\n+     * default icon data url\n+     */\n+    private final String defaultIcon;\n+\n+    /**\n+     * data url cache\n+     */\n+    private final Map<String, String> iconDataUrls = new ConcurrentHashMap<>();\n+\n+\n+    public LocalIcons(VendorIcons vendorIcons) {\n+\n+        this.vendorIcons = vendorIcons;\n+        defaultIcon = getIconUrl(DEFAULT_ICON.getIcon(), false);\n+    }\n+\n+    public String getIconUrl(Item item) {\n+\n+        //icon label based\n+        String icon = item.getIcon();\n+        if (!StringUtils.isEmpty(icon)) {\n+\n+            if (icon.startsWith(VendorIcons.VENDOR_PREFIX)) {\n+                String key = icon.replace(VendorIcons.VENDOR_PREFIX, \"\").toLowerCase();\n+                return vendorIcons.getUrl(key).orElse(defaultIcon);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY3Nzk1NQ=="}, "originalCommit": {"oid": "59592cb85661e0ca2af25d725c86fa3170b27122"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjcxMjQ3Mg==", "bodyText": "Yes, that is exactly what I was wondering about.", "url": "https://github.com/dedica-team/nivio/pull/320#discussion_r506712472", "createdAt": "2020-10-16T20:44:35Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/icons/LocalIcons.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package de.bonndan.nivio.output.icons;\n+\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.Label;\n+import de.bonndan.nivio.util.URLHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.StringUtils;\n+\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static de.bonndan.nivio.output.icons.IconMapping.DEFAULT_ICON;\n+\n+/**\n+ * Provides icons and vendor icons as data.\n+ *\n+ *\n+ */\n+@Service\n+public class LocalIcons {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LocalIcons.class);\n+\n+    private final VendorIcons vendorIcons;\n+\n+    /**\n+     * default icon data url\n+     */\n+    private final String defaultIcon;\n+\n+    /**\n+     * data url cache\n+     */\n+    private final Map<String, String> iconDataUrls = new ConcurrentHashMap<>();\n+\n+\n+    public LocalIcons(VendorIcons vendorIcons) {\n+\n+        this.vendorIcons = vendorIcons;\n+        defaultIcon = getIconUrl(DEFAULT_ICON.getIcon(), false);\n+    }\n+\n+    public String getIconUrl(Item item) {\n+\n+        //icon label based\n+        String icon = item.getIcon();\n+        if (!StringUtils.isEmpty(icon)) {\n+\n+            if (icon.startsWith(VendorIcons.VENDOR_PREFIX)) {\n+                String key = icon.replace(VendorIcons.VENDOR_PREFIX, \"\").toLowerCase();\n+                return vendorIcons.getUrl(key).orElse(defaultIcon);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY3Nzk1NQ=="}, "originalCommit": {"oid": "59592cb85661e0ca2af25d725c86fa3170b27122"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjg0MzU1MQ==", "bodyText": "refactored.", "url": "https://github.com/dedica-team/nivio/pull/320#discussion_r506843551", "createdAt": "2020-10-17T07:05:58Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/icons/LocalIcons.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package de.bonndan.nivio.output.icons;\n+\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.Label;\n+import de.bonndan.nivio.util.URLHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.StringUtils;\n+\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static de.bonndan.nivio.output.icons.IconMapping.DEFAULT_ICON;\n+\n+/**\n+ * Provides icons and vendor icons as data.\n+ *\n+ *\n+ */\n+@Service\n+public class LocalIcons {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LocalIcons.class);\n+\n+    private final VendorIcons vendorIcons;\n+\n+    /**\n+     * default icon data url\n+     */\n+    private final String defaultIcon;\n+\n+    /**\n+     * data url cache\n+     */\n+    private final Map<String, String> iconDataUrls = new ConcurrentHashMap<>();\n+\n+\n+    public LocalIcons(VendorIcons vendorIcons) {\n+\n+        this.vendorIcons = vendorIcons;\n+        defaultIcon = getIconUrl(DEFAULT_ICON.getIcon(), false);\n+    }\n+\n+    public String getIconUrl(Item item) {\n+\n+        //icon label based\n+        String icon = item.getIcon();\n+        if (!StringUtils.isEmpty(icon)) {\n+\n+            if (icon.startsWith(VendorIcons.VENDOR_PREFIX)) {\n+                String key = icon.replace(VendorIcons.VENDOR_PREFIX, \"\").toLowerCase();\n+                return vendorIcons.getUrl(key).orElse(defaultIcon);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY3Nzk1NQ=="}, "originalCommit": {"oid": "59592cb85661e0ca2af25d725c86fa3170b27122"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MzYwMTQ5OnYy", "diffSide": "RIGHT", "path": "src/main/app/copy-icons.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOToyOTo1NlrOHjNWKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxOTozODoxOVrOHjNkBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4MDg3Mg==", "bodyText": "This is what you mean with \"cp\"?\nI checked the build with Windows 10, it works fine. I will now check with MacOS.", "url": "https://github.com/dedica-team/nivio/pull/320#discussion_r506680872", "createdAt": "2020-10-16T19:29:56Z", "author": {"login": "mfbieber"}, "path": "src/main/app/copy-icons.js", "diffHunk": "@@ -0,0 +1,7 @@\n+#!/usr/bin/env node\n+const fs = require('fs-extra');\n+\n+// Async with promises: \n+fs.copy('node_modules/@mdi/svg/svg', '../resources/static/icons/svg')\n+    .then(() => console.log('Icons copied successfully!'))\n+    .catch(err => console.error(err));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12cd83f43de735514220878172fb6ec5509cdd66"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4Mzc1Ng==", "bodyText": "\"cp\" is not used anymore. This is copied production code.", "url": "https://github.com/dedica-team/nivio/pull/320#discussion_r506683756", "createdAt": "2020-10-16T19:36:55Z", "author": {"login": "bonndan"}, "path": "src/main/app/copy-icons.js", "diffHunk": "@@ -0,0 +1,7 @@\n+#!/usr/bin/env node\n+const fs = require('fs-extra');\n+\n+// Async with promises: \n+fs.copy('node_modules/@mdi/svg/svg', '../resources/static/icons/svg')\n+    .then(() => console.log('Icons copied successfully!'))\n+    .catch(err => console.error(err));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4MDg3Mg=="}, "originalCommit": {"oid": "12cd83f43de735514220878172fb6ec5509cdd66"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4NDQyMQ==", "bodyText": "Fine, I did not find \"cp\", I am checking with MacOS anyways :)", "url": "https://github.com/dedica-team/nivio/pull/320#discussion_r506684421", "createdAt": "2020-10-16T19:38:19Z", "author": {"login": "mfbieber"}, "path": "src/main/app/copy-icons.js", "diffHunk": "@@ -0,0 +1,7 @@\n+#!/usr/bin/env node\n+const fs = require('fs-extra');\n+\n+// Async with promises: \n+fs.copy('node_modules/@mdi/svg/svg', '../resources/static/icons/svg')\n+    .then(() => console.log('Icons copied successfully!'))\n+    .catch(err => console.error(err));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjY4MDg3Mg=="}, "originalCommit": {"oid": "12cd83f43de735514220878172fb6ec5509cdd66"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NTI2NDkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/icons/IconService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMjo1MTowMlrOHjdLTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxMjo1MTowMlrOHjdLTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk0MDIzOA==", "bodyText": "This is a lot better \ud83d\udc4d", "url": "https://github.com/dedica-team/nivio/pull/320#discussion_r506940238", "createdAt": "2020-10-17T12:51:02Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/icons/IconService.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package de.bonndan.nivio.output.icons;\n+\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.Label;\n+import org.springframework.lang.Nullable;\n+import org.springframework.stereotype.Service;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.Optional;\n+\n+\n+/**\n+ * Provides the builtin icons (shipped with nivio) and vendor icons (loaded form remote locations) as embeddable data.\n+ *\n+ *\n+ */\n+@Service\n+public class IconService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f17ed33e2a3d5e1beba53f1a94eed216d92425b"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4044, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}