{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1NDI3MjY0", "number": 327, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyMzowMFrOEvgnFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTo1ODo0M1rOEyGpNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjUyODIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/model/ServiceInterface.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyMzowMFrOHkiKrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNTowNjo1OVrOHkqzGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MDU3Mw==", "bodyText": "About the TODO, that was mine I think :D The first one ItemFactory, the second one, no one. What do we need it for?", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r508070573", "createdAt": "2020-10-19T21:23:00Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/model/ServiceInterface.java", "diffHunk": "@@ -18,7 +18,6 @@\n     public ServiceInterface() {\n     }\n \n-    //TODO: who uses these constructors?\n     public ServiceInterface(InterfaceDescription interfaceItem) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f49c14f63c2aa7406749bd590a3c5175f38c7a4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIxMTk5NA==", "bodyText": "The other way round: the first one is unused. I have removed it now.", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r508211994", "createdAt": "2020-10-20T05:06:59Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/model/ServiceInterface.java", "diffHunk": "@@ -18,7 +18,6 @@\n     public ServiceInterface() {\n     }\n \n-    //TODO: who uses these constructors?\n     public ServiceInterface(InterfaceDescription interfaceItem) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MDU3Mw=="}, "originalCommit": {"oid": "8f49c14f63c2aa7406749bd590a3c5175f38c7a4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjU0ODM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/Color.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyOToyM1rOHkiWzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMToyOToyM1rOHkiWzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3MzY3Ng==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r508073676", "createdAt": "2020-10-19T21:29:23Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/Color.java", "diffHunk": "@@ -52,11 +52,14 @@ public static String getGroupColor(Item item) {\n     }\n \n     public static String getGroupColor(String name, Landscape landscape) {\n-        Group g = landscape.getGroup(name).orElse(landscape.getGroup(Group.COMMON).get()); //TODO: optional.get() without ifPresent check\n+        Group g = landscape.getGroup(name).orElse(landscape.getGroup(Group.COMMON).orElse(null));\n         return getGroupColor(g);\n     }\n \n     public static String getGroupColor(Group group) {\n+        if (group == null) {\n+            return Color.DARKGRAY;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f49c14f63c2aa7406749bd590a3c5175f38c7a4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjU3NzM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/Renderer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTozODo1NlrOHkioUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNToxNToyN1rOHkq8OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3ODE2Mg==", "bodyText": "I just checked the usage of this method (I tend to do such things while reviewing :D), my IDE shows me no usage - is this correct, or what was it intended for?", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r508078162", "createdAt": "2020-10-19T21:38:56Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/Renderer.java", "diffHunk": "@@ -12,7 +12,7 @@\n  */\n public interface Renderer<T> {\n \n-    T render(LayoutedComponent landscape);\n+    T render(LayoutedComponent layoutedComponent, boolean debug);\n \n-    void render(LayoutedComponent landscape, File file) throws IOException;\n+    void render(LayoutedComponent landscape, File file, boolean debug) throws IOException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f49c14f63c2aa7406749bd590a3c5175f38c7a4"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIxNDMyOQ==", "bodyText": "I've added some documentation to the interface which hopefully explains my intention. Although the second method is not used yet, I'd like to keep it. There have been different renderers before (e.g. png binary output), and maybe there will be others (3D stuff?).", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r508214329", "createdAt": "2020-10-20T05:15:27Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/Renderer.java", "diffHunk": "@@ -12,7 +12,7 @@\n  */\n public interface Renderer<T> {\n \n-    T render(LayoutedComponent landscape);\n+    T render(LayoutedComponent layoutedComponent, boolean debug);\n \n-    void render(LayoutedComponent landscape, File file) throws IOException;\n+    void render(LayoutedComponent landscape, File file, boolean debug) throws IOException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3ODE2Mg=="}, "originalCommit": {"oid": "8f49c14f63c2aa7406749bd590a3c5175f38c7a4"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjU4MTE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/map/MapController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMTo0MDoxMVrOHkiqgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNToxNjo0NVrOHkq9nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3ODcyMQ==", "bodyText": "Do we have a switch in the frontend to trigger the debug view?", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r508078721", "createdAt": "2020-10-19T21:40:11Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/map/MapController.java", "diffHunk": "@@ -33,14 +30,16 @@ public MapController(LandscapeRepository landscapeRepository, RenderCache render\n \n     @CrossOrigin(methods = RequestMethod.GET)\n     @RequestMapping(method = RequestMethod.GET, path = \"/{landscape}/\" + MAP_SVG_ENDPOINT)\n-    public ResponseEntity<String> svg(@PathVariable(name = \"landscape\") final String landscapeIdentifier) {\n+    public ResponseEntity<String> svg(@PathVariable(name = \"landscape\") final String landscapeIdentifier,\n+                                      @RequestParam(value = \"debug\", required = false, defaultValue = \"false\") boolean debug\n+    ) {\n         Landscape landscape = getLandscape(landscapeIdentifier);\n \n         try {\n             HttpHeaders headers = new HttpHeaders();\n             headers.add(HttpHeaders.CONTENT_TYPE, \"image/svg+xml\");\n             return new ResponseEntity<>(\n-                    renderCache.getSVG(landscape),\n+                    renderCache.getSVG(landscape, debug),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f49c14f63c2aa7406749bd590a3c5175f38c7a4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIxNDY4Nw==", "bodyText": "Yes, the svg map endpoint accepts a request param. However, I'd like to keep it hidden for now.", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r508214687", "createdAt": "2020-10-20T05:16:45Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/map/MapController.java", "diffHunk": "@@ -33,14 +30,16 @@ public MapController(LandscapeRepository landscapeRepository, RenderCache render\n \n     @CrossOrigin(methods = RequestMethod.GET)\n     @RequestMapping(method = RequestMethod.GET, path = \"/{landscape}/\" + MAP_SVG_ENDPOINT)\n-    public ResponseEntity<String> svg(@PathVariable(name = \"landscape\") final String landscapeIdentifier) {\n+    public ResponseEntity<String> svg(@PathVariable(name = \"landscape\") final String landscapeIdentifier,\n+                                      @RequestParam(value = \"debug\", required = false, defaultValue = \"false\") boolean debug\n+    ) {\n         Landscape landscape = getLandscape(landscapeIdentifier);\n \n         try {\n             HttpHeaders headers = new HttpHeaders();\n             headers.add(HttpHeaders.CONTENT_TYPE, \"image/svg+xml\");\n             return new ResponseEntity<>(\n-                    renderCache.getSVG(landscape),\n+                    renderCache.getSVG(landscape, debug),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3ODcyMQ=="}, "originalCommit": {"oid": "8f49c14f63c2aa7406749bd590a3c5175f38c7a4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjY1NDczOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjowNToxMFrOHkjV5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjowNToxMFrOHkjV5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA4OTgzMA==", "bodyText": "This logic is hard to review. Maybe it is best if we talk this through in a call?\nAre our tests good enough? I saw that you did not need to make many changes there :)", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r508089830", "createdAt": "2020-10-19T22:05:10Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "diffHunk": "@@ -34,37 +35,57 @@\n \n         Set<Item> items = group.getItems();\n         Set<Hex> inArea = new HashSet<>();\n+        List<Item> connected = new ArrayList<>();\n \n+        if (!items.iterator().hasNext()) {\n+            LOGGER.warn(\"Could not determine group area for group {}\", group);\n+            return inArea;\n+        }\n         //surround each item\n-        items.forEach(item -> {\n-            Hex hex = allVertexHexes.get(item);\n+        Item next = items.iterator().next();\n+        while (next != null) {\n+\n+            LOGGER.debug(\"adding {} to group area\", next);\n+            Hex hex = allVertexHexes.get(next);\n             inArea.add(hex);\n             hex.neighbours().forEach(neigh -> {\n                 if (!occupied.contains(neigh))\n                     inArea.add(neigh);\n             });\n \n-            Set<Hex> closestNeighbours = getClosestItemsHexes(item, items, allVertexHexes);\n+            Optional<Item> closest = getClosestItem(next, items, allVertexHexes, connected);\n+            if (closest.isEmpty()) {\n+                LOGGER.debug(\"no closest item found for {}\", next);\n+                break;\n+            }\n+\n             // we dont care for occupied tiles here, since we just want the closest item within group, and non-group\n             // items cannot be anywhere nearby (other types of obstacles do not exist yet)\n             PathFinder pathFinder = new PathFinder(Set.of());\n-            closestNeighbours.forEach(neighbour -> {\n-                Optional<HexPath> path = pathFinder.getPath(hex, neighbour);\n-                if (path.isEmpty()) {\n-                    return;\n-                }\n+\n+            Hex destination = allVertexHexes.get(closest.get());\n+            Optional<HexPath> path = pathFinder.getPath(hex, destination);\n+            if (path.isPresent()) {\n                 Set<Hex> padded = new HashSet<>(); //pad to avoid thin bridges, also workaround for svh outline issue\n                 path.get().getHexes().forEach(pathTile -> {\n                     padded.add(pathTile);\n                     padded.addAll(pathTile.neighbours());\n                 });\n                 padded.stream().filter(hex1 -> !occupied.contains(hex1)).forEach(inArea::add);\n-            });\n+            }\n \n-        });\n+            connected.add(next);\n+            // stop if the next one has been connected already\n+            next = connected.contains(closest.get()) ? null : closest.get();\n+        }\n+\n+        // adding hexes with many sides adjacent to group area until no more can be added\n \n-        Set<Hex> bridges = getBridges(inArea);\n-        inArea.addAll(bridges);\n+        Set<Hex> bridges = getBridges(inArea, 2);\n+        while (!bridges.isEmpty()) {\n+            inArea.addAll(bridges);\n+            bridges = getBridges(inArea, 3); // 2 might be too aggressive and collide with other group areas\n+        }\n \n         return inArea;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f49c14f63c2aa7406749bd590a3c5175f38c7a4"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjY3OTk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjoxNDozM1rOHkjk0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNToxOTowM1rOHkrAJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5MzY0OA==", "bodyText": "Where does the necesity of the AtomicReference arise? What could (concurrently) change/read that reference?", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r508093648", "createdAt": "2020-10-19T22:14:33Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "diffHunk": "@@ -75,41 +96,42 @@\n      * @param item           the current group item\n      * @param items          all group items\n      * @param allVertexHexes item hex mapping\n+     * @param connected\n      * @return the closest neighbours\n      */\n-    private static Set<Hex> getClosestItemsHexes(Item item, Set<Item> items, Map<Item, Hex> allVertexHexes) {\n+    private static Optional<Item> getClosestItem(Item item, Set<Item> items, Map<Item, Hex> allVertexHexes, List<Item> connected) {\n         Hex start = allVertexHexes.get(item);\n         AtomicInteger minDist = new AtomicInteger(Integer.MAX_VALUE);\n-        final Set<Hex> min = new HashSet<>();\n+        AtomicReference<Item> min = new AtomicReference<>(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f49c14f63c2aa7406749bd590a3c5175f38c7a4"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIxNTMzMg==", "bodyText": "It's the stream below which requires a (effectively) final variable.", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r508215332", "createdAt": "2020-10-20T05:19:03Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "diffHunk": "@@ -75,41 +96,42 @@\n      * @param item           the current group item\n      * @param items          all group items\n      * @param allVertexHexes item hex mapping\n+     * @param connected\n      * @return the closest neighbours\n      */\n-    private static Set<Hex> getClosestItemsHexes(Item item, Set<Item> items, Map<Item, Hex> allVertexHexes) {\n+    private static Optional<Item> getClosestItem(Item item, Set<Item> items, Map<Item, Hex> allVertexHexes, List<Item> connected) {\n         Hex start = allVertexHexes.get(item);\n         AtomicInteger minDist = new AtomicInteger(Integer.MAX_VALUE);\n-        final Set<Hex> min = new HashSet<>();\n+        AtomicReference<Item> min = new AtomicReference<>(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5MzY0OA=="}, "originalCommit": {"oid": "8f49c14f63c2aa7406749bd590a3c5175f38c7a4"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjY4Mzc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/map/svg/SVGBackgroundFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjoxNTo0NlrOHkjnAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjoxNTo0NlrOHkjnAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5NDIxMQ==", "bodyText": "This is also tough to review, we could discuss this in a call.\nI did not find a test for this \ud83d\ude28, we should have one!", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r508094211", "createdAt": "2020-10-19T22:15:46Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/map/svg/SVGBackgroundFactory.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package de.bonndan.nivio.output.map.svg;\n+\n+import de.bonndan.nivio.output.map.hex.Hex;\n+import j2html.tags.ContainerTag;\n+\n+import java.awt.geom.Point2D;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static java.lang.Math.round;\n+\n+public class SVGBackgroundFactory {\n+\n+    private static final String HEX = \"hex\";\n+\n+    public static ContainerTag getHex() {\n+        ContainerTag fullHex = (ContainerTag) new SVGHex(new Hex(0, 0), \"none\", \"#cccccc\")\n+                .render();\n+        fullHex.attr(\"id\", \"hex\");\n+        return fullHex;\n+    }\n+\n+    public static List<ContainerTag> getBackgroundTiles(int minQ, int maxQ, int minR, int maxR, int height) {\n+        //render background hexes\n+        List<ContainerTag> background = new ArrayList<>();\n+        var i = 0;\n+        for (int q = minQ; q <= maxQ; q++) {\n+            for (int r = minR - i; r < (maxR + maxQ - q); r++) {\n+                Point2D.Double hex = new Hex(q, r).toPixel();\n+                float y = round((hex.y + 146)*10f)/10f ; //TODO why 146? without this bg hexes are displaced\n+                if (y < 0 || y > height) continue;\n+                ContainerTag use = SvgTagCreator.use(\"#\" + HEX)\n+                        .attr(\"x\", (int) hex.x - 2 * Hex.HEX_SIZE)\n+                        .attr(\"y\", y);\n+                background.add(use);\n+            }\n+            i++;\n+        }\n+\n+        return background;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f49c14f63c2aa7406749bd590a3c5175f38c7a4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjY5MDEwOnYy", "diffSide": "LEFT", "path": "src/main/java/de/bonndan/nivio/output/map/svg/SVGDocument.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjoxODoxOFrOHkjq-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNToxOTo0MlrOHkrBAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5NTIyNA==", "bodyText": "Is this the logic we now have in SVGBackgroundFactory?", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r508095224", "createdAt": "2020-10-19T22:18:18Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/map/svg/SVGDocument.java", "diffHunk": "@@ -120,16 +123,14 @@ public DomContent render() {\n         }).collect(Collectors.toList());\n \n         //render background hexes\n-        var i = 0;\n-        for (int q = minQ.get(); q <= maxQ.get(); q++) {\n-            for (int r = minR.get() - i; r <= (maxR.get() + (maxQ.get())); r++) {\n-                background.add(new SVGHex(new Hex(q, r), \"none\", \"#cccccc\").render());\n-            }\n-            i++;\n-        }\n-\n-        int paddingTopLeft = 2 * Hex.HEX_SIZE;\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f49c14f63c2aa7406749bd590a3c5175f38c7a4"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIxNTU1Mw==", "bodyText": "Yes", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r508215553", "createdAt": "2020-10-20T05:19:42Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/map/svg/SVGDocument.java", "diffHunk": "@@ -120,16 +123,14 @@ public DomContent render() {\n         }).collect(Collectors.toList());\n \n         //render background hexes\n-        var i = 0;\n-        for (int q = minQ.get(); q <= maxQ.get(); q++) {\n-            for (int r = minR.get() - i; r <= (maxR.get() + (maxQ.get())); r++) {\n-                background.add(new SVGHex(new Hex(q, r), \"none\", \"#cccccc\").render());\n-            }\n-            i++;\n-        }\n-\n-        int paddingTopLeft = 2 * Hex.HEX_SIZE;\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5NTIyNA=="}, "originalCommit": {"oid": "8f49c14f63c2aa7406749bd590a3c5175f38c7a4"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MjY5NDg1OnYy", "diffSide": "LEFT", "path": "src/main/java/de/bonndan/nivio/output/map/svg/SVGItemLabel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQyMjoyMDowMVrOHkjtiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNTo0Mjo1OVrOHkrdgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5NTg4Mw==", "bodyText": "Why don't we need this anymore?", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r508095883", "createdAt": "2020-10-19T22:20:01Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/map/svg/SVGItemLabel.java", "diffHunk": "@@ -2,60 +2,39 @@\n \n import de.bonndan.nivio.model.FullyQualifiedIdentifier;\n import de.bonndan.nivio.model.Item;\n-import de.bonndan.nivio.model.Labeled;\n import j2html.tags.ContainerTag;\n import j2html.tags.DomContent;\n import org.springframework.util.StringUtils;\n \n-import java.util.Map;\n-\n import static de.bonndan.nivio.output.map.svg.SVGRenderer.DEFAULT_ICON_SIZE;\n \n+/**\n+ *\n+ */\n class SVGItemLabel extends Component {\n \n-    public static final int LABEL_WIDTH = 140;\n-    public static final int CORNER_RADIUS = 10;\n-    private final Item item;\n-    private int width;\n+    private final String name;\n+    private final String id;\n+    private final String identifier;\n \n     SVGItemLabel(Item item) {\n-        this.item = item;\n-        this.width = LABEL_WIDTH;\n+        name = StringUtils.isEmpty(item.getName()) ? item.getIdentifier() : item.getName();\n+        id = getId(item);\n+        identifier = item.getFullyQualifiedIdentifier().jsonValue();\n     }\n \n     public DomContent render() {\n-        String name = StringUtils.isEmpty(item.getName()) ? item.getIdentifier() : item.getName();\n-        ContainerTag labelText = new SVGLabelText(name, DEFAULT_ICON_SIZE * 2 + 15 + \"\", \"0\", \"itemLabel\").render();\n \n-        //TODO this is naive\n-        if (name.length() < 10) {\n-            this.width = 100;\n-        }\n-        if (name.length() > 19) {\n-            this.width = 200;\n-        }\n+        ContainerTag labelText = new SVGLabelText(name, \"0\", 2 * DEFAULT_ICON_SIZE + 30 + \"\", \"itemLabel\").render();\n \n         ContainerTag g = SvgTagCreator.g(null, labelText).attr(\"class\", \"label\");\n-        g.attr(\"id\", getId());\n-        g.attr(\"data-identifier\", item.getFullyQualifiedIdentifier().jsonValue());\n-        if (!StringUtils.isEmpty(item.getName()))\n-            g.attr(\"data-name\", item.getName());\n-        if (!StringUtils.isEmpty(item.getDescription()))\n-            g.attr(\"data-description\", item.getDescription());\n-        if (!StringUtils.isEmpty(item.getOwner()))\n-            g.attr(\"data-owner\", item.getOwner());\n-\n-        Map<String, String> groupedLabels = Labeled.groupedByPrefixes(item.getLabels());\n-        groupedLabels.forEach((key, value) -> {\n-            if (!StringUtils.isEmpty(value)) {\n-                g.attr(\"data-\" + key, value);\n-            }\n-        });\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f49c14f63c2aa7406749bd590a3c5175f38c7a4"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIyMjg0OQ==", "bodyText": "My initial idea was to stuff as much data into the svg as possible, so that data can be retrieved by any post-processors without the need to call nivio again. This is required yet and comes at the cost of large file sizes, so I think it's better to remove it for now.", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r508222849", "createdAt": "2020-10-20T05:42:59Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/map/svg/SVGItemLabel.java", "diffHunk": "@@ -2,60 +2,39 @@\n \n import de.bonndan.nivio.model.FullyQualifiedIdentifier;\n import de.bonndan.nivio.model.Item;\n-import de.bonndan.nivio.model.Labeled;\n import j2html.tags.ContainerTag;\n import j2html.tags.DomContent;\n import org.springframework.util.StringUtils;\n \n-import java.util.Map;\n-\n import static de.bonndan.nivio.output.map.svg.SVGRenderer.DEFAULT_ICON_SIZE;\n \n+/**\n+ *\n+ */\n class SVGItemLabel extends Component {\n \n-    public static final int LABEL_WIDTH = 140;\n-    public static final int CORNER_RADIUS = 10;\n-    private final Item item;\n-    private int width;\n+    private final String name;\n+    private final String id;\n+    private final String identifier;\n \n     SVGItemLabel(Item item) {\n-        this.item = item;\n-        this.width = LABEL_WIDTH;\n+        name = StringUtils.isEmpty(item.getName()) ? item.getIdentifier() : item.getName();\n+        id = getId(item);\n+        identifier = item.getFullyQualifiedIdentifier().jsonValue();\n     }\n \n     public DomContent render() {\n-        String name = StringUtils.isEmpty(item.getName()) ? item.getIdentifier() : item.getName();\n-        ContainerTag labelText = new SVGLabelText(name, DEFAULT_ICON_SIZE * 2 + 15 + \"\", \"0\", \"itemLabel\").render();\n \n-        //TODO this is naive\n-        if (name.length() < 10) {\n-            this.width = 100;\n-        }\n-        if (name.length() > 19) {\n-            this.width = 200;\n-        }\n+        ContainerTag labelText = new SVGLabelText(name, \"0\", 2 * DEFAULT_ICON_SIZE + 30 + \"\", \"itemLabel\").render();\n \n         ContainerTag g = SvgTagCreator.g(null, labelText).attr(\"class\", \"label\");\n-        g.attr(\"id\", getId());\n-        g.attr(\"data-identifier\", item.getFullyQualifiedIdentifier().jsonValue());\n-        if (!StringUtils.isEmpty(item.getName()))\n-            g.attr(\"data-name\", item.getName());\n-        if (!StringUtils.isEmpty(item.getDescription()))\n-            g.attr(\"data-description\", item.getDescription());\n-        if (!StringUtils.isEmpty(item.getOwner()))\n-            g.attr(\"data-owner\", item.getOwner());\n-\n-        Map<String, String> groupedLabels = Labeled.groupedByPrefixes(item.getLabels());\n-        groupedLabels.forEach((key, value) -> {\n-            if (!StringUtils.isEmpty(value)) {\n-                g.attr(\"data-\" + key, value);\n-            }\n-        });\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA5NTg4Mw=="}, "originalCommit": {"oid": "8f49c14f63c2aa7406749bd590a3c5175f38c7a4"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTY4MjU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTo0MjozN1rOHojg_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMToxODozM1rOHqXNbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI4Njk3NQ==", "bodyText": "Which special functionality provided by the BidiMap data structure are we using? I have only seen getKey() and containsKey(). If that is so, why isn't that just the value in a normal Map structure?", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r512286975", "createdAt": "2020-10-26T21:42:37Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "diffHunk": "@@ -26,95 +28,112 @@\n      * <p>\n      * There is clearly much room for improvement here. It's only that I haven't found a better approach so far.\n      *\n-     * @param occupied       tiles occupied by items\n-     * @param group          the group\n-     * @param allVertexHexes a mapping from item to its hex (all, unfiltered)\n+     * @param hexesToItems tiles occupied by items\n+     * @param group        the group\n      * @return all hexes the group consists of (an area)\n      */\n-    public static Set<Hex> getGroup(Set<Hex> occupied, Group group, Map<Item, Hex> allVertexHexes) {\n+    public static Set<Hex> getGroup(BidiMap<Hex, Object> hexesToItems, Group group) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f8818a07a7e18f90aa456adc8ecd26bbcef7ee"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE4MjUxMQ==", "bodyText": "Excellent observation. It has been refactored.", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r514182511", "createdAt": "2020-10-29T11:18:33Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "diffHunk": "@@ -26,95 +28,112 @@\n      * <p>\n      * There is clearly much room for improvement here. It's only that I haven't found a better approach so far.\n      *\n-     * @param occupied       tiles occupied by items\n-     * @param group          the group\n-     * @param allVertexHexes a mapping from item to its hex (all, unfiltered)\n+     * @param hexesToItems tiles occupied by items\n+     * @param group        the group\n      * @return all hexes the group consists of (an area)\n      */\n-    public static Set<Hex> getGroup(Set<Hex> occupied, Group group, Map<Item, Hex> allVertexHexes) {\n+    public static Set<Hex> getGroup(BidiMap<Hex, Object> hexesToItems, Group group) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI4Njk3NQ=="}, "originalCommit": {"oid": "09f8818a07a7e18f90aa456adc8ecd26bbcef7ee"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTY4OTc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTo0NDo1NVrOHojlQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTo0NDo1NVrOHojlQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI4ODA2Nw==", "bodyText": "Great! Extracting this into an own method makes everything better readable and understandable \ud83d\ude04", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r512288067", "createdAt": "2020-10-26T21:44:55Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "diffHunk": "@@ -26,95 +28,112 @@\n      * <p>\n      * There is clearly much room for improvement here. It's only that I haven't found a better approach so far.\n      *\n-     * @param occupied       tiles occupied by items\n-     * @param group          the group\n-     * @param allVertexHexes a mapping from item to its hex (all, unfiltered)\n+     * @param hexesToItems tiles occupied by items\n+     * @param group        the group\n      * @return all hexes the group consists of (an area)\n      */\n-    public static Set<Hex> getGroup(Set<Hex> occupied, Group group, Map<Item, Hex> allVertexHexes) {\n+    public static Set<Hex> getGroup(BidiMap<Hex, Object> hexesToItems, Group group) {\n \n         Set<Item> items = group.getItems();\n         Set<Hex> inArea = new HashSet<>();\n-        List<Item> connected = new ArrayList<>();\n \n         if (!items.iterator().hasNext()) {\n             LOGGER.warn(\"Could not determine group area for group {}\", group);\n             return inArea;\n         }\n-        //surround each item\n+\n+        //build the area by adding paths\n+        addPathsBetweenClosestItems(hexesToItems, items, inArea);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f8818a07a7e18f90aa456adc8ecd26bbcef7ee"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTcyNDY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/map/svg/SVGBackgroundFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTo1NjozM1rOHoj5nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTo1OTowOFrOHrINhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5MzI3OQ==", "bodyText": "What technical debt do you think that we are collecting here? For me it is just that I don't really understand what is going on (but I also haven't fully understood the other rendering logics).", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r512293279", "createdAt": "2020-10-26T21:56:33Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/map/svg/SVGBackgroundFactory.java", "diffHunk": "@@ -9,6 +9,11 @@\n \n import static java.lang.Math.round;\n \n+/**\n+ * This generates the background hex tiles.\n+ *\n+ * TODO It is a bad bank for technical debt.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f8818a07a7e18f90aa456adc8ecd26bbcef7ee"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzNDYwOQ==", "bodyText": "Here we produce hundreds of hexagons to display them in the background. There is no real added value and no business logic, but the designer suggested it like that.", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r512934609", "createdAt": "2020-10-27T18:31:19Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/map/svg/SVGBackgroundFactory.java", "diffHunk": "@@ -9,6 +9,11 @@\n \n import static java.lang.Math.round;\n \n+/**\n+ * This generates the background hex tiles.\n+ *\n+ * TODO It is a bad bank for technical debt.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5MzI3OQ=="}, "originalCommit": {"oid": "09f8818a07a7e18f90aa456adc8ecd26bbcef7ee"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE4MjMwMA==", "bodyText": "I have refactored it a bit and added some comments.", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r514182300", "createdAt": "2020-10-29T11:18:08Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/map/svg/SVGBackgroundFactory.java", "diffHunk": "@@ -9,6 +9,11 @@\n \n import static java.lang.Math.round;\n \n+/**\n+ * This generates the background hex tiles.\n+ *\n+ * TODO It is a bad bank for technical debt.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5MzI3OQ=="}, "originalCommit": {"oid": "09f8818a07a7e18f90aa456adc8ecd26bbcef7ee"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk4NTM1MQ==", "bodyText": "Nice, it is better readble now!", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r514985351", "createdAt": "2020-10-30T09:59:08Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/map/svg/SVGBackgroundFactory.java", "diffHunk": "@@ -9,6 +9,11 @@\n \n import static java.lang.Math.round;\n \n+/**\n+ * This generates the background hex tiles.\n+ *\n+ * TODO It is a bad bank for technical debt.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5MzI3OQ=="}, "originalCommit": {"oid": "09f8818a07a7e18f90aa456adc8ecd26bbcef7ee"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTczMTA4OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/bonndan/nivio/output/map/hex/GroupAreaFactoryTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTo1ODo0M1rOHoj9eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTo1MzoxM1rOHrIAnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5NDI2Ng==", "bodyText": "Do these tests cover the logic of finding the closest items and the correct occupation of tiles as implemented in the methods getGroup(), addPathsBetweenClosestItems(), getClosestItem() and getBridges()?", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r512294266", "createdAt": "2020-10-26T21:58:43Z", "author": {"login": "mfbieber"}, "path": "src/test/java/de/bonndan/nivio/output/map/hex/GroupAreaFactoryTest.java", "diffHunk": "@@ -2,12 +2,15 @@\n \n import de.bonndan.nivio.model.*;\n import de.bonndan.nivio.output.map.svg.HexPath;\n+import org.apache.commons.collections4.BidiMap;\n+import org.apache.commons.collections4.bidimap.DualHashBidiMap;\n import org.apache.commons.collections4.set.UnmodifiableSet;\n import org.junit.jupiter.api.Test;\n \n import java.util.*;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.in;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n class GroupAreaFactoryTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09f8818a07a7e18f90aa456adc8ecd26bbcef7ee"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkzNTgwMA==", "bodyText": "Yes, but it's more like a blackbox test, i.e. we do not test the exact behaviour, but the outcome.", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r512935800", "createdAt": "2020-10-27T18:33:21Z", "author": {"login": "bonndan"}, "path": "src/test/java/de/bonndan/nivio/output/map/hex/GroupAreaFactoryTest.java", "diffHunk": "@@ -2,12 +2,15 @@\n \n import de.bonndan.nivio.model.*;\n import de.bonndan.nivio.output.map.svg.HexPath;\n+import org.apache.commons.collections4.BidiMap;\n+import org.apache.commons.collections4.bidimap.DualHashBidiMap;\n import org.apache.commons.collections4.set.UnmodifiableSet;\n import org.junit.jupiter.api.Test;\n \n import java.util.*;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.in;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n class GroupAreaFactoryTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5NDI2Ng=="}, "originalCommit": {"oid": "09f8818a07a7e18f90aa456adc8ecd26bbcef7ee"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk4MjA0NA==", "bodyText": "Okay, is it hard to add tests for the steps in between? The problem to me is, that it is hard to understand what is going on and also hard to refactor if we only have blackbox tests :-/", "url": "https://github.com/dedica-team/nivio/pull/327#discussion_r514982044", "createdAt": "2020-10-30T09:53:13Z", "author": {"login": "mfbieber"}, "path": "src/test/java/de/bonndan/nivio/output/map/hex/GroupAreaFactoryTest.java", "diffHunk": "@@ -2,12 +2,15 @@\n \n import de.bonndan.nivio.model.*;\n import de.bonndan.nivio.output.map.svg.HexPath;\n+import org.apache.commons.collections4.BidiMap;\n+import org.apache.commons.collections4.bidimap.DualHashBidiMap;\n import org.apache.commons.collections4.set.UnmodifiableSet;\n import org.junit.jupiter.api.Test;\n \n import java.util.*;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.in;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n \n class GroupAreaFactoryTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI5NDI2Ng=="}, "originalCommit": {"oid": "09f8818a07a7e18f90aa456adc8ecd26bbcef7ee"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4047, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}