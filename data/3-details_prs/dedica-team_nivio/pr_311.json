{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzNjI2MzM2", "number": 311, "title": "307 fix group areas", "bodyText": "closes #307\ncloses #310\ncloses #264\nAlso an important step towards the new design (this is the debug view)", "createdAt": "2020-09-26T20:49:49Z", "url": "https://github.com/dedica-team/nivio/pull/311", "merged": true, "mergeCommit": {"oid": "2a0a1cbb9469a56ccd5e9ab95edc7f5e4c87abf2"}, "closed": true, "closedAt": "2020-10-04T17:07:19Z", "author": {"login": "bonndan"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMm-xcgH2gAyNDkzNjI2MzM2OmVkM2E0N2MwMjE1YmM2Y2Y4NmEyNWM1Y2E5M2UxNmNjZTYxZGUwNmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOKE74gH2gAyNDkzNjI2MzM2OjA3MjQzZDE4MmMyZWFlZTFlY2Q0OWZjZDY4NTVkOTdiYjdmZmU2ZmQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ed3a47c0215bc6cf86a25c5ca93e16cce61de06a", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/ed3a47c0215bc6cf86a25c5ca93e16cce61de06a", "committedDate": "2020-09-26T09:29:17Z", "message": "[#307] fill gaps by adding paths to closest group items"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1c3bcfbbfc807ca4be7a923117e32f5b3c92239", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/a1c3bcfbbfc807ca4be7a923117e32f5b3c92239", "committedDate": "2020-09-26T18:10:33Z", "message": "[#310] fix for glitches in large groups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "112150a8f0fb7b71fe9a0e9b530656456dfc0baf", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/112150a8f0fb7b71fe9a0e9b530656456dfc0baf", "committedDate": "2020-09-26T19:00:25Z", "message": "added more items to common group"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e79fd751386c7085f44f2552a633fdf2712c5252", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/e79fd751386c7085f44f2552a633fdf2712c5252", "committedDate": "2020-09-26T19:01:00Z", "message": "[#310] fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "797c5ba64623e7630d33a439b42e2c6332b379ba", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/797c5ba64623e7630d33a439b42e2c6332b379ba", "committedDate": "2020-09-26T19:03:35Z", "message": "[#310] disabled debug mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd6bee3fdd1ffa49665d6723ce66cbc5e7633274", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/bd6bee3fdd1ffa49665d6723ce66cbc5e7633274", "committedDate": "2020-09-26T19:09:08Z", "message": "[#310] smoother outline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "211b1487ac615047ae6b0a1eff892145b57cdd74", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/211b1487ac615047ae6b0a1eff892145b57cdd74", "committedDate": "2020-09-26T19:12:41Z", "message": "larger map icons"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69ff489152be4e0ec702acf332185d9a3e12663c", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/69ff489152be4e0ec702acf332185d9a3e12663c", "committedDate": "2020-09-26T19:18:00Z", "message": "[#307] higher force constant within groups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f247425063e1de6f43cde01017ab41b8d8c87a0", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/4f247425063e1de6f43cde01017ab41b8d8c87a0", "committedDate": "2020-09-26T19:37:40Z", "message": "larger icons, larger labels at right"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72d33ba340ae5bc51d6e776ec94560bd5706af89", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/72d33ba340ae5bc51d6e776ec94560bd5706af89", "committedDate": "2020-09-26T19:42:47Z", "message": "larger group labels"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d62299c1ce07d5788b2c3b4d4568198a3119baf", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/1d62299c1ce07d5788b2c3b4d4568198a3119baf", "committedDate": "2020-09-26T20:37:55Z", "message": "hexes as background"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3bf56cd559051abc193ce93a7cac7c956d48221", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/a3bf56cd559051abc193ce93a7cac7c956d48221", "committedDate": "2020-09-26T20:43:24Z", "message": "test fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1015de4567f1843d3acc6571cd994eb2e4015be7", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/1015de4567f1843d3acc6571cd994eb2e4015be7", "committedDate": "2020-09-26T20:48:17Z", "message": "text anchor middle if shortname is used instead of icon"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7b8306531b022b7158cd8fc45ead2a336686948", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/d7b8306531b022b7158cd8fc45ead2a336686948", "committedDate": "2020-09-27T09:01:08Z", "message": "[#264] fix pathfinder not choosing best path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6ea7a4cb83b87363dc5e9b8c473f3cfa890cfbb", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/a6ea7a4cb83b87363dc5e9b8c473f3cfa890cfbb", "committedDate": "2020-09-27T09:02:21Z", "message": "[#264] disable debug"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDY4MDMy", "url": "https://github.com/dedica-team/nivio/pull/311#pullrequestreview-497068032", "createdAt": "2020-09-27T09:42:46Z", "commit": {"oid": "a6ea7a4cb83b87363dc5e9b8c473f3cfa890cfbb"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwOTo0Mjo0NlrOHYmKJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QwOTo0NjoyMlrOHYmLfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1MzA2MA==", "bodyText": "Why don't we care?", "url": "https://github.com/dedica-team/nivio/pull/311#discussion_r495553060", "createdAt": "2020-09-27T09:42:46Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "diffHunk": "@@ -18,47 +19,86 @@\n \n     /**\n      * Builds an areas of hex tiles belonging to a group.\n-     *\n+     * <p>\n      * It works as follows: first we circumnavigate all hexes of items and add their neighbours immediately. Then we\n      * iterate over all one-hex gaps and add them. This iteration is repeated, so that effectively a few two-hex gaps are\n      * filled.\n-     *\n+     * <p>\n      * There is clearly much room for improvement here. It's only that I haven't found a better approach so far.\n      *\n-     * @param occupied      tiles occupied by items\n-     * @param group         the group\n-     * @param vertexHexes   a mapping from item to its hex\n-     * @param pathsWithinGroup existing paths\n+     * @param occupied       tiles occupied by items\n+     * @param group          the group\n+     * @param allVertexHexes a mapping from item to its hex (all, unfiltered)\n      * @return all hexes the group consists of (an area)\n      */\n-    public static Set<Hex> getGroup(Set<Hex> occupied, Group group, Map<LandscapeItem, Hex> vertexHexes, List<HexPath> pathsWithinGroup) {\n+    public static Set<Hex> getGroup(Set<Hex> occupied, Group group, Map<LandscapeItem, Hex> allVertexHexes) {\n \n         Set<Item> items = group.getItems();\n         Set<Hex> inArea = new HashSet<>();\n \n         //surround each item\n         items.forEach(item -> {\n-            Hex hex = vertexHexes.get(item);\n+            Hex hex = allVertexHexes.get(item);\n             inArea.add(hex);\n             hex.neighbours().forEach(neigh -> {\n                 if (!occupied.contains(neigh))\n                     inArea.add(neigh);\n             });\n \n-            //add all \"inner\" relations (paths)\n-            pathsWithinGroup.forEach(rel -> inArea.addAll(rel.getHexes()));\n+            Set<Hex> closestNeighbours = getClosestItemsHexes(item, items, allVertexHexes);\n+            PathFinder pathFinder = new PathFinder(Set.of()); //we dont care for occupied tiles here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ea7a4cb83b87363dc5e9b8c473f3cfa890cfbb"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1MzA5OQ==", "bodyText": "Can this be reflected by tests?", "url": "https://github.com/dedica-team/nivio/pull/311#discussion_r495553099", "createdAt": "2020-09-27T09:43:21Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "diffHunk": "@@ -18,47 +19,86 @@\n \n     /**\n      * Builds an areas of hex tiles belonging to a group.\n-     *\n+     * <p>\n      * It works as follows: first we circumnavigate all hexes of items and add their neighbours immediately. Then we\n      * iterate over all one-hex gaps and add them. This iteration is repeated, so that effectively a few two-hex gaps are\n      * filled.\n-     *\n+     * <p>\n      * There is clearly much room for improvement here. It's only that I haven't found a better approach so far.\n      *\n-     * @param occupied      tiles occupied by items\n-     * @param group         the group\n-     * @param vertexHexes   a mapping from item to its hex\n-     * @param pathsWithinGroup existing paths\n+     * @param occupied       tiles occupied by items\n+     * @param group          the group\n+     * @param allVertexHexes a mapping from item to its hex (all, unfiltered)\n      * @return all hexes the group consists of (an area)\n      */\n-    public static Set<Hex> getGroup(Set<Hex> occupied, Group group, Map<LandscapeItem, Hex> vertexHexes, List<HexPath> pathsWithinGroup) {\n+    public static Set<Hex> getGroup(Set<Hex> occupied, Group group, Map<LandscapeItem, Hex> allVertexHexes) {\n \n         Set<Item> items = group.getItems();\n         Set<Hex> inArea = new HashSet<>();\n \n         //surround each item\n         items.forEach(item -> {\n-            Hex hex = vertexHexes.get(item);\n+            Hex hex = allVertexHexes.get(item);\n             inArea.add(hex);\n             hex.neighbours().forEach(neigh -> {\n                 if (!occupied.contains(neigh))\n                     inArea.add(neigh);\n             });\n \n-            //add all \"inner\" relations (paths)\n-            pathsWithinGroup.forEach(rel -> inArea.addAll(rel.getHexes()));\n+            Set<Hex> closestNeighbours = getClosestItemsHexes(item, items, allVertexHexes);\n+            PathFinder pathFinder = new PathFinder(Set.of()); //we dont care for occupied tiles here\n+            closestNeighbours.forEach(neighbour -> {\n+                HexPath path = pathFinder.getPath(hex, neighbour);\n+                Set<Hex> padded = new HashSet<>(); //pad to avoid thin bridges, also workaround for svh outline issue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ea7a4cb83b87363dc5e9b8c473f3cfa890cfbb"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1MzE5Mw==", "bodyText": "Is this logic tested by our tests?", "url": "https://github.com/dedica-team/nivio/pull/311#discussion_r495553193", "createdAt": "2020-09-27T09:44:35Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "diffHunk": "@@ -18,47 +19,86 @@\n \n     /**\n      * Builds an areas of hex tiles belonging to a group.\n-     *\n+     * <p>\n      * It works as follows: first we circumnavigate all hexes of items and add their neighbours immediately. Then we\n      * iterate over all one-hex gaps and add them. This iteration is repeated, so that effectively a few two-hex gaps are\n      * filled.\n-     *\n+     * <p>\n      * There is clearly much room for improvement here. It's only that I haven't found a better approach so far.\n      *\n-     * @param occupied      tiles occupied by items\n-     * @param group         the group\n-     * @param vertexHexes   a mapping from item to its hex\n-     * @param pathsWithinGroup existing paths\n+     * @param occupied       tiles occupied by items\n+     * @param group          the group\n+     * @param allVertexHexes a mapping from item to its hex (all, unfiltered)\n      * @return all hexes the group consists of (an area)\n      */\n-    public static Set<Hex> getGroup(Set<Hex> occupied, Group group, Map<LandscapeItem, Hex> vertexHexes, List<HexPath> pathsWithinGroup) {\n+    public static Set<Hex> getGroup(Set<Hex> occupied, Group group, Map<LandscapeItem, Hex> allVertexHexes) {\n \n         Set<Item> items = group.getItems();\n         Set<Hex> inArea = new HashSet<>();\n \n         //surround each item\n         items.forEach(item -> {\n-            Hex hex = vertexHexes.get(item);\n+            Hex hex = allVertexHexes.get(item);\n             inArea.add(hex);\n             hex.neighbours().forEach(neigh -> {\n                 if (!occupied.contains(neigh))\n                     inArea.add(neigh);\n             });\n \n-            //add all \"inner\" relations (paths)\n-            pathsWithinGroup.forEach(rel -> inArea.addAll(rel.getHexes()));\n+            Set<Hex> closestNeighbours = getClosestItemsHexes(item, items, allVertexHexes);\n+            PathFinder pathFinder = new PathFinder(Set.of()); //we dont care for occupied tiles here\n+            closestNeighbours.forEach(neighbour -> {\n+                HexPath path = pathFinder.getPath(hex, neighbour);\n+                Set<Hex> padded = new HashSet<>(); //pad to avoid thin bridges, also workaround for svh outline issue\n+                path.getHexes().forEach(pathTile -> {\n+                    padded.add(pathTile);\n+                    padded.addAll(pathTile.neighbours());\n+                });\n+                padded.stream().filter(hex1 -> !occupied.contains(hex1)).forEach(inArea::add);\n+            });\n+\n         });\n \n         Set<Hex> bridges = getBridges(inArea);\n         inArea.addAll(bridges);\n \n-        //2nd pass fills gaps\n-        bridges = getBridges(inArea);\n-        inArea.addAll(bridges);\n-\n         return inArea;\n     }\n \n+    /**\n+     * Returns all neighbours in group which are the have same (minimum) distance.\n+     *\n+     * @param item           the current group item\n+     * @param items          all group items\n+     * @param allVertexHexes item hex mapping\n+     * @return the closest neighbours\n+     */\n+    private static Set<Hex> getClosestItemsHexes(Item item, Set<Item> items, Map<LandscapeItem, Hex> allVertexHexes) {\n+        Hex start = allVertexHexes.get(item);\n+        AtomicInteger minDist = new AtomicInteger(Integer.MAX_VALUE);\n+        final Set<Hex> min = new HashSet<>();\n+        items.stream()\n+                .filter(otherGroupItem -> !item.equals(otherGroupItem))\n+                .forEach(otherGroupItem -> {\n+                    Hex dest = allVertexHexes.get(otherGroupItem);\n+                    int distance = start.distance(dest);\n+                    if (distance > minDist.get()) {\n+                        return;\n+                    }\n+                    if (distance == minDist.get()) {\n+                        min.add(dest);\n+                        return;\n+                    }\n+                    if (distance < minDist.get()) {\n+                        minDist.set(distance);\n+                        min.clear();\n+                        min.add(dest);\n+                    }\n+                });\n+\n+        return min;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ea7a4cb83b87363dc5e9b8c473f3cfa890cfbb"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1MzQwNw==", "bodyText": "Where does this magic formula come from? :)", "url": "https://github.com/dedica-team/nivio/pull/311#discussion_r495553407", "createdAt": "2020-09-27T09:46:22Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/Hex.java", "diffHunk": "@@ -65,6 +68,10 @@ public Hex(int q, int r, int s) {\n         this.s = s;\n     }\n \n+    public Hex(int q, int r) {\n+        this(q, r, (r + q) * -1);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6ea7a4cb83b87363dc5e9b8c473f3cfa890cfbb"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "115890dc15a89906b64ebb06b0a83ee730e593c9", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/115890dc15a89906b64ebb06b0a83ee730e593c9", "committedDate": "2020-09-27T10:14:50Z", "message": "[#307] added test to ensure closest item path padding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fe3ab7c3869d5e6fa05f81d6e73d71abcbefcd5", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/2fe3ab7c3869d5e6fa05f81d6e73d71abcbefcd5", "committedDate": "2020-09-27T10:17:54Z", "message": "[#307] added comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MDcyMTky", "url": "https://github.com/dedica-team/nivio/pull/311#pullrequestreview-497072192", "createdAt": "2020-09-27T10:44:51Z", "commit": {"oid": "2fe3ab7c3869d5e6fa05f81d6e73d71abcbefcd5"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxMDo0NDo1MVrOHYmhSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxMDo0NjoyNFrOHYmh9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1ODk4Ng==", "bodyText": "I am trying to really understand this. So I understood that it comes from cube algorithms, and thus s would equal z in a cartesian coordinate system.\nThe comment helps to understand that the formula has something to do with a coordinate system, but it does not explain why z = (x + y) * (-1)\nIn general all these Hex and Layout classes are really hard to understand, without understanding the math and logic behind it.\nInitially we used the linked implementation as a library but then started to implement own logic on top of it, right?\nHaving own complex code, without (me) really understanding what it does makes it hard to review and grow it. Isn't there a possibility to use the library as it was and decorate (or maybe another pattern is better suited) with our own logic? That own logic can be well tested and understandable :)", "url": "https://github.com/dedica-team/nivio/pull/311#discussion_r495558986", "createdAt": "2020-09-27T10:44:51Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/Hex.java", "diffHunk": "@@ -65,6 +68,10 @@ public Hex(int q, int r, int s) {\n         this.s = s;\n     }\n \n+    public Hex(int q, int r) {\n+        this(q, r, (r + q) * -1);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1MzQwNw=="}, "originalCommit": {"oid": "a6ea7a4cb83b87363dc5e9b8c473f3cfa890cfbb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1OTAzOQ==", "bodyText": "Why is the distance the sum of all coordinates divided by 2?", "url": "https://github.com/dedica-team/nivio/pull/311#discussion_r495559039", "createdAt": "2020-09-27T10:45:15Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/Hex.java", "diffHunk": "@@ -103,11 +120,19 @@ public static Hex of(long x, long y, float scaling) {\n         return new Hex(qi, ri, si);\n     }\n \n-\n+    /**\n+     * Returns the distance to the target hex in number of tiles.\n+     *\n+     * @param target target hex\n+     * @return number of tiles\n+     */\n     public int distance(Hex target) {\n-        return lengths(this.subtract(target));\n+        Hex hex = this.subtract(target);\n+        double l = (Math.abs(hex.q) + Math.abs(hex.r) + Math.abs(hex.s)) / 2.0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe3ab7c3869d5e6fa05f81d6e73d71abcbefcd5"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU1OTE1OQ==", "bodyText": "Why doesn't the Pathfinder return an Optional itself?", "url": "https://github.com/dedica-team/nivio/pull/311#discussion_r495559159", "createdAt": "2020-09-27T10:46:24Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/HexMap.java", "diffHunk": "@@ -63,16 +63,7 @@ public Hex hexForItem(Item item) {\n      * @return a path if one could be found\n      */\n     public Optional<HexPath> getPath(Item start, Item target) {\n-        Optional<HexPath> optional = Optional.ofNullable(pathFinder.getPath(hexForItem(start), hexForItem(target)));\n-\n-        optional.ifPresent(hexPath -> {\n-            if (start.getGroup() != null && start.getGroup().equals(target.getGroup())) {\n-                hexPath.setGroup(start.getGroup());\n-            }\n-            paths.add(hexPath);\n-        });\n-\n-        return optional;\n+        return Optional.ofNullable(pathFinder.getPath(hexForItem(start), hexForItem(target)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2fe3ab7c3869d5e6fa05f81d6e73d71abcbefcd5"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cebb6ca1495a8a7fd75deb4fb352ac3950d65ac0", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/cebb6ca1495a8a7fd75deb4fb352ac3950d65ac0", "committedDate": "2020-09-27T11:59:02Z", "message": "[#307] added comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36614dbd078e1b297756fc088a927b04c74e0c68", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/36614dbd078e1b297756fc088a927b04c74e0c68", "committedDate": "2020-09-27T12:25:28Z", "message": "[#307] pathfinder returns optional path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "367da6272ee09e2cbc92c5226892329a56415ea0", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/367da6272ee09e2cbc92c5226892329a56415ea0", "committedDate": "2020-09-30T14:22:05Z", "message": "[#307] less and bigger markers for dataflow relations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dbf1948fb3a9840ab5a81d301b4ed53bea98548", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/7dbf1948fb3a9840ab5a81d301b4ed53bea98548", "committedDate": "2020-09-30T14:23:17Z", "message": "[#307] hexes background drawn first"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "428cc0990b1f3187ff358d1496acd921c49cec1e", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/428cc0990b1f3187ff358d1496acd921c49cec1e", "committedDate": "2020-09-30T14:25:59Z", "message": "[#307] more space between items (higher initial temp)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c02408f0e9f3b26c47caafc1c52263ac6bcf9d5", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/1c02408f0e9f3b26c47caafc1c52263ac6bcf9d5", "committedDate": "2020-09-30T14:26:47Z", "message": "[#307] added internal worflows as nivio landscape"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "713d4f67263581b352fd99cbef5024a4693244ae", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/713d4f67263581b352fd99cbef5024a4693244ae", "committedDate": "2020-09-30T14:48:16Z", "message": "[#307] not showing contact/owner on items if not present"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07243d182c2eaee1ecd49fcd6855d97bb7ffe6fd", "author": {"user": null}, "url": "https://github.com/dedica-team/nivio/commit/07243d182c2eaee1ecd49fcd6855d97bb7ffe6fd", "committedDate": "2020-10-01T04:56:37Z", "message": "[#307] updated internals.yml"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1895, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}