{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNDY1ODk5", "number": 84, "title": "83 csv import", "bodyText": "Can anybody give this a quick look?", "createdAt": "2020-01-16T05:41:15Z", "url": "https://github.com/dedica-team/nivio/pull/84", "merged": true, "mergeCommit": {"oid": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f"}, "closed": true, "closedAt": "2020-01-25T21:03:27Z", "author": {"login": "bonndan"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6s2dxgH2gAyMzYzNDY1ODk5OmUyMTQwN2Q0ZjMzN2MzNDEzY2FmZjc1MTgyODA2YmJhZGFkMGUwYTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8lUt1AH2gAyMzYzNDY1ODk5OjNjYzc1OWNmNWExNDg2YmY5NTUxNjU5OWZhM2RjMjBhNDdkNDFiNGY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e21407d4f337c3413caff75182806bbadad0e0a1", "author": {"user": {"login": "bonndan", "name": "Daniel Pozzi"}}, "url": "https://github.com/dedica-team/nivio/commit/e21407d4f337c3413caff75182806bbadad0e0a1", "committedDate": "2020-01-15T21:57:51Z", "message": "[#83] csv reader in item description factory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12deadf6825ad7f741ddf614249563d8d1c5aea3", "author": {"user": {"login": "bonndan", "name": "Daniel Pozzi"}}, "url": "https://github.com/dedica-team/nivio/commit/12deadf6825ad7f741ddf614249563d8d1c5aea3", "committedDate": "2020-01-15T22:12:27Z", "message": "[#83] added csv in input / output graph"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "473148991811120943767017200410f8ef739675", "author": {"user": {"login": "bonndan", "name": "Daniel Pozzi"}}, "url": "https://github.com/dedica-team/nivio/commit/473148991811120943767017200410f8ef739675", "committedDate": "2020-01-16T04:25:50Z", "message": "label to field processor can handle links"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8799806430f83b669c65d96b951a5db4d2cab6c", "author": {"user": {"login": "bonndan", "name": "Daniel Pozzi"}}, "url": "https://github.com/dedica-team/nivio/commit/c8799806430f83b669c65d96b951a5db4d2cab6c", "committedDate": "2020-01-16T04:26:24Z", "message": "[#83] added test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c4c11968ed4a09a24ee15ff660dfd00c5c87221", "author": {"user": {"login": "bonndan", "name": "Daniel Pozzi"}}, "url": "https://github.com/dedica-team/nivio/commit/7c4c11968ed4a09a24ee15ff660dfd00c5c87221", "committedDate": "2020-01-16T04:54:35Z", "message": "[#83] integration test and fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc4aa30f9cf6173ecbb07078acc8c1040c2d545b", "author": {"user": {"login": "bonndan", "name": "Daniel Pozzi"}}, "url": "https://github.com/dedica-team/nivio/commit/fc4aa30f9cf6173ecbb07078acc8c1040c2d545b", "committedDate": "2020-01-16T05:27:13Z", "message": "[#83] documented csv as input source"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e889de0e97f8ec614b40d782788fc498aaa859f0", "author": {"user": {"login": "bonndan", "name": "Daniel Pozzi"}}, "url": "https://github.com/dedica-team/nivio/commit/e889de0e97f8ec614b40d782788fc498aaa859f0", "committedDate": "2020-01-16T05:39:16Z", "message": "[#83] updated documentation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1ODU5MTI0", "url": "https://github.com/dedica-team/nivio/pull/84#pullrequestreview-345859124", "createdAt": "2020-01-21T13:03:29Z", "commit": {"oid": "e889de0e97f8ec614b40d782788fc498aaa859f0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMzowMzoyOVrOFf5MCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNTowNjoxMFrOFf9VBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk4NzE0Ng==", "bodyText": "Maybe reword this to: \"Additionally, the csv separator char and the number of lines to\nskip (usually 1 for the header row) can be set.\"", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r368987146", "createdAt": "2020-01-21T13:03:29Z", "author": {"login": "jpgoelz"}, "path": "docs/source/install.rst", "diffHunk": "@@ -140,6 +140,29 @@ from environment variables. To exclude internal stacks (like those responsible f\n         format: rancher1\n \n \n+Reading from csv\n+-----------------------------\n+\n+Nivio can parse csv files regarding one row as landscape item. The order of the columns in the file is important, since\n+headers are ignored and not mapping automatically. Instead, each column number (starting at zero) can be assigned to an\n+item property in the \"mapping\" configuration. Additionally, the csv separator char can be set and the number of lines to\n+skip (usually 1 for the header row).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e889de0e97f8ec614b40d782788fc498aaa859f0"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAwNjc5OQ==", "bodyText": "btw: ItemDescriptionFactory has loads of if-statements without braces. \ud83d\ude43", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369006799", "createdAt": "2020-01-21T13:43:45Z", "author": {"login": "jpgoelz"}, "path": "src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.bonndan.nivio.input.csv;\n+\n+import com.opencsv.CSVParser;\n+import com.opencsv.CSVParserBuilder;\n+import com.opencsv.CSVReader;\n+import com.opencsv.CSVReaderBuilder;\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.input.FileFetcher;\n+import de.bonndan.nivio.input.ItemDescriptionFactory;\n+import de.bonndan.nivio.input.LabelToFieldProcessor;\n+import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.StringReader;\n+import java.net.URL;\n+import java.util.*;\n+\n+@Service\n+public class ItemDescriptionFactoryCSV implements ItemDescriptionFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e889de0e97f8ec614b40d782788fc498aaa859f0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxMDc1OA==", "bodyText": "Personally, I would go with List.of(\"csv\"), which is also immutable.\nSee Singleton List Showdown: Collections::singletonList Vs. List::of (tl;dr: \"Both Collections::singletonList and List:of are great choices for creating single-element lists. [...] I recommend going with List:of for its ease of use, readability, and better-documented immutability.)", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369010758", "createdAt": "2020-01-21T13:51:25Z", "author": {"login": "jpgoelz"}, "path": "src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.bonndan.nivio.input.csv;\n+\n+import com.opencsv.CSVParser;\n+import com.opencsv.CSVParserBuilder;\n+import com.opencsv.CSVReader;\n+import com.opencsv.CSVReaderBuilder;\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.input.FileFetcher;\n+import de.bonndan.nivio.input.ItemDescriptionFactory;\n+import de.bonndan.nivio.input.LabelToFieldProcessor;\n+import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.StringReader;\n+import java.net.URL;\n+import java.util.*;\n+\n+@Service\n+public class ItemDescriptionFactoryCSV implements ItemDescriptionFactory {\n+\n+    public static final String IDENTIFIER_KEY = \"identifier\";\n+    private final FileFetcher fileFetcher;\n+\n+    public ItemDescriptionFactoryCSV(FileFetcher fileFetcher) {\n+        this.fileFetcher = fileFetcher;\n+    }\n+\n+    @Override\n+    public List<String> getFormats() {\n+        return Collections.singletonList(\"csv\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e889de0e97f8ec614b40d782788fc498aaa859f0"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxMTgxOA==", "bodyText": "Because it is a sentence with a period: Mapping...", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369011818", "createdAt": "2020-01-21T13:53:19Z", "author": {"login": "jpgoelz"}, "path": "src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.bonndan.nivio.input.csv;\n+\n+import com.opencsv.CSVParser;\n+import com.opencsv.CSVParserBuilder;\n+import com.opencsv.CSVReader;\n+import com.opencsv.CSVReaderBuilder;\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.input.FileFetcher;\n+import de.bonndan.nivio.input.ItemDescriptionFactory;\n+import de.bonndan.nivio.input.LabelToFieldProcessor;\n+import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.StringReader;\n+import java.net.URL;\n+import java.util.*;\n+\n+@Service\n+public class ItemDescriptionFactoryCSV implements ItemDescriptionFactory {\n+\n+    public static final String IDENTIFIER_KEY = \"identifier\";\n+    private final FileFetcher fileFetcher;\n+\n+    public ItemDescriptionFactoryCSV(FileFetcher fileFetcher) {\n+        this.fileFetcher = fileFetcher;\n+    }\n+\n+    @Override\n+    public List<String> getFormats() {\n+        return Collections.singletonList(\"csv\");\n+    }\n+\n+    @Override\n+    public List<ItemDescription> getDescriptions(SourceReference reference, URL baseUrl) {\n+        List<ItemDescription> itemDescriptions = new ArrayList<>();\n+        String content = fileFetcher.get(reference, baseUrl);\n+        CSVReader reader = getReader(reference, content);\n+\n+        Map<String, Object> mapping = (Map<String, Object>) reference.getProperty(\"mapping\");\n+        if (mapping == null) {\n+            throw new ProcessingException(reference.getLandscapeDescription(), \"mapping must be present in configuration.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e889de0e97f8ec614b40d782788fc498aaa859f0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxNTcyOQ==", "bodyText": "This class contains if-statements without braces.", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369015729", "createdAt": "2020-01-21T14:00:01Z", "author": {"login": "jpgoelz"}, "path": "src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java", "diffHunk": "@@ -17,6 +17,8 @@\n  */\n public class ItemDescription implements LandscapeItem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e889de0e97f8ec614b40d782788fc498aaa859f0"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAyODE5Mg==", "bodyText": "Why are not all test methods public?\nThe names of the methods don't really give away, what they are testing. Maybe change method names or at least use @DisplayName(\"Expect this and that\").", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369028192", "createdAt": "2020-01-21T14:22:13Z", "author": {"login": "jpgoelz"}, "path": "src/test/java/de/bonndan/nivio/input/LabelToFieldProcessorTest.java", "diffHunk": "@@ -7,6 +7,9 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.net.URL;\n+import java.util.Map;\n+\n import static org.junit.jupiter.api.Assertions.*;\n \n class LabelToFieldProcessorTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e889de0e97f8ec614b40d782788fc498aaa859f0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzMDI4Mg==", "bodyText": "IntelliJ complains: \"Statement lambda can be replaced with expression lambda.\"\nWhat are your thoughts on that, @bonndan, @Matthimatiker?", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369030282", "createdAt": "2020-01-21T14:25:42Z", "author": {"login": "jpgoelz"}, "path": "src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package de.bonndan.nivio.input.csv;\n+\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.input.FileFetcher;\n+import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import de.bonndan.nivio.input.http.HttpService;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class ItemDescriptionFactoryCSVTest {\n+\n+    private FileFetcher fileFetcher;\n+\n+    @BeforeEach\n+    public void setup() {\n+        fileFetcher = new FileFetcher(new HttpService());\n+    }\n+\n+    @Test\n+    public void read() {\n+\n+        SourceReference file = new SourceReference(getRootPath() + \"/src/test/resources/example/services/test.csv\");\n+\n+        Map<String, String> mapping = new HashMap<>();\n+        mapping.put(\"identifier\", \"1\");\n+        mapping.put(\"name\", \"0\");\n+        mapping.put(\"description\", \"2\");\n+        file.setProperty(\"mapping\", mapping);\n+        file.setProperty(\"skipLines\", 1);\n+        file.setProperty(\"separator\", \";\");\n+\n+        ItemDescriptionFactoryCSV factoryCSV = new ItemDescriptionFactoryCSV(fileFetcher);\n+        List<ItemDescription> services = factoryCSV.getDescriptions(file, null);\n+        assertEquals(3, services.size());\n+        ItemDescription foo = services.get(0);\n+        assertNotNull(foo);\n+\n+        assertEquals(\"foo\", foo.getIdentifier());\n+        assertTrue(foo.getLabels().containsKey(\"nivio.name\"));\n+        assertEquals(\"foo\", foo.getLabels().get(\"nivio.name\"));\n+        assertTrue(foo.getLabels().containsKey(\"nivio.description\"));\n+        assertEquals(\"This does nothing\", foo.getLabels().get(\"nivio.description\"));\n+\n+        ItemDescription bar = services.get(1);\n+        assertNotNull(bar);\n+\n+        assertEquals(\"bar\", bar.getIdentifier());\n+        assertTrue(bar.getLabels().containsKey(\"nivio.name\"));\n+        assertEquals(\"bar\", bar.getLabels().get(\"nivio.name\"));\n+        assertTrue(bar.getLabels().containsKey(\"nivio.description\"));\n+        assertEquals(\"\", bar.getLabels().get(\"nivio.description\"));\n+\n+        ItemDescription super1 = services.get(2);\n+        assertNotNull(super1);\n+\n+        assertEquals(\"super1\", super1.getIdentifier());\n+        assertTrue(super1.getLabels().containsKey(\"nivio.name\"));\n+        assertEquals(\"Super Service\", super1.getLabels().get(\"nivio.name\"));\n+        assertTrue(super1.getLabels().containsKey(\"nivio.description\"));\n+        assertEquals(\"superior\", super1.getLabels().get(\"nivio.description\"));\n+    }\n+\n+    @Test\n+    public void failsWithoutMapping() {\n+\n+        SourceReference file = new SourceReference(getRootPath() + \"/src/test/resources/example/services/test.csv\");\n+        ItemDescriptionFactoryCSV factoryCSV = new ItemDescriptionFactoryCSV(fileFetcher);\n+\n+        assertThrows(ProcessingException.class, () -> {\n+            factoryCSV.getDescriptions(file, null);\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e889de0e97f8ec614b40d782788fc498aaa859f0"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzMDY5NA==", "bodyText": "see above (+78 to +80).", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369030694", "createdAt": "2020-01-21T14:26:24Z", "author": {"login": "jpgoelz"}, "path": "src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package de.bonndan.nivio.input.csv;\n+\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.input.FileFetcher;\n+import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import de.bonndan.nivio.input.http.HttpService;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class ItemDescriptionFactoryCSVTest {\n+\n+    private FileFetcher fileFetcher;\n+\n+    @BeforeEach\n+    public void setup() {\n+        fileFetcher = new FileFetcher(new HttpService());\n+    }\n+\n+    @Test\n+    public void read() {\n+\n+        SourceReference file = new SourceReference(getRootPath() + \"/src/test/resources/example/services/test.csv\");\n+\n+        Map<String, String> mapping = new HashMap<>();\n+        mapping.put(\"identifier\", \"1\");\n+        mapping.put(\"name\", \"0\");\n+        mapping.put(\"description\", \"2\");\n+        file.setProperty(\"mapping\", mapping);\n+        file.setProperty(\"skipLines\", 1);\n+        file.setProperty(\"separator\", \";\");\n+\n+        ItemDescriptionFactoryCSV factoryCSV = new ItemDescriptionFactoryCSV(fileFetcher);\n+        List<ItemDescription> services = factoryCSV.getDescriptions(file, null);\n+        assertEquals(3, services.size());\n+        ItemDescription foo = services.get(0);\n+        assertNotNull(foo);\n+\n+        assertEquals(\"foo\", foo.getIdentifier());\n+        assertTrue(foo.getLabels().containsKey(\"nivio.name\"));\n+        assertEquals(\"foo\", foo.getLabels().get(\"nivio.name\"));\n+        assertTrue(foo.getLabels().containsKey(\"nivio.description\"));\n+        assertEquals(\"This does nothing\", foo.getLabels().get(\"nivio.description\"));\n+\n+        ItemDescription bar = services.get(1);\n+        assertNotNull(bar);\n+\n+        assertEquals(\"bar\", bar.getIdentifier());\n+        assertTrue(bar.getLabels().containsKey(\"nivio.name\"));\n+        assertEquals(\"bar\", bar.getLabels().get(\"nivio.name\"));\n+        assertTrue(bar.getLabels().containsKey(\"nivio.description\"));\n+        assertEquals(\"\", bar.getLabels().get(\"nivio.description\"));\n+\n+        ItemDescription super1 = services.get(2);\n+        assertNotNull(super1);\n+\n+        assertEquals(\"super1\", super1.getIdentifier());\n+        assertTrue(super1.getLabels().containsKey(\"nivio.name\"));\n+        assertEquals(\"Super Service\", super1.getLabels().get(\"nivio.name\"));\n+        assertTrue(super1.getLabels().containsKey(\"nivio.description\"));\n+        assertEquals(\"superior\", super1.getLabels().get(\"nivio.description\"));\n+    }\n+\n+    @Test\n+    public void failsWithoutMapping() {\n+\n+        SourceReference file = new SourceReference(getRootPath() + \"/src/test/resources/example/services/test.csv\");\n+        ItemDescriptionFactoryCSV factoryCSV = new ItemDescriptionFactoryCSV(fileFetcher);\n+\n+        assertThrows(ProcessingException.class, () -> {\n+            factoryCSV.getDescriptions(file, null);\n+        });\n+    }\n+\n+    @Test\n+    public void failsWithoutIdentifierInMapping() {\n+\n+        SourceReference file = new SourceReference(getRootPath() + \"/src/test/resources/example/services/test.csv\");\n+        Map<String, String> mapping = new HashMap<>();\n+        mapping.put(\"name\", \"0\");\n+        file.setProperty(\"mapping\", mapping);\n+\n+        ItemDescriptionFactoryCSV factoryCSV = new ItemDescriptionFactoryCSV(fileFetcher);\n+\n+        assertThrows(ProcessingException.class, () -> {\n+            factoryCSV.getDescriptions(file, null);\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e889de0e97f8ec614b40d782788fc498aaa859f0"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzNDI5Nw==", "bodyText": "add a blank line after this", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369034297", "createdAt": "2020-01-21T14:32:31Z", "author": {"login": "jpgoelz"}, "path": "src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package de.bonndan.nivio.input.csv;\n+\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.input.FileFetcher;\n+import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import de.bonndan.nivio.input.http.HttpService;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class ItemDescriptionFactoryCSVTest {\n+\n+    private FileFetcher fileFetcher;\n+\n+    @BeforeEach\n+    public void setup() {\n+        fileFetcher = new FileFetcher(new HttpService());\n+    }\n+\n+    @Test\n+    public void read() {\n+\n+        SourceReference file = new SourceReference(getRootPath() + \"/src/test/resources/example/services/test.csv\");\n+\n+        Map<String, String> mapping = new HashMap<>();\n+        mapping.put(\"identifier\", \"1\");\n+        mapping.put(\"name\", \"0\");\n+        mapping.put(\"description\", \"2\");\n+        file.setProperty(\"mapping\", mapping);\n+        file.setProperty(\"skipLines\", 1);\n+        file.setProperty(\"separator\", \";\");\n+\n+        ItemDescriptionFactoryCSV factoryCSV = new ItemDescriptionFactoryCSV(fileFetcher);\n+        List<ItemDescription> services = factoryCSV.getDescriptions(file, null);\n+        assertEquals(3, services.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e889de0e97f8ec614b40d782788fc498aaa859f0"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA0NzA0MA==", "bodyText": "Why do these return mxGraph, if the return value is never used?", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369047040", "createdAt": "2020-01-21T14:53:06Z", "author": {"login": "jpgoelz"}, "path": "src/test/java/de/bonndan/nivio/output/jgraphx/JGraphXRendererTest.java", "diffHunk": "@@ -48,12 +53,18 @@ private LandscapeImpl getLandscape(String path) {\n     }\n \n     private mxGraph debugRender(String path) throws IOException {\n+        return debugRender(path, true);\n+    }\n+\n+    private mxGraph debugRender(String path, boolean debugMode) throws IOException {\n         LandscapeImpl landscape = getLandscape(path + \".yml\");\n-        return debugRenderLandscape(path, landscape, true);\n+        return debugRenderLandscape(path, landscape, debugMode);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e889de0e97f8ec614b40d782788fc498aaa859f0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1MTQyNQ==", "bodyText": "Not one of the changes, but there is a typo on line 166: lanscape.", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369051425", "createdAt": "2020-01-21T15:00:10Z", "author": {"login": "jpgoelz"}, "path": "src/main/java/de/bonndan/nivio/api/ApiController.java", "diffHunk": "@@ -8,7 +8,6 @@\n import de.bonndan.nivio.input.dto.SourceReference;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e889de0e97f8ec614b40d782788fc498aaa859f0"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1MzYwMA==", "bodyText": "I like spaces between i, + and 1. :)", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369053600", "createdAt": "2020-01-21T15:03:45Z", "author": {"login": "jpgoelz"}, "path": "src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java", "diffHunk": "@@ -54,20 +58,38 @@ private void setValue(ItemDescription item, String name, String value) {\n                 myAccessor.setPropertyValue(name, Arrays.asList(o));\n                 return;\n             }\n+\n             if (propertyType != null && propertyType.isAssignableFrom(Set.class)) {\n                 String[] o = getParts(value);\n                 myAccessor.setPropertyValue(name, Set.of(o));\n                 return;\n             }\n \n+            if (propertyType != null && propertyType.isAssignableFrom(Map.class)) {\n+                String[] o = getParts(value);\n+                Map propertyValue = (Map) myAccessor.getPropertyValue(name);\n+                for (int i = 0; i < o.length; i++) {\n+                    if (ItemDescription.LINKS_FIELD.equals(name)) {\n+                        try {\n+                            propertyValue.put(String.valueOf(i+1), new URL(o[i]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e889de0e97f8ec614b40d782788fc498aaa859f0"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1MzcyMg==", "bodyText": "more spaces please", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369053722", "createdAt": "2020-01-21T15:03:58Z", "author": {"login": "jpgoelz"}, "path": "src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java", "diffHunk": "@@ -54,20 +58,38 @@ private void setValue(ItemDescription item, String name, String value) {\n                 myAccessor.setPropertyValue(name, Arrays.asList(o));\n                 return;\n             }\n+\n             if (propertyType != null && propertyType.isAssignableFrom(Set.class)) {\n                 String[] o = getParts(value);\n                 myAccessor.setPropertyValue(name, Set.of(o));\n                 return;\n             }\n \n+            if (propertyType != null && propertyType.isAssignableFrom(Map.class)) {\n+                String[] o = getParts(value);\n+                Map propertyValue = (Map) myAccessor.getPropertyValue(name);\n+                for (int i = 0; i < o.length; i++) {\n+                    if (ItemDescription.LINKS_FIELD.equals(name)) {\n+                        try {\n+                            propertyValue.put(String.valueOf(i+1), new URL(o[i]));\n+                        } catch (MalformedURLException e) {\n+                            logger.warn(\"Failed to parse link \" + o[i]);\n+                        }\n+                    } else {\n+                        propertyValue.put(String.valueOf(i+1), o[i]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e889de0e97f8ec614b40d782788fc498aaa859f0"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1NDk4MA==", "bodyText": "Imho static, albeit private methods should go to the top of a class, even before public methods. What's your opinion @Matthimatiker?", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369054980", "createdAt": "2020-01-21T15:06:10Z", "author": {"login": "jpgoelz"}, "path": "src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java", "diffHunk": "@@ -54,20 +58,38 @@ private void setValue(ItemDescription item, String name, String value) {\n                 myAccessor.setPropertyValue(name, Arrays.asList(o));\n                 return;\n             }\n+\n             if (propertyType != null && propertyType.isAssignableFrom(Set.class)) {\n                 String[] o = getParts(value);\n                 myAccessor.setPropertyValue(name, Set.of(o));\n                 return;\n             }\n \n+            if (propertyType != null && propertyType.isAssignableFrom(Map.class)) {\n+                String[] o = getParts(value);\n+                Map propertyValue = (Map) myAccessor.getPropertyValue(name);\n+                for (int i = 0; i < o.length; i++) {\n+                    if (ItemDescription.LINKS_FIELD.equals(name)) {\n+                        try {\n+                            propertyValue.put(String.valueOf(i+1), new URL(o[i]));\n+                        } catch (MalformedURLException e) {\n+                            logger.warn(\"Failed to parse link \" + o[i]);\n+                        }\n+                    } else {\n+                        propertyValue.put(String.valueOf(i+1), o[i]);\n+                    }\n+                }\n+                return;\n+            }\n+\n             myAccessor.setPropertyValue(name, value.trim());\n         } catch (NotWritablePropertyException e) {\n             logger.warn(\"Failed to write field '\" + name + \"' via label\");\n         }\n     }\n \n     private static String[] getParts(String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e889de0e97f8ec614b40d782788fc498aaa859f0"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ca8bc1bf974b72c83bbc2d1a4cc9864a49a1f90", "author": {"user": {"login": "bonndan", "name": "Daniel Pozzi"}}, "url": "https://github.com/dedica-team/nivio/commit/0ca8bc1bf974b72c83bbc2d1a4cc9864a49a1f90", "committedDate": "2020-01-21T17:48:54Z", "message": "Merge branch 'develop' into 83_csv_import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d637ce63a05746487a5cd63bb5ab26b4c4a2297", "author": {"user": {"login": "bonndan", "name": "Daniel Pozzi"}}, "url": "https://github.com/dedica-team/nivio/commit/5d637ce63a05746487a5cd63bb5ab26b4c4a2297", "committedDate": "2020-01-21T18:12:21Z", "message": "[#84] fixes, wording"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "author": {"user": {"login": "bonndan", "name": "Daniel Pozzi"}}, "url": "https://github.com/dedica-team/nivio/commit/3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "committedDate": "2020-01-21T18:19:30Z", "message": "[#84] test fix"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1936, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}