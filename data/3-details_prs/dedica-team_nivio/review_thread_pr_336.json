{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzODM3NTE0", "number": 336, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDowMzozNVrOFB9l7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMjo1MTo1M1rOFHc0Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjAyMDMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/linked/SonarLinkHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDowMzozNVrOIA4Xpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMDowMzozNVrOIA4Xpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc5NDQ3MQ==", "bodyText": "@sl0815 still no time to work on this? The GitHub connection is already working. Loading Sonarqube stuff is just a matter of knowing their API.", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r537794471", "createdAt": "2020-12-07T20:03:35Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/linked/SonarLinkHandler.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package de.bonndan.nivio.input.linked;\n+\n+import de.bonndan.nivio.model.Labeled;\n+import de.bonndan.nivio.model.Link;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.sonar.wsclient.SonarClient;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+public class SonarLinkHandler implements ExternalLinkHandler {\n+\n+    private final Logger LOGGER = LoggerFactory.getLogger(SonarLinkHandler.class);\n+\n+    private final Optional<SonarClient> sonarClient;\n+    private final String sonarApiEndpoint;\n+\n+    public SonarLinkHandler(Optional<SonarClient> sonarClient,String sonarApiEndpoint) {\n+        this.sonarClient = sonarClient;\n+\n+        this.sonarApiEndpoint = sonarApiEndpoint;\n+    }\n+\n+    /**\n+     * https://medium.com/@shanchathusanda/https-medium-com-shanchathusanda-integrating-sonarqube-apis-with-a-java-application-de8fdc8b951f\n+     * @param link\n+     * @param component\n+     * @return\n+     */\n+    @Override\n+    public CompletableFuture<String> resolveAndApplyData(Link link, Labeled component) {\n+        if (sonarClient.isEmpty()) {\n+            return CompletableFuture.completedFuture(\"SonarClient is not configured\");\n+        }\n+\n+        SonarClient sonarClient = this.sonarClient.get();\n+        // TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c84be709db4856b645a539a69b47b3cbf131910"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzQ4NTQ0OnYy", "diffSide": "RIGHT", "path": "docs/source/input.rst", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMTowOToyNlrOII6-gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMTowOToyNlrOII6-gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIyNTc5Mg==", "bodyText": "This sould be \"provides\" - it still does, does it?", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546225792", "createdAt": "2020-12-19T11:09:26Z", "author": {"login": "mfbieber"}, "path": "docs/source/input.rst", "diffHunk": "@@ -46,4 +46,24 @@ from environment variables. To exclude internal stacks (like those responsible f\n Nivio proprietary format\n ------------------------\n \n-Nivio provided an own format, which allows to set all model properties manually (see Model and Syntax section)\n\\ No newline at end of file\n+Nivio provided an own format, which allows to set all model properties manually (see Model and Syntax section).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzQ4NzE0OnYy", "diffSide": "RIGHT", "path": "docs/source/input.rst", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMToxMjozN1rOII6_Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMjo1ODowOFrOII7lOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIyNjAwNg==", "bodyText": "It must be \"cannot\"", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546226006", "createdAt": "2020-12-19T11:12:37Z", "author": {"login": "mfbieber"}, "path": "docs/source/input.rst", "diffHunk": "@@ -46,4 +46,24 @@ from environment variables. To exclude internal stacks (like those responsible f\n Nivio proprietary format\n ------------------------\n \n-Nivio provided an own format, which allows to set all model properties manually (see Model and Syntax section)\n\\ No newline at end of file\n+Nivio provided an own format, which allows to set all model properties manually (see Model and Syntax section).\n+\n+\n+External data\n+-------------\n+\n+Nivio can load external data that can not be used directly to build landscapes, but is still valuable. For example, the\n+number of GitHub issues might be interesting to see on a landscape item that is an open source component. To attach such\n+data to landscape components, use links having special known identifiers like \"github\" or \"sonar\".\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMjY0Mg==", "bodyText": "?", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546232642", "createdAt": "2020-12-19T12:25:20Z", "author": {"login": "bonndan"}, "path": "docs/source/input.rst", "diffHunk": "@@ -46,4 +46,24 @@ from environment variables. To exclude internal stacks (like those responsible f\n Nivio proprietary format\n ------------------------\n \n-Nivio provided an own format, which allows to set all model properties manually (see Model and Syntax section)\n\\ No newline at end of file\n+Nivio provided an own format, which allows to set all model properties manually (see Model and Syntax section).\n+\n+\n+External data\n+-------------\n+\n+Nivio can load external data that can not be used directly to build landscapes, but is still valuable. For example, the\n+number of GitHub issues might be interesting to see on a landscape item that is an open source component. To attach such\n+data to landscape components, use links having special known identifiers like \"github\" or \"sonar\".\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIyNjAwNg=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNTUxNQ==", "bodyText": "\"Nivio can load external data that can not be used directly to build landscapes, but is still valuable.\" -> \"Nivio can load external data that cannot be used directly to build landscapes, but is still valuable. \"", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546235515", "createdAt": "2020-12-19T12:56:09Z", "author": {"login": "mfbieber"}, "path": "docs/source/input.rst", "diffHunk": "@@ -46,4 +46,24 @@ from environment variables. To exclude internal stacks (like those responsible f\n Nivio proprietary format\n ------------------------\n \n-Nivio provided an own format, which allows to set all model properties manually (see Model and Syntax section)\n\\ No newline at end of file\n+Nivio provided an own format, which allows to set all model properties manually (see Model and Syntax section).\n+\n+\n+External data\n+-------------\n+\n+Nivio can load external data that can not be used directly to build landscapes, but is still valuable. For example, the\n+number of GitHub issues might be interesting to see on a landscape item that is an open source component. To attach such\n+data to landscape components, use links having special known identifiers like \"github\" or \"sonar\".\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIyNjAwNg=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNTcwNA==", "bodyText": "done", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546235704", "createdAt": "2020-12-19T12:58:08Z", "author": {"login": "bonndan"}, "path": "docs/source/input.rst", "diffHunk": "@@ -46,4 +46,24 @@ from environment variables. To exclude internal stacks (like those responsible f\n Nivio proprietary format\n ------------------------\n \n-Nivio provided an own format, which allows to set all model properties manually (see Model and Syntax section)\n\\ No newline at end of file\n+Nivio provided an own format, which allows to set all model properties manually (see Model and Syntax section).\n+\n+\n+External data\n+-------------\n+\n+Nivio can load external data that can not be used directly to build landscapes, but is still valuable. For example, the\n+number of GitHub issues might be interesting to see on a landscape item that is an open source component. To attach such\n+data to landscape components, use links having special known identifiers like \"github\" or \"sonar\".\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIyNjAwNg=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzUwNDc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/ComponentDescriptionValues.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMTozNDozNVrOII7HQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMjo1ODo0OFrOII7llA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIyODAzMw==", "bodyText": "Is this just a Map merge? If yes, why not use item.getLinks().putAll(increment.getLinks());", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546228033", "createdAt": "2020-12-19T11:34:35Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/ComponentDescriptionValues.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.input.dto.ComponentDescription;\n+import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.model.Labeled;\n+import org.springframework.util.StringUtils;\n+\n+import static de.bonndan.nivio.util.SafeAssign.assignSafe;\n+import static de.bonndan.nivio.util.SafeAssign.assignSafeIfAbsent;\n+\n+public class ComponentDescriptionValues {\n+\n+    /**\n+     * Overwrites labels and links.\n+     *\n+     * @param existing  current description present in the landscape\n+     * @param increment new values\n+     */\n+    public static void assignNotNull(ComponentDescription existing, ComponentDescription increment) {\n+\n+        if (increment.getName() != null)\n+            existing.setName(increment.getName());\n+\n+        if (increment.getDescription() != null)\n+            existing.setDescription(increment.getDescription());\n+\n+        if (increment.getOwner() != null)\n+            existing.setOwner(increment.getOwner());\n+\n+        if (increment.getLabels() != null) {\n+            increment.getLabels().forEach((s, s2) -> {\n+                if (increment.getLabel(s) != null) {\n+                    existing.setLabel(s, s2);\n+                }\n+            });\n+        }\n+\n+        existing.getLinks().putAll(increment.getLinks());\n+\n+    }\n+    /**\n+     * Writes the values of the increment (second object) to the first where first is null/absent.\n+     *\n+     * @param item     target\n+     * @param increment source\n+     */\n+    public static void assignSafeNotNull(ComponentDescription item, ComponentDescription increment) {\n+\n+        assignSafeIfAbsent(increment.getName(), item.getName(), item::setName);\n+        assignSafeIfAbsent(increment.getDescription(), item.getDescription(), item::setDescription);\n+        assignSafeIfAbsent(increment.getOwner(), item.getOwner(), item::setOwner);\n+\n+        Labeled.merge(increment, item);\n+\n+        increment.getLinks().entrySet().stream()\n+                .filter(entry -> !item.getLinks().containsKey(entry.getKey()))\n+                .forEach(entry -> item.getLinks().put(entry.getKey(), entry.getValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIyODQ0Mg==", "bodyText": "It is putIfAbsent \ud83d\ude04", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546228442", "createdAt": "2020-12-19T11:38:30Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/ComponentDescriptionValues.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.input.dto.ComponentDescription;\n+import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.model.Labeled;\n+import org.springframework.util.StringUtils;\n+\n+import static de.bonndan.nivio.util.SafeAssign.assignSafe;\n+import static de.bonndan.nivio.util.SafeAssign.assignSafeIfAbsent;\n+\n+public class ComponentDescriptionValues {\n+\n+    /**\n+     * Overwrites labels and links.\n+     *\n+     * @param existing  current description present in the landscape\n+     * @param increment new values\n+     */\n+    public static void assignNotNull(ComponentDescription existing, ComponentDescription increment) {\n+\n+        if (increment.getName() != null)\n+            existing.setName(increment.getName());\n+\n+        if (increment.getDescription() != null)\n+            existing.setDescription(increment.getDescription());\n+\n+        if (increment.getOwner() != null)\n+            existing.setOwner(increment.getOwner());\n+\n+        if (increment.getLabels() != null) {\n+            increment.getLabels().forEach((s, s2) -> {\n+                if (increment.getLabel(s) != null) {\n+                    existing.setLabel(s, s2);\n+                }\n+            });\n+        }\n+\n+        existing.getLinks().putAll(increment.getLinks());\n+\n+    }\n+    /**\n+     * Writes the values of the increment (second object) to the first where first is null/absent.\n+     *\n+     * @param item     target\n+     * @param increment source\n+     */\n+    public static void assignSafeNotNull(ComponentDescription item, ComponentDescription increment) {\n+\n+        assignSafeIfAbsent(increment.getName(), item.getName(), item::setName);\n+        assignSafeIfAbsent(increment.getDescription(), item.getDescription(), item::setDescription);\n+        assignSafeIfAbsent(increment.getOwner(), item.getOwner(), item::setOwner);\n+\n+        Labeled.merge(increment, item);\n+\n+        increment.getLinks().entrySet().stream()\n+                .filter(entry -> !item.getLinks().containsKey(entry.getKey()))\n+                .forEach(entry -> item.getLinks().put(entry.getKey(), entry.getValue()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIyODAzMw=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNTc5Ng==", "bodyText": "ok", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546235796", "createdAt": "2020-12-19T12:58:48Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/ComponentDescriptionValues.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.input.dto.ComponentDescription;\n+import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.model.Labeled;\n+import org.springframework.util.StringUtils;\n+\n+import static de.bonndan.nivio.util.SafeAssign.assignSafe;\n+import static de.bonndan.nivio.util.SafeAssign.assignSafeIfAbsent;\n+\n+public class ComponentDescriptionValues {\n+\n+    /**\n+     * Overwrites labels and links.\n+     *\n+     * @param existing  current description present in the landscape\n+     * @param increment new values\n+     */\n+    public static void assignNotNull(ComponentDescription existing, ComponentDescription increment) {\n+\n+        if (increment.getName() != null)\n+            existing.setName(increment.getName());\n+\n+        if (increment.getDescription() != null)\n+            existing.setDescription(increment.getDescription());\n+\n+        if (increment.getOwner() != null)\n+            existing.setOwner(increment.getOwner());\n+\n+        if (increment.getLabels() != null) {\n+            increment.getLabels().forEach((s, s2) -> {\n+                if (increment.getLabel(s) != null) {\n+                    existing.setLabel(s, s2);\n+                }\n+            });\n+        }\n+\n+        existing.getLinks().putAll(increment.getLinks());\n+\n+    }\n+    /**\n+     * Writes the values of the increment (second object) to the first where first is null/absent.\n+     *\n+     * @param item     target\n+     * @param increment source\n+     */\n+    public static void assignSafeNotNull(ComponentDescription item, ComponentDescription increment) {\n+\n+        assignSafeIfAbsent(increment.getName(), item.getName(), item::setName);\n+        assignSafeIfAbsent(increment.getDescription(), item.getDescription(), item::setDescription);\n+        assignSafeIfAbsent(increment.getOwner(), item.getOwner(), item::setOwner);\n+\n+        Labeled.merge(increment, item);\n+\n+        increment.getLinks().entrySet().stream()\n+                .filter(entry -> !item.getLinks().containsKey(entry.getKey()))\n+                .forEach(entry -> item.getLinks().put(entry.getKey(), entry.getValue()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIyODAzMw=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzUzODM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/Indexer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMjoxNjo1N1rOII7Wkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMjoyNDozM1rOII7ZCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMTk1NA==", "bodyText": "Shouldn't the method be named resolve()?", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546231954", "createdAt": "2020-12-19T12:16:57Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/Indexer.java", "diffHunk": "@@ -87,42 +88,45 @@ private void runResolvers(LandscapeDescription input, Landscape landscape) {\n         KPIFactory kpiFactory = new KPIFactory();\n         landscape.setKpis(kpiFactory.getConfiguredKPIs(input.getConfig().getKPIs()));\n \n-        Map<ItemDescription, List<String>> templatesAndTargets = new HashMap<>();\n         // read all input sources\n-        new SourceReferencesResolver(formatFactory, logger).resolve(input, templatesAndTargets);\n+        new SourceReferencesResolver(formatFactory, logger).resolve(input);\n \n-        // apply template values to the items\n-        new TemplateResolver().processTemplates(input, templatesAndTargets);\n+        // apply template values to items\n+        new TemplateResolver(logger).resolve(input);\n \n-        // read special labels on items and assign the values to fields\n-        new LabelToFieldProcessor(logger).process(input, landscape);\n+        // resolve links on components to gather more data.\n+        new LinksResolver(logger, linkHandlerFactory).process(input);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMjM1MA==", "bodyText": "excellent observation, Sherlock!", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546232350", "createdAt": "2020-12-19T12:21:52Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/Indexer.java", "diffHunk": "@@ -87,42 +88,45 @@ private void runResolvers(LandscapeDescription input, Landscape landscape) {\n         KPIFactory kpiFactory = new KPIFactory();\n         landscape.setKpis(kpiFactory.getConfiguredKPIs(input.getConfig().getKPIs()));\n \n-        Map<ItemDescription, List<String>> templatesAndTargets = new HashMap<>();\n         // read all input sources\n-        new SourceReferencesResolver(formatFactory, logger).resolve(input, templatesAndTargets);\n+        new SourceReferencesResolver(formatFactory, logger).resolve(input);\n \n-        // apply template values to the items\n-        new TemplateResolver().processTemplates(input, templatesAndTargets);\n+        // apply template values to items\n+        new TemplateResolver(logger).resolve(input);\n \n-        // read special labels on items and assign the values to fields\n-        new LabelToFieldProcessor(logger).process(input, landscape);\n+        // resolve links on components to gather more data.\n+        new LinksResolver(logger, linkHandlerFactory).process(input);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMTk1NA=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMjU4Ng==", "bodyText": "done.", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546232586", "createdAt": "2020-12-19T12:24:33Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/Indexer.java", "diffHunk": "@@ -87,42 +88,45 @@ private void runResolvers(LandscapeDescription input, Landscape landscape) {\n         KPIFactory kpiFactory = new KPIFactory();\n         landscape.setKpis(kpiFactory.getConfiguredKPIs(input.getConfig().getKPIs()));\n \n-        Map<ItemDescription, List<String>> templatesAndTargets = new HashMap<>();\n         // read all input sources\n-        new SourceReferencesResolver(formatFactory, logger).resolve(input, templatesAndTargets);\n+        new SourceReferencesResolver(formatFactory, logger).resolve(input);\n \n-        // apply template values to the items\n-        new TemplateResolver().processTemplates(input, templatesAndTargets);\n+        // apply template values to items\n+        new TemplateResolver(logger).resolve(input);\n \n-        // read special labels on items and assign the values to fields\n-        new LabelToFieldProcessor(logger).process(input, landscape);\n+        // resolve links on components to gather more data.\n+        new LinksResolver(logger, linkHandlerFactory).process(input);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMTk1NA=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzU0MTUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/Indexer.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMjoyMTo0NVrOII7YBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNzoyMjozN1rOIJF6-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMjMyNg==", "bodyText": "Since this is all about resolvers and processors. What is the difference between both of them? They both operate on the provided LandscapeDescription input. Is the result a modified input which is later applied to the Landscape?", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546232326", "createdAt": "2020-12-19T12:21:45Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/Indexer.java", "diffHunk": "@@ -87,42 +88,45 @@ private void runResolvers(LandscapeDescription input, Landscape landscape) {\n         KPIFactory kpiFactory = new KPIFactory();\n         landscape.setKpis(kpiFactory.getConfiguredKPIs(input.getConfig().getKPIs()));\n \n-        Map<ItemDescription, List<String>> templatesAndTargets = new HashMap<>();\n         // read all input sources\n-        new SourceReferencesResolver(formatFactory, logger).resolve(input, templatesAndTargets);\n+        new SourceReferencesResolver(formatFactory, logger).resolve(input);\n \n-        // apply template values to the items\n-        new TemplateResolver().processTemplates(input, templatesAndTargets);\n+        // apply template values to items\n+        new TemplateResolver(logger).resolve(input);\n \n-        // read special labels on items and assign the values to fields\n-        new LabelToFieldProcessor(logger).process(input, landscape);\n+        // resolve links on components to gather more data.\n+        new LinksResolver(logger, linkHandlerFactory).process(input);\n \n         // mask any label containing secrets\n-        new SecureLabelsProcessor().process(input);\n+        new SecureLabelsResolver(logger).resolve(input);\n \n         // create relation targets on the fly if the landscape is configured \"greedy\"\n-        new InstantItemResolver(logger).processTargets(input);\n+        new InstantItemResolver(logger).resolve(input);\n+\n+        // read special labels on items and assign the values to fields\n+        new LabelToFieldResolver(logger).resolve(input);\n \n         // find items for relation endpoints (which can be queries, identifiers...)\n-        new RelationEndpointResolver(logger).processRelations(input);\n+        // KEEP here (must run late after other resolvers)\n+        new RelationEndpointResolver(logger).resolve(input);\n \n         // add any missing groups\n-        new GroupResolver(logger).process(input, landscape);\n+        new GroupProcessor(logger).process(input, landscape);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMjUxNw==", "bodyText": "Maybe the naming can be discussed. Resolvers just modify and extended the input, but not not affect the final output.", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546232517", "createdAt": "2020-12-19T12:23:57Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/Indexer.java", "diffHunk": "@@ -87,42 +88,45 @@ private void runResolvers(LandscapeDescription input, Landscape landscape) {\n         KPIFactory kpiFactory = new KPIFactory();\n         landscape.setKpis(kpiFactory.getConfiguredKPIs(input.getConfig().getKPIs()));\n \n-        Map<ItemDescription, List<String>> templatesAndTargets = new HashMap<>();\n         // read all input sources\n-        new SourceReferencesResolver(formatFactory, logger).resolve(input, templatesAndTargets);\n+        new SourceReferencesResolver(formatFactory, logger).resolve(input);\n \n-        // apply template values to the items\n-        new TemplateResolver().processTemplates(input, templatesAndTargets);\n+        // apply template values to items\n+        new TemplateResolver(logger).resolve(input);\n \n-        // read special labels on items and assign the values to fields\n-        new LabelToFieldProcessor(logger).process(input, landscape);\n+        // resolve links on components to gather more data.\n+        new LinksResolver(logger, linkHandlerFactory).process(input);\n \n         // mask any label containing secrets\n-        new SecureLabelsProcessor().process(input);\n+        new SecureLabelsResolver(logger).resolve(input);\n \n         // create relation targets on the fly if the landscape is configured \"greedy\"\n-        new InstantItemResolver(logger).processTargets(input);\n+        new InstantItemResolver(logger).resolve(input);\n+\n+        // read special labels on items and assign the values to fields\n+        new LabelToFieldResolver(logger).resolve(input);\n \n         // find items for relation endpoints (which can be queries, identifiers...)\n-        new RelationEndpointResolver(logger).processRelations(input);\n+        // KEEP here (must run late after other resolvers)\n+        new RelationEndpointResolver(logger).resolve(input);\n \n         // add any missing groups\n-        new GroupResolver(logger).process(input, landscape);\n+        new GroupProcessor(logger).process(input, landscape);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMjMyNg=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNTg3NQ==", "bodyText": "Why is an input modified if it does not have an effect on the final output?\nI am just trying to understand the underlying mechanism ;)", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546235875", "createdAt": "2020-12-19T12:59:45Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/Indexer.java", "diffHunk": "@@ -87,42 +88,45 @@ private void runResolvers(LandscapeDescription input, Landscape landscape) {\n         KPIFactory kpiFactory = new KPIFactory();\n         landscape.setKpis(kpiFactory.getConfiguredKPIs(input.getConfig().getKPIs()));\n \n-        Map<ItemDescription, List<String>> templatesAndTargets = new HashMap<>();\n         // read all input sources\n-        new SourceReferencesResolver(formatFactory, logger).resolve(input, templatesAndTargets);\n+        new SourceReferencesResolver(formatFactory, logger).resolve(input);\n \n-        // apply template values to the items\n-        new TemplateResolver().processTemplates(input, templatesAndTargets);\n+        // apply template values to items\n+        new TemplateResolver(logger).resolve(input);\n \n-        // read special labels on items and assign the values to fields\n-        new LabelToFieldProcessor(logger).process(input, landscape);\n+        // resolve links on components to gather more data.\n+        new LinksResolver(logger, linkHandlerFactory).process(input);\n \n         // mask any label containing secrets\n-        new SecureLabelsProcessor().process(input);\n+        new SecureLabelsResolver(logger).resolve(input);\n \n         // create relation targets on the fly if the landscape is configured \"greedy\"\n-        new InstantItemResolver(logger).processTargets(input);\n+        new InstantItemResolver(logger).resolve(input);\n+\n+        // read special labels on items and assign the values to fields\n+        new LabelToFieldResolver(logger).resolve(input);\n \n         // find items for relation endpoints (which can be queries, identifiers...)\n-        new RelationEndpointResolver(logger).processRelations(input);\n+        // KEEP here (must run late after other resolvers)\n+        new RelationEndpointResolver(logger).resolve(input);\n \n         // add any missing groups\n-        new GroupResolver(logger).process(input, landscape);\n+        new GroupProcessor(logger).process(input, landscape);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMjMyNg=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNjE5OA==", "bodyText": "First, the data is aggregated in the ComponentDescription objects. This is done sequentially by the different Resolvers. Then the processors do their work and start mapping the input to the final Landscape.", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546236198", "createdAt": "2020-12-19T13:03:35Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/Indexer.java", "diffHunk": "@@ -87,42 +88,45 @@ private void runResolvers(LandscapeDescription input, Landscape landscape) {\n         KPIFactory kpiFactory = new KPIFactory();\n         landscape.setKpis(kpiFactory.getConfiguredKPIs(input.getConfig().getKPIs()));\n \n-        Map<ItemDescription, List<String>> templatesAndTargets = new HashMap<>();\n         // read all input sources\n-        new SourceReferencesResolver(formatFactory, logger).resolve(input, templatesAndTargets);\n+        new SourceReferencesResolver(formatFactory, logger).resolve(input);\n \n-        // apply template values to the items\n-        new TemplateResolver().processTemplates(input, templatesAndTargets);\n+        // apply template values to items\n+        new TemplateResolver(logger).resolve(input);\n \n-        // read special labels on items and assign the values to fields\n-        new LabelToFieldProcessor(logger).process(input, landscape);\n+        // resolve links on components to gather more data.\n+        new LinksResolver(logger, linkHandlerFactory).process(input);\n \n         // mask any label containing secrets\n-        new SecureLabelsProcessor().process(input);\n+        new SecureLabelsResolver(logger).resolve(input);\n \n         // create relation targets on the fly if the landscape is configured \"greedy\"\n-        new InstantItemResolver(logger).processTargets(input);\n+        new InstantItemResolver(logger).resolve(input);\n+\n+        // read special labels on items and assign the values to fields\n+        new LabelToFieldResolver(logger).resolve(input);\n \n         // find items for relation endpoints (which can be queries, identifiers...)\n-        new RelationEndpointResolver(logger).processRelations(input);\n+        // KEEP here (must run late after other resolvers)\n+        new RelationEndpointResolver(logger).resolve(input);\n \n         // add any missing groups\n-        new GroupResolver(logger).process(input, landscape);\n+        new GroupProcessor(logger).process(input, landscape);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMjMyNg=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQwNTExMg==", "bodyText": "Okay thanks, now I understand!", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546405112", "createdAt": "2020-12-20T17:22:37Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/Indexer.java", "diffHunk": "@@ -87,42 +88,45 @@ private void runResolvers(LandscapeDescription input, Landscape landscape) {\n         KPIFactory kpiFactory = new KPIFactory();\n         landscape.setKpis(kpiFactory.getConfiguredKPIs(input.getConfig().getKPIs()));\n \n-        Map<ItemDescription, List<String>> templatesAndTargets = new HashMap<>();\n         // read all input sources\n-        new SourceReferencesResolver(formatFactory, logger).resolve(input, templatesAndTargets);\n+        new SourceReferencesResolver(formatFactory, logger).resolve(input);\n \n-        // apply template values to the items\n-        new TemplateResolver().processTemplates(input, templatesAndTargets);\n+        // apply template values to items\n+        new TemplateResolver(logger).resolve(input);\n \n-        // read special labels on items and assign the values to fields\n-        new LabelToFieldProcessor(logger).process(input, landscape);\n+        // resolve links on components to gather more data.\n+        new LinksResolver(logger, linkHandlerFactory).process(input);\n \n         // mask any label containing secrets\n-        new SecureLabelsProcessor().process(input);\n+        new SecureLabelsResolver(logger).resolve(input);\n \n         // create relation targets on the fly if the landscape is configured \"greedy\"\n-        new InstantItemResolver(logger).processTargets(input);\n+        new InstantItemResolver(logger).resolve(input);\n+\n+        // read special labels on items and assign the values to fields\n+        new LabelToFieldResolver(logger).resolve(input);\n \n         // find items for relation endpoints (which can be queries, identifiers...)\n-        new RelationEndpointResolver(logger).processRelations(input);\n+        // KEEP here (must run late after other resolvers)\n+        new RelationEndpointResolver(logger).resolve(input);\n \n         // add any missing groups\n-        new GroupResolver(logger).process(input, landscape);\n+        new GroupProcessor(logger).process(input, landscape);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMjMyNg=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzU0Mzc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/ItemDescriptionValues.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMjoyNDo1NlrOII7ZFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMjoyODowOVrOII7aXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMjU5Ng==", "bodyText": "The contains check is not necessary. Can't this also be simpler like this: item.getInterfaces().addAll(template.getInterfaces());?", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546232596", "createdAt": "2020-12-19T12:24:56Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/ItemDescriptionValues.java", "diffHunk": "@@ -13,32 +16,46 @@\n      */\n     public static void assignNotNull(ItemDescription existing, ItemDescription increment) {\n \n-        if (increment.getName() != null)\n-            existing.setName(increment.getName());\n+        ComponentDescriptionValues.assignNotNull(existing, increment);\n+\n         if (increment.getType() != null)\n             existing.setType(increment.getType());\n-        if (increment.getDescription() != null)\n-            existing.setDescription(increment.getDescription());\n         if (increment.getContact() != null)\n             existing.setContact(increment.getContact());\n \n-        if (increment.getOwner() != null)\n-            existing.setOwner(increment.getOwner());\n         if (increment.getGroup() != null)\n             existing.setGroup(increment.getGroup());\n \n-        if (increment.getLabels() != null) {\n-            increment.getLabels().forEach((s, s2) -> {\n-                if (increment.getLabel(s) != null) {\n-                    existing.setLabel(s, s2);\n-                }\n-            });\n-        }\n-\n-        existing.getLinks().putAll(increment.getLinks());\n-\n         assignSafe(increment.getRelations(), (rel) -> rel.forEach(existing::addRelation));\n \n         assignSafe(increment.getInterfaces(), (set) -> set.forEach(intf -> existing.getInterfaces().add(intf)));\n     }\n+\n+    /**\n+     * Writes the values of the template (second object) to the first where first is null.\n+     *\n+     * @param item     target\n+     * @param template source\n+     */\n+    public static void assignSafeNotNull(ItemDescription item, ItemDescription template) {\n+\n+        ComponentDescriptionValues.assignSafeNotNull(item, template);\n+\n+        assignSafeIfAbsent(template.getType(), item.getType(), item::setType);\n+        assignSafeIfAbsent(template.getContact(), item.getContact(), item::setContact);\n+        assignSafeIfAbsent(template.getGroup(), item.getGroup(), item::setGroup);\n+\n+        if (template.getProvidedBy() != null) {\n+            template.getProvidedBy().stream()\n+                    .filter(s -> !StringUtils.isEmpty(s) && !item.getProvidedBy().contains(s))\n+                    .forEach(s -> item.getProvidedBy().add(s));\n+        }\n+\n+        template.getRelations().forEach(item::addRelation);\n+\n+        template.getInterfaces().forEach(interfaceItem -> {\n+            if (!item.getInterfaces().contains(interfaceItem))\n+                item.getInterfaces().add(interfaceItem);\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMjkyNw==", "bodyText": "done", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546232927", "createdAt": "2020-12-19T12:28:09Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/ItemDescriptionValues.java", "diffHunk": "@@ -13,32 +16,46 @@\n      */\n     public static void assignNotNull(ItemDescription existing, ItemDescription increment) {\n \n-        if (increment.getName() != null)\n-            existing.setName(increment.getName());\n+        ComponentDescriptionValues.assignNotNull(existing, increment);\n+\n         if (increment.getType() != null)\n             existing.setType(increment.getType());\n-        if (increment.getDescription() != null)\n-            existing.setDescription(increment.getDescription());\n         if (increment.getContact() != null)\n             existing.setContact(increment.getContact());\n \n-        if (increment.getOwner() != null)\n-            existing.setOwner(increment.getOwner());\n         if (increment.getGroup() != null)\n             existing.setGroup(increment.getGroup());\n \n-        if (increment.getLabels() != null) {\n-            increment.getLabels().forEach((s, s2) -> {\n-                if (increment.getLabel(s) != null) {\n-                    existing.setLabel(s, s2);\n-                }\n-            });\n-        }\n-\n-        existing.getLinks().putAll(increment.getLinks());\n-\n         assignSafe(increment.getRelations(), (rel) -> rel.forEach(existing::addRelation));\n \n         assignSafe(increment.getInterfaces(), (set) -> set.forEach(intf -> existing.getInterfaces().add(intf)));\n     }\n+\n+    /**\n+     * Writes the values of the template (second object) to the first where first is null.\n+     *\n+     * @param item     target\n+     * @param template source\n+     */\n+    public static void assignSafeNotNull(ItemDescription item, ItemDescription template) {\n+\n+        ComponentDescriptionValues.assignSafeNotNull(item, template);\n+\n+        assignSafeIfAbsent(template.getType(), item.getType(), item::setType);\n+        assignSafeIfAbsent(template.getContact(), item.getContact(), item::setContact);\n+        assignSafeIfAbsent(template.getGroup(), item.getGroup(), item::setGroup);\n+\n+        if (template.getProvidedBy() != null) {\n+            template.getProvidedBy().stream()\n+                    .filter(s -> !StringUtils.isEmpty(s) && !item.getProvidedBy().contains(s))\n+                    .forEach(s -> item.getProvidedBy().add(s));\n+        }\n+\n+        template.getRelations().forEach(item::addRelation);\n+\n+        template.getInterfaces().forEach(interfaceItem -> {\n+            if (!item.getInterfaces().contains(interfaceItem))\n+                item.getInterfaces().add(interfaceItem);\n+        });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMjU5Ng=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzU0NjQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/LinksResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMjoyNzo0NFrOII7aPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMjoyODo0MlrOII7amA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMjg5Mw==", "bodyText": "Why does this not extend Resolver?", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546232893", "createdAt": "2020-12-19T12:27:44Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/LinksResolver.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.input.dto.ComponentDescription;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.input.external.LinkHandlerFactory;\n+import de.bonndan.nivio.util.SafeAssign;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+\n+/**\n+ * Resolves all links of all landscape components.\n+ */\n+public class LinksResolver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMjk4NA==", "bodyText": "You're right, I have changed it based on your previous comment.", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546232984", "createdAt": "2020-12-19T12:28:42Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/LinksResolver.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.input.dto.ComponentDescription;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.input.external.LinkHandlerFactory;\n+import de.bonndan.nivio.util.SafeAssign;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+\n+/**\n+ * Resolves all links of all landscape components.\n+ */\n+public class LinksResolver {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMjg5Mw=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzU0OTQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/Processor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMjozMTozN1rOII7bpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMzowNTo0M1rOII7n9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMzI1NQ==", "bodyText": "Do you use  an abstract class instead of an interface only because of the ProcessLog field?", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546233255", "createdAt": "2020-12-19T12:31:37Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/Processor.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.model.Landscape;\n+\n+/**\n+ * Modifies the target landscape using input.\n+ *\n+ *\n+ */\n+abstract class Processor {\n+\n+    protected final ProcessLog processLog;\n+\n+    protected Processor(ProcessLog processLog) {\n+        this.processLog = processLog;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNTI0Ng==", "bodyText": "Yes, so far. We can change it to an interface and add the processlog as further argument to process/resolve.", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546235246", "createdAt": "2020-12-19T12:53:30Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/Processor.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.model.Landscape;\n+\n+/**\n+ * Modifies the target landscape using input.\n+ *\n+ *\n+ */\n+abstract class Processor {\n+\n+    protected final ProcessLog processLog;\n+\n+    protected Processor(ProcessLog processLog) {\n+        this.processLog = processLog;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMzI1NQ=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNTk3NA==", "bodyText": "It's ok, I dont mind the abstract class. I think the only thing that \"bothers\" me is that I don't fully understand what the resolvers and the processors do and why - see comment above :)", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546235974", "createdAt": "2020-12-19T13:00:48Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/Processor.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.model.Landscape;\n+\n+/**\n+ * Modifies the target landscape using input.\n+ *\n+ *\n+ */\n+abstract class Processor {\n+\n+    protected final ProcessLog processLog;\n+\n+    protected Processor(ProcessLog processLog) {\n+        this.processLog = processLog;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMzI1NQ=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNjQwNQ==", "bodyText": "Until a few days ago I was not aware of that, too. I just observed that some of the classes in Indexer only worked on the input objects, while others only/mostly worked on the output.", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546236405", "createdAt": "2020-12-19T13:05:43Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/Processor.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.model.Landscape;\n+\n+/**\n+ * Modifies the target landscape using input.\n+ *\n+ *\n+ */\n+abstract class Processor {\n+\n+    protected final ProcessLog processLog;\n+\n+    protected Processor(ProcessLog processLog) {\n+        this.processLog = processLog;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMzI1NQ=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzU1MDU1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/TemplateResolver.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMjozMzoyMFrOII7cLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMzoxOTowOVrOII7tBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMzM5MQ==", "bodyText": "Why is the name set to null?", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546233391", "createdAt": "2020-12-19T12:33:20Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/TemplateResolver.java", "diffHunk": "@@ -1,30 +1,44 @@\n package de.bonndan.nivio.input;\n \n+import de.bonndan.nivio.ProcessingException;\n import de.bonndan.nivio.input.dto.ItemDescription;\n import de.bonndan.nivio.input.dto.LandscapeDescription;\n-import de.bonndan.nivio.model.*;\n-import org.springframework.util.StringUtils;\n+import de.bonndan.nivio.util.URLHelper;\n \n-import java.util.*;\n-\n-import static de.bonndan.nivio.util.SafeAssign.assignSafeIfAbsent;\n+import java.net.URL;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n /**\n  * Responsible to apply templates to landscape items.\n  * <p>\n  * Resolves the items the templates are assigned to as well as dynamic endpoints of relation in templates.\n  */\n-public class TemplateResolver {\n+public class TemplateResolver extends Resolver {\n+\n+    protected TemplateResolver(ProcessLog processLog) {\n+        super(processLog);\n+    }\n \n     /**\n      * Applies the template values and relations to all items the template is assigned to.\n      *\n-     * @param landscape           the landscape containing all(!) items. Querying happens on these items.\n-     * @param templatesAndTargets The assignment can be a list of static item identifiers or dynamic queries to match\n-     *                            certain items.\n+     * @param landscape the landscape containing all(!) items. Querying happens on these items.\n      */\n-    public void processTemplates(LandscapeDescription landscape, Map<ItemDescription, List<String>> templatesAndTargets) {\n-        templatesAndTargets.forEach((landscapeItem, identifiers) -> applyTemplateValues(landscapeItem, identifiers, landscape));\n+    @Override\n+    public void resolve(LandscapeDescription landscape) {\n+\n+        Map<ItemDescription, List<String>> templatesAndTargets = new HashMap<>();\n+        landscape.getSourceReferences().forEach(ref -> {\n+            ref.getAssignTemplates().forEach((key, identifiers) -> {\n+                ItemDescription template = landscape.getTemplates().get(key);\n+                template.setName(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNTA5Nw==", "bodyText": "Because names are more or less unique and I think it makes no sense to apply the same name to different items.", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546235097", "createdAt": "2020-12-19T12:51:42Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/TemplateResolver.java", "diffHunk": "@@ -1,30 +1,44 @@\n package de.bonndan.nivio.input;\n \n+import de.bonndan.nivio.ProcessingException;\n import de.bonndan.nivio.input.dto.ItemDescription;\n import de.bonndan.nivio.input.dto.LandscapeDescription;\n-import de.bonndan.nivio.model.*;\n-import org.springframework.util.StringUtils;\n+import de.bonndan.nivio.util.URLHelper;\n \n-import java.util.*;\n-\n-import static de.bonndan.nivio.util.SafeAssign.assignSafeIfAbsent;\n+import java.net.URL;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n /**\n  * Responsible to apply templates to landscape items.\n  * <p>\n  * Resolves the items the templates are assigned to as well as dynamic endpoints of relation in templates.\n  */\n-public class TemplateResolver {\n+public class TemplateResolver extends Resolver {\n+\n+    protected TemplateResolver(ProcessLog processLog) {\n+        super(processLog);\n+    }\n \n     /**\n      * Applies the template values and relations to all items the template is assigned to.\n      *\n-     * @param landscape           the landscape containing all(!) items. Querying happens on these items.\n-     * @param templatesAndTargets The assignment can be a list of static item identifiers or dynamic queries to match\n-     *                            certain items.\n+     * @param landscape the landscape containing all(!) items. Querying happens on these items.\n      */\n-    public void processTemplates(LandscapeDescription landscape, Map<ItemDescription, List<String>> templatesAndTargets) {\n-        templatesAndTargets.forEach((landscapeItem, identifiers) -> applyTemplateValues(landscapeItem, identifiers, landscape));\n+    @Override\n+    public void resolve(LandscapeDescription landscape) {\n+\n+        Map<ItemDescription, List<String>> templatesAndTargets = new HashMap<>();\n+        landscape.getSourceReferences().forEach(ref -> {\n+            ref.getAssignTemplates().forEach((key, identifiers) -> {\n+                ItemDescription template = landscape.getTemplates().get(key);\n+                template.setName(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMzM5MQ=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNjA4Mw==", "bodyText": "Isn't the name then null by default for a template? Why set it explicitly?", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546236083", "createdAt": "2020-12-19T13:02:11Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/TemplateResolver.java", "diffHunk": "@@ -1,30 +1,44 @@\n package de.bonndan.nivio.input;\n \n+import de.bonndan.nivio.ProcessingException;\n import de.bonndan.nivio.input.dto.ItemDescription;\n import de.bonndan.nivio.input.dto.LandscapeDescription;\n-import de.bonndan.nivio.model.*;\n-import org.springframework.util.StringUtils;\n+import de.bonndan.nivio.util.URLHelper;\n \n-import java.util.*;\n-\n-import static de.bonndan.nivio.util.SafeAssign.assignSafeIfAbsent;\n+import java.net.URL;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n /**\n  * Responsible to apply templates to landscape items.\n  * <p>\n  * Resolves the items the templates are assigned to as well as dynamic endpoints of relation in templates.\n  */\n-public class TemplateResolver {\n+public class TemplateResolver extends Resolver {\n+\n+    protected TemplateResolver(ProcessLog processLog) {\n+        super(processLog);\n+    }\n \n     /**\n      * Applies the template values and relations to all items the template is assigned to.\n      *\n-     * @param landscape           the landscape containing all(!) items. Querying happens on these items.\n-     * @param templatesAndTargets The assignment can be a list of static item identifiers or dynamic queries to match\n-     *                            certain items.\n+     * @param landscape the landscape containing all(!) items. Querying happens on these items.\n      */\n-    public void processTemplates(LandscapeDescription landscape, Map<ItemDescription, List<String>> templatesAndTargets) {\n-        templatesAndTargets.forEach((landscapeItem, identifiers) -> applyTemplateValues(landscapeItem, identifiers, landscape));\n+    @Override\n+    public void resolve(LandscapeDescription landscape) {\n+\n+        Map<ItemDescription, List<String>> templatesAndTargets = new HashMap<>();\n+        landscape.getSourceReferences().forEach(ref -> {\n+            ref.getAssignTemplates().forEach((key, identifiers) -> {\n+                ItemDescription template = landscape.getTemplates().get(key);\n+                template.setName(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMzM5MQ=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNjI2NA==", "bodyText": "I mean, annotate it as @Nullable, make the getter either return @Nullable or  @nonnulland anOptional` and the caller of the getter knows what to expect.\nAlso, the name is annotated with @NotEmpty in ItemDescription. I think null is not a valid value - is it?", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546236264", "createdAt": "2020-12-19T13:03:55Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/TemplateResolver.java", "diffHunk": "@@ -1,30 +1,44 @@\n package de.bonndan.nivio.input;\n \n+import de.bonndan.nivio.ProcessingException;\n import de.bonndan.nivio.input.dto.ItemDescription;\n import de.bonndan.nivio.input.dto.LandscapeDescription;\n-import de.bonndan.nivio.model.*;\n-import org.springframework.util.StringUtils;\n+import de.bonndan.nivio.util.URLHelper;\n \n-import java.util.*;\n-\n-import static de.bonndan.nivio.util.SafeAssign.assignSafeIfAbsent;\n+import java.net.URL;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n /**\n  * Responsible to apply templates to landscape items.\n  * <p>\n  * Resolves the items the templates are assigned to as well as dynamic endpoints of relation in templates.\n  */\n-public class TemplateResolver {\n+public class TemplateResolver extends Resolver {\n+\n+    protected TemplateResolver(ProcessLog processLog) {\n+        super(processLog);\n+    }\n \n     /**\n      * Applies the template values and relations to all items the template is assigned to.\n      *\n-     * @param landscape           the landscape containing all(!) items. Querying happens on these items.\n-     * @param templatesAndTargets The assignment can be a list of static item identifiers or dynamic queries to match\n-     *                            certain items.\n+     * @param landscape the landscape containing all(!) items. Querying happens on these items.\n      */\n-    public void processTemplates(LandscapeDescription landscape, Map<ItemDescription, List<String>> templatesAndTargets) {\n-        templatesAndTargets.forEach((landscapeItem, identifiers) -> applyTemplateValues(landscapeItem, identifiers, landscape));\n+    @Override\n+    public void resolve(LandscapeDescription landscape) {\n+\n+        Map<ItemDescription, List<String>> templatesAndTargets = new HashMap<>();\n+        landscape.getSourceReferences().forEach(ref -> {\n+            ref.getAssignTemplates().forEach((key, identifiers) -> {\n+                ItemDescription template = landscape.getTemplates().get(key);\n+                template.setName(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMzM5MQ=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNzE2Ng==", "bodyText": "ItemDescription is misused as template. And perhaps you are right: there could exist items without a name (not without identifier, however).", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546237166", "createdAt": "2020-12-19T13:14:14Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/TemplateResolver.java", "diffHunk": "@@ -1,30 +1,44 @@\n package de.bonndan.nivio.input;\n \n+import de.bonndan.nivio.ProcessingException;\n import de.bonndan.nivio.input.dto.ItemDescription;\n import de.bonndan.nivio.input.dto.LandscapeDescription;\n-import de.bonndan.nivio.model.*;\n-import org.springframework.util.StringUtils;\n+import de.bonndan.nivio.util.URLHelper;\n \n-import java.util.*;\n-\n-import static de.bonndan.nivio.util.SafeAssign.assignSafeIfAbsent;\n+import java.net.URL;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n /**\n  * Responsible to apply templates to landscape items.\n  * <p>\n  * Resolves the items the templates are assigned to as well as dynamic endpoints of relation in templates.\n  */\n-public class TemplateResolver {\n+public class TemplateResolver extends Resolver {\n+\n+    protected TemplateResolver(ProcessLog processLog) {\n+        super(processLog);\n+    }\n \n     /**\n      * Applies the template values and relations to all items the template is assigned to.\n      *\n-     * @param landscape           the landscape containing all(!) items. Querying happens on these items.\n-     * @param templatesAndTargets The assignment can be a list of static item identifiers or dynamic queries to match\n-     *                            certain items.\n+     * @param landscape the landscape containing all(!) items. Querying happens on these items.\n      */\n-    public void processTemplates(LandscapeDescription landscape, Map<ItemDescription, List<String>> templatesAndTargets) {\n-        templatesAndTargets.forEach((landscapeItem, identifiers) -> applyTemplateValues(landscapeItem, identifiers, landscape));\n+    @Override\n+    public void resolve(LandscapeDescription landscape) {\n+\n+        Map<ItemDescription, List<String>> templatesAndTargets = new HashMap<>();\n+        landscape.getSourceReferences().forEach(ref -> {\n+            ref.getAssignTemplates().forEach((key, identifiers) -> {\n+                ItemDescription template = landscape.getTemplates().get(key);\n+                template.setName(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMzM5MQ=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNzcwMA==", "bodyText": "I have updated the interface and added @nullable annotations", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546237700", "createdAt": "2020-12-19T13:19:09Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/TemplateResolver.java", "diffHunk": "@@ -1,30 +1,44 @@\n package de.bonndan.nivio.input;\n \n+import de.bonndan.nivio.ProcessingException;\n import de.bonndan.nivio.input.dto.ItemDescription;\n import de.bonndan.nivio.input.dto.LandscapeDescription;\n-import de.bonndan.nivio.model.*;\n-import org.springframework.util.StringUtils;\n+import de.bonndan.nivio.util.URLHelper;\n \n-import java.util.*;\n-\n-import static de.bonndan.nivio.util.SafeAssign.assignSafeIfAbsent;\n+import java.net.URL;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n \n /**\n  * Responsible to apply templates to landscape items.\n  * <p>\n  * Resolves the items the templates are assigned to as well as dynamic endpoints of relation in templates.\n  */\n-public class TemplateResolver {\n+public class TemplateResolver extends Resolver {\n+\n+    protected TemplateResolver(ProcessLog processLog) {\n+        super(processLog);\n+    }\n \n     /**\n      * Applies the template values and relations to all items the template is assigned to.\n      *\n-     * @param landscape           the landscape containing all(!) items. Querying happens on these items.\n-     * @param templatesAndTargets The assignment can be a list of static item identifiers or dynamic queries to match\n-     *                            certain items.\n+     * @param landscape the landscape containing all(!) items. Querying happens on these items.\n      */\n-    public void processTemplates(LandscapeDescription landscape, Map<ItemDescription, List<String>> templatesAndTargets) {\n-        templatesAndTargets.forEach((landscapeItem, identifiers) -> applyTemplateValues(landscapeItem, identifiers, landscape));\n+    @Override\n+    public void resolve(LandscapeDescription landscape) {\n+\n+        Map<ItemDescription, List<String>> templatesAndTargets = new HashMap<>();\n+        landscape.getSourceReferences().forEach(ref -> {\n+            ref.getAssignTemplates().forEach((key, identifiers) -> {\n+                ItemDescription template = landscape.getTemplates().get(key);\n+                template.setName(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzMzM5MQ=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzU1NzM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/dto/ComponentDescription.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMjo0MjoxNFrOII7fWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMFQxNzoyNzo0OVrOIJF9bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNDIwMg==", "bodyText": "Is there any ComponentDescription that will not have a name, description and owner when the object is constructed? We are working towards more inmutability in objects, I would not invite to use the setters through the interface and rather deprecate as much setters as possible ;)", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546234202", "createdAt": "2020-12-19T12:42:14Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/dto/ComponentDescription.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package de.bonndan.nivio.input.dto;\n+\n+import de.bonndan.nivio.model.Labeled;\n+import de.bonndan.nivio.model.Linked;\n+\n+/**\n+ * Base interface for input DTOs.\n+ *\n+ *\n+ */\n+public interface ComponentDescription extends Labeled, Linked {\n+\n+    String getIdentifier();\n+\n+    String getName();\n+\n+    void setName(String name);\n+\n+    String getDescription();\n+\n+    void setDescription(String description);\n+\n+    String getOwner();\n+\n+    void setOwner(String owner);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNTU5OA==", "bodyText": "Yes, it is very likely that these values become available later during processing only. I would leave the input DTOs (all what extends from ComponentDescription) as mutable as possible.", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546235598", "createdAt": "2020-12-19T12:56:46Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/dto/ComponentDescription.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package de.bonndan.nivio.input.dto;\n+\n+import de.bonndan.nivio.model.Labeled;\n+import de.bonndan.nivio.model.Linked;\n+\n+/**\n+ * Base interface for input DTOs.\n+ *\n+ *\n+ */\n+public interface ComponentDescription extends Labeled, Linked {\n+\n+    String getIdentifier();\n+\n+    String getName();\n+\n+    void setName(String name);\n+\n+    String getDescription();\n+\n+    void setDescription(String description);\n+\n+    String getOwner();\n+\n+    void setOwner(String owner);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNDIwMg=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjQwNTc0MA==", "bodyText": "Okay", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546405740", "createdAt": "2020-12-20T17:27:49Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/dto/ComponentDescription.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package de.bonndan.nivio.input.dto;\n+\n+import de.bonndan.nivio.model.Labeled;\n+import de.bonndan.nivio.model.Linked;\n+\n+/**\n+ * Base interface for input DTOs.\n+ *\n+ *\n+ */\n+public interface ComponentDescription extends Labeled, Linked {\n+\n+    String getIdentifier();\n+\n+    String getName();\n+\n+    void setName(String name);\n+\n+    String getDescription();\n+\n+    void setDescription(String description);\n+\n+    String getOwner();\n+\n+    void setOwner(String owner);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNDIwMg=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzU2MTQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/external/github/GitHubRepoHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMjo0Njo0OVrOII7hLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMjo1OToyMFrOII7l0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNDY2OA==", "bodyText": "This is cool \ud83d\ude3b\nShouldn't the description though be something like \"Loads the open issues, open pull requests, the readme and the repositories description\"?", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546234668", "createdAt": "2020-12-19T12:46:49Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/external/github/GitHubRepoHandler.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package de.bonndan.nivio.input.external.github;\n+\n+import de.bonndan.nivio.input.dto.ComponentDescription;\n+import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.input.external.ExternalLinkHandler;\n+import de.bonndan.nivio.model.Link;\n+import org.kohsuke.github.GHIssueState;\n+import org.kohsuke.github.GHRepository;\n+import org.kohsuke.github.GitHub;\n+import org.kohsuke.github.MarkdownMode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.lang.NonNull;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * https://github-api.kohsuke.org/index.html\n+ */\n+public class GitHubRepoHandler implements ExternalLinkHandler {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GitHubRepoHandler.class);\n+\n+    public static final String OPEN_ISSUES = \"github.issues.open\";\n+    public static final String OPEN_PRS = \"github.pullrequests.open\";\n+    public static final String README = \"github.readme\";\n+    public static final String DESCRIPTION = \"github.description\";\n+\n+    private final GitHub gitHub;\n+\n+    public GitHubRepoHandler(GitHub gitHub) {\n+        this.gitHub = gitHub;\n+    }\n+\n+    /**\n+     * Loads the open issues from the repo.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNTg1Ng==", "bodyText": "done", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546235856", "createdAt": "2020-12-19T12:59:20Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/external/github/GitHubRepoHandler.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package de.bonndan.nivio.input.external.github;\n+\n+import de.bonndan.nivio.input.dto.ComponentDescription;\n+import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.input.external.ExternalLinkHandler;\n+import de.bonndan.nivio.model.Link;\n+import org.kohsuke.github.GHIssueState;\n+import org.kohsuke.github.GHRepository;\n+import org.kohsuke.github.GitHub;\n+import org.kohsuke.github.MarkdownMode;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.lang.NonNull;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * https://github-api.kohsuke.org/index.html\n+ */\n+public class GitHubRepoHandler implements ExternalLinkHandler {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GitHubRepoHandler.class);\n+\n+    public static final String OPEN_ISSUES = \"github.issues.open\";\n+    public static final String OPEN_PRS = \"github.pullrequests.open\";\n+    public static final String README = \"github.readme\";\n+    public static final String DESCRIPTION = \"github.description\";\n+\n+    private final GitHub gitHub;\n+\n+    public GitHubRepoHandler(GitHub gitHub) {\n+        this.gitHub = gitHub;\n+    }\n+\n+    /**\n+     * Loads the open issues from the repo.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNDY2OA=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzU2NDk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/external/springboot/CompositeHealthDeserializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMjo1MTo1M1rOII7i4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxMzoyOTozNFrOII7w6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNTEwNA==", "bodyText": "There is no test for this, is there? Also I didn't find one for the JsonCompositeHealth. Why not addind directly a test for this new functionality? The test should be rather simple now.\nI started adding jacoco with #329 and from what I saw, we can really improve on test code coverage!", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546235104", "createdAt": "2020-12-19T12:51:53Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/external/springboot/CompositeHealthDeserializer.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package de.bonndan.nivio.input.external.springboot;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.TreeNode;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.springframework.boot.jackson.JsonComponent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+@JsonComponent\n+public class CompositeHealthDeserializer extends JsonDeserializer<JsonCompositeHealth> {\n+\n+    @Override\n+    public JsonCompositeHealth deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzODY5OQ==", "bodyText": "It's tested indirectly in SpringBootHealthHandlerTest. Although you're right, I am not very motivated to invest my time in an JsonParser/TreeNode/bla etc. deep dive.", "url": "https://github.com/dedica-team/nivio/pull/336#discussion_r546238699", "createdAt": "2020-12-19T13:29:34Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/external/springboot/CompositeHealthDeserializer.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package de.bonndan.nivio.input.external.springboot;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.TreeNode;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.node.TextNode;\n+import org.springframework.boot.jackson.JsonComponent;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+@JsonComponent\n+public class CompositeHealthDeserializer extends JsonDeserializer<JsonCompositeHealth> {\n+\n+    @Override\n+    public JsonCompositeHealth deserialize(JsonParser jsonParser, DeserializationContext deserializationContext) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjIzNTEwNA=="}, "originalCommit": {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4059, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}