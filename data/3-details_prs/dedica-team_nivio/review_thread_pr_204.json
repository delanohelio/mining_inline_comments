{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NDk1MzQ3", "number": 204, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQyMTo0OTowMFrOESMAhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODoxNDoyMVrOEUJbpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTA2NTY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/GroupQueryResolver.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQyMTo0OTowMFrOG3Pa0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMjozNToxNFrOG52KtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzQ4OQ==", "bodyText": "Here we are reading the group (String) from the item and then setting the group (String) back again to the item. We are changing what was written before in the item to then be the group identifier.\nWhy wasn't it the identifier from the beginning?\nActually, this only makes sense if we are updating the group of an item. Then, I would prefer to have an updateGroup method on the Item and an updateGroupsOnItems on the Landscape. Then, we also wouldn't be exposing implementation details of the landscape and the items to this Resolver.\n(about exposing the implementation details, this applies to the other contents of the processmethod too)", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r460577489", "createdAt": "2020-07-26T21:49:00Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/GroupQueryResolver.java", "diffHunk": "@@ -30,5 +31,11 @@ public void process(LandscapeDescription input, LandscapeImpl landscape) {\n             }\n             groupDescription.getContains().forEach(condition -> group.getItems().addAll(landscape.getItems().query(condition)));\n         });\n+\n+        //cleanup to ensure every items has the group identifier\n+        landscape.getItems().stream().forEach(item -> {\n+            Group group = landscape.getGroup(item.getGroup()); //if group is empty, COMMON is returned\n+            item.setGroup(group.getIdentifier());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a15511f9c2012cff0cc2048bfb1a78d5dd0e741d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUwMjIwMg==", "bodyText": "The method landscape.getGroup() has some magic to be non-nullable, so here we ensure the item.group field is set to something that really points to a group. Could make an example how Landscape.updateGroupsOnItems might be used?", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462502202", "createdAt": "2020-07-29T18:29:00Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/GroupQueryResolver.java", "diffHunk": "@@ -30,5 +31,11 @@ public void process(LandscapeDescription input, LandscapeImpl landscape) {\n             }\n             groupDescription.getContains().forEach(condition -> group.getItems().addAll(landscape.getItems().query(condition)));\n         });\n+\n+        //cleanup to ensure every items has the group identifier\n+        landscape.getItems().stream().forEach(item -> {\n+            Group group = landscape.getGroup(item.getGroup()); //if group is empty, COMMON is returned\n+            item.setGroup(group.getIdentifier());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzQ4OQ=="}, "originalCommit": {"oid": "a15511f9c2012cff0cc2048bfb1a78d5dd0e741d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MzAwOQ==", "bodyText": "Yes, I saw that it uses that Group.COMMON and thanks for your explanation! I am still concerned about the mutability of Item and of the way we expose the internals of the objects.\nSo if your example means that you would agree to a refactoring (because you call it Landscape.updateGroupsOnItems): yes, please and I'll do the refactoring if you like.\nI am still wondering why the identifier can not be set on the item right from the beginning? Why exactly isn't it possible to have such (important) fields immutable right from the beginning when we create an instance of the object?", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462563009", "createdAt": "2020-07-29T20:18:13Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/GroupQueryResolver.java", "diffHunk": "@@ -30,5 +31,11 @@ public void process(LandscapeDescription input, LandscapeImpl landscape) {\n             }\n             groupDescription.getContains().forEach(condition -> group.getItems().addAll(landscape.getItems().query(condition)));\n         });\n+\n+        //cleanup to ensure every items has the group identifier\n+        landscape.getItems().stream().forEach(item -> {\n+            Group group = landscape.getGroup(item.getGroup()); //if group is empty, COMMON is returned\n+            item.setGroup(group.getIdentifier());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzQ4OQ=="}, "originalCommit": {"oid": "a15511f9c2012cff0cc2048bfb1a78d5dd0e741d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2ODAxNQ==", "bodyText": "You are right about the immutability, although some things cannot be set right from the start. And if we're strict about immutability and side effect free programming, we end in reference update hell (this is still a graph with lots of references).\nMy idea was that all graph components are value objects without much business logic. The logic was meant to reside in the resolvers as far as possible. So we have small units (resolvers) for one dedicated purpose and small value objects.\nObviously the landscape.getGroup() method does too much, and I'd rather go the other way and refactor even more logic out of the graph components.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462568015", "createdAt": "2020-07-29T20:27:36Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/GroupQueryResolver.java", "diffHunk": "@@ -30,5 +31,11 @@ public void process(LandscapeDescription input, LandscapeImpl landscape) {\n             }\n             groupDescription.getContains().forEach(condition -> group.getItems().addAll(landscape.getItems().query(condition)));\n         });\n+\n+        //cleanup to ensure every items has the group identifier\n+        landscape.getItems().stream().forEach(item -> {\n+            Group group = landscape.getGroup(item.getGroup()); //if group is empty, COMMON is returned\n+            item.setGroup(group.getIdentifier());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzQ4OQ=="}, "originalCommit": {"oid": "a15511f9c2012cff0cc2048bfb1a78d5dd0e741d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwOTQ5Mw==", "bodyText": "Ok, I get that about the resolvers and the value object - that approach is fine. Since I lack the overview of how the value objects are used, I was concerned about the objects having an invalid state (in a field such as an identifier). If only a designated resolver manages them, and the logic resides inside of that - that should be fine.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463309493", "createdAt": "2020-07-30T22:35:14Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/GroupQueryResolver.java", "diffHunk": "@@ -30,5 +31,11 @@ public void process(LandscapeDescription input, LandscapeImpl landscape) {\n             }\n             groupDescription.getContains().forEach(condition -> group.getItems().addAll(landscape.getItems().query(condition)));\n         });\n+\n+        //cleanup to ensure every items has the group identifier\n+        landscape.getItems().stream().forEach(item -> {\n+            Group group = landscape.getGroup(item.getGroup()); //if group is empty, COMMON is returned\n+            item.setGroup(group.getIdentifier());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzQ4OQ=="}, "originalCommit": {"oid": "a15511f9c2012cff0cc2048bfb1a78d5dd0e741d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTA2NjYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/GroupQueryResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQyMTo1MDoxM1rOG3PbTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDowMDoxNFrOG5H_AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzYxMw==", "bodyText": "The comment: how does this happen? I could not see it from the implementation of getGroup() or elsewhere?", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r460577613", "createdAt": "2020-07-26T21:50:13Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/GroupQueryResolver.java", "diffHunk": "@@ -30,5 +31,11 @@ public void process(LandscapeDescription input, LandscapeImpl landscape) {\n             }\n             groupDescription.getContains().forEach(condition -> group.getItems().addAll(landscape.getItems().query(condition)));\n         });\n+\n+        //cleanup to ensure every items has the group identifier\n+        landscape.getItems().stream().forEach(item -> {\n+            Group group = landscape.getGroup(item.getGroup()); //if group is empty, COMMON is returned", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a15511f9c2012cff0cc2048bfb1a78d5dd0e741d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MjIzOA==", "bodyText": "The input DTOs might not have the group reference, and all following resolvers might fail to find or set a group. So this is a fallback. I'll add this explanation to the code.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462492238", "createdAt": "2020-07-29T18:11:54Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/GroupQueryResolver.java", "diffHunk": "@@ -30,5 +31,11 @@ public void process(LandscapeDescription input, LandscapeImpl landscape) {\n             }\n             groupDescription.getContains().forEach(condition -> group.getItems().addAll(landscape.getItems().query(condition)));\n         });\n+\n+        //cleanup to ensure every items has the group identifier\n+        landscape.getItems().stream().forEach(item -> {\n+            Group group = landscape.getGroup(item.getGroup()); //if group is empty, COMMON is returned", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzYxMw=="}, "originalCommit": {"oid": "a15511f9c2012cff0cc2048bfb1a78d5dd0e741d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU1MjgzMw==", "bodyText": "Ok, so it is happening inside of the Group, now I see it.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462552833", "createdAt": "2020-07-29T20:00:14Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/input/GroupQueryResolver.java", "diffHunk": "@@ -30,5 +31,11 @@ public void process(LandscapeDescription input, LandscapeImpl landscape) {\n             }\n             groupDescription.getContains().forEach(condition -> group.getItems().addAll(landscape.getItems().query(condition)));\n         });\n+\n+        //cleanup to ensure every items has the group identifier\n+        landscape.getItems().stream().forEach(item -> {\n+            Group group = landscape.getGroup(item.getGroup()); //if group is empty, COMMON is returned", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3NzYxMw=="}, "originalCommit": {"oid": "a15511f9c2012cff0cc2048bfb1a78d5dd0e741d"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTA3MTc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/layout/AllGroupsGraph.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQyMTo1Nzo1MFrOG3Pd4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMTo0NzowNFrOG5LaIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3ODI3NA==", "bodyText": "This returns the JGraphXConfig, which is not related to JGraphX anymore - or am I wrong? Shouldn't we rename the method and the config class?", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r460578274", "createdAt": "2020-07-26T21:57:50Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/layout/AllGroupsGraph.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package de.bonndan.nivio.output.layout;\n+\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.Landscape;\n+import de.bonndan.nivio.model.LandscapeItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.*;\n+\n+/**\n+ * Renders a graph of group containers only, not regarding items inside the containers.\n+ */\n+public class AllGroupsGraph {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AllGroupsGraph.class);\n+    public static final int FORCE_CONSTANT = 350;\n+    public static final int MAX_DISTANCE_LIMIT = 1000;\n+\n+    private final Map<Group, LayoutedComponent> groupNodes = new LinkedHashMap<>();\n+    private final FastOrganicLayout layout;\n+    private final Landscape landscape;\n+\n+    public AllGroupsGraph(Landscape landscape, Map<String, Group> groups, Map<String, SubGraph> subgraphs) {\n+        this.landscape = landscape;\n+\n+        LOGGER.debug(\"Subgraphs sequence: {}\", subgraphs);\n+\n+        List<LandscapeItem> items = new ArrayList<>();\n+        groups.forEach((groupName, groupItem) -> {\n+            LayoutedComponent groupGeometry = subgraphs.get(groupName).getOuterBounds();\n+            groupNodes.put(groupItem, groupGeometry);\n+            items.addAll(groupItem.getItems());\n+        });\n+        LOGGER.debug(\"Group node sequence: {}\", groupNodes);\n+\n+        addVirtualEdgesBetweenGroups(items);\n+\n+        layout = new FastOrganicLayout(new ArrayList<>(groupNodes.values()));\n+        //layout.setDebug(true);\n+\n+        Optional.ofNullable(landscape.getConfig().getJgraphx().getMaxIterations())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a15511f9c2012cff0cc2048bfb1a78d5dd0e741d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ5MDI2Ng==", "bodyText": "yes, and this also requires updating the documentation.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462490266", "createdAt": "2020-07-29T18:08:36Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/layout/AllGroupsGraph.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package de.bonndan.nivio.output.layout;\n+\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.Landscape;\n+import de.bonndan.nivio.model.LandscapeItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.*;\n+\n+/**\n+ * Renders a graph of group containers only, not regarding items inside the containers.\n+ */\n+public class AllGroupsGraph {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AllGroupsGraph.class);\n+    public static final int FORCE_CONSTANT = 350;\n+    public static final int MAX_DISTANCE_LIMIT = 1000;\n+\n+    private final Map<Group, LayoutedComponent> groupNodes = new LinkedHashMap<>();\n+    private final FastOrganicLayout layout;\n+    private final Landscape landscape;\n+\n+    public AllGroupsGraph(Landscape landscape, Map<String, Group> groups, Map<String, SubGraph> subgraphs) {\n+        this.landscape = landscape;\n+\n+        LOGGER.debug(\"Subgraphs sequence: {}\", subgraphs);\n+\n+        List<LandscapeItem> items = new ArrayList<>();\n+        groups.forEach((groupName, groupItem) -> {\n+            LayoutedComponent groupGeometry = subgraphs.get(groupName).getOuterBounds();\n+            groupNodes.put(groupItem, groupGeometry);\n+            items.addAll(groupItem.getItems());\n+        });\n+        LOGGER.debug(\"Group node sequence: {}\", groupNodes);\n+\n+        addVirtualEdgesBetweenGroups(items);\n+\n+        layout = new FastOrganicLayout(new ArrayList<>(groupNodes.values()));\n+        //layout.setDebug(true);\n+\n+        Optional.ofNullable(landscape.getConfig().getJgraphx().getMaxIterations())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3ODI3NA=="}, "originalCommit": {"oid": "a15511f9c2012cff0cc2048bfb1a78d5dd0e741d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYwODkzMQ==", "bodyText": "done. also separated configs into two: one for group layout, one for layout within groups", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462608931", "createdAt": "2020-07-29T21:47:04Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/layout/AllGroupsGraph.java", "diffHunk": "@@ -0,0 +1,111 @@\n+package de.bonndan.nivio.output.layout;\n+\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.Landscape;\n+import de.bonndan.nivio.model.LandscapeItem;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.*;\n+\n+/**\n+ * Renders a graph of group containers only, not regarding items inside the containers.\n+ */\n+public class AllGroupsGraph {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AllGroupsGraph.class);\n+    public static final int FORCE_CONSTANT = 350;\n+    public static final int MAX_DISTANCE_LIMIT = 1000;\n+\n+    private final Map<Group, LayoutedComponent> groupNodes = new LinkedHashMap<>();\n+    private final FastOrganicLayout layout;\n+    private final Landscape landscape;\n+\n+    public AllGroupsGraph(Landscape landscape, Map<String, Group> groups, Map<String, SubGraph> subgraphs) {\n+        this.landscape = landscape;\n+\n+        LOGGER.debug(\"Subgraphs sequence: {}\", subgraphs);\n+\n+        List<LandscapeItem> items = new ArrayList<>();\n+        groups.forEach((groupName, groupItem) -> {\n+            LayoutedComponent groupGeometry = subgraphs.get(groupName).getOuterBounds();\n+            groupNodes.put(groupItem, groupGeometry);\n+            items.addAll(groupItem.getItems());\n+        });\n+        LOGGER.debug(\"Group node sequence: {}\", groupNodes);\n+\n+        addVirtualEdgesBetweenGroups(items);\n+\n+        layout = new FastOrganicLayout(new ArrayList<>(groupNodes.values()));\n+        //layout.setDebug(true);\n+\n+        Optional.ofNullable(landscape.getConfig().getJgraphx().getMaxIterations())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDU3ODI3NA=="}, "originalCommit": {"oid": "a15511f9c2012cff0cc2048bfb1a78d5dd0e741d"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjY0NjY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/map/svg/SVGRenderer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMTowMDowN1rOG3druA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxOTowMDozNlrOG4aTbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgxMTE5Mg==", "bodyText": "This will link the image from 'http://localhost:8080/icons/service.png'\nmaybe it is better to embed the image base64 encoded.\nI think this is also the reason why 'https://github.com/dedica-team/nivio/actions/runs/183402402' fails.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r460811192", "createdAt": "2020-07-27T11:00:07Z", "author": {"login": "BilligsterUser"}, "path": "src/main/java/de/bonndan/nivio/output/map/svg/SVGRenderer.java", "diffHunk": "@@ -1,33 +1,113 @@\n package de.bonndan.nivio.output.map.svg;\n \n-import de.bonndan.nivio.model.LandscapeImpl;\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.output.Color;\n+import de.bonndan.nivio.output.LocalServer;\n import de.bonndan.nivio.output.Renderer;\n+import de.bonndan.nivio.output.layout.LayoutedComponent;\n+import de.bonndan.nivio.output.map.hex.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Service;\n+import org.springframework.util.StringUtils;\n \n+import java.awt.geom.Point2D;\n import java.io.File;\n import java.io.FileWriter;\n import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicLong;\n \n @Service\n public class SVGRenderer implements Renderer<String> {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(SVGRenderer.class);\n     public static final int DEFAULT_ICON_SIZE = 50;\n+\n+    private final LocalServer localServer;\n     private final MapStyleSheetFactory mapStyleSheetFactory;\n \n-    public SVGRenderer(MapStyleSheetFactory mapStyleSheetFactory) {\n+    public SVGRenderer(LocalServer localServer, MapStyleSheetFactory mapStyleSheetFactory) {\n+        this.localServer = localServer;\n         this.mapStyleSheetFactory = mapStyleSheetFactory;\n     }\n \n     @Override\n-    public String render(LandscapeImpl landscape) {\n-        SVGDocument svgDocument = new SVGDocument(landscape, mapStyleSheetFactory);\n+    public String render(LayoutedComponent layoutedComponent) {\n+        applyValues(layoutedComponent);\n+        SVGDocument svgDocument = new SVGDocument(layoutedComponent, mapStyleSheetFactory);\n         return svgDocument.getXML();\n     }\n \n     @Override\n-    public void render(LandscapeImpl landscape, File file) throws IOException {\n+    public void render(LayoutedComponent landscape, File file) throws IOException {\n         FileWriter fileWriter = new FileWriter(file);\n         fileWriter.write(render(landscape));\n         fileWriter.close();\n     }\n+\n+    /**\n+     * @param layoutedComponent layouted landscape\n+     */\n+    private void applyValues(LayoutedComponent layoutedComponent) {\n+\n+        Point2D.Double margin = getMargins(layoutedComponent);\n+        layoutedComponent.getChildren().forEach(groupBounds -> {\n+\n+            LOGGER.debug(\"group offset {} {}\", groupBounds.getX(), groupBounds.getY());\n+            Group group = (Group) groupBounds.getComponent();\n+            if (StringUtils.isEmpty(group.getColor())) {\n+                group.setColor(Color.getGroupColor(group));\n+            }\n+            groupBounds.setX(groupBounds.getX() + margin.x);\n+            groupBounds.setY(groupBounds.getY() + margin.y);\n+\n+            groupBounds.getChildren().forEach(itemBounds -> {\n+                LOGGER.debug(\"original item pos {} {}\", itemBounds.getX(), itemBounds.getY());\n+                itemBounds.setX(itemBounds.getX() + groupBounds.getX());\n+                itemBounds.setY(itemBounds.getY() + groupBounds.getY());\n+                LOGGER.debug(\"item pos with group offset: {} {}\", itemBounds.getX(), itemBounds.getY());\n+\n+                Item item = (Item) itemBounds.getComponent();\n+                itemBounds.setColor(group.getColor());\n+                itemBounds.setIcon(localServer.getIconUrl(item).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a15511f9c2012cff0cc2048bfb1a78d5dd0e741d"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTgwNDM5Nw==", "bodyText": "fixed", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r461804397", "createdAt": "2020-07-28T19:00:36Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/map/svg/SVGRenderer.java", "diffHunk": "@@ -1,33 +1,113 @@\n package de.bonndan.nivio.output.map.svg;\n \n-import de.bonndan.nivio.model.LandscapeImpl;\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.output.Color;\n+import de.bonndan.nivio.output.LocalServer;\n import de.bonndan.nivio.output.Renderer;\n+import de.bonndan.nivio.output.layout.LayoutedComponent;\n+import de.bonndan.nivio.output.map.hex.Hex;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Service;\n+import org.springframework.util.StringUtils;\n \n+import java.awt.geom.Point2D;\n import java.io.File;\n import java.io.FileWriter;\n import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicLong;\n \n @Service\n public class SVGRenderer implements Renderer<String> {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(SVGRenderer.class);\n     public static final int DEFAULT_ICON_SIZE = 50;\n+\n+    private final LocalServer localServer;\n     private final MapStyleSheetFactory mapStyleSheetFactory;\n \n-    public SVGRenderer(MapStyleSheetFactory mapStyleSheetFactory) {\n+    public SVGRenderer(LocalServer localServer, MapStyleSheetFactory mapStyleSheetFactory) {\n+        this.localServer = localServer;\n         this.mapStyleSheetFactory = mapStyleSheetFactory;\n     }\n \n     @Override\n-    public String render(LandscapeImpl landscape) {\n-        SVGDocument svgDocument = new SVGDocument(landscape, mapStyleSheetFactory);\n+    public String render(LayoutedComponent layoutedComponent) {\n+        applyValues(layoutedComponent);\n+        SVGDocument svgDocument = new SVGDocument(layoutedComponent, mapStyleSheetFactory);\n         return svgDocument.getXML();\n     }\n \n     @Override\n-    public void render(LandscapeImpl landscape, File file) throws IOException {\n+    public void render(LayoutedComponent landscape, File file) throws IOException {\n         FileWriter fileWriter = new FileWriter(file);\n         fileWriter.write(render(landscape));\n         fileWriter.close();\n     }\n+\n+    /**\n+     * @param layoutedComponent layouted landscape\n+     */\n+    private void applyValues(LayoutedComponent layoutedComponent) {\n+\n+        Point2D.Double margin = getMargins(layoutedComponent);\n+        layoutedComponent.getChildren().forEach(groupBounds -> {\n+\n+            LOGGER.debug(\"group offset {} {}\", groupBounds.getX(), groupBounds.getY());\n+            Group group = (Group) groupBounds.getComponent();\n+            if (StringUtils.isEmpty(group.getColor())) {\n+                group.setColor(Color.getGroupColor(group));\n+            }\n+            groupBounds.setX(groupBounds.getX() + margin.x);\n+            groupBounds.setY(groupBounds.getY() + margin.y);\n+\n+            groupBounds.getChildren().forEach(itemBounds -> {\n+                LOGGER.debug(\"original item pos {} {}\", itemBounds.getX(), itemBounds.getY());\n+                itemBounds.setX(itemBounds.getX() + groupBounds.getX());\n+                itemBounds.setY(itemBounds.getY() + groupBounds.getY());\n+                LOGGER.debug(\"item pos with group offset: {} {}\", itemBounds.getX(), itemBounds.getY());\n+\n+                Item item = (Item) itemBounds.getComponent();\n+                itemBounds.setColor(group.getColor());\n+                itemBounds.setIcon(localServer.getIconUrl(item).toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgxMTE5Mg=="}, "originalCommit": {"oid": "a15511f9c2012cff0cc2048bfb1a78d5dd0e741d"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTIzODA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/dld4e/Dld4eRenderer.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo0ODozOVrOG4u2Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMTo1MDo1MlrOG5Lg2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0MDkzOQ==", "bodyText": "What could we use instead if this is deprecated?", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462140939", "createdAt": "2020-07-29T08:48:39Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/dld4e/Dld4eRenderer.java", "diffHunk": "@@ -14,6 +15,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+@Deprecated //this is both layouter and renderer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNDY3NA==", "bodyText": "This was an early approach to use dld4e (see https://github.com/bonndan/dld4e-headless) to draw landscapes, but it lacked automatic layouting. It was kept in case it could become a plugin (#14) or somebody might be interested to use it with the automatic layouting. For now I'd say there is no replacement.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462514674", "createdAt": "2020-07-29T18:50:55Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/dld4e/Dld4eRenderer.java", "diffHunk": "@@ -14,6 +15,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+@Deprecated //this is both layouter and renderer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0MDkzOQ=="}, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU1NDI2OQ==", "bodyText": "So, it is deprecated but we have no replacement?\nI still don't understand what to do about the Dld4eRenderer :) If it is deprecated it means that we don't want it to be used anymore. We should add a comment on what to use instead.\nOtherwise, if we want to keep it, it should not be deprecated.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462554269", "createdAt": "2020-07-29T20:02:58Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/dld4e/Dld4eRenderer.java", "diffHunk": "@@ -14,6 +15,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+@Deprecated //this is both layouter and renderer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0MDkzOQ=="}, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MTYwMQ==", "bodyText": "Actually I am too lazy to reimplement dld4e rendering with with new layout, although it might not take too long. I know it's in the repo, but I'm still afraid it will be forgotten if we'd delete it. If we're strict then it should be deleted.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462561601", "createdAt": "2020-07-29T20:15:49Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/dld4e/Dld4eRenderer.java", "diffHunk": "@@ -14,6 +15,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+@Deprecated //this is both layouter and renderer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0MDkzOQ=="}, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2NTYyNw==", "bodyText": "Mhm, well you decide. My opinion is: get rid of it. If it is important, we have the VCS to get the code back ;)", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462565627", "createdAt": "2020-07-29T20:23:10Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/dld4e/Dld4eRenderer.java", "diffHunk": "@@ -14,6 +15,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+@Deprecated //this is both layouter and renderer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0MDkzOQ=="}, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2NTk0MA==", "bodyText": "Otherwise, it wasn't important \ud83d\ude38", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462565940", "createdAt": "2020-07-29T20:23:45Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/dld4e/Dld4eRenderer.java", "diffHunk": "@@ -14,6 +15,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+@Deprecated //this is both layouter and renderer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0MDkzOQ=="}, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjYxMDY1MQ==", "bodyText": "Removed it. \ud83d\ude3f", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462610651", "createdAt": "2020-07-29T21:50:52Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/dld4e/Dld4eRenderer.java", "diffHunk": "@@ -14,6 +15,7 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+@Deprecated //this is both layouter and renderer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0MDkzOQ=="}, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTI0ODgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/dld4e/Dld4eRenderer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo1MTozNlrOG4u86w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODo1MToyMlrOG5Fq6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0MjY5OQ==", "bodyText": "The contents of this collection are updated, but never queried.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462142699", "createdAt": "2020-07-29T08:51:36Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/dld4e/Dld4eRenderer.java", "diffHunk": "@@ -27,10 +29,10 @@\n     private final Icons icons = new Icons();\n \n     @Override\n-    public String render(LandscapeImpl landscape) {\n+    public String render(LayoutedComponent landscape) {\n \n-        landscape.getItems().stream().forEach(this::addService);\n-        landscape.getItems().stream().forEach(this::addLinks);\n+        List<Item> items = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNDkyMA==", "bodyText": "I would not repair that old code.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462514920", "createdAt": "2020-07-29T18:51:22Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/dld4e/Dld4eRenderer.java", "diffHunk": "@@ -27,10 +29,10 @@\n     private final Icons icons = new Icons();\n \n     @Override\n-    public String render(LandscapeImpl landscape) {\n+    public String render(LayoutedComponent landscape) {\n \n-        landscape.getItems().stream().forEach(this::addService);\n-        landscape.getItems().stream().forEach(this::addLinks);\n+        List<Item> items = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0MjY5OQ=="}, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTI2NjU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/layout/GroupConnections.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo1NjowMlrOG4vH6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxODo1MzozNFrOG5Fv3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0NTUxNQ==", "bodyText": "Why is this commented?", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462145515", "createdAt": "2020-07-29T08:56:02Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/layout/GroupConnections.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package de.bonndan.nivio.output.layout;\n+\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+class GroupConnections {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GroupConnections.class);\n+    private final List<Pair<String, String>> groupConnections = new ArrayList<>();\n+\n+    public boolean isConnected(String group) {\n+        return groupConnections.stream()\n+                .anyMatch(entry -> entry.getKey().equals(group) || entry.getValue().equals(group));\n+    }\n+\n+    public void connect(String a, String b, String message) {\n+        LOGGER.debug(message + a + \" and \" + b);\n+        groupConnections.add(new ImmutablePair(a, b));\n+    }\n+\n+    public boolean canConnect(String a, String b) {\n+        if (StringUtils.isEmpty(a) || StringUtils.isEmpty(b)) {\n+            LOGGER.warn(\"Empty group names in virtual connection check between {} and {}\", a, b);\n+            return false;\n+        }\n+\n+\n+        if (a.equals(b))\n+            return false;\n+\n+        boolean hasLink = groupConnections.stream()\n+                .anyMatch(pair ->\n+                        (pair.getKey().equals(a) && pair.getValue().equals(b))\n+                               // || (pair.getKey().equals(b) && pair.getValue().equals(a))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNjE4OQ==", "bodyText": "... because we now need the inverse direction, too. JGraphX handled that before it was removed. I'll remove it.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462516189", "createdAt": "2020-07-29T18:53:34Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/layout/GroupConnections.java", "diffHunk": "@@ -0,0 +1,45 @@\n+package de.bonndan.nivio.output.layout;\n+\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+class GroupConnections {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GroupConnections.class);\n+    private final List<Pair<String, String>> groupConnections = new ArrayList<>();\n+\n+    public boolean isConnected(String group) {\n+        return groupConnections.stream()\n+                .anyMatch(entry -> entry.getKey().equals(group) || entry.getValue().equals(group));\n+    }\n+\n+    public void connect(String a, String b, String message) {\n+        LOGGER.debug(message + a + \" and \" + b);\n+        groupConnections.add(new ImmutablePair(a, b));\n+    }\n+\n+    public boolean canConnect(String a, String b) {\n+        if (StringUtils.isEmpty(a) || StringUtils.isEmpty(b)) {\n+            LOGGER.warn(\"Empty group names in virtual connection check between {} and {}\", a, b);\n+            return false;\n+        }\n+\n+\n+        if (a.equals(b))\n+            return false;\n+\n+        boolean hasLink = groupConnections.stream()\n+                .anyMatch(pair ->\n+                        (pair.getKey().equals(a) && pair.getValue().equals(b))\n+                               // || (pair.getKey().equals(b) && pair.getValue().equals(a))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0NTUxNQ=="}, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTI4MzE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/layout/OrganicLayouter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwODo1OTo1NlrOG4vSBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDoxMjoxOFrOG5IZ8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0ODEwMQ==", "bodyText": "Why are we using LandscapeImpl instead of the interface?", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462148101", "createdAt": "2020-07-29T08:59:56Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/layout/OrganicLayouter.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package de.bonndan.nivio.output.layout;\n+\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.LandscapeImpl;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/**\n+ * Applies {@link FastOrganicLayout} to landscape components and writes the rendered data to component labels.\n+ *\n+ *\n+ */\n+public class OrganicLayouter implements Layouter<LayoutedComponent> {\n+\n+    public OrganicLayouter() {\n+    }\n+\n+    @Override\n+    public LayoutedComponent layout(LandscapeImpl landscape) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyNTE3OQ==", "bodyText": "As written in our chat, the LandscapeImpl is the real graph, and the Landscape interface might not make too much sense anymore.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462525179", "createdAt": "2020-07-29T19:09:26Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/layout/OrganicLayouter.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package de.bonndan.nivio.output.layout;\n+\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.LandscapeImpl;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/**\n+ * Applies {@link FastOrganicLayout} to landscape components and writes the rendered data to component labels.\n+ *\n+ *\n+ */\n+public class OrganicLayouter implements Layouter<LayoutedComponent> {\n+\n+    public OrganicLayouter() {\n+    }\n+\n+    @Override\n+    public LayoutedComponent layout(LandscapeImpl landscape) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0ODEwMQ=="}, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU1NDQ3Mg==", "bodyText": "Ok, if it does not make sense anymore, how about deleting it?", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462554472", "createdAt": "2020-07-29T20:03:21Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/layout/OrganicLayouter.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package de.bonndan.nivio.output.layout;\n+\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.LandscapeImpl;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/**\n+ * Applies {@link FastOrganicLayout} to landscape components and writes the rendered data to component labels.\n+ *\n+ *\n+ */\n+public class OrganicLayouter implements Layouter<LayoutedComponent> {\n+\n+    public OrganicLayouter() {\n+    }\n+\n+    @Override\n+    public LayoutedComponent layout(LandscapeImpl landscape) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0ODEwMQ=="}, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU1OTcyOA==", "bodyText": "Yes, but that takes some days of refactoring. It's not adding business value and not scope of this feature. I've added #212", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462559728", "createdAt": "2020-07-29T20:12:18Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/layout/OrganicLayouter.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package de.bonndan.nivio.output.layout;\n+\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.LandscapeImpl;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/**\n+ * Applies {@link FastOrganicLayout} to landscape components and writes the rendered data to component labels.\n+ *\n+ *\n+ */\n+public class OrganicLayouter implements Layouter<LayoutedComponent> {\n+\n+    public OrganicLayouter() {\n+    }\n+\n+    @Override\n+    public LayoutedComponent layout(LandscapeImpl landscape) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0ODEwMQ=="}, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTI5NTMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/layout/OrganicLayouter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTowMzowMFrOG4vZTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxOTowMzo0MlrOG5GGQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0OTk2Ng==", "bodyText": "Do we need a LinkedHashMap, or could it be a HashMap? (I don't think that we have memory problems with nivio, just to understand)", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462149966", "createdAt": "2020-07-29T09:03:00Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/layout/OrganicLayouter.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package de.bonndan.nivio.output.layout;\n+\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.LandscapeImpl;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/**\n+ * Applies {@link FastOrganicLayout} to landscape components and writes the rendered data to component labels.\n+ *\n+ *\n+ */\n+public class OrganicLayouter implements Layouter<LayoutedComponent> {\n+\n+    public OrganicLayouter() {\n+    }\n+\n+    @Override\n+    public LayoutedComponent layout(LandscapeImpl landscape) {\n+\n+        Map<String, SubGraph> subgraphs = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyMTkyMg==", "bodyText": "It is used to ensure that insertion sequence is maintained. Otherwise layout might receive the items in random order, leading to random results.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462521922", "createdAt": "2020-07-29T19:03:42Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/layout/OrganicLayouter.java", "diffHunk": "@@ -0,0 +1,34 @@\n+package de.bonndan.nivio.output.layout;\n+\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.LandscapeImpl;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+\n+/**\n+ * Applies {@link FastOrganicLayout} to landscape components and writes the rendered data to component labels.\n+ *\n+ *\n+ */\n+public class OrganicLayouter implements Layouter<LayoutedComponent> {\n+\n+    public OrganicLayouter() {\n+    }\n+\n+    @Override\n+    public LayoutedComponent layout(LandscapeImpl landscape) {\n+\n+        Map<String, SubGraph> subgraphs = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE0OTk2Ng=="}, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTMwMzYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/map/PNGRenderCache.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOTowNToxOVrOG4vehQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMjozOToxNlrOG52P0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1MTMwMQ==", "bodyText": "Why don't we use the interface Layouter?", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462151301", "createdAt": "2020-07-29T09:05:19Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/map/PNGRenderCache.java", "diffHunk": "@@ -71,16 +69,15 @@ public PNGRenderCache(MapFactory<mxGraph, mxCell> mapFactory, MapStyleSheetFacto\n      * @return the svg as string, uncached\n      */\n     public String getSVG(LandscapeImpl landscape) {\n-        JGraphXRenderer jGraphXRenderer = new JGraphXRenderer();\n-        RenderedArtifact<mxGraph, mxCell> render = jGraphXRenderer.render(landscape);\n-        mapFactory.applyArtifactValues(landscape, render);\n+        OrganicLayouter layouter = new OrganicLayouter();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2ODc5NA==", "bodyText": "I've pushed a change. Please see if you agree with it. This code is likely to change later when there are more than just one layouter and render implementations.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462568794", "createdAt": "2020-07-29T20:29:05Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/map/PNGRenderCache.java", "diffHunk": "@@ -71,16 +69,15 @@ public PNGRenderCache(MapFactory<mxGraph, mxCell> mapFactory, MapStyleSheetFacto\n      * @return the svg as string, uncached\n      */\n     public String getSVG(LandscapeImpl landscape) {\n-        JGraphXRenderer jGraphXRenderer = new JGraphXRenderer();\n-        RenderedArtifact<mxGraph, mxCell> render = jGraphXRenderer.render(landscape);\n-        mapFactory.applyArtifactValues(landscape, render);\n+        OrganicLayouter layouter = new OrganicLayouter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1MTMwMQ=="}, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMxMDgwMw==", "bodyText": "Yes, if instantiation in the constructor makes sense because we don't need a fresh layouter each time we call getSVG(), sure, why not. This was just intended as a question to understand how we are using interfaces, and so on :)", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463310803", "createdAt": "2020-07-30T22:39:16Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/map/PNGRenderCache.java", "diffHunk": "@@ -71,16 +69,15 @@ public PNGRenderCache(MapFactory<mxGraph, mxCell> mapFactory, MapStyleSheetFacto\n      * @return the svg as string, uncached\n      */\n     public String getSVG(LandscapeImpl landscape) {\n-        JGraphXRenderer jGraphXRenderer = new JGraphXRenderer();\n-        RenderedArtifact<mxGraph, mxCell> render = jGraphXRenderer.render(landscape);\n-        mapFactory.applyArtifactValues(landscape, render);\n+        OrganicLayouter layouter = new OrganicLayouter();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE1MTMwMQ=="}, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTM5MDY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/map/PNGRenderCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwOToyODoxNlrOG4wTxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMzowMzoyMVrOG8dfuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2NDkzNA==", "bodyText": "@BilligsterUser: nice that you fixed that error! Could you also write a test that fails with the old implementation and now passes?", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r462164934", "createdAt": "2020-07-29T09:28:16Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/output/map/PNGRenderCache.java", "diffHunk": "@@ -93,23 +90,17 @@ public void onApplicationEvent(ProcessingFinishedEvent processingFinishedEvent)\n     }\n \n     private byte[] asByteArray(LandscapeImpl landscape) {\n-        TranscoderInput input_svg_image = new TranscoderInput(new ByteArrayInputStream(getSVG(landscape).getBytes()));\n-        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n-        TranscoderOutput transcoderOutput = new TranscoderOutput(outputStream);\n+        TranscoderInput input_svg_image = new TranscoderInput(\n+                new ByteArrayInputStream(getSVG(landscape).getBytes())\n+        );\n         Transcoder transcoder = new PNGTranscoder();\n-        try {\n+        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjA1MTAwMA==", "bodyText": "83ba1a4", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r466051000", "createdAt": "2020-08-05T23:03:21Z", "author": {"login": "BilligsterUser"}, "path": "src/main/java/de/bonndan/nivio/output/map/PNGRenderCache.java", "diffHunk": "@@ -93,23 +90,17 @@ public void onApplicationEvent(ProcessingFinishedEvent processingFinishedEvent)\n     }\n \n     private byte[] asByteArray(LandscapeImpl landscape) {\n-        TranscoderInput input_svg_image = new TranscoderInput(new ByteArrayInputStream(getSVG(landscape).getBytes()));\n-        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();\n-        TranscoderOutput transcoderOutput = new TranscoderOutput(outputStream);\n+        TranscoderInput input_svg_image = new TranscoderInput(\n+                new ByteArrayInputStream(getSVG(landscape).getBytes())\n+        );\n         Transcoder transcoder = new PNGTranscoder();\n-        try {\n+        try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE2NDkzNA=="}, "originalCommit": {"oid": "fb75cfb2701974b240d691410583b887148a17dd"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTU5MjU4OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/bonndan/nivio/input/GroupQueryResolverTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODowNjo0M1rOG6RaUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwODoyOTozMlrOG6cmjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1NTg1OQ==", "bodyText": "This list contains the same Item twice. This is because the items are just added to the modifiable Collection in Group.\nI would refactor this to add a method addItem to Group that does not add items twice (or use a Set) and to have an unmodifiable Collection instead.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463755859", "createdAt": "2020-07-31T18:06:43Z", "author": {"login": "mfbieber"}, "path": "src/test/java/de/bonndan/nivio/input/GroupQueryResolverTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.input.dto.GroupDescription;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeImpl;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@ExtendWith(MockitoExtension.class)\n+class GroupQueryResolverTest {\n+\n+    private GroupQueryResolver groupResolver;\n+\n+    @Mock\n+    private ProcessLog processLog;\n+\n+    @BeforeEach\n+    public void setup() {\n+        groupResolver = new GroupQueryResolver(processLog);\n+    }\n+\n+    @Test\n+    void process_doesNotContainDuplicatedItemsInGroups() {\n+        LandscapeImpl landscape = new LandscapeImpl();\n+        landscape.setProcessLog(processLog);\n+        Item item = new Item();\n+        item.setIdentifier(\"itemIdentifier\");\n+        item.setGroup(\"groupIdentifier\");\n+        landscape.setItems(Set.of(item));\n+        landscape.addGroup(new Group(\"groupIdentifier\"));\n+\n+        LandscapeDescription input = new LandscapeDescription();\n+        GroupDescription groupDescription = new GroupDescription();\n+        groupDescription.setIdentifier(\"groupIdentifier\");\n+        groupDescription.setContains(List.of(\"itemidentifier\"));\n+        input.getGroups().put(\"group\", groupDescription);\n+\n+        groupResolver.process(input, landscape);\n+\n+        assertThat(landscape.getItems().stream().count()).isEqualTo(1L);\n+        assertThat(landscape.getGroup(\"groupIdentifier\").getItems()).containsExactly(item);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzMTY0Nw==", "bodyText": "As you suggested we are now using a Set.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463931647", "createdAt": "2020-08-01T06:51:22Z", "author": {"login": "bonndan"}, "path": "src/test/java/de/bonndan/nivio/input/GroupQueryResolverTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.input.dto.GroupDescription;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeImpl;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@ExtendWith(MockitoExtension.class)\n+class GroupQueryResolverTest {\n+\n+    private GroupQueryResolver groupResolver;\n+\n+    @Mock\n+    private ProcessLog processLog;\n+\n+    @BeforeEach\n+    public void setup() {\n+        groupResolver = new GroupQueryResolver(processLog);\n+    }\n+\n+    @Test\n+    void process_doesNotContainDuplicatedItemsInGroups() {\n+        LandscapeImpl landscape = new LandscapeImpl();\n+        landscape.setProcessLog(processLog);\n+        Item item = new Item();\n+        item.setIdentifier(\"itemIdentifier\");\n+        item.setGroup(\"groupIdentifier\");\n+        landscape.setItems(Set.of(item));\n+        landscape.addGroup(new Group(\"groupIdentifier\"));\n+\n+        LandscapeDescription input = new LandscapeDescription();\n+        GroupDescription groupDescription = new GroupDescription();\n+        groupDescription.setIdentifier(\"groupIdentifier\");\n+        groupDescription.setContains(List.of(\"itemidentifier\"));\n+        input.getGroups().put(\"group\", groupDescription);\n+\n+        groupResolver.process(input, landscape);\n+\n+        assertThat(landscape.getItems().stream().count()).isEqualTo(1L);\n+        assertThat(landscape.getGroup(\"groupIdentifier\").getItems()).containsExactly(item);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1NTg1OQ=="}, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzMjAzMw==", "bodyText": "The unmodifiable Collection thing is a bit too much at the moment. We are constantly updating the collections in the indexing phase, and having side-effect free copies of copies of copies does not seem worth the effort to me.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463932033", "createdAt": "2020-08-01T06:56:16Z", "author": {"login": "bonndan"}, "path": "src/test/java/de/bonndan/nivio/input/GroupQueryResolverTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.input.dto.GroupDescription;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeImpl;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@ExtendWith(MockitoExtension.class)\n+class GroupQueryResolverTest {\n+\n+    private GroupQueryResolver groupResolver;\n+\n+    @Mock\n+    private ProcessLog processLog;\n+\n+    @BeforeEach\n+    public void setup() {\n+        groupResolver = new GroupQueryResolver(processLog);\n+    }\n+\n+    @Test\n+    void process_doesNotContainDuplicatedItemsInGroups() {\n+        LandscapeImpl landscape = new LandscapeImpl();\n+        landscape.setProcessLog(processLog);\n+        Item item = new Item();\n+        item.setIdentifier(\"itemIdentifier\");\n+        item.setGroup(\"groupIdentifier\");\n+        landscape.setItems(Set.of(item));\n+        landscape.addGroup(new Group(\"groupIdentifier\"));\n+\n+        LandscapeDescription input = new LandscapeDescription();\n+        GroupDescription groupDescription = new GroupDescription();\n+        groupDescription.setIdentifier(\"groupIdentifier\");\n+        groupDescription.setContains(List.of(\"itemidentifier\"));\n+        input.getGroups().put(\"group\", groupDescription);\n+\n+        groupResolver.process(input, landscape);\n+\n+        assertThat(landscape.getItems().stream().count()).isEqualTo(1L);\n+        assertThat(landscape.getGroup(\"groupIdentifier\").getItems()).containsExactly(item);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1NTg1OQ=="}, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzMjQ4Ng==", "bodyText": "Ok, I guess most of my suggestions would require some other patterns in our code, which can be hard to implement now into the existing code base with it's patterns already in place.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463932486", "createdAt": "2020-08-01T07:02:01Z", "author": {"login": "mfbieber"}, "path": "src/test/java/de/bonndan/nivio/input/GroupQueryResolverTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.input.dto.GroupDescription;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeImpl;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@ExtendWith(MockitoExtension.class)\n+class GroupQueryResolverTest {\n+\n+    private GroupQueryResolver groupResolver;\n+\n+    @Mock\n+    private ProcessLog processLog;\n+\n+    @BeforeEach\n+    public void setup() {\n+        groupResolver = new GroupQueryResolver(processLog);\n+    }\n+\n+    @Test\n+    void process_doesNotContainDuplicatedItemsInGroups() {\n+        LandscapeImpl landscape = new LandscapeImpl();\n+        landscape.setProcessLog(processLog);\n+        Item item = new Item();\n+        item.setIdentifier(\"itemIdentifier\");\n+        item.setGroup(\"groupIdentifier\");\n+        landscape.setItems(Set.of(item));\n+        landscape.addGroup(new Group(\"groupIdentifier\"));\n+\n+        LandscapeDescription input = new LandscapeDescription();\n+        GroupDescription groupDescription = new GroupDescription();\n+        groupDescription.setIdentifier(\"groupIdentifier\");\n+        groupDescription.setContains(List.of(\"itemidentifier\"));\n+        input.getGroups().put(\"group\", groupDescription);\n+\n+        groupResolver.process(input, landscape);\n+\n+        assertThat(landscape.getItems().stream().count()).isEqualTo(1L);\n+        assertThat(landscape.getGroup(\"groupIdentifier\").getItems()).containsExactly(item);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1NTg1OQ=="}, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzOTIxNA==", "bodyText": "Yes. Please feel free to open tickets for enhancement proposals or simply extend #212", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463939214", "createdAt": "2020-08-01T08:29:32Z", "author": {"login": "bonndan"}, "path": "src/test/java/de/bonndan/nivio/input/GroupQueryResolverTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.input.dto.GroupDescription;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeImpl;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@ExtendWith(MockitoExtension.class)\n+class GroupQueryResolverTest {\n+\n+    private GroupQueryResolver groupResolver;\n+\n+    @Mock\n+    private ProcessLog processLog;\n+\n+    @BeforeEach\n+    public void setup() {\n+        groupResolver = new GroupQueryResolver(processLog);\n+    }\n+\n+    @Test\n+    void process_doesNotContainDuplicatedItemsInGroups() {\n+        LandscapeImpl landscape = new LandscapeImpl();\n+        landscape.setProcessLog(processLog);\n+        Item item = new Item();\n+        item.setIdentifier(\"itemIdentifier\");\n+        item.setGroup(\"groupIdentifier\");\n+        landscape.setItems(Set.of(item));\n+        landscape.addGroup(new Group(\"groupIdentifier\"));\n+\n+        LandscapeDescription input = new LandscapeDescription();\n+        GroupDescription groupDescription = new GroupDescription();\n+        groupDescription.setIdentifier(\"groupIdentifier\");\n+        groupDescription.setContains(List.of(\"itemidentifier\"));\n+        input.getGroups().put(\"group\", groupDescription);\n+\n+        groupResolver.process(input, landscape);\n+\n+        assertThat(landscape.getItems().stream().count()).isEqualTo(1L);\n+        assertThat(landscape.getGroup(\"groupIdentifier\").getItems()).containsExactly(item);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1NTg1OQ=="}, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTYwMzQxOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/bonndan/nivio/input/GroupQueryResolverTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODoxMDoyOVrOG6RhBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwNjo1OTozNFrOG6cLcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1NzU3Mw==", "bodyText": "This shows what has to be done to have valid objects (instantiation and setting of things), only to not have a NPE.\nI am not even sure if this is how the objects are intended to be used \ud83d\ude1e, which means that somehow it is not straightforward and thus potentially unsafe.\nI also did not really understand why we have Group and GroupDescription both implementing GroupItem. These seem to do almost the same things. There are several casts to these objects, which are really hard to get rid of.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463757573", "createdAt": "2020-07-31T18:10:29Z", "author": {"login": "mfbieber"}, "path": "src/test/java/de/bonndan/nivio/input/GroupQueryResolverTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.input.dto.GroupDescription;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeImpl;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@ExtendWith(MockitoExtension.class)\n+class GroupQueryResolverTest {\n+\n+    private GroupQueryResolver groupResolver;\n+\n+    @Mock\n+    private ProcessLog processLog;\n+\n+    @BeforeEach\n+    public void setup() {\n+        groupResolver = new GroupQueryResolver(processLog);\n+    }\n+\n+    @Test\n+    void process_doesNotContainDuplicatedItemsInGroups() {\n+        LandscapeImpl landscape = new LandscapeImpl();\n+        landscape.setProcessLog(processLog);\n+        Item item = new Item();\n+        item.setIdentifier(\"itemIdentifier\");\n+        item.setGroup(\"groupIdentifier\");\n+        landscape.setItems(Set.of(item));\n+        landscape.addGroup(new Group(\"groupIdentifier\"));\n+\n+        LandscapeDescription input = new LandscapeDescription();\n+        GroupDescription groupDescription = new GroupDescription();\n+        groupDescription.setIdentifier(\"groupIdentifier\");\n+        groupDescription.setContains(List.of(\"itemidentifier\"));\n+        input.getGroups().put(\"group\", groupDescription);\n+\n+        groupResolver.process(input, landscape);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzMjI3NQ==", "bodyText": "Please see LandscapeFactory, it now sets up a proper landscape. We might think about more safety measures though.\nConcerning Group and GroupDescription: #212 .", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463932275", "createdAt": "2020-08-01T06:59:34Z", "author": {"login": "bonndan"}, "path": "src/test/java/de/bonndan/nivio/input/GroupQueryResolverTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.input.dto.GroupDescription;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeImpl;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@ExtendWith(MockitoExtension.class)\n+class GroupQueryResolverTest {\n+\n+    private GroupQueryResolver groupResolver;\n+\n+    @Mock\n+    private ProcessLog processLog;\n+\n+    @BeforeEach\n+    public void setup() {\n+        groupResolver = new GroupQueryResolver(processLog);\n+    }\n+\n+    @Test\n+    void process_doesNotContainDuplicatedItemsInGroups() {\n+        LandscapeImpl landscape = new LandscapeImpl();\n+        landscape.setProcessLog(processLog);\n+        Item item = new Item();\n+        item.setIdentifier(\"itemIdentifier\");\n+        item.setGroup(\"groupIdentifier\");\n+        landscape.setItems(Set.of(item));\n+        landscape.addGroup(new Group(\"groupIdentifier\"));\n+\n+        LandscapeDescription input = new LandscapeDescription();\n+        GroupDescription groupDescription = new GroupDescription();\n+        groupDescription.setIdentifier(\"groupIdentifier\");\n+        groupDescription.setContains(List.of(\"itemidentifier\"));\n+        input.getGroups().put(\"group\", groupDescription);\n+\n+        groupResolver.process(input, landscape);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1NzU3Mw=="}, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTYwNTQzOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/bonndan/nivio/input/GroupQueryResolverTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODoxMTowNlrOG6RiJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwNzowMDoxNlrOG6cLrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1Nzg2Mg==", "bodyText": "The query condition has to be the lowercased identifier. Is this intentional? See the other test below.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463757862", "createdAt": "2020-07-31T18:11:06Z", "author": {"login": "mfbieber"}, "path": "src/test/java/de/bonndan/nivio/input/GroupQueryResolverTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.input.dto.GroupDescription;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeImpl;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@ExtendWith(MockitoExtension.class)\n+class GroupQueryResolverTest {\n+\n+    private GroupQueryResolver groupResolver;\n+\n+    @Mock\n+    private ProcessLog processLog;\n+\n+    @BeforeEach\n+    public void setup() {\n+        groupResolver = new GroupQueryResolver(processLog);\n+    }\n+\n+    @Test\n+    void process_doesNotContainDuplicatedItemsInGroups() {\n+        LandscapeImpl landscape = new LandscapeImpl();\n+        landscape.setProcessLog(processLog);\n+        Item item = new Item();\n+        item.setIdentifier(\"itemIdentifier\");\n+        item.setGroup(\"groupIdentifier\");\n+        landscape.setItems(Set.of(item));\n+        landscape.addGroup(new Group(\"groupIdentifier\"));\n+\n+        LandscapeDescription input = new LandscapeDescription();\n+        GroupDescription groupDescription = new GroupDescription();\n+        groupDescription.setIdentifier(\"groupIdentifier\");\n+        groupDescription.setContains(List.of(\"itemidentifier\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzMjMzNQ==", "bodyText": "Good point. We must make sure that querying is not case-sensitive.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463932335", "createdAt": "2020-08-01T07:00:16Z", "author": {"login": "bonndan"}, "path": "src/test/java/de/bonndan/nivio/input/GroupQueryResolverTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.input.dto.GroupDescription;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeImpl;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@ExtendWith(MockitoExtension.class)\n+class GroupQueryResolverTest {\n+\n+    private GroupQueryResolver groupResolver;\n+\n+    @Mock\n+    private ProcessLog processLog;\n+\n+    @BeforeEach\n+    public void setup() {\n+        groupResolver = new GroupQueryResolver(processLog);\n+    }\n+\n+    @Test\n+    void process_doesNotContainDuplicatedItemsInGroups() {\n+        LandscapeImpl landscape = new LandscapeImpl();\n+        landscape.setProcessLog(processLog);\n+        Item item = new Item();\n+        item.setIdentifier(\"itemIdentifier\");\n+        item.setGroup(\"groupIdentifier\");\n+        landscape.setItems(Set.of(item));\n+        landscape.addGroup(new Group(\"groupIdentifier\"));\n+\n+        LandscapeDescription input = new LandscapeDescription();\n+        GroupDescription groupDescription = new GroupDescription();\n+        groupDescription.setIdentifier(\"groupIdentifier\");\n+        groupDescription.setContains(List.of(\"itemidentifier\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1Nzg2Mg=="}, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTYwOTAyOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/bonndan/nivio/input/GroupQueryResolverTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODoxMjoxNFrOG6RkTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwNzowMDozMVrOG6cLzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1ODQxNA==", "bodyText": "This aims for the las stream of the process() method. The groups are not updated on the landscape, only getGroup(somethingInvalid) returns Group.COMMON. Is this intentional?", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463758414", "createdAt": "2020-07-31T18:12:14Z", "author": {"login": "mfbieber"}, "path": "src/test/java/de/bonndan/nivio/input/GroupQueryResolverTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.input.dto.GroupDescription;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeImpl;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@ExtendWith(MockitoExtension.class)\n+class GroupQueryResolverTest {\n+\n+    private GroupQueryResolver groupResolver;\n+\n+    @Mock\n+    private ProcessLog processLog;\n+\n+    @BeforeEach\n+    public void setup() {\n+        groupResolver = new GroupQueryResolver(processLog);\n+    }\n+\n+    @Test\n+    void process_doesNotContainDuplicatedItemsInGroups() {\n+        LandscapeImpl landscape = new LandscapeImpl();\n+        landscape.setProcessLog(processLog);\n+        Item item = new Item();\n+        item.setIdentifier(\"itemIdentifier\");\n+        item.setGroup(\"groupIdentifier\");\n+        landscape.setItems(Set.of(item));\n+        landscape.addGroup(new Group(\"groupIdentifier\"));\n+\n+        LandscapeDescription input = new LandscapeDescription();\n+        GroupDescription groupDescription = new GroupDescription();\n+        groupDescription.setIdentifier(\"groupIdentifier\");\n+        groupDescription.setContains(List.of(\"itemidentifier\"));\n+        input.getGroups().put(\"group\", groupDescription);\n+\n+        groupResolver.process(input, landscape);\n+\n+        assertThat(landscape.getItems().stream().count()).isEqualTo(1L);\n+        assertThat(landscape.getGroup(\"groupIdentifier\").getItems()).containsExactly(item);\n+    }\n+\n+    @Test\n+    void process_findsItemsIfQueryConditionIsNotLowercase() {\n+        LandscapeImpl landscape = new LandscapeImpl();\n+        landscape.setProcessLog(processLog);\n+        Item item = new Item();\n+        item.setIdentifier(\"itemIdentifier\");\n+        item.setGroup(\"groupIdentifier\");\n+        landscape.setItems(Set.of(item));\n+        landscape.addGroup(new Group(\"groupIdentifier\"));\n+\n+        LandscapeDescription input = new LandscapeDescription();\n+        GroupDescription groupDescription = new GroupDescription();\n+        groupDescription.setIdentifier(\"groupIdentifier\");\n+        groupDescription.setContains(List.of(\"itemIdentifier\"));\n+        input.getGroups().put(\"group\", groupDescription);\n+\n+        groupResolver.process(input, landscape);\n+\n+        assertThat(landscape.getItems().stream().count()).isEqualTo(1L);\n+        assertThat(landscape.getGroup(\"groupIdentifier\").getItems()).containsExactly(item);\n+    }\n+\n+    @Test\n+    void process_containsCommonGroupIfGroupWasEmpty() {\n+        LandscapeImpl landscape = new LandscapeImpl();\n+        landscape.setProcessLog(processLog);\n+        Item item = new Item();\n+        item.setIdentifier(\"itemIdentifier\");\n+\n+        landscape.setItems(Set.of(item));\n+\n+        LandscapeDescription input = new LandscapeDescription();\n+        GroupDescription groupDescription = new GroupDescription();\n+\n+        input.getGroups().put(\"group\", groupDescription);\n+\n+        groupResolver.process(input, landscape);\n+\n+        assertThat(landscape.getItems().stream().count()).isEqualTo(1L);\n+        assertThat(landscape.getGroups().values().size()).isEqualTo(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzMjM2NQ==", "bodyText": "Has been refactored.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463932365", "createdAt": "2020-08-01T07:00:31Z", "author": {"login": "bonndan"}, "path": "src/test/java/de/bonndan/nivio/input/GroupQueryResolverTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.input.dto.GroupDescription;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeImpl;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+@ExtendWith(MockitoExtension.class)\n+class GroupQueryResolverTest {\n+\n+    private GroupQueryResolver groupResolver;\n+\n+    @Mock\n+    private ProcessLog processLog;\n+\n+    @BeforeEach\n+    public void setup() {\n+        groupResolver = new GroupQueryResolver(processLog);\n+    }\n+\n+    @Test\n+    void process_doesNotContainDuplicatedItemsInGroups() {\n+        LandscapeImpl landscape = new LandscapeImpl();\n+        landscape.setProcessLog(processLog);\n+        Item item = new Item();\n+        item.setIdentifier(\"itemIdentifier\");\n+        item.setGroup(\"groupIdentifier\");\n+        landscape.setItems(Set.of(item));\n+        landscape.addGroup(new Group(\"groupIdentifier\"));\n+\n+        LandscapeDescription input = new LandscapeDescription();\n+        GroupDescription groupDescription = new GroupDescription();\n+        groupDescription.setIdentifier(\"groupIdentifier\");\n+        groupDescription.setContains(List.of(\"itemidentifier\"));\n+        input.getGroups().put(\"group\", groupDescription);\n+\n+        groupResolver.process(input, landscape);\n+\n+        assertThat(landscape.getItems().stream().count()).isEqualTo(1L);\n+        assertThat(landscape.getGroup(\"groupIdentifier\").getItems()).containsExactly(item);\n+    }\n+\n+    @Test\n+    void process_findsItemsIfQueryConditionIsNotLowercase() {\n+        LandscapeImpl landscape = new LandscapeImpl();\n+        landscape.setProcessLog(processLog);\n+        Item item = new Item();\n+        item.setIdentifier(\"itemIdentifier\");\n+        item.setGroup(\"groupIdentifier\");\n+        landscape.setItems(Set.of(item));\n+        landscape.addGroup(new Group(\"groupIdentifier\"));\n+\n+        LandscapeDescription input = new LandscapeDescription();\n+        GroupDescription groupDescription = new GroupDescription();\n+        groupDescription.setIdentifier(\"groupIdentifier\");\n+        groupDescription.setContains(List.of(\"itemIdentifier\"));\n+        input.getGroups().put(\"group\", groupDescription);\n+\n+        groupResolver.process(input, landscape);\n+\n+        assertThat(landscape.getItems().stream().count()).isEqualTo(1L);\n+        assertThat(landscape.getGroup(\"groupIdentifier\").getItems()).containsExactly(item);\n+    }\n+\n+    @Test\n+    void process_containsCommonGroupIfGroupWasEmpty() {\n+        LandscapeImpl landscape = new LandscapeImpl();\n+        landscape.setProcessLog(processLog);\n+        Item item = new Item();\n+        item.setIdentifier(\"itemIdentifier\");\n+\n+        landscape.setItems(Set.of(item));\n+\n+        LandscapeDescription input = new LandscapeDescription();\n+        GroupDescription groupDescription = new GroupDescription();\n+\n+        input.getGroups().put(\"group\", groupDescription);\n+\n+        groupResolver.process(input, landscape);\n+\n+        assertThat(landscape.getItems().stream().count()).isEqualTo(1L);\n+        assertThat(landscape.getGroups().values().size()).isEqualTo(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1ODQxNA=="}, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTYxNTEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/model/LandscapeImpl.java", "isResolved": true, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxODoxNDoyMVrOG6RoHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwODoyOTo1N1rOG6cmpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1OTM4OQ==", "bodyText": "groups can be an empty Map, so null was returned before. Is my change how it was intended to be?\nIf yes, do we need that COMMON logic inside of Group?", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463759389", "createdAt": "2020-07-31T18:14:21Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/model/LandscapeImpl.java", "diffHunk": "@@ -162,12 +162,13 @@ public void addGroup(Group g) {\n      */\n     @NonNull\n     public Group getGroup(String group) {\n-        if (StringUtils.isEmpty(group))\n+        if (StringUtils.isEmpty(group)) {\n             group = Group.COMMON;\n+        }\n         GroupItem groupItem = groups.get(group);\n         if (groupItem == null) {\n             processLog.warn(\"Group \" + group + \" was not found, returning COMMON\");\n-            groupItem = groups.get(Group.COMMON);\n+            groupItem = new Group(Group.COMMON);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzMjM4Mw==", "bodyText": "Has been refactored.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463932383", "createdAt": "2020-08-01T07:00:49Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/model/LandscapeImpl.java", "diffHunk": "@@ -162,12 +162,13 @@ public void addGroup(Group g) {\n      */\n     @NonNull\n     public Group getGroup(String group) {\n-        if (StringUtils.isEmpty(group))\n+        if (StringUtils.isEmpty(group)) {\n             group = Group.COMMON;\n+        }\n         GroupItem groupItem = groups.get(group);\n         if (groupItem == null) {\n             processLog.warn(\"Group \" + group + \" was not found, returning COMMON\");\n-            groupItem = groups.get(Group.COMMON);\n+            groupItem = new Group(Group.COMMON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1OTM4OQ=="}, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzMjgzOQ==", "bodyText": "Alright, but the resulting landscape still does not have a group, is this intentional?", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463932839", "createdAt": "2020-08-01T07:06:42Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/model/LandscapeImpl.java", "diffHunk": "@@ -162,12 +162,13 @@ public void addGroup(Group g) {\n      */\n     @NonNull\n     public Group getGroup(String group) {\n-        if (StringUtils.isEmpty(group))\n+        if (StringUtils.isEmpty(group)) {\n             group = Group.COMMON;\n+        }\n         GroupItem groupItem = groups.get(group);\n         if (groupItem == null) {\n             processLog.warn(\"Group \" + group + \" was not found, returning COMMON\");\n-            groupItem = groups.get(Group.COMMON);\n+            groupItem = new Group(Group.COMMON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1OTM4OQ=="}, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzMjk1NQ==", "bodyText": "In addition, if you enable the process_containsCommonGroupIfGroupWasEmpty() in GroupQueryResolverTest, you should see:\njava.util.NoSuchElementException: No value present\n\n\tat java.base/java.util.Optional.get(Optional.java:148)\n\tat de.bonndan.nivio.input.GroupQueryResolver.process(GroupQueryResolver.java:36)\n...", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463932955", "createdAt": "2020-08-01T07:08:13Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/model/LandscapeImpl.java", "diffHunk": "@@ -162,12 +162,13 @@ public void addGroup(Group g) {\n      */\n     @NonNull\n     public Group getGroup(String group) {\n-        if (StringUtils.isEmpty(group))\n+        if (StringUtils.isEmpty(group)) {\n             group = Group.COMMON;\n+        }\n         GroupItem groupItem = groups.get(group);\n         if (groupItem == null) {\n             processLog.warn(\"Group \" + group + \" was not found, returning COMMON\");\n-            groupItem = groups.get(Group.COMMON);\n+            groupItem = new Group(Group.COMMON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1OTM4OQ=="}, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzNDUxMQ==", "bodyText": "I added a (passing) Test that does exactly the same as the other mentioned here, but that uses a Landscape from the LandscapeFactory.\nFor a safety mechanism to use the Landscape correctly: isn't it possible to enforce the same things that the LandscapeFactory does via the Landscape's constructor?", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463934511", "createdAt": "2020-08-01T07:28:23Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/model/LandscapeImpl.java", "diffHunk": "@@ -162,12 +162,13 @@ public void addGroup(Group g) {\n      */\n     @NonNull\n     public Group getGroup(String group) {\n-        if (StringUtils.isEmpty(group))\n+        if (StringUtils.isEmpty(group)) {\n             group = Group.COMMON;\n+        }\n         GroupItem groupItem = groups.get(group);\n         if (groupItem == null) {\n             processLog.warn(\"Group \" + group + \" was not found, returning COMMON\");\n-            groupItem = groups.get(Group.COMMON);\n+            groupItem = new Group(Group.COMMON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1OTM4OQ=="}, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzNDY4MA==", "bodyText": "Yes :)", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463934680", "createdAt": "2020-08-01T07:30:50Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/model/LandscapeImpl.java", "diffHunk": "@@ -162,12 +162,13 @@ public void addGroup(Group g) {\n      */\n     @NonNull\n     public Group getGroup(String group) {\n-        if (StringUtils.isEmpty(group))\n+        if (StringUtils.isEmpty(group)) {\n             group = Group.COMMON;\n+        }\n         GroupItem groupItem = groups.get(group);\n         if (groupItem == null) {\n             processLog.warn(\"Group \" + group + \" was not found, returning COMMON\");\n-            groupItem = groups.get(Group.COMMON);\n+            groupItem = new Group(Group.COMMON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1OTM4OQ=="}, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzNDc2NA==", "bodyText": "An that get() on the optional in GroupQueryResolver should have a preceding ifPresent() check and an orElse() handling :)", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463934764", "createdAt": "2020-08-01T07:31:45Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/model/LandscapeImpl.java", "diffHunk": "@@ -162,12 +162,13 @@ public void addGroup(Group g) {\n      */\n     @NonNull\n     public Group getGroup(String group) {\n-        if (StringUtils.isEmpty(group))\n+        if (StringUtils.isEmpty(group)) {\n             group = Group.COMMON;\n+        }\n         GroupItem groupItem = groups.get(group);\n         if (groupItem == null) {\n             processLog.warn(\"Group \" + group + \" was not found, returning COMMON\");\n-            groupItem = groups.get(Group.COMMON);\n+            groupItem = new Group(Group.COMMON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1OTM4OQ=="}, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzNTg2NA==", "bodyText": "I am working on it.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463935864", "createdAt": "2020-08-01T07:45:39Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/model/LandscapeImpl.java", "diffHunk": "@@ -162,12 +162,13 @@ public void addGroup(Group g) {\n      */\n     @NonNull\n     public Group getGroup(String group) {\n-        if (StringUtils.isEmpty(group))\n+        if (StringUtils.isEmpty(group)) {\n             group = Group.COMMON;\n+        }\n         GroupItem groupItem = groups.get(group);\n         if (groupItem == null) {\n             processLog.warn(\"Group \" + group + \" was not found, returning COMMON\");\n-            groupItem = groups.get(Group.COMMON);\n+            groupItem = new Group(Group.COMMON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1OTM4OQ=="}, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzNzE5Nw==", "bodyText": "I was testing with:\n     public LandscapeImpl(@Pattern(regexp = LandscapeItem.IDENTIFIER_VALIDATION) String identifier) {\n        this.identifier = identifier;\n    }\n\n    @JsonIgnore\n    @Override\n    public Map<String, GroupItem> getGroups() {\n        if (groups.isEmpty()) {\n            addGroup(new Group(Group.COMMON));\n        }\n        return groups;\n    }\n\nBut then AllGroupsLayoutTest.testWithARelation() and GroupResolverTest.testBlacklistOnGroupsWithRegex() fails (aswell as tests in OrganicLayouterTest, but these due to the .get() on the Optional I guess).\nSo the groups map is supposed to be empty sometimes?", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463937197", "createdAt": "2020-08-01T08:04:46Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/model/LandscapeImpl.java", "diffHunk": "@@ -162,12 +162,13 @@ public void addGroup(Group g) {\n      */\n     @NonNull\n     public Group getGroup(String group) {\n-        if (StringUtils.isEmpty(group))\n+        if (StringUtils.isEmpty(group)) {\n             group = Group.COMMON;\n+        }\n         GroupItem groupItem = groups.get(group);\n         if (groupItem == null) {\n             processLog.warn(\"Group \" + group + \" was not found, returning COMMON\");\n-            groupItem = groups.get(Group.COMMON);\n+            groupItem = new Group(Group.COMMON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1OTM4OQ=="}, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzODE0Mw==", "bodyText": "Ok, I see your changes - nice \ud83d\ude3b\nSubLayoutTest.testWithARelation() is failing though \ud83d\ude3f", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463938143", "createdAt": "2020-08-01T08:16:03Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/model/LandscapeImpl.java", "diffHunk": "@@ -162,12 +162,13 @@ public void addGroup(Group g) {\n      */\n     @NonNull\n     public Group getGroup(String group) {\n-        if (StringUtils.isEmpty(group))\n+        if (StringUtils.isEmpty(group)) {\n             group = Group.COMMON;\n+        }\n         GroupItem groupItem = groups.get(group);\n         if (groupItem == null) {\n             processLog.warn(\"Group \" + group + \" was not found, returning COMMON\");\n-            groupItem = groups.get(Group.COMMON);\n+            groupItem = new Group(Group.COMMON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1OTM4OQ=="}, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzODQ4MQ==", "bodyText": "Where is this code? However, I've refactoded the landscape constructor and such code is not necessary anymore.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463938481", "createdAt": "2020-08-01T08:20:53Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/model/LandscapeImpl.java", "diffHunk": "@@ -162,12 +162,13 @@ public void addGroup(Group g) {\n      */\n     @NonNull\n     public Group getGroup(String group) {\n-        if (StringUtils.isEmpty(group))\n+        if (StringUtils.isEmpty(group)) {\n             group = Group.COMMON;\n+        }\n         GroupItem groupItem = groups.get(group);\n         if (groupItem == null) {\n             processLog.warn(\"Group \" + group + \" was not found, returning COMMON\");\n-            groupItem = groups.get(Group.COMMON);\n+            groupItem = new Group(Group.COMMON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1OTM4OQ=="}, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkzOTIzOA==", "bodyText": "I didn't push it. I knew you were working on the same thing, so I was just checking that out locally.", "url": "https://github.com/dedica-team/nivio/pull/204#discussion_r463939238", "createdAt": "2020-08-01T08:29:57Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/model/LandscapeImpl.java", "diffHunk": "@@ -162,12 +162,13 @@ public void addGroup(Group g) {\n      */\n     @NonNull\n     public Group getGroup(String group) {\n-        if (StringUtils.isEmpty(group))\n+        if (StringUtils.isEmpty(group)) {\n             group = Group.COMMON;\n+        }\n         GroupItem groupItem = groups.get(group);\n         if (groupItem == null) {\n             processLog.warn(\"Group \" + group + \" was not found, returning COMMON\");\n-            groupItem = groups.get(Group.COMMON);\n+            groupItem = new Group(Group.COMMON);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc1OTM4OQ=="}, "originalCommit": {"oid": "3e968f16da7528028fe88f44266f9d7cf85eb659"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4014, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}