{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NTc1ODk5", "number": 331, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1MzowM1rOE9PPmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjo1NTowM1rOE9tW7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjQ4MzQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/assessment/AssessmentController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo1MzowM1rOH50YjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjo1Mjo1OVrOH6inBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4OTEzMw==", "bodyText": "This looks a bit strange at the first sight. I checked more deeply and realized that applyKPIs() is a default method in the Asseable interface that recursively calls itself.\nI would have suggested to make applyKPIs() in Landscape use the KPIs already known to the Landscape. I did not see any usage of landscape.applyKPIs(Map<String, KPI> kpis) where we would provide the KPIs from the outside.", "url": "https://github.com/dedica-team/nivio/pull/331#discussion_r530389133", "createdAt": "2020-11-25T13:53:03Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/assessment/AssessmentController.java", "diffHunk": "@@ -31,9 +28,7 @@ public AssessmentController(LandscapeRepository landscapeRepository, KPIFactory\n             return ResponseEntity.notFound().build();\n         }\n \n-        Assessment assessment = new Assessment(\n-                landscape.applyKPIs(factory.getConfiguredKPIs(landscape))\n-        );\n+        Assessment assessment = new Assessment(landscape.applyKPIs(landscape.getKpis()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6112065339da99f22d9b0432760fbf8b9c71aa6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0NjUwMQ==", "bodyText": "I think we could check how the Landscape object works after #212 has been resolved. Maybe thinks like this are already cleaned up after these changes.", "url": "https://github.com/dedica-team/nivio/pull/331#discussion_r531146501", "createdAt": "2020-11-26T16:52:59Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/assessment/AssessmentController.java", "diffHunk": "@@ -31,9 +28,7 @@ public AssessmentController(LandscapeRepository landscapeRepository, KPIFactory\n             return ResponseEntity.notFound().build();\n         }\n \n-        Assessment assessment = new Assessment(\n-                landscape.applyKPIs(factory.getConfiguredKPIs(landscape))\n-        );\n+        Assessment assessment = new Assessment(landscape.applyKPIs(landscape.getKpis()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4OTEzMw=="}, "originalCommit": {"oid": "d6112065339da99f22d9b0432760fbf8b9c71aa6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTQxNzQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/assessment/kpi/KPIFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjo1NTowM1rOH6iqvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yOVQxNToyMjo0MFrOH7kZ7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0NzQ1Mw==", "bodyText": "Objects.requireNonNull() does not check if the map is empty, only if an object == null.", "url": "https://github.com/dedica-team/nivio/pull/331#discussion_r531147453", "createdAt": "2020-11-26T16:55:03Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/assessment/kpi/KPIFactory.java", "diffHunk": "@@ -32,16 +29,18 @@ public KPIFactory(ApplicationEventPublisher eventPublisher) {\n     /**\n      * Returns the default KPIs plus custom ones and configuration.\n      *\n-     * @param landscape the landscape\n+     * @param kpiConfigMap the landscape kpi configurations\n      * @return effective KPIs\n+     * @throws ProcessingException if a KPI is misconfigured\n      */\n-    public Map<String, KPI> getConfiguredKPIs(Landscape landscape) {\n+    public Map<String, KPI> getConfiguredKPIs(@NonNull Map<String, KPIConfig> kpiConfigMap) {\n \n-        Map<String, KPIConfig> config = landscape.getConfig().getKPIs();\n-        Map<String, KPI> kpis = new HashMap<>(defaultKPIs.size() + config.size());\n+        Objects.requireNonNull(kpiConfigMap, \"kpi config is null or empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6112065339da99f22d9b0432760fbf8b9c71aa6"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQxMjM0Nw==", "bodyText": "Yes. If the are no configured KPIs, the map would be empty.", "url": "https://github.com/dedica-team/nivio/pull/331#discussion_r531412347", "createdAt": "2020-11-27T06:55:22Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/assessment/kpi/KPIFactory.java", "diffHunk": "@@ -32,16 +29,18 @@ public KPIFactory(ApplicationEventPublisher eventPublisher) {\n     /**\n      * Returns the default KPIs plus custom ones and configuration.\n      *\n-     * @param landscape the landscape\n+     * @param kpiConfigMap the landscape kpi configurations\n      * @return effective KPIs\n+     * @throws ProcessingException if a KPI is misconfigured\n      */\n-    public Map<String, KPI> getConfiguredKPIs(Landscape landscape) {\n+    public Map<String, KPI> getConfiguredKPIs(@NonNull Map<String, KPIConfig> kpiConfigMap) {\n \n-        Map<String, KPIConfig> config = landscape.getConfig().getKPIs();\n-        Map<String, KPI> kpis = new HashMap<>(defaultKPIs.size() + config.size());\n+        Objects.requireNonNull(kpiConfigMap, \"kpi config is null or empty\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0NzQ1Mw=="}, "originalCommit": {"oid": "d6112065339da99f22d9b0432760fbf8b9c71aa6"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIxMTkzNQ==", "bodyText": "I meant that the message is missleading, we are not checking if the map is empty, only if it is null ;)", "url": "https://github.com/dedica-team/nivio/pull/331#discussion_r532211935", "createdAt": "2020-11-29T13:45:16Z", "author": {"login": "mfbieber"}, "path": "src/main/java/de/bonndan/nivio/assessment/kpi/KPIFactory.java", "diffHunk": "@@ -32,16 +29,18 @@ public KPIFactory(ApplicationEventPublisher eventPublisher) {\n     /**\n      * Returns the default KPIs plus custom ones and configuration.\n      *\n-     * @param landscape the landscape\n+     * @param kpiConfigMap the landscape kpi configurations\n      * @return effective KPIs\n+     * @throws ProcessingException if a KPI is misconfigured\n      */\n-    public Map<String, KPI> getConfiguredKPIs(Landscape landscape) {\n+    public Map<String, KPI> getConfiguredKPIs(@NonNull Map<String, KPIConfig> kpiConfigMap) {\n \n-        Map<String, KPIConfig> config = landscape.getConfig().getKPIs();\n-        Map<String, KPI> kpis = new HashMap<>(defaultKPIs.size() + config.size());\n+        Objects.requireNonNull(kpiConfigMap, \"kpi config is null or empty\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0NzQ1Mw=="}, "originalCommit": {"oid": "d6112065339da99f22d9b0432760fbf8b9c71aa6"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjIyNDQ5NQ==", "bodyText": "Fixed in a different branch.", "url": "https://github.com/dedica-team/nivio/pull/331#discussion_r532224495", "createdAt": "2020-11-29T15:22:40Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/assessment/kpi/KPIFactory.java", "diffHunk": "@@ -32,16 +29,18 @@ public KPIFactory(ApplicationEventPublisher eventPublisher) {\n     /**\n      * Returns the default KPIs plus custom ones and configuration.\n      *\n-     * @param landscape the landscape\n+     * @param kpiConfigMap the landscape kpi configurations\n      * @return effective KPIs\n+     * @throws ProcessingException if a KPI is misconfigured\n      */\n-    public Map<String, KPI> getConfiguredKPIs(Landscape landscape) {\n+    public Map<String, KPI> getConfiguredKPIs(@NonNull Map<String, KPIConfig> kpiConfigMap) {\n \n-        Map<String, KPIConfig> config = landscape.getConfig().getKPIs();\n-        Map<String, KPI> kpis = new HashMap<>(defaultKPIs.size() + config.size());\n+        Objects.requireNonNull(kpiConfigMap, \"kpi config is null or empty\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0NzQ1Mw=="}, "originalCommit": {"oid": "d6112065339da99f22d9b0432760fbf8b9c71aa6"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4054, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}