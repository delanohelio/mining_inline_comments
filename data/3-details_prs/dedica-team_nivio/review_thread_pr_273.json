{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MTQ0NDU5", "number": 273, "reviewThreads": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo1NDoxM1rOEi5Vdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxOToxNDoxNFrOEi5v4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI2NDIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/api/ApiController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo1NDoxM1rOHQ-K_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo1NDoxM1rOHQ-K_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1Nzg4NQ==", "bodyText": "You could write this in an Optional way. Something like:\nreturn url\n    .map(url -> process(landscapeDescriptionFactory.from(url.get())))\n    .orElseGet(() -> process(LandscapeDescriptionFactory.fromString(landscape.getSource(), landscape.getIdentifier() + \" source\")));", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487557885", "createdAt": "2020-09-13T17:54:13Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/api/ApiController.java", "diffHunk": "@@ -223,9 +222,9 @@ private ProcessLog process(Landscape landscape) {\n             return indexer.reIndex(Objects.requireNonNull(landscapeDescription));\n         }\n \n-        URL url = URLHelper.getURL(landscape.getSource());\n-        if (url != null) {\n-            return process(landscapeDescriptionFactory.from(url));\n+        Optional<URL> url = URLHelper.getURL(landscape.getSource());\n+        if (url.isPresent()) {\n+            return process(landscapeDescriptionFactory.from(url.get()));\n         }\n \n         return process(LandscapeDescriptionFactory.fromString(landscape.getSource(), landscape.getIdentifier() + \" source\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI2NTQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/api/ApiController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo1NTozOVrOHQ-Liw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo1NTozOVrOHQ-Liw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODAyNw==", "bodyText": "Could env be renamed to landscape here?\nNot seeing the unchanged code above, I thought this is related to some kind of system environment variables.", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487558027", "createdAt": "2020-09-13T17:55:39Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/api/ApiController.java", "diffHunk": "@@ -142,10 +141,10 @@ public ProcessLog indexLandscape(\n         SourceReference sourceReference = new SourceReference(null, format);\n         sourceReference.setContent(body);\n \n-        ItemDescriptionFactory factory = formatFactory.getFactory(sourceReference, env);\n-        URL baseUrl = URLHelper.getParentPath(env.getSource());\n+        InputFormatHandler factory = formatFactory.getInputFormatHandler(sourceReference, env);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI2NjYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/api/ApiController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo1NzoxMFrOHQ-MDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo1NzoxMFrOHQ-MDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODE1OA==", "bodyText": "For readability, you could add a constructor that does not accept null.\nIf the content is required, it could also be added to a constructor.", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487558158", "createdAt": "2020-09-13T17:57:10Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/api/ApiController.java", "diffHunk": "@@ -142,10 +141,10 @@ public ProcessLog indexLandscape(\n         SourceReference sourceReference = new SourceReference(null, format);\n         sourceReference.setContent(body);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI2NzgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/InputFormatHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxNzo1ODo1NlrOHQ-MnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxOTo1NjoxMVrOHQ-8bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODMwMQ==", "bodyText": "Nice idea, to inject this optional feature \ud83d\udc4d\nYou could also make this a default method that returns null. That way, non-observable handlers do not even have to mention that method.", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487558301", "createdAt": "2020-09-13T17:58:56Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/input/InputFormatHandler.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import de.bonndan.nivio.observation.InputFormatObserver;\n+import org.springframework.lang.Nullable;\n+\n+import java.net.URL;\n+import java.util.List;\n+\n+/**\n+ * Processors of input sources must implement this interface.\n+ */\n+public interface InputFormatHandler {\n+\n+    /**\n+     * Returns the supported format.\n+     *\n+     * @return string representing input formats (nivio, k8s, docker...)\n+     */\n+    List<String> getFormats();\n+\n+    /**\n+     * Returns item descriptions generated from the source.\n+     *\n+     * @param reference the input source\n+     * @param baseUrl   parent config url\n+     * @return list of generated items (needs to be merged with existing items)\n+     */\n+    List<ItemDescription> getDescriptions(SourceReference reference, @Nullable URL baseUrl);\n+\n+    /**\n+     * Returns an observer for the source reference.\n+     *\n+     * @param reference the source reference with a format\n+     * @param baseUrl   the url of the landscape description\n+     * @return observer that can handle the format or null if no observer is available\n+     */\n+    @Nullable\n+    InputFormatObserver getObserver(SourceReference reference, @Nullable URL baseUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU3MDU0Mw==", "bodyText": "Returning null is OK for now since we don't have k8s/rancher  (see #275 ) observers. Later, however, we should have observers for every input type and returning null should be a rare edge case.", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487570543", "createdAt": "2020-09-13T19:56:11Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/InputFormatHandler.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import de.bonndan.nivio.observation.InputFormatObserver;\n+import org.springframework.lang.Nullable;\n+\n+import java.net.URL;\n+import java.util.List;\n+\n+/**\n+ * Processors of input sources must implement this interface.\n+ */\n+public interface InputFormatHandler {\n+\n+    /**\n+     * Returns the supported format.\n+     *\n+     * @return string representing input formats (nivio, k8s, docker...)\n+     */\n+    List<String> getFormats();\n+\n+    /**\n+     * Returns item descriptions generated from the source.\n+     *\n+     * @param reference the input source\n+     * @param baseUrl   parent config url\n+     * @return list of generated items (needs to be merged with existing items)\n+     */\n+    List<ItemDescription> getDescriptions(SourceReference reference, @Nullable URL baseUrl);\n+\n+    /**\n+     * Returns an observer for the source reference.\n+     *\n+     * @param reference the source reference with a format\n+     * @param baseUrl   the url of the landscape description\n+     * @return observer that can handle the format or null if no observer is available\n+     */\n+    @Nullable\n+    InputFormatObserver getObserver(SourceReference reference, @Nullable URL baseUrl);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODMwMQ=="}, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI3MDU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/InputFormatHandlerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODowMjoyNFrOHQ-N9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMDowNTozOFrOHQ_ACQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODY0NA==", "bodyText": "I guess the parameter should be named something lik formatHandler now.\nI like the factory method \ud83d\udc4d", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487558644", "createdAt": "2020-09-13T18:02:24Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/input/InputFormatHandlerFactory.java", "diffHunk": "@@ -3,22 +3,23 @@\n import de.bonndan.nivio.ProcessingException;\n import de.bonndan.nivio.input.dto.LandscapeDescription;\n import de.bonndan.nivio.input.dto.SourceReference;\n+import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Service;\n import org.springframework.util.StringUtils;\n \n import java.util.*;\n import java.util.concurrent.ConcurrentHashMap;\n \n @Service\n-public class ItemDescriptionFormatFactory {\n+public class InputFormatHandlerFactory {\n \n-    private final Map<ItemDescriptionFactory, List<String>> factoryListMap = new ConcurrentHashMap<>();\n+    private final Map<InputFormatHandler, List<String>> factoryListMap = new ConcurrentHashMap<>();\n \n-    public static ItemDescriptionFormatFactory with(ItemDescriptionFactory factory) {\n-        return new ItemDescriptionFormatFactory(new ArrayList<>(Collections.singletonList(factory)));\n+    public static InputFormatHandlerFactory with(InputFormatHandler factory) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU3MTQ2NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487571465", "createdAt": "2020-09-13T20:05:38Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/InputFormatHandlerFactory.java", "diffHunk": "@@ -3,22 +3,23 @@\n import de.bonndan.nivio.ProcessingException;\n import de.bonndan.nivio.input.dto.LandscapeDescription;\n import de.bonndan.nivio.input.dto.SourceReference;\n+import org.springframework.lang.NonNull;\n import org.springframework.stereotype.Service;\n import org.springframework.util.StringUtils;\n \n import java.util.*;\n import java.util.concurrent.ConcurrentHashMap;\n \n @Service\n-public class ItemDescriptionFormatFactory {\n+public class InputFormatHandlerFactory {\n \n-    private final Map<ItemDescriptionFactory, List<String>> factoryListMap = new ConcurrentHashMap<>();\n+    private final Map<InputFormatHandler, List<String>> factoryListMap = new ConcurrentHashMap<>();\n \n-    public static ItemDescriptionFormatFactory with(ItemDescriptionFactory factory) {\n-        return new ItemDescriptionFormatFactory(new ArrayList<>(Collections.singletonList(factory)));\n+    public static InputFormatHandlerFactory with(InputFormatHandler factory) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODY0NA=="}, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI3MTg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/InputFormatHandlerFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODowNDoyMFrOHQ-OiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODowNDoyMFrOHQ-OiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1ODc5Mw==", "bodyText": "What is s?", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487558793", "createdAt": "2020-09-13T18:04:20Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/input/InputFormatHandlerFactory.java", "diffHunk": "@@ -29,9 +30,10 @@ public ItemDescriptionFormatFactory(List<ItemDescriptionFactory> factories) {\n      * @param landscapeDescription landscape, may contain a base url\n      * @return the factory\n      */\n-    public ItemDescriptionFactory getFactory(SourceReference reference, LandscapeDescription landscapeDescription) {\n+    @NonNull\n+    public InputFormatHandler getInputFormatHandler(SourceReference reference, LandscapeDescription landscapeDescription) {\n \n-        List<ItemDescriptionFactory> factories = new ArrayList<>();\n+        List<InputFormatHandler> factories = new ArrayList<>();\n         factoryListMap.entrySet().stream()\n                 .filter(entry -> entry.getValue().stream().map(s -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI3OTM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/InputFormatHandlerFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODoxNDowMFrOHQ-SNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODoxNDowMFrOHQ-SNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1OTczNA==", "bodyText": "Why are the handlers stored in a Map?\nIsn't this just a complex way to write the following?\nreturn handlers.stream()\n     // Check simplified a bit in this example.\n    .filter(handler -> handler.getFormats().contains(reference.getFormat()))\n    .findAny()\n    .orElseThrow(// [...]);\n\nAt the bottom, the last factory wins. But most Maps do not guarantee an order.", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487559734", "createdAt": "2020-09-13T18:14:00Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/input/InputFormatHandlerFactory.java", "diffHunk": "@@ -29,9 +30,10 @@ public ItemDescriptionFormatFactory(List<ItemDescriptionFactory> factories) {\n      * @param landscapeDescription landscape, may contain a base url\n      * @return the factory\n      */\n-    public ItemDescriptionFactory getFactory(SourceReference reference, LandscapeDescription landscapeDescription) {\n+    @NonNull\n+    public InputFormatHandler getInputFormatHandler(SourceReference reference, LandscapeDescription landscapeDescription) {\n \n-        List<ItemDescriptionFactory> factories = new ArrayList<>();\n+        List<InputFormatHandler> factories = new ArrayList<>();\n         factoryListMap.entrySet().stream()\n                 .filter(entry -> entry.getValue().stream().map(s -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI4MDg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/ItemDescriptionValues.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODoxNTozMVrOHQ-S5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODoxNTozMVrOHQ-S5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU1OTkwOQ==", "bodyText": "Perhaps merge would be a better method name here.\nMaybe the merge method could then be moved to ItemDescription .", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487559909", "createdAt": "2020-09-13T18:15:31Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/input/ItemDescriptionValues.java", "diffHunk": "@@ -1,32 +1,18 @@\n package de.bonndan.nivio.input;\n \n import de.bonndan.nivio.input.dto.ItemDescription;\n-import de.bonndan.nivio.input.dto.SourceReference;\n-\n-import java.net.URL;\n-import java.util.List;\n \n import static de.bonndan.nivio.util.SafeAssign.assignSafe;\n \n-/**\n- * Processors of input sources must implement this interface.\n- *\n- *\n- */\n-public interface ItemDescriptionFactory {\n-\n-    List<String> getFormats();\n-\n-    List<ItemDescription> getDescriptions(SourceReference reference, URL baseUrl);\n-\n+public class ItemDescriptionValues {\n     /**\n      * Overwrites and fields on the existing with values of the increment unless the increment value is null.\n      *\n-     * @param existing current description present in the landscape\n+     * @param existing  current description present in the landscape\n      * @param increment new values\n      */\n-    static void assignNotNull(ItemDescription existing, ItemDescription increment) {\n-        \n+    public static void assignNotNull(ItemDescription existing, ItemDescription increment) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI4Mzk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/compose2/InputFormatHandlerCompose2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODoxOTo1N1rOHQ-UcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODoxOTo1N1rOHQ-UcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2MDMwNA==", "bodyText": "Was this added intenionally? Or should the logger from the class be used?", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487560304", "createdAt": "2020-09-13T18:19:57Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/input/compose2/InputFormatHandlerCompose2.java", "diffHunk": "@@ -6,24 +6,31 @@\n import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;\n \n import de.bonndan.nivio.input.FileFetcher;\n-import de.bonndan.nivio.input.ItemDescriptionFactory;\n+import de.bonndan.nivio.input.InputFormatHandler;\n import de.bonndan.nivio.input.dto.ItemDescription;\n import de.bonndan.nivio.input.dto.SourceReference;\n import de.bonndan.nivio.input.http.HttpService;\n+import de.bonndan.nivio.observation.InputFormatObserver;\n+import de.bonndan.nivio.observation.URLObserver;\n+import de.bonndan.nivio.util.URLHelper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.lang.Nullable;\n import org.springframework.stereotype.Service;\n \n import java.io.IOException;\n+import java.net.MalformedURLException;\n import java.net.URL;\n import java.util.ArrayList;\n-import java.util.Arrays;\n+import java.util.Collections;\n import java.util.List;\n \n+import static io.swagger.v3.oas.integration.StringOpenApiConfigurationLoader.LOGGER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI4OTE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/kubernetes/InputFormatHandlerKubernetes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODoyNjoxNlrOHQ-W7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODoyNjoxNlrOHQ-W7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2MDk0MQ==", "bodyText": "It's at least unconventional to pass an Optional here.\nI guess the nullable client was ok here.\nMaybe it would be an even better idea to make the client not nullable. The coede in getClient() looks as if it depends on global state.  Most probably not the concern of this class.", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487560941", "createdAt": "2020-09-13T18:26:16Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/input/kubernetes/InputFormatHandlerKubernetes.java", "diffHunk": "@@ -43,12 +44,8 @@\n     private String groupLabel = null;\n     private KubernetesClient client;\n \n-    public ItemDescriptionFactoryKubernetes() {\n-\n-    }\n-\n-    public ItemDescriptionFactoryKubernetes(KubernetesClient client) {\n-        this.client = client;\n+    public InputFormatHandlerKubernetes(Optional<KubernetesClient> client) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI5MjUxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/observation/InputFormatObserver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODozMDoxN1rOHQ-YkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODozMDoxN1rOHQ-YkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2MTM2MQ==", "bodyText": "The new name is a huge improvement \ud83d\udc4d", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487561361", "createdAt": "2020-09-13T18:30:17Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/observation/InputFormatObserver.java", "diffHunk": "@@ -7,10 +7,11 @@\n  *\n  * URL observer is implemented, but others like k8s observer to be done\n  */\n-interface Observer {\n+public interface InputFormatObserver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDI5NTAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/observation/InputFormatObserver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODozMjo0NlrOHQ-Zxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODozMjo0NlrOHQ-Zxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2MTY3MQ==", "bodyText": "What are the benefits of returning a future here? What problem is solved?\nMaybe a short note regarding the design could be added here.\nAdditionally, I would have expected CompletableFuture, because of the method name.", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487561671", "createdAt": "2020-09-13T18:32:46Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/observation/InputFormatObserver.java", "diffHunk": "@@ -7,10 +7,11 @@\n  *\n  * URL observer is implemented, but others like k8s observer to be done\n  */\n-interface Observer {\n+public interface InputFormatObserver {\n \n     /**\n      * @return a future of the observed whether it had a change\n+     * @throws de.bonndan.nivio.ProcessingException on error\n      */\n     CompletableFuture<String> hasChange();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDMwMTY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/observation/LandscapeObserverPool.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo0MDo0OVrOHQ-c5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo0MDo0OVrOHQ-c5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2MjQ3MQ==", "bodyText": "Can the error even occur here?\nDoesn't hasChange() just start an synchronous process? You would encounter the error when trying to access the result, usually via Future.get().\nBut I did not get yet where this happens. Most probably somewhere below in thenApply().", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487562471", "createdAt": "2020-09-13T18:40:49Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/observation/LandscapeObserverPool.java", "diffHunk": "@@ -1,42 +1,50 @@\n package de.bonndan.nivio.observation;\n \n+import de.bonndan.nivio.ProcessingException;\n import de.bonndan.nivio.model.Landscape;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.util.StringUtils;\n \n import java.util.List;\n import java.util.Objects;\n-import java.util.Optional;\n import java.util.concurrent.CompletableFuture;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n /**\n  * A wrapper around observers to reduce the async results to a single boolean.\n- *\n- *\n  */\n public class LandscapeObserverPool {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(LandscapeObserverPool.class);\n-    public static final String DELIM = \";\";\n \n     private final Landscape landscape;\n-    private final List<URLObserver> observers;\n+    private final List<InputFormatObserver> observers;\n \n-    public LandscapeObserverPool(Landscape landscape, List<URLObserver> observers) {\n+    public LandscapeObserverPool(Landscape landscape, List<InputFormatObserver> observers) {\n         this.landscape = landscape;\n         this.observers = observers;\n     }\n \n     /**\n      * @return the change\n      */\n-    public Optional<String> hasChange() {\n+    public ObservedChange getChange() {\n+\n         LOGGER.info(\"Detecting changes in {} observers for landscape {}.\", observers.size(), landscape.getIdentifier());\n \n-        CompletableFuture<String>[] futures = observers.stream().map(URLObserver::hasChange).toArray(CompletableFuture[]::new);\n+        ObservedChange change = new ObservedChange();\n+        CompletableFuture<String>[] futures = observers.stream().map(observer -> {\n+            try {\n+                return observer.hasChange();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDMwMjI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/observation/LandscapeObserverPoolFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo0MTo0MVrOHQ-dMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo0MTo0MVrOHQ-dMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2MjU0Ng==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487562546", "createdAt": "2020-09-13T18:41:41Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/observation/LandscapeObserverPoolFactory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package de.bonndan.nivio.observation;\n+\n+import de.bonndan.nivio.input.FileFetcher;\n+import de.bonndan.nivio.input.InputFormatHandler;\n+import de.bonndan.nivio.input.InputFormatHandlerFactory;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import de.bonndan.nivio.model.Landscape;\n+import de.bonndan.nivio.util.URLHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.lang.NonNull;\n+import org.springframework.stereotype.Service;\n+\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+\n+/**\n+ * This factory is responsible to create {@link LandscapeObserverPool}s.\n+ * <p>\n+ * Since each landscape can consist of different sources ({@link SourceReference}s) of different formats, each of them\n+ * can require a different type of observer ({@link InputFormatObserver}).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDMwNDQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/observation/LandscapeObserverPoolFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo0NDoyMVrOHQ-eVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo0NDoyMVrOHQ-eVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2MjgzOA==", "bodyText": "Somehow the error handling regarding URLs crawls into the calling code.\nI saw similar stuff in that context several time in this pull request. Might be a chance for improvement in the future.", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487562838", "createdAt": "2020-09-13T18:44:21Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/observation/LandscapeObserverPoolFactory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package de.bonndan.nivio.observation;\n+\n+import de.bonndan.nivio.input.FileFetcher;\n+import de.bonndan.nivio.input.InputFormatHandler;\n+import de.bonndan.nivio.input.InputFormatHandlerFactory;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import de.bonndan.nivio.model.Landscape;\n+import de.bonndan.nivio.util.URLHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.lang.NonNull;\n+import org.springframework.stereotype.Service;\n+\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+\n+/**\n+ * This factory is responsible to create {@link LandscapeObserverPool}s.\n+ * <p>\n+ * Since each landscape can consist of different sources ({@link SourceReference}s) of different formats, each of them\n+ * can require a different type of observer ({@link InputFormatObserver}).\n+ */\n+@Service\n+public class LandscapeObserverPoolFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(LandscapeObserverPoolFactory.class);\n+    private final InputFormatHandlerFactory inputFormatHandlerFactory;\n+    private final FileFetcher fileFetcher;\n+\n+    public LandscapeObserverPoolFactory(InputFormatHandlerFactory inputFormatHandlerFactory, FileFetcher fileFetcher) {\n+        this.inputFormatHandlerFactory = inputFormatHandlerFactory;\n+        this.fileFetcher = fileFetcher;\n+    }\n+\n+    public LandscapeObserverPool getPoolFor(Landscape landscape, @NonNull LandscapeDescription description) {\n+\n+        List<InputFormatObserver> observers = new ArrayList<>();\n+        Optional<URL> baseUrl = URLHelper.getParentPath(description.getSource());\n+        if (baseUrl.isEmpty()) {\n+            LOGGER.info(\"Landscape {} does not seem to have a valid source ('\" + description.getSource() + \"')\", description.getIdentifier());\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDMwNjg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/observation/ObservedChange.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo0Njo1MlrOHQ-ffw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo0Njo1MlrOHQ-ffw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2MzEzNQ==", "bodyText": "I am surprised that this flag is not connected to the list of ProcessingExceptions.", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487563135", "createdAt": "2020-09-13T18:46:52Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/observation/ObservedChange.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package de.bonndan.nivio.observation;\n+\n+import de.bonndan.nivio.ProcessingException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Result containing changes sources and errors while scanning.\n+ */\n+class ObservedChange {\n+\n+    private final List<ProcessingException> errors = new ArrayList<>();\n+    private List<String> changes;\n+    private boolean error;\n+\n+    public void setChanges(List<String> changes) {\n+        this.changes = changes;\n+    }\n+\n+    public void setHasError() {\n+        this.error = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDMwNzAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/observation/ObservedChange.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo0NzoxMFrOHQ-flw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo0NzoxMFrOHQ-flw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2MzE1OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487563159", "createdAt": "2020-09-13T18:47:10Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/observation/ObservedChange.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package de.bonndan.nivio.observation;\n+\n+import de.bonndan.nivio.ProcessingException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Result containing changes sources and errors while scanning.\n+ */\n+class ObservedChange {\n+\n+    private final List<ProcessingException> errors = new ArrayList<>();\n+    private List<String> changes;\n+    private boolean error;\n+\n+    public void setChanges(List<String> changes) {\n+        this.changes = changes;\n+    }\n+\n+    public void setHasError() {\n+        this.error = true;\n+    }\n+\n+    public boolean hasError() {\n+        return error;\n+    }\n+\n+    public void addError(ProcessingException e) {\n+        this.errors.add(e);\n+    }\n+\n+    public List<ProcessingException> getErrors() {\n+        return Collections.unmodifiableList(errors);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDMwODMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/observation/ObservedChange.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo0ODo1M1rOHQ-gPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo0ODo1M1rOHQ-gPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2MzMyNA==", "bodyText": "The list from getErrors() was protected, but here an external list reference is accepted.\nMight be a consequent to add the same level of protection to changes.", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487563324", "createdAt": "2020-09-13T18:48:53Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/observation/ObservedChange.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package de.bonndan.nivio.observation;\n+\n+import de.bonndan.nivio.ProcessingException;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Result containing changes sources and errors while scanning.\n+ */\n+class ObservedChange {\n+\n+    private final List<ProcessingException> errors = new ArrayList<>();\n+    private List<String> changes;\n+    private boolean error;\n+\n+    public void setChanges(List<String> changes) {\n+        this.changes = changes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDMxMDE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/observation/ObserverRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo1MDo0M1rOHQ-hGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo1MDo0M1rOHQ-hGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2MzU0Nw==", "bodyText": "Is the cast necessary? I think getPoolFor() below also accepts a Landscape.\nThe non-null behavior should perhaps be guaranteed by the ProcessingFinishedEvent.", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487563547", "createdAt": "2020-09-13T18:50:43Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/observation/ObserverRegistry.java", "diffHunk": "@@ -52,49 +52,18 @@ public ObserverRegistry(URLObserverFactory urlObserverFactory,\n      */\n     @Override\n     public void onApplicationEvent(ProcessingFinishedEvent event) {\n-        LandscapeDescription from = (LandscapeDescription) event.getSource();\n-        LandscapeImpl landscape = (LandscapeImpl) event.getLandscape();\n+        LandscapeDescription landscapeDescription = (LandscapeDescription) event.getSource();\n+        LandscapeImpl landscape = Objects.requireNonNull((LandscapeImpl) event.getLandscape());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDMxMDUxOnYy", "diffSide": "LEFT", "path": "src/main/java/de/bonndan/nivio/observation/ObserverRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo1MTowNFrOHQ-hRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo1MTowNFrOHQ-hRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2MzU5MA==", "bodyText": "\ud83c\udf89", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487563590", "createdAt": "2020-09-13T18:51:04Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/observation/ObserverRegistry.java", "diffHunk": "@@ -52,49 +52,18 @@ public ObserverRegistry(URLObserverFactory urlObserverFactory,\n      */\n     @Override\n     public void onApplicationEvent(ProcessingFinishedEvent event) {\n-        LandscapeDescription from = (LandscapeDescription) event.getSource();\n-        LandscapeImpl landscape = (LandscapeImpl) event.getLandscape();\n+        LandscapeDescription landscapeDescription = (LandscapeDescription) event.getSource();\n+        LandscapeImpl landscape = Objects.requireNonNull((LandscapeImpl) event.getLandscape());\n \n-        if (from == null) {\n+        if (landscapeDescription == null) {\n             String msg = \"No landscape description (input) available. Landscape \" + landscape.getIdentifier() + \"could not be registered for observation\";\n             landscape.getLog().warn(msg);\n             LOGGER.warn(msg);\n             return;\n         }\n \n-        URL sourceUrl = URLHelper.getURL(from.getSource());\n-        if (sourceUrl == null) {\n-            LOGGER.info(\"Landscape {} does not seem to have a valid source ('\" + from.getSource() + \"')\", from.getIdentifier());\n-        }\n-\n-        List<URL> landscapeSourceLocations = getLandscapeSourceLocations(from, sourceUrl);\n-        setLandscapeUrls(from, landscapeSourceLocations);\n-        LOGGER.info(\"Registered landscape {} for observation with {} urls.\", from, landscapeSourceLocations.size());\n-    }\n-\n-    /**\n-     * Returns all URLs of a landscape description.\n-     *\n-     * @param env description\n-     * @param url config file url\n-     * @return urls: config file and source references.\n-     */\n-    private List<URL> getLandscapeSourceLocations(@NonNull LandscapeDescription env, @Nullable URL url) {\n-        List<URL> urls = new ArrayList<>();\n-        if (url != null) {\n-            urls.add(url);\n-        }\n-\n-        URL baseUrl = URLHelper.getParentPath(env.getSource());\n-        for (SourceReference sourceReference : env.getSourceReferences()) {\n-            try {\n-                urls.add(new URL(URLHelper.combine(baseUrl, sourceReference.getUrl())));\n-            } catch (MalformedURLException e) {\n-                LOGGER.error(\"Failed to handle url {}\", sourceReference.getUrl(), e);\n-            }\n-        }\n-\n-        return urls;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDMxMjQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/observation/ObserverRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo1MzoxN1rOHQ-iMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo1MzoxN1rOHQ-iMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2MzgyNg==", "bodyText": "Shouldn't this be at least a warning?", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487563826", "createdAt": "2020-09-13T18:53:17Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/observation/ObserverRegistry.java", "diffHunk": "@@ -109,29 +78,28 @@ public void poll() {\n     /**\n      * @return the currently observed landscapes.\n      */\n-    public Set<String> getObservedLandscapes() {\n+    Set<String> getObservedLandscapes() {\n         return observerMap.keySet();\n     }\n \n-    private void setLandscapeUrls(Landscape landscape, List<URL> urls) {\n-        observerMap.put(\n-                landscape.getIdentifier(),\n-                new LandscapeObserverPool(\n-                        landscape,\n-                        urls.stream().map(urlObserverFactory::getObserver).collect(Collectors.toList())\n-                )\n-        );\n-    }\n-\n     private void check(LandscapeObserverPool observerPool) {\n-        Optional<String> change = observerPool.hasChange();\n-        change.ifPresent(s -> {\n-            Landscape stored = observerPool.getLandscape();\n+        ObservedChange change = observerPool.getChange();\n+        if (change.getErrors().size() > 0) {\n+            String errors = change.getErrors().stream().map(ProcessingException::getMessage).collect(Collectors.joining(\";\"));\n+            LOGGER.info(\"Errors occurred while scanning landscape {} for changes:  {}\", observerPool.getLandscape(), errors);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDMxNTczOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/map/svg/MapStyleSheetFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo1NjozMlrOHQ-jyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxODo1NjozMlrOHQ-jyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NDIzNQ==", "bodyText": "Looks as if the exception stack traces are not passed on and lost here.\nThe error could also be passed to a regular logger, to keep that information.", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487564235", "createdAt": "2020-09-13T18:56:32Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/output/map/svg/MapStyleSheetFactory.java", "diffHunk": "@@ -27,23 +27,23 @@ public MapStyleSheetFactory(FileFetcher fileFetcher) {\n      * Returns the content of the stylesheet referenced in the config.\n      *\n      * @param landscapeConfig config containing the stylesheet reference\n-     * @param processLog current process log\n+     * @param processLog      current process log\n      * @return css or empty string\n      */\n+    @NonNull\n     public String getMapStylesheet(LandscapeConfig landscapeConfig, @NonNull ProcessLog processLog) {\n \n         String mapStylesheet = landscapeConfig.getBranding().getMapStylesheet();\n         if (StringUtils.isEmpty(mapStylesheet)) {\n             return \"\";\n         }\n \n-        String mapCss = \"\";\n-        processLog.debug(\"Loading customer stylesheet: \" + mapStylesheet);\n         try {\n-            mapCss = fileFetcher.get(URLHelper.getURL(mapStylesheet));\n-        } catch (ReadingException e ) {\n+            processLog.debug(\"Loading customer stylesheet: \" + mapStylesheet);\n+            return URLHelper.getURL(mapStylesheet).map(url -> fileFetcher.get(url)).orElse(\"\");\n+        } catch (ReadingException e) {\n             processLog.warn(\"Failed to load customer stylesheet \" + mapStylesheet + \": \" + e.getMessage());\n+            return \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDMxOTU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/util/URLHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxOTowMDo0MFrOHQ-lmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxOTowMDo0MFrOHQ-lmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NDY5OQ==", "bodyText": "What does this mean? Can be a file but must not be a file:// URL?", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487564699", "createdAt": "2020-09-13T19:00:40Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/util/URLHelper.java", "diffHunk": "@@ -23,40 +25,40 @@ public static boolean isLocal(URL url) {\n      * Tries to create an URL if a path is given.\n      *\n      * @param url string url or local path to file\n-     * @return an URL or null\n+     * @return an Optional of URL (empty on malformed urls)\n      */\n-    @Nullable\n-    public static URL getURL(String url) {\n+    public static Optional<URL> getURL(String url) {\n         if (url == null) {\n-            return null;\n+            return Optional.empty();\n         }\n         try {\n-            return new URL(url);\n+            return Optional.of(new URL(url));\n         } catch (MalformedURLException e) {\n             File file = new File(url);\n             if (file.exists() && !url.startsWith(\"file:\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDMyMTM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/util/URLHelper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxOTowMjo0MVrOHQ-mbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMDoxMDozOFrOHQ_B_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NDkwOQ==", "bodyText": "Could also be:\nurl1.map(url -> url.toURI().resolve(\".\").toURL());\n\nThat would make the previous empty check unnecessary.", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487564909", "createdAt": "2020-09-13T19:02:41Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/util/URLHelper.java", "diffHunk": "@@ -23,40 +25,40 @@ public static boolean isLocal(URL url) {\n      * Tries to create an URL if a path is given.\n      *\n      * @param url string url or local path to file\n-     * @return an URL or null\n+     * @return an Optional of URL (empty on malformed urls)\n      */\n-    @Nullable\n-    public static URL getURL(String url) {\n+    public static Optional<URL> getURL(String url) {\n         if (url == null) {\n-            return null;\n+            return Optional.empty();\n         }\n         try {\n-            return new URL(url);\n+            return Optional.of(new URL(url));\n         } catch (MalformedURLException e) {\n             File file = new File(url);\n             if (file.exists() && !url.startsWith(\"file:\")) {\n                 try {\n-                    return file.toURI().toURL();\n+                    return Optional.of(file.toURI().toURL());\n                 } catch (MalformedURLException ignored) {\n-                    return null;\n                 }\n             }\n         }\n-        return null;\n+        return Optional.empty();\n     }\n \n     /**\n      * Returns the path of a file as URL or null\n      */\n-    public static URL getParentPath(String url) {\n-        URL url1 = getURL(url);\n-        if (url1 == null) {\n-            return null;\n+    public static Optional<URL> getParentPath(String url) {\n+\n+        Optional<URL> url1 = getURL(url);\n+        if (url1.isEmpty()) {\n+            return Optional.empty();\n         }\n+\n         try {\n-            return url1.toURI().resolve(\".\").toURL();\n+            return Optional.of(url1.get().toURI().resolve(\".\").toURL());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU3MTk2NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487571965", "createdAt": "2020-09-13T20:10:38Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/util/URLHelper.java", "diffHunk": "@@ -23,40 +25,40 @@ public static boolean isLocal(URL url) {\n      * Tries to create an URL if a path is given.\n      *\n      * @param url string url or local path to file\n-     * @return an URL or null\n+     * @return an Optional of URL (empty on malformed urls)\n      */\n-    @Nullable\n-    public static URL getURL(String url) {\n+    public static Optional<URL> getURL(String url) {\n         if (url == null) {\n-            return null;\n+            return Optional.empty();\n         }\n         try {\n-            return new URL(url);\n+            return Optional.of(new URL(url));\n         } catch (MalformedURLException e) {\n             File file = new File(url);\n             if (file.exists() && !url.startsWith(\"file:\")) {\n                 try {\n-                    return file.toURI().toURL();\n+                    return Optional.of(file.toURI().toURL());\n                 } catch (MalformedURLException ignored) {\n-                    return null;\n                 }\n             }\n         }\n-        return null;\n+        return Optional.empty();\n     }\n \n     /**\n      * Returns the path of a file as URL or null\n      */\n-    public static URL getParentPath(String url) {\n-        URL url1 = getURL(url);\n-        if (url1 == null) {\n-            return null;\n+    public static Optional<URL> getParentPath(String url) {\n+\n+        Optional<URL> url1 = getURL(url);\n+        if (url1.isEmpty()) {\n+            return Optional.empty();\n         }\n+\n         try {\n-            return url1.toURI().resolve(\".\").toURL();\n+            return Optional.of(url1.get().toURI().resolve(\".\").toURL());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NDkwOQ=="}, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDMyMzk1OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/bonndan/nivio/input/InputFormatHandlerFactoryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxOTowNDo1M1rOHQ-nog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMDowNjoxN1rOHQ_AUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NTIxOA==", "bodyText": "Already using AssertJ?\nUsing\n assertThat(factory).isInstanceOf(InputFormatHandlerCompose2.class)\n\nwould provide a way better message in case of failure.", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487565218", "createdAt": "2020-09-13T19:04:53Z", "author": {"login": "Matthimatiker"}, "path": "src/test/java/de/bonndan/nivio/input/InputFormatHandlerFactoryTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.input.compose2.InputFormatHandlerCompose2;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import de.bonndan.nivio.input.nivio.InputFormatHandlerNivio;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+\n+public class InputFormatHandlerFactoryTest {\n+\n+    InputFormatHandlerFactory formatFactory;\n+\n+    @BeforeEach\n+    public void setup() {\n+        List<InputFormatHandler> factories = new ArrayList<>();\n+        factories.add(new InputFormatHandlerCompose2(mock(FileFetcher.class)));\n+        factories.add(new InputFormatHandlerNivio(mock(FileFetcher.class)));\n+\n+        formatFactory = new InputFormatHandlerFactory(factories);\n+    }\n+\n+    @Test\n+    public void defaultIfNull() {\n+        InputFormatHandler factory = formatFactory.getInputFormatHandler(\n+                new SourceReference(),\n+                new LandscapeDescription()\n+        );\n+\n+        assertTrue(factory instanceof InputFormatHandler);\n+        assertTrue(factory instanceof InputFormatHandlerNivio);\n+    }\n+\n+    @Test\n+    public void defaultIfOther() {\n+        assertThrows(ProcessingException.class,() -> {\n+           formatFactory.getInputFormatHandler(new SourceReference(null, \"abc\"), new LandscapeDescription());\n+        });\n+    }\n+\n+    @Test\n+    public void compose2() {\n+\n+        InputFormatHandler factory = formatFactory.getInputFormatHandler(\n+                new SourceReference(null, \"docker-compose-v2\"),\n+                new LandscapeDescription()\n+        );\n+\n+        assertTrue(factory instanceof InputFormatHandler);\n+        assertTrue(factory instanceof InputFormatHandlerCompose2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU3MTUzOA==", "bodyText": "\ud83d\ude01", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487571538", "createdAt": "2020-09-13T20:06:17Z", "author": {"login": "bonndan"}, "path": "src/test/java/de/bonndan/nivio/input/InputFormatHandlerFactoryTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package de.bonndan.nivio.input;\n+\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.input.compose2.InputFormatHandlerCompose2;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import de.bonndan.nivio.input.nivio.InputFormatHandlerNivio;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.Mockito.mock;\n+\n+public class InputFormatHandlerFactoryTest {\n+\n+    InputFormatHandlerFactory formatFactory;\n+\n+    @BeforeEach\n+    public void setup() {\n+        List<InputFormatHandler> factories = new ArrayList<>();\n+        factories.add(new InputFormatHandlerCompose2(mock(FileFetcher.class)));\n+        factories.add(new InputFormatHandlerNivio(mock(FileFetcher.class)));\n+\n+        formatFactory = new InputFormatHandlerFactory(factories);\n+    }\n+\n+    @Test\n+    public void defaultIfNull() {\n+        InputFormatHandler factory = formatFactory.getInputFormatHandler(\n+                new SourceReference(),\n+                new LandscapeDescription()\n+        );\n+\n+        assertTrue(factory instanceof InputFormatHandler);\n+        assertTrue(factory instanceof InputFormatHandlerNivio);\n+    }\n+\n+    @Test\n+    public void defaultIfOther() {\n+        assertThrows(ProcessingException.class,() -> {\n+           formatFactory.getInputFormatHandler(new SourceReference(null, \"abc\"), new LandscapeDescription());\n+        });\n+    }\n+\n+    @Test\n+    public void compose2() {\n+\n+        InputFormatHandler factory = formatFactory.getInputFormatHandler(\n+                new SourceReference(null, \"docker-compose-v2\"),\n+                new LandscapeDescription()\n+        );\n+\n+        assertTrue(factory instanceof InputFormatHandler);\n+        assertTrue(factory instanceof InputFormatHandlerCompose2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NTIxOA=="}, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDMyNjg3OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/bonndan/nivio/input/SourceReferencesResolverTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxOTowODowOVrOHQ-o8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMDoyOTo1NlrOHQ_JIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NTU1NA==", "bodyText": "Isn't there the risk that creating HttpService in this test makes real HTTP requests or spins up a connection pool?\nThe HttpService or FileFetcher could be mocked to ensure that this does not happen.", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487565554", "createdAt": "2020-09-13T19:08:09Z", "author": {"login": "Matthimatiker"}, "path": "src/test/java/de/bonndan/nivio/input/SourceReferencesResolverTest.java", "diffHunk": "@@ -35,8 +34,11 @@\n     public void setup() {\n         log = new ProcessLog(LoggerFactory.getLogger(SourceReferencesResolver.class));\n         sourceReferencesResolver = new SourceReferencesResolver(\n-                new ItemDescriptionFormatFactory(\n-                        new ArrayList<ItemDescriptionFactory>(Arrays.asList(ItemDescriptionFactoryNivio.forTesting(), ItemDescriptionFactoryCompose2.forTesting()))\n+                new InputFormatHandlerFactory(\n+                        new ArrayList<>(Arrays.asList(\n+                                new InputFormatHandlerNivio(new FileFetcher(new HttpService())),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU3Mzc5NA==", "bodyText": "I've replaced everything with mocks but one.", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487573794", "createdAt": "2020-09-13T20:29:56Z", "author": {"login": "bonndan"}, "path": "src/test/java/de/bonndan/nivio/input/SourceReferencesResolverTest.java", "diffHunk": "@@ -35,8 +34,11 @@\n     public void setup() {\n         log = new ProcessLog(LoggerFactory.getLogger(SourceReferencesResolver.class));\n         sourceReferencesResolver = new SourceReferencesResolver(\n-                new ItemDescriptionFormatFactory(\n-                        new ArrayList<ItemDescriptionFactory>(Arrays.asList(ItemDescriptionFactoryNivio.forTesting(), ItemDescriptionFactoryCompose2.forTesting()))\n+                new InputFormatHandlerFactory(\n+                        new ArrayList<>(Arrays.asList(\n+                                new InputFormatHandlerNivio(new FileFetcher(new HttpService())),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NTU1NA=="}, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDMzMDQ2OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/bonndan/nivio/observation/FileSourceReferenceObserverTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxOToxMjoxMlrOHQ-qvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QyMDoxMzo0NlrOHQ_C6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NjAxMw==", "bodyText": "Avoiding random numbers would make this test more deterministic.\nDoesn't this test fail when the same number is generated 2 times in a row?", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487566013", "createdAt": "2020-09-13T19:12:12Z", "author": {"login": "Matthimatiker"}, "path": "src/test/java/de/bonndan/nivio/observation/FileSourceReferenceObserverTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package de.bonndan.nivio.observation;\n+\n+import de.bonndan.nivio.input.FileFetcher;\n+import de.bonndan.nivio.input.LandscapeDescriptionFactory;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import de.bonndan.nivio.input.http.HttpService;\n+import de.bonndan.nivio.util.URLHelper;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import retrofit2.http.Url;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+class FileSourceReferenceObserverTest {\n+\n+    private FileFetcher fileFetcher;\n+    private LandscapeDescriptionFactory landscapeDescriptionFactory;\n+\n+    @BeforeEach\n+    public void setup() {\n+        fileFetcher = new FileFetcher(new HttpService());\n+        landscapeDescriptionFactory = new LandscapeDescriptionFactory(fileFetcher);\n+    }\n+\n+    @Test\n+    public void canHandleCombinedPath() throws IOException, ExecutionException, InterruptedException {\n+\n+        String realpath = getRootPath() + \"/src/test/resources/example/services/wordpress.yml\";\n+        File realfile = new File(realpath);\n+\n+        String source = getRootPath() + \"/src/test/resources/example/example_env.yml\";\n+        File file = new File(source);\n+\n+        LandscapeDescription description = landscapeDescriptionFactory.fromYaml(file);\n+\n+        SourceReference reference = description.getSourceReferences().get(0);\n+        reference.setUrl(\"./services/wordpress.yml\");\n+\n+        FileFetcher mocked = mock(FileFetcher.class);\n+        when(mocked.get(any(SourceReference.class), any(URL.class))).thenAnswer(invocationOnMock -> String.valueOf(Math.random()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU3MjIwMQ==", "bodyText": "I've been too lazy to look up this simple code:\nwhen(mocked.get(any(SourceReference.class), any(URL.class))).thenReturn(\"foo\", \"bar\")", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487572201", "createdAt": "2020-09-13T20:13:46Z", "author": {"login": "bonndan"}, "path": "src/test/java/de/bonndan/nivio/observation/FileSourceReferenceObserverTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package de.bonndan.nivio.observation;\n+\n+import de.bonndan.nivio.input.FileFetcher;\n+import de.bonndan.nivio.input.LandscapeDescriptionFactory;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import de.bonndan.nivio.input.http.HttpService;\n+import de.bonndan.nivio.util.URLHelper;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import retrofit2.http.Url;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.concurrent.ExecutionException;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+class FileSourceReferenceObserverTest {\n+\n+    private FileFetcher fileFetcher;\n+    private LandscapeDescriptionFactory landscapeDescriptionFactory;\n+\n+    @BeforeEach\n+    public void setup() {\n+        fileFetcher = new FileFetcher(new HttpService());\n+        landscapeDescriptionFactory = new LandscapeDescriptionFactory(fileFetcher);\n+    }\n+\n+    @Test\n+    public void canHandleCombinedPath() throws IOException, ExecutionException, InterruptedException {\n+\n+        String realpath = getRootPath() + \"/src/test/resources/example/services/wordpress.yml\";\n+        File realfile = new File(realpath);\n+\n+        String source = getRootPath() + \"/src/test/resources/example/example_env.yml\";\n+        File file = new File(source);\n+\n+        LandscapeDescription description = landscapeDescriptionFactory.fromYaml(file);\n+\n+        SourceReference reference = description.getSourceReferences().get(0);\n+        reference.setUrl(\"./services/wordpress.yml\");\n+\n+        FileFetcher mocked = mock(FileFetcher.class);\n+        when(mocked.get(any(SourceReference.class), any(URL.class))).thenAnswer(invocationOnMock -> String.valueOf(Math.random()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NjAxMw=="}, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MDMzMTg0OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/bonndan/nivio/observation/ObserverRegistryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxOToxNDoxNFrOHQ-raQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xM1QxOToxNDoxNFrOHQ-raQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU2NjE4NQ==", "bodyText": "A more descriptive test name would be helpful here.", "url": "https://github.com/dedica-team/nivio/pull/273#discussion_r487566185", "createdAt": "2020-09-13T19:14:14Z", "author": {"login": "Matthimatiker"}, "path": "src/test/java/de/bonndan/nivio/observation/ObserverRegistryTest.java", "diffHunk": "@@ -4,77 +4,54 @@\n import de.bonndan.nivio.input.FileFetcher;\n import de.bonndan.nivio.input.LandscapeDescriptionFactory;\n import de.bonndan.nivio.input.dto.LandscapeDescription;\n-import de.bonndan.nivio.input.dto.SourceReference;\n import de.bonndan.nivio.input.http.HttpService;\n import de.bonndan.nivio.model.LandscapeFactory;\n import de.bonndan.nivio.model.LandscapeImpl;\n import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.DisplayName;\n import org.junit.jupiter.api.Test;\n import org.springframework.context.ApplicationEventPublisher;\n \n import java.io.File;\n-import java.net.URL;\n import java.nio.file.Path;\n import java.nio.file.Paths;\n+import java.util.ArrayList;\n import java.util.Set;\n \n-import static org.junit.jupiter.api.Assertions.*;\n-import static org.mockito.ArgumentMatchers.any;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.mockito.Mockito.*;\n \n class ObserverRegistryTest {\n \n-    private ObserverRegistry observerRegistry;\n     private LandscapeDescriptionFactory landscapeDescriptionFactory;\n     private ApplicationEventPublisher publisher;\n-    private URLObserverFactory urlObserverFactory;\n+    private LandscapeObserverPoolFactory observerPoolFactory;\n+    private ObserverRegistry observerRegistry;\n     private LandscapeImpl landscape;\n \n     @BeforeEach\n     public void setup() {\n         landscapeDescriptionFactory = mock(LandscapeDescriptionFactory.class);\n         publisher = mock(ApplicationEventPublisher.class);\n-        urlObserverFactory = mock(URLObserverFactory.class);\n-        observerRegistry = new ObserverRegistry(urlObserverFactory, landscapeDescriptionFactory, publisher);\n-\n-        landscape = LandscapeFactory.create(\"test\");\n-    }\n-\n-    @Test\n-    public void register() {\n-        LandscapeDescription description = new LandscapeDescription();\n-        ProcessingFinishedEvent event = new ProcessingFinishedEvent(description, landscape);\n-        description.setIdentifier(\"test\");\n-        description.setSource(\"https://dedica.team\");\n-        when(landscapeDescriptionFactory.from(landscape)).thenReturn(description);\n-        when(urlObserverFactory.getObserver(any(URL.class))).thenReturn(mock(URLObserver.class));\n-\n-        //when\n-        observerRegistry.onApplicationEvent(event);\n-\n-        //then\n-        Set<String> observedLandscapes = observerRegistry.getObservedLandscapes();\n-        assertNotNull(observedLandscapes);\n-        assertEquals(1, observedLandscapes.size());\n-        assertEquals(landscape.getIdentifier(), observedLandscapes.iterator().next());\n-\n-        verify(urlObserverFactory).getObserver(any(URL.class));\n+        observerPoolFactory = mock(LandscapeObserverPoolFactory.class);\n+        observerRegistry = new ObserverRegistry(observerPoolFactory, landscapeDescriptionFactory, publisher);\n     }\n \n     @Test\n-    public void willRegardRelativePaths() {\n+    public void onApplicationEvent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25d1610efc8aa74a44b8fbe67d566251e07bbf89"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4030, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}