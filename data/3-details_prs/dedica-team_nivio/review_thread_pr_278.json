{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2ODY3OTc0", "number": 278, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNToxMzoxNVrOEjpCdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjoxNDoyNlrOEjqvkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODA3OTg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNToxMzoxNVrOHSG1VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNToxMzoxNVrOHSG1VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc0ODM3Mw==", "bodyText": "Small formatting problem.", "url": "https://github.com/dedica-team/nivio/pull/278#discussion_r488748373", "createdAt": "2020-09-15T15:13:15Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package de.bonndan.nivio.output.map.hex;\n+\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeItem;\n+import de.bonndan.nivio.output.map.svg.HexPath;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.*;\n+\n+/**\n+ * Collects all hexes close to group item hexes to create an area.\n+ */\n+public class GroupAreaFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GroupAreaFactory.class);\n+\n+    /**\n+     * Builds an areas of hex tiles belonging to a group.\n+     *  @param occupied    tiles occupied by items", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e508eac0f3540edc1e0b086ade2b3e45e3f44044"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODExNjAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNToyMDo0OVrOHSHMMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOToxNzozM1rOHSQlEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1NDIyNw==", "bodyText": "I guess the check could be extracted into a separate method, e.g. isInGroup():\n.filter(rel -> rel.getTarget().isInGroup(group.getIdentifier())", "url": "https://github.com/dedica-team/nivio/pull/278#discussion_r488754227", "createdAt": "2020-09-15T15:20:49Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package de.bonndan.nivio.output.map.hex;\n+\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeItem;\n+import de.bonndan.nivio.output.map.svg.HexPath;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.*;\n+\n+/**\n+ * Collects all hexes close to group item hexes to create an area.\n+ */\n+public class GroupAreaFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GroupAreaFactory.class);\n+\n+    /**\n+     * Builds an areas of hex tiles belonging to a group.\n+     *  @param occupied    tiles occupied by items\n+     * @param group       the group\n+     * @param vertexHexes a mapping from item to its hex\n+     * @param relationPaths   existing paths\n+     * @return\n+     */\n+    public static Set<Hex> getGroup(Set<Hex> occupied, Group group, Map<LandscapeItem, Hex> vertexHexes, List<HexPath> relationPaths) {\n+\n+        Set<Item> items = group.getItems();\n+        Set<Hex> inArea = new HashSet<>();\n+\n+        //surround each item\n+        items.forEach(item -> {\n+            Hex hex = vertexHexes.get(item);\n+            inArea.add(hex);\n+            hex.neighbours().forEach(neigh -> {\n+                if (!occupied.contains(neigh))\n+                    inArea.add(neigh);\n+            });\n+\n+            //add all \"inner\" relations (paths)\n+            relationPaths.stream()\n+                    .filter(rel -> rel.getSource().equals(item))\n+                    .filter(rel -> rel.getTarget().getGroup() != null)\n+                    .filter(rel -> rel.getTarget().getGroup().equals(group.getIdentifier()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e508eac0f3540edc1e0b086ade2b3e45e3f44044"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwODA1MA==", "bodyText": "The solution is now that only matching paths are passed as parameter, so filtering is not necessary here anymore.", "url": "https://github.com/dedica-team/nivio/pull/278#discussion_r488908050", "createdAt": "2020-09-15T19:17:33Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package de.bonndan.nivio.output.map.hex;\n+\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeItem;\n+import de.bonndan.nivio.output.map.svg.HexPath;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.*;\n+\n+/**\n+ * Collects all hexes close to group item hexes to create an area.\n+ */\n+public class GroupAreaFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GroupAreaFactory.class);\n+\n+    /**\n+     * Builds an areas of hex tiles belonging to a group.\n+     *  @param occupied    tiles occupied by items\n+     * @param group       the group\n+     * @param vertexHexes a mapping from item to its hex\n+     * @param relationPaths   existing paths\n+     * @return\n+     */\n+    public static Set<Hex> getGroup(Set<Hex> occupied, Group group, Map<LandscapeItem, Hex> vertexHexes, List<HexPath> relationPaths) {\n+\n+        Set<Item> items = group.getItems();\n+        Set<Hex> inArea = new HashSet<>();\n+\n+        //surround each item\n+        items.forEach(item -> {\n+            Hex hex = vertexHexes.get(item);\n+            inArea.add(hex);\n+            hex.neighbours().forEach(neigh -> {\n+                if (!occupied.contains(neigh))\n+                    inArea.add(neigh);\n+            });\n+\n+            //add all \"inner\" relations (paths)\n+            relationPaths.stream()\n+                    .filter(rel -> rel.getSource().equals(item))\n+                    .filter(rel -> rel.getTarget().getGroup() != null)\n+                    .filter(rel -> rel.getTarget().getGroup().equals(group.getIdentifier()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1NDIyNw=="}, "originalCommit": {"oid": "e508eac0f3540edc1e0b086ade2b3e45e3f44044"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODEyNzcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNToyMzoyNFrOHSHTXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODo0Mjo0NVrOHSPJnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1NjA2Mw==", "bodyText": "I do not know how this works in detail. But is it expected to always terminate in 2 iterations?", "url": "https://github.com/dedica-team/nivio/pull/278#discussion_r488756063", "createdAt": "2020-09-15T15:23:24Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package de.bonndan.nivio.output.map.hex;\n+\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeItem;\n+import de.bonndan.nivio.output.map.svg.HexPath;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.*;\n+\n+/**\n+ * Collects all hexes close to group item hexes to create an area.\n+ */\n+public class GroupAreaFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GroupAreaFactory.class);\n+\n+    /**\n+     * Builds an areas of hex tiles belonging to a group.\n+     *  @param occupied    tiles occupied by items\n+     * @param group       the group\n+     * @param vertexHexes a mapping from item to its hex\n+     * @param relationPaths   existing paths\n+     * @return\n+     */\n+    public static Set<Hex> getGroup(Set<Hex> occupied, Group group, Map<LandscapeItem, Hex> vertexHexes, List<HexPath> relationPaths) {\n+\n+        Set<Item> items = group.getItems();\n+        Set<Hex> inArea = new HashSet<>();\n+\n+        //surround each item\n+        items.forEach(item -> {\n+            Hex hex = vertexHexes.get(item);\n+            inArea.add(hex);\n+            hex.neighbours().forEach(neigh -> {\n+                if (!occupied.contains(neigh))\n+                    inArea.add(neigh);\n+            });\n+\n+            //add all \"inner\" relations (paths)\n+            relationPaths.stream()\n+                    .filter(rel -> rel.getSource().equals(item))\n+                    .filter(rel -> rel.getTarget().getGroup() != null)\n+                    .filter(rel -> rel.getTarget().getGroup().equals(group.getIdentifier()))\n+                    .forEach(rel -> inArea.addAll(rel.getHexes()));\n+        });\n+\n+        Set<Hex> bridges = getBridges(inArea);\n+        inArea.addAll(bridges);\n+\n+        //2nd pass fills gaps\n+        bridges = getBridges(inArea);\n+        inArea.addAll(bridges);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e508eac0f3540edc1e0b086ade2b3e45e3f44044"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MTAzMA==", "bodyText": "It works as follows: first we circumnavigate all hexes of items and add their neighbours immediately. Then we iterate over all one-hex gaps and add them. This iteration is repeated, so that effectively a few two-hex gaps were filled.\nThere is clearly much room for improvement here. It's only that I haven't found a bettter approach so far.", "url": "https://github.com/dedica-team/nivio/pull/278#discussion_r488851030", "createdAt": "2020-09-15T17:42:05Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package de.bonndan.nivio.output.map.hex;\n+\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeItem;\n+import de.bonndan.nivio.output.map.svg.HexPath;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.*;\n+\n+/**\n+ * Collects all hexes close to group item hexes to create an area.\n+ */\n+public class GroupAreaFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GroupAreaFactory.class);\n+\n+    /**\n+     * Builds an areas of hex tiles belonging to a group.\n+     *  @param occupied    tiles occupied by items\n+     * @param group       the group\n+     * @param vertexHexes a mapping from item to its hex\n+     * @param relationPaths   existing paths\n+     * @return\n+     */\n+    public static Set<Hex> getGroup(Set<Hex> occupied, Group group, Map<LandscapeItem, Hex> vertexHexes, List<HexPath> relationPaths) {\n+\n+        Set<Item> items = group.getItems();\n+        Set<Hex> inArea = new HashSet<>();\n+\n+        //surround each item\n+        items.forEach(item -> {\n+            Hex hex = vertexHexes.get(item);\n+            inArea.add(hex);\n+            hex.neighbours().forEach(neigh -> {\n+                if (!occupied.contains(neigh))\n+                    inArea.add(neigh);\n+            });\n+\n+            //add all \"inner\" relations (paths)\n+            relationPaths.stream()\n+                    .filter(rel -> rel.getSource().equals(item))\n+                    .filter(rel -> rel.getTarget().getGroup() != null)\n+                    .filter(rel -> rel.getTarget().getGroup().equals(group.getIdentifier()))\n+                    .forEach(rel -> inArea.addAll(rel.getHexes()));\n+        });\n+\n+        Set<Hex> bridges = getBridges(inArea);\n+        inArea.addAll(bridges);\n+\n+        //2nd pass fills gaps\n+        bridges = getBridges(inArea);\n+        inArea.addAll(bridges);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1NjA2Mw=="}, "originalCommit": {"oid": "e508eac0f3540edc1e0b086ade2b3e45e3f44044"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg4NDYzNg==", "bodyText": "That explanation would be a greate code comment.", "url": "https://github.com/dedica-team/nivio/pull/278#discussion_r488884636", "createdAt": "2020-09-15T18:42:45Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package de.bonndan.nivio.output.map.hex;\n+\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeItem;\n+import de.bonndan.nivio.output.map.svg.HexPath;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.*;\n+\n+/**\n+ * Collects all hexes close to group item hexes to create an area.\n+ */\n+public class GroupAreaFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GroupAreaFactory.class);\n+\n+    /**\n+     * Builds an areas of hex tiles belonging to a group.\n+     *  @param occupied    tiles occupied by items\n+     * @param group       the group\n+     * @param vertexHexes a mapping from item to its hex\n+     * @param relationPaths   existing paths\n+     * @return\n+     */\n+    public static Set<Hex> getGroup(Set<Hex> occupied, Group group, Map<LandscapeItem, Hex> vertexHexes, List<HexPath> relationPaths) {\n+\n+        Set<Item> items = group.getItems();\n+        Set<Hex> inArea = new HashSet<>();\n+\n+        //surround each item\n+        items.forEach(item -> {\n+            Hex hex = vertexHexes.get(item);\n+            inArea.add(hex);\n+            hex.neighbours().forEach(neigh -> {\n+                if (!occupied.contains(neigh))\n+                    inArea.add(neigh);\n+            });\n+\n+            //add all \"inner\" relations (paths)\n+            relationPaths.stream()\n+                    .filter(rel -> rel.getSource().equals(item))\n+                    .filter(rel -> rel.getTarget().getGroup() != null)\n+                    .filter(rel -> rel.getTarget().getGroup().equals(group.getIdentifier()))\n+                    .forEach(rel -> inArea.addAll(rel.getHexes()));\n+        });\n+\n+        Set<Hex> bridges = getBridges(inArea);\n+        inArea.addAll(bridges);\n+\n+        //2nd pass fills gaps\n+        bridges = getBridges(inArea);\n+        inArea.addAll(bridges);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc1NjA2Mw=="}, "originalCommit": {"oid": "e508eac0f3540edc1e0b086ade2b3e45e3f44044"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODE2MTYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTozMDoxOVrOHSHoCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzo0MjozMVrOHSNHTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2MTM1Mw==", "bodyText": "What are bridges? Empty gaps between 2 Hexes?\nA brief description would help here.", "url": "https://github.com/dedica-team/nivio/pull/278#discussion_r488761353", "createdAt": "2020-09-15T15:30:19Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package de.bonndan.nivio.output.map.hex;\n+\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeItem;\n+import de.bonndan.nivio.output.map.svg.HexPath;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.*;\n+\n+/**\n+ * Collects all hexes close to group item hexes to create an area.\n+ */\n+public class GroupAreaFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GroupAreaFactory.class);\n+\n+    /**\n+     * Builds an areas of hex tiles belonging to a group.\n+     *  @param occupied    tiles occupied by items\n+     * @param group       the group\n+     * @param vertexHexes a mapping from item to its hex\n+     * @param relationPaths   existing paths\n+     * @return\n+     */\n+    public static Set<Hex> getGroup(Set<Hex> occupied, Group group, Map<LandscapeItem, Hex> vertexHexes, List<HexPath> relationPaths) {\n+\n+        Set<Item> items = group.getItems();\n+        Set<Hex> inArea = new HashSet<>();\n+\n+        //surround each item\n+        items.forEach(item -> {\n+            Hex hex = vertexHexes.get(item);\n+            inArea.add(hex);\n+            hex.neighbours().forEach(neigh -> {\n+                if (!occupied.contains(neigh))\n+                    inArea.add(neigh);\n+            });\n+\n+            //add all \"inner\" relations (paths)\n+            relationPaths.stream()\n+                    .filter(rel -> rel.getSource().equals(item))\n+                    .filter(rel -> rel.getTarget().getGroup() != null)\n+                    .filter(rel -> rel.getTarget().getGroup().equals(group.getIdentifier()))\n+                    .forEach(rel -> inArea.addAll(rel.getHexes()));\n+        });\n+\n+        Set<Hex> bridges = getBridges(inArea);\n+        inArea.addAll(bridges);\n+\n+        //2nd pass fills gaps\n+        bridges = getBridges(inArea);\n+        inArea.addAll(bridges);\n+\n+        return inArea;\n+    }\n+\n+    static Set<Hex> getBridges(Set<Hex> inArea) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e508eac0f3540edc1e0b086ade2b3e45e3f44044"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MTI3OA==", "bodyText": "correct. I've added an explanation.", "url": "https://github.com/dedica-team/nivio/pull/278#discussion_r488851278", "createdAt": "2020-09-15T17:42:31Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/GroupAreaFactory.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package de.bonndan.nivio.output.map.hex;\n+\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeItem;\n+import de.bonndan.nivio.output.map.svg.HexPath;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.*;\n+\n+/**\n+ * Collects all hexes close to group item hexes to create an area.\n+ */\n+public class GroupAreaFactory {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(GroupAreaFactory.class);\n+\n+    /**\n+     * Builds an areas of hex tiles belonging to a group.\n+     *  @param occupied    tiles occupied by items\n+     * @param group       the group\n+     * @param vertexHexes a mapping from item to its hex\n+     * @param relationPaths   existing paths\n+     * @return\n+     */\n+    public static Set<Hex> getGroup(Set<Hex> occupied, Group group, Map<LandscapeItem, Hex> vertexHexes, List<HexPath> relationPaths) {\n+\n+        Set<Item> items = group.getItems();\n+        Set<Hex> inArea = new HashSet<>();\n+\n+        //surround each item\n+        items.forEach(item -> {\n+            Hex hex = vertexHexes.get(item);\n+            inArea.add(hex);\n+            hex.neighbours().forEach(neigh -> {\n+                if (!occupied.contains(neigh))\n+                    inArea.add(neigh);\n+            });\n+\n+            //add all \"inner\" relations (paths)\n+            relationPaths.stream()\n+                    .filter(rel -> rel.getSource().equals(item))\n+                    .filter(rel -> rel.getTarget().getGroup() != null)\n+                    .filter(rel -> rel.getTarget().getGroup().equals(group.getIdentifier()))\n+                    .forEach(rel -> inArea.addAll(rel.getHexes()));\n+        });\n+\n+        Set<Hex> bridges = getBridges(inArea);\n+        inArea.addAll(bridges);\n+\n+        //2nd pass fills gaps\n+        bridges = getBridges(inArea);\n+        inArea.addAll(bridges);\n+\n+        return inArea;\n+    }\n+\n+    static Set<Hex> getBridges(Set<Hex> inArea) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2MTM1Mw=="}, "originalCommit": {"oid": "e508eac0f3540edc1e0b086ade2b3e45e3f44044"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODE2ODE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/map/hex/Hex.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTozMTo0NFrOHSHsBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOToxNzo0NFrOHSQlbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2MjM3Mw==", "bodyText": "I guess this is nullable?", "url": "https://github.com/dedica-team/nivio/pull/278#discussion_r488762373", "createdAt": "2020-09-15T15:31:44Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/Hex.java", "diffHunk": "@@ -39,6 +41,7 @@\n     public final int r;\n     public final int s;\n     public String id;\n+    public Item item;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e508eac0f3540edc1e0b086ade2b3e45e3f44044"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwODE0Mg==", "bodyText": "has been removed", "url": "https://github.com/dedica-team/nivio/pull/278#discussion_r488908142", "createdAt": "2020-09-15T19:17:44Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/Hex.java", "diffHunk": "@@ -39,6 +41,7 @@\n     public final int r;\n     public final int s;\n     public String id;\n+    public Item item;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2MjM3Mw=="}, "originalCommit": {"oid": "e508eac0f3540edc1e0b086ade2b3e45e3f44044"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODE3NDQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/map/hex/Hex.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTozMzowMVrOHSHvvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzoxNDoyMVrOHSLxYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2MzMyNw==", "bodyText": "Naming is so important...", "url": "https://github.com/dedica-team/nivio/pull/278#discussion_r488763327", "createdAt": "2020-09-15T15:33:01Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/Hex.java", "diffHunk": "@@ -39,6 +41,7 @@\n     public final int r;\n     public final int s;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e508eac0f3540edc1e0b086ade2b3e45e3f44044"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyOTI4MQ==", "bodyText": "These are common names for hex coordinates. I've added field descriptions.", "url": "https://github.com/dedica-team/nivio/pull/278#discussion_r488829281", "createdAt": "2020-09-15T17:14:21Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/Hex.java", "diffHunk": "@@ -39,6 +41,7 @@\n     public final int r;\n     public final int s;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2MzMyNw=="}, "originalCommit": {"oid": "e508eac0f3540edc1e0b086ade2b3e45e3f44044"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODE3NzY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/map/hex/HexMap.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTozMzo0N1rOHSHx2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTozMzo0N1rOHSHx2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2Mzg2Ng==", "bodyText": "This could also be final.", "url": "https://github.com/dedica-team/nivio/pull/278#discussion_r488763866", "createdAt": "2020-09-15T15:33:47Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/HexMap.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package de.bonndan.nivio.output.map.hex;\n+\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeItem;\n+import de.bonndan.nivio.output.layout.LayoutedComponent;\n+import de.bonndan.nivio.output.map.svg.HexPath;\n+import org.springframework.lang.Nullable;\n+\n+import java.util.*;\n+\n+/**\n+ * Representation of a hex map.\n+ *\n+ *\n+ *\n+ */\n+public class HexMap {\n+\n+    private final Set<Hex> occupied = new HashSet<>();\n+    private final boolean debug;\n+    private final Map<LandscapeItem, Hex> vertexHexes = new HashMap<>();\n+    private final PathFinder pathFinder;\n+    private List<HexPath> paths = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e508eac0f3540edc1e0b086ade2b3e45e3f44044"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODE4Nzk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/map/hex/HexMap.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTozNjowOFrOHSH4IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOToxODozM1rOHSQnCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2NTQ3Mg==", "bodyText": "Why is this obsolete? Can it be removed?", "url": "https://github.com/dedica-team/nivio/pull/278#discussion_r488765472", "createdAt": "2020-09-15T15:36:08Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/HexMap.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package de.bonndan.nivio.output.map.hex;\n+\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeItem;\n+import de.bonndan.nivio.output.layout.LayoutedComponent;\n+import de.bonndan.nivio.output.map.svg.HexPath;\n+import org.springframework.lang.Nullable;\n+\n+import java.util.*;\n+\n+/**\n+ * Representation of a hex map.\n+ *\n+ *\n+ *\n+ */\n+public class HexMap {\n+\n+    private final Set<Hex> occupied = new HashSet<>();\n+    private final boolean debug;\n+    private final Map<LandscapeItem, Hex> vertexHexes = new HashMap<>();\n+    private final PathFinder pathFinder;\n+    private List<HexPath> paths = new ArrayList<>();\n+\n+    public HexMap(boolean debug) {\n+        this.debug = debug;\n+        // find and render relations\n+        pathFinder = new PathFinder(occupied);\n+        pathFinder.debug = this.debug;\n+    }\n+\n+    public void add(LayoutedComponent layoutedItem) {\n+        Hex hex = null;\n+        int i = 0;\n+        while (hex == null || occupied.contains(hex)) {\n+            hex = Hex.of(Math.round(layoutedItem.getX()) - i, Math.round(layoutedItem.getY()) - i);\n+            i++;\n+        }\n+\n+        Item item = (Item) layoutedItem.getComponent();\n+        hex.id = item.getFullyQualifiedIdentifier().jsonValue();\n+        hex.item = item;\n+        vertexHexes.put(item, hex); //this is obsolete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e508eac0f3540edc1e0b086ade2b3e45e3f44044"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgzMDg2Mw==", "bodyText": "This is the mapping between landscape items and hexes on the map. If we store Item inside Hex, this mapping is obsolete. However, as you pointed out below, Item is pushed deeper and deeper into the hex package.", "url": "https://github.com/dedica-team/nivio/pull/278#discussion_r488830863", "createdAt": "2020-09-15T17:17:01Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/HexMap.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package de.bonndan.nivio.output.map.hex;\n+\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeItem;\n+import de.bonndan.nivio.output.layout.LayoutedComponent;\n+import de.bonndan.nivio.output.map.svg.HexPath;\n+import org.springframework.lang.Nullable;\n+\n+import java.util.*;\n+\n+/**\n+ * Representation of a hex map.\n+ *\n+ *\n+ *\n+ */\n+public class HexMap {\n+\n+    private final Set<Hex> occupied = new HashSet<>();\n+    private final boolean debug;\n+    private final Map<LandscapeItem, Hex> vertexHexes = new HashMap<>();\n+    private final PathFinder pathFinder;\n+    private List<HexPath> paths = new ArrayList<>();\n+\n+    public HexMap(boolean debug) {\n+        this.debug = debug;\n+        // find and render relations\n+        pathFinder = new PathFinder(occupied);\n+        pathFinder.debug = this.debug;\n+    }\n+\n+    public void add(LayoutedComponent layoutedItem) {\n+        Hex hex = null;\n+        int i = 0;\n+        while (hex == null || occupied.contains(hex)) {\n+            hex = Hex.of(Math.round(layoutedItem.getX()) - i, Math.round(layoutedItem.getY()) - i);\n+            i++;\n+        }\n+\n+        Item item = (Item) layoutedItem.getComponent();\n+        hex.id = item.getFullyQualifiedIdentifier().jsonValue();\n+        hex.item = item;\n+        vertexHexes.put(item, hex); //this is obsolete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2NTQ3Mg=="}, "originalCommit": {"oid": "e508eac0f3540edc1e0b086ade2b3e45e3f44044"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwODU1NA==", "bodyText": "not obsolete anymore", "url": "https://github.com/dedica-team/nivio/pull/278#discussion_r488908554", "createdAt": "2020-09-15T19:18:33Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/HexMap.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package de.bonndan.nivio.output.map.hex;\n+\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n+import de.bonndan.nivio.model.LandscapeItem;\n+import de.bonndan.nivio.output.layout.LayoutedComponent;\n+import de.bonndan.nivio.output.map.svg.HexPath;\n+import org.springframework.lang.Nullable;\n+\n+import java.util.*;\n+\n+/**\n+ * Representation of a hex map.\n+ *\n+ *\n+ *\n+ */\n+public class HexMap {\n+\n+    private final Set<Hex> occupied = new HashSet<>();\n+    private final boolean debug;\n+    private final Map<LandscapeItem, Hex> vertexHexes = new HashMap<>();\n+    private final PathFinder pathFinder;\n+    private List<HexPath> paths = new ArrayList<>();\n+\n+    public HexMap(boolean debug) {\n+        this.debug = debug;\n+        // find and render relations\n+        pathFinder = new PathFinder(occupied);\n+        pathFinder.debug = this.debug;\n+    }\n+\n+    public void add(LayoutedComponent layoutedItem) {\n+        Hex hex = null;\n+        int i = 0;\n+        while (hex == null || occupied.contains(hex)) {\n+            hex = Hex.of(Math.round(layoutedItem.getX()) - i, Math.round(layoutedItem.getY()) - i);\n+            i++;\n+        }\n+\n+        Item item = (Item) layoutedItem.getComponent();\n+        hex.id = item.getFullyQualifiedIdentifier().jsonValue();\n+        hex.item = item;\n+        vertexHexes.put(item, hex); //this is obsolete", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2NTQ3Mg=="}, "originalCommit": {"oid": "e508eac0f3540edc1e0b086ade2b3e45e3f44044"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODE5NTM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/map/hex/PathFinder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTozNzo0MFrOHSH8tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNTozNzo0MFrOHSH8tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc2NjY0NA==", "bodyText": "What is collect? The path? The hexes between startHex and destHex?", "url": "https://github.com/dedica-team/nivio/pull/278#discussion_r488766644", "createdAt": "2020-09-15T15:37:40Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/output/map/hex/PathFinder.java", "diffHunk": "@@ -187,7 +187,7 @@ public HexPath getPath(Hex startHex, Hex destHex) {\n             return null;\n \n         List<Hex> collect = path.stream().map(tile -> tile.hex).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e508eac0f3540edc1e0b086ade2b3e45e3f44044"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODM1OTIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/output/map/svg/HexPath.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjoxNDoyNlrOHSJiNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOToxODo0M1rOHSQnXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5MjYzMA==", "bodyText": "This pushes domain objects down into the view level.\nAt least that looks like the wrong abstraction level for Items.", "url": "https://github.com/dedica-team/nivio/pull/278#discussion_r488792630", "createdAt": "2020-09-15T16:14:26Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/output/map/svg/HexPath.java", "diffHunk": "@@ -13,13 +14,19 @@\n  */\n public class HexPath {\n \n+    private final Item source;\n+    private final Item target;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e508eac0f3540edc1e0b086ade2b3e45e3f44044"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwODYzNw==", "bodyText": "Removed", "url": "https://github.com/dedica-team/nivio/pull/278#discussion_r488908637", "createdAt": "2020-09-15T19:18:43Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/output/map/svg/HexPath.java", "diffHunk": "@@ -13,13 +14,19 @@\n  */\n public class HexPath {\n \n+    private final Item source;\n+    private final Item target;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODc5MjYzMA=="}, "originalCommit": {"oid": "e508eac0f3540edc1e0b086ade2b3e45e3f44044"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4032, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}