{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMTQ3NDEx", "number": 263, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjoyOToyM1rOEiF32w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjo0MTozOFrOEiGKog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTgzMjU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/model/Group.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjoyOToyM1rOHPxKsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzozNTozNFrOHPz5VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NjI0Mw==", "bodyText": "You could also wrap it with Collections.unmodifiableSet() as modification would not make sense anymore.", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486296243", "createdAt": "2020-09-10T12:29:23Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/model/Group.java", "diffHunk": "@@ -93,8 +92,13 @@ public void setColor(String color) {\n         return links;\n     }\n \n+    /**\n+     * Returns an immutable copy of the items.\n+     *\n+     * @return immutable copy\n+     */\n     public Set<Item> getItems() {\n-        return items;\n+        return Set.copyOf(items);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618b6af9f7521b8424dfecda53663c240510e7e6"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0MDk0OA==", "bodyText": "Set.of is the same, but unmodifiableSet is better to understand, so I'll change it.", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486340948", "createdAt": "2020-09-10T13:35:34Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/model/Group.java", "diffHunk": "@@ -93,8 +92,13 @@ public void setColor(String color) {\n         return links;\n     }\n \n+    /**\n+     * Returns an immutable copy of the items.\n+     *\n+     * @return immutable copy\n+     */\n     public Set<Item> getItems() {\n-        return items;\n+        return Set.copyOf(items);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NjI0Mw=="}, "originalCommit": {"oid": "618b6af9f7521b8424dfecda53663c240510e7e6"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTgzMzUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/model/Group.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjoyOTozOFrOHPxLRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjoyOTozOFrOHPxLRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NjM5MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486296390", "createdAt": "2020-09-10T12:29:38Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/model/Group.java", "diffHunk": "@@ -142,4 +146,22 @@ public String toString() {\n                 \"identifier='\" + identifier + '\\'' +\n                 '}';\n     }\n+\n+    /**\n+     * Adds an item to this group.\n+     *\n+     * @param item the item to add.\n+     * @throws IllegalArgumentException if the item group field mismatches\n+     */\n+    public void addItem(Item item) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618b6af9f7521b8424dfecda53663c240510e7e6"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTgzNjc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/model/Item.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjozMDoyMVrOHPxNHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjozMDoyMVrOHPxNHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5Njg2MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486296861", "createdAt": "2020-09-10T12:30:21Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/model/Item.java", "diffHunk": "@@ -18,7 +18,7 @@\n \n     @NotNull\n     @Pattern(regexp = LandscapeItem.IDENTIFIER_VALIDATION)\n-    private String identifier;\n+    private final String identifier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618b6af9f7521b8424dfecda53663c240510e7e6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTgzOTczOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/model/Item.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjozMTowOVrOHPxO7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTo1MDozNFrOHP6nHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NzMyNw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486297327", "createdAt": "2020-09-10T12:31:09Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/model/Item.java", "diffHunk": "@@ -227,7 +236,7 @@ public boolean equals(Object o) {\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(toString());\n+        return Objects.hash(identifier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618b6af9f7521b8424dfecda53663c240510e7e6"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5ODI1Nw==", "bodyText": "Shouldn't equals also check for the identifier now?", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486298257", "createdAt": "2020-09-10T12:32:44Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/model/Item.java", "diffHunk": "@@ -227,7 +236,7 @@ public boolean equals(Object o) {\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(toString());\n+        return Objects.hash(identifier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NzMyNw=="}, "originalCommit": {"oid": "618b6af9f7521b8424dfecda53663c240510e7e6"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM2MDc2MQ==", "bodyText": "I'd rather say no, because equality is given if FullyIdentifiedQualifier is equal, and this means that identifier AND group are equal (group comparison is a bit more complex, and that is encapsulated in FQI)", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486360761", "createdAt": "2020-09-10T13:53:27Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/model/Item.java", "diffHunk": "@@ -227,7 +236,7 @@ public boolean equals(Object o) {\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(toString());\n+        return Objects.hash(identifier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NzMyNw=="}, "originalCommit": {"oid": "618b6af9f7521b8424dfecda53663c240510e7e6"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1MDk3NQ==", "bodyText": "I don't know enough about the internals to decide, which equality is right.\nequals()  that uses toString() looked a bit unusual.\nWe just have to make that hashCode() and equals() fit together: If 2 objects are equal, they always must return the same hash code.", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486450975", "createdAt": "2020-09-10T15:50:34Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/model/Item.java", "diffHunk": "@@ -227,7 +236,7 @@ public boolean equals(Object o) {\n \n     @Override\n     public int hashCode() {\n-        return Objects.hash(toString());\n+        return Objects.hash(identifier);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI5NzMyNw=="}, "originalCommit": {"oid": "618b6af9f7521b8424dfecda53663c240510e7e6"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTg1OTkzOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/bonndan/nivio/assessment/kpi/LifecycleKPITest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjozNjozMlrOHPxbdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzo0NDoxN1rOHP0efA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwMDUzMw==", "bodyText": "Adding a constructor for this case might increase readability of item construction, as the reader does not have to reason about null.", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486300533", "createdAt": "2020-09-10T12:36:32Z", "author": {"login": "Matthimatiker"}, "path": "src/test/java/de/bonndan/nivio/assessment/kpi/LifecycleKPITest.java", "diffHunk": "@@ -24,8 +24,7 @@ public void setup() {\n \n     @Test\n     public void green() {\n-        Item item = new Item();\n-        item.setIdentifier(\"foo\");\n+        Item item = new Item(null, \"foo\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618b6af9f7521b8424dfecda53663c240510e7e6"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM1MDQ2MA==", "bodyText": "In productive code the constructor is only used in ItemFactory, and there both args are given.", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486350460", "createdAt": "2020-09-10T13:44:17Z", "author": {"login": "bonndan"}, "path": "src/test/java/de/bonndan/nivio/assessment/kpi/LifecycleKPITest.java", "diffHunk": "@@ -24,8 +24,7 @@ public void setup() {\n \n     @Test\n     public void green() {\n-        Item item = new Item();\n-        item.setIdentifier(\"foo\");\n+        Item item = new Item(null, \"foo\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwMDUzMw=="}, "originalCommit": {"oid": "618b6af9f7521b8424dfecda53663c240510e7e6"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTg4MDY2OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/bonndan/nivio/model/GroupTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjo0MTozOFrOHPxn_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTo1MjoyNVrOHP6sHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwMzc0MA==", "bodyText": "I am a bit surprised that this throws an exception.\nI would have expected that the returned Set (but not the original one) is modified.", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486303740", "createdAt": "2020-09-10T12:41:38Z", "author": {"login": "Matthimatiker"}, "path": "src/test/java/de/bonndan/nivio/model/GroupTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package de.bonndan.nivio.model;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class GroupTest {\n+\n+    @Test\n+    void doesNotAllowEmptyIdentifier() {\n+        assertThrows(Exception.class, () -> new Group(\"\"));\n+    }\n+\n+    @Test\n+    void getItemsIsImmutable() {\n+        Group g = new Group(\"foo\");\n+        assertThrows(Exception.class, () -> g.getItems().add(new Item(\"a\", \"b\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "618b6af9f7521b8424dfecda53663c240510e7e6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0NDgwNQ==", "bodyText": "The point is that group \"foo\" would not allow that an item of group \"a\" can be added (item.group cannot be changed anymore).\nMessing around with strings should be replaced in #212", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486344805", "createdAt": "2020-09-10T13:39:07Z", "author": {"login": "bonndan"}, "path": "src/test/java/de/bonndan/nivio/model/GroupTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package de.bonndan.nivio.model;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class GroupTest {\n+\n+    @Test\n+    void doesNotAllowEmptyIdentifier() {\n+        assertThrows(Exception.class, () -> new Group(\"\"));\n+    }\n+\n+    @Test\n+    void getItemsIsImmutable() {\n+        Group g = new Group(\"foo\");\n+        assertThrows(Exception.class, () -> g.getItems().add(new Item(\"a\", \"b\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwMzc0MA=="}, "originalCommit": {"oid": "618b6af9f7521b8424dfecda53663c240510e7e6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ1MjI1NQ==", "bodyText": "I was mainly surprised by the Set.copyOf() behavior.\nI expected a mutable copy.", "url": "https://github.com/dedica-team/nivio/pull/263#discussion_r486452255", "createdAt": "2020-09-10T15:52:25Z", "author": {"login": "Matthimatiker"}, "path": "src/test/java/de/bonndan/nivio/model/GroupTest.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package de.bonndan.nivio.model;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class GroupTest {\n+\n+    @Test\n+    void doesNotAllowEmptyIdentifier() {\n+        assertThrows(Exception.class, () -> new Group(\"\"));\n+    }\n+\n+    @Test\n+    void getItemsIsImmutable() {\n+        Group g = new Group(\"foo\");\n+        assertThrows(Exception.class, () -> g.getItems().add(new Item(\"a\", \"b\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMwMzc0MA=="}, "originalCommit": {"oid": "618b6af9f7521b8424dfecda53663c240510e7e6"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4028, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}