{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxODg1MTIx", "number": 121, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjoxMjoyNFrOD3Kfwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTozNjozNVrOD3Wanw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTcwMjQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/LandscapeConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjoxMjoyNFrOGNQ7Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjoxMjoyNFrOGNQ7Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU2MTk0Mw==", "bodyText": "It would be helpful to document, what data is used (or expected to be used) as keys.", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416561943", "createdAt": "2020-04-28T12:12:24Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/LandscapeConfig.java", "diffHunk": "@@ -13,6 +20,9 @@\n     private List<String> labelBlacklist = new ArrayList<>();\n     private Branding branding = new Branding();\n \n+    @JsonDeserialize(using = KPIFactory.class)\n+    private Map<String, KPI> kpis = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTcyNDQxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/api/ApiController.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjoxODoyNFrOGNRIXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQyMDo0Mzo1M1rOGPVOfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU2NTM0MQ==", "bodyText": "I guess this mutates the state of landscape? Might be worth to think about an immutable solution with simple input/output.", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416565341", "createdAt": "2020-04-28T12:18:24Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/api/ApiController.java", "diffHunk": "@@ -60,19 +61,22 @@ public ApiController(LandscapeRepository landscapeRepository, ItemDescriptionFor\n     private Function<LandscapeImpl, LandscapeDTO> createDTO() {\n         return landscape -> {\n             LandscapeDTO dto = LandscapeDTOFactory.from(landscape);\n+\n             LandscapeDTOFactory.addLinks(dto);\n             return dto;\n         };\n     }\n \n     @CrossOrigin(methods = RequestMethod.GET)\n-    @RequestMapping(path = \"/landscape/{identifier}\")\n+    @RequestMapping(path = \"/landscape/{identifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeDTO> landscape(@PathVariable String identifier) {\n         LandscapeImpl landscape = landscapeRepository.findDistinctByIdentifier(identifier).orElse(null);\n         if (landscape == null)\n             return ResponseEntity.notFound().build();\n-\n-        return new ResponseEntity<>(createDTO().apply(landscape), HttpStatus.OK);\n+        Assessment assessment = new Assessment(landscape.getConfig().getKPIs());\n+        assessment.assess(landscape);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg5ODQyMw==", "bodyText": "I had in mind to decouple assessment (volatile state) from the landscape (much more static). This could be also worth an extra API endpoint (?)\nBut then again there is the Assessable interface which encourages to set state on landscape components. Any good idea? @Matthimatiker", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416898423", "createdAt": "2020-04-28T20:23:41Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/api/ApiController.java", "diffHunk": "@@ -60,19 +61,22 @@ public ApiController(LandscapeRepository landscapeRepository, ItemDescriptionFor\n     private Function<LandscapeImpl, LandscapeDTO> createDTO() {\n         return landscape -> {\n             LandscapeDTO dto = LandscapeDTOFactory.from(landscape);\n+\n             LandscapeDTOFactory.addLinks(dto);\n             return dto;\n         };\n     }\n \n     @CrossOrigin(methods = RequestMethod.GET)\n-    @RequestMapping(path = \"/landscape/{identifier}\")\n+    @RequestMapping(path = \"/landscape/{identifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeDTO> landscape(@PathVariable String identifier) {\n         LandscapeImpl landscape = landscapeRepository.findDistinctByIdentifier(identifier).orElse(null);\n         if (landscape == null)\n             return ResponseEntity.notFound().build();\n-\n-        return new ResponseEntity<>(createDTO().apply(landscape), HttpStatus.OK);\n+        Assessment assessment = new Assessment(landscape.getConfig().getKPIs());\n+        assessment.assess(landscape);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU2NTM0MQ=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxNTE1NQ==", "bodyText": "I would need more information to make a qualified decision here.\nSeparating the static landscape from the state sound reasonable.\nRegarding Assessable: What if state was returned instead of assigned?", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r417515155", "createdAt": "2020-04-29T18:13:49Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/api/ApiController.java", "diffHunk": "@@ -60,19 +61,22 @@ public ApiController(LandscapeRepository landscapeRepository, ItemDescriptionFor\n     private Function<LandscapeImpl, LandscapeDTO> createDTO() {\n         return landscape -> {\n             LandscapeDTO dto = LandscapeDTOFactory.from(landscape);\n+\n             LandscapeDTOFactory.addLinks(dto);\n             return dto;\n         };\n     }\n \n     @CrossOrigin(methods = RequestMethod.GET)\n-    @RequestMapping(path = \"/landscape/{identifier}\")\n+    @RequestMapping(path = \"/landscape/{identifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeDTO> landscape(@PathVariable String identifier) {\n         LandscapeImpl landscape = landscapeRepository.findDistinctByIdentifier(identifier).orElse(null);\n         if (landscape == null)\n             return ResponseEntity.notFound().build();\n-\n-        return new ResponseEntity<>(createDTO().apply(landscape), HttpStatus.OK);\n+        Assessment assessment = new Assessment(landscape.getConfig().getKPIs());\n+        assessment.assess(landscape);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU2NTM0MQ=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODcyOTU5Nw==", "bodyText": "changed as proposed. Assessment is a separate thing now with its own API and references to landscape components", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r418729597", "createdAt": "2020-05-01T20:43:53Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/api/ApiController.java", "diffHunk": "@@ -60,19 +61,22 @@ public ApiController(LandscapeRepository landscapeRepository, ItemDescriptionFor\n     private Function<LandscapeImpl, LandscapeDTO> createDTO() {\n         return landscape -> {\n             LandscapeDTO dto = LandscapeDTOFactory.from(landscape);\n+\n             LandscapeDTOFactory.addLinks(dto);\n             return dto;\n         };\n     }\n \n     @CrossOrigin(methods = RequestMethod.GET)\n-    @RequestMapping(path = \"/landscape/{identifier}\")\n+    @RequestMapping(path = \"/landscape/{identifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeDTO> landscape(@PathVariable String identifier) {\n         LandscapeImpl landscape = landscapeRepository.findDistinctByIdentifier(identifier).orElse(null);\n         if (landscape == null)\n             return ResponseEntity.notFound().build();\n-\n-        return new ResponseEntity<>(createDTO().apply(landscape), HttpStatus.OK);\n+        Assessment assessment = new Assessment(landscape.getConfig().getKPIs());\n+        assessment.assess(landscape);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU2NTM0MQ=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTczNjEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/api/LandscapeDTOFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMjoyMTozNFrOGNRPTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMDoyNDoyM1rOGNlfLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU2NzExOA==", "bodyText": "This can also be configured on the deserialized objects via annotation, which would make the desired behavior more explicit.\nAdditionally it would\n\nmake data object compatible to any ObjectMapper\nmake deserialization testable in isolation", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416567118", "createdAt": "2020-04-28T12:21:34Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/api/LandscapeDTOFactory.java", "diffHunk": "@@ -21,57 +24,52 @@\n \n public class LandscapeDTOFactory {\n \n-    public static LandscapeDTO from(Landscape landscape) {\n+    static final ObjectMapper mapper;\n \n-        LandscapeDTO l = new LandscapeDTO();\n-        if (landscape == null)\n-            return l;\n-\n-        l.identifier = landscape.getIdentifier();\n-        l.name = landscape.getName();\n-        l.contact = landscape.getContact();\n-        l.source = landscape.getSource();\n-        l.description = landscape.getDescription();\n-\n-        if (landscape instanceof LandscapeImpl) {\n-            l.stats = getLandscapeStats((LandscapeImpl) landscape);\n-        }\n-\n-        return l;\n+    static {\n+        mapper = new ObjectMapper();\n+        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg5ODg2MQ==", "bodyText": "This code was obsolete, sorry.", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416898861", "createdAt": "2020-04-28T20:24:23Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/api/LandscapeDTOFactory.java", "diffHunk": "@@ -21,57 +24,52 @@\n \n public class LandscapeDTOFactory {\n \n-    public static LandscapeDTO from(Landscape landscape) {\n+    static final ObjectMapper mapper;\n \n-        LandscapeDTO l = new LandscapeDTO();\n-        if (landscape == null)\n-            return l;\n-\n-        l.identifier = landscape.getIdentifier();\n-        l.name = landscape.getName();\n-        l.contact = landscape.getContact();\n-        l.source = landscape.getSource();\n-        l.description = landscape.getDescription();\n-\n-        if (landscape instanceof LandscapeImpl) {\n-            l.stats = getLandscapeStats((LandscapeImpl) landscape);\n-        }\n-\n-        return l;\n+    static {\n+        mapper = new ObjectMapper();\n+        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU2NzExOA=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzQ2ODg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/api/LandscapeDTOFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODo0NTo0OFrOGNiDFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODoxMTowMVrOGOLABA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg0MjUxOA==", "bodyText": "Interesting. You might consider using @Nullable and @Nonnull annotations on parameters and methods to make the null handling explicit. Additional nice effect: IntelliJ can use these annotations to provide hints when assumptions are violated.\nYou can find these annotations in the package com.google.code.findbugs.", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416842518", "createdAt": "2020-04-28T18:45:48Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/api/LandscapeDTOFactory.java", "diffHunk": "@@ -21,57 +24,52 @@\n \n public class LandscapeDTOFactory {\n \n-    public static LandscapeDTO from(Landscape landscape) {\n+    static final ObjectMapper mapper;\n \n-        LandscapeDTO l = new LandscapeDTO();\n-        if (landscape == null)\n-            return l;\n-\n-        l.identifier = landscape.getIdentifier();\n-        l.name = landscape.getName();\n-        l.contact = landscape.getContact();\n-        l.source = landscape.getSource();\n-        l.description = landscape.getDescription();\n-\n-        if (landscape instanceof LandscapeImpl) {\n-            l.stats = getLandscapeStats((LandscapeImpl) landscape);\n-        }\n-\n-        return l;\n+    static {\n+        mapper = new ObjectMapper();\n+        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n     }\n \n-    private static LandscapeStatistics getLandscapeStats(LandscapeImpl impl) {\n+    public static LandscapeDTO from(LandscapeImpl landscape) {\n \n-        LandscapeStatistics stats = new LandscapeStatistics();\n-        stats.items = impl.getItems().all().size();\n-        stats.groups = impl.getGroups().size();\n-\n-        List<StatusItem> collect = impl.getItems().stream()\n-                .map(item -> StatusItem.highestOf(item.getStatuses())).flatMap(Collection::stream)\n-                .collect(Collectors.toList());\n+        LandscapeDTO landscapeDTO = new LandscapeDTO();\n+        if (landscape == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg5OTcxMg==", "bodyText": "org.springframework.lang also provides these annotations. Is findbugs more suitable?", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416899712", "createdAt": "2020-04-28T20:25:55Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/api/LandscapeDTOFactory.java", "diffHunk": "@@ -21,57 +24,52 @@\n \n public class LandscapeDTOFactory {\n \n-    public static LandscapeDTO from(Landscape landscape) {\n+    static final ObjectMapper mapper;\n \n-        LandscapeDTO l = new LandscapeDTO();\n-        if (landscape == null)\n-            return l;\n-\n-        l.identifier = landscape.getIdentifier();\n-        l.name = landscape.getName();\n-        l.contact = landscape.getContact();\n-        l.source = landscape.getSource();\n-        l.description = landscape.getDescription();\n-\n-        if (landscape instanceof LandscapeImpl) {\n-            l.stats = getLandscapeStats((LandscapeImpl) landscape);\n-        }\n-\n-        return l;\n+    static {\n+        mapper = new ObjectMapper();\n+        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n     }\n \n-    private static LandscapeStatistics getLandscapeStats(LandscapeImpl impl) {\n+    public static LandscapeDTO from(LandscapeImpl landscape) {\n \n-        LandscapeStatistics stats = new LandscapeStatistics();\n-        stats.items = impl.getItems().all().size();\n-        stats.groups = impl.getGroups().size();\n-\n-        List<StatusItem> collect = impl.getItems().stream()\n-                .map(item -> StatusItem.highestOf(item.getStatuses())).flatMap(Collection::stream)\n-                .collect(Collectors.toList());\n+        LandscapeDTO landscapeDTO = new LandscapeDTO();\n+        if (landscape == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg0MjUxOA=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwOTM2OA==", "bodyText": "Is it all JSR-305?", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416909368", "createdAt": "2020-04-28T20:43:14Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/api/LandscapeDTOFactory.java", "diffHunk": "@@ -21,57 +24,52 @@\n \n public class LandscapeDTOFactory {\n \n-    public static LandscapeDTO from(Landscape landscape) {\n+    static final ObjectMapper mapper;\n \n-        LandscapeDTO l = new LandscapeDTO();\n-        if (landscape == null)\n-            return l;\n-\n-        l.identifier = landscape.getIdentifier();\n-        l.name = landscape.getName();\n-        l.contact = landscape.getContact();\n-        l.source = landscape.getSource();\n-        l.description = landscape.getDescription();\n-\n-        if (landscape instanceof LandscapeImpl) {\n-            l.stats = getLandscapeStats((LandscapeImpl) landscape);\n-        }\n-\n-        return l;\n+    static {\n+        mapper = new ObjectMapper();\n+        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n     }\n \n-    private static LandscapeStatistics getLandscapeStats(LandscapeImpl impl) {\n+    public static LandscapeDTO from(LandscapeImpl landscape) {\n \n-        LandscapeStatistics stats = new LandscapeStatistics();\n-        stats.items = impl.getItems().all().size();\n-        stats.groups = impl.getGroups().size();\n-\n-        List<StatusItem> collect = impl.getItems().stream()\n-                .map(item -> StatusItem.highestOf(item.getStatuses())).flatMap(Collection::stream)\n-                .collect(Collectors.toList());\n+        LandscapeDTO landscapeDTO = new LandscapeDTO();\n+        if (landscape == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg0MjUxOA=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUxMzQ3Ng==", "bodyText": "Is findbugs more suitable?\n\nI never used the annotation from Spring, so I cannot give a comparison.\nI like that the annotations from findbugs are purely informational.\nIn contrast, some similar annotations from Lombok add additional behavior.", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r417513476", "createdAt": "2020-04-29T18:11:01Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/api/LandscapeDTOFactory.java", "diffHunk": "@@ -21,57 +24,52 @@\n \n public class LandscapeDTOFactory {\n \n-    public static LandscapeDTO from(Landscape landscape) {\n+    static final ObjectMapper mapper;\n \n-        LandscapeDTO l = new LandscapeDTO();\n-        if (landscape == null)\n-            return l;\n-\n-        l.identifier = landscape.getIdentifier();\n-        l.name = landscape.getName();\n-        l.contact = landscape.getContact();\n-        l.source = landscape.getSource();\n-        l.description = landscape.getDescription();\n-\n-        if (landscape instanceof LandscapeImpl) {\n-            l.stats = getLandscapeStats((LandscapeImpl) landscape);\n-        }\n-\n-        return l;\n+    static {\n+        mapper = new ObjectMapper();\n+        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n     }\n \n-    private static LandscapeStatistics getLandscapeStats(LandscapeImpl impl) {\n+    public static LandscapeDTO from(LandscapeImpl landscape) {\n \n-        LandscapeStatistics stats = new LandscapeStatistics();\n-        stats.items = impl.getItems().all().size();\n-        stats.groups = impl.getGroups().size();\n-\n-        List<StatusItem> collect = impl.getItems().stream()\n-                .map(item -> StatusItem.highestOf(item.getStatuses())).flatMap(Collection::stream)\n-                .collect(Collectors.toList());\n+        LandscapeDTO landscapeDTO = new LandscapeDTO();\n+        if (landscape == null)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg0MjUxOA=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzQ3NzUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/api/LandscapeDTOFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODo0Nzo1N1rOGNiIUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMDoyNjo0NlrOGNlktA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg0Mzg1OA==", "bodyText": "What are the keys?", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416843858", "createdAt": "2020-04-28T18:47:57Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/api/LandscapeDTOFactory.java", "diffHunk": "@@ -21,57 +24,52 @@\n \n public class LandscapeDTOFactory {\n \n-    public static LandscapeDTO from(Landscape landscape) {\n+    static final ObjectMapper mapper;\n \n-        LandscapeDTO l = new LandscapeDTO();\n-        if (landscape == null)\n-            return l;\n-\n-        l.identifier = landscape.getIdentifier();\n-        l.name = landscape.getName();\n-        l.contact = landscape.getContact();\n-        l.source = landscape.getSource();\n-        l.description = landscape.getDescription();\n-\n-        if (landscape instanceof LandscapeImpl) {\n-            l.stats = getLandscapeStats((LandscapeImpl) landscape);\n-        }\n-\n-        return l;\n+    static {\n+        mapper = new ObjectMapper();\n+        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n     }\n \n-    private static LandscapeStatistics getLandscapeStats(LandscapeImpl impl) {\n+    public static LandscapeDTO from(LandscapeImpl landscape) {\n \n-        LandscapeStatistics stats = new LandscapeStatistics();\n-        stats.items = impl.getItems().all().size();\n-        stats.groups = impl.getGroups().size();\n-\n-        List<StatusItem> collect = impl.getItems().stream()\n-                .map(item -> StatusItem.highestOf(item.getStatuses())).flatMap(Collection::stream)\n-                .collect(Collectors.toList());\n+        LandscapeDTO landscapeDTO = new LandscapeDTO();\n+        if (landscape == null)\n+            return landscapeDTO;\n \n-        if (!collect.isEmpty()) {\n-            stats.overallStatus = collect.get(0).getStatus();\n-        }\n+        landscapeDTO.identifier = landscape.getIdentifier();\n+        landscapeDTO.name = landscape.getName();\n+        landscapeDTO.contact = landscape.getContact();\n+        landscapeDTO.source = landscape.getSource();\n+        landscapeDTO.description = landscape.getDescription();\n \n-        stats.teams = impl.getItems().stream()\n-                .map(Item::getTeam)\n+        landscapeDTO.teams = landscape.getItems().stream()\n+                .map(item -> item.getLabel(Label.TEAM))\n                 .filter(s -> !StringUtils.isEmpty(s))\n                 .collect(Collectors.toSet())\n                 .toArray(String[]::new);\n \n-        if (impl.getLog() != null) {\n-            List<ProcessLog.Entry> messages = impl.getLog().getMessages();\n+        landscapeDTO.groups = getGroups(landscape);\n+        landscapeDTO.items = landscape.getItems().all();\n+        if (landscape.getLog() != null) {\n+            List<ProcessLog.Entry> messages = landscape.getLog().getMessages();\n             if (messages.size() > 0) {\n-                stats.lastUpdate = messages.get(messages.size() - 1).getDate();\n+                landscapeDTO.lastUpdate = messages.get(messages.size() - 1).getDate();\n             }\n         }\n-        return stats;\n+        return landscapeDTO;\n+    }\n+\n+    private static Map<String, Group> getGroups(LandscapeImpl landscape) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwMDI3Ng==", "bodyText": "done", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416900276", "createdAt": "2020-04-28T20:26:46Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/api/LandscapeDTOFactory.java", "diffHunk": "@@ -21,57 +24,52 @@\n \n public class LandscapeDTOFactory {\n \n-    public static LandscapeDTO from(Landscape landscape) {\n+    static final ObjectMapper mapper;\n \n-        LandscapeDTO l = new LandscapeDTO();\n-        if (landscape == null)\n-            return l;\n-\n-        l.identifier = landscape.getIdentifier();\n-        l.name = landscape.getName();\n-        l.contact = landscape.getContact();\n-        l.source = landscape.getSource();\n-        l.description = landscape.getDescription();\n-\n-        if (landscape instanceof LandscapeImpl) {\n-            l.stats = getLandscapeStats((LandscapeImpl) landscape);\n-        }\n-\n-        return l;\n+    static {\n+        mapper = new ObjectMapper();\n+        mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n     }\n \n-    private static LandscapeStatistics getLandscapeStats(LandscapeImpl impl) {\n+    public static LandscapeDTO from(LandscapeImpl landscape) {\n \n-        LandscapeStatistics stats = new LandscapeStatistics();\n-        stats.items = impl.getItems().all().size();\n-        stats.groups = impl.getGroups().size();\n-\n-        List<StatusItem> collect = impl.getItems().stream()\n-                .map(item -> StatusItem.highestOf(item.getStatuses())).flatMap(Collection::stream)\n-                .collect(Collectors.toList());\n+        LandscapeDTO landscapeDTO = new LandscapeDTO();\n+        if (landscape == null)\n+            return landscapeDTO;\n \n-        if (!collect.isEmpty()) {\n-            stats.overallStatus = collect.get(0).getStatus();\n-        }\n+        landscapeDTO.identifier = landscape.getIdentifier();\n+        landscapeDTO.name = landscape.getName();\n+        landscapeDTO.contact = landscape.getContact();\n+        landscapeDTO.source = landscape.getSource();\n+        landscapeDTO.description = landscape.getDescription();\n \n-        stats.teams = impl.getItems().stream()\n-                .map(Item::getTeam)\n+        landscapeDTO.teams = landscape.getItems().stream()\n+                .map(item -> item.getLabel(Label.TEAM))\n                 .filter(s -> !StringUtils.isEmpty(s))\n                 .collect(Collectors.toSet())\n                 .toArray(String[]::new);\n \n-        if (impl.getLog() != null) {\n-            List<ProcessLog.Entry> messages = impl.getLog().getMessages();\n+        landscapeDTO.groups = getGroups(landscape);\n+        landscapeDTO.items = landscape.getItems().all();\n+        if (landscape.getLog() != null) {\n+            List<ProcessLog.Entry> messages = landscape.getLog().getMessages();\n             if (messages.size() > 0) {\n-                stats.lastUpdate = messages.get(messages.size() - 1).getDate();\n+                landscapeDTO.lastUpdate = messages.get(messages.size() - 1).getDate();\n             }\n         }\n-        return stats;\n+        return landscapeDTO;\n+    }\n+\n+    private static Map<String, Group> getGroups(LandscapeImpl landscape) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg0Mzg1OA=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzQ4MDIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/api/dto/LandscapeDTO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODo0ODo1MlrOGNiKHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMDozMjo1OFrOGNlylg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg0NDMxOQ==", "bodyText": "You might want to user a newer Date representation.", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416844319", "createdAt": "2020-04-28T18:48:52Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/api/dto/LandscapeDTO.java", "diffHunk": "@@ -1,62 +1,49 @@\n package de.bonndan.nivio.api.dto;\n \n import com.fasterxml.jackson.annotation.JsonInclude;\n-import de.bonndan.nivio.model.GroupItem;\n-import de.bonndan.nivio.model.LandscapeConfig;\n-import de.bonndan.nivio.model.Landscape;\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n import org.springframework.hateoas.RepresentationModel;\n \n-import java.util.HashMap;\n+import java.util.Date;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n /**\n  * API representation of a landscape.\n  */\n @JsonInclude(JsonInclude.Include.NON_NULL)\n-public class LandscapeDTO extends RepresentationModel implements Landscape  {\n+public class LandscapeDTO extends RepresentationModel {\n \n     public String identifier;\n     public String name;\n     public String contact;\n     public String description;\n \n     public String source;\n-    public Map<String, GroupItem> groups;\n-    public LandscapeStatistics stats;\n+    public Map<String, Group> groups;\n+    public Set<Item> items;\n+    public Date lastUpdate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwMzgzMA==", "bodyText": "Done via merge from develop branch", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416903830", "createdAt": "2020-04-28T20:32:58Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/api/dto/LandscapeDTO.java", "diffHunk": "@@ -1,62 +1,49 @@\n package de.bonndan.nivio.api.dto;\n \n import com.fasterxml.jackson.annotation.JsonInclude;\n-import de.bonndan.nivio.model.GroupItem;\n-import de.bonndan.nivio.model.LandscapeConfig;\n-import de.bonndan.nivio.model.Landscape;\n+import de.bonndan.nivio.model.Group;\n+import de.bonndan.nivio.model.Item;\n import org.springframework.hateoas.RepresentationModel;\n \n-import java.util.HashMap;\n+import java.util.Date;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n /**\n  * API representation of a landscape.\n  */\n @JsonInclude(JsonInclude.Include.NON_NULL)\n-public class LandscapeDTO extends RepresentationModel implements Landscape  {\n+public class LandscapeDTO extends RepresentationModel {\n \n     public String identifier;\n     public String name;\n     public String contact;\n     public String description;\n \n     public String source;\n-    public Map<String, GroupItem> groups;\n-    public LandscapeStatistics stats;\n+    public Map<String, Group> groups;\n+    public Set<Item> items;\n+    public Date lastUpdate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg0NDMxOQ=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzQ5NTAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/assessment/Assessable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODo1Mjo1MFrOGNiTew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODo1Mjo1MFrOGNiTew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg0NjcxNQ==", "bodyText": "isHigherThan() \ud83d\udc4d", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416846715", "createdAt": "2020-04-28T18:52:50Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/assessment/Assessable.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package de.bonndan.nivio.assessment;\n+\n+import de.bonndan.nivio.model.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static de.bonndan.nivio.assessment.StatusValue.SUMMARY_LABEL;\n+\n+/**\n+ * Interface for components that can be assessed and can have assigned {@link StatusValue}s.\n+ *\n+ *\n+ */\n+public interface Assessable extends Component {\n+\n+    /**\n+     * Returns the highest status as summary of all {@link StatusValue} and children summaries.\n+     *\n+     * @return status value, field contains the component identifier, message is the identifier of the highest status value\n+     */\n+    default StatusValue getOverallStatus() {\n+\n+        final AtomicReference<StatusValue> summary = new AtomicReference<>();\n+        summary.set(new StatusValue(SUMMARY_LABEL, Status.UNKNOWN));\n+\n+        List<StatusValue> statusValues = new ArrayList<>(getStatusValues());\n+        getChildren().forEach(o -> statusValues.add(o.getOverallStatus()));\n+        statusValues.forEach(value -> {\n+            if (value == null) {\n+                return;\n+            }\n+\n+            if (value.getStatus().isHigherThan(summary.get().getStatus())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzUxOTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/assessment/Assessable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxODo1OToyNFrOGNiicg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwODoyODowNlrOGPhgbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1MDU0Ng==", "bodyText": "I assume this exists because of the lambda function in foreach.\nA simple for loop might be easier to use here, avoiding the atomic reference.\nAlternatively, using the stream-API might be feasible.\nSomething like:\nStream.of(\n    getStatusValues().stream(),\n    getChildren().stream().map(child -> child.getOverallStatus())\n)\n    .filter(Objects::nonNull)\n    // Sort by status value. Is there already a comparator for it?\n    .sort()\n    .findFirst()\n    .orElse(Status.UNKNOWN);", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416850546", "createdAt": "2020-04-28T18:59:24Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/assessment/Assessable.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package de.bonndan.nivio.assessment;\n+\n+import de.bonndan.nivio.model.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static de.bonndan.nivio.assessment.StatusValue.SUMMARY_LABEL;\n+\n+/**\n+ * Interface for components that can be assessed and can have assigned {@link StatusValue}s.\n+ *\n+ *\n+ */\n+public interface Assessable extends Component {\n+\n+    /**\n+     * Returns the highest status as summary of all {@link StatusValue} and children summaries.\n+     *\n+     * @return status value, field contains the component identifier, message is the identifier of the highest status value\n+     */\n+    default StatusValue getOverallStatus() {\n+\n+        final AtomicReference<StatusValue> summary = new AtomicReference<>();\n+        summary.set(new StatusValue(SUMMARY_LABEL, Status.UNKNOWN));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzMDc5OQ==", "bodyText": "done", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r418930799", "createdAt": "2020-05-02T08:28:06Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/assessment/Assessable.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package de.bonndan.nivio.assessment;\n+\n+import de.bonndan.nivio.model.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static de.bonndan.nivio.assessment.StatusValue.SUMMARY_LABEL;\n+\n+/**\n+ * Interface for components that can be assessed and can have assigned {@link StatusValue}s.\n+ *\n+ *\n+ */\n+public interface Assessable extends Component {\n+\n+    /**\n+     * Returns the highest status as summary of all {@link StatusValue} and children summaries.\n+     *\n+     * @return status value, field contains the component identifier, message is the identifier of the highest status value\n+     */\n+    default StatusValue getOverallStatus() {\n+\n+        final AtomicReference<StatusValue> summary = new AtomicReference<>();\n+        summary.set(new StatusValue(SUMMARY_LABEL, Status.UNKNOWN));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1MDU0Ng=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzUyNDA2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/assessment/Assessable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTowMDo0MlrOGNilPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMDo0NDo0M1rOGNmLaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1MTI2Mg==", "bodyText": "I think this check could also be moved to the StatusValue constructor. That would ensure that instances of that class are always valid.", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416851262", "createdAt": "2020-04-28T19:00:42Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/assessment/Assessable.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package de.bonndan.nivio.assessment;\n+\n+import de.bonndan.nivio.model.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static de.bonndan.nivio.assessment.StatusValue.SUMMARY_LABEL;\n+\n+/**\n+ * Interface for components that can be assessed and can have assigned {@link StatusValue}s.\n+ *\n+ *\n+ */\n+public interface Assessable extends Component {\n+\n+    /**\n+     * Returns the highest status as summary of all {@link StatusValue} and children summaries.\n+     *\n+     * @return status value, field contains the component identifier, message is the identifier of the highest status value\n+     */\n+    default StatusValue getOverallStatus() {\n+\n+        final AtomicReference<StatusValue> summary = new AtomicReference<>();\n+        summary.set(new StatusValue(SUMMARY_LABEL, Status.UNKNOWN));\n+\n+        List<StatusValue> statusValues = new ArrayList<>(getStatusValues());\n+        getChildren().forEach(o -> statusValues.add(o.getOverallStatus()));\n+        statusValues.forEach(value -> {\n+            if (value == null) {\n+                return;\n+            }\n+\n+            if (value.getStatus().isHigherThan(summary.get().getStatus())) {\n+                summary.set(value);\n+            }\n+        });\n+\n+        return new StatusValue(SUMMARY_LABEL + \".\" + getIdentifier(), summary.get().getStatus(), summary.get().getField());\n+    }\n+\n+    Set<StatusValue> getStatusValues();\n+\n+    default void setStatusValue(StatusValue statusValue) {\n+\n+        if (statusValue == null) {\n+            throw new IllegalArgumentException(\"Status value is null\");\n+        }\n+        if (StringUtils.isEmpty(statusValue.getField())) {\n+            throw new IllegalArgumentException(\"Status value has no field\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkxMDE4Nw==", "bodyText": "done", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416910187", "createdAt": "2020-04-28T20:44:43Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/assessment/Assessable.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package de.bonndan.nivio.assessment;\n+\n+import de.bonndan.nivio.model.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static de.bonndan.nivio.assessment.StatusValue.SUMMARY_LABEL;\n+\n+/**\n+ * Interface for components that can be assessed and can have assigned {@link StatusValue}s.\n+ *\n+ *\n+ */\n+public interface Assessable extends Component {\n+\n+    /**\n+     * Returns the highest status as summary of all {@link StatusValue} and children summaries.\n+     *\n+     * @return status value, field contains the component identifier, message is the identifier of the highest status value\n+     */\n+    default StatusValue getOverallStatus() {\n+\n+        final AtomicReference<StatusValue> summary = new AtomicReference<>();\n+        summary.set(new StatusValue(SUMMARY_LABEL, Status.UNKNOWN));\n+\n+        List<StatusValue> statusValues = new ArrayList<>(getStatusValues());\n+        getChildren().forEach(o -> statusValues.add(o.getOverallStatus()));\n+        statusValues.forEach(value -> {\n+            if (value == null) {\n+                return;\n+            }\n+\n+            if (value.getStatus().isHigherThan(summary.get().getStatus())) {\n+                summary.set(value);\n+            }\n+        });\n+\n+        return new StatusValue(SUMMARY_LABEL + \".\" + getIdentifier(), summary.get().getStatus(), summary.get().getField());\n+    }\n+\n+    Set<StatusValue> getStatusValues();\n+\n+    default void setStatusValue(StatusValue statusValue) {\n+\n+        if (statusValue == null) {\n+            throw new IllegalArgumentException(\"Status value is null\");\n+        }\n+        if (StringUtils.isEmpty(statusValue.getField())) {\n+            throw new IllegalArgumentException(\"Status value has no field\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1MTI2Mg=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzUyOTIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/assessment/Assessable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTowMTo0OFrOGNioMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTowMTo0OFrOGNioMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1MjAxOQ==", "bodyText": "\ud83d\udc4d\nI often use Objects.requireNonNull() as I am lazy. But this check provides the slightly better message.", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416852019", "createdAt": "2020-04-28T19:01:48Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/assessment/Assessable.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package de.bonndan.nivio.assessment;\n+\n+import de.bonndan.nivio.model.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static de.bonndan.nivio.assessment.StatusValue.SUMMARY_LABEL;\n+\n+/**\n+ * Interface for components that can be assessed and can have assigned {@link StatusValue}s.\n+ *\n+ *\n+ */\n+public interface Assessable extends Component {\n+\n+    /**\n+     * Returns the highest status as summary of all {@link StatusValue} and children summaries.\n+     *\n+     * @return status value, field contains the component identifier, message is the identifier of the highest status value\n+     */\n+    default StatusValue getOverallStatus() {\n+\n+        final AtomicReference<StatusValue> summary = new AtomicReference<>();\n+        summary.set(new StatusValue(SUMMARY_LABEL, Status.UNKNOWN));\n+\n+        List<StatusValue> statusValues = new ArrayList<>(getStatusValues());\n+        getChildren().forEach(o -> statusValues.add(o.getOverallStatus()));\n+        statusValues.forEach(value -> {\n+            if (value == null) {\n+                return;\n+            }\n+\n+            if (value.getStatus().isHigherThan(summary.get().getStatus())) {\n+                summary.set(value);\n+            }\n+        });\n+\n+        return new StatusValue(SUMMARY_LABEL + \".\" + getIdentifier(), summary.get().getStatus(), summary.get().getField());\n+    }\n+\n+    Set<StatusValue> getStatusValues();\n+\n+    default void setStatusValue(StatusValue statusValue) {\n+\n+        if (statusValue == null) {\n+            throw new IllegalArgumentException(\"Status value is null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzUzMTk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/assessment/Assessment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTowMjozM1rOGNip7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToyOTo1OVrOGNntgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1MjQ2Mw==", "bodyText": "A short description of the class would be helpful.", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416852463", "createdAt": "2020-04-28T19:02:33Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/assessment/Assessment.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package de.bonndan.nivio.assessment;\n+\n+import de.bonndan.nivio.assessment.kpi.KPI;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+public class Assessment {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzNTI5Ng==", "bodyText": "done", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416935296", "createdAt": "2020-04-28T21:29:59Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/assessment/Assessment.java", "diffHunk": "@@ -0,0 +1,25 @@\n+package de.bonndan.nivio.assessment;\n+\n+import de.bonndan.nivio.assessment.kpi.KPI;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+public class Assessment {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1MjQ2Mw=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzUzNTc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/assessment/Assessable.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTowMzo0M1rOGNisWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwODoyNjo1N1rOGPhgHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1MzA4MQ==", "bodyText": "This is more an \"add\" than a \"set\".", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416853081", "createdAt": "2020-04-28T19:03:43Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/assessment/Assessable.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package de.bonndan.nivio.assessment;\n+\n+import de.bonndan.nivio.model.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static de.bonndan.nivio.assessment.StatusValue.SUMMARY_LABEL;\n+\n+/**\n+ * Interface for components that can be assessed and can have assigned {@link StatusValue}s.\n+ *\n+ *\n+ */\n+public interface Assessable extends Component {\n+\n+    /**\n+     * Returns the highest status as summary of all {@link StatusValue} and children summaries.\n+     *\n+     * @return status value, field contains the component identifier, message is the identifier of the highest status value\n+     */\n+    default StatusValue getOverallStatus() {\n+\n+        final AtomicReference<StatusValue> summary = new AtomicReference<>();\n+        summary.set(new StatusValue(SUMMARY_LABEL, Status.UNKNOWN));\n+\n+        List<StatusValue> statusValues = new ArrayList<>(getStatusValues());\n+        getChildren().forEach(o -> statusValues.add(o.getOverallStatus()));\n+        statusValues.forEach(value -> {\n+            if (value == null) {\n+                return;\n+            }\n+\n+            if (value.getStatus().isHigherThan(summary.get().getStatus())) {\n+                summary.set(value);\n+            }\n+        });\n+\n+        return new StatusValue(SUMMARY_LABEL + \".\" + getIdentifier(), summary.get().getStatus(), summary.get().getField());\n+    }\n+\n+    Set<StatusValue> getStatusValues();\n+\n+    default void setStatusValue(StatusValue statusValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkxMDc2OA==", "bodyText": "The concept behind it is a distinct Set, determined by StatusValue.field", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416910768", "createdAt": "2020-04-28T20:45:50Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/assessment/Assessable.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package de.bonndan.nivio.assessment;\n+\n+import de.bonndan.nivio.model.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static de.bonndan.nivio.assessment.StatusValue.SUMMARY_LABEL;\n+\n+/**\n+ * Interface for components that can be assessed and can have assigned {@link StatusValue}s.\n+ *\n+ *\n+ */\n+public interface Assessable extends Component {\n+\n+    /**\n+     * Returns the highest status as summary of all {@link StatusValue} and children summaries.\n+     *\n+     * @return status value, field contains the component identifier, message is the identifier of the highest status value\n+     */\n+    default StatusValue getOverallStatus() {\n+\n+        final AtomicReference<StatusValue> summary = new AtomicReference<>();\n+        summary.set(new StatusValue(SUMMARY_LABEL, Status.UNKNOWN));\n+\n+        List<StatusValue> statusValues = new ArrayList<>(getStatusValues());\n+        getChildren().forEach(o -> statusValues.add(o.getOverallStatus()));\n+        statusValues.forEach(value -> {\n+            if (value == null) {\n+                return;\n+            }\n+\n+            if (value.getStatus().isHigherThan(summary.get().getStatus())) {\n+                summary.set(value);\n+            }\n+        });\n+\n+        return new StatusValue(SUMMARY_LABEL + \".\" + getIdentifier(), summary.get().getStatus(), summary.get().getField());\n+    }\n+\n+    Set<StatusValue> getStatusValues();\n+\n+    default void setStatusValue(StatusValue statusValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1MzA4MQ=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzMDcxOQ==", "bodyText": "this kind of state has been removed competely", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r418930719", "createdAt": "2020-05-02T08:26:57Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/assessment/Assessable.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package de.bonndan.nivio.assessment;\n+\n+import de.bonndan.nivio.model.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static de.bonndan.nivio.assessment.StatusValue.SUMMARY_LABEL;\n+\n+/**\n+ * Interface for components that can be assessed and can have assigned {@link StatusValue}s.\n+ *\n+ *\n+ */\n+public interface Assessable extends Component {\n+\n+    /**\n+     * Returns the highest status as summary of all {@link StatusValue} and children summaries.\n+     *\n+     * @return status value, field contains the component identifier, message is the identifier of the highest status value\n+     */\n+    default StatusValue getOverallStatus() {\n+\n+        final AtomicReference<StatusValue> summary = new AtomicReference<>();\n+        summary.set(new StatusValue(SUMMARY_LABEL, Status.UNKNOWN));\n+\n+        List<StatusValue> statusValues = new ArrayList<>(getStatusValues());\n+        getChildren().forEach(o -> statusValues.add(o.getOverallStatus()));\n+        statusValues.forEach(value -> {\n+            if (value == null) {\n+                return;\n+            }\n+\n+            if (value.getStatus().isHigherThan(summary.get().getStatus())) {\n+                summary.set(value);\n+            }\n+        });\n+\n+        return new StatusValue(SUMMARY_LABEL + \".\" + getIdentifier(), summary.get().getStatus(), summary.get().getField());\n+    }\n+\n+    Set<StatusValue> getStatusValues();\n+\n+    default void setStatusValue(StatusValue statusValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1MzA4MQ=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzUzNzkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/assessment/Assessable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTowNDoxNlrOGNitpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTowNDoxNlrOGNitpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1MzQxMg==", "bodyText": "This line assumes that the implementation provides a mutable Set.", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416853412", "createdAt": "2020-04-28T19:04:16Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/assessment/Assessable.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package de.bonndan.nivio.assessment;\n+\n+import de.bonndan.nivio.model.Component;\n+import org.springframework.util.StringUtils;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static de.bonndan.nivio.assessment.StatusValue.SUMMARY_LABEL;\n+\n+/**\n+ * Interface for components that can be assessed and can have assigned {@link StatusValue}s.\n+ *\n+ *\n+ */\n+public interface Assessable extends Component {\n+\n+    /**\n+     * Returns the highest status as summary of all {@link StatusValue} and children summaries.\n+     *\n+     * @return status value, field contains the component identifier, message is the identifier of the highest status value\n+     */\n+    default StatusValue getOverallStatus() {\n+\n+        final AtomicReference<StatusValue> summary = new AtomicReference<>();\n+        summary.set(new StatusValue(SUMMARY_LABEL, Status.UNKNOWN));\n+\n+        List<StatusValue> statusValues = new ArrayList<>(getStatusValues());\n+        getChildren().forEach(o -> statusValues.add(o.getOverallStatus()));\n+        statusValues.forEach(value -> {\n+            if (value == null) {\n+                return;\n+            }\n+\n+            if (value.getStatus().isHigherThan(summary.get().getStatus())) {\n+                summary.set(value);\n+            }\n+        });\n+\n+        return new StatusValue(SUMMARY_LABEL + \".\" + getIdentifier(), summary.get().getStatus(), summary.get().getField());\n+    }\n+\n+    Set<StatusValue> getStatusValues();\n+\n+    default void setStatusValue(StatusValue statusValue) {\n+\n+        if (statusValue == null) {\n+            throw new IllegalArgumentException(\"Status value is null\");\n+        }\n+        if (StringUtils.isEmpty(statusValue.getField())) {\n+            throw new IllegalArgumentException(\"Status value has no field\");\n+        }\n+\n+        getStatusValues().add(statusValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzU0NjczOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/assessment/kpi/CustomKPI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTowNjoyOFrOGNiy1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTowNjoyOFrOGNiy1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1NDc0Mw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416854743", "createdAt": "2020-04-28T19:06:28Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/assessment/kpi/CustomKPI.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package de.bonndan.nivio.assessment.kpi;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.assessment.Status;\n+import de.bonndan.nivio.assessment.StatusValue;\n+import de.bonndan.nivio.model.Labeled;\n+import org.apache.commons.lang3.Range;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+\n+import java.util.*;\n+import java.util.function.Function;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A configured key performance indicator related to a landscape item label.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzU1MzQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/assessment/kpi/CustomKPI.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTowODoyMlrOGNi3Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMTowNTowMFrOGNm4Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1NTgxMQ==", "bodyText": "Renaming KPI to KeyPerformanceIndicator would make 100% clear what is meant.", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416855811", "createdAt": "2020-04-28T19:08:22Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/assessment/kpi/CustomKPI.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package de.bonndan.nivio.assessment.kpi;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.assessment.Status;\n+import de.bonndan.nivio.assessment.StatusValue;\n+import de.bonndan.nivio.model.Labeled;\n+import org.apache.commons.lang3.Range;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+\n+import java.util.*;\n+import java.util.function.Function;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A configured key performance indicator related to a landscape item label.\n+ */\n+public class CustomKPI extends KPI {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyMTY5NQ==", "bodyText": "But we need to save precious bytes!", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416921695", "createdAt": "2020-04-28T21:05:00Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/assessment/kpi/CustomKPI.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package de.bonndan.nivio.assessment.kpi;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.assessment.Status;\n+import de.bonndan.nivio.assessment.StatusValue;\n+import de.bonndan.nivio.model.Labeled;\n+import org.apache.commons.lang3.Range;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+\n+import java.util.*;\n+import java.util.function.Function;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A configured key performance indicator related to a landscape item label.\n+ */\n+public class CustomKPI extends KPI {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1NTgxMQ=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzU1NzQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/assessment/kpi/CustomKPI.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTowOToyNlrOGNi5ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMDo0OTo1M1rOGNmWuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1NjQyNg==", "bodyText": "I like the Status as key.\nNevertheless, the map structure would profit from some documentation.", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416856426", "createdAt": "2020-04-28T19:09:26Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/assessment/kpi/CustomKPI.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package de.bonndan.nivio.assessment.kpi;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.assessment.Status;\n+import de.bonndan.nivio.assessment.StatusValue;\n+import de.bonndan.nivio.model.Labeled;\n+import org.apache.commons.lang3.Range;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+\n+import java.util.*;\n+import java.util.function.Function;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A configured key performance indicator related to a landscape item label.\n+ */\n+public class CustomKPI extends KPI {\n+\n+    public static final String SEPARATOR = \";\";\n+    private final Map<Status, Range<Double>> ranges;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkxMzA4MQ==", "bodyText": "done", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416913081", "createdAt": "2020-04-28T20:49:53Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/assessment/kpi/CustomKPI.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package de.bonndan.nivio.assessment.kpi;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.assessment.Status;\n+import de.bonndan.nivio.assessment.StatusValue;\n+import de.bonndan.nivio.model.Labeled;\n+import org.apache.commons.lang3.Range;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+\n+import java.util.*;\n+import java.util.function.Function;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A configured key performance indicator related to a landscape item label.\n+ */\n+public class CustomKPI extends KPI {\n+\n+    public static final String SEPARATOR = \";\";\n+    private final Map<Status, Range<Double>> ranges;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1NjQyNg=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzU3Njc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/assessment/kpi/CustomKPI.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOToxNDo1MlrOGNjFYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMTowMjo1MlrOGNmz3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1OTQ5MA==", "bodyText": "Is there a valid case where it is ok to ignore this exception? Doesn't it hide more errors?", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416859490", "createdAt": "2020-04-28T19:14:52Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/assessment/kpi/CustomKPI.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package de.bonndan.nivio.assessment.kpi;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.assessment.Status;\n+import de.bonndan.nivio.assessment.StatusValue;\n+import de.bonndan.nivio.model.Labeled;\n+import org.apache.commons.lang3.Range;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+\n+import java.util.*;\n+import java.util.function.Function;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A configured key performance indicator related to a landscape item label.\n+ */\n+public class CustomKPI extends KPI {\n+\n+    public static final String SEPARATOR = \";\";\n+    private final Map<Status, Range<Double>> ranges;\n+    private final Map<Status, List<Function<String, Boolean>>> matches = new HashMap<>();\n+    private final String label;\n+\n+    /**\n+     * @param label        the label which is evaluated for status\n+     * @param messageLabel the label which is used as optional message\n+     */\n+    @JsonCreator\n+    public CustomKPI(@NonNull @JsonProperty(value = \"label\", required = true) String label,\n+                     @Nullable @JsonProperty(\"messageLabel\") String messageLabel,\n+                     @Nullable @JsonProperty(\"ranges\") Map<Status, String> ranges,\n+                     @Nullable @JsonProperty(\"matches\") Map<Status, String> matches\n+    ) {\n+        super(component -> {\n+                    if (component instanceof Labeled) {\n+                        return ((Labeled) component).getLabel(label);\n+                    }\n+                    throw new RuntimeException(\"Custom KPIs can only evaluate labels (custom fields).\");\n+                },\n+                component -> {\n+                    if (component instanceof Labeled) {\n+                        return ((Labeled) component).getLabel(messageLabel);\n+                    }\n+                    return null;\n+                });\n+\n+        this.label = label;\n+        this.ranges = asRanges(ranges);\n+        addSpecs(matches);\n+    }\n+\n+    @Override\n+    protected List<StatusValue> getStatusValues(String value, String message) {\n+\n+        List<StatusValue> values = new ArrayList<>();\n+        for (Status status : Status.values()) {\n+            Optional<Status> statusByRange = getStatusByRange(value);\n+            if (statusByRange.isPresent()) {\n+                values.add(new StatusValue(label, statusByRange.get(), message));\n+                break;\n+            }\n+\n+            if (!matches.containsKey(status)) {\n+                continue;\n+            }\n+            boolean anyMatch = matches.get(status).stream().anyMatch(stringBooleanFunction -> stringBooleanFunction.apply(value));\n+            if (anyMatch) {\n+                values.add(new StatusValue(label, status, message));\n+                break;\n+            }\n+        }\n+\n+        return values;\n+    }\n+\n+    private Map<Status, Range<Double>> asRanges(Map<Status, String> ranges) {\n+        Map<Status, Range<Double>> rangeMap = new HashMap<>();\n+        if (ranges == null) {\n+            return rangeMap;\n+        }\n+\n+        ranges.forEach((status, s) -> {\n+            String[] split;\n+            if (s.contains(SEPARATOR)) {\n+                split = s.split(SEPARATOR);\n+            } else {\n+                split = new String[2];\n+                split[0] = s;\n+                split[1] = s;\n+            }\n+            try {\n+                rangeMap.put(status, Range.between(Double.valueOf(split[0]), Double.valueOf(split[1])));\n+            } catch (NumberFormatException e) {\n+                throw new ProcessingException(\"Failed to parse KPI range: \" + s, e);\n+            }\n+        });\n+        return rangeMap;\n+    }\n+\n+    private Optional<Status> getStatusByRange(String value) {\n+        if (value == null) {\n+            return Optional.empty();\n+        }\n+\n+        double d;\n+        try {\n+            d = Double.parseDouble(value);\n+        } catch (NumberFormatException ignored) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyMDU0MQ==", "bodyText": "We do not know the value to assess, which can be anything and can be supplied even by a third party system. So first we try parsing numbers to Double, and it that fails we assume it is a string and is compared against the regex matchers.\nOne improvement could be throwing an exception if only numeric ranges are defined for the KPI, but then we'd have to handle the exception, and a wrong value from a third party system is not necessarily exceptional.", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416920541", "createdAt": "2020-04-28T21:02:52Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/assessment/kpi/CustomKPI.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package de.bonndan.nivio.assessment.kpi;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.assessment.Status;\n+import de.bonndan.nivio.assessment.StatusValue;\n+import de.bonndan.nivio.model.Labeled;\n+import org.apache.commons.lang3.Range;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+\n+import java.util.*;\n+import java.util.function.Function;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A configured key performance indicator related to a landscape item label.\n+ */\n+public class CustomKPI extends KPI {\n+\n+    public static final String SEPARATOR = \";\";\n+    private final Map<Status, Range<Double>> ranges;\n+    private final Map<Status, List<Function<String, Boolean>>> matches = new HashMap<>();\n+    private final String label;\n+\n+    /**\n+     * @param label        the label which is evaluated for status\n+     * @param messageLabel the label which is used as optional message\n+     */\n+    @JsonCreator\n+    public CustomKPI(@NonNull @JsonProperty(value = \"label\", required = true) String label,\n+                     @Nullable @JsonProperty(\"messageLabel\") String messageLabel,\n+                     @Nullable @JsonProperty(\"ranges\") Map<Status, String> ranges,\n+                     @Nullable @JsonProperty(\"matches\") Map<Status, String> matches\n+    ) {\n+        super(component -> {\n+                    if (component instanceof Labeled) {\n+                        return ((Labeled) component).getLabel(label);\n+                    }\n+                    throw new RuntimeException(\"Custom KPIs can only evaluate labels (custom fields).\");\n+                },\n+                component -> {\n+                    if (component instanceof Labeled) {\n+                        return ((Labeled) component).getLabel(messageLabel);\n+                    }\n+                    return null;\n+                });\n+\n+        this.label = label;\n+        this.ranges = asRanges(ranges);\n+        addSpecs(matches);\n+    }\n+\n+    @Override\n+    protected List<StatusValue> getStatusValues(String value, String message) {\n+\n+        List<StatusValue> values = new ArrayList<>();\n+        for (Status status : Status.values()) {\n+            Optional<Status> statusByRange = getStatusByRange(value);\n+            if (statusByRange.isPresent()) {\n+                values.add(new StatusValue(label, statusByRange.get(), message));\n+                break;\n+            }\n+\n+            if (!matches.containsKey(status)) {\n+                continue;\n+            }\n+            boolean anyMatch = matches.get(status).stream().anyMatch(stringBooleanFunction -> stringBooleanFunction.apply(value));\n+            if (anyMatch) {\n+                values.add(new StatusValue(label, status, message));\n+                break;\n+            }\n+        }\n+\n+        return values;\n+    }\n+\n+    private Map<Status, Range<Double>> asRanges(Map<Status, String> ranges) {\n+        Map<Status, Range<Double>> rangeMap = new HashMap<>();\n+        if (ranges == null) {\n+            return rangeMap;\n+        }\n+\n+        ranges.forEach((status, s) -> {\n+            String[] split;\n+            if (s.contains(SEPARATOR)) {\n+                split = s.split(SEPARATOR);\n+            } else {\n+                split = new String[2];\n+                split[0] = s;\n+                split[1] = s;\n+            }\n+            try {\n+                rangeMap.put(status, Range.between(Double.valueOf(split[0]), Double.valueOf(split[1])));\n+            } catch (NumberFormatException e) {\n+                throw new ProcessingException(\"Failed to parse KPI range: \" + s, e);\n+            }\n+        });\n+        return rangeMap;\n+    }\n+\n+    private Optional<Status> getStatusByRange(String value) {\n+        if (value == null) {\n+            return Optional.empty();\n+        }\n+\n+        double d;\n+        try {\n+            d = Double.parseDouble(value);\n+        } catch (NumberFormatException ignored) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg1OTQ5MA=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzU4MDQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/assessment/kpi/CustomKPI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOToxNTo1N1rOGNjHtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOToxNTo1N1rOGNjHtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2MDA4NA==", "bodyText": "\ud83d\udc4d  for @Nullable", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416860084", "createdAt": "2020-04-28T19:15:57Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/assessment/kpi/CustomKPI.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package de.bonndan.nivio.assessment.kpi;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.assessment.Status;\n+import de.bonndan.nivio.assessment.StatusValue;\n+import de.bonndan.nivio.model.Labeled;\n+import org.apache.commons.lang3.Range;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+\n+import java.util.*;\n+import java.util.function.Function;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A configured key performance indicator related to a landscape item label.\n+ */\n+public class CustomKPI extends KPI {\n+\n+    public static final String SEPARATOR = \";\";\n+    private final Map<Status, Range<Double>> ranges;\n+    private final Map<Status, List<Function<String, Boolean>>> matches = new HashMap<>();\n+    private final String label;\n+\n+    /**\n+     * @param label        the label which is evaluated for status\n+     * @param messageLabel the label which is used as optional message\n+     */\n+    @JsonCreator\n+    public CustomKPI(@NonNull @JsonProperty(value = \"label\", required = true) String label,\n+                     @Nullable @JsonProperty(\"messageLabel\") String messageLabel,\n+                     @Nullable @JsonProperty(\"ranges\") Map<Status, String> ranges,\n+                     @Nullable @JsonProperty(\"matches\") Map<Status, String> matches\n+    ) {\n+        super(component -> {\n+                    if (component instanceof Labeled) {\n+                        return ((Labeled) component).getLabel(label);\n+                    }\n+                    throw new RuntimeException(\"Custom KPIs can only evaluate labels (custom fields).\");\n+                },\n+                component -> {\n+                    if (component instanceof Labeled) {\n+                        return ((Labeled) component).getLabel(messageLabel);\n+                    }\n+                    return null;\n+                });\n+\n+        this.label = label;\n+        this.ranges = asRanges(ranges);\n+        addSpecs(matches);\n+    }\n+\n+    @Override\n+    protected List<StatusValue> getStatusValues(String value, String message) {\n+\n+        List<StatusValue> values = new ArrayList<>();\n+        for (Status status : Status.values()) {\n+            Optional<Status> statusByRange = getStatusByRange(value);\n+            if (statusByRange.isPresent()) {\n+                values.add(new StatusValue(label, statusByRange.get(), message));\n+                break;\n+            }\n+\n+            if (!matches.containsKey(status)) {\n+                continue;\n+            }\n+            boolean anyMatch = matches.get(status).stream().anyMatch(stringBooleanFunction -> stringBooleanFunction.apply(value));\n+            if (anyMatch) {\n+                values.add(new StatusValue(label, status, message));\n+                break;\n+            }\n+        }\n+\n+        return values;\n+    }\n+\n+    private Map<Status, Range<Double>> asRanges(Map<Status, String> ranges) {\n+        Map<Status, Range<Double>> rangeMap = new HashMap<>();\n+        if (ranges == null) {\n+            return rangeMap;\n+        }\n+\n+        ranges.forEach((status, s) -> {\n+            String[] split;\n+            if (s.contains(SEPARATOR)) {\n+                split = s.split(SEPARATOR);\n+            } else {\n+                split = new String[2];\n+                split[0] = s;\n+                split[1] = s;\n+            }\n+            try {\n+                rangeMap.put(status, Range.between(Double.valueOf(split[0]), Double.valueOf(split[1])));\n+            } catch (NumberFormatException e) {\n+                throw new ProcessingException(\"Failed to parse KPI range: \" + s, e);\n+            }\n+        });\n+        return rangeMap;\n+    }\n+\n+    private Optional<Status> getStatusByRange(String value) {\n+        if (value == null) {\n+            return Optional.empty();\n+        }\n+\n+        double d;\n+        try {\n+            d = Double.parseDouble(value);\n+        } catch (NumberFormatException ignored) {\n+            return Optional.empty();\n+        }\n+        return ranges.entrySet().stream()\n+                .filter(entry -> entry.getValue().contains(d))\n+                .findFirst()\n+                .map(Map.Entry::getKey);\n+    }\n+\n+    private void addSpecs(@Nullable Map<Status, String> statusPatterns) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzU5MzMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/assessment/kpi/CustomKPI.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOToxOToxNlrOGNjPfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToyNjo1OVrOGNnnUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2MjA3OA==", "bodyText": "Can we catch a more specific exception here? Can we check before if the pattern can be compiled?\nIs the fallback really the desired behavior? What if I supplied an invalid regex (because of a missing brace etc.), but never intended to apply the contains behavior?", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416862078", "createdAt": "2020-04-28T19:19:16Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/assessment/kpi/CustomKPI.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package de.bonndan.nivio.assessment.kpi;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.assessment.Status;\n+import de.bonndan.nivio.assessment.StatusValue;\n+import de.bonndan.nivio.model.Labeled;\n+import org.apache.commons.lang3.Range;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+\n+import java.util.*;\n+import java.util.function.Function;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A configured key performance indicator related to a landscape item label.\n+ */\n+public class CustomKPI extends KPI {\n+\n+    public static final String SEPARATOR = \";\";\n+    private final Map<Status, Range<Double>> ranges;\n+    private final Map<Status, List<Function<String, Boolean>>> matches = new HashMap<>();\n+    private final String label;\n+\n+    /**\n+     * @param label        the label which is evaluated for status\n+     * @param messageLabel the label which is used as optional message\n+     */\n+    @JsonCreator\n+    public CustomKPI(@NonNull @JsonProperty(value = \"label\", required = true) String label,\n+                     @Nullable @JsonProperty(\"messageLabel\") String messageLabel,\n+                     @Nullable @JsonProperty(\"ranges\") Map<Status, String> ranges,\n+                     @Nullable @JsonProperty(\"matches\") Map<Status, String> matches\n+    ) {\n+        super(component -> {\n+                    if (component instanceof Labeled) {\n+                        return ((Labeled) component).getLabel(label);\n+                    }\n+                    throw new RuntimeException(\"Custom KPIs can only evaluate labels (custom fields).\");\n+                },\n+                component -> {\n+                    if (component instanceof Labeled) {\n+                        return ((Labeled) component).getLabel(messageLabel);\n+                    }\n+                    return null;\n+                });\n+\n+        this.label = label;\n+        this.ranges = asRanges(ranges);\n+        addSpecs(matches);\n+    }\n+\n+    @Override\n+    protected List<StatusValue> getStatusValues(String value, String message) {\n+\n+        List<StatusValue> values = new ArrayList<>();\n+        for (Status status : Status.values()) {\n+            Optional<Status> statusByRange = getStatusByRange(value);\n+            if (statusByRange.isPresent()) {\n+                values.add(new StatusValue(label, statusByRange.get(), message));\n+                break;\n+            }\n+\n+            if (!matches.containsKey(status)) {\n+                continue;\n+            }\n+            boolean anyMatch = matches.get(status).stream().anyMatch(stringBooleanFunction -> stringBooleanFunction.apply(value));\n+            if (anyMatch) {\n+                values.add(new StatusValue(label, status, message));\n+                break;\n+            }\n+        }\n+\n+        return values;\n+    }\n+\n+    private Map<Status, Range<Double>> asRanges(Map<Status, String> ranges) {\n+        Map<Status, Range<Double>> rangeMap = new HashMap<>();\n+        if (ranges == null) {\n+            return rangeMap;\n+        }\n+\n+        ranges.forEach((status, s) -> {\n+            String[] split;\n+            if (s.contains(SEPARATOR)) {\n+                split = s.split(SEPARATOR);\n+            } else {\n+                split = new String[2];\n+                split[0] = s;\n+                split[1] = s;\n+            }\n+            try {\n+                rangeMap.put(status, Range.between(Double.valueOf(split[0]), Double.valueOf(split[1])));\n+            } catch (NumberFormatException e) {\n+                throw new ProcessingException(\"Failed to parse KPI range: \" + s, e);\n+            }\n+        });\n+        return rangeMap;\n+    }\n+\n+    private Optional<Status> getStatusByRange(String value) {\n+        if (value == null) {\n+            return Optional.empty();\n+        }\n+\n+        double d;\n+        try {\n+            d = Double.parseDouble(value);\n+        } catch (NumberFormatException ignored) {\n+            return Optional.empty();\n+        }\n+        return ranges.entrySet().stream()\n+                .filter(entry -> entry.getValue().contains(d))\n+                .findFirst()\n+                .map(Map.Entry::getKey);\n+    }\n+\n+    private void addSpecs(@Nullable Map<Status, String> statusPatterns) {\n+        if (statusPatterns == null)\n+            return;\n+\n+        statusPatterns.forEach((status, strings) -> {\n+            List<Function<String, Boolean>> specs = Arrays.stream(strings.split(SEPARATOR)).map(s -> {\n+                try {\n+                    Pattern p = Pattern.compile(s, Pattern.CASE_INSENSITIVE);\n+                    return (Function<String, Boolean>) s1 -> p.matcher(s1).matches();\n+                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzMzcxNQ==", "bodyText": "What would you suggest? Simply warn the user that the regex is wrong?", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416933715", "createdAt": "2020-04-28T21:26:59Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/assessment/kpi/CustomKPI.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package de.bonndan.nivio.assessment.kpi;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.assessment.Status;\n+import de.bonndan.nivio.assessment.StatusValue;\n+import de.bonndan.nivio.model.Labeled;\n+import org.apache.commons.lang3.Range;\n+import org.springframework.lang.NonNull;\n+import org.springframework.lang.Nullable;\n+\n+import java.util.*;\n+import java.util.function.Function;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A configured key performance indicator related to a landscape item label.\n+ */\n+public class CustomKPI extends KPI {\n+\n+    public static final String SEPARATOR = \";\";\n+    private final Map<Status, Range<Double>> ranges;\n+    private final Map<Status, List<Function<String, Boolean>>> matches = new HashMap<>();\n+    private final String label;\n+\n+    /**\n+     * @param label        the label which is evaluated for status\n+     * @param messageLabel the label which is used as optional message\n+     */\n+    @JsonCreator\n+    public CustomKPI(@NonNull @JsonProperty(value = \"label\", required = true) String label,\n+                     @Nullable @JsonProperty(\"messageLabel\") String messageLabel,\n+                     @Nullable @JsonProperty(\"ranges\") Map<Status, String> ranges,\n+                     @Nullable @JsonProperty(\"matches\") Map<Status, String> matches\n+    ) {\n+        super(component -> {\n+                    if (component instanceof Labeled) {\n+                        return ((Labeled) component).getLabel(label);\n+                    }\n+                    throw new RuntimeException(\"Custom KPIs can only evaluate labels (custom fields).\");\n+                },\n+                component -> {\n+                    if (component instanceof Labeled) {\n+                        return ((Labeled) component).getLabel(messageLabel);\n+                    }\n+                    return null;\n+                });\n+\n+        this.label = label;\n+        this.ranges = asRanges(ranges);\n+        addSpecs(matches);\n+    }\n+\n+    @Override\n+    protected List<StatusValue> getStatusValues(String value, String message) {\n+\n+        List<StatusValue> values = new ArrayList<>();\n+        for (Status status : Status.values()) {\n+            Optional<Status> statusByRange = getStatusByRange(value);\n+            if (statusByRange.isPresent()) {\n+                values.add(new StatusValue(label, statusByRange.get(), message));\n+                break;\n+            }\n+\n+            if (!matches.containsKey(status)) {\n+                continue;\n+            }\n+            boolean anyMatch = matches.get(status).stream().anyMatch(stringBooleanFunction -> stringBooleanFunction.apply(value));\n+            if (anyMatch) {\n+                values.add(new StatusValue(label, status, message));\n+                break;\n+            }\n+        }\n+\n+        return values;\n+    }\n+\n+    private Map<Status, Range<Double>> asRanges(Map<Status, String> ranges) {\n+        Map<Status, Range<Double>> rangeMap = new HashMap<>();\n+        if (ranges == null) {\n+            return rangeMap;\n+        }\n+\n+        ranges.forEach((status, s) -> {\n+            String[] split;\n+            if (s.contains(SEPARATOR)) {\n+                split = s.split(SEPARATOR);\n+            } else {\n+                split = new String[2];\n+                split[0] = s;\n+                split[1] = s;\n+            }\n+            try {\n+                rangeMap.put(status, Range.between(Double.valueOf(split[0]), Double.valueOf(split[1])));\n+            } catch (NumberFormatException e) {\n+                throw new ProcessingException(\"Failed to parse KPI range: \" + s, e);\n+            }\n+        });\n+        return rangeMap;\n+    }\n+\n+    private Optional<Status> getStatusByRange(String value) {\n+        if (value == null) {\n+            return Optional.empty();\n+        }\n+\n+        double d;\n+        try {\n+            d = Double.parseDouble(value);\n+        } catch (NumberFormatException ignored) {\n+            return Optional.empty();\n+        }\n+        return ranges.entrySet().stream()\n+                .filter(entry -> entry.getValue().contains(d))\n+                .findFirst()\n+                .map(Map.Entry::getKey);\n+    }\n+\n+    private void addSpecs(@Nullable Map<Status, String> statusPatterns) {\n+        if (statusPatterns == null)\n+            return;\n+\n+        statusPatterns.forEach((status, strings) -> {\n+            List<Function<String, Boolean>> specs = Arrays.stream(strings.split(SEPARATOR)).map(s -> {\n+                try {\n+                    Pattern p = Pattern.compile(s, Pattern.CASE_INSENSITIVE);\n+                    return (Function<String, Boolean>) s1 -> p.matcher(s1).matches();\n+                } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2MjA3OA=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzYwMzkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOToyMTo1MFrOGNjVyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxMTo1NFrOGNnHhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2MzY4OA==", "bodyText": "You can pass the exception as last parameter to ensure that it is not completely lost.", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416863688", "createdAt": "2020-04-28T19:21:50Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java", "diffHunk": "@@ -79,9 +81,15 @@ private void setValue(ItemDescription item, String name, String value) {\n                 return;\n             }\n \n-            myAccessor.setPropertyValue(name, value.trim());\n+            if (name.startsWith(Linked.LINK_LABEL_PREFIX)) {\n+                item.setLink(name.replace(Linked.LINK_LABEL_PREFIX, \"\"), new URL(value));\n+            } else {\n+                myAccessor.setPropertyValue(name, value.trim());\n+            }\n         } catch (NotWritablePropertyException e) {\n             logger.warn(\"Failed to write field '\" + name + \"' via label\");\n+        } catch (MalformedURLException e) {\n+            logger.warn(\"Failed to add link '\" + name + \"' via label because of malformed URL \" + value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyNTU3NQ==", "bodyText": "This is nivio's special Logger decorator, meaning everything logged here lands in the GUI", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416925575", "createdAt": "2020-04-28T21:11:54Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java", "diffHunk": "@@ -79,9 +81,15 @@ private void setValue(ItemDescription item, String name, String value) {\n                 return;\n             }\n \n-            myAccessor.setPropertyValue(name, value.trim());\n+            if (name.startsWith(Linked.LINK_LABEL_PREFIX)) {\n+                item.setLink(name.replace(Linked.LINK_LABEL_PREFIX, \"\"), new URL(value));\n+            } else {\n+                myAccessor.setPropertyValue(name, value.trim());\n+            }\n         } catch (NotWritablePropertyException e) {\n             logger.warn(\"Failed to write field '\" + name + \"' via label\");\n+        } catch (MalformedURLException e) {\n+            logger.warn(\"Failed to add link '\" + name + \"' via label because of malformed URL \" + value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2MzY4OA=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzYxNzg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOToyNTo1OVrOGNjetQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMDo1MjowN1rOGNmb9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2NTk3Mw==", "bodyText": "Is it possible to avoid the checks and casts by overloading the method?", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416865973", "createdAt": "2020-04-28T19:25:59Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java", "diffHunk": "@@ -397,15 +230,59 @@ public String toString() {\n         return FullyQualifiedIdentifier.build(environment, group, identifier).toString();\n     }\n \n+    /**\n+     * Legacy setter for {@link StatusValue}.\n+     *\n+     * @param statuses\n+     */\n+    @Deprecated\n+    public void setStatuses(List<LinkedHashMap<String, String>> statuses) {\n+        statuses.forEach(map -> {\n+            String key = map.get(\"label\");\n+            if (key != null) {\n+                String value = map.get(\"status\");\n+                String message = map.get(\"message\");\n+                setLabel(Label.PREFIX_STATUS + Label.DELIMITER + key + Label.DELIMITER + \"status\", value);\n+                setLabel(Label.PREFIX_STATUS + Label.DELIMITER + key + Label.DELIMITER + \"message\", message);\n+            }\n+        });\n+    }\n+\n     @Override\n     @JsonAnyGetter\n     public String getLabel(String key) {\n         return labels.get(key);\n     }\n \n     @Override\n-    @JsonAnySetter\n     public void setLabel(String key, String value) {\n-        labels.putIfAbsent(key, value);\n+        labels.put(key, value);\n+    }\n+\n+    @JsonAnySetter\n+    public void setLabel(String key, Object value) {\n+        if (value instanceof String) {\n+            labels.put(key.toLowerCase(), (String) value);\n+            return;\n+        }\n+        if (value instanceof String[]) {\n+            Arrays.stream(((String[]) value)).forEach(s -> setPrefixed(key, s));\n+            return;\n+        }\n+\n+        if (value instanceof List) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 321}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkxNDQyMw==", "bodyText": "This JsonAnySetter is a last resort anways. See also https://stackoverflow.com/questions/22501844/multiple-any-setters-using-jackson\nBut yes, that would be better", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416914423", "createdAt": "2020-04-28T20:52:07Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java", "diffHunk": "@@ -397,15 +230,59 @@ public String toString() {\n         return FullyQualifiedIdentifier.build(environment, group, identifier).toString();\n     }\n \n+    /**\n+     * Legacy setter for {@link StatusValue}.\n+     *\n+     * @param statuses\n+     */\n+    @Deprecated\n+    public void setStatuses(List<LinkedHashMap<String, String>> statuses) {\n+        statuses.forEach(map -> {\n+            String key = map.get(\"label\");\n+            if (key != null) {\n+                String value = map.get(\"status\");\n+                String message = map.get(\"message\");\n+                setLabel(Label.PREFIX_STATUS + Label.DELIMITER + key + Label.DELIMITER + \"status\", value);\n+                setLabel(Label.PREFIX_STATUS + Label.DELIMITER + key + Label.DELIMITER + \"message\", message);\n+            }\n+        });\n+    }\n+\n     @Override\n     @JsonAnyGetter\n     public String getLabel(String key) {\n         return labels.get(key);\n     }\n \n     @Override\n-    @JsonAnySetter\n     public void setLabel(String key, String value) {\n-        labels.putIfAbsent(key, value);\n+        labels.put(key, value);\n+    }\n+\n+    @JsonAnySetter\n+    public void setLabel(String key, Object value) {\n+        if (value instanceof String) {\n+            labels.put(key.toLowerCase(), (String) value);\n+            return;\n+        }\n+        if (value instanceof String[]) {\n+            Arrays.stream(((String[]) value)).forEach(s -> setPrefixed(key, s));\n+            return;\n+        }\n+\n+        if (value instanceof List) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2NTk3Mw=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 321}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzYzMjI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/model/Labeled.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTozMDowMFrOGNjnoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMDozMjowNFrOGNlwtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2ODI1Nw==", "bodyText": "Why are keys and values not passed as Map? Because it looks as if that is expected.", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416868257", "createdAt": "2020-04-28T19:30:00Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/model/Labeled.java", "diffHunk": "@@ -1,13 +1,149 @@\n package de.bonndan.nivio.model;\n \n+import org.springframework.util.StringUtils;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n /**\n  * Anything that has labels (key-value).\n- *\n- *\n  */\n public interface Labeled {\n \n+    String PREFIX_VALUE_DELIMITER = \";\";\n+\n+    default String getLabel(Label key) {\n+        return getLabel(key.name().toLowerCase());\n+    }\n+\n     String getLabel(String key);\n \n+    /**\n+     * Returns all label with values having the given prefix.\n+     */\n+    default Map<String, String> getLabels(String prefix) {\n+        return Labeled.withPrefix(prefix, getLabels());\n+    }\n+\n+    /**\n+     * Returns all labels with the given prefix.\n+     *\n+     */\n+    default Map<String, String> getLabels(Label prefix) {\n+        return getLabels(prefix.name().toLowerCase());\n+    }\n+\n+    default void setLabels(String prefix, String[] keys, String[] values) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkwMzM0OA==", "bodyText": "Method has been removed.", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416903348", "createdAt": "2020-04-28T20:32:04Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/model/Labeled.java", "diffHunk": "@@ -1,13 +1,149 @@\n package de.bonndan.nivio.model;\n \n+import org.springframework.util.StringUtils;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n /**\n  * Anything that has labels (key-value).\n- *\n- *\n  */\n public interface Labeled {\n \n+    String PREFIX_VALUE_DELIMITER = \";\";\n+\n+    default String getLabel(Label key) {\n+        return getLabel(key.name().toLowerCase());\n+    }\n+\n     String getLabel(String key);\n \n+    /**\n+     * Returns all label with values having the given prefix.\n+     */\n+    default Map<String, String> getLabels(String prefix) {\n+        return Labeled.withPrefix(prefix, getLabels());\n+    }\n+\n+    /**\n+     * Returns all labels with the given prefix.\n+     *\n+     */\n+    default Map<String, String> getLabels(Label prefix) {\n+        return getLabels(prefix.name().toLowerCase());\n+    }\n+\n+    default void setLabels(String prefix, String[] keys, String[] values) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2ODI1Nw=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzYzOTU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/bonndan/nivio/model/RelationType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTozMjowMlrOGNjsNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToxOTozM1rOGNnXUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2OTQzMA==", "bodyText": "Where is T used?", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416869430", "createdAt": "2020-04-28T19:32:02Z", "author": {"login": "Matthimatiker"}, "path": "src/main/java/de/bonndan/nivio/model/RelationType.java", "diffHunk": "@@ -20,4 +24,13 @@ public static RelationType from(String relationType) {\n         return DATAFLOW;\n     }\n \n+    /**\n+     * Filters a list of relations for equal type.\n+     *\n+     * @param all all relations\n+     * @return filtered subset\n+     */\n+    public <T> List<RelationItem> filter(Collection<? extends RelationItem> all) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkyOTYxNg==", "bodyText": "removed", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416929616", "createdAt": "2020-04-28T21:19:33Z", "author": {"login": "bonndan"}, "path": "src/main/java/de/bonndan/nivio/model/RelationType.java", "diffHunk": "@@ -20,4 +24,13 @@ public static RelationType from(String relationType) {\n         return DATAFLOW;\n     }\n \n+    /**\n+     * Filters a list of relations for equal type.\n+     *\n+     * @param all all relations\n+     * @return filtered subset\n+     */\n+    public <T> List<RelationItem> filter(Collection<? extends RelationItem> all) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg2OTQzMA=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzY0NDc5OnYy", "diffSide": "RIGHT", "path": "src/test/java/de/bonndan/nivio/assessment/AssessableTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTozMzozNlrOGNjvlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTozMzozNlrOGNjvlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg3MDI5Mw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416870293", "createdAt": "2020-04-28T19:33:36Z", "author": {"login": "Matthimatiker"}, "path": "src/test/java/de/bonndan/nivio/assessment/AssessableTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+package de.bonndan.nivio.assessment;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+class AssessableTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzY1MDMxOnYy", "diffSide": "RIGHT", "path": "src/test/java/de/bonndan/nivio/assessment/StatusValueTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTozNToxN1rOGNjzLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToyNToxM1rOGNnjGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg3MTIxMw==", "bodyText": "Did not notice that before, but I would expect highestOf() to return a single item (or an Optional of an item).", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416871213", "createdAt": "2020-04-28T19:35:17Z", "author": {"login": "Matthimatiker"}, "path": "src/test/java/de/bonndan/nivio/assessment/StatusValueTest.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package de.bonndan.nivio.assessment;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class StatusValueTest {\n+\n+    @Test\n+    void highestOf() {\n+        List<StatusValue> statusValueSet = new ArrayList<>();\n+        statusValueSet.add(new StatusValue(\"foo\", Status.GREEN));\n+        statusValueSet.add(new StatusValue(\"bar\", Status.ORANGE));\n+        statusValueSet.add(new StatusValue(\"baz\", Status.ORANGE));\n+\n+        List<StatusValue> highest = StatusValue.highestOf(statusValueSet);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzMjYzNQ==", "bodyText": "No, for instance a landscape item could have Status.RED concerning security AND health, and neither of them is higher than the other. The method is unused yet, however.", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416932635", "createdAt": "2020-04-28T21:25:13Z", "author": {"login": "bonndan"}, "path": "src/test/java/de/bonndan/nivio/assessment/StatusValueTest.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package de.bonndan.nivio.assessment;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class StatusValueTest {\n+\n+    @Test\n+    void highestOf() {\n+        List<StatusValue> statusValueSet = new ArrayList<>();\n+        statusValueSet.add(new StatusValue(\"foo\", Status.GREEN));\n+        statusValueSet.add(new StatusValue(\"bar\", Status.ORANGE));\n+        statusValueSet.add(new StatusValue(\"baz\", Status.ORANGE));\n+\n+        List<StatusValue> highest = StatusValue.highestOf(statusValueSet);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg3MTIxMw=="}, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MzY1NTM1OnYy", "diffSide": "RIGHT", "path": "src/test/resources/example/dedica.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTozNjozNVrOGNj2Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxOTozNjozNVrOGNj2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjg3MTk5MQ==", "bodyText": "Cool :-)", "url": "https://github.com/dedica-team/nivio/pull/121#discussion_r416871991", "createdAt": "2020-04-28T19:36:35Z", "author": {"login": "Matthimatiker"}, "path": "src/test/resources/example/dedica.yml", "diffHunk": "@@ -0,0 +1,54 @@\n+identifier: dedica.team", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33701d35e90619f0df8b0eb68408b2f6bc9e4aeb"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3994, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}