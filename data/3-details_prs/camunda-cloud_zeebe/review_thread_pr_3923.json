{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NzAyNDU3", "number": 3923, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMjowMDo0MlrODjDLLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDoyNzoxNFrODl0J7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDc4NzY3OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/RaftMessagingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMjowMDo0MlrOFuo4-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzowMDoyMVrOFuqkTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0ODc2Mw==", "bodyText": "Could we remove the Raft prefix, since it is not really related to that right?", "url": "https://github.com/camunda-cloud/zeebe/pull/3923#discussion_r384448763", "createdAt": "2020-02-26T12:00:42Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/RaftMessagingService.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions;\n+\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+\n+/** Abstracts away messaging to other members of a given Raft - add operations as needed. */\n+public interface RaftMessagingService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1cbeba2b6a6802360ea607151465004d4089763"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ3NjIzOA==", "bodyText": "I see what you mean - it's more the partition messaging service, I guess. Will do", "url": "https://github.com/camunda-cloud/zeebe/pull/3923#discussion_r384476238", "createdAt": "2020-02-26T13:00:21Z", "author": {"login": "npepinpe"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/RaftMessagingService.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions;\n+\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+\n+/** Abstracts away messaging to other members of a given Raft - add operations as needed. */\n+public interface RaftMessagingService {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0ODc2Mw=="}, "originalCommit": {"oid": "c1cbeba2b6a6802360ea607151465004d4089763"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MDc4OTI3OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/RaftMessagingService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMjowMToxMlrOFuo5-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzoxMzowNlrOFuq9Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0OTAxNg==", "bodyText": "just member in the cluster - whether it is a raft member is more implementation specific or?", "url": "https://github.com/camunda-cloud/zeebe/pull/3923#discussion_r384449016", "createdAt": "2020-02-26T12:01:12Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/RaftMessagingService.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions;\n+\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+\n+/** Abstracts away messaging to other members of a given Raft - add operations as needed. */\n+public interface RaftMessagingService {\n+\n+  /**\n+   * Subscribes to a given subject - if another Raft member sends a message on this topic, the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1cbeba2b6a6802360ea607151465004d4089763"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ4MjU3OQ==", "bodyText": "It's another member in the same partition, I'll correct the naming", "url": "https://github.com/camunda-cloud/zeebe/pull/3923#discussion_r384482579", "createdAt": "2020-02-26T13:13:06Z", "author": {"login": "npepinpe"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/RaftMessagingService.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions;\n+\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+\n+/** Abstracts away messaging to other members of a given Raft - add operations as needed. */\n+public interface RaftMessagingService {\n+\n+  /**\n+   * Subscribes to a given subject - if another Raft member sends a message on this topic, the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0OTAxNg=="}, "originalCommit": {"oid": "c1cbeba2b6a6802360ea607151465004d4089763"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTc4NDE1OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/AtomixPartitionMessagingService.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDoyNzoxNFrOFy6iVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNTowMTo0OFrOFy7zUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMjE4Mg==", "bodyText": "This only works when all nodes configured as initial entries right?", "url": "https://github.com/camunda-cloud/zeebe/pull/3923#discussion_r388932182", "createdAt": "2020-03-06T14:27:14Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/AtomixPartitionMessagingService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import io.atomix.cluster.ClusterMembershipService;\n+import io.atomix.cluster.Member;\n+import io.atomix.cluster.MemberId;\n+import io.atomix.cluster.messaging.ClusterCommunicationService;\n+import io.zeebe.broker.system.partitions.PartitionMessagingService;\n+import java.nio.ByteBuffer;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+public class AtomixPartitionMessagingService implements PartitionMessagingService {\n+  private final ClusterCommunicationService communicationService;\n+  private final ClusterMembershipService clusterMembershipService;\n+  private final Set<MemberId> otherMembers;\n+\n+  public AtomixPartitionMessagingService(\n+      final ClusterCommunicationService communicationService,\n+      final ClusterMembershipService clusterMembershipService,\n+      final Collection<MemberId> members) {\n+    this.communicationService = communicationService;\n+    this.clusterMembershipService = clusterMembershipService;\n+    this.otherMembers = getOtherMemberIds(clusterMembershipService, members);\n+  }\n+\n+  @Override\n+  public void subscribe(\n+      final String subject, final Consumer<ByteBuffer> consumer, final Executor executor) {\n+    communicationService.subscribe(subject, consumer, executor);\n+  }\n+\n+  @Override\n+  public void broadcast(final String subject, final ByteBuffer payload) {\n+    final var reachableMembers =\n+        otherMembers.stream().filter(this::isReachable).collect(Collectors.toUnmodifiableSet());\n+\n+    communicationService.multicast(subject, payload, reachableMembers);\n+  }\n+\n+  @Override\n+  public void unsubscribe(final String subject) {\n+    communicationService.unsubscribe(subject);\n+  }\n+\n+  private Set<MemberId> getOtherMemberIds(\n+      final ClusterMembershipService clusterMembershipService, final Collection<MemberId> members) {\n+    final var localMemberId = clusterMembershipService.getLocalMember().id();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b2964183f3bcde6289245ef7a020bedb8bf7aea"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzNzkwNg==", "bodyText": "Sort of - it assumes that the set of members in the Raft is static, so it's really just filtering out the local member. But this is independent of the discovery protocol.", "url": "https://github.com/camunda-cloud/zeebe/pull/3923#discussion_r388937906", "createdAt": "2020-03-06T14:37:17Z", "author": {"login": "npepinpe"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/AtomixPartitionMessagingService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import io.atomix.cluster.ClusterMembershipService;\n+import io.atomix.cluster.Member;\n+import io.atomix.cluster.MemberId;\n+import io.atomix.cluster.messaging.ClusterCommunicationService;\n+import io.zeebe.broker.system.partitions.PartitionMessagingService;\n+import java.nio.ByteBuffer;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+public class AtomixPartitionMessagingService implements PartitionMessagingService {\n+  private final ClusterCommunicationService communicationService;\n+  private final ClusterMembershipService clusterMembershipService;\n+  private final Set<MemberId> otherMembers;\n+\n+  public AtomixPartitionMessagingService(\n+      final ClusterCommunicationService communicationService,\n+      final ClusterMembershipService clusterMembershipService,\n+      final Collection<MemberId> members) {\n+    this.communicationService = communicationService;\n+    this.clusterMembershipService = clusterMembershipService;\n+    this.otherMembers = getOtherMemberIds(clusterMembershipService, members);\n+  }\n+\n+  @Override\n+  public void subscribe(\n+      final String subject, final Consumer<ByteBuffer> consumer, final Executor executor) {\n+    communicationService.subscribe(subject, consumer, executor);\n+  }\n+\n+  @Override\n+  public void broadcast(final String subject, final ByteBuffer payload) {\n+    final var reachableMembers =\n+        otherMembers.stream().filter(this::isReachable).collect(Collectors.toUnmodifiableSet());\n+\n+    communicationService.multicast(subject, payload, reachableMembers);\n+  }\n+\n+  @Override\n+  public void unsubscribe(final String subject) {\n+    communicationService.unsubscribe(subject);\n+  }\n+\n+  private Set<MemberId> getOtherMemberIds(\n+      final ClusterMembershipService clusterMembershipService, final Collection<MemberId> members) {\n+    final var localMemberId = clusterMembershipService.getLocalMember().id();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMjE4Mg=="}, "originalCommit": {"oid": "8b2964183f3bcde6289245ef7a020bedb8bf7aea"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzOTcwMA==", "bodyText": "You use the ClusterMemberShipService to get the members or?", "url": "https://github.com/camunda-cloud/zeebe/pull/3923#discussion_r388939700", "createdAt": "2020-03-06T14:40:34Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/AtomixPartitionMessagingService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import io.atomix.cluster.ClusterMembershipService;\n+import io.atomix.cluster.Member;\n+import io.atomix.cluster.MemberId;\n+import io.atomix.cluster.messaging.ClusterCommunicationService;\n+import io.zeebe.broker.system.partitions.PartitionMessagingService;\n+import java.nio.ByteBuffer;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+public class AtomixPartitionMessagingService implements PartitionMessagingService {\n+  private final ClusterCommunicationService communicationService;\n+  private final ClusterMembershipService clusterMembershipService;\n+  private final Set<MemberId> otherMembers;\n+\n+  public AtomixPartitionMessagingService(\n+      final ClusterCommunicationService communicationService,\n+      final ClusterMembershipService clusterMembershipService,\n+      final Collection<MemberId> members) {\n+    this.communicationService = communicationService;\n+    this.clusterMembershipService = clusterMembershipService;\n+    this.otherMembers = getOtherMemberIds(clusterMembershipService, members);\n+  }\n+\n+  @Override\n+  public void subscribe(\n+      final String subject, final Consumer<ByteBuffer> consumer, final Executor executor) {\n+    communicationService.subscribe(subject, consumer, executor);\n+  }\n+\n+  @Override\n+  public void broadcast(final String subject, final ByteBuffer payload) {\n+    final var reachableMembers =\n+        otherMembers.stream().filter(this::isReachable).collect(Collectors.toUnmodifiableSet());\n+\n+    communicationService.multicast(subject, payload, reachableMembers);\n+  }\n+\n+  @Override\n+  public void unsubscribe(final String subject) {\n+    communicationService.unsubscribe(subject);\n+  }\n+\n+  private Set<MemberId> getOtherMemberIds(\n+      final ClusterMembershipService clusterMembershipService, final Collection<MemberId> members) {\n+    final var localMemberId = clusterMembershipService.getLocalMember().id();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMjE4Mg=="}, "originalCommit": {"oid": "8b2964183f3bcde6289245ef7a020bedb8bf7aea"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk1MjkxMw==", "bodyText": "It's used initially to get the local member ID, and later to check if a member is reachable. So this assumes member IDs are static, and the Raft configuration is also static - but whether they are reachable or not is dynamic and relies on SWIM.", "url": "https://github.com/camunda-cloud/zeebe/pull/3923#discussion_r388952913", "createdAt": "2020-03-06T15:01:48Z", "author": {"login": "npepinpe"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/AtomixPartitionMessagingService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import io.atomix.cluster.ClusterMembershipService;\n+import io.atomix.cluster.Member;\n+import io.atomix.cluster.MemberId;\n+import io.atomix.cluster.messaging.ClusterCommunicationService;\n+import io.zeebe.broker.system.partitions.PartitionMessagingService;\n+import java.nio.ByteBuffer;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.Executor;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+\n+public class AtomixPartitionMessagingService implements PartitionMessagingService {\n+  private final ClusterCommunicationService communicationService;\n+  private final ClusterMembershipService clusterMembershipService;\n+  private final Set<MemberId> otherMembers;\n+\n+  public AtomixPartitionMessagingService(\n+      final ClusterCommunicationService communicationService,\n+      final ClusterMembershipService clusterMembershipService,\n+      final Collection<MemberId> members) {\n+    this.communicationService = communicationService;\n+    this.clusterMembershipService = clusterMembershipService;\n+    this.otherMembers = getOtherMemberIds(clusterMembershipService, members);\n+  }\n+\n+  @Override\n+  public void subscribe(\n+      final String subject, final Consumer<ByteBuffer> consumer, final Executor executor) {\n+    communicationService.subscribe(subject, consumer, executor);\n+  }\n+\n+  @Override\n+  public void broadcast(final String subject, final ByteBuffer payload) {\n+    final var reachableMembers =\n+        otherMembers.stream().filter(this::isReachable).collect(Collectors.toUnmodifiableSet());\n+\n+    communicationService.multicast(subject, payload, reachableMembers);\n+  }\n+\n+  @Override\n+  public void unsubscribe(final String subject) {\n+    communicationService.unsubscribe(subject);\n+  }\n+\n+  private Set<MemberId> getOtherMemberIds(\n+      final ClusterMembershipService clusterMembershipService, final Collection<MemberId> members) {\n+    final var localMemberId = clusterMembershipService.getLocalMember().id();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkzMjE4Mg=="}, "originalCommit": {"oid": "8b2964183f3bcde6289245ef7a020bedb8bf7aea"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 5, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}