{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNjY0MDg1", "number": 5844, "title": "chore(atomix): add checksum to append request", "bodyText": "Description\nAdds a checksum to the AppendRequest that is replicated by the leader and then checked by the followers.\nRelated issues\ncloses #4736\nDefinition of Done\nNot all items need to be done depending on the issue and the pull request.\nCode changes:\n\n The changes are backwards compatibility with previous versions\n If it fixes a bug then PRs are created to backport the fix to the last two minor versions. You can trigger a backport by assigning labels (e.g. backport stable/0.25) to the PR, in case that fails you need to create backports manually.\n\nTesting:\n\n There are unit/integration tests that verify all acceptance criterias of the issue\n New tests are written to ensure backwards compatibility with further versions\n The behavior is tested manually\n The impact of the changes is verified by a benchmark\n\nDocumentation:\n\n The documentation is updated (e.g. BPMN reference, configuration, examples, get-started guides, etc.)\n New content is added to the release announcement", "createdAt": "2020-11-13T15:55:12Z", "url": "https://github.com/camunda-cloud/zeebe/pull/5844", "merged": true, "mergeCommit": {"oid": "ba5267bd3c4378632954e51577a9dd86c42fd023"}, "closed": true, "closedAt": "2020-11-30T10:01:58Z", "author": {"login": "MiguelPires"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdd_F4egBqjQwMTQ3Mzg5NzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdhhOdmABqjQwNTA3MTYwNDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29d1e524cfa26d4ec1f75d0a89e0582093a5848a", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/29d1e524cfa26d4ec1f75d0a89e0582093a5848a", "committedDate": "2020-11-13T15:41:41Z", "message": "chore(atomix): add checksum to append request"}, "afterCommit": {"oid": "d057358dd33c0b91353fe2a62c2f4700fcf518ec", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/d057358dd33c0b91353fe2a62c2f4700fcf518ec", "committedDate": "2020-11-18T17:57:01Z", "message": "chore(atomix): add checksum to append request"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MjUxNjU4", "url": "https://github.com/camunda-cloud/zeebe/pull/5844#pullrequestreview-536251658", "createdAt": "2020-11-23T08:28:01Z", "commit": {"oid": "d057358dd33c0b91353fe2a62c2f4700fcf518ec"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwODo1NjoyMVrOH4EAiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDowMzo1NFrOH4GcUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0Nzk3OQ==", "bodyText": "May be refactor the code so that we don't have to read the checksum twice?", "url": "https://github.com/camunda-cloud/zeebe/pull/5844#discussion_r528547979", "createdAt": "2020-11-23T08:56:21Z", "author": {"login": "deepthidevaki"}, "path": "atomix/storage/src/main/java/io/atomix/storage/journal/FileChannelJournalSegmentReader.java", "diffHunk": "@@ -209,17 +209,21 @@ private void readNext() {\n   }\n \n   private void readNextEntry(final long index, final int length) {\n+    final int checksumPosition = memory.position();\n+\n     if (isChecksumInvalid(length)) {\n       resetReading();\n       return;\n     }\n+    memory.position(checksumPosition);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d057358dd33c0b91353fe2a62c2f4700fcf518ec"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1NDc1Nw==", "bodyText": "The assumption is if the checksums is null, it is from an old version. Right?", "url": "https://github.com/camunda-cloud/zeebe/pull/5844#discussion_r528554757", "createdAt": "2020-11-23T09:09:25Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -618,6 +648,23 @@ protected void appendEntries(\n     succeedAppend(lastLogIndex, future);\n   }\n \n+  private boolean validChecksum(final AppendRequest request, final int index) {\n+    if (request.checksums() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d057358dd33c0b91353fe2a62c2f4700fcf518ec"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU4Nzg1OQ==", "bodyText": "We are serializing the entry and calculating the checksums here and again in journal::append. Can we not do that?", "url": "https://github.com/camunda-cloud/zeebe/pull/5844#discussion_r528587859", "createdAt": "2020-11-23T10:03:54Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -618,6 +648,23 @@ protected void appendEntries(\n     succeedAppend(lastLogIndex, future);\n   }\n \n+  private boolean validChecksum(final AppendRequest request, final int index) {\n+    if (request.checksums() == null) {\n+      return true;\n+    }\n+\n+    final long checksum = request.checksums().get(index);\n+    final RaftLogEntry entry = request.entries().get(index);\n+\n+    buffer.clear();\n+    namespace.serialize(entry, buffer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d057358dd33c0b91353fe2a62c2f4700fcf518ec"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MTU5MjA2", "url": "https://github.com/camunda-cloud/zeebe/pull/5844#pullrequestreview-537159206", "createdAt": "2020-11-24T07:59:16Z", "commit": {"oid": "ef2e227b178f7c03e41ecab57c0a455c3eb35b01"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ef2e227b178f7c03e41ecab57c0a455c3eb35b01", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/ef2e227b178f7c03e41ecab57c0a455c3eb35b01", "committedDate": "2020-11-23T12:58:36Z", "message": "chore(atomix): refactor checksum validation"}, "afterCommit": {"oid": "b8ecc988847128a890cf3bf20220c6c8b71bfc71", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/b8ecc988847128a890cf3bf20220c6c8b71bfc71", "committedDate": "2020-11-26T08:17:26Z", "message": "chore(atomix): add checksum to append request"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8ecc988847128a890cf3bf20220c6c8b71bfc71", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/b8ecc988847128a890cf3bf20220c6c8b71bfc71", "committedDate": "2020-11-26T08:17:26Z", "message": "chore(atomix): add checksum to append request"}, "afterCommit": {"oid": "9b52aa1d289b0d94003835417e2f5f86094c8857", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/9b52aa1d289b0d94003835417e2f5f86094c8857", "committedDate": "2020-11-26T10:46:08Z", "message": "chore(atomix): add checksum to append request"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b52aa1d289b0d94003835417e2f5f86094c8857", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/9b52aa1d289b0d94003835417e2f5f86094c8857", "committedDate": "2020-11-26T10:46:08Z", "message": "chore(atomix): add checksum to append request"}, "afterCommit": {"oid": "554d5f7289803576bf25cdf7ccb57ad784337463", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/554d5f7289803576bf25cdf7ccb57ad784337463", "committedDate": "2020-11-26T12:12:18Z", "message": "chore(atomix): add checksum to append request"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "554d5f7289803576bf25cdf7ccb57ad784337463", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/554d5f7289803576bf25cdf7ccb57ad784337463", "committedDate": "2020-11-26T12:12:18Z", "message": "chore(atomix): add checksum to append request"}, "afterCommit": {"oid": "dbe364b9ca898afdff6072c4a55df1f1340a22e5", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/dbe364b9ca898afdff6072c4a55df1f1340a22e5", "committedDate": "2020-11-27T08:28:38Z", "message": "chore(atomix): add checksum to append request"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5ODE1OTAx", "url": "https://github.com/camunda-cloud/zeebe/pull/5844#pullrequestreview-539815901", "createdAt": "2020-11-27T09:13:45Z", "commit": {"oid": "dbe364b9ca898afdff6072c4a55df1f1340a22e5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOToxMzo0NVrOH62dFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo0MzowOFrOH63c3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3MTYzOA==", "bodyText": "Must catch StorageException.InvalidChecksum", "url": "https://github.com/camunda-cloud/zeebe/pull/5844#discussion_r531471638", "createdAt": "2020-11-27T09:13:45Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -706,18 +747,25 @@ private boolean replaceExistingEntry(\n   private boolean appendEntry(\n       final long index,\n       final RaftLogEntry entry,\n+      final AtomicInteger checksum,\n       final RaftLogWriter writer,\n       final CompletableFuture<AppendResponse> future) {\n     try {\n-      final Indexed<RaftLogEntry> indexed = writer.append(entry);\n+      final Indexed<RaftLogEntry> indexed;\n+      if (checksum != null) {\n+        indexed = writer.append(entry, checksum.get());\n+      } else {\n+        indexed = writer.append(entry);\n+      }\n+\n       log.trace(\"Appended {}\", indexed);\n       raft.getReplicationMetrics().setAppendIndex(indexed.index());\n     } catch (final StorageException.TooLarge e) {\n       log.warn(\n           \"Entry size exceeds maximum allowed bytes. Ensure Raft storage configuration is consistent on all nodes!\");\n       return false;\n     } catch (final StorageException.OutOfDiskSpace e) {\n-      log.trace(\"Append failed: {}\", e);\n+      log.trace(\"Append failed: \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbe364b9ca898afdff6072c4a55df1f1340a22e5"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3Mjc2NQ==", "bodyText": "Why is it AtomicInteger? There is no concurrent access to it.", "url": "https://github.com/camunda-cloud/zeebe/pull/5844#discussion_r531472765", "createdAt": "2020-11-27T09:15:30Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -580,13 +611,20 @@ protected void appendEntries(\n       }\n \n       // Iterate through entries and append them.\n-      for (final RaftLogEntry entry : request.entries()) {\n+      for (int i = 0; i < request.entries().size(); ++i) {\n         final long index = ++lastLogIndex;\n+        final RaftLogEntry entry = request.entries().get(i);\n+\n+        AtomicInteger checksum = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbe364b9ca898afdff6072c4a55df1f1340a22e5"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3NjU3OQ==", "bodyText": "Also add request size and checksum size to the log message.", "url": "https://github.com/camunda-cloud/zeebe/pull/5844#discussion_r531476579", "createdAt": "2020-11-27T09:22:20Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -437,11 +440,39 @@ private void abortPendingSnapshots() {\n       return future;\n     }\n \n+    if (!checkChecksums(request, future)) {\n+      return future;\n+    }\n+\n     // Append the entries to the log.\n     appendEntries(request, future);\n     return future;\n   }\n \n+  private boolean checkChecksums(\n+      final AppendRequest request, final CompletableFuture<AppendResponse> future) {\n+    if (request.checksums() != null) {\n+      boolean failed = false;\n+      if (request.entries().size() != request.checksums().size()) {\n+        log.debug(\"Rejected {}: expected the same number of checksums as entries\", request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbe364b9ca898afdff6072c4a55df1f1340a22e5"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3ODAwOQ==", "bodyText": "Please rename this function.", "url": "https://github.com/camunda-cloud/zeebe/pull/5844#discussion_r531478009", "createdAt": "2020-11-27T09:24:58Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/test/java/io/atomix/raft/roles/PassiveRoleTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright \u00a9 2020 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.atomix.raft.roles;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.atomix.raft.impl.RaftContext;\n+import io.atomix.raft.metrics.RaftReplicationMetrics;\n+import io.atomix.raft.protocol.AppendRequest;\n+import io.atomix.raft.protocol.AppendResponse;\n+import io.atomix.raft.storage.RaftStorage;\n+import io.atomix.raft.storage.log.RaftLog;\n+import io.atomix.raft.storage.log.RaftLogWriter;\n+import io.atomix.raft.storage.log.entry.RaftLogEntry;\n+import io.atomix.raft.zeebe.ZeebeEntry;\n+import io.atomix.storage.journal.Indexed;\n+import io.atomix.utils.serializer.NamespaceImpl;\n+import io.atomix.utils.serializer.NamespaceImpl.Builder;\n+import io.atomix.utils.serializer.Namespaces;\n+import io.zeebe.snapshots.raft.PersistedSnapshot;\n+import io.zeebe.snapshots.raft.ReceivableSnapshotStore;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.zip.CRC32;\n+import java.util.zip.Checksum;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+public class PassiveRoleTest {\n+\n+  private static final NamespaceImpl NAMESPACE =\n+      new Builder().register(Namespaces.BASIC).register(ZeebeEntry.class).build();\n+  @Rule public Timeout timeout = new Timeout(30, TimeUnit.SECONDS);\n+  private RaftContext ctx;\n+  private final ZeebeEntry entry = new ZeebeEntry(1, 1, 0, 1, ByteBuffer.allocate(0));\n+  private RaftLogWriter writer;\n+\n+  @Before\n+  public void setup() {\n+    final RaftStorage storage = mock(RaftStorage.class);\n+    when(storage.namespace()).thenReturn(NAMESPACE);\n+\n+    writer = mock(RaftLogWriter.class);\n+    when(writer.getLastIndex()).thenReturn(1L);\n+    when(writer.append(any(ZeebeEntry.class))).thenReturn(new Indexed<>(1, entry, 1, 1));\n+    when(writer.append(any(), anyInt())).thenReturn(new Indexed<>(1, entry, 1, 1));\n+\n+    final PersistedSnapshot snapshot = mock(PersistedSnapshot.class);\n+    when(snapshot.getIndex()).thenReturn(1L);\n+    when(snapshot.getTerm()).thenReturn(1L);\n+\n+    final ReceivableSnapshotStore store = mock(ReceivableSnapshotStore.class);\n+    when(store.getLatestSnapshot()).thenReturn(Optional.of(snapshot));\n+\n+    ctx = mock(RaftContext.class);\n+    when(ctx.getStorage()).thenReturn(storage);\n+    when(ctx.getLogWriter()).thenReturn(writer);\n+    when(ctx.getPersistedSnapshotStore()).thenReturn(store);\n+    when(ctx.getTerm()).thenReturn(1L);\n+    when(ctx.getReplicationMetrics()).thenReturn(mock(RaftReplicationMetrics.class));\n+    when(ctx.getLog()).thenReturn(mock(RaftLog.class));\n+  }\n+\n+  @Test\n+  public void shouldRejectRequestIfDifferentNumberEntriesAndChecksums() {\n+    // given\n+    final PassiveRole role = new PassiveRole(ctx);\n+    final List<RaftLogEntry> entries = generateEntries(1);\n+    final AppendRequest request = new AppendRequest(2, \"\", 1, 1, entries, List.of(1L, 2L), 1);\n+\n+    // when\n+    final AppendResponse response = role.handleAppend(request).join();\n+\n+    // then\n+    assertThat(response.succeeded()).isFalse();\n+  }\n+\n+  @Test\n+  public void shouldCreateValidatorForEntry() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbe364b9ca898afdff6072c4a55df1f1340a22e5"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3ODk1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public <T extends E> Indexed<T> append(\n          \n          \n            \n              private <T extends E> Indexed<T> append(", "url": "https://github.com/camunda-cloud/zeebe/pull/5844#discussion_r531478950", "createdAt": "2020-11-27T09:26:42Z", "author": {"login": "deepthidevaki"}, "path": "atomix/storage/src/main/java/io/atomix/storage/journal/FileChannelJournalSegmentWriter.java", "diffHunk": "@@ -94,62 +95,85 @@ public long getNextIndex() {\n     }\n   }\n \n+  @Override\n+  public <T extends E> Indexed<T> append(final T entry, final int checksum) {\n+    return append(entry, true, checksum);\n+  }\n+\n   @Override\n   public <T extends E> Indexed<T> append(final T entry) {\n+    return append(entry, false, -1);\n+  }\n+\n+  public <T extends E> Indexed<T> append(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbe364b9ca898afdff6072c4a55df1f1340a22e5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4MDAwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public <T extends E> Indexed<T> append(\n          \n          \n            \n              private <T extends E> Indexed<T> append(", "url": "https://github.com/camunda-cloud/zeebe/pull/5844#discussion_r531480003", "createdAt": "2020-11-27T09:28:41Z", "author": {"login": "deepthidevaki"}, "path": "atomix/storage/src/main/java/io/atomix/storage/journal/MappedJournalSegmentWriter.java", "diffHunk": "@@ -97,56 +98,75 @@ public long getNextIndex() {\n \n   @Override\n   public <T extends E> Indexed<T> append(final T entry) {\n-    // Store the entry index.\n-    final long index = getNextIndex();\n+    return append(entry, false, -1);\n+  }\n+\n+  @Override\n+  public <T extends E> Indexed<T> append(final T entry, final int checksum) {\n+    return append(entry, true, checksum);\n+  }\n \n-    // Serialize the entry.\n+  public <T extends E> Indexed<T> append(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbe364b9ca898afdff6072c4a55df1f1340a22e5"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4Nzk2Ng==", "bodyText": "We are missing a test to verify what happens when checksum is invalid.", "url": "https://github.com/camunda-cloud/zeebe/pull/5844#discussion_r531487966", "createdAt": "2020-11-27T09:43:08Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/test/java/io/atomix/raft/roles/PassiveRoleTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright \u00a9 2020 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.atomix.raft.roles;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.atomix.raft.impl.RaftContext;\n+import io.atomix.raft.metrics.RaftReplicationMetrics;\n+import io.atomix.raft.protocol.AppendRequest;\n+import io.atomix.raft.protocol.AppendResponse;\n+import io.atomix.raft.storage.RaftStorage;\n+import io.atomix.raft.storage.log.RaftLog;\n+import io.atomix.raft.storage.log.RaftLogWriter;\n+import io.atomix.raft.storage.log.entry.RaftLogEntry;\n+import io.atomix.raft.zeebe.ZeebeEntry;\n+import io.atomix.storage.journal.Indexed;\n+import io.atomix.utils.serializer.NamespaceImpl;\n+import io.atomix.utils.serializer.NamespaceImpl.Builder;\n+import io.atomix.utils.serializer.Namespaces;\n+import io.zeebe.snapshots.raft.PersistedSnapshot;\n+import io.zeebe.snapshots.raft.ReceivableSnapshotStore;\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.zip.CRC32;\n+import java.util.zip.Checksum;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.Timeout;\n+\n+public class PassiveRoleTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbe364b9ca898afdff6072c4a55df1f1340a22e5"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNjcwMjIz", "url": "https://github.com/camunda-cloud/zeebe/pull/5844#pullrequestreview-540670223", "createdAt": "2020-11-30T08:05:45Z", "commit": {"oid": "79d2c166b79103c12078a3c90959643167abd207"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79d2c166b79103c12078a3c90959643167abd207", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/79d2c166b79103c12078a3c90959643167abd207", "committedDate": "2020-11-27T13:44:57Z", "message": "chore(atomix): review"}, "afterCommit": {"oid": "f67f1f2ac92a62132be347f4721052f5f2b785e2", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/f67f1f2ac92a62132be347f4721052f5f2b785e2", "committedDate": "2020-11-30T08:09:10Z", "message": "chore(atomix): add checksum to append request"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c221e262434757e5167cf83a747c8d3683045a5", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/6c221e262434757e5167cf83a747c8d3683045a5", "committedDate": "2020-11-30T08:34:16Z", "message": "chore(atomix): add checksum to append request"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f67f1f2ac92a62132be347f4721052f5f2b785e2", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/f67f1f2ac92a62132be347f4721052f5f2b785e2", "committedDate": "2020-11-30T08:09:10Z", "message": "chore(atomix): add checksum to append request"}, "afterCommit": {"oid": "6c221e262434757e5167cf83a747c8d3683045a5", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/6c221e262434757e5167cf83a747c8d3683045a5", "committedDate": "2020-11-30T08:34:16Z", "message": "chore(atomix): add checksum to append request"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2402, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}