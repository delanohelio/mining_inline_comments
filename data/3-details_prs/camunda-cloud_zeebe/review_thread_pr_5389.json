{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMzI4OTk5", "number": 5389, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNjo0Mzo0MlrOEl8XFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNjo0Mzo0MlrOEl8XFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjIxNzE5OnYy", "diffSide": "RIGHT", "path": "atomix/utils/src/main/java/io/atomix/utils/serializer/FallbackNamespace.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNjo0Mzo0MlrOHVsHUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOToxNjoyNVrOHVxPxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUwNDkxMg==", "bodyText": "Name fallback is a bit misleading as it uses fallback as default for serializing. Can we give more meaningful names?", "url": "https://github.com/camunda-cloud/zeebe/pull/5389#discussion_r492504912", "createdAt": "2020-09-22T06:43:42Z", "author": {"login": "deepthidevaki"}, "path": "atomix/utils/src/main/java/io/atomix/utils/serializer/FallbackNamespace.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.atomix.utils.serializer;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.atomix.utils.serializer.NamespaceImpl.Builder;\n+import io.atomix.utils.serializer.NamespaceImpl.RegistrationBlock;\n+import java.nio.ByteBuffer;\n+import org.slf4j.Logger;\n+\n+public class FallbackNamespace implements Namespace {\n+\n+  private static final Logger LOG = getLogger(FallbackNamespace.class);\n+  private static final String DESERIALIZE_ERROR =\n+      \"Serialized bytes contained header with version but deserialization failed (will fallback to FieldSerializer):\\n\";\n+  private static final String UNKNOWN_VERSION_ERROR =\n+      \"Magic byte was encountered, signalling newer version of serializer, but version {} is unrecognized. Using FieldSerializer as fallback\";\n+  private static final byte MAGIC_BYTE = (byte) 0xFF;\n+  private static final byte VERSION_BYTE = 0x01;\n+  private final NamespaceImpl fallback;\n+  private final NamespaceImpl namespace;\n+\n+  FallbackNamespace(final NamespaceImpl fallback, final NamespaceImpl namespace) {\n+    this.fallback = fallback;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a96aa3533ebb62fea199c13341127c3b60e9f8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU0MjU3MA==", "bodyText": "These names were requested by the reviewer in the last review #5042 (comment). The initial names were legacy and compatible. Can you suggest alternatives that are more meaningful?", "url": "https://github.com/camunda-cloud/zeebe/pull/5389#discussion_r492542570", "createdAt": "2020-09-22T08:00:07Z", "author": {"login": "MiguelPires"}, "path": "atomix/utils/src/main/java/io/atomix/utils/serializer/FallbackNamespace.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.atomix.utils.serializer;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.atomix.utils.serializer.NamespaceImpl.Builder;\n+import io.atomix.utils.serializer.NamespaceImpl.RegistrationBlock;\n+import java.nio.ByteBuffer;\n+import org.slf4j.Logger;\n+\n+public class FallbackNamespace implements Namespace {\n+\n+  private static final Logger LOG = getLogger(FallbackNamespace.class);\n+  private static final String DESERIALIZE_ERROR =\n+      \"Serialized bytes contained header with version but deserialization failed (will fallback to FieldSerializer):\\n\";\n+  private static final String UNKNOWN_VERSION_ERROR =\n+      \"Magic byte was encountered, signalling newer version of serializer, but version {} is unrecognized. Using FieldSerializer as fallback\";\n+  private static final byte MAGIC_BYTE = (byte) 0xFF;\n+  private static final byte VERSION_BYTE = 0x01;\n+  private final NamespaceImpl fallback;\n+  private final NamespaceImpl namespace;\n+\n+  FallbackNamespace(final NamespaceImpl fallback, final NamespaceImpl namespace) {\n+    this.fallback = fallback;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUwNDkxMg=="}, "originalCommit": {"oid": "28a96aa3533ebb62fea199c13341127c3b60e9f8"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU4ODk5OA==", "bodyText": "I think it make sense to use \"fallback\" in 0.25 because it is actually using it as a fallback. But here fallback is the default. legacy and compatible sounds good to me. Or just switch the places - current namespace is the new fallback.", "url": "https://github.com/camunda-cloud/zeebe/pull/5389#discussion_r492588998", "createdAt": "2020-09-22T09:16:25Z", "author": {"login": "deepthidevaki"}, "path": "atomix/utils/src/main/java/io/atomix/utils/serializer/FallbackNamespace.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright \u00a9 2020 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.atomix.utils.serializer;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.atomix.utils.serializer.NamespaceImpl.Builder;\n+import io.atomix.utils.serializer.NamespaceImpl.RegistrationBlock;\n+import java.nio.ByteBuffer;\n+import org.slf4j.Logger;\n+\n+public class FallbackNamespace implements Namespace {\n+\n+  private static final Logger LOG = getLogger(FallbackNamespace.class);\n+  private static final String DESERIALIZE_ERROR =\n+      \"Serialized bytes contained header with version but deserialization failed (will fallback to FieldSerializer):\\n\";\n+  private static final String UNKNOWN_VERSION_ERROR =\n+      \"Magic byte was encountered, signalling newer version of serializer, but version {} is unrecognized. Using FieldSerializer as fallback\";\n+  private static final byte MAGIC_BYTE = (byte) 0xFF;\n+  private static final byte VERSION_BYTE = 0x01;\n+  private final NamespaceImpl fallback;\n+  private final NamespaceImpl namespace;\n+\n+  FallbackNamespace(final NamespaceImpl fallback, final NamespaceImpl namespace) {\n+    this.fallback = fallback;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjUwNDkxMg=="}, "originalCommit": {"oid": "28a96aa3533ebb62fea199c13341127c3b60e9f8"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 262, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}