{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNTQ2NTUx", "number": 3977, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoxNzozOVrODlxu1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoxODo1NlrODlxwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTM4NzExOnYy", "diffSide": "RIGHT", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/health/HealthMonitoringTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoxNzozOVrOFy20xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMzoxNDo0OVrOFy4RfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg3MTM2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private boolean isBrokerHealthy(final Broker broker) {\n          \n          \n            \n                final SocketBindingCfg monitoringApi = broker.getConfig().getNetwork().getMonitoringApi();\n          \n          \n            \n                final String baseUrl =\n          \n          \n            \n                    String.format(\"http://%s:%d\", monitoringApi.getHost(), monitoringApi.getPort());\n          \n          \n            \n                final String url = baseUrl + \"/health\";\n          \n          \n            \n            \n          \n          \n            \n                try (final CloseableHttpClient client = HttpClients.createDefault()) {\n          \n          \n            \n                  final HttpGet request = new HttpGet(url);\n          \n          \n            \n                  try (final CloseableHttpResponse response = client.execute(request)) {\n          \n          \n            \n                    return response.getStatusLine().getStatusCode() != 503;\n          \n          \n            \n                  }\n          \n          \n            \n                } catch (final IOException e) {\n          \n          \n            \n                  e.printStackTrace();\n          \n          \n            \n                }\n          \n          \n            \n                return false;\n          \n          \n            \n              }\n          \n          \n            \n              private boolean isBrokerHealthy(final Broker broker) {\n          \n          \n            \n                final var monitoringApi = broker.getConfig().getNetwork().getMonitoringApi();\n          \n          \n            \n                final var host = monitoringApi.getHost();\n          \n          \n            \n                final var port = monitoringApi.getPort();\n          \n          \n            \n                final var uri = URI.create(String.format(\"http://%s:%d/health\", host, port));\n          \n          \n            \n                final var client = HttpClient.newHttpClient();\n          \n          \n            \n                final var request = HttpRequest.newBuilder(uri).build();\n          \n          \n            \n            \n          \n          \n            \n                try {\n          \n          \n            \n                  return client.send(request, BodyHandlers.discarding()).statusCode() == 204;\n          \n          \n            \n                } catch (InterruptedException | IOException e) {\n          \n          \n            \n                  LangUtil.rethrowUnchecked(e);\n          \n          \n            \n                  return false; // should not happen\n          \n          \n            \n                }\n          \n          \n            \n              }\n          \n      \n    \n    \n  \n\nJava 11 comes with a build in usable HttpClient (although still no URIBuilder \ud83d\ude44) so we don't need the Apache Components dependency here. We can also reuse it for the other test above.", "url": "https://github.com/camunda-cloud/zeebe/pull/3977#discussion_r388871367", "createdAt": "2020-03-06T12:17:39Z", "author": {"login": "npepinpe"}, "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/health/HealthMonitoringTest.java", "diffHunk": "@@ -77,4 +81,21 @@ private void corruptAllSnapshots(final Broker leader) {\n                   .forEach(file -> file.delete());\n             });\n   }\n+\n+  private boolean isBrokerHealthy(final Broker broker) {\n+    final SocketBindingCfg monitoringApi = broker.getConfig().getNetwork().getMonitoringApi();\n+    final String baseUrl =\n+        String.format(\"http://%s:%d\", monitoringApi.getHost(), monitoringApi.getPort());\n+    final String url = baseUrl + \"/health\";\n+\n+    try (final CloseableHttpClient client = HttpClients.createDefault()) {\n+      final HttpGet request = new HttpGet(url);\n+      try (final CloseableHttpResponse response = client.execute(request)) {\n+        return response.getStatusLine().getStatusCode() != 503;\n+      }\n+    } catch (final IOException e) {\n+      e.printStackTrace();\n+    }\n+    return false;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c46a03d9c6ee85bb39d409ec08ebf83b6f049ff"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg5NTEwMQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/3977#discussion_r388895101", "createdAt": "2020-03-06T13:14:49Z", "author": {"login": "deepthidevaki"}, "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/health/HealthMonitoringTest.java", "diffHunk": "@@ -77,4 +81,21 @@ private void corruptAllSnapshots(final Broker leader) {\n                   .forEach(file -> file.delete());\n             });\n   }\n+\n+  private boolean isBrokerHealthy(final Broker broker) {\n+    final SocketBindingCfg monitoringApi = broker.getConfig().getNetwork().getMonitoringApi();\n+    final String baseUrl =\n+        String.format(\"http://%s:%d\", monitoringApi.getHost(), monitoringApi.getPort());\n+    final String url = baseUrl + \"/health\";\n+\n+    try (final CloseableHttpClient client = HttpClients.createDefault()) {\n+      final HttpGet request = new HttpGet(url);\n+      try (final CloseableHttpResponse response = client.execute(request)) {\n+        return response.getStatusLine().getStatusCode() != 503;\n+      }\n+    } catch (final IOException e) {\n+      e.printStackTrace();\n+    }\n+    return false;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg3MTM2Nw=="}, "originalCommit": {"oid": "6c46a03d9c6ee85bb39d409ec08ebf83b6f049ff"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTM5MDYwOnYy", "diffSide": "RIGHT", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/health/HealthMonitoringTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoxODo1NlrOFy22yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxMjoxODo1NlrOFy22yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODg3MTg4Mw==", "bodyText": "We should use the method reference syntax wherever possible\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              .forEach(file -> file.delete());\n          \n          \n            \n                              .forEach(File::delete);", "url": "https://github.com/camunda-cloud/zeebe/pull/3977#discussion_r388871883", "createdAt": "2020-03-06T12:18:56Z", "author": {"login": "npepinpe"}, "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/health/HealthMonitoringTest.java", "diffHunk": "@@ -77,4 +81,21 @@ private void corruptAllSnapshots(final Broker leader) {\n                   .forEach(file -> file.delete());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c46a03d9c6ee85bb39d409ec08ebf83b6f049ff"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4887, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}