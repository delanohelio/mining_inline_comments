{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NTMwMTcw", "number": 4549, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjoyMToyOFrOD9d1TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyODozNVrOD9sRcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1Nzc4NTA5OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnStateTransitionBehavior.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxNjoyMToyOFrOGW-j-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMjo1MjowM1rOGXe63Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0Njg3NA==", "bodyText": "We don't seem to wait here, just consuming the pending 'child zombie' tokens. I think this comment should be changed. Also, Shouldn't the current element instance still transition to terminated at the end of this else block?", "url": "https://github.com/camunda-cloud/zeebe/pull/4549#discussion_r426746874", "createdAt": "2020-05-18T16:21:28Z", "author": {"login": "korthout"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnStateTransitionBehavior.java", "diffHunk": "@@ -154,6 +154,42 @@ public ElementInstance activateChildInstance(\n     return stateBehavior.createChildElementInstance(context, childInstanceKey, childInstanceRecord);\n   }\n \n+  public void terminateChildInstances(final BpmnElementContext context) {\n+\n+    final var childInstances = stateBehavior.getChildInstances(context);\n+\n+    for (final BpmnElementContext childInstanceContext : childInstances) {\n+\n+      if (WorkflowInstanceLifecycle.canTransition(\n+          childInstanceContext.getIntent(), WorkflowInstanceIntent.ELEMENT_TERMINATING)) {\n+        transitionToTerminating(childInstanceContext);\n+\n+      } else if (childInstanceContext.getIntent() == WorkflowInstanceIntent.ELEMENT_COMPLETED) {\n+        // clean up the state because the completed event will not be processed\n+        stateBehavior.removeInstance(childInstanceContext);\n+      }\n+    }\n+\n+    final var elementInstance = stateBehavior.getElementInstance(context);\n+    final var activeChildInstances = elementInstance.getNumberOfActiveElementInstances();\n+\n+    if (activeChildInstances == 0) {\n+      // terminate element instance if all child instances are terminated\n+      transitionToTerminated(context);\n+\n+    } else {\n+      // wait for child instances to be terminated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13a78a6fda2ba73c886c1d3f3087c48f18f0072e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MDIxNQ==", "bodyText": "Nope. In this case, the element instance has child instances that are not terminated yet. So, it should wait until all child instances are terminated before it goes to terminated.\nDoes this make sense for you?", "url": "https://github.com/camunda-cloud/zeebe/pull/4549#discussion_r427160215", "createdAt": "2020-05-19T09:26:58Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnStateTransitionBehavior.java", "diffHunk": "@@ -154,6 +154,42 @@ public ElementInstance activateChildInstance(\n     return stateBehavior.createChildElementInstance(context, childInstanceKey, childInstanceRecord);\n   }\n \n+  public void terminateChildInstances(final BpmnElementContext context) {\n+\n+    final var childInstances = stateBehavior.getChildInstances(context);\n+\n+    for (final BpmnElementContext childInstanceContext : childInstances) {\n+\n+      if (WorkflowInstanceLifecycle.canTransition(\n+          childInstanceContext.getIntent(), WorkflowInstanceIntent.ELEMENT_TERMINATING)) {\n+        transitionToTerminating(childInstanceContext);\n+\n+      } else if (childInstanceContext.getIntent() == WorkflowInstanceIntent.ELEMENT_COMPLETED) {\n+        // clean up the state because the completed event will not be processed\n+        stateBehavior.removeInstance(childInstanceContext);\n+      }\n+    }\n+\n+    final var elementInstance = stateBehavior.getElementInstance(context);\n+    final var activeChildInstances = elementInstance.getNumberOfActiveElementInstances();\n+\n+    if (activeChildInstances == 0) {\n+      // terminate element instance if all child instances are terminated\n+      transitionToTerminated(context);\n+\n+    } else {\n+      // wait for child instances to be terminated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0Njg3NA=="}, "originalCommit": {"oid": "13a78a6fda2ba73c886c1d3f3087c48f18f0072e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MjUyNA==", "bodyText": "Yes, but the code does not wait, it merely consumes the pending tokens. Or am I missing something?", "url": "https://github.com/camunda-cloud/zeebe/pull/4549#discussion_r427162524", "createdAt": "2020-05-19T09:30:33Z", "author": {"login": "korthout"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnStateTransitionBehavior.java", "diffHunk": "@@ -154,6 +154,42 @@ public ElementInstance activateChildInstance(\n     return stateBehavior.createChildElementInstance(context, childInstanceKey, childInstanceRecord);\n   }\n \n+  public void terminateChildInstances(final BpmnElementContext context) {\n+\n+    final var childInstances = stateBehavior.getChildInstances(context);\n+\n+    for (final BpmnElementContext childInstanceContext : childInstances) {\n+\n+      if (WorkflowInstanceLifecycle.canTransition(\n+          childInstanceContext.getIntent(), WorkflowInstanceIntent.ELEMENT_TERMINATING)) {\n+        transitionToTerminating(childInstanceContext);\n+\n+      } else if (childInstanceContext.getIntent() == WorkflowInstanceIntent.ELEMENT_COMPLETED) {\n+        // clean up the state because the completed event will not be processed\n+        stateBehavior.removeInstance(childInstanceContext);\n+      }\n+    }\n+\n+    final var elementInstance = stateBehavior.getElementInstance(context);\n+    final var activeChildInstances = elementInstance.getNumberOfActiveElementInstances();\n+\n+    if (activeChildInstances == 0) {\n+      // terminate element instance if all child instances are terminated\n+      transitionToTerminated(context);\n+\n+    } else {\n+      // wait for child instances to be terminated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0Njg3NA=="}, "originalCommit": {"oid": "13a78a6fda2ba73c886c1d3f3087c48f18f0072e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIzMjczNw==", "bodyText": "Ok, I guess that my comment is not clear \ud83d\ude05  I'm open to suggestions.\n\"waiting\" here means that the element instance doesn't go to terminated. Instead, it waits until the child instances are terminated.\nIt doesn't consume the tokens from the child instances \ud83e\udd14 It consumes the tokens for the events that will not be processed anymore:\n\nchild instance completed doesn't pass the guard because the (flow scope) instance is not active\nsequence flow taken doesn't pass the guard because the (flow scope) instance is not active\n\nFor both cases, the (flow scope) instance has a pending token. So, we need to \"consume\" these tokens to pass the check: https://github.com/zeebe-io/zeebe/blob/13a78a6fda2ba73c886c1d3f3087c48f18f0072e/engine/src/main/java/io/zeebe/engine/nwe/container/MultiInstanceBodyProcessor.java#L210-L228", "url": "https://github.com/camunda-cloud/zeebe/pull/4549#discussion_r427232737", "createdAt": "2020-05-19T11:35:46Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnStateTransitionBehavior.java", "diffHunk": "@@ -154,6 +154,42 @@ public ElementInstance activateChildInstance(\n     return stateBehavior.createChildElementInstance(context, childInstanceKey, childInstanceRecord);\n   }\n \n+  public void terminateChildInstances(final BpmnElementContext context) {\n+\n+    final var childInstances = stateBehavior.getChildInstances(context);\n+\n+    for (final BpmnElementContext childInstanceContext : childInstances) {\n+\n+      if (WorkflowInstanceLifecycle.canTransition(\n+          childInstanceContext.getIntent(), WorkflowInstanceIntent.ELEMENT_TERMINATING)) {\n+        transitionToTerminating(childInstanceContext);\n+\n+      } else if (childInstanceContext.getIntent() == WorkflowInstanceIntent.ELEMENT_COMPLETED) {\n+        // clean up the state because the completed event will not be processed\n+        stateBehavior.removeInstance(childInstanceContext);\n+      }\n+    }\n+\n+    final var elementInstance = stateBehavior.getElementInstance(context);\n+    final var activeChildInstances = elementInstance.getNumberOfActiveElementInstances();\n+\n+    if (activeChildInstances == 0) {\n+      // terminate element instance if all child instances are terminated\n+      transitionToTerminated(context);\n+\n+    } else {\n+      // wait for child instances to be terminated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0Njg3NA=="}, "originalCommit": {"oid": "13a78a6fda2ba73c886c1d3f3087c48f18f0072e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI3NzAyMQ==", "bodyText": "Aaah! Okay, so we juts don't transition to terminated yet. For me, it would have helped to just add this intent to the comment. So something like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // wait for child instances to be terminated\n          \n          \n            \n                  // don't yet transition to terminated\n          \n          \n            \n                  // but wait for child instances to be terminated", "url": "https://github.com/camunda-cloud/zeebe/pull/4549#discussion_r427277021", "createdAt": "2020-05-19T12:52:03Z", "author": {"login": "korthout"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnStateTransitionBehavior.java", "diffHunk": "@@ -154,6 +154,42 @@ public ElementInstance activateChildInstance(\n     return stateBehavior.createChildElementInstance(context, childInstanceKey, childInstanceRecord);\n   }\n \n+  public void terminateChildInstances(final BpmnElementContext context) {\n+\n+    final var childInstances = stateBehavior.getChildInstances(context);\n+\n+    for (final BpmnElementContext childInstanceContext : childInstances) {\n+\n+      if (WorkflowInstanceLifecycle.canTransition(\n+          childInstanceContext.getIntent(), WorkflowInstanceIntent.ELEMENT_TERMINATING)) {\n+        transitionToTerminating(childInstanceContext);\n+\n+      } else if (childInstanceContext.getIntent() == WorkflowInstanceIntent.ELEMENT_COMPLETED) {\n+        // clean up the state because the completed event will not be processed\n+        stateBehavior.removeInstance(childInstanceContext);\n+      }\n+    }\n+\n+    final var elementInstance = stateBehavior.getElementInstance(context);\n+    final var activeChildInstances = elementInstance.getNumberOfActiveElementInstances();\n+\n+    if (activeChildInstances == 0) {\n+      // terminate element instance if all child instances are terminated\n+      transitionToTerminated(context);\n+\n+    } else {\n+      // wait for child instances to be terminated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjc0Njg3NA=="}, "originalCommit": {"oid": "13a78a6fda2ba73c886c1d3f3087c48f18f0072e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDE1MDg5OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/container/MultiInstanceBodyProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODoyODozNVrOGXVcww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMTozNjowN1rOGXcO1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyMTg1OQ==", "bodyText": "Perhaps this is also the time to refactor to Either<Failure,OutputCollection> or something similar.", "url": "https://github.com/camunda-cloud/zeebe/pull/4549#discussion_r427121859", "createdAt": "2020-05-19T08:28:35Z", "author": {"login": "korthout"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/container/MultiInstanceBodyProcessor.java", "diffHunk": "@@ -140,15 +140,86 @@ public void onCompleted(\n \n   @Override\n   public void onTerminating(\n-      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {}\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    eventSubscriptionBehavior.unsubscribeFromEvents(context);\n+\n+    stateTransitionBehavior.terminateChildInstances(context);\n+  }\n \n   @Override\n   public void onTerminated(\n-      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {}\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    eventSubscriptionBehavior.publishTriggeredBoundaryEvent(context);\n+\n+    incidentBehavior.resolveIncidents(context);\n+\n+    stateTransitionBehavior.onElementTerminated(element, context);\n+\n+    stateBehavior.consumeToken(context);\n+  }\n \n   @Override\n   public void onEventOccurred(\n-      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {}\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    eventSubscriptionBehavior.triggerBoundaryEvent(element, context);\n+  }\n+\n+  @Override\n+  public void onChildCompleted(\n+      final ExecutableMultiInstanceBody element,\n+      final BpmnElementContext flowScopeContext,\n+      final BpmnElementContext childContext) {\n+    final var loopCharacteristics = element.getLoopCharacteristics();\n+\n+    if (loopCharacteristics.isSequential()) {\n+\n+      final var inputCollectionVariable = readInputCollectionVariable(element, childContext);\n+      if (inputCollectionVariable.isEmpty()) {\n+        return;\n+      }\n+\n+      final var array = inputCollectionVariable.get();\n+      final var loopCounter =\n+          stateBehavior.getFlowScopeInstance(childContext).getMultiInstanceLoopCounter();\n+      if (loopCounter < array.size()) {\n+\n+        final var item = array.get(loopCounter);\n+        createInnerInstance(element, flowScopeContext, item);\n+      }\n+    }\n+\n+    final Optional<Boolean> updatedSuccessfully =\n+        loopCharacteristics\n+            .getOutputCollection()\n+            .map(variableName -> updateOutputCollection(element, childContext, variableName));\n+\n+    if (updatedSuccessfully.isPresent() && !updatedSuccessfully.get()) {\n+      // An incident was raised while updating the output collection, stop handling activity", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13a78a6fda2ba73c886c1d3f3087c48f18f0072e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIzMjk4Mw==", "bodyText": "Good point. I ignored this part \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/4549#discussion_r427232983", "createdAt": "2020-05-19T11:36:07Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/container/MultiInstanceBodyProcessor.java", "diffHunk": "@@ -140,15 +140,86 @@ public void onCompleted(\n \n   @Override\n   public void onTerminating(\n-      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {}\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    eventSubscriptionBehavior.unsubscribeFromEvents(context);\n+\n+    stateTransitionBehavior.terminateChildInstances(context);\n+  }\n \n   @Override\n   public void onTerminated(\n-      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {}\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    eventSubscriptionBehavior.publishTriggeredBoundaryEvent(context);\n+\n+    incidentBehavior.resolveIncidents(context);\n+\n+    stateTransitionBehavior.onElementTerminated(element, context);\n+\n+    stateBehavior.consumeToken(context);\n+  }\n \n   @Override\n   public void onEventOccurred(\n-      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {}\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    eventSubscriptionBehavior.triggerBoundaryEvent(element, context);\n+  }\n+\n+  @Override\n+  public void onChildCompleted(\n+      final ExecutableMultiInstanceBody element,\n+      final BpmnElementContext flowScopeContext,\n+      final BpmnElementContext childContext) {\n+    final var loopCharacteristics = element.getLoopCharacteristics();\n+\n+    if (loopCharacteristics.isSequential()) {\n+\n+      final var inputCollectionVariable = readInputCollectionVariable(element, childContext);\n+      if (inputCollectionVariable.isEmpty()) {\n+        return;\n+      }\n+\n+      final var array = inputCollectionVariable.get();\n+      final var loopCounter =\n+          stateBehavior.getFlowScopeInstance(childContext).getMultiInstanceLoopCounter();\n+      if (loopCounter < array.size()) {\n+\n+        final var item = array.get(loopCounter);\n+        createInnerInstance(element, flowScopeContext, item);\n+      }\n+    }\n+\n+    final Optional<Boolean> updatedSuccessfully =\n+        loopCharacteristics\n+            .getOutputCollection()\n+            .map(variableName -> updateOutputCollection(element, childContext, variableName));\n+\n+    if (updatedSuccessfully.isPresent() && !updatedSuccessfully.get()) {\n+      // An incident was raised while updating the output collection, stop handling activity", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEyMTg1OQ=="}, "originalCommit": {"oid": "13a78a6fda2ba73c886c1d3f3087c48f18f0072e"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 570, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}