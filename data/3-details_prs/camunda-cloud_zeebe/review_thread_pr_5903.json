{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1NzU5Nzg3", "number": 5903, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo1Njo1NlrOE9JjPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMzo1Nzo0NFrOE9pWxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTU1MDcwOnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/exporter/stream/ExporterDirector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo1Njo1NlrOH5rkOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo1Njo1NlrOH5rkOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0NDY2NA==", "bodyText": "Maybe we can move this out to a method like shouldExport. It gets a bit out of hand", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530244664", "createdAt": "2020-11-25T09:56:56Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/exporter/stream/ExporterDirector.java", "diffHunk": "@@ -235,7 +256,7 @@ private void skipRecord(final LoggedEvent currentEvent) {\n   }\n \n   private void readNextEvent() {\n-    if (isOpened.get() && logStreamReader.hasNext() && !inExportingPhase) {\n+    if (isOpened.get() && logStreamReader.hasNext() && !inExportingPhase && !isPaused) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTU2NDYzOnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDowMDowMFrOH5rswQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDoyNjoyNFrOH6VINQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0Njg0OQ==", "bodyText": "We probably also want to have one endpoint to pause everything right?", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530246849", "createdAt": "2020-11-25T10:00:00Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminService.java", "diffHunk": "@@ -17,6 +17,12 @@\n   /** Request a partition to resume its StreamProcessor */\n   void resumeStreamProcessing();\n \n+  /** Request a partition to pause exporting */\n+  void pauseExporting();\n+\n+  /** Request a partition to resume exporting */\n+  void resumeExporting();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkxNjE3Ng==", "bodyText": "Do we want that? prepareUpgrade does pause all.", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530916176", "createdAt": "2020-11-26T10:11:42Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminService.java", "diffHunk": "@@ -17,6 +17,12 @@\n   /** Request a partition to resume its StreamProcessor */\n   void resumeStreamProcessing();\n \n+  /** Request a partition to pause exporting */\n+  void pauseExporting();\n+\n+  /** Request a partition to resume exporting */\n+  void resumeExporting();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0Njg0OQ=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkyNTYyMQ==", "bodyText": "Yeah might be enough thanks", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530925621", "createdAt": "2020-11-26T10:26:24Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminService.java", "diffHunk": "@@ -17,6 +17,12 @@\n   /** Request a partition to resume its StreamProcessor */\n   void resumeStreamProcessing();\n \n+  /** Request a partition to pause exporting */\n+  void pauseExporting();\n+\n+  /** Request a partition to resume exporting */\n+  void resumeExporting();\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0Njg0OQ=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjU2NDM4OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDoxMToyMFrOH51JkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMzo1NToxM1rOH6cZ6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwMTY4MA==", "bodyText": "So we have a optional in a future? sounds like duplicated complexity \ud83e\udd14", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530401680", "createdAt": "2020-11-25T14:11:20Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -83,16 +96,23 @@ public void prepareForUpgrade() {\n \n   private CompletableFuture<PartitionStatus> getPartitionStatus(final ZeebePartition partition) {\n     final CompletableFuture<PartitionStatus> partitionStatus = new CompletableFuture<>();\n-    getStreamProcessor(partition)\n-        .onComplete(\n-            (streamProcessor, throwable) -> {\n-              if (throwable != null) {\n-                partitionStatus.completeExceptionally(throwable);\n+    final var streamProcessorFuture = toCompletableFuture(partition.getStreamProcessor());\n+    final var exporterDirectorFuture = toCompletableFuture(partition.getExporterDirector());\n+    CompletableFuture.allOf(streamProcessorFuture, exporterDirectorFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n                 return;\n               }\n-              streamProcessor.ifPresentOrElse(\n-                  sp -> getLeaderPartitionStatus(partition, sp, partitionStatus),\n-                  () -> getFollowerPartitionStatus(partition, partitionStatus));\n+              final var streamProcessor = streamProcessorFuture.join();\n+              final var exporterDirector = exporterDirectorFuture.join();\n+              if (streamProcessor.isPresent() && exporterDirector.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkxMzkyNw==", "bodyText": "It's optional because followers doesn't have streamProcessor.", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530913927", "createdAt": "2020-11-26T10:08:14Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -83,16 +96,23 @@ public void prepareForUpgrade() {\n \n   private CompletableFuture<PartitionStatus> getPartitionStatus(final ZeebePartition partition) {\n     final CompletableFuture<PartitionStatus> partitionStatus = new CompletableFuture<>();\n-    getStreamProcessor(partition)\n-        .onComplete(\n-            (streamProcessor, throwable) -> {\n-              if (throwable != null) {\n-                partitionStatus.completeExceptionally(throwable);\n+    final var streamProcessorFuture = toCompletableFuture(partition.getStreamProcessor());\n+    final var exporterDirectorFuture = toCompletableFuture(partition.getExporterDirector());\n+    CompletableFuture.allOf(streamProcessorFuture, exporterDirectorFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n                 return;\n               }\n-              streamProcessor.ifPresentOrElse(\n-                  sp -> getLeaderPartitionStatus(partition, sp, partitionStatus),\n-                  () -> getFollowerPartitionStatus(partition, partitionStatus));\n+              final var streamProcessor = streamProcessorFuture.join();\n+              final var exporterDirector = exporterDirectorFuture.join();\n+              if (streamProcessor.isPresent() && exporterDirector.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwMTY4MA=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAyNDY4NA==", "bodyText": "but then it can be just null not ? \ud83d\ude05 Idk just have the feeling it is unnecessary", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531024684", "createdAt": "2020-11-26T13:20:59Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -83,16 +96,23 @@ public void prepareForUpgrade() {\n \n   private CompletableFuture<PartitionStatus> getPartitionStatus(final ZeebePartition partition) {\n     final CompletableFuture<PartitionStatus> partitionStatus = new CompletableFuture<>();\n-    getStreamProcessor(partition)\n-        .onComplete(\n-            (streamProcessor, throwable) -> {\n-              if (throwable != null) {\n-                partitionStatus.completeExceptionally(throwable);\n+    final var streamProcessorFuture = toCompletableFuture(partition.getStreamProcessor());\n+    final var exporterDirectorFuture = toCompletableFuture(partition.getExporterDirector());\n+    CompletableFuture.allOf(streamProcessorFuture, exporterDirectorFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n                 return;\n               }\n-              streamProcessor.ifPresentOrElse(\n-                  sp -> getLeaderPartitionStatus(partition, sp, partitionStatus),\n-                  () -> getFollowerPartitionStatus(partition, partitionStatus));\n+              final var streamProcessor = streamProcessorFuture.join();\n+              final var exporterDirector = exporterDirectorFuture.join();\n+              if (streamProcessor.isPresent() && exporterDirector.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwMTY4MA=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAzMDU2Nw==", "bodyText": "It can be null. Then instead of\nif(streamProcessor.isPresent() && exporterDirector.isPresent())\nWe would write if(streamProcessor != null && exporterDirector != null) . How is that better? Also I thought we want to use Optional in such cases.", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531030567", "createdAt": "2020-11-26T13:30:32Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -83,16 +96,23 @@ public void prepareForUpgrade() {\n \n   private CompletableFuture<PartitionStatus> getPartitionStatus(final ZeebePartition partition) {\n     final CompletableFuture<PartitionStatus> partitionStatus = new CompletableFuture<>();\n-    getStreamProcessor(partition)\n-        .onComplete(\n-            (streamProcessor, throwable) -> {\n-              if (throwable != null) {\n-                partitionStatus.completeExceptionally(throwable);\n+    final var streamProcessorFuture = toCompletableFuture(partition.getStreamProcessor());\n+    final var exporterDirectorFuture = toCompletableFuture(partition.getExporterDirector());\n+    CompletableFuture.allOf(streamProcessorFuture, exporterDirectorFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n                 return;\n               }\n-              streamProcessor.ifPresentOrElse(\n-                  sp -> getLeaderPartitionStatus(partition, sp, partitionStatus),\n-                  () -> getFollowerPartitionStatus(partition, partitionStatus));\n+              final var streamProcessor = streamProcessorFuture.join();\n+              final var exporterDirector = exporterDirectorFuture.join();\n+              if (streamProcessor.isPresent() && exporterDirector.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwMTY4MA=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAzNDIwMw==", "bodyText": "Yeah to use methods like .orElse or ifPresentThen etc but just to check whether is present I see no point in creating two separate objects for it. Not a fan of it.", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531034203", "createdAt": "2020-11-26T13:36:55Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -83,16 +96,23 @@ public void prepareForUpgrade() {\n \n   private CompletableFuture<PartitionStatus> getPartitionStatus(final ZeebePartition partition) {\n     final CompletableFuture<PartitionStatus> partitionStatus = new CompletableFuture<>();\n-    getStreamProcessor(partition)\n-        .onComplete(\n-            (streamProcessor, throwable) -> {\n-              if (throwable != null) {\n-                partitionStatus.completeExceptionally(throwable);\n+    final var streamProcessorFuture = toCompletableFuture(partition.getStreamProcessor());\n+    final var exporterDirectorFuture = toCompletableFuture(partition.getExporterDirector());\n+    CompletableFuture.allOf(streamProcessorFuture, exporterDirectorFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n                 return;\n               }\n-              streamProcessor.ifPresentOrElse(\n-                  sp -> getLeaderPartitionStatus(partition, sp, partitionStatus),\n-                  () -> getFollowerPartitionStatus(partition, partitionStatus));\n+              final var streamProcessor = streamProcessorFuture.join();\n+              final var exporterDirector = exporterDirectorFuture.join();\n+              if (streamProcessor.isPresent() && exporterDirector.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwMTY4MA=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA0NDg0Mw==", "bodyText": "You can keep it but it just wanted to mention this.", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531044843", "createdAt": "2020-11-26T13:55:13Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -83,16 +96,23 @@ public void prepareForUpgrade() {\n \n   private CompletableFuture<PartitionStatus> getPartitionStatus(final ZeebePartition partition) {\n     final CompletableFuture<PartitionStatus> partitionStatus = new CompletableFuture<>();\n-    getStreamProcessor(partition)\n-        .onComplete(\n-            (streamProcessor, throwable) -> {\n-              if (throwable != null) {\n-                partitionStatus.completeExceptionally(throwable);\n+    final var streamProcessorFuture = toCompletableFuture(partition.getStreamProcessor());\n+    final var exporterDirectorFuture = toCompletableFuture(partition.getExporterDirector());\n+    CompletableFuture.allOf(streamProcessorFuture, exporterDirectorFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n                 return;\n               }\n-              streamProcessor.ifPresentOrElse(\n-                  sp -> getLeaderPartitionStatus(partition, sp, partitionStatus),\n-                  () -> getFollowerPartitionStatus(partition, partitionStatus));\n+              final var streamProcessor = streamProcessorFuture.join();\n+              final var exporterDirector = exporterDirectorFuture.join();\n+              if (streamProcessor.isPresent() && exporterDirector.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwMTY4MA=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjU3NDIwOnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDoxMzo0MFrOH51PkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDoxNjozOFrOH51XnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwMzIxNg==", "bodyText": "Normally it is wise to use enums for that. This would be more future proven. What are you doing if we add a new case like, stopped, canceled, interrupted.", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530403216", "createdAt": "2020-11-25T14:13:40Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -107,64 +127,77 @@ private void getFollowerPartitionStatus(\n   private void getLeaderPartitionStatus(\n       final ZeebePartition partition,\n       final StreamProcessor streamProcessor,\n+      final ExporterDirector exporterDirector,\n       final CompletableFuture<PartitionStatus> partitionStatus) {\n-    final var positionFuture = streamProcessor.getLastProcessedPositionAsync();\n-    positionFuture.onComplete(\n-        (processedPosition, positionRetrieveError) -> {\n-          if (positionRetrieveError != null) {\n-            partitionStatus.completeExceptionally(positionRetrieveError);\n-            return;\n-          }\n+    final var positionFuture = toCompletableFuture(streamProcessor.getLastProcessedPositionAsync());\n+    final var currentPhaseFuture = toCompletableFuture(streamProcessor.getCurrentPhase());\n+    final var exporterPhaseFuture = toCompletableFuture(exporterDirector.isExportingPaused());\n+    final var exporterPosition = exporterDirector.getState().getLowestPosition();\n+    final var snapshotId = getSnapshotId(partition);\n+    final var processedPositionInSnapshot =\n+        snapshotId\n+            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n+            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n+            .orElse(null);\n+\n+    CompletableFuture.allOf(positionFuture, currentPhaseFuture, exporterPhaseFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n+                return;\n+              }\n+              final var processedPosition = positionFuture.join();\n+              final var processorPhase = currentPhaseFuture.join();\n+              final var exporterPhase = exporterPhaseFuture.join() ? \"PAUSED\" : \"EXPORTING\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNTI3Ng==", "bodyText": "Would also be consistent with the processing phase, were we already have that.", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530405276", "createdAt": "2020-11-25T14:16:38Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -107,64 +127,77 @@ private void getFollowerPartitionStatus(\n   private void getLeaderPartitionStatus(\n       final ZeebePartition partition,\n       final StreamProcessor streamProcessor,\n+      final ExporterDirector exporterDirector,\n       final CompletableFuture<PartitionStatus> partitionStatus) {\n-    final var positionFuture = streamProcessor.getLastProcessedPositionAsync();\n-    positionFuture.onComplete(\n-        (processedPosition, positionRetrieveError) -> {\n-          if (positionRetrieveError != null) {\n-            partitionStatus.completeExceptionally(positionRetrieveError);\n-            return;\n-          }\n+    final var positionFuture = toCompletableFuture(streamProcessor.getLastProcessedPositionAsync());\n+    final var currentPhaseFuture = toCompletableFuture(streamProcessor.getCurrentPhase());\n+    final var exporterPhaseFuture = toCompletableFuture(exporterDirector.isExportingPaused());\n+    final var exporterPosition = exporterDirector.getState().getLowestPosition();\n+    final var snapshotId = getSnapshotId(partition);\n+    final var processedPositionInSnapshot =\n+        snapshotId\n+            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n+            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n+            .orElse(null);\n+\n+    CompletableFuture.allOf(positionFuture, currentPhaseFuture, exporterPhaseFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n+                return;\n+              }\n+              final var processedPosition = positionFuture.join();\n+              final var processorPhase = currentPhaseFuture.join();\n+              final var exporterPhase = exporterPhaseFuture.join() ? \"PAUSED\" : \"EXPORTING\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwMzIxNg=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjU4MzI4OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDoxNTo0M1rOH51VIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDoxNTo0M1rOH51VIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNDY0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n          \n          \n            \n                        .flatMap(FileBasedSnapshotMetadata::ofFileName)", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530404640", "createdAt": "2020-11-25T14:15:43Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -107,64 +127,77 @@ private void getFollowerPartitionStatus(\n   private void getLeaderPartitionStatus(\n       final ZeebePartition partition,\n       final StreamProcessor streamProcessor,\n+      final ExporterDirector exporterDirector,\n       final CompletableFuture<PartitionStatus> partitionStatus) {\n-    final var positionFuture = streamProcessor.getLastProcessedPositionAsync();\n-    positionFuture.onComplete(\n-        (processedPosition, positionRetrieveError) -> {\n-          if (positionRetrieveError != null) {\n-            partitionStatus.completeExceptionally(positionRetrieveError);\n-            return;\n-          }\n+    final var positionFuture = toCompletableFuture(streamProcessor.getLastProcessedPositionAsync());\n+    final var currentPhaseFuture = toCompletableFuture(streamProcessor.getCurrentPhase());\n+    final var exporterPhaseFuture = toCompletableFuture(exporterDirector.isExportingPaused());\n+    final var exporterPosition = exporterDirector.getState().getLowestPosition();\n+    final var snapshotId = getSnapshotId(partition);\n+    final var processedPositionInSnapshot =\n+        snapshotId\n+            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjYwMjY3OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDoxOTo0NlrOH51g9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDoyNTo1OVrOH6VHQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNzY3MQ==", "bodyText": "I could swear that we had this functionality before somewhere :D", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530407671", "createdAt": "2020-11-25T14:19:46Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -107,64 +127,77 @@ private void getFollowerPartitionStatus(\n   private void getLeaderPartitionStatus(\n       final ZeebePartition partition,\n       final StreamProcessor streamProcessor,\n+      final ExporterDirector exporterDirector,\n       final CompletableFuture<PartitionStatus> partitionStatus) {\n-    final var positionFuture = streamProcessor.getLastProcessedPositionAsync();\n-    positionFuture.onComplete(\n-        (processedPosition, positionRetrieveError) -> {\n-          if (positionRetrieveError != null) {\n-            partitionStatus.completeExceptionally(positionRetrieveError);\n-            return;\n-          }\n+    final var positionFuture = toCompletableFuture(streamProcessor.getLastProcessedPositionAsync());\n+    final var currentPhaseFuture = toCompletableFuture(streamProcessor.getCurrentPhase());\n+    final var exporterPhaseFuture = toCompletableFuture(exporterDirector.isExportingPaused());\n+    final var exporterPosition = exporterDirector.getState().getLowestPosition();\n+    final var snapshotId = getSnapshotId(partition);\n+    final var processedPositionInSnapshot =\n+        snapshotId\n+            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n+            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n+            .orElse(null);\n+\n+    CompletableFuture.allOf(positionFuture, currentPhaseFuture, exporterPhaseFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n+                return;\n+              }\n+              final var processedPosition = positionFuture.join();\n+              final var processorPhase = currentPhaseFuture.join();\n+              final var exporterPhase = exporterPhaseFuture.join() ? \"PAUSED\" : \"EXPORTING\";\n+              final var status =\n+                  PartitionStatus.ofLeader(\n+                      processedPosition,\n+                      snapshotId.orElse(null),\n+                      processedPositionInSnapshot,\n+                      processorPhase,\n+                      exporterPhase,\n+                      exporterPosition);\n+              partitionStatus.complete(status);\n+            });\n+  }\n \n-          streamProcessor\n-              .getCurrentPhase()\n-              .onComplete(\n-                  (phase, phaseError) -> {\n-                    if (phaseError != null) {\n-                      partitionStatus.completeExceptionally(phaseError);\n-                      return;\n-                    }\n-\n-                    final var snapshotId = getSnapshotId(partition);\n-                    final var processedPositionInSnapshot =\n-                        snapshotId\n-                            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n-                            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n-                            .orElse(null);\n-                    final var status =\n-                        PartitionStatus.ofLeader(\n-                            processedPosition,\n-                            snapshotId.orElse(null),\n-                            processedPositionInSnapshot,\n-                            phase);\n-                    partitionStatus.complete(status);\n-                  });\n+  private <T> CompletableFuture<T> toCompletableFuture(final ActorFuture<T> actorFuture) {\n+    final CompletableFuture<T> future = new CompletableFuture<>();\n+    actorFuture.onComplete(\n+        (result, error) -> {\n+          if (error == null) {\n+            future.complete(result);\n+          } else {\n+            future.completeExceptionally(error);\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwODUzMQ==", "bodyText": "But why we need that actually?", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530408531", "createdAt": "2020-11-25T14:20:54Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -107,64 +127,77 @@ private void getFollowerPartitionStatus(\n   private void getLeaderPartitionStatus(\n       final ZeebePartition partition,\n       final StreamProcessor streamProcessor,\n+      final ExporterDirector exporterDirector,\n       final CompletableFuture<PartitionStatus> partitionStatus) {\n-    final var positionFuture = streamProcessor.getLastProcessedPositionAsync();\n-    positionFuture.onComplete(\n-        (processedPosition, positionRetrieveError) -> {\n-          if (positionRetrieveError != null) {\n-            partitionStatus.completeExceptionally(positionRetrieveError);\n-            return;\n-          }\n+    final var positionFuture = toCompletableFuture(streamProcessor.getLastProcessedPositionAsync());\n+    final var currentPhaseFuture = toCompletableFuture(streamProcessor.getCurrentPhase());\n+    final var exporterPhaseFuture = toCompletableFuture(exporterDirector.isExportingPaused());\n+    final var exporterPosition = exporterDirector.getState().getLowestPosition();\n+    final var snapshotId = getSnapshotId(partition);\n+    final var processedPositionInSnapshot =\n+        snapshotId\n+            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n+            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n+            .orElse(null);\n+\n+    CompletableFuture.allOf(positionFuture, currentPhaseFuture, exporterPhaseFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n+                return;\n+              }\n+              final var processedPosition = positionFuture.join();\n+              final var processorPhase = currentPhaseFuture.join();\n+              final var exporterPhase = exporterPhaseFuture.join() ? \"PAUSED\" : \"EXPORTING\";\n+              final var status =\n+                  PartitionStatus.ofLeader(\n+                      processedPosition,\n+                      snapshotId.orElse(null),\n+                      processedPositionInSnapshot,\n+                      processorPhase,\n+                      exporterPhase,\n+                      exporterPosition);\n+              partitionStatus.complete(status);\n+            });\n+  }\n \n-          streamProcessor\n-              .getCurrentPhase()\n-              .onComplete(\n-                  (phase, phaseError) -> {\n-                    if (phaseError != null) {\n-                      partitionStatus.completeExceptionally(phaseError);\n-                      return;\n-                    }\n-\n-                    final var snapshotId = getSnapshotId(partition);\n-                    final var processedPositionInSnapshot =\n-                        snapshotId\n-                            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n-                            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n-                            .orElse(null);\n-                    final var status =\n-                        PartitionStatus.ofLeader(\n-                            processedPosition,\n-                            snapshotId.orElse(null),\n-                            processedPositionInSnapshot,\n-                            phase);\n-                    partitionStatus.complete(status);\n-                  });\n+  private <T> CompletableFuture<T> toCompletableFuture(final ActorFuture<T> actorFuture) {\n+    final CompletableFuture<T> future = new CompletableFuture<>();\n+    actorFuture.onComplete(\n+        (result, error) -> {\n+          if (error == null) {\n+            future.complete(result);\n+          } else {\n+            future.completeExceptionally(error);\n+          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNzY3MQ=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwOTE2Nw==", "bodyText": "There is an actor.runOnCompletion(Collection<ActorFuture> futures);", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530409167", "createdAt": "2020-11-25T14:21:47Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -107,64 +127,77 @@ private void getFollowerPartitionStatus(\n   private void getLeaderPartitionStatus(\n       final ZeebePartition partition,\n       final StreamProcessor streamProcessor,\n+      final ExporterDirector exporterDirector,\n       final CompletableFuture<PartitionStatus> partitionStatus) {\n-    final var positionFuture = streamProcessor.getLastProcessedPositionAsync();\n-    positionFuture.onComplete(\n-        (processedPosition, positionRetrieveError) -> {\n-          if (positionRetrieveError != null) {\n-            partitionStatus.completeExceptionally(positionRetrieveError);\n-            return;\n-          }\n+    final var positionFuture = toCompletableFuture(streamProcessor.getLastProcessedPositionAsync());\n+    final var currentPhaseFuture = toCompletableFuture(streamProcessor.getCurrentPhase());\n+    final var exporterPhaseFuture = toCompletableFuture(exporterDirector.isExportingPaused());\n+    final var exporterPosition = exporterDirector.getState().getLowestPosition();\n+    final var snapshotId = getSnapshotId(partition);\n+    final var processedPositionInSnapshot =\n+        snapshotId\n+            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n+            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n+            .orElse(null);\n+\n+    CompletableFuture.allOf(positionFuture, currentPhaseFuture, exporterPhaseFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n+                return;\n+              }\n+              final var processedPosition = positionFuture.join();\n+              final var processorPhase = currentPhaseFuture.join();\n+              final var exporterPhase = exporterPhaseFuture.join() ? \"PAUSED\" : \"EXPORTING\";\n+              final var status =\n+                  PartitionStatus.ofLeader(\n+                      processedPosition,\n+                      snapshotId.orElse(null),\n+                      processedPositionInSnapshot,\n+                      processorPhase,\n+                      exporterPhase,\n+                      exporterPosition);\n+              partitionStatus.complete(status);\n+            });\n+  }\n \n-          streamProcessor\n-              .getCurrentPhase()\n-              .onComplete(\n-                  (phase, phaseError) -> {\n-                    if (phaseError != null) {\n-                      partitionStatus.completeExceptionally(phaseError);\n-                      return;\n-                    }\n-\n-                    final var snapshotId = getSnapshotId(partition);\n-                    final var processedPositionInSnapshot =\n-                        snapshotId\n-                            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n-                            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n-                            .orElse(null);\n-                    final var status =\n-                        PartitionStatus.ofLeader(\n-                            processedPosition,\n-                            snapshotId.orElse(null),\n-                            processedPositionInSnapshot,\n-                            phase);\n-                    partitionStatus.complete(status);\n-                  });\n+  private <T> CompletableFuture<T> toCompletableFuture(final ActorFuture<T> actorFuture) {\n+    final CompletableFuture<T> future = new CompletableFuture<>();\n+    actorFuture.onComplete(\n+        (result, error) -> {\n+          if (error == null) {\n+            future.complete(result);\n+          } else {\n+            future.completeExceptionally(error);\n+          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNzY3MQ=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkxNTQ2OQ==", "bodyText": "I don't know why when I tried to use actor.runOnCompletion(Collection<ActorFuture> futures) it did not work. It complained about types. But now I could make it work. I have now changed it to use actor futures. But honestly I don't like ActorFuture \ud83d\ude09", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530915469", "createdAt": "2020-11-26T10:10:33Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -107,64 +127,77 @@ private void getFollowerPartitionStatus(\n   private void getLeaderPartitionStatus(\n       final ZeebePartition partition,\n       final StreamProcessor streamProcessor,\n+      final ExporterDirector exporterDirector,\n       final CompletableFuture<PartitionStatus> partitionStatus) {\n-    final var positionFuture = streamProcessor.getLastProcessedPositionAsync();\n-    positionFuture.onComplete(\n-        (processedPosition, positionRetrieveError) -> {\n-          if (positionRetrieveError != null) {\n-            partitionStatus.completeExceptionally(positionRetrieveError);\n-            return;\n-          }\n+    final var positionFuture = toCompletableFuture(streamProcessor.getLastProcessedPositionAsync());\n+    final var currentPhaseFuture = toCompletableFuture(streamProcessor.getCurrentPhase());\n+    final var exporterPhaseFuture = toCompletableFuture(exporterDirector.isExportingPaused());\n+    final var exporterPosition = exporterDirector.getState().getLowestPosition();\n+    final var snapshotId = getSnapshotId(partition);\n+    final var processedPositionInSnapshot =\n+        snapshotId\n+            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n+            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n+            .orElse(null);\n+\n+    CompletableFuture.allOf(positionFuture, currentPhaseFuture, exporterPhaseFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n+                return;\n+              }\n+              final var processedPosition = positionFuture.join();\n+              final var processorPhase = currentPhaseFuture.join();\n+              final var exporterPhase = exporterPhaseFuture.join() ? \"PAUSED\" : \"EXPORTING\";\n+              final var status =\n+                  PartitionStatus.ofLeader(\n+                      processedPosition,\n+                      snapshotId.orElse(null),\n+                      processedPositionInSnapshot,\n+                      processorPhase,\n+                      exporterPhase,\n+                      exporterPosition);\n+              partitionStatus.complete(status);\n+            });\n+  }\n \n-          streamProcessor\n-              .getCurrentPhase()\n-              .onComplete(\n-                  (phase, phaseError) -> {\n-                    if (phaseError != null) {\n-                      partitionStatus.completeExceptionally(phaseError);\n-                      return;\n-                    }\n-\n-                    final var snapshotId = getSnapshotId(partition);\n-                    final var processedPositionInSnapshot =\n-                        snapshotId\n-                            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n-                            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n-                            .orElse(null);\n-                    final var status =\n-                        PartitionStatus.ofLeader(\n-                            processedPosition,\n-                            snapshotId.orElse(null),\n-                            processedPositionInSnapshot,\n-                            phase);\n-                    partitionStatus.complete(status);\n-                  });\n+  private <T> CompletableFuture<T> toCompletableFuture(final ActorFuture<T> actorFuture) {\n+    final CompletableFuture<T> future = new CompletableFuture<>();\n+    actorFuture.onComplete(\n+        (result, error) -> {\n+          if (error == null) {\n+            future.complete(result);\n+          } else {\n+            future.completeExceptionally(error);\n+          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNzY3MQ=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkyNTM3OQ==", "bodyText": "But honestly I don't like ActorFuture wink\n\nThis is a different topic \ud83d\ude06", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530925379", "createdAt": "2020-11-26T10:25:59Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -107,64 +127,77 @@ private void getFollowerPartitionStatus(\n   private void getLeaderPartitionStatus(\n       final ZeebePartition partition,\n       final StreamProcessor streamProcessor,\n+      final ExporterDirector exporterDirector,\n       final CompletableFuture<PartitionStatus> partitionStatus) {\n-    final var positionFuture = streamProcessor.getLastProcessedPositionAsync();\n-    positionFuture.onComplete(\n-        (processedPosition, positionRetrieveError) -> {\n-          if (positionRetrieveError != null) {\n-            partitionStatus.completeExceptionally(positionRetrieveError);\n-            return;\n-          }\n+    final var positionFuture = toCompletableFuture(streamProcessor.getLastProcessedPositionAsync());\n+    final var currentPhaseFuture = toCompletableFuture(streamProcessor.getCurrentPhase());\n+    final var exporterPhaseFuture = toCompletableFuture(exporterDirector.isExportingPaused());\n+    final var exporterPosition = exporterDirector.getState().getLowestPosition();\n+    final var snapshotId = getSnapshotId(partition);\n+    final var processedPositionInSnapshot =\n+        snapshotId\n+            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n+            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n+            .orElse(null);\n+\n+    CompletableFuture.allOf(positionFuture, currentPhaseFuture, exporterPhaseFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n+                return;\n+              }\n+              final var processedPosition = positionFuture.join();\n+              final var processorPhase = currentPhaseFuture.join();\n+              final var exporterPhase = exporterPhaseFuture.join() ? \"PAUSED\" : \"EXPORTING\";\n+              final var status =\n+                  PartitionStatus.ofLeader(\n+                      processedPosition,\n+                      snapshotId.orElse(null),\n+                      processedPositionInSnapshot,\n+                      processorPhase,\n+                      exporterPhase,\n+                      exporterPosition);\n+              partitionStatus.complete(status);\n+            });\n+  }\n \n-          streamProcessor\n-              .getCurrentPhase()\n-              .onComplete(\n-                  (phase, phaseError) -> {\n-                    if (phaseError != null) {\n-                      partitionStatus.completeExceptionally(phaseError);\n-                      return;\n-                    }\n-\n-                    final var snapshotId = getSnapshotId(partition);\n-                    final var processedPositionInSnapshot =\n-                        snapshotId\n-                            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n-                            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n-                            .orElse(null);\n-                    final var status =\n-                        PartitionStatus.ofLeader(\n-                            processedPosition,\n-                            snapshotId.orElse(null),\n-                            processedPositionInSnapshot,\n-                            phase);\n-                    partitionStatus.complete(status);\n-                  });\n+  private <T> CompletableFuture<T> toCompletableFuture(final ActorFuture<T> actorFuture) {\n+    final CompletableFuture<T> future = new CompletableFuture<>();\n+    actorFuture.onComplete(\n+        (result, error) -> {\n+          if (error == null) {\n+            future.complete(result);\n+          } else {\n+            future.completeExceptionally(error);\n+          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNzY3MQ=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjY0NzMzOnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionProcessingState.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDoyOTozMFrOH518Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDoyOTozMFrOH518Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxNDY3OA==", "bodyText": "This is exact duplicates. Could we make it parameterized to reuse it?", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530414678", "createdAt": "2020-11-25T14:29:30Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionProcessingState.java", "diffHunk": "@@ -64,4 +67,37 @@ private void initProcessingStatus() {\n   public boolean shouldProcess() {\n     return isDiskSpaceAvailable() && !isProcessingPaused();\n   }\n+\n+  public boolean isExportingPaused() {\n+    return isExportingPaused;\n+  }\n+\n+  @SuppressWarnings({\"squid:S899\"})\n+  public void pauseExporting() throws IOException {\n+    final File persistedExporterPauseState = getPersistedExporterPauseState();\n+    persistedExporterPauseState.createNewFile();\n+    if (persistedExporterPauseState.exists()) {\n+      isExportingPaused = true;\n+    }\n+  }\n+\n+  public void resumeExporting() throws IOException {\n+    final File persistedExporterPauseState = getPersistedExporterPauseState();\n+    Files.deleteIfExists(persistedExporterPauseState.toPath());\n+    if (!persistedExporterPauseState.exists()) {\n+      isExportingPaused = false;\n+    }\n+  }\n+\n+  private File getPersistedExporterPauseState() {\n+    return raftPartition\n+        .dataDirectory()\n+        .toPath()\n+        .resolve(PERSISTED_EXPORTER_PAUSE_STATE_FILENAME)\n+        .toFile();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjY2NzUzOnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDozNDowNVrOH52I2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMzo0MDo1NVrOH6b5lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxNzg4Mg==", "bodyText": "Not sure whether I get this.\nWe first pause the exporting (which actually internally just persist the file), then we check whether there is a exporter and whether we should not export (which should always be the case i guess?!).\nMaybe it makes sense to rename the method so it is more clear what actually happens. We persist the pausing state and remove the check. I see no value in it?", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530417882", "createdAt": "2020-11-25T14:34:05Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -382,4 +383,42 @@ public void triggerSnapshot() {\n   public ActorFuture<Optional<StreamProcessor>> getStreamProcessor() {\n     return actor.call(() -> Optional.ofNullable(context.getStreamProcessor()));\n   }\n+\n+  public ActorFuture<Optional<ExporterDirector>> getExporterDirector() {\n+    return actor.call(() -> Optional.ofNullable(context.getExporterDirector()));\n+  }\n+\n+  public ActorFuture<Void> pauseExporting() {\n+    final CompletableActorFuture<Void> completed = new CompletableActorFuture<>();\n+    actor.call(\n+        () -> {\n+          try {\n+            context.pauseExporting();\n+\n+            if (context.getExporterDirector() != null && !context.shouldExport()) {\n+              context.getExporterDirector().pauseExporting().onComplete(completed);\n+            } else {\n+              completed.complete(null);\n+            }\n+          } catch (final IOException e) {\n+            LOG.error(\"Could not pause exporting\", e);\n+            completed.completeExceptionally(e);\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkyMzEyOA==", "bodyText": "The check is added as a safeguard incase persisting of the state was not successful. Do you think that is unnecessary?", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530923128", "createdAt": "2020-11-26T10:22:30Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -382,4 +383,42 @@ public void triggerSnapshot() {\n   public ActorFuture<Optional<StreamProcessor>> getStreamProcessor() {\n     return actor.call(() -> Optional.ofNullable(context.getStreamProcessor()));\n   }\n+\n+  public ActorFuture<Optional<ExporterDirector>> getExporterDirector() {\n+    return actor.call(() -> Optional.ofNullable(context.getExporterDirector()));\n+  }\n+\n+  public ActorFuture<Void> pauseExporting() {\n+    final CompletableActorFuture<Void> completed = new CompletableActorFuture<>();\n+    actor.call(\n+        () -> {\n+          try {\n+            context.pauseExporting();\n+\n+            if (context.getExporterDirector() != null && !context.shouldExport()) {\n+              context.getExporterDirector().pauseExporting().onComplete(completed);\n+            } else {\n+              completed.complete(null);\n+            }\n+          } catch (final IOException e) {\n+            LOG.error(\"Could not pause exporting\", e);\n+            completed.completeExceptionally(e);\n+          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxNzg4Mg=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAzNjQzMQ==", "bodyText": "So you actually want to check whether the persisting succeeded so maybe you check the return value of the method which is called persistPauseState", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531036431", "createdAt": "2020-11-26T13:40:40Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -382,4 +383,42 @@ public void triggerSnapshot() {\n   public ActorFuture<Optional<StreamProcessor>> getStreamProcessor() {\n     return actor.call(() -> Optional.ofNullable(context.getStreamProcessor()));\n   }\n+\n+  public ActorFuture<Optional<ExporterDirector>> getExporterDirector() {\n+    return actor.call(() -> Optional.ofNullable(context.getExporterDirector()));\n+  }\n+\n+  public ActorFuture<Void> pauseExporting() {\n+    final CompletableActorFuture<Void> completed = new CompletableActorFuture<>();\n+    actor.call(\n+        () -> {\n+          try {\n+            context.pauseExporting();\n+\n+            if (context.getExporterDirector() != null && !context.shouldExport()) {\n+              context.getExporterDirector().pauseExporting().onComplete(completed);\n+            } else {\n+              completed.complete(null);\n+            }\n+          } catch (final IOException e) {\n+            LOG.error(\"Could not pause exporting\", e);\n+            completed.completeExceptionally(e);\n+          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxNzg4Mg=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAzNjU2Ng==", "bodyText": "Then it is I think more clear. Do you agree?", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531036566", "createdAt": "2020-11-26T13:40:55Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -382,4 +383,42 @@ public void triggerSnapshot() {\n   public ActorFuture<Optional<StreamProcessor>> getStreamProcessor() {\n     return actor.call(() -> Optional.ofNullable(context.getStreamProcessor()));\n   }\n+\n+  public ActorFuture<Optional<ExporterDirector>> getExporterDirector() {\n+    return actor.call(() -> Optional.ofNullable(context.getExporterDirector()));\n+  }\n+\n+  public ActorFuture<Void> pauseExporting() {\n+    final CompletableActorFuture<Void> completed = new CompletableActorFuture<>();\n+    actor.call(\n+        () -> {\n+          try {\n+            context.pauseExporting();\n+\n+            if (context.getExporterDirector() != null && !context.shouldExport()) {\n+              context.getExporterDirector().pauseExporting().onComplete(completed);\n+            } else {\n+              completed.complete(null);\n+            }\n+          } catch (final IOException e) {\n+            LOG.error(\"Could not pause exporting\", e);\n+            completed.completeExceptionally(e);\n+          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxNzg4Mg=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjY3NDkwOnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/steps/ExporterDirectorPartitionStep.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDozNTozMFrOH52NUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDozNjoyM1rOH6Vg2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxOTAyNg==", "bodyText": "Is this maybe problematic? That we might have an race condition where we can export maybe one record because we are so fast?", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530419026", "createdAt": "2020-11-25T14:35:30Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/steps/ExporterDirectorPartitionStep.java", "diffHunk": "@@ -34,7 +34,14 @@\n \n     final ExporterDirector director = new ExporterDirector(exporterCtx);\n     context.setExporterDirector(director);\n-    return director.startAsync(context.getScheduler());\n+    final var started = director.startAsync(context.getScheduler());\n+    started.onComplete(\n+        (nothing, error) -> {\n+          if (error == null && !context.shouldExport()) {\n+            director.pauseExporting();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxOTMyMA==", "bodyText": "Might make sense to give the state as parameter of the startAsync?", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530419320", "createdAt": "2020-11-25T14:35:53Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/steps/ExporterDirectorPartitionStep.java", "diffHunk": "@@ -34,7 +34,14 @@\n \n     final ExporterDirector director = new ExporterDirector(exporterCtx);\n     context.setExporterDirector(director);\n-    return director.startAsync(context.getScheduler());\n+    final var started = director.startAsync(context.getScheduler());\n+    started.onComplete(\n+        (nothing, error) -> {\n+          if (error == null && !context.shouldExport()) {\n+            director.pauseExporting();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxOTAyNg=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkyNDc1NA==", "bodyText": "That's right. I pass it as an argument to the constructor now. This will be a problem in StreamProcessor as well, because it also follows the same pattern.", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530924754", "createdAt": "2020-11-26T10:25:01Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/steps/ExporterDirectorPartitionStep.java", "diffHunk": "@@ -34,7 +34,14 @@\n \n     final ExporterDirector director = new ExporterDirector(exporterCtx);\n     context.setExporterDirector(director);\n-    return director.startAsync(context.getScheduler());\n+    final var started = director.startAsync(context.getScheduler());\n+    started.onComplete(\n+        (nothing, error) -> {\n+          if (error == null && !context.shouldExport()) {\n+            director.pauseExporting();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxOTAyNg=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkyNjcwMw==", "bodyText": "Do you want to create a follow up issue for that? Or do you want to do it in this pr?", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530926703", "createdAt": "2020-11-26T10:28:04Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/steps/ExporterDirectorPartitionStep.java", "diffHunk": "@@ -34,7 +34,14 @@\n \n     final ExporterDirector director = new ExporterDirector(exporterCtx);\n     context.setExporterDirector(director);\n-    return director.startAsync(context.getScheduler());\n+    final var started = director.startAsync(context.getScheduler());\n+    started.onComplete(\n+        (nothing, error) -> {\n+          if (error == null && !context.shouldExport()) {\n+            director.pauseExporting();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxOTAyNg=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMTkzMQ==", "bodyText": "I will create a follow up issue.", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530931931", "createdAt": "2020-11-26T10:36:23Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/steps/ExporterDirectorPartitionStep.java", "diffHunk": "@@ -34,7 +34,14 @@\n \n     final ExporterDirector director = new ExporterDirector(exporterCtx);\n     context.setExporterDirector(director);\n-    return director.startAsync(context.getScheduler());\n+    final var started = director.startAsync(context.getScheduler());\n+    started.onComplete(\n+        (nothing, error) -> {\n+          if (error == null && !context.shouldExport()) {\n+            director.pauseExporting();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxOTAyNg=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjY3OTEwOnYy", "diffSide": "RIGHT", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDozNjoyMVrOH52P7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDozNjoyMVrOH52P7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxOTY5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                clientRule.createSingleJob(\"test\");", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530419695", "createdAt": "2020-11-25T14:36:21Z", "author": {"login": "Zelldon"}, "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceTest.java", "diffHunk": "@@ -79,7 +79,33 @@ public void shouldUnPauseStreamProcessorWhenRequested() {\n   }\n \n   @Test\n-  public void shouldPauseStreamProcessorAndTakeSnapshotWhenPrepareUgrade() {\n+  public void shouldPauseExporterWhenRequested() {\n+    // given\n+    clientRule.createSingleJob(\"test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNjY4MTE0OnYy", "diffSide": "RIGHT", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDozNjo1MlrOH52RRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDozNzoxNFrOH52SgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMDAzNg==", "bodyText": "what is the matter of this? We never assert whether we have seen this record?", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530420036", "createdAt": "2020-11-25T14:36:52Z", "author": {"login": "Zelldon"}, "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceTest.java", "diffHunk": "@@ -79,7 +79,33 @@ public void shouldUnPauseStreamProcessorWhenRequested() {\n   }\n \n   @Test\n-  public void shouldPauseStreamProcessorAndTakeSnapshotWhenPrepareUgrade() {\n+  public void shouldPauseExporterWhenRequested() {\n+    // given\n+    clientRule.createSingleJob(\"test\");\n+\n+    // when\n+    leaderAdminService.pauseExporting();\n+\n+    // then\n+    assertExporterPhase(leaderAdminService, \"PAUSED\");\n+  }\n+\n+  @Test\n+  public void shouldResumeExportingWhenRequested() {\n+    // given\n+    clientRule.createSingleJob(\"test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMDM1Mg==", "bodyText": "Would be nice to have such a verification", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530420352", "createdAt": "2020-11-25T14:37:14Z", "author": {"login": "Zelldon"}, "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceTest.java", "diffHunk": "@@ -79,7 +79,33 @@ public void shouldUnPauseStreamProcessorWhenRequested() {\n   }\n \n   @Test\n-  public void shouldPauseStreamProcessorAndTakeSnapshotWhenPrepareUgrade() {\n+  public void shouldPauseExporterWhenRequested() {\n+    // given\n+    clientRule.createSingleJob(\"test\");\n+\n+    // when\n+    leaderAdminService.pauseExporting();\n+\n+    // then\n+    assertExporterPhase(leaderAdminService, \"PAUSED\");\n+  }\n+\n+  @Test\n+  public void shouldResumeExportingWhenRequested() {\n+    // given\n+    clientRule.createSingleJob(\"test\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMDAzNg=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDc2MTY2OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMzo1Nzo0NFrOH6cfvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNDowNjo1MlrOH6c1nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA0NjMzMw==", "bodyText": "These cast are not necessary or?", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531046333", "createdAt": "2020-11-26T13:57:44Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -96,24 +96,24 @@ public void prepareForUpgrade() {\n \n   private CompletableFuture<PartitionStatus> getPartitionStatus(final ZeebePartition partition) {\n     final CompletableFuture<PartitionStatus> partitionStatus = new CompletableFuture<>();\n-    final var streamProcessorFuture = toCompletableFuture(partition.getStreamProcessor());\n-    final var exporterDirectorFuture = toCompletableFuture(partition.getExporterDirector());\n-    CompletableFuture.allOf(streamProcessorFuture, exporterDirectorFuture)\n-        .whenComplete(\n-            (nothing, error) -> {\n-              if (error != null) {\n-                partitionStatus.completeExceptionally(error);\n-                return;\n-              }\n-              final var streamProcessor = streamProcessorFuture.join();\n-              final var exporterDirector = exporterDirectorFuture.join();\n-              if (streamProcessor.isPresent() && exporterDirector.isPresent()) {\n-                getLeaderPartitionStatus(\n-                    partition, streamProcessor.get(), exporterDirector.get(), partitionStatus);\n-              } else {\n-                getFollowerPartitionStatus(partition, partitionStatus);\n-              }\n-            });\n+    final var streamProcessorFuture = partition.getStreamProcessor();\n+    final var exporterDirectorFuture = partition.getExporterDirector();\n+    actor.runOnCompletion(\n+        List.of((ActorFuture) streamProcessorFuture, (ActorFuture) exporterDirectorFuture),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9f0eed8c01a38e11a74d8132e045016ec50c435"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA0OTYwOQ==", "bodyText": "Yes. They are necessary.", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531049609", "createdAt": "2020-11-26T14:03:09Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -96,24 +96,24 @@ public void prepareForUpgrade() {\n \n   private CompletableFuture<PartitionStatus> getPartitionStatus(final ZeebePartition partition) {\n     final CompletableFuture<PartitionStatus> partitionStatus = new CompletableFuture<>();\n-    final var streamProcessorFuture = toCompletableFuture(partition.getStreamProcessor());\n-    final var exporterDirectorFuture = toCompletableFuture(partition.getExporterDirector());\n-    CompletableFuture.allOf(streamProcessorFuture, exporterDirectorFuture)\n-        .whenComplete(\n-            (nothing, error) -> {\n-              if (error != null) {\n-                partitionStatus.completeExceptionally(error);\n-                return;\n-              }\n-              final var streamProcessor = streamProcessorFuture.join();\n-              final var exporterDirector = exporterDirectorFuture.join();\n-              if (streamProcessor.isPresent() && exporterDirector.isPresent()) {\n-                getLeaderPartitionStatus(\n-                    partition, streamProcessor.get(), exporterDirector.get(), partitionStatus);\n-              } else {\n-                getFollowerPartitionStatus(partition, partitionStatus);\n-              }\n-            });\n+    final var streamProcessorFuture = partition.getStreamProcessor();\n+    final var exporterDirectorFuture = partition.getExporterDirector();\n+    actor.runOnCompletion(\n+        List.of((ActorFuture) streamProcessorFuture, (ActorFuture) exporterDirectorFuture),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA0NjMzMw=="}, "originalCommit": {"oid": "e9f0eed8c01a38e11a74d8132e045016ec50c435"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA0OTkwOA==", "bodyText": "why is that ? \ud83e\udd14", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531049908", "createdAt": "2020-11-26T14:03:40Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -96,24 +96,24 @@ public void prepareForUpgrade() {\n \n   private CompletableFuture<PartitionStatus> getPartitionStatus(final ZeebePartition partition) {\n     final CompletableFuture<PartitionStatus> partitionStatus = new CompletableFuture<>();\n-    final var streamProcessorFuture = toCompletableFuture(partition.getStreamProcessor());\n-    final var exporterDirectorFuture = toCompletableFuture(partition.getExporterDirector());\n-    CompletableFuture.allOf(streamProcessorFuture, exporterDirectorFuture)\n-        .whenComplete(\n-            (nothing, error) -> {\n-              if (error != null) {\n-                partitionStatus.completeExceptionally(error);\n-                return;\n-              }\n-              final var streamProcessor = streamProcessorFuture.join();\n-              final var exporterDirector = exporterDirectorFuture.join();\n-              if (streamProcessor.isPresent() && exporterDirector.isPresent()) {\n-                getLeaderPartitionStatus(\n-                    partition, streamProcessor.get(), exporterDirector.get(), partitionStatus);\n-              } else {\n-                getFollowerPartitionStatus(partition, partitionStatus);\n-              }\n-            });\n+    final var streamProcessorFuture = partition.getStreamProcessor();\n+    final var exporterDirectorFuture = partition.getExporterDirector();\n+    actor.runOnCompletion(\n+        List.of((ActorFuture) streamProcessorFuture, (ActorFuture) exporterDirectorFuture),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA0NjMzMw=="}, "originalCommit": {"oid": "e9f0eed8c01a38e11a74d8132e045016ec50c435"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA1MTAwNg==", "bodyText": "ah I see because Optional<Exporter> and Optional<StreamProcessor>", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531051006", "createdAt": "2020-11-26T14:05:29Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -96,24 +96,24 @@ public void prepareForUpgrade() {\n \n   private CompletableFuture<PartitionStatus> getPartitionStatus(final ZeebePartition partition) {\n     final CompletableFuture<PartitionStatus> partitionStatus = new CompletableFuture<>();\n-    final var streamProcessorFuture = toCompletableFuture(partition.getStreamProcessor());\n-    final var exporterDirectorFuture = toCompletableFuture(partition.getExporterDirector());\n-    CompletableFuture.allOf(streamProcessorFuture, exporterDirectorFuture)\n-        .whenComplete(\n-            (nothing, error) -> {\n-              if (error != null) {\n-                partitionStatus.completeExceptionally(error);\n-                return;\n-              }\n-              final var streamProcessor = streamProcessorFuture.join();\n-              final var exporterDirector = exporterDirectorFuture.join();\n-              if (streamProcessor.isPresent() && exporterDirector.isPresent()) {\n-                getLeaderPartitionStatus(\n-                    partition, streamProcessor.get(), exporterDirector.get(), partitionStatus);\n-              } else {\n-                getFollowerPartitionStatus(partition, partitionStatus);\n-              }\n-            });\n+    final var streamProcessorFuture = partition.getStreamProcessor();\n+    final var exporterDirectorFuture = partition.getExporterDirector();\n+    actor.runOnCompletion(\n+        List.of((ActorFuture) streamProcessorFuture, (ActorFuture) exporterDirectorFuture),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA0NjMzMw=="}, "originalCommit": {"oid": "e9f0eed8c01a38e11a74d8132e045016ec50c435"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA1MTkzNQ==", "bodyText": "Without it I get following error\nRequired type:\nCollection\n<ActorFuture<T>>\nProvided:\nList\n<ActorFuture<? extends Optional<? extends Actor>>>\nreason: Incompatible equality constraint: Optional<ExporterDirector> and Optional<StreamProcessor>", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531051935", "createdAt": "2020-11-26T14:06:52Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -96,24 +96,24 @@ public void prepareForUpgrade() {\n \n   private CompletableFuture<PartitionStatus> getPartitionStatus(final ZeebePartition partition) {\n     final CompletableFuture<PartitionStatus> partitionStatus = new CompletableFuture<>();\n-    final var streamProcessorFuture = toCompletableFuture(partition.getStreamProcessor());\n-    final var exporterDirectorFuture = toCompletableFuture(partition.getExporterDirector());\n-    CompletableFuture.allOf(streamProcessorFuture, exporterDirectorFuture)\n-        .whenComplete(\n-            (nothing, error) -> {\n-              if (error != null) {\n-                partitionStatus.completeExceptionally(error);\n-                return;\n-              }\n-              final var streamProcessor = streamProcessorFuture.join();\n-              final var exporterDirector = exporterDirectorFuture.join();\n-              if (streamProcessor.isPresent() && exporterDirector.isPresent()) {\n-                getLeaderPartitionStatus(\n-                    partition, streamProcessor.get(), exporterDirector.get(), partitionStatus);\n-              } else {\n-                getFollowerPartitionStatus(partition, partitionStatus);\n-              }\n-            });\n+    final var streamProcessorFuture = partition.getStreamProcessor();\n+    final var exporterDirectorFuture = partition.getExporterDirector();\n+    actor.runOnCompletion(\n+        List.of((ActorFuture) streamProcessorFuture, (ActorFuture) exporterDirectorFuture),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA0NjMzMw=="}, "originalCommit": {"oid": "e9f0eed8c01a38e11a74d8132e045016ec50c435"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 62, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}