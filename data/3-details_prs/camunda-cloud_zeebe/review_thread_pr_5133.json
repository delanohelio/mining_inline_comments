{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NTE3MDI0", "number": 5133, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMToxNDoyNlrOEWLMyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODoyMjozNVrOEWssrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjg3NjI1OnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMToxNDoyNlrOG9V-Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDowODo1OFrOG9bVGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3NjMzOA==", "bodyText": "Suggestion: you can use snapshotChunkImpl.tryWrap", "url": "https://github.com/camunda-cloud/zeebe/pull/5133#discussion_r466976338", "createdAt": "2020-08-07T11:14:26Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -185,8 +189,17 @@ private void addSnapshotListener() {\n                   .build()));\n     }\n \n-    final var snapshotChunk = new SnapshotChunkImpl();\n-    snapshotChunk.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());\n+    SnapshotChunk snapshotChunk;\n+    try {\n+      final var snapshotChunkImpl = new SnapshotChunkImpl();\n+      snapshotChunkImpl.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "270b591b47bcd45b65544962afd35a2d195cc018"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA1ODAzOQ==", "bodyText": "The way tryWrap is implemented would most likely work here, though it would also normally reject messages with the wrong schema ID or versions...still works but I feel for the wrong reason (as it doesn't explicitly fail if it cannot be parsed, just if some header properties are wrong). wdyt?", "url": "https://github.com/camunda-cloud/zeebe/pull/5133#discussion_r467058039", "createdAt": "2020-08-07T13:58:23Z", "author": {"login": "npepinpe"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -185,8 +189,17 @@ private void addSnapshotListener() {\n                   .build()));\n     }\n \n-    final var snapshotChunk = new SnapshotChunkImpl();\n-    snapshotChunk.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());\n+    SnapshotChunk snapshotChunk;\n+    try {\n+      final var snapshotChunkImpl = new SnapshotChunkImpl();\n+      snapshotChunkImpl.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3NjMzOA=="}, "originalCommit": {"oid": "270b591b47bcd45b65544962afd35a2d195cc018"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA2NDA5MA==", "bodyText": "Ya. In this case, it does not make much difference. Might be useful for future-proofing.", "url": "https://github.com/camunda-cloud/zeebe/pull/5133#discussion_r467064090", "createdAt": "2020-08-07T14:08:58Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -185,8 +189,17 @@ private void addSnapshotListener() {\n                   .build()));\n     }\n \n-    final var snapshotChunk = new SnapshotChunkImpl();\n-    snapshotChunk.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());\n+    SnapshotChunk snapshotChunk;\n+    try {\n+      final var snapshotChunkImpl = new SnapshotChunkImpl();\n+      snapshotChunkImpl.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk3NjMzOA=="}, "originalCommit": {"oid": "270b591b47bcd45b65544962afd35a2d195cc018"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjMwNjg5OnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODowNToyOFrOG-E4Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODowNToyOFrOG-E4Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc0NDc4Mg==", "bodyText": "Maybe we can have a legacy util class or something where we keep this code and can it remove it more easily. This might be also easier to track then.", "url": "https://github.com/camunda-cloud/zeebe/pull/5133#discussion_r467744782", "createdAt": "2020-08-10T08:05:28Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -385,6 +389,18 @@ private void addSnapshotListener() {\n                 .build()));\n   }\n \n+  private SnapshotChunk decodeSnapshotChunk(final InstallRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "028d5a5158fd57e65225e5b5230e53771c3a4282"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjMxODM0OnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/raft/snapshot/impl/FileBasedReceivedSnapshot.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODowOToxOFrOG-E-kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODowOToxOFrOG-E-kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc0NjQ1MQ==", "bodyText": "I think it feels less hacky if you name the constants. Like FALLBACK_TOTAL_COUNT or something", "url": "https://github.com/camunda-cloud/zeebe/pull/5133#discussion_r467746451", "createdAt": "2020-08-10T08:09:18Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/snapshot/impl/FileBasedReceivedSnapshot.java", "diffHunk": "@@ -192,27 +192,29 @@ public PersistedSnapshot persist() {\n     final var files = directory.toFile().listFiles();\n     Objects.requireNonNull(files, \"No chunks have been applied yet\");\n \n-    if (files.length != expectedTotalCount) {\n+    if (expectedTotalCount != Integer.MIN_VALUE && files.length != expectedTotalCount) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "028d5a5158fd57e65225e5b5230e53771c3a4282"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjMyMTkyOnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/raft/snapshot/impl/FileBasedReceivedSnapshot.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODoxMDoyOFrOG-FAoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODo1ODowM1rOG-GdJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc0Njk3Nw==", "bodyText": "The same here - currently I would ask why it should be min value. But if you add a constant which describes this a bit better I think it would be clearer", "url": "https://github.com/camunda-cloud/zeebe/pull/5133#discussion_r467746977", "createdAt": "2020-08-10T08:10:28Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/snapshot/impl/FileBasedReceivedSnapshot.java", "diffHunk": "@@ -192,27 +192,29 @@ public PersistedSnapshot persist() {\n     final var files = directory.toFile().listFiles();\n     Objects.requireNonNull(files, \"No chunks have been applied yet\");\n \n-    if (files.length != expectedTotalCount) {\n+    if (expectedTotalCount != Integer.MIN_VALUE && files.length != expectedTotalCount) {\n       throw new IllegalStateException(\n           String.format(\n               \"Expected '%d' chunk files for this snapshot, but found '%d'. Files are: %s.\",\n               expectedSnapshotChecksum, files.length, Arrays.toString(files)));\n     }\n \n-    final var filePaths =\n-        Arrays.stream(files).sorted().map(File::toPath).collect(Collectors.toList());\n-    final long actualSnapshotChecksum;\n-    try {\n-      actualSnapshotChecksum = ChecksumUtil.createCombinedChecksum(filePaths);\n-    } catch (final IOException e) {\n-      throw new UncheckedIOException(\"Unexpected exception on calculating snapshot checksum.\", e);\n-    }\n-\n-    if (actualSnapshotChecksum != expectedSnapshotChecksum) {\n-      throw new IllegalStateException(\n-          String.format(\n-              \"Expected snapshot checksum %d, but calculated %d.\",\n-              expectedSnapshotChecksum, actualSnapshotChecksum));\n+    if (expectedSnapshotChecksum != Long.MIN_VALUE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "028d5a5158fd57e65225e5b5230e53771c3a4282"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc3MDY2MA==", "bodyText": "iirc I think SBE uses this as the null value, so I assume this came from there - naming the constants is probably anyway the better solution \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/5133#discussion_r467770660", "createdAt": "2020-08-10T08:58:03Z", "author": {"login": "npepinpe"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/snapshot/impl/FileBasedReceivedSnapshot.java", "diffHunk": "@@ -192,27 +192,29 @@ public PersistedSnapshot persist() {\n     final var files = directory.toFile().listFiles();\n     Objects.requireNonNull(files, \"No chunks have been applied yet\");\n \n-    if (files.length != expectedTotalCount) {\n+    if (expectedTotalCount != Integer.MIN_VALUE && files.length != expectedTotalCount) {\n       throw new IllegalStateException(\n           String.format(\n               \"Expected '%d' chunk files for this snapshot, but found '%d'. Files are: %s.\",\n               expectedSnapshotChecksum, files.length, Arrays.toString(files)));\n     }\n \n-    final var filePaths =\n-        Arrays.stream(files).sorted().map(File::toPath).collect(Collectors.toList());\n-    final long actualSnapshotChecksum;\n-    try {\n-      actualSnapshotChecksum = ChecksumUtil.createCombinedChecksum(filePaths);\n-    } catch (final IOException e) {\n-      throw new UncheckedIOException(\"Unexpected exception on calculating snapshot checksum.\", e);\n-    }\n-\n-    if (actualSnapshotChecksum != expectedSnapshotChecksum) {\n-      throw new IllegalStateException(\n-          String.format(\n-              \"Expected snapshot checksum %d, but calculated %d.\",\n-              expectedSnapshotChecksum, actualSnapshotChecksum));\n+    if (expectedSnapshotChecksum != Long.MIN_VALUE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc0Njk3Nw=="}, "originalCommit": {"oid": "028d5a5158fd57e65225e5b5230e53771c3a4282"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyMjM2NDYyOnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/raft/snapshot/impl/SnapshotChunkUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODoyMjozNVrOG-FY3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODo1ODoyM1rOG-Gdog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc1MzE4MA==", "bodyText": "I think we need a mechanism to track these kind of methods or logic, which we expect to remove at some point. Maybe via annotation or adding it to a separate class which can be tracked more easily.", "url": "https://github.com/camunda-cloud/zeebe/pull/5133#discussion_r467753180", "createdAt": "2020-08-10T08:22:35Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/snapshot/impl/SnapshotChunkUtil.java", "diffHunk": "@@ -23,6 +25,36 @@ static long createChecksum(final byte[] content) {\n     return crc32.getValue();\n   }\n \n+  /**\n+   * Returns a new snapshot chunk from a pre 0.24.x install request. Should be removed once no\n+   * versions below 0.24.x are supported.\n+   *\n+   * <p>The snapshot chunk will take most of its information from the install request, and use the\n+   * data as the chunk content, while setting the total count to {@link Integer#MIN_VALUE} and the\n+   * snapshot checksum to {@link Long#MIN_VALUE} so that neither will be validated against. See\n+   * {@link FileBasedReceivedSnapshot} for more on that.\n+   *\n+   * @param request the install request to build from\n+   * @return a valid {@link SnapshotChunk} built from the request\n+   */\n+  public static SnapshotChunk fromOldInstallRequest(final InstallRequest request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "028d5a5158fd57e65225e5b5230e53771c3a4282"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc3MDc4Ng==", "bodyText": "I'll group all that legacy stuff together \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/5133#discussion_r467770786", "createdAt": "2020-08-10T08:58:23Z", "author": {"login": "npepinpe"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/snapshot/impl/SnapshotChunkUtil.java", "diffHunk": "@@ -23,6 +25,36 @@ static long createChecksum(final byte[] content) {\n     return crc32.getValue();\n   }\n \n+  /**\n+   * Returns a new snapshot chunk from a pre 0.24.x install request. Should be removed once no\n+   * versions below 0.24.x are supported.\n+   *\n+   * <p>The snapshot chunk will take most of its information from the install request, and use the\n+   * data as the chunk content, while setting the total count to {@link Integer#MIN_VALUE} and the\n+   * snapshot checksum to {@link Long#MIN_VALUE} so that neither will be validated against. See\n+   * {@link FileBasedReceivedSnapshot} for more on that.\n+   *\n+   * @param request the install request to build from\n+   * @return a valid {@link SnapshotChunk} built from the request\n+   */\n+  public static SnapshotChunk fromOldInstallRequest(final InstallRequest request) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc1MzE4MA=="}, "originalCommit": {"oid": "028d5a5158fd57e65225e5b5230e53771c3a4282"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 387, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}