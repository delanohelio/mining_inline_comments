{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwODM4NTU0", "number": 4278, "title": "chore(logstreams): add snapshot checksum verification", "bodyText": "Description\nIntroduces a checksum for the entire snapshot that is checked before marking a snapshot as valid. This means that invalid or incomplete snapshots won't be committed.\nRelated issues\ncloses #4123\nPull Request Checklist\n\n All commit messages match our commit message guidelines\n The submitting code follows our code style\n If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-04-08T13:10:13Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4278", "merged": true, "mergeCommit": {"oid": "882712c9cb4f1200e95ad8ce81044095d3f1ddcf"}, "closed": true, "closedAt": "2020-04-15T15:24:17Z", "author": {"login": "MiguelPires"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXfmOcgFqTM5MjcwMjY5Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcX5gdZgBqjMyMzU5MzIwMDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNzAyNjkz", "url": "https://github.com/camunda-cloud/zeebe/pull/4278#pullrequestreview-392702693", "createdAt": "2020-04-14T08:18:09Z", "commit": {"oid": "4db5137b8bfd2481269b61f6f014875a124e9b70"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODoxODowOVrOGFDWwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODo1MDoxM1rOGFEj7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1MTA0MQ==", "bodyText": "This can be problematic. Snapshot can be too large to fit in memory.", "url": "https://github.com/camunda-cloud/zeebe/pull/4278#discussion_r407951041", "createdAt": "2020-04-14T08:18:09Z", "author": {"login": "deepthidevaki"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/state/StateSnapshotController.java", "diffHunk": "@@ -72,13 +73,23 @@ public void replicateLatestSnapshot(final Consumer<Runnable> executor) {\n       LOG.debug(\"Start replicating latest snapshot {}\", latestSnapshotDirectory);\n \n       try (final var stream = Files.list(latestSnapshotDirectory)) {\n-        final var files = stream.collect(Collectors.toList());\n-        for (final var file : files) {\n+        final ByteArrayOutputStream outStream = new ByteArrayOutputStream();\n+        final var paths = stream.sorted().collect(Collectors.toList());\n+        for (final var path : paths) {\n+          outStream.write(Files.readAllBytes(path));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db5137b8bfd2481269b61f6f014875a124e9b70"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1MTM3Ng==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/4278#discussion_r407951376", "createdAt": "2020-04-14T08:18:44Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/engine/impl/SnapshotChunkImpl.java", "diffHunk": "@@ -81,6 +84,10 @@ public void write(final MutableDirectBuffer buffer, final int offset) {\n         .chunkName(chunkName)\n         .checksum(checksum)\n         .putContent(content, 0, content.capacity());\n+\n+    if (encoder.sbeSchemaVersion() >= SnapshotChunkEncoder.snapshotChecksumSinceVersion()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db5137b8bfd2481269b61f6f014875a124e9b70"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1Mjg1OA==", "bodyText": "What will happen, if sender and receiver has different schema versions?", "url": "https://github.com/camunda-cloud/zeebe/pull/4278#discussion_r407952858", "createdAt": "2020-04-14T08:21:12Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/engine/impl/SnapshotChunkImpl.java", "diffHunk": "@@ -91,6 +98,9 @@ public void wrap(final DirectBuffer buffer, final int offset, final int length)\n     snapshotId = decoder.snapshotId();\n     chunkName = decoder.chunkName();\n     checksum = decoder.checksum();\n+    if (decoder.sbeSchemaVersion() >= SnapshotChunkDecoder.snapshotChecksumSinceVersion()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db5137b8bfd2481269b61f6f014875a124e9b70"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1NTA4Mg==", "bodyText": "Can we move the checksum logic to a single place?", "url": "https://github.com/camunda-cloud/zeebe/pull/4278#discussion_r407955082", "createdAt": "2020-04-14T08:25:00Z", "author": {"login": "deepthidevaki"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/state/FileSnapshotConsumer.java", "diffHunk": "@@ -46,6 +50,26 @@ public void invalidateSnapshot(final String snapshotId) {\n     storage.getPendingDirectoryFor(snapshotId).ifPresent(this::deletePendingSnapshot);\n   }\n \n+  @Override\n+  public Optional<Long> getPendingSnapshotChecksum(final String snapshotId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db5137b8bfd2481269b61f6f014875a124e9b70"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1OTMzNQ==", "bodyText": "One way to calculate checksums for a directory is to calculate checksum for each file, then calculate checksum of the checksums.", "url": "https://github.com/camunda-cloud/zeebe/pull/4278#discussion_r407959335", "createdAt": "2020-04-14T08:31:44Z", "author": {"login": "deepthidevaki"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/state/StateSnapshotController.java", "diffHunk": "@@ -72,13 +73,23 @@ public void replicateLatestSnapshot(final Consumer<Runnable> executor) {\n       LOG.debug(\"Start replicating latest snapshot {}\", latestSnapshotDirectory);\n \n       try (final var stream = Files.list(latestSnapshotDirectory)) {\n-        final var files = stream.collect(Collectors.toList());\n-        for (final var file : files) {\n+        final ByteArrayOutputStream outStream = new ByteArrayOutputStream();\n+        final var paths = stream.sorted().collect(Collectors.toList());\n+        for (final var path : paths) {\n+          outStream.write(Files.readAllBytes(path));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk1MTA0MQ=="}, "originalCommit": {"oid": "4db5137b8bfd2481269b61f6f014875a124e9b70"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2NTU2MA==", "bodyText": "Shouldn't it test that the snapshot is not committed/made valid?", "url": "https://github.com/camunda-cloud/zeebe/pull/4278#discussion_r407965560", "createdAt": "2020-04-14T08:41:50Z", "author": {"login": "deepthidevaki"}, "path": "logstreams/src/test/java/io/zeebe/logstreams/state/FailingSnapshotChunkReplicationTest.java", "diffHunk": "@@ -112,6 +113,43 @@ public void shouldNotMarkSnapshotAsValidIfNotReceivedAllChunks() throws Exceptio\n     assertThat(receiverStorage.exists(replicatedChunks.get(0).getSnapshotId())).isFalse();\n   }\n \n+  @Test\n+  public void shouldSnapshotWithWrongChecksum() throws Exception {\n+    // given\n+    final InterruptedReplicator replicator = new InterruptedReplicator();\n+    setup(replicator);\n+\n+    receiverSnapshotController.consumeReplicatedSnapshots();\n+    replicatorSnapshotController.takeSnapshot(1);\n+\n+    // when\n+    replicatorSnapshotController.replicateLatestSnapshot(Runnable::run);\n+    final List<SnapshotChunk> pendingChunks = new ArrayList<>(replicator.unsentSnapshots);\n+\n+    final Path pendingSnapshot =\n+        receiverStorage.getPendingDirectoryFor(pendingChunks.get(0).getSnapshotId()).orElseThrow();\n+    final List<Path> snapshotChunks = Files.list(pendingSnapshot).collect(Collectors.toList());\n+    assertThat(snapshotChunks).hasSize(pendingChunks.get(0).getTotalCount() - 1);\n+    snapshotChunks.forEach(\n+        p -> {\n+          try {\n+            Files.delete(p);\n+          } catch (IOException e) {\n+            e.printStackTrace();\n+          }\n+        });\n+\n+    replicator.count = 0;\n+    pendingChunks.forEach(replicator::replicate);\n+\n+    // then\n+    assertThat(\n+            receiverStorage\n+                .getPendingDirectoryFor(pendingChunks.get(0).getSnapshotId())\n+                .orElseThrow())\n+        .doesNotExist();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db5137b8bfd2481269b61f6f014875a124e9b70"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk3MDc5Ng==", "bodyText": "Checksum verification can be part of completeSnapshot(), right?", "url": "https://github.com/camunda-cloud/zeebe/pull/4278#discussion_r407970796", "createdAt": "2020-04-14T08:50:13Z", "author": {"login": "deepthidevaki"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/state/ReplicationController.java", "diffHunk": "@@ -103,7 +109,12 @@ private void validateWhenReceivedAllChunks(\n \n   private boolean tryToMarkSnapshotAsValid(\n       final SnapshotChunk snapshotChunk, final ReplicationContext context) {\n-    if (snapshotConsumer.completeSnapshot(snapshotChunk.getSnapshotId())) {\n+    final Optional<Long> pendingChecksum =\n+        snapshotConsumer.getPendingSnapshotChecksum(snapshotChunk.getSnapshotId());\n+\n+    if (pendingChecksum.isPresent()\n+        && snapshotChunk.getSnapshotChecksum() == pendingChecksum.get()\n+        && snapshotConsumer.completeSnapshot(snapshotChunk.getSnapshotId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db5137b8bfd2481269b61f6f014875a124e9b70"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNTAwNjE2", "url": "https://github.com/camunda-cloud/zeebe/pull/4278#pullrequestreview-393500616", "createdAt": "2020-04-15T06:56:10Z", "commit": {"oid": "f4f3f533371b139a1a1e02534089535946c0d1af"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjo1NjoxMFrOGFsK7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNjo1NjoxMFrOGFsK7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODYxOTc1Nw==", "bodyText": "I would suggest  completeSnapshot(final String snapshotId, final long snapshotChecksum)", "url": "https://github.com/camunda-cloud/zeebe/pull/4278#discussion_r408619757", "createdAt": "2020-04-15T06:56:10Z", "author": {"login": "deepthidevaki"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/state/FileSnapshotConsumer.java", "diffHunk": "@@ -37,15 +41,35 @@ public boolean consumeSnapshotChunk(final SnapshotChunk chunk) {\n   }\n \n   @Override\n-  public boolean completeSnapshot(final String snapshotId) {\n-    return storage.getPendingDirectoryFor(snapshotId).flatMap(storage::commitSnapshot).isPresent();\n+  public boolean completeSnapshot(final SnapshotChunk snapshotChunk) {\n+    return verifySnapshot(snapshotChunk)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4f3f533371b139a1a1e02534089535946c0d1af"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzODU1MzQx", "url": "https://github.com/camunda-cloud/zeebe/pull/4278#pullrequestreview-393855341", "createdAt": "2020-04-15T14:54:27Z", "commit": {"oid": "560b8075dd713a4880ce2ee5ce33c584ea908176"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab73d49ec2f79cd2c231ee2bc78f9042a8a8df60", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/ab73d49ec2f79cd2c231ee2bc78f9042a8a8df60", "committedDate": "2020-04-15T15:06:08Z", "message": "chore(logstreams): add snapshot checksum verification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "560b8075dd713a4880ce2ee5ce33c584ea908176", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/560b8075dd713a4880ce2ee5ce33c584ea908176", "committedDate": "2020-04-15T13:30:51Z", "message": "chore(logstreams): expand parameters"}, "afterCommit": {"oid": "ab73d49ec2f79cd2c231ee2bc78f9042a8a8df60", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/ab73d49ec2f79cd2c231ee2bc78f9042a8a8df60", "committedDate": "2020-04-15T15:06:08Z", "message": "chore(logstreams): add snapshot checksum verification"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3005, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}