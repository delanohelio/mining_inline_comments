{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2ODk5Mjgx", "number": 4204, "title": "feat(broker): FEEL expressions for message names", "bodyText": "Description\nAdded expressions for message names.\nFor start events the expressions must be constant expressions, because at this point in time no variables are available.\nTODO:\n\nextend tests\nadd validator that rejects start event messages with a message name that cannot be evaluated without variables\n\nRelated issues\n\ncloses #3800\nPull Request Checklist\n\n All commit messages match our commit message guidelines\n The submitting code follows our code style\n If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-04-01T10:18:03Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4204", "merged": true, "mergeCommit": {"oid": "b39a61777517e9deedaefd84f0e4de5f1b45f60c"}, "closed": true, "closedAt": "2020-04-14T11:05:15Z", "author": {"login": "pihme"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcT7PS-gFqTM4NjkzMTU2Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXfe8oABqjMyMzAxMTQ0MDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2OTMxNTY2", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#pullrequestreview-386931566", "createdAt": "2020-04-03T04:36:45Z", "commit": {"oid": "09aeb9c54d17503a30db15d98a896a9a0c898182"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDozNjo0NVrOGAE02Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNjozMTozM1rOGAGsNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjczMjI0OQ==", "bodyText": "What happens if the message name expression evaluation fails?\nIf an incident is created then no other action should be applied to the workflow instance (e.g. don't open other subscriptions, don't go to ELEMENT_ACTIVATED state)", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r402732249", "createdAt": "2020-04-03T04:36:45Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java", "diffHunk": "@@ -150,35 +151,42 @@ private void subscribeToMessageEvent(\n     final long workflowInstanceKey = context.getValue().getWorkflowInstanceKey();\n     final DirectBuffer bpmnProcessId = cloneBuffer(context.getValue().getBpmnProcessIdBuffer());\n     final long elementInstanceKey = context.getKey();\n-    final DirectBuffer messageName = cloneBuffer(message.getMessageName());\n+    final Expression messageNameExpression = message.getMessageNameExpression();\n+    final Optional<DirectBuffer> optMessageNameSharedBuffer =\n+        expressionProcessor.evaluateStringExpression(messageNameExpression, context);\n+\n     final DirectBuffer correlationKey = extractedKey;\n     final boolean closeOnCorrelate = handler.shouldCloseMessageSubscriptionOnCorrelate();\n     final int subscriptionPartitionId =\n         SubscriptionUtil.getSubscriptionPartitionId(correlationKey, partitionsCount);\n \n-    subscription.setSubscriptionPartitionId(subscriptionPartitionId);\n-    subscription.setMessageName(messageName);\n-    subscription.setElementInstanceKey(elementInstanceKey);\n-    subscription.setCommandSentTime(ActorClock.currentTimeMillis());\n-    subscription.setWorkflowInstanceKey(workflowInstanceKey);\n-    subscription.setBpmnProcessId(bpmnProcessId);\n-    subscription.setCorrelationKey(correlationKey);\n-    subscription.setTargetElementId(handler.getId());\n-    subscription.setCloseOnCorrelate(closeOnCorrelate);\n-    state.getWorkflowInstanceSubscriptionState().put(subscription);\n-\n-    context\n-        .getSideEffect()\n-        .add(\n-            () ->\n-                sendOpenMessageSubscription(\n-                    subscriptionPartitionId,\n-                    workflowInstanceKey,\n-                    elementInstanceKey,\n-                    bpmnProcessId,\n-                    messageName,\n-                    correlationKey,\n-                    closeOnCorrelate));\n+    optMessageNameSharedBuffer.ifPresent(\n+        messageNameSharedBuffer -> {\n+          final DirectBuffer messageNameBuffer = BufferUtil.cloneBuffer(messageNameSharedBuffer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aeb9c54d17503a30db15d98a896a9a0c898182"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc0NjY2MA==", "bodyText": "Using BufferUtil.wrapString():\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final ExecutableMessage message = startEvent.getMessage();\n          \n          \n            \n                    final Optional<String> optMessageName = message.getMessageName();\n          \n          \n            \n            \n          \n          \n            \n                    optMessageName.ifPresent(\n          \n          \n            \n                        messageName -> {\n          \n          \n            \n                          final org.agrona.DirectBuffer messageNameBuffer = new UnsafeBuffer();\n          \n          \n            \n                          messageNameBuffer.wrap(optMessageName.get().getBytes());\n          \n          \n            \n                    final ExecutableMessage message = startEvent.getMessage();\n          \n          \n            \n            \n          \n          \n            \n                    message\n          \n          \n            \n                        .getMessageName()\n          \n          \n            \n                        .map(BufferUtil::wrapString)\n          \n          \n            \n                        .ifPresent(\n          \n          \n            \n                            messageNameBuffer -> {", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r402746660", "createdAt": "2020-04-03T05:38:14Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/DeploymentCreatedProcessor.java", "diffHunk": "@@ -99,13 +102,23 @@ private void openMessageStartEventSubscriptions(\n     // if startEvents contain message events\n     for (final ExecutableCatchEventElement startEvent : startEvents) {\n       if (startEvent.isMessage()) {\n-        subscriptionRecord.reset();\n-        subscriptionRecord\n-            .setMessageName(startEvent.getMessage().getMessageName())\n-            .setWorkflowKey(workflowKey)\n-            .setBpmnProcessId(workflow.getId())\n-            .setStartEventId(startEvent.getId());\n-        streamWriter.appendNewCommand(MessageStartEventSubscriptionIntent.OPEN, subscriptionRecord);\n+        final ExecutableMessage message = startEvent.getMessage();\n+        final Optional<String> optMessageName = message.getMessageName();\n+\n+        optMessageName.ifPresent(\n+            messageName -> {\n+              final org.agrona.DirectBuffer messageNameBuffer = new UnsafeBuffer();\n+              messageNameBuffer.wrap(optMessageName.get().getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aeb9c54d17503a30db15d98a896a9a0c898182"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1MzQ0NQ==", "bodyText": "Why do we evaluate every static message name expression in the transformer?", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r402753445", "createdAt": "2020-04-03T06:02:22Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/transformer/MessageTransformer.java", "diffHunk": "@@ -27,21 +29,36 @@\n   public void transform(final Message element, final TransformContext context) {\n \n     final String id = element.getId();\n-    final ExecutableMessage executableElement = new ExecutableMessage(id);\n+    final ExpressionLanguage expressionLanguage = context.getExpressionLanguage();\n \n+    final ExecutableMessage executableElement = new ExecutableMessage(id);\n     final ExtensionElements extensionElements = element.getExtensionElements();\n \n     if (extensionElements != null) {\n       final ZeebeSubscription subscription =\n           extensionElements.getElementsQuery().filterByType(ZeebeSubscription.class).singleResult();\n       final Expression correlationKeyExpression =\n-          context.getExpressionLanguage().parseExpression(subscription.getCorrelationKey());\n+          expressionLanguage.parseExpression(subscription.getCorrelationKey());\n \n       executableElement.setCorrelationKeyExpression(correlationKeyExpression);\n     }\n \n     if (element.getName() != null) {\n-      executableElement.setMessageName(BufferUtil.wrapString(element.getName()));\n+      final Expression messageNameExpression =\n+          expressionLanguage.parseExpression(element.getName());\n+\n+      executableElement.setMessageNameExpression(messageNameExpression);\n+\n+      if (messageNameExpression.isStatic()) {\n+        final EvaluationResult messageNameResult =\n+            expressionLanguage.evaluateExpression(messageNameExpression, variable -> null);\n+\n+        if (messageNameResult.getType() == ResultType.STRING) {\n+          final String messageName = messageNameResult.getString();\n+          executableElement.setMessageName(messageName);\n+        }\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aeb9c54d17503a30db15d98a896a9a0c898182"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1Mzg5Mw==", "bodyText": "Unused code.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                context.getExpressionLanguage();", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r402753893", "createdAt": "2020-04-03T06:03:46Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/transformer/StartEventTransformer.java", "diffHunk": "@@ -31,6 +35,8 @@ public void transform(final StartEvent element, final TransformContext context)\n     final ExecutableStartEvent startEvent =\n         workflow.getElementById(element.getId(), ExecutableStartEvent.class);\n \n+    context.getExpressionLanguage();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aeb9c54d17503a30db15d98a896a9a0c898182"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc1Njg0OA==", "bodyText": "Using BufferUtil.wrapString():\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final Optional<String> optMessageName = startEvent.getMessage().getMessageName();\n          \n          \n            \n                    final org.agrona.DirectBuffer messageNameBuffer = new UnsafeBuffer();\n          \n          \n            \n                    messageNameBuffer.wrap(optMessageName.get().getBytes());\n          \n          \n            \n                    final DirectBuffer messageNameBuffer = startEvent\n          \n          \n            \n                        .getMessage()\n          \n          \n            \n                        .getMessageName()\n          \n          \n            \n                        .map(BufferUtil::wrapString)\n          \n          \n            \n                        .orElseThrow();", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r402756848", "createdAt": "2020-04-03T06:13:23Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/message/BufferedMessageToStartEventCorrelator.java", "diffHunk": "@@ -83,10 +85,12 @@ private Correlation findNextMessageToCorrelate(\n     for (final ExecutableStartEvent startEvent : workflow.getWorkflow().getStartEvents()) {\n       if (startEvent.isMessage()) {\n \n-        final var messageName = startEvent.getMessage().getMessageName();\n+        final Optional<String> optMessageName = startEvent.getMessage().getMessageName();\n+        final org.agrona.DirectBuffer messageNameBuffer = new UnsafeBuffer();\n+        messageNameBuffer.wrap(optMessageName.get().getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aeb9c54d17503a30db15d98a896a9a0c898182"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjc2MjgwNA==", "bodyText": "I think that adding a name to the message is not in the intent of this test case ;)\nThe idea was that a message without a name is invalid. But if the message is not used in the workflow (this can happen using the modeler) then it is ignored.", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r402762804", "createdAt": "2020-04-03T06:31:33Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/deployment/CreateDeploymentTest.java", "diffHunk": "@@ -157,7 +157,9 @@ public void shouldCreateDeploymentResourceWithMultipleWorkflows() {\n   public void shouldCreateDeploymentIfUnusedInvalidMessage() {\n     // given\n     final BpmnModelInstance process = Bpmn.createExecutableProcess().startEvent().done();\n-    process.getDefinitions().addChildElement(process.newInstance(Message.class));\n+    final Message message = process.newInstance(Message.class);\n+    message.setName(\"message\");\n+    process.getDefinitions().addChildElement(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09aeb9c54d17503a30db15d98a896a9a0c898182"}, "originalPosition": 7}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "09aeb9c54d17503a30db15d98a896a9a0c898182", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/09aeb9c54d17503a30db15d98a896a9a0c898182", "committedDate": "2020-04-01T09:46:52Z", "message": "feat(broker): FEEL expressions for message names"}, "afterCommit": {"oid": "e6ecac53dccd9bb13f14a3bb5e796e99f3b8b91e", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/e6ecac53dccd9bb13f14a3bb5e796e99f3b8b91e", "committedDate": "2020-04-06T13:25:21Z", "message": "feat(broker): FEEL expressions for message names"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e6ecac53dccd9bb13f14a3bb5e796e99f3b8b91e", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/e6ecac53dccd9bb13f14a3bb5e796e99f3b8b91e", "committedDate": "2020-04-06T13:25:21Z", "message": "feat(broker): FEEL expressions for message names"}, "afterCommit": {"oid": "8c1d32d09d78b2fe9946dde7a785509e74e812c9", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8c1d32d09d78b2fe9946dde7a785509e74e812c9", "committedDate": "2020-04-06T14:20:16Z", "message": "feat(broker): FEEL expressions for message names"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "23a20522a0dfb9647c1a39409cc250ea69a106a0", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/23a20522a0dfb9647c1a39409cc250ea69a106a0", "committedDate": "2020-04-06T18:23:06Z", "message": "Apply suggestions from code review\n\nCo-Authored-By: Philipp Ossler <philipp.ossler@gmail.com>"}, "afterCommit": {"oid": "2843a5cccc81f35711ac8a310ae017ea2755e4fc", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/2843a5cccc81f35711ac8a310ae017ea2755e4fc", "committedDate": "2020-04-06T18:30:56Z", "message": "chore(broker): Apply suggestions from code review\n\nCo-Authored-By: Philipp Ossler <philipp.ossler@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2843a5cccc81f35711ac8a310ae017ea2755e4fc", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/2843a5cccc81f35711ac8a310ae017ea2755e4fc", "committedDate": "2020-04-06T18:30:56Z", "message": "chore(broker): Apply suggestions from code review\n\nCo-Authored-By: Philipp Ossler <philipp.ossler@gmail.com>"}, "afterCommit": {"oid": "1c597e6269e7648a9256b8b11926cad6fb2e8a09", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/1c597e6269e7648a9256b8b11926cad6fb2e8a09", "committedDate": "2020-04-06T18:41:48Z", "message": "chore(broker): Apply suggestions from code review\n\nCo-Authored-By: Philipp Ossler <philipp.ossler@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a8735d26a251de58f582e69cab290501496b025", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/4a8735d26a251de58f582e69cab290501496b025", "committedDate": "2020-04-07T15:37:57Z", "message": "chore(broker): add validator for start event message names"}, "afterCommit": {"oid": "3ae964cf62c81c7e0efbc8a1251c3af8bde2374a", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/3ae964cf62c81c7e0efbc8a1251c3af8bde2374a", "committedDate": "2020-04-07T15:56:08Z", "message": "chore(broker): add validator for start event message names"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNjA5NTI2", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#pullrequestreview-392609526", "createdAt": "2020-04-14T05:19:35Z", "commit": {"oid": "b4739be9ef211cc6a745e4efc7e9ef5ed1419162"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNToxOTozNVrOGE-lsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNTo0MDo1MFrOGE--3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3Mjk0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  singleStartEvent(startEvent -> {}, MESSAGE_NAME_1);\n          \n          \n            \n                  singleStartEvent(startEvent -> {}, MESSAGE_NAME_EXPRESSION_1);", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r407872944", "createdAt": "2020-04-14T05:19:35Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/message/MessageStartEventTest.java", "diffHunk": "@@ -33,19 +33,28 @@\n public final class MessageStartEventTest {\n \n   private static final String MESSAGE_NAME_1 = \"a\";\n+  private static final String MESSAGE_NAME_EXPRESSION_1 = \"=\\\"a\\\"\";\n   private static final String MESSAGE_NAME_2 = \"b\";\n \n   private static final String CORRELATION_KEY_1 = \"key-1\";\n   private static final String CORRELATION_KEY_2 = \"key-2\";\n \n-  private static final BpmnModelInstance SINGLE_START_EVENT = singleStartEvent(startEvent -> {});\n+  private static final BpmnModelInstance SINGLE_START_EVENT_1 =\n+      singleStartEvent(startEvent -> {}, MESSAGE_NAME_1);\n+  private static final BpmnModelInstance SINGLE_START_EVENT_EXPRESSION_1 =\n+      singleStartEvent(startEvent -> {}, MESSAGE_NAME_1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b4739be9ef211cc6a745e4efc7e9ef5ed1419162"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MzM2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Map<Class, List<ModelElementValidator>> validators;\n          \n          \n            \n              private final Map<Class, List<ModelElementValidator>> validators;", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r407873368", "createdAt": "2020-04-14T05:21:17Z", "author": {"login": "saig0"}, "path": "bpmn-model/src/main/java/io/zeebe/model/bpmn/validation/ValidationVisitor.java", "diffHunk": "@@ -27,13 +30,13 @@\n \n public class ValidationVisitor extends TypeHierarchyVisitor {\n \n-  private final Map<Class<?>, ModelElementValidator<?>> validators;\n+  private Map<Class, List<ModelElementValidator>> validators;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ae964cf62c81c7e0efbc8a1251c3af8bde2374a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3MzczMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        validator -> {\n          \n          \n            \n                          validator.validate(instance, resultCollector);\n          \n          \n            \n                        });\n          \n          \n            \n                        validator -> validator.validate(instance, resultCollector));", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r407873732", "createdAt": "2020-04-14T05:22:35Z", "author": {"login": "saig0"}, "path": "bpmn-model/src/main/java/io/zeebe/model/bpmn/validation/ValidationVisitor.java", "diffHunk": "@@ -43,10 +46,12 @@ protected void visit(\n \n     resultCollector.setCurrentElement(instance);\n \n-    final ModelElementValidator validator = validators.get(implementedType.getInstanceType());\n-    if (validator != null) {\n-      validator.validate(instance, resultCollector);\n-    }\n+    validators\n+        .getOrDefault(implementedType.getInstanceType(), Collections.emptyList())\n+        .forEach(\n+            validator -> {\n+              validator.validate(instance, resultCollector);\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ae964cf62c81c7e0efbc8a1251c3af8bde2374a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg3OTM4OQ==", "bodyText": "Leftovers?", "url": "https://github.com/camunda-cloud/zeebe/pull/4204#discussion_r407879389", "createdAt": "2020-04-14T05:40:50Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ProcessMessageStartEventMessageNameValidator.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor.workflow.deployment.model.validation;\n+\n+import io.zeebe.el.EvaluationResult;\n+import io.zeebe.el.Expression;\n+import io.zeebe.el.ExpressionLanguage;\n+import io.zeebe.el.ResultType;\n+import io.zeebe.model.bpmn.Bpmn;\n+import io.zeebe.model.bpmn.instance.MessageEventDefinition;\n+import io.zeebe.model.bpmn.instance.Process;\n+import io.zeebe.model.bpmn.instance.StartEvent;\n+import org.camunda.bpm.model.xml.validation.ModelElementValidator;\n+import org.camunda.bpm.model.xml.validation.ValidationResultCollector;\n+\n+/**\n+ * This class validates that the message names of messages associated with a start event can be\n+ * evaluated without a context (that is, the expressions do not refer to variables) and evaluate to\n+ * a string\n+ */\n+final class ProcessMessageStartEventMessageNameValidator\n+    implements ModelElementValidator<StartEvent> {\n+\n+  private final ExpressionLanguage expressionLanguage;\n+\n+  ProcessMessageStartEventMessageNameValidator(final ExpressionLanguage expressionLanguage) {\n+    this.expressionLanguage = expressionLanguage;\n+  }\n+\n+  @Override\n+  public Class<StartEvent> getElementType() {\n+    return StartEvent.class;\n+  }\n+\n+  @Override\n+  public void validate(\n+      final StartEvent element, final ValidationResultCollector validationResultCollector) {\n+    if (element.getScope() instanceof Process) {\n+      element.getEventDefinitions().stream()\n+          .filter(MessageEventDefinition.class::isInstance)\n+          .map(MessageEventDefinition.class::cast)\n+          .forEach(definition -> validateMessageName(definition, validationResultCollector));\n+    }\n+    Bpmn.createProcess().startEvent().message(\"test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ae964cf62c81c7e0efbc8a1251c3af8bde2374a"}, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9941b8295a2a3d25b86aacaa192f309f103d18d7", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/9941b8295a2a3d25b86aacaa192f309f103d18d7", "committedDate": "2020-04-14T08:16:19Z", "message": "chore(broker): incorporate review feedback"}, "afterCommit": {"oid": "098c41f4ef21862eecedd93ef71f88178f74afe6", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/098c41f4ef21862eecedd93ef71f88178f74afe6", "committedDate": "2020-04-14T08:44:00Z", "message": "chore(broker): incorporate review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeb6404dfaa3138a56f3c9494b6fe25210644527", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/aeb6404dfaa3138a56f3c9494b6fe25210644527", "committedDate": "2020-04-14T08:46:55Z", "message": "feat(broker): FEEL expressions for message names"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "098c41f4ef21862eecedd93ef71f88178f74afe6", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/098c41f4ef21862eecedd93ef71f88178f74afe6", "committedDate": "2020-04-14T08:44:00Z", "message": "chore(broker): incorporate review feedback"}, "afterCommit": {"oid": "aeb6404dfaa3138a56f3c9494b6fe25210644527", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/aeb6404dfaa3138a56f3c9494b6fe25210644527", "committedDate": "2020-04-14T08:46:55Z", "message": "feat(broker): FEEL expressions for message names"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2965, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}