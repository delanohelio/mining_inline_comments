{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MDM2MTU5", "number": 5631, "title": "Fix concurrent partition closing", "bodyText": "Description\nAllows to close and transition in order. Previous multiple transitions\nand closing have worked against each other, which means it can lead to\nunexpected outcomes or dead locks. See for example #5005 (comment)\nTransitions are now executed in a sequential order. The closing will\nawait the current transition, before starting the next transition and\nclosing all resources.\n\nRelated issues\n\ncloses #5005\nDefinition of Done\nNot all items need to be done depending on the issue and the pull request.\nCode changes:\n\n The changes are backwards compatibility with previous versions\n If it fixes a bug then PRs are created to backport the fix to the last two minor versions\n\nTesting:\n\n There are unit/integration tests that verify all acceptance criterias of the issue\n New tests are written to ensure backwards compatibility with further versions\n The behavior is tested manually\n The impact of the changes is verified by a benchmark\n\nDocumentation:\n\n The documentation is updated (e.g. BPMN reference, configuration, examples, get-started guides, etc.)\n New content is added to the release announcement", "createdAt": "2020-10-19T14:35:46Z", "url": "https://github.com/camunda-cloud/zeebe/pull/5631", "merged": true, "mergeCommit": {"oid": "914e2b477a7920f8c14345c57986149b3b2109cb"}, "closed": true, "closedAt": "2020-10-20T13:12:41Z", "author": {"login": "Zelldon"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdURqtAgFqTUxMjMzMDI4OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUXK0KgBqjM4OTgxNzQ5OTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyMzMwMjg5", "url": "https://github.com/camunda-cloud/zeebe/pull/5631#pullrequestreview-512330289", "createdAt": "2020-10-20T04:56:06Z", "commit": {"oid": "f356b398501baa4f66027551b4a00ee95cb5be41"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNDo1NjowNlrOHkqngg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNTowOToxMlrOHkq1Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIwOTAyNg==", "bodyText": "We may want to align the names with the other tests.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final NoopPartitionStep firstComponent = spy(new NoopPartitionStep());\n          \n          \n            \n                final NoopPartitionStep secondComponent = spy(new NoopPartitionStep());\n          \n          \n            \n                final NoopPartitionStep leaderComponent = spy(new NoopPartitionStep());\n          \n          \n            \n                final NoopPartitionStep followerComponent = spy(new NoopPartitionStep());", "url": "https://github.com/camunda-cloud/zeebe/pull/5631#discussion_r508209026", "createdAt": "2020-10-20T04:56:06Z", "author": {"login": "saig0"}, "path": "broker/src/test/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionTest.java", "diffHunk": "@@ -73,6 +73,210 @@ public void shouldCloseInOppositeOrderOfOpen() {\n     order.verify(firstComponent).close(ctx);\n   }\n \n+  @Test\n+  public void shouldTransitionFromLeaderToFollowerInSequence() {\n+    // given\n+    final NoopPartitionStep firstComponent = spy(new NoopPartitionStep());\n+    final NoopPartitionStep secondComponent = spy(new NoopPartitionStep());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f356b398501baa4f66027551b4a00ee95cb5be41"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIwOTcwNg==", "bodyText": "I'm not sure if it is necessary to expose the current future. We can store the future in ZeebePartition itself when calling transition.toLeader() etc.", "url": "https://github.com/camunda-cloud/zeebe/pull/5631#discussion_r508209706", "createdAt": "2020-10-20T04:58:47Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java", "diffHunk": "@@ -41,27 +41,48 @@ public PartitionTransitionImpl(\n   @Override\n   public ActorFuture<Void> toFollower() {\n     final CompletableActorFuture<Void> future = new CompletableActorFuture<>();\n-    currentTransition.onComplete((nothing, err) -> transition(future, followerSteps));\n+    enqueueTransition(future, followerSteps);\n     return future;\n   }\n \n   @Override\n   public ActorFuture<Void> toLeader() {\n     final CompletableActorFuture<Void> future = new CompletableActorFuture<>();\n-    currentTransition.onComplete((nothing, err) -> transition(future, leaderSteps));\n+    enqueueTransition(future, leaderSteps);\n     return future;\n   }\n \n   @Override\n   public ActorFuture<Void> toInactive() {\n     final CompletableActorFuture<Void> future = new CompletableActorFuture<>();\n-    currentTransition.onComplete((nothing, err) -> transition(future, EMPTY_LIST));\n+    enqueueTransition(future, EMPTY_LIST);\n     return future;\n   }\n \n+  /**\n+   * This method allows to enqueue the next transition, such that the transitions are executed in\n+   * order. Previous we had the issue that all transitions have subscribe to the current transition,\n+   * which lead to undefined behavior.\n+   *\n+   * @param nextTransitionFuture the future of the next transition\n+   * @param partitionStepList the steps which should be installed on the transition\n+   */\n+  private void enqueueTransition(\n+      final CompletableActorFuture<Void> nextTransitionFuture,\n+      final List<PartitionStep> partitionStepList) {\n+    final var nextCurrentTransition = currentTransitionFuture();\n+    currentTransition = nextTransitionFuture;\n+    nextCurrentTransition.onComplete(\n+        (nothing, err) -> transition(nextTransitionFuture, partitionStepList));\n+  }\n+\n+  @Override\n+  public ActorFuture<Void> currentTransitionFuture() {\n+    return currentTransition;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f356b398501baa4f66027551b4a00ee95cb5be41"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIxMDM4OQ==", "bodyText": "We may want to synchronize this method to be safe. Just in case.", "url": "https://github.com/camunda-cloud/zeebe/pull/5631#discussion_r508210389", "createdAt": "2020-10-20T05:01:00Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java", "diffHunk": "@@ -41,27 +41,48 @@ public PartitionTransitionImpl(\n   @Override\n   public ActorFuture<Void> toFollower() {\n     final CompletableActorFuture<Void> future = new CompletableActorFuture<>();\n-    currentTransition.onComplete((nothing, err) -> transition(future, followerSteps));\n+    enqueueTransition(future, followerSteps);\n     return future;\n   }\n \n   @Override\n   public ActorFuture<Void> toLeader() {\n     final CompletableActorFuture<Void> future = new CompletableActorFuture<>();\n-    currentTransition.onComplete((nothing, err) -> transition(future, leaderSteps));\n+    enqueueTransition(future, leaderSteps);\n     return future;\n   }\n \n   @Override\n   public ActorFuture<Void> toInactive() {\n     final CompletableActorFuture<Void> future = new CompletableActorFuture<>();\n-    currentTransition.onComplete((nothing, err) -> transition(future, EMPTY_LIST));\n+    enqueueTransition(future, EMPTY_LIST);\n     return future;\n   }\n \n+  /**\n+   * This method allows to enqueue the next transition, such that the transitions are executed in\n+   * order. Previous we had the issue that all transitions have subscribe to the current transition,\n+   * which lead to undefined behavior.\n+   *\n+   * @param nextTransitionFuture the future of the next transition\n+   * @param partitionStepList the steps which should be installed on the transition\n+   */\n+  private void enqueueTransition(\n+      final CompletableActorFuture<Void> nextTransitionFuture,\n+      final List<PartitionStep> partitionStepList) {\n+    final var nextCurrentTransition = currentTransitionFuture();\n+    currentTransition = nextTransitionFuture;\n+    nextCurrentTransition.onComplete(\n+        (nothing, err) -> transition(nextTransitionFuture, partitionStepList));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f356b398501baa4f66027551b4a00ee95cb5be41"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODIxMjU3NQ==", "bodyText": "Do we really want to wait until the current transition is done? I'm not sure how long this can take \ud83e\udd14\nSince we want to close the partition, it may be faster to interrupt the current transition.", "url": "https://github.com/camunda-cloud/zeebe/pull/5631#discussion_r508212575", "createdAt": "2020-10-20T05:09:12Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -203,6 +208,28 @@ protected void onActorStarted() {\n         .registerComponent(zeebePartitionHealth.getName(), zeebePartitionHealth);\n   }\n \n+  @Override\n+  public ActorFuture<Void> closeAsync() {\n+    if (closeFuture != null) {\n+      return closeFuture;\n+    }\n+\n+    closeFuture = new CompletableActorFuture<>();\n+\n+    actor.call(\n+        () ->\n+            // allows to await current transition to avoid concurrent modifications and\n+            // transitioning\n+            currentTransition()\n+                .onComplete(\n+                    (nothing, err) -> {\n+                      LOG.debug(\"Closing Zeebe Partition {}.\", context.getPartitionId());\n+                      super.closeAsync();\n+                    }));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f356b398501baa4f66027551b4a00ee95cb5be41"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNDE3OTEw", "url": "https://github.com/camunda-cloud/zeebe/pull/5631#pullrequestreview-512417910", "createdAt": "2020-10-20T07:43:44Z", "commit": {"oid": "f356b398501baa4f66027551b4a00ee95cb5be41"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzo0Mzo0NVrOHku3Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQwNzo0Mzo0NVrOHku3Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODI3ODU3NQ==", "bodyText": "You can move the creation of this future into the enqueueTransition method and simply return it from there. That would reduce each of these methods to a single return statement.", "url": "https://github.com/camunda-cloud/zeebe/pull/5631#discussion_r508278575", "createdAt": "2020-10-20T07:43:45Z", "author": {"login": "korthout"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java", "diffHunk": "@@ -41,27 +41,48 @@ public PartitionTransitionImpl(\n   @Override\n   public ActorFuture<Void> toFollower() {\n     final CompletableActorFuture<Void> future = new CompletableActorFuture<>();\n-    currentTransition.onComplete((nothing, err) -> transition(future, followerSteps));\n+    enqueueTransition(future, followerSteps);\n     return future;\n   }\n \n   @Override\n   public ActorFuture<Void> toLeader() {\n     final CompletableActorFuture<Void> future = new CompletableActorFuture<>();\n-    currentTransition.onComplete((nothing, err) -> transition(future, leaderSteps));\n+    enqueueTransition(future, leaderSteps);\n     return future;\n   }\n \n   @Override\n   public ActorFuture<Void> toInactive() {\n     final CompletableActorFuture<Void> future = new CompletableActorFuture<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f356b398501baa4f66027551b4a00ee95cb5be41"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNTc5OTA1", "url": "https://github.com/camunda-cloud/zeebe/pull/5631#pullrequestreview-512579905", "createdAt": "2020-10-20T10:53:55Z", "commit": {"oid": "eb3cefbefa90b3fab8e395857dc6329245cce35b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNTgzODQz", "url": "https://github.com/camunda-cloud/zeebe/pull/5631#pullrequestreview-512583843", "createdAt": "2020-10-20T10:59:25Z", "commit": {"oid": "eb3cefbefa90b3fab8e395857dc6329245cce35b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNjA2ODYz", "url": "https://github.com/camunda-cloud/zeebe/pull/5631#pullrequestreview-512606863", "createdAt": "2020-10-20T11:31:03Z", "commit": {"oid": "eb3cefbefa90b3fab8e395857dc6329245cce35b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8a720b21d8c61a7fe22b9ba0ab1dbe50fe5ff5c", "author": {"user": {"login": "Zelldon", "name": "Christopher Zell"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/b8a720b21d8c61a7fe22b9ba0ab1dbe50fe5ff5c", "committedDate": "2020-10-20T11:34:11Z", "message": "fix(borker): fix concurrent partition closing\n\nAllows to close and transition inorder. Previous multiple transitions\nand closing have worked against each other, which means it can lead to\nunexepected out comes or dead locks.\n\nTransitions are now executed in a sequential order. The closing will\nawait the current transition, before starting the next transition and\nclosing all resources.\n\nAdd new tests for transition from different Role and to close the\npartition when currently an transition is on going"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eb3cefbefa90b3fab8e395857dc6329245cce35b", "author": {"user": {"login": "Zelldon", "name": "Christopher Zell"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/eb3cefbefa90b3fab8e395857dc6329245cce35b", "committedDate": "2020-10-20T10:07:22Z", "message": "chore(broker): format"}, "afterCommit": {"oid": "b8a720b21d8c61a7fe22b9ba0ab1dbe50fe5ff5c", "author": {"user": {"login": "Zelldon", "name": "Christopher Zell"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/b8a720b21d8c61a7fe22b9ba0ab1dbe50fe5ff5c", "committedDate": "2020-10-20T11:34:11Z", "message": "fix(borker): fix concurrent partition closing\n\nAllows to close and transition inorder. Previous multiple transitions\nand closing have worked against each other, which means it can lead to\nunexepected out comes or dead locks.\n\nTransitions are now executed in a sequential order. The closing will\nawait the current transition, before starting the next transition and\nclosing all resources.\n\nAdd new tests for transition from different Role and to close the\npartition when currently an transition is on going"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2463, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}