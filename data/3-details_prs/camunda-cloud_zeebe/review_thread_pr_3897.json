{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MjcwMzE5", "number": 3897, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODowNzozNlrODimZ9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTowNDoyMlrODindpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjA3NDE0OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/state/instance/VariablesState.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODowNzozNlrOFt7_lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODowNzozNlrOFt7_lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzcxMzE3Mw==", "bodyText": "Please add missing params to doc.", "url": "https://github.com/camunda-cloud/zeebe/pull/3897#discussion_r383713173", "createdAt": "2020-02-25T08:07:36Z", "author": {"login": "deepthidevaki"}, "path": "engine/src/main/java/io/zeebe/engine/state/instance/VariablesState.java", "diffHunk": "@@ -221,6 +221,44 @@ private VariableInstance getVariableLocal(\n     return variablesColumnFamily.get(scopeKeyVariableNameKey);\n   }\n \n+  /**\n+   * Find the variable with the given name. If the variable is not present in the given scope then\n+   * it looks in the parent scope and continues until it is found.\n+   *\n+   * @param scopeKey the key of the variable scope to start from\n+   * @param name the name of the variable\n+   * @return the value of the variable, or {@code null} if it is not present in the variable scope\n+   */\n+  public DirectBuffer getVariable(final long scopeKey, final DirectBuffer name) {\n+    return getVariable(scopeKey, name, 0, name.capacity());\n+  }\n+\n+  /**\n+   * Find the variable with the given name. If the variable is not present in the given scope then\n+   * it looks in the parent scope and continues until it is found.\n+   *\n+   * @param scopeKey the key of the variable scope to start from\n+   * @param name the name of the variable\n+   * @return the value of the variable, or {@code null} if it is not present in the variable scope", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc0bab37e007d2c59624263a1727e55960bfaf1d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjE4MzQyOnYy", "diffSide": "RIGHT", "path": "expression-language/src/main/java/io/zeebe/el/impl/Loggers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwODo0NDo0MlrOFt9C_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMjowMjoxOVrOFuo7qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzczMDQyOQ==", "bodyText": "Do we need a new logger here? Also it is not used.", "url": "https://github.com/camunda-cloud/zeebe/pull/3897#discussion_r383730429", "createdAt": "2020-02-25T08:44:42Z", "author": {"login": "deepthidevaki"}, "path": "expression-language/src/main/java/io/zeebe/el/impl/Loggers.java", "diffHunk": "@@ -0,0 +1,15 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.el.impl;\n+\n+import io.zeebe.util.ZbLogger;\n+import org.slf4j.Logger;\n+\n+public final class Loggers {\n+  public static final Logger LOGGER = new ZbLogger(\"io.zeebe.expression-language\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc0bab37e007d2c59624263a1727e55960bfaf1d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ0OTQ1MQ==", "bodyText": "The logger is used in FeelToMessagePackTransformer.scala and MessagePackValueMapper.scala.\nCurrently, we create a class like this if we need a logger in a new module. We could also think about having all loggers defined in the util module.", "url": "https://github.com/camunda-cloud/zeebe/pull/3897#discussion_r384449451", "createdAt": "2020-02-26T12:02:19Z", "author": {"login": "saig0"}, "path": "expression-language/src/main/java/io/zeebe/el/impl/Loggers.java", "diffHunk": "@@ -0,0 +1,15 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.el.impl;\n+\n+import io.zeebe.util.ZbLogger;\n+import org.slf4j.Logger;\n+\n+public final class Loggers {\n+  public static final Logger LOGGER = new ZbLogger(\"io.zeebe.expression-language\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzczMDQyOQ=="}, "originalCommit": {"oid": "fc0bab37e007d2c59624263a1727e55960bfaf1d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjI0NzQxOnYy", "diffSide": "RIGHT", "path": "expression-language/src/main/scala/io/zeebe/el/impl/feel/FeelEvaluationResult.scala", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTowNDoyMlrOFt9qgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMjowNDoyMlrOFuo_Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0MDU0Ng==", "bodyText": "Is there a reason why this class was moved from java to scala?", "url": "https://github.com/camunda-cloud/zeebe/pull/3897#discussion_r383740546", "createdAt": "2020-02-25T09:04:22Z", "author": {"login": "deepthidevaki"}, "path": "expression-language/src/main/scala/io/zeebe/el/impl/feel/FeelEvaluationResult.scala", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.el.impl.feel\n+\n+import java.lang\n+\n+import io.zeebe.el.{EvaluationResult, Expression, ResultType}\n+import org.agrona.DirectBuffer\n+import org.camunda.feel.interpreter.{Val, ValBoolean, ValContext, ValList, ValNull, ValNumber, ValString}\n+\n+class FeelEvaluationResult(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc0bab37e007d2c59624263a1727e55960bfaf1d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDQ1MDMzNA==", "bodyText": "Yes. Because it uses Scala types it was easier to write it in Scala than Java.", "url": "https://github.com/camunda-cloud/zeebe/pull/3897#discussion_r384450334", "createdAt": "2020-02-26T12:04:22Z", "author": {"login": "saig0"}, "path": "expression-language/src/main/scala/io/zeebe/el/impl/feel/FeelEvaluationResult.scala", "diffHunk": "@@ -0,0 +1,54 @@\n+/**\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.el.impl.feel\n+\n+import java.lang\n+\n+import io.zeebe.el.{EvaluationResult, Expression, ResultType}\n+import org.agrona.DirectBuffer\n+import org.camunda.feel.interpreter.{Val, ValBoolean, ValContext, ValList, ValNull, ValNumber, ValString}\n+\n+class FeelEvaluationResult(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0MDU0Ng=="}, "originalCommit": {"oid": "fc0bab37e007d2c59624263a1727e55960bfaf1d"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4990, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}