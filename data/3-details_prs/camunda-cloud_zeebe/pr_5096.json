{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMDEzMzY3", "number": 5096, "title": "Remove ZeebeRaftStateMachine", "bodyText": "Description\n\nUse commit listener in LogStorageAppender to update logstream commitPosition instead of raft commit listener.\nRaft commit listener now only notifies with the raft index instead of the entry at the index. This way it does not have to read the log to notify listeners.\nDo not \"apply\" entries after the commit. Applying was only used to notify commit listeners. Rename ZeebeRaftStateMachine to LogCompactor\nSome cleanup of unused code and classes\n\nRelated issues\ncloses #4914\nDefinition of Done\nNot all items need to be done depending on the issue and the pull request.\nCode changes:\n\n The changes are backwards compatibility with previous versions\n If it fixes a bug then PRs are created to backport the fix to the last two minor versions\n\nTesting:\n\n There are unit/integration tests that verify all acceptance criterias of the issue\n New tests are written to ensure backwards compatibility with further versions\n The behavior is tested manually\n The impact of the changes is verified by a benchmark\n\nDocumentation:\n\n The documentation is updated (e.g. BPMN reference, configuration, examples, get-started guides, etc.)\n New content is added to the release announcement", "createdAt": "2020-08-03T07:51:07Z", "url": "https://github.com/camunda-cloud/zeebe/pull/5096", "merged": true, "mergeCommit": {"oid": "a907ef6e09c1554af475a872aecc70fadce7b1c8"}, "closed": true, "closedAt": "2020-08-07T13:55:25Z", "author": {"login": "deepthidevaki"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7NPEFABqjM2MTQ3MTMwMDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8jCdTABqjM2MzI5MzA2MTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc4d9835b3ec00a877924f6776ad51c4912d23c7", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/bc4d9835b3ec00a877924f6776ad51c4912d23c7", "committedDate": "2020-07-31T11:34:38Z", "message": "chore(logstreams): rename"}, "afterCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/de2ed1fa2bf8260ddf86dddc104289375a04e5cf", "committedDate": "2020-08-03T07:52:29Z", "message": "chore(logstreams): rename"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNTU1NjI0", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#pullrequestreview-460555624", "createdAt": "2020-08-04T07:18:52Z", "commit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzoxODo1MlrOG7UItQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzo1Nzo1NFrOG7VY-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg0OTA3Nw==", "bodyText": "lastApplied the last applied index and the last applied term\nNot really right? \ud83d\ude05\n\nThis method is only for the joining right? After it is ready it is successful joined?", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r464849077", "createdAt": "2020-08-04T07:18:52Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java", "diffHunk": "@@ -758,12 +733,16 @@ public long getLastApplied() {\n   }\n \n   /**\n-   * Returns the term of the last applied entry.\n+   * Sets the last applied index.\n    *\n-   * @return the last applied index\n+   * @param lastApplied the last applied index and the last applied term", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg0OTQ2NQ==", "bodyText": "Could we just move this to the commit method? and remove this property?", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r464849465", "createdAt": "2020-08-04T07:19:43Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java", "diffHunk": "@@ -758,12 +733,16 @@ public long getLastApplied() {\n   }\n \n   /**\n-   * Returns the term of the last applied entry.\n+   * Sets the last applied index.\n    *\n-   * @return the last applied index\n+   * @param lastApplied the last applied index and the last applied term", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg0OTA3Nw=="}, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2MDQyMw==", "bodyText": "Will this break compatibility? Because I think this configs are serialized?", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r464860423", "createdAt": "2020-08-04T07:41:24Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/partition/RaftPartitionGroupConfig.java", "diffHunk": "@@ -39,39 +37,10 @@\n   private Duration electionTimeout = DEFAULT_ELECTION_TIMEOUT;\n   private Duration heartbeatInterval = DEFAULT_HEARTBEAT_INTERVAL;\n   private RaftStorageConfig storageConfig = new RaftStorageConfig();\n-  private RaftCompactionConfig compactionConfig = new RaftCompactionConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2NjU0MQ==", "bodyText": "Something we should do here? The last applied is now the last commit index right?", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r464866541", "createdAt": "2020-08-04T07:52:40Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -145,6 +145,7 @@ private void addSnapshotListener() {\n     // If the index has already been applied, we have enough state to populate the state machine up\n     // to this index.\n     // Skip the snapshot and response successfully.\n+    // TODO: Does the following condition make sense?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2ODkyMg==", "bodyText": "where is this moved?", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r464868922", "createdAt": "2020-08-04T07:56:42Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -654,21 +646,6 @@ private void stepByStepClosing(\n             });\n   }\n \n-  @Override\n-  public <T extends RaftLogEntry> void onCommit(final Indexed<T> indexed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2OTYyNw==", "bodyText": "Could you move this please to the onCommit, since it is unrelated to releaseBackpressure", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r464869627", "createdAt": "2020-08-04T07:57:54Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/Listener.java", "diffHunk": "@@ -50,5 +50,6 @@ public void onCommitError(final long address, final Throwable error) {\n \n   private void releaseBackPressure() {\n     appender.releaseBackPressure(highestPosition);\n+    appender.notifyCommitPosition(highestPosition);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNzU1OTI1", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#pullrequestreview-460755925", "createdAt": "2020-08-04T12:15:36Z", "commit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjoxNTozNlrOG7duLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDowOTo0MlrOG7iIbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwNjEyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param latestEntry latest committed entry\n          \n          \n            \n               * @param lastCommitIndex index of the most recently committed entry", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r465006126", "createdAt": "2020-08-04T12:15:36Z", "author": {"login": "MiguelPires"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java", "diffHunk": "@@ -338,8 +331,8 @@ public void removeCommitListener(final RaftCommitListener commitListener) {\n    *\n    * @param latestEntry latest committed entry", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwNjQ4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return The server state machine.\n          \n          \n            \n               * @return The log compactor.", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r465006480", "createdAt": "2020-08-04T12:16:20Z", "author": {"login": "MiguelPires"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java", "diffHunk": "@@ -886,8 +865,8 @@ public RaftRoleMetrics getRaftRoleMetrics() {\n    *\n    * @return The server state machine.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAxMDY2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                logger.debug(\"Closing state machine {}\", raft.getName());\n          \n          \n            \n                logger.debug(\"Closing the log compactor {}\", raft.getName());", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r465010664", "createdAt": "2020-08-04T12:24:16Z", "author": {"login": "MiguelPires"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/zeebe/LogCompactor.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.atomix.raft.impl.zeebe;\n+\n+import io.atomix.raft.impl.RaftContext;\n+import io.atomix.raft.metrics.RaftServiceMetrics;\n+import io.atomix.raft.storage.log.RaftLogReader;\n+import io.atomix.utils.concurrent.ThreadContext;\n+import io.atomix.utils.logging.ContextualLoggerFactory;\n+import io.atomix.utils.logging.LoggerContext;\n+import java.util.concurrent.CompletableFuture;\n+import org.slf4j.Logger;\n+\n+public final class LogCompactor {\n+  private final RaftContext raft;\n+\n+  // hard coupled state\n+  private final RaftLogReader reader;\n+  private final Logger logger;\n+  private final RaftServiceMetrics metrics;\n+\n+  // used when performing compaction; may be updated from a different thread\n+  private volatile long compactableIndex;\n+\n+  public LogCompactor(final RaftContext raft) {\n+    this.raft = raft;\n+    this.reader = raft.getLog().openReader(1, RaftLogReader.Mode.COMMITS);\n+\n+    this.logger =\n+        ContextualLoggerFactory.getLogger(\n+            getClass(), LoggerContext.builder(getClass()).addValue(raft.getName()).build());\n+    this.metrics = new RaftServiceMetrics(raft.getName());\n+  }\n+\n+  public ThreadContext executor() {\n+    return raft.getThreadContext();\n+  }\n+\n+  /**\n+   * Assumes our snapshots are being taken asynchronously and we regularly update the compactable\n+   * index. Compaction is performed asynchronously.\n+   *\n+   * @return a future which is completed when the log has been compacted\n+   */\n+  public CompletableFuture<Void> compact() {\n+    raft.checkThread();\n+\n+    final var log = raft.getLog();\n+    if (log.isCompactable(compactableIndex)) {\n+      final var index = log.getCompactableIndex(compactableIndex);\n+      final var future = new CompletableFuture<Void>();\n+      logger.debug(\"Compacting log up from {} up to {}\", reader.getFirstIndex(), index);\n+      compact(index, future);\n+      return future;\n+    } else {\n+      logger.debug(\n+          \"Skipping compaction of non-compactable index {} (first log index: {})\",\n+          compactableIndex,\n+          reader.getFirstIndex());\n+    }\n+\n+    return CompletableFuture.completedFuture(null);\n+  }\n+\n+  public void close() {\n+    raft.checkThread();\n+    logger.debug(\"Closing state machine {}\", raft.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAxMTY5OA==", "bodyText": "I think this is never used", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r465011698", "createdAt": "2020-08-04T12:26:02Z", "author": {"login": "MiguelPires"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/zeebe/LogCompactor.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.atomix.raft.impl.zeebe;\n+\n+import io.atomix.raft.impl.RaftContext;\n+import io.atomix.raft.metrics.RaftServiceMetrics;\n+import io.atomix.raft.storage.log.RaftLogReader;\n+import io.atomix.utils.concurrent.ThreadContext;\n+import io.atomix.utils.logging.ContextualLoggerFactory;\n+import io.atomix.utils.logging.LoggerContext;\n+import java.util.concurrent.CompletableFuture;\n+import org.slf4j.Logger;\n+\n+public final class LogCompactor {\n+  private final RaftContext raft;\n+\n+  // hard coupled state\n+  private final RaftLogReader reader;\n+  private final Logger logger;\n+  private final RaftServiceMetrics metrics;\n+\n+  // used when performing compaction; may be updated from a different thread\n+  private volatile long compactableIndex;\n+\n+  public LogCompactor(final RaftContext raft) {\n+    this.raft = raft;\n+    this.reader = raft.getLog().openReader(1, RaftLogReader.Mode.COMMITS);\n+\n+    this.logger =\n+        ContextualLoggerFactory.getLogger(\n+            getClass(), LoggerContext.builder(getClass()).addValue(raft.getName()).build());\n+    this.metrics = new RaftServiceMetrics(raft.getName());\n+  }\n+\n+  public ThreadContext executor() {\n+    return raft.getThreadContext();\n+  }\n+\n+  /**\n+   * Assumes our snapshots are being taken asynchronously and we regularly update the compactable\n+   * index. Compaction is performed asynchronously.\n+   *\n+   * @return a future which is completed when the log has been compacted\n+   */\n+  public CompletableFuture<Void> compact() {\n+    raft.checkThread();\n+\n+    final var log = raft.getLog();\n+    if (log.isCompactable(compactableIndex)) {\n+      final var index = log.getCompactableIndex(compactableIndex);\n+      final var future = new CompletableFuture<Void>();\n+      logger.debug(\"Compacting log up from {} up to {}\", reader.getFirstIndex(), index);\n+      compact(index, future);\n+      return future;\n+    } else {\n+      logger.debug(\n+          \"Skipping compaction of non-compactable index {} (first log index: {})\",\n+          compactableIndex,\n+          reader.getFirstIndex());\n+    }\n+\n+    return CompletableFuture.completedFuture(null);\n+  }\n+\n+  public void close() {\n+    raft.checkThread();\n+    logger.debug(\"Closing state machine {}\", raft.getName());\n+    reader.close();\n+  }\n+\n+  public long getCompactableIndex() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3ODM4MA==", "bodyText": "Just a small nit: these changes that only move methods around are not ideal in my opinion. If they contain actual functional changes, those are obfuscated because the whole chunk becomes part of the diff, and they also make the PR unnecessarily bigger. Our code style says \"while we don't enforce an ordering for instance methods, it's recommended to group them together based on functionality.\" which I guess is not the goal here. I guess this happens because of automatic method reordering in Intellij but it has some drawbacks for the reviewer", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r465078380", "createdAt": "2020-08-04T14:09:42Z", "author": {"login": "MiguelPires"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/LeaderRole.java", "diffHunk": "@@ -93,27 +92,6 @@ public LeaderRole(final RaftContext context) {\n     return super.start().thenRun(this::startTimers).thenApply(v -> this);\n   }\n \n-  private ZeebeEntry findLastZeebeEntry() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDU1NTk4", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#pullrequestreview-463055598", "createdAt": "2020-08-07T06:07:24Z", "commit": {"oid": "2a5a970ec48e97f54aee475ae32757c240dcd03e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjowNzoyNFrOG9NoJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjowNzoyNFrOG9NoJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzOTU4OQ==", "bodyText": "Do you think we need the max ? So max of current and previous commit? Idk why this was done before. I had hoped that we have the guarantee that this is increasing \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r466839589", "createdAt": "2020-08-07T06:07:24Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java", "diffHunk": "@@ -723,28 +727,6 @@ public void setEntryValidator(final EntryValidator validator) {\n     this.entryValidator = validator;\n   }\n \n-  /**\n-   * Returns the last applied index.\n-   *\n-   * @return the last applied index\n-   */\n-  public long getLastApplied() {\n-    return lastApplied;\n-  }\n-\n-  /**\n-   * Sets the last applied index.\n-   *\n-   * @param lastApplied the last applied index and the last applied term\n-   */\n-  private void setLastApplied(final long lastApplied) {\n-    this.lastApplied = Math.max(this.lastApplied, lastApplied);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a5a970ec48e97f54aee475ae32757c240dcd03e"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDU2MDE3", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#pullrequestreview-463056017", "createdAt": "2020-08-07T06:08:35Z", "commit": {"oid": "b7ae9489be1a76572ff0c7c907c202b603a0ab48"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMTE1MDAx", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#pullrequestreview-463115001", "createdAt": "2020-08-07T08:05:32Z", "commit": {"oid": "b7ae9489be1a76572ff0c7c907c202b603a0ab48"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3dec413534b8b7422ccc644dd231769ab4b0ff10", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/3dec413534b8b7422ccc644dd231769ab4b0ff10", "committedDate": "2020-08-07T11:50:32Z", "message": "chore(logstreams): use LogStorageAppender commit listener to update commit position"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "473cc21052fee518ef659d64c6d405b986c482ab", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/473cc21052fee518ef659d64c6d405b986c482ab", "committedDate": "2020-08-07T11:50:32Z", "message": "chore(atomix): refactor raft commit listener and remove state machine\n* commit listener only notifies the index instead of the entry. So it does not have to re-read the entries to notify listeners.\n* Rename ZeebeRaftStateMachine to LogCompactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d36385686dad03919396c355f4f29f0b8965e348", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/d36385686dad03919396c355f4f29f0b8965e348", "committedDate": "2020-08-07T11:50:32Z", "message": "chore(atomix): remove unused RaftCompactionConfig"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7ae9489be1a76572ff0c7c907c202b603a0ab48", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/b7ae9489be1a76572ff0c7c907c202b603a0ab48", "committedDate": "2020-08-06T09:42:32Z", "message": "chore(atomix): remove unused code"}, "afterCommit": {"oid": "d36385686dad03919396c355f4f29f0b8965e348", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/d36385686dad03919396c355f4f29f0b8965e348", "committedDate": "2020-08-07T11:50:32Z", "message": "chore(atomix): remove unused RaftCompactionConfig"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2621, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}