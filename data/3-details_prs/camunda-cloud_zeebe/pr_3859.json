{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MTM3NzM4", "number": 3859, "title": "feat(broker): process id as expression", "bodyText": "Description\n\nnew module to parse and evaluate expressions\nabstract from concrete expression language\nintegrate expression into call activity transformer and handler\nextract common engine expression usage\n\nRelated issues\ncloses #3792\nPull Request Checklist\n\n All commit messages match our commit message guidelines\n The submitting code follows our code style\n If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-02-17T13:31:01Z", "url": "https://github.com/camunda-cloud/zeebe/pull/3859", "merged": true, "mergeCommit": {"oid": "37c62ff9df7bb1daa8f3d183602f253f0468e82c"}, "closed": true, "closedAt": "2020-02-18T13:20:04Z", "author": {"login": "saig0"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFfDYLgFqTM2MDE1NDE5MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFhgsigFqTM2MDMxNTUyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMTU0MTkx", "url": "https://github.com/camunda-cloud/zeebe/pull/3859#pullrequestreview-360154191", "createdAt": "2020-02-18T08:46:10Z", "commit": {"oid": "8436c4d1989629cb6169f965a3a3e4d376449b91"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwODo0ODoyMVrOFq5n1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwODo0ODoyMVrOFq5n1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUyODU5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          \"Expected FEEL expression (e.g. '${variableName}') or static value (e.g. 'jobType') but found '%s'\",\n          \n          \n            \n                          \"Expected FEEL expression (e.g. '=variableName') or static value (e.g. 'jobType') but found '%s'\",", "url": "https://github.com/camunda-cloud/zeebe/pull/3859#discussion_r380528599", "createdAt": "2020-02-18T08:48:21Z", "author": {"login": "deepthidevaki"}, "path": "expression-language/src/main/java/io/zeebe/el/impl/FeelExpressionLanguage.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.el.impl;\n+\n+import static io.zeebe.util.EnsureUtil.ensureNotNull;\n+\n+import io.zeebe.el.EvaluationResult;\n+import io.zeebe.el.Expression;\n+import io.zeebe.el.ExpressionLanguage;\n+import java.util.regex.Pattern;\n+import org.agrona.DirectBuffer;\n+import org.camunda.feel.FeelEngine;\n+import org.camunda.feel.FeelEngine.Failure;\n+import org.camunda.feel.ParsedExpression;\n+import org.camunda.feel.spi.JavaValueMapper;\n+import scala.util.Either;\n+\n+/**\n+ * A wrapper around the FEEL-Scala expression language.\n+ *\n+ * <p>\n+ * <li><a href=\"https://github.com/camunda/feel-scala\">GitHub Repository</a>\n+ * <li><a href=\"https://camunda.github.io/feel-scala\">Documentation</a>\n+ */\n+public final class FeelExpressionLanguage implements ExpressionLanguage {\n+\n+  private static final Pattern EXPRESSION_PATTERN = Pattern.compile(\"\\\\=(.+)\");\n+  private static final Pattern STATIC_VALUE_PATTERN = Pattern.compile(\"[a-zA-Z][a-zA-Z0-9_\\\\-]*\");\n+\n+  private final FeelEngine feelEngine =\n+      new FeelEngine.Builder().customValueMapper(new JavaValueMapper()).build();\n+\n+  private final MessagePackConverter messagePackConverter = new MessagePackConverter();\n+\n+  @Override\n+  public Expression parseExpression(final String expression) {\n+    ensureNotNull(\"expression\", expression);\n+\n+    final var expressionMatcher = EXPRESSION_PATTERN.matcher(expression);\n+    final var valueMather = STATIC_VALUE_PATTERN.matcher(expression);\n+\n+    if (expressionMatcher.matches()) {\n+      final var unpackedExpression = expressionMatcher.group(1);\n+      return parseFeelExpression(unpackedExpression);\n+\n+    } else if (valueMather.matches()) {\n+      final var value = valueMather.group();\n+      return new StaticExpression(value);\n+\n+    } else {\n+      final var failureMessage =\n+          String.format(\n+              \"Expected FEEL expression (e.g. '${variableName}') or static value (e.g. 'jobType') but found '%s'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8436c4d1989629cb6169f965a3a3e4d376449b91"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37c62ff9df7bb1daa8f3d183602f253f0468e82c", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/37c62ff9df7bb1daa8f3d183602f253f0468e82c", "committedDate": "2020-02-18T12:55:12Z", "message": "feat(broker): process id as expression\n\n* new module to parse and evaluate expressions\n* abstract from concrete expression language\n* integrate expression into call activity transformer and handler\n* extract common engine expression usage"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5802d485429c7a69488f7bab573922103bf548da", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/5802d485429c7a69488f7bab573922103bf548da", "committedDate": "2020-02-18T12:04:08Z", "message": "chore(expression-language): fix failure message\n\nCo-Authored-By: Deepthi Devaki Akkoorath <deepthidevaki@users.noreply.github.com>"}, "afterCommit": {"oid": "37c62ff9df7bb1daa8f3d183602f253f0468e82c", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/37c62ff9df7bb1daa8f3d183602f253f0468e82c", "committedDate": "2020-02-18T12:55:12Z", "message": "feat(broker): process id as expression\n\n* new module to parse and evaluate expressions\n* abstract from concrete expression language\n* integrate expression into call activity transformer and handler\n* extract common engine expression usage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMzE1NTI1", "url": "https://github.com/camunda-cloud/zeebe/pull/3859#pullrequestreview-360315525", "createdAt": "2020-02-18T12:58:17Z", "commit": {"oid": "37c62ff9df7bb1daa8f3d183602f253f0468e82c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3139, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}