{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MzcwNzE5", "number": 3995, "title": "Close logstream on transition", "bodyText": "Description\nInstead of relying on writers to close the dispatcher when transitioning to follower, we now close logstream on each role transition and recreate it. So when a node transition between leader to follower to leader, it does not re-use the dispatcher position from previous leader role.\nRelated issues\ncloses #3966\ncloses #3920\nRelated to #3965\nPull Request Checklist\n\n All commit messages match our commit message guidelines\n The submitting code follows our code style\n If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-03-05T16:17:53Z", "url": "https://github.com/camunda-cloud/zeebe/pull/3995", "merged": true, "mergeCommit": {"oid": "074822252dc2c9628da144d6f6c00de2cd9bfae6"}, "closed": true, "closedAt": "2020-03-11T12:44:16Z", "author": {"login": "deepthidevaki"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLA3_EAFqTM3MDM0NzQ3Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMkmZrABqjMxMTgxOTc2MDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwMzQ3NDcy", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#pullrequestreview-370347472", "createdAt": "2020-03-06T14:10:31Z", "commit": {"oid": "7c984b1125f4b50eec7bb445b86e31c0a120f912"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDoxMDozMVrOFy58zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDoxOTo1MlrOFy6RxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyMjU3NQ==", "bodyText": "It is not only deletion service right? Maybe we split it more or we rename to install state?", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388922575", "createdAt": "2020-03-06T14:10:31Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -276,6 +279,35 @@ private void transitionToLeader(final CompletableActorFuture<Void> transitionCom\n   }\n \n   private ActorFuture<Void> basePartitionInstallation() {\n+    final ActorFuture installFuture = new CompletableActorFuture();\n+    openLogStream()\n+        .onComplete(\n+            (log, error) -> {\n+              if (error == null) {\n+                this.logStream = log;\n+                if (!deferredCommitNotifications.isEmpty()) {\n+                  deferredCommitNotifications.forEach(Runnable::run);\n+                  deferredCommitNotifications.clear();\n+                }\n+                installDeletionService()\n+                    .onComplete(\n+                        (deletionService, errorInstall) -> {\n+                          if (errorInstall == null) {\n+                            installFuture.complete(deletionService);\n+                          } else {\n+                            installFuture.completeExceptionally(errorInstall);\n+                          }\n+                        });\n+              } else {\n+                LOG.error(\"Failed to install log stream for partition {}\", partitionId, error);\n+                installFuture.completeExceptionally(error);\n+                onFailure();\n+              }\n+            });\n+    return installFuture;\n+  }\n+\n+  private ActorFuture<Void> installDeletionService() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c984b1125f4b50eec7bb445b86e31c0a120f912"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyMjY5Nw==", "bodyText": "Why we need this ? \ud83d\udc40", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388922697", "createdAt": "2020-03-06T14:10:44Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -276,6 +279,35 @@ private void transitionToLeader(final CompletableActorFuture<Void> transitionCom\n   }\n \n   private ActorFuture<Void> basePartitionInstallation() {\n+    final ActorFuture installFuture = new CompletableActorFuture();\n+    openLogStream()\n+        .onComplete(\n+            (log, error) -> {\n+              if (error == null) {\n+                this.logStream = log;\n+                if (!deferredCommitNotifications.isEmpty()) {\n+                  deferredCommitNotifications.forEach(Runnable::run);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c984b1125f4b50eec7bb445b86e31c0a120f912"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyMzIwOQ==", "bodyText": "In these cases we also would not delete the log stream right?", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388923209", "createdAt": "2020-03-06T14:11:37Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -430,16 +461,40 @@ private StreamProcessor createStreamProcessor(final ZeebeDb zeebeDb) {\n     return closingPartitionFuture;\n   }\n \n-  private void tearDownBaseInstallation() {\n+  private void tearDownBaseInstallation(final CompletableActorFuture<Void> closeFuture) {\n     if (closeStateReplication()) {\n+      closeFuture.complete(null);\n       return;\n     }\n \n     if (closeSnapshotController()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c984b1125f4b50eec7bb445b86e31c0a120f912"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNDEwMw==", "bodyText": "I dont think that this is necessary. Because at some point we will get the next commit position and we also seek to the last committed position, so for me there is no need for that?", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388924103", "createdAt": "2020-03-06T14:13:19Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -518,7 +573,15 @@ private void stepByStepClosing(\n   @Override\n   public <T extends RaftLogEntry> void onCommit(final Indexed<T> indexed) {\n     if (indexed.type() == ZeebeEntry.class) {\n-      this.logStream.setCommitPosition(indexed.<ZeebeEntry>cast().entry().highestPosition());\n+      actor.run(\n+          () -> {\n+            final long commitPosition = indexed.<ZeebeEntry>cast().entry().highestPosition();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c984b1125f4b50eec7bb445b86e31c0a120f912"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNDQ1Mw==", "bodyText": "We can remove this then again", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388924453", "createdAt": "2020-03-06T14:13:56Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStreamBatchWriterImpl.java", "diffHunk": "@@ -296,7 +293,5 @@ private void resetEvent() {\n   }\n \n   @Override\n-  public void close() {\n-    closeCallback.run();\n-  }\n+  public void close() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c984b1125f4b50eec7bb445b86e31c0a120f912"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNjI4MQ==", "bodyText": "So this means the first writer will create the appender right?", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388926281", "createdAt": "2020-03-06T14:16:48Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStreamImpl.java", "diffHunk": "@@ -193,78 +174,78 @@ public void removeOnCommitPositionUpdatedCondition(final ActorCondition conditio\n   }\n \n   @Override\n-  public ActorFuture<LogStreamReader> newLogStreamReader() {\n-    return actor.call(\n-        () -> {\n-          final LogStreamReaderImpl reader = new LogStreamReaderImpl(logStorage);\n-          readers.add(reader);\n-          return reader;\n-        });\n+  public String getName() {\n+    return actorName;\n   }\n \n   @Override\n-  public ActorFuture<LogStreamRecordWriter> newLogStreamRecordWriter() {\n-    // this should be replaced after refactoring the actor control\n-    if (actor.isClosed()) {\n-      return CompletableActorFuture.completedExceptionally(new RuntimeException(\"Actor is closed\"));\n+  protected void onActorClosing() {\n+    LOG.info(\"On closing logstream {} close {} readers\", logName, readers.size());\n+    readers.forEach(LogStreamReader::close);\n+    LOG.info(\"Close log storage with name {}\", logName);\n+    logStorage.close();\n+  }\n+\n+  @Override\n+  protected void onActorClosed() {\n+    if (closeError != null) {\n+      closeFuture.completeExceptionally(closeError);\n+    } else {\n+      closeFuture.complete(null);\n     }\n+  }\n \n-    final var writerFuture = new CompletableActorFuture<LogStreamRecordWriter>();\n-    actor.run(() -> createWriter(writerFuture, LogStreamWriterImpl::new));\n-    return writerFuture;\n+  @Override\n+  public void close() {\n+    closeAsync().join();\n   }\n \n   @Override\n-  public ActorFuture<LogStreamBatchWriter> newLogStreamBatchWriter() {\n-    // this should be replaced after refactoring the actor control\n+  public ActorFuture<Void> closeAsync() {\n     if (actor.isClosed()) {\n-      return CompletableActorFuture.completedExceptionally(new RuntimeException(\"Actor is closed\"));\n+      return closeFuture;\n     }\n \n-    final var writerFuture = new CompletableActorFuture<LogStreamBatchWriter>();\n-    actor.run(() -> createWriter(writerFuture, LogStreamBatchWriterImpl::new));\n-    return writerFuture;\n+    actor.call(\n+        () ->\n+            closeAppender()\n+                .onComplete(\n+                    (nothing, appenderError) -> {\n+                      closeError = appenderError;\n+                      actor.close();\n+                    }));\n+    return closeFuture;\n+  }\n+\n+  private void internalSetCommitPosition(final long commitPosition) {\n+    if (commitPosition > this.commitPosition) {\n+      this.commitPosition = commitPosition;\n+      onCommitPositionUpdatedConditions.signalConsumers();\n+    }\n   }\n \n   private <T extends LogStreamWriter> void createWriter(\n       final CompletableActorFuture<T> writerFuture, final WriterCreator<T> creator) {\n-    final var alreadyOpenWriters = openWriterCount.getAndIncrement();\n-    if (alreadyOpenWriters == 0) {\n-      openAppender().onComplete(onOpenAppender(writerFuture, creator));\n-    } else if (appender != null) {\n-      writerFuture.complete(creator.create(partitionId, writeBuffer, this::releaseWriter));\n+    if (appender != null) {\n+      writerFuture.complete(creator.create(partitionId, writeBuffer));\n     } else if (appenderFuture != null) {\n       appenderFuture.onComplete(onOpenAppender(writerFuture, creator));\n     } else {\n-      final var errorMsg =\n-          String.format(\n-              \"Expected to have an open appender, since we have already %d open writers\",\n-              alreadyOpenWriters);\n-      writerFuture.completeExceptionally(new IllegalStateException(errorMsg));\n+      openAppender().onComplete(onOpenAppender(writerFuture, creator));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c984b1125f4b50eec7bb445b86e31c0a120f912"}, "originalPosition": 197}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNjcyNA==", "bodyText": "this can also be removed", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388926724", "createdAt": "2020-03-06T14:17:36Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStreamWriterImpl.java", "diffHunk": "@@ -173,7 +170,5 @@ private long claimLogEntry(final int valueLength, final int metadataLength) {\n   }\n \n   @Override\n-  public void close() {\n-    closeCallback.run();\n-  }\n+  public void close() {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c984b1125f4b50eec7bb445b86e31c0a120f912"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNzA3OQ==", "bodyText": "Do we already have a test for creating reader or writer on closed log stream?", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388927079", "createdAt": "2020-03-06T14:18:16Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/test/java/io/zeebe/logstreams/log/LogStreamBatchWriterTest.java", "diffHunk": "@@ -414,4 +414,16 @@ public void shouldNotFailToWriteBatchWithoutEvents() {\n     // then\n     assertThat(pos).isEqualTo(0);\n   }\n+\n+  @Test\n+  public void shouldFailToWriteOnClosedLogStream() {\n+    // given\n+    logStreamRule.getLogStream().close();\n+\n+    // when\n+    final long pos = writer.event().key(1).value(EVENT_VALUE_1).done().tryWrite();\n+\n+    // then\n+    assertThat(pos).isEqualTo(-1);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c984b1125f4b50eec7bb445b86e31c0a120f912"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNzQ3MQ==", "bodyText": "I like the test but please use assertj", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388927471", "createdAt": "2020-03-06T14:18:58Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/test/java/io/zeebe/logstreams/log/LogStreamTest.java", "diffHunk": "@@ -92,6 +92,25 @@ public void shouldCloseLogStream() {\n     assertThatThrownBy(() -> logStream.newLogStreamBatchWriter()).hasMessage(\"Actor is closed\");\n   }\n \n+  @Test\n+  public void shouldIncreasePositionOnRestart() {\n+    // given\n+    final LogStreamRecordWriter writer = logStream.newLogStreamRecordWriter();\n+    writer.value(wrapString(\"value\")).tryWrite();\n+    writer.value(wrapString(\"value\")).tryWrite();\n+    writer.value(wrapString(\"value\")).tryWrite();\n+    final long positionBeforeClose = writer.value(wrapString(\"value\")).tryWrite();\n+\n+    // when\n+    logStream.close();\n+    logStreamRule.createLogStream();\n+    final LogStreamRecordWriter newWriter = logStreamRule.getLogStream().newLogStreamRecordWriter();\n+    final long positionAfterReOpen = newWriter.value(wrapString(\"value\")).tryWrite();\n+\n+    // then\n+    assert (positionAfterReOpen > positionBeforeClose);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c984b1125f4b50eec7bb445b86e31c0a120f912"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNzk0MQ==", "bodyText": "does it need to be public available?", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r388927941", "createdAt": "2020-03-06T14:19:52Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/test/java/io/zeebe/logstreams/util/LogStreamRule.java", "diffHunk": "@@ -90,7 +90,7 @@ protected void after() {\n     actorSchedulerRule.after();\n   }\n \n-  private void startLogStream() {\n+  public void createLogStream() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c984b1125f4b50eec7bb445b86e31c0a120f912"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzAxODE5", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#pullrequestreview-371701819", "createdAt": "2020-03-10T06:16:39Z", "commit": {"oid": "0b4672ecf845f39941068cd4e7c038996a9188f6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjoxNjozOVrOF0Cmbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjoyMDoyOFrOF0Cp6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMjg3OA==", "bodyText": "It seems your IDE orders methods lexicographically.", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r390112878", "createdAt": "2020-03-10T06:16:39Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/engine/impl/SubscriptionApiCommandMessageHandlerService.java", "diffHunk": "@@ -36,16 +36,17 @@ public String getName() {\n     return actorName;\n   }\n \n+  @Override\n+  protected void onActorStarting() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4672ecf845f39941068cd4e7c038996a9188f6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMzM4Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r390113382", "createdAt": "2020-03-10T06:18:54Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -430,16 +461,32 @@ private StreamProcessor createStreamProcessor(final ZeebeDb zeebeDb) {\n     return closingPartitionFuture;\n   }\n \n-  private void tearDownBaseInstallation() {\n-    if (closeStateReplication()) {\n-      return;\n-    }\n+  private void tearDownBaseInstallation(final CompletableActorFuture<Void> closeFuture) {\n+    closeStateReplication();\n+    closeSnapshotController();\n+    closeSnapshotStorage();\n \n-    if (closeSnapshotController()) {\n-      return;\n+    closeLogStream()\n+        .onComplete(\n+            (closed, error) -> {\n+              if (error == null) {\n+                closeFuture.complete(null);\n+              } else {\n+                LOG.error(\n+                    \"Unexpected error on closing logstream for partition {}\", partitionId, error);\n+                closeFuture.completeExceptionally(error);\n+              }\n+            });\n+  }\n+\n+  private ActorFuture<Void> closeLogStream() {\n+    if (logStream == null) {\n+      return CompletableActorFuture.completed(null);\n     }\n \n-    closeSnapshotStorage();\n+    final LogStream logStreamToClose = logStream;\n+    logStream = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b4672ecf845f39941068cd4e7c038996a9188f6"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMzc2OQ==", "bodyText": "Btw does it mean that we collect all commits on follower? didn't we go out of mem at some point?", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#discussion_r390113769", "createdAt": "2020-03-10T06:20:28Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -518,7 +573,15 @@ private void stepByStepClosing(\n   @Override\n   public <T extends RaftLogEntry> void onCommit(final Indexed<T> indexed) {\n     if (indexed.type() == ZeebeEntry.class) {\n-      this.logStream.setCommitPosition(indexed.<ZeebeEntry>cast().entry().highestPosition());\n+      actor.run(\n+          () -> {\n+            final long commitPosition = indexed.<ZeebeEntry>cast().entry().highestPosition();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODkyNDEwMw=="}, "originalCommit": {"oid": "7c984b1125f4b50eec7bb445b86e31c0a120f912"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMDA0ODk5", "url": "https://github.com/camunda-cloud/zeebe/pull/3995#pullrequestreview-372004899", "createdAt": "2020-03-10T14:29:36Z", "commit": {"oid": "edab0f113c1fc7021ead5b4f069717cbf0d66d31"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "edab0f113c1fc7021ead5b4f069717cbf0d66d31", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/edab0f113c1fc7021ead5b4f069717cbf0d66d31", "committedDate": "2020-03-10T12:19:19Z", "message": "chore(broker): remember only last commit position"}, "afterCommit": {"oid": "8bfc1cfcbb3ad0a844581096eaa089982e738e96", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8bfc1cfcbb3ad0a844581096eaa089982e738e96", "committedDate": "2020-03-10T15:12:55Z", "message": "chore(broker): close and recreate logstream on role transition\n\nchore(logstream): remove reference counting on logstream writers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b46d1681088dffa6abc44e9de6e60f55edf9ff6", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/0b46d1681088dffa6abc44e9de6e60f55edf9ff6", "committedDate": "2020-03-11T10:27:23Z", "message": "chore(broker): close and recreate logstream on role transition\n\nchore(logstream): remove reference counting on logstream writers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8bfc1cfcbb3ad0a844581096eaa089982e738e96", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8bfc1cfcbb3ad0a844581096eaa089982e738e96", "committedDate": "2020-03-10T15:12:55Z", "message": "chore(broker): close and recreate logstream on role transition\n\nchore(logstream): remove reference counting on logstream writers"}, "afterCommit": {"oid": "0b46d1681088dffa6abc44e9de6e60f55edf9ff6", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/0b46d1681088dffa6abc44e9de6e60f55edf9ff6", "committedDate": "2020-03-11T10:27:23Z", "message": "chore(broker): close and recreate logstream on role transition\n\nchore(logstream): remove reference counting on logstream writers"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3038, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}