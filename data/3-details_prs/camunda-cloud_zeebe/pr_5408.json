{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxODUzMzA1", "number": 5408, "title": "Admin api for brokers", "bodyText": "Description\nExpose an interface to trigger following functions externally\n\ntrigger snapshots on all partitions\npause processing on all partitions\nresume processing on all partitions\nprepare for upgrade - which internally pause processing and trigger snapshots\nquery status of partitions\n\nThe endpoint can be enable/disabled by configuration.\nRelated issues\ncloses #5405\nDefinition of Done\nNot all items need to be done depending on the issue and the pull request.\nCode changes:\n\n The changes are backwards compatibility with previous versions\n If it fixes a bug then PRs are created to backport the fix to the last two minor versions\n\nTesting:\n\n There are unit/integration tests that verify all acceptance criterias of the issue\n New tests are written to ensure backwards compatibility with further versions\n The behavior is tested manually\n The impact of the changes is verified by a benchmark\n\nDocumentation:\n\n The documentation is updated (e.g. BPMN reference, configuration, examples, get-started guides, etc.)\n New content is added to the release announcement", "createdAt": "2020-09-23T15:12:46Z", "url": "https://github.com/camunda-cloud/zeebe/pull/5408", "merged": true, "mergeCommit": {"oid": "2b4e9fa5df5e77882ca1b69e9d1a05f6ac278210"}, "closed": true, "closedAt": "2020-09-30T08:25:30Z", "author": {"login": "deepthidevaki"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLuKKSABqjM3OTg2NzU1MDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdN4BlgABqjM4MjMxNTMxNjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a5316ea0c8f270e0f665a11fcdf7ecf5ac45005", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/3a5316ea0c8f270e0f665a11fcdf7ecf5ac45005", "committedDate": "2020-09-23T13:24:14Z", "message": "chore(broker): fix sonarlint"}, "afterCommit": {"oid": "42c811630054c530ed3f0533f4da29b1e04d1ae9", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/42c811630054c530ed3f0533f4da29b1e04d1ae9", "committedDate": "2020-09-23T15:16:50Z", "message": "chore(broker): fix sonarlint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MTgwMDc1", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#pullrequestreview-497180075", "createdAt": "2020-09-28T04:31:54Z", "commit": {"oid": "42c811630054c530ed3f0533f4da29b1e04d1ae9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNDozMTo1NFrOHYuI6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNTozNDozMVrOHYu_YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4MzgxNw==", "bodyText": "Let's discuss if we want to implement this as a Spring Boot Actuator instead.\nhttps://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-custom", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#discussion_r495683817", "createdAt": "2020-09-28T04:31:54Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceEndpoint.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.management;\n+\n+import io.zeebe.broker.SpringBrokerBridge;\n+import java.util.Map;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+@RestController\n+@ConditionalOnProperty(\"management.endpoint.zeebe-admin.enabled\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42c811630054c530ed3f0533f4da29b1e04d1ae9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4NDM5Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              final List<ZeebePartition> partitions;\n          \n          \n            \n              private final List<ZeebePartition> partitions;", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#discussion_r495684396", "createdAt": "2020-09-28T04:34:57Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.management;\n+\n+import io.zeebe.broker.Loggers;\n+import io.zeebe.broker.system.partitions.ZeebePartition;\n+import io.zeebe.engine.processing.streamprocessor.StreamProcessor;\n+import io.zeebe.snapshots.broker.impl.FileBasedSnapshotMetadata;\n+import io.zeebe.snapshots.raft.PersistedSnapshot;\n+import io.zeebe.util.sched.Actor;\n+import io.zeebe.util.sched.future.ActorFuture;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+\n+/**\n+ * A service that exposes interface to control some of the core functionalities of the broker such\n+ * as * Pause stream processing * Force take a snapshot\n+ *\n+ * <p>This is intended to be used only by experts\n+ */\n+public class BrokerAdminServiceImpl extends Actor implements BrokerAdminService {\n+\n+  private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+  final List<ZeebePartition> partitions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42c811630054c530ed3f0533f4da29b1e04d1ae9"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4NjM2MQ==", "bodyText": "It is not very likely but we should handle the exceptional case.", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#discussion_r495686361", "createdAt": "2020-09-28T04:44:59Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.management;\n+\n+import io.zeebe.broker.Loggers;\n+import io.zeebe.broker.system.partitions.ZeebePartition;\n+import io.zeebe.engine.processing.streamprocessor.StreamProcessor;\n+import io.zeebe.snapshots.broker.impl.FileBasedSnapshotMetadata;\n+import io.zeebe.snapshots.raft.PersistedSnapshot;\n+import io.zeebe.util.sched.Actor;\n+import io.zeebe.util.sched.future.ActorFuture;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+\n+/**\n+ * A service that exposes interface to control some of the core functionalities of the broker such\n+ * as * Pause stream processing * Force take a snapshot\n+ *\n+ * <p>This is intended to be used only by experts\n+ */\n+public class BrokerAdminServiceImpl extends Actor implements BrokerAdminService {\n+\n+  private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+  final List<ZeebePartition> partitions;\n+\n+  public BrokerAdminServiceImpl(final List<ZeebePartition> partitions) {\n+    this.partitions = partitions;\n+  }\n+\n+  @Override\n+  public void pauseStreamProcessing() {\n+    actor.call(this::pauseStreamProcessingOnAllPartitions);\n+  }\n+\n+  @Override\n+  public void resumeStreamProcessing() {\n+    actor.call(this::unpauseStreamProcessingOnAllPartitions);\n+  }\n+\n+  @Override\n+  public void takeSnapshot() {\n+    actor.call(() -> takeSnapshotOnAllPartitions(partitions));\n+  }\n+\n+  @Override\n+  public void prepareForUpgrade() {\n+    actor.call(this::prepareAllPartitionsForSafeUpgrade);\n+  }\n+\n+  @Override\n+  public Map<Integer, PartitionStatus> getPartitionStatus() {\n+    final CompletableFuture<Map<Integer, PartitionStatus>> future = new CompletableFuture<>();\n+    final Map<Integer, PartitionStatus> partitionStatuses = new ConcurrentHashMap<>();\n+    actor.call(\n+        () -> {\n+          final var statusFutures =\n+              partitions.stream()\n+                  .map(\n+                      partition ->\n+                          getPartitionStatus(partition)\n+                              .whenComplete(\n+                                  (ps, error) ->\n+                                      partitionStatuses.put(partition.getPartitionId(), ps)))\n+                  .collect(Collectors.toList());\n+          CompletableFuture.allOf(statusFutures.toArray(CompletableFuture[]::new))\n+              .thenAccept(r -> future.complete(partitionStatuses));\n+        });\n+    return future.join();\n+  }\n+\n+  private CompletableFuture<PartitionStatus> getPartitionStatus(final ZeebePartition partition) {\n+    final CompletableFuture<PartitionStatus> partitionStatus = new CompletableFuture<>();\n+    getStreamProcessor(partition)\n+        .onComplete(\n+            (streamProcessor, throwable) ->\n+                streamProcessor.ifPresentOrElse(\n+                    sp -> getLeaderPartitionStatus(partition, sp, partitionStatus),\n+                    () -> getFollowerPartitionStatus(partition, partitionStatus)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42c811630054c530ed3f0533f4da29b1e04d1ae9"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4NjQzNg==", "bodyText": "If getPartitionStatus() can be completed exceptionally then we need to handle it.", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#discussion_r495686436", "createdAt": "2020-09-28T04:45:14Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.management;\n+\n+import io.zeebe.broker.Loggers;\n+import io.zeebe.broker.system.partitions.ZeebePartition;\n+import io.zeebe.engine.processing.streamprocessor.StreamProcessor;\n+import io.zeebe.snapshots.broker.impl.FileBasedSnapshotMetadata;\n+import io.zeebe.snapshots.raft.PersistedSnapshot;\n+import io.zeebe.util.sched.Actor;\n+import io.zeebe.util.sched.future.ActorFuture;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+\n+/**\n+ * A service that exposes interface to control some of the core functionalities of the broker such\n+ * as * Pause stream processing * Force take a snapshot\n+ *\n+ * <p>This is intended to be used only by experts\n+ */\n+public class BrokerAdminServiceImpl extends Actor implements BrokerAdminService {\n+\n+  private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+  final List<ZeebePartition> partitions;\n+\n+  public BrokerAdminServiceImpl(final List<ZeebePartition> partitions) {\n+    this.partitions = partitions;\n+  }\n+\n+  @Override\n+  public void pauseStreamProcessing() {\n+    actor.call(this::pauseStreamProcessingOnAllPartitions);\n+  }\n+\n+  @Override\n+  public void resumeStreamProcessing() {\n+    actor.call(this::unpauseStreamProcessingOnAllPartitions);\n+  }\n+\n+  @Override\n+  public void takeSnapshot() {\n+    actor.call(() -> takeSnapshotOnAllPartitions(partitions));\n+  }\n+\n+  @Override\n+  public void prepareForUpgrade() {\n+    actor.call(this::prepareAllPartitionsForSafeUpgrade);\n+  }\n+\n+  @Override\n+  public Map<Integer, PartitionStatus> getPartitionStatus() {\n+    final CompletableFuture<Map<Integer, PartitionStatus>> future = new CompletableFuture<>();\n+    final Map<Integer, PartitionStatus> partitionStatuses = new ConcurrentHashMap<>();\n+    actor.call(\n+        () -> {\n+          final var statusFutures =\n+              partitions.stream()\n+                  .map(\n+                      partition ->\n+                          getPartitionStatus(partition)\n+                              .whenComplete(\n+                                  (ps, error) ->\n+                                      partitionStatuses.put(partition.getPartitionId(), ps)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42c811630054c530ed3f0533f4da29b1e04d1ae9"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY4ODgzMA==", "bodyText": "Why do we need to exclude these fields for a follower partition? I see a value in having the same result structure.", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#discussion_r495688830", "createdAt": "2020-09-28T04:56:21Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/PartitionStatus.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.management;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonInclude.Include;\n+import io.atomix.raft.RaftServer.Role;\n+import io.zeebe.engine.processing.streamprocessor.StreamProcessor.Phase;\n+\n+public final class PartitionStatus {\n+\n+  private final Role role;\n+  private final String snapshotId;\n+\n+  @JsonInclude(Include.NON_NULL)\n+  private final Long processedPosition;\n+\n+  @JsonInclude(Include.NON_NULL)\n+  private final Long processedPositionInSnapshot;\n+\n+  @JsonInclude(Include.NON_NULL)\n+  private final Phase streamProcessorPhase;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42c811630054c530ed3f0533f4da29b1e04d1ae9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5MTI5Mg==", "bodyText": "Here, we don't wait until the pause command was processed.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public ActorFuture<Void> pauseProcessing() {\n          \n          \n            \n                final CompletableActorFuture completed = new CompletableActorFuture();\n          \n          \n            \n                actor.call(\n          \n          \n            \n                    () -> {\n          \n          \n            \n                      isPaused = true;\n          \n          \n            \n                      if (streamProcessor != null) {\n          \n          \n            \n                        streamProcessor\n          \n          \n            \n                            .pauseProcessing()\n          \n          \n            \n                            .onComplete(\n          \n          \n            \n                                (result, error) -> {\n          \n          \n            \n                                  if (error == null) {\n          \n          \n            \n                                    completed.complete(null);\n          \n          \n            \n                                  } else {\n          \n          \n            \n                                    completed.complete(error);\n          \n          \n            \n                                  }\n          \n          \n            \n                                });\n          \n          \n            \n                      }\n          \n          \n            \n                      return completed.completed(null);\n          \n          \n            \n                    });\n          \n          \n            \n                return completed;\n          \n          \n            \n              }\n          \n          \n            \n              public ActorFuture<Void> pauseProcessing() {\n          \n          \n            \n                final CompletableActorFuture<Void> completed = new CompletableActorFuture<>();\n          \n          \n            \n                actor.call(\n          \n          \n            \n                    () -> {\n          \n          \n            \n                      isPaused = true;\n          \n          \n            \n                      if (streamProcessor != null) {\n          \n          \n            \n                        streamProcessor.pauseProcessing().onComplete(completed);\n          \n          \n            \n                      } else {\n          \n          \n            \n                        completed.complete(null);\n          \n          \n            \n                      }\n          \n          \n            \n                    });\n          \n          \n            \n                return completed;\n          \n          \n            \n              }", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#discussion_r495691292", "createdAt": "2020-09-28T05:07:29Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -781,13 +790,45 @@ public void onDiskSpaceAvailable() {\n     actor.call(\n         () -> {\n           diskSpaceAvailable = true;\n-          if (streamProcessor != null) {\n+          if (streamProcessor != null && !isPaused()) {\n             LOG.info(\"Disk space usage is below threshold. Resuming stream processor.\");\n             streamProcessor.resumeProcessing();\n           }\n         });\n   }\n \n+  public ActorFuture<Void> pauseProcessing() {\n+    final CompletableActorFuture completed = new CompletableActorFuture();\n+    actor.call(\n+        () -> {\n+          isPaused = true;\n+          if (streamProcessor != null) {\n+            streamProcessor\n+                .pauseProcessing()\n+                .onComplete(\n+                    (result, error) -> {\n+                      if (error == null) {\n+                        completed.complete(null);\n+                      } else {\n+                        completed.complete(error);\n+                      }\n+                    });\n+          }\n+          return completed.completed(null);\n+        });\n+    return completed;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42c811630054c530ed3f0533f4da29b1e04d1ae9"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5Nzc2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final CompletableFuture partitionStatus) {\n          \n          \n            \n                  final CompletableFuture<<PartitionStatus> partitionStatus) {", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#discussion_r495697760", "createdAt": "2020-09-28T05:34:31Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.management;\n+\n+import io.zeebe.broker.Loggers;\n+import io.zeebe.broker.system.partitions.ZeebePartition;\n+import io.zeebe.engine.processing.streamprocessor.StreamProcessor;\n+import io.zeebe.snapshots.broker.impl.FileBasedSnapshotMetadata;\n+import io.zeebe.snapshots.raft.PersistedSnapshot;\n+import io.zeebe.util.sched.Actor;\n+import io.zeebe.util.sched.future.ActorFuture;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+\n+/**\n+ * A service that exposes interface to control some of the core functionalities of the broker such\n+ * as * Pause stream processing * Force take a snapshot\n+ *\n+ * <p>This is intended to be used only by experts\n+ */\n+public class BrokerAdminServiceImpl extends Actor implements BrokerAdminService {\n+\n+  private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+  final List<ZeebePartition> partitions;\n+\n+  public BrokerAdminServiceImpl(final List<ZeebePartition> partitions) {\n+    this.partitions = partitions;\n+  }\n+\n+  @Override\n+  public void pauseStreamProcessing() {\n+    actor.call(this::pauseStreamProcessingOnAllPartitions);\n+  }\n+\n+  @Override\n+  public void resumeStreamProcessing() {\n+    actor.call(this::unpauseStreamProcessingOnAllPartitions);\n+  }\n+\n+  @Override\n+  public void takeSnapshot() {\n+    actor.call(() -> takeSnapshotOnAllPartitions(partitions));\n+  }\n+\n+  @Override\n+  public void prepareForUpgrade() {\n+    actor.call(this::prepareAllPartitionsForSafeUpgrade);\n+  }\n+\n+  @Override\n+  public Map<Integer, PartitionStatus> getPartitionStatus() {\n+    final CompletableFuture<Map<Integer, PartitionStatus>> future = new CompletableFuture<>();\n+    final Map<Integer, PartitionStatus> partitionStatuses = new ConcurrentHashMap<>();\n+    actor.call(\n+        () -> {\n+          final var statusFutures =\n+              partitions.stream()\n+                  .map(\n+                      partition ->\n+                          getPartitionStatus(partition)\n+                              .whenComplete(\n+                                  (ps, error) ->\n+                                      partitionStatuses.put(partition.getPartitionId(), ps)))\n+                  .collect(Collectors.toList());\n+          CompletableFuture.allOf(statusFutures.toArray(CompletableFuture[]::new))\n+              .thenAccept(r -> future.complete(partitionStatuses));\n+        });\n+    return future.join();\n+  }\n+\n+  private CompletableFuture<PartitionStatus> getPartitionStatus(final ZeebePartition partition) {\n+    final CompletableFuture<PartitionStatus> partitionStatus = new CompletableFuture<>();\n+    getStreamProcessor(partition)\n+        .onComplete(\n+            (streamProcessor, throwable) ->\n+                streamProcessor.ifPresentOrElse(\n+                    sp -> getLeaderPartitionStatus(partition, sp, partitionStatus),\n+                    () -> getFollowerPartitionStatus(partition, partitionStatus)));\n+    return partitionStatus;\n+  }\n+\n+  private void getFollowerPartitionStatus(\n+      final ZeebePartition partition, final CompletableFuture<PartitionStatus> partitionStatus) {\n+    final var snapshotId = getSnapshotId(partition);\n+    final var status = PartitionStatus.ofFollower(snapshotId);\n+    partitionStatus.complete(status);\n+  }\n+\n+  private void getLeaderPartitionStatus(\n+      final ZeebePartition partition,\n+      final StreamProcessor streamProcessor,\n+      final CompletableFuture partitionStatus) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42c811630054c530ed3f0533f4da29b1e04d1ae9"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MDgwNzMw", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#pullrequestreview-499080730", "createdAt": "2020-09-30T04:46:02Z", "commit": {"oid": "88753f81fcf97f84ff6df3a1c0fb7c537259cf09"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNDo0NjowMlrOHaNJBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwNDo1ODo1M1rOHaNU1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI0MDMyNw==", "bodyText": "It would be nice to give the parameter a real name (e.g. operation). Otherwise, the endpoint description looks odd (\"zeebeAdmin-arg0\":{\"href\":\"http://localhost:9600/actuator/zeebeAdmin/{arg0}\",\"templated\":true}).\nIt should be possible by configuring the maven-compiler-plugin: https://stackoverflow.com/a/51175830", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#discussion_r497240327", "createdAt": "2020-09-30T04:46:02Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceEndpoint.java", "diffHunk": "@@ -8,52 +8,64 @@\n package io.zeebe.broker.system.management;\n \n import io.zeebe.broker.SpringBrokerBridge;\n+import java.util.HashMap;\n import java.util.Map;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.boot.actuate.endpoint.annotation.Endpoint;\n+import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;\n+import org.springframework.boot.actuate.endpoint.annotation.Selector;\n+import org.springframework.boot.actuate.endpoint.annotation.WriteOperation;\n+import org.springframework.stereotype.Component;\n \n-@RestController\n-@ConditionalOnProperty(\"management.endpoint.zeebe-admin.enabled\")\n+@Component\n+@Endpoint(id = \"zeebeAdmin\")\n public class BrokerAdminServiceEndpoint {\n \n-  private static final String BASE_URI = \"zeebe-admin\";\n-  private static final String BROKER_PAUSE_PROCESSING_URI = BASE_URI + \"/pause-processing\";\n-  private static final String BROKER_UNPAUSE_PROCESSING_URI = BASE_URI + \"/resume-processing\";\n-  private static final String BROKER_TAKE_SNAPSHOTS_URI = BASE_URI + \"/take-snapshot\";\n-  private static final String BROKER_PREPARE_UPGRADE_URI = BASE_URI + \"/prepare-upgrade\";\n-  private static final String BROKER_GET_STATUS_URI = BASE_URI + \"/partition-status\";\n-\n   @Autowired private SpringBrokerBridge springBrokerBridge;\n \n-  @PostMapping(value = BROKER_PAUSE_PROCESSING_URI)\n-  public Map<Integer, PartitionStatus> pauseProcessing() {\n+  private final Map<String, Runnable> operations = new HashMap<>();\n+\n+  public BrokerAdminServiceEndpoint() {\n+    operations.put(\"pauseProcessing\", this::pauseProcessing);\n+    operations.put(\"resumeProcessing\", this::resumeProcessing);\n+    operations.put(\"takeSnapshot\", this::takeSnapshot);\n+    operations.put(\"prepareUpgrade\", this::prepareUpgrade);\n+  }\n+\n+  @WriteOperation\n+  public Map<Integer, PartitionStatus> trigger(@Selector final String arg0) {\n+    // Parameter name must be arg0, otherwise it won't work\n+    final var operation = operations.get(arg0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88753f81fcf97f84ff6df3a1c0fb7c537259cf09"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzI0MzM0OQ==", "bodyText": "The endpoints are now:\n\nGET: http://localhost:9600/actuator/zeebeAdmin\nPOST: http://localhost:9600/actuator/zeebeAdmin/takeSnapshot\nPOST: http://localhost:9600/actuator/zeebeAdmin/prepareUpgrade\nPOST: http://localhost:9600/actuator/zeebeAdmin/pauseProcessing\nPOST: http://localhost:9600/actuator/zeebeAdmin/resumeProcessing\n\nIn this context, the name zeebeAdmin doesn't fit well for the endpoint. Maybe, we can call it partitions. Every operation is done for the partitions.", "url": "https://github.com/camunda-cloud/zeebe/pull/5408#discussion_r497243349", "createdAt": "2020-09-30T04:58:53Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceEndpoint.java", "diffHunk": "@@ -8,52 +8,64 @@\n package io.zeebe.broker.system.management;\n \n import io.zeebe.broker.SpringBrokerBridge;\n+import java.util.HashMap;\n import java.util.Map;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n-import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.RestController;\n+import org.springframework.boot.actuate.endpoint.annotation.Endpoint;\n+import org.springframework.boot.actuate.endpoint.annotation.ReadOperation;\n+import org.springframework.boot.actuate.endpoint.annotation.Selector;\n+import org.springframework.boot.actuate.endpoint.annotation.WriteOperation;\n+import org.springframework.stereotype.Component;\n \n-@RestController\n-@ConditionalOnProperty(\"management.endpoint.zeebe-admin.enabled\")\n+@Component\n+@Endpoint(id = \"zeebeAdmin\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88753f81fcf97f84ff6df3a1c0fb7c537259cf09"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ed4ac8aca7b91077ec3b39559402b3ee1dce48f", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/7ed4ac8aca7b91077ec3b39559402b3ee1dce48f", "committedDate": "2020-09-30T07:54:18Z", "message": "chore(broker): add admin service to trigger snapshots and pause processing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10d006c469f8e97b25c390620cc2386e7ad3de53", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/10d006c469f8e97b25c390620cc2386e7ad3de53", "committedDate": "2020-09-30T07:54:19Z", "message": "feat(broker): expose webendpoints to trigger snapshots and pause processing externally"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "88753f81fcf97f84ff6df3a1c0fb7c537259cf09", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/88753f81fcf97f84ff6df3a1c0fb7c537259cf09", "committedDate": "2020-09-29T14:59:07Z", "message": "chore(broker): move to actuators"}, "afterCommit": {"oid": "10d006c469f8e97b25c390620cc2386e7ad3de53", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/10d006c469f8e97b25c390620cc2386e7ad3de53", "committedDate": "2020-09-30T07:54:19Z", "message": "feat(broker): expose webendpoints to trigger snapshots and pause processing externally"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2524, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}