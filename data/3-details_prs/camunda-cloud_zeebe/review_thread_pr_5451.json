{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2MDk5MzE0", "number": 5451, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwOToyODozOFrOEpZDlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwOToyODozOFrOEpZDlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExODM3NTg4OnYy", "diffSide": "RIGHT", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwOToyODozOFrOHbCEeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQwOToyODozOFrOHbCEeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODEwNzUxNA==", "bodyText": "I added this test to test the follower status. It is not in original PR. Once this is reviewed, I will port it to develop.", "url": "https://github.com/camunda-cloud/zeebe/pull/5451#discussion_r498107514", "createdAt": "2020-10-01T09:28:38Z", "author": {"login": "deepthidevaki"}, "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.it.system;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.atomix.raft.RaftServer.Role;\n+import io.zeebe.broker.Broker;\n+import io.zeebe.broker.it.clustering.ClusteringRule;\n+import io.zeebe.broker.it.util.GrpcClientRule;\n+import io.zeebe.broker.system.management.BrokerAdminService;\n+import io.zeebe.engine.processor.StreamProcessor.Phase;\n+import org.awaitility.Awaitility;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.rules.Timeout;\n+\n+public class BrokerAdminServiceTest {\n+  private final Timeout testTimeout = Timeout.seconds(60);\n+  private final ClusteringRule clusteringRule =\n+      new ClusteringRule(\n+          1,\n+          3,\n+          3,\n+          cfg -> {\n+            cfg.getData().setLogIndexDensity(1);\n+          });\n+  private final GrpcClientRule clientRule = new GrpcClientRule(clusteringRule);\n+\n+  @Rule\n+  public RuleChain ruleChain =\n+      RuleChain.outerRule(testTimeout).around(clusteringRule).around(clientRule);\n+\n+  private BrokerAdminService leaderAdminService;\n+  private Broker leader;\n+\n+  @Before\n+  public void before() {\n+    leader = clusteringRule.getBroker(clusteringRule.getLeaderForPartition(1).getNodeId());\n+    leaderAdminService = leader.getBrokerAdminService();\n+  }\n+\n+  @Test\n+  public void shouldReportPartitionStatus() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acc5880c667f11cf6b5c825188386a23e659245f"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 289, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}