{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyOTUwMTMx", "number": 4701, "title": "chore(benchmarks): add benchmark application in go", "bodyText": "Description\nThis PR introduces a benchmark client application in Go. It uses the local Go client specifically, and currently only implements the worker command, which is similar to the worker benchmark application in Java. The idea here is to allow us to run benchmarks with both client types at some point. This came about from me needing to test a Go PR with the client against a broker. We should eventually add a starter, but this is a good starting point, I think.\nPull Request Checklist\n\n All commit messages match our commit message guidelines\n The submitting code follows our code style\n If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-06-11T09:21:54Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4701", "merged": true, "mergeCommit": {"oid": "2c0bfe099e895d6b827c5475feabe888c7a5180e"}, "closed": true, "closedAt": "2020-08-12T10:22:46Z", "author": {"login": "npepinpe"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrfm8OgFqTQzMDUzNzU4OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-IdLjAFqTQ2NTc2ODU3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNTM3NTg4", "url": "https://github.com/camunda-cloud/zeebe/pull/4701#pullrequestreview-430537588", "createdAt": "2020-06-15T11:01:30Z", "commit": {"oid": "e3458cb5c57b902f770b63ebd1b4561148572094"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTowMTozMFrOGjtXmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTozNTozOVrOGjuXdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5NjY2Ng==", "bodyText": "Personally, I prefer to write these declarations as block because then gofmt aligns them, but I'll leave that up to your preference.\nvar (\n\tclient             zbc.Client\n\taddressFlag        string\n\tcaCertPathFlag     string\n\tclientIDFlag       string\n\tclientSecretFlag   string\n\taudienceFlag       string\n\tauthzURLFlag       string\n\tinsecureFlag       bool\n\tclientCacheFlag    string\n\tmonitoringHostFlag string\n\tmonitoringPortFlag int\n)", "url": "https://github.com/camunda-cloud/zeebe/pull/4701#discussion_r440096666", "createdAt": "2020-06-15T11:01:30Z", "author": {"login": "MiguelPires"}, "path": "benchmarks/project/cmd/zbench/internal/commands/root.go", "diffHunk": "@@ -0,0 +1,195 @@\n+// Copyright \u00a9 2018 Camunda Services GmbH (info@camunda.com)\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package commands\n+\n+import (\n+\t\"fmt\"\n+\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n+\t\"github.com/spf13/cobra\"\n+\t\"github.com/zeebe-io/zeebe/clients/go/pkg/zbc\"\n+\t\"log\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"strings\"\n+\t\"time\"\n+)\n+\n+const (\n+\tDefaultAddressHost    = \"127.0.0.1\"\n+\tDefaultAddressPort    = \"26500\"\n+\tAddressEnvVar         = \"ZEEBE_ADDRESS\"\n+\tDefaultTimeout        = 10 * time.Second\n+\tDefaultMonitoringHost = \"127.0.0.1\"\n+\tDefaultMonitoringPort = 9600\n+)\n+\n+var client zbc.Client", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3458cb5c57b902f770b63ebd1b4561148572094"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExMzAxMg==", "bodyText": "We can use Run: func(cmd *cobra.Command, args []string) { since this never returns an error", "url": "https://github.com/camunda-cloud/zeebe/pull/4701#discussion_r440113012", "createdAt": "2020-06-15T11:35:39Z", "author": {"login": "MiguelPires"}, "path": "benchmarks/project/cmd/zbench/internal/commands/worker.go", "diffHunk": "@@ -0,0 +1,95 @@\n+// Copyright \u00a9 2018 Camunda Services GmbH (info@camunda.com)\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+package commands\n+\n+import (\n+    \"context\"\n+    \"github.com/spf13/cobra\"\n+    \"github.com/zeebe-io/zeebe/clients/go/pkg/entities\"\n+    \"github.com/zeebe-io/zeebe/clients/go/pkg/worker\"\n+    \"log\"\n+    \"time\"\n+)\n+\n+var (\n+\tworkerJobTypeFlag         string\n+\tworkerNameFlag            string\n+\tworkerConcurrencyFlag     int\n+\tworkerCapacityFlag        int\n+\tworkerPollingDelayFlag    time.Duration\n+\tworkerCompletionDelayFlag time.Duration\n+\tworkerJobTimeoutFlag      time.Duration\n+)\n+\n+var workerCmd = &cobra.Command{\n+\tUse:     \"worker\",\n+\tShort:   \"Completes job of a specific job type at a given interval\",\n+\tArgs:    cobra.ExactArgs(0),\n+\tPreRunE: initClient,\n+\tRunE: func(cmd *cobra.Command, args []string) error {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3458cb5c57b902f770b63ebd1b4561148572094"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "36abc7cc7c2503f6bcfedb4dd5c661585fc4ffc8", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/36abc7cc7c2503f6bcfedb4dd5c661585fc4ffc8", "committedDate": "2020-06-22T14:57:16Z", "message": "chore(benchmarks/project): formatting, layout and code improvements"}, "afterCommit": {"oid": "ecc2ab9ecd91f60758bc2ddaeaf2922d4af88dce", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/ecc2ab9ecd91f60758bc2ddaeaf2922d4af88dce", "committedDate": "2020-06-22T15:02:22Z", "message": "chore(benchmarks/project): formatting, layout and code improvements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ecc2ab9ecd91f60758bc2ddaeaf2922d4af88dce", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/ecc2ab9ecd91f60758bc2ddaeaf2922d4af88dce", "committedDate": "2020-06-22T15:02:22Z", "message": "chore(benchmarks/project): formatting, layout and code improvements"}, "afterCommit": {"oid": "969ba5aa28059d566d9d5214d6168bb089a1a881", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/969ba5aa28059d566d9d5214d6168bb089a1a881", "committedDate": "2020-06-23T08:06:36Z", "message": "chore(benchmarks): add metrics to go worker"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NTk3MDA0", "url": "https://github.com/camunda-cloud/zeebe/pull/4701#pullrequestreview-435597004", "createdAt": "2020-06-23T09:18:01Z", "commit": {"oid": "4f068ec6e705e87b934c1e09d552c9e3151fcf3d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToxODowMlrOGngrGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToxODowMlrOGngrGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4Mjk3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tproviderConfig := zbc.OAuthProviderConfig{}\n          \n          \n            \n            \n          \n          \n            \n            \t\t// create a credentials provider with the specified parameters\n          \n          \n            \n            \t\tcredsProvider, err = zbc.NewOAuthCredentialsProvider(&providerConfig)\n          \n          \n            \n            \t\t// create a credentials provider with the specified parameters\n          \n          \n            \n            \t\tcredsProvider, err = zbc.NewOAuthCredentialsProvider(&zbc.OAuthProviderConfig{})", "url": "https://github.com/camunda-cloud/zeebe/pull/4701#discussion_r444082971", "createdAt": "2020-06-23T09:18:02Z", "author": {"login": "MiguelPires"}, "path": "benchmarks/project/zbench/internal/commands/root.go", "diffHunk": "@@ -0,0 +1,203 @@\n+// Copyright \u00a9 2018 Camunda Services GmbH (info@camunda.com)\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//     http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package commands\n+\n+import (\n+\t\"fmt\"\n+\tgrpc_prometheus \"github.com/grpc-ecosystem/go-grpc-prometheus\"\n+\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n+\t\"github.com/spf13/cobra\"\n+\t\"github.com/zeebe-io/zeebe/clients/go/pkg/zbc\"\n+\t\"google.golang.org/grpc\"\n+\t\"log\"\n+\t\"net/http\"\n+\t\"os\"\n+\t\"strings\"\n+\t\"time\"\n+)\n+\n+const (\n+\tDefaultAddressHost    = \"127.0.0.1\"\n+\tDefaultAddressPort    = \"26500\"\n+\tAddressEnvVar         = \"ZEEBE_ADDRESS\"\n+\tDefaultTimeout        = 10 * time.Second\n+\tDefaultMonitoringHost = \"127.0.0.1\"\n+\tDefaultMonitoringPort = 9600\n+)\n+\n+var (\n+\tclient             zbc.Client\n+\taddressFlag        string\n+\tcaCertPathFlag     string\n+\tclientIDFlag       string\n+\tclientSecretFlag   string\n+\taudienceFlag       string\n+\tauthzURLFlag       string\n+\tclientCacheFlag    string\n+\tmonitoringHostFlag string\n+\tinsecureFlag       bool\n+\tmonitoringPortFlag int\n+)\n+\n+var rootCmd = &cobra.Command{\n+\tUse:   \"zbench\",\n+\tShort: \"zeebe benchmark application\",\n+\tLong:  `zbench is command line interface designed to start a Zeebe workflow at a regular interval, and complete them`,\n+\tPersistentPreRun: func(cmd *cobra.Command, args []string) {\n+\t\t// silence help here instead of as a parameter because we only want to suppress it on a 'Zeebe' error and not if\n+\t\t// parsing args fails\n+\t\tcmd.SilenceUsage = true\n+\n+\t\t// start monitoring server\n+\t\thttp.Handle(\"/metrics\", promhttp.Handler())\n+\t\tgo func() {\n+\t\t\terr := http.ListenAndServe(fmt.Sprintf(\"%s:%d\", monitoringHostFlag, monitoringPortFlag), nil)\n+\t\t\tif err != nil {\n+\t\t\t\tlog.Printf(\"Failed to start monitoring server: %s\", err)\n+\t\t\t}\n+\t\t}()\n+\t\tlog.Println(\"Started\")\n+\t},\n+\tPersistentPostRunE: func(cmd *cobra.Command, args []string) error {\n+\t\tif client != nil {\n+\t\t\treturn client.Close()\n+\t\t}\n+\n+\t\treturn nil\n+\t},\n+}\n+\n+// Execute adds all child commands to the root command and sets flags appropriately.\n+// This is called by main.main(). It only needs to happen once to the rootCmd.\n+func Execute() {\n+\tif err := rootCmd.Execute(); err != nil {\n+\t\tos.Exit(1)\n+\t}\n+}\n+\n+func init() {\n+\trootCmd.PersistentFlags().StringVar(&addressFlag, \"address\", \"\", \"Specify a contact point address. If omitted, will read from the environment variable '\"+AddressEnvVar+\"' (default '\"+fmt.Sprintf(\"%s:%s\", DefaultAddressHost, DefaultAddressPort)+\"')\")\n+\trootCmd.PersistentFlags().StringVar(&caCertPathFlag, \"certPath\", \"\", \"Specify a path to a certificate with which to validate gateway requests. If omitted, will read from the environment variable '\"+zbc.CaCertificatePath+\"'\")\n+\trootCmd.PersistentFlags().StringVar(&clientIDFlag, \"clientId\", \"\", \"Specify a client identifier to request an access token. If omitted, will read from the environment variable '\"+zbc.OAuthClientIdEnvVar+\"'\")\n+\trootCmd.PersistentFlags().StringVar(&clientSecretFlag, \"clientSecret\", \"\", \"Specify a client secret to request an access token. If omitted, will read from the environment variable '\"+zbc.OAuthClientSecretEnvVar+\"'\")\n+\trootCmd.PersistentFlags().StringVar(&audienceFlag, \"audience\", \"\", \"Specify the resource that the access token should be valid for. If omitted, will read from the environment variable '\"+zbc.OAuthTokenAudienceEnvVar+\"'\")\n+\trootCmd.PersistentFlags().StringVar(&authzURLFlag, \"authzUrl\", zbc.OAuthDefaultAuthzURL, \"Specify an authorization server URL from which to request an access token. If omitted, will read from the environment variable '\"+zbc.OAuthAuthorizationUrlEnvVar+\"'\")\n+\trootCmd.PersistentFlags().BoolVar(&insecureFlag, \"insecure\", false, \"Specify if zbctl should use an unsecured connection. If omitted, will read from the environment variable '\"+zbc.InsecureEnvVar+\"'\")\n+\trootCmd.PersistentFlags().StringVar(&clientCacheFlag, \"clientCache\", zbc.DefaultOauthYamlCachePath, \"Specify the path to use for the OAuth credentials cache. If omitted, will read from the environment variable '\"+zbc.OAuthCachePathEnvVar+\"'\")\n+\trootCmd.PersistentFlags().StringVar(&monitoringHostFlag, \"monitoringHost\", DefaultMonitoringHost, \"Specify the host for the monitoring server\")\n+\trootCmd.PersistentFlags().IntVar(&monitoringPortFlag, \"monitoringPort\", DefaultMonitoringPort, \"Specify the port for the monitoring server\")\n+}\n+\n+// initClient will create a client with in the following precedence: flag, environment variable, default\n+var initClient = func(cmd *cobra.Command, args []string) error {\n+\tvar err error\n+\tvar credsProvider zbc.CredentialsProvider\n+\n+\thost, port := parseAddress()\n+\n+\t// override env vars with CLI parameters, if any\n+\tif err := setSecurityParamsAsEnv(); err != nil {\n+\t\treturn err\n+\t}\n+\n+\t_, idExists := os.LookupEnv(zbc.OAuthClientIdEnvVar)\n+\t_, secretExists := os.LookupEnv(zbc.OAuthClientSecretEnvVar)\n+\n+\tif idExists || secretExists {\n+\t\t_, audienceExists := os.LookupEnv(zbc.OAuthTokenAudienceEnvVar)\n+\t\tif !audienceExists {\n+\t\t\tif err := os.Setenv(zbc.OAuthTokenAudienceEnvVar, host); err != nil {\n+\t\t\t\treturn err\n+\t\t\t}\n+\t\t}\n+\n+\t\tproviderConfig := zbc.OAuthProviderConfig{}\n+\n+\t\t// create a credentials provider with the specified parameters\n+\t\tcredsProvider, err = zbc.NewOAuthCredentialsProvider(&providerConfig)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f068ec6e705e87b934c1e09d552c9e3151fcf3d"}, "originalPosition": 129}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19ef7658d60e54da03fa4d72f0e7de25926d2a31", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/19ef7658d60e54da03fa4d72f0e7de25926d2a31", "committedDate": "2020-08-12T09:58:10Z", "message": "chore(benchmarks): add benchmark application in go"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e77179db113e2ea2991dd9147edece6460e4c27", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/5e77179db113e2ea2991dd9147edece6460e4c27", "committedDate": "2020-08-12T09:58:10Z", "message": "chore(benchmarks/project): formatting, layout and code improvements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c136ddbaf8ca186a9be42819cee57107d6464ee7", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/c136ddbaf8ca186a9be42819cee57107d6464ee7", "committedDate": "2020-08-11T15:18:48Z", "message": "chore(benchmarks): minor dependency/code changes"}, "afterCommit": {"oid": "5e77179db113e2ea2991dd9147edece6460e4c27", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/5e77179db113e2ea2991dd9147edece6460e4c27", "committedDate": "2020-08-12T09:58:10Z", "message": "chore(benchmarks/project): formatting, layout and code improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NzY4NTcz", "url": "https://github.com/camunda-cloud/zeebe/pull/4701#pullrequestreview-465768573", "createdAt": "2020-08-12T10:00:30Z", "commit": {"oid": "5e77179db113e2ea2991dd9147edece6460e4c27"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2755, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}