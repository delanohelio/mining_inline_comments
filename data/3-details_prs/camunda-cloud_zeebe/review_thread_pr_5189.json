{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MzA2MDc2", "number": 5189, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDo1MTo0NFrOEZhTGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDo1MjozOVrOEZhU5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTk1NDE5OnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/LeaderAppender.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDo1MTo0NFrOHCYVTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzoyMToxMVrOHC5Qjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1Nzg2OQ==", "bodyText": "What happens when we failed to open the reader and return here empty? No install request is send. Is this an issue?", "url": "https://github.com/camunda-cloud/zeebe/pull/5189#discussion_r472257869", "createdAt": "2020-08-18T14:51:44Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/LeaderAppender.java", "diffHunk": "@@ -363,6 +342,28 @@ public void close() {\n                 new RaftException.ProtocolException(\"Failed to reach consensus\")));\n   }\n \n+  private void tryToReplicateSnapshot(final RaftMemberContext member) {\n+    final var optSnapshot = raft.getPersistedSnapshotStore().getLatestSnapshot();\n+\n+    if (optSnapshot.isPresent()\n+        && member.getSnapshotIndex() < optSnapshot.get().getIndex()\n+        && optSnapshot.get().getIndex() >= member.getLogReader().getCurrentIndex()) {\n+      if (!member.canInstall()) {\n+        return;\n+      }\n+\n+      final var persistedSnapshot = optSnapshot.get();\n+      log.debug(\n+          \"Replicating snapshot {} to {}\",\n+          persistedSnapshot.getIndex(),\n+          member.getMember().memberId());\n+      buildInstallRequest(member, persistedSnapshot)\n+          .ifPresent(installRequest -> sendInstallRequest(member, installRequest));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c93a76953b34a88415eddff53a723fb8ab5e1a5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc5NzMyNw==", "bodyText": "Ya. Then no install request is send. But will be retried in the next heartbeat/appendEntry turn. In worst case, it will be retried for ever if there is something seriously wrong with the snapshot. The other option is to throw an exception, but this will cause the leader to fail and go to INACTIVE phase.", "url": "https://github.com/camunda-cloud/zeebe/pull/5189#discussion_r472797327", "createdAt": "2020-08-19T07:21:11Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/LeaderAppender.java", "diffHunk": "@@ -363,6 +342,28 @@ public void close() {\n                 new RaftException.ProtocolException(\"Failed to reach consensus\")));\n   }\n \n+  private void tryToReplicateSnapshot(final RaftMemberContext member) {\n+    final var optSnapshot = raft.getPersistedSnapshotStore().getLatestSnapshot();\n+\n+    if (optSnapshot.isPresent()\n+        && member.getSnapshotIndex() < optSnapshot.get().getIndex()\n+        && optSnapshot.get().getIndex() >= member.getLogReader().getCurrentIndex()) {\n+      if (!member.canInstall()) {\n+        return;\n+      }\n+\n+      final var persistedSnapshot = optSnapshot.get();\n+      log.debug(\n+          \"Replicating snapshot {} to {}\",\n+          persistedSnapshot.getIndex(),\n+          member.getMember().memberId());\n+      buildInstallRequest(member, persistedSnapshot)\n+          .ifPresent(installRequest -> sendInstallRequest(member, installRequest));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1Nzg2OQ=="}, "originalCommit": {"oid": "9c93a76953b34a88415eddff53a723fb8ab5e1a5"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTk1ODc2OnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/test/java/io/atomix/raft/RaftFailOverTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDo1MjozOVrOHCYYGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzoyNTo0M1rOHC5gFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1ODU4Nw==", "bodyText": "Could be flaky, since ordering is not guaranteed right?", "url": "https://github.com/camunda-cloud/zeebe/pull/5189#discussion_r472258587", "createdAt": "2020-08-18T14:52:39Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/test/java/io/atomix/raft/RaftFailOverTest.java", "diffHunk": "@@ -170,6 +170,28 @@ public void shouldReplicateSnapshotOnJoin() throws Exception {\n     assertThat(snapshot.getTerm()).isEqualTo(snapshot.getTerm());\n   }\n \n+  @Test\n+  public void shouldReplicateSnapshotWithManyFilesOnJoin() throws Exception {\n+    // given\n+    final var follower = raftRule.shutdownFollower();\n+    raftRule.appendEntries(20);\n+    final long snapshotIndex = 10L;\n+    raftRule.doSnapshot(snapshotIndex, 10);\n+    final var leaderSnapshot = raftRule.getSnapshotFromLeader();\n+\n+    // when\n+    raftRule.joinCluster(follower);\n+\n+    // then\n+    assertThat(raftRule.allNodesHaveSnapshotWithIndex(snapshotIndex)).isTrue();\n+    final var snapshot = raftRule.getSnapshotOnNode(follower);\n+\n+    assertThat(snapshot.getIndex()).isEqualTo(leaderSnapshot.getIndex()).isEqualTo(snapshotIndex);\n+    assertThat(snapshot.getTerm()).isEqualTo(snapshot.getTerm());\n+    assertThat(snapshot.getPath().toFile().list())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c93a76953b34a88415eddff53a723fb8ab5e1a5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI2Mzk2NA==", "bodyText": "First I thought hm this Test should also worked before right? So what is the matter of this test, the I tried it without your fix and it toooook soo long, wow didn't expected that :D\nThanks for fixing that, awesome.", "url": "https://github.com/camunda-cloud/zeebe/pull/5189#discussion_r472263964", "createdAt": "2020-08-18T14:59:27Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/test/java/io/atomix/raft/RaftFailOverTest.java", "diffHunk": "@@ -170,6 +170,28 @@ public void shouldReplicateSnapshotOnJoin() throws Exception {\n     assertThat(snapshot.getTerm()).isEqualTo(snapshot.getTerm());\n   }\n \n+  @Test\n+  public void shouldReplicateSnapshotWithManyFilesOnJoin() throws Exception {\n+    // given\n+    final var follower = raftRule.shutdownFollower();\n+    raftRule.appendEntries(20);\n+    final long snapshotIndex = 10L;\n+    raftRule.doSnapshot(snapshotIndex, 10);\n+    final var leaderSnapshot = raftRule.getSnapshotFromLeader();\n+\n+    // when\n+    raftRule.joinCluster(follower);\n+\n+    // then\n+    assertThat(raftRule.allNodesHaveSnapshotWithIndex(snapshotIndex)).isTrue();\n+    final var snapshot = raftRule.getSnapshotOnNode(follower);\n+\n+    assertThat(snapshot.getIndex()).isEqualTo(leaderSnapshot.getIndex()).isEqualTo(snapshotIndex);\n+    assertThat(snapshot.getTerm()).isEqualTo(snapshot.getTerm());\n+    assertThat(snapshot.getPath().toFile().list())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1ODU4Nw=="}, "originalCommit": {"oid": "9c93a76953b34a88415eddff53a723fb8ab5e1a5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc5OTcyMg==", "bodyText": "Actually, this test was added to test parallel/pipelined sending of snapshot chunks. But this PR doesnot have it. I didn't notice performance difference \ud83d\ude04 Should I keep/remove this test?", "url": "https://github.com/camunda-cloud/zeebe/pull/5189#discussion_r472799722", "createdAt": "2020-08-19T07:24:02Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/test/java/io/atomix/raft/RaftFailOverTest.java", "diffHunk": "@@ -170,6 +170,28 @@ public void shouldReplicateSnapshotOnJoin() throws Exception {\n     assertThat(snapshot.getTerm()).isEqualTo(snapshot.getTerm());\n   }\n \n+  @Test\n+  public void shouldReplicateSnapshotWithManyFilesOnJoin() throws Exception {\n+    // given\n+    final var follower = raftRule.shutdownFollower();\n+    raftRule.appendEntries(20);\n+    final long snapshotIndex = 10L;\n+    raftRule.doSnapshot(snapshotIndex, 10);\n+    final var leaderSnapshot = raftRule.getSnapshotFromLeader();\n+\n+    // when\n+    raftRule.joinCluster(follower);\n+\n+    // then\n+    assertThat(raftRule.allNodesHaveSnapshotWithIndex(snapshotIndex)).isTrue();\n+    final var snapshot = raftRule.getSnapshotOnNode(follower);\n+\n+    assertThat(snapshot.getIndex()).isEqualTo(leaderSnapshot.getIndex()).isEqualTo(snapshotIndex);\n+    assertThat(snapshot.getTerm()).isEqualTo(snapshot.getTerm());\n+    assertThat(snapshot.getPath().toFile().list())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1ODU4Nw=="}, "originalCommit": {"oid": "9c93a76953b34a88415eddff53a723fb8ab5e1a5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgwMTMwMA==", "bodyText": "Lets keep it. It fails, because of timeouts, if I we create always the snapshot chunk reader :) I tried that :D", "url": "https://github.com/camunda-cloud/zeebe/pull/5189#discussion_r472801300", "createdAt": "2020-08-19T07:25:43Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/test/java/io/atomix/raft/RaftFailOverTest.java", "diffHunk": "@@ -170,6 +170,28 @@ public void shouldReplicateSnapshotOnJoin() throws Exception {\n     assertThat(snapshot.getTerm()).isEqualTo(snapshot.getTerm());\n   }\n \n+  @Test\n+  public void shouldReplicateSnapshotWithManyFilesOnJoin() throws Exception {\n+    // given\n+    final var follower = raftRule.shutdownFollower();\n+    raftRule.appendEntries(20);\n+    final long snapshotIndex = 10L;\n+    raftRule.doSnapshot(snapshotIndex, 10);\n+    final var leaderSnapshot = raftRule.getSnapshotFromLeader();\n+\n+    // when\n+    raftRule.joinCluster(follower);\n+\n+    // then\n+    assertThat(raftRule.allNodesHaveSnapshotWithIndex(snapshotIndex)).isTrue();\n+    final var snapshot = raftRule.getSnapshotOnNode(follower);\n+\n+    assertThat(snapshot.getIndex()).isEqualTo(leaderSnapshot.getIndex()).isEqualTo(snapshotIndex);\n+    assertThat(snapshot.getTerm()).isEqualTo(snapshot.getTerm());\n+    assertThat(snapshot.getPath().toFile().list())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1ODU4Nw=="}, "originalCommit": {"oid": "9c93a76953b34a88415eddff53a723fb8ab5e1a5"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 300, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}