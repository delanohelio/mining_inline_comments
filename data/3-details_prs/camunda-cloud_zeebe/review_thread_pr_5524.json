{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MTg1OTI1", "number": 5524, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODo0MzozOFrOEr9T8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoxMzo1MFrOEs5YlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTI4NzU1OnYy", "diffSide": "RIGHT", "path": "gateway/src/main/java/io/zeebe/gateway/EndpointManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODo0MzozOFrOHfAryg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODo0MzozOFrOHfAryg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI3OTExNA==", "bodyText": "what ? \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r502279114", "createdAt": "2020-10-09T08:43:38Z", "author": {"login": "Zelldon"}, "path": "gateway/src/main/java/io/zeebe/gateway/EndpointManager.java", "diffHunk": "@@ -55,15 +49,13 @@\n import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyResponse;\n import io.zeebe.gateway.protocol.GatewayOuterClass.UpdateJobRetriesRequest;\n import io.zeebe.gateway.protocol.GatewayOuterClass.UpdateJobRetriesResponse;\n-import io.zeebe.msgpack.MsgpackPropertyException;\n import io.zeebe.util.VersionUtil;\n import java.time.Duration;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.TimeoutException;\n import java.util.function.Function;\n \n+@SuppressWarnings(\"java:S119\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18945aaca8ee080ad1bc7377bc3368ac27373838"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTMyNDY0OnYy", "diffSide": "RIGHT", "path": "gateway/src/main/java/io/zeebe/gateway/EndpointManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODo1Mzo0N1rOHfBC1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwOTo0ODo1M1rOHfC6-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI4NTAxMw==", "bodyText": "Have you checked my previous Branch ? I created an EndpointWrapper 9610fed#diff-1f21f97736eb9eec235496e4a782ba7d\nThis makes it possible not change the code it self and also to drop it easily later again.", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r502285013", "createdAt": "2020-10-09T08:53:47Z", "author": {"login": "Zelldon"}, "path": "gateway/src/main/java/io/zeebe/gateway/EndpointManager.java", "diffHunk": "@@ -119,7 +111,8 @@ private void addPartitionInfoToBrokerInfo(\n   public void activateJobs(\n       final ActivateJobsRequest request,\n       final StreamObserver<ActivateJobsResponse> responseObserver) {\n-    activateJobsHandler.activateJobs(request, responseObserver);\n+    activateJobsHandler.activateJobs(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18945aaca8ee080ad1bc7377bc3368ac27373838"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMxNTc2OQ==", "bodyText": "Wasn't aware of it, but its a good idea", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r502315769", "createdAt": "2020-10-09T09:48:53Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/EndpointManager.java", "diffHunk": "@@ -119,7 +111,8 @@ private void addPartitionInfoToBrokerInfo(\n   public void activateJobs(\n       final ActivateJobsRequest request,\n       final StreamObserver<ActivateJobsResponse> responseObserver) {\n-    activateJobsHandler.activateJobs(request, responseObserver);\n+    activateJobsHandler.activateJobs(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI4NTAxMw=="}, "originalCommit": {"oid": "18945aaca8ee080ad1bc7377bc3368ac27373838"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTMyNjk0OnYy", "diffSide": "RIGHT", "path": "gateway/src/main/java/io/zeebe/gateway/EndpointManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODo1NDoyMFrOHfBEMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODo1NDoyMFrOHfBEMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI4NTM2Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r502285362", "createdAt": "2020-10-09T08:54:20Z", "author": {"login": "Zelldon"}, "path": "gateway/src/main/java/io/zeebe/gateway/EndpointManager.java", "diffHunk": "@@ -238,48 +231,51 @@ public void setVariables(\n         request,\n         RequestMapper::toSetVariablesRequest,\n         ResponseMapper::toSetVariablesResponse,\n-        responseObserver);\n+        ErrorMappingStreamObserver.ofStreamObserver(responseObserver));\n   }\n \n   @Override\n   public void topology(\n       final TopologyRequest request, final StreamObserver<TopologyResponse> responseObserver) {\n+    final ErrorMappingStreamObserver<TopologyResponse> wrappedObserver =\n+        ErrorMappingStreamObserver.ofStreamObserver(responseObserver);\n     final TopologyResponse.Builder topologyResponseBuilder = TopologyResponse.newBuilder();\n     final BrokerClusterState topology = topologyManager.getTopology();\n \n-    if (topology != null) {\n-      topologyResponseBuilder\n-          .setClusterSize(topology.getClusterSize())\n-          .setPartitionsCount(topology.getPartitionsCount())\n-          .setReplicationFactor(topology.getReplicationFactor());\n-\n-      final String gatewayVersion = VersionUtil.getVersion();\n-      if (gatewayVersion != null && !gatewayVersion.isBlank()) {\n-        topologyResponseBuilder.setGatewayVersion(gatewayVersion);\n-      }\n-\n-      final ArrayList<BrokerInfo> brokers = new ArrayList<>();\n-\n-      topology\n-          .getBrokers()\n-          .forEach(\n-              brokerId -> {\n-                final Builder brokerInfo = BrokerInfo.newBuilder();\n-                addBrokerInfo(brokerInfo, brokerId, topology);\n-                addPartitionInfoToBrokerInfo(brokerInfo, brokerId, topology);\n-\n-                brokers.add(brokerInfo.build());\n-              });\n-\n-      topologyResponseBuilder.addAllBrokers(brokers);\n-      final TopologyResponse response = topologyResponseBuilder.build();\n-      responseObserver.onNext(response);\n-      responseObserver.onCompleted();\n-    } else {\n+    if (topology == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18945aaca8ee080ad1bc7377bc3368ac27373838"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTM0MTkwOnYy", "diffSide": "RIGHT", "path": "gateway/src/main/java/io/zeebe/gateway/grpc/ErrorMappingStreamObserver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODo1ODoxOVrOHfBNhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwODo1ODoxOVrOHfBNhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI4Nzc1MQ==", "bodyText": "For what is this ?", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r502287751", "createdAt": "2020-10-09T08:58:19Z", "author": {"login": "Zelldon"}, "path": "gateway/src/main/java/io/zeebe/gateway/grpc/ErrorMappingStreamObserver.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.grpc;\n+\n+import io.grpc.StatusException;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.ServerCallStreamObserver;\n+import io.grpc.stub.StreamObserver;\n+import io.zeebe.gateway.Loggers;\n+\n+/**\n+ * A {@link StreamObserver} decorator which will map errors to {@link StatusException} before\n+ * passing them on to the {@code delegate}.\n+ *\n+ * <p>Additionally, if the decorated {@link StreamObserver} is a {@link ServerCallStreamObserver},\n+ * it will install a cancellation handler to effectively suppress the {@code delegate} from throwing\n+ * an exception if the call was already cancelled.\n+ *\n+ * @param <GrpcResponseT>\n+ */\n+@SuppressWarnings(\"java:S119\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18945aaca8ee080ad1bc7377bc3368ac27373838"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTQxNDM4OnYy", "diffSide": "RIGHT", "path": "gateway/src/main/java/io/zeebe/gateway/grpc/ErrorMappingStreamObserver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwOToxODozOFrOHfB6Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwOTo1MDo1NFrOHfC-9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI5OTE3OQ==", "bodyText": "Actually you only accept ServerCallStreamObserver", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r502299179", "createdAt": "2020-10-09T09:18:38Z", "author": {"login": "Zelldon"}, "path": "gateway/src/main/java/io/zeebe/gateway/grpc/ErrorMappingStreamObserver.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.grpc;\n+\n+import io.grpc.StatusException;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.ServerCallStreamObserver;\n+import io.grpc.stub.StreamObserver;\n+import io.zeebe.gateway.Loggers;\n+\n+/**\n+ * A {@link StreamObserver} decorator which will map errors to {@link StatusException} before\n+ * passing them on to the {@code delegate}.\n+ *\n+ * <p>Additionally, if the decorated {@link StreamObserver} is a {@link ServerCallStreamObserver},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18945aaca8ee080ad1bc7377bc3368ac27373838"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMxNjc5MA==", "bodyText": "True, I wrote this before I changed the interface \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r502316790", "createdAt": "2020-10-09T09:50:54Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/grpc/ErrorMappingStreamObserver.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.grpc;\n+\n+import io.grpc.StatusException;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.stub.ServerCallStreamObserver;\n+import io.grpc.stub.StreamObserver;\n+import io.zeebe.gateway.Loggers;\n+\n+/**\n+ * A {@link StreamObserver} decorator which will map errors to {@link StatusException} before\n+ * passing them on to the {@code delegate}.\n+ *\n+ * <p>Additionally, if the decorated {@link StreamObserver} is a {@link ServerCallStreamObserver},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjI5OTE3OQ=="}, "originalCommit": {"oid": "18945aaca8ee080ad1bc7377bc3368ac27373838"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTQ0MjM1OnYy", "diffSide": "RIGHT", "path": "gateway/src/main/java/io/zeebe/gateway/grpc/GrpcErrorMapper.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwOToyNjoxNVrOHfCLRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMToyNTo1MFrOHfFxvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMwMzU1OQ==", "bodyText": "Currently thinking whether it really necessary to error in gateway in general, since they properly logged in the broker already and when the client receives the error", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r502303559", "createdAt": "2020-10-09T09:26:15Z", "author": {"login": "Zelldon"}, "path": "gateway/src/main/java/io/zeebe/gateway/grpc/GrpcErrorMapper.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.grpc;\n+\n+import com.google.rpc.Code;\n+import com.google.rpc.Status;\n+import com.google.rpc.Status.Builder;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.protobuf.StatusProto;\n+import io.zeebe.gateway.Loggers;\n+import io.zeebe.gateway.cmd.BrokerErrorException;\n+import io.zeebe.gateway.cmd.BrokerRejectionException;\n+import io.zeebe.gateway.cmd.InvalidBrokerRequestArgumentException;\n+import io.zeebe.gateway.cmd.PartitionNotFoundException;\n+import io.zeebe.gateway.impl.broker.response.BrokerError;\n+import io.zeebe.gateway.impl.broker.response.BrokerRejection;\n+import io.zeebe.msgpack.MsgpackPropertyException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+import org.slf4j.Logger;\n+\n+/** Maps arbitrary {@link Throwable} to {@link StatusRuntimeException} and logs the exception. */\n+public final class GrpcErrorMapper {\n+  private final Logger logger;\n+\n+  public GrpcErrorMapper() {\n+    this(Loggers.GATEWAY_LOGGER);\n+  }\n+\n+  public GrpcErrorMapper(final Logger logger) {\n+    this.logger = logger;\n+  }\n+\n+  public StatusRuntimeException mapError(final Throwable error) {\n+    return StatusProto.toStatusRuntimeException(mapErrorToStatus(error));\n+  }\n+\n+  private Status mapErrorToStatus(final Throwable error) {\n+    final Builder builder = Status.newBuilder();\n+\n+    if (error instanceof ExecutionException) {\n+      return mapErrorToStatus(error.getCause());\n+    } else if (error instanceof BrokerErrorException) {\n+      final Status status = mapBrokerErrorToStatus(((BrokerErrorException) error).getError());\n+      builder.mergeFrom(status);\n+\n+      // When there is back pressure, there will be a lot of `RESOURCE_EXHAUSTED` errors and the log\n+      // can get flooded, so log them at the lowest level possible\n+      if (status.getCode() != Code.RESOURCE_EXHAUSTED.getNumber()) {\n+        logger.error(\"Expected to handle gRPC request, but received error from broker\", error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18945aaca8ee080ad1bc7377bc3368ac27373838"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMxNzQwNA==", "bodyText": "I'm not sure we log all errors in the broker. For example, partition mismatch i think is not logged, maybe others?", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r502317404", "createdAt": "2020-10-09T09:52:06Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/grpc/GrpcErrorMapper.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.grpc;\n+\n+import com.google.rpc.Code;\n+import com.google.rpc.Status;\n+import com.google.rpc.Status.Builder;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.protobuf.StatusProto;\n+import io.zeebe.gateway.Loggers;\n+import io.zeebe.gateway.cmd.BrokerErrorException;\n+import io.zeebe.gateway.cmd.BrokerRejectionException;\n+import io.zeebe.gateway.cmd.InvalidBrokerRequestArgumentException;\n+import io.zeebe.gateway.cmd.PartitionNotFoundException;\n+import io.zeebe.gateway.impl.broker.response.BrokerError;\n+import io.zeebe.gateway.impl.broker.response.BrokerRejection;\n+import io.zeebe.msgpack.MsgpackPropertyException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+import org.slf4j.Logger;\n+\n+/** Maps arbitrary {@link Throwable} to {@link StatusRuntimeException} and logs the exception. */\n+public final class GrpcErrorMapper {\n+  private final Logger logger;\n+\n+  public GrpcErrorMapper() {\n+    this(Loggers.GATEWAY_LOGGER);\n+  }\n+\n+  public GrpcErrorMapper(final Logger logger) {\n+    this.logger = logger;\n+  }\n+\n+  public StatusRuntimeException mapError(final Throwable error) {\n+    return StatusProto.toStatusRuntimeException(mapErrorToStatus(error));\n+  }\n+\n+  private Status mapErrorToStatus(final Throwable error) {\n+    final Builder builder = Status.newBuilder();\n+\n+    if (error instanceof ExecutionException) {\n+      return mapErrorToStatus(error.getCause());\n+    } else if (error instanceof BrokerErrorException) {\n+      final Status status = mapBrokerErrorToStatus(((BrokerErrorException) error).getError());\n+      builder.mergeFrom(status);\n+\n+      // When there is back pressure, there will be a lot of `RESOURCE_EXHAUSTED` errors and the log\n+      // can get flooded, so log them at the lowest level possible\n+      if (status.getCode() != Code.RESOURCE_EXHAUSTED.getNumber()) {\n+        logger.error(\"Expected to handle gRPC request, but received error from broker\", error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMwMzU1OQ=="}, "originalCommit": {"oid": "18945aaca8ee080ad1bc7377bc3368ac27373838"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMxNzgwMA==", "bodyText": "But is this really an error then is the question? It is kind of expected that this can happen - ideally we should just retry that in this case", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r502317800", "createdAt": "2020-10-09T09:52:52Z", "author": {"login": "Zelldon"}, "path": "gateway/src/main/java/io/zeebe/gateway/grpc/GrpcErrorMapper.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.grpc;\n+\n+import com.google.rpc.Code;\n+import com.google.rpc.Status;\n+import com.google.rpc.Status.Builder;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.protobuf.StatusProto;\n+import io.zeebe.gateway.Loggers;\n+import io.zeebe.gateway.cmd.BrokerErrorException;\n+import io.zeebe.gateway.cmd.BrokerRejectionException;\n+import io.zeebe.gateway.cmd.InvalidBrokerRequestArgumentException;\n+import io.zeebe.gateway.cmd.PartitionNotFoundException;\n+import io.zeebe.gateway.impl.broker.response.BrokerError;\n+import io.zeebe.gateway.impl.broker.response.BrokerRejection;\n+import io.zeebe.msgpack.MsgpackPropertyException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+import org.slf4j.Logger;\n+\n+/** Maps arbitrary {@link Throwable} to {@link StatusRuntimeException} and logs the exception. */\n+public final class GrpcErrorMapper {\n+  private final Logger logger;\n+\n+  public GrpcErrorMapper() {\n+    this(Loggers.GATEWAY_LOGGER);\n+  }\n+\n+  public GrpcErrorMapper(final Logger logger) {\n+    this.logger = logger;\n+  }\n+\n+  public StatusRuntimeException mapError(final Throwable error) {\n+    return StatusProto.toStatusRuntimeException(mapErrorToStatus(error));\n+  }\n+\n+  private Status mapErrorToStatus(final Throwable error) {\n+    final Builder builder = Status.newBuilder();\n+\n+    if (error instanceof ExecutionException) {\n+      return mapErrorToStatus(error.getCause());\n+    } else if (error instanceof BrokerErrorException) {\n+      final Status status = mapBrokerErrorToStatus(((BrokerErrorException) error).getError());\n+      builder.mergeFrom(status);\n+\n+      // When there is back pressure, there will be a lot of `RESOURCE_EXHAUSTED` errors and the log\n+      // can get flooded, so log them at the lowest level possible\n+      if (status.getCode() != Code.RESOURCE_EXHAUSTED.getNumber()) {\n+        logger.error(\"Expected to handle gRPC request, but received error from broker\", error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMwMzU1OQ=="}, "originalCommit": {"oid": "18945aaca8ee080ad1bc7377bc3368ac27373838"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM2MjU1OQ==", "bodyText": "My rule of thumb in general is, assuming a client-server setup, if the server returns an error, the client should log it, not the server. However, the server might log error details that are not returned to the client - i.e. sensitive info, information that isn't helpful for the client, etc.\nIn this particular case, we return an INTERNAL error to the client (e.g. 500 - which, by the way, is probably the wrong code to return for PARTITION_LEADER_MISMATCH \ud83d\ude05), with very little information from the client point of view. So we need to log it in the broker/gateway. From the broker point of view though, you're right, this is an expected error - hence why I'd log it on the \"client\" side, i.e. the gateway in this instance. But like I said, bad example, as PARTITION_LEADER_MISMATCH should probably return UNAVAILABLE or something like this, indicating the user can retry the request \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r502362559", "createdAt": "2020-10-09T11:25:50Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/grpc/GrpcErrorMapper.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.grpc;\n+\n+import com.google.rpc.Code;\n+import com.google.rpc.Status;\n+import com.google.rpc.Status.Builder;\n+import io.grpc.StatusRuntimeException;\n+import io.grpc.protobuf.StatusProto;\n+import io.zeebe.gateway.Loggers;\n+import io.zeebe.gateway.cmd.BrokerErrorException;\n+import io.zeebe.gateway.cmd.BrokerRejectionException;\n+import io.zeebe.gateway.cmd.InvalidBrokerRequestArgumentException;\n+import io.zeebe.gateway.cmd.PartitionNotFoundException;\n+import io.zeebe.gateway.impl.broker.response.BrokerError;\n+import io.zeebe.gateway.impl.broker.response.BrokerRejection;\n+import io.zeebe.msgpack.MsgpackPropertyException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeoutException;\n+import org.slf4j.Logger;\n+\n+/** Maps arbitrary {@link Throwable} to {@link StatusRuntimeException} and logs the exception. */\n+public final class GrpcErrorMapper {\n+  private final Logger logger;\n+\n+  public GrpcErrorMapper() {\n+    this(Loggers.GATEWAY_LOGGER);\n+  }\n+\n+  public GrpcErrorMapper(final Logger logger) {\n+    this.logger = logger;\n+  }\n+\n+  public StatusRuntimeException mapError(final Throwable error) {\n+    return StatusProto.toStatusRuntimeException(mapErrorToStatus(error));\n+  }\n+\n+  private Status mapErrorToStatus(final Throwable error) {\n+    final Builder builder = Status.newBuilder();\n+\n+    if (error instanceof ExecutionException) {\n+      return mapErrorToStatus(error.getCause());\n+    } else if (error instanceof BrokerErrorException) {\n+      final Status status = mapBrokerErrorToStatus(((BrokerErrorException) error).getError());\n+      builder.mergeFrom(status);\n+\n+      // When there is back pressure, there will be a lot of `RESOURCE_EXHAUSTED` errors and the log\n+      // can get flooded, so log them at the lowest level possible\n+      if (status.getCode() != Code.RESOURCE_EXHAUSTED.getNumber()) {\n+        logger.error(\"Expected to handle gRPC request, but received error from broker\", error);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMwMzU1OQ=="}, "originalCommit": {"oid": "18945aaca8ee080ad1bc7377bc3368ac27373838"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTQ0NTI5OnYy", "diffSide": "RIGHT", "path": "gateway/src/main/java/io/zeebe/gateway/impl/broker/RequestRetryHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwOToyNzoxMFrOHfCNNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoxMzozMlrOHgYbTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMwNDA1Mw==", "bodyText": "\ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r502304053", "createdAt": "2020-10-09T09:27:10Z", "author": {"login": "Zelldon"}, "path": "gateway/src/main/java/io/zeebe/gateway/impl/broker/RequestRetryHandler.java", "diffHunk": "@@ -27,6 +27,7 @@\n  * all partitions are tried. The request is retried only for specific errors such as connection\n  * errors or resource exhausted errors. The request is not retried for time outs.\n  */\n+@SuppressWarnings(\"java:S119\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18945aaca8ee080ad1bc7377bc3368ac27373838"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMxODI1OA==", "bodyText": "SonarCloud complains that the type names don't conform to the format. I don't think we ever decided on one, but I suppose we could just change the format on sonarcloud and not have to suppress those warnings", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r502318258", "createdAt": "2020-10-09T09:53:46Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/impl/broker/RequestRetryHandler.java", "diffHunk": "@@ -27,6 +27,7 @@\n  * all partitions are tried. The request is retried only for specific errors such as connection\n  * errors or resource exhausted errors. The request is not retried for time outs.\n  */\n+@SuppressWarnings(\"java:S119\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMwNDA1Mw=="}, "originalCommit": {"oid": "18945aaca8ee080ad1bc7377bc3368ac27373838"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNjY4NQ==", "bodyText": "What type names we are talking here? That interface should be an adjective?", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r503716685", "createdAt": "2020-10-13T07:13:32Z", "author": {"login": "Zelldon"}, "path": "gateway/src/main/java/io/zeebe/gateway/impl/broker/RequestRetryHandler.java", "diffHunk": "@@ -27,6 +27,7 @@\n  * all partitions are tried. The request is retried only for specific errors such as connection\n  * errors or resource exhausted errors. The request is not retried for time outs.\n  */\n+@SuppressWarnings(\"java:S119\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMwNDA1Mw=="}, "originalCommit": {"oid": "18945aaca8ee080ad1bc7377bc3368ac27373838"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTQ2NTUxOnYy", "diffSide": "RIGHT", "path": "gateway/src/test/java/io/zeebe/gateway/grpc/GrpcErrorMapperTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwOTozMjo0NVrOHfCZug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwOTozMjo0NVrOHfCZug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMwNzI1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void shouldTraceLogResourceExhaustedError() {\n          \n          \n            \n              void shouldLogResourceExhaustedErrorOnTrace() {", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r502307258", "createdAt": "2020-10-09T09:32:45Z", "author": {"login": "Zelldon"}, "path": "gateway/src/test/java/io/zeebe/gateway/grpc/GrpcErrorMapperTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.grpc;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.grpc.Status.Code;\n+import io.grpc.StatusRuntimeException;\n+import io.zeebe.gateway.cmd.BrokerErrorException;\n+import io.zeebe.gateway.impl.broker.response.BrokerError;\n+import io.zeebe.protocol.record.ErrorCode;\n+import io.zeebe.util.logging.RecordingAppender;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.Logger;\n+import org.apache.logging.slf4j.Log4jLogger;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.parallel.Execution;\n+import org.junit.jupiter.api.parallel.ExecutionMode;\n+\n+@Execution(ExecutionMode.CONCURRENT)\n+final class GrpcErrorMapperTest {\n+  private final RecordingAppender recorder = new RecordingAppender();\n+  private final Logger log = (Logger) LogManager.getLogger(GrpcErrorMapperTest.class);\n+  private final GrpcErrorMapper errorMapper =\n+      new GrpcErrorMapper(new Log4jLogger(log, log.getName()));\n+\n+  @BeforeEach\n+  void setUp() {\n+    recorder.start();\n+    log.addAppender(recorder);\n+  }\n+\n+  @AfterEach\n+  void tearDown() {\n+    recorder.stop();\n+    log.removeAppender(recorder);\n+  }\n+\n+  @Test\n+  void shouldTraceLogResourceExhaustedError() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18945aaca8ee080ad1bc7377bc3368ac27373838"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTA5NDQ1OnYy", "diffSide": "RIGHT", "path": "gateway/src/main/java/io/zeebe/gateway/EndpointManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzowMjo0OVrOHgYG4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDowNTo0OFrOHgoi1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxMTQ1OA==", "bodyText": "Why are some methods are changed to use the new interface and some not?", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r503711458", "createdAt": "2020-10-13T07:02:49Z", "author": {"login": "Zelldon"}, "path": "gateway/src/main/java/io/zeebe/gateway/EndpointManager.java", "diffHunk": "@@ -107,48 +106,42 @@ private void addPartitionInfoToBrokerInfo(\n             });\n   }\n \n-  @Override\n   public void activateJobs(\n       final ActivateJobsRequest request,\n-      final StreamObserver<ActivateJobsResponse> responseObserver) {\n-    activateJobsHandler.activateJobs(\n-        request, ErrorMappingStreamObserver.ofStreamObserver(responseObserver));\n+      final ServerStreamObserver<ActivateJobsResponse> responseObserver) {\n+    activateJobsHandler.activateJobs(request, responseObserver);\n   }\n \n-  @Override\n   public void cancelWorkflowInstance(\n       final CancelWorkflowInstanceRequest request,\n-      final StreamObserver<CancelWorkflowInstanceResponse> responseObserver) {\n+      final ServerStreamObserver<CancelWorkflowInstanceResponse> responseObserver) {\n     sendRequest(\n         request,\n         RequestMapper::toCancelWorkflowInstanceRequest,\n         ResponseMapper::toCancelWorkflowInstanceResponse,\n-        ErrorMappingStreamObserver.ofStreamObserver(responseObserver));\n+        responseObserver);\n   }\n \n-  @Override\n   public void completeJob(\n       final CompleteJobRequest request,\n       final StreamObserver<CompleteJobResponse> responseObserver) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f2f29d7ed2bec6dfc8f34028d602bc87b542968"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4MDc1Nw==", "bodyText": "Only the activateJobsHandler really needs the new type actually...but it makes sense to change all methods to accept it.", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r503980757", "createdAt": "2020-10-13T14:05:48Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/EndpointManager.java", "diffHunk": "@@ -107,48 +106,42 @@ private void addPartitionInfoToBrokerInfo(\n             });\n   }\n \n-  @Override\n   public void activateJobs(\n       final ActivateJobsRequest request,\n-      final StreamObserver<ActivateJobsResponse> responseObserver) {\n-    activateJobsHandler.activateJobs(\n-        request, ErrorMappingStreamObserver.ofStreamObserver(responseObserver));\n+      final ServerStreamObserver<ActivateJobsResponse> responseObserver) {\n+    activateJobsHandler.activateJobs(request, responseObserver);\n   }\n \n-  @Override\n   public void cancelWorkflowInstance(\n       final CancelWorkflowInstanceRequest request,\n-      final StreamObserver<CancelWorkflowInstanceResponse> responseObserver) {\n+      final ServerStreamObserver<CancelWorkflowInstanceResponse> responseObserver) {\n     sendRequest(\n         request,\n         RequestMapper::toCancelWorkflowInstanceRequest,\n         ResponseMapper::toCancelWorkflowInstanceResponse,\n-        ErrorMappingStreamObserver.ofStreamObserver(responseObserver));\n+        responseObserver);\n   }\n \n-  @Override\n   public void completeJob(\n       final CompleteJobRequest request,\n       final StreamObserver<CompleteJobResponse> responseObserver) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxMTQ1OA=="}, "originalCommit": {"oid": "5f2f29d7ed2bec6dfc8f34028d602bc87b542968"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTEyMjA2OnYy", "diffSide": "RIGHT", "path": "gateway/src/main/java/io/zeebe/gateway/grpc/GrpcErrorMapper.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoxMToyMlrOHgYXCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNTo1NDowMVrOHhDQHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNTU5Mw==", "bodyText": "Maybe it makes more sense to return the string representation of the error code,  instead of returning the code in the error message? Then it is more clear for the user/client?", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r503715593", "createdAt": "2020-10-13T07:11:22Z", "author": {"login": "Zelldon"}, "path": "gateway/src/main/java/io/zeebe/gateway/grpc/GrpcErrorMapper.java", "diffHunk": "@@ -99,6 +99,20 @@ private Status mapBrokerErrorToStatus(final BrokerError error) {\n       case RESOURCE_EXHAUSTED:\n         builder.setCode(Code.RESOURCE_EXHAUSTED_VALUE);\n         break;\n+      case PARTITION_LEADER_MISMATCH:\n+        // return UNAVAILABLE to indicate to the user that retrying might solve the issue, as this\n+        // is usually a transient issue\n+        builder.setCode(Code.UNAVAILABLE_VALUE);\n+        break;\n+        // all the following are not errors which retrying (with the same gateway) will solve\n+      case INVALID_MESSAGE_TEMPLATE:\n+      case INVALID_DEPLOYMENT_PARTITION:\n+      case MALFORMED_REQUEST:\n+      case INVALID_CLIENT_VERSION:\n+      case UNSUPPORTED_MESSAGE:\n+      case INTERNAL_ERROR:\n+      case SBE_UNKNOWN:\n+      case NULL_VAL:\n       default:\n         builder.setCode(Code.INTERNAL_VALUE);\n         message =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f2f29d7ed2bec6dfc8f34028d602bc87b542968"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3NzU1Nw==", "bodyText": "Probably, - I can't remember now why we return the code and not the string representation.\nEDIT: actually, this sets the gRPC code, which we have to do regardless. I guess you meant why we write the intent and not the rejection type?", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r503977557", "createdAt": "2020-10-13T14:01:40Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/grpc/GrpcErrorMapper.java", "diffHunk": "@@ -99,6 +99,20 @@ private Status mapBrokerErrorToStatus(final BrokerError error) {\n       case RESOURCE_EXHAUSTED:\n         builder.setCode(Code.RESOURCE_EXHAUSTED_VALUE);\n         break;\n+      case PARTITION_LEADER_MISMATCH:\n+        // return UNAVAILABLE to indicate to the user that retrying might solve the issue, as this\n+        // is usually a transient issue\n+        builder.setCode(Code.UNAVAILABLE_VALUE);\n+        break;\n+        // all the following are not errors which retrying (with the same gateway) will solve\n+      case INVALID_MESSAGE_TEMPLATE:\n+      case INVALID_DEPLOYMENT_PARTITION:\n+      case MALFORMED_REQUEST:\n+      case INVALID_CLIENT_VERSION:\n+      case UNSUPPORTED_MESSAGE:\n+      case INTERNAL_ERROR:\n+      case SBE_UNKNOWN:\n+      case NULL_VAL:\n       default:\n         builder.setCode(Code.INTERNAL_VALUE);\n         message =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNTU5Mw=="}, "originalCommit": {"oid": "5f2f29d7ed2bec6dfc8f34028d602bc87b542968"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4NjY2Ng==", "bodyText": "What I meant was this line https://github.com/zeebe-io/zeebe/blob/14eba79cc03e0554be3cee37985c54cf4c52a317/gateway/src/main/java/io/zeebe/gateway/grpc/GrpcErrorMapper.java#L120 where we just set the code instead of the string representation", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r503986666", "createdAt": "2020-10-13T14:13:19Z", "author": {"login": "Zelldon"}, "path": "gateway/src/main/java/io/zeebe/gateway/grpc/GrpcErrorMapper.java", "diffHunk": "@@ -99,6 +99,20 @@ private Status mapBrokerErrorToStatus(final BrokerError error) {\n       case RESOURCE_EXHAUSTED:\n         builder.setCode(Code.RESOURCE_EXHAUSTED_VALUE);\n         break;\n+      case PARTITION_LEADER_MISMATCH:\n+        // return UNAVAILABLE to indicate to the user that retrying might solve the issue, as this\n+        // is usually a transient issue\n+        builder.setCode(Code.UNAVAILABLE_VALUE);\n+        break;\n+        // all the following are not errors which retrying (with the same gateway) will solve\n+      case INVALID_MESSAGE_TEMPLATE:\n+      case INVALID_DEPLOYMENT_PARTITION:\n+      case MALFORMED_REQUEST:\n+      case INVALID_CLIENT_VERSION:\n+      case UNSUPPORTED_MESSAGE:\n+      case INTERNAL_ERROR:\n+      case SBE_UNKNOWN:\n+      case NULL_VAL:\n       default:\n         builder.setCode(Code.INTERNAL_VALUE);\n         message =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNTU5Mw=="}, "originalCommit": {"oid": "5f2f29d7ed2bec6dfc8f34028d602bc87b542968"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk4OTc1OA==", "bodyText": "By string representation, you mean of the code (in this case that's what we do), or you mean the error message? The idea why we don't put the error message is that for these errors, we've logged it on the broker side, and it's probably not very useful for the client (also, it may contain sensitive info for some customers such as file path, system info, etc.)", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r503989758", "createdAt": "2020-10-13T14:17:09Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/grpc/GrpcErrorMapper.java", "diffHunk": "@@ -99,6 +99,20 @@ private Status mapBrokerErrorToStatus(final BrokerError error) {\n       case RESOURCE_EXHAUSTED:\n         builder.setCode(Code.RESOURCE_EXHAUSTED_VALUE);\n         break;\n+      case PARTITION_LEADER_MISMATCH:\n+        // return UNAVAILABLE to indicate to the user that retrying might solve the issue, as this\n+        // is usually a transient issue\n+        builder.setCode(Code.UNAVAILABLE_VALUE);\n+        break;\n+        // all the following are not errors which retrying (with the same gateway) will solve\n+      case INVALID_MESSAGE_TEMPLATE:\n+      case INVALID_DEPLOYMENT_PARTITION:\n+      case MALFORMED_REQUEST:\n+      case INVALID_CLIENT_VERSION:\n+      case UNSUPPORTED_MESSAGE:\n+      case INTERNAL_ERROR:\n+      case SBE_UNKNOWN:\n+      case NULL_VAL:\n       default:\n         builder.setCode(Code.INTERNAL_VALUE);\n         message =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNTU5Mw=="}, "originalCommit": {"oid": "5f2f29d7ed2bec6dfc8f34028d602bc87b542968"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDQxODMzMw==", "bodyText": "Ok my fault sorry. I thought this returns the int representation.", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r504418333", "createdAt": "2020-10-14T05:54:01Z", "author": {"login": "Zelldon"}, "path": "gateway/src/main/java/io/zeebe/gateway/grpc/GrpcErrorMapper.java", "diffHunk": "@@ -99,6 +99,20 @@ private Status mapBrokerErrorToStatus(final BrokerError error) {\n       case RESOURCE_EXHAUSTED:\n         builder.setCode(Code.RESOURCE_EXHAUSTED_VALUE);\n         break;\n+      case PARTITION_LEADER_MISMATCH:\n+        // return UNAVAILABLE to indicate to the user that retrying might solve the issue, as this\n+        // is usually a transient issue\n+        builder.setCode(Code.UNAVAILABLE_VALUE);\n+        break;\n+        // all the following are not errors which retrying (with the same gateway) will solve\n+      case INVALID_MESSAGE_TEMPLATE:\n+      case INVALID_DEPLOYMENT_PARTITION:\n+      case MALFORMED_REQUEST:\n+      case INVALID_CLIENT_VERSION:\n+      case UNSUPPORTED_MESSAGE:\n+      case INTERNAL_ERROR:\n+      case SBE_UNKNOWN:\n+      case NULL_VAL:\n       default:\n         builder.setCode(Code.INTERNAL_VALUE);\n         message =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNTU5Mw=="}, "originalCommit": {"oid": "5f2f29d7ed2bec6dfc8f34028d602bc87b542968"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTEyOTgxOnYy", "diffSide": "RIGHT", "path": "gateway/src/main/java/io/zeebe/gateway/grpc/ServerStreamObserver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNzoxMzo1MFrOHgYb7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwODowMjozOVrOHgaPfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNjg0NQ==", "bodyText": "It is a bit weird with the suppresswarnings to be honest", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r503716845", "createdAt": "2020-10-13T07:13:50Z", "author": {"login": "Zelldon"}, "path": "gateway/src/main/java/io/zeebe/gateway/grpc/ServerStreamObserver.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+\n+/**\n+ * A simple extension of {@link StreamObserver}, meant to be used in conjunction with {@link\n+ * io.grpc.stub.ServerCallStreamObserver}. In order to avoid depending on {@link\n+ * io.grpc.stub.ServerCallStreamObserver}, which is experimental (as of now), we introduce this\n+ * simple interface, and we can easily change the implementation whenever the experimental API is\n+ * changed.\n+ *\n+ * @param <GrpcResponseT> the expected gRPC response type\n+ */\n+@SuppressWarnings(\"java:S119\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f2f29d7ed2bec6dfc8f34028d602bc87b542968"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzc0NjQyOA==", "bodyText": "Like I said, it's because sonar cloud is set up to warn you if you don't use all caps for your types. We can also change the SonarCloud config instead \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/5524#discussion_r503746428", "createdAt": "2020-10-13T08:02:39Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/grpc/ServerStreamObserver.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.grpc;\n+\n+import io.grpc.stub.StreamObserver;\n+\n+/**\n+ * A simple extension of {@link StreamObserver}, meant to be used in conjunction with {@link\n+ * io.grpc.stub.ServerCallStreamObserver}. In order to avoid depending on {@link\n+ * io.grpc.stub.ServerCallStreamObserver}, which is experimental (as of now), we introduce this\n+ * simple interface, and we can easily change the implementation whenever the experimental API is\n+ * changed.\n+ *\n+ * @param <GrpcResponseT> the expected gRPC response type\n+ */\n+@SuppressWarnings(\"java:S119\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzcxNjg0NQ=="}, "originalCommit": {"oid": "5f2f29d7ed2bec6dfc8f34028d602bc87b542968"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 177, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}