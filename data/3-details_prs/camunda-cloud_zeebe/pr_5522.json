{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NjI1NjU1", "number": 5522, "title": "chore(broker): refactor ZeebePartition", "bodyText": "Description\nThis PR extracts some behaviors from ZeebePartition in order to make it more testable and maintainable. Before, ZeebePartition contained several responsibilities like orchestrating transitions, closing partitions, installing leader/follower partitions, building specific components (logstream, processor, etc), informing partition listeners, etc. This PR extracts the transitioning between partitions as well as the building of specific components. These are reflected in the PartitionTransition and Component interfaces. The first knows how to transition between partitions (closing, installing, etc) and the second is implemented for each component of a partition and knows how to start and stop them.\nIt also enables us to test that the ZeebePartition reacts correctly to Raft role changes, that transitions work/deal with failure sensibly, etc. This is showcased in the ZeebePartitionTest and PartitionTransitionTest. Note that these test classes are not complete yet as I only wrote one test in each to avoid overloading this PR. The tests are there to show that this refactor allows us to write new tests for the partition/transitioning code.\nThe refactor also makes it easier to find specific actions that happen during partition installation because they're no longer chained in lambdas and there's an explicit order in which they're execute. Regarding the naming (Component vs Service), I left it as Component because I searched for both terms and this one was almost unused in our code base (unlike Service) so there's less confusion. There's also a benchmark with these changes running under the namespace 'mp-spike'.\nRelated issues\ncloses #5480\nDefinition of Done\nNot all items need to be done depending on the issue and the pull request.\nCode changes:\n\n The changes are backwards compatibility with previous versions\n If it fixes a bug then PRs are created to backport the fix to the last two minor versions\n\nTesting:\n\n There are unit/integration tests that verify all acceptance criterias of the issue\n New tests are written to ensure backwards compatibility with further versions\n The behavior is tested manually\n The impact of the changes is verified by a benchmark\n\nDocumentation:\n\n The documentation is updated (e.g. BPMN reference, configuration, examples, get-started guides, etc.)\n New content is added to the release announcement", "createdAt": "2020-10-06T15:12:35Z", "url": "https://github.com/camunda-cloud/zeebe/pull/5522", "merged": true, "mergeCommit": {"oid": "bb04a16a721081d53e951407172c44b755e0d618"}, "closed": true, "closedAt": "2020-10-14T12:01:24Z", "author": {"login": "MiguelPires"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSBDYMAFqTUwNTM1NTUxMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSblLXgBqjM4NzYxMTMzNTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MzU1NTEz", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#pullrequestreview-505355513", "createdAt": "2020-10-09T04:26:48Z", "commit": {"oid": "79b5742975c10851aec9ce145097188e0fec9fab"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwNDoyNjo0OFrOHe6yvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwNDozNToxM1rOHgVExw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MjU5MA==", "bodyText": "The component lists have no direct relationship with the broker class. I suggest to extract them to a separate class or move them to PartitionTransitionImpl.", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r502182590", "createdAt": "2020-10-09T04:26:48Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/Broker.java", "diffHunk": "@@ -73,12 +88,30 @@\n public final class Broker implements AutoCloseable {\n \n   public static final Logger LOG = Loggers.SYSTEM_LOGGER;\n-\n+  private static final List<Component<?>> LEADER_COMPONENTS =\n+      List.of(\n+          new LogStreamComponent(),\n+          new RaftLogReaderComponent(),\n+          new SnapshotReplicationComponent(),\n+          new StateControllerComponent(),\n+          new LogDeletionComponent(),\n+          new LeaderPostStorageComponent(),\n+          new ZeebeDbComponent(),\n+          new StreamProcessorComponent(),\n+          new SnapshotDirectorComponent(),\n+          new RocksDbMetricExporterComponent(),\n+          new ExporterDirectorComponent());\n+  private static final List<Component<?>> FOLLOWER_COMPONENTS =\n+      List.of(\n+          new RaftLogReaderComponent(),\n+          new SnapshotReplicationComponent(),\n+          new StateControllerComponent(),\n+          new LogDeletionComponent(),\n+          new FollowerPostStorageComponent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b5742975c10851aec9ce145097188e0fec9fab"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzAzNA==", "bodyText": "Raw type warning. PartitionTransitionImpl expect a generic type but no type is set.", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r502183034", "createdAt": "2020-10-09T04:29:01Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/Broker.java", "diffHunk": "@@ -366,6 +400,10 @@ private AutoCloseable partitionsStep(\n                     partitionIndexes.get(partitionId),\n                     snapshotStoreSupplier,\n                     createFactory(topologyManager, clusterCfg, atomix, managementRequestHandler));\n+            final PartitionTransitionImpl transitionBehavior =\n+                new PartitionTransitionImpl(context, LEADER_COMPONENTS, FOLLOWER_COMPONENTS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b5742975c10851aec9ce145097188e0fec9fab"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzQ4Nw==", "bodyText": "I suggest a more concrete name for the interface. Component is a very generic name. But the implementation is hardly coupled to a partition.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public interface Component<T> {\n          \n          \n            \n            public interface PartitionComponent<T> {\n          \n      \n    \n    \n  \n\nOr maybe, PartitonStep. Some of the current components don't fit well to the term \"component\", for example,  FollowerPostStorageComponent.", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r502183487", "createdAt": "2020-10-09T04:31:00Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/Component.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions;\n+\n+import io.zeebe.util.sched.future.ActorFuture;\n+\n+/**\n+ * A Component is responsible for managing the opening and closing of some service (e.g., logStream,\n+ * AsyncSnapshotDirector, etc) defined as its parameter.\n+ *\n+ * @param <T> the value opened and closed by the Component\n+ */\n+public interface Component<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b5742975c10851aec9ce145097188e0fec9fab"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4MzgyNw==", "bodyText": "A small typo.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param value value used to complete {@link Component#open(PartitionContext)} successfuly\n          \n          \n            \n               * @param value value used to complete {@link Component#open(PartitionContext)} successfully", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r502183827", "createdAt": "2020-10-09T04:32:45Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/Component.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions;\n+\n+import io.zeebe.util.sched.future.ActorFuture;\n+\n+/**\n+ * A Component is responsible for managing the opening and closing of some service (e.g., logStream,\n+ * AsyncSnapshotDirector, etc) defined as its parameter.\n+ *\n+ * @param <T> the value opened and closed by the Component\n+ */\n+public interface Component<T> {\n+\n+  /**\n+   * Opens the component and returns a future which should be completed with the component's value.\n+   *\n+   * @param context the partition context\n+   * @return future\n+   */\n+  ActorFuture<T> open(final PartitionContext context);\n+\n+  /**\n+   * Closes the component and returns a future to be completed after the closing is done.\n+   *\n+   * @param context the partition context\n+   * @return future\n+   */\n+  ActorFuture<Void> close(final PartitionContext context);\n+\n+  /**\n+   * Called with the result of {@link Component#open(PartitionContext)} as the 'value' parameter.\n+   * Normally used to perform actions like storing the value in the {@link PartitionContext},\n+   * scheduling actors, etc.\n+   *\n+   * @param context the partition context\n+   * @param value value used to complete {@link Component#open(PartitionContext)} successfuly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b5742975c10851aec9ce145097188e0fec9fab"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4NjMyOQ==", "bodyText": "A context should not contain any logic. I suggest validating the exporters outside of the context (e.g. in the Broker) to make it more visible.", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r502186329", "createdAt": "2020-10-09T04:44:19Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/PartitionContext.java", "diffHunk": "@@ -0,0 +1,290 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions;\n+\n+import io.atomix.raft.partition.RaftPartition;\n+import io.atomix.raft.storage.log.RaftLogReader;\n+import io.zeebe.broker.PartitionListener;\n+import io.zeebe.broker.exporter.jar.ExporterJarLoadException;\n+import io.zeebe.broker.exporter.repo.ExporterLoadException;\n+import io.zeebe.broker.exporter.repo.ExporterRepository;\n+import io.zeebe.broker.exporter.stream.ExporterDirector;\n+import io.zeebe.broker.logstreams.LogDeletionService;\n+import io.zeebe.broker.system.configuration.BrokerCfg;\n+import io.zeebe.broker.system.partitions.impl.AsyncSnapshotDirector;\n+import io.zeebe.broker.system.partitions.impl.StateControllerImpl;\n+import io.zeebe.broker.transport.commandapi.CommandApiService;\n+import io.zeebe.db.ZeebeDb;\n+import io.zeebe.engine.processing.streamprocessor.StreamProcessor;\n+import io.zeebe.logstreams.log.LogStream;\n+import io.zeebe.logstreams.storage.atomix.AtomixLogStorage;\n+import io.zeebe.logstreams.storage.atomix.ZeebeIndexMapping;\n+import io.zeebe.snapshots.broker.SnapshotStoreSupplier;\n+import io.zeebe.util.health.HealthMonitor;\n+import io.zeebe.util.sched.ActorControl;\n+import io.zeebe.util.sched.ActorScheduler;\n+import io.zeebe.util.sched.ScheduledTimer;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public class PartitionContext {\n+\n+  private final int nodeId;\n+  private final List<PartitionListener> partitionListeners;\n+  private final PartitionMessagingService messagingService;\n+  private final ActorScheduler scheduler;\n+  private final BrokerCfg brokerCfg;\n+\n+  private final SnapshotStoreSupplier snapshotStoreSupplier;\n+  private final RaftPartition raftPartition;\n+  private final TypedRecordProcessorsFactory typedRecordProcessorsFactory;\n+  private final CommandApiService commandApiService;\n+  private final Integer partitionId;\n+  private final int maxFragmentSize;\n+  private final ZeebeIndexMapping zeebeIndexMapping;\n+  private final ExporterRepository exporterRepository = new ExporterRepository();\n+\n+  private StreamProcessor streamProcessor;\n+  private LogStream logStream;\n+  private AtomixLogStorage atomixLogStorage;\n+  private long deferredCommitPosition;\n+  private RaftLogReader raftLogReader;\n+  private SnapshotReplication snapshotReplication;\n+  private StateControllerImpl stateController;\n+  private LogDeletionService logDeletionService;\n+  private AsyncSnapshotDirector snapshotDirector;\n+  private HealthMonitor criticalComponentsHealthMonitor;\n+  private ZeebeDb zeebeDb;\n+  private boolean diskSpaceAvailable;\n+  private boolean isProcessingPaused;\n+  private ActorControl actor;\n+  private ScheduledTimer metricsTimer;\n+  private ExporterDirector exporterDirector;\n+\n+  public PartitionContext(\n+      final int nodeId,\n+      final RaftPartition raftPartition,\n+      final List<PartitionListener> partitionListeners,\n+      final PartitionMessagingService messagingService,\n+      final ActorScheduler actorScheduler,\n+      final BrokerCfg brokerCfg,\n+      final CommandApiService commandApiService,\n+      final ZeebeIndexMapping zeebeIndexMapping,\n+      final SnapshotStoreSupplier snapshotStoreSupplier,\n+      final TypedRecordProcessorsFactory typedRecordProcessorsFactory) {\n+    this.nodeId = nodeId;\n+    this.raftPartition = raftPartition;\n+    this.messagingService = messagingService;\n+    this.brokerCfg = brokerCfg;\n+    this.snapshotStoreSupplier = snapshotStoreSupplier;\n+    this.typedRecordProcessorsFactory = typedRecordProcessorsFactory;\n+    this.commandApiService = commandApiService;\n+    this.partitionListeners = Collections.unmodifiableList(partitionListeners);\n+    partitionId = raftPartition.id().id();\n+    scheduler = actorScheduler;\n+    maxFragmentSize = (int) brokerCfg.getNetwork().getMaxMessageSizeInBytes();\n+    this.zeebeIndexMapping = zeebeIndexMapping;\n+\n+    final var exporterEntries = brokerCfg.getExporters().entrySet();\n+    // load and validate exporters\n+    for (final var exporterEntry : exporterEntries) {\n+      final var id = exporterEntry.getKey();\n+      final var exporterCfg = exporterEntry.getValue();\n+      try {\n+        exporterRepository.load(id, exporterCfg);\n+      } catch (final ExporterLoadException | ExporterJarLoadException e) {\n+        throw new IllegalStateException(\n+            \"Failed to load exporter with configuration: \" + exporterCfg, e);\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b5742975c10851aec9ce145097188e0fec9fab"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4ODQyMg==", "bodyText": "It looks uncommon to pass a future in the method that needs to be completed. I suggest that the functions return a future instead.", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r502188422", "createdAt": "2020-10-09T04:53:25Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/PartitionTransition.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions;\n+\n+import io.zeebe.util.sched.future.CompletableActorFuture;\n+\n+public interface PartitionTransition {\n+\n+  /**\n+   * Transitions to follower asynchronously by closing the current partition's components and\n+   * opening a follower partition.\n+   *\n+   * @param future completed when the transition is complete\n+   */\n+  void toFollower(CompletableActorFuture<Void> future);\n+\n+  /**\n+   * Transitions to leader asynchronously by closing the current partition's components and opening\n+   * a leader partition.\n+   *\n+   * @param future completed when the transition is complete\n+   */\n+  void toLeader(CompletableActorFuture<Void> future);\n+\n+  /**\n+   * Closes the current partition's components asynchronously.\n+   *\n+   * @param future completed when the transition is complete\n+   */\n+  void toInactive(CompletableActorFuture<Void> future);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b5742975c10851aec9ce145097188e0fec9fab"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE4ODkyMQ==", "bodyText": "The name of the field doesn't match to the type. I suggest to rename it to context.", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r502188921", "createdAt": "2020-10-09T04:55:26Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import io.zeebe.broker.Loggers;\n+import io.zeebe.broker.system.partitions.Component;\n+import io.zeebe.broker.system.partitions.PartitionContext;\n+import io.zeebe.broker.system.partitions.PartitionTransition;\n+import io.zeebe.util.sched.future.ActorFuture;\n+import io.zeebe.util.sched.future.CompletableActorFuture;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.slf4j.Logger;\n+\n+public class PartitionTransitionImpl<T> implements PartitionTransition {\n+\n+  private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+\n+  private final PartitionContext state;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b5742975c10851aec9ce145097188e0fec9fab"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MDY1MQ==", "bodyText": "The generic type T is not used correctly here. It is not true that all components have the same generic type as PartitionTransitionImpl. There is just one instance of this class that is instantiated without a type.\nI suggest removing the generic type.", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r502190651", "createdAt": "2020-10-09T05:02:55Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import io.zeebe.broker.Loggers;\n+import io.zeebe.broker.system.partitions.Component;\n+import io.zeebe.broker.system.partitions.PartitionContext;\n+import io.zeebe.broker.system.partitions.PartitionTransition;\n+import io.zeebe.util.sched.future.ActorFuture;\n+import io.zeebe.util.sched.future.CompletableActorFuture;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.slf4j.Logger;\n+\n+public class PartitionTransitionImpl<T> implements PartitionTransition {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b5742975c10851aec9ce145097188e0fec9fab"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjE5MjEyMA==", "bodyText": "These methods look very similar. I suggest extracting the common part into a method.", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r502192120", "createdAt": "2020-10-09T05:09:28Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import io.zeebe.broker.Loggers;\n+import io.zeebe.broker.system.partitions.Component;\n+import io.zeebe.broker.system.partitions.PartitionContext;\n+import io.zeebe.broker.system.partitions.PartitionTransition;\n+import io.zeebe.util.sched.future.ActorFuture;\n+import io.zeebe.util.sched.future.CompletableActorFuture;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.slf4j.Logger;\n+\n+public class PartitionTransitionImpl<T> implements PartitionTransition {\n+\n+  private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+\n+  private final PartitionContext state;\n+  private final List<Component<T>> leaderComponents;\n+  private final List<Component<T>> followerComponents;\n+  private final List<Component<T>> openedComponents = new ArrayList<>();\n+\n+  public PartitionTransitionImpl(\n+      final PartitionContext state,\n+      final List<Component<T>> leaderComponents,\n+      final List<Component<T>> followerComponents) {\n+    this.state = state;\n+    this.leaderComponents = leaderComponents;\n+    this.followerComponents = followerComponents;\n+  }\n+\n+  @Override\n+  public void toFollower(final CompletableActorFuture<Void> future) {\n+    closePartition()\n+        .onComplete(\n+            (nothing, err) -> {\n+              if (err == null) {\n+                installComponents(future, new ArrayList<>(followerComponents));\n+              } else {\n+                future.completeExceptionally(err);\n+              }\n+            });\n+  }\n+\n+  @Override\n+  public void toLeader(final CompletableActorFuture<Void> future) {\n+    closePartition()\n+        .onComplete(\n+            (nothing, err) -> {\n+              if (err == null) {\n+                installComponents(future, new ArrayList<>(leaderComponents));\n+              } else {\n+                future.completeExceptionally(err);\n+              }\n+            });\n+  }\n+\n+  @Override\n+  public void toInactive(final CompletableActorFuture<Void> future) {\n+    closePartition()\n+        .onComplete(\n+            (nothing, err) -> {\n+              if (err == null) {\n+                future.complete(null);\n+              } else {\n+                future.completeExceptionally(err);\n+              }\n+            });\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b5742975c10851aec9ce145097188e0fec9fab"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY1ODgxMw==", "bodyText": "We can use Actor.wrap() instead of creating a new TestActor.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final TestActor actor =\n          \n          \n            \n                    new TestActor(\n          \n          \n            \n                        () -> {\n          \n          \n            \n                          final CompletableActorFuture<Void> leaderFuture = new CompletableActorFuture<>();\n          \n          \n            \n                          partitionTransition.toLeader(leaderFuture);\n          \n          \n            \n                          leaderFuture.onComplete(\n          \n          \n            \n                              (nothing, err) -> {\n          \n          \n            \n                                Assertions.assertThat(err).isNull();\n          \n          \n            \n            \n          \n          \n            \n                                final CompletableActorFuture<Void> closeFuture = new CompletableActorFuture<>();\n          \n          \n            \n                                partitionTransition.toInactive(closeFuture);\n          \n          \n            \n                                closeFuture.onComplete(\n          \n          \n            \n                                    (nothing1, err1) -> Assertions.assertThat(err1).isNull());\n          \n          \n            \n                              });\n          \n          \n            \n                        });\n          \n          \n            \n                final var actor =\n          \n          \n            \n                    Actor.wrap(\n          \n          \n            \n                        actorControl -> {\n          \n          \n            \n                          final CompletableActorFuture<Void> leaderFuture = new CompletableActorFuture<>();\n          \n          \n            \n                          partitionTransition.toLeader(leaderFuture);\n          \n          \n            \n                          leaderFuture.onComplete(\n          \n          \n            \n                              (nothing, err) -> {\n          \n          \n            \n                                Assertions.assertThat(err).isNull();\n          \n          \n            \n            \n          \n          \n            \n                                final CompletableActorFuture<Void> closeFuture = new CompletableActorFuture<>();\n          \n          \n            \n                                partitionTransition.toInactive(closeFuture);\n          \n          \n            \n                                closeFuture.onComplete(\n          \n          \n            \n                                    (nothing1, err1) -> Assertions.assertThat(err1).isNull());\n          \n          \n            \n                              });\n          \n          \n            \n                        });", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r503658813", "createdAt": "2020-10-13T04:22:53Z", "author": {"login": "saig0"}, "path": "broker/src/test/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.when;\n+\n+import io.zeebe.broker.system.partitions.Component;\n+import io.zeebe.broker.system.partitions.PartitionContext;\n+import io.zeebe.util.sched.Actor;\n+import io.zeebe.util.sched.future.ActorFuture;\n+import io.zeebe.util.sched.future.CompletableActorFuture;\n+import io.zeebe.util.sched.testing.ControlledActorSchedulerRule;\n+import java.util.Collections;\n+import java.util.List;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.InOrder;\n+\n+public class PartitionTransitionTest {\n+\n+  @Rule\n+  public final ControlledActorSchedulerRule schedulerRule = new ControlledActorSchedulerRule();\n+\n+  private PartitionContext ctx;\n+\n+  @Before\n+  public void setup() {\n+    ctx = mock(PartitionContext.class);\n+    when(ctx.getPartitionId()).thenReturn(0);\n+  }\n+\n+  @Test\n+  public void shouldCloseInOppositeOrderOfOpen() {\n+    // given\n+    final NoopComponent firstComponent = spy(new NoopComponent());\n+    final NoopComponent secondComponent = spy(new NoopComponent());\n+    final PartitionTransitionImpl partitionTransition =\n+        new PartitionTransitionImpl(\n+            ctx, List.of(firstComponent, secondComponent), Collections.EMPTY_LIST);\n+\n+    // when\n+    final TestActor actor =\n+        new TestActor(\n+            () -> {\n+              final CompletableActorFuture<Void> leaderFuture = new CompletableActorFuture<>();\n+              partitionTransition.toLeader(leaderFuture);\n+              leaderFuture.onComplete(\n+                  (nothing, err) -> {\n+                    Assertions.assertThat(err).isNull();\n+\n+                    final CompletableActorFuture<Void> closeFuture = new CompletableActorFuture<>();\n+                    partitionTransition.toInactive(closeFuture);\n+                    closeFuture.onComplete(\n+                        (nothing1, err1) -> Assertions.assertThat(err1).isNull());\n+                  });\n+            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b5742975c10851aec9ce145097188e0fec9fab"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY2MTc2Nw==", "bodyText": "I think that the separation of open() and onOpen() in the interface is not valuable. Both methods are always called after each other. The generic type is also not used correctly by the caller because it uses the class without any type information. The generic type causes more problems without offering real type-safety.\nI suggest having only one method in the interface. However, the implementation can have two methods if needed.", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r503661767", "createdAt": "2020-10-13T04:35:13Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/Component.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions;\n+\n+import io.zeebe.util.sched.future.ActorFuture;\n+\n+/**\n+ * A Component is responsible for managing the opening and closing of some service (e.g., logStream,\n+ * AsyncSnapshotDirector, etc) defined as its parameter.\n+ *\n+ * @param <T> the value opened and closed by the Component\n+ */\n+public interface Component<T> {\n+\n+  /**\n+   * Opens the component and returns a future which should be completed with the component's value.\n+   *\n+   * @param context the partition context\n+   * @return future\n+   */\n+  ActorFuture<T> open(final PartitionContext context);\n+\n+  /**\n+   * Closes the component and returns a future to be completed after the closing is done.\n+   *\n+   * @param context the partition context\n+   * @return future\n+   */\n+  ActorFuture<Void> close(final PartitionContext context);\n+\n+  /**\n+   * Called with the result of {@link Component#open(PartitionContext)} as the 'value' parameter.\n+   * Normally used to perform actions like storing the value in the {@link PartitionContext},\n+   * scheduling actors, etc.\n+   *\n+   * @param context the partition context\n+   * @param value value used to complete {@link Component#open(PartitionContext)} successfuly\n+   * @return future\n+   */\n+  ActorFuture<Void> onOpen(final PartitionContext context, final T value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b5742975c10851aec9ce145097188e0fec9fab"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3OTc5NTE5", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#pullrequestreview-507979519", "createdAt": "2020-10-14T04:05:28Z", "commit": {"oid": "be46cfe78e92261512c5dd208f4949455da88854"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNDowNToyOFrOHhBatg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwNDoxMjozNFrOHhBhbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4ODI3OA==", "bodyText": "For an empty list, we can use the ones from the standard Java lib instead of an external lib.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final List<PartitionStep> EMPTY_LIST = ImmutableList.of();\n          \n          \n            \n              private static final List<PartitionStep> EMPTY_LIST = List.of();\n          \n      \n    \n    \n  \n\nOr,\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final List<PartitionStep> EMPTY_LIST = ImmutableList.of();\n          \n          \n            \n              private static final List<PartitionStep> EMPTY_LIST = Collections.emptyList();", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r504388278", "createdAt": "2020-10-14T04:05:28Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java", "diffHunk": "@@ -18,101 +19,78 @@\n import java.util.List;\n import org.slf4j.Logger;\n \n-public class PartitionTransitionImpl<T> implements PartitionTransition {\n+public class PartitionTransitionImpl implements PartitionTransition {\n \n   private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+  private static final List<PartitionStep> EMPTY_LIST = ImmutableList.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be46cfe78e92261512c5dd208f4949455da88854"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDM4OTk5Nw==", "bodyText": "This may lead to problems if two role changes happen before the current transition is done. Both transitions would be performed after the current transition is completed. But the second transition should wait until the previous transition is completed.\nHowever, this is maybe not in the scope of this refactoring. So, feel free to ignore \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#discussion_r504389997", "createdAt": "2020-10-14T04:12:34Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java", "diffHunk": "@@ -18,101 +19,78 @@\n import java.util.List;\n import org.slf4j.Logger;\n \n-public class PartitionTransitionImpl<T> implements PartitionTransition {\n+public class PartitionTransitionImpl implements PartitionTransition {\n \n   private static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+  private static final List<PartitionStep> EMPTY_LIST = ImmutableList.of();\n \n-  private final PartitionContext state;\n-  private final List<Component<T>> leaderComponents;\n-  private final List<Component<T>> followerComponents;\n-  private final List<Component<T>> openedComponents = new ArrayList<>();\n+  private final PartitionContext context;\n+  private final List<PartitionStep> leaderSteps;\n+  private final List<PartitionStep> followerSteps;\n+  private final List<PartitionStep> openedSteps = new ArrayList<>();\n+  private CompletableActorFuture<Void> currentTransition = CompletableActorFuture.completed(null);\n \n   public PartitionTransitionImpl(\n-      final PartitionContext state,\n-      final List<Component<T>> leaderComponents,\n-      final List<Component<T>> followerComponents) {\n-    this.state = state;\n-    this.leaderComponents = leaderComponents;\n-    this.followerComponents = followerComponents;\n+      final PartitionContext context,\n+      final List<PartitionStep> leaderSteps,\n+      final List<PartitionStep> followerSteps) {\n+    this.context = context;\n+    this.leaderSteps = leaderSteps;\n+    this.followerSteps = followerSteps;\n   }\n \n   @Override\n-  public void toFollower(final CompletableActorFuture<Void> future) {\n-    closePartition()\n-        .onComplete(\n-            (nothing, err) -> {\n-              if (err == null) {\n-                installComponents(future, new ArrayList<>(followerComponents));\n-              } else {\n-                future.completeExceptionally(err);\n-              }\n-            });\n+  public ActorFuture<Void> toFollower() {\n+    final CompletableActorFuture<Void> future = new CompletableActorFuture<>();\n+    currentTransition.onComplete((nothing, err) -> transition(future, followerSteps));\n+    return future;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be46cfe78e92261512c5dd208f4949455da88854"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3OTg1Nzg5", "url": "https://github.com/camunda-cloud/zeebe/pull/5522#pullrequestreview-507985789", "createdAt": "2020-10-14T04:27:52Z", "commit": {"oid": "e46ef5c3f024786de38e047c7dc424ec534ab3c1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e46ef5c3f024786de38e047c7dc424ec534ab3c1", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/e46ef5c3f024786de38e047c7dc424ec534ab3c1", "committedDate": "2020-10-13T15:54:28Z", "message": "chore(broker): renamed package; tentative fix"}, "afterCommit": {"oid": "f2718e3579ba9f619403dcc65e98d164bb507d7e", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/f2718e3579ba9f619403dcc65e98d164bb507d7e", "committedDate": "2020-10-14T08:47:15Z", "message": "chore(qa): increase test timeout"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f2718e3579ba9f619403dcc65e98d164bb507d7e", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/f2718e3579ba9f619403dcc65e98d164bb507d7e", "committedDate": "2020-10-14T08:47:15Z", "message": "chore(qa): increase test timeout"}, "afterCommit": {"oid": "c6f3015050ecf139c3481997bb239689ec695a9c", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/c6f3015050ecf139c3481997bb239689ec695a9c", "committedDate": "2020-10-14T09:11:08Z", "message": "chore(qa): increase test timeout"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c6f3015050ecf139c3481997bb239689ec695a9c", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/c6f3015050ecf139c3481997bb239689ec695a9c", "committedDate": "2020-10-14T09:11:08Z", "message": "chore(qa): increase test timeout"}, "afterCommit": {"oid": "10cfba179bd777e5ca38f92e86fa00f2056e9f7c", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/10cfba179bd777e5ca38f92e86fa00f2056e9f7c", "committedDate": "2020-10-14T09:11:05Z", "message": "chore(broker): refactor ZeebePartition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8159cf965cf5141fa1996058aafb7001ce260b8", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/c8159cf965cf5141fa1996058aafb7001ce260b8", "committedDate": "2020-10-14T11:35:42Z", "message": "chore(broker): refactor ZeebePartition"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "10cfba179bd777e5ca38f92e86fa00f2056e9f7c", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/10cfba179bd777e5ca38f92e86fa00f2056e9f7c", "committedDate": "2020-10-14T09:11:05Z", "message": "chore(broker): refactor ZeebePartition"}, "afterCommit": {"oid": "c8159cf965cf5141fa1996058aafb7001ce260b8", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/c8159cf965cf5141fa1996058aafb7001ce260b8", "committedDate": "2020-10-14T11:35:42Z", "message": "chore(broker): refactor ZeebePartition"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2423, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}