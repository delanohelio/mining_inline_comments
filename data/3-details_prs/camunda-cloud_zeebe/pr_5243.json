{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczODcyOTE3", "number": 5243, "title": "benchmarks: add duration limit to starter", "bodyText": "Description\nAdd an optional limit of the test duration.\nDefinition of Done\nNot all items need to be done depending on the issue and the pull request.\nCode changes:\n\n The changes are backward compatible with previous versions\n\nTesting:\n\n There are unit/integration tests that verify all acceptance criteria of the issue\n New tests are written to ensure backward compatibility with further versions\n The behavior is tested manually\n The impact of the changes is verified by a benchmark\n\nDocumentation:\n\n The documentation is updated (e.g. BPMN reference, configuration, examples, get-started guides, etc.)\n New content is added to the release announcement", "createdAt": "2020-08-26T12:29:32Z", "url": "https://github.com/camunda-cloud/zeebe/pull/5243", "merged": true, "mergeCommit": {"oid": "cc63149f312e446439bc58f46fa66a560a333873"}, "closed": true, "closedAt": "2020-10-08T07:30:16Z", "author": {"login": "falko"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCq4z8gH2gAyNDczODcyOTE3OmYzOTE3ZjgzYjQxOWFiNDQzMGFmOWQ2ZTM5MzUyMzExYTNkMTA4ZDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQcHHKAFqTUwNDQ4MTc0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f3917f83b419ab4430af9d6e39352311a3d108d7", "author": {"user": {"login": "falko", "name": "Falko Menge"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/f3917f83b419ab4430af9d6e39352311a3d108d7", "committedDate": "2020-08-26T12:23:09Z", "message": "chore(benchmarks): add duration limit to starter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NjY0MTMx", "url": "https://github.com/camunda-cloud/zeebe/pull/5243#pullrequestreview-476664131", "createdAt": "2020-08-27T12:21:16Z", "commit": {"oid": "f3917f83b419ab4430af9d6e39352311a3d108d7"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMjoyMToxN1rOHINxug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMjoyMjoxNlrOHIN0Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3NjM3OA==", "bodyText": "Who is the one ? \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/5243#discussion_r478376378", "createdAt": "2020-08-27T12:21:17Z", "author": {"login": "Zelldon"}, "path": "benchmarks/project/src/main/java/io/zeebe/Starter.java", "diffHunk": "@@ -59,30 +62,39 @@ public void run() {\n     LOG.info(\"Creating an instance every {}ms\", intervalMs);\n \n     final String variables = readVariables(starterCfg.getPayloadPath());\n+    final LocalDateTime startTime = LocalDateTime.now();\n     executorService.scheduleAtFixedRate(\n         () -> {\n-          try {\n-            if (starterCfg.isWithResults()) {\n-              requestFutures.put(\n-                  client\n-                      .newCreateInstanceCommand()\n-                      .bpmnProcessId(processId)\n-                      .latestVersion()\n-                      .variables(variables)\n-                      .withResult()\n-                      .requestTimeout(starterCfg.getWithResultsTimeout())\n-                      .send());\n-            } else {\n-              requestFutures.put(\n-                  client\n-                      .newCreateInstanceCommand()\n-                      .bpmnProcessId(processId)\n-                      .latestVersion()\n-                      .variables(variables)\n-                      .send());\n+          final long duration = ChronoUnit.SECONDS.between(startTime, LocalDateTime.now());\n+          if (durationLimit <= 0 || duration < durationLimit) {\n+            try {\n+              if (starterCfg.isWithResults()) {\n+                requestFutures.put(\n+                    client\n+                        .newCreateInstanceCommand()\n+                        .bpmnProcessId(processId)\n+                        .latestVersion()\n+                        .variables(variables)\n+                        .withResult()\n+                        .requestTimeout(starterCfg.getWithResultsTimeout())\n+                        .send());\n+              } else {\n+                requestFutures.put(\n+                    client\n+                        .newCreateInstanceCommand()\n+                        .bpmnProcessId(processId)\n+                        .latestVersion()\n+                        .variables(variables)\n+                        .send());\n+              }\n+            } catch (Exception e) {\n+              LOG.error(\"Error on creating new workflow instance\", e);\n             }\n-          } catch (Exception e) {\n-            LOG.error(\"Error on creating new workflow instance\", e);\n+          } else {\n+            // TODO can one use scheduledFuture.cancel(false) to gracefully", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3917f83b419ab4430af9d6e39352311a3d108d7"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3NzAwNg==", "bodyText": "So what you want to do is canceling the timer, stopping the execution service. Await all remaining responses and then exit right?", "url": "https://github.com/camunda-cloud/zeebe/pull/5243#discussion_r478377006", "createdAt": "2020-08-27T12:22:16Z", "author": {"login": "Zelldon"}, "path": "benchmarks/project/src/main/java/io/zeebe/Starter.java", "diffHunk": "@@ -59,30 +62,39 @@ public void run() {\n     LOG.info(\"Creating an instance every {}ms\", intervalMs);\n \n     final String variables = readVariables(starterCfg.getPayloadPath());\n+    final LocalDateTime startTime = LocalDateTime.now();\n     executorService.scheduleAtFixedRate(\n         () -> {\n-          try {\n-            if (starterCfg.isWithResults()) {\n-              requestFutures.put(\n-                  client\n-                      .newCreateInstanceCommand()\n-                      .bpmnProcessId(processId)\n-                      .latestVersion()\n-                      .variables(variables)\n-                      .withResult()\n-                      .requestTimeout(starterCfg.getWithResultsTimeout())\n-                      .send());\n-            } else {\n-              requestFutures.put(\n-                  client\n-                      .newCreateInstanceCommand()\n-                      .bpmnProcessId(processId)\n-                      .latestVersion()\n-                      .variables(variables)\n-                      .send());\n+          final long duration = ChronoUnit.SECONDS.between(startTime, LocalDateTime.now());\n+          if (durationLimit <= 0 || duration < durationLimit) {\n+            try {\n+              if (starterCfg.isWithResults()) {\n+                requestFutures.put(\n+                    client\n+                        .newCreateInstanceCommand()\n+                        .bpmnProcessId(processId)\n+                        .latestVersion()\n+                        .variables(variables)\n+                        .withResult()\n+                        .requestTimeout(starterCfg.getWithResultsTimeout())\n+                        .send());\n+              } else {\n+                requestFutures.put(\n+                    client\n+                        .newCreateInstanceCommand()\n+                        .bpmnProcessId(processId)\n+                        .latestVersion()\n+                        .variables(variables)\n+                        .send());\n+              }\n+            } catch (Exception e) {\n+              LOG.error(\"Error on creating new workflow instance\", e);\n             }\n-          } catch (Exception e) {\n-            LOG.error(\"Error on creating new workflow instance\", e);\n+          } else {\n+            // TODO can one use scheduledFuture.cancel(false) to gracefully", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3NjM3OA=="}, "originalCommit": {"oid": "f3917f83b419ab4430af9d6e39352311a3d108d7"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "453a4687778a141408b20947cad1da5f6cb99188", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/453a4687778a141408b20947cad1da5f6cb99188", "committedDate": "2020-09-03T12:37:10Z", "message": "chore(benchmark): replace System.exit() with countdown latch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0NDgxNzQx", "url": "https://github.com/camunda-cloud/zeebe/pull/5243#pullrequestreview-504481741", "createdAt": "2020-10-08T07:05:09Z", "commit": {"oid": "453a4687778a141408b20947cad1da5f6cb99188"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2565, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}