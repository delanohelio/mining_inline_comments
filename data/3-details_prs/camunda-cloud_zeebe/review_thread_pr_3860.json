{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MTQyMDQ2", "number": 3860, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDoxMTowNVrODg1lkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMjoyMTowOVrODhDJkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU4OTk1OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/AtomixFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDoxMTowNVrOFrQ0_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOTozOToxNFrOFrhHig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwODc5OQ==", "bodyText": "Should we also have a getLogSegmentSizeInBytes method here as well then?", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r380908799", "createdAt": "2020-02-18T20:11:05Z", "author": {"login": "npepinpe"}, "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/AtomixFactory.java", "diffHunk": "@@ -114,14 +114,14 @@ private static RaftPartitionGroup createRaftPartitionGroup(\n             .withFlushOnCommit();\n \n     // by default, the Atomix max entry size is 1 MB\n-    final ByteValue maxMessageSize = networkCfg.getMaxMessageSize();\n-    partitionGroupBuilder.withMaxEntrySize((int) maxMessageSize.toBytes());\n+    final int maxMessageSize = (int) networkCfg.getMaxMessageSizeInBytes();\n+    partitionGroupBuilder.withMaxEntrySize(maxMessageSize);\n \n     Optional.ofNullable(dataCfg.getLogSegmentSize())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f364db704ccedba5ec20e9c1094a9b90519c55ac"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE3NTY5MA==", "bodyText": "Done", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r381175690", "createdAt": "2020-02-19T09:39:14Z", "author": {"login": "pihme"}, "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/AtomixFactory.java", "diffHunk": "@@ -114,14 +114,14 @@ private static RaftPartitionGroup createRaftPartitionGroup(\n             .withFlushOnCommit();\n \n     // by default, the Atomix max entry size is 1 MB\n-    final ByteValue maxMessageSize = networkCfg.getMaxMessageSize();\n-    partitionGroupBuilder.withMaxEntrySize((int) maxMessageSize.toBytes());\n+    final int maxMessageSize = (int) networkCfg.getMaxMessageSizeInBytes();\n+    partitionGroupBuilder.withMaxEntrySize(maxMessageSize);\n \n     Optional.ofNullable(dataCfg.getLogSegmentSize())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwODc5OQ=="}, "originalCommit": {"oid": "f364db704ccedba5ec20e9c1094a9b90519c55ac"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU5NTYwOnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/configuration/NetworkCfg.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDoxMzowMVrOFrQ4kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOTo0MDo1MVrOFrhLsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwOTcxNA==", "bodyText": "Nit: not sure if necessary as when we parse the config file, we could have an invalid string and we'll anyway only figure it out when we try to access it via getMaxMessageSizeInBytes.", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r380909714", "createdAt": "2020-02-18T20:13:01Z", "author": {"login": "npepinpe"}, "path": "broker/src/main/java/io/zeebe/broker/system/configuration/NetworkCfg.java", "diffHunk": "@@ -74,11 +74,18 @@ public void setPortOffset(final int portOffset) {\n     this.portOffset = portOffset;\n   }\n \n-  public ByteValue getMaxMessageSize() {\n-    return new ByteValue(maxMessageSize);\n+  public String getMaxMessageSize() {\n+    return maxMessageSize;\n+  }\n+\n+  public long getMaxMessageSizeInBytes() {\n+    return ByteValueParser.fromString(maxMessageSize).toBytes();\n   }\n \n   public void setMaxMessageSize(final String maxMessageSize) {\n+    // call parsing logic to provoke any exceptions that might occur during parsing\n+    ByteValueParser.fromString(maxMessageSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f364db704ccedba5ec20e9c1094a9b90519c55ac"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE1OTU4OA==", "bodyText": "The idea here (and in other places) is to fail early and in a defined phase of computation.\nSetting the configuration with an invalid value will throw an exception during startup, so it would be noticed right away. Throwing an exception whenever we arbitrarily access a setting seems more risky to me.\nThere is also a school of thought which claims that getters should never throw exceptions.\nI would strongly argue to keep it as it is. Also, if we use Spring Boot, we would change this interface to accept DataSize instead of String, and remove the parsing altogether. But the net behavior would be the same: exception will be thrown while parsing the configuration, not while accessing it.", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r381159588", "createdAt": "2020-02-19T09:10:34Z", "author": {"login": "pihme"}, "path": "broker/src/main/java/io/zeebe/broker/system/configuration/NetworkCfg.java", "diffHunk": "@@ -74,11 +74,18 @@ public void setPortOffset(final int portOffset) {\n     this.portOffset = portOffset;\n   }\n \n-  public ByteValue getMaxMessageSize() {\n-    return new ByteValue(maxMessageSize);\n+  public String getMaxMessageSize() {\n+    return maxMessageSize;\n+  }\n+\n+  public long getMaxMessageSizeInBytes() {\n+    return ByteValueParser.fromString(maxMessageSize).toBytes();\n   }\n \n   public void setMaxMessageSize(final String maxMessageSize) {\n+    // call parsing logic to provoke any exceptions that might occur during parsing\n+    ByteValueParser.fromString(maxMessageSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwOTcxNA=="}, "originalCommit": {"oid": "f364db704ccedba5ec20e9c1094a9b90519c55ac"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE3MTYxOA==", "bodyText": "Could we store the returned value ? Then we do not need to re-calculate it again later? Do we need the string in the Cfg anyway?", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r381171618", "createdAt": "2020-02-19T09:32:35Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/configuration/NetworkCfg.java", "diffHunk": "@@ -74,11 +74,18 @@ public void setPortOffset(final int portOffset) {\n     this.portOffset = portOffset;\n   }\n \n-  public ByteValue getMaxMessageSize() {\n-    return new ByteValue(maxMessageSize);\n+  public String getMaxMessageSize() {\n+    return maxMessageSize;\n+  }\n+\n+  public long getMaxMessageSizeInBytes() {\n+    return ByteValueParser.fromString(maxMessageSize).toBytes();\n   }\n \n   public void setMaxMessageSize(final String maxMessageSize) {\n+    // call parsing logic to provoke any exceptions that might occur during parsing\n+    ByteValueParser.fromString(maxMessageSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwOTcxNA=="}, "originalCommit": {"oid": "f364db704ccedba5ec20e9c1094a9b90519c55ac"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE3NTQxMA==", "bodyText": "Yes we could store the returned value. I kinda opted against it, though. This is more a preparatory step to later replace String with DataSize (from Spring Boot). In that later stage I would store the DataSize value because it's the ground truth. The byte value is just a calculated value based on that. In that setup, the parsing will have happened before the DataSize object is created, so the expensive step is only done once. Also, it didn't look like the getter is called with a high frequency, so I think the performance gains of caching the result would be negligible.", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r381175410", "createdAt": "2020-02-19T09:38:47Z", "author": {"login": "pihme"}, "path": "broker/src/main/java/io/zeebe/broker/system/configuration/NetworkCfg.java", "diffHunk": "@@ -74,11 +74,18 @@ public void setPortOffset(final int portOffset) {\n     this.portOffset = portOffset;\n   }\n \n-  public ByteValue getMaxMessageSize() {\n-    return new ByteValue(maxMessageSize);\n+  public String getMaxMessageSize() {\n+    return maxMessageSize;\n+  }\n+\n+  public long getMaxMessageSizeInBytes() {\n+    return ByteValueParser.fromString(maxMessageSize).toBytes();\n   }\n \n   public void setMaxMessageSize(final String maxMessageSize) {\n+    // call parsing logic to provoke any exceptions that might occur during parsing\n+    ByteValueParser.fromString(maxMessageSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwOTcxNA=="}, "originalCommit": {"oid": "f364db704ccedba5ec20e9c1094a9b90519c55ac"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE3Njc1NQ==", "bodyText": "Ok so this PR is more a transitive state to the new cfg. Thanks for clarification", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r381176755", "createdAt": "2020-02-19T09:40:51Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/configuration/NetworkCfg.java", "diffHunk": "@@ -74,11 +74,18 @@ public void setPortOffset(final int portOffset) {\n     this.portOffset = portOffset;\n   }\n \n-  public ByteValue getMaxMessageSize() {\n-    return new ByteValue(maxMessageSize);\n+  public String getMaxMessageSize() {\n+    return maxMessageSize;\n+  }\n+\n+  public long getMaxMessageSizeInBytes() {\n+    return ByteValueParser.fromString(maxMessageSize).toBytes();\n   }\n \n   public void setMaxMessageSize(final String maxMessageSize) {\n+    // call parsing logic to provoke any exceptions that might occur during parsing\n+    ByteValueParser.fromString(maxMessageSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwOTcxNA=="}, "originalCommit": {"oid": "f364db704ccedba5ec20e9c1094a9b90519c55ac"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzYwMzk4OnYy", "diffSide": "RIGHT", "path": "dispatcher/src/main/java/io/zeebe/dispatcher/DispatcherBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDoxNTo1NlrOFrQ9tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwOTozOTowM1rOFrhHIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxMTAzMQ==", "bodyText": "Why not have the argument be an int to make this cast explicit to the caller (to avoid any potential confusion)?", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r380911031", "createdAt": "2020-02-18T20:15:56Z", "author": {"login": "npepinpe"}, "path": "dispatcher/src/main/java/io/zeebe/dispatcher/DispatcherBuilder.java", "diffHunk": "@@ -49,8 +49,8 @@ public DispatcherBuilder name(final String name) {\n    * The number of bytes the buffer is be able to contain. Represents the size of the data section.\n    * Additional space will be allocated for the meta-data sections\n    */\n-  public DispatcherBuilder bufferSize(final ByteValue byteValue) {\n-    bufferSize = (int) byteValue.toBytes();\n+  public DispatcherBuilder bufferSize(final long bufferSize) {\n+    this.bufferSize = (int) bufferSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f364db704ccedba5ec20e9c1094a9b90519c55ac"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTE3NTU4Ng==", "bodyText": "Done", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r381175586", "createdAt": "2020-02-19T09:39:03Z", "author": {"login": "pihme"}, "path": "dispatcher/src/main/java/io/zeebe/dispatcher/DispatcherBuilder.java", "diffHunk": "@@ -49,8 +49,8 @@ public DispatcherBuilder name(final String name) {\n    * The number of bytes the buffer is be able to contain. Represents the size of the data section.\n    * Additional space will be allocated for the meta-data sections\n    */\n-  public DispatcherBuilder bufferSize(final ByteValue byteValue) {\n-    bufferSize = (int) byteValue.toBytes();\n+  public DispatcherBuilder bufferSize(final long bufferSize) {\n+    this.bufferSize = (int) bufferSize;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxMTAzMQ=="}, "originalCommit": {"oid": "f364db704ccedba5ec20e9c1094a9b90519c55ac"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTgxMDExOnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/configuration/DataCfg.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMjoyMDozMlrOFrmCuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMjoyMzoyN1rOFrmICg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI1NjM3OQ==", "bodyText": "It's a little strange imo to have a Long but I get the idea. Maybe once we migrate the config we can revisit this and ensure we always have some value here.", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r381256379", "createdAt": "2020-02-19T12:20:32Z", "author": {"login": "npepinpe"}, "path": "broker/src/main/java/io/zeebe/broker/system/configuration/DataCfg.java", "diffHunk": "@@ -45,11 +46,24 @@ public void setDirectories(final List<String> directories) {\n     this.directories = directories;\n   }\n \n+  public Long getLogSegmentSizeInBytes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f479dc7577664aca1a5ce947e51c189d2e7a749c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI1NzczOA==", "bodyText": "Agreed. The caller assumed that the String might be null, that's why I did it this way.", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r381257738", "createdAt": "2020-02-19T12:23:27Z", "author": {"login": "pihme"}, "path": "broker/src/main/java/io/zeebe/broker/system/configuration/DataCfg.java", "diffHunk": "@@ -45,11 +46,24 @@ public void setDirectories(final List<String> directories) {\n     this.directories = directories;\n   }\n \n+  public Long getLogSegmentSizeInBytes() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI1NjM3OQ=="}, "originalCommit": {"oid": "f479dc7577664aca1a5ce947e51c189d2e7a749c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1OTgxMjAzOnYy", "diffSide": "RIGHT", "path": "dispatcher/src/main/java/io/zeebe/dispatcher/DispatcherBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMjoyMTowOVrOFrmD4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxMjoyNDo0NVrOFrmKEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI1NjY3NQ==", "bodyText": "A little nit picky, but we could do the same we did above and have the caller perform the cast to int.", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r381256675", "createdAt": "2020-02-19T12:21:09Z", "author": {"login": "npepinpe"}, "path": "dispatcher/src/main/java/io/zeebe/dispatcher/DispatcherBuilder.java", "diffHunk": "@@ -60,8 +60,8 @@ public DispatcherBuilder actorScheduler(final ActorScheduler actorScheduler) {\n   }\n \n   /** The max length of the data section of a frame */\n-  public DispatcherBuilder maxFragmentLength(final ByteValue maxFragmentLength) {\n-    this.maxFragmentLength = (int) maxFragmentLength.toBytes();\n+  public DispatcherBuilder maxFragmentLength(final long maxFragmentLength) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f479dc7577664aca1a5ce947e51c189d2e7a749c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI1ODI1OQ==", "bodyText": "Very attentive. Will do that", "url": "https://github.com/camunda-cloud/zeebe/pull/3860#discussion_r381258259", "createdAt": "2020-02-19T12:24:45Z", "author": {"login": "pihme"}, "path": "dispatcher/src/main/java/io/zeebe/dispatcher/DispatcherBuilder.java", "diffHunk": "@@ -60,8 +60,8 @@ public DispatcherBuilder actorScheduler(final ActorScheduler actorScheduler) {\n   }\n \n   /** The max length of the data section of a frame */\n-  public DispatcherBuilder maxFragmentLength(final ByteValue maxFragmentLength) {\n-    this.maxFragmentLength = (int) maxFragmentLength.toBytes();\n+  public DispatcherBuilder maxFragmentLength(final long maxFragmentLength) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTI1NjY3NQ=="}, "originalCommit": {"oid": "f479dc7577664aca1a5ce947e51c189d2e7a749c"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4984, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}