{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0Mzc0NDc1", "number": 6039, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwOToyNjowNVrOFLNI_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNzo0NjowM1rOFLlH0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MjkzOTQ5OnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftNamespaces.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwOToyNjowNVrOIOP5YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwOToyNjowNVrOIOP5YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTgxMTQyNA==", "bodyText": "If we are going to break compatability, then we can also remove these.", "url": "https://github.com/camunda-cloud/zeebe/pull/6039#discussion_r551811424", "createdAt": "2021-01-05T09:26:05Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftNamespaces.java", "diffHunk": "@@ -56,106 +55,106 @@\n \n   /** Raft protocol namespace. */\n   public static final Namespace RAFT_PROTOCOL =\n-      new FallbackNamespace(\n-          new Builder()\n-              .register(Namespaces.BASIC)\n-              .nextId(Namespaces.BEGIN_USER_CUSTOM_ID)\n-              .register(Void.class) // OpenSessionRequest\n-              .register(Void.class) // OpenSessionResponse\n-              .register(Void.class) // CloseSessionRequest\n-              .register(Void.class) // CloseSessionResponse\n-              .register(Void.class) // KeepAliveRequest\n-              .register(Void.class) // KeepAliveResponse\n-              .register(Void.class) // HeartbeatRequest\n-              .register(Void.class) // HeartbeatResponse\n-              .register(Void.class) // QueryRequest\n-              .register(Void.class) // QueryResponse\n-              .register(Void.class) // CommandRequest\n-              .register(Void.class) // CommandResponse\n-              .register(Void.class) // MetadataRequest\n-              .register(Void.class) // MetadataResponse\n-              .register(JoinRequest.class)\n-              .register(JoinResponse.class)\n-              .register(LeaveRequest.class)\n-              .register(LeaveResponse.class)\n-              .register(ConfigureRequest.class)\n-              .register(ConfigureResponse.class)\n-              .register(ReconfigureRequest.class)\n-              .register(ReconfigureResponse.class)\n-              .register(InstallRequest.class)\n-              .register(InstallResponse.class)\n-              .register(PollRequest.class)\n-              .register(PollResponse.class)\n-              .register(VoteRequest.class)\n-              .register(VoteResponse.class)\n-              .register(AppendRequest.class)\n-              .register(AppendResponse.class)\n-              .register(Void.class) // PublishRequest\n-              .register(Void.class) // ResetRequest\n-              .register(RaftResponse.Status.class)\n-              .register(RaftError.class)\n-              .register(RaftError.Type.class)\n-              .register(Void.class) // ReadConsistency\n-              .register(Void.class) // SessionMetadata\n-              .register(Void.class) // CloseSessionEntry\n-              .register(Void.class) // CommandEntry\n-              .register(ConfigurationEntry.class)\n-              .register(InitializeEntry.class)\n-              .register(Void.class) // KeepAliveEntry\n-              .register(Void.class) // MetadataEntry\n-              .register(Void.class) // OpenSessionEntry\n-              .register(Void.class) // QueryEntry\n-              .register(Void.class) // PrimitiveOperation\n-              .register(Void.class) // PrimitiveEvent\n-              .register(Void.class) // DefaultEventType\n-              .register(Void.class) // DefaultOperationId\n-              .register(Void.class) // OperationType\n-              .register(Void.class) // ReadConsistency\n-              .register(ArrayList.class)\n-              .register(LinkedList.class)\n-              .register(Collections.emptyList().getClass())\n-              .register(HashSet.class)\n-              .register(DefaultRaftMember.class)\n-              .register(MemberId.class)\n-              .register(Void.class) // SessionId\n-              .register(RaftMember.Type.class)\n-              .register(Instant.class)\n-              .register(Configuration.class)\n-              .register(ZeebeEntry.class)\n-              .name(\"RaftProtocol\"));\n+      new Builder()\n+          .register(Namespaces.BASIC)\n+          .nextId(Namespaces.BEGIN_USER_CUSTOM_ID)\n+          .register(Void.class) // OpenSessionRequest\n+          .register(Void.class) // OpenSessionResponse\n+          .register(Void.class) // CloseSessionRequest\n+          .register(Void.class) // CloseSessionResponse\n+          .register(Void.class) // KeepAliveRequest\n+          .register(Void.class) // KeepAliveResponse\n+          .register(Void.class) // HeartbeatRequest\n+          .register(Void.class) // HeartbeatResponse\n+          .register(Void.class) // QueryRequest\n+          .register(Void.class) // QueryResponse\n+          .register(Void.class) // CommandRequest\n+          .register(Void.class) // CommandResponse\n+          .register(Void.class) // MetadataRequest\n+          .register(Void.class) // MetadataResponse", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d13415da8acb91c4cb3acb6afe5065834b0a494a"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Njg2MTU2OnYy", "diffSide": "RIGHT", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/network/LargeMessageSizeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNzo0MzoxNFrOIO0zWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQxMjowODo1NlrOIO8kBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQxNjA5MQ==", "bodyText": "Why do you need this change?", "url": "https://github.com/camunda-cloud/zeebe/pull/6039#discussion_r552416091", "createdAt": "2021-01-06T07:43:14Z", "author": {"login": "deepthidevaki"}, "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/network/LargeMessageSizeTest.java", "diffHunk": "@@ -24,7 +24,7 @@\n \n public final class LargeMessageSizeTest {\n \n-  private static final DataSize MAX_MESSAGE_SIZE = DataSize.ofMegabytes(4);\n+  private static final DataSize MAX_MESSAGE_SIZE = DataSize.ofMegabytes(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d13415da8acb91c4cb3acb6afe5065834b0a494a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjU0MzIzOA==", "bodyText": "The encoded size is larger now so the size of the entry exceeded 5Mb", "url": "https://github.com/camunda-cloud/zeebe/pull/6039#discussion_r552543238", "createdAt": "2021-01-06T12:08:56Z", "author": {"login": "MiguelPires"}, "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/network/LargeMessageSizeTest.java", "diffHunk": "@@ -24,7 +24,7 @@\n \n public final class LargeMessageSizeTest {\n \n-  private static final DataSize MAX_MESSAGE_SIZE = DataSize.ofMegabytes(4);\n+  private static final DataSize MAX_MESSAGE_SIZE = DataSize.ofMegabytes(5);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQxNjA5MQ=="}, "originalCommit": {"oid": "d13415da8acb91c4cb3acb6afe5065834b0a494a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Njg2ODY1OnYy", "diffSide": "RIGHT", "path": "atomix/utils/src/main/java/io/atomix/utils/serializer/CompatibleKryoPool.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNzo0NjowM1rOIO03Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwNzo0NjowM1rOIO03Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQxNzA5MQ==", "bodyText": "May be add a small doc here about these configurations?", "url": "https://github.com/camunda-cloud/zeebe/pull/6039#discussion_r552417091", "createdAt": "2021-01-06T07:46:03Z", "author": {"login": "deepthidevaki"}, "path": "atomix/utils/src/main/java/io/atomix/utils/serializer/CompatibleKryoPool.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright \u00a9 2020 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.atomix.utils.serializer;\n+\n+import static io.atomix.utils.serializer.Namespace.FLOATING_ID;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import com.esotericsoftware.kryo.Kryo;\n+import com.esotericsoftware.kryo.Registration;\n+import com.esotericsoftware.kryo.Serializer;\n+import com.esotericsoftware.kryo.SerializerFactory.CompatibleFieldSerializerFactory;\n+import com.esotericsoftware.kryo.serializers.CompatibleFieldSerializer.CompatibleFieldSerializerConfig;\n+import com.esotericsoftware.kryo.util.DefaultInstantiatorStrategy;\n+import com.esotericsoftware.kryo.util.Pool;\n+import io.atomix.utils.serializer.Namespace.RegistrationBlock;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.objenesis.strategy.StdInstantiatorStrategy;\n+import org.slf4j.Logger;\n+\n+public class CompatibleKryoPool extends Pool<Kryo> {\n+\n+  private static final Logger LOGGER = getLogger(CompatibleKryoPool.class);\n+  private final String friendlyName;\n+  private final ClassLoader classLoader;\n+  private final List<RegistrationBlock> registeredBlocks;\n+\n+  public CompatibleKryoPool(\n+      final String friendlyName,\n+      final ClassLoader classLoader,\n+      final List<RegistrationBlock> registeredBlocks) {\n+    super(true, true);\n+\n+    this.friendlyName = friendlyName;\n+    this.classLoader = classLoader;\n+    this.registeredBlocks = registeredBlocks;\n+  }\n+\n+  @Override\n+  protected Kryo create() {\n+    final Kryo kryo = new Kryo();\n+    final CompatibleFieldSerializerConfig serializerConfig = new CompatibleFieldSerializerConfig();\n+    serializerConfig.setChunkedEncoding(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d13415da8acb91c4cb3acb6afe5065834b0a494a"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 50, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}