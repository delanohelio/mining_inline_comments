{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0OTUxOTQy", "number": 5614, "title": "Try fix flaky HealthMonitoringTest and DeploymentClusteredTest", "bodyText": "Description\nHealthMonitoringTest and DeploymentClusteredTest are both flaky. The\ntest timesout due to the outerrule (timeout) wrapped around the\nembeddedbrokerrule.\nAt least for the health monitoring test it was clear that a lot of time\nwas spend waiting for the broker to finish, because the raft partition\nserver was already stopped inside the test and could then later not be\nstopped by the after of the embeddedbrokerrule.\nThis PR allows calling the shutdown method of DefaultRaftServer\nmultiple times by keeping track of a stopped flag. The server is only\nallowed to stop if it is started and not already stopped. If it is\nalready stopped it can just return.\nIt also refactors the HealthMonitoringTest a bit to focus on what matters.\nIt does not fix the flakyness of these tests, but was an attempt for it.\nRelated issues\nsee #5005\nand #5013\nDefinition of Done\nNot all items need to be done depending on the issue and the pull request.\nCode changes:\n\n The changes are backwards compatibility with previous versions\n If it fixes a bug then PRs are created to backport the fix to the last two minor versions\n\nTesting:\n\n There are unit/integration tests that verify all acceptance criterias of the issue\n New tests are written to ensure backwards compatibility with further versions\n The behavior is tested manually\n The impact of the changes is verified by a benchmark\n\nDocumentation:\n\n The documentation is updated (e.g. BPMN reference, configuration, examples, get-started guides, etc.)\n New content is added to the release announcement", "createdAt": "2020-10-16T16:09:54Z", "url": "https://github.com/camunda-cloud/zeebe/pull/5614", "merged": true, "mergeCommit": {"oid": "74845a2e404429956b6185089769db1c53084bcd"}, "closed": true, "closedAt": "2020-10-23T12:17:49Z", "author": {"login": "korthout"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUoguWAFqTUxMzM5MzYzNw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVRHxNgFqTUxNTM5NjA4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMzkzNjM3", "url": "https://github.com/camunda-cloud/zeebe/pull/5614#pullrequestreview-513393637", "createdAt": "2020-10-21T07:46:29Z", "commit": {"oid": "8e93d01d391a66ac637acb000099b543f61830de"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzo0NjoyOVrOHlejgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzo0Njo1M1rOHleklw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1OTk3MA==", "bodyText": "@korthout do you think it makes sense to replace the boolean flags with just having a future for starting and stopping?\nIf starting future is null, you know it hasn't been started etc. If you call stop twice you just return the stopping future. I think it is not necessary to return an exceptionally future, for me it is not an error to close something what haven't been started. What do you think?", "url": "https://github.com/camunda-cloud/zeebe/pull/5614#discussion_r509059970", "createdAt": "2020-10-21T07:46:29Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/DefaultRaftServer.java", "diffHunk": "@@ -123,22 +124,27 @@ public void removeFailureListener(final Runnable failureListener) {\n    *\n    * @return A completable future to be completed once the server has been shutdown.\n    */\n+  @Override\n   public CompletableFuture<Void> shutdown() {\n-    if (!started) {\n+    if (!started && !stopped) {\n       return Futures.exceptionalFuture(new IllegalStateException(\"Server not running\"));\n     }\n \n+    if (stopped) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e93d01d391a66ac637acb000099b543f61830de"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA2MDI0Nw==", "bodyText": "Thanks for replacing that \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/5614#discussion_r509060247", "createdAt": "2020-10-21T07:46:53Z", "author": {"login": "Zelldon"}, "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/health/HealthMonitoringTest.java", "diffHunk": "@@ -56,7 +46,7 @@ public void shouldReportUnhealthyWhenRaftInactive() {\n     raftPartition.getServer().stop();\n \n     // then\n-    waitUntil(() -> !isBrokerHealthy());\n+    Awaitility.waitAtMost(Duration.ofMinutes(1)).until(() -> !isBrokerHealthy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e93d01d391a66ac637acb000099b543f61830de"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9ffae19c65cabcabc051fcb4f46f397d39f5512", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/e9ffae19c65cabcabc051fcb4f46f397d39f5512", "committedDate": "2020-10-22T12:36:28Z", "message": "refactor(broker): Cleanup HealthMonitoringTest\n\nThis test contained a lot of unnecessary things as remnants\nfrom previous tests that existed in this test class. Since they are no\nlonger there, they could simply be removed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9753fcc1d2457cc7333cf9ea543e62b939ad7eae", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/9753fcc1d2457cc7333cf9ea543e62b939ad7eae", "committedDate": "2020-10-22T12:36:28Z", "message": "fix(atomix): Unflake multiple ITs\n\nHealthMonitoringTest and DeploymentClusteredTest are both flaky. The\ntest timesout due to the outerrule (timeout) wrapped around the\nembeddedbrokerrule.\n\nAt least for the health monitoring test it was clear that a lot of time\nwas spend waiting for the broker to finish, because the raft partition\nserver was already stopped inside the test and could then later not be\nstopped by the after of the embeddedbrokerrule.\n\nThis commit allows calling the shutdown method of DefaultRaftServer\nmultiple times by keeping track of a stopped flag. The server is only\nallowed to stop if it is started and not already stopped. If it is\nalready stopped it can just return.\n\nCo-authored-by: Peter Ihme <peter.ihme@camunda.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e93d01d391a66ac637acb000099b543f61830de", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8e93d01d391a66ac637acb000099b543f61830de", "committedDate": "2020-10-16T16:02:38Z", "message": "fix(atomix): Unflake multiple ITs\n\nHealthMonitoringTest and DeploymentClusteredTest are both flaky. The\ntest timesout due to the outerrule (timeout) wrapped around the\nembeddedbrokerrule.\n\nAt least for the health monitoring test it was clear that a lot of time\nwas spend waiting for the broker to finish, because the raft partition\nserver was already stopped inside the test and could then later not be\nstopped by the after of the embeddedbrokerrule.\n\nThis commit allows calling the shutdown method of DefaultRaftServer\nmultiple times by keeping track of a stopped flag. The server is only\nallowed to stop if it is started and not already stopped. If it is\nalready stopped it can just return.\n\nCo-authored-by: Peter Ihme <peter.ihme@camunda.com>"}, "afterCommit": {"oid": "9753fcc1d2457cc7333cf9ea543e62b939ad7eae", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/9753fcc1d2457cc7333cf9ea543e62b939ad7eae", "committedDate": "2020-10-22T12:36:28Z", "message": "fix(atomix): Unflake multiple ITs\n\nHealthMonitoringTest and DeploymentClusteredTest are both flaky. The\ntest timesout due to the outerrule (timeout) wrapped around the\nembeddedbrokerrule.\n\nAt least for the health monitoring test it was clear that a lot of time\nwas spend waiting for the broker to finish, because the raft partition\nserver was already stopped inside the test and could then later not be\nstopped by the after of the embeddedbrokerrule.\n\nThis commit allows calling the shutdown method of DefaultRaftServer\nmultiple times by keeping track of a stopped flag. The server is only\nallowed to stop if it is started and not already stopped. If it is\nalready stopped it can just return.\n\nCo-authored-by: Peter Ihme <peter.ihme@camunda.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1Mzk2MDg0", "url": "https://github.com/camunda-cloud/zeebe/pull/5614#pullrequestreview-515396084", "createdAt": "2020-10-23T07:06:31Z", "commit": {"oid": "9753fcc1d2457cc7333cf9ea543e62b939ad7eae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2454, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}