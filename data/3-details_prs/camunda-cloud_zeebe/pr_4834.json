{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNTgyMDM3", "number": 4834, "title": "chore(atomix): add missing test for multiple data loss", "bodyText": "Description\nAdded a new test to test snapshot replication on multiple data loss an same node.\nSee comment from @deepthidevaki\n\nThanks.\nThe bug that we had before was if the leader replicated the snapshot to the follower once, it won't replicate it again if the follower restarts with data loss. The test we had before was covering this scenario. It would be good to test it so that we don't introduce that bug again. The previous test was as follows:\nEnsure snapshot is replicated by the leader to the follower :\nAppend some entries and take snapshot\nFollower restart with data loss\nAssert follower received snapshot\nVerify snapshot is replicated again :\nThe same follower restart with data loss\nAssert follower received snapshot\n\n\nRelated issues\n\ncloses #4468\nPull Request Checklist\n\n All commit messages match our commit message guidelines\n The submitting code follows our code style\n If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-06-26T13:19:38Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4834", "merged": true, "mergeCommit": {"oid": "b8deb126fe7e64dd5127e13b23b89b226a364ebe"}, "closed": true, "closedAt": "2020-07-02T10:07:06Z", "author": {"login": "Zelldon"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvDF1wgH2gAyNDQwNTgyMDM3OjE5OGZhYWFjZjA0ZDIwMDljMDg0YjU1NDI4YTE5ZjUxOWFmMGJiMDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcw7qh7AFqTQ0MTUyMDUwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "198faaacf04d2009c084b55428a19f519af0bb03", "author": {"user": {"login": "Zelldon", "name": "Christopher Zell"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/198faaacf04d2009c084b55428a19f519af0bb03", "committedDate": "2020-06-26T13:16:37Z", "message": "chore(atomix): add missing test for multiple data loss"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MjcyNTM3", "url": "https://github.com/camunda-cloud/zeebe/pull/4834#pullrequestreview-439272537", "createdAt": "2020-06-29T15:42:07Z", "commit": {"oid": "198faaacf04d2009c084b55428a19f519af0bb03"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo0MjowOFrOGqW5tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo0MjozOVrOGqW7IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2ODU5Nw==", "bodyText": "Is it guaranteed that the snapshot is available immediately after the bootstrap? Or should it wait until the snapshot is replicated?", "url": "https://github.com/camunda-cloud/zeebe/pull/4834#discussion_r447068597", "createdAt": "2020-06-29T15:42:08Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/test/java/io/atomix/raft/RaftFailOverTest.java", "diffHunk": "@@ -228,7 +228,37 @@ public void shouldReplicateSnapshotAfterDataLoss() throws Exception {\n     final var snapshot = raftRule.getSnapshotOnNode(follower);\n \n     assertThat(snapshot.getIndex()).isEqualTo(leaderSnapshot.getIndex()).isEqualTo(100);\n-    assertThat(snapshot.getTerm()).isEqualTo(snapshot.getTerm());\n+    assertThat(snapshot.getTerm()).isEqualTo(leaderSnapshot.getTerm());\n+    assertThat(snapshot.getId()).isEqualTo(leaderSnapshot.getId());\n+  }\n+\n+  @Test\n+  public void shouldReplicateSnapshotMultipleTimesAfterMultipleDataLoss() throws Exception {\n+    // given\n+    raftRule.appendEntries(128);\n+    raftRule.doSnapshot(100);\n+    final var follower = raftRule.shutdownFollower();\n+    final var leaderSnapshot = raftRule.getSnapshotFromLeader();\n+    raftRule.triggerDataLossOnNode(follower);\n+    raftRule.bootstrapNode(follower);\n+\n+    final var firstSnapshot = raftRule.getSnapshotOnNode(follower);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198faaacf04d2009c084b55428a19f519af0bb03"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA2ODk2MA==", "bodyText": "Same as above.", "url": "https://github.com/camunda-cloud/zeebe/pull/4834#discussion_r447068960", "createdAt": "2020-06-29T15:42:39Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/test/java/io/atomix/raft/RaftFailOverTest.java", "diffHunk": "@@ -228,7 +228,37 @@ public void shouldReplicateSnapshotAfterDataLoss() throws Exception {\n     final var snapshot = raftRule.getSnapshotOnNode(follower);\n \n     assertThat(snapshot.getIndex()).isEqualTo(leaderSnapshot.getIndex()).isEqualTo(100);\n-    assertThat(snapshot.getTerm()).isEqualTo(snapshot.getTerm());\n+    assertThat(snapshot.getTerm()).isEqualTo(leaderSnapshot.getTerm());\n+    assertThat(snapshot.getId()).isEqualTo(leaderSnapshot.getId());\n+  }\n+\n+  @Test\n+  public void shouldReplicateSnapshotMultipleTimesAfterMultipleDataLoss() throws Exception {\n+    // given\n+    raftRule.appendEntries(128);\n+    raftRule.doSnapshot(100);\n+    final var follower = raftRule.shutdownFollower();\n+    final var leaderSnapshot = raftRule.getSnapshotFromLeader();\n+    raftRule.triggerDataLossOnNode(follower);\n+    raftRule.bootstrapNode(follower);\n+\n+    final var firstSnapshot = raftRule.getSnapshotOnNode(follower);\n+\n+    // when another data loss happens\n+    raftRule.shutdownServer(follower);\n+    raftRule.triggerDataLossOnNode(follower);\n+    assertThat(firstSnapshot.getPath()).doesNotExist();\n+    raftRule.bootstrapNode(follower);\n+\n+    // then snapshot is replicated again\n+    assertThat(raftRule.allNodesHaveSnapshotWithIndex(100)).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "198faaacf04d2009c084b55428a19f519af0bb03"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNTIwNTA1", "url": "https://github.com/camunda-cloud/zeebe/pull/4834#pullrequestreview-441520505", "createdAt": "2020-07-02T09:45:18Z", "commit": {"oid": "198faaacf04d2009c084b55428a19f519af0bb03"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2656, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}