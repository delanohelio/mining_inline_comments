{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NjY1NTEx", "number": 4008, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjoxMDozN1rODmjnPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjoxMDozN1rODmjnPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzU1OTY3OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/util/EngineRule.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjoxMDozN1rOF0Cghg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNzowNDo1MVrOF0DVTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMTM2Ng==", "bodyText": "Here you create now an executor for each handler? What if we create one for all? So outside of the loop?", "url": "https://github.com/camunda-cloud/zeebe/pull/4008#discussion_r390111366", "createdAt": "2020-03-10T06:10:37Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/util/EngineRule.java", "diffHunk": "@@ -155,6 +159,13 @@ private void startProcessors() {\n                           (key, partition) -> {},\n                           jobsAvailableCallback)\n                       .withListener(new ProcessingExporterTransistor()));\n+\n+          // sequenialize the commands to avoid concurrency\n+          final var subscriptionHandlerExecutor = Executors.newSingleThreadExecutor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61e2920a2e8868ef5fa770909ddae604acbe67be"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMjY5OA==", "bodyText": "It would be possible too. The handlers may block each other a bit. But I guess that it is not a big difference in your test setup.", "url": "https://github.com/camunda-cloud/zeebe/pull/4008#discussion_r390112698", "createdAt": "2020-03-10T06:16:01Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/util/EngineRule.java", "diffHunk": "@@ -155,6 +159,13 @@ private void startProcessors() {\n                           (key, partition) -> {},\n                           jobsAvailableCallback)\n                       .withListener(new ProcessingExporterTransistor()));\n+\n+          // sequenialize the commands to avoid concurrency\n+          final var subscriptionHandlerExecutor = Executors.newSingleThreadExecutor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMTM2Ng=="}, "originalCommit": {"oid": "61e2920a2e8868ef5fa770909ddae604acbe67be"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEyNDg3OA==", "bodyText": "@Zelldon, I applied your suggestion and use only one thread pool for all subscription handler.", "url": "https://github.com/camunda-cloud/zeebe/pull/4008#discussion_r390124878", "createdAt": "2020-03-10T07:04:51Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/util/EngineRule.java", "diffHunk": "@@ -155,6 +159,13 @@ private void startProcessors() {\n                           (key, partition) -> {},\n                           jobsAvailableCallback)\n                       .withListener(new ProcessingExporterTransistor()));\n+\n+          // sequenialize the commands to avoid concurrency\n+          final var subscriptionHandlerExecutor = Executors.newSingleThreadExecutor();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMTM2Ng=="}, "originalCommit": {"oid": "61e2920a2e8868ef5fa770909ddae604acbe67be"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4896, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}