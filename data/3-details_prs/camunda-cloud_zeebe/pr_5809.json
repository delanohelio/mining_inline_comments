{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MDcyNTk0", "number": 5809, "title": "chore(broker): persists streamprocessor pause state", "bodyText": "Description\nPersists paused state of streamprocessor by creating a file. StreamProcessor should be paused if this file exists on restart.\nRelated issues\ncloses #5770\nDefinition of Done\nNot all items need to be done depending on the issue and the pull request.\nCode changes:\n\n The changes are backwards compatibility with previous versions\n If it fixes a bug then PRs are created to backport the fix to the last two minor versions\n\nTesting:\n\n There are unit/integration tests that verify all acceptance criterias of the issue\n New tests are written to ensure backwards compatibility with further versions\n The behavior is tested manually\n The impact of the changes is verified by a benchmark\n\nDocumentation:\n\n The documentation is updated (e.g. BPMN reference, configuration, examples, get-started guides, etc.)\n New content is added to the release announcement", "createdAt": "2020-11-11T09:34:37Z", "url": "https://github.com/camunda-cloud/zeebe/pull/5809", "merged": true, "mergeCommit": {"oid": "a2163668e7e362f7495116a0ed9c3f61532e7218"}, "closed": true, "closedAt": "2020-11-18T08:21:06Z", "author": {"login": "deepthidevaki"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbuMStgBqjM5ODczODU1NDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddorBbABqjQwMDkxMDMxNDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "03285dc4a1b853d2aa7dc353014c352e3dfd12f5", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/03285dc4a1b853d2aa7dc353014c352e3dfd12f5", "committedDate": "2020-11-11T09:24:04Z", "message": "chore(broker): persists streamprocessor pause state"}, "afterCommit": {"oid": "3d1dac93fc379b37d9415fa9247689c43b352c3f", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/3d1dac93fc379b37d9415fa9247689c43b352c3f", "committedDate": "2020-11-12T08:21:47Z", "message": "chore(broker): persists streamprocessor pause state"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5OTUwMTc2", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#pullrequestreview-529950176", "createdAt": "2020-11-13T10:33:01Z", "commit": {"oid": "3d1dac93fc379b37d9415fa9247689c43b352c3f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDozMzowMVrOHypF6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxMDo1MToxMlrOHyprmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NDEwNA==", "bodyText": "ioe?", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522864104", "createdAt": "2020-11-13T10:33:01Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -332,11 +332,17 @@ public void onDiskSpaceAvailable() {\n     final CompletableActorFuture<Void> completed = new CompletableActorFuture<>();\n     actor.call(\n         () -> {\n-          context.setProcessingPaused(true);\n-          if (context.getStreamProcessor() != null) {\n-            context.getStreamProcessor().pauseProcessing().onComplete(completed);\n-          } else {\n-            completed.complete(null);\n+          try {\n+            context.setProcessingPaused(true);\n+\n+            if (context.getStreamProcessor() != null && !context.shouldProcess()) {\n+              context.getStreamProcessor().pauseProcessing().onComplete(completed);\n+            } else {\n+              completed.complete(null);\n+            }\n+          } catch (final IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d1dac93fc379b37d9415fa9247689c43b352c3f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NDIzNw==", "bodyText": "ioe?", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522864237", "createdAt": "2020-11-13T10:33:18Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -345,9 +351,13 @@ public void onDiskSpaceAvailable() {\n   public void resumeProcessing() {\n     actor.call(\n         () -> {\n-          context.setProcessingPaused(false);\n-          if (context.getStreamProcessor() != null && context.shouldProcess()) {\n-            context.getStreamProcessor().resumeProcessing();\n+          try {\n+            context.setProcessingPaused(false);\n+            if (context.getStreamProcessor() != null && context.shouldProcess()) {\n+              context.getStreamProcessor().resumeProcessing();\n+            }\n+          } catch (final IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d1dac93fc379b37d9415fa9247689c43b352c3f"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NjY4Nw==", "bodyText": "what is this \ud83d\udc40", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522866687", "createdAt": "2020-11-13T10:38:03Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionProcessingState.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import io.atomix.raft.partition.RaftPartition;\n+import io.zeebe.broker.Loggers;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import org.slf4j.Logger;\n+\n+public class PartitionProcessingState {\n+\n+  public static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+  private static final String PERSISTED_PAUSE_STATE_FILENAME = \".paused\";\n+  private boolean isProcessingPaused;\n+  private final RaftPartition raftPartition;\n+  private boolean diskSpaceAvailable;\n+\n+  public PartitionProcessingState(final RaftPartition raftPartition) {\n+    this.raftPartition = raftPartition;\n+    initProcessingStatus();\n+  }\n+\n+  public boolean isDiskSpaceAvailable() {\n+    return diskSpaceAvailable;\n+  }\n+\n+  public void setDiskSpaceAvailable(final boolean diskSpaceAvailable) {\n+    this.diskSpaceAvailable = diskSpaceAvailable;\n+  }\n+\n+  public boolean isProcessingPaused() {\n+    return isProcessingPaused;\n+  }\n+\n+  @SuppressWarnings({\"squid:S899\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d1dac93fc379b37d9415fa9247689c43b352c3f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NjgyMw==", "bodyText": "why we have this twice?", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522866823", "createdAt": "2020-11-13T10:38:18Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionProcessingState.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import io.atomix.raft.partition.RaftPartition;\n+import io.zeebe.broker.Loggers;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import org.slf4j.Logger;\n+\n+public class PartitionProcessingState {\n+\n+  public static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+  private static final String PERSISTED_PAUSE_STATE_FILENAME = \".paused\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d1dac93fc379b37d9415fa9247689c43b352c3f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NzI5Mw==", "bodyText": "Would like to have two methods here. One is pause processing which does the first branch and another for resume processing which does the second.", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522867293", "createdAt": "2020-11-13T10:39:20Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionProcessingState.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import io.atomix.raft.partition.RaftPartition;\n+import io.zeebe.broker.Loggers;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import org.slf4j.Logger;\n+\n+public class PartitionProcessingState {\n+\n+  public static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+  private static final String PERSISTED_PAUSE_STATE_FILENAME = \".paused\";\n+  private boolean isProcessingPaused;\n+  private final RaftPartition raftPartition;\n+  private boolean diskSpaceAvailable;\n+\n+  public PartitionProcessingState(final RaftPartition raftPartition) {\n+    this.raftPartition = raftPartition;\n+    initProcessingStatus();\n+  }\n+\n+  public boolean isDiskSpaceAvailable() {\n+    return diskSpaceAvailable;\n+  }\n+\n+  public void setDiskSpaceAvailable(final boolean diskSpaceAvailable) {\n+    this.diskSpaceAvailable = diskSpaceAvailable;\n+  }\n+\n+  public boolean isProcessingPaused() {\n+    return isProcessingPaused;\n+  }\n+\n+  @SuppressWarnings({\"squid:S899\"})\n+  public void setProcessingPaused(final boolean processingPaused) throws IOException {\n+    final File persistedPauseState = getPersistedPauseState();\n+    if (processingPaused) {\n+      persistedPauseState.createNewFile();\n+      if (persistedPauseState.exists()) {\n+        isProcessingPaused = processingPaused;\n+      }\n+    } else {\n+      Files.deleteIfExists(persistedPauseState.toPath());\n+      if (!persistedPauseState.exists()) {\n+        isProcessingPaused = processingPaused;\n+      }\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d1dac93fc379b37d9415fa9247689c43b352c3f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg3MDU2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final Logger LOG = Loggers.SYSTEM_LOGGER;", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522870561", "createdAt": "2020-11-13T10:45:25Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionProcessingState.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import io.atomix.raft.partition.RaftPartition;\n+import io.zeebe.broker.Loggers;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import org.slf4j.Logger;\n+\n+public class PartitionProcessingState {\n+\n+  public static final Logger LOG = Loggers.SYSTEM_LOGGER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d1dac93fc379b37d9415fa9247689c43b352c3f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg3MTY2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final boolean pauseProcessing = getPersistedPauseState().exists();\n          \n          \n            \n                isProcessingPaused = pauseProcessing;\n          \n          \n            \n                isProcessingPaused = getPersistedPauseState().exists();", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522871665", "createdAt": "2020-11-13T10:47:36Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionProcessingState.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.partitions.impl;\n+\n+import io.atomix.raft.partition.RaftPartition;\n+import io.zeebe.broker.Loggers;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import org.slf4j.Logger;\n+\n+public class PartitionProcessingState {\n+\n+  public static final Logger LOG = Loggers.SYSTEM_LOGGER;\n+  private static final String PERSISTED_PAUSE_STATE_FILENAME = \".paused\";\n+  private boolean isProcessingPaused;\n+  private final RaftPartition raftPartition;\n+  private boolean diskSpaceAvailable;\n+\n+  public PartitionProcessingState(final RaftPartition raftPartition) {\n+    this.raftPartition = raftPartition;\n+    initProcessingStatus();\n+  }\n+\n+  public boolean isDiskSpaceAvailable() {\n+    return diskSpaceAvailable;\n+  }\n+\n+  public void setDiskSpaceAvailable(final boolean diskSpaceAvailable) {\n+    this.diskSpaceAvailable = diskSpaceAvailable;\n+  }\n+\n+  public boolean isProcessingPaused() {\n+    return isProcessingPaused;\n+  }\n+\n+  @SuppressWarnings({\"squid:S899\"})\n+  public void setProcessingPaused(final boolean processingPaused) throws IOException {\n+    final File persistedPauseState = getPersistedPauseState();\n+    if (processingPaused) {\n+      persistedPauseState.createNewFile();\n+      if (persistedPauseState.exists()) {\n+        isProcessingPaused = processingPaused;\n+      }\n+    } else {\n+      Files.deleteIfExists(persistedPauseState.toPath());\n+      if (!persistedPauseState.exists()) {\n+        isProcessingPaused = processingPaused;\n+      }\n+    }\n+  }\n+\n+  private File getPersistedPauseState() {\n+    return raftPartition.dataDirectory().toPath().resolve(PERSISTED_PAUSE_STATE_FILENAME).toFile();\n+  }\n+\n+  private void initProcessingStatus() {\n+    final boolean pauseProcessing = getPersistedPauseState().exists();\n+    isProcessingPaused = pauseProcessing;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d1dac93fc379b37d9415fa9247689c43b352c3f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg3MjAwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String PERSISTED_PAUSE_STATE_FILENAME = \".paused\";", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522872006", "createdAt": "2020-11-13T10:48:16Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/PartitionContext.java", "diffHunk": "@@ -27,11 +28,13 @@\n import io.zeebe.util.sched.ActorControl;\n import io.zeebe.util.sched.ActorScheduler;\n import io.zeebe.util.sched.ScheduledTimer;\n+import java.io.IOException;\n import java.util.Collections;\n import java.util.List;\n \n public class PartitionContext {\n \n+  private static final String PERSISTED_PAUSE_STATE_FILENAME = \".paused\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d1dac93fc379b37d9415fa9247689c43b352c3f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg3Mjc2OA==", "bodyText": "What happens then ? Do we return an error?", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522872768", "createdAt": "2020-11-13T10:49:19Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -332,11 +332,17 @@ public void onDiskSpaceAvailable() {\n     final CompletableActorFuture<Void> completed = new CompletableActorFuture<>();\n     actor.call(\n         () -> {\n-          context.setProcessingPaused(true);\n-          if (context.getStreamProcessor() != null) {\n-            context.getStreamProcessor().pauseProcessing().onComplete(completed);\n-          } else {\n-            completed.complete(null);\n+          try {\n+            context.setProcessingPaused(true);\n+\n+            if (context.getStreamProcessor() != null && !context.shouldProcess()) {\n+              context.getStreamProcessor().pauseProcessing().onComplete(completed);\n+            } else {\n+              completed.complete(null);\n+            }\n+          } catch (final IOException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NDEwNA=="}, "originalCommit": {"oid": "3d1dac93fc379b37d9415fa9247689c43b352c3f"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg3MjgyMA==", "bodyText": "What happens then ? Do we return an error?", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522872820", "createdAt": "2020-11-13T10:49:22Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -345,9 +351,13 @@ public void onDiskSpaceAvailable() {\n   public void resumeProcessing() {\n     actor.call(\n         () -> {\n-          context.setProcessingPaused(false);\n-          if (context.getStreamProcessor() != null && context.shouldProcess()) {\n-            context.getStreamProcessor().resumeProcessing();\n+          try {\n+            context.setProcessingPaused(false);\n+            if (context.getStreamProcessor() != null && context.shouldProcess()) {\n+              context.getStreamProcessor().resumeProcessing();\n+            }\n+          } catch (final IOException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg2NDIzNw=="}, "originalCommit": {"oid": "3d1dac93fc379b37d9415fa9247689c43b352c3f"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjg3Mzc1Mg==", "bodyText": "How do we know that 1 is the leader?", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#discussion_r522873752", "createdAt": "2020-11-13T10:51:12Z", "author": {"login": "Zelldon"}, "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceClusterTest.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.it.system;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.atomix.raft.RaftServer.Role;\n+import io.zeebe.broker.Broker;\n+import io.zeebe.broker.it.clustering.ClusteringRule;\n+import io.zeebe.broker.it.util.GrpcClientRule;\n+import io.zeebe.broker.system.management.BrokerAdminService;\n+import io.zeebe.broker.system.management.PartitionStatus;\n+import io.zeebe.engine.processing.streamprocessor.StreamProcessor.Phase;\n+import java.time.Duration;\n+import org.awaitility.Awaitility;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.RuleChain;\n+import org.junit.rules.Timeout;\n+\n+public class BrokerAdminServiceClusterTest {\n+\n+  private final Timeout testTimeout = Timeout.seconds(60);\n+  private final ClusteringRule clusteringRule =\n+      new ClusteringRule(\n+          1,\n+          3,\n+          3,\n+          cfg -> {\n+            cfg.getData().setLogIndexDensity(1);\n+            cfg.getData().setSnapshotPeriod(Duration.ofMinutes(15));\n+          });\n+  private final GrpcClientRule clientRule = new GrpcClientRule(clusteringRule);\n+\n+  @Rule\n+  public RuleChain ruleChain =\n+      RuleChain.outerRule(testTimeout).around(clusteringRule).around(clientRule);\n+\n+  private BrokerAdminService leaderAdminService;\n+  private Broker leader;\n+\n+  @Before\n+  public void before() {\n+    leader = clusteringRule.getBroker(clusteringRule.getLeaderForPartition(1).getNodeId());\n+    leaderAdminService = leader.getBrokerAdminService();\n+  }\n+\n+  @Test\n+  public void shouldReportPartitionStatusOnFollowersAndLeader() {\n+    // given\n+    final var followers =\n+        clusteringRule.getOtherBrokerObjects(clusteringRule.getLeaderForPartition(1).getNodeId());\n+\n+    // when\n+    final var followerStatus =\n+        followers.stream()\n+            .map(Broker::getBrokerAdminService)\n+            .map(BrokerAdminService::getPartitionStatus)\n+            .map(status -> status.get(1));\n+\n+    final var leaderStatus = leaderAdminService.getPartitionStatus().get(1);\n+\n+    // then\n+    followerStatus.forEach(\n+        partitionStatus -> {\n+          assertThat(partitionStatus.getRole()).isEqualTo(Role.FOLLOWER);\n+          assertThat(partitionStatus.getProcessedPosition()).isNull();\n+          assertThat(partitionStatus.getSnapshotId()).isNull();\n+          assertThat(partitionStatus.getProcessedPositionInSnapshot()).isNull();\n+          assertThat(partitionStatus.getStreamProcessorPhase()).isNull();\n+        });\n+\n+    assertThat(leaderStatus.getRole()).isEqualTo(Role.LEADER);\n+    assertThat(leaderStatus.getProcessedPosition()).isEqualTo(-1);\n+    assertThat(leaderStatus.getSnapshotId()).isNull();\n+    assertThat(leaderStatus.getProcessedPositionInSnapshot()).isNull();\n+    assertThat(leaderStatus.getStreamProcessorPhase()).isEqualTo(Phase.PROCESSING);\n+  }\n+\n+  @Test\n+  public void shouldReportPartitionStatusWithSnapshotOnFollowers() {\n+    // given\n+    clientRule.createSingleJob(\"test\");\n+    leaderAdminService.takeSnapshot();\n+\n+    // when\n+    waitForSnapshotAtBroker(leaderAdminService);\n+\n+    // then\n+    final var leaderStatus = leaderAdminService.getPartitionStatus().get(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d1dac93fc379b37d9415fa9247689c43b352c3f"}, "originalPosition": 96}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "61d3d3f8ef7f9d21e356790673a512af55bd5523", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/61d3d3f8ef7f9d21e356790673a512af55bd5523", "committedDate": "2020-11-16T08:52:17Z", "message": "chore(broker): apply review comments"}, "afterCommit": {"oid": "c98a5619deaf8326a735fd39ded9842b4db31c05", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/c98a5619deaf8326a735fd39ded9842b4db31c05", "committedDate": "2020-11-16T08:58:27Z", "message": "chore(broker): apply review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c98a5619deaf8326a735fd39ded9842b4db31c05", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/c98a5619deaf8326a735fd39ded9842b4db31c05", "committedDate": "2020-11-16T08:58:27Z", "message": "chore(broker): apply review comments"}, "afterCommit": {"oid": "0e54283d6b1eb2955b21d5191db9f0d9d8fd5d2e", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/0e54283d6b1eb2955b21d5191db9f0d9d8fd5d2e", "committedDate": "2020-11-16T10:18:06Z", "message": "chore(broker): apply review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMTM4NjEx", "url": "https://github.com/camunda-cloud/zeebe/pull/5809#pullrequestreview-532138611", "createdAt": "2020-11-17T08:49:36Z", "commit": {"oid": "0e54283d6b1eb2955b21d5191db9f0d9d8fd5d2e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "308b0ea461f7a955ef0a53a0d716e314a0f8ec4b", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/308b0ea461f7a955ef0a53a0d716e314a0f8ec4b", "committedDate": "2020-11-18T07:04:00Z", "message": "chore(broker): persists streamprocessor pause state"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e54283d6b1eb2955b21d5191db9f0d9d8fd5d2e", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/0e54283d6b1eb2955b21d5191db9f0d9d8fd5d2e", "committedDate": "2020-11-16T10:18:06Z", "message": "chore(broker): apply review comments"}, "afterCommit": {"oid": "308b0ea461f7a955ef0a53a0d716e314a0f8ec4b", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/308b0ea461f7a955ef0a53a0d716e314a0f8ec4b", "committedDate": "2020-11-18T07:04:00Z", "message": "chore(broker): persists streamprocessor pause state"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2373, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}