{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NjgxNzM5", "number": 4009, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNTo0MzoxNFrODmjXPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMjoyOTowNFrODoTxfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzUxODY5OnYy", "diffSide": "RIGHT", "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStorageAppender.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNTo0MzoxNFrOF0CIlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDo1NDowNVrOF06mdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwNTIzOA==", "bodyText": "should we maybe complete  this future exceptionally?", "url": "https://github.com/camunda-cloud/zeebe/pull/4009#discussion_r390105238", "createdAt": "2020-03-10T05:43:14Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStorageAppender.java", "diffHunk": "@@ -130,6 +139,30 @@ protected void onActorStarting() {\n     actor.consume(writeBufferSubscription, this::onWriteBufferAvailable);\n   }\n \n+  @Override\n+  protected void onActorClosed() {\n+    closeFuture.complete(null);\n+  }\n+\n+  @Override\n+  public ActorFuture<Void> closeAsync() {\n+    if (actor.isClosed()) {\n+      return closeFuture;\n+    }\n+    super.closeAsync();\n+    return closeFuture;\n+  }\n+\n+  @Override\n+  protected void handleFailure(final Exception failure) {\n+    onFailure(failure);\n+  }\n+\n+  @Override\n+  public void onActorFailed() {\n+    closeFuture.complete(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0be716e3cd59e6d209f58fab4532e02b0f6e88b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAzMDM4OQ==", "bodyText": "Sorry, didn't notice this comment. Not sure if we should complete it exceptionally. Even if it is failed, it has closed and did all cleanup (if necessary) successfully, right?", "url": "https://github.com/camunda-cloud/zeebe/pull/4009#discussion_r391030389", "createdAt": "2020-03-11T14:54:05Z", "author": {"login": "deepthidevaki"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStorageAppender.java", "diffHunk": "@@ -130,6 +139,30 @@ protected void onActorStarting() {\n     actor.consume(writeBufferSubscription, this::onWriteBufferAvailable);\n   }\n \n+  @Override\n+  protected void onActorClosed() {\n+    closeFuture.complete(null);\n+  }\n+\n+  @Override\n+  public ActorFuture<Void> closeAsync() {\n+    if (actor.isClosed()) {\n+      return closeFuture;\n+    }\n+    super.closeAsync();\n+    return closeFuture;\n+  }\n+\n+  @Override\n+  protected void handleFailure(final Exception failure) {\n+    onFailure(failure);\n+  }\n+\n+  @Override\n+  public void onActorFailed() {\n+    closeFuture.complete(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwNTIzOA=="}, "originalCommit": {"oid": "f0be716e3cd59e6d209f58fab4532e02b0f6e88b"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzUyMjcwOnYy", "diffSide": "RIGHT", "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStreamImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNTo0NjowNFrOF0CK9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNTo0NjowNFrOF0CK9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwNTg0NQ==", "bodyText": "I have the feeling you have a different formating setting then we do \ud83e\udd14 It is really hard to see the diff when the methods are reordered \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/4009#discussion_r390105845", "createdAt": "2020-03-10T05:46:04Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStreamImpl.java", "diffHunk": "@@ -101,63 +104,47 @@ public String getLogName() {\n   }\n \n   @Override\n-  public String getName() {\n-    return actorName;\n-  }\n-\n-  @Override\n-  public void close() {\n-    closeAsync().join();\n+  public ActorFuture<Long> getCommitPositionAsync() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0be716e3cd59e6d209f58fab4532e02b0f6e88b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzUyODI3OnYy", "diffSide": "RIGHT", "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStreamImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNTo0OTozOFrOF0COJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjo0OTo0NFrOF0NVxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwNjY2Mg==", "bodyText": "Is it possible to recover? \ud83d\ude05 I mean the actor is closed right? Seems that the appender has not implement this method?", "url": "https://github.com/camunda-cloud/zeebe/pull/4009#discussion_r390106662", "createdAt": "2020-03-10T05:49:38Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStreamImpl.java", "diffHunk": "@@ -335,13 +339,38 @@ private int determineInitialPartitionId() {\n       final long lastPosition = logReader.seekToEnd();\n \n       // dispatcher needs to generate positions greater than the last position\n-      int partitionId = 0;\n+      int segmentPartitionId = 0;\n \n       if (lastPosition > 0) {\n-        partitionId = PositionUtil.partitionId(lastPosition);\n+        segmentPartitionId = PositionUtil.partitionId(lastPosition);\n       }\n \n-      return partitionId;\n+      return segmentPartitionId;\n+    }\n+  }\n+\n+  @Override\n+  public HealthStatus getHealthStatus() {\n+    return actor.isClosed() ? HealthStatus.UNHEALTHY : HealthStatus.HEALTHY;\n+  }\n+\n+  @Override\n+  public void addFailureListener(final FailureListener failureListener) {\n+    actor.run(() -> this.failureListener = failureListener);\n+  }\n+\n+  @Override\n+  public void onFailure() {\n+    if (failureListener != null) {\n+      failureListener.onFailure();\n+    }\n+    closeAsync();\n+  }\n+\n+  @Override\n+  public void onRecovered() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0be716e3cd59e6d209f58fab4532e02b0f6e88b"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI4ODgzNg==", "bodyText": "Appender cannot recover now. But if it can recover, it should notify LogStreamImpl.", "url": "https://github.com/camunda-cloud/zeebe/pull/4009#discussion_r390288836", "createdAt": "2020-03-10T12:49:44Z", "author": {"login": "deepthidevaki"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStreamImpl.java", "diffHunk": "@@ -335,13 +339,38 @@ private int determineInitialPartitionId() {\n       final long lastPosition = logReader.seekToEnd();\n \n       // dispatcher needs to generate positions greater than the last position\n-      int partitionId = 0;\n+      int segmentPartitionId = 0;\n \n       if (lastPosition > 0) {\n-        partitionId = PositionUtil.partitionId(lastPosition);\n+        segmentPartitionId = PositionUtil.partitionId(lastPosition);\n       }\n \n-      return partitionId;\n+      return segmentPartitionId;\n+    }\n+  }\n+\n+  @Override\n+  public HealthStatus getHealthStatus() {\n+    return actor.isClosed() ? HealthStatus.UNHEALTHY : HealthStatus.HEALTHY;\n+  }\n+\n+  @Override\n+  public void addFailureListener(final FailureListener failureListener) {\n+    actor.run(() -> this.failureListener = failureListener);\n+  }\n+\n+  @Override\n+  public void onFailure() {\n+    if (failureListener != null) {\n+      failureListener.onFailure();\n+    }\n+    closeAsync();\n+  }\n+\n+  @Override\n+  public void onRecovered() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwNjY2Mg=="}, "originalCommit": {"oid": "f0be716e3cd59e6d209f58fab4532e02b0f6e88b"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzU0MTY4OnYy", "diffSide": "RIGHT", "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStorageAppender.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNTo1OTowM1rOF0CWJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjo1ODowNlrOF0NnUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwODcxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private void onFailure(final Throwable error) {\n          \n          \n            \n              private void onFailure(final Exception exception) {", "url": "https://github.com/camunda-cloud/zeebe/pull/4009#discussion_r390108711", "createdAt": "2020-03-10T05:59:03Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStorageAppender.java", "diffHunk": "@@ -152,6 +185,24 @@ private Positions readPositions(final ByteBuffer buffer) {\n     return positions;\n   }\n \n+  @Override\n+  public HealthStatus getHealthStatus() {\n+    return actor.isClosed() ? HealthStatus.UNHEALTHY : HealthStatus.HEALTHY;\n+  }\n+\n+  @Override\n+  public void addFailureListener(final FailureListener failureListener) {\n+    actor.run(() -> this.failureListener = failureListener);\n+  }\n+\n+  private void onFailure(final Throwable error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0be716e3cd59e6d209f58fab4532e02b0f6e88b"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI5MzMyOQ==", "bodyText": "AppendListener:onWriteError also calls this method and  passes  a Throwable. So this has to be Throwable, I guess? Or wrap it into an exception in the listener.", "url": "https://github.com/camunda-cloud/zeebe/pull/4009#discussion_r390293329", "createdAt": "2020-03-10T12:58:06Z", "author": {"login": "deepthidevaki"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStorageAppender.java", "diffHunk": "@@ -152,6 +185,24 @@ private Positions readPositions(final ByteBuffer buffer) {\n     return positions;\n   }\n \n+  @Override\n+  public HealthStatus getHealthStatus() {\n+    return actor.isClosed() ? HealthStatus.UNHEALTHY : HealthStatus.HEALTHY;\n+  }\n+\n+  @Override\n+  public void addFailureListener(final FailureListener failureListener) {\n+    actor.run(() -> this.failureListener = failureListener);\n+  }\n+\n+  private void onFailure(final Throwable error) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwODcxMQ=="}, "originalCommit": {"oid": "f0be716e3cd59e6d209f58fab4532e02b0f6e88b"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNzU1Mjc1OnYy", "diffSide": "RIGHT", "path": "util/src/main/java/io/zeebe/util/sched/ActorTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjowNjoxNlrOF0Ccjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjo1MjoyN1rOF0Nbdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMDM1MQ==", "bodyText": "So the actor can decide whether he wants to fail ?", "url": "https://github.com/camunda-cloud/zeebe/pull/4009#discussion_r390110351", "createdAt": "2020-03-10T06:06:16Z", "author": {"login": "Zelldon"}, "path": "util/src/main/java/io/zeebe/util/sched/ActorTask.java", "diffHunk": "@@ -294,9 +294,7 @@ public void onFailure(final Throwable failure) {\n         break;\n \n       default:\n-        Loggers.ACTOR_LOGGER.error(\n-            \"Actor failed in phase '{}'. Continue with next job.\", lifecyclePhase, failure);\n-\n+        actor.handleFailure(failure);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0be716e3cd59e6d209f58fab4532e02b0f6e88b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI5MDI5NA==", "bodyText": "Yes. Previous behavior is that actor never fails and continue with next job. So I kept it as the default behavior. The actors (mostly the ones that allows health check) can then decide to fail.", "url": "https://github.com/camunda-cloud/zeebe/pull/4009#discussion_r390290294", "createdAt": "2020-03-10T12:52:27Z", "author": {"login": "deepthidevaki"}, "path": "util/src/main/java/io/zeebe/util/sched/ActorTask.java", "diffHunk": "@@ -294,9 +294,7 @@ public void onFailure(final Throwable failure) {\n         break;\n \n       default:\n-        Loggers.ACTOR_LOGGER.error(\n-            \"Actor failed in phase '{}'. Continue with next job.\", lifecyclePhase, failure);\n-\n+        actor.handleFailure(failure);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMDM1MQ=="}, "originalCommit": {"oid": "f0be716e3cd59e6d209f58fab4532e02b0f6e88b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTkzNTk4OnYy", "diffSide": "RIGHT", "path": "logstreams/src/test/java/io/zeebe/logstreams/impl/log/LogStorageAppenderHealthTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMjoyOTowNFrOF2xx7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMjoyOTowNFrOF2xx7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk4MzAyMw==", "bodyText": "Could we also check/test the happy path please", "url": "https://github.com/camunda-cloud/zeebe/pull/4009#discussion_r392983023", "createdAt": "2020-03-16T12:29:04Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/test/java/io/zeebe/logstreams/impl/log/LogStorageAppenderHealthTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.logstreams.impl.log;\n+\n+import static io.zeebe.test.util.TestUtil.waitUntil;\n+import static io.zeebe.util.buffer.BufferUtil.wrapString;\n+\n+import io.zeebe.dispatcher.Dispatcher;\n+import io.zeebe.dispatcher.Dispatchers;\n+import io.zeebe.logstreams.spi.LogStorage;\n+import io.zeebe.logstreams.spi.LogStorageReader;\n+import io.zeebe.util.ByteValue;\n+import io.zeebe.util.health.HealthStatus;\n+import io.zeebe.util.sched.testing.ActorSchedulerRule;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.function.BiConsumer;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public final class LogStorageAppenderHealthTest {\n+\n+  private static final int MAX_FRAGMENT_SIZE = 1024;\n+  private static final int PARTITION_ID = 0;\n+\n+  @Rule public final ActorSchedulerRule schedulerRule = new ActorSchedulerRule();\n+\n+  private Dispatcher dispatcher;\n+  private ControllableLogStorage failingLogStorage;\n+  private LogStorageAppender appender;\n+  private LogStreamWriterImpl writer;\n+\n+  @Before\n+  public void setUp() {\n+    failingLogStorage = new ControllableLogStorage();\n+\n+    dispatcher =\n+        Dispatchers.create(\"0\")\n+            .actorScheduler(schedulerRule.get())\n+            .bufferSize((int) ByteValue.ofMegabytes(100 * MAX_FRAGMENT_SIZE))\n+            .maxFragmentLength(MAX_FRAGMENT_SIZE)\n+            .initialPartitionId(0)\n+            .build();\n+    final var subscription = dispatcher.openSubscription(\"log\");\n+\n+    appender =\n+        new LogStorageAppender(\n+            \"appender\", PARTITION_ID, failingLogStorage, subscription, MAX_FRAGMENT_SIZE);\n+    writer = new LogStreamWriterImpl(PARTITION_ID, dispatcher);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    appender.close();\n+    dispatcher.close();\n+  }\n+\n+  @Test\n+  public void shouldFailActorWhenWriteFails() {\n+    // given\n+    failingLogStorage.onNextAppend(\n+        (pos, listener) -> listener.onWriteError(new RuntimeException(\"foo\")));\n+\n+    // when\n+    writer.value(wrapString(\"value\")).tryWrite();\n+    schedulerRule.submitActor(appender).join();\n+\n+    // then\n+    waitUntil(() -> appender.getHealthStatus() == HealthStatus.UNHEALTHY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cc4c8ab8d6151d94b1e3f52702d4c02d8634120"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4898, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}