{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNjgwOTIy", "number": 4716, "title": "feat(broker): add RocksDB metrics", "bodyText": "Description\n\nAdded RocksDB metrics\nNo Grafana dashboard yet\ndidn't have time to run the benchmarks for this PR\n\nRelated issues\ncloses #4606\nPull Request Checklist\n\n All commit messages match our commit message guidelines\n The submitting code follows our code style\n If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-06-12T13:30:36Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4716", "merged": true, "mergeCommit": {"oid": "f3a70e04096c917d4a0388aaa0f1484bbe4b8630"}, "closed": true, "closedAt": "2020-06-24T08:51:59Z", "author": {"login": "pihme"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsD3d5gFqTQzMjA4Njk2Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuU1ufgBqjM0NzYxNTAzOTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMDg2OTY2", "url": "https://github.com/camunda-cloud/zeebe/pull/4716#pullrequestreview-432086966", "createdAt": "2020-06-17T06:14:55Z", "commit": {"oid": "e5306645ec9aea95a0beb3bd9631a2ff3771d305"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjoxNDo1NVrOGk3CLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjoxODoyOFrOGk3HVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwMzU5OA==", "bodyText": "just out of curiosity is it not possible to do just class.getName()?", "url": "https://github.com/camunda-cloud/zeebe/pull/4716#discussion_r441303598", "createdAt": "2020-06-17T06:14:55Z", "author": {"login": "Zelldon"}, "path": "zb-db/src/main/java/io/zeebe/db/impl/rocksdb/ZeebeRocksDBMetricExporter.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.db.impl.rocksdb;\n+\n+import io.prometheus.client.Gauge;\n+import io.zeebe.db.ZeebeDb;\n+import io.zeebe.util.ZbLogger;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+\n+/**\n+ * This class exports metrics for a RocksDB instance to Prometheus.\n+ *\n+ * @param <ColumnFamilyType>\n+ */\n+public final class ZeebeRocksDBMetricExporter<ColumnFamilyType extends Enum<ColumnFamilyType>> {\n+\n+  private static final Logger LOG =\n+      new ZbLogger(\"io.zeebe.db.impl.rocksdb.\" + ZeebeRocksDBMetricExporter.class.getSimpleName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5306645ec9aea95a0beb3bd9631a2ff3771d305"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwNDkxNg==", "bodyText": "do you think this is necessary? Or is this because dot is not allowed?", "url": "https://github.com/camunda-cloud/zeebe/pull/4716#discussion_r441304916", "createdAt": "2020-06-17T06:18:28Z", "author": {"login": "Zelldon"}, "path": "zb-db/src/main/java/io/zeebe/db/impl/rocksdb/ZeebeRocksDBMetricExporter.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.db.impl.rocksdb;\n+\n+import io.prometheus.client.Gauge;\n+import io.zeebe.db.ZeebeDb;\n+import io.zeebe.util.ZbLogger;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+\n+/**\n+ * This class exports metrics for a RocksDB instance to Prometheus.\n+ *\n+ * @param <ColumnFamilyType>\n+ */\n+public final class ZeebeRocksDBMetricExporter<ColumnFamilyType extends Enum<ColumnFamilyType>> {\n+\n+  private static final Logger LOG =\n+      new ZbLogger(\"io.zeebe.db.impl.rocksdb.\" + ZeebeRocksDBMetricExporter.class.getSimpleName());\n+\n+  private static final String PARTITION = \"partition\";\n+  private static final String COLUMN_FAMILY_NAME = \"columnFamilyName\";\n+  private static final String PROPERTY_NAME = \"propertyName\";\n+  private static final String ZEEBE_NAMESPACE = \"zeebe\";\n+\n+  private static final String MEMORY_METRICS_HELP =\n+      \"Everything which might be related to current memory consumption of RocksDB per column family and partition\";\n+  private static final String MEMORY_METRICS_PREFIX = \"rocksdb_memory\";\n+  private static final RocksDBMetric[] MEMORY_METRICS = {\n+    new RocksDBMetric(\n+        \"rocksdb.cur-size-all-mem-tables\", MEMORY_METRICS_PREFIX, MEMORY_METRICS_HELP),\n+    new RocksDBMetric(\n+        \"rocksdb.cur-size-active-mem-table\", MEMORY_METRICS_PREFIX, MEMORY_METRICS_HELP),\n+    new RocksDBMetric(\"rocksdb.size-all-mem-tables\", MEMORY_METRICS_PREFIX, MEMORY_METRICS_HELP),\n+    new RocksDBMetric(\"rocksdb.block-cache-usage\", MEMORY_METRICS_PREFIX, MEMORY_METRICS_HELP),\n+    new RocksDBMetric(\"rocksdb.block-cache-capacity\", MEMORY_METRICS_PREFIX, MEMORY_METRICS_HELP),\n+    new RocksDBMetric(\n+        \"rocksdb.block-cache-pinned-usage\", MEMORY_METRICS_PREFIX, MEMORY_METRICS_HELP),\n+    new RocksDBMetric(\n+        \"rocksdb.estimate-table-readers-mem\", MEMORY_METRICS_PREFIX, MEMORY_METRICS_HELP),\n+  };\n+\n+  private static final String SST_METRICS_HELP =\n+      \"Everything which is related to SST files in RocksDB per column family and partition\";\n+  private static final String SST_METRICS_PREFIX = \"rocksdb_sst\";\n+  private static final RocksDBMetric[] SST_METRICS = {\n+    new RocksDBMetric(\"rocksdb.total-sst-files-size\", SST_METRICS_PREFIX, SST_METRICS_HELP),\n+    new RocksDBMetric(\"rocksdb.live-sst-files-size\", SST_METRICS_PREFIX, SST_METRICS_HELP),\n+  };\n+\n+  private static final String LIVE_METRICS_HELP =\n+      \"Other estimated properties based on entries in RocksDb per column family and partition\";\n+  private static final String LIVE_METRICS_PREFIX = \"rocksdb_live\";\n+  private static final RocksDBMetric[] LIVE_METRICS = {\n+    new RocksDBMetric(\"rocksdb.num-entries-imm-mem-tables\", LIVE_METRICS_PREFIX, LIVE_METRICS_HELP),\n+    new RocksDBMetric(\"rocksdb.estimate-num-keys\", LIVE_METRICS_PREFIX, LIVE_METRICS_HELP),\n+    new RocksDBMetric(\"rocksdb.estimate-live-data-size\", LIVE_METRICS_PREFIX, LIVE_METRICS_HELP),\n+  };\n+\n+  private static final String WRITE_METRICS_HELP =\n+      \"Properties related to writes, flushes and compactions for RocksDb per column family and partition\";\n+  private static final String WRITE_METRICS_PREFIX = \"rocksdb_writes\";\n+\n+  private static final RocksDBMetric[] WRITE_METRICS = {\n+    new RocksDBMetric(\"rocksdb.is-write-stopped\", WRITE_METRICS_PREFIX, WRITE_METRICS_HELP),\n+    new RocksDBMetric(\n+        \"rocksdb.actual-delayed-write-rate\", WRITE_METRICS_PREFIX, WRITE_METRICS_HELP),\n+    new RocksDBMetric(\"rocksdb.mem-table-flush-pending\", WRITE_METRICS_PREFIX, WRITE_METRICS_HELP),\n+    new RocksDBMetric(\"rocksdb.num-running-flushes\", WRITE_METRICS_PREFIX, WRITE_METRICS_HELP),\n+    new RocksDBMetric(\"rocksdb.num-running-compactions\", WRITE_METRICS_PREFIX, WRITE_METRICS_HELP),\n+  };\n+\n+  private final String partition;\n+  private final ZeebeDb<ColumnFamilyType> database;\n+  private final Class<ColumnFamilyType> columnFamilyTypeClass;\n+\n+  public ZeebeRocksDBMetricExporter(\n+      final String partition,\n+      final ZeebeDb<ColumnFamilyType> database,\n+      final Class<ColumnFamilyType> columnFamilyTypeClass) {\n+    this.partition = Objects.requireNonNull(partition);\n+    this.database = Objects.requireNonNull(database);\n+    this.columnFamilyTypeClass = Objects.requireNonNull(columnFamilyTypeClass);\n+  }\n+\n+  public void exportMetrics() {\n+    final long startTime = System.currentTimeMillis();\n+    for (final ColumnFamilyType columnFamilyName : columnFamilyTypeClass.getEnumConstants()) {\n+\n+      exportMetrics(columnFamilyName, MEMORY_METRICS);\n+      exportMetrics(columnFamilyName, LIVE_METRICS);\n+      exportMetrics(columnFamilyName, SST_METRICS);\n+      exportMetrics(columnFamilyName, WRITE_METRICS);\n+    }\n+\n+    final long elapsedTime = System.currentTimeMillis() - startTime;\n+    LOG.trace(\"Exporting RocksDBMetrics took + \" + elapsedTime + \" ms\");\n+  }\n+\n+  private void exportMetrics(\n+      final ColumnFamilyType columnFamilyName, final RocksDBMetric[] metrics) {\n+    for (final RocksDBMetric metric : metrics) {\n+      try {\n+        database\n+            .getProperty(columnFamilyName, metric.getPropertyName())\n+            .map(Double::parseDouble)\n+            .ifPresent(value -> metric.exportValue(partition, columnFamilyName, value));\n+      } catch (Throwable t) {\n+        LOG.debug(t.getMessage(), t);\n+      }\n+    }\n+  }\n+\n+  private static final class RocksDBMetric {\n+\n+    private final String propertyName;\n+    private final Gauge gauge;\n+\n+    private RocksDBMetric(String propertyName, String namePrefix, String help) {\n+      this.propertyName = Objects.requireNonNull(propertyName);\n+\n+      gauge =\n+          Gauge.build()\n+              .namespace(ZEEBE_NAMESPACE)\n+              .name(namePrefix + gaugeSuffix())\n+              .help(help)\n+              .labelNames(PARTITION, COLUMN_FAMILY_NAME)\n+              .register();\n+    }\n+\n+    private String gaugeSuffix() {\n+      final String suffix =\n+          \"_\" + propertyName.substring(propertyName.indexOf(\".\") + 1); // cut off \"rocksdb.\" prefix", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5306645ec9aea95a0beb3bd9631a2ff3771d305"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MDQxNDI2", "url": "https://github.com/camunda-cloud/zeebe/pull/4716#pullrequestreview-436041426", "createdAt": "2020-06-23T18:19:49Z", "commit": {"oid": "4e434cd22f62d94933156c7e32ea865e337ffefd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "077b32b08d80670fad7c22ffcfda6475510b72bb", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/077b32b08d80670fad7c22ffcfda6475510b72bb", "committedDate": "2020-06-24T07:19:29Z", "message": "feat(broker): add RocksDB metrics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e434cd22f62d94933156c7e32ea865e337ffefd", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/4e434cd22f62d94933156c7e32ea865e337ffefd", "committedDate": "2020-06-23T14:59:27Z", "message": "chore(broker): incoprorate review comments"}, "afterCommit": {"oid": "077b32b08d80670fad7c22ffcfda6475510b72bb", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/077b32b08d80670fad7c22ffcfda6475510b72bb", "committedDate": "2020-06-24T07:19:29Z", "message": "feat(broker): add RocksDB metrics"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2766, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}