{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NDgxNzk5", "number": 4767, "title": "chore(engine): migrate event sub-process processor", "bodyText": "Description\n\ntrigger an event sub-process using the event subscription behavior\nremove unused code\n\nRelated issues\ncloses #4559\nPull Request Checklist\n\n All commit messages match our commit message guidelines\n The submitting code follows our code style\n If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-06-18T13:41:21Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4767", "merged": true, "mergeCommit": {"oid": "425822b13224c0034caa854f5f231a49a536d75b"}, "closed": true, "closedAt": "2020-06-22T12:37:19Z", "author": {"login": "saig0"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcs0MxlAFqTQzNDEzMTEzMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABctvySCABqjM0NjgwNTA5NTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MTMxMTMw", "url": "https://github.com/camunda-cloud/zeebe/pull/4767#pullrequestreview-434131130", "createdAt": "2020-06-19T14:41:17Z", "commit": {"oid": "29c6d4c876d6351475d07996b0e6717d2f75c822"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDo0MToxN1rOGmXPmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDo0NzoyNFrOGmXcSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg3OTg5Nw==", "bodyText": "can this still be null?", "url": "https://github.com/camunda-cloud/zeebe/pull/4767#discussion_r442879897", "createdAt": "2020-06-19T14:41:17Z", "author": {"login": "korthout"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/container/SubProcessProcessor.java", "diffHunk": "@@ -57,13 +57,27 @@ public void onActivating(\n   public void onActivated(\n       final ExecutableFlowElementContainer element, final BpmnElementContext context) {\n \n-    final var noneStartEvent = element.getNoneStartEvent();\n-    if (noneStartEvent == null) {\n-      throw new BpmnProcessingException(\n-          context, \"Expected to activate the none start event of the sub-process but not found.\");\n-    }\n+    if (element.hasNoneStartEvent()) {\n+      // embedded sub-process is activated\n+      final var noneStartEvent = element.getNoneStartEvent();\n+      if (noneStartEvent == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c6d4c876d6351475d07996b0e6717d2f75c822"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4MjUxNQ==", "bodyText": "I like this change \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/4767#discussion_r442882515", "createdAt": "2020-06-19T14:46:15Z", "author": {"login": "korthout"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnStateTransitionBehavior.java", "diffHunk": "@@ -206,6 +208,8 @@ public void terminateChildInstances(final BpmnElementContext context) {\n       }\n       stateBehavior.updateElementInstance(elementInstance);\n     }\n+\n+    return activeChildInstances == 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c6d4c876d6351475d07996b0e6717d2f75c822"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4MzE0NA==", "bodyText": "The lambda above is very large, can we find a way to make this a little cleaner? Perhaps extract the body of the lambda to a private method or so?", "url": "https://github.com/camunda-cloud/zeebe/pull/4767#discussion_r442883144", "createdAt": "2020-06-19T14:47:24Z", "author": {"login": "korthout"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnEventSubscriptionBehavior.java", "diffHunk": "@@ -380,6 +381,56 @@ public void unsubscribeFromEvents(final BpmnElementContext context) {\n         context.getElementInstanceKey(), context.toStepContext());\n   }\n \n+  public void triggerEventSubProcess(\n+      final ExecutableStartEvent startEvent, final BpmnElementContext context) {\n+\n+    if (stateBehavior.getFlowScopeInstance(context).getInterruptingEventKey() > 0) {\n+      // the flow scope is already interrupted - discard this event\n+      return;\n+    }\n+\n+    final var flowScopeContext = stateBehavior.getFlowScopeContext(context);\n+\n+    triggerEvent(\n+        flowScopeContext,\n+        eventTrigger -> {\n+          final var eventSubProcessElementId = startEvent.getEventSubProcess();\n+          final var record =\n+              getEventRecord(context.getRecordValue(), eventTrigger, BpmnElementType.SUB_PROCESS)\n+                  .setElementId(eventSubProcessElementId);\n+\n+          final long eventElementInstanceKey = keyGenerator.nextKey();\n+          if (startEvent.interrupting()) {\n+\n+            unsubscribeFromEvents(flowScopeContext);\n+\n+            final var noActiveChildInstances =\n+                stateTransitionBehavior.terminateChildInstances(flowScopeContext);\n+            if (noActiveChildInstances) {\n+              // activate interrupting event sub-process\n+              publishActivatingEvent(context, eventElementInstanceKey, record);\n+\n+            } else {\n+              // wait until child instances are terminated\n+              deferActivatingEvent(flowScopeContext, eventElementInstanceKey, record);\n+            }\n+\n+            stateBehavior.updateFlowScopeInstance(\n+                context,\n+                flowScopeInstance -> {\n+                  flowScopeInstance.spawnToken();\n+                  flowScopeInstance.setInterruptingEventKey(eventElementInstanceKey);\n+                });\n+\n+          } else {\n+            // activate non-interrupting event sub-process\n+            publishActivatingEvent(context, eventElementInstanceKey, record);\n+          }\n+\n+          return eventElementInstanceKey;\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29c6d4c876d6351475d07996b0e6717d2f75c822"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0Nzc3NDUx", "url": "https://github.com/camunda-cloud/zeebe/pull/4767#pullrequestreview-434777451", "createdAt": "2020-06-22T09:59:50Z", "commit": {"oid": "342cfffa5a860002297db612f0a8544cc76cd8a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a5560879901d0a0073166ccf9e99375a61c6486", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/7a5560879901d0a0073166ccf9e99375a61c6486", "committedDate": "2020-06-22T12:12:56Z", "message": "chore(engine): migrate event sub-process processor\n\n* trigger an event sub-process using the event subscription behavior\n* remove unused code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "342cfffa5a860002297db612f0a8544cc76cd8a5", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/342cfffa5a860002297db612f0a8544cc76cd8a5", "committedDate": "2020-06-22T09:04:21Z", "message": "chore(engine): apply review hints"}, "afterCommit": {"oid": "7a5560879901d0a0073166ccf9e99375a61c6486", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/7a5560879901d0a0073166ccf9e99375a61c6486", "committedDate": "2020-06-22T12:12:56Z", "message": "chore(engine): migrate event sub-process processor\n\n* trigger an event sub-process using the event subscription behavior\n* remove unused code"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2789, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}