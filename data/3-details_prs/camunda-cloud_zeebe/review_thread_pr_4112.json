{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNDQwNjky", "number": 4112, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTozMToxMFrODqpeKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDozNDozNlrODqu1Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDQ2MjUxOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTozMToxMFrOF6helA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTozMToxMFrOF6helA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMDIyOA==", "bodyText": "I think I have a wrong cfg", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396910228", "createdAt": "2020-03-24T05:31:10Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "diffHunk": "@@ -141,6 +135,11 @@ protected void onActorCloseRequested() {\n     return future;\n   }\n \n+  private void scheduleSnapshotOnRate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDQ3NzQyOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTo0MDoyMVrOF6hntA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODowMTozN1rOF6kmSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMjU2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          LOG.debug(\"Skip taking snapshot due to no even having ever been processed\");\n          \n          \n            \n                          LOG.debug(\"We will skip taking this snapshot, because we haven't processed something yet.\");", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396912564", "createdAt": "2020-03-24T05:40:21Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "diffHunk": "@@ -156,6 +155,12 @@ private void prepareTakingSnapshot() {\n         futureLastProcessedPosition,\n         (lastProcessedPosition, error) -> {\n           if (error == null) {\n+            if (lastProcessedPosition == StreamProcessor.UNSET_POSITION) {\n+              LOG.debug(\"Skip taking snapshot due to no even having ever been processed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNTQ0Mw==", "bodyText": "I'm wondering why was this a problem with the -1 ? We will just wait until commit pos is higher?", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396915443", "createdAt": "2020-03-24T05:51:34Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "diffHunk": "@@ -156,6 +155,12 @@ private void prepareTakingSnapshot() {\n         futureLastProcessedPosition,\n         (lastProcessedPosition, error) -> {\n           if (error == null) {\n+            if (lastProcessedPosition == StreamProcessor.UNSET_POSITION) {\n+              LOG.debug(\"Skip taking snapshot due to no even having ever been processed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMjU2NA=="}, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1OTE4OQ==", "bodyText": "If we don't skip -1, then we will try to look up the entry at position -1, which doesn't exist, and before this was triggering an NPE (as it was returning a nullable type). Now it would be handled properly anyway, but it would write a weird warning that we couldn't find the position in the log. This seems nicer for the user.", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396959189", "createdAt": "2020-03-24T07:57:13Z", "author": {"login": "npepinpe"}, "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "diffHunk": "@@ -156,6 +155,12 @@ private void prepareTakingSnapshot() {\n         futureLastProcessedPosition,\n         (lastProcessedPosition, error) -> {\n           if (error == null) {\n+            if (lastProcessedPosition == StreamProcessor.UNSET_POSITION) {\n+              LOG.debug(\"Skip taking snapshot due to no even having ever been processed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMjU2NA=="}, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MDE3Nw==", "bodyText": "Was not aware of the lookup actually, seems to be new ?", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396960177", "createdAt": "2020-03-24T07:59:14Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "diffHunk": "@@ -156,6 +155,12 @@ private void prepareTakingSnapshot() {\n         futureLastProcessedPosition,\n         (lastProcessedPosition, error) -> {\n           if (error == null) {\n+            if (lastProcessedPosition == StreamProcessor.UNSET_POSITION) {\n+              LOG.debug(\"Skip taking snapshot due to no even having ever been processed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMjU2NA=="}, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MDg3MQ==", "bodyText": "Since we migrated to use a single snapshot store - Atomix snapshot metadata needs the entry index, so we have to look that up when we take a snapshot.", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396960871", "createdAt": "2020-03-24T08:00:40Z", "author": {"login": "npepinpe"}, "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "diffHunk": "@@ -156,6 +155,12 @@ private void prepareTakingSnapshot() {\n         futureLastProcessedPosition,\n         (lastProcessedPosition, error) -> {\n           if (error == null) {\n+            if (lastProcessedPosition == StreamProcessor.UNSET_POSITION) {\n+              LOG.debug(\"Skip taking snapshot due to no even having ever been processed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMjU2NA=="}, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2MTM1Mg==", "bodyText": "ok thanks", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396961352", "createdAt": "2020-03-24T08:01:37Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "diffHunk": "@@ -156,6 +155,12 @@ private void prepareTakingSnapshot() {\n         futureLastProcessedPosition,\n         (lastProcessedPosition, error) -> {\n           if (error == null) {\n+            if (lastProcessedPosition == StreamProcessor.UNSET_POSITION) {\n+              LOG.debug(\"Skip taking snapshot due to no even having ever been processed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMjU2NA=="}, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDQ3OTM1OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/ProcessingStateMachine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTo0MTozMVrOF6ho6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTo0MTozMVrOF6ho6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMjg3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private long errorRecordPosition = -1;\n          \n          \n            \n              private long errorRecordPosition = StreamProcessor.UNSET_POSITION;", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396912872", "createdAt": "2020-03-24T05:41:31Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/processor/ProcessingStateMachine.java", "diffHunk": "@@ -126,9 +126,9 @@\n   private LoggedEvent currentEvent;\n   private TypedRecordProcessor<?> currentProcessor;\n   private ZeebeDbTransaction zeebeDbTransaction;\n-  private long writtenEventPosition = -1L;\n-  private long lastSuccessfulProcessedEventPosition = -1L;\n-  private long lastWrittenEventPosition = -1L;\n+  private long writtenEventPosition = StreamProcessor.UNSET_POSITION;\n+  private long lastSuccessfulProcessedEventPosition = StreamProcessor.UNSET_POSITION;\n+  private long lastWrittenEventPosition = StreamProcessor.UNSET_POSITION;\n   private boolean onErrorHandling;\n   private long errorRecordPosition = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDQ4ODMwOnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTo0Njo1MVrOF6huWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDowNToyN1rOF6pCWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNDI2NQ==", "bodyText": "This is no longer true, then please remove this test \ud83d\ude05 or rename it but I think we already have a similar test.", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396914265", "createdAt": "2020-03-24T05:46:51Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "diffHunk": "@@ -544,7 +545,7 @@ public void processRecord(\n   }\n \n   @Test\n-  public void shouldCreateSnapshotEvenWhenNoEventProcessed() throws Exception {\n+  public void shouldCreateSnapshotOnCloseEvenWhenNoEventProcessed() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyNDMzOQ==", "bodyText": "This tests that, on close, we will create a snapshot even if we did not process anything. This is still true? What the test has updated is that we have to have processed something at some point in history (so position is not -1), but that if this time we didn't process anything between open/close, we'll still create the snapshot.\nOr did I misunderstand what you mean?", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r397024339", "createdAt": "2020-03-24T09:50:13Z", "author": {"login": "npepinpe"}, "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "diffHunk": "@@ -544,7 +545,7 @@ public void processRecord(\n   }\n \n   @Test\n-  public void shouldCreateSnapshotEvenWhenNoEventProcessed() throws Exception {\n+  public void shouldCreateSnapshotOnCloseEvenWhenNoEventProcessed() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNDI2NQ=="}, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyODE2NA==", "bodyText": "Isnt that a contradiction ? \ud83d\ude05 You saying we will create a snapshot even if we did not process anything. In the next sentence you say What the test has updated is that we have to have processed something at some point in history (so position is not -1) \ud83d\ude05\n\nbut that if this time we didn't process anything between open/close, we'll still create the snapshot.\n\nThis is not what the test verifies, then I would expect two open and close cycles at least.", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r397028164", "createdAt": "2020-03-24T09:56:11Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "diffHunk": "@@ -544,7 +545,7 @@ public void processRecord(\n   }\n \n   @Test\n-  public void shouldCreateSnapshotEvenWhenNoEventProcessed() throws Exception {\n+  public void shouldCreateSnapshotOnCloseEvenWhenNoEventProcessed() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNDI2NQ=="}, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyOTU3Mg==", "bodyText": "What does the second open/close verify that the first doesn't? Let's say we didn't take snapshots on close if we hadn't processed anything since the last snapshot.\n\nProcess one event\nTake snapshot\nClose - no snapshot taken\n\nNow we verify that:\n\nOpen\nProcess event\nTake snapshot\nClose\nTake snapshot again\n\nWould a second open/close verify something more?\nAs for the name, any ideas? I'm not sure how to best phrase it without it being extremely long then \ud83d\ude05 shouldTakeSnapshotOnCloseEvenIfNothingProcessedSinceLastSnapshot?", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r397029572", "createdAt": "2020-03-24T09:58:16Z", "author": {"login": "npepinpe"}, "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "diffHunk": "@@ -544,7 +545,7 @@ public void processRecord(\n   }\n \n   @Test\n-  public void shouldCreateSnapshotEvenWhenNoEventProcessed() throws Exception {\n+  public void shouldCreateSnapshotOnCloseEvenWhenNoEventProcessed() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNDI2NQ=="}, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzNDA3Mw==", "bodyText": "Ok I think I misunderstood the test or what you want to verify.\nI think this what you added should be in the given section. This is your starting point. It is given that you did a snapshot, when you close the stream processor then you expect one more snapshot even if no processing was in between", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r397034073", "createdAt": "2020-03-24T10:05:27Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "diffHunk": "@@ -544,7 +545,7 @@ public void processRecord(\n   }\n \n   @Test\n-  public void shouldCreateSnapshotEvenWhenNoEventProcessed() throws Exception {\n+  public void shouldCreateSnapshotOnCloseEvenWhenNoEventProcessed() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNDI2NQ=="}, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDQ4OTcyOnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTo0Nzo0NFrOF6hvKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTo1MDoxOFrOF6hxmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNDQ3NQ==", "bodyText": "never ever? \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396914475", "createdAt": "2020-03-24T05:47:44Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "diffHunk": "@@ -590,6 +601,22 @@ public void shouldCreateSnapshotsEvenIfNoProcessorProcessEvent() {\n     assertThat(stateSnapshotController.getValidSnapshotsCount()).isEqualTo(1);\n   }\n \n+  @Test\n+  public void shouldNotCreateSnapshotIfNothingProcessedEver() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNTA5Nw==", "bodyText": "Would it be possible to verify that the stream processor is really closed? I think it make sense for this test to ensure that this haven't created a snapshot otherwise we have no guarantee.", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396915097", "createdAt": "2020-03-24T05:50:18Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "diffHunk": "@@ -590,6 +601,22 @@ public void shouldCreateSnapshotsEvenIfNoProcessorProcessEvent() {\n     assertThat(stateSnapshotController.getValidSnapshotsCount()).isEqualTo(1);\n   }\n \n+  @Test\n+  public void shouldNotCreateSnapshotIfNothingProcessedEver() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNDQ3NQ=="}, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDQ5NzM5OnYy", "diffSide": "RIGHT", "path": "logstreams/src/main/java/io/zeebe/logstreams/spi/SnapshotController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTo1Mjo0MFrOF6h0Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTo1MzowN1rOF6ojmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNTcyNw==", "bodyText": "I'm not a fan of link to impl in interfaces \ud83d\ude48", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396915727", "createdAt": "2020-03-24T05:52:40Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/spi/SnapshotController.java", "diffHunk": "@@ -11,23 +11,30 @@\n import io.zeebe.logstreams.state.Snapshot;\n import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Optional;\n import java.util.function.Consumer;\n \n public interface SnapshotController extends AutoCloseable {\n   /**\n    * Takes a snapshot based on the given position and immediately commits it.\n    *\n    * @param lowerBoundSnapshotPosition the lower bound snapshot position\n+   * @return a committed snapshot, or nothing if the operation failed\n+   * @see io.zeebe.logstreams.state.SnapshotStorage#commitSnapshot(Path)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyNjIwMQ==", "bodyText": "Isn't SnapshotStorage also an interface?", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r397026201", "createdAt": "2020-03-24T09:53:07Z", "author": {"login": "npepinpe"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/spi/SnapshotController.java", "diffHunk": "@@ -11,23 +11,30 @@\n import io.zeebe.logstreams.state.Snapshot;\n import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Optional;\n import java.util.function.Consumer;\n \n public interface SnapshotController extends AutoCloseable {\n   /**\n    * Takes a snapshot based on the given position and immediately commits it.\n    *\n    * @param lowerBoundSnapshotPosition the lower bound snapshot position\n+   * @return a committed snapshot, or nothing if the operation failed\n+   * @see io.zeebe.logstreams.state.SnapshotStorage#commitSnapshot(Path)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNTcyNw=="}, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDUwMDM2OnYy", "diffSide": "RIGHT", "path": "logstreams/src/main/java/io/zeebe/logstreams/state/FileSnapshotConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTo1NDoyOVrOF6h1_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTo1NDoyOVrOF6h1_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNjIyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final var optionalPath = storage.getPendingDirectoryFor(snapshotId);\n          \n          \n            \n                optionalPath.ifPresent(this::deletePendingSnapshot);\n          \n          \n            \n                storage.getPendingDirectoryFor(snapshotId).ifPresent(this::deletePendingSnapshot);", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396916220", "createdAt": "2020-03-24T05:54:29Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/state/FileSnapshotConsumer.java", "diffHunk": "@@ -34,12 +34,16 @@ public boolean consumeSnapshotChunk(final SnapshotChunk chunk) {\n \n   @Override\n   public boolean completeSnapshot(final String snapshotId) {\n-    return storage.commitSnapshot(storage.getPendingDirectoryFor(snapshotId)).isPresent();\n+    return storage.getPendingDirectoryFor(snapshotId).flatMap(storage::commitSnapshot).isPresent();\n   }\n \n   @Override\n   public void invalidateSnapshot(final String snapshotId) {\n-    final var pendingDirectory = storage.getPendingDirectoryFor(snapshotId);\n+    final var optionalPath = storage.getPendingDirectoryFor(snapshotId);\n+    optionalPath.ifPresent(this::deletePendingSnapshot);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDUwNDA0OnYy", "diffSide": "RIGHT", "path": "logstreams/src/main/java/io/zeebe/logstreams/state/SnapshotStorage.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTo1Njo1NVrOF6h4dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDoxNjoxOVrOF6pbwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNjg1NQ==", "bodyText": "This storage does an lookup now? \ud83d\udc40 because of the index usage?", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396916855", "createdAt": "2020-03-24T05:56:55Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/state/SnapshotStorage.java", "diffHunk": "@@ -24,18 +24,18 @@\n    * and therefore should be cached if it needs to be reused.\n    *\n    * @param snapshotPosition the position to use\n-   * @return a pending snapshot\n+   * @return a pending snapshot, or nothing if no position less than or equal was found in the log", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyNzA2Ng==", "bodyText": "Hehe, fair enough, that's implementation detail. I'll update it", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r397027066", "createdAt": "2020-03-24T09:54:28Z", "author": {"login": "npepinpe"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/state/SnapshotStorage.java", "diffHunk": "@@ -24,18 +24,18 @@\n    * and therefore should be cached if it needs to be reused.\n    *\n    * @param snapshotPosition the position to use\n-   * @return a pending snapshot\n+   * @return a pending snapshot, or nothing if no position less than or equal was found in the log", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNjg1NQ=="}, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzNzMwNA==", "bodyText": "Actually not sure how to word this without implementation details - but yes that's what it does. It looks up the correct index for the position to provide Atomix with the right snapshot metadata.", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r397037304", "createdAt": "2020-03-24T10:10:55Z", "author": {"login": "npepinpe"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/state/SnapshotStorage.java", "diffHunk": "@@ -24,18 +24,18 @@\n    * and therefore should be cached if it needs to be reused.\n    *\n    * @param snapshotPosition the position to use\n-   * @return a pending snapshot\n+   * @return a pending snapshot, or nothing if no position less than or equal was found in the log", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNjg1NQ=="}, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzOTQ4Mg==", "bodyText": "Ok was not sure when I read that how it works. Maybe just remove the log from it ? but you can also leave it as it is", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r397039482", "createdAt": "2020-03-24T10:14:27Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/state/SnapshotStorage.java", "diffHunk": "@@ -24,18 +24,18 @@\n    * and therefore should be cached if it needs to be reused.\n    *\n    * @param snapshotPosition the position to use\n-   * @return a pending snapshot\n+   * @return a pending snapshot, or nothing if no position less than or equal was found in the log", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNjg1NQ=="}, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0MDU3OA==", "bodyText": "Maybe if no snapshot metadata could be created from the given position? The impl will do the look up, but really the end result is that if we can't create the metadata for Atomix then we can't create the snapshot", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r397040578", "createdAt": "2020-03-24T10:16:19Z", "author": {"login": "npepinpe"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/state/SnapshotStorage.java", "diffHunk": "@@ -24,18 +24,18 @@\n    * and therefore should be cached if it needs to be reused.\n    *\n    * @param snapshotPosition the position to use\n-   * @return a pending snapshot\n+   * @return a pending snapshot, or nothing if no position less than or equal was found in the log", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNjg1NQ=="}, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDUxMDI0OnYy", "diffSide": "LEFT", "path": "logstreams/src/test/java/io/zeebe/logstreams/state/StateSnapshotControllerTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNjowMDozN1rOF6h8fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDowNDozMlrOF6pAOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNzg4NA==", "bodyText": "lol \ud83d\ude48", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396917884", "createdAt": "2020-03-24T06:00:37Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/test/java/io/zeebe/logstreams/state/StateSnapshotControllerTest.java", "diffHunk": "@@ -46,13 +46,12 @@ public void setup() throws IOException {\n   }\n \n   @Test\n-  public void shouldThrowExceptionOnTakeSnapshotIfClosed() {\n+  public void shouldNotTakeSnapshotIfDbIsClosed() {\n     // given\n \n     // then\n     assertThat(snapshotController.isDbOpened()).isFalse();\n-    assertThatThrownBy(() -> snapshotController.takeSnapshot(1))\n-        .isInstanceOf(NullPointerException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNzkyNg==", "bodyText": "really?", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396917926", "createdAt": "2020-03-24T06:00:46Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/test/java/io/zeebe/logstreams/state/StateSnapshotControllerTest.java", "diffHunk": "@@ -46,13 +46,12 @@ public void setup() throws IOException {\n   }\n \n   @Test\n-  public void shouldThrowExceptionOnTakeSnapshotIfClosed() {\n+  public void shouldNotTakeSnapshotIfDbIsClosed() {\n     // given\n \n     // then\n     assertThat(snapshotController.isDbOpened()).isFalse();\n-    assertThatThrownBy(() -> snapshotController.takeSnapshot(1))\n-        .isInstanceOf(NullPointerException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNzg4NA=="}, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAyNzE5Mg==", "bodyText": "\ud83e\udd37\u200d\u2642\ufe0f", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r397027192", "createdAt": "2020-03-24T09:54:40Z", "author": {"login": "npepinpe"}, "path": "logstreams/src/test/java/io/zeebe/logstreams/state/StateSnapshotControllerTest.java", "diffHunk": "@@ -46,13 +46,12 @@ public void setup() throws IOException {\n   }\n \n   @Test\n-  public void shouldThrowExceptionOnTakeSnapshotIfClosed() {\n+  public void shouldNotTakeSnapshotIfDbIsClosed() {\n     // given\n \n     // then\n     assertThat(snapshotController.isDbOpened()).isFalse();\n-    assertThatThrownBy(() -> snapshotController.takeSnapshot(1))\n-        .isInstanceOf(NullPointerException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNzg4NA=="}, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzMzUzMQ==", "bodyText": "100% my fault \ud83d\ude48", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r397033531", "createdAt": "2020-03-24T10:04:32Z", "author": {"login": "npepinpe"}, "path": "logstreams/src/test/java/io/zeebe/logstreams/state/StateSnapshotControllerTest.java", "diffHunk": "@@ -46,13 +46,12 @@ public void setup() throws IOException {\n   }\n \n   @Test\n-  public void shouldThrowExceptionOnTakeSnapshotIfClosed() {\n+  public void shouldNotTakeSnapshotIfDbIsClosed() {\n     // given\n \n     // then\n     assertThat(snapshotController.isDbOpened()).isFalse();\n-    assertThatThrownBy(() -> snapshotController.takeSnapshot(1))\n-        .isInstanceOf(NullPointerException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNzg4NA=="}, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTMyNTYzOnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDozMDoxNFrOF6p8eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDozMzoxMlrOF6qDOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0ODk1Mw==", "bodyText": "Take snapshot is only called on enforcing right? to be more impl independent we also just could use the waituntil snapshot count is 2", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r397048953", "createdAt": "2020-03-24T10:30:14Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "diffHunk": "@@ -545,32 +545,35 @@ public void processRecord(\n   }\n \n   @Test\n-  public void shouldCreateSnapshotOnCloseEvenWhenNoEventProcessed() throws Exception {\n+  public void shouldCreateSnapshotOnCloseEvenIfNothingProcessedSinceLastSnapshot()\n+      throws Exception {\n     // given\n-    final CountDownLatch recoveredLatch = new CountDownLatch(1);\n-    streamProcessorRule.startTypedStreamProcessor(\n-        (processors, context) ->\n-            processors.onEvent(\n-                ValueType.WORKFLOW_INSTANCE,\n-                WorkflowInstanceIntent.ELEMENT_ACTIVATING,\n-                new TypedRecordProcessor<UnifiedRecordValue>() {\n-                  @Override\n-                  public void onRecovered(final ReadonlyProcessingContext context) {\n-                    recoveredLatch.countDown();\n-                  }\n-                }));\n-\n-    // when\n+    final var recoveredLatch = new CountDownLatch(1);\n+    final var streamProcessor =\n+        streamProcessorRule.startTypedStreamProcessor(\n+            (processors, context) ->\n+                processors.onEvent(\n+                    ValueType.WORKFLOW_INSTANCE,\n+                    WorkflowInstanceIntent.ELEMENT_ACTIVATING,\n+                    new TypedRecordProcessor<UnifiedRecordValue>() {\n+                      @Override\n+                      public void onRecovered(final ReadonlyProcessingContext context) {\n+                        recoveredLatch.countDown();\n+                      }\n+                    }));\n     final var stateSnapshotController = streamProcessorRule.getStateSnapshotController();\n     recoveredLatch.await(5, TimeUnit.SECONDS);\n     final var position =\n         streamProcessorRule.writeWorkflowInstanceEvent(WorkflowInstanceIntent.ELEMENT_ACTIVATING);\n     TestUtil.waitUntil(() -> streamProcessorRule.events().count() >= 1);\n     streamProcessorRule.getClock().addTime(SNAPSHOT_INTERVAL);\n     TestUtil.waitUntil(() -> stateSnapshotController.getValidSnapshotsCount() == 1);\n+\n+    // when\n     streamProcessorRule.closeStreamProcessor();\n \n     // then\n+    assertThat(streamProcessor.isClosed()).isTrue();\n     final InOrder inOrder = Mockito.inOrder(stateSnapshotController);\n     inOrder.verify(stateSnapshotController, TIMEOUT.times(1)).openDb();\n     inOrder.verify(stateSnapshotController, TIMEOUT.times(1)).takeSnapshot(position);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5a69b791e5fba3ecf7702a0e14a8292177857aa"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1MDY4Mg==", "bodyText": "Good point - you're right, this relies on the implementation calling this particular method. And now we can get rid of the mock \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r397050682", "createdAt": "2020-03-24T10:33:12Z", "author": {"login": "npepinpe"}, "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "diffHunk": "@@ -545,32 +545,35 @@ public void processRecord(\n   }\n \n   @Test\n-  public void shouldCreateSnapshotOnCloseEvenWhenNoEventProcessed() throws Exception {\n+  public void shouldCreateSnapshotOnCloseEvenIfNothingProcessedSinceLastSnapshot()\n+      throws Exception {\n     // given\n-    final CountDownLatch recoveredLatch = new CountDownLatch(1);\n-    streamProcessorRule.startTypedStreamProcessor(\n-        (processors, context) ->\n-            processors.onEvent(\n-                ValueType.WORKFLOW_INSTANCE,\n-                WorkflowInstanceIntent.ELEMENT_ACTIVATING,\n-                new TypedRecordProcessor<UnifiedRecordValue>() {\n-                  @Override\n-                  public void onRecovered(final ReadonlyProcessingContext context) {\n-                    recoveredLatch.countDown();\n-                  }\n-                }));\n-\n-    // when\n+    final var recoveredLatch = new CountDownLatch(1);\n+    final var streamProcessor =\n+        streamProcessorRule.startTypedStreamProcessor(\n+            (processors, context) ->\n+                processors.onEvent(\n+                    ValueType.WORKFLOW_INSTANCE,\n+                    WorkflowInstanceIntent.ELEMENT_ACTIVATING,\n+                    new TypedRecordProcessor<UnifiedRecordValue>() {\n+                      @Override\n+                      public void onRecovered(final ReadonlyProcessingContext context) {\n+                        recoveredLatch.countDown();\n+                      }\n+                    }));\n     final var stateSnapshotController = streamProcessorRule.getStateSnapshotController();\n     recoveredLatch.await(5, TimeUnit.SECONDS);\n     final var position =\n         streamProcessorRule.writeWorkflowInstanceEvent(WorkflowInstanceIntent.ELEMENT_ACTIVATING);\n     TestUtil.waitUntil(() -> streamProcessorRule.events().count() >= 1);\n     streamProcessorRule.getClock().addTime(SNAPSHOT_INTERVAL);\n     TestUtil.waitUntil(() -> stateSnapshotController.getValidSnapshotsCount() == 1);\n+\n+    // when\n     streamProcessorRule.closeStreamProcessor();\n \n     // then\n+    assertThat(streamProcessor.isClosed()).isTrue();\n     final InOrder inOrder = Mockito.inOrder(stateSnapshotController);\n     inOrder.verify(stateSnapshotController, TIMEOUT.times(1)).openDb();\n     inOrder.verify(stateSnapshotController, TIMEOUT.times(1)).takeSnapshot(position);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0ODk1Mw=="}, "originalCommit": {"oid": "e5a69b791e5fba3ecf7702a0e14a8292177857aa"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTM0MDc1OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDozNDozNlrOF6qGbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDozNDozNlrOF6qGbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1MTUwMw==", "bodyText": "\ud83c\udf89", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r397051503", "createdAt": "2020-03-24T10:34:36Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "diffHunk": "@@ -574,9 +574,7 @@ public void onRecovered(final ReadonlyProcessingContext context) {\n \n     // then\n     assertThat(streamProcessor.isClosed()).isTrue();\n-    final InOrder inOrder = Mockito.inOrder(stateSnapshotController);\n-    inOrder.verify(stateSnapshotController, TIMEOUT.times(1)).openDb();\n-    inOrder.verify(stateSnapshotController, TIMEOUT.times(1)).takeSnapshot(position);\n+    TestUtil.waitUntil(() -> stateSnapshotController.getValidSnapshotsCount() == 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2518c3f191c95f2c03d41f73ab5a943e90559160"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4799, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}