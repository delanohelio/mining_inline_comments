{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMzQxODUx", "number": 4110, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTowNTo1NFrODqpPRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNTozNToyMlrODrEdjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDQyNDM4OnYy", "diffSide": "RIGHT", "path": "engine/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTowNTo1NFrOF6hHig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTowNTo1NFrOF6hHig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNDMzMA==", "bodyText": "No need to define the version in the /engine/pom.xml. All versions are defined in the /bom/pom.xml.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  <version>0.23.0-SNAPSHOT</version>", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r396904330", "createdAt": "2020-03-24T05:05:54Z", "author": {"login": "saig0"}, "path": "engine/pom.xml", "diffHunk": "@@ -59,6 +59,7 @@\n     <dependency>\n       <groupId>io.zeebe</groupId>\n       <artifactId>zeebe-msgpack-core</artifactId>\n+      <version>0.23.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f117b4ee8dd1cc1421a2129d9dce443e3071381b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDQ0NTczOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/transformer/ServiceTaskTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNToyMDozM1rOF6hUUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNToyMDozM1rOF6hUUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNzYwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final Expression correlationKeyExpression =\n          \n          \n            \n                    context.getExpressionLanguage().parseExpression(taskDefinition.getType());\n          \n          \n            \n            \n          \n          \n            \n                serviceTask.setType(correlationKeyExpression);\n          \n          \n            \n                final Expression jobTypeExpression =\n          \n          \n            \n                    context.getExpressionLanguage().parseExpression(taskDefinition.getType());\n          \n          \n            \n            \n          \n          \n            \n                serviceTask.setType(jobTypeExpression);", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r396907601", "createdAt": "2020-03-24T05:20:33Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/transformer/ServiceTaskTransformer.java", "diffHunk": "@@ -64,11 +65,16 @@ private void bindLifecycle(final ExecutableServiceTask serviceTask) {\n   }\n \n   private void transformTaskDefinition(\n-      final ServiceTask element, final ExecutableServiceTask serviceTask) {\n+      final ServiceTask element,\n+      final ExecutableServiceTask serviceTask,\n+      final TransformContext context) {\n     final ZeebeTaskDefinition taskDefinition =\n         element.getSingleExtensionElement(ZeebeTaskDefinition.class);\n \n-    serviceTask.setType(taskDefinition.getType());\n+    final Expression correlationKeyExpression =\n+        context.getExpressionLanguage().parseExpression(taskDefinition.getType());\n+\n+    serviceTask.setType(correlationKeyExpression);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f117b4ee8dd1cc1421a2129d9dce443e3071381b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDQ1NDY2OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/servicetask/ServiceTaskElementActivatedHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNToyNjowN1rOF6hZvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDoyNjoxMlrOF6pydQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwODk5MA==", "bodyText": "I personally prefer ifPresent().\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final Optional<DirectBuffer> optJobType =\n          \n          \n            \n                      expressionProcessor.evaluateStringExpression(serviceTask.getType(), context);\n          \n          \n            \n            \n          \n          \n            \n                  if (optJobType.isPresent()) {\n          \n          \n            \n                    populateJobFromTask(context, value, optJobType.get(), serviceTask);\n          \n          \n            \n                    context.getCommandWriter().appendNewCommand(JobIntent.CREATE, jobCommand);\n          \n          \n            \n                  }\n          \n          \n            \n                  expressionProcessor\n          \n          \n            \n                    .evaluateStringExpression(serviceTask.getType(), context)\n          \n          \n            \n                    .ifPresent(jobType -> {\n          \n          \n            \n                      populateJobFromTask(context, value, jobType, serviceTask);\n          \n          \n            \n                      context.getCommandWriter().appendNewCommand(JobIntent.CREATE, jobCommand);\n          \n          \n            \n                    });", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r396908990", "createdAt": "2020-03-24T05:26:07Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/servicetask/ServiceTaskElementActivatedHandler.java", "diffHunk": "@@ -36,8 +41,13 @@ protected boolean handleState(final BpmnStepContext<T> context) {\n       final WorkflowInstanceRecord value = context.getValue();\n       final ExecutableServiceTask serviceTask = context.getElement();\n \n-      populateJobFromTask(context, value, serviceTask);\n-      context.getCommandWriter().appendNewCommand(JobIntent.CREATE, jobCommand);\n+      final Optional<DirectBuffer> optJobType =\n+          expressionProcessor.evaluateStringExpression(serviceTask.getType(), context);\n+\n+      if (optJobType.isPresent()) {\n+        populateJobFromTask(context, value, optJobType.get(), serviceTask);\n+        context.getCommandWriter().appendNewCommand(JobIntent.CREATE, jobCommand);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f117b4ee8dd1cc1421a2129d9dce443e3071381b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAwMDE2Mw==", "bodyText": "I see what you mean. But soon there will be two expressions 'jobType' and 'retries'. Which looks even worse. If you have a good idea how to chain two optionals, I am all ears.", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r397000163", "createdAt": "2020-03-24T09:12:18Z", "author": {"login": "pihme"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/servicetask/ServiceTaskElementActivatedHandler.java", "diffHunk": "@@ -36,8 +41,13 @@ protected boolean handleState(final BpmnStepContext<T> context) {\n       final WorkflowInstanceRecord value = context.getValue();\n       final ExecutableServiceTask serviceTask = context.getElement();\n \n-      populateJobFromTask(context, value, serviceTask);\n-      context.getCommandWriter().appendNewCommand(JobIntent.CREATE, jobCommand);\n+      final Optional<DirectBuffer> optJobType =\n+          expressionProcessor.evaluateStringExpression(serviceTask.getType(), context);\n+\n+      if (optJobType.isPresent()) {\n+        populateJobFromTask(context, value, optJobType.get(), serviceTask);\n+        context.getCommandWriter().appendNewCommand(JobIntent.CREATE, jobCommand);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwODk5MA=="}, "originalCommit": {"oid": "f117b4ee8dd1cc1421a2129d9dce443e3071381b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0NjM4OQ==", "bodyText": "Alright. I get your point \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r397046389", "createdAt": "2020-03-24T10:26:12Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/servicetask/ServiceTaskElementActivatedHandler.java", "diffHunk": "@@ -36,8 +41,13 @@ protected boolean handleState(final BpmnStepContext<T> context) {\n       final WorkflowInstanceRecord value = context.getValue();\n       final ExecutableServiceTask serviceTask = context.getElement();\n \n-      populateJobFromTask(context, value, serviceTask);\n-      context.getCommandWriter().appendNewCommand(JobIntent.CREATE, jobCommand);\n+      final Optional<DirectBuffer> optJobType =\n+          expressionProcessor.evaluateStringExpression(serviceTask.getType(), context);\n+\n+      if (optJobType.isPresent()) {\n+        populateJobFromTask(context, value, optJobType.get(), serviceTask);\n+        context.getCommandWriter().appendNewCommand(JobIntent.CREATE, jobCommand);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwODk5MA=="}, "originalCommit": {"oid": "f117b4ee8dd1cc1421a2129d9dce443e3071381b"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDQ5OTg0OnYy", "diffSide": "RIGHT", "path": "expression-language/src/main/java/io/zeebe/el/impl/FeelExpressionLanguage.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTo1NDowNVrOF6h1mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjozOTo1M1rOF6uUfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNjEyMQ==", "bodyText": "It might be good to check that the expression is not empty. This should be checked on validation but just to make sure...", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r396916121", "createdAt": "2020-03-24T05:54:05Z", "author": {"login": "saig0"}, "path": "expression-language/src/main/java/io/zeebe/el/impl/FeelExpressionLanguage.java", "diffHunk": "@@ -47,22 +46,12 @@ public Expression parseExpression(final String expression) {\n     ensureNotNull(\"expression\", expression);\n \n     final var expressionMatcher = EXPRESSION_PATTERN.matcher(expression);\n-    final var valueMather = STATIC_VALUE_PATTERN.matcher(expression);\n \n     if (expressionMatcher.matches()) {\n       final var unpackedExpression = expressionMatcher.group(1);\n       return parseFeelExpression(unpackedExpression);\n-\n-    } else if (valueMather.matches()) {\n-      final var value = valueMather.group();\n-      return new StaticExpression(value);\n-\n     } else {\n-      final var failureMessage =\n-          String.format(\n-              \"Expected FEEL expression (e.g. '=variableName') or static value (e.g. 'jobType') but found '%s'\",\n-              expression);\n-      return new InvalidExpression(expression, failureMessage);\n+      return new StaticExpression(expression);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f117b4ee8dd1cc1421a2129d9dce443e3071381b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAwMDgwOA==", "bodyText": "What is wrong about an empty expression?", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r397000808", "createdAt": "2020-03-24T09:13:19Z", "author": {"login": "pihme"}, "path": "expression-language/src/main/java/io/zeebe/el/impl/FeelExpressionLanguage.java", "diffHunk": "@@ -47,22 +46,12 @@ public Expression parseExpression(final String expression) {\n     ensureNotNull(\"expression\", expression);\n \n     final var expressionMatcher = EXPRESSION_PATTERN.matcher(expression);\n-    final var valueMather = STATIC_VALUE_PATTERN.matcher(expression);\n \n     if (expressionMatcher.matches()) {\n       final var unpackedExpression = expressionMatcher.group(1);\n       return parseFeelExpression(unpackedExpression);\n-\n-    } else if (valueMather.matches()) {\n-      final var value = valueMather.group();\n-      return new StaticExpression(value);\n-\n     } else {\n-      final var failureMessage =\n-          String.format(\n-              \"Expected FEEL expression (e.g. '=variableName') or static value (e.g. 'jobType') but found '%s'\",\n-              expression);\n-      return new InvalidExpression(expression, failureMessage);\n+      return new StaticExpression(expression);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNjEyMQ=="}, "originalCommit": {"oid": "f117b4ee8dd1cc1421a2129d9dce443e3071381b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0ODkzMQ==", "bodyText": "Do you see a case where an empty expression would be valid?\nI think an empty expression indicates that the user forgot to fill something in. For example, how to deal with an empty job type.", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r397048931", "createdAt": "2020-03-24T10:30:12Z", "author": {"login": "saig0"}, "path": "expression-language/src/main/java/io/zeebe/el/impl/FeelExpressionLanguage.java", "diffHunk": "@@ -47,22 +46,12 @@ public Expression parseExpression(final String expression) {\n     ensureNotNull(\"expression\", expression);\n \n     final var expressionMatcher = EXPRESSION_PATTERN.matcher(expression);\n-    final var valueMather = STATIC_VALUE_PATTERN.matcher(expression);\n \n     if (expressionMatcher.matches()) {\n       final var unpackedExpression = expressionMatcher.group(1);\n       return parseFeelExpression(unpackedExpression);\n-\n-    } else if (valueMather.matches()) {\n-      final var value = valueMather.group();\n-      return new StaticExpression(value);\n-\n     } else {\n-      final var failureMessage =\n-          String.format(\n-              \"Expected FEEL expression (e.g. '=variableName') or static value (e.g. 'jobType') but found '%s'\",\n-              expression);\n-      return new InvalidExpression(expression, failureMessage);\n+      return new StaticExpression(expression);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNjEyMQ=="}, "originalCommit": {"oid": "f117b4ee8dd1cc1421a2129d9dce443e3071381b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4NTkyMw==", "bodyText": "I don't see a case where an empty expression would be valid. I can imagine cases where maybe a value is optional and so an empty expression is benign.\nMy overall instinct is not to make any assumptions here. I think the validators are the perfect place to assess whether an empty expression can be valid. This place here could be called from anywhere.\nSpeaking of validators, right now the ZeebeExpressionValidator will accept null and empty values:\n  private void validateExpression(\n      final String expression, final ValidationResultCollector resultCollector) {\n\n    if (expression == null || expression.isEmpty()) {\n      return;\n    }\n\nIf you say, this should always be considered an invalid user input, we could change that.\nI also wonder whether long term we could have a connection between ZeebeTaskDefinitionImpl#registerType and ZeebeRuntimeValidators. I.e. maybe the runtime validators could be derived from the model constraints.\nLike I noticed in the retries issue that when I pass an empty expression, it falls back to the default value. So those two things seem somewhat related to me.", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r397085923", "createdAt": "2020-03-24T11:35:49Z", "author": {"login": "pihme"}, "path": "expression-language/src/main/java/io/zeebe/el/impl/FeelExpressionLanguage.java", "diffHunk": "@@ -47,22 +46,12 @@ public Expression parseExpression(final String expression) {\n     ensureNotNull(\"expression\", expression);\n \n     final var expressionMatcher = EXPRESSION_PATTERN.matcher(expression);\n-    final var valueMather = STATIC_VALUE_PATTERN.matcher(expression);\n \n     if (expressionMatcher.matches()) {\n       final var unpackedExpression = expressionMatcher.group(1);\n       return parseFeelExpression(unpackedExpression);\n-\n-    } else if (valueMather.matches()) {\n-      final var value = valueMather.group();\n-      return new StaticExpression(value);\n-\n     } else {\n-      final var failureMessage =\n-          String.format(\n-              \"Expected FEEL expression (e.g. '=variableName') or static value (e.g. 'jobType') but found '%s'\",\n-              expression);\n-      return new InvalidExpression(expression, failureMessage);\n+      return new StaticExpression(expression);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNjEyMQ=="}, "originalCommit": {"oid": "f117b4ee8dd1cc1421a2129d9dce443e3071381b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyMDYzNg==", "bodyText": "Agree. The check for the empty expression was just about having a safeguard if the validation is removed for some reason. But it is not necessary.\nRegarding ZeebeExpressionValidator, I saw this too and changed it in my PR (https://github.com/zeebe-io/zeebe/pull/4079/files#diff-a00c815cabc9efbdbb0400dfc103be1aR64). It should verify that the expression is not null or empty - if there is no default value (as it is for the job retries).\nI'm open to ideas about how to improve the validation. But better in a follow-up issue.", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r397120636", "createdAt": "2020-03-24T12:39:53Z", "author": {"login": "saig0"}, "path": "expression-language/src/main/java/io/zeebe/el/impl/FeelExpressionLanguage.java", "diffHunk": "@@ -47,22 +46,12 @@ public Expression parseExpression(final String expression) {\n     ensureNotNull(\"expression\", expression);\n \n     final var expressionMatcher = EXPRESSION_PATTERN.matcher(expression);\n-    final var valueMather = STATIC_VALUE_PATTERN.matcher(expression);\n \n     if (expressionMatcher.matches()) {\n       final var unpackedExpression = expressionMatcher.group(1);\n       return parseFeelExpression(unpackedExpression);\n-\n-    } else if (valueMather.matches()) {\n-      final var value = valueMather.group();\n-      return new StaticExpression(value);\n-\n     } else {\n-      final var failureMessage =\n-          String.format(\n-              \"Expected FEEL expression (e.g. '=variableName') or static value (e.g. 'jobType') but found '%s'\",\n-              expression);\n-      return new InvalidExpression(expression, failureMessage);\n+      return new StaticExpression(expression);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNjEyMQ=="}, "originalCommit": {"oid": "f117b4ee8dd1cc1421a2129d9dce443e3071381b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTc5NzE2OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/activity/ServiceTaskTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjo0Njo0M1rOF6ukgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjo0Njo0M1rOF6ukgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyNDczOQ==", "bodyText": "Let's hide the expression prefix = behind the model API, as we did for the other attributes. I suggest having two methods zeebeJobTypeExpression(expression) and zeebeJobType(staticValue) - one for an expression and one for a static value.\nAdditionally, we could rename zeebeTaskType() to zeebeJobType() because it is called \"job type\" everywhere else.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .withXmlResource(workflow(t -> t.zeebeTaskType(\"=\\\"test\\\"\").zeebeTaskRetries(5)))\n          \n          \n            \n                    .withXmlResource(workflow(t -> t.zeebeJobTypeExpression(\"\\\"test\\\"\")))", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r397124739", "createdAt": "2020-03-24T12:46:43Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/activity/ServiceTaskTest.java", "diffHunk": "@@ -47,6 +47,33 @@ private static BpmnModelInstance workflow(final Consumer<ServiceTaskBuilder> con\n     return builder.endEvent().done();\n   }\n \n+  @Test\n+  public void shouldCreateJobFromServiceTaskWithJobTypeExpression() {\n+    // given\n+    ENGINE\n+        .deployment()\n+        .withXmlResource(workflow(t -> t.zeebeTaskType(\"=\\\"test\\\"\").zeebeTaskRetries(5)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7827c613d182650605dca5a0c5f754f787b4f485"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTc5OTM2OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/activity/ServiceTaskTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjo0NzoyNFrOF6ul4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjo0NzoyNFrOF6ul4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyNTA4OA==", "bodyText": "Remove unused code.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final Record<WorkflowInstanceRecordValue> taskActivated =\n          \n          \n            \n                    RecordingExporter.workflowInstanceRecords()\n          \n          \n            \n                        .withWorkflowInstanceKey(workflowInstanceKey)\n          \n          \n            \n                        .withIntent(WorkflowInstanceIntent.ELEMENT_ACTIVATED)\n          \n          \n            \n                        .withElementType(BpmnElementType.SERVICE_TASK)\n          \n          \n            \n                        .getFirst();\n          \n          \n            \n                final Record<WorkflowInstanceRecordValue> taskActivated =\n          \n          \n            \n                    RecordingExporter.workflowInstanceRecords()\n          \n          \n            \n                        .withWorkflowInstanceKey(workflowInstanceKey)\n          \n          \n            \n                        .withIntent(WorkflowInstanceIntent.ELEMENT_ACTIVATED)\n          \n          \n            \n                        .withElementType(BpmnElementType.SERVICE_TASK)\n          \n          \n            \n                        .getFirst();", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r397125088", "createdAt": "2020-03-24T12:47:24Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/activity/ServiceTaskTest.java", "diffHunk": "@@ -47,6 +47,33 @@ private static BpmnModelInstance workflow(final Consumer<ServiceTaskBuilder> con\n     return builder.endEvent().done();\n   }\n \n+  @Test\n+  public void shouldCreateJobFromServiceTaskWithJobTypeExpression() {\n+    // given\n+    ENGINE\n+        .deployment()\n+        .withXmlResource(workflow(t -> t.zeebeTaskType(\"=\\\"test\\\"\").zeebeTaskRetries(5)))\n+        .deploy();\n+\n+    // when\n+    final long workflowInstanceKey = ENGINE.workflowInstance().ofBpmnProcessId(PROCESS_ID).create();\n+\n+    // then\n+    final Record<WorkflowInstanceRecordValue> taskActivated =\n+        RecordingExporter.workflowInstanceRecords()\n+            .withWorkflowInstanceKey(workflowInstanceKey)\n+            .withIntent(WorkflowInstanceIntent.ELEMENT_ACTIVATED)\n+            .withElementType(BpmnElementType.SERVICE_TASK)\n+            .getFirst();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7827c613d182650605dca5a0c5f754f787b4f485"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTgwNjA2OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeRuntimeValidationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjo0OToxNlrOF6uqLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMzoyNTozMlrOF6wCCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyNjE4OA==", "bodyText": "It seems that you removed the test case for ZeebeLoopCharacteristics.", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r397126188", "createdAt": "2020-03-24T12:49:16Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeRuntimeValidationTest.java", "diffHunk": "@@ -149,16 +150,9 @@\n         // output element expression is not supported\n         Bpmn.createExecutableProcess(\"process\")\n             .startEvent()\n-            .serviceTask(\n-                \"task\",\n-                t ->\n-                    t.multiInstance(\n-                        m ->\n-                            m.zeebeInputCollection(\"foo\")\n-                                .zeebeOutputCollection(\"bar\")\n-                                .zeebeOutputElement(INVALID_PATH_QUERY)))\n+            .serviceTask(\"task\", t -> t.zeebeTaskType(INVALID_EXPRESSION))\n             .done(),\n-        Arrays.asList(expect(ZeebeLoopCharacteristics.class, INVALID_PATH_QUERY_MESSAGE))\n+        Arrays.asList(expect(ZeebeTaskDefinition.class, INVALID_EXPRESSION_MESSAGE))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7827c613d182650605dca5a0c5f754f787b4f485"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE0ODY4Mg==", "bodyText": "Oops", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r397148682", "createdAt": "2020-03-24T13:25:32Z", "author": {"login": "pihme"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeRuntimeValidationTest.java", "diffHunk": "@@ -149,16 +150,9 @@\n         // output element expression is not supported\n         Bpmn.createExecutableProcess(\"process\")\n             .startEvent()\n-            .serviceTask(\n-                \"task\",\n-                t ->\n-                    t.multiInstance(\n-                        m ->\n-                            m.zeebeInputCollection(\"foo\")\n-                                .zeebeOutputCollection(\"bar\")\n-                                .zeebeOutputElement(INVALID_PATH_QUERY)))\n+            .serviceTask(\"task\", t -> t.zeebeTaskType(INVALID_EXPRESSION))\n             .done(),\n-        Arrays.asList(expect(ZeebeLoopCharacteristics.class, INVALID_PATH_QUERY_MESSAGE))\n+        Arrays.asList(expect(ZeebeTaskDefinition.class, INVALID_EXPRESSION_MESSAGE))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyNjE4OA=="}, "originalCommit": {"oid": "7827c613d182650605dca5a0c5f754f787b4f485"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTgyNzI4OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/incident/ServiceTaskIncidentTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjo1NTowNFrOF6u3pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNTo0Nzo1MVrOF62t5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyOTYzNg==", "bodyText": "The other incident tests verify that an incident is created and can be resolved. Incidents are created at runtime when the workflow instance is executed. In case of the job type, an incident would be created if the expression fails (e.g. no variable found), or if it evaluates not to a string.\nThis test case verifies that the validation works. This is already tested in ZeebeRuntimeValidationTest.", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r397129636", "createdAt": "2020-03-24T12:55:04Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/incident/ServiceTaskIncidentTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor.workflow.incident;\n+\n+import io.zeebe.engine.util.EngineRule;\n+import io.zeebe.engine.util.client.DeploymentClient;\n+import io.zeebe.model.bpmn.Bpmn;\n+import io.zeebe.model.bpmn.BpmnModelInstance;\n+import io.zeebe.model.bpmn.builder.ServiceTaskBuilder;\n+import io.zeebe.protocol.record.Assertions;\n+import io.zeebe.protocol.record.Record;\n+import io.zeebe.protocol.record.RecordType;\n+import io.zeebe.protocol.record.RejectionType;\n+import io.zeebe.protocol.record.intent.DeploymentIntent;\n+import io.zeebe.protocol.record.value.DeploymentRecordValue;\n+import io.zeebe.test.util.record.RecordingExporter;\n+import io.zeebe.test.util.record.RecordingExporterTestWatcher;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class ServiceTaskIncidentTest {\n+\n+  @ClassRule public static final EngineRule ENGINE = EngineRule.singlePartition();\n+\n+  private static final String PROCESS_ID = \"process\";\n+\n+  @Rule\n+  public final RecordingExporterTestWatcher recordingExporterTestWatcher =\n+      new RecordingExporterTestWatcher();\n+\n+  private static BpmnModelInstance workflow(final Consumer<ServiceTaskBuilder> consumer) {\n+    final var builder = Bpmn.createExecutableProcess(PROCESS_ID).startEvent().serviceTask(\"task\");\n+\n+    consumer.accept(builder);\n+\n+    return builder.endEvent().done();\n+  }\n+\n+  @Test\n+  public void shouldRejectDeploymentfJobTypeExpressionCanNotBeEvaluated() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7827c613d182650605dca5a0c5f754f787b4f485"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI1ODIxNQ==", "bodyText": "done, please check again", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r397258215", "createdAt": "2020-03-24T15:47:51Z", "author": {"login": "pihme"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/incident/ServiceTaskIncidentTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor.workflow.incident;\n+\n+import io.zeebe.engine.util.EngineRule;\n+import io.zeebe.engine.util.client.DeploymentClient;\n+import io.zeebe.model.bpmn.Bpmn;\n+import io.zeebe.model.bpmn.BpmnModelInstance;\n+import io.zeebe.model.bpmn.builder.ServiceTaskBuilder;\n+import io.zeebe.protocol.record.Assertions;\n+import io.zeebe.protocol.record.Record;\n+import io.zeebe.protocol.record.RecordType;\n+import io.zeebe.protocol.record.RejectionType;\n+import io.zeebe.protocol.record.intent.DeploymentIntent;\n+import io.zeebe.protocol.record.value.DeploymentRecordValue;\n+import io.zeebe.test.util.record.RecordingExporter;\n+import io.zeebe.test.util.record.RecordingExporterTestWatcher;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class ServiceTaskIncidentTest {\n+\n+  @ClassRule public static final EngineRule ENGINE = EngineRule.singlePartition();\n+\n+  private static final String PROCESS_ID = \"process\";\n+\n+  @Rule\n+  public final RecordingExporterTestWatcher recordingExporterTestWatcher =\n+      new RecordingExporterTestWatcher();\n+\n+  private static BpmnModelInstance workflow(final Consumer<ServiceTaskBuilder> consumer) {\n+    final var builder = Bpmn.createExecutableProcess(PROCESS_ID).startEvent().serviceTask(\"task\");\n+\n+    consumer.accept(builder);\n+\n+    return builder.endEvent().done();\n+  }\n+\n+  @Test\n+  public void shouldRejectDeploymentfJobTypeExpressionCanNotBeEvaluated() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyOTYzNg=="}, "originalCommit": {"oid": "7827c613d182650605dca5a0c5f754f787b4f485"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDg4MzYxOnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeRuntimeValidationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNTozNDozOFrOF7MsEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNTozNDozOFrOF7MsEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYxODE5NA==", "bodyText": "Using the job type expression builder instead of the static one.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // output element expression is not supported\n          \n          \n            \n                    Bpmn.createExecutableProcess(\"process\")\n          \n          \n            \n                        .startEvent()\n          \n          \n            \n                        .serviceTask(\"task\", t -> t.zeebeJobType(INVALID_EXPRESSION))\n          \n          \n            \n                        .done(),\n          \n          \n            \n                    Arrays.asList(expect(ZeebeTaskDefinition.class, INVALID_EXPRESSION_MESSAGE))\n          \n          \n            \n                    // invalid job type expression\n          \n          \n            \n                    Bpmn.createExecutableProcess(\"process\")\n          \n          \n            \n                        .startEvent()\n          \n          \n            \n                        .serviceTask(\"task\", t -> t.zeebeJobTypeExpression(INVALID_EXPRESSION))\n          \n          \n            \n                        .done(),\n          \n          \n            \n                    Arrays.asList(expect(ZeebeTaskDefinition.class, INVALID_EXPRESSION_MESSAGE))", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r397618194", "createdAt": "2020-03-25T05:34:38Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeRuntimeValidationTest.java", "diffHunk": "@@ -145,6 +146,14 @@\n             .done(),\n         Arrays.asList(expect(ZeebeLoopCharacteristics.class, INVALID_PATH_QUERY_MESSAGE))\n       },\n+      {\n+        // output element expression is not supported\n+        Bpmn.createExecutableProcess(\"process\")\n+            .startEvent()\n+            .serviceTask(\"task\", t -> t.zeebeJobType(INVALID_EXPRESSION))\n+            .done(),\n+        Arrays.asList(expect(ZeebeTaskDefinition.class, INVALID_EXPRESSION_MESSAGE))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50971c5e851c59c9d5dcaf455f7aca8bdf2ae93"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDg4NDYzOnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeRuntimeValidationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNTozNToyMlrOF7MspA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNTozNToyMlrOF7MspA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYxODM0MA==", "bodyText": "The expression prefix is set by the model API builder.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String INVALID_EXPRESSION = \"=?!\";\n          \n          \n            \n              private static final String INVALID_EXPRESSION = \"?!\";", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r397618340", "createdAt": "2020-03-25T05:35:22Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeRuntimeValidationTest.java", "diffHunk": "@@ -45,7 +46,7 @@\n   private static final String INVALID_PATH_QUERY_MESSAGE =\n       \"JSON path query is invalid: Unexpected json-path token ROOT_OBJECT\";\n \n-  private static final String INVALID_EXPRESSION = \"?!\";\n+  private static final String INVALID_EXPRESSION = \"=?!\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50971c5e851c59c9d5dcaf455f7aca8bdf2ae93"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4795, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}