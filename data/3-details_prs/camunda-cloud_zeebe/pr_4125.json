{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNTI4MDk4", "number": 4125, "title": "Align Java client with new cache format", "bodyText": "Description\n\naligns the Java client with the new cache format\nrobustness improvements (allows unknown fields, checks validity before request,etc)## Related issues\n\nPull Request Checklist\n\n All commit messages match our commit message guidelines\n The submitting code follows our code style\n If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-03-25T11:16:55Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4125", "merged": true, "mergeCommit": {"oid": "1654c3ca3c3f323bc6170512011d2e033a8da70d"}, "closed": true, "closedAt": "2020-04-01T21:21:03Z", "author": {"login": "MiguelPires"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRKLPBgFqTM4MTMwOTA2NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTcz7JABqjMxODkzNTE1OTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMzA5MDY0", "url": "https://github.com/camunda-cloud/zeebe/pull/4125#pullrequestreview-381309064", "createdAt": "2020-03-25T16:15:12Z", "commit": {"oid": "1729e373b5daee58b5bcea7cef9cc7c790c6ebfc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjoxNToxMlrOF7i_EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNjozMDowMFrOF7jrEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk4MzUwNA==", "bodyText": "Is it in the spec that expiresIn is passed a seconds? Where is expires in coming from?", "url": "https://github.com/camunda-cloud/zeebe/pull/4125#discussion_r397983504", "createdAt": "2020-03-25T16:15:12Z", "author": {"login": "npepinpe"}, "path": "clients/java/src/main/java/io/zeebe/client/impl/ZeebeClientCredentials.java", "diffHunk": "@@ -50,9 +51,29 @@ public String getTokenType() {\n     return tokenType;\n   }\n \n+  @JsonSetter(\"expiry\")\n+  public void setExpiry(final String expiry) {\n+    this.expiry = ZonedDateTime.parse(expiry);\n+  }\n+\n+  @JsonSetter(\"expires_in\")\n+  public void setExpiresIn(final String expiresIn) {\n+    this.expiry = ZonedDateTime.now().plusSeconds(Long.parseLong(expiresIn));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1729e373b5daee58b5bcea7cef9cc7c790c6ebfc"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk4NTM5NQ==", "bodyText": "Can type be null?", "url": "https://github.com/camunda-cloud/zeebe/pull/4125#discussion_r397985395", "createdAt": "2020-03-25T16:17:45Z", "author": {"login": "npepinpe"}, "path": "clients/java/src/main/java/io/zeebe/client/impl/oauth/OAuthCredentialsProvider.java", "diffHunk": "@@ -72,9 +71,12 @@ public void applyCredentials(final Metadata headers) throws IOException {\n       loadCredentials();\n     }\n \n-    headers.put(\n-        HEADER_AUTH_KEY,\n-        String.format(\"%s %s\", credentials.getTokenType(), credentials.getAccessToken()));\n+    String type = credentials.getTokenType();\n+    if (!type.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1729e373b5daee58b5bcea7cef9cc7c790c6ebfc"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk4NTk4Nw==", "bodyText": "If type == 'c', I think this will throw an out of bounds exception when doing type.substring(1)?", "url": "https://github.com/camunda-cloud/zeebe/pull/4125#discussion_r397985987", "createdAt": "2020-03-25T16:18:34Z", "author": {"login": "npepinpe"}, "path": "clients/java/src/main/java/io/zeebe/client/impl/oauth/OAuthCredentialsProvider.java", "diffHunk": "@@ -72,9 +71,12 @@ public void applyCredentials(final Metadata headers) throws IOException {\n       loadCredentials();\n     }\n \n-    headers.put(\n-        HEADER_AUTH_KEY,\n-        String.format(\"%s %s\", credentials.getTokenType(), credentials.getAccessToken()));\n+    String type = credentials.getTokenType();\n+    if (!type.isEmpty()) {\n+      type = Character.toUpperCase(type.charAt(0)) + type.substring(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1729e373b5daee58b5bcea7cef9cc7c790c6ebfc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5MDM3OA==", "bodyText": "What a strange little API that takes a string for charset and not the charset type...", "url": "https://github.com/camunda-cloud/zeebe/pull/4125#discussion_r397990378", "createdAt": "2020-03-25T16:24:11Z", "author": {"login": "npepinpe"}, "path": "clients/java/src/main/java/io/zeebe/client/impl/oauth/OAuthCredentialsProvider.java", "diffHunk": "@@ -120,36 +122,48 @@ private boolean refreshCredentials() throws IOException {\n     final ZeebeClientCredentials fetchedCredentials = fetchCredentials();\n     credentialsCache.put(endpoint, fetchedCredentials).writeCache();\n \n-    if (fetchedCredentials.equals(credentials)) {\n-      return false;\n+    if (credentials == null || !credentials.isValid() || !fetchedCredentials.equals(credentials)) {\n+      credentials = fetchedCredentials;\n+      LOG.debug(\"Refreshed credentials.\");\n+\n+      return true;\n     }\n \n-    credentials = fetchedCredentials;\n-    LOG.debug(\"Refreshed credentials.\");\n-    return true;\n+    return false;\n   }\n \n-  private static String createJsonPayload(final OAuthCredentialsProviderBuilder builder)\n-      throws JsonProcessingException {\n+  private static String createParams(final OAuthCredentialsProviderBuilder builder) {\n     final Map<String, String> payload = new HashMap<>();\n     payload.put(\"client_id\", builder.getClientId());\n     payload.put(\"client_secret\", builder.getClientSecret());\n     payload.put(\"audience\", builder.getAudience());\n     payload.put(\"grant_type\", \"client_credentials\");\n \n-    return JSON_MAPPER.writeValueAsString(payload);\n+    final StringBuilder sb = new StringBuilder();\n+    payload.forEach((key, value) -> sb.append(String.format(\"%s=%s&\", encode(key), encode(value))));\n+    sb.deleteCharAt(sb.length() - 1);\n+    return sb.toString();\n+  }\n+\n+  private static String encode(final String param) {\n+    try {\n+      return URLEncoder.encode(param, StandardCharsets.UTF_8.name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1729e373b5daee58b5bcea7cef9cc7c790c6ebfc"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk5NDc3MA==", "bodyText": "Nit: would this also work without having to deal with the awkward deletion of the last '&'?\n    payload.entrySet().stream()\n        .map(e -> encode(e.getKey()) + \"=\" + encode(e.getValue()))\n        .collect(Collectors.joining(\"&\"));\nDidn't test it, just off the top of my head, feel free to ignore if it seems more complicated - I just always find this extra deleting awkward", "url": "https://github.com/camunda-cloud/zeebe/pull/4125#discussion_r397994770", "createdAt": "2020-03-25T16:30:00Z", "author": {"login": "npepinpe"}, "path": "clients/java/src/main/java/io/zeebe/client/impl/oauth/OAuthCredentialsProvider.java", "diffHunk": "@@ -120,36 +122,48 @@ private boolean refreshCredentials() throws IOException {\n     final ZeebeClientCredentials fetchedCredentials = fetchCredentials();\n     credentialsCache.put(endpoint, fetchedCredentials).writeCache();\n \n-    if (fetchedCredentials.equals(credentials)) {\n-      return false;\n+    if (credentials == null || !credentials.isValid() || !fetchedCredentials.equals(credentials)) {\n+      credentials = fetchedCredentials;\n+      LOG.debug(\"Refreshed credentials.\");\n+\n+      return true;\n     }\n \n-    credentials = fetchedCredentials;\n-    LOG.debug(\"Refreshed credentials.\");\n-    return true;\n+    return false;\n   }\n \n-  private static String createJsonPayload(final OAuthCredentialsProviderBuilder builder)\n-      throws JsonProcessingException {\n+  private static String createParams(final OAuthCredentialsProviderBuilder builder) {\n     final Map<String, String> payload = new HashMap<>();\n     payload.put(\"client_id\", builder.getClientId());\n     payload.put(\"client_secret\", builder.getClientSecret());\n     payload.put(\"audience\", builder.getAudience());\n     payload.put(\"grant_type\", \"client_credentials\");\n \n-    return JSON_MAPPER.writeValueAsString(payload);\n+    final StringBuilder sb = new StringBuilder();\n+    payload.forEach((key, value) -> sb.append(String.format(\"%s=%s&\", encode(key), encode(value))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1729e373b5daee58b5bcea7cef9cc7c790c6ebfc"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMDg2MDcx", "url": "https://github.com/camunda-cloud/zeebe/pull/4125#pullrequestreview-382086071", "createdAt": "2020-03-26T14:50:18Z", "commit": {"oid": "1729e373b5daee58b5bcea7cef9cc7c790c6ebfc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDo1MDoxOFrOF8Ko2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDo1MDoxOFrOF8Ko2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzMzE3Nw==", "bodyText": "Do we need to add the queryParams as query params if we pass them as body as well?", "url": "https://github.com/camunda-cloud/zeebe/pull/4125#discussion_r398633177", "createdAt": "2020-03-26T14:50:18Z", "author": {"login": "npepinpe"}, "path": "clients/java/src/main/java/io/zeebe/client/impl/oauth/OAuthCredentialsProvider.java", "diffHunk": "@@ -120,36 +122,48 @@ private boolean refreshCredentials() throws IOException {\n     final ZeebeClientCredentials fetchedCredentials = fetchCredentials();\n     credentialsCache.put(endpoint, fetchedCredentials).writeCache();\n \n-    if (fetchedCredentials.equals(credentials)) {\n-      return false;\n+    if (credentials == null || !credentials.isValid() || !fetchedCredentials.equals(credentials)) {\n+      credentials = fetchedCredentials;\n+      LOG.debug(\"Refreshed credentials.\");\n+\n+      return true;\n     }\n \n-    credentials = fetchedCredentials;\n-    LOG.debug(\"Refreshed credentials.\");\n-    return true;\n+    return false;\n   }\n \n-  private static String createJsonPayload(final OAuthCredentialsProviderBuilder builder)\n-      throws JsonProcessingException {\n+  private static String createParams(final OAuthCredentialsProviderBuilder builder) {\n     final Map<String, String> payload = new HashMap<>();\n     payload.put(\"client_id\", builder.getClientId());\n     payload.put(\"client_secret\", builder.getClientSecret());\n     payload.put(\"audience\", builder.getAudience());\n     payload.put(\"grant_type\", \"client_credentials\");\n \n-    return JSON_MAPPER.writeValueAsString(payload);\n+    final StringBuilder sb = new StringBuilder();\n+    payload.forEach((key, value) -> sb.append(String.format(\"%s=%s&\", encode(key), encode(value))));\n+    sb.deleteCharAt(sb.length() - 1);\n+    return sb.toString();\n+  }\n+\n+  private static String encode(final String param) {\n+    try {\n+      return URLEncoder.encode(param, StandardCharsets.UTF_8.name());\n+    } catch (UnsupportedEncodingException e) {\n+      throw new UncheckedIOException(\"Failed while encoding OAuth request parameters: \", e);\n+    }\n   }\n \n   private ZeebeClientCredentials fetchCredentials() throws IOException {\n     final HttpURLConnection connection =\n-        (HttpURLConnection) authorizationServerUrl.openConnection();\n+        (HttpURLConnection)\n+            new URL(String.format(\"%s?%s\", authorizationServerUrl, queryParams)).openConnection();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1729e373b5daee58b5bcea7cef9cc7c790c6ebfc"}, "originalPosition": 127}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e6f8fa3351512ec17127ebb3deb407f19847ef58", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/e6f8fa3351512ec17127ebb3deb407f19847ef58", "committedDate": "2020-03-27T13:58:55Z", "message": "chore(clients/oauth2): simplify keycloak setup"}, "afterCommit": {"oid": "6b164d016c0b55c0da73d0b39484fd49407bf160", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/6b164d016c0b55c0da73d0b39484fd49407bf160", "committedDate": "2020-04-01T09:52:21Z", "message": "chore(clients/java): apply review feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1NDk2ODEw", "url": "https://github.com/camunda-cloud/zeebe/pull/4125#pullrequestreview-385496810", "createdAt": "2020-04-01T11:30:20Z", "commit": {"oid": "6b164d016c0b55c0da73d0b39484fd49407bf160"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1Nzk4MjEx", "url": "https://github.com/camunda-cloud/zeebe/pull/4125#pullrequestreview-385798211", "createdAt": "2020-04-01T17:27:31Z", "commit": {"oid": "760d11d2c72b3fca67ad6019a507e5bcf07ab5df"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "976181895defeef61d29b447320a10b320334207", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/976181895defeef61d29b447320a10b320334207", "committedDate": "2020-04-01T19:23:48Z", "message": "chore(clients/java): align cache format with Go client\n\n* uses expiry instead of expires_in\n* robustness improvements (allows unknown fields, checks validity before request,etc)\n* add support to test clients with oauth2 providers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "760d11d2c72b3fca67ad6019a507e5bcf07ab5df", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/760d11d2c72b3fca67ad6019a507e5bcf07ab5df", "committedDate": "2020-04-01T17:25:33Z", "message": "chore(clients): fix keycloak setup"}, "afterCommit": {"oid": "976181895defeef61d29b447320a10b320334207", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/976181895defeef61d29b447320a10b320334207", "committedDate": "2020-04-01T19:23:48Z", "message": "chore(clients/java): align cache format with Go client\n\n* uses expiry instead of expires_in\n* robustness improvements (allows unknown fields, checks validity before request,etc)\n* add support to test clients with oauth2 providers"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2931, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}