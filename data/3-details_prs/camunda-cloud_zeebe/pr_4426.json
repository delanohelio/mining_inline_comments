{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMzk1ODc4", "number": 4426, "title": "feat(broker): add configuration option for mmap", "bodyText": "Description\n\nadds a useMmap flag under the broker config data section, by default false\nAtomix uses StorageLevel.MAPPED if useMmap is true, StorageLevel.DISK otherwise\nBroker fails to start if useMmap is true and replicationFactor is greater than 1, as it is currently unsafe to use memory mapped files with replication enabled\nQA tests with replication explicitly set it to false even if it is the default to be safe\nIntroduces AtomixFactoryTest to make sure we configure Atomix properly from the broker configuration\nSetting is omitted from the configuration templates for now, as it is a \"use at your own risk\" flag\n\nRelated issues\ncloses #4413\nPull Request Checklist\n\n All commit messages match our commit message guidelines\n The submitting code follows our code style\n If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-04-30T11:58:26Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4426", "merged": true, "mergeCommit": {"oid": "e00e43d69b95b4176819e27c9d0fe7bebacbc830"}, "closed": true, "closedAt": "2020-05-04T14:10:53Z", "author": {"login": "npepinpe"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcd-pVggFqTQwNDkyNjc3MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcd_wzugBqjMyOTk5NTQyMjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0OTI2Nzcw", "url": "https://github.com/camunda-cloud/zeebe/pull/4426#pullrequestreview-404926770", "createdAt": "2020-05-04T12:08:16Z", "commit": {"oid": "1f42cb3f97f2b115029e9a45dda619825c8cc73f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjowODoxNlrOGP9a4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoxOTozN1rOGP9x1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4ODEyOQ==", "bodyText": "Not sure this change makes things better as you now have a dependency to Spring DataSize in this class", "url": "https://github.com/camunda-cloud/zeebe/pull/4426#discussion_r419388129", "createdAt": "2020-05-04T12:08:16Z", "author": {"login": "pihme"}, "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/AtomixFactory.java", "diffHunk": "@@ -97,13 +98,15 @@ private static RaftPartitionGroup createRaftPartitionGroup(\n                 (raftContext, threadContext, threadContextFactory) ->\n                     new ZeebeRaftStateMachine(raftContext))\n             .withSnapshotStoreFactory(new DbSnapshotStoreFactory())\n+            .withStorageLevel(dataCfg.getAtomixStorageLevel())\n             .withFlushOnCommit();\n \n     // by default, the Atomix max entry size is 1 MB\n     final int maxMessageSize = (int) networkCfg.getMaxMessageSizeInBytes();\n     partitionGroupBuilder.withMaxEntrySize(maxMessageSize);\n \n-    Optional.ofNullable(dataCfg.getLogSegmentSizeInBytes())\n+    Optional.ofNullable(dataCfg.getLogSegmentSize())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f42cb3f97f2b115029e9a45dda619825c8cc73f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4OTYyMA==", "bodyText": "this behavior is different from what is specified in the issue\n\nIf the user sets this option to true but also uses replication we will log a warning and disable this option to not prevent the broker from starting.\n\nPlease align the two, either by adding a comment to the issue/changing the issue; or changing this here", "url": "https://github.com/camunda-cloud/zeebe/pull/4426#discussion_r419389620", "createdAt": "2020-05-04T12:10:59Z", "author": {"login": "pihme"}, "path": "broker/src/main/java/io/zeebe/broker/system/SystemContext.java", "diffHunk": "@@ -70,7 +75,13 @@ private void validateConfiguration() {\n       throw new IllegalArgumentException(String.format(NODE_ID_ERROR_MSG, nodeId, clusterSize));\n     }\n \n+    final StorageLevel storageLevel = data.getAtomixStorageLevel();\n     final int replicationFactor = cluster.getReplicationFactor();\n+\n+    if (storageLevel == StorageLevel.MAPPED && replicationFactor > 1) {\n+      throw new IllegalStateException(MMAP_REPLICATION_ERROR_MSG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f42cb3f97f2b115029e9a45dda619825c8cc73f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5MDQ5NA==", "bodyText": "Maxybe a little more context would be helpful in the how to fix part:\nE.g. set BrokertCfg->DataCfg-useMmap to false", "url": "https://github.com/camunda-cloud/zeebe/pull/4426#discussion_r419390494", "createdAt": "2020-05-04T12:12:34Z", "author": {"login": "pihme"}, "path": "broker/src/main/java/io/zeebe/broker/system/SystemContext.java", "diffHunk": "@@ -29,6 +31,8 @@\n       \"Replication factor %s needs to be larger then zero and not larger then cluster size %s.\";\n   private static final String SNAPSHOT_PERIOD_ERROR_MSG =\n       \"Snapshot period %s needs to be larger then or equals to one minute.\";\n+  private static final String MMAP_REPLICATION_ERROR_MSG =\n+      \"Using memory mapped storage level is currently unsafe with replication enabled; if you wish to use replication, set useMmap to false\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f42cb3f97f2b115029e9a45dda619825c8cc73f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5MTc3NA==", "bodyText": "Maybe find a more neutral name. Not sure if the name is universal or particular to Atomix. At the very least it could be more verbose like \"useMemoryMap()\" or something like that", "url": "https://github.com/camunda-cloud/zeebe/pull/4426#discussion_r419391774", "createdAt": "2020-05-04T12:15:10Z", "author": {"login": "pihme"}, "path": "broker/src/main/java/io/zeebe/broker/system/configuration/DataCfg.java", "diffHunk": "@@ -64,10 +67,22 @@ public int getLogIndexDensity() {\n     return logIndexDensity;\n   }\n \n-  public void setLogIndexDensity(int logIndexDensity) {\n+  public void setLogIndexDensity(final int logIndexDensity) {\n     this.logIndexDensity = logIndexDensity;\n   }\n \n+  public boolean useMmap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f42cb3f97f2b115029e9a45dda619825c8cc73f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5MzMxOQ==", "bodyText": "Personally, not a fan of the expectedException rule. I would rather use Assertions.assertThatThronwBy(..) as it makes clearer where the exception is expected.\nFee free to ignore this comment, because it fits to the other test methods in this class.", "url": "https://github.com/camunda-cloud/zeebe/pull/4426#discussion_r419393319", "createdAt": "2020-05-04T12:18:12Z", "author": {"login": "pihme"}, "path": "broker/src/test/java/io/zeebe/broker/system/SystemContextTest.java", "diffHunk": "@@ -131,6 +131,20 @@ public void shouldNotThrowExceptionIfSnapshotPeriodIsEqualToOneMinute() {\n         .isEqualTo(Duration.ofMinutes(1));\n   }\n \n+  @Test\n+  public void shouldInvalidateConfigIfUseMmapTrueWithReplication() {\n+    // given\n+    final BrokerCfg brokerCfg = new BrokerCfg();\n+    brokerCfg.getData().setUseMmap(true);\n+    brokerCfg.getCluster().setClusterSize(2);\n+    brokerCfg.getCluster().setReplicationFactor(2);\n+\n+    // then\n+    expectedException.expect(IllegalStateException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f42cb3f97f2b115029e9a45dda619825c8cc73f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5NDAwNw==", "bodyText": "Please add a test for the default value, if setUseMmap was never called", "url": "https://github.com/camunda-cloud/zeebe/pull/4426#discussion_r419394007", "createdAt": "2020-05-04T12:19:37Z", "author": {"login": "pihme"}, "path": "broker/src/test/java/io/zeebe/broker/system/configuration/DataCfgTest.java", "diffHunk": "@@ -30,4 +31,30 @@ public void shouldSanitizeDirectories() {\n \n     assertThat(actual).isEqualTo(expected);\n   }\n+\n+  @Test\n+  public void shouldGetMappedAtomixStorageLevel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f42cb3f97f2b115029e9a45dda619825c8cc73f"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0OTk3MzIy", "url": "https://github.com/camunda-cloud/zeebe/pull/4426#pullrequestreview-404997322", "createdAt": "2020-05-04T13:41:22Z", "commit": {"oid": "e433362fd3e8511c309fac420c899143e4652446"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93db79ba38a1db5abf6517914099ba5ba998307f", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/93db79ba38a1db5abf6517914099ba5ba998307f", "committedDate": "2020-05-04T13:47:01Z", "message": "feat(broker): add configuration option for mmap"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e433362fd3e8511c309fac420c899143e4652446", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/e433362fd3e8511c309fac420c899143e4652446", "committedDate": "2020-05-04T13:11:54Z", "message": "chore(broker): add test for default value"}, "afterCommit": {"oid": "93db79ba38a1db5abf6517914099ba5ba998307f", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/93db79ba38a1db5abf6517914099ba5ba998307f", "committedDate": "2020-05-04T13:47:01Z", "message": "feat(broker): add configuration option for mmap"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2885, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}