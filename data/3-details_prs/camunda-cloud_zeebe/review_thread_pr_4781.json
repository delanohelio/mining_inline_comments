{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3Njg3NjIy", "number": 4781, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNjo1NTowMlrOEH1jOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDoyMzowNVrOEH_hPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NjUyODU5OnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNjo1NTowMlrOGnbp2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwOTo1ODowM1rOGpbFeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwMDcyOA==", "bodyText": "Why is comparing with address needed?", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#discussion_r444000728", "createdAt": "2020-06-23T06:55:02Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "diffHunk": "@@ -225,14 +229,15 @@ private void checkMetadata() {\n    */\n   private boolean updateState(final ImmutableMember member) {\n     // If the member matches the local member, ignore the update.\n-    if (member.id().equals(localMember.id())) {\n+    if (member.id().equals(localMember.id()) || member.address().equals(localMember.address())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1a34f6e7c961986eecb758a5b1d847f2fe3fc32"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgwMzY2OA==", "bodyText": "Ok I think here it is not necessary It was more necessary for sending the requests", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#discussion_r444803668", "createdAt": "2020-06-24T10:39:23Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "diffHunk": "@@ -225,14 +229,15 @@ private void checkMetadata() {\n    */\n   private boolean updateState(final ImmutableMember member) {\n     // If the member matches the local member, ignore the update.\n-    if (member.id().equals(localMember.id())) {\n+    if (member.id().equals(localMember.id()) || member.address().equals(localMember.address())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwMDcyOA=="}, "originalCommit": {"oid": "d1a34f6e7c961986eecb758a5b1d847f2fe3fc32"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4NzIzNg==", "bodyText": "Ok I have still the feeling we need that.\nWe get from the BootstrapNodeProvider nodes which have as id an uuid, which means the localMember.id will not be equal to the member id. The localMember.id will be 0, 1, 2 etc. When we get an update from other member about that bootstrap node, that it is not reachable for example. We will remove it from our members, which might mean we remove us? Idk how problematic it is.", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#discussion_r446087236", "createdAt": "2020-06-26T09:55:17Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "diffHunk": "@@ -225,14 +229,15 @@ private void checkMetadata() {\n    */\n   private boolean updateState(final ImmutableMember member) {\n     // If the member matches the local member, ignore the update.\n-    if (member.id().equals(localMember.id())) {\n+    if (member.id().equals(localMember.id()) || member.address().equals(localMember.address())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwMDcyOA=="}, "originalCommit": {"oid": "d1a34f6e7c961986eecb758a5b1d847f2fe3fc32"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4ODU3MA==", "bodyText": "Ok nevermind i think it is fine if we remove the bootstrap local node - since we are anyway in the list as localMember", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#discussion_r446088570", "createdAt": "2020-06-26T09:58:03Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "diffHunk": "@@ -225,14 +229,15 @@ private void checkMetadata() {\n    */\n   private boolean updateState(final ImmutableMember member) {\n     // If the member matches the local member, ignore the update.\n-    if (member.id().equals(localMember.id())) {\n+    if (member.id().equals(localMember.id()) || member.address().equals(localMember.address())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwMDcyOA=="}, "originalCommit": {"oid": "d1a34f6e7c961986eecb758a5b1d847f2fe3fc32"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODA5MDUyOnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDowNzozMlrOGnq_ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNjo0NjoyM1rOGpVjyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI1MjA2Nw==", "bodyText": "Should we wait for the response to schedule the next probe? Worst case, if the remote member is dead, we wait probeTimeout + probeInterval  time to send the next probe. This will increase the latency to detect failures of other nodes. Right?", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#discussion_r444252067", "createdAt": "2020-06-23T14:07:32Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "diffHunk": "@@ -523,6 +525,10 @@ private void probe(final ImmutableMember member) {\n                   requestProbes(swimMember.copy());\n                 }\n               }\n+              swimScheduler.schedule(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1a34f6e7c961986eecb758a5b1d847f2fe3fc32"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyODg4Mg==", "bodyText": "I think we discussed that, that the current impl was not ideal. Actually I would expect that the timeout is much lower. We could also say on timeout we directly trigger the next probe.", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#discussion_r444828882", "createdAt": "2020-06-24T11:32:06Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "diffHunk": "@@ -523,6 +525,10 @@ private void probe(final ImmutableMember member) {\n                   requestProbes(swimMember.copy());\n                 }\n               }\n+              swimScheduler.schedule(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI1MjA2Nw=="}, "originalCommit": {"oid": "d1a34f6e7c961986eecb758a5b1d847f2fe3fc32"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM1NDg4NQ==", "bodyText": "The current impl is not ideal because it is scheduled at fixed rate. Doesn't sending the probe and immediately scheduling the next one already reduce that problem? I don't know clearly what will be the impact of both approaches (Any comments @saig0 ). If we wait for the timeout, I am afraid we increase the failure detection latency. Decreasing the timeout would probably help, but it might unnecessarily detect slow nodes as failed. That said, 2s timeout is too much. This timeout should be based on expected RTT in the network.\nI'm ok with accepting this implementation and revisit this if we find any problem in future.", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#discussion_r445354885", "createdAt": "2020-06-25T07:19:19Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "diffHunk": "@@ -523,6 +525,10 @@ private void probe(final ImmutableMember member) {\n                   requestProbes(swimMember.copy());\n                 }\n               }\n+              swimScheduler.schedule(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI1MjA2Nw=="}, "originalCommit": {"oid": "d1a34f6e7c961986eecb758a5b1d847f2fe3fc32"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM2NTQ5Ng==", "bodyText": "Extract from http://www.cs.cornell.edu/info/projects/spinglass/public_pdfs/swim.pdf page 4. So yes it should be smaller then the ping interval.\nExample how it is done on other implementations\n\nHashicorp uses 500 ms timeout https://github.com/hashicorp/memberlist/blob/master/config.go#L288\nscalecube uses 100ms https://github.com/scalecube/scalecube-cluster", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#discussion_r445365496", "createdAt": "2020-06-25T07:39:42Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "diffHunk": "@@ -523,6 +525,10 @@ private void probe(final ImmutableMember member) {\n                   requestProbes(swimMember.copy());\n                 }\n               }\n+              swimScheduler.schedule(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI1MjA2Nw=="}, "originalCommit": {"oid": "d1a34f6e7c961986eecb758a5b1d847f2fe3fc32"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ1NjQ2OQ==", "bodyText": "@deepthidevaki Should I create a follow up for the timeout lowering?", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#discussion_r445456469", "createdAt": "2020-06-25T10:18:55Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "diffHunk": "@@ -523,6 +525,10 @@ private void probe(final ImmutableMember member) {\n                   requestProbes(swimMember.copy());\n                 }\n               }\n+              swimScheduler.schedule(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI1MjA2Nw=="}, "originalCommit": {"oid": "d1a34f6e7c961986eecb758a5b1d847f2fe3fc32"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5NDc5Mw==", "bodyText": "Follow up #4827", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#discussion_r445994793", "createdAt": "2020-06-26T06:37:16Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "diffHunk": "@@ -523,6 +525,10 @@ private void probe(final ImmutableMember member) {\n                   requestProbes(swimMember.copy());\n                 }\n               }\n+              swimScheduler.schedule(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI1MjA2Nw=="}, "originalCommit": {"oid": "d1a34f6e7c961986eecb758a5b1d847f2fe3fc32"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5ODAyNQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#discussion_r445998025", "createdAt": "2020-06-26T06:46:23Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "diffHunk": "@@ -523,6 +525,10 @@ private void probe(final ImmutableMember member) {\n                   requestProbes(swimMember.copy());\n                 }\n               }\n+              swimScheduler.schedule(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI1MjA2Nw=="}, "originalCommit": {"oid": "d1a34f6e7c961986eecb758a5b1d847f2fe3fc32"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODA5ODA1OnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDowOToxM1rOGnrEWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMTozMjoyMFrOGoONJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI1MzI3Mg==", "bodyText": "These futures should be updated when they are scheduled again.", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#discussion_r444253272", "createdAt": "2020-06-23T14:09:13Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "diffHunk": "@@ -161,22 +161,26 @@ public Member getMember(final MemberId memberId) {\n       this.localProperties.putAll(localMember.properties());\n       discoveryService.addListener(discoveryEventListener);\n \n-      LOGGER.info(\"{} - Member activated: {}\", localMember.id(), localMember);\n+      // we need to add our local node to the member list,\n+      // to share the mapping between node id and address in the cluster\n       localMember.setState(State.ALIVE);\n       members.put(localMember.id(), localMember);\n       post(new GroupMembershipEvent(GroupMembershipEvent.Type.MEMBER_ADDED, localMember));\n \n+      LOGGER.debug(\"Nodes from discovery service {}\", discoveryService.getNodes());\n+\n       registerHandlers();\n       gossipFuture =\n-          swimScheduler.scheduleAtFixedRate(\n-              this::gossip, 0, config.getGossipInterval().toMillis(), TimeUnit.MILLISECONDS);\n+          swimScheduler.schedule(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1a34f6e7c961986eecb758a5b1d847f2fe3fc32"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyODk2Ng==", "bodyText": "true", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#discussion_r444828966", "createdAt": "2020-06-24T11:32:20Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "diffHunk": "@@ -161,22 +161,26 @@ public Member getMember(final MemberId memberId) {\n       this.localProperties.putAll(localMember.properties());\n       discoveryService.addListener(discoveryEventListener);\n \n-      LOGGER.info(\"{} - Member activated: {}\", localMember.id(), localMember);\n+      // we need to add our local node to the member list,\n+      // to share the mapping between node id and address in the cluster\n       localMember.setState(State.ALIVE);\n       members.put(localMember.id(), localMember);\n       post(new GroupMembershipEvent(GroupMembershipEvent.Type.MEMBER_ADDED, localMember));\n \n+      LOGGER.debug(\"Nodes from discovery service {}\", discoveryService.getNodes());\n+\n       registerHandlers();\n       gossipFuture =\n-          swimScheduler.scheduleAtFixedRate(\n-              this::gossip, 0, config.getGossipInterval().toMillis(), TimeUnit.MILLISECONDS);\n+          swimScheduler.schedule(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI1MzI3Mg=="}, "originalCommit": {"oid": "d1a34f6e7c961986eecb758a5b1d847f2fe3fc32"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODEwMDA2OnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDowOTozNVrOGnrFcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDowOTozNVrOGnrFcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI1MzU1NA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#discussion_r444253554", "createdAt": "2020-06-23T14:09:35Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "diffHunk": "@@ -388,25 +385,20 @@ private void checkFailures() {\n           && System.currentTimeMillis() - member.getUpdated()\n               > config.getFailureTimeout().toMillis()) {\n         member.setState(State.DEAD);\n-        members.remove(member.id());\n-        randomMembers.remove(member);\n-        Collections.shuffle(randomMembers);\n-        LOGGER.debug(\"{} - Member removed {}\", this.localMember.id(), member);\n-        post(new GroupMembershipEvent(GroupMembershipEvent.Type.MEMBER_REMOVED, member.copy()));\n+\n+        tryRemoveMember(member);\n         recordUpdate(member.copy());\n       }\n     }\n   }\n \n-  /** Synchronizes the node state with peers. */\n-  private void syncAll() {\n-    final List<SwimMember> syncMembers =\n-        discoveryService.getNodes().stream()\n-            .map(node -> new SwimMember(MemberId.from(node.id().id()), node.address()))\n-            .filter(member -> !member.id().equals(localMember.id()))\n-            .collect(Collectors.toList());\n-    for (final SwimMember member : syncMembers) {\n-      sync(member.copy());\n+  private void tryRemoveMember(final SwimMember member) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1a34f6e7c961986eecb758a5b1d847f2fe3fc32"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODE2MTg4OnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDoyMzowNVrOGnrslw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDoyMzowNVrOGnrslw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI2MzU3NQ==", "bodyText": "Similar to sync(),  if probeMembers is empty, you have to schedule probe.", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#discussion_r444263575", "createdAt": "2020-06-23T14:23:05Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "diffHunk": "@@ -475,20 +476,21 @@ private void probe() {\n     // This is necessary to ensure we attempt to probe all nodes that are provided by the discovery\n     // provider.\n     final List<SwimMember> probeMembers =\n-        Lists.newArrayList(\n-            discoveryService.getNodes().stream()\n-                .map(node -> new SwimMember(MemberId.from(node.id().id()), node.address()))\n-                .filter(member -> !members.containsKey(member.id()))\n-                .filter(member -> !member.id().equals(localMember.id()))\n-                .sorted(Comparator.comparing(Member::id))\n-                .collect(Collectors.toList()));\n+        discoveryService.getNodes().stream()\n+            .map(node -> new SwimMember(MemberId.from(node.id().id()), node.address()))\n+            .filter(member -> !members.containsKey(member.id()))\n+            .filter(member -> !member.id().equals(localMember.id()))\n+            .filter(member -> !member.address().equals(localMember.address()))\n+            .sorted(Comparator.comparing(Member::id))\n+            .collect(Collectors.toList());\n \n     // Then add the randomly sorted list of SWIM members.\n     probeMembers.addAll(randomMembers);\n \n     // If there are members to probe, select the next member to probe using a counter for round\n     // robin probes.\n     if (!probeMembers.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1a34f6e7c961986eecb758a5b1d847f2fe3fc32"}, "originalPosition": 191}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 545, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}