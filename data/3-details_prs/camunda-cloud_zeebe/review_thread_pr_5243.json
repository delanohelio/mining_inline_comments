{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczODcyOTE3", "number": 5243, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMjoyMToxN1rOEdMllg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMjoyMToxN1rOEdMllg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MDUwMzkwOnYy", "diffSide": "RIGHT", "path": "benchmarks/project/src/main/java/io/zeebe/Starter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMjoyMToxN1rOHINxug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxMjoyMjoxNlrOHIN0Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3NjM3OA==", "bodyText": "Who is the one ? \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/5243#discussion_r478376378", "createdAt": "2020-08-27T12:21:17Z", "author": {"login": "Zelldon"}, "path": "benchmarks/project/src/main/java/io/zeebe/Starter.java", "diffHunk": "@@ -59,30 +62,39 @@ public void run() {\n     LOG.info(\"Creating an instance every {}ms\", intervalMs);\n \n     final String variables = readVariables(starterCfg.getPayloadPath());\n+    final LocalDateTime startTime = LocalDateTime.now();\n     executorService.scheduleAtFixedRate(\n         () -> {\n-          try {\n-            if (starterCfg.isWithResults()) {\n-              requestFutures.put(\n-                  client\n-                      .newCreateInstanceCommand()\n-                      .bpmnProcessId(processId)\n-                      .latestVersion()\n-                      .variables(variables)\n-                      .withResult()\n-                      .requestTimeout(starterCfg.getWithResultsTimeout())\n-                      .send());\n-            } else {\n-              requestFutures.put(\n-                  client\n-                      .newCreateInstanceCommand()\n-                      .bpmnProcessId(processId)\n-                      .latestVersion()\n-                      .variables(variables)\n-                      .send());\n+          final long duration = ChronoUnit.SECONDS.between(startTime, LocalDateTime.now());\n+          if (durationLimit <= 0 || duration < durationLimit) {\n+            try {\n+              if (starterCfg.isWithResults()) {\n+                requestFutures.put(\n+                    client\n+                        .newCreateInstanceCommand()\n+                        .bpmnProcessId(processId)\n+                        .latestVersion()\n+                        .variables(variables)\n+                        .withResult()\n+                        .requestTimeout(starterCfg.getWithResultsTimeout())\n+                        .send());\n+              } else {\n+                requestFutures.put(\n+                    client\n+                        .newCreateInstanceCommand()\n+                        .bpmnProcessId(processId)\n+                        .latestVersion()\n+                        .variables(variables)\n+                        .send());\n+              }\n+            } catch (Exception e) {\n+              LOG.error(\"Error on creating new workflow instance\", e);\n             }\n-          } catch (Exception e) {\n-            LOG.error(\"Error on creating new workflow instance\", e);\n+          } else {\n+            // TODO can one use scheduledFuture.cancel(false) to gracefully", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3917f83b419ab4430af9d6e39352311a3d108d7"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3NzAwNg==", "bodyText": "So what you want to do is canceling the timer, stopping the execution service. Await all remaining responses and then exit right?", "url": "https://github.com/camunda-cloud/zeebe/pull/5243#discussion_r478377006", "createdAt": "2020-08-27T12:22:16Z", "author": {"login": "Zelldon"}, "path": "benchmarks/project/src/main/java/io/zeebe/Starter.java", "diffHunk": "@@ -59,30 +62,39 @@ public void run() {\n     LOG.info(\"Creating an instance every {}ms\", intervalMs);\n \n     final String variables = readVariables(starterCfg.getPayloadPath());\n+    final LocalDateTime startTime = LocalDateTime.now();\n     executorService.scheduleAtFixedRate(\n         () -> {\n-          try {\n-            if (starterCfg.isWithResults()) {\n-              requestFutures.put(\n-                  client\n-                      .newCreateInstanceCommand()\n-                      .bpmnProcessId(processId)\n-                      .latestVersion()\n-                      .variables(variables)\n-                      .withResult()\n-                      .requestTimeout(starterCfg.getWithResultsTimeout())\n-                      .send());\n-            } else {\n-              requestFutures.put(\n-                  client\n-                      .newCreateInstanceCommand()\n-                      .bpmnProcessId(processId)\n-                      .latestVersion()\n-                      .variables(variables)\n-                      .send());\n+          final long duration = ChronoUnit.SECONDS.between(startTime, LocalDateTime.now());\n+          if (durationLimit <= 0 || duration < durationLimit) {\n+            try {\n+              if (starterCfg.isWithResults()) {\n+                requestFutures.put(\n+                    client\n+                        .newCreateInstanceCommand()\n+                        .bpmnProcessId(processId)\n+                        .latestVersion()\n+                        .variables(variables)\n+                        .withResult()\n+                        .requestTimeout(starterCfg.getWithResultsTimeout())\n+                        .send());\n+              } else {\n+                requestFutures.put(\n+                    client\n+                        .newCreateInstanceCommand()\n+                        .bpmnProcessId(processId)\n+                        .latestVersion()\n+                        .variables(variables)\n+                        .send());\n+              }\n+            } catch (Exception e) {\n+              LOG.error(\"Error on creating new workflow instance\", e);\n             }\n-          } catch (Exception e) {\n-            LOG.error(\"Error on creating new workflow instance\", e);\n+          } else {\n+            // TODO can one use scheduledFuture.cancel(false) to gracefully", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODM3NjM3OA=="}, "originalCommit": {"oid": "f3917f83b419ab4430af9d6e39352311a3d108d7"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 316, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}