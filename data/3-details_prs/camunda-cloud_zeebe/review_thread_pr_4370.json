{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NDIwNjE2", "number": 4370, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDo1Mjo0MlrOD76Hgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTo0MTo0M1rOD76puw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ0NzcwOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnElementProcessor.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDo1Mjo0MlrOGUhWvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwNzoyODowNlrOGV5jrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MTE5OQ==", "bodyText": "Why?", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424171199", "createdAt": "2020-05-13T04:52:42Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnElementProcessor.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+\n+/**\n+ * The business logic of a BPMN element.\n+ *\n+ * <p>The execution of an element is divided into multiple steps that represents the lifecycle of\n+ * the element. Each step defines a set of actions that can be performed in this step. The\n+ * transition to the next step must be triggered explicitly in the current step.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE5OTgwMA==", "bodyText": "Which part is unclear for you?\n\nThe transition to the next step must be triggered explicitly in the current step.\n\nThe transition must be triggered explicitly because the next step may depend on the element or the current instance. For example, a multi-instance activity with an empty input collection is completed immediately. Otherwise, it creates child instances and waits for their completion.", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424199800", "createdAt": "2020-05-13T06:27:47Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnElementProcessor.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+\n+/**\n+ * The business logic of a BPMN element.\n+ *\n+ * <p>The execution of an element is divided into multiple steps that represents the lifecycle of\n+ * the element. Each step defines a set of actions that can be performed in this step. The\n+ * transition to the next step must be triggered explicitly in the current step.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MTE5OQ=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTU5NjE5Mw==", "bodyText": "I have the feeling we always are blocked by the multi instance \ud83d\ude05 Could we handle it differently. So for example transform it dynamically to parallel gw and multiple service tasks ? \ud83d\ude01", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r425596193", "createdAt": "2020-05-15T06:39:38Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnElementProcessor.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+\n+/**\n+ * The business logic of a BPMN element.\n+ *\n+ * <p>The execution of an element is divided into multiple steps that represents the lifecycle of\n+ * the element. Each step defines a set of actions that can be performed in this step. The\n+ * transition to the next step must be triggered explicitly in the current step.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MTE5OQ=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYwNDM4Ng==", "bodyText": "Could we handle it differently. So for example transform it dynamically to parallel gw and multiple service tasks ?\n\nInteresting idea but I see some problems. The multi-instance is like a container that can be canceled via boundary event. The current solution, especially with the new processor, looks nice so far \ud83d\ude09", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r425604386", "createdAt": "2020-05-15T07:00:32Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnElementProcessor.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+\n+/**\n+ * The business logic of a BPMN element.\n+ *\n+ * <p>The execution of an element is divided into multiple steps that represents the lifecycle of\n+ * the element. Each step defines a set of actions that can be performed in this step. The\n+ * transition to the next step must be triggered explicitly in the current step.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MTE5OQ=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTYxNjMwMA==", "bodyText": ". The multi-instance is like a container that can be canceled via boundary event\n\nWhich would be possible if you model as a subprocess", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r425616300", "createdAt": "2020-05-15T07:28:06Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnElementProcessor.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+\n+/**\n+ * The business logic of a BPMN element.\n+ *\n+ * <p>The execution of an element is divided into multiple steps that represents the lifecycle of\n+ * the element. Each step defines a set of actions that can be performed in this step. The\n+ * transition to the next step must be triggered explicitly in the current step.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MTE5OQ=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ0OTE3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnElementProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDo1MzozN1rOGUhXvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNjo1ODo1NFrOGUj5JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MTQ1Mg==", "bodyText": "Here in the interface you already know that the next step will be activated, but before you mentioned that needs to be triggered by the impl?", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424171452", "createdAt": "2020-05-13T04:53:37Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnElementProcessor.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+\n+/**\n+ * The business logic of a BPMN element.\n+ *\n+ * <p>The execution of an element is divided into multiple steps that represents the lifecycle of\n+ * the element. Each step defines a set of actions that can be performed in this step. The\n+ * transition to the next step must be triggered explicitly in the current step.\n+ *\n+ * @param <T> the type that represents the BPMN element\n+ */\n+public interface BpmnElementProcessor<T extends ExecutableFlowElement> {\n+\n+  /** @return the class that represents the BPMN element */\n+  Class<T> getType();\n+\n+  /**\n+   * The element is entered (initial step). Perform every action to initialize the element.\n+   *\n+   * <p>Possible actions:\n+   *\n+   * <ul>\n+   *   <li>apply input mappings\n+   *   <li>open event subscriptions\n+   * </ul>\n+   *\n+   * Next step: activated.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxMjc3Mg==", "bodyText": "As mentioned before, the next action may depend on the specific element or runtime data (e.g. variables). Also, we only want to go to the next step if no incident was raised.", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424212772", "createdAt": "2020-05-13T06:58:54Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnElementProcessor.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+\n+/**\n+ * The business logic of a BPMN element.\n+ *\n+ * <p>The execution of an element is divided into multiple steps that represents the lifecycle of\n+ * the element. Each step defines a set of actions that can be performed in this step. The\n+ * transition to the next step must be triggered explicitly in the current step.\n+ *\n+ * @param <T> the type that represents the BPMN element\n+ */\n+public interface BpmnElementProcessor<T extends ExecutableFlowElement> {\n+\n+  /** @return the class that represents the BPMN element */\n+  Class<T> getType();\n+\n+  /**\n+   * The element is entered (initial step). Perform every action to initialize the element.\n+   *\n+   * <p>Possible actions:\n+   *\n+   * <ul>\n+   *   <li>apply input mappings\n+   *   <li>open event subscriptions\n+   * </ul>\n+   *\n+   * Next step: activated.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MTQ1Mg=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ1MjQ5OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnStreamProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDo1NTo1MlrOGUhZ1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzowMTo0MlrOGUj-Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MTk5MQ==", "bodyText": "Why new ? :D", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424171991", "createdAt": "2020-05-13T04:55:52Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnStreamProcessor.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.Loggers;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviorsImpl;\n+import io.zeebe.engine.nwe.behavior.TypesStreamWriterProxy;\n+import io.zeebe.engine.processor.SideEffectProducer;\n+import io.zeebe.engine.processor.TypedRecord;\n+import io.zeebe.engine.processor.TypedRecordProcessor;\n+import io.zeebe.engine.processor.TypedResponseWriter;\n+import io.zeebe.engine.processor.TypedStreamWriter;\n+import io.zeebe.engine.processor.workflow.BpmnStepContext;\n+import io.zeebe.engine.processor.workflow.CatchEventBehavior;\n+import io.zeebe.engine.processor.workflow.ExpressionProcessor;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableMultiInstanceBody;\n+import io.zeebe.engine.state.ZeebeState;\n+import io.zeebe.engine.state.deployment.WorkflowState;\n+import io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import java.util.function.Consumer;\n+import org.slf4j.Logger;\n+\n+public final class BpmnStreamProcessor implements TypedRecordProcessor<WorkflowInstanceRecord> {\n+\n+  private static final Logger LOGGER = Loggers.WORKFLOW_PROCESSOR_LOGGER;\n+\n+  private final TypesStreamWriterProxy streamWriterProxy = new TypesStreamWriterProxy();\n+\n+  private final BpmnElementContextImpl context;\n+  private final WorkflowState workflowState;\n+  private final BpmnElementProcessors processors;\n+  private final WorkflowInstanceStateTransitionGuard stateTransitionGuard;\n+\n+  private final Consumer<BpmnStepContext<?>> fallback;\n+\n+  public BpmnStreamProcessor(\n+      final ExpressionProcessor expressionProcessor,\n+      final CatchEventBehavior catchEventBehavior,\n+      final ZeebeState zeebeState,\n+      final Consumer<BpmnStepContext<?>> fallback) {\n+    workflowState = zeebeState.getWorkflowState();\n+    context = new BpmnElementContextImpl(zeebeState);\n+\n+    final var bpmnBehaviors =\n+        new BpmnBehaviorsImpl(\n+            expressionProcessor,\n+            streamWriterProxy,\n+            zeebeState,\n+            catchEventBehavior,\n+            this::getContainerProcessor);\n+    processors = new BpmnElementProcessors(bpmnBehaviors);\n+\n+    this.fallback = fallback;\n+    stateTransitionGuard = bpmnBehaviors.stateTransitionGuard();\n+  }\n+\n+  private BpmnElementContainerProcessor<ExecutableFlowElement> getContainerProcessor(\n+      final BpmnElementType elementType) {\n+    return processors.getContainerProcessor(elementType);\n+  }\n+\n+  @Override\n+  public void processRecord(\n+      final TypedRecord<WorkflowInstanceRecord> record,\n+      final TypedResponseWriter responseWriter,\n+      final TypedStreamWriter streamWriter,\n+      final Consumer<SideEffectProducer> sideEffect) {\n+\n+    final var intent = (WorkflowInstanceIntent) record.getIntent();\n+    final var recordValue = record.getValue();\n+    final var bpmnElementType = recordValue.getBpmnElementType();\n+    final var processor = processors.getProcessor(bpmnElementType);\n+\n+    if (processor == null) {\n+      // TODO (saig0): remove multi-instance fallback when the processors of all multi-instance\n+      // elements are migrated\n+      LOGGER.debug(\"[NEW] No processor found for BPMN element type '{}'\", bpmnElementType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxNDA5OQ==", "bodyText": "This is a temporary debug statement that may help us while developing \ud83d\ude1b", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424214099", "createdAt": "2020-05-13T07:01:42Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnStreamProcessor.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.Loggers;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviorsImpl;\n+import io.zeebe.engine.nwe.behavior.TypesStreamWriterProxy;\n+import io.zeebe.engine.processor.SideEffectProducer;\n+import io.zeebe.engine.processor.TypedRecord;\n+import io.zeebe.engine.processor.TypedRecordProcessor;\n+import io.zeebe.engine.processor.TypedResponseWriter;\n+import io.zeebe.engine.processor.TypedStreamWriter;\n+import io.zeebe.engine.processor.workflow.BpmnStepContext;\n+import io.zeebe.engine.processor.workflow.CatchEventBehavior;\n+import io.zeebe.engine.processor.workflow.ExpressionProcessor;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableMultiInstanceBody;\n+import io.zeebe.engine.state.ZeebeState;\n+import io.zeebe.engine.state.deployment.WorkflowState;\n+import io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import java.util.function.Consumer;\n+import org.slf4j.Logger;\n+\n+public final class BpmnStreamProcessor implements TypedRecordProcessor<WorkflowInstanceRecord> {\n+\n+  private static final Logger LOGGER = Loggers.WORKFLOW_PROCESSOR_LOGGER;\n+\n+  private final TypesStreamWriterProxy streamWriterProxy = new TypesStreamWriterProxy();\n+\n+  private final BpmnElementContextImpl context;\n+  private final WorkflowState workflowState;\n+  private final BpmnElementProcessors processors;\n+  private final WorkflowInstanceStateTransitionGuard stateTransitionGuard;\n+\n+  private final Consumer<BpmnStepContext<?>> fallback;\n+\n+  public BpmnStreamProcessor(\n+      final ExpressionProcessor expressionProcessor,\n+      final CatchEventBehavior catchEventBehavior,\n+      final ZeebeState zeebeState,\n+      final Consumer<BpmnStepContext<?>> fallback) {\n+    workflowState = zeebeState.getWorkflowState();\n+    context = new BpmnElementContextImpl(zeebeState);\n+\n+    final var bpmnBehaviors =\n+        new BpmnBehaviorsImpl(\n+            expressionProcessor,\n+            streamWriterProxy,\n+            zeebeState,\n+            catchEventBehavior,\n+            this::getContainerProcessor);\n+    processors = new BpmnElementProcessors(bpmnBehaviors);\n+\n+    this.fallback = fallback;\n+    stateTransitionGuard = bpmnBehaviors.stateTransitionGuard();\n+  }\n+\n+  private BpmnElementContainerProcessor<ExecutableFlowElement> getContainerProcessor(\n+      final BpmnElementType elementType) {\n+    return processors.getContainerProcessor(elementType);\n+  }\n+\n+  @Override\n+  public void processRecord(\n+      final TypedRecord<WorkflowInstanceRecord> record,\n+      final TypedResponseWriter responseWriter,\n+      final TypedStreamWriter streamWriter,\n+      final Consumer<SideEffectProducer> sideEffect) {\n+\n+    final var intent = (WorkflowInstanceIntent) record.getIntent();\n+    final var recordValue = record.getValue();\n+    final var bpmnElementType = recordValue.getBpmnElementType();\n+    final var processor = processors.getProcessor(bpmnElementType);\n+\n+    if (processor == null) {\n+      // TODO (saig0): remove multi-instance fallback when the processors of all multi-instance\n+      // elements are migrated\n+      LOGGER.debug(\"[NEW] No processor found for BPMN element type '{}'\", bpmnElementType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MTk5MQ=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ1NDQ0OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnStreamProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDo1NzowN1rOGUha_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzowMjo1NVrOGUkAoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MjI4NQ==", "bodyText": "I don't think you want to log this in the hot path right? \ud83d\ude05 probably make sense to put that on trace.", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424172285", "createdAt": "2020-05-13T04:57:07Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnStreamProcessor.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.Loggers;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviorsImpl;\n+import io.zeebe.engine.nwe.behavior.TypesStreamWriterProxy;\n+import io.zeebe.engine.processor.SideEffectProducer;\n+import io.zeebe.engine.processor.TypedRecord;\n+import io.zeebe.engine.processor.TypedRecordProcessor;\n+import io.zeebe.engine.processor.TypedResponseWriter;\n+import io.zeebe.engine.processor.TypedStreamWriter;\n+import io.zeebe.engine.processor.workflow.BpmnStepContext;\n+import io.zeebe.engine.processor.workflow.CatchEventBehavior;\n+import io.zeebe.engine.processor.workflow.ExpressionProcessor;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableMultiInstanceBody;\n+import io.zeebe.engine.state.ZeebeState;\n+import io.zeebe.engine.state.deployment.WorkflowState;\n+import io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import java.util.function.Consumer;\n+import org.slf4j.Logger;\n+\n+public final class BpmnStreamProcessor implements TypedRecordProcessor<WorkflowInstanceRecord> {\n+\n+  private static final Logger LOGGER = Loggers.WORKFLOW_PROCESSOR_LOGGER;\n+\n+  private final TypesStreamWriterProxy streamWriterProxy = new TypesStreamWriterProxy();\n+\n+  private final BpmnElementContextImpl context;\n+  private final WorkflowState workflowState;\n+  private final BpmnElementProcessors processors;\n+  private final WorkflowInstanceStateTransitionGuard stateTransitionGuard;\n+\n+  private final Consumer<BpmnStepContext<?>> fallback;\n+\n+  public BpmnStreamProcessor(\n+      final ExpressionProcessor expressionProcessor,\n+      final CatchEventBehavior catchEventBehavior,\n+      final ZeebeState zeebeState,\n+      final Consumer<BpmnStepContext<?>> fallback) {\n+    workflowState = zeebeState.getWorkflowState();\n+    context = new BpmnElementContextImpl(zeebeState);\n+\n+    final var bpmnBehaviors =\n+        new BpmnBehaviorsImpl(\n+            expressionProcessor,\n+            streamWriterProxy,\n+            zeebeState,\n+            catchEventBehavior,\n+            this::getContainerProcessor);\n+    processors = new BpmnElementProcessors(bpmnBehaviors);\n+\n+    this.fallback = fallback;\n+    stateTransitionGuard = bpmnBehaviors.stateTransitionGuard();\n+  }\n+\n+  private BpmnElementContainerProcessor<ExecutableFlowElement> getContainerProcessor(\n+      final BpmnElementType elementType) {\n+    return processors.getContainerProcessor(elementType);\n+  }\n+\n+  @Override\n+  public void processRecord(\n+      final TypedRecord<WorkflowInstanceRecord> record,\n+      final TypedResponseWriter responseWriter,\n+      final TypedStreamWriter streamWriter,\n+      final Consumer<SideEffectProducer> sideEffect) {\n+\n+    final var intent = (WorkflowInstanceIntent) record.getIntent();\n+    final var recordValue = record.getValue();\n+    final var bpmnElementType = recordValue.getBpmnElementType();\n+    final var processor = processors.getProcessor(bpmnElementType);\n+\n+    if (processor == null) {\n+      // TODO (saig0): remove multi-instance fallback when the processors of all multi-instance\n+      // elements are migrated\n+      LOGGER.debug(\"[NEW] No processor found for BPMN element type '{}'\", bpmnElementType);\n+\n+      final var multiInstanceBody =\n+          workflowState.getFlowElement(\n+              recordValue.getWorkflowKey(),\n+              recordValue.getElementIdBuffer(),\n+              ExecutableMultiInstanceBody.class);\n+      final var element = multiInstanceBody.getInnerActivity();\n+\n+      streamWriterProxy.wrap(streamWriter);\n+      context.init(record, intent, element, streamWriterProxy, sideEffect);\n+\n+      fallback.accept(context.toStepContext());\n+      return;\n+    }\n+\n+    LOGGER.debug(\n+        \"[NEW] process workflow instance event [BPMN element type: {}, intent: {}]\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxNDY4OA==", "bodyText": "Same here, this is just a temporary debug log statement that helps us to see that our new processor is actually called \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424214688", "createdAt": "2020-05-13T07:02:55Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnStreamProcessor.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.Loggers;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviorsImpl;\n+import io.zeebe.engine.nwe.behavior.TypesStreamWriterProxy;\n+import io.zeebe.engine.processor.SideEffectProducer;\n+import io.zeebe.engine.processor.TypedRecord;\n+import io.zeebe.engine.processor.TypedRecordProcessor;\n+import io.zeebe.engine.processor.TypedResponseWriter;\n+import io.zeebe.engine.processor.TypedStreamWriter;\n+import io.zeebe.engine.processor.workflow.BpmnStepContext;\n+import io.zeebe.engine.processor.workflow.CatchEventBehavior;\n+import io.zeebe.engine.processor.workflow.ExpressionProcessor;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableMultiInstanceBody;\n+import io.zeebe.engine.state.ZeebeState;\n+import io.zeebe.engine.state.deployment.WorkflowState;\n+import io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import java.util.function.Consumer;\n+import org.slf4j.Logger;\n+\n+public final class BpmnStreamProcessor implements TypedRecordProcessor<WorkflowInstanceRecord> {\n+\n+  private static final Logger LOGGER = Loggers.WORKFLOW_PROCESSOR_LOGGER;\n+\n+  private final TypesStreamWriterProxy streamWriterProxy = new TypesStreamWriterProxy();\n+\n+  private final BpmnElementContextImpl context;\n+  private final WorkflowState workflowState;\n+  private final BpmnElementProcessors processors;\n+  private final WorkflowInstanceStateTransitionGuard stateTransitionGuard;\n+\n+  private final Consumer<BpmnStepContext<?>> fallback;\n+\n+  public BpmnStreamProcessor(\n+      final ExpressionProcessor expressionProcessor,\n+      final CatchEventBehavior catchEventBehavior,\n+      final ZeebeState zeebeState,\n+      final Consumer<BpmnStepContext<?>> fallback) {\n+    workflowState = zeebeState.getWorkflowState();\n+    context = new BpmnElementContextImpl(zeebeState);\n+\n+    final var bpmnBehaviors =\n+        new BpmnBehaviorsImpl(\n+            expressionProcessor,\n+            streamWriterProxy,\n+            zeebeState,\n+            catchEventBehavior,\n+            this::getContainerProcessor);\n+    processors = new BpmnElementProcessors(bpmnBehaviors);\n+\n+    this.fallback = fallback;\n+    stateTransitionGuard = bpmnBehaviors.stateTransitionGuard();\n+  }\n+\n+  private BpmnElementContainerProcessor<ExecutableFlowElement> getContainerProcessor(\n+      final BpmnElementType elementType) {\n+    return processors.getContainerProcessor(elementType);\n+  }\n+\n+  @Override\n+  public void processRecord(\n+      final TypedRecord<WorkflowInstanceRecord> record,\n+      final TypedResponseWriter responseWriter,\n+      final TypedStreamWriter streamWriter,\n+      final Consumer<SideEffectProducer> sideEffect) {\n+\n+    final var intent = (WorkflowInstanceIntent) record.getIntent();\n+    final var recordValue = record.getValue();\n+    final var bpmnElementType = recordValue.getBpmnElementType();\n+    final var processor = processors.getProcessor(bpmnElementType);\n+\n+    if (processor == null) {\n+      // TODO (saig0): remove multi-instance fallback when the processors of all multi-instance\n+      // elements are migrated\n+      LOGGER.debug(\"[NEW] No processor found for BPMN element type '{}'\", bpmnElementType);\n+\n+      final var multiInstanceBody =\n+          workflowState.getFlowElement(\n+              recordValue.getWorkflowKey(),\n+              recordValue.getElementIdBuffer(),\n+              ExecutableMultiInstanceBody.class);\n+      final var element = multiInstanceBody.getInnerActivity();\n+\n+      streamWriterProxy.wrap(streamWriter);\n+      context.init(record, intent, element, streamWriterProxy, sideEffect);\n+\n+      fallback.accept(context.toStepContext());\n+      return;\n+    }\n+\n+    LOGGER.debug(\n+        \"[NEW] process workflow instance event [BPMN element type: {}, intent: {}]\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MjI4NQ=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ1NzU0OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnStreamProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDo1OToxMlrOGUhc4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzowNzowM1rOGUkH_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3Mjc3MQ==", "bodyText": "Could also have this as enum map :D", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424172771", "createdAt": "2020-05-13T04:59:12Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnStreamProcessor.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.Loggers;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviorsImpl;\n+import io.zeebe.engine.nwe.behavior.TypesStreamWriterProxy;\n+import io.zeebe.engine.processor.SideEffectProducer;\n+import io.zeebe.engine.processor.TypedRecord;\n+import io.zeebe.engine.processor.TypedRecordProcessor;\n+import io.zeebe.engine.processor.TypedResponseWriter;\n+import io.zeebe.engine.processor.TypedStreamWriter;\n+import io.zeebe.engine.processor.workflow.BpmnStepContext;\n+import io.zeebe.engine.processor.workflow.CatchEventBehavior;\n+import io.zeebe.engine.processor.workflow.ExpressionProcessor;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableMultiInstanceBody;\n+import io.zeebe.engine.state.ZeebeState;\n+import io.zeebe.engine.state.deployment.WorkflowState;\n+import io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import java.util.function.Consumer;\n+import org.slf4j.Logger;\n+\n+public final class BpmnStreamProcessor implements TypedRecordProcessor<WorkflowInstanceRecord> {\n+\n+  private static final Logger LOGGER = Loggers.WORKFLOW_PROCESSOR_LOGGER;\n+\n+  private final TypesStreamWriterProxy streamWriterProxy = new TypesStreamWriterProxy();\n+\n+  private final BpmnElementContextImpl context;\n+  private final WorkflowState workflowState;\n+  private final BpmnElementProcessors processors;\n+  private final WorkflowInstanceStateTransitionGuard stateTransitionGuard;\n+\n+  private final Consumer<BpmnStepContext<?>> fallback;\n+\n+  public BpmnStreamProcessor(\n+      final ExpressionProcessor expressionProcessor,\n+      final CatchEventBehavior catchEventBehavior,\n+      final ZeebeState zeebeState,\n+      final Consumer<BpmnStepContext<?>> fallback) {\n+    workflowState = zeebeState.getWorkflowState();\n+    context = new BpmnElementContextImpl(zeebeState);\n+\n+    final var bpmnBehaviors =\n+        new BpmnBehaviorsImpl(\n+            expressionProcessor,\n+            streamWriterProxy,\n+            zeebeState,\n+            catchEventBehavior,\n+            this::getContainerProcessor);\n+    processors = new BpmnElementProcessors(bpmnBehaviors);\n+\n+    this.fallback = fallback;\n+    stateTransitionGuard = bpmnBehaviors.stateTransitionGuard();\n+  }\n+\n+  private BpmnElementContainerProcessor<ExecutableFlowElement> getContainerProcessor(\n+      final BpmnElementType elementType) {\n+    return processors.getContainerProcessor(elementType);\n+  }\n+\n+  @Override\n+  public void processRecord(\n+      final TypedRecord<WorkflowInstanceRecord> record,\n+      final TypedResponseWriter responseWriter,\n+      final TypedStreamWriter streamWriter,\n+      final Consumer<SideEffectProducer> sideEffect) {\n+\n+    final var intent = (WorkflowInstanceIntent) record.getIntent();\n+    final var recordValue = record.getValue();\n+    final var bpmnElementType = recordValue.getBpmnElementType();\n+    final var processor = processors.getProcessor(bpmnElementType);\n+\n+    if (processor == null) {\n+      // TODO (saig0): remove multi-instance fallback when the processors of all multi-instance\n+      // elements are migrated\n+      LOGGER.debug(\"[NEW] No processor found for BPMN element type '{}'\", bpmnElementType);\n+\n+      final var multiInstanceBody =\n+          workflowState.getFlowElement(\n+              recordValue.getWorkflowKey(),\n+              recordValue.getElementIdBuffer(),\n+              ExecutableMultiInstanceBody.class);\n+      final var element = multiInstanceBody.getInnerActivity();\n+\n+      streamWriterProxy.wrap(streamWriter);\n+      context.init(record, intent, element, streamWriterProxy, sideEffect);\n+\n+      fallback.accept(context.toStepContext());\n+      return;\n+    }\n+\n+    LOGGER.debug(\n+        \"[NEW] process workflow instance event [BPMN element type: {}, intent: {}]\",\n+        bpmnElementType,\n+        intent);\n+\n+    final ExecutableFlowElement element = getElement(recordValue, processor);\n+\n+    // initialize the stuff\n+    streamWriterProxy.wrap(streamWriter);\n+    context.init(record, intent, element, streamWriterProxy, sideEffect);\n+\n+    // process the event\n+    if (stateTransitionGuard.isValidStateTransition(context)) {\n+      processEvent(intent, processor, element);\n+    }\n+  }\n+\n+  private void processEvent(\n+      final WorkflowInstanceIntent intent,\n+      final BpmnElementProcessor<ExecutableFlowElement> processor,\n+      final ExecutableFlowElement element) {\n+\n+    switch (intent) {\n+      case ELEMENT_ACTIVATING:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxNjU3Mw==", "bodyText": "True. But I don't see the benefit of an enum map here.", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424216573", "createdAt": "2020-05-13T07:07:03Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnStreamProcessor.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.Loggers;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviorsImpl;\n+import io.zeebe.engine.nwe.behavior.TypesStreamWriterProxy;\n+import io.zeebe.engine.processor.SideEffectProducer;\n+import io.zeebe.engine.processor.TypedRecord;\n+import io.zeebe.engine.processor.TypedRecordProcessor;\n+import io.zeebe.engine.processor.TypedResponseWriter;\n+import io.zeebe.engine.processor.TypedStreamWriter;\n+import io.zeebe.engine.processor.workflow.BpmnStepContext;\n+import io.zeebe.engine.processor.workflow.CatchEventBehavior;\n+import io.zeebe.engine.processor.workflow.ExpressionProcessor;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableMultiInstanceBody;\n+import io.zeebe.engine.state.ZeebeState;\n+import io.zeebe.engine.state.deployment.WorkflowState;\n+import io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import java.util.function.Consumer;\n+import org.slf4j.Logger;\n+\n+public final class BpmnStreamProcessor implements TypedRecordProcessor<WorkflowInstanceRecord> {\n+\n+  private static final Logger LOGGER = Loggers.WORKFLOW_PROCESSOR_LOGGER;\n+\n+  private final TypesStreamWriterProxy streamWriterProxy = new TypesStreamWriterProxy();\n+\n+  private final BpmnElementContextImpl context;\n+  private final WorkflowState workflowState;\n+  private final BpmnElementProcessors processors;\n+  private final WorkflowInstanceStateTransitionGuard stateTransitionGuard;\n+\n+  private final Consumer<BpmnStepContext<?>> fallback;\n+\n+  public BpmnStreamProcessor(\n+      final ExpressionProcessor expressionProcessor,\n+      final CatchEventBehavior catchEventBehavior,\n+      final ZeebeState zeebeState,\n+      final Consumer<BpmnStepContext<?>> fallback) {\n+    workflowState = zeebeState.getWorkflowState();\n+    context = new BpmnElementContextImpl(zeebeState);\n+\n+    final var bpmnBehaviors =\n+        new BpmnBehaviorsImpl(\n+            expressionProcessor,\n+            streamWriterProxy,\n+            zeebeState,\n+            catchEventBehavior,\n+            this::getContainerProcessor);\n+    processors = new BpmnElementProcessors(bpmnBehaviors);\n+\n+    this.fallback = fallback;\n+    stateTransitionGuard = bpmnBehaviors.stateTransitionGuard();\n+  }\n+\n+  private BpmnElementContainerProcessor<ExecutableFlowElement> getContainerProcessor(\n+      final BpmnElementType elementType) {\n+    return processors.getContainerProcessor(elementType);\n+  }\n+\n+  @Override\n+  public void processRecord(\n+      final TypedRecord<WorkflowInstanceRecord> record,\n+      final TypedResponseWriter responseWriter,\n+      final TypedStreamWriter streamWriter,\n+      final Consumer<SideEffectProducer> sideEffect) {\n+\n+    final var intent = (WorkflowInstanceIntent) record.getIntent();\n+    final var recordValue = record.getValue();\n+    final var bpmnElementType = recordValue.getBpmnElementType();\n+    final var processor = processors.getProcessor(bpmnElementType);\n+\n+    if (processor == null) {\n+      // TODO (saig0): remove multi-instance fallback when the processors of all multi-instance\n+      // elements are migrated\n+      LOGGER.debug(\"[NEW] No processor found for BPMN element type '{}'\", bpmnElementType);\n+\n+      final var multiInstanceBody =\n+          workflowState.getFlowElement(\n+              recordValue.getWorkflowKey(),\n+              recordValue.getElementIdBuffer(),\n+              ExecutableMultiInstanceBody.class);\n+      final var element = multiInstanceBody.getInnerActivity();\n+\n+      streamWriterProxy.wrap(streamWriter);\n+      context.init(record, intent, element, streamWriterProxy, sideEffect);\n+\n+      fallback.accept(context.toStepContext());\n+      return;\n+    }\n+\n+    LOGGER.debug(\n+        \"[NEW] process workflow instance event [BPMN element type: {}, intent: {}]\",\n+        bpmnElementType,\n+        intent);\n+\n+    final ExecutableFlowElement element = getElement(recordValue, processor);\n+\n+    // initialize the stuff\n+    streamWriterProxy.wrap(streamWriter);\n+    context.init(record, intent, element, streamWriterProxy, sideEffect);\n+\n+    // process the event\n+    if (stateTransitionGuard.isValidStateTransition(context)) {\n+      processEvent(intent, processor, element);\n+    }\n+  }\n+\n+  private void processEvent(\n+      final WorkflowInstanceIntent intent,\n+      final BpmnElementProcessor<ExecutableFlowElement> processor,\n+      final ExecutableFlowElement element) {\n+\n+    switch (intent) {\n+      case ELEMENT_ACTIVATING:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3Mjc3MQ=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ2MTE2OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnElementProcessors.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTowMTowMlrOGUhe3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzowODoxM1rOGUkKOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MzI3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final var processor = (BpmnElementProcessor<T>) processors.get(bpmnElementType);\n          \n          \n            \n                if (processor == null) {\n          \n          \n            \n                  //      throw new UnsupportedOperationException(\n          \n          \n            \n                  //          String.format(\"no processor found for BPMN element type '%s'\", bpmnElementType));\n          \n          \n            \n                }\n          \n          \n            \n                return processor;\n          \n          \n            \n              return (BpmnElementProcessor<T>) processors.get(bpmnElementType);", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424173276", "createdAt": "2020-05-13T05:01:02Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnElementProcessors.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.container.MultiInstanceBodyProcessor;\n+import io.zeebe.engine.nwe.container.ProcessProcessor;\n+import io.zeebe.engine.nwe.container.SubProcessProcessor;\n+import io.zeebe.engine.nwe.gateway.ExclusiveGatewayProcessor;\n+import io.zeebe.engine.nwe.task.ServiceTaskProcessor;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import java.util.EnumMap;\n+import java.util.Map;\n+\n+public final class BpmnElementProcessors {\n+\n+  private final Map<BpmnElementType, BpmnElementProcessor<?>> processors =\n+      new EnumMap<>(BpmnElementType.class);\n+\n+  public BpmnElementProcessors(final BpmnBehaviors bpmnBehaviors) {\n+    // tasks\n+    processors.put(BpmnElementType.SERVICE_TASK, new ServiceTaskProcessor(bpmnBehaviors));\n+    // gateways\n+    processors.put(BpmnElementType.EXCLUSIVE_GATEWAY, new ExclusiveGatewayProcessor(bpmnBehaviors));\n+    // containers\n+    processors.put(BpmnElementType.PROCESS, new ProcessProcessor(bpmnBehaviors));\n+    processors.put(BpmnElementType.SUB_PROCESS, new SubProcessProcessor(bpmnBehaviors));\n+    processors.put(\n+        BpmnElementType.MULTI_INSTANCE_BODY, new MultiInstanceBodyProcessor(bpmnBehaviors));\n+  }\n+\n+  public <T extends ExecutableFlowElement> BpmnElementProcessor<T> getProcessor(\n+      final BpmnElementType bpmnElementType) {\n+    if (bpmnElementType == BpmnElementType.SUB_PROCESS\n+        || bpmnElementType == BpmnElementType.PROCESS) {\n+      return null;\n+    }\n+\n+    final var processor = (BpmnElementProcessor<T>) processors.get(bpmnElementType);\n+    if (processor == null) {\n+      //      throw new UnsupportedOperationException(\n+      //          String.format(\"no processor found for BPMN element type '%s'\", bpmnElementType));\n+    }\n+    return processor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxNzE0NQ==", "bodyText": "We will throw an exception here eventually \ud83d\ude09", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424217145", "createdAt": "2020-05-13T07:08:13Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnElementProcessors.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.container.MultiInstanceBodyProcessor;\n+import io.zeebe.engine.nwe.container.ProcessProcessor;\n+import io.zeebe.engine.nwe.container.SubProcessProcessor;\n+import io.zeebe.engine.nwe.gateway.ExclusiveGatewayProcessor;\n+import io.zeebe.engine.nwe.task.ServiceTaskProcessor;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import java.util.EnumMap;\n+import java.util.Map;\n+\n+public final class BpmnElementProcessors {\n+\n+  private final Map<BpmnElementType, BpmnElementProcessor<?>> processors =\n+      new EnumMap<>(BpmnElementType.class);\n+\n+  public BpmnElementProcessors(final BpmnBehaviors bpmnBehaviors) {\n+    // tasks\n+    processors.put(BpmnElementType.SERVICE_TASK, new ServiceTaskProcessor(bpmnBehaviors));\n+    // gateways\n+    processors.put(BpmnElementType.EXCLUSIVE_GATEWAY, new ExclusiveGatewayProcessor(bpmnBehaviors));\n+    // containers\n+    processors.put(BpmnElementType.PROCESS, new ProcessProcessor(bpmnBehaviors));\n+    processors.put(BpmnElementType.SUB_PROCESS, new SubProcessProcessor(bpmnBehaviors));\n+    processors.put(\n+        BpmnElementType.MULTI_INSTANCE_BODY, new MultiInstanceBodyProcessor(bpmnBehaviors));\n+  }\n+\n+  public <T extends ExecutableFlowElement> BpmnElementProcessor<T> getProcessor(\n+      final BpmnElementType bpmnElementType) {\n+    if (bpmnElementType == BpmnElementType.SUB_PROCESS\n+        || bpmnElementType == BpmnElementType.PROCESS) {\n+      return null;\n+    }\n+\n+    final var processor = (BpmnElementProcessor<T>) processors.get(bpmnElementType);\n+    if (processor == null) {\n+      //      throw new UnsupportedOperationException(\n+      //          String.format(\"no processor found for BPMN element type '%s'\", bpmnElementType));\n+    }\n+    return processor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MzI3Ng=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ2MTcxOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnElementProcessors.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTowMToyNVrOGUhfMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1NDo1MFrOGUlt4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MzM2MQ==", "bodyText": "Why?", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424173361", "createdAt": "2020-05-13T05:01:25Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnElementProcessors.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.container.MultiInstanceBodyProcessor;\n+import io.zeebe.engine.nwe.container.ProcessProcessor;\n+import io.zeebe.engine.nwe.container.SubProcessProcessor;\n+import io.zeebe.engine.nwe.gateway.ExclusiveGatewayProcessor;\n+import io.zeebe.engine.nwe.task.ServiceTaskProcessor;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import java.util.EnumMap;\n+import java.util.Map;\n+\n+public final class BpmnElementProcessors {\n+\n+  private final Map<BpmnElementType, BpmnElementProcessor<?>> processors =\n+      new EnumMap<>(BpmnElementType.class);\n+\n+  public BpmnElementProcessors(final BpmnBehaviors bpmnBehaviors) {\n+    // tasks\n+    processors.put(BpmnElementType.SERVICE_TASK, new ServiceTaskProcessor(bpmnBehaviors));\n+    // gateways\n+    processors.put(BpmnElementType.EXCLUSIVE_GATEWAY, new ExclusiveGatewayProcessor(bpmnBehaviors));\n+    // containers\n+    processors.put(BpmnElementType.PROCESS, new ProcessProcessor(bpmnBehaviors));\n+    processors.put(BpmnElementType.SUB_PROCESS, new SubProcessProcessor(bpmnBehaviors));\n+    processors.put(\n+        BpmnElementType.MULTI_INSTANCE_BODY, new MultiInstanceBodyProcessor(bpmnBehaviors));\n+  }\n+\n+  public <T extends ExecutableFlowElement> BpmnElementProcessor<T> getProcessor(\n+      final BpmnElementType bpmnElementType) {\n+    if (bpmnElementType == BpmnElementType.SUB_PROCESS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxNzk3MA==", "bodyText": "A temporary reason because of multi-instance. This check will be removed when the processors for sub-process and process are implemented", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424217970", "createdAt": "2020-05-13T07:09:56Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnElementProcessors.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.container.MultiInstanceBodyProcessor;\n+import io.zeebe.engine.nwe.container.ProcessProcessor;\n+import io.zeebe.engine.nwe.container.SubProcessProcessor;\n+import io.zeebe.engine.nwe.gateway.ExclusiveGatewayProcessor;\n+import io.zeebe.engine.nwe.task.ServiceTaskProcessor;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import java.util.EnumMap;\n+import java.util.Map;\n+\n+public final class BpmnElementProcessors {\n+\n+  private final Map<BpmnElementType, BpmnElementProcessor<?>> processors =\n+      new EnumMap<>(BpmnElementType.class);\n+\n+  public BpmnElementProcessors(final BpmnBehaviors bpmnBehaviors) {\n+    // tasks\n+    processors.put(BpmnElementType.SERVICE_TASK, new ServiceTaskProcessor(bpmnBehaviors));\n+    // gateways\n+    processors.put(BpmnElementType.EXCLUSIVE_GATEWAY, new ExclusiveGatewayProcessor(bpmnBehaviors));\n+    // containers\n+    processors.put(BpmnElementType.PROCESS, new ProcessProcessor(bpmnBehaviors));\n+    processors.put(BpmnElementType.SUB_PROCESS, new SubProcessProcessor(bpmnBehaviors));\n+    processors.put(\n+        BpmnElementType.MULTI_INSTANCE_BODY, new MultiInstanceBodyProcessor(bpmnBehaviors));\n+  }\n+\n+  public <T extends ExecutableFlowElement> BpmnElementProcessor<T> getProcessor(\n+      final BpmnElementType bpmnElementType) {\n+    if (bpmnElementType == BpmnElementType.SUB_PROCESS", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MzM2MQ=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0MjY1OQ==", "bodyText": "Maybe we need to add a todo here, so we don't forget", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424242659", "createdAt": "2020-05-13T07:54:50Z", "author": {"login": "korthout"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnElementProcessors.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.container.MultiInstanceBodyProcessor;\n+import io.zeebe.engine.nwe.container.ProcessProcessor;\n+import io.zeebe.engine.nwe.container.SubProcessProcessor;\n+import io.zeebe.engine.nwe.gateway.ExclusiveGatewayProcessor;\n+import io.zeebe.engine.nwe.task.ServiceTaskProcessor;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import java.util.EnumMap;\n+import java.util.Map;\n+\n+public final class BpmnElementProcessors {\n+\n+  private final Map<BpmnElementType, BpmnElementProcessor<?>> processors =\n+      new EnumMap<>(BpmnElementType.class);\n+\n+  public BpmnElementProcessors(final BpmnBehaviors bpmnBehaviors) {\n+    // tasks\n+    processors.put(BpmnElementType.SERVICE_TASK, new ServiceTaskProcessor(bpmnBehaviors));\n+    // gateways\n+    processors.put(BpmnElementType.EXCLUSIVE_GATEWAY, new ExclusiveGatewayProcessor(bpmnBehaviors));\n+    // containers\n+    processors.put(BpmnElementType.PROCESS, new ProcessProcessor(bpmnBehaviors));\n+    processors.put(BpmnElementType.SUB_PROCESS, new SubProcessProcessor(bpmnBehaviors));\n+    processors.put(\n+        BpmnElementType.MULTI_INSTANCE_BODY, new MultiInstanceBodyProcessor(bpmnBehaviors));\n+  }\n+\n+  public <T extends ExecutableFlowElement> BpmnElementProcessor<T> getProcessor(\n+      final BpmnElementType bpmnElementType) {\n+    if (bpmnElementType == BpmnElementType.SUB_PROCESS", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MzM2MQ=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ2MjY2OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnElementProcessors.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTowMjowNVrOGUhfyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzoxMTowMlrOGUkPwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MzUxNQ==", "bodyText": "Why we sometimes throw exceptions and sometimes return null? \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424173515", "createdAt": "2020-05-13T05:02:05Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnElementProcessors.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.container.MultiInstanceBodyProcessor;\n+import io.zeebe.engine.nwe.container.ProcessProcessor;\n+import io.zeebe.engine.nwe.container.SubProcessProcessor;\n+import io.zeebe.engine.nwe.gateway.ExclusiveGatewayProcessor;\n+import io.zeebe.engine.nwe.task.ServiceTaskProcessor;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import java.util.EnumMap;\n+import java.util.Map;\n+\n+public final class BpmnElementProcessors {\n+\n+  private final Map<BpmnElementType, BpmnElementProcessor<?>> processors =\n+      new EnumMap<>(BpmnElementType.class);\n+\n+  public BpmnElementProcessors(final BpmnBehaviors bpmnBehaviors) {\n+    // tasks\n+    processors.put(BpmnElementType.SERVICE_TASK, new ServiceTaskProcessor(bpmnBehaviors));\n+    // gateways\n+    processors.put(BpmnElementType.EXCLUSIVE_GATEWAY, new ExclusiveGatewayProcessor(bpmnBehaviors));\n+    // containers\n+    processors.put(BpmnElementType.PROCESS, new ProcessProcessor(bpmnBehaviors));\n+    processors.put(BpmnElementType.SUB_PROCESS, new SubProcessProcessor(bpmnBehaviors));\n+    processors.put(\n+        BpmnElementType.MULTI_INSTANCE_BODY, new MultiInstanceBodyProcessor(bpmnBehaviors));\n+  }\n+\n+  public <T extends ExecutableFlowElement> BpmnElementProcessor<T> getProcessor(\n+      final BpmnElementType bpmnElementType) {\n+    if (bpmnElementType == BpmnElementType.SUB_PROCESS\n+        || bpmnElementType == BpmnElementType.PROCESS) {\n+      return null;\n+    }\n+\n+    final var processor = (BpmnElementProcessor<T>) processors.get(bpmnElementType);\n+    if (processor == null) {\n+      //      throw new UnsupportedOperationException(\n+      //          String.format(\"no processor found for BPMN element type '%s'\", bpmnElementType));\n+    }\n+    return processor;\n+  }\n+\n+  public <T extends ExecutableFlowElement> BpmnElementContainerProcessor<T> getContainerProcessor(\n+      final BpmnElementType bpmnElementType) {\n+    switch (bpmnElementType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxODU2Mg==", "bodyText": "Returning null is just a temporary solution caused by the current multi-instance implementation \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424218562", "createdAt": "2020-05-13T07:11:02Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnElementProcessors.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.container.MultiInstanceBodyProcessor;\n+import io.zeebe.engine.nwe.container.ProcessProcessor;\n+import io.zeebe.engine.nwe.container.SubProcessProcessor;\n+import io.zeebe.engine.nwe.gateway.ExclusiveGatewayProcessor;\n+import io.zeebe.engine.nwe.task.ServiceTaskProcessor;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import java.util.EnumMap;\n+import java.util.Map;\n+\n+public final class BpmnElementProcessors {\n+\n+  private final Map<BpmnElementType, BpmnElementProcessor<?>> processors =\n+      new EnumMap<>(BpmnElementType.class);\n+\n+  public BpmnElementProcessors(final BpmnBehaviors bpmnBehaviors) {\n+    // tasks\n+    processors.put(BpmnElementType.SERVICE_TASK, new ServiceTaskProcessor(bpmnBehaviors));\n+    // gateways\n+    processors.put(BpmnElementType.EXCLUSIVE_GATEWAY, new ExclusiveGatewayProcessor(bpmnBehaviors));\n+    // containers\n+    processors.put(BpmnElementType.PROCESS, new ProcessProcessor(bpmnBehaviors));\n+    processors.put(BpmnElementType.SUB_PROCESS, new SubProcessProcessor(bpmnBehaviors));\n+    processors.put(\n+        BpmnElementType.MULTI_INSTANCE_BODY, new MultiInstanceBodyProcessor(bpmnBehaviors));\n+  }\n+\n+  public <T extends ExecutableFlowElement> BpmnElementProcessor<T> getProcessor(\n+      final BpmnElementType bpmnElementType) {\n+    if (bpmnElementType == BpmnElementType.SUB_PROCESS\n+        || bpmnElementType == BpmnElementType.PROCESS) {\n+      return null;\n+    }\n+\n+    final var processor = (BpmnElementProcessor<T>) processors.get(bpmnElementType);\n+    if (processor == null) {\n+      //      throw new UnsupportedOperationException(\n+      //          String.format(\"no processor found for BPMN element type '%s'\", bpmnElementType));\n+    }\n+    return processor;\n+  }\n+\n+  public <T extends ExecutableFlowElement> BpmnElementContainerProcessor<T> getContainerProcessor(\n+      final BpmnElementType bpmnElementType) {\n+    switch (bpmnElementType) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MzUxNQ=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ3MDgyOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/WorkflowInstanceStateTransitionGuard.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTowNjozOFrOGUhkiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzoxMjo0MlrOGUkSow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NDczMQ==", "bodyText": "shouldn't we check the ok value?", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424174731", "createdAt": "2020-05-13T05:06:38Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/WorkflowInstanceStateTransitionGuard.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.Loggers;\n+import io.zeebe.engine.nwe.behavior.BpmnStateBehavior;\n+import io.zeebe.engine.state.instance.ElementInstance;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import io.zeebe.util.Either;\n+import org.slf4j.Logger;\n+\n+/**\n+ * A check to prevent concurrent state transitions of a workflow instance.\n+ *\n+ * <p>A workflow instance can be have concurrent state transitions if a user command is received\n+ * (e.g. cancel workflow instance) or if an internal/external event is triggered (e.g. timer\n+ * boundary event). In this case, the current workflow instance processing needs to be interrupted\n+ * be avoid an inconsistent state.\n+ */\n+public final class WorkflowInstanceStateTransitionGuard {\n+\n+  private static final Logger LOGGER = Loggers.WORKFLOW_PROCESSOR_LOGGER;\n+\n+  private final BpmnStateBehavior stateBehavior;\n+\n+  public WorkflowInstanceStateTransitionGuard(final BpmnStateBehavior stateBehavior) {\n+    this.stateBehavior = stateBehavior;\n+  }\n+\n+  /**\n+   * Checks if a workflow instance event can be processed based on the current state.\n+   *\n+   * @return {@code true} if the transition is valid.\n+   */\n+  public boolean isValidStateTransition(final BpmnElementContext context) {\n+    final var result = checkStateTransition(context);\n+\n+    // log the reason for better debugging\n+    result.ifLeft(\n+        violation ->\n+            LOGGER.debug(\n+                \"Don't process event because of an illegal state transition: {} [context: {}]\",\n+                violation,\n+                context));\n+\n+    return result.isRight();\n+  }\n+\n+  private Either<String, ?> checkStateTransition(final BpmnElementContext context) {\n+    switch (context.getIntent()) {\n+      case ELEMENT_ACTIVATING:\n+      case ELEMENT_ACTIVATED:\n+      case ELEMENT_COMPLETING:\n+      case ELEMENT_COMPLETED:\n+        return hasElementInstanceWithState(context, context.getIntent())\n+            .flatMap(ok -> hasActiveFlowScopeInstance(context));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIxOTI5OQ==", "bodyText": "Nope. ok is just ok \ud83d\ude1b\nIn this case, ok is from type Void and we don't want to consume it.", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424219299", "createdAt": "2020-05-13T07:12:42Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/WorkflowInstanceStateTransitionGuard.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.Loggers;\n+import io.zeebe.engine.nwe.behavior.BpmnStateBehavior;\n+import io.zeebe.engine.state.instance.ElementInstance;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import io.zeebe.util.Either;\n+import org.slf4j.Logger;\n+\n+/**\n+ * A check to prevent concurrent state transitions of a workflow instance.\n+ *\n+ * <p>A workflow instance can be have concurrent state transitions if a user command is received\n+ * (e.g. cancel workflow instance) or if an internal/external event is triggered (e.g. timer\n+ * boundary event). In this case, the current workflow instance processing needs to be interrupted\n+ * be avoid an inconsistent state.\n+ */\n+public final class WorkflowInstanceStateTransitionGuard {\n+\n+  private static final Logger LOGGER = Loggers.WORKFLOW_PROCESSOR_LOGGER;\n+\n+  private final BpmnStateBehavior stateBehavior;\n+\n+  public WorkflowInstanceStateTransitionGuard(final BpmnStateBehavior stateBehavior) {\n+    this.stateBehavior = stateBehavior;\n+  }\n+\n+  /**\n+   * Checks if a workflow instance event can be processed based on the current state.\n+   *\n+   * @return {@code true} if the transition is valid.\n+   */\n+  public boolean isValidStateTransition(final BpmnElementContext context) {\n+    final var result = checkStateTransition(context);\n+\n+    // log the reason for better debugging\n+    result.ifLeft(\n+        violation ->\n+            LOGGER.debug(\n+                \"Don't process event because of an illegal state transition: {} [context: {}]\",\n+                violation,\n+                context));\n+\n+    return result.isRight();\n+  }\n+\n+  private Either<String, ?> checkStateTransition(final BpmnElementContext context) {\n+    switch (context.getIntent()) {\n+      case ELEMENT_ACTIVATING:\n+      case ELEMENT_ACTIVATED:\n+      case ELEMENT_COMPLETING:\n+      case ELEMENT_COMPLETED:\n+        return hasElementInstanceWithState(context, context.getIntent())\n+            .flatMap(ok -> hasActiveFlowScopeInstance(context));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NDczMQ=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ3MjQyOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/WorkflowInstanceStateTransitionGuard.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTowNzoyNFrOGUhlZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzoxNTowNVrOGUkXcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NDk1MQ==", "bodyText": "What is the difference between our old Tuple class and now this either class ? \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424174951", "createdAt": "2020-05-13T05:07:24Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/WorkflowInstanceStateTransitionGuard.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.Loggers;\n+import io.zeebe.engine.nwe.behavior.BpmnStateBehavior;\n+import io.zeebe.engine.state.instance.ElementInstance;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import io.zeebe.util.Either;\n+import org.slf4j.Logger;\n+\n+/**\n+ * A check to prevent concurrent state transitions of a workflow instance.\n+ *\n+ * <p>A workflow instance can be have concurrent state transitions if a user command is received\n+ * (e.g. cancel workflow instance) or if an internal/external event is triggered (e.g. timer\n+ * boundary event). In this case, the current workflow instance processing needs to be interrupted\n+ * be avoid an inconsistent state.\n+ */\n+public final class WorkflowInstanceStateTransitionGuard {\n+\n+  private static final Logger LOGGER = Loggers.WORKFLOW_PROCESSOR_LOGGER;\n+\n+  private final BpmnStateBehavior stateBehavior;\n+\n+  public WorkflowInstanceStateTransitionGuard(final BpmnStateBehavior stateBehavior) {\n+    this.stateBehavior = stateBehavior;\n+  }\n+\n+  /**\n+   * Checks if a workflow instance event can be processed based on the current state.\n+   *\n+   * @return {@code true} if the transition is valid.\n+   */\n+  public boolean isValidStateTransition(final BpmnElementContext context) {\n+    final var result = checkStateTransition(context);\n+\n+    // log the reason for better debugging\n+    result.ifLeft(\n+        violation ->\n+            LOGGER.debug(\n+                \"Don't process event because of an illegal state transition: {} [context: {}]\",\n+                violation,\n+                context));\n+\n+    return result.isRight();\n+  }\n+\n+  private Either<String, ?> checkStateTransition(final BpmnElementContext context) {\n+    switch (context.getIntent()) {\n+      case ELEMENT_ACTIVATING:\n+      case ELEMENT_ACTIVATED:\n+      case ELEMENT_COMPLETING:\n+      case ELEMENT_COMPLETED:\n+        return hasElementInstanceWithState(context, context.getIntent())\n+            .flatMap(ok -> hasActiveFlowScopeInstance(context));\n+\n+      case ELEMENT_TERMINATING:\n+      case ELEMENT_TERMINATED:\n+        return hasElementInstanceWithState(context, context.getIntent());\n+\n+      case EVENT_OCCURRED:\n+        return hasElementInstanceWithState(context, WorkflowInstanceIntent.ELEMENT_ACTIVATED);\n+\n+      case SEQUENCE_FLOW_TAKEN:\n+        return hasActiveFlowScopeInstance(context);\n+\n+      default:\n+        return Either.left(\n+            String.format(\n+                \"Expected event to have a workflow instance intent but was '%s'\",\n+                context.getIntent()));\n+    }\n+  }\n+\n+  private Either<String, ElementInstance> getElementInstance(final BpmnElementContext context) {\n+    final var elementInstance = stateBehavior.getElementInstance(context);\n+    if (elementInstance != null) {\n+      return Either.right(elementInstance);\n+\n+    } else {\n+      return Either.left(\n+          String.format(\n+              \"Expected element instance with key '%d' to be present in state but not found.\",\n+              context.getElementInstanceKey()));\n+    }\n+  }\n+\n+  private Either<String, ElementInstance> getFlowScopeInstance(final BpmnElementContext context) {\n+    final var flowScopeInstance = stateBehavior.getFlowScopeInstance(context);\n+    if (flowScopeInstance != null) {\n+      return Either.right(flowScopeInstance);\n+\n+    } else {\n+      return Either.left(\n+          String.format(\n+              \"Expected flow scope instance with key '%d' to be present in state but not found.\",\n+              context.getElementInstanceKey()));\n+    }\n+  }\n+\n+  private Either<String, ElementInstance> hasElementInstanceInState(\n+      final ElementInstance elementInstance, final WorkflowInstanceIntent expectedState) {\n+    final var currentState = elementInstance.getState();\n+    if (currentState != expectedState) {\n+      return Either.left(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyMDUyOQ==", "bodyText": "Either is a way more powerful \ud83d\ude80\nIt has basically nice functions like map() and flatMap() that allows chaining the method calls and make it more readable.", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424220529", "createdAt": "2020-05-13T07:15:05Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/WorkflowInstanceStateTransitionGuard.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe;\n+\n+import io.zeebe.engine.Loggers;\n+import io.zeebe.engine.nwe.behavior.BpmnStateBehavior;\n+import io.zeebe.engine.state.instance.ElementInstance;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import io.zeebe.util.Either;\n+import org.slf4j.Logger;\n+\n+/**\n+ * A check to prevent concurrent state transitions of a workflow instance.\n+ *\n+ * <p>A workflow instance can be have concurrent state transitions if a user command is received\n+ * (e.g. cancel workflow instance) or if an internal/external event is triggered (e.g. timer\n+ * boundary event). In this case, the current workflow instance processing needs to be interrupted\n+ * be avoid an inconsistent state.\n+ */\n+public final class WorkflowInstanceStateTransitionGuard {\n+\n+  private static final Logger LOGGER = Loggers.WORKFLOW_PROCESSOR_LOGGER;\n+\n+  private final BpmnStateBehavior stateBehavior;\n+\n+  public WorkflowInstanceStateTransitionGuard(final BpmnStateBehavior stateBehavior) {\n+    this.stateBehavior = stateBehavior;\n+  }\n+\n+  /**\n+   * Checks if a workflow instance event can be processed based on the current state.\n+   *\n+   * @return {@code true} if the transition is valid.\n+   */\n+  public boolean isValidStateTransition(final BpmnElementContext context) {\n+    final var result = checkStateTransition(context);\n+\n+    // log the reason for better debugging\n+    result.ifLeft(\n+        violation ->\n+            LOGGER.debug(\n+                \"Don't process event because of an illegal state transition: {} [context: {}]\",\n+                violation,\n+                context));\n+\n+    return result.isRight();\n+  }\n+\n+  private Either<String, ?> checkStateTransition(final BpmnElementContext context) {\n+    switch (context.getIntent()) {\n+      case ELEMENT_ACTIVATING:\n+      case ELEMENT_ACTIVATED:\n+      case ELEMENT_COMPLETING:\n+      case ELEMENT_COMPLETED:\n+        return hasElementInstanceWithState(context, context.getIntent())\n+            .flatMap(ok -> hasActiveFlowScopeInstance(context));\n+\n+      case ELEMENT_TERMINATING:\n+      case ELEMENT_TERMINATED:\n+        return hasElementInstanceWithState(context, context.getIntent());\n+\n+      case EVENT_OCCURRED:\n+        return hasElementInstanceWithState(context, WorkflowInstanceIntent.ELEMENT_ACTIVATED);\n+\n+      case SEQUENCE_FLOW_TAKEN:\n+        return hasActiveFlowScopeInstance(context);\n+\n+      default:\n+        return Either.left(\n+            String.format(\n+                \"Expected event to have a workflow instance intent but was '%s'\",\n+                context.getIntent()));\n+    }\n+  }\n+\n+  private Either<String, ElementInstance> getElementInstance(final BpmnElementContext context) {\n+    final var elementInstance = stateBehavior.getElementInstance(context);\n+    if (elementInstance != null) {\n+      return Either.right(elementInstance);\n+\n+    } else {\n+      return Either.left(\n+          String.format(\n+              \"Expected element instance with key '%d' to be present in state but not found.\",\n+              context.getElementInstanceKey()));\n+    }\n+  }\n+\n+  private Either<String, ElementInstance> getFlowScopeInstance(final BpmnElementContext context) {\n+    final var flowScopeInstance = stateBehavior.getFlowScopeInstance(context);\n+    if (flowScopeInstance != null) {\n+      return Either.right(flowScopeInstance);\n+\n+    } else {\n+      return Either.left(\n+          String.format(\n+              \"Expected flow scope instance with key '%d' to be present in state but not found.\",\n+              context.getElementInstanceKey()));\n+    }\n+  }\n+\n+  private Either<String, ElementInstance> hasElementInstanceInState(\n+      final ElementInstance elementInstance, final WorkflowInstanceIntent expectedState) {\n+    final var currentState = elementInstance.getState();\n+    if (currentState != expectedState) {\n+      return Either.left(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NDk1MQ=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ3NTA1OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnEventSubscriptionBehavior.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTowODozN1rOGUhmxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzoxNjoyM1rOGUkZ4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NTMwMw==", "bodyText": "can we have comment why this could happen?", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424175303", "createdAt": "2020-05-13T05:08:37Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnEventSubscriptionBehavior.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.behavior;\n+\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.processor.Failure;\n+import io.zeebe.engine.processor.KeyGenerator;\n+import io.zeebe.engine.processor.TypedStreamWriter;\n+import io.zeebe.engine.processor.workflow.CatchEventBehavior;\n+import io.zeebe.engine.processor.workflow.ExpressionProcessor.EvaluationException;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableActivity;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableBoundaryEvent;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableCatchEventSupplier;\n+import io.zeebe.engine.processor.workflow.message.MessageCorrelationKeyException;\n+import io.zeebe.engine.state.ZeebeState;\n+import io.zeebe.engine.state.instance.ElementInstance;\n+import io.zeebe.engine.state.instance.ElementInstanceState;\n+import io.zeebe.engine.state.instance.EventScopeInstanceState;\n+import io.zeebe.engine.state.instance.EventTrigger;\n+import io.zeebe.engine.state.instance.StoredRecord.Purpose;\n+import io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import io.zeebe.protocol.record.value.ErrorType;\n+import io.zeebe.util.Either;\n+import io.zeebe.util.buffer.BufferUtil;\n+\n+public final class BpmnEventSubscriptionBehavior {\n+\n+  private final WorkflowInstanceRecord eventRecord = new WorkflowInstanceRecord();\n+\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final EventScopeInstanceState eventScopeInstanceState;\n+  private final ElementInstanceState elementInstanceState;\n+  private final CatchEventBehavior catchEventBehavior;\n+  private final TypedStreamWriter streamWriter;\n+  private final KeyGenerator keyGenerator;\n+\n+  public BpmnEventSubscriptionBehavior(\n+      final BpmnStateBehavior stateBehavior,\n+      final BpmnStateTransitionBehavior stateTransitionBehavior,\n+      final CatchEventBehavior catchEventBehavior,\n+      final TypedStreamWriter streamWriter,\n+      final ZeebeState zeebeState) {\n+    this.stateBehavior = stateBehavior;\n+    this.stateTransitionBehavior = stateTransitionBehavior;\n+    this.catchEventBehavior = catchEventBehavior;\n+    this.streamWriter = streamWriter;\n+\n+    eventScopeInstanceState = zeebeState.getWorkflowState().getEventScopeInstanceState();\n+    elementInstanceState = zeebeState.getWorkflowState().getElementInstanceState();\n+    keyGenerator = zeebeState.getKeyGenerator();\n+  }\n+\n+  public <T extends ExecutableActivity> void triggerBoundaryEvent(\n+      final T element, final BpmnElementContext context) {\n+    final var eventTrigger =\n+        eventScopeInstanceState.peekEventTrigger(context.getElementInstanceKey());\n+\n+    if (eventTrigger == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyMTE1Mg==", "bodyText": "I think the event trigger is removed when the element (i.e. its event scope) is left. I will add this as a comment.", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424221152", "createdAt": "2020-05-13T07:16:23Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnEventSubscriptionBehavior.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.behavior;\n+\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.processor.Failure;\n+import io.zeebe.engine.processor.KeyGenerator;\n+import io.zeebe.engine.processor.TypedStreamWriter;\n+import io.zeebe.engine.processor.workflow.CatchEventBehavior;\n+import io.zeebe.engine.processor.workflow.ExpressionProcessor.EvaluationException;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableActivity;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableBoundaryEvent;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableCatchEventSupplier;\n+import io.zeebe.engine.processor.workflow.message.MessageCorrelationKeyException;\n+import io.zeebe.engine.state.ZeebeState;\n+import io.zeebe.engine.state.instance.ElementInstance;\n+import io.zeebe.engine.state.instance.ElementInstanceState;\n+import io.zeebe.engine.state.instance.EventScopeInstanceState;\n+import io.zeebe.engine.state.instance.EventTrigger;\n+import io.zeebe.engine.state.instance.StoredRecord.Purpose;\n+import io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import io.zeebe.protocol.record.value.ErrorType;\n+import io.zeebe.util.Either;\n+import io.zeebe.util.buffer.BufferUtil;\n+\n+public final class BpmnEventSubscriptionBehavior {\n+\n+  private final WorkflowInstanceRecord eventRecord = new WorkflowInstanceRecord();\n+\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final EventScopeInstanceState eventScopeInstanceState;\n+  private final ElementInstanceState elementInstanceState;\n+  private final CatchEventBehavior catchEventBehavior;\n+  private final TypedStreamWriter streamWriter;\n+  private final KeyGenerator keyGenerator;\n+\n+  public BpmnEventSubscriptionBehavior(\n+      final BpmnStateBehavior stateBehavior,\n+      final BpmnStateTransitionBehavior stateTransitionBehavior,\n+      final CatchEventBehavior catchEventBehavior,\n+      final TypedStreamWriter streamWriter,\n+      final ZeebeState zeebeState) {\n+    this.stateBehavior = stateBehavior;\n+    this.stateTransitionBehavior = stateTransitionBehavior;\n+    this.catchEventBehavior = catchEventBehavior;\n+    this.streamWriter = streamWriter;\n+\n+    eventScopeInstanceState = zeebeState.getWorkflowState().getEventScopeInstanceState();\n+    elementInstanceState = zeebeState.getWorkflowState().getElementInstanceState();\n+    keyGenerator = zeebeState.getKeyGenerator();\n+  }\n+\n+  public <T extends ExecutableActivity> void triggerBoundaryEvent(\n+      final T element, final BpmnElementContext context) {\n+    final var eventTrigger =\n+        eventScopeInstanceState.peekEventTrigger(context.getElementInstanceKey());\n+\n+    if (eventTrigger == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NTMwMw=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ3NzA5OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnEventSubscriptionBehavior.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTowOTozNVrOGUhn4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMDowMDowM1rOGVVCXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NTU4NQ==", "bodyText": "What is the benefit here to use this either?", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424175585", "createdAt": "2020-05-13T05:09:35Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnEventSubscriptionBehavior.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.behavior;\n+\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.processor.Failure;\n+import io.zeebe.engine.processor.KeyGenerator;\n+import io.zeebe.engine.processor.TypedStreamWriter;\n+import io.zeebe.engine.processor.workflow.CatchEventBehavior;\n+import io.zeebe.engine.processor.workflow.ExpressionProcessor.EvaluationException;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableActivity;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableBoundaryEvent;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableCatchEventSupplier;\n+import io.zeebe.engine.processor.workflow.message.MessageCorrelationKeyException;\n+import io.zeebe.engine.state.ZeebeState;\n+import io.zeebe.engine.state.instance.ElementInstance;\n+import io.zeebe.engine.state.instance.ElementInstanceState;\n+import io.zeebe.engine.state.instance.EventScopeInstanceState;\n+import io.zeebe.engine.state.instance.EventTrigger;\n+import io.zeebe.engine.state.instance.StoredRecord.Purpose;\n+import io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import io.zeebe.protocol.record.value.ErrorType;\n+import io.zeebe.util.Either;\n+import io.zeebe.util.buffer.BufferUtil;\n+\n+public final class BpmnEventSubscriptionBehavior {\n+\n+  private final WorkflowInstanceRecord eventRecord = new WorkflowInstanceRecord();\n+\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final EventScopeInstanceState eventScopeInstanceState;\n+  private final ElementInstanceState elementInstanceState;\n+  private final CatchEventBehavior catchEventBehavior;\n+  private final TypedStreamWriter streamWriter;\n+  private final KeyGenerator keyGenerator;\n+\n+  public BpmnEventSubscriptionBehavior(\n+      final BpmnStateBehavior stateBehavior,\n+      final BpmnStateTransitionBehavior stateTransitionBehavior,\n+      final CatchEventBehavior catchEventBehavior,\n+      final TypedStreamWriter streamWriter,\n+      final ZeebeState zeebeState) {\n+    this.stateBehavior = stateBehavior;\n+    this.stateTransitionBehavior = stateTransitionBehavior;\n+    this.catchEventBehavior = catchEventBehavior;\n+    this.streamWriter = streamWriter;\n+\n+    eventScopeInstanceState = zeebeState.getWorkflowState().getEventScopeInstanceState();\n+    elementInstanceState = zeebeState.getWorkflowState().getElementInstanceState();\n+    keyGenerator = zeebeState.getKeyGenerator();\n+  }\n+\n+  public <T extends ExecutableActivity> void triggerBoundaryEvent(\n+      final T element, final BpmnElementContext context) {\n+    final var eventTrigger =\n+        eventScopeInstanceState.peekEventTrigger(context.getElementInstanceKey());\n+\n+    if (eventTrigger == null) {\n+      // discard event\n+      return;\n+    }\n+\n+    eventRecord.reset();\n+    eventRecord.wrap(context.getRecordValue());\n+    eventRecord.setElementId(eventTrigger.getElementId());\n+    eventRecord.setBpmnElementType(BpmnElementType.BOUNDARY_EVENT);\n+\n+    final var boundaryEvent = getBoundaryEvent(element, context, eventTrigger);\n+\n+    final long boundaryElementInstanceKey = keyGenerator.nextKey();\n+    if (boundaryEvent.interrupting()) {\n+\n+      deferBoundaryEvent(context, boundaryElementInstanceKey);\n+\n+      stateTransitionBehavior.transitionToTerminating(context);\n+\n+    } else {\n+      activateBoundaryEvent(context, boundaryElementInstanceKey, eventRecord);\n+    }\n+\n+    stateBehavior\n+        .getVariablesState()\n+        .setTemporaryVariables(boundaryElementInstanceKey, eventTrigger.getVariables());\n+\n+    eventScopeInstanceState.deleteTrigger(\n+        context.getElementInstanceKey(), eventTrigger.getEventKey());\n+  }\n+\n+  private <T extends ExecutableActivity> ExecutableBoundaryEvent getBoundaryEvent(\n+      final T element, final BpmnElementContext context, final EventTrigger eventTrigger) {\n+\n+    return element.getBoundaryEvents().stream()\n+        .filter(boundaryEvent -> boundaryEvent.getId().equals(eventTrigger.getElementId()))\n+        .findFirst()\n+        .orElseThrow(\n+            () ->\n+                new IllegalStateException(\n+                    String.format(\n+                        \"Expected boundary event with id '%s' but not found. [context: %s]\",\n+                        BufferUtil.bufferAsString(eventTrigger.getElementId()), context)));\n+  }\n+\n+  private void deferBoundaryEvent(\n+      final BpmnElementContext context, final long boundaryElementInstanceKey) {\n+\n+    elementInstanceState.storeRecord(\n+        boundaryElementInstanceKey,\n+        context.getElementInstanceKey(),\n+        eventRecord,\n+        WorkflowInstanceIntent.ELEMENT_ACTIVATING,\n+        Purpose.DEFERRED);\n+  }\n+\n+  public void publishTriggeredBoundaryEvent(final BpmnElementContext context) {\n+\n+    elementInstanceState.getDeferredRecords(context.getElementInstanceKey()).stream()\n+        .filter(record -> record.getValue().getBpmnElementType() == BpmnElementType.BOUNDARY_EVENT)\n+        .findFirst()\n+        .ifPresent(\n+            deferredRecord ->\n+                activateBoundaryEvent(context, deferredRecord.getKey(), deferredRecord.getValue()));\n+  }\n+\n+  private void activateBoundaryEvent(\n+      final BpmnElementContext context,\n+      final long elementInstanceKey,\n+      final WorkflowInstanceRecord eventRecord) {\n+\n+    streamWriter.appendNewEvent(\n+        elementInstanceKey, WorkflowInstanceIntent.ELEMENT_ACTIVATING, eventRecord);\n+\n+    stateBehavior.createElementInstanceInFlowScope(context, elementInstanceKey, eventRecord);\n+    stateBehavior.spawnToken(context);\n+  }\n+\n+  public <T extends ExecutableCatchEventSupplier> Either<Failure, Void> subscribeToEvents(\n+      final T element, final BpmnElementContext context) {\n+\n+    try {\n+      catchEventBehavior.subscribeToEvents(context.toStepContext(), element);\n+      return Either.right(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyMzM3Ng==", "bodyText": "It allows chaining the method calls. See here:\nvariableMappingBehavior\n        .applyInputMappings(context, element)\n        .flatMap(ok -> eventSubscriptionBehavior.subscribeToEvents(element, context))\n        .ifRightOrLeft(\n            ok -> stateTransitionBehavior.transitionToActivated(context),\n            failure -> incidentBehavior.createIncident(failure, context));\n\nWithout the Either, this logic is a mess. We need to create an incident is something bad happens while applying the input mappings or subscribing to the events. If everything is ok then we can take the transition to the next state.", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424223376", "createdAt": "2020-05-13T07:20:52Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnEventSubscriptionBehavior.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.behavior;\n+\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.processor.Failure;\n+import io.zeebe.engine.processor.KeyGenerator;\n+import io.zeebe.engine.processor.TypedStreamWriter;\n+import io.zeebe.engine.processor.workflow.CatchEventBehavior;\n+import io.zeebe.engine.processor.workflow.ExpressionProcessor.EvaluationException;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableActivity;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableBoundaryEvent;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableCatchEventSupplier;\n+import io.zeebe.engine.processor.workflow.message.MessageCorrelationKeyException;\n+import io.zeebe.engine.state.ZeebeState;\n+import io.zeebe.engine.state.instance.ElementInstance;\n+import io.zeebe.engine.state.instance.ElementInstanceState;\n+import io.zeebe.engine.state.instance.EventScopeInstanceState;\n+import io.zeebe.engine.state.instance.EventTrigger;\n+import io.zeebe.engine.state.instance.StoredRecord.Purpose;\n+import io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import io.zeebe.protocol.record.value.ErrorType;\n+import io.zeebe.util.Either;\n+import io.zeebe.util.buffer.BufferUtil;\n+\n+public final class BpmnEventSubscriptionBehavior {\n+\n+  private final WorkflowInstanceRecord eventRecord = new WorkflowInstanceRecord();\n+\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final EventScopeInstanceState eventScopeInstanceState;\n+  private final ElementInstanceState elementInstanceState;\n+  private final CatchEventBehavior catchEventBehavior;\n+  private final TypedStreamWriter streamWriter;\n+  private final KeyGenerator keyGenerator;\n+\n+  public BpmnEventSubscriptionBehavior(\n+      final BpmnStateBehavior stateBehavior,\n+      final BpmnStateTransitionBehavior stateTransitionBehavior,\n+      final CatchEventBehavior catchEventBehavior,\n+      final TypedStreamWriter streamWriter,\n+      final ZeebeState zeebeState) {\n+    this.stateBehavior = stateBehavior;\n+    this.stateTransitionBehavior = stateTransitionBehavior;\n+    this.catchEventBehavior = catchEventBehavior;\n+    this.streamWriter = streamWriter;\n+\n+    eventScopeInstanceState = zeebeState.getWorkflowState().getEventScopeInstanceState();\n+    elementInstanceState = zeebeState.getWorkflowState().getElementInstanceState();\n+    keyGenerator = zeebeState.getKeyGenerator();\n+  }\n+\n+  public <T extends ExecutableActivity> void triggerBoundaryEvent(\n+      final T element, final BpmnElementContext context) {\n+    final var eventTrigger =\n+        eventScopeInstanceState.peekEventTrigger(context.getElementInstanceKey());\n+\n+    if (eventTrigger == null) {\n+      // discard event\n+      return;\n+    }\n+\n+    eventRecord.reset();\n+    eventRecord.wrap(context.getRecordValue());\n+    eventRecord.setElementId(eventTrigger.getElementId());\n+    eventRecord.setBpmnElementType(BpmnElementType.BOUNDARY_EVENT);\n+\n+    final var boundaryEvent = getBoundaryEvent(element, context, eventTrigger);\n+\n+    final long boundaryElementInstanceKey = keyGenerator.nextKey();\n+    if (boundaryEvent.interrupting()) {\n+\n+      deferBoundaryEvent(context, boundaryElementInstanceKey);\n+\n+      stateTransitionBehavior.transitionToTerminating(context);\n+\n+    } else {\n+      activateBoundaryEvent(context, boundaryElementInstanceKey, eventRecord);\n+    }\n+\n+    stateBehavior\n+        .getVariablesState()\n+        .setTemporaryVariables(boundaryElementInstanceKey, eventTrigger.getVariables());\n+\n+    eventScopeInstanceState.deleteTrigger(\n+        context.getElementInstanceKey(), eventTrigger.getEventKey());\n+  }\n+\n+  private <T extends ExecutableActivity> ExecutableBoundaryEvent getBoundaryEvent(\n+      final T element, final BpmnElementContext context, final EventTrigger eventTrigger) {\n+\n+    return element.getBoundaryEvents().stream()\n+        .filter(boundaryEvent -> boundaryEvent.getId().equals(eventTrigger.getElementId()))\n+        .findFirst()\n+        .orElseThrow(\n+            () ->\n+                new IllegalStateException(\n+                    String.format(\n+                        \"Expected boundary event with id '%s' but not found. [context: %s]\",\n+                        BufferUtil.bufferAsString(eventTrigger.getElementId()), context)));\n+  }\n+\n+  private void deferBoundaryEvent(\n+      final BpmnElementContext context, final long boundaryElementInstanceKey) {\n+\n+    elementInstanceState.storeRecord(\n+        boundaryElementInstanceKey,\n+        context.getElementInstanceKey(),\n+        eventRecord,\n+        WorkflowInstanceIntent.ELEMENT_ACTIVATING,\n+        Purpose.DEFERRED);\n+  }\n+\n+  public void publishTriggeredBoundaryEvent(final BpmnElementContext context) {\n+\n+    elementInstanceState.getDeferredRecords(context.getElementInstanceKey()).stream()\n+        .filter(record -> record.getValue().getBpmnElementType() == BpmnElementType.BOUNDARY_EVENT)\n+        .findFirst()\n+        .ifPresent(\n+            deferredRecord ->\n+                activateBoundaryEvent(context, deferredRecord.getKey(), deferredRecord.getValue()));\n+  }\n+\n+  private void activateBoundaryEvent(\n+      final BpmnElementContext context,\n+      final long elementInstanceKey,\n+      final WorkflowInstanceRecord eventRecord) {\n+\n+    streamWriter.appendNewEvent(\n+        elementInstanceKey, WorkflowInstanceIntent.ELEMENT_ACTIVATING, eventRecord);\n+\n+    stateBehavior.createElementInstanceInFlowScope(context, elementInstanceKey, eventRecord);\n+    stateBehavior.spawnToken(context);\n+  }\n+\n+  public <T extends ExecutableCatchEventSupplier> Either<Failure, Void> subscribeToEvents(\n+      final T element, final BpmnElementContext context) {\n+\n+    try {\n+      catchEventBehavior.subscribeToEvents(context.toStepContext(), element);\n+      return Either.right(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NTU4NQ=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAxNzk1MA==", "bodyText": "thanks", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r425017950", "createdAt": "2020-05-14T10:00:03Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnEventSubscriptionBehavior.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.behavior;\n+\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.processor.Failure;\n+import io.zeebe.engine.processor.KeyGenerator;\n+import io.zeebe.engine.processor.TypedStreamWriter;\n+import io.zeebe.engine.processor.workflow.CatchEventBehavior;\n+import io.zeebe.engine.processor.workflow.ExpressionProcessor.EvaluationException;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableActivity;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableBoundaryEvent;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableCatchEventSupplier;\n+import io.zeebe.engine.processor.workflow.message.MessageCorrelationKeyException;\n+import io.zeebe.engine.state.ZeebeState;\n+import io.zeebe.engine.state.instance.ElementInstance;\n+import io.zeebe.engine.state.instance.ElementInstanceState;\n+import io.zeebe.engine.state.instance.EventScopeInstanceState;\n+import io.zeebe.engine.state.instance.EventTrigger;\n+import io.zeebe.engine.state.instance.StoredRecord.Purpose;\n+import io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import io.zeebe.protocol.record.value.ErrorType;\n+import io.zeebe.util.Either;\n+import io.zeebe.util.buffer.BufferUtil;\n+\n+public final class BpmnEventSubscriptionBehavior {\n+\n+  private final WorkflowInstanceRecord eventRecord = new WorkflowInstanceRecord();\n+\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final EventScopeInstanceState eventScopeInstanceState;\n+  private final ElementInstanceState elementInstanceState;\n+  private final CatchEventBehavior catchEventBehavior;\n+  private final TypedStreamWriter streamWriter;\n+  private final KeyGenerator keyGenerator;\n+\n+  public BpmnEventSubscriptionBehavior(\n+      final BpmnStateBehavior stateBehavior,\n+      final BpmnStateTransitionBehavior stateTransitionBehavior,\n+      final CatchEventBehavior catchEventBehavior,\n+      final TypedStreamWriter streamWriter,\n+      final ZeebeState zeebeState) {\n+    this.stateBehavior = stateBehavior;\n+    this.stateTransitionBehavior = stateTransitionBehavior;\n+    this.catchEventBehavior = catchEventBehavior;\n+    this.streamWriter = streamWriter;\n+\n+    eventScopeInstanceState = zeebeState.getWorkflowState().getEventScopeInstanceState();\n+    elementInstanceState = zeebeState.getWorkflowState().getElementInstanceState();\n+    keyGenerator = zeebeState.getKeyGenerator();\n+  }\n+\n+  public <T extends ExecutableActivity> void triggerBoundaryEvent(\n+      final T element, final BpmnElementContext context) {\n+    final var eventTrigger =\n+        eventScopeInstanceState.peekEventTrigger(context.getElementInstanceKey());\n+\n+    if (eventTrigger == null) {\n+      // discard event\n+      return;\n+    }\n+\n+    eventRecord.reset();\n+    eventRecord.wrap(context.getRecordValue());\n+    eventRecord.setElementId(eventTrigger.getElementId());\n+    eventRecord.setBpmnElementType(BpmnElementType.BOUNDARY_EVENT);\n+\n+    final var boundaryEvent = getBoundaryEvent(element, context, eventTrigger);\n+\n+    final long boundaryElementInstanceKey = keyGenerator.nextKey();\n+    if (boundaryEvent.interrupting()) {\n+\n+      deferBoundaryEvent(context, boundaryElementInstanceKey);\n+\n+      stateTransitionBehavior.transitionToTerminating(context);\n+\n+    } else {\n+      activateBoundaryEvent(context, boundaryElementInstanceKey, eventRecord);\n+    }\n+\n+    stateBehavior\n+        .getVariablesState()\n+        .setTemporaryVariables(boundaryElementInstanceKey, eventTrigger.getVariables());\n+\n+    eventScopeInstanceState.deleteTrigger(\n+        context.getElementInstanceKey(), eventTrigger.getEventKey());\n+  }\n+\n+  private <T extends ExecutableActivity> ExecutableBoundaryEvent getBoundaryEvent(\n+      final T element, final BpmnElementContext context, final EventTrigger eventTrigger) {\n+\n+    return element.getBoundaryEvents().stream()\n+        .filter(boundaryEvent -> boundaryEvent.getId().equals(eventTrigger.getElementId()))\n+        .findFirst()\n+        .orElseThrow(\n+            () ->\n+                new IllegalStateException(\n+                    String.format(\n+                        \"Expected boundary event with id '%s' but not found. [context: %s]\",\n+                        BufferUtil.bufferAsString(eventTrigger.getElementId()), context)));\n+  }\n+\n+  private void deferBoundaryEvent(\n+      final BpmnElementContext context, final long boundaryElementInstanceKey) {\n+\n+    elementInstanceState.storeRecord(\n+        boundaryElementInstanceKey,\n+        context.getElementInstanceKey(),\n+        eventRecord,\n+        WorkflowInstanceIntent.ELEMENT_ACTIVATING,\n+        Purpose.DEFERRED);\n+  }\n+\n+  public void publishTriggeredBoundaryEvent(final BpmnElementContext context) {\n+\n+    elementInstanceState.getDeferredRecords(context.getElementInstanceKey()).stream()\n+        .filter(record -> record.getValue().getBpmnElementType() == BpmnElementType.BOUNDARY_EVENT)\n+        .findFirst()\n+        .ifPresent(\n+            deferredRecord ->\n+                activateBoundaryEvent(context, deferredRecord.getKey(), deferredRecord.getValue()));\n+  }\n+\n+  private void activateBoundaryEvent(\n+      final BpmnElementContext context,\n+      final long elementInstanceKey,\n+      final WorkflowInstanceRecord eventRecord) {\n+\n+    streamWriter.appendNewEvent(\n+        elementInstanceKey, WorkflowInstanceIntent.ELEMENT_ACTIVATING, eventRecord);\n+\n+    stateBehavior.createElementInstanceInFlowScope(context, elementInstanceKey, eventRecord);\n+    stateBehavior.spawnToken(context);\n+  }\n+\n+  public <T extends ExecutableCatchEventSupplier> Either<Failure, Void> subscribeToEvents(\n+      final T element, final BpmnElementContext context) {\n+\n+    try {\n+      catchEventBehavior.subscribeToEvents(context.toStepContext(), element);\n+      return Either.right(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NTU4NQ=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ3ODYzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnEventSubscriptionBehavior.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNToxMDoxN1rOGUhorg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzoyMjozMFrOGUklsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NTc5MA==", "bodyText": "what is this magic number? \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424175790", "createdAt": "2020-05-13T05:10:17Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnEventSubscriptionBehavior.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.behavior;\n+\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.processor.Failure;\n+import io.zeebe.engine.processor.KeyGenerator;\n+import io.zeebe.engine.processor.TypedStreamWriter;\n+import io.zeebe.engine.processor.workflow.CatchEventBehavior;\n+import io.zeebe.engine.processor.workflow.ExpressionProcessor.EvaluationException;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableActivity;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableBoundaryEvent;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableCatchEventSupplier;\n+import io.zeebe.engine.processor.workflow.message.MessageCorrelationKeyException;\n+import io.zeebe.engine.state.ZeebeState;\n+import io.zeebe.engine.state.instance.ElementInstance;\n+import io.zeebe.engine.state.instance.ElementInstanceState;\n+import io.zeebe.engine.state.instance.EventScopeInstanceState;\n+import io.zeebe.engine.state.instance.EventTrigger;\n+import io.zeebe.engine.state.instance.StoredRecord.Purpose;\n+import io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import io.zeebe.protocol.record.value.ErrorType;\n+import io.zeebe.util.Either;\n+import io.zeebe.util.buffer.BufferUtil;\n+\n+public final class BpmnEventSubscriptionBehavior {\n+\n+  private final WorkflowInstanceRecord eventRecord = new WorkflowInstanceRecord();\n+\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final EventScopeInstanceState eventScopeInstanceState;\n+  private final ElementInstanceState elementInstanceState;\n+  private final CatchEventBehavior catchEventBehavior;\n+  private final TypedStreamWriter streamWriter;\n+  private final KeyGenerator keyGenerator;\n+\n+  public BpmnEventSubscriptionBehavior(\n+      final BpmnStateBehavior stateBehavior,\n+      final BpmnStateTransitionBehavior stateTransitionBehavior,\n+      final CatchEventBehavior catchEventBehavior,\n+      final TypedStreamWriter streamWriter,\n+      final ZeebeState zeebeState) {\n+    this.stateBehavior = stateBehavior;\n+    this.stateTransitionBehavior = stateTransitionBehavior;\n+    this.catchEventBehavior = catchEventBehavior;\n+    this.streamWriter = streamWriter;\n+\n+    eventScopeInstanceState = zeebeState.getWorkflowState().getEventScopeInstanceState();\n+    elementInstanceState = zeebeState.getWorkflowState().getElementInstanceState();\n+    keyGenerator = zeebeState.getKeyGenerator();\n+  }\n+\n+  public <T extends ExecutableActivity> void triggerBoundaryEvent(\n+      final T element, final BpmnElementContext context) {\n+    final var eventTrigger =\n+        eventScopeInstanceState.peekEventTrigger(context.getElementInstanceKey());\n+\n+    if (eventTrigger == null) {\n+      // discard event\n+      return;\n+    }\n+\n+    eventRecord.reset();\n+    eventRecord.wrap(context.getRecordValue());\n+    eventRecord.setElementId(eventTrigger.getElementId());\n+    eventRecord.setBpmnElementType(BpmnElementType.BOUNDARY_EVENT);\n+\n+    final var boundaryEvent = getBoundaryEvent(element, context, eventTrigger);\n+\n+    final long boundaryElementInstanceKey = keyGenerator.nextKey();\n+    if (boundaryEvent.interrupting()) {\n+\n+      deferBoundaryEvent(context, boundaryElementInstanceKey);\n+\n+      stateTransitionBehavior.transitionToTerminating(context);\n+\n+    } else {\n+      activateBoundaryEvent(context, boundaryElementInstanceKey, eventRecord);\n+    }\n+\n+    stateBehavior\n+        .getVariablesState()\n+        .setTemporaryVariables(boundaryElementInstanceKey, eventTrigger.getVariables());\n+\n+    eventScopeInstanceState.deleteTrigger(\n+        context.getElementInstanceKey(), eventTrigger.getEventKey());\n+  }\n+\n+  private <T extends ExecutableActivity> ExecutableBoundaryEvent getBoundaryEvent(\n+      final T element, final BpmnElementContext context, final EventTrigger eventTrigger) {\n+\n+    return element.getBoundaryEvents().stream()\n+        .filter(boundaryEvent -> boundaryEvent.getId().equals(eventTrigger.getElementId()))\n+        .findFirst()\n+        .orElseThrow(\n+            () ->\n+                new IllegalStateException(\n+                    String.format(\n+                        \"Expected boundary event with id '%s' but not found. [context: %s]\",\n+                        BufferUtil.bufferAsString(eventTrigger.getElementId()), context)));\n+  }\n+\n+  private void deferBoundaryEvent(\n+      final BpmnElementContext context, final long boundaryElementInstanceKey) {\n+\n+    elementInstanceState.storeRecord(\n+        boundaryElementInstanceKey,\n+        context.getElementInstanceKey(),\n+        eventRecord,\n+        WorkflowInstanceIntent.ELEMENT_ACTIVATING,\n+        Purpose.DEFERRED);\n+  }\n+\n+  public void publishTriggeredBoundaryEvent(final BpmnElementContext context) {\n+\n+    elementInstanceState.getDeferredRecords(context.getElementInstanceKey()).stream()\n+        .filter(record -> record.getValue().getBpmnElementType() == BpmnElementType.BOUNDARY_EVENT)\n+        .findFirst()\n+        .ifPresent(\n+            deferredRecord ->\n+                activateBoundaryEvent(context, deferredRecord.getKey(), deferredRecord.getValue()));\n+  }\n+\n+  private void activateBoundaryEvent(\n+      final BpmnElementContext context,\n+      final long elementInstanceKey,\n+      final WorkflowInstanceRecord eventRecord) {\n+\n+    streamWriter.appendNewEvent(\n+        elementInstanceKey, WorkflowInstanceIntent.ELEMENT_ACTIVATING, eventRecord);\n+\n+    stateBehavior.createElementInstanceInFlowScope(context, elementInstanceKey, eventRecord);\n+    stateBehavior.spawnToken(context);\n+  }\n+\n+  public <T extends ExecutableCatchEventSupplier> Either<Failure, Void> subscribeToEvents(\n+      final T element, final BpmnElementContext context) {\n+\n+    try {\n+      catchEventBehavior.subscribeToEvents(context.toStepContext(), element);\n+      return Either.right(null);\n+\n+    } catch (final MessageCorrelationKeyException e) {\n+      return Either.left(\n+          new Failure(\n+              e.getMessage(),\n+              ErrorType.EXTRACT_VALUE_ERROR,\n+              e.getContext().getVariablesScopeKey()));\n+\n+    } catch (final EvaluationException e) {\n+      return Either.left(\n+          new Failure(\n+              e.getMessage(), ErrorType.EXTRACT_VALUE_ERROR, context.getElementInstanceKey()));\n+    }\n+  }\n+\n+  public void unsubscribeFromEvents(final BpmnElementContext context) {\n+    catchEventBehavior.unsubscribeFromEvents(\n+        context.getElementInstanceKey(), context.toStepContext());\n+  }\n+\n+  public void publishTriggeredEventSubProcess(final BpmnElementContext context) {\n+    final var elementInstance = stateBehavior.getElementInstance(context);\n+\n+    if (isInterrupted(elementInstance)) {\n+      elementInstanceState.getDeferredRecords(context.getElementInstanceKey()).stream()\n+          .filter(record -> record.getKey() == elementInstance.getInterruptingEventKey())\n+          .filter(record -> record.getValue().getBpmnElementType() == BpmnElementType.SUB_PROCESS)\n+          .findFirst()\n+          .ifPresent(\n+              record -> {\n+                final var elementInstanceKey = record.getKey();\n+                final var interruptingRecord = record.getValue();\n+\n+                streamWriter.appendNewEvent(\n+                    elementInstanceKey,\n+                    WorkflowInstanceIntent.ELEMENT_ACTIVATING,\n+                    interruptingRecord);\n+\n+                stateBehavior.createChildElementInstance(\n+                    context, elementInstanceKey, interruptingRecord);\n+              });\n+    }\n+  }\n+\n+  private boolean isInterrupted(final ElementInstance elementInstance) {\n+    return elementInstance.getNumberOfActiveTokens() == 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyNDE3Nw==", "bodyText": "Yeah. This is scary \ud83d\ude31\nThis is from the current implementation. We will tackle it when looking at the state.", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424224177", "createdAt": "2020-05-13T07:22:30Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnEventSubscriptionBehavior.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.behavior;\n+\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.processor.Failure;\n+import io.zeebe.engine.processor.KeyGenerator;\n+import io.zeebe.engine.processor.TypedStreamWriter;\n+import io.zeebe.engine.processor.workflow.CatchEventBehavior;\n+import io.zeebe.engine.processor.workflow.ExpressionProcessor.EvaluationException;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableActivity;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableBoundaryEvent;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableCatchEventSupplier;\n+import io.zeebe.engine.processor.workflow.message.MessageCorrelationKeyException;\n+import io.zeebe.engine.state.ZeebeState;\n+import io.zeebe.engine.state.instance.ElementInstance;\n+import io.zeebe.engine.state.instance.ElementInstanceState;\n+import io.zeebe.engine.state.instance.EventScopeInstanceState;\n+import io.zeebe.engine.state.instance.EventTrigger;\n+import io.zeebe.engine.state.instance.StoredRecord.Purpose;\n+import io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import io.zeebe.protocol.record.value.ErrorType;\n+import io.zeebe.util.Either;\n+import io.zeebe.util.buffer.BufferUtil;\n+\n+public final class BpmnEventSubscriptionBehavior {\n+\n+  private final WorkflowInstanceRecord eventRecord = new WorkflowInstanceRecord();\n+\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final EventScopeInstanceState eventScopeInstanceState;\n+  private final ElementInstanceState elementInstanceState;\n+  private final CatchEventBehavior catchEventBehavior;\n+  private final TypedStreamWriter streamWriter;\n+  private final KeyGenerator keyGenerator;\n+\n+  public BpmnEventSubscriptionBehavior(\n+      final BpmnStateBehavior stateBehavior,\n+      final BpmnStateTransitionBehavior stateTransitionBehavior,\n+      final CatchEventBehavior catchEventBehavior,\n+      final TypedStreamWriter streamWriter,\n+      final ZeebeState zeebeState) {\n+    this.stateBehavior = stateBehavior;\n+    this.stateTransitionBehavior = stateTransitionBehavior;\n+    this.catchEventBehavior = catchEventBehavior;\n+    this.streamWriter = streamWriter;\n+\n+    eventScopeInstanceState = zeebeState.getWorkflowState().getEventScopeInstanceState();\n+    elementInstanceState = zeebeState.getWorkflowState().getElementInstanceState();\n+    keyGenerator = zeebeState.getKeyGenerator();\n+  }\n+\n+  public <T extends ExecutableActivity> void triggerBoundaryEvent(\n+      final T element, final BpmnElementContext context) {\n+    final var eventTrigger =\n+        eventScopeInstanceState.peekEventTrigger(context.getElementInstanceKey());\n+\n+    if (eventTrigger == null) {\n+      // discard event\n+      return;\n+    }\n+\n+    eventRecord.reset();\n+    eventRecord.wrap(context.getRecordValue());\n+    eventRecord.setElementId(eventTrigger.getElementId());\n+    eventRecord.setBpmnElementType(BpmnElementType.BOUNDARY_EVENT);\n+\n+    final var boundaryEvent = getBoundaryEvent(element, context, eventTrigger);\n+\n+    final long boundaryElementInstanceKey = keyGenerator.nextKey();\n+    if (boundaryEvent.interrupting()) {\n+\n+      deferBoundaryEvent(context, boundaryElementInstanceKey);\n+\n+      stateTransitionBehavior.transitionToTerminating(context);\n+\n+    } else {\n+      activateBoundaryEvent(context, boundaryElementInstanceKey, eventRecord);\n+    }\n+\n+    stateBehavior\n+        .getVariablesState()\n+        .setTemporaryVariables(boundaryElementInstanceKey, eventTrigger.getVariables());\n+\n+    eventScopeInstanceState.deleteTrigger(\n+        context.getElementInstanceKey(), eventTrigger.getEventKey());\n+  }\n+\n+  private <T extends ExecutableActivity> ExecutableBoundaryEvent getBoundaryEvent(\n+      final T element, final BpmnElementContext context, final EventTrigger eventTrigger) {\n+\n+    return element.getBoundaryEvents().stream()\n+        .filter(boundaryEvent -> boundaryEvent.getId().equals(eventTrigger.getElementId()))\n+        .findFirst()\n+        .orElseThrow(\n+            () ->\n+                new IllegalStateException(\n+                    String.format(\n+                        \"Expected boundary event with id '%s' but not found. [context: %s]\",\n+                        BufferUtil.bufferAsString(eventTrigger.getElementId()), context)));\n+  }\n+\n+  private void deferBoundaryEvent(\n+      final BpmnElementContext context, final long boundaryElementInstanceKey) {\n+\n+    elementInstanceState.storeRecord(\n+        boundaryElementInstanceKey,\n+        context.getElementInstanceKey(),\n+        eventRecord,\n+        WorkflowInstanceIntent.ELEMENT_ACTIVATING,\n+        Purpose.DEFERRED);\n+  }\n+\n+  public void publishTriggeredBoundaryEvent(final BpmnElementContext context) {\n+\n+    elementInstanceState.getDeferredRecords(context.getElementInstanceKey()).stream()\n+        .filter(record -> record.getValue().getBpmnElementType() == BpmnElementType.BOUNDARY_EVENT)\n+        .findFirst()\n+        .ifPresent(\n+            deferredRecord ->\n+                activateBoundaryEvent(context, deferredRecord.getKey(), deferredRecord.getValue()));\n+  }\n+\n+  private void activateBoundaryEvent(\n+      final BpmnElementContext context,\n+      final long elementInstanceKey,\n+      final WorkflowInstanceRecord eventRecord) {\n+\n+    streamWriter.appendNewEvent(\n+        elementInstanceKey, WorkflowInstanceIntent.ELEMENT_ACTIVATING, eventRecord);\n+\n+    stateBehavior.createElementInstanceInFlowScope(context, elementInstanceKey, eventRecord);\n+    stateBehavior.spawnToken(context);\n+  }\n+\n+  public <T extends ExecutableCatchEventSupplier> Either<Failure, Void> subscribeToEvents(\n+      final T element, final BpmnElementContext context) {\n+\n+    try {\n+      catchEventBehavior.subscribeToEvents(context.toStepContext(), element);\n+      return Either.right(null);\n+\n+    } catch (final MessageCorrelationKeyException e) {\n+      return Either.left(\n+          new Failure(\n+              e.getMessage(),\n+              ErrorType.EXTRACT_VALUE_ERROR,\n+              e.getContext().getVariablesScopeKey()));\n+\n+    } catch (final EvaluationException e) {\n+      return Either.left(\n+          new Failure(\n+              e.getMessage(), ErrorType.EXTRACT_VALUE_ERROR, context.getElementInstanceKey()));\n+    }\n+  }\n+\n+  public void unsubscribeFromEvents(final BpmnElementContext context) {\n+    catchEventBehavior.unsubscribeFromEvents(\n+        context.getElementInstanceKey(), context.toStepContext());\n+  }\n+\n+  public void publishTriggeredEventSubProcess(final BpmnElementContext context) {\n+    final var elementInstance = stateBehavior.getElementInstance(context);\n+\n+    if (isInterrupted(elementInstance)) {\n+      elementInstanceState.getDeferredRecords(context.getElementInstanceKey()).stream()\n+          .filter(record -> record.getKey() == elementInstance.getInterruptingEventKey())\n+          .filter(record -> record.getValue().getBpmnElementType() == BpmnElementType.SUB_PROCESS)\n+          .findFirst()\n+          .ifPresent(\n+              record -> {\n+                final var elementInstanceKey = record.getKey();\n+                final var interruptingRecord = record.getValue();\n+\n+                streamWriter.appendNewEvent(\n+                    elementInstanceKey,\n+                    WorkflowInstanceIntent.ELEMENT_ACTIVATING,\n+                    interruptingRecord);\n+\n+                stateBehavior.createChildElementInstance(\n+                    context, elementInstanceKey, interruptingRecord);\n+              });\n+    }\n+  }\n+\n+  private boolean isInterrupted(final ElementInstance elementInstance) {\n+    return elementInstance.getNumberOfActiveTokens() == 2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NTc5MA=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ5NjcyOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnStateTransitionBehavior.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNToyMToxOFrOGUhzug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzoyNDozN1rOGUkqOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3ODYxOA==", "bodyText": "Just asking:\nWouldn't it be possible to define the state machine once in a lifecycle processor.\nCurrently you need to check whether the transition is OK and also you always need to take the transition in the elementTypeProcessor implementations. But this lifecycle is always the same right?\nCould look like this:\nLifecycleProcessor {\n\n if (elementType == Activating)\n{\n  processors.get(elementType).onActivating(context)\n  transitionToActivated()\n}\nelse if (elementType == Completing)\n{\n  processors.get(elementType).onCompleting(context)\n  transitionToCompleted()\n}\n}", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424178618", "createdAt": "2020-05-13T05:21:18Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnStateTransitionBehavior.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.behavior;\n+\n+import io.zeebe.engine.metrics.WorkflowEngineMetrics;\n+import io.zeebe.engine.nwe.BpmnElementContainerProcessor;\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.nwe.WorkflowInstanceStateTransitionGuard;\n+import io.zeebe.engine.processor.KeyGenerator;\n+import io.zeebe.engine.processor.TypedStreamWriter;\n+import io.zeebe.engine.processor.workflow.WorkflowInstanceLifecycle;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowNode;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableSequenceFlow;\n+import io.zeebe.engine.state.instance.ElementInstance;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import java.util.function.Function;\n+\n+public final class BpmnStateTransitionBehavior {\n+\n+  private final TypedStreamWriter streamWriter;\n+  private final KeyGenerator keyGenerator;\n+  private final BpmnStateBehavior stateBehavior;\n+  private final Function<BpmnElementType, BpmnElementContainerProcessor<ExecutableFlowElement>>\n+      processorLookUp;\n+\n+  private final WorkflowInstanceStateTransitionGuard stateTransitionGuard;\n+  private final WorkflowEngineMetrics metrics;\n+\n+  public BpmnStateTransitionBehavior(\n+      final TypedStreamWriter streamWriter,\n+      final KeyGenerator keyGenerator,\n+      final BpmnStateBehavior stateBehavior,\n+      final WorkflowEngineMetrics metrics,\n+      final WorkflowInstanceStateTransitionGuard stateTransitionGuard,\n+      final Function<BpmnElementType, BpmnElementContainerProcessor<ExecutableFlowElement>>\n+          processorLookUp) {\n+    this.streamWriter = streamWriter;\n+    this.keyGenerator = keyGenerator;\n+    this.stateBehavior = stateBehavior;\n+    this.metrics = metrics;\n+    this.stateTransitionGuard = stateTransitionGuard;\n+    this.processorLookUp = processorLookUp;\n+  }\n+\n+  public void transitionToActivated(final BpmnElementContext context) {\n+    if (!WorkflowInstanceLifecycle.canTransition(\n+        context.getIntent(), WorkflowInstanceIntent.ELEMENT_ACTIVATED)) {\n+      throw new IllegalStateTransitionException(WorkflowInstanceIntent.ELEMENT_ACTIVATED, context);\n+    }\n+\n+    transitionTo(context, WorkflowInstanceIntent.ELEMENT_ACTIVATED);\n+\n+    stateTransitionGuard.registerStateTransition(context, WorkflowInstanceIntent.ELEMENT_ACTIVATED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyNTMzOQ==", "bodyText": "It would be nice but no \ud83d\ude05 See the comments above.", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424225339", "createdAt": "2020-05-13T07:24:37Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnStateTransitionBehavior.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.behavior;\n+\n+import io.zeebe.engine.metrics.WorkflowEngineMetrics;\n+import io.zeebe.engine.nwe.BpmnElementContainerProcessor;\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.nwe.WorkflowInstanceStateTransitionGuard;\n+import io.zeebe.engine.processor.KeyGenerator;\n+import io.zeebe.engine.processor.TypedStreamWriter;\n+import io.zeebe.engine.processor.workflow.WorkflowInstanceLifecycle;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowNode;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableSequenceFlow;\n+import io.zeebe.engine.state.instance.ElementInstance;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import java.util.function.Function;\n+\n+public final class BpmnStateTransitionBehavior {\n+\n+  private final TypedStreamWriter streamWriter;\n+  private final KeyGenerator keyGenerator;\n+  private final BpmnStateBehavior stateBehavior;\n+  private final Function<BpmnElementType, BpmnElementContainerProcessor<ExecutableFlowElement>>\n+      processorLookUp;\n+\n+  private final WorkflowInstanceStateTransitionGuard stateTransitionGuard;\n+  private final WorkflowEngineMetrics metrics;\n+\n+  public BpmnStateTransitionBehavior(\n+      final TypedStreamWriter streamWriter,\n+      final KeyGenerator keyGenerator,\n+      final BpmnStateBehavior stateBehavior,\n+      final WorkflowEngineMetrics metrics,\n+      final WorkflowInstanceStateTransitionGuard stateTransitionGuard,\n+      final Function<BpmnElementType, BpmnElementContainerProcessor<ExecutableFlowElement>>\n+          processorLookUp) {\n+    this.streamWriter = streamWriter;\n+    this.keyGenerator = keyGenerator;\n+    this.stateBehavior = stateBehavior;\n+    this.metrics = metrics;\n+    this.stateTransitionGuard = stateTransitionGuard;\n+    this.processorLookUp = processorLookUp;\n+  }\n+\n+  public void transitionToActivated(final BpmnElementContext context) {\n+    if (!WorkflowInstanceLifecycle.canTransition(\n+        context.getIntent(), WorkflowInstanceIntent.ELEMENT_ACTIVATED)) {\n+      throw new IllegalStateTransitionException(WorkflowInstanceIntent.ELEMENT_ACTIVATED, context);\n+    }\n+\n+    transitionTo(context, WorkflowInstanceIntent.ELEMENT_ACTIVATED);\n+\n+    stateTransitionGuard.registerStateTransition(context, WorkflowInstanceIntent.ELEMENT_ACTIVATED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3ODYxOA=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ5ODI3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnStateTransitionBehavior.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNToyMjoyM1rOGUh0uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNToyMjoyM1rOGUh0uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3ODg3NQ==", "bodyText": "\ud83c\udf89", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424178875", "createdAt": "2020-05-13T05:22:23Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnStateTransitionBehavior.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.behavior;\n+\n+import io.zeebe.engine.metrics.WorkflowEngineMetrics;\n+import io.zeebe.engine.nwe.BpmnElementContainerProcessor;\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.nwe.WorkflowInstanceStateTransitionGuard;\n+import io.zeebe.engine.processor.KeyGenerator;\n+import io.zeebe.engine.processor.TypedStreamWriter;\n+import io.zeebe.engine.processor.workflow.WorkflowInstanceLifecycle;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowNode;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableSequenceFlow;\n+import io.zeebe.engine.state.instance.ElementInstance;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import java.util.function.Function;\n+\n+public final class BpmnStateTransitionBehavior {\n+\n+  private final TypedStreamWriter streamWriter;\n+  private final KeyGenerator keyGenerator;\n+  private final BpmnStateBehavior stateBehavior;\n+  private final Function<BpmnElementType, BpmnElementContainerProcessor<ExecutableFlowElement>>\n+      processorLookUp;\n+\n+  private final WorkflowInstanceStateTransitionGuard stateTransitionGuard;\n+  private final WorkflowEngineMetrics metrics;\n+\n+  public BpmnStateTransitionBehavior(\n+      final TypedStreamWriter streamWriter,\n+      final KeyGenerator keyGenerator,\n+      final BpmnStateBehavior stateBehavior,\n+      final WorkflowEngineMetrics metrics,\n+      final WorkflowInstanceStateTransitionGuard stateTransitionGuard,\n+      final Function<BpmnElementType, BpmnElementContainerProcessor<ExecutableFlowElement>>\n+          processorLookUp) {\n+    this.streamWriter = streamWriter;\n+    this.keyGenerator = keyGenerator;\n+    this.stateBehavior = stateBehavior;\n+    this.metrics = metrics;\n+    this.stateTransitionGuard = stateTransitionGuard;\n+    this.processorLookUp = processorLookUp;\n+  }\n+\n+  public void transitionToActivated(final BpmnElementContext context) {\n+    if (!WorkflowInstanceLifecycle.canTransition(\n+        context.getIntent(), WorkflowInstanceIntent.ELEMENT_ACTIVATED)) {\n+      throw new IllegalStateTransitionException(WorkflowInstanceIntent.ELEMENT_ACTIVATED, context);\n+    }\n+\n+    transitionTo(context, WorkflowInstanceIntent.ELEMENT_ACTIVATED);\n+\n+    stateTransitionGuard.registerStateTransition(context, WorkflowInstanceIntent.ELEMENT_ACTIVATED);\n+    metrics.elementInstanceActivated(context.getBpmnElementType());\n+  }\n+\n+  public void transitionToCompleting(final BpmnElementContext context) {\n+    if (!WorkflowInstanceLifecycle.canTransition(\n+        context.getIntent(), WorkflowInstanceIntent.ELEMENT_COMPLETING)) {\n+      throw new IllegalStateTransitionException(WorkflowInstanceIntent.ELEMENT_COMPLETING, context);\n+    }\n+\n+    transitionTo(context, WorkflowInstanceIntent.ELEMENT_COMPLETING);\n+    stateTransitionGuard.registerStateTransition(\n+        context, WorkflowInstanceIntent.ELEMENT_COMPLETING);\n+  }\n+\n+  public void transitionToCompleted(final BpmnElementContext context) {\n+    if (!WorkflowInstanceLifecycle.canTransition(\n+        context.getIntent(), WorkflowInstanceIntent.ELEMENT_COMPLETED)) {\n+      throw new IllegalStateTransitionException(WorkflowInstanceIntent.ELEMENT_COMPLETED, context);\n+    }\n+\n+    transitionTo(context, WorkflowInstanceIntent.ELEMENT_COMPLETED);\n+\n+    stateTransitionGuard.registerStateTransition(context, WorkflowInstanceIntent.ELEMENT_COMPLETED);\n+    metrics.elementInstanceCompleted(context.getBpmnElementType());\n+  }\n+\n+  public void transitionToTerminating(final BpmnElementContext context) {\n+    if (!WorkflowInstanceLifecycle.canTransition(\n+        context.getIntent(), WorkflowInstanceIntent.ELEMENT_TERMINATING)) {\n+      throw new IllegalStateTransitionException(\n+          WorkflowInstanceIntent.ELEMENT_TERMINATING, context);\n+    }\n+\n+    transitionTo(context, WorkflowInstanceIntent.ELEMENT_TERMINATING);\n+    stateTransitionGuard.registerStateTransition(\n+        context, WorkflowInstanceIntent.ELEMENT_TERMINATING);\n+  }\n+\n+  public void transitionToTerminated(final BpmnElementContext context) {\n+    if (!WorkflowInstanceLifecycle.canTransition(\n+        context.getIntent(), WorkflowInstanceIntent.ELEMENT_TERMINATED)) {\n+      throw new IllegalStateTransitionException(WorkflowInstanceIntent.ELEMENT_TERMINATED, context);\n+    }\n+\n+    transitionTo(context, WorkflowInstanceIntent.ELEMENT_TERMINATED);\n+\n+    stateTransitionGuard.registerStateTransition(\n+        context, WorkflowInstanceIntent.ELEMENT_TERMINATED);\n+    metrics.elementInstanceTerminated(context.getBpmnElementType());\n+  }\n+\n+  private void transitionTo(final BpmnElementContext context, final WorkflowInstanceIntent intent) {\n+    streamWriter.appendFollowUpEvent(\n+        context.getElementInstanceKey(), intent, context.getRecordValue());\n+  }\n+\n+  public void takeSequenceFlow(\n+      final BpmnElementContext context, final ExecutableSequenceFlow sequenceFlow) {\n+    if (!WorkflowInstanceLifecycle.canTransition(\n+        context.getIntent(), WorkflowInstanceIntent.SEQUENCE_FLOW_TAKEN)) {\n+      throw new IllegalStateTransitionException(\n+          WorkflowInstanceIntent.SEQUENCE_FLOW_TAKEN, context);\n+    }\n+\n+    final var record =\n+        context\n+            .getRecordValue()\n+            .setElementId(sequenceFlow.getId())\n+            .setBpmnElementType(sequenceFlow.getElementType());\n+\n+    streamWriter.appendNewEvent(\n+        keyGenerator.nextKey(), WorkflowInstanceIntent.SEQUENCE_FLOW_TAKEN, record);\n+\n+    stateBehavior.spawnToken(context);\n+  }\n+\n+  public ElementInstance activateChildInstance(\n+      final BpmnElementContext context, final ExecutableFlowElement childElement) {\n+\n+    final var childInstanceRecord =\n+        context\n+            .getRecordValue()\n+            .setFlowScopeKey(context.getElementInstanceKey())\n+            .setElementId(childElement.getId())\n+            .setBpmnElementType(childElement.getElementType());\n+\n+    final var childInstanceKey = keyGenerator.nextKey();\n+\n+    streamWriter.appendNewEvent(\n+        childInstanceKey, WorkflowInstanceIntent.ELEMENT_ACTIVATING, childInstanceRecord);\n+\n+    stateBehavior.updateElementInstance(context, ElementInstance::spawnToken);\n+\n+    return stateBehavior.createChildElementInstance(context, childInstanceKey, childInstanceRecord);\n+  }\n+\n+  public <T extends ExecutableFlowNode> void takeOutgoingSequenceFlows(\n+      final T element, final BpmnElementContext context) {\n+\n+    final var outgoingSequenceFlows = element.getOutgoing();\n+    if (outgoingSequenceFlows.isEmpty()) {\n+      // behaves like an implicit end event\n+      onElementCompleted(element, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ5OTcwOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnStateTransitionBehavior.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNToyMzoxNVrOGUh1jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNToyMzoxNVrOGUh1jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3OTA4Nw==", "bodyText": "I love it that you use our exception message pattern \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424179087", "createdAt": "2020-05-13T05:23:15Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnStateTransitionBehavior.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.behavior;\n+\n+import io.zeebe.engine.metrics.WorkflowEngineMetrics;\n+import io.zeebe.engine.nwe.BpmnElementContainerProcessor;\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.nwe.WorkflowInstanceStateTransitionGuard;\n+import io.zeebe.engine.processor.KeyGenerator;\n+import io.zeebe.engine.processor.TypedStreamWriter;\n+import io.zeebe.engine.processor.workflow.WorkflowInstanceLifecycle;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElement;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowNode;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableSequenceFlow;\n+import io.zeebe.engine.state.instance.ElementInstance;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import java.util.function.Function;\n+\n+public final class BpmnStateTransitionBehavior {\n+\n+  private final TypedStreamWriter streamWriter;\n+  private final KeyGenerator keyGenerator;\n+  private final BpmnStateBehavior stateBehavior;\n+  private final Function<BpmnElementType, BpmnElementContainerProcessor<ExecutableFlowElement>>\n+      processorLookUp;\n+\n+  private final WorkflowInstanceStateTransitionGuard stateTransitionGuard;\n+  private final WorkflowEngineMetrics metrics;\n+\n+  public BpmnStateTransitionBehavior(\n+      final TypedStreamWriter streamWriter,\n+      final KeyGenerator keyGenerator,\n+      final BpmnStateBehavior stateBehavior,\n+      final WorkflowEngineMetrics metrics,\n+      final WorkflowInstanceStateTransitionGuard stateTransitionGuard,\n+      final Function<BpmnElementType, BpmnElementContainerProcessor<ExecutableFlowElement>>\n+          processorLookUp) {\n+    this.streamWriter = streamWriter;\n+    this.keyGenerator = keyGenerator;\n+    this.stateBehavior = stateBehavior;\n+    this.metrics = metrics;\n+    this.stateTransitionGuard = stateTransitionGuard;\n+    this.processorLookUp = processorLookUp;\n+  }\n+\n+  public void transitionToActivated(final BpmnElementContext context) {\n+    if (!WorkflowInstanceLifecycle.canTransition(\n+        context.getIntent(), WorkflowInstanceIntent.ELEMENT_ACTIVATED)) {\n+      throw new IllegalStateTransitionException(WorkflowInstanceIntent.ELEMENT_ACTIVATED, context);\n+    }\n+\n+    transitionTo(context, WorkflowInstanceIntent.ELEMENT_ACTIVATED);\n+\n+    stateTransitionGuard.registerStateTransition(context, WorkflowInstanceIntent.ELEMENT_ACTIVATED);\n+    metrics.elementInstanceActivated(context.getBpmnElementType());\n+  }\n+\n+  public void transitionToCompleting(final BpmnElementContext context) {\n+    if (!WorkflowInstanceLifecycle.canTransition(\n+        context.getIntent(), WorkflowInstanceIntent.ELEMENT_COMPLETING)) {\n+      throw new IllegalStateTransitionException(WorkflowInstanceIntent.ELEMENT_COMPLETING, context);\n+    }\n+\n+    transitionTo(context, WorkflowInstanceIntent.ELEMENT_COMPLETING);\n+    stateTransitionGuard.registerStateTransition(\n+        context, WorkflowInstanceIntent.ELEMENT_COMPLETING);\n+  }\n+\n+  public void transitionToCompleted(final BpmnElementContext context) {\n+    if (!WorkflowInstanceLifecycle.canTransition(\n+        context.getIntent(), WorkflowInstanceIntent.ELEMENT_COMPLETED)) {\n+      throw new IllegalStateTransitionException(WorkflowInstanceIntent.ELEMENT_COMPLETED, context);\n+    }\n+\n+    transitionTo(context, WorkflowInstanceIntent.ELEMENT_COMPLETED);\n+\n+    stateTransitionGuard.registerStateTransition(context, WorkflowInstanceIntent.ELEMENT_COMPLETED);\n+    metrics.elementInstanceCompleted(context.getBpmnElementType());\n+  }\n+\n+  public void transitionToTerminating(final BpmnElementContext context) {\n+    if (!WorkflowInstanceLifecycle.canTransition(\n+        context.getIntent(), WorkflowInstanceIntent.ELEMENT_TERMINATING)) {\n+      throw new IllegalStateTransitionException(\n+          WorkflowInstanceIntent.ELEMENT_TERMINATING, context);\n+    }\n+\n+    transitionTo(context, WorkflowInstanceIntent.ELEMENT_TERMINATING);\n+    stateTransitionGuard.registerStateTransition(\n+        context, WorkflowInstanceIntent.ELEMENT_TERMINATING);\n+  }\n+\n+  public void transitionToTerminated(final BpmnElementContext context) {\n+    if (!WorkflowInstanceLifecycle.canTransition(\n+        context.getIntent(), WorkflowInstanceIntent.ELEMENT_TERMINATED)) {\n+      throw new IllegalStateTransitionException(WorkflowInstanceIntent.ELEMENT_TERMINATED, context);\n+    }\n+\n+    transitionTo(context, WorkflowInstanceIntent.ELEMENT_TERMINATED);\n+\n+    stateTransitionGuard.registerStateTransition(\n+        context, WorkflowInstanceIntent.ELEMENT_TERMINATED);\n+    metrics.elementInstanceTerminated(context.getBpmnElementType());\n+  }\n+\n+  private void transitionTo(final BpmnElementContext context, final WorkflowInstanceIntent intent) {\n+    streamWriter.appendFollowUpEvent(\n+        context.getElementInstanceKey(), intent, context.getRecordValue());\n+  }\n+\n+  public void takeSequenceFlow(\n+      final BpmnElementContext context, final ExecutableSequenceFlow sequenceFlow) {\n+    if (!WorkflowInstanceLifecycle.canTransition(\n+        context.getIntent(), WorkflowInstanceIntent.SEQUENCE_FLOW_TAKEN)) {\n+      throw new IllegalStateTransitionException(\n+          WorkflowInstanceIntent.SEQUENCE_FLOW_TAKEN, context);\n+    }\n+\n+    final var record =\n+        context\n+            .getRecordValue()\n+            .setElementId(sequenceFlow.getId())\n+            .setBpmnElementType(sequenceFlow.getElementType());\n+\n+    streamWriter.appendNewEvent(\n+        keyGenerator.nextKey(), WorkflowInstanceIntent.SEQUENCE_FLOW_TAKEN, record);\n+\n+    stateBehavior.spawnToken(context);\n+  }\n+\n+  public ElementInstance activateChildInstance(\n+      final BpmnElementContext context, final ExecutableFlowElement childElement) {\n+\n+    final var childInstanceRecord =\n+        context\n+            .getRecordValue()\n+            .setFlowScopeKey(context.getElementInstanceKey())\n+            .setElementId(childElement.getId())\n+            .setBpmnElementType(childElement.getElementType());\n+\n+    final var childInstanceKey = keyGenerator.nextKey();\n+\n+    streamWriter.appendNewEvent(\n+        childInstanceKey, WorkflowInstanceIntent.ELEMENT_ACTIVATING, childInstanceRecord);\n+\n+    stateBehavior.updateElementInstance(context, ElementInstance::spawnToken);\n+\n+    return stateBehavior.createChildElementInstance(context, childInstanceKey, childInstanceRecord);\n+  }\n+\n+  public <T extends ExecutableFlowNode> void takeOutgoingSequenceFlows(\n+      final T element, final BpmnElementContext context) {\n+\n+    final var outgoingSequenceFlows = element.getOutgoing();\n+    if (outgoingSequenceFlows.isEmpty()) {\n+      // behaves like an implicit end event\n+      onElementCompleted(element, context);\n+\n+    } else {\n+      outgoingSequenceFlows.forEach(sequenceFlow -> takeSequenceFlow(context, sequenceFlow));\n+    }\n+  }\n+\n+  public void onElementCompleted(\n+      final ExecutableFlowElement element, final BpmnElementContext childContext) {\n+\n+    final var flowScope = element.getFlowScope();\n+    final var flowScopeProcessor = processorLookUp.apply(flowScope.getElementType());\n+    final var flowScopeContext = stateBehavior.getFlowScopeContext(childContext);\n+\n+    flowScopeProcessor.onChildCompleted(flowScope, flowScopeContext, childContext);\n+  }\n+\n+  public void onElementTerminated(\n+      final ExecutableFlowElement element, final BpmnElementContext childContext) {\n+\n+    final var flowScope = element.getFlowScope();\n+    final var flowScopeProcessor = processorLookUp.apply(flowScope.getElementType());\n+    final var flowScopeContext = stateBehavior.getFlowScopeContext(childContext);\n+\n+    flowScopeProcessor.onChildTerminated(flowScope, flowScopeContext, childContext);\n+  }\n+\n+  private static final class IllegalStateTransitionException extends IllegalStateException {\n+\n+    private static final String MESSAGE =\n+        \"Expected to take transition to '%s' but element instance is in state '%s'. [context: %s]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTUwMjQ1OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/TypesStreamWriterProxy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNToyNDo1NlrOGUh3Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzoyOToyOVrOGUk0hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3OTUzMA==", "bodyText": "Why we need that class? \ud83e\udd14", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424179530", "createdAt": "2020-05-13T05:24:56Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/TypesStreamWriterProxy.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.behavior;\n+\n+import io.zeebe.engine.processor.TypedRecord;\n+import io.zeebe.engine.processor.TypedStreamWriter;\n+import io.zeebe.msgpack.UnpackedObject;\n+import io.zeebe.protocol.impl.record.RecordMetadata;\n+import io.zeebe.protocol.record.RejectionType;\n+import io.zeebe.protocol.record.intent.Intent;\n+import java.util.function.Consumer;\n+\n+public final class TypesStreamWriterProxy implements TypedStreamWriter {\n+\n+  private TypedStreamWriter writer;\n+\n+  public void wrap(final TypedStreamWriter writer) {\n+    this.writer = writer;\n+  }\n+\n+  @Override\n+  public void appendRejection(\n+      final TypedRecord<? extends UnpackedObject> command,\n+      final RejectionType type,\n+      final String reason) {\n+    writer.appendRejection(command, type, reason);\n+  }\n+\n+  @Override\n+  public void appendRejection(\n+      final TypedRecord<? extends UnpackedObject> command,\n+      final RejectionType type,\n+      final String reason,\n+      final Consumer<RecordMetadata> metadata) {\n+    writer.appendRejection(command, type, reason, metadata);\n+  }\n+\n+  @Override\n+  public void appendNewEvent(final long key, final Intent intent, final UnpackedObject value) {\n+    writer.appendNewEvent(key, intent, value);\n+  }\n+\n+  @Override\n+  public void appendFollowUpEvent(final long key, final Intent intent, final UnpackedObject value) {\n+    writer.appendFollowUpEvent(key, intent, value);\n+  }\n+\n+  @Override\n+  public void appendFollowUpEvent(\n+      final long key,\n+      final Intent intent,\n+      final UnpackedObject value,\n+      final Consumer<RecordMetadata> metadata) {\n+    writer.appendFollowUpEvent(key, intent, value, metadata);\n+  }\n+\n+  @Override\n+  public void configureSourceContext(final long sourceRecordPosition) {\n+    writer.configureSourceContext(sourceRecordPosition);\n+  }\n+\n+  @Override\n+  public void appendNewCommand(final Intent intent, final UnpackedObject value) {\n+    writer.appendNewCommand(intent, value);\n+  }\n+\n+  @Override\n+  public void appendFollowUpCommand(\n+      final long key, final Intent intent, final UnpackedObject value) {\n+    writer.appendFollowUpCommand(key, intent, value);\n+  }\n+\n+  @Override\n+  public void appendFollowUpCommand(\n+      final long key,\n+      final Intent intent,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyNzk3Mg==", "bodyText": "Currently, the stream writer is passed in the stream processor when calling it.\npublic void processRecord(\n      final TypedRecord<WorkflowInstanceRecord> record,\n      final TypedResponseWriter responseWriter,\n      final TypedStreamWriter streamWriter,\n      final Consumer<SideEffectProducer> sideEffect) {\n\nSince we decided to not pack the stream writer in the context, like the current implementation, because it doesn't belong to runtime data. Instead, we decided to have a proxy that can be injected as a usual dependency.", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424227972", "createdAt": "2020-05-13T07:29:29Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/TypesStreamWriterProxy.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.behavior;\n+\n+import io.zeebe.engine.processor.TypedRecord;\n+import io.zeebe.engine.processor.TypedStreamWriter;\n+import io.zeebe.msgpack.UnpackedObject;\n+import io.zeebe.protocol.impl.record.RecordMetadata;\n+import io.zeebe.protocol.record.RejectionType;\n+import io.zeebe.protocol.record.intent.Intent;\n+import java.util.function.Consumer;\n+\n+public final class TypesStreamWriterProxy implements TypedStreamWriter {\n+\n+  private TypedStreamWriter writer;\n+\n+  public void wrap(final TypedStreamWriter writer) {\n+    this.writer = writer;\n+  }\n+\n+  @Override\n+  public void appendRejection(\n+      final TypedRecord<? extends UnpackedObject> command,\n+      final RejectionType type,\n+      final String reason) {\n+    writer.appendRejection(command, type, reason);\n+  }\n+\n+  @Override\n+  public void appendRejection(\n+      final TypedRecord<? extends UnpackedObject> command,\n+      final RejectionType type,\n+      final String reason,\n+      final Consumer<RecordMetadata> metadata) {\n+    writer.appendRejection(command, type, reason, metadata);\n+  }\n+\n+  @Override\n+  public void appendNewEvent(final long key, final Intent intent, final UnpackedObject value) {\n+    writer.appendNewEvent(key, intent, value);\n+  }\n+\n+  @Override\n+  public void appendFollowUpEvent(final long key, final Intent intent, final UnpackedObject value) {\n+    writer.appendFollowUpEvent(key, intent, value);\n+  }\n+\n+  @Override\n+  public void appendFollowUpEvent(\n+      final long key,\n+      final Intent intent,\n+      final UnpackedObject value,\n+      final Consumer<RecordMetadata> metadata) {\n+    writer.appendFollowUpEvent(key, intent, value, metadata);\n+  }\n+\n+  @Override\n+  public void configureSourceContext(final long sourceRecordPosition) {\n+    writer.configureSourceContext(sourceRecordPosition);\n+  }\n+\n+  @Override\n+  public void appendNewCommand(final Intent intent, final UnpackedObject value) {\n+    writer.appendNewCommand(intent, value);\n+  }\n+\n+  @Override\n+  public void appendFollowUpCommand(\n+      final long key, final Intent intent, final UnpackedObject value) {\n+    writer.appendFollowUpCommand(key, intent, value);\n+  }\n+\n+  @Override\n+  public void appendFollowUpCommand(\n+      final long key,\n+      final Intent intent,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3OTUzMA=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTUwNDMzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/container/MultiInstanceBodyProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNToyNTo0N1rOGUh4Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzozMTo1MFrOGUk5qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3OTc5OA==", "bodyText": "What is happening here?", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424179798", "createdAt": "2020-05-13T05:25:47Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/container/MultiInstanceBodyProcessor.java", "diffHunk": "@@ -0,0 +1,337 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.container;\n+\n+import io.zeebe.el.Expression;\n+import io.zeebe.engine.nwe.BpmnElementContainerProcessor;\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.behavior.BpmnEventSubscriptionBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnIncidentBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateTransitionBehavior;\n+import io.zeebe.engine.processor.workflow.ExpressionProcessor;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableMultiInstanceBody;\n+import io.zeebe.engine.state.instance.VariablesState;\n+import io.zeebe.msgpack.spec.MsgPackHelper;\n+import io.zeebe.msgpack.spec.MsgPackReader;\n+import io.zeebe.msgpack.spec.MsgPackWriter;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.util.buffer.BufferUtil;\n+import java.util.List;\n+import java.util.Optional;\n+import org.agrona.DirectBuffer;\n+import org.agrona.ExpandableArrayBuffer;\n+import org.agrona.MutableDirectBuffer;\n+import org.agrona.concurrent.UnsafeBuffer;\n+\n+public final class MultiInstanceBodyProcessor\n+    implements BpmnElementContainerProcessor<ExecutableMultiInstanceBody> {\n+\n+  private static final DirectBuffer NIL_VALUE = new UnsafeBuffer(MsgPackHelper.NIL);\n+  private static final DirectBuffer LOOP_COUNTER_VARIABLE = BufferUtil.wrapString(\"loopCounter\");\n+\n+  private final MutableDirectBuffer loopCounterVariableBuffer =\n+      new UnsafeBuffer(new byte[Long.BYTES + 1]);\n+  private final DirectBuffer loopCounterVariableView = new UnsafeBuffer(0, 0);\n+\n+  private final MsgPackReader variableReader = new MsgPackReader();\n+  private final MsgPackWriter variableWriter = new MsgPackWriter();\n+  private final ExpandableArrayBuffer variableBuffer = new ExpandableArrayBuffer();\n+  private final DirectBuffer resultBuffer = new UnsafeBuffer(0, 0);\n+\n+  private final ExpressionProcessor expressionBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final BpmnEventSubscriptionBehavior eventSubscriptionBehavior;\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnIncidentBehavior incidentBehavior;\n+  private final VariablesState variablesState;\n+\n+  public MultiInstanceBodyProcessor(final BpmnBehaviors bpmnBehaviors) {\n+    stateTransitionBehavior = bpmnBehaviors.stateTransitionBehavior();\n+    eventSubscriptionBehavior = bpmnBehaviors.eventSubscriptionBehavior();\n+    stateBehavior = bpmnBehaviors.stateBehavior();\n+    variablesState = stateBehavior.getVariablesState();\n+    expressionBehavior = bpmnBehaviors.expressionBehavior();\n+    incidentBehavior = bpmnBehaviors.incidentBehavior();\n+  }\n+\n+  @Override\n+  public Class<ExecutableMultiInstanceBody> getType() {\n+    return ExecutableMultiInstanceBody.class;\n+  }\n+\n+  @Override\n+  public void onActivating(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    // verify that the input collection variable is present and valid\n+    final Optional<List<DirectBuffer>> results = readInputCollectionVariable(element, context);\n+    if (results.isEmpty()) {\n+      return;\n+    }\n+\n+    eventSubscriptionBehavior\n+        .subscribeToEvents(element, context)\n+        .ifRightOrLeft(\n+            ok -> stateTransitionBehavior.transitionToActivated(context),\n+            failure -> incidentBehavior.createIncident(failure, context));\n+  }\n+\n+  @Override\n+  public void onActivated(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    final var loopCharacteristics = element.getLoopCharacteristics();\n+    final Optional<List<DirectBuffer>> inputCollection =\n+        readInputCollectionVariable(element, context);\n+    if (inputCollection.isEmpty()) {\n+      return;\n+    }\n+\n+    final var array = inputCollection.get();\n+    loopCharacteristics\n+        .getOutputCollection()\n+        .ifPresent(variableName -> initializeOutputCollection(context, variableName, array.size()));\n+\n+    if (array.isEmpty()) {\n+      // complete the multi-instance body immediately\n+      stateTransitionBehavior.transitionToCompleting(context);\n+      return;\n+    }\n+\n+    if (loopCharacteristics.isSequential()) {\n+      final var firstItem = array.get(0);\n+      createInnerInstance(element, context, firstItem);\n+\n+    } else {\n+      array.forEach(item -> createInnerInstance(element, context, item));\n+    }\n+  }\n+\n+  @Override\n+  public void onCompleting(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    eventSubscriptionBehavior.unsubscribeFromEvents(context);\n+\n+    element\n+        .getLoopCharacteristics()\n+        .getOutputCollection()\n+        .ifPresent(variableName -> stateBehavior.propagateVariable(context, variableName));\n+\n+    stateTransitionBehavior.transitionToCompleted(context);\n+  }\n+\n+  @Override\n+  public void onCompleted(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    stateTransitionBehavior.takeOutgoingSequenceFlows(element, context);\n+\n+    stateBehavior.consumeToken(context);\n+    stateBehavior.removeInstance(context);\n+  }\n+\n+  @Override\n+  public void onTerminating(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {}\n+\n+  @Override\n+  public void onTerminated(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {}\n+\n+  @Override\n+  public void onEventOccurred(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIyOTI5MQ==", "bodyText": "As you can see nothing \ud83d\ude06\nIt is not yet implemented -> #4469", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424229291", "createdAt": "2020-05-13T07:31:50Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/container/MultiInstanceBodyProcessor.java", "diffHunk": "@@ -0,0 +1,337 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.container;\n+\n+import io.zeebe.el.Expression;\n+import io.zeebe.engine.nwe.BpmnElementContainerProcessor;\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.behavior.BpmnEventSubscriptionBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnIncidentBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateTransitionBehavior;\n+import io.zeebe.engine.processor.workflow.ExpressionProcessor;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableMultiInstanceBody;\n+import io.zeebe.engine.state.instance.VariablesState;\n+import io.zeebe.msgpack.spec.MsgPackHelper;\n+import io.zeebe.msgpack.spec.MsgPackReader;\n+import io.zeebe.msgpack.spec.MsgPackWriter;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.util.buffer.BufferUtil;\n+import java.util.List;\n+import java.util.Optional;\n+import org.agrona.DirectBuffer;\n+import org.agrona.ExpandableArrayBuffer;\n+import org.agrona.MutableDirectBuffer;\n+import org.agrona.concurrent.UnsafeBuffer;\n+\n+public final class MultiInstanceBodyProcessor\n+    implements BpmnElementContainerProcessor<ExecutableMultiInstanceBody> {\n+\n+  private static final DirectBuffer NIL_VALUE = new UnsafeBuffer(MsgPackHelper.NIL);\n+  private static final DirectBuffer LOOP_COUNTER_VARIABLE = BufferUtil.wrapString(\"loopCounter\");\n+\n+  private final MutableDirectBuffer loopCounterVariableBuffer =\n+      new UnsafeBuffer(new byte[Long.BYTES + 1]);\n+  private final DirectBuffer loopCounterVariableView = new UnsafeBuffer(0, 0);\n+\n+  private final MsgPackReader variableReader = new MsgPackReader();\n+  private final MsgPackWriter variableWriter = new MsgPackWriter();\n+  private final ExpandableArrayBuffer variableBuffer = new ExpandableArrayBuffer();\n+  private final DirectBuffer resultBuffer = new UnsafeBuffer(0, 0);\n+\n+  private final ExpressionProcessor expressionBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final BpmnEventSubscriptionBehavior eventSubscriptionBehavior;\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnIncidentBehavior incidentBehavior;\n+  private final VariablesState variablesState;\n+\n+  public MultiInstanceBodyProcessor(final BpmnBehaviors bpmnBehaviors) {\n+    stateTransitionBehavior = bpmnBehaviors.stateTransitionBehavior();\n+    eventSubscriptionBehavior = bpmnBehaviors.eventSubscriptionBehavior();\n+    stateBehavior = bpmnBehaviors.stateBehavior();\n+    variablesState = stateBehavior.getVariablesState();\n+    expressionBehavior = bpmnBehaviors.expressionBehavior();\n+    incidentBehavior = bpmnBehaviors.incidentBehavior();\n+  }\n+\n+  @Override\n+  public Class<ExecutableMultiInstanceBody> getType() {\n+    return ExecutableMultiInstanceBody.class;\n+  }\n+\n+  @Override\n+  public void onActivating(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    // verify that the input collection variable is present and valid\n+    final Optional<List<DirectBuffer>> results = readInputCollectionVariable(element, context);\n+    if (results.isEmpty()) {\n+      return;\n+    }\n+\n+    eventSubscriptionBehavior\n+        .subscribeToEvents(element, context)\n+        .ifRightOrLeft(\n+            ok -> stateTransitionBehavior.transitionToActivated(context),\n+            failure -> incidentBehavior.createIncident(failure, context));\n+  }\n+\n+  @Override\n+  public void onActivated(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    final var loopCharacteristics = element.getLoopCharacteristics();\n+    final Optional<List<DirectBuffer>> inputCollection =\n+        readInputCollectionVariable(element, context);\n+    if (inputCollection.isEmpty()) {\n+      return;\n+    }\n+\n+    final var array = inputCollection.get();\n+    loopCharacteristics\n+        .getOutputCollection()\n+        .ifPresent(variableName -> initializeOutputCollection(context, variableName, array.size()));\n+\n+    if (array.isEmpty()) {\n+      // complete the multi-instance body immediately\n+      stateTransitionBehavior.transitionToCompleting(context);\n+      return;\n+    }\n+\n+    if (loopCharacteristics.isSequential()) {\n+      final var firstItem = array.get(0);\n+      createInnerInstance(element, context, firstItem);\n+\n+    } else {\n+      array.forEach(item -> createInnerInstance(element, context, item));\n+    }\n+  }\n+\n+  @Override\n+  public void onCompleting(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    eventSubscriptionBehavior.unsubscribeFromEvents(context);\n+\n+    element\n+        .getLoopCharacteristics()\n+        .getOutputCollection()\n+        .ifPresent(variableName -> stateBehavior.propagateVariable(context, variableName));\n+\n+    stateTransitionBehavior.transitionToCompleted(context);\n+  }\n+\n+  @Override\n+  public void onCompleted(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    stateTransitionBehavior.takeOutgoingSequenceFlows(element, context);\n+\n+    stateBehavior.consumeToken(context);\n+    stateBehavior.removeInstance(context);\n+  }\n+\n+  @Override\n+  public void onTerminating(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {}\n+\n+  @Override\n+  public void onTerminated(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {}\n+\n+  @Override\n+  public void onEventOccurred(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3OTc5OA=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTUxNDM4OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/container/MultiInstanceBodyProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTozMDo0NFrOGUh-UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzozNToxM1rOGUlBJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE4MTMyOQ==", "bodyText": "Why we need to rewrite the collection?", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424181329", "createdAt": "2020-05-13T05:30:44Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/container/MultiInstanceBodyProcessor.java", "diffHunk": "@@ -0,0 +1,337 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.container;\n+\n+import io.zeebe.el.Expression;\n+import io.zeebe.engine.nwe.BpmnElementContainerProcessor;\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.behavior.BpmnEventSubscriptionBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnIncidentBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateTransitionBehavior;\n+import io.zeebe.engine.processor.workflow.ExpressionProcessor;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableMultiInstanceBody;\n+import io.zeebe.engine.state.instance.VariablesState;\n+import io.zeebe.msgpack.spec.MsgPackHelper;\n+import io.zeebe.msgpack.spec.MsgPackReader;\n+import io.zeebe.msgpack.spec.MsgPackWriter;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.util.buffer.BufferUtil;\n+import java.util.List;\n+import java.util.Optional;\n+import org.agrona.DirectBuffer;\n+import org.agrona.ExpandableArrayBuffer;\n+import org.agrona.MutableDirectBuffer;\n+import org.agrona.concurrent.UnsafeBuffer;\n+\n+public final class MultiInstanceBodyProcessor\n+    implements BpmnElementContainerProcessor<ExecutableMultiInstanceBody> {\n+\n+  private static final DirectBuffer NIL_VALUE = new UnsafeBuffer(MsgPackHelper.NIL);\n+  private static final DirectBuffer LOOP_COUNTER_VARIABLE = BufferUtil.wrapString(\"loopCounter\");\n+\n+  private final MutableDirectBuffer loopCounterVariableBuffer =\n+      new UnsafeBuffer(new byte[Long.BYTES + 1]);\n+  private final DirectBuffer loopCounterVariableView = new UnsafeBuffer(0, 0);\n+\n+  private final MsgPackReader variableReader = new MsgPackReader();\n+  private final MsgPackWriter variableWriter = new MsgPackWriter();\n+  private final ExpandableArrayBuffer variableBuffer = new ExpandableArrayBuffer();\n+  private final DirectBuffer resultBuffer = new UnsafeBuffer(0, 0);\n+\n+  private final ExpressionProcessor expressionBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final BpmnEventSubscriptionBehavior eventSubscriptionBehavior;\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnIncidentBehavior incidentBehavior;\n+  private final VariablesState variablesState;\n+\n+  public MultiInstanceBodyProcessor(final BpmnBehaviors bpmnBehaviors) {\n+    stateTransitionBehavior = bpmnBehaviors.stateTransitionBehavior();\n+    eventSubscriptionBehavior = bpmnBehaviors.eventSubscriptionBehavior();\n+    stateBehavior = bpmnBehaviors.stateBehavior();\n+    variablesState = stateBehavior.getVariablesState();\n+    expressionBehavior = bpmnBehaviors.expressionBehavior();\n+    incidentBehavior = bpmnBehaviors.incidentBehavior();\n+  }\n+\n+  @Override\n+  public Class<ExecutableMultiInstanceBody> getType() {\n+    return ExecutableMultiInstanceBody.class;\n+  }\n+\n+  @Override\n+  public void onActivating(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    // verify that the input collection variable is present and valid\n+    final Optional<List<DirectBuffer>> results = readInputCollectionVariable(element, context);\n+    if (results.isEmpty()) {\n+      return;\n+    }\n+\n+    eventSubscriptionBehavior\n+        .subscribeToEvents(element, context)\n+        .ifRightOrLeft(\n+            ok -> stateTransitionBehavior.transitionToActivated(context),\n+            failure -> incidentBehavior.createIncident(failure, context));\n+  }\n+\n+  @Override\n+  public void onActivated(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    final var loopCharacteristics = element.getLoopCharacteristics();\n+    final Optional<List<DirectBuffer>> inputCollection =\n+        readInputCollectionVariable(element, context);\n+    if (inputCollection.isEmpty()) {\n+      return;\n+    }\n+\n+    final var array = inputCollection.get();\n+    loopCharacteristics\n+        .getOutputCollection()\n+        .ifPresent(variableName -> initializeOutputCollection(context, variableName, array.size()));\n+\n+    if (array.isEmpty()) {\n+      // complete the multi-instance body immediately\n+      stateTransitionBehavior.transitionToCompleting(context);\n+      return;\n+    }\n+\n+    if (loopCharacteristics.isSequential()) {\n+      final var firstItem = array.get(0);\n+      createInnerInstance(element, context, firstItem);\n+\n+    } else {\n+      array.forEach(item -> createInnerInstance(element, context, item));\n+    }\n+  }\n+\n+  @Override\n+  public void onCompleting(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    eventSubscriptionBehavior.unsubscribeFromEvents(context);\n+\n+    element\n+        .getLoopCharacteristics()\n+        .getOutputCollection()\n+        .ifPresent(variableName -> stateBehavior.propagateVariable(context, variableName));\n+\n+    stateTransitionBehavior.transitionToCompleted(context);\n+  }\n+\n+  @Override\n+  public void onCompleted(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    stateTransitionBehavior.takeOutgoingSequenceFlows(element, context);\n+\n+    stateBehavior.consumeToken(context);\n+    stateBehavior.removeInstance(context);\n+  }\n+\n+  @Override\n+  public void onTerminating(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {}\n+\n+  @Override\n+  public void onTerminated(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {}\n+\n+  @Override\n+  public void onEventOccurred(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {}\n+\n+  private Optional<List<DirectBuffer>> readInputCollectionVariable(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+    final Expression inputCollection = element.getLoopCharacteristics().getInputCollection();\n+    return expressionBehavior.evaluateArrayExpression(inputCollection, context.toStepContext());\n+  }\n+\n+  private void createInnerInstance(\n+      final ExecutableMultiInstanceBody multiInstanceBody,\n+      final BpmnElementContext context,\n+      final DirectBuffer item) {\n+\n+    final var innerInstance =\n+        stateTransitionBehavior.activateChildInstance(\n+            context, multiInstanceBody.getInnerActivity());\n+\n+    // update loop counters\n+    final var bodyInstance = stateBehavior.getElementInstance(context);\n+    bodyInstance.incrementMultiInstanceLoopCounter();\n+    stateBehavior.updateElementInstance(bodyInstance);\n+\n+    innerInstance.setMultiInstanceLoopCounter(bodyInstance.getMultiInstanceLoopCounter());\n+    stateBehavior.updateElementInstance(innerInstance);\n+\n+    // set instance variables\n+    final var loopCharacteristics = multiInstanceBody.getLoopCharacteristics();\n+\n+    loopCharacteristics\n+        .getInputElement()\n+        .ifPresent(\n+            variableName ->\n+                variablesState.setVariableLocal(\n+                    innerInstance.getKey(), context.getWorkflowKey(), variableName, item));\n+\n+    // Output element expressions that are just a variable or nested property of a variable need to\n+    // be initialised with a nil-value. This makes sure that they are not written at a non-local\n+    // scope.\n+    loopCharacteristics\n+        .getOutputElement()\n+        .flatMap(Expression::getVariableName)\n+        .map(BufferUtil::wrapString)\n+        .ifPresent(\n+            variableName ->\n+                variablesState.setVariableLocal(\n+                    innerInstance.getKey(), context.getWorkflowKey(), variableName, NIL_VALUE));\n+\n+    variablesState.setVariableLocal(\n+        innerInstance.getKey(),\n+        context.getWorkflowKey(),\n+        LOOP_COUNTER_VARIABLE,\n+        wrapLoopCounter(innerInstance.getMultiInstanceLoopCounter()));\n+  }\n+\n+  private DirectBuffer wrapLoopCounter(final int loopCounter) {\n+    variableWriter.wrap(loopCounterVariableBuffer, 0);\n+\n+    variableWriter.writeInteger(loopCounter);\n+    final var length = variableWriter.getOffset();\n+\n+    loopCounterVariableView.wrap(loopCounterVariableBuffer, 0, length);\n+    return loopCounterVariableView;\n+  }\n+\n+  private void initializeOutputCollection(\n+      final BpmnElementContext context, final DirectBuffer variableName, final int size) {\n+\n+    variableWriter.wrap(variableBuffer, 0);\n+\n+    // initialize the array with nil\n+    variableWriter.writeArrayHeader(size);\n+    for (var i = 0; i < size; i++) {\n+      variableWriter.writeNil();\n+    }\n+\n+    final var length = variableWriter.getOffset();\n+\n+    stateBehavior.setLocalVariable(context, variableName, variableBuffer, 0, length);\n+  }\n+\n+  @Override\n+  public void onChildCompleted(\n+      final ExecutableMultiInstanceBody element,\n+      final BpmnElementContext flowScopeContext,\n+      final BpmnElementContext childContext) {\n+    final var loopCharacteristics = element.getLoopCharacteristics();\n+\n+    if (loopCharacteristics.isSequential()) {\n+\n+      final var inputCollectionVariable = readInputCollectionVariable(element, childContext);\n+      if (inputCollectionVariable.isEmpty()) {\n+        return;\n+      }\n+\n+      final var array = inputCollectionVariable.get();\n+      final var loopCounter =\n+          stateBehavior.getFlowScopeInstance(childContext).getMultiInstanceLoopCounter();\n+      if (loopCounter < array.size()) {\n+\n+        final var item = array.get(loopCounter);\n+        createInnerInstance(element, flowScopeContext, item);\n+      }\n+    }\n+\n+    final Optional<Boolean> updatedSuccessfully =\n+        loopCharacteristics\n+            .getOutputCollection()\n+            .map(variableName -> updateOutputCollection(element, childContext, variableName));\n+\n+    if (updatedSuccessfully.isPresent() && !updatedSuccessfully.get()) {\n+      // An incident was raised while updating the output collection, stop handling activity\n+      return;\n+    }\n+\n+    if (stateBehavior.isLastActiveExecutionPathInScope(childContext)) {\n+      stateTransitionBehavior.transitionToCompleting(flowScopeContext);\n+    }\n+  }\n+\n+  @Override\n+  public void onChildTerminated(\n+      final ExecutableMultiInstanceBody element,\n+      final BpmnElementContext flowScopeContext,\n+      final BpmnElementContext childContext) {\n+\n+    if (flowScopeContext.getIntent() == WorkflowInstanceIntent.ELEMENT_TERMINATING\n+        && stateBehavior.isLastActiveExecutionPathInScope(childContext)) {\n+      stateTransitionBehavior.transitionToTerminated(flowScopeContext);\n+\n+    } else {\n+      eventSubscriptionBehavior.publishTriggeredEventSubProcess(flowScopeContext);\n+    }\n+  }\n+\n+  private boolean updateOutputCollection(\n+      final ExecutableMultiInstanceBody element,\n+      final BpmnElementContext childContext,\n+      final DirectBuffer variableName) {\n+\n+    final var bodyInstanceKey = childContext.getFlowScopeKey();\n+    final var loopCounter =\n+        stateBehavior.getElementInstance(childContext).getMultiInstanceLoopCounter();\n+\n+    final Optional<DirectBuffer> elementVariable = readOutputElementVariable(element, childContext);\n+    if (elementVariable.isEmpty()) {\n+      return false;\n+    }\n+\n+    // we need to read the output element variable before the current collection is read,\n+    // because readOutputElementVariable(Context) uses the same buffer as getVariableLocal\n+    // this could also be avoided by cloning the current collection, but that is slower.\n+    final var currentCollection = variablesState.getVariableLocal(bodyInstanceKey, variableName);\n+    final var updatedCollection = insertAt(currentCollection, loopCounter, elementVariable.get());\n+    variablesState.setVariableLocal(\n+        bodyInstanceKey, childContext.getWorkflowKey(), variableName, updatedCollection);\n+\n+    return true;\n+  }\n+\n+  private Optional<DirectBuffer> readOutputElementVariable(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+    final var expression = element.getLoopCharacteristics().getOutputElement().orElseThrow();\n+    return expressionBehavior.evaluateAnyExpression(expression, context.toStepContext());\n+  }\n+\n+  private DirectBuffer insertAt(\n+      final DirectBuffer array, final int index, final DirectBuffer element) {\n+\n+    variableReader.wrap(array, 0, array.capacity());\n+    variableReader.readArrayHeader();\n+    variableReader.skipValues((long) index - 1L);\n+\n+    final var offsetBefore = variableReader.getOffset();\n+    variableReader.skipValue();\n+    final var offsetAfter = variableReader.getOffset();\n+\n+    variableWriter.wrap(variableBuffer, 0);\n+    variableWriter.writeRaw(array, 0, offsetBefore);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 328}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzMTIwNg==", "bodyText": "It is the same logic as the current implementation. We need to insert an element into the collection. Feel free to suggest another approach (in a separate issue maybe).", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424231206", "createdAt": "2020-05-13T07:35:13Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/container/MultiInstanceBodyProcessor.java", "diffHunk": "@@ -0,0 +1,337 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.container;\n+\n+import io.zeebe.el.Expression;\n+import io.zeebe.engine.nwe.BpmnElementContainerProcessor;\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.behavior.BpmnEventSubscriptionBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnIncidentBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateTransitionBehavior;\n+import io.zeebe.engine.processor.workflow.ExpressionProcessor;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableMultiInstanceBody;\n+import io.zeebe.engine.state.instance.VariablesState;\n+import io.zeebe.msgpack.spec.MsgPackHelper;\n+import io.zeebe.msgpack.spec.MsgPackReader;\n+import io.zeebe.msgpack.spec.MsgPackWriter;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.util.buffer.BufferUtil;\n+import java.util.List;\n+import java.util.Optional;\n+import org.agrona.DirectBuffer;\n+import org.agrona.ExpandableArrayBuffer;\n+import org.agrona.MutableDirectBuffer;\n+import org.agrona.concurrent.UnsafeBuffer;\n+\n+public final class MultiInstanceBodyProcessor\n+    implements BpmnElementContainerProcessor<ExecutableMultiInstanceBody> {\n+\n+  private static final DirectBuffer NIL_VALUE = new UnsafeBuffer(MsgPackHelper.NIL);\n+  private static final DirectBuffer LOOP_COUNTER_VARIABLE = BufferUtil.wrapString(\"loopCounter\");\n+\n+  private final MutableDirectBuffer loopCounterVariableBuffer =\n+      new UnsafeBuffer(new byte[Long.BYTES + 1]);\n+  private final DirectBuffer loopCounterVariableView = new UnsafeBuffer(0, 0);\n+\n+  private final MsgPackReader variableReader = new MsgPackReader();\n+  private final MsgPackWriter variableWriter = new MsgPackWriter();\n+  private final ExpandableArrayBuffer variableBuffer = new ExpandableArrayBuffer();\n+  private final DirectBuffer resultBuffer = new UnsafeBuffer(0, 0);\n+\n+  private final ExpressionProcessor expressionBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final BpmnEventSubscriptionBehavior eventSubscriptionBehavior;\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnIncidentBehavior incidentBehavior;\n+  private final VariablesState variablesState;\n+\n+  public MultiInstanceBodyProcessor(final BpmnBehaviors bpmnBehaviors) {\n+    stateTransitionBehavior = bpmnBehaviors.stateTransitionBehavior();\n+    eventSubscriptionBehavior = bpmnBehaviors.eventSubscriptionBehavior();\n+    stateBehavior = bpmnBehaviors.stateBehavior();\n+    variablesState = stateBehavior.getVariablesState();\n+    expressionBehavior = bpmnBehaviors.expressionBehavior();\n+    incidentBehavior = bpmnBehaviors.incidentBehavior();\n+  }\n+\n+  @Override\n+  public Class<ExecutableMultiInstanceBody> getType() {\n+    return ExecutableMultiInstanceBody.class;\n+  }\n+\n+  @Override\n+  public void onActivating(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    // verify that the input collection variable is present and valid\n+    final Optional<List<DirectBuffer>> results = readInputCollectionVariable(element, context);\n+    if (results.isEmpty()) {\n+      return;\n+    }\n+\n+    eventSubscriptionBehavior\n+        .subscribeToEvents(element, context)\n+        .ifRightOrLeft(\n+            ok -> stateTransitionBehavior.transitionToActivated(context),\n+            failure -> incidentBehavior.createIncident(failure, context));\n+  }\n+\n+  @Override\n+  public void onActivated(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    final var loopCharacteristics = element.getLoopCharacteristics();\n+    final Optional<List<DirectBuffer>> inputCollection =\n+        readInputCollectionVariable(element, context);\n+    if (inputCollection.isEmpty()) {\n+      return;\n+    }\n+\n+    final var array = inputCollection.get();\n+    loopCharacteristics\n+        .getOutputCollection()\n+        .ifPresent(variableName -> initializeOutputCollection(context, variableName, array.size()));\n+\n+    if (array.isEmpty()) {\n+      // complete the multi-instance body immediately\n+      stateTransitionBehavior.transitionToCompleting(context);\n+      return;\n+    }\n+\n+    if (loopCharacteristics.isSequential()) {\n+      final var firstItem = array.get(0);\n+      createInnerInstance(element, context, firstItem);\n+\n+    } else {\n+      array.forEach(item -> createInnerInstance(element, context, item));\n+    }\n+  }\n+\n+  @Override\n+  public void onCompleting(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    eventSubscriptionBehavior.unsubscribeFromEvents(context);\n+\n+    element\n+        .getLoopCharacteristics()\n+        .getOutputCollection()\n+        .ifPresent(variableName -> stateBehavior.propagateVariable(context, variableName));\n+\n+    stateTransitionBehavior.transitionToCompleted(context);\n+  }\n+\n+  @Override\n+  public void onCompleted(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+\n+    stateTransitionBehavior.takeOutgoingSequenceFlows(element, context);\n+\n+    stateBehavior.consumeToken(context);\n+    stateBehavior.removeInstance(context);\n+  }\n+\n+  @Override\n+  public void onTerminating(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {}\n+\n+  @Override\n+  public void onTerminated(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {}\n+\n+  @Override\n+  public void onEventOccurred(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {}\n+\n+  private Optional<List<DirectBuffer>> readInputCollectionVariable(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+    final Expression inputCollection = element.getLoopCharacteristics().getInputCollection();\n+    return expressionBehavior.evaluateArrayExpression(inputCollection, context.toStepContext());\n+  }\n+\n+  private void createInnerInstance(\n+      final ExecutableMultiInstanceBody multiInstanceBody,\n+      final BpmnElementContext context,\n+      final DirectBuffer item) {\n+\n+    final var innerInstance =\n+        stateTransitionBehavior.activateChildInstance(\n+            context, multiInstanceBody.getInnerActivity());\n+\n+    // update loop counters\n+    final var bodyInstance = stateBehavior.getElementInstance(context);\n+    bodyInstance.incrementMultiInstanceLoopCounter();\n+    stateBehavior.updateElementInstance(bodyInstance);\n+\n+    innerInstance.setMultiInstanceLoopCounter(bodyInstance.getMultiInstanceLoopCounter());\n+    stateBehavior.updateElementInstance(innerInstance);\n+\n+    // set instance variables\n+    final var loopCharacteristics = multiInstanceBody.getLoopCharacteristics();\n+\n+    loopCharacteristics\n+        .getInputElement()\n+        .ifPresent(\n+            variableName ->\n+                variablesState.setVariableLocal(\n+                    innerInstance.getKey(), context.getWorkflowKey(), variableName, item));\n+\n+    // Output element expressions that are just a variable or nested property of a variable need to\n+    // be initialised with a nil-value. This makes sure that they are not written at a non-local\n+    // scope.\n+    loopCharacteristics\n+        .getOutputElement()\n+        .flatMap(Expression::getVariableName)\n+        .map(BufferUtil::wrapString)\n+        .ifPresent(\n+            variableName ->\n+                variablesState.setVariableLocal(\n+                    innerInstance.getKey(), context.getWorkflowKey(), variableName, NIL_VALUE));\n+\n+    variablesState.setVariableLocal(\n+        innerInstance.getKey(),\n+        context.getWorkflowKey(),\n+        LOOP_COUNTER_VARIABLE,\n+        wrapLoopCounter(innerInstance.getMultiInstanceLoopCounter()));\n+  }\n+\n+  private DirectBuffer wrapLoopCounter(final int loopCounter) {\n+    variableWriter.wrap(loopCounterVariableBuffer, 0);\n+\n+    variableWriter.writeInteger(loopCounter);\n+    final var length = variableWriter.getOffset();\n+\n+    loopCounterVariableView.wrap(loopCounterVariableBuffer, 0, length);\n+    return loopCounterVariableView;\n+  }\n+\n+  private void initializeOutputCollection(\n+      final BpmnElementContext context, final DirectBuffer variableName, final int size) {\n+\n+    variableWriter.wrap(variableBuffer, 0);\n+\n+    // initialize the array with nil\n+    variableWriter.writeArrayHeader(size);\n+    for (var i = 0; i < size; i++) {\n+      variableWriter.writeNil();\n+    }\n+\n+    final var length = variableWriter.getOffset();\n+\n+    stateBehavior.setLocalVariable(context, variableName, variableBuffer, 0, length);\n+  }\n+\n+  @Override\n+  public void onChildCompleted(\n+      final ExecutableMultiInstanceBody element,\n+      final BpmnElementContext flowScopeContext,\n+      final BpmnElementContext childContext) {\n+    final var loopCharacteristics = element.getLoopCharacteristics();\n+\n+    if (loopCharacteristics.isSequential()) {\n+\n+      final var inputCollectionVariable = readInputCollectionVariable(element, childContext);\n+      if (inputCollectionVariable.isEmpty()) {\n+        return;\n+      }\n+\n+      final var array = inputCollectionVariable.get();\n+      final var loopCounter =\n+          stateBehavior.getFlowScopeInstance(childContext).getMultiInstanceLoopCounter();\n+      if (loopCounter < array.size()) {\n+\n+        final var item = array.get(loopCounter);\n+        createInnerInstance(element, flowScopeContext, item);\n+      }\n+    }\n+\n+    final Optional<Boolean> updatedSuccessfully =\n+        loopCharacteristics\n+            .getOutputCollection()\n+            .map(variableName -> updateOutputCollection(element, childContext, variableName));\n+\n+    if (updatedSuccessfully.isPresent() && !updatedSuccessfully.get()) {\n+      // An incident was raised while updating the output collection, stop handling activity\n+      return;\n+    }\n+\n+    if (stateBehavior.isLastActiveExecutionPathInScope(childContext)) {\n+      stateTransitionBehavior.transitionToCompleting(flowScopeContext);\n+    }\n+  }\n+\n+  @Override\n+  public void onChildTerminated(\n+      final ExecutableMultiInstanceBody element,\n+      final BpmnElementContext flowScopeContext,\n+      final BpmnElementContext childContext) {\n+\n+    if (flowScopeContext.getIntent() == WorkflowInstanceIntent.ELEMENT_TERMINATING\n+        && stateBehavior.isLastActiveExecutionPathInScope(childContext)) {\n+      stateTransitionBehavior.transitionToTerminated(flowScopeContext);\n+\n+    } else {\n+      eventSubscriptionBehavior.publishTriggeredEventSubProcess(flowScopeContext);\n+    }\n+  }\n+\n+  private boolean updateOutputCollection(\n+      final ExecutableMultiInstanceBody element,\n+      final BpmnElementContext childContext,\n+      final DirectBuffer variableName) {\n+\n+    final var bodyInstanceKey = childContext.getFlowScopeKey();\n+    final var loopCounter =\n+        stateBehavior.getElementInstance(childContext).getMultiInstanceLoopCounter();\n+\n+    final Optional<DirectBuffer> elementVariable = readOutputElementVariable(element, childContext);\n+    if (elementVariable.isEmpty()) {\n+      return false;\n+    }\n+\n+    // we need to read the output element variable before the current collection is read,\n+    // because readOutputElementVariable(Context) uses the same buffer as getVariableLocal\n+    // this could also be avoided by cloning the current collection, but that is slower.\n+    final var currentCollection = variablesState.getVariableLocal(bodyInstanceKey, variableName);\n+    final var updatedCollection = insertAt(currentCollection, loopCounter, elementVariable.get());\n+    variablesState.setVariableLocal(\n+        bodyInstanceKey, childContext.getWorkflowKey(), variableName, updatedCollection);\n+\n+    return true;\n+  }\n+\n+  private Optional<DirectBuffer> readOutputElementVariable(\n+      final ExecutableMultiInstanceBody element, final BpmnElementContext context) {\n+    final var expression = element.getLoopCharacteristics().getOutputElement().orElseThrow();\n+    return expressionBehavior.evaluateAnyExpression(expression, context.toStepContext());\n+  }\n+\n+  private DirectBuffer insertAt(\n+      final DirectBuffer array, final int index, final DirectBuffer element) {\n+\n+    variableReader.wrap(array, 0, array.capacity());\n+    variableReader.readArrayHeader();\n+    variableReader.skipValues((long) index - 1L);\n+\n+    final var offsetBefore = variableReader.getOffset();\n+    variableReader.skipValue();\n+    final var offsetAfter = variableReader.getOffset();\n+\n+    variableWriter.wrap(variableBuffer, 0);\n+    variableWriter.writeRaw(array, 0, offsetBefore);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE4MTMyOQ=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 328}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTUxNTgzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/container/SubProcessProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTozMTozMlrOGUh_Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzozNTo0MVrOGUlCDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE4MTU1OA==", "bodyText": "What happens in these cases?", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424181558", "createdAt": "2020-05-13T05:31:32Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/container/SubProcessProcessor.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.container;\n+\n+import io.zeebe.engine.nwe.BpmnElementContainerProcessor;\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.behavior.BpmnEventSubscriptionBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateTransitionBehavior;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElementContainer;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+\n+public final class SubProcessProcessor\n+    implements BpmnElementContainerProcessor<ExecutableFlowElementContainer> {\n+\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final BpmnEventSubscriptionBehavior eventSubscriptionBehavior;\n+\n+  public SubProcessProcessor(final BpmnBehaviors bpmnBehaviors) {\n+    stateBehavior = bpmnBehaviors.stateBehavior();\n+    stateTransitionBehavior = bpmnBehaviors.stateTransitionBehavior();\n+    eventSubscriptionBehavior = bpmnBehaviors.eventSubscriptionBehavior();\n+  }\n+\n+  @Override\n+  public void onChildCompleted(\n+      final ExecutableFlowElementContainer element,\n+      final BpmnElementContext flowScopeContext,\n+      final BpmnElementContext childContext) {\n+\n+    // TODO (saig0): consume token before calling,\n+    //  this can be done when the rest of this processor is implemented\n+    if (stateBehavior.isLastActiveExecutionPathInScope(childContext)) {\n+      stateTransitionBehavior.transitionToCompleting(flowScopeContext);\n+    }\n+  }\n+\n+  @Override\n+  public void onChildTerminated(\n+      final ExecutableFlowElementContainer element,\n+      final BpmnElementContext flowScopeContext,\n+      final BpmnElementContext childContext) {\n+\n+    if (flowScopeContext.getIntent() == WorkflowInstanceIntent.ELEMENT_TERMINATING\n+        && stateBehavior.isLastActiveExecutionPathInScope(childContext)) {\n+      stateTransitionBehavior.transitionToTerminated(flowScopeContext);\n+\n+    } else {\n+      eventSubscriptionBehavior.publishTriggeredEventSubProcess(flowScopeContext);\n+    }\n+  }\n+\n+  @Override\n+  public Class<ExecutableFlowElementContainer> getType() {\n+    return ExecutableFlowElementContainer.class;\n+  }\n+\n+  @Override\n+  public void onActivating(\n+      final ExecutableFlowElementContainer element, final BpmnElementContext context) {}\n+\n+  @Override\n+  public void onActivated(\n+      final ExecutableFlowElementContainer element, final BpmnElementContext context) {}\n+\n+  @Override\n+  public void onCompleting(\n+      final ExecutableFlowElementContainer element, final BpmnElementContext context) {}\n+\n+  @Override\n+  public void onCompleted(\n+      final ExecutableFlowElementContainer element, final BpmnElementContext context) {}\n+\n+  @Override\n+  public void onTerminating(\n+      final ExecutableFlowElementContainer element, final BpmnElementContext context) {}\n+\n+  @Override\n+  public void onTerminated(\n+      final ExecutableFlowElementContainer element, final BpmnElementContext context) {}\n+\n+  @Override\n+  public void onEventOccurred(\n+      final ExecutableFlowElementContainer element, final BpmnElementContext context) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzMTQzNg==", "bodyText": "It is not yet implemented -> #4474", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424231436", "createdAt": "2020-05-13T07:35:41Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/container/SubProcessProcessor.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.container;\n+\n+import io.zeebe.engine.nwe.BpmnElementContainerProcessor;\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.behavior.BpmnEventSubscriptionBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateTransitionBehavior;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowElementContainer;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+\n+public final class SubProcessProcessor\n+    implements BpmnElementContainerProcessor<ExecutableFlowElementContainer> {\n+\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final BpmnEventSubscriptionBehavior eventSubscriptionBehavior;\n+\n+  public SubProcessProcessor(final BpmnBehaviors bpmnBehaviors) {\n+    stateBehavior = bpmnBehaviors.stateBehavior();\n+    stateTransitionBehavior = bpmnBehaviors.stateTransitionBehavior();\n+    eventSubscriptionBehavior = bpmnBehaviors.eventSubscriptionBehavior();\n+  }\n+\n+  @Override\n+  public void onChildCompleted(\n+      final ExecutableFlowElementContainer element,\n+      final BpmnElementContext flowScopeContext,\n+      final BpmnElementContext childContext) {\n+\n+    // TODO (saig0): consume token before calling,\n+    //  this can be done when the rest of this processor is implemented\n+    if (stateBehavior.isLastActiveExecutionPathInScope(childContext)) {\n+      stateTransitionBehavior.transitionToCompleting(flowScopeContext);\n+    }\n+  }\n+\n+  @Override\n+  public void onChildTerminated(\n+      final ExecutableFlowElementContainer element,\n+      final BpmnElementContext flowScopeContext,\n+      final BpmnElementContext childContext) {\n+\n+    if (flowScopeContext.getIntent() == WorkflowInstanceIntent.ELEMENT_TERMINATING\n+        && stateBehavior.isLastActiveExecutionPathInScope(childContext)) {\n+      stateTransitionBehavior.transitionToTerminated(flowScopeContext);\n+\n+    } else {\n+      eventSubscriptionBehavior.publishTriggeredEventSubProcess(flowScopeContext);\n+    }\n+  }\n+\n+  @Override\n+  public Class<ExecutableFlowElementContainer> getType() {\n+    return ExecutableFlowElementContainer.class;\n+  }\n+\n+  @Override\n+  public void onActivating(\n+      final ExecutableFlowElementContainer element, final BpmnElementContext context) {}\n+\n+  @Override\n+  public void onActivated(\n+      final ExecutableFlowElementContainer element, final BpmnElementContext context) {}\n+\n+  @Override\n+  public void onCompleting(\n+      final ExecutableFlowElementContainer element, final BpmnElementContext context) {}\n+\n+  @Override\n+  public void onCompleted(\n+      final ExecutableFlowElementContainer element, final BpmnElementContext context) {}\n+\n+  @Override\n+  public void onTerminating(\n+      final ExecutableFlowElementContainer element, final BpmnElementContext context) {}\n+\n+  @Override\n+  public void onTerminated(\n+      final ExecutableFlowElementContainer element, final BpmnElementContext context) {}\n+\n+  @Override\n+  public void onEventOccurred(\n+      final ExecutableFlowElementContainer element, final BpmnElementContext context) {}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE4MTU1OA=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTUyMzA2OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/gateway/ExclusiveGatewayProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTozNToxNFrOGUiDZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTozNToxNFrOGUiDZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE4MjYzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (element.getOutgoing().size() == 1 && element.getOutgoing().get(0).getCondition() == null) {\n          \n          \n            \n                if (hasOneOutgoingWithoutCondition(element.getOutgoing()) {", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424182631", "createdAt": "2020-05-13T05:35:14Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/gateway/ExclusiveGatewayProcessor.java", "diffHunk": "@@ -0,0 +1,190 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.gateway;\n+\n+import static io.zeebe.util.buffer.BufferUtil.bufferAsString;\n+\n+import io.zeebe.el.Expression;\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.nwe.BpmnElementProcessor;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.behavior.BpmnDeferredRecordsBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnIncidentBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateTransitionBehavior;\n+import io.zeebe.engine.processor.Failure;\n+import io.zeebe.engine.processor.workflow.ExpressionProcessor;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableExclusiveGateway;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableSequenceFlow;\n+import io.zeebe.engine.state.instance.IndexedRecord;\n+import io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceRecord;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import io.zeebe.protocol.record.value.ErrorType;\n+import io.zeebe.util.Either;\n+\n+public final class ExclusiveGatewayProcessor\n+    implements BpmnElementProcessor<ExecutableExclusiveGateway> {\n+\n+  private static final String NO_OUTGOING_FLOW_CHOSEN_ERROR =\n+      \"Expected at least one condition to evaluate to true, or to have a default flow\";\n+\n+  private final WorkflowInstanceRecord record = new WorkflowInstanceRecord();\n+\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final BpmnIncidentBehavior incidentBehavior;\n+  private final BpmnDeferredRecordsBehavior deferredRecordsBehavior;\n+  private final ExpressionProcessor expressionBehavior;\n+\n+  public ExclusiveGatewayProcessor(final BpmnBehaviors behaviors) {\n+    expressionBehavior = behaviors.expressionBehavior();\n+    incidentBehavior = behaviors.incidentBehavior();\n+    stateBehavior = behaviors.stateBehavior();\n+    deferredRecordsBehavior = behaviors.deferredRecordsBehavior();\n+    stateTransitionBehavior = behaviors.stateTransitionBehavior();\n+  }\n+\n+  @Override\n+  public Class<ExecutableExclusiveGateway> getType() {\n+    return ExecutableExclusiveGateway.class;\n+  }\n+\n+  @Override\n+  public void onActivating(\n+      final ExecutableExclusiveGateway element, final BpmnElementContext context) {\n+    if (element.getOutgoing().isEmpty()) {\n+      // there are no flows to take: the gateway is an implicit end for the flow scope\n+      stateTransitionBehavior.transitionToActivated(context);\n+      return;\n+    }\n+\n+    // find outgoing sequence flow with fulfilled condition or the default\n+    findSequenceFlowToTake(element, context)\n+        .ifRightOrLeft(\n+            sequenceFlow -> {\n+              stateTransitionBehavior.transitionToActivated(context);\n+\n+              // defer sequence flow taken, as it will only be taken when the gateway is completed\n+              record.wrap(context.getRecordValue());\n+              record.setElementId(sequenceFlow.getId());\n+              record.setBpmnElementType(BpmnElementType.SEQUENCE_FLOW);\n+              deferredRecordsBehavior.deferNewRecord(\n+                  context,\n+                  context.getElementInstanceKey(),\n+                  record,\n+                  WorkflowInstanceIntent.SEQUENCE_FLOW_TAKEN);\n+            },\n+            failure -> incidentBehavior.createIncident(failure, context));\n+  }\n+\n+  @Override\n+  public void onActivated(\n+      final ExecutableExclusiveGateway element, final BpmnElementContext context) {\n+    stateTransitionBehavior.transitionToCompleting(context);\n+  }\n+\n+  @Override\n+  public void onCompleting(\n+      final ExecutableExclusiveGateway element, final BpmnElementContext context) {\n+    stateTransitionBehavior.transitionToCompleted(context);\n+  }\n+\n+  @Override\n+  public void onCompleted(\n+      final ExecutableExclusiveGateway element, final BpmnElementContext context) {\n+\n+    deferredRecordsBehavior.getDeferredRecords(context).stream()\n+        .filter(r -> r.hasState(WorkflowInstanceIntent.SEQUENCE_FLOW_TAKEN))\n+        .findFirst()\n+        .map(r -> getOutgoingSequenceFlow(element, context, r))\n+        .ifPresentOrElse(\n+            sequenceFlow -> stateTransitionBehavior.takeSequenceFlow(context, sequenceFlow),\n+            () -> stateTransitionBehavior.onElementCompleted(element, context));\n+\n+    stateBehavior.consumeToken(context);\n+    stateBehavior.removeInstance(context);\n+  }\n+\n+  @Override\n+  public void onTerminating(\n+      final ExecutableExclusiveGateway element, final BpmnElementContext context) {\n+    stateTransitionBehavior.transitionToTerminated(context);\n+  }\n+\n+  @Override\n+  public void onTerminated(\n+      final ExecutableExclusiveGateway element, final BpmnElementContext context) {\n+\n+    incidentBehavior.resolveIncidents(context);\n+\n+    stateTransitionBehavior.onElementTerminated(element, context);\n+\n+    stateBehavior.consumeToken(context);\n+    stateBehavior.removeInstance(context);\n+  }\n+\n+  @Override\n+  public void onEventOccurred(\n+      final ExecutableExclusiveGateway element, final BpmnElementContext context) {\n+    throw new UnsupportedOperationException(\n+        String.format(\n+            \"expected to handle occurred event on exclusive gateway, but events should not occur on exclusive gateway. [context: %s]\",\n+            context.toString()));\n+  }\n+\n+  private ExecutableSequenceFlow getOutgoingSequenceFlow(\n+      final ExecutableExclusiveGateway element,\n+      final BpmnElementContext context,\n+      final IndexedRecord record) {\n+\n+    final var sequenceFlowId = record.getValue().getElementIdBuffer();\n+\n+    return element.getOutgoing().stream()\n+        .filter(sequenceFlow -> sequenceFlow.getId().equals(sequenceFlowId))\n+        .findFirst()\n+        .orElseThrow(\n+            () ->\n+                new IllegalStateException(\n+                    String.format(\n+                        \"Expected sequence flow with id '%s' but not found. [context: %s]\",\n+                        bufferAsString(sequenceFlowId), context)));\n+  }\n+\n+  private Either<Failure, ExecutableSequenceFlow> findSequenceFlowToTake(\n+      final ExecutableExclusiveGateway element, final BpmnElementContext context) {\n+\n+    if (element.getOutgoing().size() == 1 && element.getOutgoing().get(0).getCondition() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTUzNTMxOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/multiinstance/MultiInstanceBodyCompletedHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTo0MTo0M1rOGUiKpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo0OTo0N1rOGUlh2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE4NDQ4Ng==", "bodyText": "why we need a long here?", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424184486", "createdAt": "2020-05-13T05:41:43Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/multiinstance/MultiInstanceBodyCompletedHandler.java", "diffHunk": "@@ -112,7 +114,7 @@ private DirectBuffer insertAt(\n \n     variableReader.wrap(array, 0, array.capacity());\n     variableReader.readArrayHeader();\n-    variableReader.skipValues(index - 1);\n+    variableReader.skipValues((long) index - 1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzMjY2NQ==", "bodyText": "I don't know. It's coming from the MsgPackReader.", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424232665", "createdAt": "2020-05-13T07:37:54Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/multiinstance/MultiInstanceBodyCompletedHandler.java", "diffHunk": "@@ -112,7 +114,7 @@ private DirectBuffer insertAt(\n \n     variableReader.wrap(array, 0, array.capacity());\n     variableReader.readArrayHeader();\n-    variableReader.skipValues(index - 1);\n+    variableReader.skipValues((long) index - 1L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE4NDQ4Ng=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzOTU3OQ==", "bodyText": "It was considered a bug by Sonar. And although unlikely to cause any problem, I do think this is slightly better", "url": "https://github.com/camunda-cloud/zeebe/pull/4370#discussion_r424239579", "createdAt": "2020-05-13T07:49:47Z", "author": {"login": "korthout"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/multiinstance/MultiInstanceBodyCompletedHandler.java", "diffHunk": "@@ -112,7 +114,7 @@ private DirectBuffer insertAt(\n \n     variableReader.wrap(array, 0, array.capacity());\n     variableReader.readArrayHeader();\n-    variableReader.skipValues(index - 1);\n+    variableReader.skipValues((long) index - 1L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE4NDQ4Ng=="}, "originalCommit": {"oid": "49d7ccb67f648eadd71bb1cc5c70bd60fe7f81a3"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4741, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}