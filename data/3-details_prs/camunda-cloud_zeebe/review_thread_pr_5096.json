{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMDEzMzY3", "number": 5096, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzoxODo1MlrOEU4F6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjowNzoyNFrOEWFyFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzI1OTkyOnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzoxODo1MlrOG7UItQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzoxOTo0M1rOG7UKOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg0OTA3Nw==", "bodyText": "lastApplied the last applied index and the last applied term\nNot really right? \ud83d\ude05\n\nThis method is only for the joining right? After it is ready it is successful joined?", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r464849077", "createdAt": "2020-08-04T07:18:52Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java", "diffHunk": "@@ -758,12 +733,16 @@ public long getLastApplied() {\n   }\n \n   /**\n-   * Returns the term of the last applied entry.\n+   * Sets the last applied index.\n    *\n-   * @return the last applied index\n+   * @param lastApplied the last applied index and the last applied term", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg0OTQ2NQ==", "bodyText": "Could we just move this to the commit method? and remove this property?", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r464849465", "createdAt": "2020-08-04T07:19:43Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java", "diffHunk": "@@ -758,12 +733,16 @@ public long getLastApplied() {\n   }\n \n   /**\n-   * Returns the term of the last applied entry.\n+   * Sets the last applied index.\n    *\n-   * @return the last applied index\n+   * @param lastApplied the last applied index and the last applied term", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg0OTA3Nw=="}, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzMzMzczOnYy", "diffSide": "LEFT", "path": "atomix/cluster/src/main/java/io/atomix/raft/partition/RaftPartitionGroupConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzo0MToyNFrOG7U1Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjowMzozM1rOG9Njww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2MDQyMw==", "bodyText": "Will this break compatibility? Because I think this configs are serialized?", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r464860423", "createdAt": "2020-08-04T07:41:24Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/partition/RaftPartitionGroupConfig.java", "diffHunk": "@@ -39,39 +37,10 @@\n   private Duration electionTimeout = DEFAULT_ELECTION_TIMEOUT;\n   private Duration heartbeatInterval = DEFAULT_HEARTBEAT_INTERVAL;\n   private RaftStorageConfig storageConfig = new RaftStorageConfig();\n-  private RaftCompactionConfig compactionConfig = new RaftCompactionConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUxMTA3OA==", "bodyText": "As far as I know this was used by the PartitionManagementGroupService, which sends the configurations to other nodes. But we removed it. So now I don't find any place where this config is persisted or used for communication with other nodes. Also our upgradability test and rolling update tests passed. Do you have any other suggestions on how to test that this does not break compatability?", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r465511078", "createdAt": "2020-08-05T06:52:01Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/partition/RaftPartitionGroupConfig.java", "diffHunk": "@@ -39,39 +37,10 @@\n   private Duration electionTimeout = DEFAULT_ELECTION_TIMEOUT;\n   private Duration heartbeatInterval = DEFAULT_HEARTBEAT_INTERVAL;\n   private RaftStorageConfig storageConfig = new RaftStorageConfig();\n-  private RaftCompactionConfig compactionConfig = new RaftCompactionConfig();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2MDQyMw=="}, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzODQ2Nw==", "bodyText": "Ok thanks. Was not sure where this is done to be honest.", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r466838467", "createdAt": "2020-08-07T06:03:33Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/partition/RaftPartitionGroupConfig.java", "diffHunk": "@@ -39,39 +37,10 @@\n   private Duration electionTimeout = DEFAULT_ELECTION_TIMEOUT;\n   private Duration heartbeatInterval = DEFAULT_HEARTBEAT_INTERVAL;\n   private RaftStorageConfig storageConfig = new RaftStorageConfig();\n-  private RaftCompactionConfig compactionConfig = new RaftCompactionConfig();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2MDQyMw=="}, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzM3MzE3OnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzo1Mjo0MFrOG7VM7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzo1Mjo0MFrOG7VM7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2NjU0MQ==", "bodyText": "Something we should do here? The last applied is now the last commit index right?", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r464866541", "createdAt": "2020-08-04T07:52:40Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -145,6 +145,7 @@ private void addSnapshotListener() {\n     // If the index has already been applied, we have enough state to populate the state machine up\n     // to this index.\n     // Skip the snapshot and response successfully.\n+    // TODO: Does the following condition make sense?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzM4ODU3OnYy", "diffSide": "LEFT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzo1Njo0MlrOG7VWOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTozODoxNFrOG8sEsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2ODkyMg==", "bodyText": "where is this moved?", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r464868922", "createdAt": "2020-08-04T07:56:42Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -654,21 +646,6 @@ private void stepByStepClosing(\n             });\n   }\n \n-  @Override\n-  public <T extends RaftLogEntry> void onCommit(final Indexed<T> indexed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI4OTg0Mg==", "bodyText": "This is removed. This was used only to set the logstream commit position. It is now done by the LogStorageAppender. Downside of this approach is that followers cannot update commit position, which is not required now.", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r466289842", "createdAt": "2020-08-06T09:38:14Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -654,21 +646,6 @@ private void stepByStepClosing(\n             });\n   }\n \n-  @Override\n-  public <T extends RaftLogEntry> void onCommit(final Indexed<T> indexed) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2ODkyMg=="}, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzM5MzA2OnYy", "diffSide": "RIGHT", "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/Listener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzo1Nzo1NFrOG7VY-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzo1Nzo1NFrOG7VY-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg2OTYyNw==", "bodyText": "Could you move this please to the onCommit, since it is unrelated to releaseBackpressure", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r464869627", "createdAt": "2020-08-04T07:57:54Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/Listener.java", "diffHunk": "@@ -50,5 +50,6 @@ public void onCommitError(final long address, final Throwable error) {\n \n   private void releaseBackPressure() {\n     appender.releaseBackPressure(highestPosition);\n+    appender.notifyCommitPosition(highestPosition);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDI2NjM1OnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjoxNTozNlrOG7duLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjoxNTozNlrOG7duLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwNjEyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param latestEntry latest committed entry\n          \n          \n            \n               * @param lastCommitIndex index of the most recently committed entry", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r465006126", "createdAt": "2020-08-04T12:15:36Z", "author": {"login": "MiguelPires"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java", "diffHunk": "@@ -338,8 +331,8 @@ public void removeCommitListener(final RaftCommitListener commitListener) {\n    *\n    * @param latestEntry latest committed entry", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDI2ODYyOnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjoxNjoyMFrOG7dvkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjoxNjoyMFrOG7dvkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwNjQ4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return The server state machine.\n          \n          \n            \n               * @return The log compactor.", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r465006480", "createdAt": "2020-08-04T12:16:20Z", "author": {"login": "MiguelPires"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java", "diffHunk": "@@ -886,8 +865,8 @@ public RaftRoleMetrics getRaftRoleMetrics() {\n    *\n    * @return The server state machine.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDI5NjA0OnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/zeebe/LogCompactor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjoyNDoxNlrOG7d_6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjoyNDoxNlrOG7d_6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAxMDY2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                logger.debug(\"Closing state machine {}\", raft.getName());\n          \n          \n            \n                logger.debug(\"Closing the log compactor {}\", raft.getName());", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r465010664", "createdAt": "2020-08-04T12:24:16Z", "author": {"login": "MiguelPires"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/zeebe/LogCompactor.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.atomix.raft.impl.zeebe;\n+\n+import io.atomix.raft.impl.RaftContext;\n+import io.atomix.raft.metrics.RaftServiceMetrics;\n+import io.atomix.raft.storage.log.RaftLogReader;\n+import io.atomix.utils.concurrent.ThreadContext;\n+import io.atomix.utils.logging.ContextualLoggerFactory;\n+import io.atomix.utils.logging.LoggerContext;\n+import java.util.concurrent.CompletableFuture;\n+import org.slf4j.Logger;\n+\n+public final class LogCompactor {\n+  private final RaftContext raft;\n+\n+  // hard coupled state\n+  private final RaftLogReader reader;\n+  private final Logger logger;\n+  private final RaftServiceMetrics metrics;\n+\n+  // used when performing compaction; may be updated from a different thread\n+  private volatile long compactableIndex;\n+\n+  public LogCompactor(final RaftContext raft) {\n+    this.raft = raft;\n+    this.reader = raft.getLog().openReader(1, RaftLogReader.Mode.COMMITS);\n+\n+    this.logger =\n+        ContextualLoggerFactory.getLogger(\n+            getClass(), LoggerContext.builder(getClass()).addValue(raft.getName()).build());\n+    this.metrics = new RaftServiceMetrics(raft.getName());\n+  }\n+\n+  public ThreadContext executor() {\n+    return raft.getThreadContext();\n+  }\n+\n+  /**\n+   * Assumes our snapshots are being taken asynchronously and we regularly update the compactable\n+   * index. Compaction is performed asynchronously.\n+   *\n+   * @return a future which is completed when the log has been compacted\n+   */\n+  public CompletableFuture<Void> compact() {\n+    raft.checkThread();\n+\n+    final var log = raft.getLog();\n+    if (log.isCompactable(compactableIndex)) {\n+      final var index = log.getCompactableIndex(compactableIndex);\n+      final var future = new CompletableFuture<Void>();\n+      logger.debug(\"Compacting log up from {} up to {}\", reader.getFirstIndex(), index);\n+      compact(index, future);\n+      return future;\n+    } else {\n+      logger.debug(\n+          \"Skipping compaction of non-compactable index {} (first log index: {})\",\n+          compactableIndex,\n+          reader.getFirstIndex());\n+    }\n+\n+    return CompletableFuture.completedFuture(null);\n+  }\n+\n+  public void close() {\n+    raft.checkThread();\n+    logger.debug(\"Closing state machine {}\", raft.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDMwMjk5OnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/zeebe/LogCompactor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjoyNjowMlrOG7eD8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMjoyNjowMlrOG7eD8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAxMTY5OA==", "bodyText": "I think this is never used", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r465011698", "createdAt": "2020-08-04T12:26:02Z", "author": {"login": "MiguelPires"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/zeebe/LogCompactor.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.atomix.raft.impl.zeebe;\n+\n+import io.atomix.raft.impl.RaftContext;\n+import io.atomix.raft.metrics.RaftServiceMetrics;\n+import io.atomix.raft.storage.log.RaftLogReader;\n+import io.atomix.utils.concurrent.ThreadContext;\n+import io.atomix.utils.logging.ContextualLoggerFactory;\n+import io.atomix.utils.logging.LoggerContext;\n+import java.util.concurrent.CompletableFuture;\n+import org.slf4j.Logger;\n+\n+public final class LogCompactor {\n+  private final RaftContext raft;\n+\n+  // hard coupled state\n+  private final RaftLogReader reader;\n+  private final Logger logger;\n+  private final RaftServiceMetrics metrics;\n+\n+  // used when performing compaction; may be updated from a different thread\n+  private volatile long compactableIndex;\n+\n+  public LogCompactor(final RaftContext raft) {\n+    this.raft = raft;\n+    this.reader = raft.getLog().openReader(1, RaftLogReader.Mode.COMMITS);\n+\n+    this.logger =\n+        ContextualLoggerFactory.getLogger(\n+            getClass(), LoggerContext.builder(getClass()).addValue(raft.getName()).build());\n+    this.metrics = new RaftServiceMetrics(raft.getName());\n+  }\n+\n+  public ThreadContext executor() {\n+    return raft.getThreadContext();\n+  }\n+\n+  /**\n+   * Assumes our snapshots are being taken asynchronously and we regularly update the compactable\n+   * index. Compaction is performed asynchronously.\n+   *\n+   * @return a future which is completed when the log has been compacted\n+   */\n+  public CompletableFuture<Void> compact() {\n+    raft.checkThread();\n+\n+    final var log = raft.getLog();\n+    if (log.isCompactable(compactableIndex)) {\n+      final var index = log.getCompactableIndex(compactableIndex);\n+      final var future = new CompletableFuture<Void>();\n+      logger.debug(\"Compacting log up from {} up to {}\", reader.getFirstIndex(), index);\n+      compact(index, future);\n+      return future;\n+    } else {\n+      logger.debug(\n+          \"Skipping compaction of non-compactable index {} (first log index: {})\",\n+          compactableIndex,\n+          reader.getFirstIndex());\n+    }\n+\n+    return CompletableFuture.completedFuture(null);\n+  }\n+\n+  public void close() {\n+    raft.checkThread();\n+    logger.debug(\"Closing state machine {}\", raft.getName());\n+    reader.close();\n+  }\n+\n+  public long getCompactableIndex() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDcyODU4OnYy", "diffSide": "LEFT", "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/LeaderRole.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDowOTo0MlrOG7iIbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODowNToxMVrOG9Qjtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3ODM4MA==", "bodyText": "Just a small nit: these changes that only move methods around are not ideal in my opinion. If they contain actual functional changes, those are obfuscated because the whole chunk becomes part of the diff, and they also make the PR unnecessarily bigger. Our code style says \"while we don't enforce an ordering for instance methods, it's recommended to group them together based on functionality.\" which I guess is not the goal here. I guess this happens because of automatic method reordering in Intellij but it has some drawbacks for the reviewer", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r465078380", "createdAt": "2020-08-04T14:09:42Z", "author": {"login": "MiguelPires"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/LeaderRole.java", "diffHunk": "@@ -93,27 +92,6 @@ public LeaderRole(final RaftContext context) {\n     return super.start().thenRun(this::startTimers).thenApply(v -> this);\n   }\n \n-  private ZeebeEntry findLastZeebeEntry() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE5MzA2NQ==", "bodyText": "Agree with miguel here. I already pointed this out in other PR's I might due that atomix is not completely formatted? Or does it happen also in other modules?", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r465193065", "createdAt": "2020-08-04T16:54:26Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/LeaderRole.java", "diffHunk": "@@ -93,27 +92,6 @@ public LeaderRole(final RaftContext context) {\n     return super.start().thenRun(this::startTimers).thenApply(v -> this);\n   }\n \n-  private ZeebeEntry findLastZeebeEntry() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3ODM4MA=="}, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTUwNzIzNQ==", "bodyText": "Our codestyle says \"Overridden methods must be grouped together\". I believe that is what this auto-formatting did. What do you suggest here? Should I revert these formatting?", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r465507235", "createdAt": "2020-08-05T06:43:20Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/LeaderRole.java", "diffHunk": "@@ -93,27 +92,6 @@ public LeaderRole(final RaftContext context) {\n     return super.start().thenRun(this::startTimers).thenApply(v -> this);\n   }\n \n-  private ZeebeEntry findLastZeebeEntry() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3ODM4MA=="}, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg4NzYwNw==", "bodyText": "No, that probably makes sense then \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r466887607", "createdAt": "2020-08-07T08:05:11Z", "author": {"login": "MiguelPires"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/LeaderRole.java", "diffHunk": "@@ -93,27 +92,6 @@ public LeaderRole(final RaftContext context) {\n     return super.start().thenRun(this::startTimers).thenApply(v -> this);\n   }\n \n-  private ZeebeEntry findLastZeebeEntry() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3ODM4MA=="}, "originalCommit": {"oid": "de2ed1fa2bf8260ddf86dddc104289375a04e5cf"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTk4ODcwOnYy", "diffSide": "LEFT", "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjowNzoyNFrOG9NoJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjozNzoxNFrOG9OOzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzOTU4OQ==", "bodyText": "Do you think we need the max ? So max of current and previous commit? Idk why this was done before. I had hoped that we have the guarantee that this is increasing \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r466839589", "createdAt": "2020-08-07T06:07:24Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java", "diffHunk": "@@ -723,28 +727,6 @@ public void setEntryValidator(final EntryValidator validator) {\n     this.entryValidator = validator;\n   }\n \n-  /**\n-   * Returns the last applied index.\n-   *\n-   * @return the last applied index\n-   */\n-  public long getLastApplied() {\n-    return lastApplied;\n-  }\n-\n-  /**\n-   * Sets the last applied index.\n-   *\n-   * @param lastApplied the last applied index and the last applied term\n-   */\n-  private void setLastApplied(final long lastApplied) {\n-    this.lastApplied = Math.max(this.lastApplied, lastApplied);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a5a970ec48e97f54aee475ae32757c240dcd03e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0NTE5MA==", "bodyText": "This is removed code :)", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r466845190", "createdAt": "2020-08-07T06:24:55Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java", "diffHunk": "@@ -723,28 +727,6 @@ public void setEntryValidator(final EntryValidator validator) {\n     this.entryValidator = validator;\n   }\n \n-  /**\n-   * Returns the last applied index.\n-   *\n-   * @return the last applied index\n-   */\n-  public long getLastApplied() {\n-    return lastApplied;\n-  }\n-\n-  /**\n-   * Sets the last applied index.\n-   *\n-   * @param lastApplied the last applied index and the last applied term\n-   */\n-  private void setLastApplied(final long lastApplied) {\n-    this.lastApplied = Math.max(this.lastApplied, lastApplied);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzOTU4OQ=="}, "originalCommit": {"oid": "2a5a970ec48e97f54aee475ae32757c240dcd03e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0NTU0MQ==", "bodyText": "Yeah I know but was not sure whether we need this in the new code? \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r466845541", "createdAt": "2020-08-07T06:25:59Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java", "diffHunk": "@@ -723,28 +727,6 @@ public void setEntryValidator(final EntryValidator validator) {\n     this.entryValidator = validator;\n   }\n \n-  /**\n-   * Returns the last applied index.\n-   *\n-   * @return the last applied index\n-   */\n-  public long getLastApplied() {\n-    return lastApplied;\n-  }\n-\n-  /**\n-   * Sets the last applied index.\n-   *\n-   * @param lastApplied the last applied index and the last applied term\n-   */\n-  private void setLastApplied(final long lastApplied) {\n-    this.lastApplied = Math.max(this.lastApplied, lastApplied);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzOTU4OQ=="}, "originalCommit": {"oid": "2a5a970ec48e97f54aee475ae32757c240dcd03e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0NzAzOA==", "bodyText": "Ah.. Sorry. I misread it \ud83d\ude04 It is already checked in setCommitIndex https://github.com/zeebe-io/zeebe/blob/2a5a970ec48e97f54aee475ae32757c240dcd03e/atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java#L346", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r466847038", "createdAt": "2020-08-07T06:30:19Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java", "diffHunk": "@@ -723,28 +727,6 @@ public void setEntryValidator(final EntryValidator validator) {\n     this.entryValidator = validator;\n   }\n \n-  /**\n-   * Returns the last applied index.\n-   *\n-   * @return the last applied index\n-   */\n-  public long getLastApplied() {\n-    return lastApplied;\n-  }\n-\n-  /**\n-   * Sets the last applied index.\n-   *\n-   * @param lastApplied the last applied index and the last applied term\n-   */\n-  private void setLastApplied(final long lastApplied) {\n-    this.lastApplied = Math.max(this.lastApplied, lastApplied);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzOTU4OQ=="}, "originalCommit": {"oid": "2a5a970ec48e97f54aee475ae32757c240dcd03e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg0OTQ4Nw==", "bodyText": "Ah ok this is still a bit different but ok thanks", "url": "https://github.com/camunda-cloud/zeebe/pull/5096#discussion_r466849487", "createdAt": "2020-08-07T06:37:14Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java", "diffHunk": "@@ -723,28 +727,6 @@ public void setEntryValidator(final EntryValidator validator) {\n     this.entryValidator = validator;\n   }\n \n-  /**\n-   * Returns the last applied index.\n-   *\n-   * @return the last applied index\n-   */\n-  public long getLastApplied() {\n-    return lastApplied;\n-  }\n-\n-  /**\n-   * Sets the last applied index.\n-   *\n-   * @param lastApplied the last applied index and the last applied term\n-   */\n-  private void setLastApplied(final long lastApplied) {\n-    this.lastApplied = Math.max(this.lastApplied, lastApplied);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzOTU4OQ=="}, "originalCommit": {"oid": "2a5a970ec48e97f54aee475ae32757c240dcd03e"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 376, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}