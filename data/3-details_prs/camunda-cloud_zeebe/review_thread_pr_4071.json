{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNDA0Njg4", "number": 4071, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowNDo1N1rODpGdsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowNjoxN1rODpGfmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDI0MTEzOnYy", "diffSide": "RIGHT", "path": "util/src/main/java/io/zeebe/util/health/CriticalComponentsHealthMonitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowNDo1N1rOF4D_vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowNzoxM1rOF4EE4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMDA0NQ==", "bodyText": "Nit: could we extract the closures to methods? e.g.\n@Override\npublic void onFailure() {\n  actor.run(this::onComponentFailure);\n}\n\nprivate void onComponentFailure() {\n  log.error(\"{} failed, marking it as unhealthy\", componentName);\n  componentHealth.computeIfPresent(componentName, (k, v) -> HealthStatus.UNHEALTHY);\n  calculateHealth();\n}\nI have no strong arguments other than I find it more readable, but could just be me \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/4071#discussion_r394330045", "createdAt": "2020-03-18T13:04:57Z", "author": {"login": "npepinpe"}, "path": "util/src/main/java/io/zeebe/util/health/CriticalComponentsHealthMonitor.java", "diffHunk": "@@ -131,12 +114,22 @@ private HealthStatus getHealth(final String componentName) {\n \n     @Override\n     public void onFailure() {\n-      onComponentFailure(componentName);\n+      actor.run(\n+          () -> {\n+            log.error(\"{} failed, marking it as unhealthy\", componentName);\n+            componentHealth.computeIfPresent(componentName, (k, v) -> HealthStatus.UNHEALTHY);\n+            calculateHealth();\n+          });\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd056bb507bf9742a1c7c6872a95003a6c524ed"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMTM2Mw==", "bodyText": "It was like this before. I don't know why I changed \ud83d\ude00", "url": "https://github.com/camunda-cloud/zeebe/pull/4071#discussion_r394331363", "createdAt": "2020-03-18T13:07:13Z", "author": {"login": "deepthidevaki"}, "path": "util/src/main/java/io/zeebe/util/health/CriticalComponentsHealthMonitor.java", "diffHunk": "@@ -131,12 +114,22 @@ private HealthStatus getHealth(final String componentName) {\n \n     @Override\n     public void onFailure() {\n-      onComponentFailure(componentName);\n+      actor.run(\n+          () -> {\n+            log.error(\"{} failed, marking it as unhealthy\", componentName);\n+            componentHealth.computeIfPresent(componentName, (k, v) -> HealthStatus.UNHEALTHY);\n+            calculateHealth();\n+          });\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMDA0NQ=="}, "originalCommit": {"oid": "dcd056bb507bf9742a1c7c6872a95003a6c524ed"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDI0NjAwOnYy", "diffSide": "RIGHT", "path": "util/src/test/java/io/zeebe/util/health/CriticalComponentsHealthMonitorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowNjoxN1rOF4EC0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzowNjoxN1rOF4EC0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzMDgzNQ==", "bodyText": "I like this over ControlledActorScheduler imho \ud83d\udc4d good idea", "url": "https://github.com/camunda-cloud/zeebe/pull/4071#discussion_r394330835", "createdAt": "2020-03-18T13:06:17Z", "author": {"login": "npepinpe"}, "path": "util/src/test/java/io/zeebe/util/health/CriticalComponentsHealthMonitorTest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.util.health;\n+\n+import static io.zeebe.util.TestUtil.waitUntil;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.util.sched.Actor;\n+import io.zeebe.util.sched.ActorControl;\n+import io.zeebe.util.sched.testing.ActorSchedulerRule;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.slf4j.LoggerFactory;\n+\n+public class CriticalComponentsHealthMonitorTest {\n+\n+  @Rule public ActorSchedulerRule actorSchedulerRule = new ActorSchedulerRule();\n+  private CriticalComponentsHealthMonitor monitor;\n+  private ActorControl actorControl;\n+\n+  @Before\n+  public void setup() {\n+    final Actor testActor =\n+        new Actor() {\n+          @Override\n+          public String getName() {\n+            return \"test-actor\";\n+          }\n+\n+          @Override\n+          protected void onActorStarting() {\n+            monitor = new CriticalComponentsHealthMonitor(actor, LoggerFactory.getLogger(\"test\"));\n+            actorControl = actor;\n+          }\n+\n+          @Override\n+          protected void onActorStarted() {\n+            monitor.startMonitoring();\n+          }\n+        };\n+    actorSchedulerRule.submitActor(testActor).join();\n+  }\n+\n+  @Test\n+  public void shouldMonitorComponent() {\n+    // given\n+    final ControllableComponent component = new ControllableComponent();\n+    monitor.registerComponent(\"test\", component);\n+\n+    // when\n+    waitUntilAllDone();\n+    assertThat(monitor.getHealthStatus()).isEqualTo(HealthStatus.HEALTHY);\n+\n+    component.setHealthStatus(HealthStatus.UNHEALTHY);\n+    waitUntilAllDone();\n+\n+    // then\n+    assertThat(monitor.getHealthStatus()).isEqualTo(HealthStatus.UNHEALTHY);\n+  }\n+\n+  @Test\n+  public void shouldRecover() {\n+    // given\n+    final ControllableComponent component = new ControllableComponent();\n+    monitor.registerComponent(\"test\", component);\n+    waitUntilAllDone();\n+    component.setHealthStatus(HealthStatus.UNHEALTHY);\n+    waitUntilAllDone();\n+    assertThat(monitor.getHealthStatus()).isEqualTo(HealthStatus.UNHEALTHY);\n+\n+    // when\n+    component.setHealthStatus(HealthStatus.HEALTHY);\n+    waitUntilAllDone();\n+\n+    // then\n+    assertThat(monitor.getHealthStatus()).isEqualTo(HealthStatus.HEALTHY);\n+  }\n+\n+  @Test\n+  public void shouldMonitorMultipleComponent() {\n+    // given\n+    final ControllableComponent component1 = new ControllableComponent();\n+    final ControllableComponent component2 = new ControllableComponent();\n+\n+    monitor.registerComponent(\"test1\", component1);\n+    monitor.registerComponent(\"test2\", component2);\n+\n+    waitUntilAllDone();\n+    assertThat(monitor.getHealthStatus()).isEqualTo(HealthStatus.HEALTHY);\n+\n+    // when\n+    component2.setHealthStatus(HealthStatus.UNHEALTHY);\n+    waitUntilAllDone();\n+\n+    // then\n+    assertThat(monitor.getHealthStatus()).isEqualTo(HealthStatus.UNHEALTHY);\n+\n+    // when\n+    component2.setHealthStatus(HealthStatus.HEALTHY);\n+    component1.setHealthStatus(HealthStatus.UNHEALTHY);\n+    waitUntilAllDone();\n+\n+    // then\n+    assertThat(monitor.getHealthStatus()).isEqualTo(HealthStatus.UNHEALTHY);\n+\n+    // when\n+    component1.setHealthStatus(HealthStatus.HEALTHY);\n+    waitUntilAllDone();\n+\n+    // then\n+    assertThat(monitor.getHealthStatus()).isEqualTo(HealthStatus.HEALTHY);\n+  }\n+\n+  @Test\n+  public void shouldRemoveComponent() {\n+    // given\n+    final ControllableComponent component = new ControllableComponent();\n+    monitor.registerComponent(\"test\", component);\n+    waitUntil(() -> monitor.getHealthStatus() == HealthStatus.HEALTHY);\n+\n+    // when\n+    monitor.removeComponent(\"test\");\n+    component.setHealthStatus(HealthStatus.UNHEALTHY);\n+    waitUntilAllDone();\n+\n+    // then\n+    assertThat(monitor.getHealthStatus()).isEqualTo(HealthStatus.HEALTHY);\n+  }\n+\n+  private void waitUntilAllDone() {\n+    actorControl.call(() -> null).join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd056bb507bf9742a1c7c6872a95003a6c524ed"}, "originalPosition": 137}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4929, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}