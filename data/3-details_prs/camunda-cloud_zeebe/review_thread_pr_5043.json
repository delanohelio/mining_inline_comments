{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1ODI0NzQz", "number": 5043, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDoyNzoyOVrOESVAYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDoyODowMVrOESVBDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjUzOTg3OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDoyNzoyOVrOG3ctXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMToxMjowMVrOG7bzcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5NTIyOA==", "bodyText": "Why are we not excluding all generated code, but only some generated code (e.g. all SBE *Encoder.class)?", "url": "https://github.com/camunda-cloud/zeebe/pull/5043#discussion_r460795228", "createdAt": "2020-07-27T10:27:29Z", "author": {"login": "npepinpe"}, "path": "Jenkinsfile", "diffHunk": "@@ -200,8 +200,20 @@ pipeline {\n             }\n \n             post {\n+                always {\n+                    jacoco(\n+                          execPattern: '**/*.exec',\n+                          classPattern: '**/target/classes',\n+                          sourcePattern: '**/src/main/java,**/generated-sources/protobuf/java,**/generated-sources/assertj-assertions,**/generated-sources/sbe',\n+                          exclusionPattern: '**/io/zeebe/gateway/protocol/**,'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2cd4ff97129c2f522cc315306bc79f652b2ec"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgxNzgxMw==", "bodyText": "This is not as easy as it looks. Basically the exclusions are based on file patterns in the classes folder, not the source folders. The source folders are easy to spot, but then all classes get lumped in together.\nExclusion by packages also doesn't work, because the generated code shares packages with actual code. I had several iterations and this was what covered like 90% of generated code.", "url": "https://github.com/camunda-cloud/zeebe/pull/5043#discussion_r460817813", "createdAt": "2020-07-27T11:14:28Z", "author": {"login": "pihme"}, "path": "Jenkinsfile", "diffHunk": "@@ -200,8 +200,20 @@ pipeline {\n             }\n \n             post {\n+                always {\n+                    jacoco(\n+                          execPattern: '**/*.exec',\n+                          classPattern: '**/target/classes',\n+                          sourcePattern: '**/src/main/java,**/generated-sources/protobuf/java,**/generated-sources/assertj-assertions,**/generated-sources/sbe',\n+                          exclusionPattern: '**/io/zeebe/gateway/protocol/**,'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5NTIyOA=="}, "originalCommit": {"oid": "73f2cd4ff97129c2f522cc315306bc79f652b2ec"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk3NDcwNQ==", "bodyText": "Oh, that's disappointing, I would've expected we could just ignore specific source folders =/ Let's start with that then and if it's an issue we can look into more complex solutions", "url": "https://github.com/camunda-cloud/zeebe/pull/5043#discussion_r464974705", "createdAt": "2020-08-04T11:12:01Z", "author": {"login": "npepinpe"}, "path": "Jenkinsfile", "diffHunk": "@@ -200,8 +200,20 @@ pipeline {\n             }\n \n             post {\n+                always {\n+                    jacoco(\n+                          execPattern: '**/*.exec',\n+                          classPattern: '**/target/classes',\n+                          sourcePattern: '**/src/main/java,**/generated-sources/protobuf/java,**/generated-sources/assertj-assertions,**/generated-sources/sbe',\n+                          exclusionPattern: '**/io/zeebe/gateway/protocol/**,'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5NTIyOA=="}, "originalCommit": {"oid": "73f2cd4ff97129c2f522cc315306bc79f652b2ec"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjU0MTM2OnYy", "diffSide": "RIGHT", "path": "transport/src/test/java/io/zeebe/transport/impl/AtomixTransportTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDoyNzo1NlrOG3cuRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMToxNTowN1rOG3eGoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5NTQ2Mg==", "bodyText": "I guess this is unintended to be in this PR?", "url": "https://github.com/camunda-cloud/zeebe/pull/5043#discussion_r460795462", "createdAt": "2020-07-27T10:27:56Z", "author": {"login": "npepinpe"}, "path": "transport/src/test/java/io/zeebe/transport/impl/AtomixTransportTest.java", "diffHunk": "@@ -182,7 +182,7 @@ public void shouldRetryOnInvalidResponse() throws Exception {\n         nodeAddressSupplier, (response) -> false, new Request(\"messageABC\"), Duration.ofSeconds(3));\n \n     // then\n-    final var success = retryLatch.await(1, TimeUnit.SECONDS);\n+    final var success = retryLatch.await(2, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2cd4ff97129c2f522cc315306bc79f652b2ec"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgxODA4MQ==", "bodyText": "This is intentional. After activating test coverage, this test failed much more often than before.", "url": "https://github.com/camunda-cloud/zeebe/pull/5043#discussion_r460818081", "createdAt": "2020-07-27T11:15:07Z", "author": {"login": "pihme"}, "path": "transport/src/test/java/io/zeebe/transport/impl/AtomixTransportTest.java", "diffHunk": "@@ -182,7 +182,7 @@ public void shouldRetryOnInvalidResponse() throws Exception {\n         nodeAddressSupplier, (response) -> false, new Request(\"messageABC\"), Duration.ofSeconds(3));\n \n     // then\n-    final var success = retryLatch.await(1, TimeUnit.SECONDS);\n+    final var success = retryLatch.await(2, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5NTQ2Mg=="}, "originalCommit": {"oid": "73f2cd4ff97129c2f522cc315306bc79f652b2ec"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjU0MTU2OnYy", "diffSide": "RIGHT", "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDoyODowMVrOG3cuZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMToxNzo1OFrOG7b-QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5NTQ5NQ==", "bodyText": "I guess this is unintended to be in this PR?", "url": "https://github.com/camunda-cloud/zeebe/pull/5043#discussion_r460795495", "createdAt": "2020-07-27T10:28:01Z", "author": {"login": "npepinpe"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -199,7 +199,7 @@ private void deployProcess(final ZeebeClient client) {\n         .newDeployCommand()\n         .addWorkflowModel(PROCESS, \"process.bpmn\")\n         .send()\n-        .join(5, TimeUnit.SECONDS);\n+        .join(10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73f2cd4ff97129c2f522cc315306bc79f652b2ec"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgxODExOQ==", "bodyText": "This is intentional. After activating test coverage, this test failed much more often than before.", "url": "https://github.com/camunda-cloud/zeebe/pull/5043#discussion_r460818119", "createdAt": "2020-07-27T11:15:12Z", "author": {"login": "pihme"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -199,7 +199,7 @@ private void deployProcess(final ZeebeClient client) {\n         .newDeployCommand()\n         .addWorkflowModel(PROCESS, \"process.bpmn\")\n         .send()\n-        .join(5, TimeUnit.SECONDS);\n+        .join(10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5NTQ5NQ=="}, "originalCommit": {"oid": "73f2cd4ff97129c2f522cc315306bc79f652b2ec"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk3NTA0NA==", "bodyText": "Really? It slows down the overall build that much?", "url": "https://github.com/camunda-cloud/zeebe/pull/5043#discussion_r464975044", "createdAt": "2020-08-04T11:12:50Z", "author": {"login": "npepinpe"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -199,7 +199,7 @@ private void deployProcess(final ZeebeClient client) {\n         .newDeployCommand()\n         .addWorkflowModel(PROCESS, \"process.bpmn\")\n         .send()\n-        .join(5, TimeUnit.SECONDS);\n+        .join(10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5NTQ5NQ=="}, "originalCommit": {"oid": "73f2cd4ff97129c2f522cc315306bc79f652b2ec"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk3NzQ3Mg==", "bodyText": "No, I just doubled it to be on the safe side", "url": "https://github.com/camunda-cloud/zeebe/pull/5043#discussion_r464977472", "createdAt": "2020-08-04T11:17:58Z", "author": {"login": "pihme"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -199,7 +199,7 @@ private void deployProcess(final ZeebeClient client) {\n         .newDeployCommand()\n         .addWorkflowModel(PROCESS, \"process.bpmn\")\n         .send()\n-        .join(5, TimeUnit.SECONDS);\n+        .join(10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc5NTQ5NQ=="}, "originalCommit": {"oid": "73f2cd4ff97129c2f522cc315306bc79f652b2ec"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 365, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}