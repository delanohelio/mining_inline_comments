{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzODMxOTg1", "number": 5742, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzowMjoyNVrOE1pX3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNzowNjowOVrOFOxBuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0Njg3ODM5OnYy", "diffSide": "RIGHT", "path": "clients/java/ignored-changes.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzowMjoyNVrOHuCP0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQxMDoyMToxNVrOIQrA4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAzMzM2Mw==", "bodyText": "@npepinpe Hi! I don't sure about this. I can't figure out how to change this in a truly backward compatible way :(", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r518033363", "createdAt": "2020-11-05T13:02:25Z", "author": {"login": "aivinog1"}, "path": "clients/java/ignored-changes.xml", "diffHunk": "@@ -33,4 +33,99 @@\n     <method>java.lang.String getGatewayAddress()</method>\n     <differenceType>7012</differenceType>\n   </difference>\n+  <difference>\n+    <className>io/zeebe/client/ZeebeClientBuilder</className>\n+    <method>io.zeebe.client.ZeebeClientBuilder withJsonMapper(io.zeebe.client.api.JsonMapper)</method>\n+    <differenceType>7012</differenceType>\n+  </difference>\n+  <difference>\n+    <className>io/zeebe/client/ZeebeClientConfiguration</className>\n+    <method>io.zeebe.client.api.JsonMapper getJsonMapper()</method>\n+    <differenceType>7012</differenceType>\n+  </difference>\n+  <difference>\n+    <className>io/zeebe/client/impl/command/CommandWithVariables</className>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8886278e66482c32bfa6a3e36bd0b2ca2b4eb0ed"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDM1Mjg2Nw==", "bodyText": "I don't think it's possible - however this case is probably fine. This class is meant to be subclasses to implement new commands, and it's quite unlikely anyone but us are doing that. I think in this case this is acceptable \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r554352867", "createdAt": "2021-01-09T10:21:15Z", "author": {"login": "npepinpe"}, "path": "clients/java/ignored-changes.xml", "diffHunk": "@@ -33,4 +33,99 @@\n     <method>java.lang.String getGatewayAddress()</method>\n     <differenceType>7012</differenceType>\n   </difference>\n+  <difference>\n+    <className>io/zeebe/client/ZeebeClientBuilder</className>\n+    <method>io.zeebe.client.ZeebeClientBuilder withJsonMapper(io.zeebe.client.api.JsonMapper)</method>\n+    <differenceType>7012</differenceType>\n+  </difference>\n+  <difference>\n+    <className>io/zeebe/client/ZeebeClientConfiguration</className>\n+    <method>io.zeebe.client.api.JsonMapper getJsonMapper()</method>\n+    <differenceType>7012</differenceType>\n+  </difference>\n+  <difference>\n+    <className>io/zeebe/client/impl/command/CommandWithVariables</className>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODAzMzM2Mw=="}, "originalCommit": {"oid": "8886278e66482c32bfa6a3e36bd0b2ca2b4eb0ed"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4OTM5OTkxOnYy", "diffSide": "RIGHT", "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQxMDoyMjoyMFrOIQrDZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwOTo1MDoyMlrOIRODKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDM1MzUwOA==", "bodyText": "As this is a public interface which users are meant to implement, it's important to fully document it.", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r554353508", "createdAt": "2021-01-09T10:22:20Z", "author": {"login": "npepinpe"}, "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+public interface JsonMapper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8886278e66482c32bfa6a3e36bd0b2ca2b4eb0ed"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkyNjg5MQ==", "bodyText": "Done", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r554926891", "createdAt": "2021-01-11T09:50:22Z", "author": {"login": "aivinog1"}, "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+public interface JsonMapper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDM1MzUwOA=="}, "originalCommit": {"oid": "8886278e66482c32bfa6a3e36bd0b2ca2b4eb0ed"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4OTQ4NjU3OnYy", "diffSide": "RIGHT", "path": "clients/java/src/main/java/io/zeebe/client/impl/ZeebeClientBuilderImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOVQxMDo1MDoyNFrOIQr_4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQwOTo1MDoyOFrOIRODYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDM2ODk5Mw==", "bodyText": "Is this used?", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r554368993", "createdAt": "2021-01-09T10:50:24Z", "author": {"login": "npepinpe"}, "path": "clients/java/src/main/java/io/zeebe/client/impl/ZeebeClientBuilderImpl.java", "diffHunk": "@@ -59,6 +61,8 @@\n   private String certificatePath;\n   private CredentialsProvider credentialsProvider;\n   private Duration keepAlive = Duration.ofSeconds(45);\n+  private ObjectMapper zeebeObjectMapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8886278e66482c32bfa6a3e36bd0b2ca2b4eb0ed"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDkyNjk0NA==", "bodyText": "Removed", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r554926944", "createdAt": "2021-01-11T09:50:28Z", "author": {"login": "aivinog1"}, "path": "clients/java/src/main/java/io/zeebe/client/impl/ZeebeClientBuilderImpl.java", "diffHunk": "@@ -59,6 +61,8 @@\n   private String certificatePath;\n   private CredentialsProvider credentialsProvider;\n   private Duration keepAlive = Duration.ofSeconds(45);\n+  private ObjectMapper zeebeObjectMapper = new ObjectMapper();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDM2ODk5Mw=="}, "originalCommit": {"oid": "8886278e66482c32bfa6a3e36bd0b2ca2b4eb0ed"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NDc4OTU1OnYy", "diffSide": "RIGHT", "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNTo0MzozNlrOIRa6WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwODoxNDo0OFrOIbrbLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTEzNzYyNQ==", "bodyText": "As a user, this doesn't tell me much about the interface. What objects are transformed to JSON? When are they transformed? Why would I want to implement this (ideally with examples - everybody loves examples \ud83d\ude42)? What is the default implementation (I know you link to ZeebeObjectMapper, but it's not apparent to a user why)?", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r555137625", "createdAt": "2021-01-11T15:43:36Z", "author": {"login": "npepinpe"}, "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+/**\n+ * This interface is using to customize the way how objects will be transformed in JSON format.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abd02ebe0b7c81f39fd29caab0986390fff13fa"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTE0MDA2Ng==", "bodyText": "Another point: our ZeebeObjectMapper implementation always throws InternalClientException on error. We could also document the interface methods (i.e. @throws InternalClientException on serialization/deserialization error), even without adding the checked exception. That way implementations are more easily swappable.", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r555140066", "createdAt": "2021-01-11T15:46:51Z", "author": {"login": "npepinpe"}, "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+/**\n+ * This interface is using to customize the way how objects will be transformed in JSON format.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTEzNzYyNQ=="}, "originalCommit": {"oid": "2abd02ebe0b7c81f39fd29caab0986390fff13fa"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTg5MzkzNQ==", "bodyText": "Done", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r565893935", "createdAt": "2021-01-28T08:14:48Z", "author": {"login": "aivinog1"}, "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+/**\n+ * This interface is using to customize the way how objects will be transformed in JSON format.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTEzNzYyNQ=="}, "originalCommit": {"oid": "2abd02ebe0b7c81f39fd29caab0986390fff13fa"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMDI1NDA0OnYy", "diffSide": "RIGHT", "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNzowMDo0OVrOITuF6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwODoxNDo1N1rOIbrbhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU0OTAzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Transform a JSON string to the typed object.\n          \n          \n            \n               * Deserializes a JSON string into an equivalent POJO of type {@code T}.\n          \n      \n    \n    \n  \n\nI think this is more indicative of the intent, i.e. deserialization.", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r557549034", "createdAt": "2021-01-14T17:00:49Z", "author": {"login": "npepinpe"}, "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+/**\n+ * This interface is using to customize the way how objects will be transformed in JSON format.\n+ *\n+ * @see io.zeebe.client.impl.ZeebeObjectMapper\n+ */\n+public interface JsonMapper {\n+\n+  /**\n+   * Transform a JSON string to the typed object.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abd02ebe0b7c81f39fd29caab0986390fff13fa"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTg5NDAyMQ==", "bodyText": "Done", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r565894021", "createdAt": "2021-01-28T08:14:57Z", "author": {"login": "aivinog1"}, "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+/**\n+ * This interface is using to customize the way how objects will be transformed in JSON format.\n+ *\n+ * @see io.zeebe.client.impl.ZeebeObjectMapper\n+ */\n+public interface JsonMapper {\n+\n+  /**\n+   * Transform a JSON string to the typed object.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU0OTAzNA=="}, "originalCommit": {"oid": "2abd02ebe0b7c81f39fd29caab0986390fff13fa"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMDI1NDY3OnYy", "diffSide": "RIGHT", "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNzowMDo1N1rOITuGSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwODoxNTowM1rOIbrbsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU0OTEyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param typeClass a class of the type to serialize\n          \n          \n            \n               * @param typeClass the Java type to deserialize into", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r557549129", "createdAt": "2021-01-14T17:00:57Z", "author": {"login": "npepinpe"}, "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+/**\n+ * This interface is using to customize the way how objects will be transformed in JSON format.\n+ *\n+ * @see io.zeebe.client.impl.ZeebeObjectMapper\n+ */\n+public interface JsonMapper {\n+\n+  /**\n+   * Transform a JSON string to the typed object.\n+   *\n+   * @param json a JSON string\n+   * @param typeClass a class of the type to serialize", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abd02ebe0b7c81f39fd29caab0986390fff13fa"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTg5NDA2Nw==", "bodyText": "Done", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r565894067", "createdAt": "2021-01-28T08:15:03Z", "author": {"login": "aivinog1"}, "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+/**\n+ * This interface is using to customize the way how objects will be transformed in JSON format.\n+ *\n+ * @see io.zeebe.client.impl.ZeebeObjectMapper\n+ */\n+public interface JsonMapper {\n+\n+  /**\n+   * Transform a JSON string to the typed object.\n+   *\n+   * @param json a JSON string\n+   * @param typeClass a class of the type to serialize", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU0OTEyOQ=="}, "originalCommit": {"oid": "2abd02ebe0b7c81f39fd29caab0986390fff13fa"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMDI3NDA1OnYy", "diffSide": "RIGHT", "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNzowNTozNlrOITuSdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwODoxNTowOFrOIbrb3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1MjI0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param json a JSON string\n          \n          \n            \n               * @param json the JSON string to deserialize", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r557552244", "createdAt": "2021-01-14T17:05:36Z", "author": {"login": "npepinpe"}, "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+/**\n+ * This interface is using to customize the way how objects will be transformed in JSON format.\n+ *\n+ * @see io.zeebe.client.impl.ZeebeObjectMapper\n+ */\n+public interface JsonMapper {\n+\n+  /**\n+   * Transform a JSON string to the typed object.\n+   *\n+   * @param json a JSON string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abd02ebe0b7c81f39fd29caab0986390fff13fa"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTg5NDEwOA==", "bodyText": "Done", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r565894108", "createdAt": "2021-01-28T08:15:08Z", "author": {"login": "aivinog1"}, "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+/**\n+ * This interface is using to customize the way how objects will be transformed in JSON format.\n+ *\n+ * @see io.zeebe.client.impl.ZeebeObjectMapper\n+ */\n+public interface JsonMapper {\n+\n+  /**\n+   * Transform a JSON string to the typed object.\n+   *\n+   * @param json a JSON string", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1MjI0NA=="}, "originalCommit": {"oid": "2abd02ebe0b7c81f39fd29caab0986390fff13fa"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMDI3NDkwOnYy", "diffSide": "RIGHT", "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNzowNTo1MFrOITuTBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwODoxNToxNFrOIbrcIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1MjM4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @param <T> a type of the returned object\n          \n          \n            \n               * @param <T> the type of the returned object", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r557552388", "createdAt": "2021-01-14T17:05:50Z", "author": {"login": "npepinpe"}, "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+/**\n+ * This interface is using to customize the way how objects will be transformed in JSON format.\n+ *\n+ * @see io.zeebe.client.impl.ZeebeObjectMapper\n+ */\n+public interface JsonMapper {\n+\n+  /**\n+   * Transform a JSON string to the typed object.\n+   *\n+   * @param json a JSON string\n+   * @param typeClass a class of the type to serialize\n+   * @param <T> a type of the returned object", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abd02ebe0b7c81f39fd29caab0986390fff13fa"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTg5NDE3Nw==", "bodyText": "Done", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r565894177", "createdAt": "2021-01-28T08:15:14Z", "author": {"login": "aivinog1"}, "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+/**\n+ * This interface is using to customize the way how objects will be transformed in JSON format.\n+ *\n+ * @see io.zeebe.client.impl.ZeebeObjectMapper\n+ */\n+public interface JsonMapper {\n+\n+  /**\n+   * Transform a JSON string to the typed object.\n+   *\n+   * @param json a JSON string\n+   * @param typeClass a class of the type to serialize\n+   * @param <T> a type of the returned object", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1MjM4OA=="}, "originalCommit": {"oid": "2abd02ebe0b7c81f39fd29caab0986390fff13fa"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMDI3NjQwOnYy", "diffSide": "RIGHT", "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQxNzowNjowOVrOITuT8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOFQwODoxNToyMFrOIbrcWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1MjYyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return a typed object from a JSON string\n          \n          \n            \n               * @return the POJO deserialized from the given JSON string", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r557552625", "createdAt": "2021-01-14T17:06:09Z", "author": {"login": "npepinpe"}, "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+/**\n+ * This interface is using to customize the way how objects will be transformed in JSON format.\n+ *\n+ * @see io.zeebe.client.impl.ZeebeObjectMapper\n+ */\n+public interface JsonMapper {\n+\n+  /**\n+   * Transform a JSON string to the typed object.\n+   *\n+   * @param json a JSON string\n+   * @param typeClass a class of the type to serialize\n+   * @param <T> a type of the returned object\n+   * @return a typed object from a JSON string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2abd02ebe0b7c81f39fd29caab0986390fff13fa"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NTg5NDIzMg==", "bodyText": "Done", "url": "https://github.com/camunda-cloud/zeebe/pull/5742#discussion_r565894232", "createdAt": "2021-01-28T08:15:20Z", "author": {"login": "aivinog1"}, "path": "clients/java/src/main/java/io/zeebe/client/api/JsonMapper.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.client.api;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+/**\n+ * This interface is using to customize the way how objects will be transformed in JSON format.\n+ *\n+ * @see io.zeebe.client.impl.ZeebeObjectMapper\n+ */\n+public interface JsonMapper {\n+\n+  /**\n+   * Transform a JSON string to the typed object.\n+   *\n+   * @param json a JSON string\n+   * @param typeClass a class of the type to serialize\n+   * @param <T> a type of the returned object\n+   * @return a typed object from a JSON string", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzU1MjYyNQ=="}, "originalCommit": {"oid": "2abd02ebe0b7c81f39fd29caab0986390fff13fa"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 115, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}