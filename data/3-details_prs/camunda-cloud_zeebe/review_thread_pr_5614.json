{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0OTUxOTQy", "number": 5614, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzo0NjoyOVrOEwHaww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzo0Njo1M1rOEwHbdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODg4NjQzOnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/DefaultRaftServer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzo0NjoyOVrOHlejgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjozMzoxN1rOHmfbpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1OTk3MA==", "bodyText": "@korthout do you think it makes sense to replace the boolean flags with just having a future for starting and stopping?\nIf starting future is null, you know it hasn't been started etc. If you call stop twice you just return the stopping future. I think it is not necessary to return an exceptionally future, for me it is not an error to close something what haven't been started. What do you think?", "url": "https://github.com/camunda-cloud/zeebe/pull/5614#discussion_r509059970", "createdAt": "2020-10-21T07:46:29Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/DefaultRaftServer.java", "diffHunk": "@@ -123,22 +124,27 @@ public void removeFailureListener(final Runnable failureListener) {\n    *\n    * @return A completable future to be completed once the server has been shutdown.\n    */\n+  @Override\n   public CompletableFuture<Void> shutdown() {\n-    if (!started) {\n+    if (!started && !stopped) {\n       return Futures.exceptionalFuture(new IllegalStateException(\"Server not running\"));\n     }\n \n+    if (stopped) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e93d01d391a66ac637acb000099b543f61830de"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDExNzIxOA==", "bodyText": "It makes sense but since you can start, stop and leave async this gets very complex. It requires keeping track of a queue of futures (or something similar to ZeebePartitionTransition). It would be easier if we could just remove leaving behaviour, since we don't use this anyways. I'll create an issue for it.", "url": "https://github.com/camunda-cloud/zeebe/pull/5614#discussion_r510117218", "createdAt": "2020-10-22T12:24:15Z", "author": {"login": "korthout"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/DefaultRaftServer.java", "diffHunk": "@@ -123,22 +124,27 @@ public void removeFailureListener(final Runnable failureListener) {\n    *\n    * @return A completable future to be completed once the server has been shutdown.\n    */\n+  @Override\n   public CompletableFuture<Void> shutdown() {\n-    if (!started) {\n+    if (!started && !stopped) {\n       return Futures.exceptionalFuture(new IllegalStateException(\"Server not running\"));\n     }\n \n+    if (stopped) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1OTk3MA=="}, "originalCommit": {"oid": "8e93d01d391a66ac637acb000099b543f61830de"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDEyMjkxOQ==", "bodyText": "Created here: #5663", "url": "https://github.com/camunda-cloud/zeebe/pull/5614#discussion_r510122919", "createdAt": "2020-10-22T12:33:17Z", "author": {"login": "korthout"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/DefaultRaftServer.java", "diffHunk": "@@ -123,22 +124,27 @@ public void removeFailureListener(final Runnable failureListener) {\n    *\n    * @return A completable future to be completed once the server has been shutdown.\n    */\n+  @Override\n   public CompletableFuture<Void> shutdown() {\n-    if (!started) {\n+    if (!started && !stopped) {\n       return Futures.exceptionalFuture(new IllegalStateException(\"Server not running\"));\n     }\n \n+    if (stopped) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA1OTk3MA=="}, "originalCommit": {"oid": "8e93d01d391a66ac637acb000099b543f61830de"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODg4ODIxOnYy", "diffSide": "RIGHT", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/health/HealthMonitoringTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzo0Njo1M1rOHleklw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwNzo0Njo1M1rOHleklw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA2MDI0Nw==", "bodyText": "Thanks for replacing that \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/5614#discussion_r509060247", "createdAt": "2020-10-21T07:46:53Z", "author": {"login": "Zelldon"}, "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/health/HealthMonitoringTest.java", "diffHunk": "@@ -56,7 +46,7 @@ public void shouldReportUnhealthyWhenRaftInactive() {\n     raftPartition.getServer().stop();\n \n     // then\n-    waitUntil(() -> !isBrokerHealthy());\n+    Awaitility.waitAtMost(Duration.ofMinutes(1)).until(() -> !isBrokerHealthy());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e93d01d391a66ac637acb000099b543f61830de"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 204, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}