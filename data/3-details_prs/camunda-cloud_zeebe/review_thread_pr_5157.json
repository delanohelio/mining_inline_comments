{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MDk4MTA3", "number": 5157, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNzozMTowN1rOEY7fwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjozMjoxNFrOEZ0PrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTc2MDY1OnYy", "diffSide": "RIGHT", "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNzozMTowN1rOHBdc8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNjo0MDowMlrOHCFYpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5MzE3MA==", "bodyText": "Why do you need this \"ZEEBE_CI_SHARED_DATA\"?", "url": "https://github.com/camunda-cloud/zeebe/pull/5157#discussion_r471293170", "createdAt": "2020-08-17T07:31:07Z", "author": {"login": "deepthidevaki"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -52,6 +58,19 @@\n           .endEvent()\n           .done();\n \n+  private static final File SHARED_DATA;\n+\n+  static {\n+    final var sharedDataPath =\n+        Optional.ofNullable(System.getenv(\"ZEEBE_CI_SHARED_DATA\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "464ea5670fe1e17c1fe6cce25bf7a5646a3a0c52"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxNDc0NA==", "bodyText": "We've had issues with sharing data folders with the Docker sibling container before in CI. If you mounted it to /tmp it would fail to mount with read/write access so the test container and the docker container wouldn't be able to see the same files, which is important if you want to check for snapshots, for example.\nSo, when testing locally, you do want to use /tmp since it's the standard tmp folder where things are cleaned up after. But on CI, you want to use another well defined mount points (which may not exist on the local dev machine, or may not get automatically cleaned up after), so that's what we use. The env var is then set in the Jenkinsfile.", "url": "https://github.com/camunda-cloud/zeebe/pull/5157#discussion_r471314744", "createdAt": "2020-08-17T08:14:41Z", "author": {"login": "npepinpe"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -52,6 +58,19 @@\n           .endEvent()\n           .done();\n \n+  private static final File SHARED_DATA;\n+\n+  static {\n+    final var sharedDataPath =\n+        Optional.ofNullable(System.getenv(\"ZEEBE_CI_SHARED_DATA\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5MzE3MA=="}, "originalCommit": {"oid": "464ea5670fe1e17c1fe6cce25bf7a5646a3a0c52"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1NzcwNw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/5157#discussion_r471357707", "createdAt": "2020-08-17T09:33:00Z", "author": {"login": "deepthidevaki"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -52,6 +58,19 @@\n           .endEvent()\n           .done();\n \n+  private static final File SHARED_DATA;\n+\n+  static {\n+    final var sharedDataPath =\n+        Optional.ofNullable(System.getenv(\"ZEEBE_CI_SHARED_DATA\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5MzE3MA=="}, "originalCommit": {"oid": "464ea5670fe1e17c1fe6cce25bf7a5646a3a0c52"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk0NzQzMA==", "bodyText": "Might worth to add a comment", "url": "https://github.com/camunda-cloud/zeebe/pull/5157#discussion_r471947430", "createdAt": "2020-08-18T06:40:02Z", "author": {"login": "Zelldon"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -52,6 +58,19 @@\n           .endEvent()\n           .done();\n \n+  private static final File SHARED_DATA;\n+\n+  static {\n+    final var sharedDataPath =\n+        Optional.ofNullable(System.getenv(\"ZEEBE_CI_SHARED_DATA\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5MzE3MA=="}, "originalCommit": {"oid": "464ea5670fe1e17c1fe6cce25bf7a5646a3a0c52"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTc2NDU3OnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNzozMjoyNlrOHBdfQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjoyODoyMlrOHCRGOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5Mzc2MA==", "bodyText": "Would be good to check if it is the right type by \"tryWrap\".", "url": "https://github.com/camunda-cloud/zeebe/pull/5157#discussion_r471293760", "createdAt": "2020-08-17T07:32:26Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -186,7 +188,18 @@ private void addSnapshotListener() {\n     }\n \n     final var snapshotChunk = new SnapshotChunkImpl();\n-    snapshotChunk.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());\n+    try {\n+      snapshotChunk.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "464ea5670fe1e17c1fe6cce25bf7a5646a3a0c52"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTMxNTM0Nw==", "bodyText": "Try wrap checks that the version is also the same, but I'm thinking this is actually wrong behaviour, no? Handling the different versions should be done depending on the messages, so we could use tryWrap and simply remove the version check. wdyt?", "url": "https://github.com/camunda-cloud/zeebe/pull/5157#discussion_r471315347", "createdAt": "2020-08-17T08:15:38Z", "author": {"login": "npepinpe"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -186,7 +188,18 @@ private void addSnapshotListener() {\n     }\n \n     final var snapshotChunk = new SnapshotChunkImpl();\n-    snapshotChunk.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());\n+    try {\n+      snapshotChunk.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5Mzc2MA=="}, "originalCommit": {"oid": "464ea5670fe1e17c1fe6cce25bf7a5646a3a0c52"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTM1NzU5NA==", "bodyText": "tryWrap only checks schemaId and templateId, right? It doesn't check the version.", "url": "https://github.com/camunda-cloud/zeebe/pull/5157#discussion_r471357594", "createdAt": "2020-08-17T09:32:48Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -186,7 +188,18 @@ private void addSnapshotListener() {\n     }\n \n     final var snapshotChunk = new SnapshotChunkImpl();\n-    snapshotChunk.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());\n+    try {\n+      snapshotChunk.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5Mzc2MA=="}, "originalCommit": {"oid": "464ea5670fe1e17c1fe6cce25bf7a5646a3a0c52"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEyMTIwMQ==", "bodyText": "Ah, correct, not sure why I was so sure it did \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/5157#discussion_r472121201", "createdAt": "2020-08-18T11:55:09Z", "author": {"login": "npepinpe"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -186,7 +188,18 @@ private void addSnapshotListener() {\n     }\n \n     final var snapshotChunk = new SnapshotChunkImpl();\n-    snapshotChunk.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());\n+    try {\n+      snapshotChunk.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5Mzc2MA=="}, "originalCommit": {"oid": "464ea5670fe1e17c1fe6cce25bf7a5646a3a0c52"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTMyMg==", "bodyText": "The one downside I see now is that using tryWrap, you don't know what the error that occurred was (without breaking the abstraction). But I also like that it doesn't throw an exception... \ud83e\udd14", "url": "https://github.com/camunda-cloud/zeebe/pull/5157#discussion_r472139322", "createdAt": "2020-08-18T12:28:22Z", "author": {"login": "npepinpe"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -186,7 +188,18 @@ private void addSnapshotListener() {\n     }\n \n     final var snapshotChunk = new SnapshotChunkImpl();\n-    snapshotChunk.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());\n+    try {\n+      snapshotChunk.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI5Mzc2MA=="}, "originalCommit": {"oid": "464ea5670fe1e17c1fe6cce25bf7a5646a3a0c52"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTA1ODM2OnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjozMjoxNFrOHC25Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzoxMzo1NlrOHC44pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1ODU3MQ==", "bodyText": "The name tryWrap is a misnomer. It only checks the headers, but it doesn't wrap the content. So we have to call snapshotChunk.wrap() again.", "url": "https://github.com/camunda-cloud/zeebe/pull/5157#discussion_r472758571", "createdAt": "2020-08-19T06:32:14Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -186,7 +188,15 @@ private void addSnapshotListener() {\n     }\n \n     final var snapshotChunk = new SnapshotChunkImpl();\n-    snapshotChunk.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());\n+    final var snapshotChunkBuffer = new UnsafeBuffer(request.data());\n+    if (!snapshotChunk.tryWrap(snapshotChunkBuffer)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae4c710cad37a9ce6133fd300ae1d087e811f8c8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc4NzM3MA==", "bodyText": "I see two options: one is we wrap in tryWrap (assuming the header is correct), the other is we rename it to canParse or some such (though it's also a bit misleading since we do wrap the header decoder, which means we do mutate the state). So I'd lean towards the former. We could also use Either as a return type, e.g. public Either<SnapshotChunkImpl, Throwable> wrap(...) and use tryWrap entirely internally.", "url": "https://github.com/camunda-cloud/zeebe/pull/5157#discussion_r472787370", "createdAt": "2020-08-19T07:09:10Z", "author": {"login": "npepinpe"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -186,7 +188,15 @@ private void addSnapshotListener() {\n     }\n \n     final var snapshotChunk = new SnapshotChunkImpl();\n-    snapshotChunk.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());\n+    final var snapshotChunkBuffer = new UnsafeBuffer(request.data());\n+    if (!snapshotChunk.tryWrap(snapshotChunkBuffer)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1ODU3MQ=="}, "originalCommit": {"oid": "ae4c710cad37a9ce6133fd300ae1d087e811f8c8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc4ODEyMg==", "bodyText": "Isn't tryWrap from generated code?", "url": "https://github.com/camunda-cloud/zeebe/pull/5157#discussion_r472788122", "createdAt": "2020-08-19T07:10:04Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -186,7 +188,15 @@ private void addSnapshotListener() {\n     }\n \n     final var snapshotChunk = new SnapshotChunkImpl();\n-    snapshotChunk.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());\n+    final var snapshotChunkBuffer = new UnsafeBuffer(request.data());\n+    if (!snapshotChunk.tryWrap(snapshotChunkBuffer)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1ODU3MQ=="}, "originalCommit": {"oid": "ae4c710cad37a9ce6133fd300ae1d087e811f8c8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc5MTIwNQ==", "bodyText": "I think it is not generated.", "url": "https://github.com/camunda-cloud/zeebe/pull/5157#discussion_r472791205", "createdAt": "2020-08-19T07:13:56Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -186,7 +188,15 @@ private void addSnapshotListener() {\n     }\n \n     final var snapshotChunk = new SnapshotChunkImpl();\n-    snapshotChunk.wrap(new UnsafeBuffer(request.data()), 0, request.data().capacity());\n+    final var snapshotChunkBuffer = new UnsafeBuffer(request.data());\n+    if (!snapshotChunk.tryWrap(snapshotChunkBuffer)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc1ODU3MQ=="}, "originalCommit": {"oid": "ae4c710cad37a9ce6133fd300ae1d087e811f8c8"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 392, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}