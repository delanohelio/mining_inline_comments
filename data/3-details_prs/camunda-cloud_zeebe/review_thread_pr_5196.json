{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NTQ0NTcx", "number": 5196, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjo0NToxMlrOEZ0mbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzowOToyMlrOEZ1Sug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTExNjYwOnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/StateControllerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjo0NToxMlrOHC3gHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzoyMDoxNVrOHC5Nmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc2ODU0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"Expected to take snapshot for lower bound position {}, but database was closed.\",\n          \n          \n            \n                      \"Expected to take snapshot for last processed position {}, but database was closed.\",", "url": "https://github.com/camunda-cloud/zeebe/pull/5196#discussion_r472768543", "createdAt": "2020-08-19T06:45:12Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/StateControllerImpl.java", "diffHunk": "@@ -71,29 +71,36 @@ public StateControllerImpl(\n   @Override\n   public Optional<TransientSnapshot> takeTransientSnapshot(final long lowerBoundSnapshotPosition) {\n     if (!isDbOpened()) {\n+      LOG.warn(\n+          \"Expected to take snapshot for lower bound position {}, but database was closed.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3285cd6f6dbf43bd82fe0d607f8a317c79d33b42"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc5NjU3MA==", "bodyText": "Actually I wrote not last processed since it is not really true. Do you think it is confusing to write lower bound?", "url": "https://github.com/camunda-cloud/zeebe/pull/5196#discussion_r472796570", "createdAt": "2020-08-19T07:20:15Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/StateControllerImpl.java", "diffHunk": "@@ -71,29 +71,36 @@ public StateControllerImpl(\n   @Override\n   public Optional<TransientSnapshot> takeTransientSnapshot(final long lowerBoundSnapshotPosition) {\n     if (!isDbOpened()) {\n+      LOG.warn(\n+          \"Expected to take snapshot for lower bound position {}, but database was closed.\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc2ODU0Mw=="}, "originalCommit": {"oid": "3285cd6f6dbf43bd82fe0d607f8a317c79d33b42"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTEyNjA5OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/StateControllerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjo0NzoxNlrOHC3mcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjo0NzoxNlrOHC3mcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc3MDE2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"Expected to find an indexed entry for given snapshot position {}, but found no matching indexed entry which contains this position.\",\n          \n          \n            \n                      \"Failed to take snapshot. Expected to find an indexed entry for given snapshot position {}, but found no matching indexed entry which contains this position.\",", "url": "https://github.com/camunda-cloud/zeebe/pull/5196#discussion_r472770162", "createdAt": "2020-08-19T06:47:16Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/StateControllerImpl.java", "diffHunk": "@@ -71,29 +71,36 @@ public StateControllerImpl(\n   @Override\n   public Optional<TransientSnapshot> takeTransientSnapshot(final long lowerBoundSnapshotPosition) {\n     if (!isDbOpened()) {\n+      LOG.warn(\n+          \"Expected to take snapshot for lower bound position {}, but database was closed.\",\n+          lowerBoundSnapshotPosition);\n       return Optional.empty();\n     }\n \n-    final long exportedPosition = exporterPositionSupplier.applyAsLong(openDb());\n-    final long snapshotPosition = Math.min(exportedPosition, lowerBoundSnapshotPosition);\n-\n+    final long snapshotPosition = determineSnapshotPosition(lowerBoundSnapshotPosition);\n     final var optionalIndexed = entrySupplier.getIndexedEntry(snapshotPosition);\n+    if (optionalIndexed.isEmpty()) {\n+      LOG.warn(\n+          \"Expected to find an indexed entry for given snapshot position {}, but found no matching indexed entry which contains this position.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3285cd6f6dbf43bd82fe0d607f8a317c79d33b42"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTEyODU3OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/StateControllerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjo0Nzo1M1rOHC3n_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNjo0Nzo1M1rOHC3n_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc3MDU1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"Based on lowest exporter position '{}' and lower bound snapshot position '{}', determined '{}' as snapshot position.\",\n          \n          \n            \n                    \"Based on lowest exporter position '{}' and last processed position '{}', determined '{}' as snapshot position.\",", "url": "https://github.com/camunda-cloud/zeebe/pull/5196#discussion_r472770557", "createdAt": "2020-08-19T06:47:53Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/StateControllerImpl.java", "diffHunk": "@@ -277,12 +264,23 @@ private ReplicationContext newReplication(\n     return new ReplicationContext(metrics, startTimestamp, transientSnapshot);\n   }\n \n+  private long determineSnapshotPosition(final long lowerBoundSnapshotPosition) {\n+    final long exportedPosition = exporterPositionSupplier.applyAsLong(openDb());\n+    final long snapshotPosition = Math.min(exportedPosition, lowerBoundSnapshotPosition);\n+    LOG.debug(\n+        \"Based on lowest exporter position '{}' and lower bound snapshot position '{}', determined '{}' as snapshot position.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3285cd6f6dbf43bd82fe0d607f8a317c79d33b42"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTIyMTEwOnYy", "diffSide": "LEFT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/StateControllerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzowNzozMVrOHC4kbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzowNzozMVrOHC4kbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc4NjAzMA==", "bodyText": "Why is this removed?", "url": "https://github.com/camunda-cloud/zeebe/pull/5196#discussion_r472786030", "createdAt": "2020-08-19T07:07:31Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/StateControllerImpl.java", "diffHunk": "@@ -159,26 +166,6 @@ boolean isDbOpened() {\n     return db != null;\n   }\n \n-  private void createSnapshot(final TransientSnapshot snapshot) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3285cd6f6dbf43bd82fe0d607f8a317c79d33b42"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTIzMDAyOnYy", "diffSide": "LEFT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/StateControllerImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzowOToyMlrOHC4qNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzoyMTo1OFrOHC5TEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc4NzUxMA==", "bodyText": "I think this was removed by mistake \ud83d\ude42 . This is probably why tests are failing.", "url": "https://github.com/camunda-cloud/zeebe/pull/5196#discussion_r472787510", "createdAt": "2020-08-19T07:09:22Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/StateControllerImpl.java", "diffHunk": "@@ -71,29 +71,36 @@ public StateControllerImpl(\n   @Override\n   public Optional<TransientSnapshot> takeTransientSnapshot(final long lowerBoundSnapshotPosition) {\n     if (!isDbOpened()) {\n+      LOG.warn(\n+          \"Expected to take snapshot for lower bound position {}, but database was closed.\",\n+          lowerBoundSnapshotPosition);\n       return Optional.empty();\n     }\n \n-    final long exportedPosition = exporterPositionSupplier.applyAsLong(openDb());\n-    final long snapshotPosition = Math.min(exportedPosition, lowerBoundSnapshotPosition);\n-\n+    final long snapshotPosition = determineSnapshotPosition(lowerBoundSnapshotPosition);\n     final var optionalIndexed = entrySupplier.getIndexedEntry(snapshotPosition);\n+    if (optionalIndexed.isEmpty()) {\n+      LOG.warn(\n+          \"Expected to find an indexed entry for given snapshot position {}, but found no matching indexed entry which contains this position.\",\n+          lowerBoundSnapshotPosition);\n+      return Optional.empty();\n+    }\n \n-    final Long previousSnapshotIndex =\n+    final var snapshotIndexedEntry = optionalIndexed.get();\n+    final long previousSnapshotIndex =\n         store.getLatestSnapshot().map(PersistedSnapshot::getCompactionBound).orElse(-1L);\n+    if (snapshotIndexedEntry.index() == previousSnapshotIndex) {\n+      LOG.debug(\n+          \"Previous snapshot was taken for the same indexed entry {}, will not take snapshot.\",\n+          snapshotIndexedEntry);\n+      return Optional.empty();\n+    }\n \n-    final var optTransientSnapshot =\n-        optionalIndexed\n-            .filter(indexed -> indexed.index() != previousSnapshotIndex)\n-            .map(\n-                indexed ->\n-                    store.newTransientSnapshot(\n-                        indexed.index(),\n-                        indexed.entry().term(),\n-                        WallClockTimestamp.from(System.currentTimeMillis())));\n-\n-    optTransientSnapshot.ifPresent(this::createSnapshot);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3285cd6f6dbf43bd82fe0d607f8a317c79d33b42"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc5Nzk3MQ==", "bodyText": "Ups :D yeah thanks will revert that \ud83d\ude48", "url": "https://github.com/camunda-cloud/zeebe/pull/5196#discussion_r472797971", "createdAt": "2020-08-19T07:21:58Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/StateControllerImpl.java", "diffHunk": "@@ -71,29 +71,36 @@ public StateControllerImpl(\n   @Override\n   public Optional<TransientSnapshot> takeTransientSnapshot(final long lowerBoundSnapshotPosition) {\n     if (!isDbOpened()) {\n+      LOG.warn(\n+          \"Expected to take snapshot for lower bound position {}, but database was closed.\",\n+          lowerBoundSnapshotPosition);\n       return Optional.empty();\n     }\n \n-    final long exportedPosition = exporterPositionSupplier.applyAsLong(openDb());\n-    final long snapshotPosition = Math.min(exportedPosition, lowerBoundSnapshotPosition);\n-\n+    final long snapshotPosition = determineSnapshotPosition(lowerBoundSnapshotPosition);\n     final var optionalIndexed = entrySupplier.getIndexedEntry(snapshotPosition);\n+    if (optionalIndexed.isEmpty()) {\n+      LOG.warn(\n+          \"Expected to find an indexed entry for given snapshot position {}, but found no matching indexed entry which contains this position.\",\n+          lowerBoundSnapshotPosition);\n+      return Optional.empty();\n+    }\n \n-    final Long previousSnapshotIndex =\n+    final var snapshotIndexedEntry = optionalIndexed.get();\n+    final long previousSnapshotIndex =\n         store.getLatestSnapshot().map(PersistedSnapshot::getCompactionBound).orElse(-1L);\n+    if (snapshotIndexedEntry.index() == previousSnapshotIndex) {\n+      LOG.debug(\n+          \"Previous snapshot was taken for the same indexed entry {}, will not take snapshot.\",\n+          snapshotIndexedEntry);\n+      return Optional.empty();\n+    }\n \n-    final var optTransientSnapshot =\n-        optionalIndexed\n-            .filter(indexed -> indexed.index() != previousSnapshotIndex)\n-            .map(\n-                indexed ->\n-                    store.newTransientSnapshot(\n-                        indexed.index(),\n-                        indexed.entry().term(),\n-                        WallClockTimestamp.from(System.currentTimeMillis())));\n-\n-    optTransientSnapshot.ifPresent(this::createSnapshot);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc4NzUxMA=="}, "originalCommit": {"oid": "3285cd6f6dbf43bd82fe0d607f8a317c79d33b42"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 311, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}