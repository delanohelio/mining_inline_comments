{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3Mzk1NTAw", "number": 5651, "title": "feat(gateway): Add a health info in the gateway's API.", "bodyText": "Description\nI've added health info into Gateway's GRPC API.\nRelated issues\ncloses #5482\nDefinition of Done\nNot all items need to be done depending on the issue and the pull request.\nCode changes:\n\n The changes are backwards compatibility with previous versions\n If it fixes a bug then PRs are created to backport the fix to the last two minor versions\n\nTesting:\n\n There are unit/integration tests that verify all acceptance criterias of the issue\n New tests are written to ensure backwards compatibility with further versions\n The behavior is tested manually\n The impact of the changes is verified by a benchmark\n\nDocumentation:\n\n The documentation is updated (e.g. BPMN reference, configuration, examples, get-started guides, etc.)\n New content is added to the release announcement", "createdAt": "2020-10-21T09:36:27Z", "url": "https://github.com/camunda-cloud/zeebe/pull/5651", "merged": true, "mergeCommit": {"oid": "cdb27fe4af4a37a6d8e29194af61067e709e3987"}, "closed": true, "closedAt": "2020-11-06T16:42:14Z", "author": {"login": "aivinog1"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVWEGVABqjM5MTM3OTM1OTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZ4W_KABqjM5Njc2MDc2MzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8738a109f6a1d8f094e9731e4fd0701be7c1c17d", "author": {"user": {"login": "aivinog1", "name": "Alexey Vinogradov"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8738a109f6a1d8f094e9731e4fd0701be7c1c17d", "committedDate": "2020-10-21T10:17:16Z", "message": "feat(gateway): Add a small unit test and fix a bug."}, "afterCommit": {"oid": "54c6cf6b3a13527ddcdd6e9afcd8d9657626787d", "author": {"user": {"login": "aivinog1", "name": "Alexey Vinogradov"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/54c6cf6b3a13527ddcdd6e9afcd8d9657626787d", "committedDate": "2020-10-23T12:51:48Z", "message": "feat(gateway): Add a health info in the gateway's API."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MTcxMDEx", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#pullrequestreview-524171011", "createdAt": "2020-11-05T11:32:20Z", "commit": {"oid": "54c6cf6b3a13527ddcdd6e9afcd8d9657626787d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "54c6cf6b3a13527ddcdd6e9afcd8d9657626787d", "author": {"user": {"login": "aivinog1", "name": "Alexey Vinogradov"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/54c6cf6b3a13527ddcdd6e9afcd8d9657626787d", "committedDate": "2020-10-23T12:51:48Z", "message": "feat(gateway): Add a health info in the gateway's API."}, "afterCommit": {"oid": "5ceb7ec3a9e82a448bfd8690c20e5f3cb677ea0d", "author": {"user": {"login": "aivinog1", "name": "Alexey Vinogradov"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/5ceb7ec3a9e82a448bfd8690c20e5f3cb677ea0d", "committedDate": "2020-11-05T15:18:34Z", "message": "chore(gateway): add gateway tests\n\nI've add some test to verify a partition health changing with a gateway's API."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NDQ5MTcz", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#pullrequestreview-524449173", "createdAt": "2020-11-05T16:37:24Z", "commit": {"oid": "5ceb7ec3a9e82a448bfd8690c20e5f3cb677ea0d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjo0MTo1OVrOHuMJYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjo0NjozMVrOHuMWcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NTU1NQ==", "bodyText": "I think this test is not necessary. You've changed a property of the topology and then again get the same object and alter it again. Just once is fine. Or am I missing something?", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518195555", "createdAt": "2020-11-05T16:41:59Z", "author": {"login": "korthout"}, "path": "gateway/src/test/java/io/zeebe/gateway/api/topology/TopologyTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.api.topology;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.gateway.api.util.GatewayTest;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterStateImpl;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.BrokerInfo;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.Partition.PartitionBrokerHealth;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyRequest;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyResponse;\n+import org.junit.Test;\n+\n+public class TopologyTest extends GatewayTest {\n+\n+  @Test\n+  public void shouldResponseWithInitialUnhealthyPartitions() {\n+    // when\n+    final TopologyResponse topologyResponse = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    assertThat(topologyResponse.getBrokersList())\n+        .isNotEmpty()\n+        .allSatisfy(\n+            brokerInfo ->\n+                assertThat(brokerInfo.getPartitionsList())\n+                    .isNotEmpty()\n+                    .allSatisfy(\n+                        partitionPerBroker ->\n+                            assertThat(partitionPerBroker.getHealth())\n+                                .isEqualTo(PartitionBrokerHealth.UNHEALTHY)));\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealthHealthy() {\n+    // given\n+    final BrokerClusterStateImpl topology =\n+        (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topology.setPartitionHealthy(0, 1);\n+\n+    // when\n+    final TopologyResponse topologyResponse = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    final PartitionBrokerHealth health =\n+        topologyResponse.getBrokers(0).getPartitions(0).getHealth();\n+    assertThat(health).isEqualTo(PartitionBrokerHealth.HEALTHY);\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealthUnhealthy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ceb7ec3a9e82a448bfd8690c20e5f3cb677ea0d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NTkyNg==", "bodyText": "Please add an additional test case where you explicitly make this value unhealthy. Or change both in the same case and change the test case name to something like shouldRespondWithUpdatedPartitionHealth", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518195926", "createdAt": "2020-11-05T16:42:30Z", "author": {"login": "korthout"}, "path": "gateway/src/test/java/io/zeebe/gateway/api/topology/TopologyTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.api.topology;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.gateway.api.util.GatewayTest;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterStateImpl;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.BrokerInfo;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.Partition.PartitionBrokerHealth;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyRequest;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyResponse;\n+import org.junit.Test;\n+\n+public class TopologyTest extends GatewayTest {\n+\n+  @Test\n+  public void shouldResponseWithInitialUnhealthyPartitions() {\n+    // when\n+    final TopologyResponse topologyResponse = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    assertThat(topologyResponse.getBrokersList())\n+        .isNotEmpty()\n+        .allSatisfy(\n+            brokerInfo ->\n+                assertThat(brokerInfo.getPartitionsList())\n+                    .isNotEmpty()\n+                    .allSatisfy(\n+                        partitionPerBroker ->\n+                            assertThat(partitionPerBroker.getHealth())\n+                                .isEqualTo(PartitionBrokerHealth.UNHEALTHY)));\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealthHealthy() {\n+    // given\n+    final BrokerClusterStateImpl topology =\n+        (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topology.setPartitionHealthy(0, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ceb7ec3a9e82a448bfd8690c20e5f3cb677ea0d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NjM1OQ==", "bodyText": "nitpick: I suggest you change the name of the variable to response (its clear where it comes from) and change the type definition to var because it can easily be inferred.", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518196359", "createdAt": "2020-11-05T16:43:07Z", "author": {"login": "korthout"}, "path": "gateway/src/test/java/io/zeebe/gateway/api/topology/TopologyTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.api.topology;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.gateway.api.util.GatewayTest;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterStateImpl;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.BrokerInfo;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.Partition.PartitionBrokerHealth;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyRequest;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyResponse;\n+import org.junit.Test;\n+\n+public class TopologyTest extends GatewayTest {\n+\n+  @Test\n+  public void shouldResponseWithInitialUnhealthyPartitions() {\n+    // when\n+    final TopologyResponse topologyResponse = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    assertThat(topologyResponse.getBrokersList())\n+        .isNotEmpty()\n+        .allSatisfy(\n+            brokerInfo ->\n+                assertThat(brokerInfo.getPartitionsList())\n+                    .isNotEmpty()\n+                    .allSatisfy(\n+                        partitionPerBroker ->\n+                            assertThat(partitionPerBroker.getHealth())\n+                                .isEqualTo(PartitionBrokerHealth.UNHEALTHY)));\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealthHealthy() {\n+    // given\n+    final BrokerClusterStateImpl topology =\n+        (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topology.setPartitionHealthy(0, 1);\n+\n+    // when\n+    final TopologyResponse topologyResponse = client.topology(TopologyRequest.newBuilder().build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ceb7ec3a9e82a448bfd8690c20e5f3cb677ea0d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NjUxMg==", "bodyText": "nitpick: There's some other places where you reduce the variable name length and where you can apply var instead of an explicit type.", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518196512", "createdAt": "2020-11-05T16:43:21Z", "author": {"login": "korthout"}, "path": "gateway/src/test/java/io/zeebe/gateway/api/topology/TopologyTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.api.topology;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.gateway.api.util.GatewayTest;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterStateImpl;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.BrokerInfo;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.Partition.PartitionBrokerHealth;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyRequest;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyResponse;\n+import org.junit.Test;\n+\n+public class TopologyTest extends GatewayTest {\n+\n+  @Test\n+  public void shouldResponseWithInitialUnhealthyPartitions() {\n+    // when\n+    final TopologyResponse topologyResponse = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    assertThat(topologyResponse.getBrokersList())\n+        .isNotEmpty()\n+        .allSatisfy(\n+            brokerInfo ->\n+                assertThat(brokerInfo.getPartitionsList())\n+                    .isNotEmpty()\n+                    .allSatisfy(\n+                        partitionPerBroker ->\n+                            assertThat(partitionPerBroker.getHealth())\n+                                .isEqualTo(PartitionBrokerHealth.UNHEALTHY)));\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealthHealthy() {\n+    // given\n+    final BrokerClusterStateImpl topology =\n+        (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topology.setPartitionHealthy(0, 1);\n+\n+    // when\n+    final TopologyResponse topologyResponse = client.topology(TopologyRequest.newBuilder().build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NjM1OQ=="}, "originalCommit": {"oid": "5ceb7ec3a9e82a448bfd8690c20e5f3cb677ea0d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5ODQxMg==", "bodyText": "generally our test classes are final.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class TopologyTest extends GatewayTest {\n          \n          \n            \n            public final class TopologyTest extends GatewayTest {", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518198412", "createdAt": "2020-11-05T16:45:52Z", "author": {"login": "korthout"}, "path": "gateway/src/test/java/io/zeebe/gateway/api/topology/TopologyTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.api.topology;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.gateway.api.util.GatewayTest;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterStateImpl;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.BrokerInfo;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.Partition.PartitionBrokerHealth;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyRequest;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyResponse;\n+import org.junit.Test;\n+\n+public class TopologyTest extends GatewayTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ceb7ec3a9e82a448bfd8690c20e5f3cb677ea0d"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5ODg5Ng==", "bodyText": "Should this be in here?", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518198896", "createdAt": "2020-11-05T16:46:31Z", "author": {"login": "korthout"}, "path": "benchmarks/project/zbench/go.sum", "diffHunk": "@@ -532,6 +532,7 @@ golang.org/x/net v0.0.0-20200707034311-ab3426394381/go.mod h1:/O7V0waA8r7cgGh81R\n golang.org/x/net v0.0.0-20200822124328-c89045814202/go.mod h1:/O7V0waA8r7cgGh81Ro3o1hOxt32SMVPicZroKQ2sZA=\n golang.org/x/net v0.0.0-20201021035429-f5854403a974 h1:IX6qOQeG5uLjB/hjjwjedwfjND0hgjPMMyO1RoIXQNI=\n golang.org/x/net v0.0.0-20201021035429-f5854403a974/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=\n+golang.org/x/net v0.0.0-20201031054903-ff519b6c9102/go.mod h1:sp8m0HH+o8qH0wwXwYZr8TS3Oi6o0r6Gce1SSxlDquU=", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ceb7ec3a9e82a448bfd8690c20e5f3cb677ea0d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0OTcyNzY1", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#pullrequestreview-524972765", "createdAt": "2020-11-06T09:11:38Z", "commit": {"oid": "0e292157961e2e59f011f9cc48d18293797f2bcc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOToxMTozOVrOHulz7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOToxNDoxNlrOHul5ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYxNjA0NA==", "bodyText": "You don't need this line in this test. I understand that it may seem so due to your implementation, but I'd rather test behaviour. So just setting 1 partition to unhealthy should be enough for this test.", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518616044", "createdAt": "2020-11-06T09:11:39Z", "author": {"login": "korthout"}, "path": "gateway/src/test/java/io/zeebe/gateway/api/topology/TopologyTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.api.topology;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.gateway.api.util.GatewayTest;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterStateImpl;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.Partition.PartitionBrokerHealth;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyRequest;\n+import org.junit.Test;\n+\n+public final class TopologyTest extends GatewayTest {\n+\n+  @Test\n+  public void shouldResponseWithInitialUnhealthyPartitions() {\n+    // when\n+    final var response = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    assertThat(response.getBrokersList())\n+        .isNotEmpty()\n+        .allSatisfy(\n+            brokerInfo ->\n+                assertThat(brokerInfo.getPartitionsList())\n+                    .isNotEmpty()\n+                    .allSatisfy(\n+                        partitionPerBroker ->\n+                            assertThat(partitionPerBroker.getHealth())\n+                                .isEqualTo(PartitionBrokerHealth.UNHEALTHY)));\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealthHealthy() {\n+    // given\n+    final var topology = (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topology.setPartitionHealthy(0, 1);\n+\n+    // when\n+    final var response = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    final var health = response.getBrokers(0).getPartitions(0).getHealth();\n+    assertThat(health).isEqualTo(PartitionBrokerHealth.HEALTHY);\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealth() {\n+    // given\n+    final var topology = (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topology.setPartitionHealthy(0, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e292157961e2e59f011f9cc48d18293797f2bcc"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYxNjUyMg==", "bodyText": "nit: you can also make this variable name shorter\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final var responseAfterUpdate = client.topology(TopologyRequest.newBuilder().build());\n          \n          \n            \n                final var response = client.topology(TopologyRequest.newBuilder().build());", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518616522", "createdAt": "2020-11-06T09:12:33Z", "author": {"login": "korthout"}, "path": "gateway/src/test/java/io/zeebe/gateway/api/topology/TopologyTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.api.topology;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.gateway.api.util.GatewayTest;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterStateImpl;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.Partition.PartitionBrokerHealth;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyRequest;\n+import org.junit.Test;\n+\n+public final class TopologyTest extends GatewayTest {\n+\n+  @Test\n+  public void shouldResponseWithInitialUnhealthyPartitions() {\n+    // when\n+    final var response = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    assertThat(response.getBrokersList())\n+        .isNotEmpty()\n+        .allSatisfy(\n+            brokerInfo ->\n+                assertThat(brokerInfo.getPartitionsList())\n+                    .isNotEmpty()\n+                    .allSatisfy(\n+                        partitionPerBroker ->\n+                            assertThat(partitionPerBroker.getHealth())\n+                                .isEqualTo(PartitionBrokerHealth.UNHEALTHY)));\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealthHealthy() {\n+    // given\n+    final var topology = (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topology.setPartitionHealthy(0, 1);\n+\n+    // when\n+    final var response = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    final var health = response.getBrokers(0).getPartitions(0).getHealth();\n+    assertThat(health).isEqualTo(PartitionBrokerHealth.HEALTHY);\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealth() {\n+    // given\n+    final var topology = (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topology.setPartitionHealthy(0, 1);\n+    topology.setPartitionUnhealthy(0, 1);\n+\n+    // when\n+    final var response = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    final var health = response.getBrokers(0).getPartitions(0).getHealth();\n+    assertThat(health).isEqualTo(PartitionBrokerHealth.UNHEALTHY);\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealthUnhealthy() {\n+    // given\n+    final var topology = (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topology.setPartitionHealthy(0, 1);\n+    final var topologyAfterUpdate =\n+        (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topologyAfterUpdate.setPartitionUnhealthy(0, 1);\n+    topologyAfterUpdate.setPartitionHealthy(0, 6);\n+\n+    // when\n+    final var responseAfterUpdate = client.topology(TopologyRequest.newBuilder().build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e292157961e2e59f011f9cc48d18293797f2bcc"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYxNzI4NQ==", "bodyText": "Also make sure to change the name of the test method accordingly. Something like: shouldUpdateMultiplePartitionHealths", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518617285", "createdAt": "2020-11-06T09:13:53Z", "author": {"login": "korthout"}, "path": "gateway/src/test/java/io/zeebe/gateway/api/topology/TopologyTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.api.topology;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.gateway.api.util.GatewayTest;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterStateImpl;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.BrokerInfo;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.Partition.PartitionBrokerHealth;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyRequest;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyResponse;\n+import org.junit.Test;\n+\n+public class TopologyTest extends GatewayTest {\n+\n+  @Test\n+  public void shouldResponseWithInitialUnhealthyPartitions() {\n+    // when\n+    final TopologyResponse topologyResponse = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    assertThat(topologyResponse.getBrokersList())\n+        .isNotEmpty()\n+        .allSatisfy(\n+            brokerInfo ->\n+                assertThat(brokerInfo.getPartitionsList())\n+                    .isNotEmpty()\n+                    .allSatisfy(\n+                        partitionPerBroker ->\n+                            assertThat(partitionPerBroker.getHealth())\n+                                .isEqualTo(PartitionBrokerHealth.UNHEALTHY)));\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealthHealthy() {\n+    // given\n+    final BrokerClusterStateImpl topology =\n+        (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topology.setPartitionHealthy(0, 1);\n+\n+    // when\n+    final TopologyResponse topologyResponse = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    final PartitionBrokerHealth health =\n+        topologyResponse.getBrokers(0).getPartitions(0).getHealth();\n+    assertThat(health).isEqualTo(PartitionBrokerHealth.HEALTHY);\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealthUnhealthy() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE5NTU1NQ=="}, "originalCommit": {"oid": "5ceb7ec3a9e82a448bfd8690c20e5f3cb677ea0d"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYxNzQ4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldUpdatePartitionHealth() {\n          \n          \n            \n              public void shouldUpdatePartitionHealthUnhealthy() {", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#discussion_r518617482", "createdAt": "2020-11-06T09:14:16Z", "author": {"login": "korthout"}, "path": "gateway/src/test/java/io/zeebe/gateway/api/topology/TopologyTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.api.topology;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.gateway.api.util.GatewayTest;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterStateImpl;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.Partition.PartitionBrokerHealth;\n+import io.zeebe.gateway.protocol.GatewayOuterClass.TopologyRequest;\n+import org.junit.Test;\n+\n+public final class TopologyTest extends GatewayTest {\n+\n+  @Test\n+  public void shouldResponseWithInitialUnhealthyPartitions() {\n+    // when\n+    final var response = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    assertThat(response.getBrokersList())\n+        .isNotEmpty()\n+        .allSatisfy(\n+            brokerInfo ->\n+                assertThat(brokerInfo.getPartitionsList())\n+                    .isNotEmpty()\n+                    .allSatisfy(\n+                        partitionPerBroker ->\n+                            assertThat(partitionPerBroker.getHealth())\n+                                .isEqualTo(PartitionBrokerHealth.UNHEALTHY)));\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealthHealthy() {\n+    // given\n+    final var topology = (BrokerClusterStateImpl) brokerClient.getTopologyManager().getTopology();\n+    topology.setPartitionHealthy(0, 1);\n+\n+    // when\n+    final var response = client.topology(TopologyRequest.newBuilder().build());\n+\n+    // then\n+    final var health = response.getBrokers(0).getPartitions(0).getHealth();\n+    assertThat(health).isEqualTo(PartitionBrokerHealth.HEALTHY);\n+  }\n+\n+  @Test\n+  public void shouldUpdatePartitionHealth() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e292157961e2e59f011f9cc48d18293797f2bcc"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI1MjMxMzE3", "url": "https://github.com/camunda-cloud/zeebe/pull/5651#pullrequestreview-525231317", "createdAt": "2020-11-06T15:00:13Z", "commit": {"oid": "c37cc9d82980e9771c9fe71bb7c89914a55698d8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d6a4c61bc3aec000d81757268ea559542906481", "author": {"user": {"login": "aivinog1", "name": "Alexey Vinogradov"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/3d6a4c61bc3aec000d81757268ea559542906481", "committedDate": "2020-11-06T15:04:50Z", "message": "feat(gateway): Add a health info in the gateway's API."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c37cc9d82980e9771c9fe71bb7c89914a55698d8", "author": {"user": {"login": "aivinog1", "name": "Alexey Vinogradov"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/c37cc9d82980e9771c9fe71bb7c89914a55698d8", "committedDate": "2020-11-06T14:15:03Z", "message": "chore(gateway): fix gateway tests\n\nMake tests look more robust and easy to understand"}, "afterCommit": {"oid": "3d6a4c61bc3aec000d81757268ea559542906481", "author": {"user": {"login": "aivinog1", "name": "Alexey Vinogradov"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/3d6a4c61bc3aec000d81757268ea559542906481", "committedDate": "2020-11-06T15:04:50Z", "message": "feat(gateway): Add a health info in the gateway's API."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2471, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}