{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNDQwNjky", "number": 4112, "title": "chore(broker): avoid NPE by using Optional", "bodyText": "Description\nThis PR migrates several SnapshotStorage APIs from returning nullable types to return Optional values, handling potential empty values where it makes sense. This is not a silver bullet for our snapshot replication issues, but it should be much safer than returning nullables.\nAdditionally skips taking snapshots when we are still on position -1.\nRelated issues\ncloses #4085\nPull Request Checklist\n\n All commit messages match our commit message guidelines\n The submitting code follows our code style\n If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-03-23T15:02:34Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4112", "merged": true, "mergeCommit": {"oid": "77d9a7fd8e6ae0889698cedb4594237a9d9e8a11"}, "closed": true, "closedAt": "2020-03-24T12:12:48Z", "author": {"login": "npepinpe"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQfq-WABqjMxNTU2Mzc2MjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQwdWHABqjMxNTkwNDQ2MTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "61e9d05341db94cfc3a1f8bef83372d690a25345", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/61e9d05341db94cfc3a1f8bef83372d690a25345", "committedDate": "2020-03-23T14:01:02Z", "message": "chore(broker): avoid NPE by using Optional\n\n- migrates several SnapshotStorage APIs from returning nullable types to\n  return Optional values, handling potential empty values where it makes\n  sense"}, "afterCommit": {"oid": "8f51ec5a664a2a2a887cac4e705a5d63238b3fb8", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8f51ec5a664a2a2a887cac4e705a5d63238b3fb8", "committedDate": "2020-03-23T15:02:45Z", "message": "chore(broker): avoid NPE by using Optional\n\n- migrates several SnapshotStorage APIs from returning nullable types to\n  return Optional values, handling potential empty values where it makes\n  sense"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f51ec5a664a2a2a887cac4e705a5d63238b3fb8", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8f51ec5a664a2a2a887cac4e705a5d63238b3fb8", "committedDate": "2020-03-23T15:02:45Z", "message": "chore(broker): avoid NPE by using Optional\n\n- migrates several SnapshotStorage APIs from returning nullable types to\n  return Optional values, handling potential empty values where it makes\n  sense"}, "afterCommit": {"oid": "2d9f561ce89d820926183c70dfb5fd228f39ca48", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/2d9f561ce89d820926183c70dfb5fd228f39ca48", "committedDate": "2020-03-23T16:17:47Z", "message": "chore(broker): avoid NPE by using Optional\n\n- migrates several SnapshotStorage APIs from returning nullable types to\n  return Optional values, handling potential empty values where it makes\n  sense"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2d9f561ce89d820926183c70dfb5fd228f39ca48", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/2d9f561ce89d820926183c70dfb5fd228f39ca48", "committedDate": "2020-03-23T16:17:47Z", "message": "chore(broker): avoid NPE by using Optional\n\n- migrates several SnapshotStorage APIs from returning nullable types to\n  return Optional values, handling potential empty values where it makes\n  sense"}, "afterCommit": {"oid": "2b1a3912222cd3bae71bde0327c3b8863e06d2a7", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/2b1a3912222cd3bae71bde0327c3b8863e06d2a7", "committedDate": "2020-03-23T17:02:33Z", "message": "chore(broker): avoid NPE by using Optional\n\n- migrates several SnapshotStorage APIs from returning nullable types to\n  return Optional values, handling potential empty values where it makes\n  sense"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b1a3912222cd3bae71bde0327c3b8863e06d2a7", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/2b1a3912222cd3bae71bde0327c3b8863e06d2a7", "committedDate": "2020-03-23T17:02:33Z", "message": "chore(broker): avoid NPE by using Optional\n\n- migrates several SnapshotStorage APIs from returning nullable types to\n  return Optional values, handling potential empty values where it makes\n  sense"}, "afterCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/bd8e5aa41dd6f5a0e9131be288dd43227cce00df", "committedDate": "2020-03-23T17:25:05Z", "message": "chore(broker): avoid NPE by using Optional\n\n- migrates several SnapshotStorage APIs from returning nullable types to\n  return Optional values, handling potential empty values where it makes\n  sense"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMDA5NDQx", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#pullrequestreview-380009441", "createdAt": "2020-03-24T05:31:10Z", "commit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTozMToxMFrOF6helA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTozMToxMFrOF6helA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMDIyOA==", "bodyText": "I think I have a wrong cfg", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396910228", "createdAt": "2020-03-24T05:31:10Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "diffHunk": "@@ -141,6 +135,11 @@ protected void onActorCloseRequested() {\n     return future;\n   }\n \n+  private void scheduleSnapshotOnRate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMDEyMjI5", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#pullrequestreview-380012229", "createdAt": "2020-03-24T05:40:21Z", "commit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTo0MDoyMVrOF6hntA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNjowMDo0NlrOF6h8pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMjU2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          LOG.debug(\"Skip taking snapshot due to no even having ever been processed\");\n          \n          \n            \n                          LOG.debug(\"We will skip taking this snapshot, because we haven't processed something yet.\");", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396912564", "createdAt": "2020-03-24T05:40:21Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "diffHunk": "@@ -156,6 +155,12 @@ private void prepareTakingSnapshot() {\n         futureLastProcessedPosition,\n         (lastProcessedPosition, error) -> {\n           if (error == null) {\n+            if (lastProcessedPosition == StreamProcessor.UNSET_POSITION) {\n+              LOG.debug(\"Skip taking snapshot due to no even having ever been processed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMjg3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private long errorRecordPosition = -1;\n          \n          \n            \n              private long errorRecordPosition = StreamProcessor.UNSET_POSITION;", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396912872", "createdAt": "2020-03-24T05:41:31Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/processor/ProcessingStateMachine.java", "diffHunk": "@@ -126,9 +126,9 @@\n   private LoggedEvent currentEvent;\n   private TypedRecordProcessor<?> currentProcessor;\n   private ZeebeDbTransaction zeebeDbTransaction;\n-  private long writtenEventPosition = -1L;\n-  private long lastSuccessfulProcessedEventPosition = -1L;\n-  private long lastWrittenEventPosition = -1L;\n+  private long writtenEventPosition = StreamProcessor.UNSET_POSITION;\n+  private long lastSuccessfulProcessedEventPosition = StreamProcessor.UNSET_POSITION;\n+  private long lastWrittenEventPosition = StreamProcessor.UNSET_POSITION;\n   private boolean onErrorHandling;\n   private long errorRecordPosition = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNDI2NQ==", "bodyText": "This is no longer true, then please remove this test \ud83d\ude05 or rename it but I think we already have a similar test.", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396914265", "createdAt": "2020-03-24T05:46:51Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "diffHunk": "@@ -544,7 +545,7 @@ public void processRecord(\n   }\n \n   @Test\n-  public void shouldCreateSnapshotEvenWhenNoEventProcessed() throws Exception {\n+  public void shouldCreateSnapshotOnCloseEvenWhenNoEventProcessed() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNDQ3NQ==", "bodyText": "never ever? \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396914475", "createdAt": "2020-03-24T05:47:44Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "diffHunk": "@@ -590,6 +601,22 @@ public void shouldCreateSnapshotsEvenIfNoProcessorProcessEvent() {\n     assertThat(stateSnapshotController.getValidSnapshotsCount()).isEqualTo(1);\n   }\n \n+  @Test\n+  public void shouldNotCreateSnapshotIfNothingProcessedEver() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNTA5Nw==", "bodyText": "Would it be possible to verify that the stream processor is really closed? I think it make sense for this test to ensure that this haven't created a snapshot otherwise we have no guarantee.", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396915097", "createdAt": "2020-03-24T05:50:18Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "diffHunk": "@@ -590,6 +601,22 @@ public void shouldCreateSnapshotsEvenIfNoProcessorProcessEvent() {\n     assertThat(stateSnapshotController.getValidSnapshotsCount()).isEqualTo(1);\n   }\n \n+  @Test\n+  public void shouldNotCreateSnapshotIfNothingProcessedEver() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNDQ3NQ=="}, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNTQ0Mw==", "bodyText": "I'm wondering why was this a problem with the -1 ? We will just wait until commit pos is higher?", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396915443", "createdAt": "2020-03-24T05:51:34Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "diffHunk": "@@ -156,6 +155,12 @@ private void prepareTakingSnapshot() {\n         futureLastProcessedPosition,\n         (lastProcessedPosition, error) -> {\n           if (error == null) {\n+            if (lastProcessedPosition == StreamProcessor.UNSET_POSITION) {\n+              LOG.debug(\"Skip taking snapshot due to no even having ever been processed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxMjU2NA=="}, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNTcyNw==", "bodyText": "I'm not a fan of link to impl in interfaces \ud83d\ude48", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396915727", "createdAt": "2020-03-24T05:52:40Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/spi/SnapshotController.java", "diffHunk": "@@ -11,23 +11,30 @@\n import io.zeebe.logstreams.state.Snapshot;\n import java.io.File;\n import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Optional;\n import java.util.function.Consumer;\n \n public interface SnapshotController extends AutoCloseable {\n   /**\n    * Takes a snapshot based on the given position and immediately commits it.\n    *\n    * @param lowerBoundSnapshotPosition the lower bound snapshot position\n+   * @return a committed snapshot, or nothing if the operation failed\n+   * @see io.zeebe.logstreams.state.SnapshotStorage#commitSnapshot(Path)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNjIyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final var optionalPath = storage.getPendingDirectoryFor(snapshotId);\n          \n          \n            \n                optionalPath.ifPresent(this::deletePendingSnapshot);\n          \n          \n            \n                storage.getPendingDirectoryFor(snapshotId).ifPresent(this::deletePendingSnapshot);", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396916220", "createdAt": "2020-03-24T05:54:29Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/state/FileSnapshotConsumer.java", "diffHunk": "@@ -34,12 +34,16 @@ public boolean consumeSnapshotChunk(final SnapshotChunk chunk) {\n \n   @Override\n   public boolean completeSnapshot(final String snapshotId) {\n-    return storage.commitSnapshot(storage.getPendingDirectoryFor(snapshotId)).isPresent();\n+    return storage.getPendingDirectoryFor(snapshotId).flatMap(storage::commitSnapshot).isPresent();\n   }\n \n   @Override\n   public void invalidateSnapshot(final String snapshotId) {\n-    final var pendingDirectory = storage.getPendingDirectoryFor(snapshotId);\n+    final var optionalPath = storage.getPendingDirectoryFor(snapshotId);\n+    optionalPath.ifPresent(this::deletePendingSnapshot);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNjg1NQ==", "bodyText": "This storage does an lookup now? \ud83d\udc40 because of the index usage?", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396916855", "createdAt": "2020-03-24T05:56:55Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/state/SnapshotStorage.java", "diffHunk": "@@ -24,18 +24,18 @@\n    * and therefore should be cached if it needs to be reused.\n    *\n    * @param snapshotPosition the position to use\n-   * @return a pending snapshot\n+   * @return a pending snapshot, or nothing if no position less than or equal was found in the log", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNzg4NA==", "bodyText": "lol \ud83d\ude48", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396917884", "createdAt": "2020-03-24T06:00:37Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/test/java/io/zeebe/logstreams/state/StateSnapshotControllerTest.java", "diffHunk": "@@ -46,13 +46,12 @@ public void setup() throws IOException {\n   }\n \n   @Test\n-  public void shouldThrowExceptionOnTakeSnapshotIfClosed() {\n+  public void shouldNotTakeSnapshotIfDbIsClosed() {\n     // given\n \n     // then\n     assertThat(snapshotController.isDbOpened()).isFalse();\n-    assertThatThrownBy(() -> snapshotController.takeSnapshot(1))\n-        .isInstanceOf(NullPointerException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNzkyNg==", "bodyText": "really?", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r396917926", "createdAt": "2020-03-24T06:00:46Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/test/java/io/zeebe/logstreams/state/StateSnapshotControllerTest.java", "diffHunk": "@@ -46,13 +46,12 @@ public void setup() throws IOException {\n   }\n \n   @Test\n-  public void shouldThrowExceptionOnTakeSnapshotIfClosed() {\n+  public void shouldNotTakeSnapshotIfDbIsClosed() {\n     // given\n \n     // then\n     assertThat(snapshotController.isDbOpened()).isFalse();\n-    assertThatThrownBy(() -> snapshotController.takeSnapshot(1))\n-        .isInstanceOf(NullPointerException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNzg4NA=="}, "originalCommit": {"oid": "bd8e5aa41dd6f5a0e9131be288dd43227cce00df"}, "originalPosition": 11}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "887b0a7611e3cd8379218f0c864e6a21c41f1f11", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/887b0a7611e3cd8379218f0c864e6a21c41f1f11", "committedDate": "2020-03-24T07:57:54Z", "message": "chore(engine): reuse constant instead of magic value\n\nCo-Authored-By: Christopher Zell <zelldon91@googlemail.com>"}, "afterCommit": {"oid": "5fd3b537b03c7da9821a414250a02a09b179cb40", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/5fd3b537b03c7da9821a414250a02a09b179cb40", "committedDate": "2020-03-24T09:52:22Z", "message": "chore(engine): ensure stream processor is closed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTc4NTEz", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#pullrequestreview-380178513", "createdAt": "2020-03-24T10:30:13Z", "commit": {"oid": "e5a69b791e5fba3ecf7702a0e14a8292177857aa"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDozMDoxNFrOF6p8eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDozMDoxNFrOF6p8eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA0ODk1Mw==", "bodyText": "Take snapshot is only called on enforcing right? to be more impl independent we also just could use the waituntil snapshot count is 2", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r397048953", "createdAt": "2020-03-24T10:30:14Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "diffHunk": "@@ -545,32 +545,35 @@ public void processRecord(\n   }\n \n   @Test\n-  public void shouldCreateSnapshotOnCloseEvenWhenNoEventProcessed() throws Exception {\n+  public void shouldCreateSnapshotOnCloseEvenIfNothingProcessedSinceLastSnapshot()\n+      throws Exception {\n     // given\n-    final CountDownLatch recoveredLatch = new CountDownLatch(1);\n-    streamProcessorRule.startTypedStreamProcessor(\n-        (processors, context) ->\n-            processors.onEvent(\n-                ValueType.WORKFLOW_INSTANCE,\n-                WorkflowInstanceIntent.ELEMENT_ACTIVATING,\n-                new TypedRecordProcessor<UnifiedRecordValue>() {\n-                  @Override\n-                  public void onRecovered(final ReadonlyProcessingContext context) {\n-                    recoveredLatch.countDown();\n-                  }\n-                }));\n-\n-    // when\n+    final var recoveredLatch = new CountDownLatch(1);\n+    final var streamProcessor =\n+        streamProcessorRule.startTypedStreamProcessor(\n+            (processors, context) ->\n+                processors.onEvent(\n+                    ValueType.WORKFLOW_INSTANCE,\n+                    WorkflowInstanceIntent.ELEMENT_ACTIVATING,\n+                    new TypedRecordProcessor<UnifiedRecordValue>() {\n+                      @Override\n+                      public void onRecovered(final ReadonlyProcessingContext context) {\n+                        recoveredLatch.countDown();\n+                      }\n+                    }));\n     final var stateSnapshotController = streamProcessorRule.getStateSnapshotController();\n     recoveredLatch.await(5, TimeUnit.SECONDS);\n     final var position =\n         streamProcessorRule.writeWorkflowInstanceEvent(WorkflowInstanceIntent.ELEMENT_ACTIVATING);\n     TestUtil.waitUntil(() -> streamProcessorRule.events().count() >= 1);\n     streamProcessorRule.getClock().addTime(SNAPSHOT_INTERVAL);\n     TestUtil.waitUntil(() -> stateSnapshotController.getValidSnapshotsCount() == 1);\n+\n+    // when\n     streamProcessorRule.closeStreamProcessor();\n \n     // then\n+    assertThat(streamProcessor.isClosed()).isTrue();\n     final InOrder inOrder = Mockito.inOrder(stateSnapshotController);\n     inOrder.verify(stateSnapshotController, TIMEOUT.times(1)).openDb();\n     inOrder.verify(stateSnapshotController, TIMEOUT.times(1)).takeSnapshot(position);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5a69b791e5fba3ecf7702a0e14a8292177857aa"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMTgxNzgx", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#pullrequestreview-380181781", "createdAt": "2020-03-24T10:34:36Z", "commit": {"oid": "2518c3f191c95f2c03d41f73ab5a943e90559160"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDozNDozNlrOF6qGbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDozNDozNlrOF6qGbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1MTUwMw==", "bodyText": "\ud83c\udf89", "url": "https://github.com/camunda-cloud/zeebe/pull/4112#discussion_r397051503", "createdAt": "2020-03-24T10:34:36Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "diffHunk": "@@ -574,9 +574,7 @@ public void onRecovered(final ReadonlyProcessingContext context) {\n \n     // then\n     assertThat(streamProcessor.isClosed()).isTrue();\n-    final InOrder inOrder = Mockito.inOrder(stateSnapshotController);\n-    inOrder.verify(stateSnapshotController, TIMEOUT.times(1)).openDb();\n-    inOrder.verify(stateSnapshotController, TIMEOUT.times(1)).takeSnapshot(position);\n+    TestUtil.waitUntil(() -> stateSnapshotController.getValidSnapshotsCount() == 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2518c3f191c95f2c03d41f73ab5a943e90559160"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "caeb4706c75356f029cf60869c3dda3368e56df7", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/caeb4706c75356f029cf60869c3dda3368e56df7", "committedDate": "2020-03-24T10:36:12Z", "message": "chore(broker): avoid NPE by using Optional\n\n- migrates several SnapshotStorage APIs from returning nullable types to\n  return Optional values, handling potential empty values where it makes\n  sense"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2518c3f191c95f2c03d41f73ab5a943e90559160", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/2518c3f191c95f2c03d41f73ab5a943e90559160", "committedDate": "2020-03-24T10:34:12Z", "message": "chore(engine): decouple from impl and wait for second snapshot"}, "afterCommit": {"oid": "caeb4706c75356f029cf60869c3dda3368e56df7", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/caeb4706c75356f029cf60869c3dda3368e56df7", "committedDate": "2020-03-24T10:36:12Z", "message": "chore(broker): avoid NPE by using Optional\n\n- migrates several SnapshotStorage APIs from returning nullable types to\n  return Optional values, handling potential empty values where it makes\n  sense"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2925, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}