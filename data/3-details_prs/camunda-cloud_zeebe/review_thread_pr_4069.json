{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMzU5MTU5", "number": 4069, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzo0MzozNlrODpgy9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOToyNzo1MlrODppcSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODU1NTQyOnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/SystemContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzo0MzozNlrOF4u9yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzo0MzozNlrOF4u9yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzNDA1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final Duration ONE_MINUTE = Duration.ofMinutes(1);\n          \n          \n            \n              private static final Duration MINIMUM_SNAPSHOT_PERIOD = Duration.ofMinutes(1);", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395034058", "createdAt": "2020-03-19T13:43:36Z", "author": {"login": "npepinpe"}, "path": "broker/src/main/java/io/zeebe/broker/system/SystemContext.java", "diffHunk": "@@ -25,6 +25,9 @@\n       \"Node id %s needs to be non negative and smaller then cluster size %s.\";\n   private static final String REPLICATION_FACTOR_ERROR_MSG =\n       \"Replication factor %s needs to be larger then zero and not larger then cluster size %s.\";\n+  private static final String SNAPSHOT_PERIOD_ERROR_MSG =\n+      \"Snapshot period %s needs to be larger then or equals to one minute.\";\n+  private static final Duration ONE_MINUTE = Duration.ofMinutes(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODU3MjI0OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzo0NzoxM1rOF4vIHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDozMDo1MFrOF4xHwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzNjcwMA==", "bodyText": "Is this used?", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395036700", "createdAt": "2020-03-19T13:47:13Z", "author": {"login": "npepinpe"}, "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "diffHunk": "@@ -61,6 +67,7 @@ public AsyncSnapshotDirector(\n     this.processorName = streamProcessor.getName();\n     this.snapshotRate = snapshotRate;\n     this.actorName = buildActorName(nodeId, \"SnapshotDirector-\" + logStream.getPartitionId());\n+    this.threadLocalRandom = ThreadLocalRandom.current();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA2OTM3Ng==", "bodyText": "ah probably anymore thanks", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395069376", "createdAt": "2020-03-19T14:30:50Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "diffHunk": "@@ -61,6 +67,7 @@ public AsyncSnapshotDirector(\n     this.processorName = streamProcessor.getName();\n     this.snapshotRate = snapshotRate;\n     this.actorName = buildActorName(nodeId, \"SnapshotDirector-\" + logStream.getPartitionId());\n+    this.threadLocalRandom = ThreadLocalRandom.current();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzNjcwMA=="}, "originalCommit": {"oid": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODU3Nzc2OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzo0ODoyNFrOF4vLyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDozMDozNVrOF4xG7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzNzY0Mg==", "bodyText": "Random question, what's the different with caching runnables as fields vs using the method reference where necessary? I get it when we actually change the values, but in this case they are final. Is this a performance thing?", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395037642", "createdAt": "2020-03-19T13:48:24Z", "author": {"login": "npepinpe"}, "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "diffHunk": "@@ -36,18 +37,23 @@\n   private static final String ERROR_MSG_ENFORCED_SNAPSHOT =\n       \"Unexpected exception occurred on creating snapshot, was enforced to do so.\";\n \n+  private static final Duration ONE_MINUTE = Duration.ofMinutes(1);\n+\n   private final SnapshotController snapshotController;\n   private final LogStream logStream;\n   private final Duration snapshotRate;\n   private final String processorName;\n   private final StreamProcessor streamProcessor;\n+  private final ThreadLocalRandom threadLocalRandom;\n+  private final Runnable prepareTakingSnapshot = this::prepareTakingSnapshot;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA2OTE2Nw==", "bodyText": "Actually I haven't found anything which says it performs better. In the beginning of the project we did this often and here it was also the cases that is way I did it \ud83e\udd37\u200d\u2642\ufe0f", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395069167", "createdAt": "2020-03-19T14:30:35Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "diffHunk": "@@ -36,18 +37,23 @@\n   private static final String ERROR_MSG_ENFORCED_SNAPSHOT =\n       \"Unexpected exception occurred on creating snapshot, was enforced to do so.\";\n \n+  private static final Duration ONE_MINUTE = Duration.ofMinutes(1);\n+\n   private final SnapshotController snapshotController;\n   private final LogStream logStream;\n   private final Duration snapshotRate;\n   private final String processorName;\n   private final StreamProcessor streamProcessor;\n+  private final ThreadLocalRandom threadLocalRandom;\n+  private final Runnable prepareTakingSnapshot = this::prepareTakingSnapshot;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzNzY0Mg=="}, "originalCommit": {"oid": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODU5MjM3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzo1MTozMVrOF4vU7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzo1MTozMVrOF4vU7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAzOTk4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static Duration getRandomDuration(Duration minDuration, Duration maxDuration) {\n          \n          \n            \n              public static Duration getRandomDuration(final Duration minDuration, final Duration maxDuration) {", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395039982", "createdAt": "2020-03-19T13:51:31Z", "author": {"login": "npepinpe"}, "path": "engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+public final class RandomDuration {\n+\n+  public static final Duration ONE_MINUTE = Duration.ofMinutes(1);\n+\n+  private RandomDuration() {}\n+\n+  /**\n+   * Returns a pseudo-random duration between the given minimum and maximum duration.\n+   *\n+   * <p>If the max duration is smaller or equals to the minimum duration, then the minimum duration\n+   * is returned. This ensure to always have a base line or lower limit.\n+   *\n+   * @param minDuration the minimum duration, inclusive\n+   * @param maxDuration the maximum duration, exclusive\n+   * @return a pseudo-random duration between the minimum and maximum duration\n+   */\n+  public static Duration getRandomDuration(Duration minDuration, Duration maxDuration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODU5MzI5OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzo1MTo0NFrOF4vVlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDozMTowNlrOF4xIgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0MDE1MA==", "bodyText": "Is it used?", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395040150", "createdAt": "2020-03-19T13:51:44Z", "author": {"login": "npepinpe"}, "path": "engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+public final class RandomDuration {\n+\n+  public static final Duration ONE_MINUTE = Duration.ofMinutes(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA2OTU2OQ==", "bodyText": "not anymore", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395069569", "createdAt": "2020-03-19T14:31:06Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+public final class RandomDuration {\n+\n+  public static final Duration ONE_MINUTE = Duration.ofMinutes(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0MDE1MA=="}, "originalCommit": {"oid": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODU5NDA3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzo1MTo1OFrOF4vWFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzo1MTo1OFrOF4vWFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0MDI3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final ThreadLocalRandom threadLocalRandom = ThreadLocalRandom.current();\n          \n          \n            \n                final var threadLocalRandom = ThreadLocalRandom.current();", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395040279", "createdAt": "2020-03-19T13:51:58Z", "author": {"login": "npepinpe"}, "path": "engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+public final class RandomDuration {\n+\n+  public static final Duration ONE_MINUTE = Duration.ofMinutes(1);\n+\n+  private RandomDuration() {}\n+\n+  /**\n+   * Returns a pseudo-random duration between the given minimum and maximum duration.\n+   *\n+   * <p>If the max duration is smaller or equals to the minimum duration, then the minimum duration\n+   * is returned. This ensure to always have a base line or lower limit.\n+   *\n+   * @param minDuration the minimum duration, inclusive\n+   * @param maxDuration the maximum duration, exclusive\n+   * @return a pseudo-random duration between the minimum and maximum duration\n+   */\n+  public static Duration getRandomDuration(Duration minDuration, Duration maxDuration) {\n+    if (minDuration.toMillis() >= maxDuration.toMillis()) {\n+      return minDuration;\n+    }\n+\n+    final var maxMilliseconds = maxDuration.minus(minDuration).toMillis();\n+\n+    final ThreadLocalRandom threadLocalRandom = ThreadLocalRandom.current();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODYxMDE4OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzo1NTozMFrOF4vgHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDoxMjoyOFrOF4wPwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0Mjg0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final Duration ONE_MINUTE = Duration.ofMinutes(1);\n          \n          \n            \n              private static final Duration MINIMUM_SNAPSHOT_PERIOD = Duration.ofMinutes(1);\n          \n      \n    \n    \n  \n\nAlthough I can see how we might want to share this with the broker - perhaps make this one public and reuse it in the broker when validating (since we can't have engine -> broker dependency?)", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395042844", "createdAt": "2020-03-19T13:55:30Z", "author": {"login": "npepinpe"}, "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "diffHunk": "@@ -36,18 +37,23 @@\n   private static final String ERROR_MSG_ENFORCED_SNAPSHOT =\n       \"Unexpected exception occurred on creating snapshot, was enforced to do so.\";\n \n+  private static final Duration ONE_MINUTE = Duration.ofMinutes(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1NTA0Mg==", "bodyText": "we can reuse it yes", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395055042", "createdAt": "2020-03-19T14:12:28Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/processor/AsyncSnapshotDirector.java", "diffHunk": "@@ -36,18 +37,23 @@\n   private static final String ERROR_MSG_ENFORCED_SNAPSHOT =\n       \"Unexpected exception occurred on creating snapshot, was enforced to do so.\";\n \n+  private static final Duration ONE_MINUTE = Duration.ofMinutes(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0Mjg0NA=="}, "originalCommit": {"oid": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODY1MzI0OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processor/RandomDurationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowNToyNFrOF4v7xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowNToyNFrOF4v7xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0OTkyNw==", "bodyText": "Is this a case we have?", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395049927", "createdAt": "2020-03-19T14:05:24Z", "author": {"login": "npepinpe"}, "path": "engine/src/test/java/io/zeebe/engine/processor/RandomDurationTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Duration;\n+import org.junit.Test;\n+\n+public class RandomDurationTest {\n+\n+  @Test\n+  public void shouldGetRandomDuration() {\n+    // given\n+    final Duration minDuration = Duration.ofMinutes(1);\n+    final Duration maxDuration = Duration.ofMinutes(10);\n+\n+    // when\n+    final var randomDuration = RandomDuration.getRandomDuration(minDuration, maxDuration);\n+\n+    // then\n+    assertThat(randomDuration).isBetween(minDuration, maxDuration);\n+  }\n+\n+  @Test\n+  public void shouldGetRandomDurationOnNegativeMin() {\n+    // given\n+    final Duration minDuration = Duration.ofMinutes(-1);\n+    final Duration maxDuration = Duration.ofMinutes(10);\n+\n+    // when\n+    final var randomDuration = RandomDuration.getRandomDuration(minDuration, maxDuration);\n+\n+    // then\n+    assertThat(randomDuration).isBetween(minDuration, maxDuration);\n+  }\n+\n+  @Test\n+  public void shouldGetRandomDurationOnNegativeDurations() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODY1OTUxOnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processor/RandomDurationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowNjo1MlrOF4v_3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDozMjo1NFrOF4xOGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDk3Mw==", "bodyText": "Just a thought: as we deal with random values, does it make sense here to test that? e.g. most of these tests would pass if getDuration returned a fixed value.\nAt the same time, the logic is so simple not sure if it's worth it \ud83e\udd37\u200d\u2642\ufe0f :", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395050973", "createdAt": "2020-03-19T14:06:52Z", "author": {"login": "npepinpe"}, "path": "engine/src/test/java/io/zeebe/engine/processor/RandomDurationTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Duration;\n+import org.junit.Test;\n+\n+public class RandomDurationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA3MTAwMA==", "bodyText": "I changed it to minutes based where it might have more logic now and it tests that it is between this given values but yes it is quite simple", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395071000", "createdAt": "2020-03-19T14:32:54Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/processor/RandomDurationTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.time.Duration;\n+import org.junit.Test;\n+\n+public class RandomDurationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDk3Mw=="}, "originalCommit": {"oid": "83af661cc3e8bb2a3b8dcfda9c7ef1a7151d57fc"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTk3MTkzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOToyNzo1MlrOF49RmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOToyNzo1MlrOF49RmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI2ODUwNQ==", "bodyText": "So if snapshotPeriod is one minute, there is no randomization at all, correct? We can iterate on this later if we find it's an issue", "url": "https://github.com/camunda-cloud/zeebe/pull/4069#discussion_r395268505", "createdAt": "2020-03-19T19:27:52Z", "author": {"login": "npepinpe"}, "path": "engine/src/main/java/io/zeebe/engine/processor/RandomDuration.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+public final class RandomDuration {\n+\n+  private RandomDuration() {}\n+\n+  /**\n+   * Returns a pseudo-random duration between the given minimum and maximum duration.\n+   *\n+   * <p>If the max duration is smaller or equals to the minimum duration, then the minimum duration\n+   * is returned. This ensure to always have a base line or lower limit.\n+   *\n+   * <p>The random duration is minute based, so if the given duration differ only in seconds then\n+   * the minimum duration is returned\n+   *\n+   * @param minDuration the minimum duration, inclusive\n+   * @param maxDuration the maximum duration, exclusive\n+   * @return a pseudo-random duration between the minimum and maximum duration\n+   */\n+  public static Duration getRandomDurationMinuteBased(\n+      final Duration minDuration, final Duration maxDuration) {\n+    if (minDuration.toMinutes() >= maxDuration.toMinutes()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13218207dd41618fec344a367d3f2f9576546669"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4924, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}