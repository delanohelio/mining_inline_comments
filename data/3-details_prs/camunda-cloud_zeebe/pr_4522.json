{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3OTQ1NDQz", "number": 4522, "title": "Handle slow brokers in 0.20.2", "bodyText": "Description\n\nIntroduce backpressure on gateway to rate limit requests to slow brokers.\nFix: Do not retry activate jobs if the client connection has already closed\nFix: Update nextPartitionId immediately when a requests is received instead of waiting until request is closed.\n\nRelated issues\nCloses #4521\nPull Request Checklist\n\n All commit messages match our commit message guidelines\n The submitting code follows our code style\n If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-05-14T11:53:52Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4522", "merged": true, "mergeCommit": {"oid": "39e923f5d8b9539c88993130f812960f05e60da3"}, "closed": true, "closedAt": "2020-05-25T09:33:36Z", "author": {"login": "deepthidevaki"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchNDCaAFqTQxMTc1MzMzMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcksX8gABqjMzNjk0NzQwNDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNzUzMzMz", "url": "https://github.com/camunda-cloud/zeebe/pull/4522#pullrequestreview-411753333", "createdAt": "2020-05-14T12:30:10Z", "commit": {"oid": "a1fe75a102502be238a228d0322478a66fe3cae1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjozMDoxMFrOGVZ7zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxMjo1NjoyOVrOGVa5BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTA5ODE4OQ==", "bodyText": "Sorry I guess that was cherry picked from my commit, we should revert that (this file in general)", "url": "https://github.com/camunda-cloud/zeebe/pull/4522#discussion_r425098189", "createdAt": "2020-05-14T12:30:10Z", "author": {"login": "npepinpe"}, "path": "docker/compose/docker-compose.yaml", "diffHunk": "@@ -8,42 +8,45 @@ volumes:\n services:\n \n     broker-1:\n-        image: camunda/zeebe:${ZEEBE_VERSION:-latest}\n+        image: gcr.io/zeebe-io/zeebe:${ZEEBE_VERSION:-latest}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1fe75a102502be238a228d0322478a66fe3cae1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEwMTU1NQ==", "bodyText": "I think dropped should also occur when you get exceptions that are unexpected, if I understood correctly - i.e. could not reach upstream should mark it as dropped, according to the docs. Do we want to do this here? I think at the moment we wouldn't, it would be caught by RuntimeException, and wasDropped would remain false, or...?", "url": "https://github.com/camunda-cloud/zeebe/pull/4522#discussion_r425101555", "createdAt": "2020-05-14T12:36:03Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/impl/broker/BrokerRequestManager.java", "diffHunk": "@@ -170,18 +187,28 @@ private static boolean shouldRetryRequest(final IncomingResponse response) {\n       actor.runOnCompletion(\n           responseFuture,\n           (clientResponse, error) -> {\n+            boolean wasDropped = false;\n+\n             try {\n               if (error == null) {\n                 final BrokerResponse<T> response = request.getResponse(clientResponse);\n                 responseConsumer.accept(response, null);\n               } else {\n                 responseConsumer.accept(null, error);\n+                wasDropped = (error instanceof RequestTimeoutException);\n               }\n             } catch (final RuntimeException e) {\n               responseConsumer.accept(null, new ClientResponseException(e));\n+            } finally {\n+              if (wasDropped) {\n+                limiterListener.onDropped();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1fe75a102502be238a228d0322478a66fe3cae1"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEwMTg3MQ==", "bodyText": "Let's remove the TODO", "url": "https://github.com/camunda-cloud/zeebe/pull/4522#discussion_r425101871", "createdAt": "2020-05-14T12:36:34Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/impl/broker/backpressure/BrokerRequestLimiter.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.impl.broker.backpressure;\n+\n+import com.netflix.concurrency.limits.limiter.AbstractLimiter;\n+import io.zeebe.gateway.impl.broker.request.BrokerExecuteCommand;\n+import io.zeebe.gateway.impl.broker.request.BrokerRequest;\n+import io.zeebe.protocol.record.intent.Intent;\n+import io.zeebe.protocol.record.intent.JobIntent;\n+import java.util.Optional;\n+\n+public final class BrokerRequestLimiter extends AbstractLimiter<BrokerRequest<?>> {\n+\n+  private final BackpressureMetrics metrics = new BackpressureMetrics();\n+  private final int partitionId;\n+\n+  public BrokerRequestLimiter(final AbstractLimiter.Builder<?> builder, final int partitionId) {\n+    super(builder);\n+\n+    this.partitionId = partitionId;\n+    metrics.setInflight(partitionId, 0);\n+    metrics.setNewLimit(partitionId, getLimit());\n+  }\n+\n+  public static Builder newBuilder() {\n+    return new Builder();\n+  }\n+\n+  @Override\n+  public Optional<Listener> acquire(final BrokerRequest<?> request) {\n+    if (!(request instanceof BrokerExecuteCommand)) {\n+      return Optional.of(NoopListener.INSTANCE);\n+    }\n+\n+    // todo: should this include the count of whitelisted commands?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1fe75a102502be238a228d0322478a66fe3cae1"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEwMzg5NA==", "bodyText": "Can we configure the limit via environment variables?", "url": "https://github.com/camunda-cloud/zeebe/pull/4522#discussion_r425103894", "createdAt": "2020-05-14T12:40:12Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/impl/configuration/AIMDCfg.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.impl.configuration;\n+\n+import io.zeebe.util.DurationUtil;\n+import io.zeebe.util.Environment;\n+import java.time.Duration;\n+\n+public class AIMDCfg {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1fe75a102502be238a228d0322478a66fe3cae1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEwNDM5NA==", "bodyText": "Didn't we decide on making the default half of this? e.g. Math.floor(gatewayCfg.getCluster().getRequestTimeout().toMillis(), 2)?", "url": "https://github.com/camunda-cloud/zeebe/pull/4522#discussion_r425104394", "createdAt": "2020-05-14T12:41:04Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/impl/configuration/AIMDCfg.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.impl.configuration;\n+\n+import io.zeebe.util.DurationUtil;\n+import io.zeebe.util.Environment;\n+import java.time.Duration;\n+\n+public class AIMDCfg {\n+\n+  private String requestTimeout;\n+  private int initialLimit = 100;\n+  private int minLimit = 1;\n+  private int maxLimit = 1000;\n+  private double backoffRatio = 0.9;\n+\n+  public Duration getRequestTimeout() {\n+    return DurationUtil.parse(requestTimeout);\n+  }\n+\n+  private AIMDCfg setRequestTimeout(final String requestTimeout) {\n+    this.requestTimeout = requestTimeout;\n+    return this;\n+  }\n+\n+  public int getInitialLimit() {\n+    return initialLimit;\n+  }\n+\n+  public AIMDCfg setInitialLimit(final int initialLimit) {\n+    this.initialLimit = initialLimit;\n+    return this;\n+  }\n+\n+  public int getMinLimit() {\n+    return minLimit;\n+  }\n+\n+  public AIMDCfg setMinLimit(final int minLimit) {\n+    this.minLimit = minLimit;\n+    return this;\n+  }\n+\n+  public int getMaxLimit() {\n+    return maxLimit;\n+  }\n+\n+  public AIMDCfg setMaxLimit(final int maxLimit) {\n+    this.maxLimit = maxLimit;\n+    return this;\n+  }\n+\n+  public double getBackoffRatio() {\n+    return backoffRatio;\n+  }\n+\n+  public AIMDCfg setBackoffRatio(final double backoffRatio) {\n+    this.backoffRatio = backoffRatio;\n+    return this;\n+  }\n+\n+  public void init(final Environment environment, GatewayCfg gatewayCfg) {\n+    if (requestTimeout == null) {\n+      setRequestTimeout(gatewayCfg.getCluster().getRequestTimeout().toMillis() + \"ms\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1fe75a102502be238a228d0322478a66fe3cae1"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEwNDg1NA==", "bodyText": "Did we ever figure out if other exceptions may be thrown that would be transient and would not indicate that we should stop?", "url": "https://github.com/camunda-cloud/zeebe/pull/4522#discussion_r425104854", "createdAt": "2020-05-14T12:41:49Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/impl/job/ActivateJobsHandler.java", "diffHunk": "@@ -75,7 +75,15 @@ private void activateJobs(\n                 ResponseMapper.toActivateJobsResponse(key, response);\n             final int jobsCount = grpcResponse.getJobsCount();\n             if (jobsCount > 0) {\n-              responseObserver.onNext(grpcResponse);\n+              try {\n+                responseObserver.onNext(grpcResponse);\n+              } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1fe75a102502be238a228d0322478a66fe3cae1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEwNTI2Ng==", "bodyText": "Are there any possible downsides to suppressing the exception? Could we miss out on useful information?", "url": "https://github.com/camunda-cloud/zeebe/pull/4522#discussion_r425105266", "createdAt": "2020-05-14T12:42:28Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/impl/job/ActivateJobsHandler.java", "diffHunk": "@@ -97,14 +105,19 @@ private void activateJobs(\n           response -> false);\n     } else {\n       // enough jobs activated or no more partitions left to check\n-      jobTypeToNextPartitionId.put(jobType, partitionIdIterator.getCurrentPartitionId());\n-      responseObserver.onCompleted();\n+      try {\n+        responseObserver.onCompleted();\n+      } catch (Exception e) {\n+        // Cannot close the stream. Nothing to do", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1fe75a102502be238a228d0322478a66fe3cae1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTExMDE3MQ==", "bodyText": "Random realization - shouldn't jobTypeToNextPartitionId be thread-safe? Right now it's just a normal hash map? Or am I missing something? Isn't this handler potentially called from multiple threads?", "url": "https://github.com/camunda-cloud/zeebe/pull/4522#discussion_r425110171", "createdAt": "2020-05-14T12:50:33Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/impl/job/ActivateJobsHandler.java", "diffHunk": "@@ -97,14 +105,19 @@ private void activateJobs(\n           response -> false);\n     } else {\n       // enough jobs activated or no more partitions left to check\n-      jobTypeToNextPartitionId.put(jobType, partitionIdIterator.getCurrentPartitionId());\n-      responseObserver.onCompleted();\n+      try {\n+        responseObserver.onCompleted();\n+      } catch (Exception e) {\n+        // Cannot close the stream. Nothing to do\n+      }\n     }\n   }\n \n   private PartitionIdIterator partitionIdIteratorForType(\n       final String jobType, final int partitionsCount) {\n-    final Integer nextPartitionId = jobTypeToNextPartitionId.computeIfAbsent(jobType, t -> 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1fe75a102502be238a228d0322478a66fe3cae1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTExMDk5Mg==", "bodyText": "Can we use assertThatThrownBy (or whatever the name is) instead of the expected exception?", "url": "https://github.com/camunda-cloud/zeebe/pull/4522#discussion_r425110992", "createdAt": "2020-05-14T12:51:56Z", "author": {"login": "npepinpe"}, "path": "gateway/src/test/java/io/zeebe/gateway/broker/BrokerClientBackPressureTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.broker;\n+\n+import static io.zeebe.protocol.Protocol.START_PARTITION_ID;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import io.atomix.cluster.AtomixCluster;\n+import io.atomix.cluster.ClusterMembershipService;\n+import io.zeebe.gateway.impl.broker.BrokerClient;\n+import io.zeebe.gateway.impl.broker.BrokerClientImpl;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterStateImpl;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerTopologyManagerImpl;\n+import io.zeebe.gateway.impl.broker.request.BrokerActivateJobsRequest;\n+import io.zeebe.gateway.impl.broker.request.BrokerCreateWorkflowInstanceRequest;\n+import io.zeebe.gateway.impl.broker.response.BrokerResponse;\n+import io.zeebe.gateway.impl.configuration.GatewayCfg;\n+import io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceCreationRecord;\n+import io.zeebe.protocol.record.ValueType;\n+import io.zeebe.protocol.record.intent.JobBatchIntent;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceCreationIntent;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.test.broker.protocol.brokerapi.ExecuteCommandResponseBuilder;\n+import io.zeebe.test.broker.protocol.brokerapi.StubBrokerRule;\n+import io.zeebe.test.util.AutoCloseableRule;\n+import io.zeebe.transport.impl.util.SocketUtil;\n+import io.zeebe.util.sched.clock.ControlledActorClock;\n+import java.util.concurrent.ExecutionException;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.rules.TestName;\n+\n+public class BrokerClientBackPressureTest {\n+\n+  private static final int CLIENT_MAX_REQUESTS = 128;\n+  @Rule public StubBrokerRule broker = new StubBrokerRule();\n+  @Rule public AutoCloseableRule closeables = new AutoCloseableRule();\n+  @Rule public ExpectedException exception = ExpectedException.none();\n+  @Rule public TestName testContext = new TestName();\n+  private BrokerClient client;\n+  private ControlledActorClock clock;\n+\n+  @Before\n+  public void setUp() {\n+    final GatewayCfg configuration = new GatewayCfg();\n+    configuration\n+        .getCluster()\n+        .setHost(\"0.0.0.0\")\n+        .setPort(SocketUtil.getNextAddress().port())\n+        .setContactPoint(broker.getSocketAddress().toString())\n+        .setRequestTimeout(\"3s\");\n+    configuration\n+        .getBackpressure()\n+        .setEnabled(true)\n+        .getAimdCfg()\n+        .setInitialLimit(1)\n+        .setMinLimit(1)\n+        .setMaxLimit(1);\n+    clock = new ControlledActorClock();\n+\n+    final AtomixCluster atomixCluster = mock(AtomixCluster.class);\n+    final ClusterMembershipService memberShipService = mock(ClusterMembershipService.class);\n+    when(atomixCluster.getMembershipService()).thenReturn(memberShipService);\n+\n+    client = new BrokerClientImpl(configuration, atomixCluster, clock);\n+\n+    ((BrokerClientImpl) client).getTransport().registerEndpoint(0, broker.getSocketAddress());\n+\n+    final BrokerClusterStateImpl topology = new BrokerClusterStateImpl();\n+    topology.addPartitionIfAbsent(START_PARTITION_ID);\n+    topology.setPartitionLeader(START_PARTITION_ID, 0);\n+\n+    ((BrokerTopologyManagerImpl) client.getTopologyManager()).setTopology(topology);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    client.close();\n+  }\n+\n+  @Test\n+  public void shouldReturnErrorOnBackpressure() {\n+    // given\n+    final BrokerCreateWorkflowInstanceRequest request = new BrokerCreateWorkflowInstanceRequest();\n+    request.setPartitionId(1);\n+    client.sendRequest(request);\n+\n+    // then\n+    exception.expect(ExecutionException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1fe75a102502be238a228d0322478a66fe3cae1"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTExMTcyOA==", "bodyText": "Also aren't we returning a better exception than ExecutionException? In the cause I guess it should be ResourceExhausedException? I'd prefer matching on the exception type than the message, if possible.", "url": "https://github.com/camunda-cloud/zeebe/pull/4522#discussion_r425111728", "createdAt": "2020-05-14T12:52:59Z", "author": {"login": "npepinpe"}, "path": "gateway/src/test/java/io/zeebe/gateway/broker/BrokerClientBackPressureTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.broker;\n+\n+import static io.zeebe.protocol.Protocol.START_PARTITION_ID;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import io.atomix.cluster.AtomixCluster;\n+import io.atomix.cluster.ClusterMembershipService;\n+import io.zeebe.gateway.impl.broker.BrokerClient;\n+import io.zeebe.gateway.impl.broker.BrokerClientImpl;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerClusterStateImpl;\n+import io.zeebe.gateway.impl.broker.cluster.BrokerTopologyManagerImpl;\n+import io.zeebe.gateway.impl.broker.request.BrokerActivateJobsRequest;\n+import io.zeebe.gateway.impl.broker.request.BrokerCreateWorkflowInstanceRequest;\n+import io.zeebe.gateway.impl.broker.response.BrokerResponse;\n+import io.zeebe.gateway.impl.configuration.GatewayCfg;\n+import io.zeebe.protocol.impl.record.value.workflowinstance.WorkflowInstanceCreationRecord;\n+import io.zeebe.protocol.record.ValueType;\n+import io.zeebe.protocol.record.intent.JobBatchIntent;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceCreationIntent;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.test.broker.protocol.brokerapi.ExecuteCommandResponseBuilder;\n+import io.zeebe.test.broker.protocol.brokerapi.StubBrokerRule;\n+import io.zeebe.test.util.AutoCloseableRule;\n+import io.zeebe.transport.impl.util.SocketUtil;\n+import io.zeebe.util.sched.clock.ControlledActorClock;\n+import java.util.concurrent.ExecutionException;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.rules.TestName;\n+\n+public class BrokerClientBackPressureTest {\n+\n+  private static final int CLIENT_MAX_REQUESTS = 128;\n+  @Rule public StubBrokerRule broker = new StubBrokerRule();\n+  @Rule public AutoCloseableRule closeables = new AutoCloseableRule();\n+  @Rule public ExpectedException exception = ExpectedException.none();\n+  @Rule public TestName testContext = new TestName();\n+  private BrokerClient client;\n+  private ControlledActorClock clock;\n+\n+  @Before\n+  public void setUp() {\n+    final GatewayCfg configuration = new GatewayCfg();\n+    configuration\n+        .getCluster()\n+        .setHost(\"0.0.0.0\")\n+        .setPort(SocketUtil.getNextAddress().port())\n+        .setContactPoint(broker.getSocketAddress().toString())\n+        .setRequestTimeout(\"3s\");\n+    configuration\n+        .getBackpressure()\n+        .setEnabled(true)\n+        .getAimdCfg()\n+        .setInitialLimit(1)\n+        .setMinLimit(1)\n+        .setMaxLimit(1);\n+    clock = new ControlledActorClock();\n+\n+    final AtomixCluster atomixCluster = mock(AtomixCluster.class);\n+    final ClusterMembershipService memberShipService = mock(ClusterMembershipService.class);\n+    when(atomixCluster.getMembershipService()).thenReturn(memberShipService);\n+\n+    client = new BrokerClientImpl(configuration, atomixCluster, clock);\n+\n+    ((BrokerClientImpl) client).getTransport().registerEndpoint(0, broker.getSocketAddress());\n+\n+    final BrokerClusterStateImpl topology = new BrokerClusterStateImpl();\n+    topology.addPartitionIfAbsent(START_PARTITION_ID);\n+    topology.setPartitionLeader(START_PARTITION_ID, 0);\n+\n+    ((BrokerTopologyManagerImpl) client.getTopologyManager()).setTopology(topology);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    client.close();\n+  }\n+\n+  @Test\n+  public void shouldReturnErrorOnBackpressure() {\n+    // given\n+    final BrokerCreateWorkflowInstanceRequest request = new BrokerCreateWorkflowInstanceRequest();\n+    request.setPartitionId(1);\n+    client.sendRequest(request);\n+\n+    // then\n+    exception.expect(ExecutionException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTExMDk5Mg=="}, "originalCommit": {"oid": "a1fe75a102502be238a228d0322478a66fe3cae1"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTExMzMwNQ==", "bodyText": "Do we want to disable refresh by default? I guess this wasn't on purpose", "url": "https://github.com/camunda-cloud/zeebe/pull/4522#discussion_r425113305", "createdAt": "2020-05-14T12:55:32Z", "author": {"login": "npepinpe"}, "path": "monitor/grafana/zeebe.json", "diffHunk": "@@ -3247,7 +3363,7 @@\n       \"type\": \"row\"\n     }\n   ],\n-  \"refresh\": \"5s\",\n+  \"refresh\": false,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1fe75a102502be238a228d0322478a66fe3cae1"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTExMzg2MA==", "bodyText": "I initially passed everything out of convenience, can we limit it to what is needed? So backpressure config and request timeout?", "url": "https://github.com/camunda-cloud/zeebe/pull/4522#discussion_r425113860", "createdAt": "2020-05-14T12:56:29Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/impl/broker/backpressure/LimitFactory.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.impl.broker.backpressure;\n+\n+import com.netflix.concurrency.limits.Limit;\n+import com.netflix.concurrency.limits.limit.AIMDLimit;\n+import io.zeebe.gateway.impl.configuration.AIMDCfg;\n+import io.zeebe.gateway.impl.configuration.BackpressureCfg;\n+import io.zeebe.gateway.impl.configuration.BackpressureCfg.LimitAlgorithm;\n+import io.zeebe.gateway.impl.configuration.GatewayCfg;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+\n+public final class LimitFactory {\n+  public Limit ofConfig(final GatewayCfg config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1fe75a102502be238a228d0322478a66fe3cae1"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "814d1cea41b688adc9bc3d21799d288927e129ba", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/814d1cea41b688adc9bc3d21799d288927e129ba", "committedDate": "2020-05-15T06:11:53Z", "message": "chore(gateway): aimd default half of gateway teimout"}, "afterCommit": {"oid": "a5b3b6356510a7bc33a27a2fe570349447946a54", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/a5b3b6356510a7bc33a27a2fe570349447946a54", "committedDate": "2020-05-15T06:31:24Z", "message": "chore(gateway): log error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNDYzMDA5", "url": "https://github.com/camunda-cloud/zeebe/pull/4522#pullrequestreview-412463009", "createdAt": "2020-05-15T08:50:14Z", "commit": {"oid": "d68c64219085979737ec892e310d5440b3dfe3ee"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQwODo1MDoxNFrOGV8INQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxMDowNzowMVrOGV-r-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY1ODQyMQ==", "bodyText": "If a broker is causing a lot of errors, it could be beneficial to also starve it out, no? Though we could do this in further iterations as well \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/4522#discussion_r425658421", "createdAt": "2020-05-15T08:50:14Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/impl/broker/BrokerRequestManager.java", "diffHunk": "@@ -170,18 +187,28 @@ private static boolean shouldRetryRequest(final IncomingResponse response) {\n       actor.runOnCompletion(\n           responseFuture,\n           (clientResponse, error) -> {\n+            boolean wasDropped = false;\n+\n             try {\n               if (error == null) {\n                 final BrokerResponse<T> response = request.getResponse(clientResponse);\n                 responseConsumer.accept(response, null);\n               } else {\n                 responseConsumer.accept(null, error);\n+                wasDropped = (error instanceof RequestTimeoutException);\n               }\n             } catch (final RuntimeException e) {\n               responseConsumer.accept(null, new ClientResponseException(e));\n+            } finally {\n+              if (wasDropped) {\n+                limiterListener.onDropped();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEwMTU1NQ=="}, "originalCommit": {"oid": "a1fe75a102502be238a228d0322478a66fe3cae1"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3NjgxMw==", "bodyText": "Let's keep the env var as they would be in 0.24 to ease upgrading.\nRules are that every _ is a nested level, so zeebe.gateway.backpressure.enabled = ZEEBE_GATEWAY_BACKPRESSURE_ENABLED, but zeebe.gateway.backpressure.aimd.minLimit = ZEEBE_GATEWAY_BACKPRESSURE_AIMD_MINLIMIT. And same for the ones below; it's sufficient to just change the values, the constant names can be whatever.", "url": "https://github.com/camunda-cloud/zeebe/pull/4522#discussion_r425676813", "createdAt": "2020-05-15T09:22:53Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/impl/configuration/EnvironmentConstants.java", "diffHunk": "@@ -22,4 +22,16 @@\n   public static final String ENV_GATEWAY_MONITORING_ENABLED = \"ZEEBE_GATEWAY_MONITORING_ENABLED\";\n   public static final String ENV_GATEWAY_MONITORING_HOST = \"ZEEBE_GATEWAY_MONITORING_HOST\";\n   public static final String ENV_GATEWAY_MONITORING_PORT = \"ZEEBE_GATEWAY_MONITORING_PORT\";\n+  public static final String ENV_GATEWAY_BACKPRESSURE_ENABLED =\n+      \"ZEEBE_GATEWAY_BACKPRESSURE_ENABLED\";\n+  public static final String ENV_GATEWAY_BACKPRESSURE_AIMD_MIN_LIMIT =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ab95469e6ffeca9145041e7c380edc7902a213"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY3NzM1NQ==", "bodyText": "I know it's mostly for testing, but let's stay consistent and also allow configuring it via env var, it's pretty cheap to do so.", "url": "https://github.com/camunda-cloud/zeebe/pull/4522#discussion_r425677355", "createdAt": "2020-05-15T09:23:55Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/impl/configuration/FixedLimitCfg.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.impl.configuration;\n+\n+import io.zeebe.util.Environment;\n+import java.util.Objects;\n+\n+public class FixedLimitCfg {\n+\n+  private int limit = 20;\n+\n+  public int getLimit() {\n+    return limit;\n+  }\n+\n+  public FixedLimitCfg setLimit(final int limit) {\n+    this.limit = limit;\n+    return this;\n+  }\n+\n+  public void init(final Environment environment) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ab95469e6ffeca9145041e7c380edc7902a213"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTY5OTEwOQ==", "bodyText": "So the docs says we should call onError on exception, but also calling on error will throw an exception if the call is already closed? I assume that includes if it was cancelled by the client? That seems...counter intuitive.\nRegardless, if the call was cancelled (which we can know based on the status if there is one), shouldn't we stop trying other partitions?", "url": "https://github.com/camunda-cloud/zeebe/pull/4522#discussion_r425699109", "createdAt": "2020-05-15T10:04:36Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/impl/job/ActivateJobsHandler.java", "diffHunk": "@@ -75,7 +75,15 @@ private void activateJobs(\n                 ResponseMapper.toActivateJobsResponse(key, response);\n             final int jobsCount = grpcResponse.getJobsCount();\n             if (jobsCount > 0) {\n-              responseObserver.onNext(grpcResponse);\n+              try {\n+                responseObserver.onNext(grpcResponse);\n+              } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTEwNDg1NA=="}, "originalCommit": {"oid": "a1fe75a102502be238a228d0322478a66fe3cae1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTcwMDM0NQ==", "bodyText": "Did we confirm this work as expected with the filtering? We could also go for a less modern approach and just create here an array of partitions \ud83e\udd37\u200d\u2642\ufe0f This iterator approach feels a little overblown \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/4522#discussion_r425700345", "createdAt": "2020-05-15T10:07:01Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/impl/job/PartitionIdIterator.java", "diffHunk": "@@ -18,10 +20,20 @@\n   private final OfInt iterator;\n   private int currentPartitionId;\n \n-  public PartitionIdIterator(final int startPartitionId, final int partitionsCount) {\n+  public PartitionIdIterator(\n+      final int startPartitionId,\n+      final int partitionsCount,\n+      final BrokerTopologyManager topologyManager) {\n     iterator =\n         IntStream.range(0, partitionsCount)\n-            .map(index -> ((index + startPartitionId) % partitionsCount) + START_PARTITION_ID)\n+            .map(\n+                index ->\n+                    (index + startPartitionId - START_PARTITION_ID) % partitionsCount\n+                        + START_PARTITION_ID)\n+            .filter(\n+                p ->\n+                    topologyManager.getTopology().getLeaderForPartition(p)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34ab95469e6ffeca9145041e7c380edc7902a213"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa531247d64f6d29150f24ec2c59fe493a937fdf", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/aa531247d64f6d29150f24ec2c59fe493a937fdf", "committedDate": "2020-05-18T13:42:53Z", "message": "chore(gateway): convert resource exhaustion to status"}, "afterCommit": {"oid": "7655c5cf9c5b2bb3a558b656ba6ccf6fc9ebb8fc", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/7655c5cf9c5b2bb3a558b656ba6ccf6fc9ebb8fc", "committedDate": "2020-05-25T07:19:35Z", "message": "chore(gateway): fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NTMyMDk3", "url": "https://github.com/camunda-cloud/zeebe/pull/4522#pullrequestreview-417532097", "createdAt": "2020-05-25T08:05:21Z", "commit": {"oid": "7655c5cf9c5b2bb3a558b656ba6ccf6fc9ebb8fc"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNToyMVrOGZ4bBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwODowNToyMVrOGZ4bBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTc5MjAwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  \"ZEEBE_BROKER_BACKPRESSURE_AIMD_REQUEST_TIMEOUT\";\n          \n          \n            \n                  \"ZEEBE_BROKER_BACKPRESSURE_AIMD_REQUESTTIMEOUT\";", "url": "https://github.com/camunda-cloud/zeebe/pull/4522#discussion_r429792005", "createdAt": "2020-05-25T08:05:21Z", "author": {"login": "npepinpe"}, "path": "broker-core/src/main/java/io/zeebe/broker/system/configuration/EnvironmentConstants.java", "diffHunk": "@@ -33,4 +33,42 @@\n       \"ZEEBE_BROKER_CLUSTER_GOSSIPFAILURETIMEOUT\";\n   public static final String ENV_EXECUTION_METRICS_EXPORTER_ENABLED =\n       \"ZEEBE_BROKER_EXECUTIONMETRICSEXPORTERENABLED\";\n+  public static final String ENV_BACKPRESSURE_ENABLED = \"ZEEBE_BROKER_BACKPRESSURE_ENABLED\";\n+  public static final String ENV_BACKPRESSURE_ALGORITHM = \"ZEEBE_BROKER_BACKPRESSURE_ALGORITHM\";\n+  public static final String ENV_BACKPRESSURE_WINDOWED = \"ZEEBE_BROKER_BACKPRESSURE_USEWINDOWED\";\n+\n+  public static final String ENV_BROKER_BACKPRESSURE_AIMD_BACKOFF_RATIO =\n+      \"ZEEBE_BROKER_BACKPRESSURE_ENABLED\";\n+  public static final String ENV_BROKER_BACKPRESSURE_AIMD_MIN_LIMIT =\n+      \"ZEEBE_BROKER_BACKPRESSURE_AIMD_MINLIMIT\";\n+  public static final String ENV_BROKER_BACKPRESSURE_AIMD_REQUEST_TIMEOUT =\n+      \"ZEEBE_BROKER_BACKPRESSURE_AIMD_REQUEST_TIMEOUT\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7655c5cf9c5b2bb3a558b656ba6ccf6fc9ebb8fc"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2738f376593a774e4727b540e595dba5e7f9b5b6", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/2738f376593a774e4727b540e595dba5e7f9b5b6", "committedDate": "2020-05-25T09:08:25Z", "message": "chore(gateway): add loss based backpressure to gateway"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b456dc8550c3fb0a34a204b8c8c48d4e36842fe7", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/b456dc8550c3fb0a34a204b8c8c48d4e36842fe7", "committedDate": "2020-05-25T09:08:25Z", "message": "chore(gateway): do not activate more jobs if the client connection is closed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f194d4f716242c41802490b768cee2fd6cf513b", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8f194d4f716242c41802490b768cee2fd6cf513b", "committedDate": "2020-05-25T09:08:25Z", "message": "chore(gateway): make partitionid iterator topology aware"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e24ea05aa648f25d1eed09b4727e7017a483058", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/1e24ea05aa648f25d1eed09b4727e7017a483058", "committedDate": "2020-05-25T09:08:25Z", "message": "chore(qa): add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48c9e7e93ed3a776286f3b87ebdf902e19171b79", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/48c9e7e93ed3a776286f3b87ebdf902e19171b79", "committedDate": "2020-05-25T09:08:25Z", "message": "chore(broker): rate limit user requests received by CommandApi handler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62ca3407640ce78439a22141226f2aacb33bf321", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/62ca3407640ce78439a22141226f2aacb33bf321", "committedDate": "2020-05-25T09:08:25Z", "message": "chore(broker): do not drop job complete command due to backpressure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a855ab52b3415cc59835495271d7d9d6a042bb8c", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/a855ab52b3415cc59835495271d7d9d6a042bb8c", "committedDate": "2020-05-25T09:08:25Z", "message": "chore(broker): add config for backpressure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6046c70fbee20ae1397b7eea9511fbe1a289869", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/b6046c70fbee20ae1397b7eea9511fbe1a289869", "committedDate": "2020-05-25T09:08:25Z", "message": "chore(gateway): include broker resource exhausted in gateway backpressure"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "04fac57b36246a87438cf0ad18c64229b703a5fc", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/04fac57b36246a87438cf0ad18c64229b703a5fc", "committedDate": "2020-05-25T08:41:43Z", "message": "chore(broker): Update broker-core/src/main/java/io/zeebe/broker/system/configuration/EnvironmentConstants.java\n\nCo-authored-by: Nicolas Pepin-Perreault <nicolas.pepin-perreault@camunda.com>"}, "afterCommit": {"oid": "b6046c70fbee20ae1397b7eea9511fbe1a289869", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/b6046c70fbee20ae1397b7eea9511fbe1a289869", "committedDate": "2020-05-25T09:08:25Z", "message": "chore(gateway): include broker resource exhausted in gateway backpressure"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2910, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}