{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MzMyNDU0", "number": 5981, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjoyNDoxMVrOFCTJ2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjo1NDoyNFrOFC6Mug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTU1Mjg5OnYy", "diffSide": "RIGHT", "path": "clients/go/pkg/commands/activate_jobs.go", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMjoyNDoxMVrOIBXr6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzozNDo1N1rOIBbzIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMwNzU2MQ==", "bodyText": "I wouldn't add UNAUTHENTICATED since that's coupling the implementation of shouldRetry - plus we already print out the error, so why no just say:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tlog.Printf(\"Failed to reopen job polling stream after UNATHENTICATED error: %v\\n\", err)\n          \n          \n            \n            \t\t\t\tlog.Printf(\"Failed to reopen job polling stream: %v\\n\", err)", "url": "https://github.com/camunda-cloud/zeebe/pull/5981#discussion_r538307561", "createdAt": "2020-12-08T12:24:11Z", "author": {"login": "npepinpe"}, "path": "clients/go/pkg/commands/activate_jobs.go", "diffHunk": "@@ -81,21 +82,26 @@ func (cmd *ActivateJobsCommand) FetchVariables(fetchVariables ...string) Activat\n func (cmd *ActivateJobsCommand) Send(ctx context.Context) ([]entities.Job, error) {\n \tcmd.request.RequestTimeout = getLongPollingMillis(ctx)\n \n-\tstream, err := cmd.gateway.ActivateJobs(ctx, &cmd.request)\n+\tstream, err := cmd.openStream(ctx)\n \tif err != nil {\n-\t\tif cmd.shouldRetry(ctx, err) {\n-\t\t\treturn cmd.Send(ctx)\n-\t\t}\n \t\treturn nil, err\n \t}\n \n \tvar activatedJobs []entities.Job\n-\n \tfor {\n \t\tresponse, err := stream.Recv()\n \t\tif err == io.EOF {\n \t\t\tbreak\n \t\t}\n+\t\tif cmd.shouldRetry(ctx, err) {\n+\t\t\t// the headers are outdated and need to be remade\n+\t\t\tstream, err = cmd.openStream(ctx)\n+\t\t\tif err != nil {\n+\t\t\t\tlog.Printf(\"Failed to reopen job polling stream after UNATHENTICATED error: %v\\n\", err)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf033be794f4178b9002e939ca4835f13384166f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMyMTI3OA==", "bodyText": "Also, maybe a dumb question, but wouldn't the \"standard\" thing be to print errors out on STDERR?", "url": "https://github.com/camunda-cloud/zeebe/pull/5981#discussion_r538321278", "createdAt": "2020-12-08T12:40:29Z", "author": {"login": "npepinpe"}, "path": "clients/go/pkg/commands/activate_jobs.go", "diffHunk": "@@ -81,21 +82,26 @@ func (cmd *ActivateJobsCommand) FetchVariables(fetchVariables ...string) Activat\n func (cmd *ActivateJobsCommand) Send(ctx context.Context) ([]entities.Job, error) {\n \tcmd.request.RequestTimeout = getLongPollingMillis(ctx)\n \n-\tstream, err := cmd.gateway.ActivateJobs(ctx, &cmd.request)\n+\tstream, err := cmd.openStream(ctx)\n \tif err != nil {\n-\t\tif cmd.shouldRetry(ctx, err) {\n-\t\t\treturn cmd.Send(ctx)\n-\t\t}\n \t\treturn nil, err\n \t}\n \n \tvar activatedJobs []entities.Job\n-\n \tfor {\n \t\tresponse, err := stream.Recv()\n \t\tif err == io.EOF {\n \t\t\tbreak\n \t\t}\n+\t\tif cmd.shouldRetry(ctx, err) {\n+\t\t\t// the headers are outdated and need to be remade\n+\t\t\tstream, err = cmd.openStream(ctx)\n+\t\t\tif err != nil {\n+\t\t\t\tlog.Printf(\"Failed to reopen job polling stream after UNATHENTICATED error: %v\\n\", err)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMwNzU2MQ=="}, "originalCommit": {"oid": "bf033be794f4178b9002e939ca4835f13384166f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3NDk0Nw==", "bodyText": "That's what log does by default", "url": "https://github.com/camunda-cloud/zeebe/pull/5981#discussion_r538374947", "createdAt": "2020-12-08T13:34:57Z", "author": {"login": "MiguelPires"}, "path": "clients/go/pkg/commands/activate_jobs.go", "diffHunk": "@@ -81,21 +82,26 @@ func (cmd *ActivateJobsCommand) FetchVariables(fetchVariables ...string) Activat\n func (cmd *ActivateJobsCommand) Send(ctx context.Context) ([]entities.Job, error) {\n \tcmd.request.RequestTimeout = getLongPollingMillis(ctx)\n \n-\tstream, err := cmd.gateway.ActivateJobs(ctx, &cmd.request)\n+\tstream, err := cmd.openStream(ctx)\n \tif err != nil {\n-\t\tif cmd.shouldRetry(ctx, err) {\n-\t\t\treturn cmd.Send(ctx)\n-\t\t}\n \t\treturn nil, err\n \t}\n \n \tvar activatedJobs []entities.Job\n-\n \tfor {\n \t\tresponse, err := stream.Recv()\n \t\tif err == io.EOF {\n \t\t\tbreak\n \t\t}\n+\t\tif cmd.shouldRetry(ctx, err) {\n+\t\t\t// the headers are outdated and need to be remade\n+\t\t\tstream, err = cmd.openStream(ctx)\n+\t\t\tif err != nil {\n+\t\t\t\tlog.Printf(\"Failed to reopen job polling stream after UNATHENTICATED error: %v\\n\", err)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMwNzU2MQ=="}, "originalCommit": {"oid": "bf033be794f4178b9002e939ca4835f13384166f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTc5MTkwOnYy", "diffSide": "RIGHT", "path": "clients/go/pkg/worker/jobPoller.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzowNjozNFrOIBaCng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzowNjozNFrOIBaCng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM0NjE0Mg==", "bodyText": "Why not use errors.Wrapf?", "url": "https://github.com/camunda-cloud/zeebe/pull/5981#discussion_r538346142", "createdAt": "2020-12-08T13:06:34Z", "author": {"login": "npepinpe"}, "path": "clients/go/pkg/worker/jobPoller.go", "diffHunk": "@@ -101,6 +113,18 @@ func (poller *jobPoller) activateJobs() {\n \t}\n }\n \n+func (poller *jobPoller) openStream(ctx context.Context) (pb.Gateway_ActivateJobsClient, error) {\n+\tstream, err := poller.client.ActivateJobs(ctx, poller.request)\n+\tif err != nil {\n+\t\tif poller.shouldRetry(ctx, err) {\n+\t\t\treturn poller.openStream(ctx)\n+\t\t}\n+\t\treturn nil, fmt.Errorf(\"Worker '%s' failed to open job stream due to error: %w\", poller.request.Worker, err)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf033be794f4178b9002e939ca4835f13384166f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTc5ODcwOnYy", "diffSide": "RIGHT", "path": "clients/go/pkg/worker/jobPoller_test.go", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzowNzozNVrOIBaGvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDozNDoyNFrOIBftUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM0NzE5Nw==", "bodyText": "Should we introduce a type as we did for credentials provider? Considering this is then passed in a public function, it would help document its intent.", "url": "https://github.com/camunda-cloud/zeebe/pull/5981#discussion_r538347197", "createdAt": "2020-12-08T13:07:35Z", "author": {"login": "npepinpe"}, "path": "clients/go/pkg/worker/jobPoller_test.go", "diffHunk": "@@ -51,6 +52,7 @@ func (suite *JobPollerSuite) BeforeTest(_, _ string) {\n \t\tcloseSignal:    make(chan struct{}),\n \t\tremaining:      0,\n \t\tthreshold:      int(math.Round(float64(DefaultJobWorkerMaxJobActive) * DefaultJobWorkerPollThreshold)),\n+\t\tshouldRetry:    func(_ context.Context, _ error) bool { return false },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf033be794f4178b9002e939ca4835f13384166f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM4OTYxNw==", "bodyText": "I can change it so it's consistent with the other usage but I'm not sure. It's true that it gives you a small description of what it is but the parameter name does the same. Also, it covers the function signature which you need to implement. Besides, the retryPredicate in the commands package isn't exported so you can't see what it is and how it's documented. Wdyt?", "url": "https://github.com/camunda-cloud/zeebe/pull/5981#discussion_r538389617", "createdAt": "2020-12-08T13:48:55Z", "author": {"login": "MiguelPires"}, "path": "clients/go/pkg/worker/jobPoller_test.go", "diffHunk": "@@ -51,6 +52,7 @@ func (suite *JobPollerSuite) BeforeTest(_, _ string) {\n \t\tcloseSignal:    make(chan struct{}),\n \t\tremaining:      0,\n \t\tthreshold:      int(math.Round(float64(DefaultJobWorkerMaxJobActive) * DefaultJobWorkerPollThreshold)),\n+\t\tshouldRetry:    func(_ context.Context, _ error) bool { return false },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM0NzE5Nw=="}, "originalCommit": {"oid": "bf033be794f4178b9002e939ca4835f13384166f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM5OTEzOA==", "bodyText": "I think it might be ambiguous for users - not exactly what it does, but what should they pass? What should they implement here?", "url": "https://github.com/camunda-cloud/zeebe/pull/5981#discussion_r538399138", "createdAt": "2020-12-08T13:56:28Z", "author": {"login": "npepinpe"}, "path": "clients/go/pkg/worker/jobPoller_test.go", "diffHunk": "@@ -51,6 +52,7 @@ func (suite *JobPollerSuite) BeforeTest(_, _ string) {\n \t\tcloseSignal:    make(chan struct{}),\n \t\tremaining:      0,\n \t\tthreshold:      int(math.Round(float64(DefaultJobWorkerMaxJobActive) * DefaultJobWorkerPollThreshold)),\n+\t\tshouldRetry:    func(_ context.Context, _ error) bool { return false },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM0NzE5Nw=="}, "originalCommit": {"oid": "bf033be794f4178b9002e939ca4835f13384166f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQxMjk1Nw==", "bodyText": "I can change both interfaces to receive a CredentialsProvider (like you said in another comment) since that's an exported and documented interface. It's a breaking change but users are probably not using the New....Command methods directly in the command package", "url": "https://github.com/camunda-cloud/zeebe/pull/5981#discussion_r538412957", "createdAt": "2020-12-08T14:09:41Z", "author": {"login": "MiguelPires"}, "path": "clients/go/pkg/worker/jobPoller_test.go", "diffHunk": "@@ -51,6 +52,7 @@ func (suite *JobPollerSuite) BeforeTest(_, _ string) {\n \t\tcloseSignal:    make(chan struct{}),\n \t\tremaining:      0,\n \t\tthreshold:      int(math.Round(float64(DefaultJobWorkerMaxJobActive) * DefaultJobWorkerPollThreshold)),\n+\t\tshouldRetry:    func(_ context.Context, _ error) bool { return false },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM0NzE5Nw=="}, "originalCommit": {"oid": "bf033be794f4178b9002e939ca4835f13384166f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyNTMwMA==", "bodyText": "Internally I guess we can use the function directly - I guess using CredentialsProvider would only be for the \"public\" stuff anyway. That way it's a little less coupled, but it's maybe a bit clearer to the users what should be passed? I guess the only concern here is that we need to be very specific that it should be the exact same used to configure the pb.GatewayClient, since if they pass another one we wouldn't use the \"auth\" part of it (does that make sense?).\nwdyt of this idea? I feel like this is a better approach from a user pov - though like you said, users probably aren't creating the worker directly \ud83e\udd14\nIf you like the idea then go for it, but if it sounds weird to you then I won't insist, as I'm only 80% sure about it \ud83d\ude09", "url": "https://github.com/camunda-cloud/zeebe/pull/5981#discussion_r538425300", "createdAt": "2020-12-08T14:20:46Z", "author": {"login": "npepinpe"}, "path": "clients/go/pkg/worker/jobPoller_test.go", "diffHunk": "@@ -51,6 +52,7 @@ func (suite *JobPollerSuite) BeforeTest(_, _ string) {\n \t\tcloseSignal:    make(chan struct{}),\n \t\tremaining:      0,\n \t\tthreshold:      int(math.Round(float64(DefaultJobWorkerMaxJobActive) * DefaultJobWorkerPollThreshold)),\n+\t\tshouldRetry:    func(_ context.Context, _ error) bool { return false },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM0NzE5Nw=="}, "originalCommit": {"oid": "bf033be794f4178b9002e939ca4835f13384166f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQzODk5NA==", "bodyText": "Makes sense. It's not ideal but I think is as good as it gets if we want to keep exposing this builder. Imo the underlying issue here is that our API is way too big and exposes unnecessary things", "url": "https://github.com/camunda-cloud/zeebe/pull/5981#discussion_r538438994", "createdAt": "2020-12-08T14:34:24Z", "author": {"login": "MiguelPires"}, "path": "clients/go/pkg/worker/jobPoller_test.go", "diffHunk": "@@ -51,6 +52,7 @@ func (suite *JobPollerSuite) BeforeTest(_, _ string) {\n \t\tcloseSignal:    make(chan struct{}),\n \t\tremaining:      0,\n \t\tthreshold:      int(math.Round(float64(DefaultJobWorkerMaxJobActive) * DefaultJobWorkerPollThreshold)),\n+\t\tshouldRetry:    func(_ context.Context, _ error) bool { return false },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM0NzE5Nw=="}, "originalCommit": {"oid": "bf033be794f4178b9002e939ca4835f13384166f"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTgwODExOnYy", "diffSide": "RIGHT", "path": "clients/go/pkg/worker/jobWorker_builder.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzowOTowOVrOIBaM2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzowOTowOVrOIBaM2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM0ODc2Mw==", "bodyText": "Just realized, we don't document the public API in this package? \ud83e\udd37\u200d\u2642\ufe0f\nDo you think it would make sense to pass here the CredentialsProvider instead? It might make the intent of the predicate clearer, and we could document it as \"you should pass the same credentials provider used when creating the client\" or something.", "url": "https://github.com/camunda-cloud/zeebe/pull/5981#discussion_r538348763", "createdAt": "2020-12-08T13:09:09Z", "author": {"login": "npepinpe"}, "path": "clients/go/pkg/worker/jobWorker_builder.go", "diffHunk": "@@ -190,7 +193,7 @@ func (builder *JobWorkerBuilder) Open() JobWorker {\n \t}\n }\n \n-func NewJobWorkerBuilder(gatewayClient pb.GatewayClient, jobClient JobClient) JobWorkerBuilderStep1 {\n+func NewJobWorkerBuilder(gatewayClient pb.GatewayClient, jobClient JobClient, retryPred func(ctx context.Context, err error) bool) JobWorkerBuilderStep1 {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf033be794f4178b9002e939ca4835f13384166f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTk1MDAyOnYy", "diffSide": "RIGHT", "path": "clients/go/pkg/worker/jobWorker_builder.go", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjo1NDoyNFrOICTLwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxNDowODozN1rOICWalA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI4MjM2OQ==", "bodyText": "Can we give an example usage here?", "url": "https://github.com/camunda-cloud/zeebe/pull/5981#discussion_r539282369", "createdAt": "2020-12-09T12:54:24Z", "author": {"login": "npepinpe"}, "path": "clients/go/pkg/worker/jobWorker_builder.go", "diffHunk": "@@ -190,7 +193,8 @@ func (builder *JobWorkerBuilder) Open() JobWorker {\n \t}\n }\n \n-func NewJobWorkerBuilder(gatewayClient pb.GatewayClient, jobClient JobClient) JobWorkerBuilderStep1 {\n+// NewJobWorkerBuilder should use the same retryPredicate used by the CredentialProvider (ShouldRetry method)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9474af972d2bf4d9dddd439d9260779c536cc8b0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMzMzEwMg==", "bodyText": "In a comment? It's just going to look like straight text, not very readable. Ideally, we'd have example files which help our users see sample usages (good thing to add to the to do list actually)", "url": "https://github.com/camunda-cloud/zeebe/pull/5981#discussion_r539333102", "createdAt": "2020-12-09T14:05:45Z", "author": {"login": "MiguelPires"}, "path": "clients/go/pkg/worker/jobWorker_builder.go", "diffHunk": "@@ -190,7 +193,8 @@ func (builder *JobWorkerBuilder) Open() JobWorker {\n \t}\n }\n \n-func NewJobWorkerBuilder(gatewayClient pb.GatewayClient, jobClient JobClient) JobWorkerBuilderStep1 {\n+// NewJobWorkerBuilder should use the same retryPredicate used by the CredentialProvider (ShouldRetry method)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI4MjM2OQ=="}, "originalCommit": {"oid": "9474af972d2bf4d9dddd439d9260779c536cc8b0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMzNTMxNg==", "bodyText": "I've seen other Go packages put examples in comments. It looks OK-ish, we just keep it short.\nSee for example: https://godoc.org/github.com/aws/aws-sdk-go/aws#Config\n    // Retryer guides how HTTP requests should be retried in case of\n    // recoverable failures.\n    //\n    // When nil or the value does not implement the request.Retryer interface,\n    // the client.DefaultRetryer will be used.\n    //\n    // When both Retryer and MaxRetries are non-nil, the former is used and\n    // the latter ignored.\n    //\n    // To set the Retryer field in a type-safe manner and with chaining, use\n    // the request.WithRetryer helper function:\n    //\n    //   cfg := request.WithRetryer(aws.NewConfig(), myRetryer)\n    //\n    Retryer RequestRetryer", "url": "https://github.com/camunda-cloud/zeebe/pull/5981#discussion_r539335316", "createdAt": "2020-12-09T14:08:37Z", "author": {"login": "npepinpe"}, "path": "clients/go/pkg/worker/jobWorker_builder.go", "diffHunk": "@@ -190,7 +193,8 @@ func (builder *JobWorkerBuilder) Open() JobWorker {\n \t}\n }\n \n-func NewJobWorkerBuilder(gatewayClient pb.GatewayClient, jobClient JobClient) JobWorkerBuilderStep1 {\n+// NewJobWorkerBuilder should use the same retryPredicate used by the CredentialProvider (ShouldRetry method)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI4MjM2OQ=="}, "originalCommit": {"oid": "9474af972d2bf4d9dddd439d9260779c536cc8b0"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 95, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}