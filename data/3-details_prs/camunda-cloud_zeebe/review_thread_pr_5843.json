{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNjAxODE1", "number": 5843, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNzozNjo0MFrOE6bttw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowMDowOVrOE8QSqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzA2OTM1OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/exporter/stream/ExporterContainer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNzozNjo0MFrOH1gbmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTo0MDo0NlrOH2Za5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2NzkzMA==", "bodyText": "This means that on cancel() it would execute actor.runDelayed(delay, task). If not cancelled the task will never get executed. It should be as follows:\n    final var delayedTask = actor.runDelayed(delay, task);\n    return () -> delayedTask.cancel();", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r525867930", "createdAt": "2020-11-18T07:36:40Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/exporter/stream/ExporterContainer.java", "diffHunk": "@@ -114,6 +115,11 @@ public void scheduleTask(final Duration delay, final Runnable task) {\n     actor.runDelayed(delay, task);\n   }\n \n+  @Override\n+  public ScheduledTask scheduleCancellableTask(final Duration delay, final Runnable task) {\n+    return () -> actor.runDelayed(delay, task);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f4fca60119b0bf4c5a8f1d56e9a328452c802e3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwMTYzOQ==", "bodyText": "Done", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r526801639", "createdAt": "2020-11-19T11:40:46Z", "author": {"login": "aivinog1"}, "path": "broker/src/main/java/io/zeebe/broker/exporter/stream/ExporterContainer.java", "diffHunk": "@@ -114,6 +115,11 @@ public void scheduleTask(final Duration delay, final Runnable task) {\n     actor.runDelayed(delay, task);\n   }\n \n+  @Override\n+  public ScheduledTask scheduleCancellableTask(final Duration delay, final Runnable task) {\n+    return () -> actor.runDelayed(delay, task);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2NzkzMA=="}, "originalCommit": {"oid": "4f4fca60119b0bf4c5a8f1d56e9a328452c802e3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzA3MzMxOnYy", "diffSide": "RIGHT", "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/Controller.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNzozODowOFrOH1geCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo0NjowN1rOH50HUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2ODU1NQ==", "bodyText": "Do we need a new method for this? Or just change the return type of scheduleTask?", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r525868555", "createdAt": "2020-11-18T07:38:08Z", "author": {"login": "deepthidevaki"}, "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/Controller.java", "diffHunk": "@@ -34,4 +34,6 @@\n    * @param task the task to run\n    */\n   void scheduleTask(Duration delay, Runnable task);\n+\n+  ScheduledTask scheduleCancellableTask(final Duration delay, final Runnable task);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f4fca60119b0bf4c5a8f1d56e9a328452c802e3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjAwMDA4OQ==", "bodyText": "I'm thinking about backward compatibility in this case because I'm thinking that this is a part of public API or I'm wrong? :)", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r526000089", "createdAt": "2020-11-18T11:05:07Z", "author": {"login": "aivinog1"}, "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/Controller.java", "diffHunk": "@@ -34,4 +34,6 @@\n    * @param task the task to run\n    */\n   void scheduleTask(Duration delay, Runnable task);\n+\n+  ScheduledTask scheduleCancellableTask(final Duration delay, final Runnable task);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2ODU1NQ=="}, "originalCommit": {"oid": "4f4fca60119b0bf4c5a8f1d56e9a328452c802e3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwOTUxNA==", "bodyText": "That's right. It is a public API. Changing return type from void to a non-void object will not break source compatibility - but it will beak binary compatibility. @npepinpe I guess then it will be an issue for external exporters? So we have to keep two different methods with void and non-void return types.", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r528609514", "createdAt": "2020-11-23T10:40:20Z", "author": {"login": "deepthidevaki"}, "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/Controller.java", "diffHunk": "@@ -34,4 +34,6 @@\n    * @param task the task to run\n    */\n   void scheduleTask(Duration delay, Runnable task);\n+\n+  ScheduledTask scheduleCancellableTask(final Duration delay, final Runnable task);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2ODU1NQ=="}, "originalCommit": {"oid": "4f4fca60119b0bf4c5a8f1d56e9a328452c802e3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxMjI0NQ==", "bodyText": "Keep in mind that we don't expect many exporter authors to be implementing their own controller. At most, they might be mocking it. I would still mark the void method as deprecated however so already they start using the new method.", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r528612245", "createdAt": "2020-11-23T10:44:56Z", "author": {"login": "npepinpe"}, "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/Controller.java", "diffHunk": "@@ -34,4 +34,6 @@\n    * @param task the task to run\n    */\n   void scheduleTask(Duration delay, Runnable task);\n+\n+  ScheduledTask scheduleCancellableTask(final Duration delay, final Runnable task);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2ODU1NQ=="}, "originalCommit": {"oid": "4f4fca60119b0bf4c5a8f1d56e9a328452c802e3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4NDcyMA==", "bodyText": "@deepthidevaki Done, I've added a deprecation JavaDoc and annotation", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r530384720", "createdAt": "2020-11-25T13:46:07Z", "author": {"login": "aivinog1"}, "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/Controller.java", "diffHunk": "@@ -34,4 +34,6 @@\n    * @param task the task to run\n    */\n   void scheduleTask(Duration delay, Runnable task);\n+\n+  ScheduledTask scheduleCancellableTask(final Duration delay, final Runnable task);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2ODU1NQ=="}, "originalCommit": {"oid": "4f4fca60119b0bf4c5a8f1d56e9a328452c802e3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzA3NjAwOnYy", "diffSide": "RIGHT", "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/ScheduledTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNzozODo1OFrOH1gfjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTo0MTowMlrOH2ZbdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2ODk0MQ==", "bodyText": "Please add some docs here since this is a public api.", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r525868941", "createdAt": "2020-11-18T07:38:58Z", "author": {"login": "deepthidevaki"}, "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/ScheduledTask.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.exporter.api.context;\n+\n+public interface ScheduledTask {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f4fca60119b0bf4c5a8f1d56e9a328452c802e3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwMTc4MQ==", "bodyText": "Done", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r526801781", "createdAt": "2020-11-19T11:41:02Z", "author": {"login": "aivinog1"}, "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/ScheduledTask.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.exporter.api.context;\n+\n+public interface ScheduledTask {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2ODk0MQ=="}, "originalCommit": {"oid": "4f4fca60119b0bf4c5a8f1d56e9a328452c802e3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NzEwMDg0OnYy", "diffSide": "RIGHT", "path": "test/src/main/java/io/zeebe/test/exporter/MockScheduledTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNzo0NjozOVrOH1gttA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMTo0MTowN1rOH2ZboQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg3MjU2NA==", "bodyText": "Let's keep it simple. I don't think these additional interface and class is required. Instead you can modify the run method as follows:\npublic void run() {\n    if (!wasExecuted() && !isCancelled()) {\n      task.run();\n      executed = true;\n    }\n  }", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r525872564", "createdAt": "2020-11-18T07:46:39Z", "author": {"login": "deepthidevaki"}, "path": "test/src/main/java/io/zeebe/test/exporter/MockScheduledTask.java", "diffHunk": "@@ -52,4 +70,37 @@ public void run() {\n   public boolean wasExecuted() {\n     return executed;\n   }\n+\n+  @Override\n+  public void cancel() {\n+    if (!isCanceled()) {\n+      task.cancel();\n+      canceled = true;\n+    }\n+  }\n+\n+  public boolean isCanceled() {\n+    return canceled;\n+  }\n+\n+  interface ScheduledRunnable extends ScheduledTask, Runnable {}\n+\n+  private static final class DefaultScheduledTask implements ScheduledRunnable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f4fca60119b0bf4c5a8f1d56e9a328452c802e3"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgwMTgyNQ==", "bodyText": "Done", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r526801825", "createdAt": "2020-11-19T11:41:07Z", "author": {"login": "aivinog1"}, "path": "test/src/main/java/io/zeebe/test/exporter/MockScheduledTask.java", "diffHunk": "@@ -52,4 +70,37 @@ public void run() {\n   public boolean wasExecuted() {\n     return executed;\n   }\n+\n+  @Override\n+  public void cancel() {\n+    if (!isCanceled()) {\n+      task.cancel();\n+      canceled = true;\n+    }\n+  }\n+\n+  public boolean isCanceled() {\n+    return canceled;\n+  }\n+\n+  interface ScheduledRunnable extends ScheduledTask, Runnable {}\n+\n+  private static final class DefaultScheduledTask implements ScheduledRunnable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg3MjU2NA=="}, "originalCommit": {"oid": "4f4fca60119b0bf4c5a8f1d56e9a328452c802e3"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjA4NjAzOnYy", "diffSide": "RIGHT", "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/Controller.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDo0MjozM1rOH4QcKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo0MzoyOFrOH50AMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1MTY1Ng==", "bodyText": "Also add documentation here.", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r528751656", "createdAt": "2020-11-23T14:42:33Z", "author": {"login": "deepthidevaki"}, "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/Controller.java", "diffHunk": "@@ -34,4 +34,6 @@\n    * @param task the task to run\n    */\n   void scheduleTask(Duration delay, Runnable task);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "130d0893c8d50b421d7b48e68fcd5cdba095c6af"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4Mjg5Ng==", "bodyText": "Done", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r530382896", "createdAt": "2020-11-25T13:43:28Z", "author": {"login": "aivinog1"}, "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/Controller.java", "diffHunk": "@@ -34,4 +34,6 @@\n    * @param task the task to run\n    */\n   void scheduleTask(Duration delay, Runnable task);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1MTY1Ng=="}, "originalCommit": {"oid": "130d0893c8d50b421d7b48e68fcd5cdba095c6af"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjExNDYxOnYy", "diffSide": "RIGHT", "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/ScheduledTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDo0OTowMlrOH4QuMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo0NToxOVrOH50FTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1NjI3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This interface is used to return a cancellable task from a scheduler.\n          \n          \n            \n             *  Represents a cancellable task.", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r528756272", "createdAt": "2020-11-23T14:49:02Z", "author": {"login": "deepthidevaki"}, "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/ScheduledTask.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.exporter.api.context;\n+\n+import java.time.Duration;\n+\n+/**\n+ * This interface is used to return a cancellable task from a scheduler.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "130d0893c8d50b421d7b48e68fcd5cdba095c6af"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4NDIwNA==", "bodyText": "Done", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r530384204", "createdAt": "2020-11-25T13:45:19Z", "author": {"login": "aivinog1"}, "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/ScheduledTask.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.exporter.api.context;\n+\n+import java.time.Duration;\n+\n+/**\n+ * This interface is used to return a cancellable task from a scheduler.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1NjI3Mg=="}, "originalCommit": {"oid": "130d0893c8d50b421d7b48e68fcd5cdba095c6af"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjEyNDg2OnYy", "diffSide": "RIGHT", "path": "broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDo1MTowOFrOH4Q0dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjowMToxMVrOH5wRPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1Nzg3OA==", "bodyText": "To test this, you don't have to export anything. So you can directly schedule a task on the exporter. No need to schedule it using exporter.onExport.", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r528757878", "createdAt": "2020-11-23T14:51:08Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java", "diffHunk": "@@ -386,6 +387,64 @@ public void shouldExecuteScheduledTask() throws Exception {\n     assertThat(timerTriggerLatch.await(5, TimeUnit.SECONDS)).isTrue();\n   }\n \n+  @Test\n+  public void shouldExecuteScheduledCancellableTask() throws InterruptedException {\n+    // given\n+    final CountDownLatch timerTriggerLatch = new CountDownLatch(1);\n+    final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n+    final Duration delay = Duration.ofSeconds(10);\n+\n+    final ControlledTestExporter exporter = exporters.get(0);\n+    exporter.onExport(\n+        r -> {\n+          exporter.getController().scheduleCancellableTask(delay, timerTriggerLatch::countDown);\n+          timerScheduledLatch.countDown();\n+        });\n+\n+    // when\n+    startExporterDirector(exporterDescriptors);\n+\n+    writeEvent();\n+\n+    timerScheduledLatch.await(5, TimeUnit.SECONDS);\n+\n+    rule.getClock().addTime(delay);\n+\n+    // then\n+    assertThat(timerTriggerLatch.await(5, TimeUnit.SECONDS)).isTrue();\n+  }\n+\n+  @Test\n+  public void shouldCancelScheduledCancellableTask() throws InterruptedException {\n+    // given\n+    final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n+    final Duration delay = Duration.ofSeconds(10);\n+\n+    final var exporter = exporters.get(0);\n+    exporter.onExport(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "130d0893c8d50b421d7b48e68fcd5cdba095c6af"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI3NTQ0Mw==", "bodyText": "@deepthidevaki Well, I'm trying to do this:\nIndex: broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java\nIDEA additional info:\nSubsystem: com.intellij.openapi.diff.impl.patch.CharsetEP\n<+>UTF-8\n===================================================================\n--- broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java\t(revision 130d0893c8d50b421d7b48e68fcd5cdba095c6af)\n+++ broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java\t(date 1606299556914)\n@@ -393,16 +393,15 @@\n     final CountDownLatch timerTriggerLatch = new CountDownLatch(1);\n     final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n     final Duration delay = Duration.ofSeconds(10);\n-\n+    startExporterDirector(exporterDescriptors);\n     final ControlledTestExporter exporter = exporters.get(0);\n-    exporter.onExport(\n-        r -> {\n-          exporter.getController().scheduleCancellableTask(delay, timerTriggerLatch::countDown);\n-          timerScheduledLatch.countDown();\n-        });\n+    verify(exporter, TIMEOUT).open(any());\n \n     // when\n-    startExporterDirector(exporterDescriptors);\n+    exporter\n+        .getController()\n+        .scheduleCancellableTask(delay, timerTriggerLatch::countDown);\n+    timerScheduledLatch.countDown();\n \n     writeEvent();\n \nBut I get this error:\njava.lang.UnsupportedOperationException: Incorrect usage of actor. runDelayed(...): must be called from actor thread\n\n\tat io.zeebe.util.sched.ActorThread.ensureCalledFromActorThread(ActorThread.java:149)\n\tat io.zeebe.util.sched.ActorControl.ensureCalledFromWithinActor(ActorControl.java:403)\n\tat io.zeebe.util.sched.ActorControl.runDelayed(ActorControl.java:174)\n\tat io.zeebe.broker.exporter.stream.ExporterContainer.scheduleCancellableTask(ExporterContainer.java:120)\n\tat io.zeebe.broker.exporter.stream.ExporterDirectorTest.shouldExecuteScheduledCancellableTask(ExporterDirectorTest.java:404)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:54)\n\tat org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:54)\n\tat org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:54)\n\tat org.junit.rules.ExternalResource$1.evaluate(ExternalResource.java:54)\n\tat org.junit.rules.RunRules.evaluate(RunRules.java:20)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)\n\tat org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)\n\tat org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)\n\tat org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:413)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)\n\nDo I do something wrong? \ud83e\udd14", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r530275443", "createdAt": "2020-11-25T10:43:53Z", "author": {"login": "aivinog1"}, "path": "broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java", "diffHunk": "@@ -386,6 +387,64 @@ public void shouldExecuteScheduledTask() throws Exception {\n     assertThat(timerTriggerLatch.await(5, TimeUnit.SECONDS)).isTrue();\n   }\n \n+  @Test\n+  public void shouldExecuteScheduledCancellableTask() throws InterruptedException {\n+    // given\n+    final CountDownLatch timerTriggerLatch = new CountDownLatch(1);\n+    final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n+    final Duration delay = Duration.ofSeconds(10);\n+\n+    final ControlledTestExporter exporter = exporters.get(0);\n+    exporter.onExport(\n+        r -> {\n+          exporter.getController().scheduleCancellableTask(delay, timerTriggerLatch::countDown);\n+          timerScheduledLatch.countDown();\n+        });\n+\n+    // when\n+    startExporterDirector(exporterDescriptors);\n+\n+    writeEvent();\n+\n+    timerScheduledLatch.await(5, TimeUnit.SECONDS);\n+\n+    rule.getClock().addTime(delay);\n+\n+    // then\n+    assertThat(timerTriggerLatch.await(5, TimeUnit.SECONDS)).isTrue();\n+  }\n+\n+  @Test\n+  public void shouldCancelScheduledCancellableTask() throws InterruptedException {\n+    // given\n+    final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n+    final Duration delay = Duration.ofSeconds(10);\n+\n+    final var exporter = exporters.get(0);\n+    exporter.onExport(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1Nzg3OA=="}, "originalCommit": {"oid": "130d0893c8d50b421d7b48e68fcd5cdba095c6af"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMyMTcyNA==", "bodyText": "Oops. My mistake. I think you have to then call it with in exporter.onExport() or exporter.onOpen()", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r530321724", "createdAt": "2020-11-25T12:01:11Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java", "diffHunk": "@@ -386,6 +387,64 @@ public void shouldExecuteScheduledTask() throws Exception {\n     assertThat(timerTriggerLatch.await(5, TimeUnit.SECONDS)).isTrue();\n   }\n \n+  @Test\n+  public void shouldExecuteScheduledCancellableTask() throws InterruptedException {\n+    // given\n+    final CountDownLatch timerTriggerLatch = new CountDownLatch(1);\n+    final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n+    final Duration delay = Duration.ofSeconds(10);\n+\n+    final ControlledTestExporter exporter = exporters.get(0);\n+    exporter.onExport(\n+        r -> {\n+          exporter.getController().scheduleCancellableTask(delay, timerTriggerLatch::countDown);\n+          timerScheduledLatch.countDown();\n+        });\n+\n+    // when\n+    startExporterDirector(exporterDescriptors);\n+\n+    writeEvent();\n+\n+    timerScheduledLatch.await(5, TimeUnit.SECONDS);\n+\n+    rule.getClock().addTime(delay);\n+\n+    // then\n+    assertThat(timerTriggerLatch.await(5, TimeUnit.SECONDS)).isTrue();\n+  }\n+\n+  @Test\n+  public void shouldCancelScheduledCancellableTask() throws InterruptedException {\n+    // given\n+    final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n+    final Duration delay = Duration.ofSeconds(10);\n+\n+    final var exporter = exporters.get(0);\n+    exporter.onExport(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1Nzg3OA=="}, "originalCommit": {"oid": "130d0893c8d50b421d7b48e68fcd5cdba095c6af"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjE2OTM5OnYy", "diffSide": "RIGHT", "path": "broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowMDowOVrOH4RQFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMzo0MTo0M1rOH5z8IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2NDk0OQ==", "bodyText": "Here, we want to verify if the task was actually cancelled. This assert does not ensure that the task was not executed. I I would suggest something similar to following:\nstartExporterDirector(exporterDescriptors);\nvar taskToCancel = exporter.getController().scheduleCancellableTask(delay, // set some value);\nvar taskToExecute = exporter.getController().scheduleCancellableTask(delay,   () -> latch.countdown());\ntaskToCancel.cancel();\n// increase the clock\nrule.getClock().addTime(delay);\n// wait until the second task is executed\nlatch.await(..);\n// Verify the cancelled task is not executed - that is the value is not set", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r528764949", "createdAt": "2020-11-23T15:00:09Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java", "diffHunk": "@@ -386,6 +387,64 @@ public void shouldExecuteScheduledTask() throws Exception {\n     assertThat(timerTriggerLatch.await(5, TimeUnit.SECONDS)).isTrue();\n   }\n \n+  @Test\n+  public void shouldExecuteScheduledCancellableTask() throws InterruptedException {\n+    // given\n+    final CountDownLatch timerTriggerLatch = new CountDownLatch(1);\n+    final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n+    final Duration delay = Duration.ofSeconds(10);\n+\n+    final ControlledTestExporter exporter = exporters.get(0);\n+    exporter.onExport(\n+        r -> {\n+          exporter.getController().scheduleCancellableTask(delay, timerTriggerLatch::countDown);\n+          timerScheduledLatch.countDown();\n+        });\n+\n+    // when\n+    startExporterDirector(exporterDescriptors);\n+\n+    writeEvent();\n+\n+    timerScheduledLatch.await(5, TimeUnit.SECONDS);\n+\n+    rule.getClock().addTime(delay);\n+\n+    // then\n+    assertThat(timerTriggerLatch.await(5, TimeUnit.SECONDS)).isTrue();\n+  }\n+\n+  @Test\n+  public void shouldCancelScheduledCancellableTask() throws InterruptedException {\n+    // given\n+    final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n+    final Duration delay = Duration.ofSeconds(10);\n+\n+    final var exporter = exporters.get(0);\n+    exporter.onExport(\n+        r -> {\n+          final var scheduledTask =\n+              exporter\n+                  .getController()\n+                  .scheduleCancellableTask(\n+                      delay, () -> fail(\"Must not execute this block. Task must be cancelled.\"));\n+          scheduledTask.cancel();\n+          timerScheduledLatch.countDown();\n+        });\n+\n+    // when\n+    startExporterDirector(exporterDescriptors);\n+\n+    writeEvent();\n+\n+    timerScheduledLatch.await(5, TimeUnit.SECONDS);\n+\n+    rule.getClock().addTime(delay);\n+\n+    // then\n+    assertThat(exporter.getExportedRecords()).hasSize(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "130d0893c8d50b421d7b48e68fcd5cdba095c6af"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDM4MTg1Ng==", "bodyText": "Done, considering: #5843 (comment)", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r530381856", "createdAt": "2020-11-25T13:41:43Z", "author": {"login": "aivinog1"}, "path": "broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java", "diffHunk": "@@ -386,6 +387,64 @@ public void shouldExecuteScheduledTask() throws Exception {\n     assertThat(timerTriggerLatch.await(5, TimeUnit.SECONDS)).isTrue();\n   }\n \n+  @Test\n+  public void shouldExecuteScheduledCancellableTask() throws InterruptedException {\n+    // given\n+    final CountDownLatch timerTriggerLatch = new CountDownLatch(1);\n+    final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n+    final Duration delay = Duration.ofSeconds(10);\n+\n+    final ControlledTestExporter exporter = exporters.get(0);\n+    exporter.onExport(\n+        r -> {\n+          exporter.getController().scheduleCancellableTask(delay, timerTriggerLatch::countDown);\n+          timerScheduledLatch.countDown();\n+        });\n+\n+    // when\n+    startExporterDirector(exporterDescriptors);\n+\n+    writeEvent();\n+\n+    timerScheduledLatch.await(5, TimeUnit.SECONDS);\n+\n+    rule.getClock().addTime(delay);\n+\n+    // then\n+    assertThat(timerTriggerLatch.await(5, TimeUnit.SECONDS)).isTrue();\n+  }\n+\n+  @Test\n+  public void shouldCancelScheduledCancellableTask() throws InterruptedException {\n+    // given\n+    final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n+    final Duration delay = Duration.ofSeconds(10);\n+\n+    final var exporter = exporters.get(0);\n+    exporter.onExport(\n+        r -> {\n+          final var scheduledTask =\n+              exporter\n+                  .getController()\n+                  .scheduleCancellableTask(\n+                      delay, () -> fail(\"Must not execute this block. Task must be cancelled.\"));\n+          scheduledTask.cancel();\n+          timerScheduledLatch.countDown();\n+        });\n+\n+    // when\n+    startExporterDirector(exporterDescriptors);\n+\n+    writeEvent();\n+\n+    timerScheduledLatch.await(5, TimeUnit.SECONDS);\n+\n+    rule.getClock().addTime(delay);\n+\n+    // then\n+    assertThat(exporter.getExportedRecords()).hasSize(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2NDk0OQ=="}, "originalCommit": {"oid": "130d0893c8d50b421d7b48e68fcd5cdba095c6af"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 156, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}