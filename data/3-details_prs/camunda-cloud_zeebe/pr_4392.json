{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NjM5MTQy", "number": 4392, "title": "chore(atomix): prevent log inconsistencies", "bodyText": "Description\nAdds a check that prevents older entries from being written to the log.\nRelated issues\ncloses #4153\nPull Request Checklist\n\n All commit messages match our commit message guidelines\n The submitting code follows our code style\n If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-04-27T17:26:21Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4392", "merged": true, "mergeCommit": {"oid": "f0f850d9b59d70a4fe5686b219461d7848f67a09"}, "closed": true, "closedAt": "2020-05-05T21:11:25Z", "author": {"login": "MiguelPires"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccRa-sgFqTQwMjM2MTUzNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABceWkNGABqjMzMDUwMDcwNzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMzYxNTM0", "url": "https://github.com/camunda-cloud/zeebe/pull/4392#pullrequestreview-402361534", "createdAt": "2020-04-29T04:45:21Z", "commit": {"oid": "d09bbe1688d2ed2fc33ef7bfe9d9472fe586a967"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDo0NToyMVrOGNvkpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNDo0Nzo0MFrOGNvmtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2NDEwMA==", "bodyText": "I don't think this reader is advanced to the last entry if you are in LeaderRole.", "url": "https://github.com/camunda-cloud/zeebe/pull/4392#discussion_r417064100", "createdAt": "2020-04-29T04:45:21Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/LeaderRole.java", "diffHunk": "@@ -1441,6 +1448,16 @@ private void safeAppendEntry(\n             });\n   }\n \n+  private boolean isEntryInconsistent(long newEntryPosition) {\n+    final Indexed<RaftLogEntry> indexedEntry = raft.getLogReader().getCurrentEntry();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d09bbe1688d2ed2fc33ef7bfe9d9472fe586a967"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2NDYyOQ==", "bodyText": "This is probably why the test passes. We should find a better way to test it without mocking all of it.", "url": "https://github.com/camunda-cloud/zeebe/pull/4392#discussion_r417064629", "createdAt": "2020-04-29T04:47:40Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/test/java/io/atomix/raft/roles/LeaderRoleTest.java", "diffHunk": "@@ -400,4 +405,46 @@ public void onCommitError(final Indexed<ZeebeEntry> indexed, final Throwable err\n     assertEquals(1, entries.get(0).highestPosition());\n     assertEquals(2, entries.get(1).highestPosition());\n   }\n+\n+  @Test\n+  public void shouldNotAppendInconsistentEntry() throws InterruptedException {\n+    // given\n+    when(writer.append(any(ZeebeEntry.class)))\n+        .then(\n+            i -> {\n+              final ZeebeEntry zeebeEntry = i.getArgument(0);\n+              final Indexed<RaftLogEntry> indexedEntry = new Indexed<>(1, zeebeEntry, 45);\n+              when(reader.getCurrentEntry()).thenReturn(indexedEntry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d09bbe1688d2ed2fc33ef7bfe9d9472fe586a967"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0ODQ2Mzg3", "url": "https://github.com/camunda-cloud/zeebe/pull/4392#pullrequestreview-404846387", "createdAt": "2020-05-04T09:51:47Z", "commit": {"oid": "bf6b9877beb7f4f8c296531b2a8d343a3e22150c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwOTo1MTo0N1rOGP5lgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMTowMDoxN1rOGP7iuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMyNTMxNA==", "bodyText": "Just to be safe, should we also compare the error to expected message or type? It can be that first entry was appended, but fail to commit resulting in an error.", "url": "https://github.com/camunda-cloud/zeebe/pull/4392#discussion_r419325314", "createdAt": "2020-05-04T09:51:47Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/test/java/io/atomix/raft/zeebe/ZeebeLogAppenderTest.java", "diffHunk": "@@ -103,6 +103,23 @@ public void shouldNotifyOnError() {\n     assertEquals(0L, appenderListener.getCommitted().size());\n   }\n \n+  @Test(timeout = 5000)\n+  public void shouldNotAppendInconsistent() {\n+    // given\n+    final ZeebeLogAppender appender = helper.awaitLeaderAppender(1);\n+    final ByteBuffer data = ByteBuffer.allocate(Integer.BYTES).putInt(0, 1);\n+    final Indexed<ZeebeEntry> first = appenderListener.append(appender, 4, 5, data);\n+\n+    // when\n+    appender.appendEntry(5, 5, data, appenderListener);\n+    final Throwable error = appenderListener.pollError();\n+\n+    // then\n+    assertEquals(4, (first.entry().lowestPosition()));\n+    assertEquals(5, (first.entry().highestPosition()));\n+    assertNotNull(error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf6b9877beb7f4f8c296531b2a8d343a3e22150c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTMzNDM0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  long index = raft.getLogWriter().getLastIndex();\n          \n          \n            \n                  long index = raft.getLogWriter().getLastIndex() - 1;", "url": "https://github.com/camunda-cloud/zeebe/pull/4392#discussion_r419334341", "createdAt": "2020-05-04T10:10:19Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/LeaderRole.java", "diffHunk": "@@ -1441,6 +1448,28 @@ private void safeAppendEntry(\n             });\n   }\n \n+  /**\n+   * Returns true if the supplied position is higher than the last ZeebeEntry in the log or if no\n+   * ZeebeEntry was found at all.\n+   */\n+  private boolean isEntryConsistent(long newEntryPosition) {\n+    Indexed<RaftLogEntry> lastEntry = raft.getLogWriter().getLastEntry();\n+\n+    if (lastEntry == null || lastEntry.type() != ZeebeEntry.class) {\n+      long index = raft.getLogWriter().getLastIndex();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf6b9877beb7f4f8c296531b2a8d343a3e22150c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM1NzM2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                latch.await(2, TimeUnit.SECONDS);\n          \n          \n            \n               assertTrue(latch.await(2, TimeUnit.SECONDS));", "url": "https://github.com/camunda-cloud/zeebe/pull/4392#discussion_r419357369", "createdAt": "2020-05-04T11:00:17Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/test/java/io/atomix/raft/zeebe/ZeebeTest.java", "diffHunk": "@@ -258,6 +260,78 @@ public void shouldNotifyCommitListeners() {\n     }\n   }\n \n+  @Test\n+  public void shouldBeConsistentAfterFailOver() {\n+    assumeTrue(nodes.size() > 1);\n+\n+    // given\n+    final int partitionId = 1;\n+    final ZeebeTestNode oldLeader = helper.awaitLeader(partitionId);\n+    final Collection<ZeebeTestNode> followers = new ArrayList<>(nodes);\n+    followers.remove(oldLeader);\n+\n+    // when\n+    final ZeebeLogAppender oldAppender =\n+        oldLeader.getPartitionServer(partitionId).getAppender().orElseThrow();\n+    appenderWrapper.append(oldAppender, 0, 0, ByteBuffer.allocate(Integer.BYTES).putInt(0, 1));\n+\n+    oldLeader.stop().join();\n+    final ZeebeTestNode newLeader = helper.awaitLeader(partitionId, followers);\n+    oldLeader.start(nodes).join();\n+\n+    // then\n+    final ZeebeLogAppender newAppender =\n+        newLeader.getPartitionServer(partitionId).getAppender().orElseThrow();\n+    appenderWrapper.append(newAppender, 1, 1, ByteBuffer.allocate(Integer.BYTES).putInt(0, 1));\n+  }\n+\n+  @Test\n+  public void shouldDetectInconsistencyAfterFailOver() throws InterruptedException {\n+    assumeTrue(nodes.size() > 1);\n+\n+    // given\n+    final int partitionId = 1;\n+    final ZeebeTestNode oldLeader = helper.awaitLeader(partitionId);\n+    final Collection<ZeebeTestNode> followers = new ArrayList<>(nodes);\n+    followers.remove(oldLeader);\n+\n+    // when\n+    final ZeebeLogAppender oldAppender =\n+        oldLeader.getPartitionServer(partitionId).getAppender().orElseThrow();\n+    appenderWrapper.append(oldAppender, 0, 0, ByteBuffer.allocate(Integer.BYTES).putInt(0, 1));\n+\n+    oldLeader.stop().join();\n+    final ZeebeTestNode newLeader = helper.awaitLeader(partitionId, followers);\n+    oldLeader.start(nodes).join();\n+\n+    // then\n+    final ZeebeLogAppender newAppender =\n+        newLeader.getPartitionServer(partitionId).getAppender().orElseThrow();\n+\n+    final CountDownLatch latch = new CountDownLatch(1);\n+    newAppender.appendEntry(\n+        0,\n+        0,\n+        ByteBuffer.allocate(Integer.BYTES).putInt(0, 1),\n+        new AppendListener() {\n+          @Override\n+          public void onWrite(Indexed<ZeebeEntry> indexed) {}\n+\n+          @Override\n+          public void onWriteError(Throwable error) {\n+            latch.countDown();\n+          }\n+\n+          @Override\n+          public void onCommit(Indexed<ZeebeEntry> indexed) {}\n+\n+          @Override\n+          public void onCommitError(Indexed<ZeebeEntry> indexed, Throwable error) {}\n+        });\n+\n+    latch.await(2, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf6b9877beb7f4f8c296531b2a8d343a3e22150c"}, "originalPosition": 89}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bf6b9877beb7f4f8c296531b2a8d343a3e22150c", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/bf6b9877beb7f4f8c296531b2a8d343a3e22150c", "committedDate": "2020-04-29T15:55:58Z", "message": "chore(atomix): find last zeebe entry; new tests"}, "afterCommit": {"oid": "b5bb1c711cfae8e8598a87dce1d731b7a086cdf3", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/b5bb1c711cfae8e8598a87dce1d731b7a086cdf3", "committedDate": "2020-05-04T11:45:55Z", "message": "chore(atomix): minor test adjustments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1ODk0MTU3", "url": "https://github.com/camunda-cloud/zeebe/pull/4392#pullrequestreview-405894157", "createdAt": "2020-05-05T15:20:04Z", "commit": {"oid": "08a0e0e3820ede9e420147802d783a0640e55b32"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6604afd4fa24f67b5169a8a8f5823ec27a1e6c30", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/6604afd4fa24f67b5169a8a8f5823ec27a1e6c30", "committedDate": "2020-05-05T16:20:56Z", "message": "chore(atomix): prevent log inconsistencies"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "08a0e0e3820ede9e420147802d783a0640e55b32", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/08a0e0e3820ede9e420147802d783a0640e55b32", "committedDate": "2020-05-04T15:54:34Z", "message": "chore(atomix): minor optimization"}, "afterCommit": {"oid": "6604afd4fa24f67b5169a8a8f5823ec27a1e6c30", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/6604afd4fa24f67b5169a8a8f5823ec27a1e6c30", "committedDate": "2020-05-05T16:20:56Z", "message": "chore(atomix): prevent log inconsistencies"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2874, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}