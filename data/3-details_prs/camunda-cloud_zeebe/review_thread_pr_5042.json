{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NzkwMTIx", "number": 5042, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo1MDozMlrOERiGwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo1NzoyNlrOERiQww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODIwMDMyOnYy", "diffSide": "RIGHT", "path": "atomix/utils/src/main/java/io/atomix/utils/serializer/FallbackNamespace.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo1MDozMlrOG2THiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzowNToxNFrOG4rUKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4OTUxMw==", "bodyText": "Please rename these variables to 'fallback' and 'default'.", "url": "https://github.com/camunda-cloud/zeebe/pull/5042#discussion_r459589513", "createdAt": "2020-07-23T16:50:32Z", "author": {"login": "pihme"}, "path": "atomix/utils/src/main/java/io/atomix/utils/serializer/FallbackNamespace.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright \u00a9 2020 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.atomix.utils.serializer;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.nio.ByteBuffer;\n+import org.slf4j.Logger;\n+\n+public class FallbackNamespace implements Namespace {\n+\n+  private static final Logger LOG = getLogger(FallbackNamespace.class);\n+  private static final String DESERIALIZE_ERROR =\n+      \"Deserialization failed with both the versioned and legacy serializers. The legacy serializer failed with:\\n %s\";\n+  private final Namespace legacy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4486824b44e518f9c058a3952a88cf1616d5c733"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3NjYzNA==", "bodyText": "default is a Java keyword. Maybe one can be just namespace and the other fallback/fallbackNamespace, does that work for you?", "url": "https://github.com/camunda-cloud/zeebe/pull/5042#discussion_r462076634", "createdAt": "2020-07-29T06:51:30Z", "author": {"login": "MiguelPires"}, "path": "atomix/utils/src/main/java/io/atomix/utils/serializer/FallbackNamespace.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright \u00a9 2020 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.atomix.utils.serializer;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.nio.ByteBuffer;\n+import org.slf4j.Logger;\n+\n+public class FallbackNamespace implements Namespace {\n+\n+  private static final Logger LOG = getLogger(FallbackNamespace.class);\n+  private static final String DESERIALIZE_ERROR =\n+      \"Deserialization failed with both the versioned and legacy serializers. The legacy serializer failed with:\\n %s\";\n+  private final Namespace legacy;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4OTUxMw=="}, "originalCommit": {"oid": "4486824b44e518f9c058a3952a88cf1616d5c733"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4MzExMg==", "bodyText": "Sure", "url": "https://github.com/camunda-cloud/zeebe/pull/5042#discussion_r462083112", "createdAt": "2020-07-29T07:05:14Z", "author": {"login": "pihme"}, "path": "atomix/utils/src/main/java/io/atomix/utils/serializer/FallbackNamespace.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright \u00a9 2020 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.atomix.utils.serializer;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.nio.ByteBuffer;\n+import org.slf4j.Logger;\n+\n+public class FallbackNamespace implements Namespace {\n+\n+  private static final Logger LOG = getLogger(FallbackNamespace.class);\n+  private static final String DESERIALIZE_ERROR =\n+      \"Deserialization failed with both the versioned and legacy serializers. The legacy serializer failed with:\\n %s\";\n+  private final Namespace legacy;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4OTUxMw=="}, "originalCommit": {"oid": "4486824b44e518f9c058a3952a88cf1616d5c733"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODIyNTk1OnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftNamespaces.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo1NzoyNlrOG2TXlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNzowNjozOVrOG4rWpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU5MzYyMQ==", "bodyText": "Question regarding the rolling update:\nLet's say we back port this change to a patch release for 0.24.\nIf we then swap the parameters in the 0.24 release, would that give us a two step rolling upgrade?\n\nWe can upgrade from 0.24.1 to 0.24.2 because the legacy will be the default in the 0.24.2 branch and the new one will be the fallback\nWe can upgrade from 0.24.2 to 0.25 because we then switch default and fallback\n\nWould this work?\nFor cloud it should be ok to make the 0.24 patch release mandatory as they apply the patch releases anyway. Plus it would save them work on the 0.25 upgrade. For other users we would have to tell them about the two step process.", "url": "https://github.com/camunda-cloud/zeebe/pull/5042#discussion_r459593621", "createdAt": "2020-07-23T16:57:26Z", "author": {"login": "pihme"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftNamespaces.java", "diffHunk": "@@ -127,31 +130,40 @@\n    * <p>*Be aware* we use the Void type for replaced/removed types to keep the id's of used types,\n    * otherwise we break compatibility.\n    */\n-  public static final Namespace RAFT_STORAGE =\n-      Namespace.builder()\n-          .register(Namespaces.BASIC)\n-          .nextId(Namespaces.BEGIN_USER_CUSTOM_ID + 100)\n-          .register(Void.class) // CloseSessionEntry\n-          .register(Void.class) // CommandEntry\n-          .register(ConfigurationEntry.class)\n-          .register(InitializeEntry.class)\n-          .register(Void.class) // KeepAliveEntry\n-          .register(Void.class) // MetadataEntry\n-          .register(Void.class) // OpenSessionEntry\n-          .register(Void.class) // QueryEntry\n-          .register(Void.class) // PrimitiveOperation\n-          .register(Void.class) // DefaultOperationId\n-          .register(Void.class) // OperationType\n-          .register(Void.class) // ReadConsistency\n-          .register(ArrayList.class)\n-          .register(HashSet.class)\n-          .register(DefaultRaftMember.class)\n-          .register(MemberId.class)\n-          .register(RaftMember.Type.class)\n-          .register(Instant.class)\n-          .register(Configuration.class)\n-          .register(ZeebeEntry.class)\n-          .build(\"RaftStorage\");\n+  public static final FallbackNamespace RAFT_STORAGE;\n \n   private RaftNamespaces() {}\n+\n+  static {\n+    final Namespace legacy = registerStorageClasses().build(\"RaftStorage\");\n+    final Namespace compatible =\n+        registerStorageClasses().setCompatible(true).build(\"RaftStorage-compatible\");\n+    RAFT_STORAGE = new FallbackNamespace(legacy, compatible);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4486824b44e518f9c058a3952a88cf1616d5c733"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA3MTE1NQ==", "bodyText": "Simply backporting this wouldn't work but we can adjust it slightly to make a two-step upgrade work. Besides allowing brokers to deserialize both versions (which one is the fallback is irrelevant I think), they would still serialize in the \"old\" format (i.e., non-compatible). This way, when upgrading from 0.24.x to 0.24.x+1, the 0.24.x brokers could read 0.24.x+1 messages and the rolling upgrade would work. After that the 0.24.x+1 brokers would be able to accept 0.25 brokers into the cluster, even though these work serialize in the new compatible format.", "url": "https://github.com/camunda-cloud/zeebe/pull/5042#discussion_r462071155", "createdAt": "2020-07-29T06:38:42Z", "author": {"login": "MiguelPires"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftNamespaces.java", "diffHunk": "@@ -127,31 +130,40 @@\n    * <p>*Be aware* we use the Void type for replaced/removed types to keep the id's of used types,\n    * otherwise we break compatibility.\n    */\n-  public static final Namespace RAFT_STORAGE =\n-      Namespace.builder()\n-          .register(Namespaces.BASIC)\n-          .nextId(Namespaces.BEGIN_USER_CUSTOM_ID + 100)\n-          .register(Void.class) // CloseSessionEntry\n-          .register(Void.class) // CommandEntry\n-          .register(ConfigurationEntry.class)\n-          .register(InitializeEntry.class)\n-          .register(Void.class) // KeepAliveEntry\n-          .register(Void.class) // MetadataEntry\n-          .register(Void.class) // OpenSessionEntry\n-          .register(Void.class) // QueryEntry\n-          .register(Void.class) // PrimitiveOperation\n-          .register(Void.class) // DefaultOperationId\n-          .register(Void.class) // OperationType\n-          .register(Void.class) // ReadConsistency\n-          .register(ArrayList.class)\n-          .register(HashSet.class)\n-          .register(DefaultRaftMember.class)\n-          .register(MemberId.class)\n-          .register(RaftMember.Type.class)\n-          .register(Instant.class)\n-          .register(Configuration.class)\n-          .register(ZeebeEntry.class)\n-          .build(\"RaftStorage\");\n+  public static final FallbackNamespace RAFT_STORAGE;\n \n   private RaftNamespaces() {}\n+\n+  static {\n+    final Namespace legacy = registerStorageClasses().build(\"RaftStorage\");\n+    final Namespace compatible =\n+        registerStorageClasses().setCompatible(true).build(\"RaftStorage-compatible\");\n+    RAFT_STORAGE = new FallbackNamespace(legacy, compatible);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU5MzYyMQ=="}, "originalCommit": {"oid": "4486824b44e518f9c058a3952a88cf1616d5c733"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA4Mzc1MQ==", "bodyText": "Sounds good", "url": "https://github.com/camunda-cloud/zeebe/pull/5042#discussion_r462083751", "createdAt": "2020-07-29T07:06:39Z", "author": {"login": "pihme"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftNamespaces.java", "diffHunk": "@@ -127,31 +130,40 @@\n    * <p>*Be aware* we use the Void type for replaced/removed types to keep the id's of used types,\n    * otherwise we break compatibility.\n    */\n-  public static final Namespace RAFT_STORAGE =\n-      Namespace.builder()\n-          .register(Namespaces.BASIC)\n-          .nextId(Namespaces.BEGIN_USER_CUSTOM_ID + 100)\n-          .register(Void.class) // CloseSessionEntry\n-          .register(Void.class) // CommandEntry\n-          .register(ConfigurationEntry.class)\n-          .register(InitializeEntry.class)\n-          .register(Void.class) // KeepAliveEntry\n-          .register(Void.class) // MetadataEntry\n-          .register(Void.class) // OpenSessionEntry\n-          .register(Void.class) // QueryEntry\n-          .register(Void.class) // PrimitiveOperation\n-          .register(Void.class) // DefaultOperationId\n-          .register(Void.class) // OperationType\n-          .register(Void.class) // ReadConsistency\n-          .register(ArrayList.class)\n-          .register(HashSet.class)\n-          .register(DefaultRaftMember.class)\n-          .register(MemberId.class)\n-          .register(RaftMember.Type.class)\n-          .register(Instant.class)\n-          .register(Configuration.class)\n-          .register(ZeebeEntry.class)\n-          .build(\"RaftStorage\");\n+  public static final FallbackNamespace RAFT_STORAGE;\n \n   private RaftNamespaces() {}\n+\n+  static {\n+    final Namespace legacy = registerStorageClasses().build(\"RaftStorage\");\n+    final Namespace compatible =\n+        registerStorageClasses().setCompatible(true).build(\"RaftStorage-compatible\");\n+    RAFT_STORAGE = new FallbackNamespace(legacy, compatible);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU5MzYyMQ=="}, "originalCommit": {"oid": "4486824b44e518f9c058a3952a88cf1616d5c733"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 361, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}