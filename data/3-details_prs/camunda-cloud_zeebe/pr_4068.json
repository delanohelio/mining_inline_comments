{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMjk3Mzgx", "number": 4068, "title": "feat(broker): feel expressions for message correlation keys", "bodyText": "Description\nThis PR enables feel expressions for message correlaton keys. At the same time the ability to use JSON path expressions in message correlation keys was removed.\nRelated issues\ncloses #3806\nPull Request Checklist\n\n[ X ] All commit messages match our commit message guidelines\n[ X ] The submitting code follows our code style\n[ X ] If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-03-18T08:42:35Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4068", "merged": true, "mergeCommit": {"oid": "b8651c2954dcfa07cf53f43f791cd2a3ca83e041"}, "closed": true, "closedAt": "2020-03-20T17:17:39Z", "author": {"login": "pihme"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcO1T2GABqjMxNDA5ODIxMDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPimojgBqjMxNDk4OTU5ODk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7269a0433d8bf6eae9e2f1b67191aca166b4bb94", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/7269a0433d8bf6eae9e2f1b67191aca166b4bb94", "committedDate": "2020-03-17T19:32:59Z", "message": "feat(broker): feel expressions for message correlation keys"}, "afterCommit": {"oid": "c1f4a1b2d99125707f9ac357eebae3276331e32e", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/c1f4a1b2d99125707f9ac357eebae3276331e32e", "committedDate": "2020-03-18T11:07:03Z", "message": "feat(broker): feel expressions for message correlation keys"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NDM3Mjg4", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#pullrequestreview-377437288", "createdAt": "2020-03-19T05:43:58Z", "commit": {"oid": "c1f4a1b2d99125707f9ac357eebae3276331e32e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNTo0Mzo1OFrOF4gyVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODoxNzoxNFrOF4j9RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgwMTc0OQ==", "bodyText": "No need to create a new buffer for every correlation key. The buffer is copied in the calling method extractMessageCorrelationKeys().\nWe can use BufferUtil.wrapString() and put the buffer in extractedCorrelationKeys. wrapString() creates a new buffer of the given string.", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r394801749", "createdAt": "2020-03-19T05:43:58Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java", "diffHunk": "@@ -211,32 +215,16 @@ private boolean unsubscribeFromMessageEvent(\n \n   private DirectBuffer extractCorrelationKey(\n       final ExecutableMessage message, final MessageCorrelationKeyContext context) {\n-    final QueryResults results =\n-        queryProcessor.process(message.getCorrelationKey(), context.getVariablesAsDocument());\n-    final String errorMessage;\n-\n-    if (results.size() == 1) {\n-      final QueryResult result = results.getSingleResult();\n-      if (result.isString()) {\n-        return result.getString();\n-      }\n \n-      if (result.isLong()) {\n-        return result.getLongAsString();\n-      }\n+    final Expression correlationKeyExpression = message.getCorrelationKeyExpression();\n \n-      errorMessage = \"the value must be either a string or a number\";\n-    } else if (results.size() > 1) {\n-      errorMessage = \"multiple values found\";\n-    } else {\n-      errorMessage = \"no value found\";\n-    }\n+    final String correlationKey =\n+        expressionProcessor.evaluateExpression(\n+            correlationKeyExpression,\n+            context.getVariablesScopeKey(),\n+            new CorrelationKeyExtractionResultHandler(context));\n \n-    final String expression = bufferAsString(message.getCorrelationKey().getExpression());\n-    final String failureMessage =\n-        String.format(\n-            \"Failed to extract the correlation-key by '%s': %s\", expression, errorMessage);\n-    throw new MessageCorrelationKeyException(context, failureMessage);\n+    return new UnsafeBuffer(correlationKey.getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1f4a1b2d99125707f9ac357eebae3276331e32e"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgwNDMwMw==", "bodyText": "Why do we have a special failure message if the result is an array?\nDoes it provides more value for the user than the other message The value must be either a string or a number, but was ...?", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r394804303", "createdAt": "2020-03-19T05:53:28Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java", "diffHunk": "@@ -286,4 +274,48 @@ private boolean sendOpenMessageSubscription(\n \n     return extractedCorrelationKeys;\n   }\n+\n+  protected static final class CorrelationKeyExtractionResultHandler\n+      implements ExpressionResultHandler<String> {\n+\n+    private final MessageCorrelationKeyContext context;\n+\n+    protected CorrelationKeyExtractionResultHandler(MessageCorrelationKeyContext context) {\n+      this.context = context;\n+    }\n+\n+    @Override\n+    public String handleEvaluationResult(final EvaluationResult evaluationResult) {\n+      if (evaluationResult.isFailure()) {\n+        throw new MessageCorrelationKeyException(context, evaluationResult.getFailureMessage());\n+      }\n+      if (evaluationResult.getType() == ResultType.STRING) {\n+        return evaluationResult.getString();\n+      } else if (evaluationResult.getType() == ResultType.NUMBER) {\n+\n+        final Number correlationKeyNumber = evaluationResult.getNumber();\n+        if ((correlationKeyNumber instanceof Float) || (correlationKeyNumber instanceof Double)) {\n+          final String failureMessage =\n+              String.format(\n+                  \"Failed to extract the correlation key for '%s'. Value was not an integer: %f\",\n+                  evaluationResult.getExpression(), correlationKeyNumber);\n+          throw new MessageCorrelationKeyException(context, failureMessage);\n+        }\n+\n+        return Long.toString(correlationKeyNumber.longValue());\n+      } else if (evaluationResult.getType() == ResultType.ARRAY) {\n+        final String failureMessage =\n+            String.format(\n+                \"Failed to extract the correlation key for '%s': Array of multiple values found.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1f4a1b2d99125707f9ac357eebae3276331e32e"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgwNzQyOA==", "bodyText": "As of today, this check will never be true. The evaluation result type number is of class BigDecimal.\nI think it is safe to just call evaluationResult.getNumber().longValue().", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r394807428", "createdAt": "2020-03-19T06:04:01Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java", "diffHunk": "@@ -286,4 +274,48 @@ private boolean sendOpenMessageSubscription(\n \n     return extractedCorrelationKeys;\n   }\n+\n+  protected static final class CorrelationKeyExtractionResultHandler\n+      implements ExpressionResultHandler<String> {\n+\n+    private final MessageCorrelationKeyContext context;\n+\n+    protected CorrelationKeyExtractionResultHandler(MessageCorrelationKeyContext context) {\n+      this.context = context;\n+    }\n+\n+    @Override\n+    public String handleEvaluationResult(final EvaluationResult evaluationResult) {\n+      if (evaluationResult.isFailure()) {\n+        throw new MessageCorrelationKeyException(context, evaluationResult.getFailureMessage());\n+      }\n+      if (evaluationResult.getType() == ResultType.STRING) {\n+        return evaluationResult.getString();\n+      } else if (evaluationResult.getType() == ResultType.NUMBER) {\n+\n+        final Number correlationKeyNumber = evaluationResult.getNumber();\n+        if ((correlationKeyNumber instanceof Float) || (correlationKeyNumber instanceof Double)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1f4a1b2d99125707f9ac357eebae3276331e32e"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgwOTY5NA==", "bodyText": "No need to create a new interface. We can use the common interface Function<EvaluationResult, T>.", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r394809694", "createdAt": "2020-03-19T06:13:00Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/ExpressionResultHandler.java", "diffHunk": "@@ -0,0 +1,15 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor.workflow;\n+\n+import io.zeebe.el.EvaluationResult;\n+\n+public interface ExpressionResultHandler<T> {\n+\n+  T handleEvaluationResult(final EvaluationResult evaluationResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1f4a1b2d99125707f9ac357eebae3276331e32e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgyMjY3NQ==", "bodyText": "In addition, we should also verify that no static value is used as a correlation key (e.g. foo). It must be always as expression (e.g. =bar).", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r394822675", "createdAt": "2020-03-19T06:57:58Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeRuntimeValidationTest.java", "diffHunk": "@@ -121,20 +121,20 @@\n         Bpmn.createExecutableProcess(\"process\")\n             .startEvent()\n             .intermediateCatchEvent(\"catch\")\n-            .message(b -> b.name(\"message\").zeebeCorrelationKey(INVALID_PATH_QUERY))\n+            .message(b -> b.name(\"message\").zeebeCorrelationKey(INVALID_EXPRESSION))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1f4a1b2d99125707f9ac357eebae3276331e32e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgyNDU3OA==", "bodyText": "Why do we need to change the default locale?", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r394824578", "createdAt": "2020-03-19T07:03:55Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/CatchEventBehaviorCorrelationKeyExtractionResultHandlerTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor.workflow;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import io.zeebe.el.EvaluationResult;\n+import io.zeebe.el.ResultType;\n+import io.zeebe.engine.processor.workflow.CatchEventBehavior.CorrelationKeyExtractionResultHandler;\n+import io.zeebe.engine.processor.workflow.message.MessageCorrelationKeyContext;\n+import io.zeebe.engine.processor.workflow.message.MessageCorrelationKeyException;\n+import java.util.Locale;\n+import org.assertj.core.api.Assertions;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CatchEventBehaviorCorrelationKeyExtractionResultHandlerTest {\n+\n+  public static final String TEST_EXPRESSION = \"expression\";\n+  @Mock MessageCorrelationKeyContext mockMessageCorrelationKeyContext;\n+\n+  CorrelationKeyExtractionResultHandler sutResultHandler;\n+\n+  Locale defaultLocaleToRestore;\n+\n+  @Before\n+  public void setUp() {\n+    sutResultHandler = new CorrelationKeyExtractionResultHandler(mockMessageCorrelationKeyContext);\n+    defaultLocaleToRestore = Locale.getDefault();\n+    Locale.setDefault(Locale.US);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1f4a1b2d99125707f9ac357eebae3276331e32e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgyNjQ2MA==", "bodyText": "I don't feel comfortable to open this box of pandora (mocking final classes). As far as I see, we don't need to mock the MessageCorrelationKeyContext for this test.", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r394826460", "createdAt": "2020-03-19T07:09:52Z", "author": {"login": "saig0"}, "path": "engine/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker", "diffHunk": "@@ -0,0 +1 @@\n+mock-maker-inline", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1f4a1b2d99125707f9ac357eebae3276331e32e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgzMDk3Mw==", "bodyText": "I'm a bit unsure about the test. I see that it makes sense to verify this behavior in a unit test because writing an integration test is more effort.\nBut the test makes some assumptions about the dependent classes that are not true for the current system. EvaluationResult returns always a BigDecimal instead of an Integer, Double, etc. I think we can reduce the test cases a bit.", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r394830973", "createdAt": "2020-03-19T07:22:44Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/CatchEventBehaviorCorrelationKeyExtractionResultHandlerTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor.workflow;\n+\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import io.zeebe.el.EvaluationResult;\n+import io.zeebe.el.ResultType;\n+import io.zeebe.engine.processor.workflow.CatchEventBehavior.CorrelationKeyExtractionResultHandler;\n+import io.zeebe.engine.processor.workflow.message.MessageCorrelationKeyContext;\n+import io.zeebe.engine.processor.workflow.message.MessageCorrelationKeyException;\n+import java.util.Locale;\n+import org.assertj.core.api.Assertions;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class CatchEventBehaviorCorrelationKeyExtractionResultHandlerTest {\n+\n+  public static final String TEST_EXPRESSION = \"expression\";\n+  @Mock MessageCorrelationKeyContext mockMessageCorrelationKeyContext;\n+\n+  CorrelationKeyExtractionResultHandler sutResultHandler;\n+\n+  Locale defaultLocaleToRestore;\n+\n+  @Before\n+  public void setUp() {\n+    sutResultHandler = new CorrelationKeyExtractionResultHandler(mockMessageCorrelationKeyContext);\n+    defaultLocaleToRestore = Locale.getDefault();\n+    Locale.setDefault(Locale.US);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    Locale.setDefault(defaultLocaleToRestore);\n+  }\n+\n+  @Test\n+  public void shouldReturnStringForStringResult() {\n+    // given\n+    final EvaluationResult mockEvaluationResult = mock(EvaluationResult.class);\n+    when(mockEvaluationResult.getType()).thenReturn(ResultType.STRING);\n+    when(mockEvaluationResult.getString()).thenReturn(\"test string\");\n+\n+    // when\n+    final String actual = sutResultHandler.handleEvaluationResult(mockEvaluationResult);\n+\n+    // then\n+    Assertions.assertThat(actual).isEqualTo(\"test string\");\n+  }\n+\n+  @Test\n+  public void shouldReturnStringForIntegerNumberResult() {\n+    // given\n+    final EvaluationResult mockEvaluationResult = mock(EvaluationResult.class);\n+    when(mockEvaluationResult.getType()).thenReturn(ResultType.NUMBER);\n+    when(mockEvaluationResult.getNumber()).thenReturn(Integer.valueOf(42));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1f4a1b2d99125707f9ac357eebae3276331e32e"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg0NjM3MQ==", "bodyText": "JavaDoc is missing.", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r394846371", "createdAt": "2020-03-19T08:01:20Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/ExpressionProcessor.java", "diffHunk": "@@ -62,32 +65,20 @@ public ExpressionProcessor(\n       final Expression expression, final BpmnStepContext<?> context) {\n \n     return evaluateExpression(\n-        expression, context, ResultType.BOOLEAN, EvaluationResult::getBoolean);\n+        expression,\n+        context.getKey(),\n+        new ExpressionResultTypeVerifyingIncidentRaisingHandler<Boolean>(\n+            ResultType.BOOLEAN, context, EvaluationResult::getBoolean));\n   }\n \n-  private <T> Optional<T> evaluateExpression(\n+  public <T> T evaluateExpression(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1f4a1b2d99125707f9ac357eebae3276331e32e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg1MzcwMA==", "bodyText": "Instead of externalizing the behavior here, we can also create a specific method in ExpressionProcessor. Then all expression related logic (here: extract string or long as string) can be in one place and it is easy to have consistent behavior. What do you think?", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#discussion_r394853700", "createdAt": "2020-03-19T08:17:14Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java", "diffHunk": "@@ -286,4 +274,48 @@ private boolean sendOpenMessageSubscription(\n \n     return extractedCorrelationKeys;\n   }\n+\n+  protected static final class CorrelationKeyExtractionResultHandler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1f4a1b2d99125707f9ac357eebae3276331e32e"}, "originalPosition": 92}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1f4a1b2d99125707f9ac357eebae3276331e32e", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/c1f4a1b2d99125707f9ac357eebae3276331e32e", "committedDate": "2020-03-18T11:07:03Z", "message": "feat(broker): feel expressions for message correlation keys"}, "afterCommit": {"oid": "21b4b8d82890827f26a77800a677bc41c230f30f", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/21b4b8d82890827f26a77800a677bc41c230f30f", "committedDate": "2020-03-20T09:18:23Z", "message": "feat(broker): feel expressions for message correlation keys"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21b4b8d82890827f26a77800a677bc41c230f30f", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/21b4b8d82890827f26a77800a677bc41c230f30f", "committedDate": "2020-03-20T09:18:23Z", "message": "feat(broker): feel expressions for message correlation keys"}, "afterCommit": {"oid": "76441b2aa96e3b7b19a17031ad839f961831d7a9", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/76441b2aa96e3b7b19a17031ad839f961831d7a9", "committedDate": "2020-03-20T14:51:35Z", "message": "feat(broker): feel expressions for message correlation keys"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NTkzNjM1", "url": "https://github.com/camunda-cloud/zeebe/pull/4068#pullrequestreview-378593635", "createdAt": "2020-03-20T15:40:30Z", "commit": {"oid": "76441b2aa96e3b7b19a17031ad839f961831d7a9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49bc7e018c883e918cf35cdf01b2ac65de57465a", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/49bc7e018c883e918cf35cdf01b2ac65de57465a", "committedDate": "2020-03-20T15:52:26Z", "message": "feat(broker): feel expressions for message correlation keys"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76441b2aa96e3b7b19a17031ad839f961831d7a9", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/76441b2aa96e3b7b19a17031ad839f961831d7a9", "committedDate": "2020-03-20T14:51:35Z", "message": "feat(broker): feel expressions for message correlation keys"}, "afterCommit": {"oid": "49bc7e018c883e918cf35cdf01b2ac65de57465a", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/49bc7e018c883e918cf35cdf01b2ac65de57465a", "committedDate": "2020-03-20T15:52:26Z", "message": "feat(broker): feel expressions for message correlation keys"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3073, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}