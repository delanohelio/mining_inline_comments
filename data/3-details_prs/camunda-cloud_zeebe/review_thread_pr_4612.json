{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzOTIxNzYx", "number": 4612, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNTowMDowN1rOEAXBpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNjowNDozNFrOEAXu1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODEyNzEwOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/task/ReceiveTaskProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNTowMDowN1rOGblrSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNTowMDowN1rOGblrSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU4MjAyNA==", "bodyText": "Don't forget to remove the instance \ud83d\ude09\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              }\n          \n          \n            \n                stateBehavior.removeElementInstance(context);  \n          \n          \n            \n              }", "url": "https://github.com/camunda-cloud/zeebe/pull/4612#discussion_r431582024", "createdAt": "2020-05-28T05:00:07Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/task/ReceiveTaskProcessor.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.task;\n+\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.nwe.BpmnElementProcessor;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.behavior.BpmnEventSubscriptionBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnIncidentBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateTransitionBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnVariableMappingBehavior;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableReceiveTask;\n+\n+public final class ReceiveTaskProcessor implements BpmnElementProcessor<ExecutableReceiveTask> {\n+\n+  private final BpmnIncidentBehavior incidentBehavior;\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final BpmnVariableMappingBehavior variableMappingBehavior;\n+  private final BpmnEventSubscriptionBehavior eventSubscriptionBehavior;\n+\n+  public ReceiveTaskProcessor(final BpmnBehaviors behaviors) {\n+    eventSubscriptionBehavior = behaviors.eventSubscriptionBehavior();\n+    incidentBehavior = behaviors.incidentBehavior();\n+    stateBehavior = behaviors.stateBehavior();\n+    stateTransitionBehavior = behaviors.stateTransitionBehavior();\n+    variableMappingBehavior = behaviors.variableMappingBehavior();\n+  }\n+\n+  @Override\n+  public Class<ExecutableReceiveTask> getType() {\n+    return ExecutableReceiveTask.class;\n+  }\n+\n+  @Override\n+  public void onActivating(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    variableMappingBehavior\n+        .applyInputMappings(context, element)\n+        .flatMap(ok -> eventSubscriptionBehavior.subscribeToEvents(element, context))\n+        .ifRightOrLeft(\n+            ok -> stateTransitionBehavior.transitionToActivated(context),\n+            failure -> incidentBehavior.createIncident(failure, context));\n+  }\n+\n+  @Override\n+  public void onActivated(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    // nothing to do here\n+  }\n+\n+  @Override\n+  public void onCompleting(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    variableMappingBehavior\n+        .applyOutputMappings(context, element)\n+        .ifRightOrLeft(\n+            ok -> {\n+              eventSubscriptionBehavior.unsubscribeFromEvents(context);\n+              stateTransitionBehavior.transitionToCompleted(context);\n+            },\n+            failure -> incidentBehavior.createIncident(failure, context));\n+  }\n+\n+  @Override\n+  public void onCompleted(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    stateTransitionBehavior.takeOutgoingSequenceFlows(element, context);\n+    stateBehavior.consumeToken(context);\n+    stateBehavior.removeElementInstance(context);\n+  }\n+\n+  @Override\n+  public void onTerminating(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    eventSubscriptionBehavior.unsubscribeFromEvents(context);\n+    stateTransitionBehavior.transitionToTerminated(context);\n+  }\n+\n+  @Override\n+  public void onTerminated(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    eventSubscriptionBehavior.publishTriggeredBoundaryEvent(context);\n+    incidentBehavior.resolveIncidents(context);\n+    stateTransitionBehavior.onElementTerminated(element, context);\n+    stateBehavior.consumeToken(context);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "793b27e93172279d1aba14e24fc7831e73304101"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODI0Mjc5OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/nwe/task/ReceiveTaskProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNjowNDozNFrOGbmyFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNjowNDozNFrOGbmyFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYwMDE1MQ==", "bodyText": "Looking at triggerBoundaryEvent() and triggerIntermediateEvent(), I have the feeling that transitionToCompleting() can be part of triggerIntermediateEvent(). In case of an interrupting boundary event, the transition is also taken inside the eventSubscriptionBehavior.\nMaybe, we can also combine triggerBoundaryEvent() and triggerIntermediateEvent() in the eventSubscriptionBehavior to peek the event trigger only once.", "url": "https://github.com/camunda-cloud/zeebe/pull/4612#discussion_r431600151", "createdAt": "2020-05-28T06:04:34Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/task/ReceiveTaskProcessor.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.task;\n+\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.nwe.BpmnElementProcessor;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.behavior.BpmnEventSubscriptionBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnIncidentBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateTransitionBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnVariableMappingBehavior;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableReceiveTask;\n+\n+public final class ReceiveTaskProcessor implements BpmnElementProcessor<ExecutableReceiveTask> {\n+\n+  private final BpmnIncidentBehavior incidentBehavior;\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final BpmnVariableMappingBehavior variableMappingBehavior;\n+  private final BpmnEventSubscriptionBehavior eventSubscriptionBehavior;\n+\n+  public ReceiveTaskProcessor(final BpmnBehaviors behaviors) {\n+    eventSubscriptionBehavior = behaviors.eventSubscriptionBehavior();\n+    incidentBehavior = behaviors.incidentBehavior();\n+    stateBehavior = behaviors.stateBehavior();\n+    stateTransitionBehavior = behaviors.stateTransitionBehavior();\n+    variableMappingBehavior = behaviors.variableMappingBehavior();\n+  }\n+\n+  @Override\n+  public Class<ExecutableReceiveTask> getType() {\n+    return ExecutableReceiveTask.class;\n+  }\n+\n+  @Override\n+  public void onActivating(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    variableMappingBehavior\n+        .applyInputMappings(context, element)\n+        .flatMap(ok -> eventSubscriptionBehavior.subscribeToEvents(element, context))\n+        .ifRightOrLeft(\n+            ok -> stateTransitionBehavior.transitionToActivated(context),\n+            failure -> incidentBehavior.createIncident(failure, context));\n+  }\n+\n+  @Override\n+  public void onActivated(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    // nothing to do here\n+  }\n+\n+  @Override\n+  public void onCompleting(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    variableMappingBehavior\n+        .applyOutputMappings(context, element)\n+        .ifRightOrLeft(\n+            ok -> {\n+              eventSubscriptionBehavior.unsubscribeFromEvents(context);\n+              stateTransitionBehavior.transitionToCompleted(context);\n+            },\n+            failure -> incidentBehavior.createIncident(failure, context));\n+  }\n+\n+  @Override\n+  public void onCompleted(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    stateTransitionBehavior.takeOutgoingSequenceFlows(element, context);\n+    stateBehavior.consumeToken(context);\n+    stateBehavior.removeElementInstance(context);\n+  }\n+\n+  @Override\n+  public void onTerminating(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    eventSubscriptionBehavior.unsubscribeFromEvents(context);\n+    stateTransitionBehavior.transitionToTerminated(context);\n+  }\n+\n+  @Override\n+  public void onTerminated(final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    eventSubscriptionBehavior.publishTriggeredBoundaryEvent(context);\n+    incidentBehavior.resolveIncidents(context);\n+    stateTransitionBehavior.onElementTerminated(element, context);\n+    stateBehavior.consumeToken(context);\n+  }\n+\n+  @Override\n+  public void onEventOccurred(\n+      final ExecutableReceiveTask element, final BpmnElementContext context) {\n+    if (eventSubscriptionBehavior.hasBoundaryEventOccurred(element, context)) {\n+      eventSubscriptionBehavior.triggerBoundaryEvent(element, context);\n+    } else {\n+      eventSubscriptionBehavior.triggerIntermediateEvent(context);\n+      stateTransitionBehavior.transitionToCompleting(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "793b27e93172279d1aba14e24fc7831e73304101"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 600, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}