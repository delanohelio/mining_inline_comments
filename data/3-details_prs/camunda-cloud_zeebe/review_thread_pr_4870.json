{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNzM4Mjk0", "number": 4870, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODoxMjozNFrOELKkQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1NToxOFrOELLY-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTQyOTE1OnYy", "diffSide": "RIGHT", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/BrokerLeaderChangeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODoxMjozNFrOGsn0Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1Nzo0OFrOGspNPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ0Mjg3MA==", "bodyText": "Was that sometimes false?", "url": "https://github.com/camunda-cloud/zeebe/pull/4870#discussion_r449442870", "createdAt": "2020-07-03T08:12:34Z", "author": {"login": "npepinpe"}, "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/BrokerLeaderChangeTest.java", "diffHunk": "@@ -82,6 +84,32 @@ public void shouldChangeLeaderAfterLeaderDies() {\n     jobCompleter.close();\n   }\n \n+  @Test\n+  public void shouldBeAbleToBecomeLeaderAgain() {\n+    // given\n+    final var firstLeaderInfo = clusteringRule.getLeaderForPartition(1);\n+    final var firstLeaderNodeId = firstLeaderInfo.getNodeId();\n+    assertThat(clusteringRule.getCurrentLeaderForPartition(1).getNodeId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23a6ad61f4d57278d81fdc2707d5340abb09783"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NTY2Mw==", "bodyText": "No was just to validate that it at the begining the first and then after the loop again - I had hope it makes the test more understanable :D but this failed :D", "url": "https://github.com/camunda-cloud/zeebe/pull/4870#discussion_r449465663", "createdAt": "2020-07-03T08:57:48Z", "author": {"login": "Zelldon"}, "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/BrokerLeaderChangeTest.java", "diffHunk": "@@ -82,6 +84,32 @@ public void shouldChangeLeaderAfterLeaderDies() {\n     jobCompleter.close();\n   }\n \n+  @Test\n+  public void shouldBeAbleToBecomeLeaderAgain() {\n+    // given\n+    final var firstLeaderInfo = clusteringRule.getLeaderForPartition(1);\n+    final var firstLeaderNodeId = firstLeaderInfo.getNodeId();\n+    assertThat(clusteringRule.getCurrentLeaderForPartition(1).getNodeId())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ0Mjg3MA=="}, "originalCommit": {"oid": "d23a6ad61f4d57278d81fdc2707d5340abb09783"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTU2NDA5OnYy", "diffSide": "RIGHT", "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/BrokerLeaderChangeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1NToxOFrOGspIBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODo1NToxOFrOGspIBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ2NDMyNA==", "bodyText": "Can we comment this? It took me a little a bit to figure out what we're doing - double loop to force leader change until the leader is back again to being the first one \ud83d\ude42 Clever though \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/4870#discussion_r449464324", "createdAt": "2020-07-03T08:55:18Z", "author": {"login": "npepinpe"}, "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/clustering/BrokerLeaderChangeTest.java", "diffHunk": "@@ -82,6 +84,32 @@ public void shouldChangeLeaderAfterLeaderDies() {\n     jobCompleter.close();\n   }\n \n+  @Test\n+  public void shouldBeAbleToBecomeLeaderAgain() {\n+    // given\n+    final var firstLeaderInfo = clusteringRule.getLeaderForPartition(1);\n+    final var firstLeaderNodeId = firstLeaderInfo.getNodeId();\n+    assertThat(clusteringRule.getCurrentLeaderForPartition(1).getNodeId())\n+        .isEqualTo(firstLeaderNodeId);\n+\n+    // when\n+    do {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d23a6ad61f4d57278d81fdc2707d5340abb09783"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 424, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}