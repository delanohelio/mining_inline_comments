{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzNDY5NTc1", "number": 5326, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzoxNTo1OFrOEiHDUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjo0MToyNlrOEjccgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjAyNTc5OnYy", "diffSide": "RIGHT", "path": "bpmn-model/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzoxNTo1OFrOHPzB1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMzo1ODoyNFrOHQNbfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMyNjc0Mg==", "bodyText": "Why explicitly only this interface? As I understand it we want to be backwards compatible, so we should change or delete existing interfaces, but we should always be able to add new ones right?", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r486326742", "createdAt": "2020-09-10T13:15:58Z", "author": {"login": "korthout"}, "path": "bpmn-model/pom.xml", "diffHunk": "@@ -57,6 +59,16 @@\n       <plugin>\n         <groupId>org.codehaus.mojo</groupId>\n         <artifactId>clirr-maven-plugin</artifactId>\n+        <configuration>\n+          <ignored>\n+            <ignored>\n+              <!-- ignore new methods in the Zeebe element instance interfaces -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f7dd22e636261f78b015e0a9c6d07c6443cc00"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc1OTI5Mg==", "bodyText": "Adding new methods should be okay. I included only the package io/zeebe/model/bpmn/instance/zeebe because that was the scope that I changed. In the future, we may include other packages. But for now, I would limit it to what we need.", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r486759292", "createdAt": "2020-09-11T03:58:24Z", "author": {"login": "saig0"}, "path": "bpmn-model/pom.xml", "diffHunk": "@@ -57,6 +59,16 @@\n       <plugin>\n         <groupId>org.codehaus.mojo</groupId>\n         <artifactId>clirr-maven-plugin</artifactId>\n+        <configuration>\n+          <ignored>\n+            <ignored>\n+              <!-- ignore new methods in the Zeebe element instance interfaces -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMyNjc0Mg=="}, "originalCommit": {"oid": "28f7dd22e636261f78b015e0a9c6d07c6443cc00"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjExMTU2OnYy", "diffSide": "RIGHT", "path": "docs/src/bpmn-workflows/call-activities/call-activities.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzozNDozOVrOHPz21w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNzo0NjowOVrOHRHvHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0MDMxMQ==", "bodyText": "This behavior can be customized by defining output mappings at the call activity\n\nIs that true? Is the behavior still working for variables that are not defined in the output mapping when there are other output mappings defined and this prop is set to true?", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r486340311", "createdAt": "2020-09-10T13:34:39Z", "author": {"login": "korthout"}, "path": "docs/src/bpmn-workflows/call-activities/call-activities.md", "diffHunk": "@@ -32,9 +32,9 @@ When the call activity is activated then **all variables** of the call activity\n \n Input mappings can be used to create new local variables in the scope of the call activity. These variables are also copied to the created workflow instance.\n \n-By default, all variables of the created workflow instance are propagated to the call activity. This behavior can be customized by defining output mappings at the call activity. The output mappings are applied on completing the call activity.\n-This is especially important in the case of a call activity in a parallel flow to avoid overriding variables (e.g. when it is marked as\n-[parallel multi-instance](/bpmn-workflows/multi-instance/multi-instance.html#variable-mappings)).\n+If the attribute `propagateAllChildVariables` is set (default: `true`) then all variables of the created workflow instance are propagated to the call activity. This behavior can be customized by defining output mappings at the call activity. The output mappings are applied on completing the call activity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f7dd22e636261f78b015e0a9c6d07c6443cc00"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc2MDA3Mg==", "bodyText": "If any output mapping is defined then the mappings are applied and only the variables are propagated that are defined in the mappings.\nDo you have a suggestion on how to make this more clear in the docs?", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r486760072", "createdAt": "2020-09-11T04:01:26Z", "author": {"login": "saig0"}, "path": "docs/src/bpmn-workflows/call-activities/call-activities.md", "diffHunk": "@@ -32,9 +32,9 @@ When the call activity is activated then **all variables** of the call activity\n \n Input mappings can be used to create new local variables in the scope of the call activity. These variables are also copied to the created workflow instance.\n \n-By default, all variables of the created workflow instance are propagated to the call activity. This behavior can be customized by defining output mappings at the call activity. The output mappings are applied on completing the call activity.\n-This is especially important in the case of a call activity in a parallel flow to avoid overriding variables (e.g. when it is marked as\n-[parallel multi-instance](/bpmn-workflows/multi-instance/multi-instance.html#variable-mappings)).\n+If the attribute `propagateAllChildVariables` is set (default: `true`) then all variables of the created workflow instance are propagated to the call activity. This behavior can be customized by defining output mappings at the call activity. The output mappings are applied on completing the call activity.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0MDMxMQ=="}, "originalCommit": {"oid": "28f7dd22e636261f78b015e0a9c6d07c6443cc00"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcxNDU5MA==", "bodyText": "How about something like this: propagation of all variables is ignored when output mapping is defined, output mapping can be used to customize propagation, propagation is applied on completing.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the attribute `propagateAllChildVariables` is set (default: `true`) then all variables of the created workflow instance are propagated to the call activity. This behavior can be customized by defining output mappings at the call activity. The output mappings are applied on completing the call activity.\n          \n          \n            \n            If the attribute `propagateAllChildVariables` is set (default: `true`) then all variables of the created workflow instance are propagated to the call activity. This behavior is ignored when output mappings are defined at the call activity. Output mappings can thus be used to customize which variables are propagated. The variable propagation is applied on completing the call activity.", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r487714590", "createdAt": "2020-09-14T07:46:09Z", "author": {"login": "korthout"}, "path": "docs/src/bpmn-workflows/call-activities/call-activities.md", "diffHunk": "@@ -32,9 +32,9 @@ When the call activity is activated then **all variables** of the call activity\n \n Input mappings can be used to create new local variables in the scope of the call activity. These variables are also copied to the created workflow instance.\n \n-By default, all variables of the created workflow instance are propagated to the call activity. This behavior can be customized by defining output mappings at the call activity. The output mappings are applied on completing the call activity.\n-This is especially important in the case of a call activity in a parallel flow to avoid overriding variables (e.g. when it is marked as\n-[parallel multi-instance](/bpmn-workflows/multi-instance/multi-instance.html#variable-mappings)).\n+If the attribute `propagateAllChildVariables` is set (default: `true`) then all variables of the created workflow instance are propagated to the call activity. This behavior can be customized by defining output mappings at the call activity. The output mappings are applied on completing the call activity.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0MDMxMQ=="}, "originalCommit": {"oid": "28f7dd22e636261f78b015e0a9c6d07c6443cc00"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjEyNjgxOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processing/bpmn/container/CallActivityProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzozNzoyM1rOHP0Apw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNDowMzo1NVrOHQNguA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0MjgyMw==", "bodyText": "I'm not sure this if statement is correct. If there are output mappings, but the new property is disabled, then this would still propagate all temp vars.", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r486342823", "createdAt": "2020-09-10T13:37:23Z", "author": {"login": "korthout"}, "path": "engine/src/main/java/io/zeebe/engine/processing/bpmn/container/CallActivityProcessor.java", "diffHunk": "@@ -136,7 +136,12 @@ public void onChildCompleted(\n     switch (currentState) {\n       case ELEMENT_ACTIVATED:\n         stateTransitionBehavior.transitionToCompleting(callActivityContext);\n-        stateBehavior.propagateTemporaryVariables(childContext, callActivityContext);\n+\n+        if (element.getOutputMappings().isPresent()\n+            || element.isPropagateAllChildVariablesEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f7dd22e636261f78b015e0a9c6d07c6443cc00"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc2MDYzMg==", "bodyText": "Yes, it is correct \ud83d\ude05  We need to set the temp variables to apply the output mappings on completing the call activity. Since this is done in another step (i.e. when processing another record), we need to copy all variables to temp.", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r486760632", "createdAt": "2020-09-11T04:03:55Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processing/bpmn/container/CallActivityProcessor.java", "diffHunk": "@@ -136,7 +136,12 @@ public void onChildCompleted(\n     switch (currentState) {\n       case ELEMENT_ACTIVATED:\n         stateTransitionBehavior.transitionToCompleting(callActivityContext);\n-        stateBehavior.propagateTemporaryVariables(childContext, callActivityContext);\n+\n+        if (element.getOutputMappings().isPresent()\n+            || element.isPropagateAllChildVariablesEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0MjgyMw=="}, "originalCommit": {"oid": "28f7dd22e636261f78b015e0a9c6d07c6443cc00"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjEzNzQzOnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processing/bpmn/activity/CallActivityTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzozODo1OFrOHP0H6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQwNzo0Nzo1N1rOHRHzBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0NDY4Mg==", "bodyText": "Would be good to add a test case for the following cases:\n\npropagateAllChildVariables = false && no output mappings\npropagateAllChildVariables = false && output mappings\npropagateAllChildVariables = true && no output mappings\npropagateAllChildVariables = true && output mappings", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r486344682", "createdAt": "2020-09-10T13:38:58Z", "author": {"login": "korthout"}, "path": "engine/src/test/java/io/zeebe/engine/processing/bpmn/activity/CallActivityTest.java", "diffHunk": "@@ -222,6 +222,34 @@ public void shouldPropagateVariablesToParent() {\n         .containsExactly(tuple(workflowInstanceKey, \"y\", \"2\"));\n   }\n \n+  @Test\n+  public void shouldNotPropagateVariablesToParentIfDisabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f7dd22e636261f78b015e0a9c6d07c6443cc00"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc2MjI3Mw==", "bodyText": "The cases are almost covered by the following tests:\n\npropagateAllChildVariables = false && no output mappings -> shouldNotPropagateVariablesToParentIfDisabled\npropagateAllChildVariables = false && output mappings -> behaves like  shouldApplyOutputMappings but we can add an additional test\npropagateAllChildVariables = true && no output mappings -> shouldPropagateVariablesToParent\npropagateAllChildVariables = true && output mappings -> shouldApplyOutputMappings", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r486762273", "createdAt": "2020-09-11T04:11:03Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processing/bpmn/activity/CallActivityTest.java", "diffHunk": "@@ -222,6 +222,34 @@ public void shouldPropagateVariablesToParent() {\n         .containsExactly(tuple(workflowInstanceKey, \"y\", \"2\"));\n   }\n \n+  @Test\n+  public void shouldNotPropagateVariablesToParentIfDisabled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0NDY4Mg=="}, "originalCommit": {"oid": "28f7dd22e636261f78b015e0a9c6d07c6443cc00"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzcxNTU4OA==", "bodyText": "Sorry, I did not look at the existing tests only at new code. I think it is fine like this, although I'm also fine if you add the \"propagateAllChildVariables = false && output mappings\" case explicitly.", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r487715588", "createdAt": "2020-09-14T07:47:57Z", "author": {"login": "korthout"}, "path": "engine/src/test/java/io/zeebe/engine/processing/bpmn/activity/CallActivityTest.java", "diffHunk": "@@ -222,6 +222,34 @@ public void shouldPropagateVariablesToParent() {\n         .containsExactly(tuple(workflowInstanceKey, \"y\", \"2\"));\n   }\n \n+  @Test\n+  public void shouldNotPropagateVariablesToParentIfDisabled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0NDY4Mg=="}, "originalCommit": {"oid": "28f7dd22e636261f78b015e0a9c6d07c6443cc00"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjE4Mjc0OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processing/bpmn/multiinstance/MultiInstanceCallActivityTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzo0NjowOFrOHP0msA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwNDowNDoyOVrOHQNhKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM1MjU2MA==", "bodyText": "It might be better to use INPUT_COLLECTION.size() instead of jobCounter.get(), to make the expected part less 'dynamic'.", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r486352560", "createdAt": "2020-09-10T13:46:08Z", "author": {"login": "korthout"}, "path": "engine/src/test/java/io/zeebe/engine/processing/bpmn/multiinstance/MultiInstanceCallActivityTest.java", "diffHunk": "@@ -185,6 +195,68 @@ public void shouldCancelChildInstancesOnTermination() {\n             BpmnElementType.PROCESS);\n   }\n \n+  @Test\n+  public void shouldCollectOutputFromChildInstance() {\n+    // given\n+    final BpmnModelInstance parentWorkflow =\n+        parentWorkflowWithCallActivity(\n+            callActivity ->\n+                callActivity\n+                    .zeebeOutputExpression(\"x\", \"result\")\n+                    .multiInstance(\n+                        b ->\n+                            b.zeebeInputCollectionExpression(INPUT_COLLECTION_VARIABLE)\n+                                .zeebeOutputElementExpression(\"result\")\n+                                .zeebeOutputCollection(\"results\")));\n+\n+    ENGINE.deployment().withXmlResource(\"wf-parent.bpmn\", parentWorkflow).deploy();\n+\n+    final long workflowInstanceKey =\n+        ENGINE\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID_PARENT)\n+            .withVariable(INPUT_COLLECTION_VARIABLE, INPUT_COLLECTION)\n+            .create();\n+\n+    // when\n+    awaitJobsCreated(INPUT_COLLECTION.size());\n+\n+    final var jobCounter = new AtomicInteger();\n+\n+    ENGINE\n+        .jobs()\n+        .withType(jobType)\n+        .activate()\n+        .getValue()\n+        .getJobKeys()\n+        .forEach(\n+            jobKey ->\n+                ENGINE\n+                    .job()\n+                    .withKey(jobKey)\n+                    .withVariable(\"x\", jobCounter.incrementAndGet())\n+                    .complete());\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.MULTI_INSTANCE_BODY)\n+        .await();\n+\n+    // then\n+    final var expectedOutputCollection =\n+        JsonUtil.toJson(\n+            IntStream.rangeClosed(1, jobCounter.get()).boxed().collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f7dd22e636261f78b015e0a9c6d07c6443cc00"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njc2MDc0Ng==", "bodyText": "Ok \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r486760746", "createdAt": "2020-09-11T04:04:29Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processing/bpmn/multiinstance/MultiInstanceCallActivityTest.java", "diffHunk": "@@ -185,6 +195,68 @@ public void shouldCancelChildInstancesOnTermination() {\n             BpmnElementType.PROCESS);\n   }\n \n+  @Test\n+  public void shouldCollectOutputFromChildInstance() {\n+    // given\n+    final BpmnModelInstance parentWorkflow =\n+        parentWorkflowWithCallActivity(\n+            callActivity ->\n+                callActivity\n+                    .zeebeOutputExpression(\"x\", \"result\")\n+                    .multiInstance(\n+                        b ->\n+                            b.zeebeInputCollectionExpression(INPUT_COLLECTION_VARIABLE)\n+                                .zeebeOutputElementExpression(\"result\")\n+                                .zeebeOutputCollection(\"results\")));\n+\n+    ENGINE.deployment().withXmlResource(\"wf-parent.bpmn\", parentWorkflow).deploy();\n+\n+    final long workflowInstanceKey =\n+        ENGINE\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID_PARENT)\n+            .withVariable(INPUT_COLLECTION_VARIABLE, INPUT_COLLECTION)\n+            .create();\n+\n+    // when\n+    awaitJobsCreated(INPUT_COLLECTION.size());\n+\n+    final var jobCounter = new AtomicInteger();\n+\n+    ENGINE\n+        .jobs()\n+        .withType(jobType)\n+        .activate()\n+        .getValue()\n+        .getJobKeys()\n+        .forEach(\n+            jobKey ->\n+                ENGINE\n+                    .job()\n+                    .withKey(jobKey)\n+                    .withVariable(\"x\", jobCounter.incrementAndGet())\n+                    .complete());\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.MULTI_INSTANCE_BODY)\n+        .await();\n+\n+    // then\n+    final var expectedOutputCollection =\n+        JsonUtil.toJson(\n+            IntStream.rangeClosed(1, jobCounter.get()).boxed().collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM1MjU2MA=="}, "originalCommit": {"oid": "28f7dd22e636261f78b015e0a9c6d07c6443cc00"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NjAxNjY0OnYy", "diffSide": "RIGHT", "path": "docs/src/bpmn-workflows/call-activities/call-activities.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjo0MToyNlrOHRy7hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjo0MToyNlrOHRy7hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyMjI3Nw==", "bodyText": "Nitpick: personally, I would write this sentence differently. But do with this what you want. \ud83d\ude04\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the attribute `propagateAllChildVariables` is set (default: `true`) then all variables of the created workflow instance are propagated to the call activity. This behavior can be customized by defining output mappings at the call activity. The output mappings are applied on completing the call activity and only the variables are propagated that are defined in the output mappings.\n          \n          \n            \n            If the attribute `propagateAllChildVariables` is set (default: `true`) then all variables of the created workflow instance are propagated to the call activity. This behavior can be customized by defining output mappings at the call activity. The output mappings are applied on completing the call activity and only those variables that are defined in the output mappings are propagated.", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r488422277", "createdAt": "2020-09-15T06:41:26Z", "author": {"login": "korthout"}, "path": "docs/src/bpmn-workflows/call-activities/call-activities.md", "diffHunk": "@@ -32,7 +32,7 @@ When the call activity is activated then **all variables** of the call activity\n \n Input mappings can be used to create new local variables in the scope of the call activity. These variables are also copied to the created workflow instance.\n \n-If the attribute `propagateAllChildVariables` is set (default: `true`) then all variables of the created workflow instance are propagated to the call activity. This behavior can be customized by defining output mappings at the call activity. The output mappings are applied on completing the call activity.\n+If the attribute `propagateAllChildVariables` is set (default: `true`) then all variables of the created workflow instance are propagated to the call activity. This behavior can be customized by defining output mappings at the call activity. The output mappings are applied on completing the call activity and only the variables are propagated that are defined in the output mappings.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67b6fdc493e81f8962c88f4f4fa21c7edeba8e59"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 237, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}