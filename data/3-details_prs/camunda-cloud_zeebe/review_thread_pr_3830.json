{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MzI3ODQ3", "number": 3830, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDozMjoxM1rODf6HNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOToxMTo1NVrODinnpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Nzg0NTY3OnYy", "diffSide": "RIGHT", "path": "upgrade-tests/src/test/java/io/zeebe/test/ContainerStateRule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDozMjoxM1rOFp4brQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDozMjoxM1rOFp4brQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2MDUyNQ==", "bodyText": "It is more common to extend from ExternalResource or TestWatcher to get called when a test has finished or failed.", "url": "https://github.com/camunda-cloud/zeebe/pull/3830#discussion_r379460525", "createdAt": "2020-02-14T14:32:13Z", "author": {"login": "saig0"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/ContainerStateRule.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.test;\n+\n+import io.zeebe.client.ZeebeClient;\n+import io.zeebe.containers.ZeebeBrokerContainer;\n+import io.zeebe.containers.ZeebePort;\n+import io.zeebe.containers.ZeebeStandaloneGatewayContainer;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.event.Level;\n+import org.testcontainers.containers.Network;\n+\n+class ContainerStateRule implements TestRule {\n+\n+  private static final int CLOSE_TIMEOUT = 40;\n+  private static final Logger LOG = LoggerFactory.getLogger(ContainerStateRule.class);\n+  private ZeebeBrokerContainer broker;\n+  private ZeebeStandaloneGatewayContainer gateway;\n+  private ZeebeClient client;\n+  private Network network;\n+  private String lastLog;\n+\n+  public ZeebeClient client() {\n+    return client;\n+  }\n+\n+  @Override\n+  public Statement apply(Statement base, Description description) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d41de46c96cf8336cf3a9b07dbe7a465912adbdf"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Nzg1OTA5OnYy", "diffSide": "RIGHT", "path": "upgrade-tests/src/test/java/io/zeebe/test/ContainerStateRule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDozNjowMFrOFp4juw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDozNjowMFrOFp4juw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ2MjU4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              boolean findElementInState(final String elementId, final String intent) {\n          \n          \n            \n              public boolean hasElementInState(final String elementId, final String intent) {", "url": "https://github.com/camunda-cloud/zeebe/pull/3830#discussion_r379462587", "createdAt": "2020-02-14T14:36:00Z", "author": {"login": "saig0"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/ContainerStateRule.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.test;\n+\n+import io.zeebe.client.ZeebeClient;\n+import io.zeebe.containers.ZeebeBrokerContainer;\n+import io.zeebe.containers.ZeebePort;\n+import io.zeebe.containers.ZeebeStandaloneGatewayContainer;\n+import org.junit.rules.TestRule;\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.event.Level;\n+import org.testcontainers.containers.Network;\n+\n+class ContainerStateRule implements TestRule {\n+\n+  private static final int CLOSE_TIMEOUT = 40;\n+  private static final Logger LOG = LoggerFactory.getLogger(ContainerStateRule.class);\n+  private ZeebeBrokerContainer broker;\n+  private ZeebeStandaloneGatewayContainer gateway;\n+  private ZeebeClient client;\n+  private Network network;\n+  private String lastLog;\n+\n+  public ZeebeClient client() {\n+    return client;\n+  }\n+\n+  @Override\n+  public Statement apply(Statement base, Description description) {\n+    return new Statement() {\n+      @Override\n+      public void evaluate() throws Throwable {\n+        try {\n+          lastLog = null;\n+          base.evaluate();\n+        } catch (Throwable t) {\n+          if (broker != null) {\n+            log(\"Broker\", broker.getLogs());\n+          } else if (lastLog != null) {\n+            log(\"Broker\", lastLog);\n+          }\n+\n+          if (gateway != null) {\n+            log(\"Gateway\", gateway.getLogs());\n+          }\n+          throw t;\n+        } finally {\n+          close();\n+        }\n+      }\n+    };\n+  }\n+\n+  private void log(final String type, final String log) {\n+    if (LOG.isErrorEnabled()) {\n+      LOG.error(\n+          String.format(\n+              \"%n===============================================%n%s logs%n===============================================%n%s\",\n+              type, log.replaceAll(\"\\n\\n\", \"\\n\")));\n+    }\n+  }\n+\n+  /**\n+   * Start a broker with an embedded gateway and create a client with the broker's contact point.\n+   */\n+  void startBrokerEmbeddedGateway(final String brokerVersion, final String volumePath) {\n+    network = Network.newNetwork();\n+\n+    broker =\n+        new ZeebeBrokerContainer(brokerVersion)\n+            .withFileSystemBind(volumePath, \"/usr/local/zeebe/data\")\n+            .withNetwork(network)\n+            .withEmbeddedGateway(true)\n+            .withDebug(true)\n+            .withLogLevel(Level.DEBUG);\n+    broker.start();\n+\n+    final String contactPoint = broker.getExternalAddress(ZeebePort.GATEWAY);\n+    client = ZeebeClient.newClientBuilder().brokerContactPoint(contactPoint).usePlaintext().build();\n+  }\n+\n+  /** Start a broker, a standalone gateway and create a client with the gateway's contact point. */\n+  void startBrokerStandaloneGateway(\n+      final String brokerVersion, final String volumePath, final String gatewayVersion) {\n+    network = Network.newNetwork();\n+\n+    broker =\n+        new ZeebeBrokerContainer(brokerVersion)\n+            .withFileSystemBind(volumePath, \"/usr/local/zeebe/data\")\n+            .withNetwork(network)\n+            .withEmbeddedGateway(true)\n+            .withDebug(true)\n+            .withLogLevel(Level.DEBUG);\n+    broker.start();\n+\n+    gateway =\n+        new ZeebeStandaloneGatewayContainer(gatewayVersion)\n+            .withContactPoint(broker.getContactPoint())\n+            .withNetwork(network)\n+            .withLogLevel(Level.DEBUG);\n+    gateway.start();\n+\n+    final String contactPoint = gateway.getExternalAddress(ZeebePort.GATEWAY);\n+    client = ZeebeClient.newClientBuilder().brokerContactPoint(contactPoint).usePlaintext().build();\n+  }\n+\n+  /**\n+   * @return true if a record was found the element with the specified intent. Otherwise, returns\n+   *     false\n+   */\n+  boolean findElementInState(final String elementId, final String intent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d41de46c96cf8336cf3a9b07dbe7a465912adbdf"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzkxOTM5OnYy", "diffSide": "RIGHT", "path": "util/src/main/java/io/zeebe/util/VersionUtil.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo1MzowM1rOFp5IpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOTo0NzoxMlrOFt_Qtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3MjAzNw==", "bodyText": "Why do you read the previous version from the file?\nIt seems that the version is defined via env variables in the POM: https://github.com/zeebe-io/zeebe/blob/develop/upgrade-tests/pom.xml#L55-L60", "url": "https://github.com/camunda-cloud/zeebe/pull/3830#discussion_r379472037", "createdAt": "2020-02-14T14:53:03Z", "author": {"login": "saig0"}, "path": "util/src/main/java/io/zeebe/util/VersionUtil.java", "diffHunk": "@@ -18,31 +18,52 @@\n \n   private static final String VERSION_PROPERTIES_PATH = \"/version.properties\";\n   private static final String VERSION_PROPERTY_NAME = \"zeebe.version\";\n+  private static final String LAST_VERSION_PROPERTY_NAME = \"zeebe.last.version\";\n   private static final String VERSION_DEV = \"development\";\n \n   private static String version;\n+  private static String lastVersion;\n \n+  private VersionUtil() {}\n+\n+  /** @return the current version or 'development' if none can be determined. */\n   public static String getVersion() {\n     if (version == null) {\n       // read version from file\n-      try (InputStream versionFileStream =\n-          VersionUtil.class.getResourceAsStream(VERSION_PROPERTIES_PATH)) {\n-        final Properties props = new Properties();\n-        props.load(versionFileStream);\n-        version = props.getProperty(VERSION_PROPERTY_NAME);\n-        if (version == null) {\n-          LOG.warn(\"Version is not found in version file.\");\n-        }\n-      } catch (IOException e) {\n-        LOG.error(String.format(\"Can't read version file: %s\", VERSION_PROPERTIES_PATH), e);\n-      }\n+      version = readProperty(VERSION_PROPERTY_NAME);\n       if (version == null) {\n+        LOG.warn(\"Version is not found in version file.\");\n         version = VersionUtil.class.getPackage().getImplementationVersion();\n       }\n+\n       if (version == null) {\n         version = VERSION_DEV;\n       }\n     }\n+\n     return version;\n   }\n+\n+  /** @return the previous stable version or null if none was found. */\n+  public static String getPreviousVersion() {\n+    if (lastVersion == null) {\n+      lastVersion = readProperty(LAST_VERSION_PROPERTY_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eab0399d94bf4c45da5c43710f13e0fd0fac9eda"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUxNzg3NQ==", "bodyText": "Forgot to remove that from the pom", "url": "https://github.com/camunda-cloud/zeebe/pull/3830#discussion_r379517875", "createdAt": "2020-02-14T16:14:51Z", "author": {"login": "MiguelPires"}, "path": "util/src/main/java/io/zeebe/util/VersionUtil.java", "diffHunk": "@@ -18,31 +18,52 @@\n \n   private static final String VERSION_PROPERTIES_PATH = \"/version.properties\";\n   private static final String VERSION_PROPERTY_NAME = \"zeebe.version\";\n+  private static final String LAST_VERSION_PROPERTY_NAME = \"zeebe.last.version\";\n   private static final String VERSION_DEV = \"development\";\n \n   private static String version;\n+  private static String lastVersion;\n \n+  private VersionUtil() {}\n+\n+  /** @return the current version or 'development' if none can be determined. */\n   public static String getVersion() {\n     if (version == null) {\n       // read version from file\n-      try (InputStream versionFileStream =\n-          VersionUtil.class.getResourceAsStream(VERSION_PROPERTIES_PATH)) {\n-        final Properties props = new Properties();\n-        props.load(versionFileStream);\n-        version = props.getProperty(VERSION_PROPERTY_NAME);\n-        if (version == null) {\n-          LOG.warn(\"Version is not found in version file.\");\n-        }\n-      } catch (IOException e) {\n-        LOG.error(String.format(\"Can't read version file: %s\", VERSION_PROPERTIES_PATH), e);\n-      }\n+      version = readProperty(VERSION_PROPERTY_NAME);\n       if (version == null) {\n+        LOG.warn(\"Version is not found in version file.\");\n         version = VersionUtil.class.getPackage().getImplementationVersion();\n       }\n+\n       if (version == null) {\n         version = VERSION_DEV;\n       }\n     }\n+\n     return version;\n   }\n+\n+  /** @return the previous stable version or null if none was found. */\n+  public static String getPreviousVersion() {\n+    if (lastVersion == null) {\n+      lastVersion = readProperty(LAST_VERSION_PROPERTY_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3MjAzNw=="}, "originalCommit": {"oid": "eab0399d94bf4c45da5c43710f13e0fd0fac9eda"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3MDgyMg==", "bodyText": "Ok. Why do you prefer to write it into the file over configuring it in the POM?\nI think the lastVersion is used only in the upgrade tests. So, why should we add it to the version file and the access logic to the VersionUtil?", "url": "https://github.com/camunda-cloud/zeebe/pull/3830#discussion_r380170822", "createdAt": "2020-02-17T13:06:24Z", "author": {"login": "saig0"}, "path": "util/src/main/java/io/zeebe/util/VersionUtil.java", "diffHunk": "@@ -18,31 +18,52 @@\n \n   private static final String VERSION_PROPERTIES_PATH = \"/version.properties\";\n   private static final String VERSION_PROPERTY_NAME = \"zeebe.version\";\n+  private static final String LAST_VERSION_PROPERTY_NAME = \"zeebe.last.version\";\n   private static final String VERSION_DEV = \"development\";\n \n   private static String version;\n+  private static String lastVersion;\n \n+  private VersionUtil() {}\n+\n+  /** @return the current version or 'development' if none can be determined. */\n   public static String getVersion() {\n     if (version == null) {\n       // read version from file\n-      try (InputStream versionFileStream =\n-          VersionUtil.class.getResourceAsStream(VERSION_PROPERTIES_PATH)) {\n-        final Properties props = new Properties();\n-        props.load(versionFileStream);\n-        version = props.getProperty(VERSION_PROPERTY_NAME);\n-        if (version == null) {\n-          LOG.warn(\"Version is not found in version file.\");\n-        }\n-      } catch (IOException e) {\n-        LOG.error(String.format(\"Can't read version file: %s\", VERSION_PROPERTIES_PATH), e);\n-      }\n+      version = readProperty(VERSION_PROPERTY_NAME);\n       if (version == null) {\n+        LOG.warn(\"Version is not found in version file.\");\n         version = VersionUtil.class.getPackage().getImplementationVersion();\n       }\n+\n       if (version == null) {\n         version = VERSION_DEV;\n       }\n     }\n+\n     return version;\n   }\n+\n+  /** @return the previous stable version or null if none was found. */\n+  public static String getPreviousVersion() {\n+    if (lastVersion == null) {\n+      lastVersion = readProperty(LAST_VERSION_PROPERTY_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3MjAzNw=="}, "originalCommit": {"oid": "eab0399d94bf4c45da5c43710f13e0fd0fac9eda"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE4NzA3NQ==", "bodyText": "It's essentially the same thing as what is already in the VersionUtil, so it makes sense to align it. All I did was refactor it to so I could use it for the lastVersion. Also, this way it works in IntelliJ which is useful", "url": "https://github.com/camunda-cloud/zeebe/pull/3830#discussion_r380187075", "createdAt": "2020-02-17T13:40:16Z", "author": {"login": "MiguelPires"}, "path": "util/src/main/java/io/zeebe/util/VersionUtil.java", "diffHunk": "@@ -18,31 +18,52 @@\n \n   private static final String VERSION_PROPERTIES_PATH = \"/version.properties\";\n   private static final String VERSION_PROPERTY_NAME = \"zeebe.version\";\n+  private static final String LAST_VERSION_PROPERTY_NAME = \"zeebe.last.version\";\n   private static final String VERSION_DEV = \"development\";\n \n   private static String version;\n+  private static String lastVersion;\n \n+  private VersionUtil() {}\n+\n+  /** @return the current version or 'development' if none can be determined. */\n   public static String getVersion() {\n     if (version == null) {\n       // read version from file\n-      try (InputStream versionFileStream =\n-          VersionUtil.class.getResourceAsStream(VERSION_PROPERTIES_PATH)) {\n-        final Properties props = new Properties();\n-        props.load(versionFileStream);\n-        version = props.getProperty(VERSION_PROPERTY_NAME);\n-        if (version == null) {\n-          LOG.warn(\"Version is not found in version file.\");\n-        }\n-      } catch (IOException e) {\n-        LOG.error(String.format(\"Can't read version file: %s\", VERSION_PROPERTIES_PATH), e);\n-      }\n+      version = readProperty(VERSION_PROPERTY_NAME);\n       if (version == null) {\n+        LOG.warn(\"Version is not found in version file.\");\n         version = VersionUtil.class.getPackage().getImplementationVersion();\n       }\n+\n       if (version == null) {\n         version = VERSION_DEV;\n       }\n     }\n+\n     return version;\n   }\n+\n+  /** @return the previous stable version or null if none was found. */\n+  public static String getPreviousVersion() {\n+    if (lastVersion == null) {\n+      lastVersion = readProperty(LAST_VERSION_PROPERTY_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3MjAzNw=="}, "originalCommit": {"oid": "eab0399d94bf4c45da5c43710f13e0fd0fac9eda"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc2NjcxMA==", "bodyText": "This seems reasonable for now - I get that you'd expect VersionUtil to strictly return the version, but you could also argue semantics that the compat version fits here. If we need to add more logic to either we can split them up.", "url": "https://github.com/camunda-cloud/zeebe/pull/3830#discussion_r383766710", "createdAt": "2020-02-25T09:47:12Z", "author": {"login": "npepinpe"}, "path": "util/src/main/java/io/zeebe/util/VersionUtil.java", "diffHunk": "@@ -18,31 +18,52 @@\n \n   private static final String VERSION_PROPERTIES_PATH = \"/version.properties\";\n   private static final String VERSION_PROPERTY_NAME = \"zeebe.version\";\n+  private static final String LAST_VERSION_PROPERTY_NAME = \"zeebe.last.version\";\n   private static final String VERSION_DEV = \"development\";\n \n   private static String version;\n+  private static String lastVersion;\n \n+  private VersionUtil() {}\n+\n+  /** @return the current version or 'development' if none can be determined. */\n   public static String getVersion() {\n     if (version == null) {\n       // read version from file\n-      try (InputStream versionFileStream =\n-          VersionUtil.class.getResourceAsStream(VERSION_PROPERTIES_PATH)) {\n-        final Properties props = new Properties();\n-        props.load(versionFileStream);\n-        version = props.getProperty(VERSION_PROPERTY_NAME);\n-        if (version == null) {\n-          LOG.warn(\"Version is not found in version file.\");\n-        }\n-      } catch (IOException e) {\n-        LOG.error(String.format(\"Can't read version file: %s\", VERSION_PROPERTIES_PATH), e);\n-      }\n+      version = readProperty(VERSION_PROPERTY_NAME);\n       if (version == null) {\n+        LOG.warn(\"Version is not found in version file.\");\n         version = VersionUtil.class.getPackage().getImplementationVersion();\n       }\n+\n       if (version == null) {\n         version = VERSION_DEV;\n       }\n     }\n+\n     return version;\n   }\n+\n+  /** @return the previous stable version or null if none was found. */\n+  public static String getPreviousVersion() {\n+    if (lastVersion == null) {\n+      lastVersion = readProperty(LAST_VERSION_PROPERTY_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3MjAzNw=="}, "originalCommit": {"oid": "eab0399d94bf4c45da5c43710f13e0fd0fac9eda"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Nzk4MjY1OnYy", "diffSide": "RIGHT", "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToxMDo1NVrOFp5vmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToxMDo1NVrOFp5vmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4MjAwOQ==", "bodyText": "The test name is a bit confusing. What do you think about oldGatewayWithNewBroker?", "url": "https://github.com/camunda-cloud/zeebe/pull/3830#discussion_r379482009", "createdAt": "2020-02-14T15:10:55Z", "author": {"login": "saig0"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "diffHunk": "@@ -7,193 +7,168 @@\n  */\n package io.zeebe.test;\n \n-import io.zeebe.client.ZeebeClient;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n import io.zeebe.client.api.response.ActivateJobsResponse;\n-import io.zeebe.containers.ZeebeBrokerContainer;\n-import io.zeebe.containers.ZeebePort;\n-import io.zeebe.containers.ZeebeStandaloneGatewayContainer;\n import io.zeebe.model.bpmn.Bpmn;\n import io.zeebe.model.bpmn.BpmnModelInstance;\n import io.zeebe.test.util.TestUtil;\n+import io.zeebe.util.VersionUtil;\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.concurrent.TimeUnit;\n-import org.junit.BeforeClass;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+import org.assertj.core.util.Files;\n import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.RuleChain;\n import org.junit.rules.TemporaryFolder;\n-import org.junit.rules.TestWatcher;\n import org.junit.rules.Timeout;\n-import org.junit.runner.Description;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.slf4j.event.Level;\n-import org.testcontainers.containers.Network;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameter;\n+import org.junit.runners.Parameterized.Parameters;\n \n+@RunWith(Parameterized.class)\n public class UpgradeTest {\n \n-  private static final Logger LOG = LoggerFactory.getLogger(UpgradeTest.class);\n   private static final String CURRENT_VERSION = \"current-test\";\n   private static final String PROCESS_ID = \"process\";\n   private static final String TASK = \"task\";\n-  private static final BpmnModelInstance WORKFLOW =\n-      Bpmn.createExecutableProcess(PROCESS_ID)\n-          .startEvent()\n-          .serviceTask(TASK, t -> t.zeebeTaskType(TASK))\n-          .endEvent()\n-          .done();\n-  private static String lastVersion = \"0.22.1\";\n-\n-  @Rule public Timeout timeout = new Timeout(2, TimeUnit.MINUTES);\n-  @Rule public TemporaryFolder temp = new TemporaryFolder();\n-  @Rule public TestWatcher watchman = new ContainerTestWatcher();\n-\n-  private ZeebeBrokerContainer container;\n-  private ZeebeStandaloneGatewayContainer gateway;\n-  private ZeebeClient client;\n-  private Network network;\n-\n-  @BeforeClass\n-  public static void beforeClass() {\n-    final String version = System.getProperty(\"lastVersion\");\n-    if (version != null) {\n-      lastVersion = version;\n-    } else {\n-      LOG.info(\n-          \"Expected last version property to be set but none was found. Running test with default version {}\",\n-          lastVersion);\n-    }\n+  private static String lastVersion = VersionUtil.getPreviousVersion();\n+\n+  @Rule public TemporaryFolder tmpFolder = new TemporaryFolder();\n+  @Rule public ContainerStateRule state = new ContainerStateRule();\n+\n+  @Rule\n+  public RuleChain chain =\n+      RuleChain.outerRule(new Timeout(2, TimeUnit.MINUTES)).around(tmpFolder).around(state);\n+\n+  @Parameter public String testName;\n+\n+  @Parameter(1)\n+  public BpmnModelInstance workflow;\n+\n+  /**\n+   * Should make zeebe write records and write to state of the feature being tested (e.g., jobs,\n+   * messages). The workflow should be left in a waiting state so Zeebe can be restarted and\n+   * execution can be continued after. Takes the container rule as input and outputs a long which\n+   * can be used after the upgrade to continue the execution.\n+   */\n+  @Parameter(2)\n+  public Function<ContainerStateRule, Long> beforeUpgrade;\n+\n+  /**\n+   * Should continue the instance after the upgrade in a way that will complete the workflow. Takes\n+   * the container rule and a long (e.g., a key) as input.\n+   */\n+  @Parameter(3)\n+  public BiConsumer<ContainerStateRule, Long> afterUpgrade;\n+\n+  @Parameters(name = \"{0}\")\n+  public static Collection<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[][] {\n+          {\n+            \"job\",\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .serviceTask(TASK, t -> t.zeebeTaskType(TASK))\n+                .endEvent()\n+                .done(),\n+            (Function<ContainerStateRule, Long>)\n+                (ContainerStateRule state) -> {\n+                  final ActivateJobsResponse jobsResponse =\n+                      state\n+                          .client()\n+                          .newActivateJobsCommand()\n+                          .jobType(TASK)\n+                          .maxJobsToActivate(1)\n+                          .send()\n+                          .join();\n+\n+                  TestUtil.waitUntil(() -> state.findElementInState(TASK, \"ACTIVATED\"));\n+                  return jobsResponse.getJobs().get(0).getKey();\n+                },\n+            (BiConsumer<ContainerStateRule, Long>)\n+                (ContainerStateRule state, Long key) ->\n+                    state.client().newCompleteCommand(key).send().join()\n+          },\n+        });\n   }\n \n   @Test\n-  public void shouldCompleteJobAfterUpgrade() {\n+  public void shouldReceiveSbeRecords() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eab0399d94bf4c45da5c43710f13e0fd0fac9eda"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODAwMDM2OnYy", "diffSide": "RIGHT", "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToxNjowNVrOFp562A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToxNjowNVrOFp562A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4NDg4OA==", "bodyText": "From looking at the test, the method arguments were confusing for me. I did not realize that the broker and gateway have different versions. A builder pattern could make it more readable.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                state.startBrokerStandaloneGateway(CURRENT_VERSION, tmpFolder.getRoot().getPath(), lastVersion);\n          \n          \n            \n                state.broker(CURRENT_VERSION, tmpFolder.getRoot().getPath())\n          \n          \n            \n                        .withStandaloneGateway(lastVersion)\n          \n          \n            \n                        .start();", "url": "https://github.com/camunda-cloud/zeebe/pull/3830#discussion_r379484888", "createdAt": "2020-02-14T15:16:05Z", "author": {"login": "saig0"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "diffHunk": "@@ -7,193 +7,168 @@\n  */\n package io.zeebe.test;\n \n-import io.zeebe.client.ZeebeClient;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n import io.zeebe.client.api.response.ActivateJobsResponse;\n-import io.zeebe.containers.ZeebeBrokerContainer;\n-import io.zeebe.containers.ZeebePort;\n-import io.zeebe.containers.ZeebeStandaloneGatewayContainer;\n import io.zeebe.model.bpmn.Bpmn;\n import io.zeebe.model.bpmn.BpmnModelInstance;\n import io.zeebe.test.util.TestUtil;\n+import io.zeebe.util.VersionUtil;\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.concurrent.TimeUnit;\n-import org.junit.BeforeClass;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+import org.assertj.core.util.Files;\n import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.RuleChain;\n import org.junit.rules.TemporaryFolder;\n-import org.junit.rules.TestWatcher;\n import org.junit.rules.Timeout;\n-import org.junit.runner.Description;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.slf4j.event.Level;\n-import org.testcontainers.containers.Network;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameter;\n+import org.junit.runners.Parameterized.Parameters;\n \n+@RunWith(Parameterized.class)\n public class UpgradeTest {\n \n-  private static final Logger LOG = LoggerFactory.getLogger(UpgradeTest.class);\n   private static final String CURRENT_VERSION = \"current-test\";\n   private static final String PROCESS_ID = \"process\";\n   private static final String TASK = \"task\";\n-  private static final BpmnModelInstance WORKFLOW =\n-      Bpmn.createExecutableProcess(PROCESS_ID)\n-          .startEvent()\n-          .serviceTask(TASK, t -> t.zeebeTaskType(TASK))\n-          .endEvent()\n-          .done();\n-  private static String lastVersion = \"0.22.1\";\n-\n-  @Rule public Timeout timeout = new Timeout(2, TimeUnit.MINUTES);\n-  @Rule public TemporaryFolder temp = new TemporaryFolder();\n-  @Rule public TestWatcher watchman = new ContainerTestWatcher();\n-\n-  private ZeebeBrokerContainer container;\n-  private ZeebeStandaloneGatewayContainer gateway;\n-  private ZeebeClient client;\n-  private Network network;\n-\n-  @BeforeClass\n-  public static void beforeClass() {\n-    final String version = System.getProperty(\"lastVersion\");\n-    if (version != null) {\n-      lastVersion = version;\n-    } else {\n-      LOG.info(\n-          \"Expected last version property to be set but none was found. Running test with default version {}\",\n-          lastVersion);\n-    }\n+  private static String lastVersion = VersionUtil.getPreviousVersion();\n+\n+  @Rule public TemporaryFolder tmpFolder = new TemporaryFolder();\n+  @Rule public ContainerStateRule state = new ContainerStateRule();\n+\n+  @Rule\n+  public RuleChain chain =\n+      RuleChain.outerRule(new Timeout(2, TimeUnit.MINUTES)).around(tmpFolder).around(state);\n+\n+  @Parameter public String testName;\n+\n+  @Parameter(1)\n+  public BpmnModelInstance workflow;\n+\n+  /**\n+   * Should make zeebe write records and write to state of the feature being tested (e.g., jobs,\n+   * messages). The workflow should be left in a waiting state so Zeebe can be restarted and\n+   * execution can be continued after. Takes the container rule as input and outputs a long which\n+   * can be used after the upgrade to continue the execution.\n+   */\n+  @Parameter(2)\n+  public Function<ContainerStateRule, Long> beforeUpgrade;\n+\n+  /**\n+   * Should continue the instance after the upgrade in a way that will complete the workflow. Takes\n+   * the container rule and a long (e.g., a key) as input.\n+   */\n+  @Parameter(3)\n+  public BiConsumer<ContainerStateRule, Long> afterUpgrade;\n+\n+  @Parameters(name = \"{0}\")\n+  public static Collection<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[][] {\n+          {\n+            \"job\",\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .serviceTask(TASK, t -> t.zeebeTaskType(TASK))\n+                .endEvent()\n+                .done(),\n+            (Function<ContainerStateRule, Long>)\n+                (ContainerStateRule state) -> {\n+                  final ActivateJobsResponse jobsResponse =\n+                      state\n+                          .client()\n+                          .newActivateJobsCommand()\n+                          .jobType(TASK)\n+                          .maxJobsToActivate(1)\n+                          .send()\n+                          .join();\n+\n+                  TestUtil.waitUntil(() -> state.findElementInState(TASK, \"ACTIVATED\"));\n+                  return jobsResponse.getJobs().get(0).getKey();\n+                },\n+            (BiConsumer<ContainerStateRule, Long>)\n+                (ContainerStateRule state, Long key) ->\n+                    state.client().newCompleteCommand(key).send().join()\n+          },\n+        });\n   }\n \n   @Test\n-  public void shouldCompleteJobAfterUpgrade() {\n+  public void shouldReceiveSbeRecords() {\n     // given\n-    startZeebe(lastVersion);\n+    state.startBrokerStandaloneGateway(CURRENT_VERSION, tmpFolder.getRoot().getPath(), lastVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eab0399d94bf4c45da5c43710f13e0fd0fac9eda"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODAwNjUzOnYy", "diffSide": "RIGHT", "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToxNzo1MlrOFp5-vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToxNzo1MlrOFp5-vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4NTg4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldRestoreFromOldSnapshot() {\n          \n          \n            \n              public void upgradeWithSnapshot() {", "url": "https://github.com/camunda-cloud/zeebe/pull/3830#discussion_r379485885", "createdAt": "2020-02-14T15:17:52Z", "author": {"login": "saig0"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "diffHunk": "@@ -7,193 +7,168 @@\n  */\n package io.zeebe.test;\n \n-import io.zeebe.client.ZeebeClient;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n import io.zeebe.client.api.response.ActivateJobsResponse;\n-import io.zeebe.containers.ZeebeBrokerContainer;\n-import io.zeebe.containers.ZeebePort;\n-import io.zeebe.containers.ZeebeStandaloneGatewayContainer;\n import io.zeebe.model.bpmn.Bpmn;\n import io.zeebe.model.bpmn.BpmnModelInstance;\n import io.zeebe.test.util.TestUtil;\n+import io.zeebe.util.VersionUtil;\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.concurrent.TimeUnit;\n-import org.junit.BeforeClass;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+import org.assertj.core.util.Files;\n import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.RuleChain;\n import org.junit.rules.TemporaryFolder;\n-import org.junit.rules.TestWatcher;\n import org.junit.rules.Timeout;\n-import org.junit.runner.Description;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.slf4j.event.Level;\n-import org.testcontainers.containers.Network;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameter;\n+import org.junit.runners.Parameterized.Parameters;\n \n+@RunWith(Parameterized.class)\n public class UpgradeTest {\n \n-  private static final Logger LOG = LoggerFactory.getLogger(UpgradeTest.class);\n   private static final String CURRENT_VERSION = \"current-test\";\n   private static final String PROCESS_ID = \"process\";\n   private static final String TASK = \"task\";\n-  private static final BpmnModelInstance WORKFLOW =\n-      Bpmn.createExecutableProcess(PROCESS_ID)\n-          .startEvent()\n-          .serviceTask(TASK, t -> t.zeebeTaskType(TASK))\n-          .endEvent()\n-          .done();\n-  private static String lastVersion = \"0.22.1\";\n-\n-  @Rule public Timeout timeout = new Timeout(2, TimeUnit.MINUTES);\n-  @Rule public TemporaryFolder temp = new TemporaryFolder();\n-  @Rule public TestWatcher watchman = new ContainerTestWatcher();\n-\n-  private ZeebeBrokerContainer container;\n-  private ZeebeStandaloneGatewayContainer gateway;\n-  private ZeebeClient client;\n-  private Network network;\n-\n-  @BeforeClass\n-  public static void beforeClass() {\n-    final String version = System.getProperty(\"lastVersion\");\n-    if (version != null) {\n-      lastVersion = version;\n-    } else {\n-      LOG.info(\n-          \"Expected last version property to be set but none was found. Running test with default version {}\",\n-          lastVersion);\n-    }\n+  private static String lastVersion = VersionUtil.getPreviousVersion();\n+\n+  @Rule public TemporaryFolder tmpFolder = new TemporaryFolder();\n+  @Rule public ContainerStateRule state = new ContainerStateRule();\n+\n+  @Rule\n+  public RuleChain chain =\n+      RuleChain.outerRule(new Timeout(2, TimeUnit.MINUTES)).around(tmpFolder).around(state);\n+\n+  @Parameter public String testName;\n+\n+  @Parameter(1)\n+  public BpmnModelInstance workflow;\n+\n+  /**\n+   * Should make zeebe write records and write to state of the feature being tested (e.g., jobs,\n+   * messages). The workflow should be left in a waiting state so Zeebe can be restarted and\n+   * execution can be continued after. Takes the container rule as input and outputs a long which\n+   * can be used after the upgrade to continue the execution.\n+   */\n+  @Parameter(2)\n+  public Function<ContainerStateRule, Long> beforeUpgrade;\n+\n+  /**\n+   * Should continue the instance after the upgrade in a way that will complete the workflow. Takes\n+   * the container rule and a long (e.g., a key) as input.\n+   */\n+  @Parameter(3)\n+  public BiConsumer<ContainerStateRule, Long> afterUpgrade;\n+\n+  @Parameters(name = \"{0}\")\n+  public static Collection<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[][] {\n+          {\n+            \"job\",\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .serviceTask(TASK, t -> t.zeebeTaskType(TASK))\n+                .endEvent()\n+                .done(),\n+            (Function<ContainerStateRule, Long>)\n+                (ContainerStateRule state) -> {\n+                  final ActivateJobsResponse jobsResponse =\n+                      state\n+                          .client()\n+                          .newActivateJobsCommand()\n+                          .jobType(TASK)\n+                          .maxJobsToActivate(1)\n+                          .send()\n+                          .join();\n+\n+                  TestUtil.waitUntil(() -> state.findElementInState(TASK, \"ACTIVATED\"));\n+                  return jobsResponse.getJobs().get(0).getKey();\n+                },\n+            (BiConsumer<ContainerStateRule, Long>)\n+                (ContainerStateRule state, Long key) ->\n+                    state.client().newCompleteCommand(key).send().join()\n+          },\n+        });\n   }\n \n   @Test\n-  public void shouldCompleteJobAfterUpgrade() {\n+  public void shouldReceiveSbeRecords() {\n     // given\n-    startZeebe(lastVersion);\n+    state.startBrokerStandaloneGateway(CURRENT_VERSION, tmpFolder.getRoot().getPath(), lastVersion);\n+\n+    state\n+        .client()\n+        .newDeployCommand()\n+        .addWorkflowModel(workflow, PROCESS_ID + \".bpmn\")\n+        .send()\n+        .join();\n+    state\n+        .client()\n+        .newCreateInstanceCommand()\n+        .bpmnProcessId(PROCESS_ID)\n+        .latestVersion()\n+        .send()\n+        .join();\n \n     // when\n-    client.newDeployCommand().addWorkflowModel(WORKFLOW, PROCESS_ID + \".bpmn\").send().join();\n-    client.newCreateInstanceCommand().bpmnProcessId(PROCESS_ID).latestVersion().send().join();\n-\n-    final ActivateJobsResponse jobsResponse =\n-        client.newActivateJobsCommand().jobType(TASK).maxJobsToActivate(1).send().join();\n-\n-    TestUtil.waitUntil(() -> findElementInState(TASK, \"ACTIVATED\"));\n-    close();\n-\n-    startZeebe(CURRENT_VERSION);\n-    client.newCompleteCommand(jobsResponse.getJobs().get(0).getKey()).send().join();\n+    final long key = beforeUpgrade.apply(state);\n \n     // then\n-    TestUtil.waitUntil(() -> findElementInState(PROCESS_ID, \"ELEMENT_COMPLETED\"));\n+    afterUpgrade.accept(state, key);\n+    TestUtil.waitUntil(() -> state.findElementInState(PROCESS_ID, \"ELEMENT_COMPLETED\"));\n   }\n \n   @Test\n-  public void shouldSupportOlderVersionedGateway() {\n-    // given\n-    startZeebe(false, CURRENT_VERSION, lastVersion);\n-\n-    // when\n-    client.newDeployCommand().addWorkflowModel(WORKFLOW, PROCESS_ID + \".bpmn\").send().join();\n-    client.newCreateInstanceCommand().bpmnProcessId(PROCESS_ID).latestVersion().send().join();\n-\n-    final ActivateJobsResponse jobsResponse =\n-        client.newActivateJobsCommand().jobType(TASK).maxJobsToActivate(1).send().join();\n-\n-    client.newCompleteCommand(jobsResponse.getJobs().get(0).getKey()).send().join();\n-\n-    // then\n-    TestUtil.waitUntil(() -> findElementInState(PROCESS_ID, \"ELEMENT_COMPLETED\"));\n-  }\n-\n-  private void startZeebe(final String version) {\n-    startZeebe(true, version, null);\n+  public void shouldRestoreFromOldSnapshot() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eab0399d94bf4c45da5c43710f13e0fd0fac9eda"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODAwOTAyOnYy", "diffSide": "RIGHT", "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToxODozMlrOFp6ARw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToxODozMlrOFp6ARw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4NjI3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldReprocessOldRecords() {\n          \n          \n            \n              public void upgradeWithoutSnapshot() {", "url": "https://github.com/camunda-cloud/zeebe/pull/3830#discussion_r379486279", "createdAt": "2020-02-14T15:18:32Z", "author": {"login": "saig0"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "diffHunk": "@@ -7,193 +7,168 @@\n  */\n package io.zeebe.test;\n \n-import io.zeebe.client.ZeebeClient;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n import io.zeebe.client.api.response.ActivateJobsResponse;\n-import io.zeebe.containers.ZeebeBrokerContainer;\n-import io.zeebe.containers.ZeebePort;\n-import io.zeebe.containers.ZeebeStandaloneGatewayContainer;\n import io.zeebe.model.bpmn.Bpmn;\n import io.zeebe.model.bpmn.BpmnModelInstance;\n import io.zeebe.test.util.TestUtil;\n+import io.zeebe.util.VersionUtil;\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.concurrent.TimeUnit;\n-import org.junit.BeforeClass;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+import org.assertj.core.util.Files;\n import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.RuleChain;\n import org.junit.rules.TemporaryFolder;\n-import org.junit.rules.TestWatcher;\n import org.junit.rules.Timeout;\n-import org.junit.runner.Description;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.slf4j.event.Level;\n-import org.testcontainers.containers.Network;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameter;\n+import org.junit.runners.Parameterized.Parameters;\n \n+@RunWith(Parameterized.class)\n public class UpgradeTest {\n \n-  private static final Logger LOG = LoggerFactory.getLogger(UpgradeTest.class);\n   private static final String CURRENT_VERSION = \"current-test\";\n   private static final String PROCESS_ID = \"process\";\n   private static final String TASK = \"task\";\n-  private static final BpmnModelInstance WORKFLOW =\n-      Bpmn.createExecutableProcess(PROCESS_ID)\n-          .startEvent()\n-          .serviceTask(TASK, t -> t.zeebeTaskType(TASK))\n-          .endEvent()\n-          .done();\n-  private static String lastVersion = \"0.22.1\";\n-\n-  @Rule public Timeout timeout = new Timeout(2, TimeUnit.MINUTES);\n-  @Rule public TemporaryFolder temp = new TemporaryFolder();\n-  @Rule public TestWatcher watchman = new ContainerTestWatcher();\n-\n-  private ZeebeBrokerContainer container;\n-  private ZeebeStandaloneGatewayContainer gateway;\n-  private ZeebeClient client;\n-  private Network network;\n-\n-  @BeforeClass\n-  public static void beforeClass() {\n-    final String version = System.getProperty(\"lastVersion\");\n-    if (version != null) {\n-      lastVersion = version;\n-    } else {\n-      LOG.info(\n-          \"Expected last version property to be set but none was found. Running test with default version {}\",\n-          lastVersion);\n-    }\n+  private static String lastVersion = VersionUtil.getPreviousVersion();\n+\n+  @Rule public TemporaryFolder tmpFolder = new TemporaryFolder();\n+  @Rule public ContainerStateRule state = new ContainerStateRule();\n+\n+  @Rule\n+  public RuleChain chain =\n+      RuleChain.outerRule(new Timeout(2, TimeUnit.MINUTES)).around(tmpFolder).around(state);\n+\n+  @Parameter public String testName;\n+\n+  @Parameter(1)\n+  public BpmnModelInstance workflow;\n+\n+  /**\n+   * Should make zeebe write records and write to state of the feature being tested (e.g., jobs,\n+   * messages). The workflow should be left in a waiting state so Zeebe can be restarted and\n+   * execution can be continued after. Takes the container rule as input and outputs a long which\n+   * can be used after the upgrade to continue the execution.\n+   */\n+  @Parameter(2)\n+  public Function<ContainerStateRule, Long> beforeUpgrade;\n+\n+  /**\n+   * Should continue the instance after the upgrade in a way that will complete the workflow. Takes\n+   * the container rule and a long (e.g., a key) as input.\n+   */\n+  @Parameter(3)\n+  public BiConsumer<ContainerStateRule, Long> afterUpgrade;\n+\n+  @Parameters(name = \"{0}\")\n+  public static Collection<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[][] {\n+          {\n+            \"job\",\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .serviceTask(TASK, t -> t.zeebeTaskType(TASK))\n+                .endEvent()\n+                .done(),\n+            (Function<ContainerStateRule, Long>)\n+                (ContainerStateRule state) -> {\n+                  final ActivateJobsResponse jobsResponse =\n+                      state\n+                          .client()\n+                          .newActivateJobsCommand()\n+                          .jobType(TASK)\n+                          .maxJobsToActivate(1)\n+                          .send()\n+                          .join();\n+\n+                  TestUtil.waitUntil(() -> state.findElementInState(TASK, \"ACTIVATED\"));\n+                  return jobsResponse.getJobs().get(0).getKey();\n+                },\n+            (BiConsumer<ContainerStateRule, Long>)\n+                (ContainerStateRule state, Long key) ->\n+                    state.client().newCompleteCommand(key).send().join()\n+          },\n+        });\n   }\n \n   @Test\n-  public void shouldCompleteJobAfterUpgrade() {\n+  public void shouldReceiveSbeRecords() {\n     // given\n-    startZeebe(lastVersion);\n+    state.startBrokerStandaloneGateway(CURRENT_VERSION, tmpFolder.getRoot().getPath(), lastVersion);\n+\n+    state\n+        .client()\n+        .newDeployCommand()\n+        .addWorkflowModel(workflow, PROCESS_ID + \".bpmn\")\n+        .send()\n+        .join();\n+    state\n+        .client()\n+        .newCreateInstanceCommand()\n+        .bpmnProcessId(PROCESS_ID)\n+        .latestVersion()\n+        .send()\n+        .join();\n \n     // when\n-    client.newDeployCommand().addWorkflowModel(WORKFLOW, PROCESS_ID + \".bpmn\").send().join();\n-    client.newCreateInstanceCommand().bpmnProcessId(PROCESS_ID).latestVersion().send().join();\n-\n-    final ActivateJobsResponse jobsResponse =\n-        client.newActivateJobsCommand().jobType(TASK).maxJobsToActivate(1).send().join();\n-\n-    TestUtil.waitUntil(() -> findElementInState(TASK, \"ACTIVATED\"));\n-    close();\n-\n-    startZeebe(CURRENT_VERSION);\n-    client.newCompleteCommand(jobsResponse.getJobs().get(0).getKey()).send().join();\n+    final long key = beforeUpgrade.apply(state);\n \n     // then\n-    TestUtil.waitUntil(() -> findElementInState(PROCESS_ID, \"ELEMENT_COMPLETED\"));\n+    afterUpgrade.accept(state, key);\n+    TestUtil.waitUntil(() -> state.findElementInState(PROCESS_ID, \"ELEMENT_COMPLETED\"));\n   }\n \n   @Test\n-  public void shouldSupportOlderVersionedGateway() {\n-    // given\n-    startZeebe(false, CURRENT_VERSION, lastVersion);\n-\n-    // when\n-    client.newDeployCommand().addWorkflowModel(WORKFLOW, PROCESS_ID + \".bpmn\").send().join();\n-    client.newCreateInstanceCommand().bpmnProcessId(PROCESS_ID).latestVersion().send().join();\n-\n-    final ActivateJobsResponse jobsResponse =\n-        client.newActivateJobsCommand().jobType(TASK).maxJobsToActivate(1).send().join();\n-\n-    client.newCompleteCommand(jobsResponse.getJobs().get(0).getKey()).send().join();\n-\n-    // then\n-    TestUtil.waitUntil(() -> findElementInState(PROCESS_ID, \"ELEMENT_COMPLETED\"));\n-  }\n-\n-  private void startZeebe(final String version) {\n-    startZeebe(true, version, null);\n+  public void shouldRestoreFromOldSnapshot() {\n+    upgradeZeebe(false);\n   }\n \n-  private void startZeebe(\n-      final boolean embeddedGateway, final String brokerVersion, final String gatewayVersion) {\n-    network = Network.newNetwork();\n-\n-    container =\n-        new ZeebeBrokerContainer(brokerVersion)\n-            .withFileSystemBind(temp.getRoot().getPath(), \"/usr/local/zeebe/data\")\n-            .withNetwork(network)\n-            .withEmbeddedGateway(embeddedGateway)\n-            .withDebug(true)\n-            .withLogLevel(Level.DEBUG);\n-    container.start();\n-\n-    String contactPoint = container.getExternalAddress(ZeebePort.GATEWAY);\n-\n-    if (!embeddedGateway) {\n-      gateway =\n-          new ZeebeStandaloneGatewayContainer(gatewayVersion)\n-              .withContactPoint(container.getContactPoint())\n-              .withNetwork(network)\n-              .withLogLevel(Level.DEBUG);\n-      gateway.start();\n-      contactPoint = gateway.getExternalAddress(ZeebePort.GATEWAY);\n-    }\n-\n-    client = ZeebeClient.newClientBuilder().brokerContactPoint(contactPoint).usePlaintext().build();\n-  }\n-\n-  private boolean findElementInState(final String element, final String intent) {\n-    final String[] lines = container.getLogs().split(\"\\n\");\n-\n-    for (int i = lines.length - 1; i >= 0; --i) {\n-      if (lines[i].contains(String.format(\"\\\"elementId\\\":\\\"%s\\\"\", element))\n-          && lines[i].contains(String.format(\"\\\"intent\\\":\\\"%s\\\"\", intent))) {\n-        return true;\n-      }\n-    }\n-\n-    return false;\n+  @Test\n+  public void shouldReprocessOldRecords() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eab0399d94bf4c45da5c43710f13e0fd0fac9eda"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODAxNTA1OnYy", "diffSide": "RIGHT", "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToyMDoxNVrOFp6EDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToyMDoxNVrOFp6EDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4NzI0NA==", "bodyText": "Deployment and instance creation is duplicated in shouldReceiveSbeRecords.", "url": "https://github.com/camunda-cloud/zeebe/pull/3830#discussion_r379487244", "createdAt": "2020-02-14T15:20:15Z", "author": {"login": "saig0"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "diffHunk": "@@ -7,193 +7,168 @@\n  */\n package io.zeebe.test;\n \n-import io.zeebe.client.ZeebeClient;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n import io.zeebe.client.api.response.ActivateJobsResponse;\n-import io.zeebe.containers.ZeebeBrokerContainer;\n-import io.zeebe.containers.ZeebePort;\n-import io.zeebe.containers.ZeebeStandaloneGatewayContainer;\n import io.zeebe.model.bpmn.Bpmn;\n import io.zeebe.model.bpmn.BpmnModelInstance;\n import io.zeebe.test.util.TestUtil;\n+import io.zeebe.util.VersionUtil;\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.concurrent.TimeUnit;\n-import org.junit.BeforeClass;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+import org.assertj.core.util.Files;\n import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.RuleChain;\n import org.junit.rules.TemporaryFolder;\n-import org.junit.rules.TestWatcher;\n import org.junit.rules.Timeout;\n-import org.junit.runner.Description;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.slf4j.event.Level;\n-import org.testcontainers.containers.Network;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameter;\n+import org.junit.runners.Parameterized.Parameters;\n \n+@RunWith(Parameterized.class)\n public class UpgradeTest {\n \n-  private static final Logger LOG = LoggerFactory.getLogger(UpgradeTest.class);\n   private static final String CURRENT_VERSION = \"current-test\";\n   private static final String PROCESS_ID = \"process\";\n   private static final String TASK = \"task\";\n-  private static final BpmnModelInstance WORKFLOW =\n-      Bpmn.createExecutableProcess(PROCESS_ID)\n-          .startEvent()\n-          .serviceTask(TASK, t -> t.zeebeTaskType(TASK))\n-          .endEvent()\n-          .done();\n-  private static String lastVersion = \"0.22.1\";\n-\n-  @Rule public Timeout timeout = new Timeout(2, TimeUnit.MINUTES);\n-  @Rule public TemporaryFolder temp = new TemporaryFolder();\n-  @Rule public TestWatcher watchman = new ContainerTestWatcher();\n-\n-  private ZeebeBrokerContainer container;\n-  private ZeebeStandaloneGatewayContainer gateway;\n-  private ZeebeClient client;\n-  private Network network;\n-\n-  @BeforeClass\n-  public static void beforeClass() {\n-    final String version = System.getProperty(\"lastVersion\");\n-    if (version != null) {\n-      lastVersion = version;\n-    } else {\n-      LOG.info(\n-          \"Expected last version property to be set but none was found. Running test with default version {}\",\n-          lastVersion);\n-    }\n+  private static String lastVersion = VersionUtil.getPreviousVersion();\n+\n+  @Rule public TemporaryFolder tmpFolder = new TemporaryFolder();\n+  @Rule public ContainerStateRule state = new ContainerStateRule();\n+\n+  @Rule\n+  public RuleChain chain =\n+      RuleChain.outerRule(new Timeout(2, TimeUnit.MINUTES)).around(tmpFolder).around(state);\n+\n+  @Parameter public String testName;\n+\n+  @Parameter(1)\n+  public BpmnModelInstance workflow;\n+\n+  /**\n+   * Should make zeebe write records and write to state of the feature being tested (e.g., jobs,\n+   * messages). The workflow should be left in a waiting state so Zeebe can be restarted and\n+   * execution can be continued after. Takes the container rule as input and outputs a long which\n+   * can be used after the upgrade to continue the execution.\n+   */\n+  @Parameter(2)\n+  public Function<ContainerStateRule, Long> beforeUpgrade;\n+\n+  /**\n+   * Should continue the instance after the upgrade in a way that will complete the workflow. Takes\n+   * the container rule and a long (e.g., a key) as input.\n+   */\n+  @Parameter(3)\n+  public BiConsumer<ContainerStateRule, Long> afterUpgrade;\n+\n+  @Parameters(name = \"{0}\")\n+  public static Collection<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[][] {\n+          {\n+            \"job\",\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .serviceTask(TASK, t -> t.zeebeTaskType(TASK))\n+                .endEvent()\n+                .done(),\n+            (Function<ContainerStateRule, Long>)\n+                (ContainerStateRule state) -> {\n+                  final ActivateJobsResponse jobsResponse =\n+                      state\n+                          .client()\n+                          .newActivateJobsCommand()\n+                          .jobType(TASK)\n+                          .maxJobsToActivate(1)\n+                          .send()\n+                          .join();\n+\n+                  TestUtil.waitUntil(() -> state.findElementInState(TASK, \"ACTIVATED\"));\n+                  return jobsResponse.getJobs().get(0).getKey();\n+                },\n+            (BiConsumer<ContainerStateRule, Long>)\n+                (ContainerStateRule state, Long key) ->\n+                    state.client().newCompleteCommand(key).send().join()\n+          },\n+        });\n   }\n \n   @Test\n-  public void shouldCompleteJobAfterUpgrade() {\n+  public void shouldReceiveSbeRecords() {\n     // given\n-    startZeebe(lastVersion);\n+    state.startBrokerStandaloneGateway(CURRENT_VERSION, tmpFolder.getRoot().getPath(), lastVersion);\n+\n+    state\n+        .client()\n+        .newDeployCommand()\n+        .addWorkflowModel(workflow, PROCESS_ID + \".bpmn\")\n+        .send()\n+        .join();\n+    state\n+        .client()\n+        .newCreateInstanceCommand()\n+        .bpmnProcessId(PROCESS_ID)\n+        .latestVersion()\n+        .send()\n+        .join();\n \n     // when\n-    client.newDeployCommand().addWorkflowModel(WORKFLOW, PROCESS_ID + \".bpmn\").send().join();\n-    client.newCreateInstanceCommand().bpmnProcessId(PROCESS_ID).latestVersion().send().join();\n-\n-    final ActivateJobsResponse jobsResponse =\n-        client.newActivateJobsCommand().jobType(TASK).maxJobsToActivate(1).send().join();\n-\n-    TestUtil.waitUntil(() -> findElementInState(TASK, \"ACTIVATED\"));\n-    close();\n-\n-    startZeebe(CURRENT_VERSION);\n-    client.newCompleteCommand(jobsResponse.getJobs().get(0).getKey()).send().join();\n+    final long key = beforeUpgrade.apply(state);\n \n     // then\n-    TestUtil.waitUntil(() -> findElementInState(PROCESS_ID, \"ELEMENT_COMPLETED\"));\n+    afterUpgrade.accept(state, key);\n+    TestUtil.waitUntil(() -> state.findElementInState(PROCESS_ID, \"ELEMENT_COMPLETED\"));\n   }\n \n   @Test\n-  public void shouldSupportOlderVersionedGateway() {\n-    // given\n-    startZeebe(false, CURRENT_VERSION, lastVersion);\n-\n-    // when\n-    client.newDeployCommand().addWorkflowModel(WORKFLOW, PROCESS_ID + \".bpmn\").send().join();\n-    client.newCreateInstanceCommand().bpmnProcessId(PROCESS_ID).latestVersion().send().join();\n-\n-    final ActivateJobsResponse jobsResponse =\n-        client.newActivateJobsCommand().jobType(TASK).maxJobsToActivate(1).send().join();\n-\n-    client.newCompleteCommand(jobsResponse.getJobs().get(0).getKey()).send().join();\n-\n-    // then\n-    TestUtil.waitUntil(() -> findElementInState(PROCESS_ID, \"ELEMENT_COMPLETED\"));\n-  }\n-\n-  private void startZeebe(final String version) {\n-    startZeebe(true, version, null);\n+  public void shouldRestoreFromOldSnapshot() {\n+    upgradeZeebe(false);\n   }\n \n-  private void startZeebe(\n-      final boolean embeddedGateway, final String brokerVersion, final String gatewayVersion) {\n-    network = Network.newNetwork();\n-\n-    container =\n-        new ZeebeBrokerContainer(brokerVersion)\n-            .withFileSystemBind(temp.getRoot().getPath(), \"/usr/local/zeebe/data\")\n-            .withNetwork(network)\n-            .withEmbeddedGateway(embeddedGateway)\n-            .withDebug(true)\n-            .withLogLevel(Level.DEBUG);\n-    container.start();\n-\n-    String contactPoint = container.getExternalAddress(ZeebePort.GATEWAY);\n-\n-    if (!embeddedGateway) {\n-      gateway =\n-          new ZeebeStandaloneGatewayContainer(gatewayVersion)\n-              .withContactPoint(container.getContactPoint())\n-              .withNetwork(network)\n-              .withLogLevel(Level.DEBUG);\n-      gateway.start();\n-      contactPoint = gateway.getExternalAddress(ZeebePort.GATEWAY);\n-    }\n-\n-    client = ZeebeClient.newClientBuilder().brokerContactPoint(contactPoint).usePlaintext().build();\n-  }\n-\n-  private boolean findElementInState(final String element, final String intent) {\n-    final String[] lines = container.getLogs().split(\"\\n\");\n-\n-    for (int i = lines.length - 1; i >= 0; --i) {\n-      if (lines[i].contains(String.format(\"\\\"elementId\\\":\\\"%s\\\"\", element))\n-          && lines[i].contains(String.format(\"\\\"intent\\\":\\\"%s\\\"\", intent))) {\n-        return true;\n-      }\n-    }\n-\n-    return false;\n+  @Test\n+  public void shouldReprocessOldRecords() {\n+    upgradeZeebe(true);\n   }\n \n-  private void close() {\n-    if (client != null) {\n-      client.close();\n-      client = null;\n-    }\n-\n-    if (gateway != null) {\n-      gateway.close();\n-      gateway = null;\n-    }\n+  private void upgradeZeebe(final boolean deleteSnapshot) {\n+    // given\n+    state.startBrokerEmbeddedGateway(lastVersion, tmpFolder.getRoot().getPath());\n+\n+    state\n+        .client()\n+        .newDeployCommand()\n+        .addWorkflowModel(workflow, PROCESS_ID + \".bpmn\")\n+        .send()\n+        .join();\n+    state\n+        .client()\n+        .newCreateInstanceCommand()\n+        .bpmnProcessId(PROCESS_ID)\n+        .latestVersion()\n+        .send()\n+        .join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eab0399d94bf4c45da5c43710f13e0fd0fac9eda"}, "originalPosition": 270}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODAyNTM1OnYy", "diffSide": "RIGHT", "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNToyMjo1MVrOFp6KIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzowNjo1NFrOFqjzJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4ODgwMQ==", "bodyText": "Currently, the before and after steps only use the client. So, we don't need to pass the whole rule object.", "url": "https://github.com/camunda-cloud/zeebe/pull/3830#discussion_r379488801", "createdAt": "2020-02-14T15:22:51Z", "author": {"login": "saig0"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "diffHunk": "@@ -7,193 +7,168 @@\n  */\n package io.zeebe.test;\n \n-import io.zeebe.client.ZeebeClient;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n import io.zeebe.client.api.response.ActivateJobsResponse;\n-import io.zeebe.containers.ZeebeBrokerContainer;\n-import io.zeebe.containers.ZeebePort;\n-import io.zeebe.containers.ZeebeStandaloneGatewayContainer;\n import io.zeebe.model.bpmn.Bpmn;\n import io.zeebe.model.bpmn.BpmnModelInstance;\n import io.zeebe.test.util.TestUtil;\n+import io.zeebe.util.VersionUtil;\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.concurrent.TimeUnit;\n-import org.junit.BeforeClass;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+import org.assertj.core.util.Files;\n import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.RuleChain;\n import org.junit.rules.TemporaryFolder;\n-import org.junit.rules.TestWatcher;\n import org.junit.rules.Timeout;\n-import org.junit.runner.Description;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.slf4j.event.Level;\n-import org.testcontainers.containers.Network;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameter;\n+import org.junit.runners.Parameterized.Parameters;\n \n+@RunWith(Parameterized.class)\n public class UpgradeTest {\n \n-  private static final Logger LOG = LoggerFactory.getLogger(UpgradeTest.class);\n   private static final String CURRENT_VERSION = \"current-test\";\n   private static final String PROCESS_ID = \"process\";\n   private static final String TASK = \"task\";\n-  private static final BpmnModelInstance WORKFLOW =\n-      Bpmn.createExecutableProcess(PROCESS_ID)\n-          .startEvent()\n-          .serviceTask(TASK, t -> t.zeebeTaskType(TASK))\n-          .endEvent()\n-          .done();\n-  private static String lastVersion = \"0.22.1\";\n-\n-  @Rule public Timeout timeout = new Timeout(2, TimeUnit.MINUTES);\n-  @Rule public TemporaryFolder temp = new TemporaryFolder();\n-  @Rule public TestWatcher watchman = new ContainerTestWatcher();\n-\n-  private ZeebeBrokerContainer container;\n-  private ZeebeStandaloneGatewayContainer gateway;\n-  private ZeebeClient client;\n-  private Network network;\n-\n-  @BeforeClass\n-  public static void beforeClass() {\n-    final String version = System.getProperty(\"lastVersion\");\n-    if (version != null) {\n-      lastVersion = version;\n-    } else {\n-      LOG.info(\n-          \"Expected last version property to be set but none was found. Running test with default version {}\",\n-          lastVersion);\n-    }\n+  private static String lastVersion = VersionUtil.getPreviousVersion();\n+\n+  @Rule public TemporaryFolder tmpFolder = new TemporaryFolder();\n+  @Rule public ContainerStateRule state = new ContainerStateRule();\n+\n+  @Rule\n+  public RuleChain chain =\n+      RuleChain.outerRule(new Timeout(2, TimeUnit.MINUTES)).around(tmpFolder).around(state);\n+\n+  @Parameter public String testName;\n+\n+  @Parameter(1)\n+  public BpmnModelInstance workflow;\n+\n+  /**\n+   * Should make zeebe write records and write to state of the feature being tested (e.g., jobs,\n+   * messages). The workflow should be left in a waiting state so Zeebe can be restarted and\n+   * execution can be continued after. Takes the container rule as input and outputs a long which\n+   * can be used after the upgrade to continue the execution.\n+   */\n+  @Parameter(2)\n+  public Function<ContainerStateRule, Long> beforeUpgrade;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eab0399d94bf4c45da5c43710f13e0fd0fac9eda"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA3MDMyOQ==", "bodyText": "The before step uses the rule and it's likely that in the future other cases might want to wait for an event in the after step so the rule comes in handy there", "url": "https://github.com/camunda-cloud/zeebe/pull/3830#discussion_r380070329", "createdAt": "2020-02-17T09:33:47Z", "author": {"login": "MiguelPires"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "diffHunk": "@@ -7,193 +7,168 @@\n  */\n package io.zeebe.test;\n \n-import io.zeebe.client.ZeebeClient;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n import io.zeebe.client.api.response.ActivateJobsResponse;\n-import io.zeebe.containers.ZeebeBrokerContainer;\n-import io.zeebe.containers.ZeebePort;\n-import io.zeebe.containers.ZeebeStandaloneGatewayContainer;\n import io.zeebe.model.bpmn.Bpmn;\n import io.zeebe.model.bpmn.BpmnModelInstance;\n import io.zeebe.test.util.TestUtil;\n+import io.zeebe.util.VersionUtil;\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.concurrent.TimeUnit;\n-import org.junit.BeforeClass;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+import org.assertj.core.util.Files;\n import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.RuleChain;\n import org.junit.rules.TemporaryFolder;\n-import org.junit.rules.TestWatcher;\n import org.junit.rules.Timeout;\n-import org.junit.runner.Description;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.slf4j.event.Level;\n-import org.testcontainers.containers.Network;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameter;\n+import org.junit.runners.Parameterized.Parameters;\n \n+@RunWith(Parameterized.class)\n public class UpgradeTest {\n \n-  private static final Logger LOG = LoggerFactory.getLogger(UpgradeTest.class);\n   private static final String CURRENT_VERSION = \"current-test\";\n   private static final String PROCESS_ID = \"process\";\n   private static final String TASK = \"task\";\n-  private static final BpmnModelInstance WORKFLOW =\n-      Bpmn.createExecutableProcess(PROCESS_ID)\n-          .startEvent()\n-          .serviceTask(TASK, t -> t.zeebeTaskType(TASK))\n-          .endEvent()\n-          .done();\n-  private static String lastVersion = \"0.22.1\";\n-\n-  @Rule public Timeout timeout = new Timeout(2, TimeUnit.MINUTES);\n-  @Rule public TemporaryFolder temp = new TemporaryFolder();\n-  @Rule public TestWatcher watchman = new ContainerTestWatcher();\n-\n-  private ZeebeBrokerContainer container;\n-  private ZeebeStandaloneGatewayContainer gateway;\n-  private ZeebeClient client;\n-  private Network network;\n-\n-  @BeforeClass\n-  public static void beforeClass() {\n-    final String version = System.getProperty(\"lastVersion\");\n-    if (version != null) {\n-      lastVersion = version;\n-    } else {\n-      LOG.info(\n-          \"Expected last version property to be set but none was found. Running test with default version {}\",\n-          lastVersion);\n-    }\n+  private static String lastVersion = VersionUtil.getPreviousVersion();\n+\n+  @Rule public TemporaryFolder tmpFolder = new TemporaryFolder();\n+  @Rule public ContainerStateRule state = new ContainerStateRule();\n+\n+  @Rule\n+  public RuleChain chain =\n+      RuleChain.outerRule(new Timeout(2, TimeUnit.MINUTES)).around(tmpFolder).around(state);\n+\n+  @Parameter public String testName;\n+\n+  @Parameter(1)\n+  public BpmnModelInstance workflow;\n+\n+  /**\n+   * Should make zeebe write records and write to state of the feature being tested (e.g., jobs,\n+   * messages). The workflow should be left in a waiting state so Zeebe can be restarted and\n+   * execution can be continued after. Takes the container rule as input and outputs a long which\n+   * can be used after the upgrade to continue the execution.\n+   */\n+  @Parameter(2)\n+  public Function<ContainerStateRule, Long> beforeUpgrade;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4ODgwMQ=="}, "originalCommit": {"oid": "eab0399d94bf4c45da5c43710f13e0fd0fac9eda"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3MTA0NA==", "bodyText": "Ok \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/3830#discussion_r380171044", "createdAt": "2020-02-17T13:06:54Z", "author": {"login": "saig0"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "diffHunk": "@@ -7,193 +7,168 @@\n  */\n package io.zeebe.test;\n \n-import io.zeebe.client.ZeebeClient;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n import io.zeebe.client.api.response.ActivateJobsResponse;\n-import io.zeebe.containers.ZeebeBrokerContainer;\n-import io.zeebe.containers.ZeebePort;\n-import io.zeebe.containers.ZeebeStandaloneGatewayContainer;\n import io.zeebe.model.bpmn.Bpmn;\n import io.zeebe.model.bpmn.BpmnModelInstance;\n import io.zeebe.test.util.TestUtil;\n+import io.zeebe.util.VersionUtil;\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.concurrent.TimeUnit;\n-import org.junit.BeforeClass;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+import org.assertj.core.util.Files;\n import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.RuleChain;\n import org.junit.rules.TemporaryFolder;\n-import org.junit.rules.TestWatcher;\n import org.junit.rules.Timeout;\n-import org.junit.runner.Description;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.slf4j.event.Level;\n-import org.testcontainers.containers.Network;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameter;\n+import org.junit.runners.Parameterized.Parameters;\n \n+@RunWith(Parameterized.class)\n public class UpgradeTest {\n \n-  private static final Logger LOG = LoggerFactory.getLogger(UpgradeTest.class);\n   private static final String CURRENT_VERSION = \"current-test\";\n   private static final String PROCESS_ID = \"process\";\n   private static final String TASK = \"task\";\n-  private static final BpmnModelInstance WORKFLOW =\n-      Bpmn.createExecutableProcess(PROCESS_ID)\n-          .startEvent()\n-          .serviceTask(TASK, t -> t.zeebeTaskType(TASK))\n-          .endEvent()\n-          .done();\n-  private static String lastVersion = \"0.22.1\";\n-\n-  @Rule public Timeout timeout = new Timeout(2, TimeUnit.MINUTES);\n-  @Rule public TemporaryFolder temp = new TemporaryFolder();\n-  @Rule public TestWatcher watchman = new ContainerTestWatcher();\n-\n-  private ZeebeBrokerContainer container;\n-  private ZeebeStandaloneGatewayContainer gateway;\n-  private ZeebeClient client;\n-  private Network network;\n-\n-  @BeforeClass\n-  public static void beforeClass() {\n-    final String version = System.getProperty(\"lastVersion\");\n-    if (version != null) {\n-      lastVersion = version;\n-    } else {\n-      LOG.info(\n-          \"Expected last version property to be set but none was found. Running test with default version {}\",\n-          lastVersion);\n-    }\n+  private static String lastVersion = VersionUtil.getPreviousVersion();\n+\n+  @Rule public TemporaryFolder tmpFolder = new TemporaryFolder();\n+  @Rule public ContainerStateRule state = new ContainerStateRule();\n+\n+  @Rule\n+  public RuleChain chain =\n+      RuleChain.outerRule(new Timeout(2, TimeUnit.MINUTES)).around(tmpFolder).around(state);\n+\n+  @Parameter public String testName;\n+\n+  @Parameter(1)\n+  public BpmnModelInstance workflow;\n+\n+  /**\n+   * Should make zeebe write records and write to state of the feature being tested (e.g., jobs,\n+   * messages). The workflow should be left in a waiting state so Zeebe can be restarted and\n+   * execution can be continued after. Takes the container rule as input and outputs a long which\n+   * can be used after the upgrade to continue the execution.\n+   */\n+  @Parameter(2)\n+  public Function<ContainerStateRule, Long> beforeUpgrade;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ4ODgwMQ=="}, "originalCommit": {"oid": "eab0399d94bf4c45da5c43710f13e0fd0fac9eda"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODE1MDM2OnYy", "diffSide": "RIGHT", "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNTo1NzoyN1rOFp7XUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNTo1NzoyN1rOFp7XUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTUwODU2Mg==", "bodyText": "The scenario is hard to read in this format. Maybe, it would help to structure it a bit.\nFor example:\n return Arrays.asList(\n        new Object[][] {\n              scenario(\"job\")\n                     .workflow(wf -> wf.serviceTask(TASK, t -> t.zeebeTaskType(TASK)))\n                     .beforeUpgrade(this::activateJob)\n                     .afterUpgrade(this::completeJob)\n});", "url": "https://github.com/camunda-cloud/zeebe/pull/3830#discussion_r379508562", "createdAt": "2020-02-14T15:57:27Z", "author": {"login": "saig0"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "diffHunk": "@@ -7,193 +7,168 @@\n  */\n package io.zeebe.test;\n \n-import io.zeebe.client.ZeebeClient;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n import io.zeebe.client.api.response.ActivateJobsResponse;\n-import io.zeebe.containers.ZeebeBrokerContainer;\n-import io.zeebe.containers.ZeebePort;\n-import io.zeebe.containers.ZeebeStandaloneGatewayContainer;\n import io.zeebe.model.bpmn.Bpmn;\n import io.zeebe.model.bpmn.BpmnModelInstance;\n import io.zeebe.test.util.TestUtil;\n+import io.zeebe.util.VersionUtil;\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collection;\n import java.util.concurrent.TimeUnit;\n-import org.junit.BeforeClass;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+import org.assertj.core.util.Files;\n import org.junit.Rule;\n import org.junit.Test;\n+import org.junit.rules.RuleChain;\n import org.junit.rules.TemporaryFolder;\n-import org.junit.rules.TestWatcher;\n import org.junit.rules.Timeout;\n-import org.junit.runner.Description;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.slf4j.event.Level;\n-import org.testcontainers.containers.Network;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameter;\n+import org.junit.runners.Parameterized.Parameters;\n \n+@RunWith(Parameterized.class)\n public class UpgradeTest {\n \n-  private static final Logger LOG = LoggerFactory.getLogger(UpgradeTest.class);\n   private static final String CURRENT_VERSION = \"current-test\";\n   private static final String PROCESS_ID = \"process\";\n   private static final String TASK = \"task\";\n-  private static final BpmnModelInstance WORKFLOW =\n-      Bpmn.createExecutableProcess(PROCESS_ID)\n-          .startEvent()\n-          .serviceTask(TASK, t -> t.zeebeTaskType(TASK))\n-          .endEvent()\n-          .done();\n-  private static String lastVersion = \"0.22.1\";\n-\n-  @Rule public Timeout timeout = new Timeout(2, TimeUnit.MINUTES);\n-  @Rule public TemporaryFolder temp = new TemporaryFolder();\n-  @Rule public TestWatcher watchman = new ContainerTestWatcher();\n-\n-  private ZeebeBrokerContainer container;\n-  private ZeebeStandaloneGatewayContainer gateway;\n-  private ZeebeClient client;\n-  private Network network;\n-\n-  @BeforeClass\n-  public static void beforeClass() {\n-    final String version = System.getProperty(\"lastVersion\");\n-    if (version != null) {\n-      lastVersion = version;\n-    } else {\n-      LOG.info(\n-          \"Expected last version property to be set but none was found. Running test with default version {}\",\n-          lastVersion);\n-    }\n+  private static String lastVersion = VersionUtil.getPreviousVersion();\n+\n+  @Rule public TemporaryFolder tmpFolder = new TemporaryFolder();\n+  @Rule public ContainerStateRule state = new ContainerStateRule();\n+\n+  @Rule\n+  public RuleChain chain =\n+      RuleChain.outerRule(new Timeout(2, TimeUnit.MINUTES)).around(tmpFolder).around(state);\n+\n+  @Parameter public String testName;\n+\n+  @Parameter(1)\n+  public BpmnModelInstance workflow;\n+\n+  /**\n+   * Should make zeebe write records and write to state of the feature being tested (e.g., jobs,\n+   * messages). The workflow should be left in a waiting state so Zeebe can be restarted and\n+   * execution can be continued after. Takes the container rule as input and outputs a long which\n+   * can be used after the upgrade to continue the execution.\n+   */\n+  @Parameter(2)\n+  public Function<ContainerStateRule, Long> beforeUpgrade;\n+\n+  /**\n+   * Should continue the instance after the upgrade in a way that will complete the workflow. Takes\n+   * the container rule and a long (e.g., a key) as input.\n+   */\n+  @Parameter(3)\n+  public BiConsumer<ContainerStateRule, Long> afterUpgrade;\n+\n+  @Parameters(name = \"{0}\")\n+  public static Collection<Object[]> data() {\n+    return Arrays.asList(\n+        new Object[][] {\n+          {\n+            \"job\",\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .serviceTask(TASK, t -> t.zeebeTaskType(TASK))\n+                .endEvent()\n+                .done(),\n+            (Function<ContainerStateRule, Long>)\n+                (ContainerStateRule state) -> {\n+                  final ActivateJobsResponse jobsResponse =\n+                      state\n+                          .client()\n+                          .newActivateJobsCommand()\n+                          .jobType(TASK)\n+                          .maxJobsToActivate(1)\n+                          .send()\n+                          .join();\n+\n+                  TestUtil.waitUntil(() -> state.findElementInState(TASK, \"ACTIVATED\"));\n+                  return jobsResponse.getJobs().get(0).getKey();\n+                },\n+            (BiConsumer<ContainerStateRule, Long>)\n+                (ContainerStateRule state, Long key) ->\n+                    state.client().newCompleteCommand(key).send().join()\n+          },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00e64619fb969cedf077f76bb7de34b50e479aa0"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjI3MzAwOnYy", "diffSide": "RIGHT", "path": ".ci/podSpecs/distribution.yml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOToxMTo1NVrOFt96MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwOToxMTo1NVrOFt96MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc0NDU2MQ==", "bodyText": "I think we increased it because we saw some builds failing in the linker phase. Maybe we can increase it to just 2Gi to be safe?", "url": "https://github.com/camunda-cloud/zeebe/pull/3830#discussion_r383744561", "createdAt": "2020-02-25T09:11:55Z", "author": {"login": "npepinpe"}, "path": ".ci/podSpecs/distribution.yml", "diffHunk": "@@ -44,27 +55,43 @@ spec:\n             -XX:+UseContainerSupport\n         - name: DOCKER_HOST\n           value: tcp://localhost:2375\n+        - name: ZEEBE_CI_SHARED_DATA\n+          value: /home/shared\n       resources:\n         limits:\n           cpu: 2\n           memory: 4Gi\n         requests:\n           cpu: 2\n           memory: 4Gi\n+      securityContext:\n+        privileged: true\n+      volumeMounts:\n+        - name: shared-data\n+          mountPath: /home/shared\n+          mountPropagation: Bidirectional\n     - name: golang\n       image: golang:1.13.4\n       command: [\"cat\"]\n       tty: true\n       resources:\n         limits:\n           cpu: 3\n-          memory: 4Gi\n+          memory: 1Gi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54e93e39d3da2c14f12a145230b9cde97e617d63"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4972, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}