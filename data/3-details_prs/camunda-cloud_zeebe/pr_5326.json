{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzNDY5NTc1", "number": 5326, "title": "Control variable propagation of call activities with new attribute", "bodyText": "Description\n\nadd a new Zeebe attribute propagateAllChildVariables for call activities to control if variables should be copied from a child instance\nthe new attribute is set by default to be backward-compatible and not change the existing behavior\n\nRelated issues\ncloses #4860\nDefinition of Done\nNot all items need to be done depending on the issue and the pull request.\nCode changes:\n\n The changes are backwards compatibility with previous versions\n If it fixes a bug then PRs are created to backport the fix to the last two minor versions\n\nTesting:\n\n There are unit/integration tests that verify all acceptance criterias of the issue\n New tests are written to ensure backwards compatibility with further versions\n The behavior is tested manually\n The impact of the changes is verified by a benchmark\n\nDocumentation:\n\n The documentation is updated (e.g. BPMN reference, configuration, examples, get-started guides, etc.)\n New content is added to the release announcement", "createdAt": "2020-09-10T07:13:52Z", "url": "https://github.com/camunda-cloud/zeebe/pull/5326", "merged": true, "mergeCommit": {"oid": "186bf764e0105ab0b5ed8b94ed6a7ecf91ae78a7"}, "closed": true, "closedAt": "2020-09-15T08:53:44Z", "author": {"login": "saig0"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHcGD4ABqjM3NDk1NTA5MjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJCQCigBqjM3NjY3MjEzNjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13a5f23074b35141e088d05ae892fcdc834fbcc5", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/13a5f23074b35141e088d05ae892fcdc834fbcc5", "committedDate": "2020-09-10T07:56:49Z", "message": "docs(bpmn-workflows): update call activity docs"}, "afterCommit": {"oid": "28f7dd22e636261f78b015e0a9c6d07c6443cc00", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/28f7dd22e636261f78b015e0a9c6d07c6443cc00", "committedDate": "2020-09-10T07:58:29Z", "message": "docs(bpmn-workflows): update call activity docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1OTE3MDky", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#pullrequestreview-485917092", "createdAt": "2020-09-10T13:15:58Z", "commit": {"oid": "28f7dd22e636261f78b015e0a9c6d07c6443cc00"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzoxNTo1OFrOHPzB1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzo0NjowOFrOHP0msA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMyNjc0Mg==", "bodyText": "Why explicitly only this interface? As I understand it we want to be backwards compatible, so we should change or delete existing interfaces, but we should always be able to add new ones right?", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r486326742", "createdAt": "2020-09-10T13:15:58Z", "author": {"login": "korthout"}, "path": "bpmn-model/pom.xml", "diffHunk": "@@ -57,6 +59,16 @@\n       <plugin>\n         <groupId>org.codehaus.mojo</groupId>\n         <artifactId>clirr-maven-plugin</artifactId>\n+        <configuration>\n+          <ignored>\n+            <ignored>\n+              <!-- ignore new methods in the Zeebe element instance interfaces -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f7dd22e636261f78b015e0a9c6d07c6443cc00"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0MDMxMQ==", "bodyText": "This behavior can be customized by defining output mappings at the call activity\n\nIs that true? Is the behavior still working for variables that are not defined in the output mapping when there are other output mappings defined and this prop is set to true?", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r486340311", "createdAt": "2020-09-10T13:34:39Z", "author": {"login": "korthout"}, "path": "docs/src/bpmn-workflows/call-activities/call-activities.md", "diffHunk": "@@ -32,9 +32,9 @@ When the call activity is activated then **all variables** of the call activity\n \n Input mappings can be used to create new local variables in the scope of the call activity. These variables are also copied to the created workflow instance.\n \n-By default, all variables of the created workflow instance are propagated to the call activity. This behavior can be customized by defining output mappings at the call activity. The output mappings are applied on completing the call activity.\n-This is especially important in the case of a call activity in a parallel flow to avoid overriding variables (e.g. when it is marked as\n-[parallel multi-instance](/bpmn-workflows/multi-instance/multi-instance.html#variable-mappings)).\n+If the attribute `propagateAllChildVariables` is set (default: `true`) then all variables of the created workflow instance are propagated to the call activity. This behavior can be customized by defining output mappings at the call activity. The output mappings are applied on completing the call activity.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f7dd22e636261f78b015e0a9c6d07c6443cc00"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0MjgyMw==", "bodyText": "I'm not sure this if statement is correct. If there are output mappings, but the new property is disabled, then this would still propagate all temp vars.", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r486342823", "createdAt": "2020-09-10T13:37:23Z", "author": {"login": "korthout"}, "path": "engine/src/main/java/io/zeebe/engine/processing/bpmn/container/CallActivityProcessor.java", "diffHunk": "@@ -136,7 +136,12 @@ public void onChildCompleted(\n     switch (currentState) {\n       case ELEMENT_ACTIVATED:\n         stateTransitionBehavior.transitionToCompleting(callActivityContext);\n-        stateBehavior.propagateTemporaryVariables(childContext, callActivityContext);\n+\n+        if (element.getOutputMappings().isPresent()\n+            || element.isPropagateAllChildVariablesEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f7dd22e636261f78b015e0a9c6d07c6443cc00"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0NDY4Mg==", "bodyText": "Would be good to add a test case for the following cases:\n\npropagateAllChildVariables = false && no output mappings\npropagateAllChildVariables = false && output mappings\npropagateAllChildVariables = true && no output mappings\npropagateAllChildVariables = true && output mappings", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r486344682", "createdAt": "2020-09-10T13:38:58Z", "author": {"login": "korthout"}, "path": "engine/src/test/java/io/zeebe/engine/processing/bpmn/activity/CallActivityTest.java", "diffHunk": "@@ -222,6 +222,34 @@ public void shouldPropagateVariablesToParent() {\n         .containsExactly(tuple(workflowInstanceKey, \"y\", \"2\"));\n   }\n \n+  @Test\n+  public void shouldNotPropagateVariablesToParentIfDisabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f7dd22e636261f78b015e0a9c6d07c6443cc00"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM1MjU2MA==", "bodyText": "It might be better to use INPUT_COLLECTION.size() instead of jobCounter.get(), to make the expected part less 'dynamic'.", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r486352560", "createdAt": "2020-09-10T13:46:08Z", "author": {"login": "korthout"}, "path": "engine/src/test/java/io/zeebe/engine/processing/bpmn/multiinstance/MultiInstanceCallActivityTest.java", "diffHunk": "@@ -185,6 +195,68 @@ public void shouldCancelChildInstancesOnTermination() {\n             BpmnElementType.PROCESS);\n   }\n \n+  @Test\n+  public void shouldCollectOutputFromChildInstance() {\n+    // given\n+    final BpmnModelInstance parentWorkflow =\n+        parentWorkflowWithCallActivity(\n+            callActivity ->\n+                callActivity\n+                    .zeebeOutputExpression(\"x\", \"result\")\n+                    .multiInstance(\n+                        b ->\n+                            b.zeebeInputCollectionExpression(INPUT_COLLECTION_VARIABLE)\n+                                .zeebeOutputElementExpression(\"result\")\n+                                .zeebeOutputCollection(\"results\")));\n+\n+    ENGINE.deployment().withXmlResource(\"wf-parent.bpmn\", parentWorkflow).deploy();\n+\n+    final long workflowInstanceKey =\n+        ENGINE\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID_PARENT)\n+            .withVariable(INPUT_COLLECTION_VARIABLE, INPUT_COLLECTION)\n+            .create();\n+\n+    // when\n+    awaitJobsCreated(INPUT_COLLECTION.size());\n+\n+    final var jobCounter = new AtomicInteger();\n+\n+    ENGINE\n+        .jobs()\n+        .withType(jobType)\n+        .activate()\n+        .getValue()\n+        .getJobKeys()\n+        .forEach(\n+            jobKey ->\n+                ENGINE\n+                    .job()\n+                    .withKey(jobKey)\n+                    .withVariable(\"x\", jobCounter.incrementAndGet())\n+                    .complete());\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.MULTI_INSTANCE_BODY)\n+        .await();\n+\n+    // then\n+    final var expectedOutputCollection =\n+        JsonUtil.toJson(\n+            IntStream.rangeClosed(1, jobCounter.get()).boxed().collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28f7dd22e636261f78b015e0a9c6d07c6443cc00"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MzY4MTgx", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#pullrequestreview-488368181", "createdAt": "2020-09-15T06:41:25Z", "commit": {"oid": "67b6fdc493e81f8962c88f4f4fa21c7edeba8e59"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjo0MToyNlrOHRy7hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQwNjo0MToyNlrOHRy7hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODQyMjI3Nw==", "bodyText": "Nitpick: personally, I would write this sentence differently. But do with this what you want. \ud83d\ude04\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the attribute `propagateAllChildVariables` is set (default: `true`) then all variables of the created workflow instance are propagated to the call activity. This behavior can be customized by defining output mappings at the call activity. The output mappings are applied on completing the call activity and only the variables are propagated that are defined in the output mappings.\n          \n          \n            \n            If the attribute `propagateAllChildVariables` is set (default: `true`) then all variables of the created workflow instance are propagated to the call activity. This behavior can be customized by defining output mappings at the call activity. The output mappings are applied on completing the call activity and only those variables that are defined in the output mappings are propagated.", "url": "https://github.com/camunda-cloud/zeebe/pull/5326#discussion_r488422277", "createdAt": "2020-09-15T06:41:26Z", "author": {"login": "korthout"}, "path": "docs/src/bpmn-workflows/call-activities/call-activities.md", "diffHunk": "@@ -32,7 +32,7 @@ When the call activity is activated then **all variables** of the call activity\n \n Input mappings can be used to create new local variables in the scope of the call activity. These variables are also copied to the created workflow instance.\n \n-If the attribute `propagateAllChildVariables` is set (default: `true`) then all variables of the created workflow instance are propagated to the call activity. This behavior can be customized by defining output mappings at the call activity. The output mappings are applied on completing the call activity.\n+If the attribute `propagateAllChildVariables` is set (default: `true`) then all variables of the created workflow instance are propagated to the call activity. This behavior can be customized by defining output mappings at the call activity. The output mappings are applied on completing the call activity and only the variables are propagated that are defined in the output mappings.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67b6fdc493e81f8962c88f4f4fa21c7edeba8e59"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec13d1bcc13b152dbf62f7da15ad14d74b054674", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/ec13d1bcc13b152dbf62f7da15ad14d74b054674", "committedDate": "2020-09-15T06:59:42Z", "message": "fix(engine): control variable propagation with new attribute\n\n* add a new Zeebe attribute for call activities to control if variables should be copied from a child instance\n* the new attribute is set by default to be backward-compatible and not change the existing behavior"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "10e566ab7a01aa6504d7427436ec25373fe4f2e4", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/10e566ab7a01aa6504d7427436ec25373fe4f2e4", "committedDate": "2020-09-15T06:58:56Z", "message": "chore(engine): apply review suggestion\n\nCo-authored-by: Nico Korthout <korthout@users.noreply.github.com>"}, "afterCommit": {"oid": "ec13d1bcc13b152dbf62f7da15ad14d74b054674", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/ec13d1bcc13b152dbf62f7da15ad14d74b054674", "committedDate": "2020-09-15T06:59:42Z", "message": "fix(engine): control variable propagation with new attribute\n\n* add a new Zeebe attribute for call activities to control if variables should be copied from a child instance\n* the new attribute is set by default to be backward-compatible and not change the existing behavior"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2485, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}