{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMzQxODUx", "number": 4110, "title": "feat(broker): add FEEL expression for job type", "bodyText": "Description\nAdds FEEL expressions for the job type\nRelated issues\ncloses #3802\nPull Request Checklist\n\n[  X ] All commit messages match our commit message guidelines\n[ X ] The submitting code follows our code style\n[ X ] If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-03-23T11:59:54Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4110", "merged": true, "mergeCommit": {"oid": "11ec4d4234a24c02568959db72faa278d51fdcf0"}, "closed": true, "closedAt": "2020-03-25T08:03:34Z", "author": {"login": "pihme"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQd7HKgBqjMxNTUxMDM2NjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRCnk7ABqjMxNjI4MTQ5Mzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bfb4df55364e17a0d2ed1a07a9a37e3543ef42b2", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/bfb4df55364e17a0d2ed1a07a9a37e3543ef42b2", "committedDate": "2020-03-23T12:41:56Z", "message": "chore(broker): relax criteria to identify static values"}, "afterCommit": {"oid": "f117b4ee8dd1cc1421a2129d9dce443e3071381b", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/f117b4ee8dd1cc1421a2129d9dce443e3071381b", "committedDate": "2020-03-23T13:00:16Z", "message": "chore(broker): relax criteria to identify static values"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMDAyNDAy", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#pullrequestreview-380002402", "createdAt": "2020-03-24T05:05:54Z", "commit": {"oid": "f117b4ee8dd1cc1421a2129d9dce443e3071381b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTowNTo1NFrOF6hHig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNTo1NDowNVrOF6h1mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNDMzMA==", "bodyText": "No need to define the version in the /engine/pom.xml. All versions are defined in the /bom/pom.xml.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  <version>0.23.0-SNAPSHOT</version>", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r396904330", "createdAt": "2020-03-24T05:05:54Z", "author": {"login": "saig0"}, "path": "engine/pom.xml", "diffHunk": "@@ -59,6 +59,7 @@\n     <dependency>\n       <groupId>io.zeebe</groupId>\n       <artifactId>zeebe-msgpack-core</artifactId>\n+      <version>0.23.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f117b4ee8dd1cc1421a2129d9dce443e3071381b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwNzYwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final Expression correlationKeyExpression =\n          \n          \n            \n                    context.getExpressionLanguage().parseExpression(taskDefinition.getType());\n          \n          \n            \n            \n          \n          \n            \n                serviceTask.setType(correlationKeyExpression);\n          \n          \n            \n                final Expression jobTypeExpression =\n          \n          \n            \n                    context.getExpressionLanguage().parseExpression(taskDefinition.getType());\n          \n          \n            \n            \n          \n          \n            \n                serviceTask.setType(jobTypeExpression);", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r396907601", "createdAt": "2020-03-24T05:20:33Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/transformer/ServiceTaskTransformer.java", "diffHunk": "@@ -64,11 +65,16 @@ private void bindLifecycle(final ExecutableServiceTask serviceTask) {\n   }\n \n   private void transformTaskDefinition(\n-      final ServiceTask element, final ExecutableServiceTask serviceTask) {\n+      final ServiceTask element,\n+      final ExecutableServiceTask serviceTask,\n+      final TransformContext context) {\n     final ZeebeTaskDefinition taskDefinition =\n         element.getSingleExtensionElement(ZeebeTaskDefinition.class);\n \n-    serviceTask.setType(taskDefinition.getType());\n+    final Expression correlationKeyExpression =\n+        context.getExpressionLanguage().parseExpression(taskDefinition.getType());\n+\n+    serviceTask.setType(correlationKeyExpression);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f117b4ee8dd1cc1421a2129d9dce443e3071381b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkwODk5MA==", "bodyText": "I personally prefer ifPresent().\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final Optional<DirectBuffer> optJobType =\n          \n          \n            \n                      expressionProcessor.evaluateStringExpression(serviceTask.getType(), context);\n          \n          \n            \n            \n          \n          \n            \n                  if (optJobType.isPresent()) {\n          \n          \n            \n                    populateJobFromTask(context, value, optJobType.get(), serviceTask);\n          \n          \n            \n                    context.getCommandWriter().appendNewCommand(JobIntent.CREATE, jobCommand);\n          \n          \n            \n                  }\n          \n          \n            \n                  expressionProcessor\n          \n          \n            \n                    .evaluateStringExpression(serviceTask.getType(), context)\n          \n          \n            \n                    .ifPresent(jobType -> {\n          \n          \n            \n                      populateJobFromTask(context, value, jobType, serviceTask);\n          \n          \n            \n                      context.getCommandWriter().appendNewCommand(JobIntent.CREATE, jobCommand);\n          \n          \n            \n                    });", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r396908990", "createdAt": "2020-03-24T05:26:07Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/servicetask/ServiceTaskElementActivatedHandler.java", "diffHunk": "@@ -36,8 +41,13 @@ protected boolean handleState(final BpmnStepContext<T> context) {\n       final WorkflowInstanceRecord value = context.getValue();\n       final ExecutableServiceTask serviceTask = context.getElement();\n \n-      populateJobFromTask(context, value, serviceTask);\n-      context.getCommandWriter().appendNewCommand(JobIntent.CREATE, jobCommand);\n+      final Optional<DirectBuffer> optJobType =\n+          expressionProcessor.evaluateStringExpression(serviceTask.getType(), context);\n+\n+      if (optJobType.isPresent()) {\n+        populateJobFromTask(context, value, optJobType.get(), serviceTask);\n+        context.getCommandWriter().appendNewCommand(JobIntent.CREATE, jobCommand);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f117b4ee8dd1cc1421a2129d9dce443e3071381b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxNjEyMQ==", "bodyText": "It might be good to check that the expression is not empty. This should be checked on validation but just to make sure...", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r396916121", "createdAt": "2020-03-24T05:54:05Z", "author": {"login": "saig0"}, "path": "expression-language/src/main/java/io/zeebe/el/impl/FeelExpressionLanguage.java", "diffHunk": "@@ -47,22 +46,12 @@ public Expression parseExpression(final String expression) {\n     ensureNotNull(\"expression\", expression);\n \n     final var expressionMatcher = EXPRESSION_PATTERN.matcher(expression);\n-    final var valueMather = STATIC_VALUE_PATTERN.matcher(expression);\n \n     if (expressionMatcher.matches()) {\n       final var unpackedExpression = expressionMatcher.group(1);\n       return parseFeelExpression(unpackedExpression);\n-\n-    } else if (valueMather.matches()) {\n-      final var value = valueMather.group();\n-      return new StaticExpression(value);\n-\n     } else {\n-      final var failureMessage =\n-          String.format(\n-              \"Expected FEEL expression (e.g. '=variableName') or static value (e.g. 'jobType') but found '%s'\",\n-              expression);\n-      return new InvalidExpression(expression, failureMessage);\n+      return new StaticExpression(expression);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f117b4ee8dd1cc1421a2129d9dce443e3071381b"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMjcyOTg2", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#pullrequestreview-380272986", "createdAt": "2020-03-24T12:46:42Z", "commit": {"oid": "7827c613d182650605dca5a0c5f754f787b4f485"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjo0Njo0M1rOF6ukgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjo1NTowNFrOF6u3pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyNDczOQ==", "bodyText": "Let's hide the expression prefix = behind the model API, as we did for the other attributes. I suggest having two methods zeebeJobTypeExpression(expression) and zeebeJobType(staticValue) - one for an expression and one for a static value.\nAdditionally, we could rename zeebeTaskType() to zeebeJobType() because it is called \"job type\" everywhere else.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .withXmlResource(workflow(t -> t.zeebeTaskType(\"=\\\"test\\\"\").zeebeTaskRetries(5)))\n          \n          \n            \n                    .withXmlResource(workflow(t -> t.zeebeJobTypeExpression(\"\\\"test\\\"\")))", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r397124739", "createdAt": "2020-03-24T12:46:43Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/activity/ServiceTaskTest.java", "diffHunk": "@@ -47,6 +47,33 @@ private static BpmnModelInstance workflow(final Consumer<ServiceTaskBuilder> con\n     return builder.endEvent().done();\n   }\n \n+  @Test\n+  public void shouldCreateJobFromServiceTaskWithJobTypeExpression() {\n+    // given\n+    ENGINE\n+        .deployment()\n+        .withXmlResource(workflow(t -> t.zeebeTaskType(\"=\\\"test\\\"\").zeebeTaskRetries(5)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7827c613d182650605dca5a0c5f754f787b4f485"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyNTA4OA==", "bodyText": "Remove unused code.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final Record<WorkflowInstanceRecordValue> taskActivated =\n          \n          \n            \n                    RecordingExporter.workflowInstanceRecords()\n          \n          \n            \n                        .withWorkflowInstanceKey(workflowInstanceKey)\n          \n          \n            \n                        .withIntent(WorkflowInstanceIntent.ELEMENT_ACTIVATED)\n          \n          \n            \n                        .withElementType(BpmnElementType.SERVICE_TASK)\n          \n          \n            \n                        .getFirst();\n          \n          \n            \n                final Record<WorkflowInstanceRecordValue> taskActivated =\n          \n          \n            \n                    RecordingExporter.workflowInstanceRecords()\n          \n          \n            \n                        .withWorkflowInstanceKey(workflowInstanceKey)\n          \n          \n            \n                        .withIntent(WorkflowInstanceIntent.ELEMENT_ACTIVATED)\n          \n          \n            \n                        .withElementType(BpmnElementType.SERVICE_TASK)\n          \n          \n            \n                        .getFirst();", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r397125088", "createdAt": "2020-03-24T12:47:24Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/activity/ServiceTaskTest.java", "diffHunk": "@@ -47,6 +47,33 @@ private static BpmnModelInstance workflow(final Consumer<ServiceTaskBuilder> con\n     return builder.endEvent().done();\n   }\n \n+  @Test\n+  public void shouldCreateJobFromServiceTaskWithJobTypeExpression() {\n+    // given\n+    ENGINE\n+        .deployment()\n+        .withXmlResource(workflow(t -> t.zeebeTaskType(\"=\\\"test\\\"\").zeebeTaskRetries(5)))\n+        .deploy();\n+\n+    // when\n+    final long workflowInstanceKey = ENGINE.workflowInstance().ofBpmnProcessId(PROCESS_ID).create();\n+\n+    // then\n+    final Record<WorkflowInstanceRecordValue> taskActivated =\n+        RecordingExporter.workflowInstanceRecords()\n+            .withWorkflowInstanceKey(workflowInstanceKey)\n+            .withIntent(WorkflowInstanceIntent.ELEMENT_ACTIVATED)\n+            .withElementType(BpmnElementType.SERVICE_TASK)\n+            .getFirst();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7827c613d182650605dca5a0c5f754f787b4f485"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyNjE4OA==", "bodyText": "It seems that you removed the test case for ZeebeLoopCharacteristics.", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r397126188", "createdAt": "2020-03-24T12:49:16Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeRuntimeValidationTest.java", "diffHunk": "@@ -149,16 +150,9 @@\n         // output element expression is not supported\n         Bpmn.createExecutableProcess(\"process\")\n             .startEvent()\n-            .serviceTask(\n-                \"task\",\n-                t ->\n-                    t.multiInstance(\n-                        m ->\n-                            m.zeebeInputCollection(\"foo\")\n-                                .zeebeOutputCollection(\"bar\")\n-                                .zeebeOutputElement(INVALID_PATH_QUERY)))\n+            .serviceTask(\"task\", t -> t.zeebeTaskType(INVALID_EXPRESSION))\n             .done(),\n-        Arrays.asList(expect(ZeebeLoopCharacteristics.class, INVALID_PATH_QUERY_MESSAGE))\n+        Arrays.asList(expect(ZeebeTaskDefinition.class, INVALID_EXPRESSION_MESSAGE))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7827c613d182650605dca5a0c5f754f787b4f485"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzEyOTYzNg==", "bodyText": "The other incident tests verify that an incident is created and can be resolved. Incidents are created at runtime when the workflow instance is executed. In case of the job type, an incident would be created if the expression fails (e.g. no variable found), or if it evaluates not to a string.\nThis test case verifies that the validation works. This is already tested in ZeebeRuntimeValidationTest.", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r397129636", "createdAt": "2020-03-24T12:55:04Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/incident/ServiceTaskIncidentTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor.workflow.incident;\n+\n+import io.zeebe.engine.util.EngineRule;\n+import io.zeebe.engine.util.client.DeploymentClient;\n+import io.zeebe.model.bpmn.Bpmn;\n+import io.zeebe.model.bpmn.BpmnModelInstance;\n+import io.zeebe.model.bpmn.builder.ServiceTaskBuilder;\n+import io.zeebe.protocol.record.Assertions;\n+import io.zeebe.protocol.record.Record;\n+import io.zeebe.protocol.record.RecordType;\n+import io.zeebe.protocol.record.RejectionType;\n+import io.zeebe.protocol.record.intent.DeploymentIntent;\n+import io.zeebe.protocol.record.value.DeploymentRecordValue;\n+import io.zeebe.test.util.record.RecordingExporter;\n+import io.zeebe.test.util.record.RecordingExporterTestWatcher;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class ServiceTaskIncidentTest {\n+\n+  @ClassRule public static final EngineRule ENGINE = EngineRule.singlePartition();\n+\n+  private static final String PROCESS_ID = \"process\";\n+\n+  @Rule\n+  public final RecordingExporterTestWatcher recordingExporterTestWatcher =\n+      new RecordingExporterTestWatcher();\n+\n+  private static BpmnModelInstance workflow(final Consumer<ServiceTaskBuilder> consumer) {\n+    final var builder = Bpmn.createExecutableProcess(PROCESS_ID).startEvent().serviceTask(\"task\");\n+\n+    consumer.accept(builder);\n+\n+    return builder.endEvent().done();\n+  }\n+\n+  @Test\n+  public void shouldRejectDeploymentfJobTypeExpressionCanNotBeEvaluated() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7827c613d182650605dca5a0c5f754f787b4f485"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNDQ0OTcz", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#pullrequestreview-380444973", "createdAt": "2020-03-24T15:48:51Z", "commit": {"oid": "7827c613d182650605dca5a0c5f754f787b4f485"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODY4MDc2", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#pullrequestreview-380868076", "createdAt": "2020-03-25T05:34:38Z", "commit": {"oid": "e50971c5e851c59c9d5dcaf455f7aca8bdf2ae93"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNTozNDozOFrOF7MsEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQwNTozNToyMlrOF7MspA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYxODE5NA==", "bodyText": "Using the job type expression builder instead of the static one.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // output element expression is not supported\n          \n          \n            \n                    Bpmn.createExecutableProcess(\"process\")\n          \n          \n            \n                        .startEvent()\n          \n          \n            \n                        .serviceTask(\"task\", t -> t.zeebeJobType(INVALID_EXPRESSION))\n          \n          \n            \n                        .done(),\n          \n          \n            \n                    Arrays.asList(expect(ZeebeTaskDefinition.class, INVALID_EXPRESSION_MESSAGE))\n          \n          \n            \n                    // invalid job type expression\n          \n          \n            \n                    Bpmn.createExecutableProcess(\"process\")\n          \n          \n            \n                        .startEvent()\n          \n          \n            \n                        .serviceTask(\"task\", t -> t.zeebeJobTypeExpression(INVALID_EXPRESSION))\n          \n          \n            \n                        .done(),\n          \n          \n            \n                    Arrays.asList(expect(ZeebeTaskDefinition.class, INVALID_EXPRESSION_MESSAGE))", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r397618194", "createdAt": "2020-03-25T05:34:38Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeRuntimeValidationTest.java", "diffHunk": "@@ -145,6 +146,14 @@\n             .done(),\n         Arrays.asList(expect(ZeebeLoopCharacteristics.class, INVALID_PATH_QUERY_MESSAGE))\n       },\n+      {\n+        // output element expression is not supported\n+        Bpmn.createExecutableProcess(\"process\")\n+            .startEvent()\n+            .serviceTask(\"task\", t -> t.zeebeJobType(INVALID_EXPRESSION))\n+            .done(),\n+        Arrays.asList(expect(ZeebeTaskDefinition.class, INVALID_EXPRESSION_MESSAGE))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50971c5e851c59c9d5dcaf455f7aca8bdf2ae93"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzYxODM0MA==", "bodyText": "The expression prefix is set by the model API builder.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String INVALID_EXPRESSION = \"=?!\";\n          \n          \n            \n              private static final String INVALID_EXPRESSION = \"?!\";", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#discussion_r397618340", "createdAt": "2020-03-25T05:35:22Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeRuntimeValidationTest.java", "diffHunk": "@@ -45,7 +46,7 @@\n   private static final String INVALID_PATH_QUERY_MESSAGE =\n       \"JSON path query is invalid: Unexpected json-path token ROOT_OBJECT\";\n \n-  private static final String INVALID_EXPRESSION = \"?!\";\n+  private static final String INVALID_EXPRESSION = \"=?!\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e50971c5e851c59c9d5dcaf455f7aca8bdf2ae93"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODg3MTUz", "url": "https://github.com/camunda-cloud/zeebe/pull/4110#pullrequestreview-380887153", "createdAt": "2020-03-25T06:38:46Z", "commit": {"oid": "d269ce6f37e6cf6b5c7ae277b490081393418f83"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62bb96a7e952228f55a506cffc36463268262e21", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/62bb96a7e952228f55a506cffc36463268262e21", "committedDate": "2020-03-25T07:37:46Z", "message": "feat(broker): add FEEL expression for job type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3b13e4ea36ffa0375e10a397aca1b3913c621eb", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/c3b13e4ea36ffa0375e10a397aca1b3913c621eb", "committedDate": "2020-03-25T07:38:46Z", "message": "chore(broker): rename 'zeebeTaskType' to 'zeebeJobType'"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d269ce6f37e6cf6b5c7ae277b490081393418f83", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/d269ce6f37e6cf6b5c7ae277b490081393418f83", "committedDate": "2020-03-25T06:29:42Z", "message": "chore(broker): incorporate review feedback\n\nCo-Authored-By: Philipp Ossler <philipp.ossler@gmail.com>"}, "afterCommit": {"oid": "c3b13e4ea36ffa0375e10a397aca1b3913c621eb", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/c3b13e4ea36ffa0375e10a397aca1b3913c621eb", "committedDate": "2020-03-25T07:38:46Z", "message": "chore(broker): rename 'zeebeTaskType' to 'zeebeJobType'"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2920, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}