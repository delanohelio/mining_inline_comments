{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNDk0MTky", "number": 3809, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyNjo0MlrODeE-Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDozNjo1NlrODeZ2-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODY1MzU1OnYy", "diffSide": "RIGHT", "path": "clients/go/internal/containersuite/containerSuite.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyNjo0MlrOFnCvBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyNjo0MlrOFnCvBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MzU4OA==", "bodyText": "if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary) (from golint)", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#discussion_r376483588", "createdAt": "2020-02-07T16:26:42Z", "author": {"login": "golangcibot"}, "path": "clients/go/internal/containersuite/containerSuite.go", "diffHunk": "@@ -57,6 +59,35 @@ func (s zeebeWaitStrategy) WaitUntilReady(ctx context.Context, target wait.Strat\n \t\treturn err\n \t}\n \n+\tdefer func() {\n+\t\t_ = zbClient.Close()\n+\t}()\n+\n+\tfinishedChan := make(chan error, 1)\n+\tgo s.waitForTopology(finishedChan, zbClient)\n+\n+\tselect {\n+\tcase err = <-finishedChan:\n+\t\treturn err\n+\tcase <-time.After(utils.DefaultContainerWaitTimeout):\n+\t\treader, err := target.Logs(ctx)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container, and failed to obtain container logs: %w\", err)\n+\t\t}\n+\t\tif bytes, err := ioutil.ReadAll(reader); err != nil {\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"=====================================\\n\")\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"Container logs\\n\")\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"=====================================\\n\")\n+\t\t\t_, _ = fmt.Fprintf(os.Stderr, \"%s\", bytes)\n+\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container\")\n+\t\t} else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88ada2a716338fba2dd1245a59e336af0f039c3"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTkwNTc2OnYy", "diffSide": "RIGHT", "path": "clients/go/internal/containersuite/containerSuite.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo0NzozM1rOFnfl4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo0NzozM1rOFnfl4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1NjM4NA==", "bodyText": "I think you want to do the opposite here, print the logs if the error is nil", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#discussion_r376956384", "createdAt": "2020-02-10T09:47:33Z", "author": {"login": "MiguelPires"}, "path": "clients/go/internal/containersuite/containerSuite.go", "diffHunk": "@@ -57,6 +59,35 @@ func (s zeebeWaitStrategy) WaitUntilReady(ctx context.Context, target wait.Strat\n \t\treturn err\n \t}\n \n+\tdefer func() {\n+\t\t_ = zbClient.Close()\n+\t}()\n+\n+\tfinishedChan := make(chan error, 1)\n+\tgo s.waitForTopology(finishedChan, zbClient)\n+\n+\tselect {\n+\tcase err = <-finishedChan:\n+\t\treturn err\n+\tcase <-time.After(utils.DefaultContainerWaitTimeout):\n+\t\treader, err := target.Logs(ctx)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container, and failed to obtain container logs: %w\", err)\n+\t\t}\n+\t\tif bytes, err := ioutil.ReadAll(reader); err != nil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb10cbf500f62536c9f307b817ab8cae661cb3f"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTk0OTYxOnYy", "diffSide": "RIGHT", "path": "clients/go/internal/containersuite/containerSuite.go", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo1ODo1M1rOFnf_dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjozMDo0N1rOFnkVOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk2MjkzNQ==", "bodyText": "Here you can just do errors.New since you're not formatting. The end result is the same though so not a big deal", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#discussion_r376962935", "createdAt": "2020-02-10T09:58:53Z", "author": {"login": "MiguelPires"}, "path": "clients/go/internal/containersuite/containerSuite.go", "diffHunk": "@@ -57,6 +59,35 @@ func (s zeebeWaitStrategy) WaitUntilReady(ctx context.Context, target wait.Strat\n \t\treturn err\n \t}\n \n+\tdefer func() {\n+\t\t_ = zbClient.Close()\n+\t}()\n+\n+\tfinishedChan := make(chan error, 1)\n+\tgo s.waitForTopology(finishedChan, zbClient)\n+\n+\tselect {\n+\tcase err = <-finishedChan:\n+\t\treturn err\n+\tcase <-time.After(utils.DefaultContainerWaitTimeout):\n+\t\treader, err := target.Logs(ctx)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container, and failed to obtain container logs: %w\", err)\n+\t\t}\n+\t\tif bytes, err := ioutil.ReadAll(reader); err != nil {\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"=====================================\\n\")\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"Container logs\\n\")\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"=====================================\\n\")\n+\t\t\t_, _ = fmt.Fprintf(os.Stderr, \"%s\", bytes)\n+\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb10cbf500f62536c9f307b817ab8cae661cb3f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAyNzE1MQ==", "bodyText": "hm, I wanted to avoid using the errors package since I don't really need it? What's the difference?", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#discussion_r377027151", "createdAt": "2020-02-10T12:15:37Z", "author": {"login": "npepinpe"}, "path": "clients/go/internal/containersuite/containerSuite.go", "diffHunk": "@@ -57,6 +59,35 @@ func (s zeebeWaitStrategy) WaitUntilReady(ctx context.Context, target wait.Strat\n \t\treturn err\n \t}\n \n+\tdefer func() {\n+\t\t_ = zbClient.Close()\n+\t}()\n+\n+\tfinishedChan := make(chan error, 1)\n+\tgo s.waitForTopology(finishedChan, zbClient)\n+\n+\tselect {\n+\tcase err = <-finishedChan:\n+\t\treturn err\n+\tcase <-time.After(utils.DefaultContainerWaitTimeout):\n+\t\treader, err := target.Logs(ctx)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container, and failed to obtain container logs: %w\", err)\n+\t\t}\n+\t\tif bytes, err := ioutil.ReadAll(reader); err != nil {\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"=====================================\\n\")\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"Container logs\\n\")\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"=====================================\\n\")\n+\t\t\t_, _ = fmt.Fprintf(os.Stderr, \"%s\", bytes)\n+\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk2MjkzNQ=="}, "originalCommit": {"oid": "5fb10cbf500f62536c9f307b817ab8cae661cb3f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAzNDA0Mw==", "bodyText": "nvm found it :)", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#discussion_r377034043", "createdAt": "2020-02-10T12:30:47Z", "author": {"login": "npepinpe"}, "path": "clients/go/internal/containersuite/containerSuite.go", "diffHunk": "@@ -57,6 +59,35 @@ func (s zeebeWaitStrategy) WaitUntilReady(ctx context.Context, target wait.Strat\n \t\treturn err\n \t}\n \n+\tdefer func() {\n+\t\t_ = zbClient.Close()\n+\t}()\n+\n+\tfinishedChan := make(chan error, 1)\n+\tgo s.waitForTopology(finishedChan, zbClient)\n+\n+\tselect {\n+\tcase err = <-finishedChan:\n+\t\treturn err\n+\tcase <-time.After(utils.DefaultContainerWaitTimeout):\n+\t\treader, err := target.Logs(ctx)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container, and failed to obtain container logs: %w\", err)\n+\t\t}\n+\t\tif bytes, err := ioutil.ReadAll(reader); err != nil {\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"=====================================\\n\")\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"Container logs\\n\")\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"=====================================\\n\")\n+\t\t\t_, _ = fmt.Fprintf(os.Stderr, \"%s\", bytes)\n+\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk2MjkzNQ=="}, "originalCommit": {"oid": "5fb10cbf500f62536c9f307b817ab8cae661cb3f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMTk1MTk0OnYy", "diffSide": "RIGHT", "path": "clients/go/internal/containersuite/containerSuite.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo1OTozOFrOFngA6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjoxNTowOFrOFnj5dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk2MzMwNw==", "bodyText": "Error messages shouldn't be capitalized or end with punctuation because they're usually wrapped (this applies to the other errors as well)", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#discussion_r376963307", "createdAt": "2020-02-10T09:59:38Z", "author": {"login": "MiguelPires"}, "path": "clients/go/internal/containersuite/containerSuite.go", "diffHunk": "@@ -57,6 +59,35 @@ func (s zeebeWaitStrategy) WaitUntilReady(ctx context.Context, target wait.Strat\n \t\treturn err\n \t}\n \n+\tdefer func() {\n+\t\t_ = zbClient.Close()\n+\t}()\n+\n+\tfinishedChan := make(chan error, 1)\n+\tgo s.waitForTopology(finishedChan, zbClient)\n+\n+\tselect {\n+\tcase err = <-finishedChan:\n+\t\treturn err\n+\tcase <-time.After(utils.DefaultContainerWaitTimeout):\n+\t\treader, err := target.Logs(ctx)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container, and failed to obtain container logs: %w\", err)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb10cbf500f62536c9f307b817ab8cae661cb3f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAyNjkzMg==", "bodyText": "Fair enough \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#discussion_r377026932", "createdAt": "2020-02-10T12:15:08Z", "author": {"login": "npepinpe"}, "path": "clients/go/internal/containersuite/containerSuite.go", "diffHunk": "@@ -57,6 +59,35 @@ func (s zeebeWaitStrategy) WaitUntilReady(ctx context.Context, target wait.Strat\n \t\treturn err\n \t}\n \n+\tdefer func() {\n+\t\t_ = zbClient.Close()\n+\t}()\n+\n+\tfinishedChan := make(chan error, 1)\n+\tgo s.waitForTopology(finishedChan, zbClient)\n+\n+\tselect {\n+\tcase err = <-finishedChan:\n+\t\treturn err\n+\tcase <-time.After(utils.DefaultContainerWaitTimeout):\n+\t\treader, err := target.Logs(ctx)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container, and failed to obtain container logs: %w\", err)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk2MzMwNw=="}, "originalCommit": {"oid": "5fb10cbf500f62536c9f307b817ab8cae661cb3f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjAwMTA0OnYy", "diffSide": "RIGHT", "path": "clients/go/internal/containersuite/containerSuite.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDoxNDoxN1rOFngfFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjoxNjowNVrOFnj6_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3MTAyOQ==", "bodyText": "If this method stays the same, one thing we can do here is have the parameter as finished chan<- error which makes this a write-only channel and explicitly tells us what happens with it.", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#discussion_r376971029", "createdAt": "2020-02-10T10:14:17Z", "author": {"login": "MiguelPires"}, "path": "clients/go/internal/containersuite/containerSuite.go", "diffHunk": "@@ -57,6 +59,35 @@ func (s zeebeWaitStrategy) WaitUntilReady(ctx context.Context, target wait.Strat\n \t\treturn err\n \t}\n \n+\tdefer func() {\n+\t\t_ = zbClient.Close()\n+\t}()\n+\n+\tfinishedChan := make(chan error, 1)\n+\tgo s.waitForTopology(finishedChan, zbClient)\n+\n+\tselect {\n+\tcase err = <-finishedChan:\n+\t\treturn err\n+\tcase <-time.After(utils.DefaultContainerWaitTimeout):\n+\t\treader, err := target.Logs(ctx)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container, and failed to obtain container logs: %w\", err)\n+\t\t}\n+\t\tif bytes, err := ioutil.ReadAll(reader); err != nil {\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"=====================================\\n\")\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"Container logs\\n\")\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"=====================================\\n\")\n+\t\t\t_, _ = fmt.Fprintf(os.Stderr, \"%s\", bytes)\n+\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container\")\n+\t\t}\n+\n+\t\treturn fmt.Errorf(\"Timed out awaiting container, but failed to read container logs: %w\", err)\n+\t}\n+}\n+\n+func (s zeebeWaitStrategy) waitForTopology(finishedChan chan error, zbClient zbc.Client) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb10cbf500f62536c9f307b817ab8cae661cb3f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAyNzMyNg==", "bodyText": "That's probably a good idea, we can make it bidi if we ever need it \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#discussion_r377027326", "createdAt": "2020-02-10T12:16:05Z", "author": {"login": "npepinpe"}, "path": "clients/go/internal/containersuite/containerSuite.go", "diffHunk": "@@ -57,6 +59,35 @@ func (s zeebeWaitStrategy) WaitUntilReady(ctx context.Context, target wait.Strat\n \t\treturn err\n \t}\n \n+\tdefer func() {\n+\t\t_ = zbClient.Close()\n+\t}()\n+\n+\tfinishedChan := make(chan error, 1)\n+\tgo s.waitForTopology(finishedChan, zbClient)\n+\n+\tselect {\n+\tcase err = <-finishedChan:\n+\t\treturn err\n+\tcase <-time.After(utils.DefaultContainerWaitTimeout):\n+\t\treader, err := target.Logs(ctx)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container, and failed to obtain container logs: %w\", err)\n+\t\t}\n+\t\tif bytes, err := ioutil.ReadAll(reader); err != nil {\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"=====================================\\n\")\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"Container logs\\n\")\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"=====================================\\n\")\n+\t\t\t_, _ = fmt.Fprintf(os.Stderr, \"%s\", bytes)\n+\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container\")\n+\t\t}\n+\n+\t\treturn fmt.Errorf(\"Timed out awaiting container, but failed to read container logs: %w\", err)\n+\t}\n+}\n+\n+func (s zeebeWaitStrategy) waitForTopology(finishedChan chan error, zbClient zbc.Client) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3MTAyOQ=="}, "originalCommit": {"oid": "5fb10cbf500f62536c9f307b817ab8cae661cb3f"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjAwNDYzOnYy", "diffSide": "RIGHT", "path": "clients/go/internal/containersuite/containerSuite.go", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDoxNToyNlrOFnghQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMjoyMDowMFrOFnkB8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3MTU4Ng==", "bodyText": "I wouldn't pass the channel into the method since I think it restricts the reusability of this method (you can only use it in a separate goroutine and you have to give it a channel). I'd either: a) make the method synchronous and have the lambda put the error value in the channel or b) make it asynchronous and self contained, by having it create the channel and go routine itself", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#discussion_r376971586", "createdAt": "2020-02-10T10:15:26Z", "author": {"login": "MiguelPires"}, "path": "clients/go/internal/containersuite/containerSuite.go", "diffHunk": "@@ -57,6 +59,35 @@ func (s zeebeWaitStrategy) WaitUntilReady(ctx context.Context, target wait.Strat\n \t\treturn err\n \t}\n \n+\tdefer func() {\n+\t\t_ = zbClient.Close()\n+\t}()\n+\n+\tfinishedChan := make(chan error, 1)\n+\tgo s.waitForTopology(finishedChan, zbClient)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb10cbf500f62536c9f307b817ab8cae661cb3f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAyNjY3Nw==", "bodyText": "How would you time it out if we made synchronous?", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#discussion_r377026677", "createdAt": "2020-02-10T12:14:28Z", "author": {"login": "npepinpe"}, "path": "clients/go/internal/containersuite/containerSuite.go", "diffHunk": "@@ -57,6 +59,35 @@ func (s zeebeWaitStrategy) WaitUntilReady(ctx context.Context, target wait.Strat\n \t\treturn err\n \t}\n \n+\tdefer func() {\n+\t\t_ = zbClient.Close()\n+\t}()\n+\n+\tfinishedChan := make(chan error, 1)\n+\tgo s.waitForTopology(finishedChan, zbClient)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3MTU4Ng=="}, "originalCommit": {"oid": "5fb10cbf500f62536c9f307b817ab8cae661cb3f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzAyOTEwNg==", "bodyText": "go func() {\n\t\tfinishedChan <- s.waitForTopology(zbClient)\n\t}()\nand waitForTopology would just synchronously return the error", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#discussion_r377029106", "createdAt": "2020-02-10T12:20:00Z", "author": {"login": "MiguelPires"}, "path": "clients/go/internal/containersuite/containerSuite.go", "diffHunk": "@@ -57,6 +59,35 @@ func (s zeebeWaitStrategy) WaitUntilReady(ctx context.Context, target wait.Strat\n \t\treturn err\n \t}\n \n+\tdefer func() {\n+\t\t_ = zbClient.Close()\n+\t}()\n+\n+\tfinishedChan := make(chan error, 1)\n+\tgo s.waitForTopology(finishedChan, zbClient)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3MTU4Ng=="}, "originalCommit": {"oid": "5fb10cbf500f62536c9f307b817ab8cae661cb3f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjA3NTQ3OnYy", "diffSide": "RIGHT", "path": "clients/go/internal/containersuite/containerSuite.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDozNjo1NlrOFnhMtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDozNjo1NlrOFnhMtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk4MjcxMA==", "bodyText": "Minor thing: you can do fmt.Fprintln if you want", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#discussion_r376982710", "createdAt": "2020-02-10T10:36:56Z", "author": {"login": "MiguelPires"}, "path": "clients/go/internal/containersuite/containerSuite.go", "diffHunk": "@@ -57,6 +59,35 @@ func (s zeebeWaitStrategy) WaitUntilReady(ctx context.Context, target wait.Strat\n \t\treturn err\n \t}\n \n+\tdefer func() {\n+\t\t_ = zbClient.Close()\n+\t}()\n+\n+\tfinishedChan := make(chan error, 1)\n+\tgo s.waitForTopology(finishedChan, zbClient)\n+\n+\tselect {\n+\tcase err = <-finishedChan:\n+\t\treturn err\n+\tcase <-time.After(utils.DefaultContainerWaitTimeout):\n+\t\treader, err := target.Logs(ctx)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container, and failed to obtain container logs: %w\", err)\n+\t\t}\n+\t\tif bytes, err := ioutil.ReadAll(reader); err != nil {\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"=====================================\\n\")\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"Container logs\\n\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb10cbf500f62536c9f307b817ab8cae661cb3f"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4960, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}