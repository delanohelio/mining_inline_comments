{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NTA1OTc5", "number": 4944, "title": "chore(gateway): add gateway-broker metrics", "bodyText": "Description\nAdds three metrics: latency (RTT) of gateway-broker requests, number of failed requests, total number of requests. The latency metric is visualized as a heatmap and the other two are used to calculate the failure rate of requests, which is visualized as a line graph for each request type (it can be filtered by partition and requestType).\nRelated issues\ncloses #4487\nDefinition of Done\nNot all items need to be done depending on the issue and the pull request.\nCode changes:\n\n The changes are backwards compatibility with previous versions\n If it fixes a bug then PRs are created to backport the fix to the last two minor versions\n\nTesting:\n\n There are unit/integration tests that verify all acceptance criterias of the issue\n New tests are written to ensure backwards compatibility with further versions\n The behavior is tested manually\n The impact of the changes is verified by a benchmark\n\nDocumentation:\n\n The documentation is updated (e.g. BPMN reference, configuration, examples, get-started guides, etc.)\n New content is added to the release annoncement", "createdAt": "2020-07-10T15:32:31Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4944", "merged": true, "mergeCommit": {"oid": "be56eb8b54a4751a12a66fc46ffb97685a30ad70"}, "closed": true, "closedAt": "2020-07-17T15:18:50Z", "author": {"login": "MiguelPires"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1Gxj9AFqTQ0ODczMjEwNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc10haxABqjM1NTgzMzE1ODQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NzMyMTA0", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#pullrequestreview-448732104", "createdAt": "2020-07-15T08:20:51Z", "commit": {"oid": "94ae4f864ea704e9ad3756a407f4f2139fd08ab2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODoyMDo1MVrOGxzfLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODo1Njo1MlrOGx01Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3Njk3NQ==", "bodyText": "In this case, the request was never send to a broker. Do we want to include them in the metrics?", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454876975", "createdAt": "2020-07-15T08:20:51Z", "author": {"login": "deepthidevaki"}, "path": "gateway/src/main/java/io/zeebe/gateway/impl/broker/BrokerRequestManager.java", "diffHunk": "@@ -115,37 +116,57 @@ private static boolean responseValidation(final DirectBuffer responseContent) {\n       nodeIdProvider = determineBrokerNodeIdProvider(request);\n     } catch (final PartitionNotFoundException e) {\n       returnFuture.completeExceptionally(e);\n+      GatewayMetrics.registerFailedRequest(request.getPartitionId(), request.getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ae4f864ea704e9ad3756a407f4f2139fd08ab2"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg3OTY4OQ==", "bodyText": "Considering \"RESOURCE_EXHAUSTED\" as successful responses can skew the elapsedtime metrics as it is usually much smaller than a successfully processed requests.", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454879689", "createdAt": "2020-07-15T08:25:19Z", "author": {"login": "deepthidevaki"}, "path": "gateway/src/main/java/io/zeebe/gateway/impl/broker/BrokerRequestManager.java", "diffHunk": "@@ -115,37 +116,57 @@ private static boolean responseValidation(final DirectBuffer responseContent) {\n       nodeIdProvider = determineBrokerNodeIdProvider(request);\n     } catch (final PartitionNotFoundException e) {\n       returnFuture.completeExceptionally(e);\n+      GatewayMetrics.registerFailedRequest(request.getPartitionId(), request.getType());\n       return;\n     }\n \n     final ActorFuture<DirectBuffer> responseFuture =\n         sender.send(clientTransport, nodeIdProvider, request, requestTimeout);\n+    final long startTime = System.currentTimeMillis();\n \n     actor.runOnCompletion(\n         responseFuture,\n         (clientResponse, error) -> {\n           try {\n             if (error == null) {\n               final BrokerResponse<T> response = request.getResponse(clientResponse);\n-              handleResponse(response, returnFuture);\n+\n+              if (handleResponse(response, returnFuture)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ae4f864ea704e9ad3756a407f4f2139fd08ab2"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg4NTcwOA==", "bodyText": "I'm not sure if this should be considered as successful.", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454885708", "createdAt": "2020-07-15T08:35:36Z", "author": {"login": "deepthidevaki"}, "path": "gateway/src/main/java/io/zeebe/gateway/impl/broker/BrokerRequestManager.java", "diffHunk": "@@ -115,37 +116,57 @@ private static boolean responseValidation(final DirectBuffer responseContent) {\n       nodeIdProvider = determineBrokerNodeIdProvider(request);\n     } catch (final PartitionNotFoundException e) {\n       returnFuture.completeExceptionally(e);\n+      GatewayMetrics.registerFailedRequest(request.getPartitionId(), request.getType());\n       return;\n     }\n \n     final ActorFuture<DirectBuffer> responseFuture =\n         sender.send(clientTransport, nodeIdProvider, request, requestTimeout);\n+    final long startTime = System.currentTimeMillis();\n \n     actor.runOnCompletion(\n         responseFuture,\n         (clientResponse, error) -> {\n           try {\n             if (error == null) {\n               final BrokerResponse<T> response = request.getResponse(clientResponse);\n-              handleResponse(response, returnFuture);\n+\n+              if (handleResponse(response, returnFuture)) {\n+                final long elapsedTime = System.currentTimeMillis() - startTime;\n+                GatewayMetrics.registerSuccessfulRequest(\n+                    request.getPartitionId(), request.getType(), elapsedTime);\n+                return;\n+              }\n             } else {\n               returnFuture.completeExceptionally(error);\n             }\n           } catch (final RuntimeException e) {\n             returnFuture.completeExceptionally(new ClientResponseException(e));\n           }\n+\n+          GatewayMetrics.registerFailedRequest(request.getPartitionId(), request.getType());\n         });\n   }\n \n-  private <T> void handleResponse(\n+  /**\n+   * Returns true if the request was successfully processed or false, it it wasn't. Rejections and\n+   * RESOURCE_EXCEEDED errors are considered successful requests.\n+   */\n+  private <T> boolean handleResponse(\n       final BrokerResponse<T> response, final CompletableFuture<BrokerResponse<T>> responseFuture) {\n     try {\n       if (response.isResponse()) {\n         responseFuture.complete(response);\n+        return true;\n       } else if (response.isRejection()) {\n         responseFuture.completeExceptionally(new BrokerRejectionException(response.getRejection()));\n+        return true;\n       } else if (response.isError()) {\n         responseFuture.completeExceptionally(new BrokerErrorException(response.getError()));\n+\n+        if (response.getError().getCode() == ErrorCode.RESOURCE_EXHAUSTED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ae4f864ea704e9ad3756a407f4f2139fd08ab2"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg4NjQ1OA==", "bodyText": "TOTAL_REQUESTS should be updated when the request is send, not when the response is received. Isn't it?", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454886458", "createdAt": "2020-07-15T08:36:48Z", "author": {"login": "deepthidevaki"}, "path": "gateway/src/main/java/io/zeebe/gateway/metrics/GatewayMetrics.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.metrics;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Histogram;\n+\n+public final class GatewayMetrics {\n+\n+  private static final Histogram REQUEST_LATENCY =\n+      Histogram.build()\n+          .namespace(\"zeebe\")\n+          .name(\"gateway_request_latency\")\n+          .help(\"Latency of round-trip from gateway to broker\")\n+          .labelNames(\"partition\", \"requestType\")\n+          .register();\n+\n+  private static final Counter FAILED_REQUESTS =\n+      Counter.build()\n+          .namespace(\"zeebe\")\n+          .name(\"gateway_failed_requests\")\n+          .help(\"Number of failed requests\")\n+          .labelNames(\"partition\", \"requestType\")\n+          .register();\n+\n+  private static final Counter TOTAL_REQUESTS =\n+      Counter.build()\n+          .namespace(\"zeebe\")\n+          .name(\"gateway_total_requests\")\n+          .help(\"Number of requests\")\n+          .labelNames(\"partition\", \"requestType\")\n+          .register();\n+\n+  private GatewayMetrics() {}\n+\n+  public static void registerSuccessfulRequest(\n+      final long partition, final String requestType, final long latencyMs) {\n+    REQUEST_LATENCY.labels(Long.toString(partition), requestType).observe(latencyMs / 1000f);\n+    TOTAL_REQUESTS.labels(Long.toString(partition), requestType).inc();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ae4f864ea704e9ad3756a407f4f2139fd08ab2"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg5Mzk4NA==", "bodyText": "Can we use the valueType and intent to build the request type instead of parsing the class name?", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454893984", "createdAt": "2020-07-15T08:48:57Z", "author": {"login": "deepthidevaki"}, "path": "gateway/src/main/java/io/zeebe/gateway/impl/broker/request/BrokerRequest.java", "diffHunk": "@@ -63,6 +65,10 @@ public void serializeValue() {\n \n   protected abstract T toResponseDto(DirectBuffer buffer);\n \n+  public String getType() {\n+    return COMMON_WORDS.matcher(this.getClass().getSimpleName()).replaceAll(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ae4f864ea704e9ad3756a407f4f2139fd08ab2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg5NTc4OA==", "bodyText": "May be we can add the reasons for failure to the labels. We can then distinguish timeouts vs other failures.", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454895788", "createdAt": "2020-07-15T08:51:56Z", "author": {"login": "deepthidevaki"}, "path": "gateway/src/main/java/io/zeebe/gateway/metrics/GatewayMetrics.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.metrics;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Histogram;\n+\n+public final class GatewayMetrics {\n+\n+  private static final Histogram REQUEST_LATENCY =\n+      Histogram.build()\n+          .namespace(\"zeebe\")\n+          .name(\"gateway_request_latency\")\n+          .help(\"Latency of round-trip from gateway to broker\")\n+          .labelNames(\"partition\", \"requestType\")\n+          .register();\n+\n+  private static final Counter FAILED_REQUESTS =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ae4f864ea704e9ad3756a407f4f2139fd08ab2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg5ODk1MA==", "bodyText": "Is it necessary?", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r454898950", "createdAt": "2020-07-15T08:56:52Z", "author": {"login": "deepthidevaki"}, "path": "monitor/grafana/zeebe.json", "diffHunk": "@@ -48,8 +48,8 @@\n     },\n     {\n       \"type\": \"panel\",\n-      \"id\": \"table\",\n-      \"name\": \"Table\",\n+      \"id\": \"table-old\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ae4f864ea704e9ad3756a407f4f2139fd08ab2"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb33d3511e709b95a98ea6dbf59345d55d79778a", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/fb33d3511e709b95a98ea6dbf59345d55d79778a", "committedDate": "2020-07-16T09:54:50Z", "message": "chore(gateway): improvements"}, "afterCommit": {"oid": "cfd6ea39fc99e437bf6998e209a758633294aab6", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/cfd6ea39fc99e437bf6998e209a758633294aab6", "committedDate": "2020-07-16T09:57:28Z", "message": "chore(gateway): improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNDc2ODg2", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#pullrequestreview-450476886", "createdAt": "2020-07-17T08:38:40Z", "commit": {"oid": "cfd6ea39fc99e437bf6998e209a758633294aab6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODozODo0MFrOGzKjgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwODozODo0MFrOGzKjgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMwMzQ4OA==", "bodyText": "@MiguelPires What's your opinion on this?", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#discussion_r456303488", "createdAt": "2020-07-17T08:38:40Z", "author": {"login": "deepthidevaki"}, "path": "gateway/src/main/java/io/zeebe/gateway/metrics/GatewayMetrics.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.metrics;\n+\n+import io.prometheus.client.Counter;\n+import io.prometheus.client.Histogram;\n+\n+public final class GatewayMetrics {\n+\n+  private static final Histogram REQUEST_LATENCY =\n+      Histogram.build()\n+          .namespace(\"zeebe\")\n+          .name(\"gateway_request_latency\")\n+          .help(\"Latency of round-trip from gateway to broker\")\n+          .labelNames(\"partition\", \"requestType\")\n+          .register();\n+\n+  private static final Counter FAILED_REQUESTS =\n+      Counter.build()\n+          .namespace(\"zeebe\")\n+          .name(\"gateway_failed_requests\")\n+          .help(\"Number of failed requests\")\n+          .labelNames(\"partition\", \"requestType\")\n+          .register();\n+\n+  private static final Counter TOTAL_REQUESTS =\n+      Counter.build()\n+          .namespace(\"zeebe\")\n+          .name(\"gateway_total_requests\")\n+          .help(\"Number of requests\")\n+          .labelNames(\"partition\", \"requestType\")\n+          .register();\n+\n+  private GatewayMetrics() {}\n+\n+  public static void registerSuccessfulRequest(\n+      final long partition, final String requestType, final long latencyMs) {\n+    REQUEST_LATENCY.labels(Long.toString(partition), requestType).observe(latencyMs / 1000f);\n+    TOTAL_REQUESTS.labels(Long.toString(partition), requestType).inc();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg4NjQ1OA=="}, "originalCommit": {"oid": "94ae4f864ea704e9ad3756a407f4f2139fd08ab2"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNjg3MjQ5", "url": "https://github.com/camunda-cloud/zeebe/pull/4944#pullrequestreview-450687249", "createdAt": "2020-07-17T14:06:56Z", "commit": {"oid": "e1c5ec93e365908117a5256e1b738b2d595c4493"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31dfd59a8f04f20d27b50211e6ac8c1adf869fd7", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/31dfd59a8f04f20d27b50211e6ac8c1adf869fd7", "committedDate": "2020-07-17T14:15:23Z", "message": "chore(gateway): add gateway-broker metrics"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1c5ec93e365908117a5256e1b738b2d595c4493", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/e1c5ec93e365908117a5256e1b738b2d595c4493", "committedDate": "2020-07-17T11:23:24Z", "message": "chore(gateway): add error code for timeouts"}, "afterCommit": {"oid": "31dfd59a8f04f20d27b50211e6ac8c1adf869fd7", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/31dfd59a8f04f20d27b50211e6ac8c1adf869fd7", "committedDate": "2020-07-17T14:15:23Z", "message": "chore(gateway): add gateway-broker metrics"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2685, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}