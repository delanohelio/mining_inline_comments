{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3MzUwODAz", "number": 5790, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTo0NDo0OVrOE2rojA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMjo1NDoxNVrOE3NnIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzczNDUyOnYy", "diffSide": "RIGHT", "path": "clients/go/pkg/pb/gateway.pb.go", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwOTo0NDo0OVrOHvmbGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMjo0MToxMlrOHvssXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3NDY0OQ==", "bodyText": "Was this generated or did you change this? I'm unsure whether this should be part of this change. @MiguelPires WDYT?", "url": "https://github.com/camunda-cloud/zeebe/pull/5790#discussion_r519674649", "createdAt": "2020-11-09T09:44:49Z", "author": {"login": "korthout"}, "path": "clients/go/pkg/pb/gateway.pb.go", "diffHunk": "@@ -1,6 +1,6 @@\n // Code generated by protoc-gen-go. DO NOT EDIT.\n // versions:\n-// \tprotoc-gen-go v1.25.0-devel\n+// \tprotoc-gen-go v1.25.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9605d181d6bdb7194ed3c93a5739af839163b0e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcxOTI0NA==", "bodyText": "gateway.pb.go is generated. It was just generated by a different version", "url": "https://github.com/camunda-cloud/zeebe/pull/5790#discussion_r519719244", "createdAt": "2020-11-09T10:54:42Z", "author": {"login": "MiguelPires"}, "path": "clients/go/pkg/pb/gateway.pb.go", "diffHunk": "@@ -1,6 +1,6 @@\n // Code generated by protoc-gen-go. DO NOT EDIT.\n // versions:\n-// \tprotoc-gen-go v1.25.0-devel\n+// \tprotoc-gen-go v1.25.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3NDY0OQ=="}, "originalCommit": {"oid": "d9605d181d6bdb7194ed3c93a5739af839163b0e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc3MzA5Mw==", "bodyText": "Yes, this file is generated by a different version of the protoc-gen-go. So, do I need to regenerate it with the original version? :)", "url": "https://github.com/camunda-cloud/zeebe/pull/5790#discussion_r519773093", "createdAt": "2020-11-09T12:33:19Z", "author": {"login": "aivinog1"}, "path": "clients/go/pkg/pb/gateway.pb.go", "diffHunk": "@@ -1,6 +1,6 @@\n // Code generated by protoc-gen-go. DO NOT EDIT.\n // versions:\n-// \tprotoc-gen-go v1.25.0-devel\n+// \tprotoc-gen-go v1.25.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3NDY0OQ=="}, "originalCommit": {"oid": "d9605d181d6bdb7194ed3c93a5739af839163b0e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc3NzM3NQ==", "bodyText": "No, it's completely fine @aivinog1 \ud83d\ude03", "url": "https://github.com/camunda-cloud/zeebe/pull/5790#discussion_r519777375", "createdAt": "2020-11-09T12:41:12Z", "author": {"login": "MiguelPires"}, "path": "clients/go/pkg/pb/gateway.pb.go", "diffHunk": "@@ -1,6 +1,6 @@\n // Code generated by protoc-gen-go. DO NOT EDIT.\n // versions:\n-// \tprotoc-gen-go v1.25.0-devel\n+// \tprotoc-gen-go v1.25.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTY3NDY0OQ=="}, "originalCommit": {"oid": "d9605d181d6bdb7194ed3c93a5739af839163b0e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTA0MDM0OnYy", "diffSide": "LEFT", "path": "broker/src/main/java/io/zeebe/broker/Broker.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTowMToyMVrOHvy4cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMjowOTo1N1rOHwZqVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3ODc3MA==", "bodyText": "@deepthidevaki how do you feel about moving this failure listener to the constructor? I think it makes sense, but perhaps I'm overlooking an actor scheduler issue.", "url": "https://github.com/camunda-cloud/zeebe/pull/5790#discussion_r519878770", "createdAt": "2020-11-09T15:01:21Z", "author": {"login": "korthout"}, "path": "broker/src/main/java/io/zeebe/broker/Broker.java", "diffHunk": "@@ -407,10 +407,14 @@ private AutoCloseable partitionsStep(\n                     buildExporterRepository(brokerCfg));\n             final PartitionTransitionImpl transitionBehavior =\n                 new PartitionTransitionImpl(context, LEADER_STEPS, FOLLOWER_STEPS);\n-            final ZeebePartition zeebePartition = new ZeebePartition(context, transitionBehavior);\n+            final ZeebePartition zeebePartition =\n+                new ZeebePartition(\n+                    context,\n+                    transitionBehavior,\n+                    List.of(\n+                        new PartitionHealthBroadcaster(\n+                            partitionId, topologyManager::onHealthChanged)));\n             scheduleActor(zeebePartition);\n-            zeebePartition.addFailureListener(\n-                new PartitionHealthBroadcaster(partitionId, topologyManager::onHealthChanged));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "174161bd0ae95dd89de4c7471c2980e352f434f9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDM2OTY5Mg==", "bodyText": "It should be safe to move it to the constructor. But what is the need for it?", "url": "https://github.com/camunda-cloud/zeebe/pull/5790#discussion_r520369692", "createdAt": "2020-11-10T08:19:58Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/Broker.java", "diffHunk": "@@ -407,10 +407,14 @@ private AutoCloseable partitionsStep(\n                     buildExporterRepository(brokerCfg));\n             final PartitionTransitionImpl transitionBehavior =\n                 new PartitionTransitionImpl(context, LEADER_STEPS, FOLLOWER_STEPS);\n-            final ZeebePartition zeebePartition = new ZeebePartition(context, transitionBehavior);\n+            final ZeebePartition zeebePartition =\n+                new ZeebePartition(\n+                    context,\n+                    transitionBehavior,\n+                    List.of(\n+                        new PartitionHealthBroadcaster(\n+                            partitionId, topologyManager::onHealthChanged)));\n             scheduleActor(zeebePartition);\n-            zeebePartition.addFailureListener(\n-                new PartitionHealthBroadcaster(partitionId, topologyManager::onHealthChanged));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3ODc3MA=="}, "originalCommit": {"oid": "174161bd0ae95dd89de4c7471c2980e352f434f9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMTE5Nw==", "bodyText": "I understood that it solved the second problem @aivinog1 mentioned here. I assumed there was a race condition between the partition becoming healthy/unhealthy and when the partition health broadcaster is added as failure listener.\n@aivinog1 have you tried without moving this to the constructor?", "url": "https://github.com/camunda-cloud/zeebe/pull/5790#discussion_r520401197", "createdAt": "2020-11-10T09:10:42Z", "author": {"login": "korthout"}, "path": "broker/src/main/java/io/zeebe/broker/Broker.java", "diffHunk": "@@ -407,10 +407,14 @@ private AutoCloseable partitionsStep(\n                     buildExporterRepository(brokerCfg));\n             final PartitionTransitionImpl transitionBehavior =\n                 new PartitionTransitionImpl(context, LEADER_STEPS, FOLLOWER_STEPS);\n-            final ZeebePartition zeebePartition = new ZeebePartition(context, transitionBehavior);\n+            final ZeebePartition zeebePartition =\n+                new ZeebePartition(\n+                    context,\n+                    transitionBehavior,\n+                    List.of(\n+                        new PartitionHealthBroadcaster(\n+                            partitionId, topologyManager::onHealthChanged)));\n             scheduleActor(zeebePartition);\n-            zeebePartition.addFailureListener(\n-                new PartitionHealthBroadcaster(partitionId, topologyManager::onHealthChanged));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3ODc3MA=="}, "originalCommit": {"oid": "174161bd0ae95dd89de4c7471c2980e352f434f9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQwMzE3Mw==", "bodyText": "@korthout Yes, I tried but without success. Seems that the only way :(", "url": "https://github.com/camunda-cloud/zeebe/pull/5790#discussion_r520403173", "createdAt": "2020-11-10T09:13:56Z", "author": {"login": "aivinog1"}, "path": "broker/src/main/java/io/zeebe/broker/Broker.java", "diffHunk": "@@ -407,10 +407,14 @@ private AutoCloseable partitionsStep(\n                     buildExporterRepository(brokerCfg));\n             final PartitionTransitionImpl transitionBehavior =\n                 new PartitionTransitionImpl(context, LEADER_STEPS, FOLLOWER_STEPS);\n-            final ZeebePartition zeebePartition = new ZeebePartition(context, transitionBehavior);\n+            final ZeebePartition zeebePartition =\n+                new ZeebePartition(\n+                    context,\n+                    transitionBehavior,\n+                    List.of(\n+                        new PartitionHealthBroadcaster(\n+                            partitionId, topologyManager::onHealthChanged)));\n             scheduleActor(zeebePartition);\n-            zeebePartition.addFailureListener(\n-                new PartitionHealthBroadcaster(partitionId, topologyManager::onHealthChanged));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3ODc3MA=="}, "originalCommit": {"oid": "174161bd0ae95dd89de4c7471c2980e352f434f9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ2MjA5MA==", "bodyText": "Ah yes, there is a timing issue. I dove into it a bit.\nWe register the broadcaster as a failure listener using the actor scheduler, but at the moment we call this, we have (in the line before) already activated the actor scheduler which is busy starting the partition. During this start, the health has already been determined (multiple times even) and each failure listener is notified when it changed. Directly after the start, the scheduler does the next task (adding the broadcaster) and after that the health doesn't change any more. So the broadcaster is never informed.\nSo, I see 2 solutions:\n\nwhen a new listener is added to the partition, check the health and update the listener accordingly.\npass the broadcaster to the partition in the constructor\n\nAfter discussing with @deepthidevaki solution 1 has our preference, since this pattern is already applied in other places as well.", "url": "https://github.com/camunda-cloud/zeebe/pull/5790#discussion_r520462090", "createdAt": "2020-11-10T10:41:12Z", "author": {"login": "korthout"}, "path": "broker/src/main/java/io/zeebe/broker/Broker.java", "diffHunk": "@@ -407,10 +407,14 @@ private AutoCloseable partitionsStep(\n                     buildExporterRepository(brokerCfg));\n             final PartitionTransitionImpl transitionBehavior =\n                 new PartitionTransitionImpl(context, LEADER_STEPS, FOLLOWER_STEPS);\n-            final ZeebePartition zeebePartition = new ZeebePartition(context, transitionBehavior);\n+            final ZeebePartition zeebePartition =\n+                new ZeebePartition(\n+                    context,\n+                    transitionBehavior,\n+                    List.of(\n+                        new PartitionHealthBroadcaster(\n+                            partitionId, topologyManager::onHealthChanged)));\n             scheduleActor(zeebePartition);\n-            zeebePartition.addFailureListener(\n-                new PartitionHealthBroadcaster(partitionId, topologyManager::onHealthChanged));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3ODc3MA=="}, "originalCommit": {"oid": "174161bd0ae95dd89de4c7471c2980e352f434f9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDQ2NzUzMg==", "bodyText": "@korthout Many thanks for the analysis :) I'll apply the first solution soon", "url": "https://github.com/camunda-cloud/zeebe/pull/5790#discussion_r520467532", "createdAt": "2020-11-10T10:49:44Z", "author": {"login": "aivinog1"}, "path": "broker/src/main/java/io/zeebe/broker/Broker.java", "diffHunk": "@@ -407,10 +407,14 @@ private AutoCloseable partitionsStep(\n                     buildExporterRepository(brokerCfg));\n             final PartitionTransitionImpl transitionBehavior =\n                 new PartitionTransitionImpl(context, LEADER_STEPS, FOLLOWER_STEPS);\n-            final ZeebePartition zeebePartition = new ZeebePartition(context, transitionBehavior);\n+            final ZeebePartition zeebePartition =\n+                new ZeebePartition(\n+                    context,\n+                    transitionBehavior,\n+                    List.of(\n+                        new PartitionHealthBroadcaster(\n+                            partitionId, topologyManager::onHealthChanged)));\n             scheduleActor(zeebePartition);\n-            zeebePartition.addFailureListener(\n-                new PartitionHealthBroadcaster(partitionId, topologyManager::onHealthChanged));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3ODc3MA=="}, "originalCommit": {"oid": "174161bd0ae95dd89de4c7471c2980e352f434f9"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUxNDEzNQ==", "bodyText": "@korthout Can you take a look, please? :) I've also add small unit tests that verify calling io.zeebe.util.health.FailureListener#onFailure or io.zeebe.util.health.FailureListener#onRecovered depends the partition health.", "url": "https://github.com/camunda-cloud/zeebe/pull/5790#discussion_r520514135", "createdAt": "2020-11-10T12:09:57Z", "author": {"login": "aivinog1"}, "path": "broker/src/main/java/io/zeebe/broker/Broker.java", "diffHunk": "@@ -407,10 +407,14 @@ private AutoCloseable partitionsStep(\n                     buildExporterRepository(brokerCfg));\n             final PartitionTransitionImpl transitionBehavior =\n                 new PartitionTransitionImpl(context, LEADER_STEPS, FOLLOWER_STEPS);\n-            final ZeebePartition zeebePartition = new ZeebePartition(context, transitionBehavior);\n+            final ZeebePartition zeebePartition =\n+                new ZeebePartition(\n+                    context,\n+                    transitionBehavior,\n+                    List.of(\n+                        new PartitionHealthBroadcaster(\n+                            partitionId, topologyManager::onHealthChanged)));\n             scheduleActor(zeebePartition);\n-            zeebePartition.addFailureListener(\n-                new PartitionHealthBroadcaster(partitionId, topologyManager::onHealthChanged));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3ODc3MA=="}, "originalCommit": {"oid": "174161bd0ae95dd89de4c7471c2980e352f434f9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTA0MzExOnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/clustering/topology/TopologyManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTowMjowMVrOHvy6Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNTowMjowMVrOHvy6Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg3OTIxOQ==", "bodyText": "\ud83d\ude06 Good find!", "url": "https://github.com/camunda-cloud/zeebe/pull/5790#discussion_r519879219", "createdAt": "2020-11-09T15:02:01Z", "author": {"login": "korthout"}, "path": "broker/src/main/java/io/zeebe/broker/clustering/topology/TopologyManagerImpl.java", "diffHunk": "@@ -257,9 +257,9 @@ public void onHealthChanged(final int partitionId, final HealthStatus status) {\n     actor.run(\n         () -> {\n           if (status == HealthStatus.HEALTHY) {\n-            localBroker.setPartitionUnhealthy(partitionId);\n-          } else if (status == HealthStatus.UNHEALTHY) {\n             localBroker.setPartitionHealthy(partitionId);\n+          } else if (status == HealthStatus.UNHEALTHY) {\n+            localBroker.setPartitionUnhealthy(partitionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "174161bd0ae95dd89de4c7471c2980e352f434f9"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzI4NjE1OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMjo1MDoxNVrOHwbDnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzowODo0MlrOHwbv3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUzNjk5MQ==", "bodyText": "Please use ZeebePartition.getHealthStatus() to determine the current health.\nthis.zeebePartitionHealth only contains the health that the ZeebePartition can control (e.g. installation failure), while there are also other components that may fail, like the log stream and the stream processor. Each of these is a different component, and they are all registered in the CriticalComponentsHealthMonitor, which is used to determine the health status when you just call ZeebePartition.getHealthStatus().", "url": "https://github.com/camunda-cloud/zeebe/pull/5790#discussion_r520536991", "createdAt": "2020-11-10T12:50:15Z", "author": {"login": "korthout"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -294,7 +291,15 @@ public HealthStatus getHealthStatus() {\n \n   @Override\n   public void addFailureListener(final FailureListener failureListener) {\n-    actor.run(() -> this.failureListeners.add(failureListener));\n+    actor.run(\n+        () -> {\n+          this.failureListeners.add(failureListener);\n+          if (this.zeebePartitionHealth.getHealthStatus() == HealthStatus.HEALTHY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e560372bcbeab0e21ab61b5ee39573a74e537a4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0ODMxOQ==", "bodyText": "Done", "url": "https://github.com/camunda-cloud/zeebe/pull/5790#discussion_r520548319", "createdAt": "2020-11-10T13:08:42Z", "author": {"login": "aivinog1"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -294,7 +291,15 @@ public HealthStatus getHealthStatus() {\n \n   @Override\n   public void addFailureListener(final FailureListener failureListener) {\n-    actor.run(() -> this.failureListeners.add(failureListener));\n+    actor.run(\n+        () -> {\n+          this.failureListeners.add(failureListener);\n+          if (this.zeebePartitionHealth.getHealthStatus() == HealthStatus.HEALTHY) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUzNjk5MQ=="}, "originalCommit": {"oid": "7e560372bcbeab0e21ab61b5ee39573a74e537a4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzI5MjE4OnYy", "diffSide": "RIGHT", "path": "broker/src/test/java/io/zeebe/broker/system/partitions/ZeebePartitionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMjo1MTo1M1rOHwbHag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzowODozN1rOHwbvtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUzNzk2Mg==", "bodyText": "The test doesn't make it clear that the partition's health is really Unhealthy. Can you make that more explicit in the test?", "url": "https://github.com/camunda-cloud/zeebe/pull/5790#discussion_r520537962", "createdAt": "2020-11-10T12:51:53Z", "author": {"login": "korthout"}, "path": "broker/src/test/java/io/zeebe/broker/system/partitions/ZeebePartitionTest.java", "diffHunk": "@@ -61,6 +63,41 @@ public void shouldInstallLeaderPartition() {\n     verify(transition).toLeader();\n   }\n \n+  @Test\n+  public void shouldCallOnFailureOnAddFailureListenerAndUnhealthy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e560372bcbeab0e21ab61b5ee39573a74e537a4"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0ODI3Nw==", "bodyText": "Done", "url": "https://github.com/camunda-cloud/zeebe/pull/5790#discussion_r520548277", "createdAt": "2020-11-10T13:08:37Z", "author": {"login": "aivinog1"}, "path": "broker/src/test/java/io/zeebe/broker/system/partitions/ZeebePartitionTest.java", "diffHunk": "@@ -61,6 +63,41 @@ public void shouldInstallLeaderPartition() {\n     verify(transition).toLeader();\n   }\n \n+  @Test\n+  public void shouldCallOnFailureOnAddFailureListenerAndUnhealthy() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUzNzk2Mg=="}, "originalCommit": {"oid": "7e560372bcbeab0e21ab61b5ee39573a74e537a4"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MzMwMTQ3OnYy", "diffSide": "RIGHT", "path": "broker/src/test/java/io/zeebe/broker/system/partitions/ZeebePartitionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMjo1NDoxNVrOHwbNDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzowODozMFrOHwbvdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUzOTQwNA==", "bodyText": "You can actually just use the healthMonitor (see L45), and stub the healthstatus. Something like:\nwhen(healthMonitor.getHealthStatus())\n  .thenReturn(HealthStatus.HEALTHY)", "url": "https://github.com/camunda-cloud/zeebe/pull/5790#discussion_r520539404", "createdAt": "2020-11-10T12:54:15Z", "author": {"login": "korthout"}, "path": "broker/src/test/java/io/zeebe/broker/system/partitions/ZeebePartitionTest.java", "diffHunk": "@@ -61,6 +63,41 @@ public void shouldInstallLeaderPartition() {\n     verify(transition).toLeader();\n   }\n \n+  @Test\n+  public void shouldCallOnFailureOnAddFailureListenerAndUnhealthy() {\n+    // given\n+    final ZeebePartition partition = new ZeebePartition(ctx, transition);\n+    schedulerRule.submitActor(partition);\n+    final FailureListener failureListener = mock(FailureListener.class);\n+    doNothing().when(failureListener).onFailure();\n+\n+    // when\n+    partition.addFailureListener(failureListener);\n+    schedulerRule.workUntilDone();\n+\n+    // then\n+    verify(failureListener, only()).onFailure();\n+  }\n+\n+  @Test\n+  public void shouldCallOnRecoveredOnAddFailureListenerAndHealthy() {\n+    // given\n+    final ZeebePartition partition = new ZeebePartition(ctx, transition);\n+    schedulerRule.submitActor(partition);\n+    final FailureListener failureListener = mock(FailureListener.class);\n+    doNothing().when(failureListener).onRecovered();\n+    // make partition healthy\n+    partition.onNewRole(Role.LEADER, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e560372bcbeab0e21ab61b5ee39573a74e537a4"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU0ODIxMw==", "bodyText": "Done", "url": "https://github.com/camunda-cloud/zeebe/pull/5790#discussion_r520548213", "createdAt": "2020-11-10T13:08:30Z", "author": {"login": "aivinog1"}, "path": "broker/src/test/java/io/zeebe/broker/system/partitions/ZeebePartitionTest.java", "diffHunk": "@@ -61,6 +63,41 @@ public void shouldInstallLeaderPartition() {\n     verify(transition).toLeader();\n   }\n \n+  @Test\n+  public void shouldCallOnFailureOnAddFailureListenerAndUnhealthy() {\n+    // given\n+    final ZeebePartition partition = new ZeebePartition(ctx, transition);\n+    schedulerRule.submitActor(partition);\n+    final FailureListener failureListener = mock(FailureListener.class);\n+    doNothing().when(failureListener).onFailure();\n+\n+    // when\n+    partition.addFailureListener(failureListener);\n+    schedulerRule.workUntilDone();\n+\n+    // then\n+    verify(failureListener, only()).onFailure();\n+  }\n+\n+  @Test\n+  public void shouldCallOnRecoveredOnAddFailureListenerAndHealthy() {\n+    // given\n+    final ZeebePartition partition = new ZeebePartition(ctx, transition);\n+    schedulerRule.submitActor(partition);\n+    final FailureListener failureListener = mock(FailureListener.class);\n+    doNothing().when(failureListener).onRecovered();\n+    // make partition healthy\n+    partition.onNewRole(Role.LEADER, 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUzOTQwNA=="}, "originalCommit": {"oid": "7e560372bcbeab0e21ab61b5ee39573a74e537a4"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 132, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}