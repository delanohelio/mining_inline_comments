{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4ODQyOTQ4", "number": 4963, "title": "Remove workflow related data from state when it is not used ", "bodyText": "Description\n\nadd test case to verify that the workflow execution clean its state after the workflow instance is completed\nremove data from the event scope instance state when the message start event subscription is closed\ndon't store event variables in the state if the event doesn't provide any variables (e.g. for timer/error events)\n\nRelated issues\ncloses #4957\ncloses #4959\nDefinition of Done\nNot all items need to be done depending on the issue and the pull request.\nCode changes:\n\n The changes are backwards compatibility with previous versions\n If it fixes a bug then PRs are created to backport the fix to the last two minor versions\n\nTesting:\n\n There are unit/integration tests that verify all acceptance criterias of the issue\n New tests are written to ensure backwards compatibility with further versions\n The behavior is tested manually\n The impact of the changes is verified by a benchmark\n\nDocumentation:\n\n The documentation is updated (e.g. BPMN reference, configuration, examples, get-started guides, etc.)\n New content is added to the release annoncement", "createdAt": "2020-07-14T12:15:00Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4963", "merged": true, "mergeCommit": {"oid": "a81fa87f86ba1cd51586372a8f870e40375f60da"}, "closed": true, "closedAt": "2020-08-05T06:00:42Z", "author": {"login": "saig0"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1EpYIgFqTQ0ODY0ODYwMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc70glUABqjM2MjMwODAzMDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NjQ4NjAy", "url": "https://github.com/camunda-cloud/zeebe/pull/4963#pullrequestreview-448648602", "createdAt": "2020-07-15T05:56:11Z", "commit": {"oid": "b8efca7db81189178e4968b25f85221aa2d36fc4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNTo1NjoxMVrOGxvW4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNjoyNjo0OFrOGxwAig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgwOTMxMg==", "bodyText": "Do we want to have an interface for it?", "url": "https://github.com/camunda-cloud/zeebe/pull/4963#discussion_r454809312", "createdAt": "2020-07-15T05:56:11Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/state/message/MessageStartEventSubscriptionState.java", "diffHunk": "@@ -93,6 +93,10 @@ public void visitSubscriptionsByMessageName(\n         });\n   }\n \n+  public boolean isEmpty() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8efca7db81189178e4968b25f85221aa2d36fc4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgwOTUxOA==", "bodyText": "Actually we added these things only for tests right? Do you see any possibility to do it differently without adding stuff to the production code?", "url": "https://github.com/camunda-cloud/zeebe/pull/4963#discussion_r454809518", "createdAt": "2020-07-15T05:56:48Z", "author": {"login": "Zelldon"}, "path": "engine/src/main/java/io/zeebe/engine/state/message/MessageState.java", "diffHunk": "@@ -319,6 +319,16 @@ public void remove(final long key) {\n         }));\n   }\n \n+  public boolean isEmpty() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8efca7db81189178e4968b25f85221aa2d36fc4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgxMDE1NQ==", "bodyText": "no should prefix anymore \ud83d\udc40 \ud83d\ude31 what with our values and consistency \ud83d\ude04\nI would suggest that we change it to something like shouldEndWithCleanStateOnWorkflowWithServiceTask", "url": "https://github.com/camunda-cloud/zeebe/pull/4963#discussion_r454810155", "createdAt": "2020-07-15T05:58:54Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/state/WorkflowExecutionCleanZeebeStateTest.java", "diffHunk": "@@ -0,0 +1,618 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.state;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.engine.processing.message.MessageObserver;\n+import io.zeebe.engine.state.instance.ElementInstanceState;\n+import io.zeebe.engine.state.instance.EventScopeInstanceState;\n+import io.zeebe.engine.state.instance.IncidentState;\n+import io.zeebe.engine.state.instance.JobState;\n+import io.zeebe.engine.state.instance.TimerInstanceState;\n+import io.zeebe.engine.state.instance.VariablesState;\n+import io.zeebe.engine.state.message.MessageStartEventSubscriptionState;\n+import io.zeebe.engine.state.message.MessageState;\n+import io.zeebe.engine.state.message.MessageSubscriptionState;\n+import io.zeebe.engine.state.message.WorkflowInstanceSubscriptionState;\n+import io.zeebe.engine.util.EngineRule;\n+import io.zeebe.model.bpmn.Bpmn;\n+import io.zeebe.protocol.record.intent.IncidentIntent;\n+import io.zeebe.protocol.record.intent.JobIntent;\n+import io.zeebe.protocol.record.intent.MessageStartEventSubscriptionIntent;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import io.zeebe.test.util.record.RecordingExporter;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.Map;\n+import org.awaitility.Awaitility;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public final class WorkflowExecutionCleanZeebeStateTest {\n+\n+  private static final String PROCESS_ID = \"workflow\";\n+\n+  @Rule public EngineRule engineRule = EngineRule.singlePartition();\n+\n+  private ElementInstanceState elementInstanceState;\n+  private TimerInstanceState timerState;\n+  private EventScopeInstanceState eventScopeInstanceState;\n+  private JobState jobState;\n+  private IncidentState incidentState;\n+  private MessageState messageState;\n+  private MessageSubscriptionState messageSubscriptionState;\n+  private WorkflowInstanceSubscriptionState workflowInstanceSubscriptionState;\n+  private MessageStartEventSubscriptionState messageStartEventSubscriptionState;\n+  private VariablesState variablesState;\n+\n+  @Before\n+  public void init() {\n+    final var zeebeState = engineRule.getZeebeState();\n+\n+    final var workflowState = zeebeState.getWorkflowState();\n+    elementInstanceState = workflowState.getElementInstanceState();\n+    variablesState = elementInstanceState.getVariablesState();\n+    timerState = workflowState.getTimerState();\n+    eventScopeInstanceState = workflowState.getEventScopeInstanceState();\n+\n+    jobState = zeebeState.getJobState();\n+    incidentState = zeebeState.getIncidentState();\n+    messageState = zeebeState.getMessageState();\n+    messageSubscriptionState = zeebeState.getMessageSubscriptionState();\n+    workflowInstanceSubscriptionState = zeebeState.getWorkflowInstanceSubscriptionState();\n+    messageStartEventSubscriptionState = zeebeState.getMessageStartEventSubscriptionState();\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithServiceTask() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8efca7db81189178e4968b25f85221aa2d36fc4"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgxMDU0Nw==", "bodyText": "no given, when then comments anymore ?", "url": "https://github.com/camunda-cloud/zeebe/pull/4963#discussion_r454810547", "createdAt": "2020-07-15T06:00:05Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/state/WorkflowExecutionCleanZeebeStateTest.java", "diffHunk": "@@ -0,0 +1,618 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.state;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.engine.processing.message.MessageObserver;\n+import io.zeebe.engine.state.instance.ElementInstanceState;\n+import io.zeebe.engine.state.instance.EventScopeInstanceState;\n+import io.zeebe.engine.state.instance.IncidentState;\n+import io.zeebe.engine.state.instance.JobState;\n+import io.zeebe.engine.state.instance.TimerInstanceState;\n+import io.zeebe.engine.state.instance.VariablesState;\n+import io.zeebe.engine.state.message.MessageStartEventSubscriptionState;\n+import io.zeebe.engine.state.message.MessageState;\n+import io.zeebe.engine.state.message.MessageSubscriptionState;\n+import io.zeebe.engine.state.message.WorkflowInstanceSubscriptionState;\n+import io.zeebe.engine.util.EngineRule;\n+import io.zeebe.model.bpmn.Bpmn;\n+import io.zeebe.protocol.record.intent.IncidentIntent;\n+import io.zeebe.protocol.record.intent.JobIntent;\n+import io.zeebe.protocol.record.intent.MessageStartEventSubscriptionIntent;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import io.zeebe.test.util.record.RecordingExporter;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.Map;\n+import org.awaitility.Awaitility;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public final class WorkflowExecutionCleanZeebeStateTest {\n+\n+  private static final String PROCESS_ID = \"workflow\";\n+\n+  @Rule public EngineRule engineRule = EngineRule.singlePartition();\n+\n+  private ElementInstanceState elementInstanceState;\n+  private TimerInstanceState timerState;\n+  private EventScopeInstanceState eventScopeInstanceState;\n+  private JobState jobState;\n+  private IncidentState incidentState;\n+  private MessageState messageState;\n+  private MessageSubscriptionState messageSubscriptionState;\n+  private WorkflowInstanceSubscriptionState workflowInstanceSubscriptionState;\n+  private MessageStartEventSubscriptionState messageStartEventSubscriptionState;\n+  private VariablesState variablesState;\n+\n+  @Before\n+  public void init() {\n+    final var zeebeState = engineRule.getZeebeState();\n+\n+    final var workflowState = zeebeState.getWorkflowState();\n+    elementInstanceState = workflowState.getElementInstanceState();\n+    variablesState = elementInstanceState.getVariablesState();\n+    timerState = workflowState.getTimerState();\n+    eventScopeInstanceState = workflowState.getEventScopeInstanceState();\n+\n+    jobState = zeebeState.getJobState();\n+    incidentState = zeebeState.getIncidentState();\n+    messageState = zeebeState.getMessageState();\n+    messageSubscriptionState = zeebeState.getMessageSubscriptionState();\n+    workflowInstanceSubscriptionState = zeebeState.getWorkflowInstanceSubscriptionState();\n+    messageStartEventSubscriptionState = zeebeState.getMessageStartEventSubscriptionState();\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithServiceTask() {\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .serviceTask(\"task\", t -> t.zeebeJobType(\"test\"))\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).withVariable(\"x\", 1).create();\n+\n+    engineRule\n+        .job()\n+        .ofInstance(workflowInstanceKey)\n+        .withType(\"test\")\n+        .withVariable(\"y\", 2)\n+        .complete();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithSubprocess() {\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .subProcess(\n+                    \"subprocess\",\n+                    subProcess ->\n+                        subProcess\n+                            .zeebeInputExpression(\"x\", \"y\")\n+                            .zeebeOutputExpression(\"y\", \"z\")\n+                            .embeddedSubProcess()\n+                            .startEvent()\n+                            .endEvent())\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).withVariable(\"x\", 1).create();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithMultiInstance() {\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .serviceTask(\n+                    \"task\",\n+                    t ->\n+                        t.zeebeJobType(\"test\")\n+                            .multiInstance(\n+                                m ->\n+                                    m.zeebeInputCollectionExpression(\"items\")\n+                                        .zeebeInputElement(\"item\")\n+                                        .zeebeOutputCollection(\"results\")\n+                                        .zeebeOutputElementExpression(\"result\")))\n+                .endEvent()\n+                .done())\n+        .deploy();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8efca7db81189178e4968b25f85221aa2d36fc4"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgxODk3Mw==", "bodyText": "Can we have one test with input mapping? Does it make a difference?", "url": "https://github.com/camunda-cloud/zeebe/pull/4963#discussion_r454818973", "createdAt": "2020-07-15T06:24:17Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/state/WorkflowExecutionCleanZeebeStateTest.java", "diffHunk": "@@ -0,0 +1,618 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.state;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.engine.processing.message.MessageObserver;\n+import io.zeebe.engine.state.instance.ElementInstanceState;\n+import io.zeebe.engine.state.instance.EventScopeInstanceState;\n+import io.zeebe.engine.state.instance.IncidentState;\n+import io.zeebe.engine.state.instance.JobState;\n+import io.zeebe.engine.state.instance.TimerInstanceState;\n+import io.zeebe.engine.state.instance.VariablesState;\n+import io.zeebe.engine.state.message.MessageStartEventSubscriptionState;\n+import io.zeebe.engine.state.message.MessageState;\n+import io.zeebe.engine.state.message.MessageSubscriptionState;\n+import io.zeebe.engine.state.message.WorkflowInstanceSubscriptionState;\n+import io.zeebe.engine.util.EngineRule;\n+import io.zeebe.model.bpmn.Bpmn;\n+import io.zeebe.protocol.record.intent.IncidentIntent;\n+import io.zeebe.protocol.record.intent.JobIntent;\n+import io.zeebe.protocol.record.intent.MessageStartEventSubscriptionIntent;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import io.zeebe.test.util.record.RecordingExporter;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.Map;\n+import org.awaitility.Awaitility;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public final class WorkflowExecutionCleanZeebeStateTest {\n+\n+  private static final String PROCESS_ID = \"workflow\";\n+\n+  @Rule public EngineRule engineRule = EngineRule.singlePartition();\n+\n+  private ElementInstanceState elementInstanceState;\n+  private TimerInstanceState timerState;\n+  private EventScopeInstanceState eventScopeInstanceState;\n+  private JobState jobState;\n+  private IncidentState incidentState;\n+  private MessageState messageState;\n+  private MessageSubscriptionState messageSubscriptionState;\n+  private WorkflowInstanceSubscriptionState workflowInstanceSubscriptionState;\n+  private MessageStartEventSubscriptionState messageStartEventSubscriptionState;\n+  private VariablesState variablesState;\n+\n+  @Before\n+  public void init() {\n+    final var zeebeState = engineRule.getZeebeState();\n+\n+    final var workflowState = zeebeState.getWorkflowState();\n+    elementInstanceState = workflowState.getElementInstanceState();\n+    variablesState = elementInstanceState.getVariablesState();\n+    timerState = workflowState.getTimerState();\n+    eventScopeInstanceState = workflowState.getEventScopeInstanceState();\n+\n+    jobState = zeebeState.getJobState();\n+    incidentState = zeebeState.getIncidentState();\n+    messageState = zeebeState.getMessageState();\n+    messageSubscriptionState = zeebeState.getMessageSubscriptionState();\n+    workflowInstanceSubscriptionState = zeebeState.getWorkflowInstanceSubscriptionState();\n+    messageStartEventSubscriptionState = zeebeState.getMessageStartEventSubscriptionState();\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithServiceTask() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgxMDE1NQ=="}, "originalCommit": {"oid": "b8efca7db81189178e4968b25f85221aa2d36fc4"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgxOTk3OA==", "bodyText": "Can we somehow just check whether the db is empty? I have the feeling this is a bit unstable if we miss to add a state here", "url": "https://github.com/camunda-cloud/zeebe/pull/4963#discussion_r454819978", "createdAt": "2020-07-15T06:26:48Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/state/WorkflowExecutionCleanZeebeStateTest.java", "diffHunk": "@@ -0,0 +1,618 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.state;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.engine.processing.message.MessageObserver;\n+import io.zeebe.engine.state.instance.ElementInstanceState;\n+import io.zeebe.engine.state.instance.EventScopeInstanceState;\n+import io.zeebe.engine.state.instance.IncidentState;\n+import io.zeebe.engine.state.instance.JobState;\n+import io.zeebe.engine.state.instance.TimerInstanceState;\n+import io.zeebe.engine.state.instance.VariablesState;\n+import io.zeebe.engine.state.message.MessageStartEventSubscriptionState;\n+import io.zeebe.engine.state.message.MessageState;\n+import io.zeebe.engine.state.message.MessageSubscriptionState;\n+import io.zeebe.engine.state.message.WorkflowInstanceSubscriptionState;\n+import io.zeebe.engine.util.EngineRule;\n+import io.zeebe.model.bpmn.Bpmn;\n+import io.zeebe.protocol.record.intent.IncidentIntent;\n+import io.zeebe.protocol.record.intent.JobIntent;\n+import io.zeebe.protocol.record.intent.MessageStartEventSubscriptionIntent;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import io.zeebe.test.util.record.RecordingExporter;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.Map;\n+import org.awaitility.Awaitility;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public final class WorkflowExecutionCleanZeebeStateTest {\n+\n+  private static final String PROCESS_ID = \"workflow\";\n+\n+  @Rule public EngineRule engineRule = EngineRule.singlePartition();\n+\n+  private ElementInstanceState elementInstanceState;\n+  private TimerInstanceState timerState;\n+  private EventScopeInstanceState eventScopeInstanceState;\n+  private JobState jobState;\n+  private IncidentState incidentState;\n+  private MessageState messageState;\n+  private MessageSubscriptionState messageSubscriptionState;\n+  private WorkflowInstanceSubscriptionState workflowInstanceSubscriptionState;\n+  private MessageStartEventSubscriptionState messageStartEventSubscriptionState;\n+  private VariablesState variablesState;\n+\n+  @Before\n+  public void init() {\n+    final var zeebeState = engineRule.getZeebeState();\n+\n+    final var workflowState = zeebeState.getWorkflowState();\n+    elementInstanceState = workflowState.getElementInstanceState();\n+    variablesState = elementInstanceState.getVariablesState();\n+    timerState = workflowState.getTimerState();\n+    eventScopeInstanceState = workflowState.getEventScopeInstanceState();\n+\n+    jobState = zeebeState.getJobState();\n+    incidentState = zeebeState.getIncidentState();\n+    messageState = zeebeState.getMessageState();\n+    messageSubscriptionState = zeebeState.getMessageSubscriptionState();\n+    workflowInstanceSubscriptionState = zeebeState.getWorkflowInstanceSubscriptionState();\n+    messageStartEventSubscriptionState = zeebeState.getMessageStartEventSubscriptionState();\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithServiceTask() {\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .serviceTask(\"task\", t -> t.zeebeJobType(\"test\"))\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).withVariable(\"x\", 1).create();\n+\n+    engineRule\n+        .job()\n+        .ofInstance(workflowInstanceKey)\n+        .withType(\"test\")\n+        .withVariable(\"y\", 2)\n+        .complete();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithSubprocess() {\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .subProcess(\n+                    \"subprocess\",\n+                    subProcess ->\n+                        subProcess\n+                            .zeebeInputExpression(\"x\", \"y\")\n+                            .zeebeOutputExpression(\"y\", \"z\")\n+                            .embeddedSubProcess()\n+                            .startEvent()\n+                            .endEvent())\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).withVariable(\"x\", 1).create();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithMultiInstance() {\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .serviceTask(\n+                    \"task\",\n+                    t ->\n+                        t.zeebeJobType(\"test\")\n+                            .multiInstance(\n+                                m ->\n+                                    m.zeebeInputCollectionExpression(\"items\")\n+                                        .zeebeInputElement(\"item\")\n+                                        .zeebeOutputCollection(\"results\")\n+                                        .zeebeOutputElementExpression(\"result\")))\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    final var workflowInstanceKey =\n+        engineRule\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(\"items\", List.of(1))\n+            .create();\n+\n+    engineRule\n+        .job()\n+        .ofInstance(workflowInstanceKey)\n+        .withType(\"test\")\n+        .withVariable(\"result\", 2)\n+        .complete();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithTimerEvent() {\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .intermediateCatchEvent(\"timer\", e -> e.timerWithDuration(\"PT0S\"))\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).create();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithMessageEvent() {\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .intermediateCatchEvent(\n+                    \"message\",\n+                    e ->\n+                        e.message(m -> m.name(\"message\").zeebeCorrelationKeyExpression(\"key\"))\n+                            .zeebeOutputExpression(\"x\", \"y\"))\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    final var workflowInstanceKey =\n+        engineRule\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(\"key\", \"key-1\")\n+            .create();\n+\n+    final var timeToLive = Duration.ofSeconds(10);\n+    engineRule\n+        .message()\n+        .withName(\"message\")\n+        .withCorrelationKey(\"key-1\")\n+        .withTimeToLive(timeToLive)\n+        .withVariables(Map.of(\"x\", 1))\n+        .publish();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    engineRule.increaseTime(timeToLive.plus(MessageObserver.MESSAGE_TIME_TO_LIVE_CHECK_INTERVAL));\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithMessageStartEvent() {\n+    final var deployment =\n+        engineRule\n+            .deployment()\n+            .withXmlResource(\n+                Bpmn.createExecutableProcess(PROCESS_ID)\n+                    .startEvent()\n+                    .message(m -> m.name(\"message\").zeebeCorrelationKeyExpression(\"key\"))\n+                    .zeebeOutputExpression(\"x\", \"y\")\n+                    .endEvent()\n+                    .done())\n+            .deploy();\n+\n+    final var workflowKey = deployment.getValue().getDeployedWorkflows().get(0).getWorkflowKey();\n+\n+    final var timeToLive = Duration.ofSeconds(10);\n+    final var messagePublished =\n+        engineRule\n+            .message()\n+            .withName(\"message\")\n+            .withCorrelationKey(\"key-1\")\n+            .withTimeToLive(timeToLive)\n+            .withVariables(Map.of(\"x\", 1))\n+            .publish();\n+\n+    final var workflowInstanceKey =\n+        RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_ACTIVATING)\n+            .withWorkflowKey(workflowKey)\n+            .withElementType(BpmnElementType.PROCESS)\n+            .getFirst()\n+            .getKey();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    engineRule.increaseTime(timeToLive.plus(MessageObserver.MESSAGE_TIME_TO_LIVE_CHECK_INTERVAL));\n+\n+    // deploy new workflow without message start event to close the open subscription\n+    engineRule\n+        .deployment()\n+        .withXmlResource(Bpmn.createExecutableProcess(PROCESS_ID).startEvent().endEvent().done())\n+        .deploy();\n+\n+    RecordingExporter.messageStartEventSubscriptionRecords(\n+            MessageStartEventSubscriptionIntent.CLOSED)\n+        .withWorkfloKey(workflowKey)\n+        .await();\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithErrorEvent() {\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .serviceTask(\"task\", t -> t.zeebeJobType(\"test\"))\n+                .boundaryEvent(\"error\", b -> b.error(\"ERROR\"))\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).withVariable(\"x\", 1).create();\n+\n+    engineRule\n+        .job()\n+        .ofInstance(workflowInstanceKey)\n+        .withType(\"test\")\n+        .withErrorCode(\"ERROR\")\n+        .throwError();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithIncident() {\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .serviceTask(\"task\", t -> t.zeebeJobType(\"test\"))\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).withVariable(\"x\", 1).create();\n+\n+    engineRule.job().ofInstance(workflowInstanceKey).withType(\"test\").withRetries(0).fail();\n+\n+    final var incidentCreated =\n+        RecordingExporter.incidentRecords(IncidentIntent.CREATED)\n+            .withWorkflowInstanceKey(workflowInstanceKey)\n+            .getFirst();\n+\n+    engineRule.job().withKey(incidentCreated.getValue().getJobKey()).withRetries(1).updateRetries();\n+\n+    engineRule\n+        .incident()\n+        .ofInstance(workflowInstanceKey)\n+        .withKey(incidentCreated.getKey())\n+        .resolve();\n+\n+    engineRule\n+        .job()\n+        .ofInstance(workflowInstanceKey)\n+        .withType(\"test\")\n+        .withVariable(\"y\", 2)\n+        .complete();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithExclusiveGateway() {\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .exclusiveGateway()\n+                .sequenceFlowId(\"s1\")\n+                .conditionExpression(\"x > 10\")\n+                .endEvent()\n+                .moveToLastGateway()\n+                .sequenceFlowId(\"s2\")\n+                .conditionExpression(\"x <= 10\")\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).withVariable(\"x\", 1).create();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithParallelGateway() {\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .parallelGateway(\"fork\")\n+                .endEvent()\n+                .moveToNode(\"fork\")\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).create();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithEventBasedGateway() {\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .eventBasedGateway()\n+                .intermediateCatchEvent(\"timer\", e -> e.timerWithDuration(\"PT0S\"))\n+                .endEvent()\n+                .moveToLastGateway()\n+                .intermediateCatchEvent(\n+                    \"message\",\n+                    e -> e.message(m -> m.name(\"message\").zeebeCorrelationKeyExpression(\"key\")))\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    final var workflowInstanceKey =\n+        engineRule\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(\"key\", \"key-1\")\n+            .create();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithEventSubprocess() {\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .eventSubProcess(\n+                    \"event-subprocess\",\n+                    subprocess ->\n+                        subprocess\n+                            .startEvent()\n+                            .interrupting(true)\n+                            .timerWithDuration(\"PT0.1S\")\n+                            .endEvent())\n+                .startEvent()\n+                .serviceTask(\"task\", t -> t.zeebeJobType(\"test\"))\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).create();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithCallActivity() {\n+    final var childWorkflow = Bpmn.createExecutableProcess(\"child\").startEvent().endEvent().done();\n+    final var parentWorkflow =\n+        Bpmn.createExecutableProcess(PROCESS_ID)\n+            .startEvent()\n+            .callActivity(\"call\", c -> c.zeebeProcessId(\"child\"))\n+            .endEvent()\n+            .done();\n+\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\"child.bpmn\", childWorkflow)\n+        .withXmlResource(\"parent.bpmn\", parentWorkflow)\n+        .deploy();\n+\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).create();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowCreatedWithResult() {\n+    engineRule\n+        .deployment()\n+        .withXmlResource(Bpmn.createExecutableProcess(PROCESS_ID).startEvent().endEvent().done())\n+        .deploy();\n+\n+    final var workflowInstanceKey =\n+        engineRule\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(\"x\", 1)\n+            .withResult()\n+            .create();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowCanceled() {\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .serviceTask(\"task\", t -> t.zeebeJobType(\"test\"))\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).withVariable(\"x\", 1).create();\n+\n+    RecordingExporter.jobRecords(JobIntent.CREATED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .await();\n+\n+    engineRule.workflowInstance().withInstanceKey(workflowInstanceKey).cancel();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_TERMINATED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  private void assertThatStateIsEmpty() {\n+    // sometimes the state takes few moments until is is empty\n+    Awaitility.await()\n+        .untilAsserted(\n+            () -> {\n+              assertThat(variablesState.isEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8efca7db81189178e4968b25f85221aa2d36fc4"}, "originalPosition": 577}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMzM2MjEz", "url": "https://github.com/camunda-cloud/zeebe/pull/4963#pullrequestreview-461336213", "createdAt": "2020-08-05T04:45:29Z", "commit": {"oid": "f4c904b26a9524743b3fc79ea285dae914e5aee0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNDo0NToyOVrOG75_0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQwNDo0NToyOVrOG75_0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ2OTM5NA==", "bodyText": "What is the default awaiting max time?", "url": "https://github.com/camunda-cloud/zeebe/pull/4963#discussion_r465469394", "createdAt": "2020-08-05T04:45:29Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/state/WorkflowExecutionCleanStateTest.java", "diffHunk": "@@ -0,0 +1,612 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.state;\n+\n+import static java.util.function.Predicate.not;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.engine.processing.message.MessageObserver;\n+import io.zeebe.engine.util.EngineRule;\n+import io.zeebe.model.bpmn.Bpmn;\n+import io.zeebe.protocol.record.intent.IncidentIntent;\n+import io.zeebe.protocol.record.intent.JobIntent;\n+import io.zeebe.protocol.record.intent.MessageStartEventSubscriptionIntent;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import io.zeebe.test.util.record.RecordingExporter;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.awaitility.Awaitility;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public final class WorkflowExecutionCleanStateTest {\n+\n+  private static final String PROCESS_ID = \"workflow\";\n+\n+  private static final List<ZbColumnFamilies> IGNORE_NON_EMPTY_COLUMNS =\n+      List.of(\n+          ZbColumnFamilies.DEFAULT,\n+          ZbColumnFamilies.KEY,\n+          ZbColumnFamilies.WORKFLOW_VERSION,\n+          ZbColumnFamilies.WORKFLOW_CACHE,\n+          ZbColumnFamilies.WORKFLOW_CACHE_BY_ID_AND_VERSION,\n+          ZbColumnFamilies.WORKFLOW_CACHE_LATEST_KEY,\n+          ZbColumnFamilies.WORKFLOW_CACHE_DIGEST_BY_ID);\n+\n+  @Rule public EngineRule engineRule = EngineRule.singlePartition();\n+\n+  private ZeebeState zeebeState;\n+\n+  @Before\n+  public void init() {\n+    zeebeState = engineRule.getZeebeState();\n+\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithServiceTask() {\n+    // given\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .serviceTask(\"task\", t -> t.zeebeJobType(\"test\"))\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    // when\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).withVariable(\"x\", 1).create();\n+\n+    engineRule\n+        .job()\n+        .ofInstance(workflowInstanceKey)\n+        .withType(\"test\")\n+        .withVariable(\"y\", 2)\n+        .complete();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    // then\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithSubprocess() {\n+    // given\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .subProcess(\n+                    \"subprocess\",\n+                    subProcess ->\n+                        subProcess\n+                            .zeebeInputExpression(\"x\", \"y\")\n+                            .zeebeOutputExpression(\"y\", \"z\")\n+                            .embeddedSubProcess()\n+                            .startEvent()\n+                            .endEvent())\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    // when\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).withVariable(\"x\", 1).create();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    // then\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithMultiInstance() {\n+    // given\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .serviceTask(\n+                    \"task\",\n+                    t ->\n+                        t.zeebeJobType(\"test\")\n+                            .multiInstance(\n+                                m ->\n+                                    m.zeebeInputCollectionExpression(\"items\")\n+                                        .zeebeInputElement(\"item\")\n+                                        .zeebeOutputCollection(\"results\")\n+                                        .zeebeOutputElementExpression(\"result\")))\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    // when\n+    final var workflowInstanceKey =\n+        engineRule\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(\"items\", List.of(1))\n+            .create();\n+\n+    engineRule\n+        .job()\n+        .ofInstance(workflowInstanceKey)\n+        .withType(\"test\")\n+        .withVariable(\"result\", 2)\n+        .complete();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    // then\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithTimerEvent() {\n+    // given\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .intermediateCatchEvent(\"timer\", e -> e.timerWithDuration(\"PT0S\"))\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    // when\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).create();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    // then\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithMessageEvent() {\n+    // given\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .intermediateCatchEvent(\n+                    \"message\",\n+                    e ->\n+                        e.message(m -> m.name(\"message\").zeebeCorrelationKeyExpression(\"key\"))\n+                            .zeebeOutputExpression(\"x\", \"y\"))\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    final var workflowInstanceKey =\n+        engineRule\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(\"key\", \"key-1\")\n+            .create();\n+\n+    // when\n+    final var timeToLive = Duration.ofSeconds(10);\n+    engineRule\n+        .message()\n+        .withName(\"message\")\n+        .withCorrelationKey(\"key-1\")\n+        .withTimeToLive(timeToLive)\n+        .withVariables(Map.of(\"x\", 1))\n+        .publish();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    engineRule.increaseTime(timeToLive.plus(MessageObserver.MESSAGE_TIME_TO_LIVE_CHECK_INTERVAL));\n+\n+    // then\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithMessageStartEvent() {\n+    // given\n+    final var deployment =\n+        engineRule\n+            .deployment()\n+            .withXmlResource(\n+                Bpmn.createExecutableProcess(PROCESS_ID)\n+                    .startEvent()\n+                    .message(m -> m.name(\"message\").zeebeCorrelationKeyExpression(\"key\"))\n+                    .zeebeOutputExpression(\"x\", \"y\")\n+                    .endEvent()\n+                    .done())\n+            .deploy();\n+\n+    final var workflowKey = deployment.getValue().getDeployedWorkflows().get(0).getWorkflowKey();\n+\n+    // when\n+    final var timeToLive = Duration.ofSeconds(10);\n+    final var messagePublished =\n+        engineRule\n+            .message()\n+            .withName(\"message\")\n+            .withCorrelationKey(\"key-1\")\n+            .withTimeToLive(timeToLive)\n+            .withVariables(Map.of(\"x\", 1))\n+            .publish();\n+\n+    final var workflowInstanceKey =\n+        RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_ACTIVATING)\n+            .withWorkflowKey(workflowKey)\n+            .withElementType(BpmnElementType.PROCESS)\n+            .getFirst()\n+            .getKey();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    engineRule.increaseTime(timeToLive.plus(MessageObserver.MESSAGE_TIME_TO_LIVE_CHECK_INTERVAL));\n+\n+    // deploy new workflow without message start event to close the open subscription\n+    engineRule\n+        .deployment()\n+        .withXmlResource(Bpmn.createExecutableProcess(PROCESS_ID).startEvent().endEvent().done())\n+        .deploy();\n+\n+    RecordingExporter.messageStartEventSubscriptionRecords(\n+            MessageStartEventSubscriptionIntent.CLOSED)\n+        .withWorkfloKey(workflowKey)\n+        .await();\n+\n+    // then\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithErrorEvent() {\n+    // given\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .serviceTask(\"task\", t -> t.zeebeJobType(\"test\"))\n+                .boundaryEvent(\"error\", b -> b.error(\"ERROR\"))\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).withVariable(\"x\", 1).create();\n+\n+    // when\n+    engineRule\n+        .job()\n+        .ofInstance(workflowInstanceKey)\n+        .withType(\"test\")\n+        .withErrorCode(\"ERROR\")\n+        .throwError();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    // then\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithIncident() {\n+    // given\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .serviceTask(\"task\", t -> t.zeebeJobType(\"test\"))\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).withVariable(\"x\", 1).create();\n+\n+    // when\n+    engineRule.job().ofInstance(workflowInstanceKey).withType(\"test\").withRetries(0).fail();\n+\n+    final var incidentCreated =\n+        RecordingExporter.incidentRecords(IncidentIntent.CREATED)\n+            .withWorkflowInstanceKey(workflowInstanceKey)\n+            .getFirst();\n+\n+    engineRule.job().withKey(incidentCreated.getValue().getJobKey()).withRetries(1).updateRetries();\n+\n+    engineRule\n+        .incident()\n+        .ofInstance(workflowInstanceKey)\n+        .withKey(incidentCreated.getKey())\n+        .resolve();\n+\n+    engineRule\n+        .job()\n+        .ofInstance(workflowInstanceKey)\n+        .withType(\"test\")\n+        .withVariable(\"y\", 2)\n+        .complete();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    // then\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithExclusiveGateway() {\n+    // given\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .exclusiveGateway()\n+                .sequenceFlowId(\"s1\")\n+                .conditionExpression(\"x > 10\")\n+                .endEvent()\n+                .moveToLastGateway()\n+                .sequenceFlowId(\"s2\")\n+                .conditionExpression(\"x <= 10\")\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    // when\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).withVariable(\"x\", 1).create();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    // then\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithParallelGateway() {\n+    // given\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .parallelGateway(\"fork\")\n+                .endEvent()\n+                .moveToNode(\"fork\")\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    // when\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).create();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    // then\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithEventBasedGateway() {\n+    // given\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .eventBasedGateway()\n+                .intermediateCatchEvent(\"timer\", e -> e.timerWithDuration(\"PT0S\"))\n+                .endEvent()\n+                .moveToLastGateway()\n+                .intermediateCatchEvent(\n+                    \"message\",\n+                    e -> e.message(m -> m.name(\"message\").zeebeCorrelationKeyExpression(\"key\")))\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    // when\n+    final var workflowInstanceKey =\n+        engineRule\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(\"key\", \"key-1\")\n+            .create();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    // then\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithEventSubprocess() {\n+    // given\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .eventSubProcess(\n+                    \"event-subprocess\",\n+                    subprocess ->\n+                        subprocess\n+                            .startEvent()\n+                            .interrupting(true)\n+                            .timerWithDuration(\"PT0.1S\")\n+                            .endEvent())\n+                .startEvent()\n+                .serviceTask(\"task\", t -> t.zeebeJobType(\"test\"))\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    // when\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).create();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    // then\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowWithCallActivity() {\n+    // given\n+    final var childWorkflow = Bpmn.createExecutableProcess(\"child\").startEvent().endEvent().done();\n+    final var parentWorkflow =\n+        Bpmn.createExecutableProcess(PROCESS_ID)\n+            .startEvent()\n+            .callActivity(\"call\", c -> c.zeebeProcessId(\"child\"))\n+            .endEvent()\n+            .done();\n+\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\"child.bpmn\", childWorkflow)\n+        .withXmlResource(\"parent.bpmn\", parentWorkflow)\n+        .deploy();\n+\n+    // when\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).create();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    // then\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowCreatedWithResult() {\n+    // given\n+    engineRule\n+        .deployment()\n+        .withXmlResource(Bpmn.createExecutableProcess(PROCESS_ID).startEvent().endEvent().done())\n+        .deploy();\n+\n+    // when\n+    final var workflowInstanceKey =\n+        engineRule\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(\"x\", 1)\n+            .withResult()\n+            .create();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_COMPLETED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    // then\n+    assertThatStateIsEmpty();\n+  }\n+\n+  @Test\n+  public void testWorkflowCanceled() {\n+    // given\n+    engineRule\n+        .deployment()\n+        .withXmlResource(\n+            Bpmn.createExecutableProcess(PROCESS_ID)\n+                .startEvent()\n+                .serviceTask(\"task\", t -> t.zeebeJobType(\"test\"))\n+                .endEvent()\n+                .done())\n+        .deploy();\n+\n+    final var workflowInstanceKey =\n+        engineRule.workflowInstance().ofBpmnProcessId(PROCESS_ID).withVariable(\"x\", 1).create();\n+\n+    RecordingExporter.jobRecords(JobIntent.CREATED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .await();\n+\n+    // when\n+    engineRule.workflowInstance().withInstanceKey(workflowInstanceKey).cancel();\n+\n+    RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_TERMINATED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .withElementType(BpmnElementType.PROCESS)\n+        .await();\n+\n+    // then\n+    assertThatStateIsEmpty();\n+  }\n+\n+  private void assertThatStateIsEmpty() {\n+    // sometimes the state takes few moments until is is empty\n+    Awaitility.await()\n+        .untilAsserted(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4c904b26a9524743b3fc79ea285dae914e5aee0"}, "originalPosition": 601}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMzM2OTUy", "url": "https://github.com/camunda-cloud/zeebe/pull/4963#pullrequestreview-461336952", "createdAt": "2020-08-05T04:48:01Z", "commit": {"oid": "f4c904b26a9524743b3fc79ea285dae914e5aee0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d4265df0eac4671cf3eb62b924e032eca9ea9eb", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/2d4265df0eac4671cf3eb62b924e032eca9ea9eb", "committedDate": "2020-08-05T05:38:06Z", "message": "fix(broker): clean up the workflow state\n\n* don't store event variables in the state if the event doesn't provide any variables (e.g. for timer/error events)\n* remove data from the event scope instance state when the message start event subscription is closed\n* add test case to verify that the workflow execution clean its state after the workflow instance is completed"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f4c904b26a9524743b3fc79ea285dae914e5aee0", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/f4c904b26a9524743b3fc79ea285dae914e5aee0", "committedDate": "2020-08-04T07:17:40Z", "message": "chore(engine): apply review hints\n\n* remove isEmpty() methods from states\n* add new method to ZeebeDB to check if a column is empty\n* rename test class and add given-when-then comments"}, "afterCommit": {"oid": "2d4265df0eac4671cf3eb62b924e032eca9ea9eb", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/2d4265df0eac4671cf3eb62b924e032eca9ea9eb", "committedDate": "2020-08-05T05:38:06Z", "message": "fix(broker): clean up the workflow state\n\n* don't store event variables in the state if the event doesn't provide any variables (e.g. for timer/error events)\n* remove data from the event scope instance state when the message start event subscription is closed\n* add test case to verify that the workflow execution clean its state after the workflow instance is completed"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2691, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}