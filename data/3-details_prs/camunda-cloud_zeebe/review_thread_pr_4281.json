{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwODY2MjI1", "number": 4281, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNDoxMTo1MVrODxeQcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNDoxMjo0N1rODxeRLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjAyNTQ2OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/util/TestStreams.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNDoxMTo1MVrOGE9hrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOToyNzo1OFrOGHGyHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1NTUzMw==", "bodyText": "Why this failed?", "url": "https://github.com/camunda-cloud/zeebe/pull/4281#discussion_r407855533", "createdAt": "2020-04-14T04:11:51Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/util/TestStreams.java", "diffHunk": "@@ -444,7 +444,11 @@ public void close() throws Exception {\n         return;\n       }\n \n-      asyncSnapshotDirector.closeAsync().join();\n+      try {\n+        asyncSnapshotDirector.closeAsync().join();\n+      } catch (final Exception e) {\n+        Loggers.IO_LOGGER.debug(\"Close snapshot director failed\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76020d3f96b29a47aa54c9271a975928d3f444e8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5MDMwNg==", "bodyText": "When we try to close asyncSnapshotDirector, Stream processor actor can be already closed because it has failed. AsynsSnapshotDirector tries to get the lastCommitPosition but fails because StreamProcessor is closed/failed.", "url": "https://github.com/camunda-cloud/zeebe/pull/4281#discussion_r407990306", "createdAt": "2020-04-14T09:20:22Z", "author": {"login": "deepthidevaki"}, "path": "engine/src/test/java/io/zeebe/engine/util/TestStreams.java", "diffHunk": "@@ -444,7 +444,11 @@ public void close() throws Exception {\n         return;\n       }\n \n-      asyncSnapshotDirector.closeAsync().join();\n+      try {\n+        asyncSnapshotDirector.closeAsync().join();\n+      } catch (final Exception e) {\n+        Loggers.IO_LOGGER.debug(\"Close snapshot director failed\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1NTUzMw=="}, "originalCommit": {"oid": "76020d3f96b29a47aa54c9271a975928d3f444e8"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwNDM1MQ==", "bodyText": "this is no longer true due to removing the enforcing snapshot", "url": "https://github.com/camunda-cloud/zeebe/pull/4281#discussion_r410104351", "createdAt": "2020-04-17T09:27:58Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/util/TestStreams.java", "diffHunk": "@@ -444,7 +444,11 @@ public void close() throws Exception {\n         return;\n       }\n \n-      asyncSnapshotDirector.closeAsync().join();\n+      try {\n+        asyncSnapshotDirector.closeAsync().join();\n+      } catch (final Exception e) {\n+        Loggers.IO_LOGGER.debug(\"Close snapshot director failed\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1NTUzMw=="}, "originalCommit": {"oid": "76020d3f96b29a47aa54c9271a975928d3f444e8"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjAyNzM1OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNDoxMjo0N1rOGE9isQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzo0NTozOVrOGFPXsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1NTc5Mw==", "bodyText": "do we need the mock since we already have the latch with the other listener ?", "url": "https://github.com/camunda-cloud/zeebe/pull/4281#discussion_r407855793", "createdAt": "2020-04-14T04:12:47Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "diffHunk": "@@ -87,6 +87,37 @@ public void onRecovered(final ReadonlyProcessingContext context) {\n     inOrder.verifyNoMoreInteractions();\n   }\n \n+  @Test\n+  public void shouldCallStreamProcessorLifecycleOnFail() throws InterruptedException {\n+    // given\n+    final StreamProcessorLifecycleAware lifecycleAware = mock(StreamProcessorLifecycleAware.class);\n+    final CountDownLatch failedLatch = new CountDownLatch(1);\n+    streamProcessorRule.startTypedStreamProcessor(\n+        (processors, state) ->\n+            processors\n+                .withListener(lifecycleAware)\n+                .withListener(\n+                    new StreamProcessorLifecycleAware() {\n+                      @Override\n+                      public void onRecovered(final ReadonlyProcessingContext context) {\n+                        throw new RuntimeException(\"force fail\");\n+                      }\n+\n+                      @Override\n+                      public void onFailed() {\n+                        failedLatch.countDown();\n+                      }\n+                    }));\n+\n+    // when\n+    assertThat(failedLatch.await(1000, TimeUnit.MILLISECONDS)).isTrue();\n+\n+    // then\n+    verify(lifecycleAware, times(1)).onRecovered(any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76020d3f96b29a47aa54c9271a975928d3f444e8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5MjAzNQ==", "bodyText": "Found the mock useful to verify that onClose() is never called.", "url": "https://github.com/camunda-cloud/zeebe/pull/4281#discussion_r407992035", "createdAt": "2020-04-14T09:23:07Z", "author": {"login": "deepthidevaki"}, "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "diffHunk": "@@ -87,6 +87,37 @@ public void onRecovered(final ReadonlyProcessingContext context) {\n     inOrder.verifyNoMoreInteractions();\n   }\n \n+  @Test\n+  public void shouldCallStreamProcessorLifecycleOnFail() throws InterruptedException {\n+    // given\n+    final StreamProcessorLifecycleAware lifecycleAware = mock(StreamProcessorLifecycleAware.class);\n+    final CountDownLatch failedLatch = new CountDownLatch(1);\n+    streamProcessorRule.startTypedStreamProcessor(\n+        (processors, state) ->\n+            processors\n+                .withListener(lifecycleAware)\n+                .withListener(\n+                    new StreamProcessorLifecycleAware() {\n+                      @Override\n+                      public void onRecovered(final ReadonlyProcessingContext context) {\n+                        throw new RuntimeException(\"force fail\");\n+                      }\n+\n+                      @Override\n+                      public void onFailed() {\n+                        failedLatch.countDown();\n+                      }\n+                    }));\n+\n+    // when\n+    assertThat(failedLatch.await(1000, TimeUnit.MILLISECONDS)).isTrue();\n+\n+    // then\n+    verify(lifecycleAware, times(1)).onRecovered(any());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1NTc5Mw=="}, "originalCommit": {"oid": "76020d3f96b29a47aa54c9271a975928d3f444e8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5NTk2Mw==", "bodyText": "Yes I saw that, but actually we should avoid to test something which should not happen, because this is often error prone and hard to test. I mean how long do you want to wait to ensure that it never happens :) It makes also hard to change things later. We should more focus on things we can verify. I really like the answer https://softwareengineering.stackexchange.com/a/345664/182290 on a related question", "url": "https://github.com/camunda-cloud/zeebe/pull/4281#discussion_r407995963", "createdAt": "2020-04-14T09:29:03Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "diffHunk": "@@ -87,6 +87,37 @@ public void onRecovered(final ReadonlyProcessingContext context) {\n     inOrder.verifyNoMoreInteractions();\n   }\n \n+  @Test\n+  public void shouldCallStreamProcessorLifecycleOnFail() throws InterruptedException {\n+    // given\n+    final StreamProcessorLifecycleAware lifecycleAware = mock(StreamProcessorLifecycleAware.class);\n+    final CountDownLatch failedLatch = new CountDownLatch(1);\n+    streamProcessorRule.startTypedStreamProcessor(\n+        (processors, state) ->\n+            processors\n+                .withListener(lifecycleAware)\n+                .withListener(\n+                    new StreamProcessorLifecycleAware() {\n+                      @Override\n+                      public void onRecovered(final ReadonlyProcessingContext context) {\n+                        throw new RuntimeException(\"force fail\");\n+                      }\n+\n+                      @Override\n+                      public void onFailed() {\n+                        failedLatch.countDown();\n+                      }\n+                    }));\n+\n+    // when\n+    assertThat(failedLatch.await(1000, TimeUnit.MILLISECONDS)).isTrue();\n+\n+    // then\n+    verify(lifecycleAware, times(1)).onRecovered(any());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1NTc5Mw=="}, "originalCommit": {"oid": "76020d3f96b29a47aa54c9271a975928d3f444e8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA2MDk0Mw==", "bodyText": "Make sense. But if we don't test it, what prevents me from accidentally invoking listener:onClose() when the actor failed? Isn't part of the contract that either listener.onFailed or listener.onClose is invoked but not both?", "url": "https://github.com/camunda-cloud/zeebe/pull/4281#discussion_r408060943", "createdAt": "2020-04-14T11:22:20Z", "author": {"login": "deepthidevaki"}, "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "diffHunk": "@@ -87,6 +87,37 @@ public void onRecovered(final ReadonlyProcessingContext context) {\n     inOrder.verifyNoMoreInteractions();\n   }\n \n+  @Test\n+  public void shouldCallStreamProcessorLifecycleOnFail() throws InterruptedException {\n+    // given\n+    final StreamProcessorLifecycleAware lifecycleAware = mock(StreamProcessorLifecycleAware.class);\n+    final CountDownLatch failedLatch = new CountDownLatch(1);\n+    streamProcessorRule.startTypedStreamProcessor(\n+        (processors, state) ->\n+            processors\n+                .withListener(lifecycleAware)\n+                .withListener(\n+                    new StreamProcessorLifecycleAware() {\n+                      @Override\n+                      public void onRecovered(final ReadonlyProcessingContext context) {\n+                        throw new RuntimeException(\"force fail\");\n+                      }\n+\n+                      @Override\n+                      public void onFailed() {\n+                        failedLatch.countDown();\n+                      }\n+                    }));\n+\n+    // when\n+    assertThat(failedLatch.await(1000, TimeUnit.MILLISECONDS)).isTrue();\n+\n+    // then\n+    verify(lifecycleAware, times(1)).onRecovered(any());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1NTc5Mw=="}, "originalCommit": {"oid": "76020d3f96b29a47aa54c9271a975928d3f444e8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA3NTkwMQ==", "bodyText": "Actually nothing. But the question is also should the test prevent you from such thing? When the end result is the same it should be fine right? No matter how many or what kind of methods are called. Is it really part of the contract ? Does it need to be? What values gives us this. As I said we should try to avoid these kind of couplings, since it makes harder to add new features.\nI know I also did this sometimes, since sometimes we have the feeling that we have to make sure such thing doesn't happen. But it makes things often more complicate then it needs to be. We should try to focus on things we can guarantee and verify without using mocks. Like I put a into a function and get b, but I don't care how it is calculated. On these listeners tests it is a bit harder I know.\nBut what we can do is just test things which should happen. Like if something fails it should call onFailure. When I close it, it should call onClose.", "url": "https://github.com/camunda-cloud/zeebe/pull/4281#discussion_r408075901", "createdAt": "2020-04-14T11:51:52Z", "author": {"login": "Zelldon"}, "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "diffHunk": "@@ -87,6 +87,37 @@ public void onRecovered(final ReadonlyProcessingContext context) {\n     inOrder.verifyNoMoreInteractions();\n   }\n \n+  @Test\n+  public void shouldCallStreamProcessorLifecycleOnFail() throws InterruptedException {\n+    // given\n+    final StreamProcessorLifecycleAware lifecycleAware = mock(StreamProcessorLifecycleAware.class);\n+    final CountDownLatch failedLatch = new CountDownLatch(1);\n+    streamProcessorRule.startTypedStreamProcessor(\n+        (processors, state) ->\n+            processors\n+                .withListener(lifecycleAware)\n+                .withListener(\n+                    new StreamProcessorLifecycleAware() {\n+                      @Override\n+                      public void onRecovered(final ReadonlyProcessingContext context) {\n+                        throw new RuntimeException(\"force fail\");\n+                      }\n+\n+                      @Override\n+                      public void onFailed() {\n+                        failedLatch.countDown();\n+                      }\n+                    }));\n+\n+    // when\n+    assertThat(failedLatch.await(1000, TimeUnit.MILLISECONDS)).isTrue();\n+\n+    // then\n+    verify(lifecycleAware, times(1)).onRecovered(any());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1NTc5Mw=="}, "originalCommit": {"oid": "76020d3f96b29a47aa54c9271a975928d3f444e8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0Nzg5MQ==", "bodyText": "ok \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/4281#discussion_r408147891", "createdAt": "2020-04-14T13:45:39Z", "author": {"login": "deepthidevaki"}, "path": "engine/src/test/java/io/zeebe/engine/processor/StreamProcessorTest.java", "diffHunk": "@@ -87,6 +87,37 @@ public void onRecovered(final ReadonlyProcessingContext context) {\n     inOrder.verifyNoMoreInteractions();\n   }\n \n+  @Test\n+  public void shouldCallStreamProcessorLifecycleOnFail() throws InterruptedException {\n+    // given\n+    final StreamProcessorLifecycleAware lifecycleAware = mock(StreamProcessorLifecycleAware.class);\n+    final CountDownLatch failedLatch = new CountDownLatch(1);\n+    streamProcessorRule.startTypedStreamProcessor(\n+        (processors, state) ->\n+            processors\n+                .withListener(lifecycleAware)\n+                .withListener(\n+                    new StreamProcessorLifecycleAware() {\n+                      @Override\n+                      public void onRecovered(final ReadonlyProcessingContext context) {\n+                        throw new RuntimeException(\"force fail\");\n+                      }\n+\n+                      @Override\n+                      public void onFailed() {\n+                        failedLatch.countDown();\n+                      }\n+                    }));\n+\n+    // when\n+    assertThat(failedLatch.await(1000, TimeUnit.MILLISECONDS)).isTrue();\n+\n+    // then\n+    verify(lifecycleAware, times(1)).onRecovered(any());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1NTc5Mw=="}, "originalCommit": {"oid": "76020d3f96b29a47aa54c9271a975928d3f444e8"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4869, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}