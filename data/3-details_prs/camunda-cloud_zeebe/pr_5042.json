{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NzkwMTIx", "number": 5042, "title": "chore(atomix): use compatible serializers", "bodyText": "Description\nThis PR changes the serializer we use in Atomix from the FieldSerializer to the VersionFieldSerializer. This will allow us to make backwards compatible changes to the serialized classes in the future. In order to provide a way for users to upgrade, the serializer used for storage tries to deserialize first with the VersionFieldSerializer and, if that fails then it uses the old one.\nI have tested this manually but I haven't started a benchmark yet since the grafana dashboard is broken. I opened a PR to fix it and, when it's merged I'll start a benchmark.\nRelated issues\ncloses #5038\nDefinition of Done\nNot all items need to be done depending on the issue and the pull request.\nCode changes:\n\n The changes are backwards compatible with previous versions\n If it fixes a bug then PRs are created to backport the fix to the last two minor versions\n\nTesting:\n\n There are unit/integration tests that verify all acceptance criterias of the issue\n New tests are written to ensure backwards compatibility with further versions\n The behavior is tested manually\n The impact of the changes is verified by a benchmark\n\nDocumentation:\n\n The documentation is updated (e.g. BPMN reference, configuration, examples, get-started guides, etc.)\n New content is added to the release announcement", "createdAt": "2020-07-23T15:25:06Z", "url": "https://github.com/camunda-cloud/zeebe/pull/5042", "merged": true, "mergeCommit": {"oid": "335204d686fe427a5110caacfec0ebf8341cd292"}, "closed": true, "closedAt": "2020-08-03T08:50:26Z", "author": {"login": "MiguelPires"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3xnGDAFqTQ1NDI3OTczOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7NfpmgBqjM2MTQ3Nzg4MzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0Mjc5NzM5", "url": "https://github.com/camunda-cloud/zeebe/pull/5042#pullrequestreview-454279739", "createdAt": "2020-07-23T15:59:58Z", "commit": {"oid": "4486824b44e518f9c058a3952a88cf1616d5c733"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MzE5NzQy", "url": "https://github.com/camunda-cloud/zeebe/pull/5042#pullrequestreview-454319742", "createdAt": "2020-07-23T16:50:32Z", "commit": {"oid": "4486824b44e518f9c058a3952a88cf1616d5c733"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo1MDozMlrOG2THiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo1NzoyNlrOG2TXlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4OTUxMw==", "bodyText": "Please rename these variables to 'fallback' and 'default'.", "url": "https://github.com/camunda-cloud/zeebe/pull/5042#discussion_r459589513", "createdAt": "2020-07-23T16:50:32Z", "author": {"login": "pihme"}, "path": "atomix/utils/src/main/java/io/atomix/utils/serializer/FallbackNamespace.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright \u00a9 2020 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.atomix.utils.serializer;\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.nio.ByteBuffer;\n+import org.slf4j.Logger;\n+\n+public class FallbackNamespace implements Namespace {\n+\n+  private static final Logger LOG = getLogger(FallbackNamespace.class);\n+  private static final String DESERIALIZE_ERROR =\n+      \"Deserialization failed with both the versioned and legacy serializers. The legacy serializer failed with:\\n %s\";\n+  private final Namespace legacy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4486824b44e518f9c058a3952a88cf1616d5c733"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU5MzYyMQ==", "bodyText": "Question regarding the rolling update:\nLet's say we back port this change to a patch release for 0.24.\nIf we then swap the parameters in the 0.24 release, would that give us a two step rolling upgrade?\n\nWe can upgrade from 0.24.1 to 0.24.2 because the legacy will be the default in the 0.24.2 branch and the new one will be the fallback\nWe can upgrade from 0.24.2 to 0.25 because we then switch default and fallback\n\nWould this work?\nFor cloud it should be ok to make the 0.24 patch release mandatory as they apply the patch releases anyway. Plus it would save them work on the 0.25 upgrade. For other users we would have to tell them about the two step process.", "url": "https://github.com/camunda-cloud/zeebe/pull/5042#discussion_r459593621", "createdAt": "2020-07-23T16:57:26Z", "author": {"login": "pihme"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/partition/impl/RaftNamespaces.java", "diffHunk": "@@ -127,31 +130,40 @@\n    * <p>*Be aware* we use the Void type for replaced/removed types to keep the id's of used types,\n    * otherwise we break compatibility.\n    */\n-  public static final Namespace RAFT_STORAGE =\n-      Namespace.builder()\n-          .register(Namespaces.BASIC)\n-          .nextId(Namespaces.BEGIN_USER_CUSTOM_ID + 100)\n-          .register(Void.class) // CloseSessionEntry\n-          .register(Void.class) // CommandEntry\n-          .register(ConfigurationEntry.class)\n-          .register(InitializeEntry.class)\n-          .register(Void.class) // KeepAliveEntry\n-          .register(Void.class) // MetadataEntry\n-          .register(Void.class) // OpenSessionEntry\n-          .register(Void.class) // QueryEntry\n-          .register(Void.class) // PrimitiveOperation\n-          .register(Void.class) // DefaultOperationId\n-          .register(Void.class) // OperationType\n-          .register(Void.class) // ReadConsistency\n-          .register(ArrayList.class)\n-          .register(HashSet.class)\n-          .register(DefaultRaftMember.class)\n-          .register(MemberId.class)\n-          .register(RaftMember.Type.class)\n-          .register(Instant.class)\n-          .register(Configuration.class)\n-          .register(ZeebeEntry.class)\n-          .build(\"RaftStorage\");\n+  public static final FallbackNamespace RAFT_STORAGE;\n \n   private RaftNamespaces() {}\n+\n+  static {\n+    final Namespace legacy = registerStorageClasses().build(\"RaftStorage\");\n+    final Namespace compatible =\n+        registerStorageClasses().setCompatible(true).build(\"RaftStorage-compatible\");\n+    RAFT_STORAGE = new FallbackNamespace(legacy, compatible);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4486824b44e518f9c058a3952a88cf1616d5c733"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3MjUxMzAw", "url": "https://github.com/camunda-cloud/zeebe/pull/5042#pullrequestreview-457251300", "createdAt": "2020-07-29T07:12:18Z", "commit": {"oid": "01f3d4012ea560951abf99d53c3a577c18ed4d23"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2603538041d112d3c7e43308c3f4f596c1c80b51", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/2603538041d112d3c7e43308c3f4f596c1c80b51", "committedDate": "2020-08-03T08:10:43Z", "message": "chore(atomix): use compatible serializers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5875f7eeeaf0baeb1712066114c8a243d10c038d", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/5875f7eeeaf0baeb1712066114c8a243d10c038d", "committedDate": "2020-07-29T07:22:30Z", "message": "chore(atomix): variable rename"}, "afterCommit": {"oid": "2603538041d112d3c7e43308c3f4f596c1c80b51", "author": {"user": null}, "url": "https://github.com/camunda-cloud/zeebe/commit/2603538041d112d3c7e43308c3f4f596c1c80b51", "committedDate": "2020-08-03T08:10:43Z", "message": "chore(atomix): use compatible serializers"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2611, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}