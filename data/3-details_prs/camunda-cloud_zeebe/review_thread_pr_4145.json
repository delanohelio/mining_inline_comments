{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0ODQ1Mjcx", "number": 4145, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNDo0ODo1MVrODs8dng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzo1NTo1NFrODvI78g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDU0NTU4OnYy", "diffSide": "RIGHT", "path": "bpmn-model/src/main/java/io/zeebe/model/bpmn/validation/zeebe/TimerEventDefinitionValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNDo0ODo1MVrOF-FM2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzozNzozNlrOF-0TCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY0MTI0Mw==", "bodyText": "I think we can delete this class for now.", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r400641243", "createdAt": "2020-03-31T04:48:51Z", "author": {"login": "saig0"}, "path": "bpmn-model/src/main/java/io/zeebe/model/bpmn/validation/zeebe/TimerEventDefinitionValidator.java", "diffHunk": "@@ -65,28 +61,31 @@ public void validate(\n \n   private void validateTimeDate(\n       final TimeDate timeDate, final ValidationResultCollector validationResultCollector) {\n-    try {\n-      TimeDateTimer.parse(timeDate.getTextContent());\n-    } catch (final DateTimeParseException e) {\n-      validationResultCollector.addError(0, \"Time date is invalid\");\n-    }\n+    //    try {\n+    //      TimeDateTimer.parse(timeDate.getTextContent());\n+    //    } catch (final DateTimeParseException e) {\n+    //      validationResultCollector.addError(0, \"Time date is invalid\");\n+    //      // TODO re-enable validation\n+    //    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a934815f35cd448207ddacfa46521ac14c947e27"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxMjg3NQ==", "bodyText": "@saig0 There is also the validation to make sure only 1 of the timer definitions is filled. I think we do need to keep that", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r401412875", "createdAt": "2020-04-01T07:37:36Z", "author": {"login": "korthout"}, "path": "bpmn-model/src/main/java/io/zeebe/model/bpmn/validation/zeebe/TimerEventDefinitionValidator.java", "diffHunk": "@@ -65,28 +61,31 @@ public void validate(\n \n   private void validateTimeDate(\n       final TimeDate timeDate, final ValidationResultCollector validationResultCollector) {\n-    try {\n-      TimeDateTimer.parse(timeDate.getTextContent());\n-    } catch (final DateTimeParseException e) {\n-      validationResultCollector.addError(0, \"Time date is invalid\");\n-    }\n+    //    try {\n+    //      TimeDateTimer.parse(timeDate.getTextContent());\n+    //    } catch (final DateTimeParseException e) {\n+    //      validationResultCollector.addError(0, \"Time date is invalid\");\n+    //      // TODO re-enable validation\n+    //    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY0MTI0Mw=="}, "originalCommit": {"oid": "a934815f35cd448207ddacfa46521ac14c947e27"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDczNTEyOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/TransformingDeploymentCreateProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNjoyNDo0MFrOF-G71g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzowOToyOVrOF-IDnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY2OTY1NA==", "bodyText": "Since this calling the timerFactory may throw an exception, we should handle this case and reject the deployment.", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r400669654", "createdAt": "2020-03-31T06:24:40Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/TransformingDeploymentCreateProcessor.java", "diffHunk": "@@ -96,12 +102,14 @@ private void createTimerIfTimerStartEvent(\n         if (startEvent.isTimer()) {\n           hasAtLeastOneTimer = true;\n \n+          final Timer timer =\n+              startEvent.getTimerFactory().apply(expressionProcessor, record.getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a934815f35cd448207ddacfa46521ac14c947e27"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY4ODAyOA==", "bodyText": "This is not the key you are looking for. While transforming the workflow, we don't have a scope key to resolve the expression. Instead, we should have a way to evaluate the expression without a variable context.", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r400688028", "createdAt": "2020-03-31T07:09:29Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/TransformingDeploymentCreateProcessor.java", "diffHunk": "@@ -96,12 +102,14 @@ private void createTimerIfTimerStartEvent(\n         if (startEvent.isTimer()) {\n           hasAtLeastOneTimer = true;\n \n+          final Timer timer =\n+              startEvent.getTimerFactory().apply(expressionProcessor, record.getKey());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY2OTY1NA=="}, "originalCommit": {"oid": "a934815f35cd448207ddacfa46521ac14c947e27"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDgxNjk2OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/transformer/CatchEventTransformer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNjo1Njo1MVrOF-Ht4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzoyODo0MlrOF-IpAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY4MjQ2Ng==", "bodyText": "Code style: instead of the switch statement in the lambda, we can create the factory functions in the upper if statement. So, we don't need the enum and the default case.", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r400682466", "createdAt": "2020-03-31T06:56:51Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/transformer/CatchEventTransformer.java", "diffHunk": "@@ -74,22 +80,51 @@ private void transformMessageEventDefinition(\n   }\n \n   private void transformTimerEventDefinition(\n+      final ExpressionLanguage expressionLanguage,\n       final ExecutableCatchEventElement executableElement,\n       final TimerEventDefinition timerEventDefinition) {\n-    final Timer timer;\n \n+    final Expression expression;\n+    final TimerType type;\n     if (timerEventDefinition.getTimeDuration() != null) {\n       final String duration = timerEventDefinition.getTimeDuration().getTextContent();\n-      timer = new RepeatingInterval(1, Interval.parse(duration));\n+      expression = expressionLanguage.parseExpression(duration);\n+      type = TimerType.DURATION;\n     } else if (timerEventDefinition.getTimeCycle() != null) {\n       final String cycle = timerEventDefinition.getTimeCycle().getTextContent();\n-      timer = RepeatingInterval.parse(cycle);\n+      expression = expressionLanguage.parseExpression(cycle);\n+      type = TimerType.CYCLE;\n     } else {\n       final String timeDate = timerEventDefinition.getTimeDate().getTextContent();\n-      timer = TimeDateTimer.parse(timeDate);\n+      expression = expressionLanguage.parseExpression(timeDate);\n+      type = TimerType.TIME_DATE;\n     }\n \n-    executableElement.setTimer(timer);\n+    executableElement.setTimerFactory(\n+        (expressionProcessor, scopeKey) -> {\n+          switch (type) {\n+            case DURATION:\n+              return Optional.of(\n+                      expressionProcessor.evaluateIntervalExpression(expression, scopeKey))\n+                  .map(right -> new RepeatingInterval(1, right))\n+                  .orElseThrow();\n+            case CYCLE:\n+              return Optional.of(expressionProcessor.evaluateStringExpression(expression, scopeKey))\n+                  .map(BufferUtil::bufferAsString)\n+                  .map(RepeatingInterval::parse)\n+                  .orElseThrow();\n+            case TIME_DATE:\n+              return Optional.of(expressionProcessor.evaluateStringExpression(expression, scopeKey))\n+                  .map(BufferUtil::bufferAsString)\n+                  .map(TimeDateTimer::parse)\n+                  .orElseThrow();\n+            default:\n+              final var expectedTypes =\n+                  List.of(TimerType.DURATION, TimerType.CYCLE, TimerType.TIME_DATE);\n+              throw new IllegalStateException(\n+                  \"Unexpected timer type '\" + type + \"'; expected one of \" + expectedTypes);\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a934815f35cd448207ddacfa46521ac14c947e27"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY5NzYwMQ==", "bodyText": "It is a bit confusing to wrap the evaluation results into an Optional because the methods don't return null. Instead, they throw an exception.", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r400697601", "createdAt": "2020-03-31T07:28:42Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/transformer/CatchEventTransformer.java", "diffHunk": "@@ -74,22 +80,51 @@ private void transformMessageEventDefinition(\n   }\n \n   private void transformTimerEventDefinition(\n+      final ExpressionLanguage expressionLanguage,\n       final ExecutableCatchEventElement executableElement,\n       final TimerEventDefinition timerEventDefinition) {\n-    final Timer timer;\n \n+    final Expression expression;\n+    final TimerType type;\n     if (timerEventDefinition.getTimeDuration() != null) {\n       final String duration = timerEventDefinition.getTimeDuration().getTextContent();\n-      timer = new RepeatingInterval(1, Interval.parse(duration));\n+      expression = expressionLanguage.parseExpression(duration);\n+      type = TimerType.DURATION;\n     } else if (timerEventDefinition.getTimeCycle() != null) {\n       final String cycle = timerEventDefinition.getTimeCycle().getTextContent();\n-      timer = RepeatingInterval.parse(cycle);\n+      expression = expressionLanguage.parseExpression(cycle);\n+      type = TimerType.CYCLE;\n     } else {\n       final String timeDate = timerEventDefinition.getTimeDate().getTextContent();\n-      timer = TimeDateTimer.parse(timeDate);\n+      expression = expressionLanguage.parseExpression(timeDate);\n+      type = TimerType.TIME_DATE;\n     }\n \n-    executableElement.setTimer(timer);\n+    executableElement.setTimerFactory(\n+        (expressionProcessor, scopeKey) -> {\n+          switch (type) {\n+            case DURATION:\n+              return Optional.of(\n+                      expressionProcessor.evaluateIntervalExpression(expression, scopeKey))\n+                  .map(right -> new RepeatingInterval(1, right))\n+                  .orElseThrow();\n+            case CYCLE:\n+              return Optional.of(expressionProcessor.evaluateStringExpression(expression, scopeKey))\n+                  .map(BufferUtil::bufferAsString)\n+                  .map(RepeatingInterval::parse)\n+                  .orElseThrow();\n+            case TIME_DATE:\n+              return Optional.of(expressionProcessor.evaluateStringExpression(expression, scopeKey))\n+                  .map(BufferUtil::bufferAsString)\n+                  .map(TimeDateTimer::parse)\n+                  .orElseThrow();\n+            default:\n+              final var expectedTypes =\n+                  List.of(TimerType.DURATION, TimerType.CYCLE, TimerType.TIME_DATE);\n+              throw new IllegalStateException(\n+                  \"Unexpected timer type '\" + type + \"'; expected one of \" + expectedTypes);\n+          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY4MjQ2Ng=="}, "originalCommit": {"oid": "a934815f35cd448207ddacfa46521ac14c947e27"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDg3Mjg3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/ExpressionProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzoxNjoyMlrOF-IQDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzoxNjoyMlrOF-IQDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY5MTIxMw==", "bodyText": "The caller expects a string instead of a buffer.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public DirectBuffer evaluateStringExpression(final Expression expression, final long scopeKey) {\n          \n          \n            \n              public String evaluateStringExpression(final Expression expression, final long scopeKey) {", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r400691213", "createdAt": "2020-03-31T07:16:22Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/ExpressionProcessor.java", "diffHunk": "@@ -58,6 +59,31 @@ public ExpressionProcessor(\n         .map(this::wrapResult);\n   }\n \n+  /**\n+   * Evaluates the given expression and returns the result as string wrapped in {@link\n+   * DirectBuffer}. If the evaluation fails or the result is not a string then an exception is\n+   * thrown.\n+   *\n+   * @param expression the expression to evaluate\n+   * @param scopeKey the scope to load the variables from\n+   * @return the evaluation result as buffer\n+   * @throws EvaluationException if expression evaluation failed\n+   */\n+  public DirectBuffer evaluateStringExpression(final Expression expression, final long scopeKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a934815f35cd448207ddacfa46521ac14c947e27"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDg5MjE3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/transformer/CatchEventTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzoyMjoyMFrOF-Ibuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzoyMjoyMFrOF-Ibuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY5NDIwMw==", "bodyText": "We should also support FEEL date-time expressions. For example: date and time(\"2015-09-18T10:31:10+01:00\"), date and time(x) + duration(\"PT1H\").", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r400694203", "createdAt": "2020-03-31T07:22:20Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/transformer/CatchEventTransformer.java", "diffHunk": "@@ -74,22 +80,51 @@ private void transformMessageEventDefinition(\n   }\n \n   private void transformTimerEventDefinition(\n+      final ExpressionLanguage expressionLanguage,\n       final ExecutableCatchEventElement executableElement,\n       final TimerEventDefinition timerEventDefinition) {\n-    final Timer timer;\n \n+    final Expression expression;\n+    final TimerType type;\n     if (timerEventDefinition.getTimeDuration() != null) {\n       final String duration = timerEventDefinition.getTimeDuration().getTextContent();\n-      timer = new RepeatingInterval(1, Interval.parse(duration));\n+      expression = expressionLanguage.parseExpression(duration);\n+      type = TimerType.DURATION;\n     } else if (timerEventDefinition.getTimeCycle() != null) {\n       final String cycle = timerEventDefinition.getTimeCycle().getTextContent();\n-      timer = RepeatingInterval.parse(cycle);\n+      expression = expressionLanguage.parseExpression(cycle);\n+      type = TimerType.CYCLE;\n     } else {\n       final String timeDate = timerEventDefinition.getTimeDate().getTextContent();\n-      timer = TimeDateTimer.parse(timeDate);\n+      expression = expressionLanguage.parseExpression(timeDate);\n+      type = TimerType.TIME_DATE;\n     }\n \n-    executableElement.setTimer(timer);\n+    executableElement.setTimerFactory(\n+        (expressionProcessor, scopeKey) -> {\n+          switch (type) {\n+            case DURATION:\n+              return Optional.of(\n+                      expressionProcessor.evaluateIntervalExpression(expression, scopeKey))\n+                  .map(right -> new RepeatingInterval(1, right))\n+                  .orElseThrow();\n+            case CYCLE:\n+              return Optional.of(expressionProcessor.evaluateStringExpression(expression, scopeKey))\n+                  .map(BufferUtil::bufferAsString)\n+                  .map(RepeatingInterval::parse)\n+                  .orElseThrow();\n+            case TIME_DATE:\n+              return Optional.of(expressionProcessor.evaluateStringExpression(expression, scopeKey))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a934815f35cd448207ddacfa46521ac14c947e27"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDg5NjI2OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/transformer/CatchEventTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzoyMzozNVrOF-IeQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzoyMzozNVrOF-IeQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY5NDg1MA==", "bodyText": "We should also support FEEL expressions using a cycle function. For example: cycle(3, duration(\"PT1H\"))", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r400694850", "createdAt": "2020-03-31T07:23:35Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/transformer/CatchEventTransformer.java", "diffHunk": "@@ -74,22 +80,51 @@ private void transformMessageEventDefinition(\n   }\n \n   private void transformTimerEventDefinition(\n+      final ExpressionLanguage expressionLanguage,\n       final ExecutableCatchEventElement executableElement,\n       final TimerEventDefinition timerEventDefinition) {\n-    final Timer timer;\n \n+    final Expression expression;\n+    final TimerType type;\n     if (timerEventDefinition.getTimeDuration() != null) {\n       final String duration = timerEventDefinition.getTimeDuration().getTextContent();\n-      timer = new RepeatingInterval(1, Interval.parse(duration));\n+      expression = expressionLanguage.parseExpression(duration);\n+      type = TimerType.DURATION;\n     } else if (timerEventDefinition.getTimeCycle() != null) {\n       final String cycle = timerEventDefinition.getTimeCycle().getTextContent();\n-      timer = RepeatingInterval.parse(cycle);\n+      expression = expressionLanguage.parseExpression(cycle);\n+      type = TimerType.CYCLE;\n     } else {\n       final String timeDate = timerEventDefinition.getTimeDate().getTextContent();\n-      timer = TimeDateTimer.parse(timeDate);\n+      expression = expressionLanguage.parseExpression(timeDate);\n+      type = TimerType.TIME_DATE;\n     }\n \n-    executableElement.setTimer(timer);\n+    executableElement.setTimerFactory(\n+        (expressionProcessor, scopeKey) -> {\n+          switch (type) {\n+            case DURATION:\n+              return Optional.of(\n+                      expressionProcessor.evaluateIntervalExpression(expression, scopeKey))\n+                  .map(right -> new RepeatingInterval(1, right))\n+                  .orElseThrow();\n+            case CYCLE:\n+              return Optional.of(expressionProcessor.evaluateStringExpression(expression, scopeKey))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a934815f35cd448207ddacfa46521ac14c947e27"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDk1Mzk2OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/timer/TriggerTimerProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzo0MDo0MFrOF-JCEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNDoyODoxOFrOF_DTkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcwNDAxOQ==", "bodyText": "Instead of throwing an exception, we should create an incident if the evaluation fails. However, this can be done in a follow-up issue.", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r400704019", "createdAt": "2020-03-31T07:40:40Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/timer/TriggerTimerProcessor.java", "diffHunk": "@@ -123,27 +130,30 @@ private boolean shouldReschedule(final TimerRecord timer) {\n \n   private void rescheduleTimer(\n       final TimerRecord record, final TypedStreamWriter writer, final ExecutableCatchEvent event) {\n-    if (event.getTimer() == null) {\n+    final Timer timer;\n+    try {\n+      timer = event.getTimerFactory().apply(expressionProcessor, record.getElementInstanceKey());\n+    } catch (Exception e) {\n       final String message =\n           String.format(\n               \"Expected to reschedule repeating timer for element with id '%s', but no timer definition was found\",\n               BufferUtil.bufferAsString(event.getId()));\n-      throw new IllegalStateException(message);\n+      throw new IllegalStateException(message, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a934815f35cd448207ddacfa46521ac14c947e27"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxODc1OQ==", "bodyText": "@saig0 The original implementation already throws an Exception. Is that a bug? Can you explain the behaviour differences between an exception and an incident in this situation?", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r401518759", "createdAt": "2020-04-01T10:37:03Z", "author": {"login": "korthout"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/timer/TriggerTimerProcessor.java", "diffHunk": "@@ -123,27 +130,30 @@ private boolean shouldReschedule(final TimerRecord timer) {\n \n   private void rescheduleTimer(\n       final TimerRecord record, final TypedStreamWriter writer, final ExecutableCatchEvent event) {\n-    if (event.getTimer() == null) {\n+    final Timer timer;\n+    try {\n+      timer = event.getTimerFactory().apply(expressionProcessor, record.getElementInstanceKey());\n+    } catch (Exception e) {\n       final String message =\n           String.format(\n               \"Expected to reschedule repeating timer for element with id '%s', but no timer definition was found\",\n               BufferUtil.bufferAsString(event.getId()));\n-      throw new IllegalStateException(message);\n+      throw new IllegalStateException(message, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcwNDAxOQ=="}, "originalCommit": {"oid": "a934815f35cd448207ddacfa46521ac14c947e27"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU0MTY2OA==", "bodyText": "An incident is created to indicate a problem to the user and it can be resolved when the problem is solved by the user.\nIf an exception is thrown in this processor then the whole workflow instance is added to the \"backlist\". No further event/command is applied to this instance. It can not be repaired.\nPreviously, the exception would be only thrown if there was a bug in the processor or state - it was just to prevent an NPE. But now, an evaluation could fail on rescheduling if a variable has changed.\nSaying that I realize that the incident could not be resolved by the current implementation \ud83e\udd14 It just works for jobs or workflow instance-related events /https://github.com/zeebe-io/zeebe/blob/develop/engine/src/main/java/io/zeebe/engine/processor/workflow/incident/ResolveIncidentProcessor.java#L69).\nSo, we have two options: don't evaluate the expression or extend the incident logic. I would prefer the first option for now. Let's try to avoid throwing an exception if possible.", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r401541668", "createdAt": "2020-04-01T11:22:01Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/timer/TriggerTimerProcessor.java", "diffHunk": "@@ -123,27 +130,30 @@ private boolean shouldReschedule(final TimerRecord timer) {\n \n   private void rescheduleTimer(\n       final TimerRecord record, final TypedStreamWriter writer, final ExecutableCatchEvent event) {\n-    if (event.getTimer() == null) {\n+    final Timer timer;\n+    try {\n+      timer = event.getTimerFactory().apply(expressionProcessor, record.getElementInstanceKey());\n+    } catch (Exception e) {\n       final String message =\n           String.format(\n               \"Expected to reschedule repeating timer for element with id '%s', but no timer definition was found\",\n               BufferUtil.bufferAsString(event.getId()));\n-      throw new IllegalStateException(message);\n+      throw new IllegalStateException(message, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcwNDAxOQ=="}, "originalCommit": {"oid": "a934815f35cd448207ddacfa46521ac14c947e27"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTY1ODc2OA==", "bodyText": "See #4208", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r401658768", "createdAt": "2020-04-01T14:28:18Z", "author": {"login": "korthout"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/timer/TriggerTimerProcessor.java", "diffHunk": "@@ -123,27 +130,30 @@ private boolean shouldReschedule(final TimerRecord timer) {\n \n   private void rescheduleTimer(\n       final TimerRecord record, final TypedStreamWriter writer, final ExecutableCatchEvent event) {\n-    if (event.getTimer() == null) {\n+    final Timer timer;\n+    try {\n+      timer = event.getTimerFactory().apply(expressionProcessor, record.getElementInstanceKey());\n+    } catch (Exception e) {\n       final String message =\n           String.format(\n               \"Expected to reschedule repeating timer for element with id '%s', but no timer definition was found\",\n               BufferUtil.bufferAsString(event.getId()));\n-      throw new IllegalStateException(message);\n+      throw new IllegalStateException(message, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcwNDAxOQ=="}, "originalCommit": {"oid": "a934815f35cd448207ddacfa46521ac14c947e27"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTA0Mzg0OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/timer/TimerStartEventTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzoxMjozN1rOF_qg6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzoxMjozN1rOF_qg6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMwMTE2MQ==", "bodyText": "I see that the other test case does the same but we should not use System.currentTimeMillis() \ud83d\ude05 Instead, we should use the clock from the engine: engine.getClock().\nAlso, this check might be flaky if we are slow and the due time is over before reaching the assertion. We could increase the duration to 10s.", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r402301161", "createdAt": "2020-04-02T13:12:37Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/timer/TimerStartEventTest.java", "diffHunk": "@@ -99,6 +107,34 @@ public void shouldCreateTimer() {\n     assertThat(timerRecord.getDueDate()).isBetween(now, now + 1000L);\n   }\n \n+  @Test\n+  public void shouldCreateTimerFromFeelExpression() {\n+    // when\n+    final DeployedWorkflow deployedWorkflow =\n+        engine\n+            .deployment()\n+            .withXmlResource(FEEL_EXPRESSION_MODEL)\n+            .deploy()\n+            .getValue()\n+            .getDeployedWorkflows()\n+            .get(0);\n+\n+    // then\n+    final TimerRecordValue timerRecord =\n+        RecordingExporter.timerRecords(TimerIntent.CREATED)\n+            .withWorkflowKey(deployedWorkflow.getWorkflowKey())\n+            .getFirst()\n+            .getValue();\n+\n+    Assertions.assertThat(timerRecord)\n+        .hasWorkflowInstanceKey(TimerInstance.NO_ELEMENT_INSTANCE)\n+        .hasTargetElementId(\"start_5\")\n+        .hasElementInstanceKey(TimerInstance.NO_ELEMENT_INSTANCE);\n+\n+    final long now = System.currentTimeMillis();\n+    assertThat(timerRecord.getDueDate()).isBetween(now, now + 1000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee19b1e2686429a662df357064f803c54fc00889"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTEzODg4OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/timer/TimerCatchEventTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzozMzo1MFrOF_ra5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzozMzo1MFrOF_ra5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMxNjAwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        System.currentTimeMillis(),\n          \n          \n            \n                        ENGINE.getClock().getCurrentTimeInMillis(),", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r402316007", "createdAt": "2020-04-02T13:33:50Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/timer/TimerCatchEventTest.java", "diffHunk": "@@ -160,6 +160,42 @@ public void shouldCreateTimer() {\n             createdEvent.getTimestamp() + Duration.ofSeconds(10).toMillis());\n   }\n \n+  @Test\n+  public void shouldCreateTimerFromFeelExpression() {\n+    // given\n+    final BpmnModelInstance workflow =\n+        Bpmn.createExecutableProcess(\"shouldCreateTimer\")\n+            .startEvent()\n+            .intermediateCatchEvent(\"timer\", c -> c.timerWithDurationExpression(\"\\\"PT10S\\\"\"))\n+            .endEvent()\n+            .done();\n+\n+    ENGINE.deployment().withXmlResource(workflow).deploy();\n+    workflowInstanceKey = ENGINE.workflowInstance().ofBpmnProcessId(\"shouldCreateTimer\").create();\n+\n+    // when\n+    final Record<WorkflowInstanceRecordValue> activatedEvent =\n+        RecordingExporter.workflowInstanceRecords(WorkflowInstanceIntent.ELEMENT_ACTIVATED)\n+            .withWorkflowInstanceKey(workflowInstanceKey)\n+            .withElementId(\"timer\")\n+            .getFirst();\n+\n+    // then\n+    final Record<TimerRecordValue> createdEvent =\n+        RecordingExporter.timerRecords(TimerIntent.CREATED)\n+            .withWorkflowInstanceKey(workflowInstanceKey)\n+            .getFirst();\n+\n+    Assertions.assertThat(createdEvent.getValue())\n+        .hasElementInstanceKey(activatedEvent.getKey())\n+        .hasWorkflowInstanceKey(workflowInstanceKey);\n+\n+    assertThat(createdEvent.getValue().getDueDate())\n+        .isBetween(\n+            System.currentTimeMillis(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a1f17f3777488623d9499799354e3bafa1cfde3"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTIwNzc4OnYy", "diffSide": "RIGHT", "path": "expression-language/src/test/java/io/zeebe/el/EvaluationResultTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzo0ODowOVrOF_sEXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzo0ODowOVrOF_sEXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMyNjYyMw==", "bodyText": "What happens if we call .toBuffer() on a duration or period result? For example, when we want to store the evaluation result to a variable that should be used later in the workflow for a timer catch event.", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r402326623", "createdAt": "2020-04-02T13:48:09Z", "author": {"login": "saig0"}, "path": "expression-language/src/test/java/io/zeebe/el/EvaluationResultTest.java", "diffHunk": "@@ -62,10 +70,38 @@ public void booleanExpression() {\n     assertThat(evaluationResult.getBoolean()).isTrue();\n     assertThat(evaluationResult.getString()).isNull();\n     assertThat(evaluationResult.getNumber()).isNull();\n+    assertThat(evaluationResult.getPeriod()).isNull();\n+    assertThat(evaluationResult.getDuration()).isNull();\n     assertThat(evaluationResult.toBuffer()).isEqualTo(asMsgPack(\"true\"));\n     assertThat(evaluationResult.getList()).isNull();\n   }\n \n+  @Test\n+  public void durationExpression() {\n+    final var evaluationResult = evaluateExpression(\"=duration(\\\"PT2H\\\")\");\n+\n+    assertThat(evaluationResult.getType()).isEqualTo(ResultType.DURATION);\n+    assertThat(evaluationResult.getDuration()).isEqualTo(Duration.ofHours(2));\n+    assertThat(evaluationResult.getPeriod()).isNull();\n+    assertThat(evaluationResult.getBoolean()).isNull();\n+    assertThat(evaluationResult.getString()).isNull();\n+    assertThat(evaluationResult.getNumber()).isNull();\n+    assertThat(evaluationResult.getList()).isNull();\n+  }\n+\n+  @Test\n+  public void periodExpression() {\n+    final var evaluationResult = evaluateExpression(\"=duration(\\\"P2M\\\")\");\n+\n+    assertThat(evaluationResult.getType()).isEqualTo(ResultType.PERIOD);\n+    assertThat(evaluationResult.getDuration()).isNull();\n+    assertThat(evaluationResult.getPeriod()).isEqualTo(Period.ofMonths(2));\n+    assertThat(evaluationResult.getBoolean()).isNull();\n+    assertThat(evaluationResult.getString()).isNull();\n+    assertThat(evaluationResult.getNumber()).isNull();\n+    assertThat(evaluationResult.getList()).isNull();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aac743d058788d61cf565a55ec903b7e4b64e02"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTI5OTIwOnYy", "diffSide": "RIGHT", "path": "expression-language/src/main/scala/io/zeebe/el/impl/feel/FeelEvaluationResult.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDowNzo1OFrOF_s-VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDowNzo1OFrOF_s-VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM0MTQ2MQ==", "bodyText": "Please add test cases for a date-time result in EvaluationResultTest.", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r402341461", "createdAt": "2020-04-02T14:07:58Z", "author": {"login": "saig0"}, "path": "expression-language/src/main/scala/io/zeebe/el/impl/feel/FeelEvaluationResult.scala", "diffHunk": "@@ -68,6 +70,12 @@ class FeelEvaluationResult(\n     case _ => null\n   }\n \n+  override def getDateTime: ZonedDateTime = result match {\n+    case ValDateTime(dateTime) => dateTime\n+    case ValLocalDateTime(dateTime) => dateTime.atZone(ZoneId.systemDefault())\n+    case _ => null\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39fd42f0f2fee4c57760be423ce9491f7371b672"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTM0MzQzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/TransformingDeploymentCreateProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDoxNzo1MVrOF_tbIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDoxNzo1MVrOF_tbIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM0ODgzMw==", "bodyText": "The deployment is rejected after it is created. See the following records:\n16:15:34.490 [] INFO  io.zeebe.test.records - {\"valueType\":\"DEPLOYMENT\",\"key\":-1,\"position\":4294967296,\"timestamp\":1585836934179,\"recordType\":\"COMMAND\",\"intent\":\"CREATE\",\"partitionId\":1,\"rejectionType\":\"NULL_VAL\",\"rejectionReason\":\"\",\"value\":{\"resources\":[{\"resource\":\"\n16:15:34.492 [] INFO  io.zeebe.test.records - {\"valueType\":\"DEPLOYMENT\",\"key\":2251799813685250,\"position\":4294968664,\"timestamp\":1585836934421,\"recordType\":\"EVENT\",\"intent\":\"CREATED\",\"partitionId\":1,\"rejectionType\":\"NULL_VAL\",\"rejectionReason\":\"\",\"value\":{\"resources\":[{\"resource\":\"\n16:15:34.493 [] INFO  io.zeebe.test.records - {\"valueType\":\"DEPLOYMENT\",\"key\":-1,\"position\":4294970104,\"timestamp\":1585836934421,\"recordType\":\"COMMAND_REJECTION\",\"intent\":\"CREATE\",\"partitionId\":1,\"rejectionType\":\"PROCESSING_ERROR\",\"rejectionReason\":\"Expected to create timer for start event, but encountered the following error: failed to evaluate expression 'INVALID_CYCLE_EXPRESSION': no variable found for name 'INVALID_CYCLE_EXPRESSION'\",\"value\":{\"resources\":[{\"resource\":\"", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r402348833", "createdAt": "2020-04-02T14:17:51Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/TransformingDeploymentCreateProcessor.java", "diffHunk": "@@ -70,7 +72,12 @@ public void processRecord(\n         responseWriter.writeEventOnCommand(key, DeploymentIntent.CREATED, deploymentEvent, command);\n         streamWriter.appendFollowUpEvent(key, DeploymentIntent.CREATED, deploymentEvent);\n \n-        createTimerIfTimerStartEvent(command, streamWriter);\n+        try {\n+          createTimerIfTimerStartEvent(command, streamWriter);\n+        } catch (RuntimeException e) {\n+          final String reason = String.format(COULD_NOT_CREATE_TIMER_MESSAGE, e.getMessage());\n+          streamWriter.appendRejection(command, RejectionType.PROCESSING_ERROR, reason);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f79c0e05765398a73a4a20b764579414440a252d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Nzc2NDQ3OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDo0MDo1MlrOGAE4Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwNDo0MDo1MlrOGAE4Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjczMzEyNw==", "bodyText": "What happens if we have multiple timer/message subscriptions and one of the timer expressions fails?\nIf an incident is created then no other action should be applied to the workflow instance (e.g. don't open other subscriptions, don't go to ELEMENT_ACTIVATED state)", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r402733127", "createdAt": "2020-04-03T04:40:52Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/CatchEventBehavior.java", "diffHunk": "@@ -83,12 +83,13 @@ public void subscribeToEvents(\n     // if all subscriptions are valid then open the subscriptions\n     for (final ExecutableCatchEvent event : events) {\n       if (event.isTimer()) {\n+        final Timer timer = event.getTimerFactory().apply(expressionProcessor, context.getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f81ca00fb0a7a4b76f8fe5005859a217b14e84ba"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTg1NDI5OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/TransformingDeploymentCreateProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNTo1MTo1N1rOGBIqQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzo0Njo0OVrOGBYfUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0MzY1MA==", "bodyText": "We should reject the deployment before workflowState.putDeployment(key, deploymentEvent). Otherwise, this workflow is stored in the state and is used as the latest version \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r403843650", "createdAt": "2020-04-06T05:51:57Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/TransformingDeploymentCreateProcessor.java", "diffHunk": "@@ -69,15 +69,16 @@ public void processRecord(\n     if (accepted) {\n       final long key = keyGenerator.nextKey();\n       if (workflowState.putDeployment(key, deploymentEvent)) {\n-        responseWriter.writeEventOnCommand(key, DeploymentIntent.CREATED, deploymentEvent, command);\n-        streamWriter.appendFollowUpEvent(key, DeploymentIntent.CREATED, deploymentEvent);\n-\n         try {\n           createTimerIfTimerStartEvent(command, streamWriter);\n         } catch (RuntimeException e) {\n           final String reason = String.format(COULD_NOT_CREATE_TIMER_MESSAGE, e.getMessage());\n+          responseWriter.writeRejectionOnCommand(command, RejectionType.PROCESSING_ERROR, reason);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67b6bf9fc72d53c8770dfdb168746ecc16707f04"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEwMjk5Mg==", "bodyText": "Discussed. Fixed for now by validating the timer start event expressions, such that this situation cannot occur.", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r404102992", "createdAt": "2020-04-06T13:46:49Z", "author": {"login": "korthout"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/TransformingDeploymentCreateProcessor.java", "diffHunk": "@@ -69,15 +69,16 @@ public void processRecord(\n     if (accepted) {\n       final long key = keyGenerator.nextKey();\n       if (workflowState.putDeployment(key, deploymentEvent)) {\n-        responseWriter.writeEventOnCommand(key, DeploymentIntent.CREATED, deploymentEvent, command);\n-        streamWriter.appendFollowUpEvent(key, DeploymentIntent.CREATED, deploymentEvent);\n-\n         try {\n           createTimerIfTimerStartEvent(command, streamWriter);\n         } catch (RuntimeException e) {\n           final String reason = String.format(COULD_NOT_CREATE_TIMER_MESSAGE, e.getMessage());\n+          responseWriter.writeRejectionOnCommand(command, RejectionType.PROCESSING_ERROR, reason);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg0MzY1MA=="}, "originalCommit": {"oid": "67b6bf9fc72d53c8770dfdb168746ecc16707f04"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTkzNjk5OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/timer/TimerStartEventTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjozMDo0M1rOGBJahg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzo0ODoyNlrOGBYkAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg1NjAwNg==", "bodyText": "Scheduling a timer for the year 3978 sounds very optimistic \ud83d\ude02", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r403856006", "createdAt": "2020-04-06T06:30:43Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/timer/TimerStartEventTest.java", "diffHunk": "@@ -56,14 +60,22 @@\n \n   private static final BpmnModelInstance MULTI_TIMER_START_MODEL = createMultipleTimerStartModel();\n \n-  private static final BpmnModelInstance FEEL_EXPRESSION_MODEL =\n+  private static final BpmnModelInstance FEEL_DATE_TIME_EXPRESSION_MODEL =\n       Bpmn.createExecutableProcess(\"process_5\")\n           .startEvent(\"start_5\")\n-          .timerWithCycleExpression(\"cycle(duration(\\\"PT1S\\\"))\")\n+          .timerWithDateExpression(\"date and time(date(\\\"3978-11-25\\\"),time(\\\"T00:00:00@UTC\\\"))\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cd6c589e329305a049380401a946b26119f5d11"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDEwNDE5Mw==", "bodyText": "Psst: duck/google it", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r404104193", "createdAt": "2020-04-06T13:48:26Z", "author": {"login": "korthout"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/timer/TimerStartEventTest.java", "diffHunk": "@@ -56,14 +60,22 @@\n \n   private static final BpmnModelInstance MULTI_TIMER_START_MODEL = createMultipleTimerStartModel();\n \n-  private static final BpmnModelInstance FEEL_EXPRESSION_MODEL =\n+  private static final BpmnModelInstance FEEL_DATE_TIME_EXPRESSION_MODEL =\n       Bpmn.createExecutableProcess(\"process_5\")\n           .startEvent(\"start_5\")\n-          .timerWithCycleExpression(\"cycle(duration(\\\"PT1S\\\"))\")\n+          .timerWithDateExpression(\"date and time(date(\\\"3978-11-25\\\"),time(\\\"T00:00:00@UTC\\\"))\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg1NjAwNg=="}, "originalCommit": {"oid": "7cd6c589e329305a049380401a946b26119f5d11"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTk2ODQ5OnYy", "diffSide": "RIGHT", "path": "expression-language/src/test/java/io/zeebe/el/EvaluationResultTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjo0MzoyOFrOGBJtJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNjo0MzoyOFrOGBJtJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2MDc3Mg==", "bodyText": "Please add another test case to verify that a local date-time is transformed into a zoned date-time.", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r403860772", "createdAt": "2020-04-06T06:43:28Z", "author": {"login": "saig0"}, "path": "expression-language/src/test/java/io/zeebe/el/EvaluationResultTest.java", "diffHunk": "@@ -102,6 +104,23 @@ public void periodExpression() {\n     assertThat(evaluationResult.getList()).isNull();\n   }\n \n+  @Test\n+  public void dateTimeExpression() {\n+    final var evaluationResult = evaluateExpression(\n+        \"=date and time(\\\"2020-04-01T10:31:10@Europe/Berlin\\\")\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "831a2488bb46f37cd87c2a846531895fc9b66ad8"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNzU2MDgyOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ProcessTimerStartEventExpressionValidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzo1NTo1NFrOGBY65A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxMzo1NTo1NFrOGBY65A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDExMDA1Mg==", "bodyText": "please do \ud83d\ude02", "url": "https://github.com/camunda-cloud/zeebe/pull/4145#discussion_r404110052", "createdAt": "2020-04-06T13:55:54Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ProcessTimerStartEventExpressionValidator.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor.workflow.deployment.model.validation;\n+\n+import io.zeebe.el.Expression;\n+import io.zeebe.el.ExpressionLanguage;\n+import io.zeebe.engine.processor.workflow.ExpressionProcessor;\n+import io.zeebe.model.bpmn.instance.Process;\n+import io.zeebe.model.bpmn.instance.StartEvent;\n+import io.zeebe.model.bpmn.instance.TimerEventDefinition;\n+import io.zeebe.model.bpmn.util.time.RepeatingInterval;\n+import io.zeebe.model.bpmn.util.time.TimeDateTimer;\n+import io.zeebe.model.bpmn.util.time.Timer;\n+import org.camunda.bpm.model.xml.validation.ModelElementValidator;\n+import org.camunda.bpm.model.xml.validation.ValidationResultCollector;\n+\n+public class ProcessTimerStartEventExpressionValidator\n+    implements ModelElementValidator<StartEvent> {\n+\n+  private static final String ERROR_MESSAGE_TEMPLATE =\n+      \"Expected a valid timer expression for start event, but encountered the following error: %s\";\n+  private final ExpressionLanguage expressionLanguage;\n+  private final ExpressionProcessor expressionProcessor;\n+\n+  public ProcessTimerStartEventExpressionValidator(\n+      final ExpressionLanguage expressionLanguage, final ExpressionProcessor expressionProcessor) {\n+    this.expressionLanguage = expressionLanguage;\n+    this.expressionProcessor = expressionProcessor;\n+  }\n+\n+  @Override\n+  public Class<StartEvent> getElementType() {\n+    return StartEvent.class;\n+  }\n+\n+  @Override\n+  public void validate(\n+      final StartEvent element, final ValidationResultCollector validationResultCollector) {\n+    if (!(element.getScope() instanceof Process)) {\n+      return;\n+    }\n+    element.getEventDefinitions().stream()\n+        .filter(TimerEventDefinition.class::isInstance)\n+        .map(TimerEventDefinition.class::cast)\n+        .forEach(definition -> validation(definition, validationResultCollector));\n+  }\n+\n+  private void validation(\n+      final TimerEventDefinition timerEventDefinition,\n+      final ValidationResultCollector validationResultCollector) {\n+    try {\n+      final var timer = tryEvaluateTimer(timerEventDefinition);\n+    } catch (RuntimeException e) {\n+      validationResultCollector.addError(0, String.format(ERROR_MESSAGE_TEMPLATE, e.getMessage()));\n+    }\n+  }\n+\n+  /**\n+   * Try to create a timer from the timer event definition by evaluating its time expression.\n+   *\n+   * @param timerEventDefinition The definition specifying the timer expression to evaluate\n+   * @throws RuntimeException when the expression could not be evaluated or when the expression\n+   *     result could not be used to create a timer.\n+   */\n+  private Timer tryEvaluateTimer(final TimerEventDefinition timerEventDefinition) {\n+    final Expression expression;\n+    final long scopeKey = -1; // todo: explaim", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ff5ae46892c4230f44317d56e4252c8b24459ff"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4824, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}