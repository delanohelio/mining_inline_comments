{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MjA1OTMz", "number": 4191, "title": "feat(distro): add StackdriverJSONLayout appender", "bodyText": "Description\nTo enable stackdriver compatible JSON logging set env variable ZEEBE_LOG_APPENDER to Stackdriver.\nRemove log4j2 configuration location from startup parameters to allow overriding with custom file locations.\nEnable stackdriver logging in benchmarks per default to improve log discovery.\nAdd documentation how to enable stackdriver logging.\nRelated issues\ncloses #4190\nPull Request Checklist\n\n All commit messages match our commit message guidelines\n The submitting code follows our code style\n If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-03-31T09:44:31Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4191", "merged": true, "mergeCommit": {"oid": "691e437b7af1045db5332a27ac3c2334571ee8a4"}, "closed": true, "closedAt": "2020-03-31T19:40:57Z", "author": {"login": "menski"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTB5Z7gBqjMxODI5NjM1NjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTILMxgBqjMxODQ4MTAxNDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ac5c8a9483c0ada00ed4d4ffb9d91e9c8addce76", "author": {"user": {"login": "menski", "name": "Sebastian Menski"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/ac5c8a9483c0ada00ed4d4ffb9d91e9c8addce76", "committedDate": "2020-03-31T09:41:19Z", "message": "feat(distro): add StackdriverJSONLayout appender\n\nTo enable stackdriver compatible JSON logging set\nenv variable ZEEBE_LOG_APPENDER to Stackdriver"}, "afterCommit": {"oid": "b0fec0ef72c3ce059870d9527c2af4145a9b7600", "author": {"user": {"login": "menski", "name": "Sebastian Menski"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/b0fec0ef72c3ce059870d9527c2af4145a9b7600", "committedDate": "2020-03-31T12:02:58Z", "message": "docs(operations): document stackdriver logging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NzAxMjUw", "url": "https://github.com/camunda-cloud/zeebe/pull/4191#pullrequestreview-384701250", "createdAt": "2020-03-31T12:53:44Z", "commit": {"oid": "b0fec0ef72c3ce059870d9527c2af4145a9b7600"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMjo1Mzo0NVrOF-UTkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMzoxODowMFrOF-VUgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg4ODcyMw==", "bodyText": "Please also document this environment variable in docs/src/appendix/environment-variables.md", "url": "https://github.com/camunda-cloud/zeebe/pull/4191#discussion_r400888723", "createdAt": "2020-03-31T12:53:45Z", "author": {"login": "pihme"}, "path": "docs/src/operations/configuration.md", "diffHunk": "@@ -114,3 +114,18 @@ Action:\n Update your application's configuration\n ```\n \n+# Logging\n+\n+Zeebe uses Log4j2 framework for logging. In the distribution and the docker image you can find the default log configuration file in `config/log4j2.xml`.\n+\n+## Default logging configuration\n+\n+* `config/log4j2.xml` (applied by default)\n+\n+```\n+{{#include ../../../dist/src/main/config/log4j2.xml}}\n+```\n+\n+### Google Stackdriver (JSON) logging\n+\n+To enable Google Stackdriver compatible JSON logging you can set the environment variable `ZEEBE_LOG_APPENDER=Stackdriver` before starting Zeebe.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fec0ef72c3ce059870d9527c2af4145a9b7600"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg5MjE1Ng==", "bodyText": "Optional comment:\nYou might take a look at io.zeebe.util.ObjectWriterFactory. This register a module to write java data time objects as ISO Strings. This could help when adding human readable time stamps to the record.\nIt also enables pretty printing, which you probably don't want.", "url": "https://github.com/camunda-cloud/zeebe/pull/4191#discussion_r400892156", "createdAt": "2020-03-31T12:58:50Z", "author": {"login": "pihme"}, "path": "util/src/main/java/io/zeebe/util/StackdriverJSONLayout.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.util;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.core.Layout;\n+import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.config.Node;\n+import org.apache.logging.log4j.core.config.plugins.Plugin;\n+import org.apache.logging.log4j.core.config.plugins.PluginFactory;\n+import org.apache.logging.log4j.core.impl.ThrowableProxy;\n+import org.apache.logging.log4j.core.layout.AbstractStringLayout;\n+import org.apache.logging.log4j.core.util.StringBuilderWriter;\n+\n+/**\n+ * Idea and code (slightly changed) from\n+ * <li><a href=\n+ *     \"https://k11i.biz/blog/2018/10/03/stackdriver-logging-friendly-layout-java/\">https://k11i.biz/blog/2018/10/03/stackdriver-logging-friendly-layout-java/</a>\n+ */\n+@Plugin(name = \"StackdriverJSONLayout\", category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE)\n+public class StackdriverJSONLayout extends AbstractStringLayout {\n+\n+  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fec0ef72c3ce059870d9527c2af4145a9b7600"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDg5NzQ4MQ==", "bodyText": "Optional comments:\n\nnot sure about \"Logging\" as top level header, I would probably move it one level down\nThe last section on Google Stackdriver gets lost; would move it above 'Default Logging Configuration'", "url": "https://github.com/camunda-cloud/zeebe/pull/4191#discussion_r400897481", "createdAt": "2020-03-31T13:06:44Z", "author": {"login": "pihme"}, "path": "docs/src/operations/configuration.md", "diffHunk": "@@ -114,3 +114,18 @@ Action:\n Update your application's configuration\n ```\n \n+# Logging", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fec0ef72c3ce059870d9527c2af4145a9b7600"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkwMDQ2MA==", "bodyText": "Test is difficult to read.\nI would prefer if both logOutputToJSONMap() and createTestAppenderWithlayout() both have a writer as parameter.\nThen it would be clearer what the test is doing.\nMaybe make logOutput a local variable in the test method.", "url": "https://github.com/camunda-cloud/zeebe/pull/4191#discussion_r400900460", "createdAt": "2020-03-31T13:11:06Z", "author": {"login": "pihme"}, "path": "util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.util;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.Appender;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.StringLayout;\n+import org.apache.logging.log4j.core.appender.WriterAppender;\n+import org.apache.logging.log4j.core.config.LoggerConfig;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class StackdriverJSONLayoutTest {\n+\n+  private Logger logger = LogManager.getLogger();\n+  private LoggerContext context = (LoggerContext) LogManager.getContext(false);\n+  private Writer logOutput;\n+  private ObjectReader jsonReader = new ObjectMapper().reader();\n+\n+  @Before\n+  public void before() {\n+    logOutput = new StringWriter();\n+  }\n+\n+  @Test\n+  public void testJSONOutput() throws IOException {\n+    // Given\n+    createTestAppenderWithLayout(new StackdriverJSONLayout());\n+    // when\n+    logger.error(\"Should appear as JSON formatted ouput\");\n+    // then\n+    final Map<String, String> jsonMap = logOutputToJSONMap();\n+    assertThat(jsonMap)\n+        .containsKeys(\n+            \"logger\", \"message\", \"severity\", \"thread\", \"timestampNanos\", \"timestampSeconds\");\n+    assertThat(jsonMap).containsEntry(\"message\", \"Should appear as JSON formatted ouput\");\n+    assertThat(jsonMap).containsEntry(\"logger\", logger.getName());\n+  }\n+\n+  private Map<String, String> logOutputToJSONMap() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fec0ef72c3ce059870d9527c2af4145a9b7600"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkwMjU4Mg==", "bodyText": "rename to register/startTestAppender... or return the appender", "url": "https://github.com/camunda-cloud/zeebe/pull/4191#discussion_r400902582", "createdAt": "2020-03-31T13:14:08Z", "author": {"login": "pihme"}, "path": "util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.util;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.Appender;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.StringLayout;\n+import org.apache.logging.log4j.core.appender.WriterAppender;\n+import org.apache.logging.log4j.core.config.LoggerConfig;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class StackdriverJSONLayoutTest {\n+\n+  private Logger logger = LogManager.getLogger();\n+  private LoggerContext context = (LoggerContext) LogManager.getContext(false);\n+  private Writer logOutput;\n+  private ObjectReader jsonReader = new ObjectMapper().reader();\n+\n+  @Before\n+  public void before() {\n+    logOutput = new StringWriter();\n+  }\n+\n+  @Test\n+  public void testJSONOutput() throws IOException {\n+    // Given\n+    createTestAppenderWithLayout(new StackdriverJSONLayout());\n+    // when\n+    logger.error(\"Should appear as JSON formatted ouput\");\n+    // then\n+    final Map<String, String> jsonMap = logOutputToJSONMap();\n+    assertThat(jsonMap)\n+        .containsKeys(\n+            \"logger\", \"message\", \"severity\", \"thread\", \"timestampNanos\", \"timestampSeconds\");\n+    assertThat(jsonMap).containsEntry(\"message\", \"Should appear as JSON formatted ouput\");\n+    assertThat(jsonMap).containsEntry(\"logger\", logger.getName());\n+  }\n+\n+  private Map<String, String> logOutputToJSONMap() throws IOException {\n+    return jsonReader\n+        .withValueToUpdate(new HashMap<String, String>())\n+        .readValue(logOutput.toString());\n+  }\n+\n+  private void createTestAppenderWithLayout(StringLayout layout) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fec0ef72c3ce059870d9527c2af4145a9b7600"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkwMzcxOA==", "bodyText": "Missing loggerConfig.removeAppender(...) as part of test cleanup. Or use a logger local to this test", "url": "https://github.com/camunda-cloud/zeebe/pull/4191#discussion_r400903718", "createdAt": "2020-03-31T13:15:43Z", "author": {"login": "pihme"}, "path": "util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.util;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.Appender;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.StringLayout;\n+import org.apache.logging.log4j.core.appender.WriterAppender;\n+import org.apache.logging.log4j.core.config.LoggerConfig;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class StackdriverJSONLayoutTest {\n+\n+  private Logger logger = LogManager.getLogger();\n+  private LoggerContext context = (LoggerContext) LogManager.getContext(false);\n+  private Writer logOutput;\n+  private ObjectReader jsonReader = new ObjectMapper().reader();\n+\n+  @Before\n+  public void before() {\n+    logOutput = new StringWriter();\n+  }\n+\n+  @Test\n+  public void testJSONOutput() throws IOException {\n+    // Given\n+    createTestAppenderWithLayout(new StackdriverJSONLayout());\n+    // when\n+    logger.error(\"Should appear as JSON formatted ouput\");\n+    // then\n+    final Map<String, String> jsonMap = logOutputToJSONMap();\n+    assertThat(jsonMap)\n+        .containsKeys(\n+            \"logger\", \"message\", \"severity\", \"thread\", \"timestampNanos\", \"timestampSeconds\");\n+    assertThat(jsonMap).containsEntry(\"message\", \"Should appear as JSON formatted ouput\");\n+    assertThat(jsonMap).containsEntry(\"logger\", logger.getName());\n+  }\n+\n+  private Map<String, String> logOutputToJSONMap() throws IOException {\n+    return jsonReader\n+        .withValueToUpdate(new HashMap<String, String>())\n+        .readValue(logOutput.toString());\n+  }\n+\n+  private void createTestAppenderWithLayout(StringLayout layout) {\n+    final Appender appender =\n+        WriterAppender.createAppender(layout, null, logOutput, \"test\", false, false);\n+    final LoggerConfig loggerConfig = context.getConfiguration().getRootLogger();\n+    loggerConfig.addAppender(appender, Level.ALL, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fec0ef72c3ce059870d9527c2af4145a9b7600"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDkwNTM0Ng==", "bodyText": "Optional: use soft asserts", "url": "https://github.com/camunda-cloud/zeebe/pull/4191#discussion_r400905346", "createdAt": "2020-03-31T13:18:00Z", "author": {"login": "pihme"}, "path": "util/src/test/java/io/zeebe/util/StackdriverJSONLayoutTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.util;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.ObjectReader;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.io.Writer;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.core.Appender;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.StringLayout;\n+import org.apache.logging.log4j.core.appender.WriterAppender;\n+import org.apache.logging.log4j.core.config.LoggerConfig;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class StackdriverJSONLayoutTest {\n+\n+  private Logger logger = LogManager.getLogger();\n+  private LoggerContext context = (LoggerContext) LogManager.getContext(false);\n+  private Writer logOutput;\n+  private ObjectReader jsonReader = new ObjectMapper().reader();\n+\n+  @Before\n+  public void before() {\n+    logOutput = new StringWriter();\n+  }\n+\n+  @Test\n+  public void testJSONOutput() throws IOException {\n+    // Given\n+    createTestAppenderWithLayout(new StackdriverJSONLayout());\n+    // when\n+    logger.error(\"Should appear as JSON formatted ouput\");\n+    // then\n+    final Map<String, String> jsonMap = logOutputToJSONMap();\n+    assertThat(jsonMap)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0fec0ef72c3ce059870d9527c2af4145a9b7600"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0OTA1OTI3", "url": "https://github.com/camunda-cloud/zeebe/pull/4191#pullrequestreview-384905927", "createdAt": "2020-03-31T16:30:19Z", "commit": {"oid": "c654311ce8f127aa3de5c90f15c5cd3a591c01fd"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjozMDoyMFrOF-eN6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjozMDoyMFrOF-eN6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA1MTExNA==", "bodyText": "missing line break", "url": "https://github.com/camunda-cloud/zeebe/pull/4191#discussion_r401051114", "createdAt": "2020-03-31T16:30:20Z", "author": {"login": "pihme"}, "path": "docs/src/appendix/environment-variables.md", "diffHunk": "@@ -1,19 +1,23 @@\n # Environment Variables\n \n ## Environment Variables for Configuration\n-The configuration can be provided as a file or through environment variables. Mixing both sources is also possible. In that case environment variables have precedence over the configuration settings in the configuration file. \n+The configuration can be provided as a file or through environment variables. Mixing both sources is also possible. In that case environment variables have precedence over the configuration settings in the configuration file.\n \n All available environment variables are documented in the configuration file templates:\n * [Broker Configuration Template](broker-config-template.md)\n * [Gateway Configuration Template](gateway-config-template.md)\n \n-## Environment Variables for Operators\n-The following environment variables are intended for operators:\n-  - `ZEEBE_LOG_LEVEL`: Sets the log level of the Zeebe Logger (default: `info`).\n- \n- ## Environment Variables for Developers \n+## Environment Variables for Operators The following environment variables are", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c654311ce8f127aa3de5c90f15c5cd3a591c01fd"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8385e7eb409344f7b4e17f2a54af092f68d99802", "author": {"user": {"login": "menski", "name": "Sebastian Menski"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8385e7eb409344f7b4e17f2a54af092f68d99802", "committedDate": "2020-03-31T19:21:28Z", "message": "feat(distro): add StackdriverJSONLayout appender\n\nTo enable stackdriver compatible JSON logging set env variable\nZEEBE_LOG_APPENDER to Stackdriver.\n\nRemove log4j2 configuration location from startup parameters to allow\noverriding with custom file locations."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a476efb9156b8bf224f05e44e655f21a189ae03", "author": {"user": {"login": "menski", "name": "Sebastian Menski"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8a476efb9156b8bf224f05e44e655f21a189ae03", "committedDate": "2020-03-31T19:21:28Z", "message": "chore(benchmarks): enable stackdriver logging in benchmarks per default"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d186188497c899eda0358fafef4311741dec7e0", "author": {"user": {"login": "menski", "name": "Sebastian Menski"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/3d186188497c899eda0358fafef4311741dec7e0", "committedDate": "2020-03-31T19:21:28Z", "message": "docs(operations): document stackdriver logging"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c654311ce8f127aa3de5c90f15c5cd3a591c01fd", "author": {"user": {"login": "menski", "name": "Sebastian Menski"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/c654311ce8f127aa3de5c90f15c5cd3a591c01fd", "committedDate": "2020-03-31T16:18:52Z", "message": "test(util): refactor StackdriverJSONLayoutTest"}, "afterCommit": {"oid": "3d186188497c899eda0358fafef4311741dec7e0", "author": {"user": {"login": "menski", "name": "Sebastian Menski"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/3d186188497c899eda0358fafef4311741dec7e0", "committedDate": "2020-03-31T19:21:28Z", "message": "docs(operations): document stackdriver logging"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2955, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}