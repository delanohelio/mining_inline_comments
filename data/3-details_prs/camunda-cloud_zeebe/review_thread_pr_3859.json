{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MTM3NzM4", "number": 3859, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwODo0ODoyMVrODgm23A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwODo0ODoyMVrODgm23A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTE3NjYwOnYy", "diffSide": "RIGHT", "path": "expression-language/src/main/java/io/zeebe/el/impl/FeelExpressionLanguage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwODo0ODoyMVrOFq5n1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMjowNDoyM1rOFq_1tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUyODU5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          \"Expected FEEL expression (e.g. '${variableName}') or static value (e.g. 'jobType') but found '%s'\",\n          \n          \n            \n                          \"Expected FEEL expression (e.g. '=variableName') or static value (e.g. 'jobType') but found '%s'\",", "url": "https://github.com/camunda-cloud/zeebe/pull/3859#discussion_r380528599", "createdAt": "2020-02-18T08:48:21Z", "author": {"login": "deepthidevaki"}, "path": "expression-language/src/main/java/io/zeebe/el/impl/FeelExpressionLanguage.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.el.impl;\n+\n+import static io.zeebe.util.EnsureUtil.ensureNotNull;\n+\n+import io.zeebe.el.EvaluationResult;\n+import io.zeebe.el.Expression;\n+import io.zeebe.el.ExpressionLanguage;\n+import java.util.regex.Pattern;\n+import org.agrona.DirectBuffer;\n+import org.camunda.feel.FeelEngine;\n+import org.camunda.feel.FeelEngine.Failure;\n+import org.camunda.feel.ParsedExpression;\n+import org.camunda.feel.spi.JavaValueMapper;\n+import scala.util.Either;\n+\n+/**\n+ * A wrapper around the FEEL-Scala expression language.\n+ *\n+ * <p>\n+ * <li><a href=\"https://github.com/camunda/feel-scala\">GitHub Repository</a>\n+ * <li><a href=\"https://camunda.github.io/feel-scala\">Documentation</a>\n+ */\n+public final class FeelExpressionLanguage implements ExpressionLanguage {\n+\n+  private static final Pattern EXPRESSION_PATTERN = Pattern.compile(\"\\\\=(.+)\");\n+  private static final Pattern STATIC_VALUE_PATTERN = Pattern.compile(\"[a-zA-Z][a-zA-Z0-9_\\\\-]*\");\n+\n+  private final FeelEngine feelEngine =\n+      new FeelEngine.Builder().customValueMapper(new JavaValueMapper()).build();\n+\n+  private final MessagePackConverter messagePackConverter = new MessagePackConverter();\n+\n+  @Override\n+  public Expression parseExpression(final String expression) {\n+    ensureNotNull(\"expression\", expression);\n+\n+    final var expressionMatcher = EXPRESSION_PATTERN.matcher(expression);\n+    final var valueMather = STATIC_VALUE_PATTERN.matcher(expression);\n+\n+    if (expressionMatcher.matches()) {\n+      final var unpackedExpression = expressionMatcher.group(1);\n+      return parseFeelExpression(unpackedExpression);\n+\n+    } else if (valueMather.matches()) {\n+      final var value = valueMather.group();\n+      return new StaticExpression(value);\n+\n+    } else {\n+      final var failureMessage =\n+          String.format(\n+              \"Expected FEEL expression (e.g. '${variableName}') or static value (e.g. 'jobType') but found '%s'\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8436c4d1989629cb6169f965a3a3e4d376449b91"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDYzMDQ1NQ==", "bodyText": "Good catch \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/3859#discussion_r380630455", "createdAt": "2020-02-18T12:04:23Z", "author": {"login": "saig0"}, "path": "expression-language/src/main/java/io/zeebe/el/impl/FeelExpressionLanguage.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.el.impl;\n+\n+import static io.zeebe.util.EnsureUtil.ensureNotNull;\n+\n+import io.zeebe.el.EvaluationResult;\n+import io.zeebe.el.Expression;\n+import io.zeebe.el.ExpressionLanguage;\n+import java.util.regex.Pattern;\n+import org.agrona.DirectBuffer;\n+import org.camunda.feel.FeelEngine;\n+import org.camunda.feel.FeelEngine.Failure;\n+import org.camunda.feel.ParsedExpression;\n+import org.camunda.feel.spi.JavaValueMapper;\n+import scala.util.Either;\n+\n+/**\n+ * A wrapper around the FEEL-Scala expression language.\n+ *\n+ * <p>\n+ * <li><a href=\"https://github.com/camunda/feel-scala\">GitHub Repository</a>\n+ * <li><a href=\"https://camunda.github.io/feel-scala\">Documentation</a>\n+ */\n+public final class FeelExpressionLanguage implements ExpressionLanguage {\n+\n+  private static final Pattern EXPRESSION_PATTERN = Pattern.compile(\"\\\\=(.+)\");\n+  private static final Pattern STATIC_VALUE_PATTERN = Pattern.compile(\"[a-zA-Z][a-zA-Z0-9_\\\\-]*\");\n+\n+  private final FeelEngine feelEngine =\n+      new FeelEngine.Builder().customValueMapper(new JavaValueMapper()).build();\n+\n+  private final MessagePackConverter messagePackConverter = new MessagePackConverter();\n+\n+  @Override\n+  public Expression parseExpression(final String expression) {\n+    ensureNotNull(\"expression\", expression);\n+\n+    final var expressionMatcher = EXPRESSION_PATTERN.matcher(expression);\n+    final var valueMather = STATIC_VALUE_PATTERN.matcher(expression);\n+\n+    if (expressionMatcher.matches()) {\n+      final var unpackedExpression = expressionMatcher.group(1);\n+      return parseFeelExpression(unpackedExpression);\n+\n+    } else if (valueMather.matches()) {\n+      final var value = valueMather.group();\n+      return new StaticExpression(value);\n+\n+    } else {\n+      final var failureMessage =\n+          String.format(\n+              \"Expected FEEL expression (e.g. '${variableName}') or static value (e.g. 'jobType') but found '%s'\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUyODU5OQ=="}, "originalCommit": {"oid": "8436c4d1989629cb6169f965a3a3e4d376449b91"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4982, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}