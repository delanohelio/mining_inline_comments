{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NTc5NTQw", "number": 5067, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMToyNzo0NlrOETNhKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzowNjoxNlrOEU325w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NTc5ODgyOnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMToyNzo0NlrOG40MKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwNzoyMjowNlrOG6uv6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyODUyMQ==", "bodyText": "please don't \ud83d\ude48", "url": "https://github.com/camunda-cloud/zeebe/pull/5067#discussion_r462228521", "createdAt": "2020-07-29T11:27:46Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -123,9 +123,9 @@ public ZeebePartition(\n     this.typedRecordProcessorsFactory = typedRecordProcessorsFactory;\n     this.commandApiService = commandApiService;\n     this.partitionListeners = Collections.unmodifiableList(partitionListeners);\n-    this.partitionId = atomixRaftPartition.id().id();\n-    this.scheduler = actorScheduler;\n-    this.maxFragmentSize = (int) brokerCfg.getNetwork().getMaxMessageSizeInBytes();\n+    partitionId = atomixRaftPartition.id().id();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba16a4ea779d9d27d87db8cc66a6346b055fde0d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyOTM1Nw==", "bodyText": "Idk whether we ever discussed that but I normally tend to use the this keyword in the ctor. For consistency I would like to keep it. If we decided not to use it then we should remove it everywhere.", "url": "https://github.com/camunda-cloud/zeebe/pull/5067#discussion_r462229357", "createdAt": "2020-07-29T11:29:23Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -123,9 +123,9 @@ public ZeebePartition(\n     this.typedRecordProcessorsFactory = typedRecordProcessorsFactory;\n     this.commandApiService = commandApiService;\n     this.partitionListeners = Collections.unmodifiableList(partitionListeners);\n-    this.partitionId = atomixRaftPartition.id().id();\n-    this.scheduler = actorScheduler;\n-    this.maxFragmentSize = (int) brokerCfg.getNetwork().getMaxMessageSizeInBytes();\n+    partitionId = atomixRaftPartition.id().id();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyODUyMQ=="}, "originalCommit": {"oid": "ba16a4ea779d9d27d87db8cc66a6346b055fde0d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIzNDE1MA==", "bodyText": "This was my IDE. It removes all this if they're not necessary. We never talked about it yet. So, I can remove it.", "url": "https://github.com/camunda-cloud/zeebe/pull/5067#discussion_r464234150", "createdAt": "2020-08-03T07:16:16Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -123,9 +123,9 @@ public ZeebePartition(\n     this.typedRecordProcessorsFactory = typedRecordProcessorsFactory;\n     this.commandApiService = commandApiService;\n     this.partitionListeners = Collections.unmodifiableList(partitionListeners);\n-    this.partitionId = atomixRaftPartition.id().id();\n-    this.scheduler = actorScheduler;\n-    this.maxFragmentSize = (int) brokerCfg.getNetwork().getMaxMessageSizeInBytes();\n+    partitionId = atomixRaftPartition.id().id();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyODUyMQ=="}, "originalCommit": {"oid": "ba16a4ea779d9d27d87db8cc66a6346b055fde0d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIzNjUyMg==", "bodyText": "Agree, but maybe we need :D I would like to keep the this keyword, but we can discuss this in the team. For now I think it makes it harder to review if we change this. We probably need again a big PR where we remove all of it if we decide to do it.", "url": "https://github.com/camunda-cloud/zeebe/pull/5067#discussion_r464236522", "createdAt": "2020-08-03T07:22:06Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -123,9 +123,9 @@ public ZeebePartition(\n     this.typedRecordProcessorsFactory = typedRecordProcessorsFactory;\n     this.commandApiService = commandApiService;\n     this.partitionListeners = Collections.unmodifiableList(partitionListeners);\n-    this.partitionId = atomixRaftPartition.id().id();\n-    this.scheduler = actorScheduler;\n-    this.maxFragmentSize = (int) brokerCfg.getNetwork().getMaxMessageSizeInBytes();\n+    partitionId = atomixRaftPartition.id().id();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjIyODUyMQ=="}, "originalCommit": {"oid": "ba16a4ea779d9d27d87db8cc66a6346b055fde0d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDIyNDU0OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMDo0OTozMlrOG6EWSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMDo0OTozMlrOG6EWSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MTgzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                actor.runOnCompletion(\n          \n          \n            \n                    closePartition(),\n          \n          \n            \n                    (ok, failure) -> {\n          \n          \n            \n                      atomixRaftPartition.removeRoleChangeListener(this);\n          \n          \n            \n                      atomixRaftPartition.getServer().removeCommitListener(this);\n          \n          \n            \n            \n          \n          \n            \n                      criticalComponentsHealthMonitor.removeComponent(raftPartitionHealth.getName());\n          \n          \n            \n                      raftPartitionHealth.close();\n          \n          \n            \n                    });\n          \n          \n            \n                    closePartition().onComplete(\n          \n          \n            \n                    (ok, failure) -> {\n          \n          \n            \n                      atomixRaftPartition.removeRoleChangeListener(this);\n          \n          \n            \n                      atomixRaftPartition.getServer().removeCommitListener(this);\n          \n          \n            \n            \n          \n          \n            \n                      criticalComponentsHealthMonitor.removeComponent(raftPartitionHealth.getName());\n          \n          \n            \n                      raftPartitionHealth.close();\n          \n          \n            \n                    });", "url": "https://github.com/camunda-cloud/zeebe/pull/5067#discussion_r463541835", "createdAt": "2020-07-31T10:49:32Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -674,32 +643,16 @@ protected void onActorStarted() {\n   }\n \n   @Override\n-  protected void onActorClosed() {\n-    criticalComponentsHealthMonitor.removeComponent(raftPartitionHealth.getName());\n-    raftPartitionHealth.close();\n-  }\n-\n-  @Override\n-  public void close() {\n-    // this is called from outside so it is safe to call join\n-    final var closeFuture = new CompletableActorFuture<Void>();\n-    actor.call(\n-        () ->\n-            closePartition()\n-                .onComplete(\n-                    (v, t) -> {\n-                      atomixRaftPartition.removeRoleChangeListener(this);\n-                      atomixRaftPartition.getServer().removeCommitListener(this);\n-\n-                      if (t == null) {\n-                        closeFuture.complete(null);\n-                      } else {\n-                        closeFuture.completeExceptionally(t);\n-                      }\n-                    }));\n-    closeFuture.join();\n-\n-    super.close();\n+  protected void onActorClosing() {\n+    actor.runOnCompletion(\n+        closePartition(),\n+        (ok, failure) -> {\n+          atomixRaftPartition.removeRoleChangeListener(this);\n+          atomixRaftPartition.getServer().removeCommitListener(this);\n+\n+          criticalComponentsHealthMonitor.removeComponent(raftPartitionHealth.getName());\n+          raftPartitionHealth.close();\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba16a4ea779d9d27d87db8cc66a6346b055fde0d"}, "originalPosition": 246}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDIzMjg5OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMDo1MjoyOVrOG6EbRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxMToxNzo1M1rOG61rNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MzEwOQ==", "bodyText": "I this the case? You mean because Partition#close and stepdown could close the partition?!", "url": "https://github.com/camunda-cloud/zeebe/pull/5067#discussion_r463543109", "createdAt": "2020-07-31T10:52:29Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -710,6 +663,57 @@ protected void handleFailure(final Exception failure) {\n     onInstallFailure();\n   }\n \n+  private void addClosingStep(final String name, final AsyncClosable closable) {\n+    closingSteps.add(new ClosingStep(name, closable));\n+  }\n+\n+  private CompletableActorFuture<Void> closePartition() {\n+    // this method may be called concurrently when the actor is closed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba16a4ea779d9d27d87db8cc66a6346b055fde0d"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0Mzc2NQ==", "bodyText": "We could prevent that right? We know when we are in the closing phase.", "url": "https://github.com/camunda-cloud/zeebe/pull/5067#discussion_r463543765", "createdAt": "2020-07-31T10:54:14Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -710,6 +663,57 @@ protected void handleFailure(final Exception failure) {\n     onInstallFailure();\n   }\n \n+  private void addClosingStep(final String name, final AsyncClosable closable) {\n+    closingSteps.add(new ClosingStep(name, closable));\n+  }\n+\n+  private CompletableActorFuture<Void> closePartition() {\n+    // this method may be called concurrently when the actor is closed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MzEwOQ=="}, "originalCommit": {"oid": "ba16a4ea779d9d27d87db8cc66a6346b055fde0d"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIzNjY3Ng==", "bodyText": "I'm not sure how to prevent this situation.\n\nfirst closePartition() is called by transitionToLeader()\nthen closePartition() is called by onActorClosing()\n\nWhat do you suggest in detail?", "url": "https://github.com/camunda-cloud/zeebe/pull/5067#discussion_r464236676", "createdAt": "2020-08-03T07:22:30Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -710,6 +663,57 @@ protected void handleFailure(final Exception failure) {\n     onInstallFailure();\n   }\n \n+  private void addClosingStep(final String name, final AsyncClosable closable) {\n+    closingSteps.add(new ClosingStep(name, closable));\n+  }\n+\n+  private CompletableActorFuture<Void> closePartition() {\n+    // this method may be called concurrently when the actor is closed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MzEwOQ=="}, "originalCommit": {"oid": "ba16a4ea779d9d27d87db8cc66a6346b055fde0d"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDM1MDAwNA==", "bodyText": "Ok. I'll extend the code comment \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/5067#discussion_r464350004", "createdAt": "2020-08-03T11:17:53Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -710,6 +663,57 @@ protected void handleFailure(final Exception failure) {\n     onInstallFailure();\n   }\n \n+  private void addClosingStep(final String name, final AsyncClosable closable) {\n+    closingSteps.add(new ClosingStep(name, closable));\n+  }\n+\n+  private CompletableActorFuture<Void> closePartition() {\n+    // this method may be called concurrently when the actor is closed", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MzEwOQ=="}, "originalCommit": {"oid": "ba16a4ea779d9d27d87db8cc66a6346b055fde0d"}, "originalPosition": 259}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDI1MzM3OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMTowMDoyOFrOG6EnjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOToyOTo1MVrOG6yngg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NjI1Mw==", "bodyText": "Ideally we should prevent that; in case of multiple role changes we do this due to waiting of the last transition. I think it makes sense to intorduce a closing flag which is toggled and nothing can be executed anymore, like transition. I think actor scheduler also supports something like that. That some jobs are only executed on starting right?", "url": "https://github.com/camunda-cloud/zeebe/pull/5067#discussion_r463546253", "createdAt": "2020-07-31T11:00:28Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -710,6 +663,57 @@ protected void handleFailure(final Exception failure) {\n     onInstallFailure();\n   }\n \n+  private void addClosingStep(final String name, final AsyncClosable closable) {\n+    closingSteps.add(new ClosingStep(name, closable));\n+  }\n+\n+  private CompletableActorFuture<Void> closePartition() {\n+    // this method may be called concurrently when the actor is closed\n+    final var closingStepsInReverseOrder = new ArrayList<>(closingSteps);\n+    Collections.reverse(closingStepsInReverseOrder);\n+\n+    final var closingPartitionFuture = new CompletableActorFuture<Void>();\n+    stepByStepClosing(closingPartitionFuture, closingStepsInReverseOrder);\n+\n+    return closingPartitionFuture;\n+  }\n+\n+  private void stepByStepClosing(\n+      final CompletableActorFuture<Void> closingFuture, final List<ClosingStep> actorsToClose) {\n+    if (actorsToClose.isEmpty()) {\n+      closingFuture.complete(null);\n+      return;\n+    }\n+\n+    final ClosingStep closingStep = actorsToClose.remove(0);\n+    LOG.debug(\"Closing Zeebe-Partition-{}: {}\", partitionId, closingStep.getName());\n+\n+    final var closeFuture = closingStep.getClosable().closeAsync();\n+    closeFuture.onComplete(\n+        (v, t) -> {\n+          if (t == null) {\n+            LOG.debug(\n+                \"Closing Zeebe-Partition-{}: {} closed successfully\",\n+                partitionId,\n+                closingStep.getName());\n+\n+            // remove the completed step from the list in case that the closing is interrupted", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba16a4ea779d9d27d87db8cc66a6346b055fde0d"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDIzOTUwMA==", "bodyText": "When actor.close() is called then every scheduled job is canceled. That mean, if closePartition() is called first and actor.close() is called later then this interrupts the closeFuture.onComplete() chain in stepByStepClosing(). So, we need to continue with the closing of the partition.\nWhat exactly do you suggest?", "url": "https://github.com/camunda-cloud/zeebe/pull/5067#discussion_r464239500", "createdAt": "2020-08-03T07:29:10Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -710,6 +663,57 @@ protected void handleFailure(final Exception failure) {\n     onInstallFailure();\n   }\n \n+  private void addClosingStep(final String name, final AsyncClosable closable) {\n+    closingSteps.add(new ClosingStep(name, closable));\n+  }\n+\n+  private CompletableActorFuture<Void> closePartition() {\n+    // this method may be called concurrently when the actor is closed\n+    final var closingStepsInReverseOrder = new ArrayList<>(closingSteps);\n+    Collections.reverse(closingStepsInReverseOrder);\n+\n+    final var closingPartitionFuture = new CompletableActorFuture<Void>();\n+    stepByStepClosing(closingPartitionFuture, closingStepsInReverseOrder);\n+\n+    return closingPartitionFuture;\n+  }\n+\n+  private void stepByStepClosing(\n+      final CompletableActorFuture<Void> closingFuture, final List<ClosingStep> actorsToClose) {\n+    if (actorsToClose.isEmpty()) {\n+      closingFuture.complete(null);\n+      return;\n+    }\n+\n+    final ClosingStep closingStep = actorsToClose.remove(0);\n+    LOG.debug(\"Closing Zeebe-Partition-{}: {}\", partitionId, closingStep.getName());\n+\n+    final var closeFuture = closingStep.getClosable().closeAsync();\n+    closeFuture.onComplete(\n+        (v, t) -> {\n+          if (t == null) {\n+            LOG.debug(\n+                \"Closing Zeebe-Partition-{}: {} closed successfully\",\n+                partitionId,\n+                closingStep.getName());\n+\n+            // remove the completed step from the list in case that the closing is interrupted", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NjI1Mw=="}, "originalCommit": {"oid": "ba16a4ea779d9d27d87db8cc66a6346b055fde0d"}, "originalPosition": 288}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI5OTkwNg==", "bodyText": "OK the comments before sounded like it is a problem when we are do the actor closing that the next transition interrupt it?\n\nWhen actor.close() is called then every scheduled job is canceled.\n\nBut partition closing if scheduled will not be interrupted?", "url": "https://github.com/camunda-cloud/zeebe/pull/5067#discussion_r464299906", "createdAt": "2020-08-03T09:29:51Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -710,6 +663,57 @@ protected void handleFailure(final Exception failure) {\n     onInstallFailure();\n   }\n \n+  private void addClosingStep(final String name, final AsyncClosable closable) {\n+    closingSteps.add(new ClosingStep(name, closable));\n+  }\n+\n+  private CompletableActorFuture<Void> closePartition() {\n+    // this method may be called concurrently when the actor is closed\n+    final var closingStepsInReverseOrder = new ArrayList<>(closingSteps);\n+    Collections.reverse(closingStepsInReverseOrder);\n+\n+    final var closingPartitionFuture = new CompletableActorFuture<Void>();\n+    stepByStepClosing(closingPartitionFuture, closingStepsInReverseOrder);\n+\n+    return closingPartitionFuture;\n+  }\n+\n+  private void stepByStepClosing(\n+      final CompletableActorFuture<Void> closingFuture, final List<ClosingStep> actorsToClose) {\n+    if (actorsToClose.isEmpty()) {\n+      closingFuture.complete(null);\n+      return;\n+    }\n+\n+    final ClosingStep closingStep = actorsToClose.remove(0);\n+    LOG.debug(\"Closing Zeebe-Partition-{}: {}\", partitionId, closingStep.getName());\n+\n+    final var closeFuture = closingStep.getClosable().closeAsync();\n+    closeFuture.onComplete(\n+        (v, t) -> {\n+          if (t == null) {\n+            LOG.debug(\n+                \"Closing Zeebe-Partition-{}: {} closed successfully\",\n+                partitionId,\n+                closingStep.getName());\n+\n+            // remove the completed step from the list in case that the closing is interrupted", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NjI1Mw=="}, "originalCommit": {"oid": "ba16a4ea779d9d27d87db8cc66a6346b055fde0d"}, "originalPosition": 288}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDI1NzE5OnYy", "diffSide": "RIGHT", "path": "util/src/main/java/io/zeebe/util/sched/ActorExecutor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMTowMjowM1rOG6Ep6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODowNzozMlrOG6v_xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0Njg1Nw==", "bodyText": "This is not the blocking task runner right?", "url": "https://github.com/camunda-cloud/zeebe/pull/5067#discussion_r463546857", "createdAt": "2020-07-31T11:02:03Z", "author": {"login": "Zelldon"}, "path": "util/src/main/java/io/zeebe/util/sched/ActorExecutor.java", "diffHunk": "@@ -70,6 +71,7 @@ public void start() {\n   }\n \n   public CompletableFuture<Void> closeAsync() {\n+    Loggers.ACTOR_LOGGER.debug(\"Closing blocking task runner\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba16a4ea779d9d27d87db8cc66a6346b055fde0d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI1NTkwMA==", "bodyText": "Not? It is closing the task runner afterward blockingTasksRunner.shutdown().", "url": "https://github.com/camunda-cloud/zeebe/pull/5067#discussion_r464255900", "createdAt": "2020-08-03T08:05:11Z", "author": {"login": "saig0"}, "path": "util/src/main/java/io/zeebe/util/sched/ActorExecutor.java", "diffHunk": "@@ -70,6 +71,7 @@ public void start() {\n   }\n \n   public CompletableFuture<Void> closeAsync() {\n+    Loggers.ACTOR_LOGGER.debug(\"Closing blocking task runner\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0Njg1Nw=="}, "originalCommit": {"oid": "ba16a4ea779d9d27d87db8cc66a6346b055fde0d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI1Njk2NA==", "bodyText": "This was confusing since it is happening in the ActorExeuctor \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/5067#discussion_r464256964", "createdAt": "2020-08-03T08:07:32Z", "author": {"login": "Zelldon"}, "path": "util/src/main/java/io/zeebe/util/sched/ActorExecutor.java", "diffHunk": "@@ -70,6 +71,7 @@ public void start() {\n   }\n \n   public CompletableFuture<Void> closeAsync() {\n+    Loggers.ACTOR_LOGGER.debug(\"Closing blocking task runner\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0Njg1Nw=="}, "originalCommit": {"oid": "ba16a4ea779d9d27d87db8cc66a6346b055fde0d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDMyMDQzOnYy", "diffSide": "LEFT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToyODozM1rOG6FQLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToyODozM1rOG6FQLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1NjY1NQ==", "bodyText": "So actually we remove the closables already before I thought this was part of the fix?", "url": "https://github.com/camunda-cloud/zeebe/pull/5067#discussion_r463556655", "createdAt": "2020-07-31T11:28:33Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -610,39 +601,17 @@ private StreamProcessor createStreamProcessor(final ZeebeDb zeebeDb) {\n     return CompletableActorFuture.completed(null);\n   }\n \n-  private void stepByStepClosing(\n-      final CompletableActorFuture<Void> closingFuture, final List<AsyncClosable> actorsToClose) {\n-    if (actorsToClose.isEmpty()) {\n-      closingFuture.complete(null);\n-      return;\n-    }\n-\n-    final AsyncClosable asyncClosable = actorsToClose.remove(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba16a4ea779d9d27d87db8cc66a6346b055fde0d"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDMyMjQ0OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToyOToyMVrOG6FRVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwODowNjo0MVrOG6v-RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1Njk1MQ==", "bodyText": "We remove now twice from two different lists ? \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/5067#discussion_r463556951", "createdAt": "2020-07-31T11:29:21Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -710,6 +663,57 @@ protected void handleFailure(final Exception failure) {\n     onInstallFailure();\n   }\n \n+  private void addClosingStep(final String name, final AsyncClosable closable) {\n+    closingSteps.add(new ClosingStep(name, closable));\n+  }\n+\n+  private CompletableActorFuture<Void> closePartition() {\n+    // this method may be called concurrently when the actor is closed\n+    final var closingStepsInReverseOrder = new ArrayList<>(closingSteps);\n+    Collections.reverse(closingStepsInReverseOrder);\n+\n+    final var closingPartitionFuture = new CompletableActorFuture<Void>();\n+    stepByStepClosing(closingPartitionFuture, closingStepsInReverseOrder);\n+\n+    return closingPartitionFuture;\n+  }\n+\n+  private void stepByStepClosing(\n+      final CompletableActorFuture<Void> closingFuture, final List<ClosingStep> actorsToClose) {\n+    if (actorsToClose.isEmpty()) {\n+      closingFuture.complete(null);\n+      return;\n+    }\n+\n+    final ClosingStep closingStep = actorsToClose.remove(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba16a4ea779d9d27d87db8cc66a6346b055fde0d"}, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDI1NjU4MQ==", "bodyText": "Yes. We remove the closed item from both lists. Is this not correct?", "url": "https://github.com/camunda-cloud/zeebe/pull/5067#discussion_r464256581", "createdAt": "2020-08-03T08:06:41Z", "author": {"login": "saig0"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -710,6 +663,57 @@ protected void handleFailure(final Exception failure) {\n     onInstallFailure();\n   }\n \n+  private void addClosingStep(final String name, final AsyncClosable closable) {\n+    closingSteps.add(new ClosingStep(name, closable));\n+  }\n+\n+  private CompletableActorFuture<Void> closePartition() {\n+    // this method may be called concurrently when the actor is closed\n+    final var closingStepsInReverseOrder = new ArrayList<>(closingSteps);\n+    Collections.reverse(closingStepsInReverseOrder);\n+\n+    final var closingPartitionFuture = new CompletableActorFuture<Void>();\n+    stepByStepClosing(closingPartitionFuture, closingStepsInReverseOrder);\n+\n+    return closingPartitionFuture;\n+  }\n+\n+  private void stepByStepClosing(\n+      final CompletableActorFuture<Void> closingFuture, final List<ClosingStep> actorsToClose) {\n+    if (actorsToClose.isEmpty()) {\n+      closingFuture.complete(null);\n+      return;\n+    }\n+\n+    final ClosingStep closingStep = actorsToClose.remove(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1Njk1MQ=="}, "originalCommit": {"oid": "ba16a4ea779d9d27d87db8cc66a6346b055fde0d"}, "originalPosition": 276}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzIyMTUxOnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzowNjoxNlrOG7Txhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwNzowNjoxNlrOG7Txhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDg0MzE0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // caution: this method may be called concurrently when the actor is closed\n          \n          \n            \n                // caution: this method may be called concurrently on role transition due to closing the actor", "url": "https://github.com/camunda-cloud/zeebe/pull/5067#discussion_r464843142", "createdAt": "2020-08-04T07:06:16Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -668,7 +668,10 @@ private void addClosingStep(final String name, final AsyncClosable closable) {\n   }\n \n   private CompletableActorFuture<Void> closePartition() {\n-    // this method may be called concurrently when the actor is closed\n+    // caution: this method may be called concurrently when the actor is closed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efaae650c5318974bf847bae9170af71dc353fae"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 368, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}