{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwODM0MTQ5", "number": 4277, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzozNzo0NlrODv_zwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDozMToxN1rODwQDNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjU1MTA2OnYy", "diffSide": "RIGHT", "path": "docs/src/bpmn-workflows/call-activities/call-activities.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzozNzo0NlrOGCvpzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzozNzo0NlrOGCvpzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzMTA4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Usually, the `processId` is defined as a static value (e.g. `shipping-process`) but it can also be defined as [expression](/reference/expressions.html) (e.g. `= \"shipping-\" + tenantId`). The expressions is evaluated on activating the call activity and must result in a `string`.\n          \n          \n            \n            Usually, the `processId` is defined as a static value (e.g. `shipping-process`) but it can also be defined as [expression](/reference/expressions.html) (e.g. `= \"shipping-\" + tenantId`). The expression is evaluated on activating the call activity and must result in a `string`.", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405531085", "createdAt": "2020-04-08T13:37:46Z", "author": {"login": "korthout"}, "path": "docs/src/bpmn-workflows/call-activities/call-activities.md", "diffHunk": "@@ -10,10 +10,12 @@ When the created workflow instance is completed then the call activity is left a\n \n ## Defining the Called Workflow\n \n-A call activity must define the BPMN process id of the called workflow as `processId`. The `processId` defines the BPMN process id statically on the design time of the workflow.\n+A call activity must define the BPMN process id of the called workflow as `processId`.\n \n The new instance of the defined workflow will be created of its **latest version** - at the point when the call activity is activated.\n \n+Usually, the `processId` is defined as a static value (e.g. `shipping-process`) but it can also be defined as [expression](/reference/expressions.html) (e.g. `= \"shipping-\" + tenantId`). The expressions is evaluated on activating the call activity and must result in a `string`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjU3OTg4OnYy", "diffSide": "RIGHT", "path": "docs/src/bpmn-workflows/message-events/message-events.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo0NDoxMlrOGCv7mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo0NDoxMlrOGCv7mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNTY0Mw==", "bodyText": "What is meant by?\n\nexcept it is only referenced by message start events.", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405535643", "createdAt": "2020-04-08T13:44:12Z", "author": {"login": "korthout"}, "path": "docs/src/bpmn-workflows/message-events/message-events.md", "diffHunk": "@@ -30,15 +30,15 @@ When an intermediate message catch event is entered then a corresponding message\n \n An activity can have one or more message boundary events. Each of the message events must have a unique message name.\n \n-When the activity is entered then it creates a corresponding message subscription for each boundary message event. If a non-interrupting boundary event is triggered then the activity is not terminated and multiple messages can be correlated. \n+When the activity is entered then it creates a corresponding message subscription for each boundary message event. If a non-interrupting boundary event is triggered then the activity is not terminated and multiple messages can be correlated.\n \n ## Messages\n \n-A message can be referenced by one or more message events. It **must** define the name of the message (e.g. `Money collected`) and the `correlationKey` variable (e.g. `orderId`), except it is only referenced by message start events.\n+A message can be referenced by one or more message events. It **must** define the name of the message (e.g. `Money collected`) and the `correlationKey` expression (e.g. `= orderId`), except it is only referenced by message start events.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjU4Njg3OnYy", "diffSide": "RIGHT", "path": "docs/src/bpmn-workflows/message-events/message-events.md", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo0NTo0NlrOGCv_8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDo0NTozOFrOGDJbYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNjc1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `correlationKey` is an expression that usually [access a variable](/reference/expressions.html#access-variables) of the workflow instance that holds the correlation key of the message. The expression is evaluated on activating the message event and must result either in a `string` or in a `number`.\n          \n          \n            \n            The `correlationKey` is an expression that usually [accesses a variable](/reference/expressions.html#access-variables) of the workflow instance that holds the correlation key of the message. The expression is evaluated on activating the message event and must result either in a `string` or in a `number`.", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405536754", "createdAt": "2020-04-08T13:45:46Z", "author": {"login": "korthout"}, "path": "docs/src/bpmn-workflows/message-events/message-events.md", "diffHunk": "@@ -30,15 +30,15 @@ When an intermediate message catch event is entered then a corresponding message\n \n An activity can have one or more message boundary events. Each of the message events must have a unique message name.\n \n-When the activity is entered then it creates a corresponding message subscription for each boundary message event. If a non-interrupting boundary event is triggered then the activity is not terminated and multiple messages can be correlated. \n+When the activity is entered then it creates a corresponding message subscription for each boundary message event. If a non-interrupting boundary event is triggered then the activity is not terminated and multiple messages can be correlated.\n \n ## Messages\n \n-A message can be referenced by one or more message events. It **must** define the name of the message (e.g. `Money collected`) and the `correlationKey` variable (e.g. `orderId`), except it is only referenced by message start events.\n+A message can be referenced by one or more message events. It **must** define the name of the message (e.g. `Money collected`) and the `correlationKey` expression (e.g. `= orderId`), except it is only referenced by message start events.\n \n-The `correlationKey` variable must reference a variable of the workflow instance that holds the correlation key of the message. It is read from the workflow instance on activating the message event and must be either a `string` or a `number`.\n+The `correlationKey` is an expression that usually [access a variable](/reference/expressions.html#access-variables) of the workflow instance that holds the correlation key of the message. The expression is evaluated on activating the message event and must result either in a `string` or in a `number`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNzc2NQ==", "bodyText": "I like how you offered examples, in other chapters like for exclusive gateway conditions and call activities. Perhaps an example can be added here as well.", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405537765", "createdAt": "2020-04-08T13:47:09Z", "author": {"login": "korthout"}, "path": "docs/src/bpmn-workflows/message-events/message-events.md", "diffHunk": "@@ -30,15 +30,15 @@ When an intermediate message catch event is entered then a corresponding message\n \n An activity can have one or more message boundary events. Each of the message events must have a unique message name.\n \n-When the activity is entered then it creates a corresponding message subscription for each boundary message event. If a non-interrupting boundary event is triggered then the activity is not terminated and multiple messages can be correlated. \n+When the activity is entered then it creates a corresponding message subscription for each boundary message event. If a non-interrupting boundary event is triggered then the activity is not terminated and multiple messages can be correlated.\n \n ## Messages\n \n-A message can be referenced by one or more message events. It **must** define the name of the message (e.g. `Money collected`) and the `correlationKey` variable (e.g. `orderId`), except it is only referenced by message start events.\n+A message can be referenced by one or more message events. It **must** define the name of the message (e.g. `Money collected`) and the `correlationKey` expression (e.g. `= orderId`), except it is only referenced by message start events.\n \n-The `correlationKey` variable must reference a variable of the workflow instance that holds the correlation key of the message. It is read from the workflow instance on activating the message event and must be either a `string` or a `number`.\n+The `correlationKey` is an expression that usually [access a variable](/reference/expressions.html#access-variables) of the workflow instance that holds the correlation key of the message. The expression is evaluated on activating the message event and must result either in a `string` or in a `number`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNjc1NA=="}, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzOTU0OQ==", "bodyText": "I also think it would be great to add this sentence about the evaluation time to the other attribute expressions.\n\nThe expression is evaluated on activating the message event...", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405539549", "createdAt": "2020-04-08T13:49:36Z", "author": {"login": "korthout"}, "path": "docs/src/bpmn-workflows/message-events/message-events.md", "diffHunk": "@@ -30,15 +30,15 @@ When an intermediate message catch event is entered then a corresponding message\n \n An activity can have one or more message boundary events. Each of the message events must have a unique message name.\n \n-When the activity is entered then it creates a corresponding message subscription for each boundary message event. If a non-interrupting boundary event is triggered then the activity is not terminated and multiple messages can be correlated. \n+When the activity is entered then it creates a corresponding message subscription for each boundary message event. If a non-interrupting boundary event is triggered then the activity is not terminated and multiple messages can be correlated.\n \n ## Messages\n \n-A message can be referenced by one or more message events. It **must** define the name of the message (e.g. `Money collected`) and the `correlationKey` variable (e.g. `orderId`), except it is only referenced by message start events.\n+A message can be referenced by one or more message events. It **must** define the name of the message (e.g. `Money collected`) and the `correlationKey` expression (e.g. `= orderId`), except it is only referenced by message start events.\n \n-The `correlationKey` variable must reference a variable of the workflow instance that holds the correlation key of the message. It is read from the workflow instance on activating the message event and must be either a `string` or a `number`.\n+The `correlationKey` is an expression that usually [access a variable](/reference/expressions.html#access-variables) of the workflow instance that holds the correlation key of the message. The expression is evaluated on activating the message event and must result either in a `string` or in a `number`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNjc1NA=="}, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk1MjgwOQ==", "bodyText": "Where is the evaluation time not mentioned?", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405952809", "createdAt": "2020-04-09T04:43:20Z", "author": {"login": "saig0"}, "path": "docs/src/bpmn-workflows/message-events/message-events.md", "diffHunk": "@@ -30,15 +30,15 @@ When an intermediate message catch event is entered then a corresponding message\n \n An activity can have one or more message boundary events. Each of the message events must have a unique message name.\n \n-When the activity is entered then it creates a corresponding message subscription for each boundary message event. If a non-interrupting boundary event is triggered then the activity is not terminated and multiple messages can be correlated. \n+When the activity is entered then it creates a corresponding message subscription for each boundary message event. If a non-interrupting boundary event is triggered then the activity is not terminated and multiple messages can be correlated.\n \n ## Messages\n \n-A message can be referenced by one or more message events. It **must** define the name of the message (e.g. `Money collected`) and the `correlationKey` variable (e.g. `orderId`), except it is only referenced by message start events.\n+A message can be referenced by one or more message events. It **must** define the name of the message (e.g. `Money collected`) and the `correlationKey` expression (e.g. `= orderId`), except it is only referenced by message start events.\n \n-The `correlationKey` variable must reference a variable of the workflow instance that holds the correlation key of the message. It is read from the workflow instance on activating the message event and must be either a `string` or a `number`.\n+The `correlationKey` is an expression that usually [access a variable](/reference/expressions.html#access-variables) of the workflow instance that holds the correlation key of the message. The expression is evaluated on activating the message event and must result either in a `string` or in a `number`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNjc1NA=="}, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk1MzM3Nw==", "bodyText": "An example is in the previous sentence:\n\n... and the correlationKey expression (e.g. = orderId) ...\n\nShould we add more examples? Any suggestion?", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405953377", "createdAt": "2020-04-09T04:45:38Z", "author": {"login": "saig0"}, "path": "docs/src/bpmn-workflows/message-events/message-events.md", "diffHunk": "@@ -30,15 +30,15 @@ When an intermediate message catch event is entered then a corresponding message\n \n An activity can have one or more message boundary events. Each of the message events must have a unique message name.\n \n-When the activity is entered then it creates a corresponding message subscription for each boundary message event. If a non-interrupting boundary event is triggered then the activity is not terminated and multiple messages can be correlated. \n+When the activity is entered then it creates a corresponding message subscription for each boundary message event. If a non-interrupting boundary event is triggered then the activity is not terminated and multiple messages can be correlated.\n \n ## Messages\n \n-A message can be referenced by one or more message events. It **must** define the name of the message (e.g. `Money collected`) and the `correlationKey` variable (e.g. `orderId`), except it is only referenced by message start events.\n+A message can be referenced by one or more message events. It **must** define the name of the message (e.g. `Money collected`) and the `correlationKey` expression (e.g. `= orderId`), except it is only referenced by message start events.\n \n-The `correlationKey` variable must reference a variable of the workflow instance that holds the correlation key of the message. It is read from the workflow instance on activating the message event and must be either a `string` or a `number`.\n+The `correlationKey` is an expression that usually [access a variable](/reference/expressions.html#access-variables) of the workflow instance that holds the correlation key of the message. The expression is evaluated on activating the message event and must result either in a `string` or in a `number`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUzNjc1NA=="}, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjYyMjg1OnYy", "diffSide": "RIGHT", "path": "docs/src/bpmn-workflows/multi-instance/multi-instance.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1Mzo0MFrOGCwW0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1Mzo0MFrOGCwW0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0MjYxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A multi-instance activity **must** have an `inputCollection` expression that defines the collection to iterate over (e.g. `= items`). Usually, it [access a variable](/reference/expressions.html#access-variables) of the workflow instance that holds the collection. The expression is evaluated on activating the multi-instance body. It must result in an `array` of any type (e.g. `[\"item-1\", \"item-2\"]`).\n          \n          \n            \n            A multi-instance activity **must** have an `inputCollection` expression that defines the collection to iterate over (e.g. `= items`). Usually, it [accesses a variable](/reference/expressions.html#access-variables) of the workflow instance that holds the collection. The expression is evaluated on activating the multi-instance body. It must result in an `array` of any type (e.g. `[\"item-1\", \"item-2\"]`).", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405542611", "createdAt": "2020-04-08T13:53:40Z", "author": {"login": "korthout"}, "path": "docs/src/bpmn-workflows/multi-instance/multi-instance.md", "diffHunk": "@@ -21,33 +21,35 @@ A multi-instance activity is executed either sequentially or in parallel (defaul\n \n In case of a **sequential** multi-instance activity, the instances are executed one-by-one. When one instance is completed then a new instance is created for the next element in the `inputCollection`.\n \n-![sequential multi-instance](/bpmn-workflows/multi-instance/multi-instance-sequential.png) \n- \n-In case of a **parallel** multi-instance activity, all instances are created when the multi-instance body is activated. The instances are executed concurrently and independently from each other.    \n+![sequential multi-instance](/bpmn-workflows/multi-instance/multi-instance-sequential.png)\n \n-![parallel multi-instance](/bpmn-workflows/multi-instance/multi-instance-parallel.png) \n+In case of a **parallel** multi-instance activity, all instances are created when the multi-instance body is activated. The instances are executed concurrently and independently from each other.\n+\n+![parallel multi-instance](/bpmn-workflows/multi-instance/multi-instance-parallel.png)\n \n ## Defining the Collection to Iterate over\n \n-A multi-instance activity **must** define the `inputCollection` variable to iterate over (e.g. `items`). The variable is read from the workflow instance on activating the multi-instance body. It must be an `array` of any type (e.g. `[\"item-1\", \"item-2\"]`). \n+A multi-instance activity **must** have an `inputCollection` expression that defines the collection to iterate over (e.g. `= items`). Usually, it [access a variable](/reference/expressions.html#access-variables) of the workflow instance that holds the collection. The expression is evaluated on activating the multi-instance body. It must result in an `array` of any type (e.g. `[\"item-1\", \"item-2\"]`).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjYyOTgyOnYy", "diffSide": "RIGHT", "path": "docs/src/bpmn-workflows/multi-instance/multi-instance.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1NTowNFrOGCwbEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1NTowNFrOGCwbEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0MzY5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In order to access the current element of the `inputCollection` within the instance, the multi-instance activity can define the `inputElement` variable (e.g. `item`). The element is stored as a local variable of the instance under the given name.\n          \n          \n            \n            In order to access the current element of the `inputCollection` value within the instance, the multi-instance activity can define the `inputElement` variable (e.g. `item`). The element is stored as a local variable of the instance under the given name.", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405543697", "createdAt": "2020-04-08T13:55:04Z", "author": {"login": "korthout"}, "path": "docs/src/bpmn-workflows/multi-instance/multi-instance.md", "diffHunk": "@@ -21,33 +21,35 @@ A multi-instance activity is executed either sequentially or in parallel (defaul\n \n In case of a **sequential** multi-instance activity, the instances are executed one-by-one. When one instance is completed then a new instance is created for the next element in the `inputCollection`.\n \n-![sequential multi-instance](/bpmn-workflows/multi-instance/multi-instance-sequential.png) \n- \n-In case of a **parallel** multi-instance activity, all instances are created when the multi-instance body is activated. The instances are executed concurrently and independently from each other.    \n+![sequential multi-instance](/bpmn-workflows/multi-instance/multi-instance-sequential.png)\n \n-![parallel multi-instance](/bpmn-workflows/multi-instance/multi-instance-parallel.png) \n+In case of a **parallel** multi-instance activity, all instances are created when the multi-instance body is activated. The instances are executed concurrently and independently from each other.\n+\n+![parallel multi-instance](/bpmn-workflows/multi-instance/multi-instance-parallel.png)\n \n ## Defining the Collection to Iterate over\n \n-A multi-instance activity **must** define the `inputCollection` variable to iterate over (e.g. `items`). The variable is read from the workflow instance on activating the multi-instance body. It must be an `array` of any type (e.g. `[\"item-1\", \"item-2\"]`). \n+A multi-instance activity **must** have an `inputCollection` expression that defines the collection to iterate over (e.g. `= items`). Usually, it [access a variable](/reference/expressions.html#access-variables) of the workflow instance that holds the collection. The expression is evaluated on activating the multi-instance body. It must result in an `array` of any type (e.g. `[\"item-1\", \"item-2\"]`).\n \n In order to access the current element of the `inputCollection` within the instance, the multi-instance activity can define the `inputElement` variable (e.g. `item`). The element is stored as a local variable of the instance under the given name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjYzNTM2OnYy", "diffSide": "RIGHT", "path": "docs/src/bpmn-workflows/multi-instance/multi-instance.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1NjoxN1rOGCwepQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1NjoxN1rOGCwepQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NDYxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `outputCollection` defines the name of the variable under which the collected output is stored (e.g. `results`). It is created as local variable of the multi-instance body and gets updated when an instance is completed. When the multi-instance body is completed, the variable is propagated to its parent scope.\n          \n          \n            \n            `outputCollection` defines the name of the variable under which the collected output is stored (e.g. `results`). It is created as a local variable of the multi-instance body and gets updated when an instance is completed. When the multi-instance body is completed, the variable is propagated to its parent scope.", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405544613", "createdAt": "2020-04-08T13:56:17Z", "author": {"login": "korthout"}, "path": "docs/src/bpmn-workflows/multi-instance/multi-instance.md", "diffHunk": "@@ -21,33 +21,35 @@ A multi-instance activity is executed either sequentially or in parallel (defaul\n \n In case of a **sequential** multi-instance activity, the instances are executed one-by-one. When one instance is completed then a new instance is created for the next element in the `inputCollection`.\n \n-![sequential multi-instance](/bpmn-workflows/multi-instance/multi-instance-sequential.png) \n- \n-In case of a **parallel** multi-instance activity, all instances are created when the multi-instance body is activated. The instances are executed concurrently and independently from each other.    \n+![sequential multi-instance](/bpmn-workflows/multi-instance/multi-instance-sequential.png)\n \n-![parallel multi-instance](/bpmn-workflows/multi-instance/multi-instance-parallel.png) \n+In case of a **parallel** multi-instance activity, all instances are created when the multi-instance body is activated. The instances are executed concurrently and independently from each other.\n+\n+![parallel multi-instance](/bpmn-workflows/multi-instance/multi-instance-parallel.png)\n \n ## Defining the Collection to Iterate over\n \n-A multi-instance activity **must** define the `inputCollection` variable to iterate over (e.g. `items`). The variable is read from the workflow instance on activating the multi-instance body. It must be an `array` of any type (e.g. `[\"item-1\", \"item-2\"]`). \n+A multi-instance activity **must** have an `inputCollection` expression that defines the collection to iterate over (e.g. `= items`). Usually, it [access a variable](/reference/expressions.html#access-variables) of the workflow instance that holds the collection. The expression is evaluated on activating the multi-instance body. It must result in an `array` of any type (e.g. `[\"item-1\", \"item-2\"]`).\n \n In order to access the current element of the `inputCollection` within the instance, the multi-instance activity can define the `inputElement` variable (e.g. `item`). The element is stored as a local variable of the instance under the given name.\n \n-If the `inputCollection` is empty then the multi-instance body is completed immediately and no instances are created. It behaves like the activity is skipped. \n+If the `inputCollection` value is **empty** then the multi-instance body is completed immediately and no instances are created. It behaves like the activity is skipped.\n \n ## Collecting the Output\n \n-The output of a multi-instance activity (e.g. the result of a calculation) can be collected from the instances by defining the `outputCollection` **and** the `outputElement` variable. \n+The output of a multi-instance activity (e.g. the result of a calculation) can be collected from the instances by defining the `outputCollection` **and** the `outputElement` expression.\n \n `outputCollection` defines the name of the variable under which the collected output is stored (e.g. `results`). It is created as local variable of the multi-instance body and gets updated when an instance is completed. When the multi-instance body is completed, the variable is propagated to its parent scope.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjY0ODE5OnYy", "diffSide": "RIGHT", "path": "docs/src/bpmn-workflows/multi-instance/multi-instance.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1OTowNFrOGCwmzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzo1OTowNFrOGCwmzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NjcwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `outputElement` is an expression that defines the output of the instance (e.g. `= result`). Usually, it [access a variable](/reference/expressions.html#access-variables) of the instance that holds the output value. If the expression only access a variable or a nested property then it is created as **local variable** of the instance. This variable should be updated with the output value, for example, by a job worker providing a variable with the name `result`. Since the variable is defined as local variable, it is not propagated to its parent scope and is only visible within the instance.\n          \n          \n            \n            `outputElement` is an expression that defines the output of the instance (e.g. `= result`). Usually, it [accesses a variable](/reference/expressions.html#access-variables) of the instance that holds the output value. If the expression only accesses a variable or a nested property then it is created as **local variable** of the instance. This variable should be updated with the output value, for example, by a job worker providing a variable with the name `result`. Since the variable is defined as a local variable, it is not propagated to its parent scope and is only visible within the instance.", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405546703", "createdAt": "2020-04-08T13:59:04Z", "author": {"login": "korthout"}, "path": "docs/src/bpmn-workflows/multi-instance/multi-instance.md", "diffHunk": "@@ -21,33 +21,35 @@ A multi-instance activity is executed either sequentially or in parallel (defaul\n \n In case of a **sequential** multi-instance activity, the instances are executed one-by-one. When one instance is completed then a new instance is created for the next element in the `inputCollection`.\n \n-![sequential multi-instance](/bpmn-workflows/multi-instance/multi-instance-sequential.png) \n- \n-In case of a **parallel** multi-instance activity, all instances are created when the multi-instance body is activated. The instances are executed concurrently and independently from each other.    \n+![sequential multi-instance](/bpmn-workflows/multi-instance/multi-instance-sequential.png)\n \n-![parallel multi-instance](/bpmn-workflows/multi-instance/multi-instance-parallel.png) \n+In case of a **parallel** multi-instance activity, all instances are created when the multi-instance body is activated. The instances are executed concurrently and independently from each other.\n+\n+![parallel multi-instance](/bpmn-workflows/multi-instance/multi-instance-parallel.png)\n \n ## Defining the Collection to Iterate over\n \n-A multi-instance activity **must** define the `inputCollection` variable to iterate over (e.g. `items`). The variable is read from the workflow instance on activating the multi-instance body. It must be an `array` of any type (e.g. `[\"item-1\", \"item-2\"]`). \n+A multi-instance activity **must** have an `inputCollection` expression that defines the collection to iterate over (e.g. `= items`). Usually, it [access a variable](/reference/expressions.html#access-variables) of the workflow instance that holds the collection. The expression is evaluated on activating the multi-instance body. It must result in an `array` of any type (e.g. `[\"item-1\", \"item-2\"]`).\n \n In order to access the current element of the `inputCollection` within the instance, the multi-instance activity can define the `inputElement` variable (e.g. `item`). The element is stored as a local variable of the instance under the given name.\n \n-If the `inputCollection` is empty then the multi-instance body is completed immediately and no instances are created. It behaves like the activity is skipped. \n+If the `inputCollection` value is **empty** then the multi-instance body is completed immediately and no instances are created. It behaves like the activity is skipped.\n \n ## Collecting the Output\n \n-The output of a multi-instance activity (e.g. the result of a calculation) can be collected from the instances by defining the `outputCollection` **and** the `outputElement` variable. \n+The output of a multi-instance activity (e.g. the result of a calculation) can be collected from the instances by defining the `outputCollection` **and** the `outputElement` expression.\n \n `outputCollection` defines the name of the variable under which the collected output is stored (e.g. `results`). It is created as local variable of the multi-instance body and gets updated when an instance is completed. When the multi-instance body is completed, the variable is propagated to its parent scope.\n \n-`outputElement` defines the variable the output of the instance is collected from (e.g. `result`). It is created as local variable of the instance and should be updated with the output. When the instance is completed, the variable is inserted into the `outputCollection` at the same index as the `inputElement` of the `inputCollection`. So, the order of the `outputCollection` is determined and matches to the `inputCollection`, even for parallel multi-instance activities. If the `outputElement` variable is not updated then `null` is inserted instead.\n+`outputElement` is an expression that defines the output of the instance (e.g. `= result`). Usually, it [access a variable](/reference/expressions.html#access-variables) of the instance that holds the output value. If the expression only access a variable or a nested property then it is created as **local variable** of the instance. This variable should be updated with the output value, for example, by a job worker providing a variable with the name `result`. Since the variable is defined as local variable, it is not propagated to its parent scope and is only visible within the instance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjY1MzQ3OnYy", "diffSide": "RIGHT", "path": "docs/src/bpmn-workflows/multi-instance/multi-instance.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowMDoxMlrOGCwqKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDowMDoxMlrOGCwqKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0NzU2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the `inputCollection` is empty then an empty array is propagated as `outputCollection`.\n          \n          \n            \n            If the `inputCollection` value is empty then an empty array is propagated as `outputCollection`.", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405547561", "createdAt": "2020-04-08T14:00:12Z", "author": {"login": "korthout"}, "path": "docs/src/bpmn-workflows/multi-instance/multi-instance.md", "diffHunk": "@@ -21,33 +21,35 @@ A multi-instance activity is executed either sequentially or in parallel (defaul\n \n In case of a **sequential** multi-instance activity, the instances are executed one-by-one. When one instance is completed then a new instance is created for the next element in the `inputCollection`.\n \n-![sequential multi-instance](/bpmn-workflows/multi-instance/multi-instance-sequential.png) \n- \n-In case of a **parallel** multi-instance activity, all instances are created when the multi-instance body is activated. The instances are executed concurrently and independently from each other.    \n+![sequential multi-instance](/bpmn-workflows/multi-instance/multi-instance-sequential.png)\n \n-![parallel multi-instance](/bpmn-workflows/multi-instance/multi-instance-parallel.png) \n+In case of a **parallel** multi-instance activity, all instances are created when the multi-instance body is activated. The instances are executed concurrently and independently from each other.\n+\n+![parallel multi-instance](/bpmn-workflows/multi-instance/multi-instance-parallel.png)\n \n ## Defining the Collection to Iterate over\n \n-A multi-instance activity **must** define the `inputCollection` variable to iterate over (e.g. `items`). The variable is read from the workflow instance on activating the multi-instance body. It must be an `array` of any type (e.g. `[\"item-1\", \"item-2\"]`). \n+A multi-instance activity **must** have an `inputCollection` expression that defines the collection to iterate over (e.g. `= items`). Usually, it [access a variable](/reference/expressions.html#access-variables) of the workflow instance that holds the collection. The expression is evaluated on activating the multi-instance body. It must result in an `array` of any type (e.g. `[\"item-1\", \"item-2\"]`).\n \n In order to access the current element of the `inputCollection` within the instance, the multi-instance activity can define the `inputElement` variable (e.g. `item`). The element is stored as a local variable of the instance under the given name.\n \n-If the `inputCollection` is empty then the multi-instance body is completed immediately and no instances are created. It behaves like the activity is skipped. \n+If the `inputCollection` value is **empty** then the multi-instance body is completed immediately and no instances are created. It behaves like the activity is skipped.\n \n ## Collecting the Output\n \n-The output of a multi-instance activity (e.g. the result of a calculation) can be collected from the instances by defining the `outputCollection` **and** the `outputElement` variable. \n+The output of a multi-instance activity (e.g. the result of a calculation) can be collected from the instances by defining the `outputCollection` **and** the `outputElement` expression.\n \n `outputCollection` defines the name of the variable under which the collected output is stored (e.g. `results`). It is created as local variable of the multi-instance body and gets updated when an instance is completed. When the multi-instance body is completed, the variable is propagated to its parent scope.\n \n-`outputElement` defines the variable the output of the instance is collected from (e.g. `result`). It is created as local variable of the instance and should be updated with the output. When the instance is completed, the variable is inserted into the `outputCollection` at the same index as the `inputElement` of the `inputCollection`. So, the order of the `outputCollection` is determined and matches to the `inputCollection`, even for parallel multi-instance activities. If the `outputElement` variable is not updated then `null` is inserted instead.\n+`outputElement` is an expression that defines the output of the instance (e.g. `= result`). Usually, it [access a variable](/reference/expressions.html#access-variables) of the instance that holds the output value. If the expression only access a variable or a nested property then it is created as **local variable** of the instance. This variable should be updated with the output value, for example, by a job worker providing a variable with the name `result`. Since the variable is defined as local variable, it is not propagated to its parent scope and is only visible within the instance.\n+\n+When the instance is completed, the `outputElement` expression is evaluated and the result is inserted into the `outputCollection` at the same index as the `inputElement` of the `inputCollection`. So, the order of the `outputCollection` is determined and matches to the `inputCollection`, even for parallel multi-instance activities. If the `outputElement` variable is not updated then `null` is inserted instead.\n \n If the `inputCollection` is empty then an empty array is propagated as `outputCollection`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjcwMTM1OnYy", "diffSide": "RIGHT", "path": "docs/src/bpmn-workflows/receive-tasks/receive-tasks.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxMDo1MlrOGCxH7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxMDo1MlrOGCxH7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1NTE4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `correlationKey` is an expression that usually [access a variable](/reference/expressions.html#access-variables) of the workflow instance that holds the correlation key of the message. The expression is evaluated on activating the receive task and must result either in a `string` or in a `number`.\n          \n          \n            \n            The `correlationKey` is an expression that usually [accesses a variable](/reference/expressions.html#access-variables) of the workflow instance that holds the correlation key of the message. The expression is evaluated on activating the receive task and must result either in a `string` or in a `number`.", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405555181", "createdAt": "2020-04-08T14:10:52Z", "author": {"login": "korthout"}, "path": "docs/src/bpmn-workflows/receive-tasks/receive-tasks.md", "diffHunk": "@@ -5,18 +5,18 @@ Receive tasks are tasks which references a message. They are used to wait until\n ![Receive Tasks](/bpmn-workflows/receive-tasks/receive-tasks.png)\n \n When a receive task is entered then a corresponding message subscription is created. The workflow instance stops at this point and waits until the message is correlated.\n- \n-A message can published using one of the Zeebe clients. When the message is correlated, the receive task gets completed and the workflow instance continues. \n+\n+A message can published using one of the Zeebe clients. When the message is correlated, the receive task gets completed and the workflow instance continues.\n \n > An alternative to receive tasks are [message intermediate catch events](/bpmn-workflows/message-events/message-events.html) which behaves the same but can be used together with event-based gateways.\n \n ## Messages\n \n-A message can be referenced by one or more receive tasks. It **must** define the name of the message (e.g. `Money collected`) and the `correlationKey` variable (e.g. `orderId`).\n+A message can be referenced by one or more receive events. It **must** define the name of the message (e.g. `Money collected`) and the `correlationKey` expression (e.g. `= orderId`).\n \n-The `correlationKey` variable must reference a variable of the workflow instance that holds the correlation key of the message. It is read from the workflow instance on activating the receive task and must be either a `string` or a `number`.\n+The `correlationKey` is an expression that usually [access a variable](/reference/expressions.html#access-variables) of the workflow instance that holds the correlation key of the message. The expression is evaluated on activating the receive task and must result either in a `string` or in a `number`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjcwMzY2OnYy", "diffSide": "RIGHT", "path": "docs/src/bpmn-workflows/receive-tasks/receive-tasks.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxMToyOFrOGCxJcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxMToyOFrOGCxJcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1NTU3MA==", "bodyText": "You've changed the name here to receive events, but the rest of this document refers to them as receive tasks.", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405555570", "createdAt": "2020-04-08T14:11:28Z", "author": {"login": "korthout"}, "path": "docs/src/bpmn-workflows/receive-tasks/receive-tasks.md", "diffHunk": "@@ -5,18 +5,18 @@ Receive tasks are tasks which references a message. They are used to wait until\n ![Receive Tasks](/bpmn-workflows/receive-tasks/receive-tasks.png)\n \n When a receive task is entered then a corresponding message subscription is created. The workflow instance stops at this point and waits until the message is correlated.\n- \n-A message can published using one of the Zeebe clients. When the message is correlated, the receive task gets completed and the workflow instance continues. \n+\n+A message can published using one of the Zeebe clients. When the message is correlated, the receive task gets completed and the workflow instance continues.\n \n > An alternative to receive tasks are [message intermediate catch events](/bpmn-workflows/message-events/message-events.html) which behaves the same but can be used together with event-based gateways.\n \n ## Messages\n \n-A message can be referenced by one or more receive tasks. It **must** define the name of the message (e.g. `Money collected`) and the `correlationKey` variable (e.g. `orderId`).\n+A message can be referenced by one or more receive events. It **must** define the name of the message (e.g. `Money collected`) and the `correlationKey` expression (e.g. `= orderId`).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjcxNDcxOnYy", "diffSide": "RIGHT", "path": "docs/src/bpmn-workflows/receive-tasks/receive-tasks.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxMzo0OFrOGCxQYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoxMzo0OFrOGCxQYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU1NzM0NQ==", "bodyText": "Also please add the expressions.html page to the references of this page", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405557345", "createdAt": "2020-04-08T14:13:48Z", "author": {"login": "korthout"}, "path": "docs/src/bpmn-workflows/receive-tasks/receive-tasks.md", "diffHunk": "@@ -5,18 +5,18 @@ Receive tasks are tasks which references a message. They are used to wait until\n ![Receive Tasks](/bpmn-workflows/receive-tasks/receive-tasks.png)\n \n When a receive task is entered then a corresponding message subscription is created. The workflow instance stops at this point and waits until the message is correlated.\n- \n-A message can published using one of the Zeebe clients. When the message is correlated, the receive task gets completed and the workflow instance continues. \n+\n+A message can published using one of the Zeebe clients. When the message is correlated, the receive task gets completed and the workflow instance continues.\n \n > An alternative to receive tasks are [message intermediate catch events](/bpmn-workflows/message-events/message-events.html) which behaves the same but can be used together with event-based gateways.\n \n ## Messages\n \n-A message can be referenced by one or more receive tasks. It **must** define the name of the message (e.g. `Money collected`) and the `correlationKey` variable (e.g. `orderId`).\n+A message can be referenced by one or more receive events. It **must** define the name of the message (e.g. `Money collected`) and the `correlationKey` expression (e.g. `= orderId`).\n \n-The `correlationKey` variable must reference a variable of the workflow instance that holds the correlation key of the message. It is read from the workflow instance on activating the receive task and must be either a `string` or a `number`.\n+The `correlationKey` is an expression that usually [access a variable](/reference/expressions.html#access-variables) of the workflow instance that holds the correlation key of the message. The expression is evaluated on activating the receive task and must result either in a `string` or in a `number`.\n \n-In order to correlate a message to the receive task, the message is published with the defined name (e.g. `Money collected`) and the **value** of the `correlationKey` variable. For example, if the workflow instance has a variable `orderId` with value `\"order-123\"` then the message must be published with the correlation key `\"order-123\"`.\n+In order to correlate a message to the receive task, the message is published with the defined name (e.g. `Money collected`) and the **value** of the `correlationKey` expression. For example, if the workflow instance has a variable `orderId` with value `\"order-123\"` then the message must be published with the correlation key `\"order-123\"`.\n \n ## Variable Mappings", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjc1MzEwOnYy", "diffSide": "RIGHT", "path": "docs/src/bpmn-workflows/timer-events/timer-events.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoyMjoxN1rOGCxouA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDo0ODowMFrOGDJdpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2MzU3Ng==", "bodyText": "This timers paragraphs is not necessarily only for timer catch events. I think we should also mention when a timer start event expression is evaluated.", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405563576", "createdAt": "2020-04-08T14:22:17Z", "author": {"login": "korthout"}, "path": "docs/src/bpmn-workflows/timer-events/timer-events.md", "diffHunk": "@@ -22,23 +22,30 @@ When an intermediate timer catch event is entered then a corresponding timer is\n \n An interrupting timer boundary event must have a **time duration** definition. When the corresponding timer is triggered then the activity gets terminated. Interrupting timer boundary events is often used to model timeouts, for example, canceling the processing after 5 minutes and do something else.\n \n-An non-interrupting timer boundary event must have either a **time duration or time cycle** definition. When the activity is entered then it schedules a corresponding timer. If the timer is triggered and it is defined as time cycle with repetitions > 0 then it schedules the timer again until the defined number of repetitions is reached. Non-interrupting timer boundary events is often used to model notifications, for example, contacting the support if the processing takes longer than one hour. \n+An non-interrupting timer boundary event must have either a **time duration or time cycle** definition. When the activity is entered then it schedules a corresponding timer. If the timer is triggered and it is defined as time cycle with repetitions > 0 then it schedules the timer again until the defined number of repetitions is reached. Non-interrupting timer boundary events is often used to model notifications, for example, contacting the support if the processing takes longer than one hour.\n \n ## Timers\n \n-Timers must be defined by providing either a date, a duration, or a cycle. \n+Timers must be defined by providing either a date, a duration, or a cycle.\n+\n+A timer can be defined either as a static value (e.g. `PT3D`) or as an [expression](/reference/expressions.html). There are two common ways for using an expression:\n+\n+* [access a variable](/reference/expressions.html#access-variables) (e.g. `= remainingTime`)\n+* [using temporal values](/reference/expressions.html#temporal-expressions) (e.g. `= date and time(expirationDate) - date and time(creationDate)`)\n+\n+The expression is evaluated on activating the timer catch event. It must result either in a `string` that has the same ISO 8601 format as the static value or an equivalent temporal value (i.e. a date-time, a duration, or a cycle).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk1Mzk1OQ==", "bodyText": "Good point.", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405953959", "createdAt": "2020-04-09T04:48:00Z", "author": {"login": "saig0"}, "path": "docs/src/bpmn-workflows/timer-events/timer-events.md", "diffHunk": "@@ -22,23 +22,30 @@ When an intermediate timer catch event is entered then a corresponding timer is\n \n An interrupting timer boundary event must have a **time duration** definition. When the corresponding timer is triggered then the activity gets terminated. Interrupting timer boundary events is often used to model timeouts, for example, canceling the processing after 5 minutes and do something else.\n \n-An non-interrupting timer boundary event must have either a **time duration or time cycle** definition. When the activity is entered then it schedules a corresponding timer. If the timer is triggered and it is defined as time cycle with repetitions > 0 then it schedules the timer again until the defined number of repetitions is reached. Non-interrupting timer boundary events is often used to model notifications, for example, contacting the support if the processing takes longer than one hour. \n+An non-interrupting timer boundary event must have either a **time duration or time cycle** definition. When the activity is entered then it schedules a corresponding timer. If the timer is triggered and it is defined as time cycle with repetitions > 0 then it schedules the timer again until the defined number of repetitions is reached. Non-interrupting timer boundary events is often used to model notifications, for example, contacting the support if the processing takes longer than one hour.\n \n ## Timers\n \n-Timers must be defined by providing either a date, a duration, or a cycle. \n+Timers must be defined by providing either a date, a duration, or a cycle.\n+\n+A timer can be defined either as a static value (e.g. `PT3D`) or as an [expression](/reference/expressions.html). There are two common ways for using an expression:\n+\n+* [access a variable](/reference/expressions.html#access-variables) (e.g. `= remainingTime`)\n+* [using temporal values](/reference/expressions.html#temporal-expressions) (e.g. `= date and time(expirationDate) - date and time(creationDate)`)\n+\n+The expression is evaluated on activating the timer catch event. It must result either in a `string` that has the same ISO 8601 format as the static value or an equivalent temporal value (i.e. a date-time, a duration, or a cycle).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2MzU3Ng=="}, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjc3NjQzOnYy", "diffSide": "RIGHT", "path": "docs/src/reference/variables.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoyNzoyNVrOGCx3Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDoyNzoyNVrOGCx3Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU2NzMxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `source` expression defines the **value** of the mapping. Usually, it [access a variable](/reference/expressions.html#access-variables) of the workflow instance that holds the value. If the variable or the nested property doesn't exist then an [incident](/reference/incidents.html) is created.\n          \n          \n            \n            The `source` expression defines the **value** of the mapping. Usually, it [accesses a variable](/reference/expressions.html#access-variables) of the workflow instance that holds the value. If the variable or the nested property doesn't exist then an [incident](/reference/incidents.html) is created.", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405567310", "createdAt": "2020-04-08T14:27:25Z", "author": {"login": "korthout"}, "path": "docs/src/reference/variables.md", "diffHunk": "@@ -98,35 +57,45 @@ In order to deactivate the variable propagation, the variables are set as *local\n \n Input/output variable mappings can be used to create new variables or customize how variables are merged into the workflow instance.\n \n-Variable mappings are defined in the workflow as extension elements under `ioMapping`. Every variable mapping has a `source` and a `target` expression. The *source* expression defines where the value is copied from. The *target* expression defines where the value is copied to. The expressions reference a variable by its name or a nested property of a variable.\n+Variable mappings are defined in the workflow as extension elements under `ioMapping`. Every variable mapping has a `source` and a `target` expression.\n \n-If a variable or a nested property of a *target* expression doesn't exist then it is created. But if a variable or a nested property of a *source* expression doesn't exist then an [incident](/reference/incidents.html) is created.\n+The `source` expression defines the **value** of the mapping. Usually, it [access a variable](/reference/expressions.html#access-variables) of the workflow instance that holds the value. If the variable or the nested property doesn't exist then an [incident](/reference/incidents.html) is created.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjc5NjEzOnYy", "diffSide": "RIGHT", "path": "docs/src/reference/expressions.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDozMTo0MFrOGCyDaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDozMTo0MFrOGCyDaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU3MDQwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The value is identified as an expression if it starts with an **equal sign** `=` (i.e. the expression prefix). The text behind the equal sign is the actual expression. For example, `= remaingTime` defines the expression `remaingTime` that access a variable with the name `remaingTime`.\n          \n          \n            \n            The value is identified as an expression if it starts with an **equal sign** `=` (i.e. the expression prefix). The text behind the equal sign is the actual expression. For example, `= remaingTime` defines the expression `remaingTime` that accesses a variable with the name `remaingTime`.", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405570409", "createdAt": "2020-04-08T14:31:40Z", "author": {"login": "korthout"}, "path": "docs/src/reference/expressions.md", "diffHunk": "@@ -0,0 +1,299 @@\n+# Expressions\n+\n+Expressions can be used to access variables and calculate values dynamically.\n+\n+The following attributes of BPMN elements **require** an expression:\n+* Sequence Flow on an Exclusive Gateway: [condition](/bpmn-workflows/exclusive-gateways/exclusive-gateways.html#conditions)\n+* Message Catch Event / Receive Task: [correlation key](/bpmn-workflows/message-events/message-events.html#messages)\n+* Multi-Instance Activity: [input collection](/bpmn-workflows/multi-instance/multi-instance.html#defining-the-collection-to-iterate-over), [output element](/bpmn-workflows/multi-instance/multi-instance.html#collecting-the-output)\n+* Input/Output Variable Mappings: [source](/reference/variables.html#inputoutput-variable-mappings)\n+\n+Additionally, the following attributes of BPMN elements can define an expression **optionally** instead of a static value:\n+* Timer Catch Event: [timer definition](/bpmn-workflows/timer-events/timer-events.html#timers)\n+* Service Task: [job type](/bpmn-workflows/service-tasks/service-tasks.html#task-definition), [job retries](/bpmn-workflows/service-tasks/service-tasks.html#task-definition)\n+* Call Activity: [process id](/bpmn-workflows/call-activities/call-activities.html#defining-the-called-workflow)\n+\n+## Expressions vs. Static Values\n+\n+Some attributes of BPMN elements, like the timer definition of a timer catch event, can be defined either as a static value (e.g. `PT2H`) or as an expression (e.g. `= remaingTime`).\n+\n+The value is identified as an expression if it starts with an **equal sign** `=` (i.e. the expression prefix). The text behind the equal sign is the actual expression. For example, `= remaingTime` defines the expression `remaingTime` that access a variable with the name `remaingTime`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjgwMjEwOnYy", "diffSide": "RIGHT", "path": "docs/src/reference/expressions.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDozMjo1N1rOGCyHFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNToyNDoxNVrOGDKBBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU3MTM1MQ==", "bodyText": "Can we refer here to an external link of the DMN and FEEL spec?", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405571351", "createdAt": "2020-04-08T14:32:57Z", "author": {"login": "korthout"}, "path": "docs/src/reference/expressions.md", "diffHunk": "@@ -0,0 +1,299 @@\n+# Expressions\n+\n+Expressions can be used to access variables and calculate values dynamically.\n+\n+The following attributes of BPMN elements **require** an expression:\n+* Sequence Flow on an Exclusive Gateway: [condition](/bpmn-workflows/exclusive-gateways/exclusive-gateways.html#conditions)\n+* Message Catch Event / Receive Task: [correlation key](/bpmn-workflows/message-events/message-events.html#messages)\n+* Multi-Instance Activity: [input collection](/bpmn-workflows/multi-instance/multi-instance.html#defining-the-collection-to-iterate-over), [output element](/bpmn-workflows/multi-instance/multi-instance.html#collecting-the-output)\n+* Input/Output Variable Mappings: [source](/reference/variables.html#inputoutput-variable-mappings)\n+\n+Additionally, the following attributes of BPMN elements can define an expression **optionally** instead of a static value:\n+* Timer Catch Event: [timer definition](/bpmn-workflows/timer-events/timer-events.html#timers)\n+* Service Task: [job type](/bpmn-workflows/service-tasks/service-tasks.html#task-definition), [job retries](/bpmn-workflows/service-tasks/service-tasks.html#task-definition)\n+* Call Activity: [process id](/bpmn-workflows/call-activities/call-activities.html#defining-the-called-workflow)\n+\n+## Expressions vs. Static Values\n+\n+Some attributes of BPMN elements, like the timer definition of a timer catch event, can be defined either as a static value (e.g. `PT2H`) or as an expression (e.g. `= remaingTime`).\n+\n+The value is identified as an expression if it starts with an **equal sign** `=` (i.e. the expression prefix). The text behind the equal sign is the actual expression. For example, `= remaingTime` defines the expression `remaingTime` that access a variable with the name `remaingTime`.\n+\n+If the value doesn't have the prefix then it is used as static value. A static value is used either as a string (e.g. job type) or as a number (e.g. job retries). A string value must not be enclosed in quotes.\n+\n+Note that an expression can also define a static value by using literals (e.g. `\"foo\"`, `21`, `true`, `[1,2,3]`, `{x: 22}`, etc.).\n+\n+## The Expression Language\n+\n+An expression is written in **FEEL** (Friendly Enough Expression Language). FEEL is part of the OMG's DMN (Decision Model and Notation) specification. It is designed to have the following properties:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk2MzAxMg==", "bodyText": "There is a reference to the DMN spec on the bottom. It links to the PDF.", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405963012", "createdAt": "2020-04-09T05:24:15Z", "author": {"login": "saig0"}, "path": "docs/src/reference/expressions.md", "diffHunk": "@@ -0,0 +1,299 @@\n+# Expressions\n+\n+Expressions can be used to access variables and calculate values dynamically.\n+\n+The following attributes of BPMN elements **require** an expression:\n+* Sequence Flow on an Exclusive Gateway: [condition](/bpmn-workflows/exclusive-gateways/exclusive-gateways.html#conditions)\n+* Message Catch Event / Receive Task: [correlation key](/bpmn-workflows/message-events/message-events.html#messages)\n+* Multi-Instance Activity: [input collection](/bpmn-workflows/multi-instance/multi-instance.html#defining-the-collection-to-iterate-over), [output element](/bpmn-workflows/multi-instance/multi-instance.html#collecting-the-output)\n+* Input/Output Variable Mappings: [source](/reference/variables.html#inputoutput-variable-mappings)\n+\n+Additionally, the following attributes of BPMN elements can define an expression **optionally** instead of a static value:\n+* Timer Catch Event: [timer definition](/bpmn-workflows/timer-events/timer-events.html#timers)\n+* Service Task: [job type](/bpmn-workflows/service-tasks/service-tasks.html#task-definition), [job retries](/bpmn-workflows/service-tasks/service-tasks.html#task-definition)\n+* Call Activity: [process id](/bpmn-workflows/call-activities/call-activities.html#defining-the-called-workflow)\n+\n+## Expressions vs. Static Values\n+\n+Some attributes of BPMN elements, like the timer definition of a timer catch event, can be defined either as a static value (e.g. `PT2H`) or as an expression (e.g. `= remaingTime`).\n+\n+The value is identified as an expression if it starts with an **equal sign** `=` (i.e. the expression prefix). The text behind the equal sign is the actual expression. For example, `= remaingTime` defines the expression `remaingTime` that access a variable with the name `remaingTime`.\n+\n+If the value doesn't have the prefix then it is used as static value. A static value is used either as a string (e.g. job type) or as a number (e.g. job retries). A string value must not be enclosed in quotes.\n+\n+Note that an expression can also define a static value by using literals (e.g. `\"foo\"`, `21`, `true`, `[1,2,3]`, `{x: 22}`, etc.).\n+\n+## The Expression Language\n+\n+An expression is written in **FEEL** (Friendly Enough Expression Language). FEEL is part of the OMG's DMN (Decision Model and Notation) specification. It is designed to have the following properties:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU3MTM1MQ=="}, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjgxOTA3OnYy", "diffSide": "RIGHT", "path": "docs/src/reference/expressions.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDozNjozMFrOGCyRkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNzoyNjo1MFrOGDMt-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU3NDAzMw==", "bodyText": "Do we have a way to check that these external links are still working? They might break without us knowing.", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405574033", "createdAt": "2020-04-08T14:36:30Z", "author": {"login": "korthout"}, "path": "docs/src/reference/expressions.md", "diffHunk": "@@ -0,0 +1,299 @@\n+# Expressions\n+\n+Expressions can be used to access variables and calculate values dynamically.\n+\n+The following attributes of BPMN elements **require** an expression:\n+* Sequence Flow on an Exclusive Gateway: [condition](/bpmn-workflows/exclusive-gateways/exclusive-gateways.html#conditions)\n+* Message Catch Event / Receive Task: [correlation key](/bpmn-workflows/message-events/message-events.html#messages)\n+* Multi-Instance Activity: [input collection](/bpmn-workflows/multi-instance/multi-instance.html#defining-the-collection-to-iterate-over), [output element](/bpmn-workflows/multi-instance/multi-instance.html#collecting-the-output)\n+* Input/Output Variable Mappings: [source](/reference/variables.html#inputoutput-variable-mappings)\n+\n+Additionally, the following attributes of BPMN elements can define an expression **optionally** instead of a static value:\n+* Timer Catch Event: [timer definition](/bpmn-workflows/timer-events/timer-events.html#timers)\n+* Service Task: [job type](/bpmn-workflows/service-tasks/service-tasks.html#task-definition), [job retries](/bpmn-workflows/service-tasks/service-tasks.html#task-definition)\n+* Call Activity: [process id](/bpmn-workflows/call-activities/call-activities.html#defining-the-called-workflow)\n+\n+## Expressions vs. Static Values\n+\n+Some attributes of BPMN elements, like the timer definition of a timer catch event, can be defined either as a static value (e.g. `PT2H`) or as an expression (e.g. `= remaingTime`).\n+\n+The value is identified as an expression if it starts with an **equal sign** `=` (i.e. the expression prefix). The text behind the equal sign is the actual expression. For example, `= remaingTime` defines the expression `remaingTime` that access a variable with the name `remaingTime`.\n+\n+If the value doesn't have the prefix then it is used as static value. A static value is used either as a string (e.g. job type) or as a number (e.g. job retries). A string value must not be enclosed in quotes.\n+\n+Note that an expression can also define a static value by using literals (e.g. `\"foo\"`, `21`, `true`, `[1,2,3]`, `{x: 22}`, etc.).\n+\n+## The Expression Language\n+\n+An expression is written in **FEEL** (Friendly Enough Expression Language). FEEL is part of the OMG's DMN (Decision Model and Notation) specification. It is designed to have the following properties:\n+\n+* Side-effect free\n+* Simple data model with JSON-like object types: numbers, dates, strings, lists, and contexts\n+* Simple syntax designed for business professionals and developers\n+* Three-valued logic (true, false, null)\n+\n+Zeebe integrates the [Feel-Scala](https://github.com/camunda/feel-scala) engine to evaluate FEEL expressions. The following sections cover common use cases in Zeebe. A complete list of supported expressions can be found in the project's [documentation](https://camunda.github.io/feel-scala).\n+\n+### Access Variables\n+\n+A variable can be accessed by its name.\n+\n+```feel\n+owner\n+// \"Paul\"\n+\n+totalPrice\n+// 21.2\n+\n+items\n+// [\"item-1\", \"item-2\", \"item-3\"]\n+```\n+\n+If a variable is a JSON document/object then it is handled as a FEEL context. A property of the context (aka nested variable property) can be accessed by `.` (a dot) and the property name.\n+\n+```feel\n+order.id\n+// \"order-123\"\n+\n+order.customer.name\n+// \"Paul\"\n+```\n+\n+### Boolean Expressions\n+\n+Values can be compared using the following operators:\n+\n+<table style=\"width:100%\">\n+  <tr>\n+    <th>Operator</th>\n+    <th>Description</th>\n+    <th>Example</th>\n+  </tr>\n+\n+  <tr>\n+    <td>= (only <b>one</b> equal sign)</td>\n+    <td>equal to</td>\n+    <td>owner = \"Paul\"</td>\n+  </tr>\n+\n+  <tr>\n+    <td>!=</td>\n+    <td>not equal to</td>\n+    <td>owner != \"Paul\"</td>\n+  </tr>\n+\n+  <tr>\n+    <td>&#60;</td>\n+    <td>less than</td>\n+    <td>totalPrice &#60; 25</td>\n+  </tr>\n+\n+  <tr>\n+    <td>&#60;=</td>\n+    <td>less than or equal to</td>\n+    <td>totalPrice &#60;= 25</td>\n+  </tr>\n+\n+  <tr>\n+    <td>&#62;</td>\n+    <td>greater than</td>\n+    <td>totalPrice &#62; 25</td>\n+  </tr>\n+\n+  <tr>\n+    <td>&#62;=</td>\n+    <td>greater than or equal to</td>\n+    <td>totalPrice &#62;= 25</td>\n+  </tr>\n+\n+   <tr>\n+    <td>between _ and _</td>\n+    <td>same as <i>(x &#62;= _ and x &#60;= _)</i></td>\n+    <td>totalPrice between 10 and 25</td>\n+   </tr>\n+\n+</table>\n+\n+Multiple boolean values can be combined as disjunction (`and`) or conjunction (`or`).\n+\n+```feel\n+orderCount >= 5 and orderCount < 15\n+\n+orderCount > 15 or totalPrice > 50\n+```\n+\n+If a variable or a nested property can be `null` then it can be compared to the `null` value. Comparing `null` to a value different from `null` results in `false`.\n+\n+```feel\n+order = null\n+// true if order is null\n+\n+totalCount > 5\n+// false is totalCount is null\n+```\n+\n+### String Expressions\n+\n+A string value must be enclosed in double quotes. Multiple string values can be concatenated using the `+` operator.\n+\n+```feel\n+\"foo\" + \"bar\"\n+// \"foobar\"\n+```\n+\n+Any value can be transformed into a string value using the `string()` function.\n+\n+```feel\n+\"order-\" + string(orderId)\n+// \"order-123\"\n+```\n+\n+More functions for string values are available as [built-in functions](https://camunda.github.io/feel-scala/feel-built-in-functions#string-functions) (e.g. contains, matches, etc.).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk2MzI0NA==", "bodyText": "Yes. The links are checks in the CI build process.", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405963244", "createdAt": "2020-04-09T05:25:14Z", "author": {"login": "saig0"}, "path": "docs/src/reference/expressions.md", "diffHunk": "@@ -0,0 +1,299 @@\n+# Expressions\n+\n+Expressions can be used to access variables and calculate values dynamically.\n+\n+The following attributes of BPMN elements **require** an expression:\n+* Sequence Flow on an Exclusive Gateway: [condition](/bpmn-workflows/exclusive-gateways/exclusive-gateways.html#conditions)\n+* Message Catch Event / Receive Task: [correlation key](/bpmn-workflows/message-events/message-events.html#messages)\n+* Multi-Instance Activity: [input collection](/bpmn-workflows/multi-instance/multi-instance.html#defining-the-collection-to-iterate-over), [output element](/bpmn-workflows/multi-instance/multi-instance.html#collecting-the-output)\n+* Input/Output Variable Mappings: [source](/reference/variables.html#inputoutput-variable-mappings)\n+\n+Additionally, the following attributes of BPMN elements can define an expression **optionally** instead of a static value:\n+* Timer Catch Event: [timer definition](/bpmn-workflows/timer-events/timer-events.html#timers)\n+* Service Task: [job type](/bpmn-workflows/service-tasks/service-tasks.html#task-definition), [job retries](/bpmn-workflows/service-tasks/service-tasks.html#task-definition)\n+* Call Activity: [process id](/bpmn-workflows/call-activities/call-activities.html#defining-the-called-workflow)\n+\n+## Expressions vs. Static Values\n+\n+Some attributes of BPMN elements, like the timer definition of a timer catch event, can be defined either as a static value (e.g. `PT2H`) or as an expression (e.g. `= remaingTime`).\n+\n+The value is identified as an expression if it starts with an **equal sign** `=` (i.e. the expression prefix). The text behind the equal sign is the actual expression. For example, `= remaingTime` defines the expression `remaingTime` that access a variable with the name `remaingTime`.\n+\n+If the value doesn't have the prefix then it is used as static value. A static value is used either as a string (e.g. job type) or as a number (e.g. job retries). A string value must not be enclosed in quotes.\n+\n+Note that an expression can also define a static value by using literals (e.g. `\"foo\"`, `21`, `true`, `[1,2,3]`, `{x: 22}`, etc.).\n+\n+## The Expression Language\n+\n+An expression is written in **FEEL** (Friendly Enough Expression Language). FEEL is part of the OMG's DMN (Decision Model and Notation) specification. It is designed to have the following properties:\n+\n+* Side-effect free\n+* Simple data model with JSON-like object types: numbers, dates, strings, lists, and contexts\n+* Simple syntax designed for business professionals and developers\n+* Three-valued logic (true, false, null)\n+\n+Zeebe integrates the [Feel-Scala](https://github.com/camunda/feel-scala) engine to evaluate FEEL expressions. The following sections cover common use cases in Zeebe. A complete list of supported expressions can be found in the project's [documentation](https://camunda.github.io/feel-scala).\n+\n+### Access Variables\n+\n+A variable can be accessed by its name.\n+\n+```feel\n+owner\n+// \"Paul\"\n+\n+totalPrice\n+// 21.2\n+\n+items\n+// [\"item-1\", \"item-2\", \"item-3\"]\n+```\n+\n+If a variable is a JSON document/object then it is handled as a FEEL context. A property of the context (aka nested variable property) can be accessed by `.` (a dot) and the property name.\n+\n+```feel\n+order.id\n+// \"order-123\"\n+\n+order.customer.name\n+// \"Paul\"\n+```\n+\n+### Boolean Expressions\n+\n+Values can be compared using the following operators:\n+\n+<table style=\"width:100%\">\n+  <tr>\n+    <th>Operator</th>\n+    <th>Description</th>\n+    <th>Example</th>\n+  </tr>\n+\n+  <tr>\n+    <td>= (only <b>one</b> equal sign)</td>\n+    <td>equal to</td>\n+    <td>owner = \"Paul\"</td>\n+  </tr>\n+\n+  <tr>\n+    <td>!=</td>\n+    <td>not equal to</td>\n+    <td>owner != \"Paul\"</td>\n+  </tr>\n+\n+  <tr>\n+    <td>&#60;</td>\n+    <td>less than</td>\n+    <td>totalPrice &#60; 25</td>\n+  </tr>\n+\n+  <tr>\n+    <td>&#60;=</td>\n+    <td>less than or equal to</td>\n+    <td>totalPrice &#60;= 25</td>\n+  </tr>\n+\n+  <tr>\n+    <td>&#62;</td>\n+    <td>greater than</td>\n+    <td>totalPrice &#62; 25</td>\n+  </tr>\n+\n+  <tr>\n+    <td>&#62;=</td>\n+    <td>greater than or equal to</td>\n+    <td>totalPrice &#62;= 25</td>\n+  </tr>\n+\n+   <tr>\n+    <td>between _ and _</td>\n+    <td>same as <i>(x &#62;= _ and x &#60;= _)</i></td>\n+    <td>totalPrice between 10 and 25</td>\n+   </tr>\n+\n+</table>\n+\n+Multiple boolean values can be combined as disjunction (`and`) or conjunction (`or`).\n+\n+```feel\n+orderCount >= 5 and orderCount < 15\n+\n+orderCount > 15 or totalPrice > 50\n+```\n+\n+If a variable or a nested property can be `null` then it can be compared to the `null` value. Comparing `null` to a value different from `null` results in `false`.\n+\n+```feel\n+order = null\n+// true if order is null\n+\n+totalCount > 5\n+// false is totalCount is null\n+```\n+\n+### String Expressions\n+\n+A string value must be enclosed in double quotes. Multiple string values can be concatenated using the `+` operator.\n+\n+```feel\n+\"foo\" + \"bar\"\n+// \"foobar\"\n+```\n+\n+Any value can be transformed into a string value using the `string()` function.\n+\n+```feel\n+\"order-\" + string(orderId)\n+// \"order-123\"\n+```\n+\n+More functions for string values are available as [built-in functions](https://camunda.github.io/feel-scala/feel-built-in-functions#string-functions) (e.g. contains, matches, etc.).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU3NDAzMw=="}, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjAwNzI5MA==", "bodyText": "That's awesome \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r406007290", "createdAt": "2020-04-09T07:26:50Z", "author": {"login": "korthout"}, "path": "docs/src/reference/expressions.md", "diffHunk": "@@ -0,0 +1,299 @@\n+# Expressions\n+\n+Expressions can be used to access variables and calculate values dynamically.\n+\n+The following attributes of BPMN elements **require** an expression:\n+* Sequence Flow on an Exclusive Gateway: [condition](/bpmn-workflows/exclusive-gateways/exclusive-gateways.html#conditions)\n+* Message Catch Event / Receive Task: [correlation key](/bpmn-workflows/message-events/message-events.html#messages)\n+* Multi-Instance Activity: [input collection](/bpmn-workflows/multi-instance/multi-instance.html#defining-the-collection-to-iterate-over), [output element](/bpmn-workflows/multi-instance/multi-instance.html#collecting-the-output)\n+* Input/Output Variable Mappings: [source](/reference/variables.html#inputoutput-variable-mappings)\n+\n+Additionally, the following attributes of BPMN elements can define an expression **optionally** instead of a static value:\n+* Timer Catch Event: [timer definition](/bpmn-workflows/timer-events/timer-events.html#timers)\n+* Service Task: [job type](/bpmn-workflows/service-tasks/service-tasks.html#task-definition), [job retries](/bpmn-workflows/service-tasks/service-tasks.html#task-definition)\n+* Call Activity: [process id](/bpmn-workflows/call-activities/call-activities.html#defining-the-called-workflow)\n+\n+## Expressions vs. Static Values\n+\n+Some attributes of BPMN elements, like the timer definition of a timer catch event, can be defined either as a static value (e.g. `PT2H`) or as an expression (e.g. `= remaingTime`).\n+\n+The value is identified as an expression if it starts with an **equal sign** `=` (i.e. the expression prefix). The text behind the equal sign is the actual expression. For example, `= remaingTime` defines the expression `remaingTime` that access a variable with the name `remaingTime`.\n+\n+If the value doesn't have the prefix then it is used as static value. A static value is used either as a string (e.g. job type) or as a number (e.g. job retries). A string value must not be enclosed in quotes.\n+\n+Note that an expression can also define a static value by using literals (e.g. `\"foo\"`, `21`, `true`, `[1,2,3]`, `{x: 22}`, etc.).\n+\n+## The Expression Language\n+\n+An expression is written in **FEEL** (Friendly Enough Expression Language). FEEL is part of the OMG's DMN (Decision Model and Notation) specification. It is designed to have the following properties:\n+\n+* Side-effect free\n+* Simple data model with JSON-like object types: numbers, dates, strings, lists, and contexts\n+* Simple syntax designed for business professionals and developers\n+* Three-valued logic (true, false, null)\n+\n+Zeebe integrates the [Feel-Scala](https://github.com/camunda/feel-scala) engine to evaluate FEEL expressions. The following sections cover common use cases in Zeebe. A complete list of supported expressions can be found in the project's [documentation](https://camunda.github.io/feel-scala).\n+\n+### Access Variables\n+\n+A variable can be accessed by its name.\n+\n+```feel\n+owner\n+// \"Paul\"\n+\n+totalPrice\n+// 21.2\n+\n+items\n+// [\"item-1\", \"item-2\", \"item-3\"]\n+```\n+\n+If a variable is a JSON document/object then it is handled as a FEEL context. A property of the context (aka nested variable property) can be accessed by `.` (a dot) and the property name.\n+\n+```feel\n+order.id\n+// \"order-123\"\n+\n+order.customer.name\n+// \"Paul\"\n+```\n+\n+### Boolean Expressions\n+\n+Values can be compared using the following operators:\n+\n+<table style=\"width:100%\">\n+  <tr>\n+    <th>Operator</th>\n+    <th>Description</th>\n+    <th>Example</th>\n+  </tr>\n+\n+  <tr>\n+    <td>= (only <b>one</b> equal sign)</td>\n+    <td>equal to</td>\n+    <td>owner = \"Paul\"</td>\n+  </tr>\n+\n+  <tr>\n+    <td>!=</td>\n+    <td>not equal to</td>\n+    <td>owner != \"Paul\"</td>\n+  </tr>\n+\n+  <tr>\n+    <td>&#60;</td>\n+    <td>less than</td>\n+    <td>totalPrice &#60; 25</td>\n+  </tr>\n+\n+  <tr>\n+    <td>&#60;=</td>\n+    <td>less than or equal to</td>\n+    <td>totalPrice &#60;= 25</td>\n+  </tr>\n+\n+  <tr>\n+    <td>&#62;</td>\n+    <td>greater than</td>\n+    <td>totalPrice &#62; 25</td>\n+  </tr>\n+\n+  <tr>\n+    <td>&#62;=</td>\n+    <td>greater than or equal to</td>\n+    <td>totalPrice &#62;= 25</td>\n+  </tr>\n+\n+   <tr>\n+    <td>between _ and _</td>\n+    <td>same as <i>(x &#62;= _ and x &#60;= _)</i></td>\n+    <td>totalPrice between 10 and 25</td>\n+   </tr>\n+\n+</table>\n+\n+Multiple boolean values can be combined as disjunction (`and`) or conjunction (`or`).\n+\n+```feel\n+orderCount >= 5 and orderCount < 15\n+\n+orderCount > 15 or totalPrice > 50\n+```\n+\n+If a variable or a nested property can be `null` then it can be compared to the `null` value. Comparing `null` to a value different from `null` results in `false`.\n+\n+```feel\n+order = null\n+// true if order is null\n+\n+totalCount > 5\n+// false is totalCount is null\n+```\n+\n+### String Expressions\n+\n+A string value must be enclosed in double quotes. Multiple string values can be concatenated using the `+` operator.\n+\n+```feel\n+\"foo\" + \"bar\"\n+// \"foobar\"\n+```\n+\n+Any value can be transformed into a string value using the `string()` function.\n+\n+```feel\n+\"order-\" + string(orderId)\n+// \"order-123\"\n+```\n+\n+More functions for string values are available as [built-in functions](https://camunda.github.io/feel-scala/feel-built-in-functions#string-functions) (e.g. contains, matches, etc.).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU3NDAzMw=="}, "originalCommit": {"oid": "32f985d6f212a4dc45da9298817e3de96d6409be"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxOTIxMjA2OnYy", "diffSide": "RIGHT", "path": "docs/src/bpmn-workflows/exclusive-gateways/exclusive-gateways.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDozMToxN1rOGDJOQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNDozMToxN1rOGDJOQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk1MDAxOQ==", "bodyText": "No \ud83d\ude05\nI added a simple syntax highlighting. Please have a look at docs/highlight.feel.js.", "url": "https://github.com/camunda-cloud/zeebe/pull/4277#discussion_r405950019", "createdAt": "2020-04-09T04:31:17Z", "author": {"login": "saig0"}, "path": "docs/src/bpmn-workflows/exclusive-gateways/exclusive-gateways.md", "diffHunk": "@@ -3,27 +3,31 @@\n An exclusive gateway (aka XOR-gateway) allows to make a decision based on data (i.e. on workflow instance variables).\n \n ![workflow](/bpmn-workflows/exclusive-gateways/exclusive-gateway.png)\n- \n+\n If an exclusive gateway has multiple outgoing sequence flows then all sequence flows, except one, **must** have a `conditionExpression` to define when the flow is taken. The gateway can have one sequence flow without `conditionExpression` which must be defined as the default flow.\n \n When an exclusive gateway is entered then the `conditionExpression`s are evaluated. The workflow instance takes the first sequence flow that condition is fulfilled.\n \n If no condition is fulfilled then it takes the **default flow** of the gateway. In case the gateway has no default flow, an incident is created.\n \n-An exclusive gateway can also be used to **join** multiple incoming flows to one, in order to improve the readability of the BPMN. A joining gateway has a pass-through semantic. It doesn't merge the incoming concurrent flows like a parallel gateway.   \n+An exclusive gateway can also be used to **join** multiple incoming flows to one, in order to improve the readability of the BPMN. A joining gateway has a pass-through semantic. It doesn't merge the incoming concurrent flows like a parallel gateway.\n \n ## Conditions\n \n-A `conditionExpression` defines when a flow is taken. The expression can access the workflow instance variables and compare them with literals or other variables. Comparisons can be combined with logical operators.\n+A `conditionExpression` defines when a flow is taken. It is a [boolean expression](/reference/expressions.html#boolean-expressions) that can access the workflow instance variables and compare them with literals or other variables. The condition is fulfilled when the expression returns `true`.\n+\n+Multiple boolean values or comparisons can be combined as disjunction (`and`) or conjunction (`or`).\n \n For example:\n \n-```js\n-totalPrice > 100\n+```feel", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c4fe3f73b7004974fa5539f3c1f154bc0cab70b"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4866, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}