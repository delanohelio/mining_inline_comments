{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4OTkwNTU1", "number": 4970, "title": "Introduces a basic rolling upgrade integration test", "bodyText": "Description\nThis PR builds on the work done in #4964 and adds a new test which simulates a rolling upgrade similar to Kubernetes' RollingUpgrade strategy. It starts a cluster of 3 nodes in the last known stable version - once these are ready, it will deploy a new process which has a single service task. It will create a new instance and stop. At this point, it will traverse the list of nodes in reverse order and shut down them gracefully one by one. Once a node is shut down, it will upgrade it, then query a different broker's embedded gateway for the topology until the topology is considered complete. To ensure correctness, when upgrading a broker, we shut it down, wait until it is removed from the other's topology, then restart it and wait for it to be added back.\n\nA complete topology here refers to a topology with the expected number of brokers, with each broker having the expected number of partitions.\n\nOnce the upgraded broker as correctly rejoined the cluster, the procedure is repeated with the next broker, until all of them are upgraded. Finally the test is considered passing if all of the above worked, and we can activate the job of the previously created process instance.\nRelated issues\ncloses #4965\nDefinition of Done\nNot all items need to be done depending on the issue and the pull request.\nCode changes:\n\n The changes are backwards compatibility with previous versions\n If it fixes a bug then PRs are created to backport the fix to the last two minor versions\n\nTesting:\n\n There are unit/integration tests that verify all acceptance criterias of the issue\n New tests are written to ensure backwards compatibility with further versions\n The behavior is tested manually\n The impact of the changes is verified by a benchmark\n\nDocumentation:\n\n The documentation is updated (e.g. BPMN reference, configuration, examples, get-started guides, etc.)\n New content is added to the release annoncement", "createdAt": "2020-07-14T16:37:19Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4970", "merged": true, "mergeCommit": {"oid": "65818c93914c8cbaf075c84b775c56b151da28de"}, "closed": true, "closedAt": "2020-07-17T07:41:01Z", "author": {"login": "npepinpe"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc05-3eAFqTQ0ODM0MTQ0NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1uZgvAFqTQ1MDQyMTAyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzQxNDQ1", "url": "https://github.com/camunda-cloud/zeebe/pull/4970#pullrequestreview-448341445", "createdAt": "2020-07-14T18:02:49Z", "commit": {"oid": "b410d6fef57a0e5d0f7843615dbd68c2d27a95fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODowMjo0OVrOGxfJxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODowMjo0OVrOGxfJxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MzgxMw==", "bodyText": "We probably also want to assert the version right?", "url": "https://github.com/camunda-cloud/zeebe/pull/4970#discussion_r454543813", "createdAt": "2020-07-14T18:02:49Z", "author": {"login": "Zelldon"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -47,47 +52,128 @@ public void setup() {\n \n     containers =\n         Arrays.asList(\n-            manageClosable(new ZeebeBrokerContainer(OLD_VERSION)),\n-            manageClosable(new ZeebeBrokerContainer(OLD_VERSION)),\n-            manageClosable(new ZeebeBrokerContainer(OLD_VERSION)));\n+            new ZeebeBrokerContainer(OLD_VERSION),\n+            new ZeebeBrokerContainer(OLD_VERSION),\n+            new ZeebeBrokerContainer(OLD_VERSION));\n \n     configureBrokerContainer(0, containers);\n     configureBrokerContainer(1, containers);\n     configureBrokerContainer(2, containers);\n   }\n \n+  @After\n+  public void tearDown() {\n+    containers.parallelStream().forEach(Startable::stop);\n+  }\n+\n   @Test\n-  public void shouldBeAbleToRestartContainerWithSameVersion() {\n+  public void shouldBeAbleToRestartContainerWithNewVersion() {\n     // given\n     final var index = 0;\n-    final var sameVersion = OLD_VERSION;\n     Startables.deepStart(containers).join();\n     containers.get(index).shutdownGracefully(Duration.ofSeconds(30));\n \n     // when\n-    final var zeebeBrokerContainer = replaceBrokerContainer(index, sameVersion);\n+    final var zeebeBrokerContainer = upgradeBroker(index);\n \n     // then\n-    zeebeBrokerContainer.start();\n+    try (final var client = newZeebeClient(containers.get(1))) {\n+      waitUntilBrokerIsRemovedFromTopology(client);\n+      zeebeBrokerContainer.start();\n+      waitUntilTopologyIsComplete(client);\n+    }\n   }\n \n   @Test\n-  public void shouldBeAbleToRestartContainerWithNewVersion() {\n+  public void shouldPerformRollingUpgrade() throws InterruptedException {\n     // given\n-    final var index = 0;\n-    final var newVersion = CURRENT_VERSION;\n+    final var process =\n+        Bpmn.createExecutableProcess(\"process\")\n+            .startEvent()\n+            .serviceTask(\"task\", s -> s.zeebeJobType(\"type\"))\n+            .endEvent()\n+            .done();\n     Startables.deepStart(containers).join();\n-    containers.get(index).shutdownGracefully(Duration.ofSeconds(30));\n \n     // when\n-    final var zeebeBrokerContainer = replaceBrokerContainer(index, newVersion);\n+    createProcessInstance(process);\n+    performRollingUpgrade();\n \n     // then\n-    zeebeBrokerContainer.start();\n+    final var latch = new CountDownLatch(1);\n+    try (final var client = newZeebeClient(containers.get(0))) {\n+      client.newWorker().jobType(\"type\").handler((jobClient, job) -> latch.countDown()).open();\n+      assertThat(latch.await(5, TimeUnit.SECONDS)).isTrue();\n+    }\n+  }\n+\n+  /**\n+   * This method will simulate a rolling upgrade in the same Kubernetes would. It traverses the list\n+   * of brokers in reverse order, and shuts them down one by one. After shutting down one node, it\n+   * will restart it with the new version, then query another broker's embedded gateway until the\n+   * topology is complete. This ensures the restarted broker has not only started but has properly\n+   * joined the cluster.\n+   */\n+  private void performRollingUpgrade() {\n+    var availableBroker = containers.get(0);\n+    for (int i = containers.size() - 1; i >= 0; i--) {\n+      try (final var client = newZeebeClient(availableBroker)) {\n+        var container = containers.get(i);\n+        container.shutdownGracefully(Duration.ofSeconds(30));\n+        waitUntilBrokerIsRemovedFromTopology(client);\n+\n+        container = upgradeBroker(i);\n+        container.start();\n+        waitUntilTopologyIsComplete(client);\n+\n+        availableBroker = container;\n+      }\n+    }\n+  }\n+\n+  private void createProcessInstance(final BpmnModelInstance process) {\n+    try (final var client = newZeebeClient(containers.get(0))) {\n+      client\n+          .newDeployCommand()\n+          .addWorkflowModel(process, \"process.bpmn\")\n+          .send()\n+          .join(5, TimeUnit.SECONDS);\n+      client\n+          .newCreateInstanceCommand()\n+          .bpmnProcessId(\"process\")\n+          .latestVersion()\n+          .variables(Map.of(\"foo\", \"bar\"))\n+          .send()\n+          .join();\n+    }\n+  }\n+\n+  private void assertTopologyIsComplete(final ZeebeClient zeebeClient, final int clusterSize) {\n+    final var topology = zeebeClient.newTopologyRequest().send().join();\n+    TopologyAssert.assertThat(topology).isComplete(clusterSize, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b410d6fef57a0e5d0f7843615dbd68c2d27a95fc"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4NjgxOTM3", "url": "https://github.com/camunda-cloud/zeebe/pull/4970#pullrequestreview-448681937", "createdAt": "2020-07-15T07:05:01Z", "commit": {"oid": "b410d6fef57a0e5d0f7843615dbd68c2d27a95fc"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NTE2NjQ3", "url": "https://github.com/camunda-cloud/zeebe/pull/4970#pullrequestreview-449516647", "createdAt": "2020-07-16T05:28:58Z", "commit": {"oid": "fd07f98ed492dbac5f75d0a49ec61a736ae62470"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNToyODo1OFrOGyapGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTo1MTo1OFrOGybDJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUxODQ4OA==", "bodyText": "It seems that the condition is inversed.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!brokers.contains(nodeId)) {\n          \n          \n            \n                  failWithMessage(\n          \n          \n            \n                      \"Expected topology not to contain broker with ID %d, but found the following: [%s]\",\n          \n          \n            \n                      nodeId, brokers);\n          \n          \n            \n                if (brokers.contains(nodeId)) {\n          \n          \n            \n                  failWithMessage(\n          \n          \n            \n                      \"Expected topology not to contain broker with ID %d, but found the following: [%s]\",\n          \n          \n            \n                      nodeId, brokers);", "url": "https://github.com/camunda-cloud/zeebe/pull/4970#discussion_r455518488", "createdAt": "2020-07-16T05:28:58Z", "author": {"login": "saig0"}, "path": "test-util/src/main/java/io/zeebe/test/util/asserts/TopologyAssert.java", "diffHunk": "@@ -45,4 +46,27 @@ public final TopologyAssert isComplete(final int clusterSize, final int partitio\n \n     return this;\n   }\n+\n+  public final TopologyAssert doesNotContainBroker(final int nodeId) {\n+    isNotNull();\n+\n+    final List<Integer> brokers =\n+        actual.getBrokers().stream().map(BrokerInfo::getNodeId).collect(Collectors.toList());\n+    if (!brokers.contains(nodeId)) {\n+      failWithMessage(\n+          \"Expected topology not to contain broker with ID %d, but found the following: [%s]\",\n+          nodeId, brokers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd07f98ed492dbac5f75d0a49ec61a736ae62470"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUyNTE1OA==", "bodyText": "Usually, we use the term workflow instance.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private WorkflowInstanceEvent createProcessInstance(final ZeebeClient client) {\n          \n          \n            \n              private WorkflowInstanceEvent createWorkflowInstance(final ZeebeClient client) {", "url": "https://github.com/camunda-cloud/zeebe/pull/4970#discussion_r455525158", "createdAt": "2020-07-16T05:51:58Z", "author": {"login": "saig0"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -78,91 +91,130 @@ public void shouldBeAbleToRestartContainerWithNewVersion() {\n \n     // then\n     try (final var client = newZeebeClient(containers.get(1))) {\n-      waitUntilBrokerIsRemovedFromTopology(client);\n+      Awaitility.await()\n+          .atMost(Duration.ofSeconds(5))\n+          .pollInterval(Duration.ofMillis(100))\n+          .untilAsserted(() -> assertTopologyDoesNotContainerBroker(client, index));\n+\n       zeebeBrokerContainer.start();\n-      waitUntilTopologyIsComplete(client);\n+\n+      Awaitility.await()\n+          .atMost(Duration.ofSeconds(5))\n+          .pollInterval(Duration.ofMillis(100))\n+          .untilAsserted(() -> assertTopologyContainsUpgradedBroker(client, index));\n     }\n   }\n \n   @Test\n-  public void shouldPerformRollingUpgrade() throws InterruptedException {\n+  public void shouldPerformRollingUpgrade() {\n     // given\n-    final var process =\n-        Bpmn.createExecutableProcess(\"process\")\n-            .startEvent()\n-            .serviceTask(\"task\", s -> s.zeebeJobType(\"type\"))\n-            .endEvent()\n-            .done();\n     Startables.deepStart(containers).join();\n \n     // when\n-    createProcessInstance(process);\n-    performRollingUpgrade();\n-\n-    // then\n-    final var latch = new CountDownLatch(1);\n-    try (final var client = newZeebeClient(containers.get(0))) {\n-      client.newWorker().jobType(\"type\").handler((jobClient, job) -> latch.countDown()).open();\n-      assertThat(latch.await(5, TimeUnit.SECONDS)).isTrue();\n+    final long firstWorkflowInstanceKey;\n+    var availableBroker = containers.get(0);\n+    try (final var client = newZeebeClient(availableBroker)) {\n+      deployProcess(client);\n+\n+      // potentially retry in case we're faster than the deployment distribution\n+      firstWorkflowInstanceKey =\n+          Awaitility.await(\"process instance creation\")\n+              .atMost(Duration.ofSeconds(5))\n+              .pollInterval(Duration.ofMillis(100))\n+              .ignoreExceptions()\n+              .until(() -> createProcessInstance(client), Objects::nonNull)\n+              .getWorkflowInstanceKey();\n     }\n-  }\n \n-  /**\n-   * This method will simulate a rolling upgrade in the same Kubernetes would. It traverses the list\n-   * of brokers in reverse order, and shuts them down one by one. After shutting down one node, it\n-   * will restart it with the new version, then query another broker's embedded gateway until the\n-   * topology is complete. This ensures the restarted broker has not only started but has properly\n-   * joined the cluster.\n-   */\n-  private void performRollingUpgrade() {\n-    var availableBroker = containers.get(0);\n     for (int i = containers.size() - 1; i >= 0; i--) {\n       try (final var client = newZeebeClient(availableBroker)) {\n+        final var brokerId = i;\n         var container = containers.get(i);\n+\n         container.shutdownGracefully(Duration.ofSeconds(30));\n-        waitUntilBrokerIsRemovedFromTopology(client);\n+        Awaitility.await(\"broker is removed from topology\")\n+            .atMost(Duration.ofSeconds(5))\n+            .pollInterval(Duration.ofMillis(100))\n+            .untilAsserted(() -> assertTopologyDoesNotContainerBroker(client, brokerId));\n \n         container = upgradeBroker(i);\n         container.start();\n-        waitUntilTopologyIsComplete(client);\n+        Awaitility.await(\"upgraded broker is added to topology\")\n+            .atMost(Duration.ofSeconds(5))\n+            .pollInterval(Duration.ofMillis(100))\n+            .untilAsserted(() -> assertTopologyContainsUpgradedBroker(client, brokerId));\n \n         availableBroker = container;\n       }\n     }\n-  }\n \n-  private void createProcessInstance(final BpmnModelInstance process) {\n-    try (final var client = newZeebeClient(containers.get(0))) {\n-      client\n-          .newDeployCommand()\n-          .addWorkflowModel(process, \"process.bpmn\")\n-          .send()\n-          .join(5, TimeUnit.SECONDS);\n-      client\n-          .newCreateInstanceCommand()\n-          .bpmnProcessId(\"process\")\n-          .latestVersion()\n-          .variables(Map.of(\"foo\", \"bar\"))\n-          .send()\n-          .join();\n+    // then\n+    final Map<Long, List<String>> activatedJobs = new HashMap<>();\n+    final var expectedOrderedJobs = List.of(\"firstTask\", \"secondTask\");\n+    final JobHandler jobHandler =\n+        (jobClient, job) -> {\n+          jobClient.newCompleteCommand(job.getKey()).send().join();\n+          activatedJobs.compute(\n+              job.getWorkflowInstanceKey(),\n+              (ignored, list) -> {\n+                final var appendedList = Optional.ofNullable(list).orElse(new ArrayList<>());\n+                appendedList.add(job.getType());\n+                return appendedList;\n+              });\n+        };\n+\n+    try (final var client = newZeebeClient(availableBroker)) {\n+      final var secondWorkflowInstanceKey = createProcessInstance(client).getWorkflowInstanceKey();\n+      final var expectedActivatedJobs =\n+          Map.of(\n+              firstWorkflowInstanceKey,\n+              expectedOrderedJobs,\n+              secondWorkflowInstanceKey,\n+              expectedOrderedJobs);\n+      client.newWorker().jobType(\"firstTask\").handler(jobHandler).open();\n+      client.newWorker().jobType(\"secondTask\").handler(jobHandler).open();\n+\n+      Awaitility.await(\"all jobs have been activated\")\n+          .atMost(Duration.ofSeconds(5))\n+          .untilAsserted(() -> assertThat(activatedJobs).isEqualTo(expectedActivatedJobs));\n     }\n   }\n \n-  private void assertTopologyIsComplete(final ZeebeClient zeebeClient, final int clusterSize) {\n-    final var topology = zeebeClient.newTopologyRequest().send().join();\n-    TopologyAssert.assertThat(topology).isComplete(clusterSize, 1);\n+  private WorkflowInstanceEvent createProcessInstance(final ZeebeClient client) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d48840a4cd47f49812d23ee4d6841d12fa6ca02"}, "originalPosition": 181}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NzYxNDUz", "url": "https://github.com/camunda-cloud/zeebe/pull/4970#pullrequestreview-449761453", "createdAt": "2020-07-16T11:32:45Z", "commit": {"oid": "b82f6bef1e623b9233a659deda7b1a611e40aa0d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc1b14e61295c24af8d90eb01163d5d3ca4c0b7a", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/cc1b14e61295c24af8d90eb01163d5d3ca4c0b7a", "committedDate": "2020-07-17T06:49:10Z", "message": "chore(upgrade-tests): add rolling upgrade tests\n\n- removes specific log segment size and snapshot period as we're not\n  testing compaction in any form; add these back if we ever do\n- lowers the maxMessageSize to lower the memory footprint used by Atomix\n  which is directly proportional to number of segments * maxMessageSize\n- document the rolling upgrade simulation and why it's done like this\n- simplify handling of closeable resources\n- assert topology is complete on single node upgrade to check that the\n  new container correctly rejoined the cluster/raft\n- removes unnecessary smoke test covered by other integration tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b82f6bef1e623b9233a659deda7b1a611e40aa0d", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/b82f6bef1e623b9233a659deda7b1a611e40aa0d", "committedDate": "2020-07-16T08:49:35Z", "message": "chore(upgrade-tests): tune broker failure detection"}, "afterCommit": {"oid": "cc1b14e61295c24af8d90eb01163d5d3ca4c0b7a", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/cc1b14e61295c24af8d90eb01163d5d3ca4c0b7a", "committedDate": "2020-07-17T06:49:10Z", "message": "chore(upgrade-tests): add rolling upgrade tests\n\n- removes specific log segment size and snapshot period as we're not\n  testing compaction in any form; add these back if we ever do\n- lowers the maxMessageSize to lower the memory footprint used by Atomix\n  which is directly proportional to number of segments * maxMessageSize\n- document the rolling upgrade simulation and why it's done like this\n- simplify handling of closeable resources\n- assert topology is complete on single node upgrade to check that the\n  new container correctly rejoined the cluster/raft\n- removes unnecessary smoke test covered by other integration tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNDIxMDIx", "url": "https://github.com/camunda-cloud/zeebe/pull/4970#pullrequestreview-450421021", "createdAt": "2020-07-17T07:07:34Z", "commit": {"oid": "cc1b14e61295c24af8d90eb01163d5d3ca4c0b7a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2699, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}