{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3MDkwMjAw", "number": 5348, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjoxMzowNVrOEj5xUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzowMDowNFrOEj6ksQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDgyMTMwOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ProcessingStateMachine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjoxMzowNVrOHShmOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTo0ODo0MlrOHTaRtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4Njg3NQ==", "bodyText": "It looks a bit odd to set the last processed position from outside.\nIf it is important to update the metrics with the position then I recommend creating a new method for starting the processing that takes the position as an argument. This makes it more clear that the position should be set only when the processing is started.\nOtherwise, we could implement this logic also in StreamProcessor.getLastProcessedPositionAsync().\nWhat do you think?", "url": "https://github.com/camunda-cloud/zeebe/pull/5348#discussion_r489186875", "createdAt": "2020-09-16T06:13:05Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ProcessingStateMachine.java", "diffHunk": "@@ -443,4 +443,11 @@ public long getLastWrittenEventPosition() {\n   public boolean isMakingProgress() {\n     return !onErrorHandlingLoop;\n   }\n+\n+  public void initLastProcessedPosition(final long lastReprocessedPosition) {\n+    if (lastSuccessfulProcessedEventPosition == StreamProcessor.UNSET_POSITION) {\n+      lastSuccessfulProcessedEventPosition = lastReprocessedPosition;\n+      metrics.setLastProcessedPosition(lastSuccessfulProcessedEventPosition);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8415ebfe5362292297b6a9404f31219d8d3e900"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExNTUwOA==", "bodyText": "I created a new method for starting the processing. I think we should not update the metrics. If we update it, it gives the wrong information that something is processed even though we have only reprocessed it. So I removed the metrics update.", "url": "https://github.com/camunda-cloud/zeebe/pull/5348#discussion_r490115508", "createdAt": "2020-09-17T09:48:42Z", "author": {"login": "deepthidevaki"}, "path": "engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ProcessingStateMachine.java", "diffHunk": "@@ -443,4 +443,11 @@ public long getLastWrittenEventPosition() {\n   public boolean isMakingProgress() {\n     return !onErrorHandlingLoop;\n   }\n+\n+  public void initLastProcessedPosition(final long lastReprocessedPosition) {\n+    if (lastSuccessfulProcessedEventPosition == StreamProcessor.UNSET_POSITION) {\n+      lastSuccessfulProcessedEventPosition = lastReprocessedPosition;\n+      metrics.setLastProcessedPosition(lastSuccessfulProcessedEventPosition);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4Njg3NQ=="}, "originalCommit": {"oid": "e8415ebfe5362292297b6a9404f31219d8d3e900"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDgyMjI5OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processing/streamprocessor/StreamProcessorReprocessingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjoxMzozMFrOHShm1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjoxMzozMFrOHShm1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4NzAyOQ==", "bodyText": "It seems that the event handlers are not required for the test. Can we remove them?", "url": "https://github.com/camunda-cloud/zeebe/pull/5348#discussion_r489187029", "createdAt": "2020-09-16T06:13:30Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processing/streamprocessor/StreamProcessorReprocessingTest.java", "diffHunk": "@@ -601,4 +601,130 @@ public void processRecord(\n     assertThat(processedPositions).doesNotContain(snapshotPosition);\n     assertThat(processedPositions).endsWith(lastSourceEvent, lastEvent);\n   }\n+\n+  @Test\n+  public void shouldUpdateLastProcessedPositionAfterReprocessing() throws Exception {\n+    // given\n+    final long firstPosition =\n+        streamProcessorRule.writeWorkflowInstanceEvent(ELEMENT_ACTIVATING, 1);\n+    streamProcessorRule.writeWorkflowInstanceEventWithSource(ELEMENT_ACTIVATED, 1, firstPosition);\n+\n+    waitUntil(\n+        () ->\n+            streamProcessorRule\n+                .events()\n+                .onlyWorkflowInstanceRecords()\n+                .withIntent(ELEMENT_ACTIVATED)\n+                .exists());\n+\n+    // when\n+    final CountDownLatch recoveredLatch = new CountDownLatch(1);\n+    final var streamProcessor =\n+        streamProcessorRule.startTypedStreamProcessor(\n+            (processors, context) ->\n+                processors\n+                    .onEvent(\n+                        ValueType.WORKFLOW_INSTANCE,\n+                        ELEMENT_ACTIVATING,\n+                        new TypedRecordProcessor<>() {\n+                          @Override\n+                          public void processRecord(\n+                              final long position,\n+                              final TypedRecord<UnifiedRecordValue> record,\n+                              final TypedResponseWriter responseWriter,\n+                              final TypedStreamWriter streamWriter,\n+                              final Consumer<SideEffectProducer> sideEffect) {\n+                            streamWriter.appendFollowUpEvent(\n+                                record.getKey(),\n+                                WorkflowInstanceIntent.ELEMENT_ACTIVATED,\n+                                record.getValue());\n+                          }\n+                        })\n+                    .onEvent(\n+                        ValueType.WORKFLOW_INSTANCE,\n+                        ELEMENT_ACTIVATED,\n+                        new TypedRecordProcessor<UnifiedRecordValue>() {\n+                          @Override\n+                          public void processRecord(\n+                              final long position,\n+                              final TypedRecord<UnifiedRecordValue> record,\n+                              final TypedResponseWriter responseWriter,\n+                              final TypedStreamWriter streamWriter,\n+                              final Consumer<SideEffectProducer> sideEffect) {}\n+                        })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8415ebfe5362292297b6a9404f31219d8d3e900"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDgzMTgwOnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processing/streamprocessor/StreamProcessorReprocessingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjoxNzozMlrOHShslg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjoxNzozMlrOHShslg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4ODUwMg==", "bodyText": "It seems that the event handler is not required for the test. Can we remove it?", "url": "https://github.com/camunda-cloud/zeebe/pull/5348#discussion_r489188502", "createdAt": "2020-09-16T06:17:32Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processing/streamprocessor/StreamProcessorReprocessingTest.java", "diffHunk": "@@ -601,4 +601,130 @@ public void processRecord(\n     assertThat(processedPositions).doesNotContain(snapshotPosition);\n     assertThat(processedPositions).endsWith(lastSourceEvent, lastEvent);\n   }\n+\n+  @Test\n+  public void shouldUpdateLastProcessedPositionAfterReprocessing() throws Exception {\n+    // given\n+    final long firstPosition =\n+        streamProcessorRule.writeWorkflowInstanceEvent(ELEMENT_ACTIVATING, 1);\n+    streamProcessorRule.writeWorkflowInstanceEventWithSource(ELEMENT_ACTIVATED, 1, firstPosition);\n+\n+    waitUntil(\n+        () ->\n+            streamProcessorRule\n+                .events()\n+                .onlyWorkflowInstanceRecords()\n+                .withIntent(ELEMENT_ACTIVATED)\n+                .exists());\n+\n+    // when\n+    final CountDownLatch recoveredLatch = new CountDownLatch(1);\n+    final var streamProcessor =\n+        streamProcessorRule.startTypedStreamProcessor(\n+            (processors, context) ->\n+                processors\n+                    .onEvent(\n+                        ValueType.WORKFLOW_INSTANCE,\n+                        ELEMENT_ACTIVATING,\n+                        new TypedRecordProcessor<>() {\n+                          @Override\n+                          public void processRecord(\n+                              final long position,\n+                              final TypedRecord<UnifiedRecordValue> record,\n+                              final TypedResponseWriter responseWriter,\n+                              final TypedStreamWriter streamWriter,\n+                              final Consumer<SideEffectProducer> sideEffect) {\n+                            streamWriter.appendFollowUpEvent(\n+                                record.getKey(),\n+                                WorkflowInstanceIntent.ELEMENT_ACTIVATED,\n+                                record.getValue());\n+                          }\n+                        })\n+                    .onEvent(\n+                        ValueType.WORKFLOW_INSTANCE,\n+                        ELEMENT_ACTIVATED,\n+                        new TypedRecordProcessor<UnifiedRecordValue>() {\n+                          @Override\n+                          public void processRecord(\n+                              final long position,\n+                              final TypedRecord<UnifiedRecordValue> record,\n+                              final TypedResponseWriter responseWriter,\n+                              final TypedStreamWriter streamWriter,\n+                              final Consumer<SideEffectProducer> sideEffect) {}\n+                        })\n+                    .withListener(\n+                        new StreamProcessorLifecycleAware() {\n+                          @Override\n+                          public void onRecovered(final ReadonlyProcessingContext context) {\n+                            recoveredLatch.countDown();\n+                          }\n+                        }));\n+\n+    // then\n+    recoveredLatch.await();\n+\n+    assertThat(streamProcessor.getLastProcessedPositionAsync().get()).isEqualTo(firstPosition);\n+  }\n+\n+  @Test\n+  public void shouldUpdateLastProcessedEventWhenSnapshot() throws Exception {\n+    // given\n+    final CountDownLatch onProcessedListenerLatch = new CountDownLatch(2);\n+    streamProcessorRule.startTypedStreamProcessor(\n+        (processors, context) ->\n+            processors.onEvent(\n+                ValueType.WORKFLOW_INSTANCE,\n+                ELEMENT_ACTIVATING,\n+                new TypedRecordProcessor<UnifiedRecordValue>() {\n+                  @Override\n+                  public void processRecord(\n+                      final long position,\n+                      final TypedRecord<UnifiedRecordValue> record,\n+                      final TypedResponseWriter responseWriter,\n+                      final TypedStreamWriter streamWriter,\n+                      final Consumer<SideEffectProducer> sideEffect) {}\n+                }),\n+        (t) -> onProcessedListenerLatch.countDown());\n+\n+    streamProcessorRule.writeWorkflowInstanceEvent(ELEMENT_ACTIVATING);\n+    final var snapshotPosition =\n+        streamProcessorRule.writeWorkflowInstanceEvent(\n+            ELEMENT_ACTIVATING); // should be processed and included in the snapshot\n+    onProcessedListenerLatch.await();\n+    streamProcessorRule.snapshot();\n+    streamProcessorRule.closeStreamProcessor();\n+\n+    // when\n+    // The processor restarts with a snapshot that was the state of the processor before it\n+    // was closed.\n+    final var recoveredLatch = new CountDownLatch(1);\n+    final var streamProcessor =\n+        streamProcessorRule.startTypedStreamProcessor(\n+            (processors, context) ->\n+                processors\n+                    .onEvent(\n+                        ValueType.WORKFLOW_INSTANCE,\n+                        ELEMENT_ACTIVATING,\n+                        new TypedRecordProcessor<UnifiedRecordValue>() {\n+                          @Override\n+                          public void processRecord(\n+                              final long position,\n+                              final TypedRecord<UnifiedRecordValue> record,\n+                              final TypedResponseWriter responseWriter,\n+                              final TypedStreamWriter streamWriter,\n+                              final Consumer<SideEffectProducer> sideEffect) {}\n+                        })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8415ebfe5362292297b6a9404f31219d8d3e900"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDgzNDc4OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processing/streamprocessor/StreamProcessorReprocessingTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjoxODo0MlrOHShuXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTo1MToyM1rOHTaX0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4ODk1Nw==", "bodyText": "These tests verify the fix but not the actual problem behind it. Can we write a test to verify that we can take a snapshot after reprocessing if no new record was processed?", "url": "https://github.com/camunda-cloud/zeebe/pull/5348#discussion_r489188957", "createdAt": "2020-09-16T06:18:42Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processing/streamprocessor/StreamProcessorReprocessingTest.java", "diffHunk": "@@ -601,4 +601,130 @@ public void processRecord(\n     assertThat(processedPositions).doesNotContain(snapshotPosition);\n     assertThat(processedPositions).endsWith(lastSourceEvent, lastEvent);\n   }\n+\n+  @Test\n+  public void shouldUpdateLastProcessedPositionAfterReprocessing() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8415ebfe5362292297b6a9404f31219d8d3e900"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExNzA3NA==", "bodyText": "As we discussed already we can't write a deterministic test because we cannot ensure that streamprocessor is paused after reprocessing.", "url": "https://github.com/camunda-cloud/zeebe/pull/5348#discussion_r490117074", "createdAt": "2020-09-17T09:51:23Z", "author": {"login": "deepthidevaki"}, "path": "engine/src/test/java/io/zeebe/engine/processing/streamprocessor/StreamProcessorReprocessingTest.java", "diffHunk": "@@ -601,4 +601,130 @@ public void processRecord(\n     assertThat(processedPositions).doesNotContain(snapshotPosition);\n     assertThat(processedPositions).endsWith(lastSourceEvent, lastEvent);\n   }\n+\n+  @Test\n+  public void shouldUpdateLastProcessedPositionAfterReprocessing() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4ODk1Nw=="}, "originalCommit": {"oid": "e8415ebfe5362292297b6a9404f31219d8d3e900"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDk1MjgxOnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processing/streamprocessor/StreamProcessorReprocessingTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzowMDowNFrOHSi1YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzowMDowNFrOHSi1YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIwNzEzNg==", "bodyText": "This part of the test is a bit hard to read. Please try to improve it. For example, by adding a new line :)", "url": "https://github.com/camunda-cloud/zeebe/pull/5348#discussion_r489207136", "createdAt": "2020-09-16T07:00:04Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processing/streamprocessor/StreamProcessorReprocessingTest.java", "diffHunk": "@@ -601,4 +601,130 @@ public void processRecord(\n     assertThat(processedPositions).doesNotContain(snapshotPosition);\n     assertThat(processedPositions).endsWith(lastSourceEvent, lastEvent);\n   }\n+\n+  @Test\n+  public void shouldUpdateLastProcessedPositionAfterReprocessing() throws Exception {\n+    // given\n+    final long firstPosition =\n+        streamProcessorRule.writeWorkflowInstanceEvent(ELEMENT_ACTIVATING, 1);\n+    streamProcessorRule.writeWorkflowInstanceEventWithSource(ELEMENT_ACTIVATED, 1, firstPosition);\n+\n+    waitUntil(\n+        () ->\n+            streamProcessorRule\n+                .events()\n+                .onlyWorkflowInstanceRecords()\n+                .withIntent(ELEMENT_ACTIVATED)\n+                .exists());\n+\n+    // when\n+    final CountDownLatch recoveredLatch = new CountDownLatch(1);\n+    final var streamProcessor =\n+        streamProcessorRule.startTypedStreamProcessor(\n+            (processors, context) ->\n+                processors\n+                    .onEvent(\n+                        ValueType.WORKFLOW_INSTANCE,\n+                        ELEMENT_ACTIVATING,\n+                        new TypedRecordProcessor<>() {\n+                          @Override\n+                          public void processRecord(\n+                              final long position,\n+                              final TypedRecord<UnifiedRecordValue> record,\n+                              final TypedResponseWriter responseWriter,\n+                              final TypedStreamWriter streamWriter,\n+                              final Consumer<SideEffectProducer> sideEffect) {\n+                            streamWriter.appendFollowUpEvent(\n+                                record.getKey(),\n+                                WorkflowInstanceIntent.ELEMENT_ACTIVATED,\n+                                record.getValue());\n+                          }\n+                        })\n+                    .onEvent(\n+                        ValueType.WORKFLOW_INSTANCE,\n+                        ELEMENT_ACTIVATED,\n+                        new TypedRecordProcessor<UnifiedRecordValue>() {\n+                          @Override\n+                          public void processRecord(\n+                              final long position,\n+                              final TypedRecord<UnifiedRecordValue> record,\n+                              final TypedResponseWriter responseWriter,\n+                              final TypedStreamWriter streamWriter,\n+                              final Consumer<SideEffectProducer> sideEffect) {}\n+                        })\n+                    .withListener(\n+                        new StreamProcessorLifecycleAware() {\n+                          @Override\n+                          public void onRecovered(final ReadonlyProcessingContext context) {\n+                            recoveredLatch.countDown();\n+                          }\n+                        }));\n+\n+    // then\n+    recoveredLatch.await();\n+\n+    assertThat(streamProcessor.getLastProcessedPositionAsync().get()).isEqualTo(firstPosition);\n+  }\n+\n+  @Test\n+  public void shouldUpdateLastProcessedEventWhenSnapshot() throws Exception {\n+    // given\n+    final CountDownLatch onProcessedListenerLatch = new CountDownLatch(2);\n+    streamProcessorRule.startTypedStreamProcessor(\n+        (processors, context) ->\n+            processors.onEvent(\n+                ValueType.WORKFLOW_INSTANCE,\n+                ELEMENT_ACTIVATING,\n+                new TypedRecordProcessor<UnifiedRecordValue>() {\n+                  @Override\n+                  public void processRecord(\n+                      final long position,\n+                      final TypedRecord<UnifiedRecordValue> record,\n+                      final TypedResponseWriter responseWriter,\n+                      final TypedStreamWriter streamWriter,\n+                      final Consumer<SideEffectProducer> sideEffect) {}\n+                }),\n+        (t) -> onProcessedListenerLatch.countDown());\n+\n+    streamProcessorRule.writeWorkflowInstanceEvent(ELEMENT_ACTIVATING);\n+    final var snapshotPosition =\n+        streamProcessorRule.writeWorkflowInstanceEvent(\n+            ELEMENT_ACTIVATING); // should be processed and included in the snapshot\n+    onProcessedListenerLatch.await();\n+    streamProcessorRule.snapshot();\n+    streamProcessorRule.closeStreamProcessor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8415ebfe5362292297b6a9404f31219d8d3e900"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 253, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}