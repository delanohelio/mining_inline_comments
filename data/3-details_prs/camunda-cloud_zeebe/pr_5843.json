{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNjAxODE1", "number": 5843, "title": "chore(exporter): Return a cancellable ScheduledTask when creating a scheduled task.", "bodyText": "Description\nI've created a method that returns a cancellable version of the scheduled task.\nRelated issues\n\ncloses #2574\nDefinition of Done\nNot all items need to be done depending on the issue and the pull request.\nCode changes:\n\n The changes are backwards compatibility with previous versions\n If it fixes a bug then PRs are created to backport the fix to the last two minor versions. You can trigger a backport by assigning labels (e.g. backport stable/0.25) to the PR, in case that fails you need to create backports manually.\n\nTesting:\n\n There are unit/integration tests that verify all acceptance criterias of the issue\n New tests are written to ensure backwards compatibility with further versions\n The behavior is tested manually\n The impact of the changes is verified by a benchmark\n\nDocumentation:\n\n The documentation is updated (e.g. BPMN reference, configuration, examples, get-started guides, etc.)\n New content is added to the release announcement", "createdAt": "2020-11-13T14:07:55Z", "url": "https://github.com/camunda-cloud/zeebe/pull/5843", "merged": true, "mergeCommit": {"oid": "50c51054a42acd649eece1e1ce7d4e33c6e12e9f"}, "closed": true, "closedAt": "2020-11-30T08:36:33Z", "author": {"login": "aivinog1"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddpYtQAFqTUzMzE2NzgyMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdggOAEABqjQwNDQ1NzE0MzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMTY3ODIz", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#pullrequestreview-533167823", "createdAt": "2020-11-18T07:36:39Z", "commit": {"oid": "4f4fca60119b0bf4c5a8f1d56e9a328452c802e3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNzozNjo0MFrOH1gbmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNzo0NjozOVrOH1gttA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2NzkzMA==", "bodyText": "This means that on cancel() it would execute actor.runDelayed(delay, task). If not cancelled the task will never get executed. It should be as follows:\n    final var delayedTask = actor.runDelayed(delay, task);\n    return () -> delayedTask.cancel();", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r525867930", "createdAt": "2020-11-18T07:36:40Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/exporter/stream/ExporterContainer.java", "diffHunk": "@@ -114,6 +115,11 @@ public void scheduleTask(final Duration delay, final Runnable task) {\n     actor.runDelayed(delay, task);\n   }\n \n+  @Override\n+  public ScheduledTask scheduleCancellableTask(final Duration delay, final Runnable task) {\n+    return () -> actor.runDelayed(delay, task);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f4fca60119b0bf4c5a8f1d56e9a328452c802e3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2ODU1NQ==", "bodyText": "Do we need a new method for this? Or just change the return type of scheduleTask?", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r525868555", "createdAt": "2020-11-18T07:38:08Z", "author": {"login": "deepthidevaki"}, "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/Controller.java", "diffHunk": "@@ -34,4 +34,6 @@\n    * @param task the task to run\n    */\n   void scheduleTask(Duration delay, Runnable task);\n+\n+  ScheduledTask scheduleCancellableTask(final Duration delay, final Runnable task);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f4fca60119b0bf4c5a8f1d56e9a328452c802e3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg2ODk0MQ==", "bodyText": "Please add some docs here since this is a public api.", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r525868941", "createdAt": "2020-11-18T07:38:58Z", "author": {"login": "deepthidevaki"}, "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/ScheduledTask.java", "diffHunk": "@@ -0,0 +1,20 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.exporter.api.context;\n+\n+public interface ScheduledTask {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f4fca60119b0bf4c5a8f1d56e9a328452c802e3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg3MjU2NA==", "bodyText": "Let's keep it simple. I don't think these additional interface and class is required. Instead you can modify the run method as follows:\npublic void run() {\n    if (!wasExecuted() && !isCancelled()) {\n      task.run();\n      executed = true;\n    }\n  }", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r525872564", "createdAt": "2020-11-18T07:46:39Z", "author": {"login": "deepthidevaki"}, "path": "test/src/main/java/io/zeebe/test/exporter/MockScheduledTask.java", "diffHunk": "@@ -52,4 +70,37 @@ public void run() {\n   public boolean wasExecuted() {\n     return executed;\n   }\n+\n+  @Override\n+  public void cancel() {\n+    if (!isCanceled()) {\n+      task.cancel();\n+      canceled = true;\n+    }\n+  }\n+\n+  public boolean isCanceled() {\n+    return canceled;\n+  }\n+\n+  interface ScheduledRunnable extends ScheduledTask, Runnable {}\n+\n+  private static final class DefaultScheduledTask implements ScheduledRunnable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f4fca60119b0bf4c5a8f1d56e9a328452c802e3"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NTM2MTg3", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#pullrequestreview-536536187", "createdAt": "2020-11-23T14:42:33Z", "commit": {"oid": "130d0893c8d50b421d7b48e68fcd5cdba095c6af"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDo0MjozM1rOH4QcKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTowMDowOVrOH4RQFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1MTY1Ng==", "bodyText": "Also add documentation here.", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r528751656", "createdAt": "2020-11-23T14:42:33Z", "author": {"login": "deepthidevaki"}, "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/Controller.java", "diffHunk": "@@ -34,4 +34,6 @@\n    * @param task the task to run\n    */\n   void scheduleTask(Duration delay, Runnable task);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "130d0893c8d50b421d7b48e68fcd5cdba095c6af"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1NjI3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This interface is used to return a cancellable task from a scheduler.\n          \n          \n            \n             *  Represents a cancellable task.", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r528756272", "createdAt": "2020-11-23T14:49:02Z", "author": {"login": "deepthidevaki"}, "path": "exporter-api/src/main/java/io/zeebe/exporter/api/context/ScheduledTask.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright \u00a9 2017 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.zeebe.exporter.api.context;\n+\n+import java.time.Duration;\n+\n+/**\n+ * This interface is used to return a cancellable task from a scheduler.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "130d0893c8d50b421d7b48e68fcd5cdba095c6af"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1Nzg3OA==", "bodyText": "To test this, you don't have to export anything. So you can directly schedule a task on the exporter. No need to schedule it using exporter.onExport.", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r528757878", "createdAt": "2020-11-23T14:51:08Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java", "diffHunk": "@@ -386,6 +387,64 @@ public void shouldExecuteScheduledTask() throws Exception {\n     assertThat(timerTriggerLatch.await(5, TimeUnit.SECONDS)).isTrue();\n   }\n \n+  @Test\n+  public void shouldExecuteScheduledCancellableTask() throws InterruptedException {\n+    // given\n+    final CountDownLatch timerTriggerLatch = new CountDownLatch(1);\n+    final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n+    final Duration delay = Duration.ofSeconds(10);\n+\n+    final ControlledTestExporter exporter = exporters.get(0);\n+    exporter.onExport(\n+        r -> {\n+          exporter.getController().scheduleCancellableTask(delay, timerTriggerLatch::countDown);\n+          timerScheduledLatch.countDown();\n+        });\n+\n+    // when\n+    startExporterDirector(exporterDescriptors);\n+\n+    writeEvent();\n+\n+    timerScheduledLatch.await(5, TimeUnit.SECONDS);\n+\n+    rule.getClock().addTime(delay);\n+\n+    // then\n+    assertThat(timerTriggerLatch.await(5, TimeUnit.SECONDS)).isTrue();\n+  }\n+\n+  @Test\n+  public void shouldCancelScheduledCancellableTask() throws InterruptedException {\n+    // given\n+    final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n+    final Duration delay = Duration.ofSeconds(10);\n+\n+    final var exporter = exporters.get(0);\n+    exporter.onExport(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "130d0893c8d50b421d7b48e68fcd5cdba095c6af"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc2NDk0OQ==", "bodyText": "Here, we want to verify if the task was actually cancelled. This assert does not ensure that the task was not executed. I I would suggest something similar to following:\nstartExporterDirector(exporterDescriptors);\nvar taskToCancel = exporter.getController().scheduleCancellableTask(delay, // set some value);\nvar taskToExecute = exporter.getController().scheduleCancellableTask(delay,   () -> latch.countdown());\ntaskToCancel.cancel();\n// increase the clock\nrule.getClock().addTime(delay);\n// wait until the second task is executed\nlatch.await(..);\n// Verify the cancelled task is not executed - that is the value is not set", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#discussion_r528764949", "createdAt": "2020-11-23T15:00:09Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/test/java/io/zeebe/broker/exporter/stream/ExporterDirectorTest.java", "diffHunk": "@@ -386,6 +387,64 @@ public void shouldExecuteScheduledTask() throws Exception {\n     assertThat(timerTriggerLatch.await(5, TimeUnit.SECONDS)).isTrue();\n   }\n \n+  @Test\n+  public void shouldExecuteScheduledCancellableTask() throws InterruptedException {\n+    // given\n+    final CountDownLatch timerTriggerLatch = new CountDownLatch(1);\n+    final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n+    final Duration delay = Duration.ofSeconds(10);\n+\n+    final ControlledTestExporter exporter = exporters.get(0);\n+    exporter.onExport(\n+        r -> {\n+          exporter.getController().scheduleCancellableTask(delay, timerTriggerLatch::countDown);\n+          timerScheduledLatch.countDown();\n+        });\n+\n+    // when\n+    startExporterDirector(exporterDescriptors);\n+\n+    writeEvent();\n+\n+    timerScheduledLatch.await(5, TimeUnit.SECONDS);\n+\n+    rule.getClock().addTime(delay);\n+\n+    // then\n+    assertThat(timerTriggerLatch.await(5, TimeUnit.SECONDS)).isTrue();\n+  }\n+\n+  @Test\n+  public void shouldCancelScheduledCancellableTask() throws InterruptedException {\n+    // given\n+    final CountDownLatch timerScheduledLatch = new CountDownLatch(1);\n+    final Duration delay = Duration.ofSeconds(10);\n+\n+    final var exporter = exporters.get(0);\n+    exporter.onExport(\n+        r -> {\n+          final var scheduledTask =\n+              exporter\n+                  .getController()\n+                  .scheduleCancellableTask(\n+                      delay, () -> fail(\"Must not execute this block. Task must be cancelled.\"));\n+          scheduledTask.cancel();\n+          timerScheduledLatch.countDown();\n+        });\n+\n+    // when\n+    startExporterDirector(exporterDescriptors);\n+\n+    writeEvent();\n+\n+    timerScheduledLatch.await(5, TimeUnit.SECONDS);\n+\n+    rule.getClock().addTime(delay);\n+\n+    // then\n+    assertThat(exporter.getExportedRecords()).hasSize(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "130d0893c8d50b421d7b48e68fcd5cdba095c6af"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MzU5MjQz", "url": "https://github.com/camunda-cloud/zeebe/pull/5843#pullrequestreview-539359243", "createdAt": "2020-11-26T14:26:33Z", "commit": {"oid": "684d2df1f5092e22a89a0d5fd0fd5e662679b6bc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6278641ddb90c2f1996412cdb442ea5404a5d51c", "author": {"user": {"login": "aivinog1", "name": "Alexey Vinogradov"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/6278641ddb90c2f1996412cdb442ea5404a5d51c", "committedDate": "2020-11-27T04:50:20Z", "message": "chore(exporter): Return a cancellable ScheduledTask when creating a scheduled task."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "684d2df1f5092e22a89a0d5fd0fd5e662679b6bc", "author": {"user": {"login": "aivinog1", "name": "Alexey Vinogradov"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/684d2df1f5092e22a89a0d5fd0fd5e662679b6bc", "committedDate": "2020-11-25T13:44:59Z", "message": "chore(exporter): code review: fix javadoc"}, "afterCommit": {"oid": "6278641ddb90c2f1996412cdb442ea5404a5d51c", "author": {"user": {"login": "aivinog1", "name": "Alexey Vinogradov"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/6278641ddb90c2f1996412cdb442ea5404a5d51c", "committedDate": "2020-11-27T04:50:20Z", "message": "chore(exporter): Return a cancellable ScheduledTask when creating a scheduled task."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2395, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}