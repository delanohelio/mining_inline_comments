{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3MzUxMDA4", "number": 5791, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzoyOToxN1rOE2opoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzozNDowMFrOE2ouuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzI0NTc3OnYy", "diffSide": "RIGHT", "path": "gateway/src/main/java/io/zeebe/gateway/grpc/GrpcErrorMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzoyOToxN1rOHvh5JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzoyOToxN1rOHvh5JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYwMDQyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      \"Expected to handle gRPC request, but the gateway does not know any partitions yet\");\n          \n          \n            \n                      \"Expected to handle gRPC request, but the gateway does not know any partitions yet\", error);", "url": "https://github.com/camunda-cloud/zeebe/pull/5791#discussion_r519600420", "createdAt": "2020-11-09T07:29:17Z", "author": {"login": "Zelldon"}, "path": "gateway/src/main/java/io/zeebe/gateway/grpc/GrpcErrorMapper.java", "diffHunk": "@@ -86,6 +87,10 @@ private Status mapErrorToStatus(final Throwable error, final Logger logger) {\n       // partitions - it will then also occur when back pressure kicks in, leading to a large burst\n       // of error logs that is, in fact, expected\n       logger.trace(\"Expected to handle gRPC request, but all retries have been exhausted\", error);\n+    } else if (error instanceof NoTopologyAvailableException) {\n+      builder.setCode(Code.UNAVAILABLE_VALUE).setMessage(error.getMessage());\n+      logger.trace(\n+          \"Expected to handle gRPC request, but the gateway does not know any partitions yet\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "928b14cfad550d74bc353c00ba37b504ddfb5430"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1NzI1ODgxOnYy", "diffSide": "RIGHT", "path": "gateway/src/test/java/io/zeebe/gateway/api/UnavailableBrokersTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzozNDowMFrOHviAyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzo1NDoxM1rOHvijlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYwMjM3OA==", "bodyText": "What does this?", "url": "https://github.com/camunda-cloud/zeebe/pull/5791#discussion_r519602378", "createdAt": "2020-11-09T07:34:00Z", "author": {"login": "Zelldon"}, "path": "gateway/src/test/java/io/zeebe/gateway/api/UnavailableBrokersTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.api;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+\n+import io.atomix.cluster.AtomixCluster;\n+import io.grpc.Status.Code;\n+import io.zeebe.client.ZeebeClient;\n+import io.zeebe.client.api.ZeebeFuture;\n+import io.zeebe.client.api.command.ClientStatusException;\n+import io.zeebe.client.api.command.FinalCommandStep;\n+import io.zeebe.gateway.Gateway;\n+import io.zeebe.gateway.impl.configuration.GatewayCfg;\n+import io.zeebe.gateway.impl.configuration.NetworkCfg;\n+import io.zeebe.test.util.asserts.grpc.ClientStatusExceptionAssert;\n+import io.zeebe.test.util.socket.SocketUtil;\n+import io.zeebe.util.sched.ActorScheduler;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.parallel.Execution;\n+import org.junit.jupiter.api.parallel.ExecutionMode;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+@Execution(ExecutionMode.CONCURRENT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "928b14cfad550d74bc353c00ba37b504ddfb5430"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxMTAyMQ==", "bodyText": "Tests are executed concurrently instead of one after the other. Should be used only when we are sure that they don't interfere between each other \ud83d\ude42", "url": "https://github.com/camunda-cloud/zeebe/pull/5791#discussion_r519611021", "createdAt": "2020-11-09T07:53:41Z", "author": {"login": "npepinpe"}, "path": "gateway/src/test/java/io/zeebe/gateway/api/UnavailableBrokersTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.api;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+\n+import io.atomix.cluster.AtomixCluster;\n+import io.grpc.Status.Code;\n+import io.zeebe.client.ZeebeClient;\n+import io.zeebe.client.api.ZeebeFuture;\n+import io.zeebe.client.api.command.ClientStatusException;\n+import io.zeebe.client.api.command.FinalCommandStep;\n+import io.zeebe.gateway.Gateway;\n+import io.zeebe.gateway.impl.configuration.GatewayCfg;\n+import io.zeebe.gateway.impl.configuration.NetworkCfg;\n+import io.zeebe.test.util.asserts.grpc.ClientStatusExceptionAssert;\n+import io.zeebe.test.util.socket.SocketUtil;\n+import io.zeebe.util.sched.ActorScheduler;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.parallel.Execution;\n+import org.junit.jupiter.api.parallel.ExecutionMode;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+@Execution(ExecutionMode.CONCURRENT)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYwMjM3OA=="}, "originalCommit": {"oid": "928b14cfad550d74bc353c00ba37b504ddfb5430"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYxMTI4Nw==", "bodyText": "thanks :)", "url": "https://github.com/camunda-cloud/zeebe/pull/5791#discussion_r519611287", "createdAt": "2020-11-09T07:54:13Z", "author": {"login": "Zelldon"}, "path": "gateway/src/test/java/io/zeebe/gateway/api/UnavailableBrokersTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.gateway.api;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatCode;\n+\n+import io.atomix.cluster.AtomixCluster;\n+import io.grpc.Status.Code;\n+import io.zeebe.client.ZeebeClient;\n+import io.zeebe.client.api.ZeebeFuture;\n+import io.zeebe.client.api.command.ClientStatusException;\n+import io.zeebe.client.api.command.FinalCommandStep;\n+import io.zeebe.gateway.Gateway;\n+import io.zeebe.gateway.impl.configuration.GatewayCfg;\n+import io.zeebe.gateway.impl.configuration.NetworkCfg;\n+import io.zeebe.test.util.asserts.grpc.ClientStatusExceptionAssert;\n+import io.zeebe.test.util.socket.SocketUtil;\n+import io.zeebe.util.sched.ActorScheduler;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.Stream;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.parallel.Execution;\n+import org.junit.jupiter.api.parallel.ExecutionMode;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+@Execution(ExecutionMode.CONCURRENT)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTYwMjM3OA=="}, "originalCommit": {"oid": "928b14cfad550d74bc353c00ba37b504ddfb5430"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 135, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}