{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0ODczMzgw", "number": 3719, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzoyODoyNVrODaKy4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzoyODoyNVrODaKy4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzY2NDM1OnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/eventsubproc/EventSubProcessEventOccurredHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzoyODoyNVrOFg-DGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwNToyNDoxNVrOFhULkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDExNTM1NQ==", "bodyText": "Just a minor nit pick: This was a little odd to me, I guess I'm so used to seeing a for when iterating, that I had to read the next line again looking for the z variable. It also seems that we can achieve the same without it, like:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                for (int z = 0; z < zombies; z++) {\n          \n          \n            \n                while (zombies-- > 0) {\n          \n      \n    \n    \n  \n\nor\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                for (int z = 0; z < zombies; z++) {\n          \n          \n            \n            while (zombies > 0) {\n          \n          \n            \n            zombies--;\n          \n          \n            \n            ...", "url": "https://github.com/camunda-cloud/zeebe/pull/3719#discussion_r370115355", "createdAt": "2020-01-23T13:28:25Z", "author": {"login": "MiguelPires"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/eventsubproc/EventSubProcessEventOccurredHandler.java", "diffHunk": "@@ -86,21 +94,28 @@ private long handleInterrupting(\n   private boolean interruptParentScope(final BpmnStepContext<T> context) {\n     final long scopeKey = context.getValue().getFlowScopeKey();\n     final List<ElementInstance> children = context.getElementInstanceState().getChildren(scopeKey);\n-    boolean waitForTermination = false;\n+\n+    int terminatedChildInstances = 0;\n \n     for (final ElementInstance child : children) {\n       if (child.canTerminate()) {\n-        waitForTermination = true;\n         context\n             .getOutput()\n             .appendFollowUpEvent(\n                 child.getKey(), WorkflowInstanceIntent.ELEMENT_TERMINATING, child.getValue());\n-      } else {\n-        context.getElementInstanceState().consumeToken(scopeKey);\n+\n+        terminatedChildInstances += 1;\n       }\n     }\n \n-    return waitForTermination;\n+    // consume all other active tokens (e.g. tokens waiting at a joining gateway)\n+    final int zombies =\n+        context.getFlowScopeInstance().getNumberOfActiveTokens() - terminatedChildInstances;\n+    for (int z = 0; z < zombies; z++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee34273fa74173a5eae8cd33c325d79b451db3e1"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ3Nzk3MQ==", "bodyText": "Thanks @MiguelPires. I see your point. But as for now, I will not change it. There are 2 other places which almost the same code \ud83d\ude48 I hope to get rid of it soon.", "url": "https://github.com/camunda-cloud/zeebe/pull/3719#discussion_r370477971", "createdAt": "2020-01-24T05:24:15Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/eventsubproc/EventSubProcessEventOccurredHandler.java", "diffHunk": "@@ -86,21 +94,28 @@ private long handleInterrupting(\n   private boolean interruptParentScope(final BpmnStepContext<T> context) {\n     final long scopeKey = context.getValue().getFlowScopeKey();\n     final List<ElementInstance> children = context.getElementInstanceState().getChildren(scopeKey);\n-    boolean waitForTermination = false;\n+\n+    int terminatedChildInstances = 0;\n \n     for (final ElementInstance child : children) {\n       if (child.canTerminate()) {\n-        waitForTermination = true;\n         context\n             .getOutput()\n             .appendFollowUpEvent(\n                 child.getKey(), WorkflowInstanceIntent.ELEMENT_TERMINATING, child.getValue());\n-      } else {\n-        context.getElementInstanceState().consumeToken(scopeKey);\n+\n+        terminatedChildInstances += 1;\n       }\n     }\n \n-    return waitForTermination;\n+    // consume all other active tokens (e.g. tokens waiting at a joining gateway)\n+    final int zombies =\n+        context.getFlowScopeInstance().getNumberOfActiveTokens() - terminatedChildInstances;\n+    for (int z = 0; z < zombies; z++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDExNTM1NQ=="}, "originalCommit": {"oid": "ee34273fa74173a5eae8cd33c325d79b451db3e1"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 36, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}