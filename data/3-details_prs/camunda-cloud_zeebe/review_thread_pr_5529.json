{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MjkzODI0", "number": 5529, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOTo1NToyNlrOEsj5Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNzowNToxM1rOEuVJbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTYwOTIzOnYy", "diffSide": "RIGHT", "path": "protocol-impl/src/test/java/io/zeebe/protocol/impl/BrokerInfoTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwOTo1NToyNlrOHf3ohQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzoyMjowMlrOHf-hOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE3OTM5Nw==", "bodyText": "Please also assert the partition health statuses at the end of this test.", "url": "https://github.com/camunda-cloud/zeebe/pull/5529#discussion_r503179397", "createdAt": "2020-10-12T09:55:26Z", "author": {"login": "korthout"}, "path": "protocol-impl/src/test/java/io/zeebe/protocol/impl/BrokerInfoTest.java", "diffHunk": "@@ -35,6 +36,10 @@ public void shouldEncodeDecodeBrokerInfo() {\n     partitionRoles.put(1, PartitionRole.FOLLOWER);\n     partitionRoles.put(2, PartitionRole.LEADER);\n     partitionRoles.put(231, PartitionRole.FOLLOWER);\n+    final Map<Integer, PartitionHealthStatus> partitionHealthStatuses = new HashMap<>();\n+    partitionHealthStatuses.put(1, PartitionHealthStatus.HEALTHY);\n+    partitionHealthStatuses.put(2, PartitionHealthStatus.UNHEALTHY);\n+    partitionHealthStatuses.put(123, PartitionHealthStatus.HEALTHY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ed6ef59a8fb5fb1a73d49da544bd955b9a7bd5f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI5MjIxNw==", "bodyText": "Done :)", "url": "https://github.com/camunda-cloud/zeebe/pull/5529#discussion_r503292217", "createdAt": "2020-10-12T13:22:02Z", "author": {"login": "aivinog1"}, "path": "protocol-impl/src/test/java/io/zeebe/protocol/impl/BrokerInfoTest.java", "diffHunk": "@@ -35,6 +36,10 @@ public void shouldEncodeDecodeBrokerInfo() {\n     partitionRoles.put(1, PartitionRole.FOLLOWER);\n     partitionRoles.put(2, PartitionRole.LEADER);\n     partitionRoles.put(231, PartitionRole.FOLLOWER);\n+    final Map<Integer, PartitionHealthStatus> partitionHealthStatuses = new HashMap<>();\n+    partitionHealthStatuses.put(1, PartitionHealthStatus.HEALTHY);\n+    partitionHealthStatuses.put(2, PartitionHealthStatus.UNHEALTHY);\n+    partitionHealthStatuses.put(123, PartitionHealthStatus.HEALTHY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE3OTM5Nw=="}, "originalCommit": {"oid": "2ed6ef59a8fb5fb1a73d49da544bd955b9a7bd5f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MTY0MDEyOnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMDowMzoyMVrOHf37Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDowNToyNVrOHgAMYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4NDIzMA==", "bodyText": "I think that for this (and the other cases below), the changes to the localBroker data also need to be published. For example, this is also done by the TopologyManagerImpl when the partition role changes (i.e. becoming leader or follower). See TopologyManagerImpl#L218 to see how this is done.\n@deepthidevaki WDYT, is it necessary here to publish these changes explicitly?", "url": "https://github.com/camunda-cloud/zeebe/pull/5529#discussion_r503184230", "createdAt": "2020-10-12T10:03:21Z", "author": {"login": "korthout"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -737,6 +737,7 @@ public void onFailure() {\n           if (failureListener != null) {\n             failureListener.onFailure();\n           }\n+          localBroker.setPartitionUnhealthy(partitionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ed6ef59a8fb5fb1a73d49da544bd955b9a7bd5f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMxNjYxNQ==", "bodyText": "You are right @korthout. It needs to be written into atomix.getMembershipService().getLocalMember().properties() for it to be picked up in the next gossip propagation.", "url": "https://github.com/camunda-cloud/zeebe/pull/5529#discussion_r503316615", "createdAt": "2020-10-12T14:00:29Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -737,6 +737,7 @@ public void onFailure() {\n           if (failureListener != null) {\n             failureListener.onFailure();\n           }\n+          localBroker.setPartitionUnhealthy(partitionId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4NDIzMA=="}, "originalCommit": {"oid": "2ed6ef59a8fb5fb1a73d49da544bd955b9a7bd5f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMxOTY0OQ==", "bodyText": "Also note that localBroker is not a thread safe object. It can be concurrently updated by TopologyManagerImpl. So it is not safe to update it directly from here. May be you can delegate it to TopologyManagerImpl.", "url": "https://github.com/camunda-cloud/zeebe/pull/5529#discussion_r503319649", "createdAt": "2020-10-12T14:05:25Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -737,6 +737,7 @@ public void onFailure() {\n           if (failureListener != null) {\n             failureListener.onFailure();\n           }\n+          localBroker.setPartitionUnhealthy(partitionId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzE4NDIzMA=="}, "originalCommit": {"oid": "2ed6ef59a8fb5fb1a73d49da544bd955b9a7bd5f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjAxNTA5OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/clustering/topology/TopologyManagerImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTo1NjoxNVrOHhaDbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODoyMDowOVrOHitijQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5MTkxOQ==", "bodyText": "I'm not entirely sure about this, but it might be necessary to put these 2 lines in a actor.run block (see L234). This would make sure that the work is never concurrently executed with one of the other updates to localbroker. @deepthidevaki WDYK? does that fully solve the issue?", "url": "https://github.com/camunda-cloud/zeebe/pull/5529#discussion_r504791919", "createdAt": "2020-10-14T15:56:15Z", "author": {"login": "korthout"}, "path": "broker/src/main/java/io/zeebe/broker/clustering/topology/TopologyManagerImpl.java", "diffHunk": "@@ -249,4 +253,16 @@ private void notifyPartitionLeaderUpdated(final int partitionId, final BrokerInf\n       LogUtil.catchAndLog(LOG, () -> listener.onPartitionLeaderUpdated(partitionId, member));\n     }\n   }\n+\n+  @Override\n+  public void onHealthUp(final int partitionId) {\n+    localBroker.setPartitionHealthy(partitionId);\n+    publishTopologyChanges();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e05cfebbd58577c15b137ce9cc4426545438114"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYzMDAzMg==", "bodyText": "ping @deepthidevaki \ud83d\ude42", "url": "https://github.com/camunda-cloud/zeebe/pull/5529#discussion_r505630032", "createdAt": "2020-10-15T15:19:43Z", "author": {"login": "korthout"}, "path": "broker/src/main/java/io/zeebe/broker/clustering/topology/TopologyManagerImpl.java", "diffHunk": "@@ -249,4 +253,16 @@ private void notifyPartitionLeaderUpdated(final int partitionId, final BrokerInf\n       LogUtil.catchAndLog(LOG, () -> listener.onPartitionLeaderUpdated(partitionId, member));\n     }\n   }\n+\n+  @Override\n+  public void onHealthUp(final int partitionId) {\n+    localBroker.setPartitionHealthy(partitionId);\n+    publishTopologyChanges();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5MTkxOQ=="}, "originalCommit": {"oid": "3e05cfebbd58577c15b137ce9cc4426545438114"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEwMzQwMg==", "bodyText": "Yes. It should be executed with actor.run.", "url": "https://github.com/camunda-cloud/zeebe/pull/5529#discussion_r506103402", "createdAt": "2020-10-16T07:00:40Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/clustering/topology/TopologyManagerImpl.java", "diffHunk": "@@ -249,4 +253,16 @@ private void notifyPartitionLeaderUpdated(final int partitionId, final BrokerInf\n       LogUtil.catchAndLog(LOG, () -> listener.onPartitionLeaderUpdated(partitionId, member));\n     }\n   }\n+\n+  @Override\n+  public void onHealthUp(final int partitionId) {\n+    localBroker.setPartitionHealthy(partitionId);\n+    publishTopologyChanges();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5MTkxOQ=="}, "originalCommit": {"oid": "3e05cfebbd58577c15b137ce9cc4426545438114"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjExNDU4NQ==", "bodyText": "@deepthidevaki Thanks, I'll wrap it with an actor.run :)", "url": "https://github.com/camunda-cloud/zeebe/pull/5529#discussion_r506114585", "createdAt": "2020-10-16T07:18:45Z", "author": {"login": "aivinog1"}, "path": "broker/src/main/java/io/zeebe/broker/clustering/topology/TopologyManagerImpl.java", "diffHunk": "@@ -249,4 +253,16 @@ private void notifyPartitionLeaderUpdated(final int partitionId, final BrokerInf\n       LogUtil.catchAndLog(LOG, () -> listener.onPartitionLeaderUpdated(partitionId, member));\n     }\n   }\n+\n+  @Override\n+  public void onHealthUp(final int partitionId) {\n+    localBroker.setPartitionHealthy(partitionId);\n+    publishTopologyChanges();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5MTkxOQ=="}, "originalCommit": {"oid": "3e05cfebbd58577c15b137ce9cc4426545438114"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE1OTc1Nw==", "bodyText": "Done", "url": "https://github.com/camunda-cloud/zeebe/pull/5529#discussion_r506159757", "createdAt": "2020-10-16T08:20:09Z", "author": {"login": "aivinog1"}, "path": "broker/src/main/java/io/zeebe/broker/clustering/topology/TopologyManagerImpl.java", "diffHunk": "@@ -249,4 +253,16 @@ private void notifyPartitionLeaderUpdated(final int partitionId, final BrokerInf\n       LogUtil.catchAndLog(LOG, () -> listener.onPartitionLeaderUpdated(partitionId, member));\n     }\n   }\n+\n+  @Override\n+  public void onHealthUp(final int partitionId) {\n+    localBroker.setPartitionHealthy(partitionId);\n+    publishTopologyChanges();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5MTkxOQ=="}, "originalCommit": {"oid": "3e05cfebbd58577c15b137ce9cc4426545438114"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MjAzODc4OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNjowMToyNlrOHhaSUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNToxODo1NVrOHiNLDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5NTcyOQ==", "bodyText": "I wonder whether we could (or want to) re-use the failure listener for this. Perhaps ZeebePartition should know a collection of failure listeners that get notified onFailure and onRecovered. That requires some additional refactoring, but at least doesn't add stuff to partition context. I'm not sure it would work though, so please have a try at it, and if it doesn't work that's also fine.", "url": "https://github.com/camunda-cloud/zeebe/pull/5529#discussion_r504795729", "createdAt": "2020-10-14T16:01:26Z", "author": {"login": "korthout"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -231,6 +231,7 @@ public void onFailure() {\n           if (failureListener != null) {\n             failureListener.onFailure();\n           }\n+          context.getPartitionHealthListener().onHealthDown(getPartitionId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e05cfebbd58577c15b137ce9cc4426545438114"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE2Nzg2NQ==", "bodyText": "Ok, I'll try it :)", "url": "https://github.com/camunda-cloud/zeebe/pull/5529#discussion_r505167865", "createdAt": "2020-10-15T05:12:13Z", "author": {"login": "aivinog1"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -231,6 +231,7 @@ public void onFailure() {\n           if (failureListener != null) {\n             failureListener.onFailure();\n           }\n+          context.getPartitionHealthListener().onHealthDown(getPartitionId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5NTcyOQ=="}, "originalCommit": {"oid": "3e05cfebbd58577c15b137ce9cc4426545438114"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUwMDczNg==", "bodyText": "@korthout Well, I've tried but found that this is not so applicable. In my implementation, TopologyManagerImpl implements a FailureListener, but should somehow know the partitionId which is not passed in FailureListener methods. So, now I can't see how we could use this interface in this case :) If you have other ideas, please let me know :)", "url": "https://github.com/camunda-cloud/zeebe/pull/5529#discussion_r505500736", "createdAt": "2020-10-15T12:29:02Z", "author": {"login": "aivinog1"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -231,6 +231,7 @@ public void onFailure() {\n           if (failureListener != null) {\n             failureListener.onFailure();\n           }\n+          context.getPartitionHealthListener().onHealthDown(getPartitionId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5NTcyOQ=="}, "originalCommit": {"oid": "3e05cfebbd58577c15b137ce9cc4426545438114"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYwOTcwMQ==", "bodyText": "@aivinog1 I was thinking about it and just had to try it out myself. I hope you don't mind. Please have a look at it, if you like it we can keep it, but I'm also fine with discarding it. It's just an alternative to consider. Which do you prefer?\nOne thing to note, that I ran into while trying this, was that ZeebePartition.onRecoveredInternal and ZeebePartition.onInstallFailure already inform the failure listeners indirectly. It tells the ZeebePartitionHealth to update, which afterwards informs its supervisor (which is ZeebePartition) of the change. Point being, that if we chose not to use my changes, please remove the lines context.getPartitionHealthListener().onHealthDown(getPartitionId()); from onRecoveredInternal and onInstallFailure.", "url": "https://github.com/camunda-cloud/zeebe/pull/5529#discussion_r505609701", "createdAt": "2020-10-15T14:54:52Z", "author": {"login": "korthout"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -231,6 +231,7 @@ public void onFailure() {\n           if (failureListener != null) {\n             failureListener.onFailure();\n           }\n+          context.getPartitionHealthListener().onHealthDown(getPartitionId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5NTcyOQ=="}, "originalCommit": {"oid": "3e05cfebbd58577c15b137ce9cc4426545438114"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYxODc3NA==", "bodyText": "@korthout Well, I like your solution more than my, good job \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/5529#discussion_r505618774", "createdAt": "2020-10-15T15:05:22Z", "author": {"login": "aivinog1"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -231,6 +231,7 @@ public void onFailure() {\n           if (failureListener != null) {\n             failureListener.onFailure();\n           }\n+          context.getPartitionHealthListener().onHealthDown(getPartitionId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5NTcyOQ=="}, "originalCommit": {"oid": "3e05cfebbd58577c15b137ce9cc4426545438114"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYyOTQ1Mg==", "bodyText": "@aivinog1 thanks \ud83d\ude42", "url": "https://github.com/camunda-cloud/zeebe/pull/5529#discussion_r505629452", "createdAt": "2020-10-15T15:18:55Z", "author": {"login": "korthout"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -231,6 +231,7 @@ public void onFailure() {\n           if (failureListener != null) {\n             failureListener.onFailure();\n           }\n+          context.getPartitionHealthListener().onHealthDown(getPartitionId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc5NTcyOQ=="}, "originalCommit": {"oid": "3e05cfebbd58577c15b137ce9cc4426545438114"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDE2NDI5OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/Broker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNzowNToxM1rOHiqQtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODoyMDoxN1rOHitjAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEwNjAzOQ==", "bodyText": "This should be called after scheduleActor(zeebePartition). The reason is: it is executed with actor.run. If the actor is not started, it won't be executed.", "url": "https://github.com/camunda-cloud/zeebe/pull/5529#discussion_r506106039", "createdAt": "2020-10-16T07:05:13Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/Broker.java", "diffHunk": "@@ -403,11 +404,12 @@ private AutoCloseable partitionsStep(\n                     partitionIndexes.get(partitionId),\n                     snapshotStoreSupplier,\n                     createFactory(topologyManager, clusterCfg, atomix, managementRequestHandler),\n-                    buildExporterRepository(brokerCfg),\n-                    topologyManager);\n+                    buildExporterRepository(brokerCfg));\n             final PartitionTransitionImpl transitionBehavior =\n                 new PartitionTransitionImpl(context, LEADER_STEPS, FOLLOWER_STEPS);\n             final ZeebePartition zeebePartition = new ZeebePartition(context, transitionBehavior);\n+            zeebePartition.addFailureListener(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0055231d73899b28a1a90dc702ef972d0220925"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE1OTg3NA==", "bodyText": "Done", "url": "https://github.com/camunda-cloud/zeebe/pull/5529#discussion_r506159874", "createdAt": "2020-10-16T08:20:17Z", "author": {"login": "aivinog1"}, "path": "broker/src/main/java/io/zeebe/broker/Broker.java", "diffHunk": "@@ -403,11 +404,12 @@ private AutoCloseable partitionsStep(\n                     partitionIndexes.get(partitionId),\n                     snapshotStoreSupplier,\n                     createFactory(topologyManager, clusterCfg, atomix, managementRequestHandler),\n-                    buildExporterRepository(brokerCfg),\n-                    topologyManager);\n+                    buildExporterRepository(brokerCfg));\n             final PartitionTransitionImpl transitionBehavior =\n                 new PartitionTransitionImpl(context, LEADER_STEPS, FOLLOWER_STEPS);\n             final ZeebePartition zeebePartition = new ZeebePartition(context, transitionBehavior);\n+            zeebePartition.addFailureListener(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjEwNjAzOQ=="}, "originalCommit": {"oid": "b0055231d73899b28a1a90dc702ef972d0220925"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 180, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}