{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4ODU1OTcz", "number": 4964, "title": "Fixes rolling update issues", "bodyText": "Description\nThe first test a totally simple and only test that we are able to upgrade a node and start the new version without problems. Later we can add more sophisticated tests.\nThe fix is fairly simple we just register void as placeholder for the removed classes.\n\nFor reference test passes with fix https://ci.zeebe.camunda.cloud/blue/organizations/jenkins/zeebe-io%2Fzeebe/detail/zell-fix-rolling-update/1/pipeline/89 and fails without https://ci.zeebe.camunda.cloud/blue/organizations/jenkins/zeebe-io%2Fzeebe/detail/zell-rolling-update/4/pipeline/89/\nRelated issues\n\ncloses #4961\nDefinition of Done\nNot all items need to be done depending on the issue and the pull request.\nCode changes:\n\n The changes are backwards compatibility with previous versions\n If it fixes a bug then PRs are created to backport the fix to the last two minor versions\n\nTesting:\n\n There are unit/integration tests that verify all acceptance criterias of the issue\n New tests are written to ensure backwards compatibility with further versions\n The behavior is tested manually\n The impact of the changes is verified by a benchmark\n\nDocumentation:\n\n The documentation is updated (e.g. BPMN reference, configuration, examples, get-started guides, etc.)\n New content is added to the release annoncement", "createdAt": "2020-07-14T12:41:53Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4964", "merged": true, "mergeCommit": {"oid": "9049b0cc65e0ba09d6dc7b7e0c20c571fa778193"}, "closed": true, "closedAt": "2020-07-14T14:17:52Z", "author": {"login": "Zelldon"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc01lQCAFqTQ0ODA3MTA3Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc02VsngBqjM1NDQyNTM4NTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MDcxMDcz", "url": "https://github.com/camunda-cloud/zeebe/pull/4964#pullrequestreview-448071073", "createdAt": "2020-07-14T12:45:44Z", "commit": {"oid": "22d5f9485ddb5f20194bb2ec7a566924b14c81dc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMjo0NTo0NFrOGxSDrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMjo0ODowN1rOGxSIhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMyOTI2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String OLD_VERSION = \"0.23.3\";\n          \n          \n            \n              private static final String OLD_VERSION = VersionUtil.getPreviousVersion();\n          \n      \n    \n    \n  \n\nOr replace all occurrences of OLD_VERSION to VersionUtil.getPreviousVersion()", "url": "https://github.com/camunda-cloud/zeebe/pull/4964#discussion_r454329262", "createdAt": "2020-07-14T12:45:44Z", "author": {"login": "npepinpe"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.test;\n+\n+import io.zeebe.containers.ZeebeBrokerContainer;\n+import io.zeebe.containers.ZeebeContainer;\n+import io.zeebe.containers.ZeebePort;\n+import io.zeebe.test.util.AutoCloseableRule;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.event.Level;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.lifecycle.Startables;\n+\n+public class RollingUpdateTest {\n+  private static final Logger LOG = LoggerFactory.getLogger(ContainerStateRule.class);\n+  private static final String OLD_VERSION = \"0.23.3\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22d5f9485ddb5f20194bb2ec7a566924b14c81dc"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMyOTU0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private <T extends AutoCloseable> T withCloseable(final T closeable) {\n          \n          \n            \n              private <T extends AutoCloseable> T asManagedCloseable(final T closeable) {", "url": "https://github.com/camunda-cloud/zeebe/pull/4964#discussion_r454329541", "createdAt": "2020-07-14T12:46:15Z", "author": {"login": "npepinpe"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.test;\n+\n+import io.zeebe.containers.ZeebeBrokerContainer;\n+import io.zeebe.containers.ZeebeContainer;\n+import io.zeebe.containers.ZeebePort;\n+import io.zeebe.test.util.AutoCloseableRule;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.event.Level;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.lifecycle.Startables;\n+\n+public class RollingUpdateTest {\n+  private static final Logger LOG = LoggerFactory.getLogger(ContainerStateRule.class);\n+  private static final String OLD_VERSION = \"0.23.3\";\n+  private static final String CURRENT_VERSION = \"current-test\";\n+\n+  @Rule public AutoCloseableRule autoCloseable = new AutoCloseableRule();\n+\n+  private List<ZeebeBrokerContainer> containers;\n+  private String initialContactPoints;\n+  private Network network;\n+  private ZeebeContainer nodeZeroContainer;\n+\n+  @Before\n+  public void setup() {\n+    initialContactPoints =\n+        IntStream.range(0, 3)\n+            .mapToObj(id -> \"broker-\" + id + \":\" + ZeebePort.INTERNAL_API.getPort())\n+            .collect(Collectors.joining(\",\"));\n+\n+    network = Network.newNetwork();\n+\n+    containers =\n+        Arrays.asList(\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)),\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)),\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)));\n+    getConfiguredClusterBroker(0, containers);\n+\n+    nodeZeroContainer = getConfiguredClusterBroker(0, containers);\n+    getConfiguredClusterBroker(1, containers);\n+    getConfiguredClusterBroker(2, containers);\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToRestartContainerWithSameVersion() {\n+    // given\n+    final var index = 0;\n+    final var sameVersion = OLD_VERSION;\n+    Startables.deepStart(containers).join();\n+    nodeZeroContainer.shutdownGracefully(Duration.ofSeconds(30));\n+\n+    // when\n+    final var zeebeBrokerContainer = replaceBrokerContainer(index, sameVersion);\n+\n+    // then\n+    zeebeBrokerContainer.start();\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToRestartContainerWithNewVersion() {\n+    // given\n+    final var index = 0;\n+    final var newVersion = CURRENT_VERSION;\n+    Startables.deepStart(containers).join();\n+    nodeZeroContainer.shutdownGracefully(Duration.ofSeconds(30));\n+\n+    // when\n+    final var zeebeBrokerContainer = replaceBrokerContainer(index, newVersion);\n+\n+    // then\n+    zeebeBrokerContainer.start();\n+  }\n+\n+  private ZeebeBrokerContainer replaceBrokerContainer(final int index, final String newVersion) {\n+    final var broker = new ZeebeBrokerContainer(newVersion);\n+    containers.set(index, broker);\n+    nodeZeroContainer = getConfiguredClusterBroker(index, containers);\n+    return broker;\n+  }\n+\n+  private ZeebeBrokerContainer getConfiguredClusterBroker(\n+      final int index, final List<ZeebeBrokerContainer> brokers) {\n+    final int clusterSize = brokers.size();\n+    final var broker = brokers.get(index);\n+    final var hostName = \"broker-\" + index;\n+    broker.withNetworkAliases(hostName);\n+\n+    return broker\n+        .withNetwork(network)\n+        .withEnv(\"ZEEBE_BROKER_NETWORK_HOST\", \"0.0.0.0\")\n+        .withEnv(\"ZEEBE_BROKER_NETWORK_ADVERTISED_HOST\", hostName)\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_CLUSTERNAME\", \"zeebe-cluster\")\n+        .withEnv(\"ZEEBE_BROKER_DATA_SNAPSHOTPERIOD\", \"1m\")\n+        .withEnv(\"ZEEBE_BROKER_DATA_LOGSEGMENTSIZE\", \"1MB\")\n+        .withEnv(\"ZEEBE_BROKER_NETWORK_MAXMESSAGESIZE\", \"1MB\")\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_NODEID\", String.valueOf(index))\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_CLUSTERSIZE\", String.valueOf(clusterSize))\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_REPLICATIONFACTOR\", String.valueOf(clusterSize))\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_INITIALCONTACTPOINTS\", initialContactPoints)\n+        .withLogConsumer(new Slf4jLogConsumer(LOG))\n+        .withLogLevel(Level.DEBUG)\n+        .withDebug(false);\n+  }\n+\n+  private <T extends AutoCloseable> T withCloseable(final T closeable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22d5f9485ddb5f20194bb2ec7a566924b14c81dc"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMyOTk5OQ==", "bodyText": "Is this necessary always? It's really only useful when debugging, no? And the container state rule should output logs of containers when the test fails, so we probably only need that.", "url": "https://github.com/camunda-cloud/zeebe/pull/4964#discussion_r454329999", "createdAt": "2020-07-14T12:47:09Z", "author": {"login": "npepinpe"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.test;\n+\n+import io.zeebe.containers.ZeebeBrokerContainer;\n+import io.zeebe.containers.ZeebeContainer;\n+import io.zeebe.containers.ZeebePort;\n+import io.zeebe.test.util.AutoCloseableRule;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.event.Level;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.lifecycle.Startables;\n+\n+public class RollingUpdateTest {\n+  private static final Logger LOG = LoggerFactory.getLogger(ContainerStateRule.class);\n+  private static final String OLD_VERSION = \"0.23.3\";\n+  private static final String CURRENT_VERSION = \"current-test\";\n+\n+  @Rule public AutoCloseableRule autoCloseable = new AutoCloseableRule();\n+\n+  private List<ZeebeBrokerContainer> containers;\n+  private String initialContactPoints;\n+  private Network network;\n+  private ZeebeContainer nodeZeroContainer;\n+\n+  @Before\n+  public void setup() {\n+    initialContactPoints =\n+        IntStream.range(0, 3)\n+            .mapToObj(id -> \"broker-\" + id + \":\" + ZeebePort.INTERNAL_API.getPort())\n+            .collect(Collectors.joining(\",\"));\n+\n+    network = Network.newNetwork();\n+\n+    containers =\n+        Arrays.asList(\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)),\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)),\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)));\n+    getConfiguredClusterBroker(0, containers);\n+\n+    nodeZeroContainer = getConfiguredClusterBroker(0, containers);\n+    getConfiguredClusterBroker(1, containers);\n+    getConfiguredClusterBroker(2, containers);\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToRestartContainerWithSameVersion() {\n+    // given\n+    final var index = 0;\n+    final var sameVersion = OLD_VERSION;\n+    Startables.deepStart(containers).join();\n+    nodeZeroContainer.shutdownGracefully(Duration.ofSeconds(30));\n+\n+    // when\n+    final var zeebeBrokerContainer = replaceBrokerContainer(index, sameVersion);\n+\n+    // then\n+    zeebeBrokerContainer.start();\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToRestartContainerWithNewVersion() {\n+    // given\n+    final var index = 0;\n+    final var newVersion = CURRENT_VERSION;\n+    Startables.deepStart(containers).join();\n+    nodeZeroContainer.shutdownGracefully(Duration.ofSeconds(30));\n+\n+    // when\n+    final var zeebeBrokerContainer = replaceBrokerContainer(index, newVersion);\n+\n+    // then\n+    zeebeBrokerContainer.start();\n+  }\n+\n+  private ZeebeBrokerContainer replaceBrokerContainer(final int index, final String newVersion) {\n+    final var broker = new ZeebeBrokerContainer(newVersion);\n+    containers.set(index, broker);\n+    nodeZeroContainer = getConfiguredClusterBroker(index, containers);\n+    return broker;\n+  }\n+\n+  private ZeebeBrokerContainer getConfiguredClusterBroker(\n+      final int index, final List<ZeebeBrokerContainer> brokers) {\n+    final int clusterSize = brokers.size();\n+    final var broker = brokers.get(index);\n+    final var hostName = \"broker-\" + index;\n+    broker.withNetworkAliases(hostName);\n+\n+    return broker\n+        .withNetwork(network)\n+        .withEnv(\"ZEEBE_BROKER_NETWORK_HOST\", \"0.0.0.0\")\n+        .withEnv(\"ZEEBE_BROKER_NETWORK_ADVERTISED_HOST\", hostName)\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_CLUSTERNAME\", \"zeebe-cluster\")\n+        .withEnv(\"ZEEBE_BROKER_DATA_SNAPSHOTPERIOD\", \"1m\")\n+        .withEnv(\"ZEEBE_BROKER_DATA_LOGSEGMENTSIZE\", \"1MB\")\n+        .withEnv(\"ZEEBE_BROKER_NETWORK_MAXMESSAGESIZE\", \"1MB\")\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_NODEID\", String.valueOf(index))\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_CLUSTERSIZE\", String.valueOf(clusterSize))\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_REPLICATIONFACTOR\", String.valueOf(clusterSize))\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_INITIALCONTACTPOINTS\", initialContactPoints)\n+        .withLogConsumer(new Slf4jLogConsumer(LOG))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22d5f9485ddb5f20194bb2ec7a566924b14c81dc"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMzMDUwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                nodeZeroContainer = getConfiguredClusterBroker(index, containers);\n          \n          \n            \n                newContainer = getConfiguredClusterBroker(index, containers);\n          \n      \n    \n    \n  \n\nnodeZeroContainer made it sound like index should always be 0 \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/4964#discussion_r454330503", "createdAt": "2020-07-14T12:48:07Z", "author": {"login": "npepinpe"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.test;\n+\n+import io.zeebe.containers.ZeebeBrokerContainer;\n+import io.zeebe.containers.ZeebeContainer;\n+import io.zeebe.containers.ZeebePort;\n+import io.zeebe.test.util.AutoCloseableRule;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.event.Level;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.lifecycle.Startables;\n+\n+public class RollingUpdateTest {\n+  private static final Logger LOG = LoggerFactory.getLogger(ContainerStateRule.class);\n+  private static final String OLD_VERSION = \"0.23.3\";\n+  private static final String CURRENT_VERSION = \"current-test\";\n+\n+  @Rule public AutoCloseableRule autoCloseable = new AutoCloseableRule();\n+\n+  private List<ZeebeBrokerContainer> containers;\n+  private String initialContactPoints;\n+  private Network network;\n+  private ZeebeContainer nodeZeroContainer;\n+\n+  @Before\n+  public void setup() {\n+    initialContactPoints =\n+        IntStream.range(0, 3)\n+            .mapToObj(id -> \"broker-\" + id + \":\" + ZeebePort.INTERNAL_API.getPort())\n+            .collect(Collectors.joining(\",\"));\n+\n+    network = Network.newNetwork();\n+\n+    containers =\n+        Arrays.asList(\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)),\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)),\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)));\n+    getConfiguredClusterBroker(0, containers);\n+\n+    nodeZeroContainer = getConfiguredClusterBroker(0, containers);\n+    getConfiguredClusterBroker(1, containers);\n+    getConfiguredClusterBroker(2, containers);\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToRestartContainerWithSameVersion() {\n+    // given\n+    final var index = 0;\n+    final var sameVersion = OLD_VERSION;\n+    Startables.deepStart(containers).join();\n+    nodeZeroContainer.shutdownGracefully(Duration.ofSeconds(30));\n+\n+    // when\n+    final var zeebeBrokerContainer = replaceBrokerContainer(index, sameVersion);\n+\n+    // then\n+    zeebeBrokerContainer.start();\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToRestartContainerWithNewVersion() {\n+    // given\n+    final var index = 0;\n+    final var newVersion = CURRENT_VERSION;\n+    Startables.deepStart(containers).join();\n+    nodeZeroContainer.shutdownGracefully(Duration.ofSeconds(30));\n+\n+    // when\n+    final var zeebeBrokerContainer = replaceBrokerContainer(index, newVersion);\n+\n+    // then\n+    zeebeBrokerContainer.start();\n+  }\n+\n+  private ZeebeBrokerContainer replaceBrokerContainer(final int index, final String newVersion) {\n+    final var broker = new ZeebeBrokerContainer(newVersion);\n+    containers.set(index, broker);\n+    nodeZeroContainer = getConfiguredClusterBroker(index, containers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22d5f9485ddb5f20194bb2ec7a566924b14c81dc"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MDk4MzA2", "url": "https://github.com/camunda-cloud/zeebe/pull/4964#pullrequestreview-448098306", "createdAt": "2020-07-14T13:20:14Z", "commit": {"oid": "64f3d78f271175f9e06450111313a545a5e0debd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64f3d78f271175f9e06450111313a545a5e0debd", "author": {"user": {"login": "Zelldon", "name": "Christopher Zell"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/64f3d78f271175f9e06450111313a545a5e0debd", "committedDate": "2020-07-14T13:15:35Z", "message": "chore(upgrade-tests): fix up"}, "afterCommit": {"oid": "f6c5d0eddfea37d64beaa319f4f0c8d969cfc6bc", "author": {"user": {"login": "Zelldon", "name": "Christopher Zell"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/f6c5d0eddfea37d64beaa319f4f0c8d969cfc6bc", "committedDate": "2020-07-14T13:44:51Z", "message": "fix(atomix): fix backwards compatibilty issue with RaftNamespace"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb2813b8f952cf638756903754ad297383584c5a", "author": {"user": {"login": "Zelldon", "name": "Christopher Zell"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/bb2813b8f952cf638756903754ad297383584c5a", "committedDate": "2020-07-14T13:48:33Z", "message": "test(upgrade-test): add rolling update test\n\n * The first test a totally simple and only test that we are able to\n   upgrade a node and start the new version without problems. Later we\n   can add more sophisticated tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd4efa6ffabfe221f9a6e1df18ca7f3b8418620e", "author": {"user": {"login": "Zelldon", "name": "Christopher Zell"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/bd4efa6ffabfe221f9a6e1df18ca7f3b8418620e", "committedDate": "2020-07-14T13:48:33Z", "message": "fix(atomix): fix backwards compatibilty issue with RaftNamespace"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f6c5d0eddfea37d64beaa319f4f0c8d969cfc6bc", "author": {"user": {"login": "Zelldon", "name": "Christopher Zell"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/f6c5d0eddfea37d64beaa319f4f0c8d969cfc6bc", "committedDate": "2020-07-14T13:44:51Z", "message": "fix(atomix): fix backwards compatibilty issue with RaftNamespace"}, "afterCommit": {"oid": "bd4efa6ffabfe221f9a6e1df18ca7f3b8418620e", "author": {"user": {"login": "Zelldon", "name": "Christopher Zell"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/bd4efa6ffabfe221f9a6e1df18ca7f3b8418620e", "committedDate": "2020-07-14T13:48:33Z", "message": "fix(atomix): fix backwards compatibilty issue with RaftNamespace"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2695, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}