{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4ODU1OTcz", "number": 4964, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMjo0NTo0NFrOEOPgSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMjo0ODowN1rOEOPjQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzY5NTQ2OnYy", "diffSide": "RIGHT", "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMjo0NTo0NFrOGxSDrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzoxMDoyMlrOGxS9Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMyOTI2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final String OLD_VERSION = \"0.23.3\";\n          \n          \n            \n              private static final String OLD_VERSION = VersionUtil.getPreviousVersion();\n          \n      \n    \n    \n  \n\nOr replace all occurrences of OLD_VERSION to VersionUtil.getPreviousVersion()", "url": "https://github.com/camunda-cloud/zeebe/pull/4964#discussion_r454329262", "createdAt": "2020-07-14T12:45:44Z", "author": {"login": "npepinpe"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.test;\n+\n+import io.zeebe.containers.ZeebeBrokerContainer;\n+import io.zeebe.containers.ZeebeContainer;\n+import io.zeebe.containers.ZeebePort;\n+import io.zeebe.test.util.AutoCloseableRule;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.event.Level;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.lifecycle.Startables;\n+\n+public class RollingUpdateTest {\n+  private static final Logger LOG = LoggerFactory.getLogger(ContainerStateRule.class);\n+  private static final String OLD_VERSION = \"0.23.3\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22d5f9485ddb5f20194bb2ec7a566924b14c81dc"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0MDUwNQ==", "bodyText": "Actually I want to have this hard coded, since we should also be able to do upgrade from pre-previous version if we are really backwards compatible. So ideally we should have tests which starts on the last supported and be able to upgrade to the newest.", "url": "https://github.com/camunda-cloud/zeebe/pull/4964#discussion_r454340505", "createdAt": "2020-07-14T13:04:51Z", "author": {"login": "Zelldon"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.test;\n+\n+import io.zeebe.containers.ZeebeBrokerContainer;\n+import io.zeebe.containers.ZeebeContainer;\n+import io.zeebe.containers.ZeebePort;\n+import io.zeebe.test.util.AutoCloseableRule;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.event.Level;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.lifecycle.Startables;\n+\n+public class RollingUpdateTest {\n+  private static final Logger LOG = LoggerFactory.getLogger(ContainerStateRule.class);\n+  private static final String OLD_VERSION = \"0.23.3\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMyOTI2Mg=="}, "originalCommit": {"oid": "22d5f9485ddb5f20194bb2ec7a566924b14c81dc"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0MTUzMQ==", "bodyText": "Do you mean skip minor versions (e.g. 0.23 to 0.25) or do you mean skip micro versions (0.23.x to 0.24.x)? So far we've never discussed that skipping versions was a possibility.", "url": "https://github.com/camunda-cloud/zeebe/pull/4964#discussion_r454341531", "createdAt": "2020-07-14T13:06:28Z", "author": {"login": "npepinpe"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.test;\n+\n+import io.zeebe.containers.ZeebeBrokerContainer;\n+import io.zeebe.containers.ZeebeContainer;\n+import io.zeebe.containers.ZeebePort;\n+import io.zeebe.test.util.AutoCloseableRule;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.event.Level;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.lifecycle.Startables;\n+\n+public class RollingUpdateTest {\n+  private static final Logger LOG = LoggerFactory.getLogger(ContainerStateRule.class);\n+  private static final String OLD_VERSION = \"0.23.3\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMyOTI2Mg=="}, "originalCommit": {"oid": "22d5f9485ddb5f20194bb2ec7a566924b14c81dc"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0MjUwNw==", "bodyText": "I mean if we say we are backwards compatible this is implicit that this is possible.", "url": "https://github.com/camunda-cloud/zeebe/pull/4964#discussion_r454342507", "createdAt": "2020-07-14T13:07:56Z", "author": {"login": "Zelldon"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.test;\n+\n+import io.zeebe.containers.ZeebeBrokerContainer;\n+import io.zeebe.containers.ZeebeContainer;\n+import io.zeebe.containers.ZeebePort;\n+import io.zeebe.test.util.AutoCloseableRule;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.event.Level;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.lifecycle.Startables;\n+\n+public class RollingUpdateTest {\n+  private static final Logger LOG = LoggerFactory.getLogger(ContainerStateRule.class);\n+  private static final String OLD_VERSION = \"0.23.3\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMyOTI2Mg=="}, "originalCommit": {"oid": "22d5f9485ddb5f20194bb2ec7a566924b14c81dc"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0Mzk5OA==", "bodyText": "We typically say we're backwards compatible from one version to the other, I've never heard any mention that we also are with older versions. Was this something that was decided a while back?", "url": "https://github.com/camunda-cloud/zeebe/pull/4964#discussion_r454343998", "createdAt": "2020-07-14T13:10:22Z", "author": {"login": "npepinpe"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.test;\n+\n+import io.zeebe.containers.ZeebeBrokerContainer;\n+import io.zeebe.containers.ZeebeContainer;\n+import io.zeebe.containers.ZeebePort;\n+import io.zeebe.test.util.AutoCloseableRule;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.event.Level;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.lifecycle.Startables;\n+\n+public class RollingUpdateTest {\n+  private static final Logger LOG = LoggerFactory.getLogger(ContainerStateRule.class);\n+  private static final String OLD_VERSION = \"0.23.3\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMyOTI2Mg=="}, "originalCommit": {"oid": "22d5f9485ddb5f20194bb2ec7a566924b14c81dc"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzY5NzE2OnYy", "diffSide": "RIGHT", "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMjo0NjoxNVrOGxSExQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzoxNTo0MlrOGxTKYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMyOTU0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private <T extends AutoCloseable> T withCloseable(final T closeable) {\n          \n          \n            \n              private <T extends AutoCloseable> T asManagedCloseable(final T closeable) {", "url": "https://github.com/camunda-cloud/zeebe/pull/4964#discussion_r454329541", "createdAt": "2020-07-14T12:46:15Z", "author": {"login": "npepinpe"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.test;\n+\n+import io.zeebe.containers.ZeebeBrokerContainer;\n+import io.zeebe.containers.ZeebeContainer;\n+import io.zeebe.containers.ZeebePort;\n+import io.zeebe.test.util.AutoCloseableRule;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.event.Level;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.lifecycle.Startables;\n+\n+public class RollingUpdateTest {\n+  private static final Logger LOG = LoggerFactory.getLogger(ContainerStateRule.class);\n+  private static final String OLD_VERSION = \"0.23.3\";\n+  private static final String CURRENT_VERSION = \"current-test\";\n+\n+  @Rule public AutoCloseableRule autoCloseable = new AutoCloseableRule();\n+\n+  private List<ZeebeBrokerContainer> containers;\n+  private String initialContactPoints;\n+  private Network network;\n+  private ZeebeContainer nodeZeroContainer;\n+\n+  @Before\n+  public void setup() {\n+    initialContactPoints =\n+        IntStream.range(0, 3)\n+            .mapToObj(id -> \"broker-\" + id + \":\" + ZeebePort.INTERNAL_API.getPort())\n+            .collect(Collectors.joining(\",\"));\n+\n+    network = Network.newNetwork();\n+\n+    containers =\n+        Arrays.asList(\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)),\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)),\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)));\n+    getConfiguredClusterBroker(0, containers);\n+\n+    nodeZeroContainer = getConfiguredClusterBroker(0, containers);\n+    getConfiguredClusterBroker(1, containers);\n+    getConfiguredClusterBroker(2, containers);\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToRestartContainerWithSameVersion() {\n+    // given\n+    final var index = 0;\n+    final var sameVersion = OLD_VERSION;\n+    Startables.deepStart(containers).join();\n+    nodeZeroContainer.shutdownGracefully(Duration.ofSeconds(30));\n+\n+    // when\n+    final var zeebeBrokerContainer = replaceBrokerContainer(index, sameVersion);\n+\n+    // then\n+    zeebeBrokerContainer.start();\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToRestartContainerWithNewVersion() {\n+    // given\n+    final var index = 0;\n+    final var newVersion = CURRENT_VERSION;\n+    Startables.deepStart(containers).join();\n+    nodeZeroContainer.shutdownGracefully(Duration.ofSeconds(30));\n+\n+    // when\n+    final var zeebeBrokerContainer = replaceBrokerContainer(index, newVersion);\n+\n+    // then\n+    zeebeBrokerContainer.start();\n+  }\n+\n+  private ZeebeBrokerContainer replaceBrokerContainer(final int index, final String newVersion) {\n+    final var broker = new ZeebeBrokerContainer(newVersion);\n+    containers.set(index, broker);\n+    nodeZeroContainer = getConfiguredClusterBroker(index, containers);\n+    return broker;\n+  }\n+\n+  private ZeebeBrokerContainer getConfiguredClusterBroker(\n+      final int index, final List<ZeebeBrokerContainer> brokers) {\n+    final int clusterSize = brokers.size();\n+    final var broker = brokers.get(index);\n+    final var hostName = \"broker-\" + index;\n+    broker.withNetworkAliases(hostName);\n+\n+    return broker\n+        .withNetwork(network)\n+        .withEnv(\"ZEEBE_BROKER_NETWORK_HOST\", \"0.0.0.0\")\n+        .withEnv(\"ZEEBE_BROKER_NETWORK_ADVERTISED_HOST\", hostName)\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_CLUSTERNAME\", \"zeebe-cluster\")\n+        .withEnv(\"ZEEBE_BROKER_DATA_SNAPSHOTPERIOD\", \"1m\")\n+        .withEnv(\"ZEEBE_BROKER_DATA_LOGSEGMENTSIZE\", \"1MB\")\n+        .withEnv(\"ZEEBE_BROKER_NETWORK_MAXMESSAGESIZE\", \"1MB\")\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_NODEID\", String.valueOf(index))\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_CLUSTERSIZE\", String.valueOf(clusterSize))\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_REPLICATIONFACTOR\", String.valueOf(clusterSize))\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_INITIALCONTACTPOINTS\", initialContactPoints)\n+        .withLogConsumer(new Slf4jLogConsumer(LOG))\n+        .withLogLevel(Level.DEBUG)\n+        .withDebug(false);\n+  }\n+\n+  private <T extends AutoCloseable> T withCloseable(final T closeable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22d5f9485ddb5f20194bb2ec7a566924b14c81dc"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0NTc1Mw==", "bodyText": "this method was copied btw from your branch :D", "url": "https://github.com/camunda-cloud/zeebe/pull/4964#discussion_r454345753", "createdAt": "2020-07-14T13:13:13Z", "author": {"login": "Zelldon"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.test;\n+\n+import io.zeebe.containers.ZeebeBrokerContainer;\n+import io.zeebe.containers.ZeebeContainer;\n+import io.zeebe.containers.ZeebePort;\n+import io.zeebe.test.util.AutoCloseableRule;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.event.Level;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.lifecycle.Startables;\n+\n+public class RollingUpdateTest {\n+  private static final Logger LOG = LoggerFactory.getLogger(ContainerStateRule.class);\n+  private static final String OLD_VERSION = \"0.23.3\";\n+  private static final String CURRENT_VERSION = \"current-test\";\n+\n+  @Rule public AutoCloseableRule autoCloseable = new AutoCloseableRule();\n+\n+  private List<ZeebeBrokerContainer> containers;\n+  private String initialContactPoints;\n+  private Network network;\n+  private ZeebeContainer nodeZeroContainer;\n+\n+  @Before\n+  public void setup() {\n+    initialContactPoints =\n+        IntStream.range(0, 3)\n+            .mapToObj(id -> \"broker-\" + id + \":\" + ZeebePort.INTERNAL_API.getPort())\n+            .collect(Collectors.joining(\",\"));\n+\n+    network = Network.newNetwork();\n+\n+    containers =\n+        Arrays.asList(\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)),\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)),\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)));\n+    getConfiguredClusterBroker(0, containers);\n+\n+    nodeZeroContainer = getConfiguredClusterBroker(0, containers);\n+    getConfiguredClusterBroker(1, containers);\n+    getConfiguredClusterBroker(2, containers);\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToRestartContainerWithSameVersion() {\n+    // given\n+    final var index = 0;\n+    final var sameVersion = OLD_VERSION;\n+    Startables.deepStart(containers).join();\n+    nodeZeroContainer.shutdownGracefully(Duration.ofSeconds(30));\n+\n+    // when\n+    final var zeebeBrokerContainer = replaceBrokerContainer(index, sameVersion);\n+\n+    // then\n+    zeebeBrokerContainer.start();\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToRestartContainerWithNewVersion() {\n+    // given\n+    final var index = 0;\n+    final var newVersion = CURRENT_VERSION;\n+    Startables.deepStart(containers).join();\n+    nodeZeroContainer.shutdownGracefully(Duration.ofSeconds(30));\n+\n+    // when\n+    final var zeebeBrokerContainer = replaceBrokerContainer(index, newVersion);\n+\n+    // then\n+    zeebeBrokerContainer.start();\n+  }\n+\n+  private ZeebeBrokerContainer replaceBrokerContainer(final int index, final String newVersion) {\n+    final var broker = new ZeebeBrokerContainer(newVersion);\n+    containers.set(index, broker);\n+    nodeZeroContainer = getConfiguredClusterBroker(index, containers);\n+    return broker;\n+  }\n+\n+  private ZeebeBrokerContainer getConfiguredClusterBroker(\n+      final int index, final List<ZeebeBrokerContainer> brokers) {\n+    final int clusterSize = brokers.size();\n+    final var broker = brokers.get(index);\n+    final var hostName = \"broker-\" + index;\n+    broker.withNetworkAliases(hostName);\n+\n+    return broker\n+        .withNetwork(network)\n+        .withEnv(\"ZEEBE_BROKER_NETWORK_HOST\", \"0.0.0.0\")\n+        .withEnv(\"ZEEBE_BROKER_NETWORK_ADVERTISED_HOST\", hostName)\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_CLUSTERNAME\", \"zeebe-cluster\")\n+        .withEnv(\"ZEEBE_BROKER_DATA_SNAPSHOTPERIOD\", \"1m\")\n+        .withEnv(\"ZEEBE_BROKER_DATA_LOGSEGMENTSIZE\", \"1MB\")\n+        .withEnv(\"ZEEBE_BROKER_NETWORK_MAXMESSAGESIZE\", \"1MB\")\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_NODEID\", String.valueOf(index))\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_CLUSTERSIZE\", String.valueOf(clusterSize))\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_REPLICATIONFACTOR\", String.valueOf(clusterSize))\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_INITIALCONTACTPOINTS\", initialContactPoints)\n+        .withLogConsumer(new Slf4jLogConsumer(LOG))\n+        .withLogLevel(Level.DEBUG)\n+        .withDebug(false);\n+  }\n+\n+  private <T extends AutoCloseable> T withCloseable(final T closeable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMyOTU0MQ=="}, "originalCommit": {"oid": "22d5f9485ddb5f20194bb2ec7a566924b14c81dc"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM0NzM2Mg==", "bodyText": "Everybody makes mistakes \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/4964#discussion_r454347362", "createdAt": "2020-07-14T13:15:42Z", "author": {"login": "npepinpe"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.test;\n+\n+import io.zeebe.containers.ZeebeBrokerContainer;\n+import io.zeebe.containers.ZeebeContainer;\n+import io.zeebe.containers.ZeebePort;\n+import io.zeebe.test.util.AutoCloseableRule;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.event.Level;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.lifecycle.Startables;\n+\n+public class RollingUpdateTest {\n+  private static final Logger LOG = LoggerFactory.getLogger(ContainerStateRule.class);\n+  private static final String OLD_VERSION = \"0.23.3\";\n+  private static final String CURRENT_VERSION = \"current-test\";\n+\n+  @Rule public AutoCloseableRule autoCloseable = new AutoCloseableRule();\n+\n+  private List<ZeebeBrokerContainer> containers;\n+  private String initialContactPoints;\n+  private Network network;\n+  private ZeebeContainer nodeZeroContainer;\n+\n+  @Before\n+  public void setup() {\n+    initialContactPoints =\n+        IntStream.range(0, 3)\n+            .mapToObj(id -> \"broker-\" + id + \":\" + ZeebePort.INTERNAL_API.getPort())\n+            .collect(Collectors.joining(\",\"));\n+\n+    network = Network.newNetwork();\n+\n+    containers =\n+        Arrays.asList(\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)),\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)),\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)));\n+    getConfiguredClusterBroker(0, containers);\n+\n+    nodeZeroContainer = getConfiguredClusterBroker(0, containers);\n+    getConfiguredClusterBroker(1, containers);\n+    getConfiguredClusterBroker(2, containers);\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToRestartContainerWithSameVersion() {\n+    // given\n+    final var index = 0;\n+    final var sameVersion = OLD_VERSION;\n+    Startables.deepStart(containers).join();\n+    nodeZeroContainer.shutdownGracefully(Duration.ofSeconds(30));\n+\n+    // when\n+    final var zeebeBrokerContainer = replaceBrokerContainer(index, sameVersion);\n+\n+    // then\n+    zeebeBrokerContainer.start();\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToRestartContainerWithNewVersion() {\n+    // given\n+    final var index = 0;\n+    final var newVersion = CURRENT_VERSION;\n+    Startables.deepStart(containers).join();\n+    nodeZeroContainer.shutdownGracefully(Duration.ofSeconds(30));\n+\n+    // when\n+    final var zeebeBrokerContainer = replaceBrokerContainer(index, newVersion);\n+\n+    // then\n+    zeebeBrokerContainer.start();\n+  }\n+\n+  private ZeebeBrokerContainer replaceBrokerContainer(final int index, final String newVersion) {\n+    final var broker = new ZeebeBrokerContainer(newVersion);\n+    containers.set(index, broker);\n+    nodeZeroContainer = getConfiguredClusterBroker(index, containers);\n+    return broker;\n+  }\n+\n+  private ZeebeBrokerContainer getConfiguredClusterBroker(\n+      final int index, final List<ZeebeBrokerContainer> brokers) {\n+    final int clusterSize = brokers.size();\n+    final var broker = brokers.get(index);\n+    final var hostName = \"broker-\" + index;\n+    broker.withNetworkAliases(hostName);\n+\n+    return broker\n+        .withNetwork(network)\n+        .withEnv(\"ZEEBE_BROKER_NETWORK_HOST\", \"0.0.0.0\")\n+        .withEnv(\"ZEEBE_BROKER_NETWORK_ADVERTISED_HOST\", hostName)\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_CLUSTERNAME\", \"zeebe-cluster\")\n+        .withEnv(\"ZEEBE_BROKER_DATA_SNAPSHOTPERIOD\", \"1m\")\n+        .withEnv(\"ZEEBE_BROKER_DATA_LOGSEGMENTSIZE\", \"1MB\")\n+        .withEnv(\"ZEEBE_BROKER_NETWORK_MAXMESSAGESIZE\", \"1MB\")\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_NODEID\", String.valueOf(index))\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_CLUSTERSIZE\", String.valueOf(clusterSize))\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_REPLICATIONFACTOR\", String.valueOf(clusterSize))\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_INITIALCONTACTPOINTS\", initialContactPoints)\n+        .withLogConsumer(new Slf4jLogConsumer(LOG))\n+        .withLogLevel(Level.DEBUG)\n+        .withDebug(false);\n+  }\n+\n+  private <T extends AutoCloseable> T withCloseable(final T closeable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMyOTU0MQ=="}, "originalCommit": {"oid": "22d5f9485ddb5f20194bb2ec7a566924b14c81dc"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzY5OTg1OnYy", "diffSide": "RIGHT", "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMjo0NzowOVrOGxSGjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMjo0NzowOVrOGxSGjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMyOTk5OQ==", "bodyText": "Is this necessary always? It's really only useful when debugging, no? And the container state rule should output logs of containers when the test fails, so we probably only need that.", "url": "https://github.com/camunda-cloud/zeebe/pull/4964#discussion_r454329999", "createdAt": "2020-07-14T12:47:09Z", "author": {"login": "npepinpe"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.test;\n+\n+import io.zeebe.containers.ZeebeBrokerContainer;\n+import io.zeebe.containers.ZeebeContainer;\n+import io.zeebe.containers.ZeebePort;\n+import io.zeebe.test.util.AutoCloseableRule;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.event.Level;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.lifecycle.Startables;\n+\n+public class RollingUpdateTest {\n+  private static final Logger LOG = LoggerFactory.getLogger(ContainerStateRule.class);\n+  private static final String OLD_VERSION = \"0.23.3\";\n+  private static final String CURRENT_VERSION = \"current-test\";\n+\n+  @Rule public AutoCloseableRule autoCloseable = new AutoCloseableRule();\n+\n+  private List<ZeebeBrokerContainer> containers;\n+  private String initialContactPoints;\n+  private Network network;\n+  private ZeebeContainer nodeZeroContainer;\n+\n+  @Before\n+  public void setup() {\n+    initialContactPoints =\n+        IntStream.range(0, 3)\n+            .mapToObj(id -> \"broker-\" + id + \":\" + ZeebePort.INTERNAL_API.getPort())\n+            .collect(Collectors.joining(\",\"));\n+\n+    network = Network.newNetwork();\n+\n+    containers =\n+        Arrays.asList(\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)),\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)),\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)));\n+    getConfiguredClusterBroker(0, containers);\n+\n+    nodeZeroContainer = getConfiguredClusterBroker(0, containers);\n+    getConfiguredClusterBroker(1, containers);\n+    getConfiguredClusterBroker(2, containers);\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToRestartContainerWithSameVersion() {\n+    // given\n+    final var index = 0;\n+    final var sameVersion = OLD_VERSION;\n+    Startables.deepStart(containers).join();\n+    nodeZeroContainer.shutdownGracefully(Duration.ofSeconds(30));\n+\n+    // when\n+    final var zeebeBrokerContainer = replaceBrokerContainer(index, sameVersion);\n+\n+    // then\n+    zeebeBrokerContainer.start();\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToRestartContainerWithNewVersion() {\n+    // given\n+    final var index = 0;\n+    final var newVersion = CURRENT_VERSION;\n+    Startables.deepStart(containers).join();\n+    nodeZeroContainer.shutdownGracefully(Duration.ofSeconds(30));\n+\n+    // when\n+    final var zeebeBrokerContainer = replaceBrokerContainer(index, newVersion);\n+\n+    // then\n+    zeebeBrokerContainer.start();\n+  }\n+\n+  private ZeebeBrokerContainer replaceBrokerContainer(final int index, final String newVersion) {\n+    final var broker = new ZeebeBrokerContainer(newVersion);\n+    containers.set(index, broker);\n+    nodeZeroContainer = getConfiguredClusterBroker(index, containers);\n+    return broker;\n+  }\n+\n+  private ZeebeBrokerContainer getConfiguredClusterBroker(\n+      final int index, final List<ZeebeBrokerContainer> brokers) {\n+    final int clusterSize = brokers.size();\n+    final var broker = brokers.get(index);\n+    final var hostName = \"broker-\" + index;\n+    broker.withNetworkAliases(hostName);\n+\n+    return broker\n+        .withNetwork(network)\n+        .withEnv(\"ZEEBE_BROKER_NETWORK_HOST\", \"0.0.0.0\")\n+        .withEnv(\"ZEEBE_BROKER_NETWORK_ADVERTISED_HOST\", hostName)\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_CLUSTERNAME\", \"zeebe-cluster\")\n+        .withEnv(\"ZEEBE_BROKER_DATA_SNAPSHOTPERIOD\", \"1m\")\n+        .withEnv(\"ZEEBE_BROKER_DATA_LOGSEGMENTSIZE\", \"1MB\")\n+        .withEnv(\"ZEEBE_BROKER_NETWORK_MAXMESSAGESIZE\", \"1MB\")\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_NODEID\", String.valueOf(index))\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_CLUSTERSIZE\", String.valueOf(clusterSize))\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_REPLICATIONFACTOR\", String.valueOf(clusterSize))\n+        .withEnv(\"ZEEBE_BROKER_CLUSTER_INITIALCONTACTPOINTS\", initialContactPoints)\n+        .withLogConsumer(new Slf4jLogConsumer(LOG))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22d5f9485ddb5f20194bb2ec7a566924b14c81dc"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzcwMzA0OnYy", "diffSide": "RIGHT", "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMjo0ODowN1rOGxSIhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMjo0ODowN1rOGxSIhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDMzMDUwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                nodeZeroContainer = getConfiguredClusterBroker(index, containers);\n          \n          \n            \n                newContainer = getConfiguredClusterBroker(index, containers);\n          \n      \n    \n    \n  \n\nnodeZeroContainer made it sound like index should always be 0 \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/4964#discussion_r454330503", "createdAt": "2020-07-14T12:48:07Z", "author": {"login": "npepinpe"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/RollingUpdateTest.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.test;\n+\n+import io.zeebe.containers.ZeebeBrokerContainer;\n+import io.zeebe.containers.ZeebeContainer;\n+import io.zeebe.containers.ZeebePort;\n+import io.zeebe.test.util.AutoCloseableRule;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.slf4j.event.Level;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+import org.testcontainers.lifecycle.Startables;\n+\n+public class RollingUpdateTest {\n+  private static final Logger LOG = LoggerFactory.getLogger(ContainerStateRule.class);\n+  private static final String OLD_VERSION = \"0.23.3\";\n+  private static final String CURRENT_VERSION = \"current-test\";\n+\n+  @Rule public AutoCloseableRule autoCloseable = new AutoCloseableRule();\n+\n+  private List<ZeebeBrokerContainer> containers;\n+  private String initialContactPoints;\n+  private Network network;\n+  private ZeebeContainer nodeZeroContainer;\n+\n+  @Before\n+  public void setup() {\n+    initialContactPoints =\n+        IntStream.range(0, 3)\n+            .mapToObj(id -> \"broker-\" + id + \":\" + ZeebePort.INTERNAL_API.getPort())\n+            .collect(Collectors.joining(\",\"));\n+\n+    network = Network.newNetwork();\n+\n+    containers =\n+        Arrays.asList(\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)),\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)),\n+            withCloseable(new ZeebeBrokerContainer(OLD_VERSION)));\n+    getConfiguredClusterBroker(0, containers);\n+\n+    nodeZeroContainer = getConfiguredClusterBroker(0, containers);\n+    getConfiguredClusterBroker(1, containers);\n+    getConfiguredClusterBroker(2, containers);\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToRestartContainerWithSameVersion() {\n+    // given\n+    final var index = 0;\n+    final var sameVersion = OLD_VERSION;\n+    Startables.deepStart(containers).join();\n+    nodeZeroContainer.shutdownGracefully(Duration.ofSeconds(30));\n+\n+    // when\n+    final var zeebeBrokerContainer = replaceBrokerContainer(index, sameVersion);\n+\n+    // then\n+    zeebeBrokerContainer.start();\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToRestartContainerWithNewVersion() {\n+    // given\n+    final var index = 0;\n+    final var newVersion = CURRENT_VERSION;\n+    Startables.deepStart(containers).join();\n+    nodeZeroContainer.shutdownGracefully(Duration.ofSeconds(30));\n+\n+    // when\n+    final var zeebeBrokerContainer = replaceBrokerContainer(index, newVersion);\n+\n+    // then\n+    zeebeBrokerContainer.start();\n+  }\n+\n+  private ZeebeBrokerContainer replaceBrokerContainer(final int index, final String newVersion) {\n+    final var broker = new ZeebeBrokerContainer(newVersion);\n+    containers.set(index, broker);\n+    nodeZeroContainer = getConfiguredClusterBroker(index, containers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22d5f9485ddb5f20194bb2ec7a566924b14c81dc"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 450, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}