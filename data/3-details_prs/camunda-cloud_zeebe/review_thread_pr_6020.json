{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMzMyNzM0", "number": 6020, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwOToyNToxM1rOFGm5_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwOToyNzo0OVrOFGm-2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDczMjEzOnYy", "diffSide": "RIGHT", "path": "Jenkinsfile", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwOToyNToxNFrOIHsO3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwOTo0NTo0MVrOIHtGhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkzNTY0Nw==", "bodyText": "Do we want to run test coverage for integration tests? I find this approach rather unusual.\nNormally, code coverage is recorded for unit tests primarily. Because for unit tests the code being executed is often the code being testen.\nFor integration tests, there is so much code being executed during a test that the code coverage metric becomes less useful.", "url": "https://github.com/camunda-cloud/zeebe/pull/6020#discussion_r544935647", "createdAt": "2020-12-17T09:25:14Z", "author": {"login": "pihme"}, "path": "Jenkinsfile", "diffHunk": "@@ -234,6 +250,13 @@ pipeline {\n                             post {\n                                 always {\n                                     junit testResults: \"**/*/TEST*${SUREFIRE_REPORT_NAME_SUFFIX}*.xml\", keepLongStdio: true\n+                                    stash allowEmpty: true, name: itJacocoStashName, includes: '**/*.exec'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840220f6688f7d96ba8d59901c8e75611088e643"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk0OTg5Mw==", "bodyText": "Actually I agree, it's simply that I wanted to restore the previous state (where we would've been running code coverage for integration tests). If we don't want this we should disable jacoco for the integration tests. I'm happy to do this as well, it should be just a simple addition in the IT module.", "url": "https://github.com/camunda-cloud/zeebe/pull/6020#discussion_r544949893", "createdAt": "2020-12-17T09:45:41Z", "author": {"login": "npepinpe"}, "path": "Jenkinsfile", "diffHunk": "@@ -234,6 +250,13 @@ pipeline {\n                             post {\n                                 always {\n                                     junit testResults: \"**/*/TEST*${SUREFIRE_REPORT_NAME_SUFFIX}*.xml\", keepLongStdio: true\n+                                    stash allowEmpty: true, name: itJacocoStashName, includes: '**/*.exec'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkzNTY0Nw=="}, "originalCommit": {"oid": "840220f6688f7d96ba8d59901c8e75611088e643"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNDc0NDU3OnYy", "diffSide": "RIGHT", "path": "Jenkinsfile", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QwOToyNzo0OVrOIHsWKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMDowMzoyOVrOIHt2jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkzNzUxMw==", "bodyText": "Question for my understanding:\nWhy do we need to stash these files for IT tests, but not for the other tests? Or in other words, how can I know for which agent I need to stash/unstash things and for which I don't need it?\nIs there same way we can make this clearer, e.g. by given the agents different names?", "url": "https://github.com/camunda-cloud/zeebe/pull/6020#discussion_r544937513", "createdAt": "2020-12-17T09:27:49Z", "author": {"login": "pihme"}, "path": "Jenkinsfile", "diffHunk": "@@ -234,6 +250,13 @@ pipeline {\n                             post {\n                                 always {\n                                     junit testResults: \"**/*/TEST*${SUREFIRE_REPORT_NAME_SUFFIX}*.xml\", keepLongStdio: true\n+                                    stash allowEmpty: true, name: itJacocoStashName, includes: '**/*.exec'\n+                                }\n+\n+                                failure {\n+                                    zip zipFile: 'test-reports-it.zip', archive: true, glob: \"**/*/surefire-reports/**\"\n+                                    zip zipFile: 'test-errors-it.zip', archive: true, glob: \"**/hs_err_*.log\"\n+                                    stash allowEmpty: true, name: itFlakyTestStashName, includes: '**/FlakyTests.txt'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "840220f6688f7d96ba8d59901c8e75611088e643"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk1ODI1MQ==", "bodyText": "At the beginning of the pipeline, we define an agent:\nhttps://github.com/zeebe-io/zeebe/blob/9c7aa2cf9813e10dd7ddba65a8495bc94d7d5b0b/Jenkinsfile#L22-L30\nThis becomes our main/default agent for all stages, pre/post phases, etc. Everything in the pipeline, unless otherwise specified, runs in the main agent and thus shares the same workspace.\nYou can execute certain stages/steps in a different agent. To do this, in the stage, you need to explicitly say that you will use a different agent, e.g.:\nhttps://github.com/zeebe-io/zeebe/blob/9c7aa2cf9813e10dd7ddba65a8495bc94d7d5b0b/Jenkinsfile#L183-L191\nWhile you can't associate an agent block to a variable in a Groovy pipeline (unfortunately - I tried! although who knows, maybe I didn't do it well), they do have a name, or at least an ID - the label property of the agent. It will start a pod with that label and name, so you can use that to debug/introspect it with k8s. Note that if an agent with that label already exists, it will simply be reused (regardless of the podSpec). However, keep in mind that agents (Except the main one) are not kept around between stages, so you would always have a fresh workspace if you were specifying it in multiple places.\nEverything in that stage (so any nested stages/steps) will be executed on that agent, which has its own workspace. Workspaces are completely isolated from each other (as are agents), so any modifications done in one are not reflected in the others. This means, building the distribution in the main agent would only build it there, or running flaky tests analysis would only produce a FlakyTests.txt file in the agent where you ran the analysis.\nFinally, if you have a stage A which contains a nested stage B, where A is executed in the main agent and B is executed in a different agent, the post phase of A will be executed in the same agent as A, so it will only have access to that workspace. So if you want to see results from B (e.g. FlakyTests.txt), you need to copy it over to the workspace of A.\nSo to answer your question of how you know which agent you need to stash/unstash, it depends on what you want to do. Ideally the agents are entirely independent and we don't need to, but as you saw there's some cases where we want to share build artefacts (e.g. the distro, the FlakyTests.txt file, etc.).\nHope that helps!", "url": "https://github.com/camunda-cloud/zeebe/pull/6020#discussion_r544958251", "createdAt": "2020-12-17T09:57:47Z", "author": {"login": "npepinpe"}, "path": "Jenkinsfile", "diffHunk": "@@ -234,6 +250,13 @@ pipeline {\n                             post {\n                                 always {\n                                     junit testResults: \"**/*/TEST*${SUREFIRE_REPORT_NAME_SUFFIX}*.xml\", keepLongStdio: true\n+                                    stash allowEmpty: true, name: itJacocoStashName, includes: '**/*.exec'\n+                                }\n+\n+                                failure {\n+                                    zip zipFile: 'test-reports-it.zip', archive: true, glob: \"**/*/surefire-reports/**\"\n+                                    zip zipFile: 'test-errors-it.zip', archive: true, glob: \"**/hs_err_*.log\"\n+                                    stash allowEmpty: true, name: itFlakyTestStashName, includes: '**/FlakyTests.txt'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkzNzUxMw=="}, "originalCommit": {"oid": "840220f6688f7d96ba8d59901c8e75611088e643"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDk2MjE4OQ==", "bodyText": "I've added a comment which I hope explains a bit better what I just wrote.", "url": "https://github.com/camunda-cloud/zeebe/pull/6020#discussion_r544962189", "createdAt": "2020-12-17T10:03:29Z", "author": {"login": "npepinpe"}, "path": "Jenkinsfile", "diffHunk": "@@ -234,6 +250,13 @@ pipeline {\n                             post {\n                                 always {\n                                     junit testResults: \"**/*/TEST*${SUREFIRE_REPORT_NAME_SUFFIX}*.xml\", keepLongStdio: true\n+                                    stash allowEmpty: true, name: itJacocoStashName, includes: '**/*.exec'\n+                                }\n+\n+                                failure {\n+                                    zip zipFile: 'test-reports-it.zip', archive: true, glob: \"**/*/surefire-reports/**\"\n+                                    zip zipFile: 'test-errors-it.zip', archive: true, glob: \"**/hs_err_*.log\"\n+                                    stash allowEmpty: true, name: itFlakyTestStashName, includes: '**/FlakyTests.txt'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDkzNzUxMw=="}, "originalCommit": {"oid": "840220f6688f7d96ba8d59901c8e75611088e643"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 45, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}