{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNDU5NTk2", "number": 5421, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMTo0NDowMFrOEna_xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzo0Nzo1NlrOEoacMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzcyMjI4OnYy", "diffSide": "LEFT", "path": "engine/src/test/java/io/zeebe/engine/processing/timer/ConcurrentTimerEventTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMTo0NDowMFrOHYAPtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMTo0NDowMFrOHYAPtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMTg5NQ==", "bodyText": "This test failed with the detection. Here it is missing the CANCEL command for the timer. But adding the command would lead to a different rejecting reason of the TRIGGER command (NOT_FOUND instead of INVALID_STATE). So, I removed the follow-up event ELEMENT_TERMINATED.", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r494931895", "createdAt": "2020-09-25T11:44:00Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processing/timer/ConcurrentTimerEventTest.java", "diffHunk": "@@ -152,10 +152,6 @@ public void shouldRejectTriggerCommandIfElementInstanceIsLeft() {\n             .workflowInstance(WorkflowInstanceIntent.ELEMENT_TERMINATING, eventActivated.getValue())\n             .key(eventActivated.getKey())\n             .causedBy(1),\n-        RecordToWrite.event()\n-            .workflowInstance(WorkflowInstanceIntent.ELEMENT_TERMINATED, eventActivated.getValue())\n-            .key(eventActivated.getKey())\n-            .causedBy(2),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a8ecc091be542c08f2a62a3af6f985b09bf3cb3"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzcyNjkyOnYy", "diffSide": "RIGHT", "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMTo0NTozNFrOHYASkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzo0MDo1NFrOHZe6-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMjYyNg==", "bodyText": "I added the test case for the next release. I was also useful to verify that the issue is detected :)", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r494932626", "createdAt": "2020-09-25T11:45:34Z", "author": {"login": "saig0"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "diffHunk": "@@ -101,6 +101,42 @@\n                 .afterUpgrade(UpgradeTest::publishMessage)\n                 .done()\n           },\n+          // TODO (saig0): enable the test case when upgrading from 0.25.0\n+          // - an upgrade from 0.24.0 is not possible because a bug fix (#4959) causes an issue in\n+          // the reprocessing (#5268)\n+          //            {\n+          //            \"message event sub-process\",\n+          //            scenario()\n+          //                .deployWorkflow(\n+          //                    Bpmn.createExecutableProcess(PROCESS_ID)\n+          //                        .eventSubProcess(\n+          //                            \"event-subprocess\",\n+          //                            eventSubProcess ->\n+          //                                eventSubProcess\n+          //                                    .startEvent()\n+          //                                    .message(\n+          //                                        m ->\n+          // m.name(MESSAGE).zeebeCorrelationKeyExpression(\"key\"))\n+          //                                    .interrupting(false)\n+          //                                    .endEvent())\n+          //                        .startEvent()\n+          //                        .serviceTask(TASK, t -> t.zeebeJobType(TASK))\n+          //                        .endEvent()\n+          //                        .done())\n+          //                .createInstance(Map.of(\"key\", \"123\"))\n+          //                .beforeUpgrade(\n+          //                    state -> {\n+          //                      publishMessage(state, -1L, -1L);\n+          //\n+          //                      TestUtil.waitUntil(\n+          //                          () -> state.hasElementInState(\"event-subprocess\",\n+          // \"ELEMENT_COMPLETED\"));\n+          //\n+          //                      return activateJob(state);\n+          //                    })\n+          //                .afterUpgrade(UpgradeTest::completeJob)\n+          //                .done()\n+          //          },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a8ecc091be542c08f2a62a3af6f985b09bf3cb3"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ4MzA2NQ==", "bodyText": "How do we remind ourselves to enable this? :)", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496483065", "createdAt": "2020-09-29T07:40:54Z", "author": {"login": "deepthidevaki"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "diffHunk": "@@ -101,6 +101,42 @@\n                 .afterUpgrade(UpgradeTest::publishMessage)\n                 .done()\n           },\n+          // TODO (saig0): enable the test case when upgrading from 0.25.0\n+          // - an upgrade from 0.24.0 is not possible because a bug fix (#4959) causes an issue in\n+          // the reprocessing (#5268)\n+          //            {\n+          //            \"message event sub-process\",\n+          //            scenario()\n+          //                .deployWorkflow(\n+          //                    Bpmn.createExecutableProcess(PROCESS_ID)\n+          //                        .eventSubProcess(\n+          //                            \"event-subprocess\",\n+          //                            eventSubProcess ->\n+          //                                eventSubProcess\n+          //                                    .startEvent()\n+          //                                    .message(\n+          //                                        m ->\n+          // m.name(MESSAGE).zeebeCorrelationKeyExpression(\"key\"))\n+          //                                    .interrupting(false)\n+          //                                    .endEvent())\n+          //                        .startEvent()\n+          //                        .serviceTask(TASK, t -> t.zeebeJobType(TASK))\n+          //                        .endEvent()\n+          //                        .done())\n+          //                .createInstance(Map.of(\"key\", \"123\"))\n+          //                .beforeUpgrade(\n+          //                    state -> {\n+          //                      publishMessage(state, -1L, -1L);\n+          //\n+          //                      TestUtil.waitUntil(\n+          //                          () -> state.hasElementInState(\"event-subprocess\",\n+          // \"ELEMENT_COMPLETED\"));\n+          //\n+          //                      return activateJob(state);\n+          //                    })\n+          //                .afterUpgrade(UpgradeTest::completeJob)\n+          //                .done()\n+          //          },", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMjYyNg=="}, "originalCommit": {"oid": "3a8ecc091be542c08f2a62a3af6f985b09bf3cb3"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzcyOTM4OnYy", "diffSide": "RIGHT", "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMTo0NjoyN1rOHYAUGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMTo0NjoyN1rOHYAUGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzMzAxOQ==", "bodyText": "I ignored the test cases with a snapshot because they're not working.", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r494933019", "createdAt": "2020-09-25T11:46:27Z", "author": {"login": "saig0"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "diffHunk": "@@ -194,33 +271,56 @@ public void oldGatewayWithNewBroker() {\n     TestUtil.waitUntil(() -> state.hasElementInState(PROCESS_ID, \"ELEMENT_COMPLETED\"));\n   }\n \n+  @Ignore(\"https://github.com/zeebe-io/zeebe/issues/5385\")\n   @Test\n   public void upgradeWithSnapshot() {\n-    upgradeZeebe(false);\n+    upgradeZeebe(true);\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a8ecc091be542c08f2a62a3af6f985b09bf3cb3"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzczOTcyOnYy", "diffSide": "RIGHT", "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMTo0OTo1OFrOHYAaTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMTo0OTo1OFrOHYAaTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkzNDYwNA==", "bodyText": "I ignored the snapshot case but I still want to add my changes here. They work for some of the cases but not for all of them. But it is something we can start \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r494934604", "createdAt": "2020-09-25T11:49:58Z", "author": {"login": "saig0"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "diffHunk": "@@ -194,33 +271,56 @@ public void oldGatewayWithNewBroker() {\n     TestUtil.waitUntil(() -> state.hasElementInState(PROCESS_ID, \"ELEMENT_COMPLETED\"));\n   }\n \n+  @Ignore(\"https://github.com/zeebe-io/zeebe/issues/5385\")\n   @Test\n   public void upgradeWithSnapshot() {\n-    upgradeZeebe(false);\n+    upgradeZeebe(true);\n   }\n \n   @Test\n   public void upgradeWithoutSnapshot() {\n-    upgradeZeebe(true);\n+    upgradeZeebe(false);\n   }\n \n-  private void upgradeZeebe(final boolean deleteSnapshot) {\n+  private void upgradeZeebe(final boolean withSnapshot) {\n     // given\n-    state.broker(LAST_VERSION, tmpFolder.getRoot().getPath()).start();\n+    state.broker(LAST_VERSION, tmpFolder.getRoot().getPath()).start(true);\n     final long wfInstanceKey = testCase.setUp(state.client());\n     final long key = testCase.runBefore(state);\n \n     // when\n-    state.close();\n     final File snapshot = new File(tmpFolder.getRoot(), \"raft-partition/partitions/1/snapshots/\");\n \n-    assertThat(snapshot).exists();\n-    if (deleteSnapshot) {\n-      Files.delete(snapshot);\n+    if (withSnapshot) {\n+\n+      state.close();\n+\n+      state.broker(LAST_VERSION, tmpFolder.getRoot().getPath()).start(false);\n+\n+      // since 0.24, no snapshot is created when the broker is closed\n+      Awaitility.await()\n+          .atMost(Duration.ofMinutes(2))\n+          .untilAsserted(\n+              () ->\n+                  assertThat(snapshot)\n+                      .describedAs(\"Expected that a snapshot is created\")\n+                      .exists()\n+                      .isNotEmptyDirectory());\n+\n+      state.close();\n+\n+    } else {\n+      // since 0.24, no snapshot is created when the broker is closed\n+      state.close();\n+\n+      assertThat(snapshot)\n+          .describedAs(\"Expected that no snapshot is created\")\n+          .exists()\n+          .isEmptyDirectory();\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a8ecc091be542c08f2a62a3af6f985b09bf3cb3"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzg5ODcxOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNjo0NTowOFrOHZdHkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODoxNjozNFrOHZgyhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1MzUyMQ==", "bodyText": "What if there is no such record?", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496453521", "createdAt": "2020-09-29T06:45:08Z", "author": {"login": "deepthidevaki"}, "path": "engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java", "diffHunk": "@@ -342,4 +370,54 @@ private void onRecovered(final long lastProcessedPosition) {\n     recoveryFuture.complete(lastProcessedPosition);\n     failedEventPositions.clear();\n   }\n+\n+  private void verifyRecordMatchesToReprocessing(final TypedRecord<?> currentEvent) {\n+\n+    if (currentEvent.getSourceRecordPosition() < 0\n+        || currentEvent.getSourceRecordPosition() <= snapshotPosition) {\n+      // ignore commands (i.e. no source currentEvent position) and records that are not produced by\n+      // the reprocessing (i.e. the source currentEvent is already compacted)\n+      return;\n+    }\n+\n+    // if a record is not written to the log stream then the state could be corrupted\n+    reprocessingStreamWriter.getRecords().stream()\n+        .filter(record -> record.getSourceRecordPosition() < currentEvent.getSourceRecordPosition())\n+        .findFirst()\n+        .ifPresent(\n+            missingRecordOnLogStream -> {\n+              throw new InconsistentReprocessingException(\n+                  \"Records were created on reprocessing but not written on the log stream.\",\n+                  typedEvent,\n+                  missingRecordOnLogStream);\n+            });\n+\n+    // If the record was not written on reprocessing then the next record may have a different key,\n+    // or the state is corrupted. But since the source record position can be wrong (#5420), we can\n+    // not fail the reprocessing at the moment.\n+\n+    reprocessingStreamWriter.getRecords().stream()\n+        .filter(\n+            record -> record.getSourceRecordPosition() == currentEvent.getSourceRecordPosition())\n+        .findFirst()\n+        .ifPresent(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b26061e0bbe7b1eb536a58bcd29d612a5810e1d"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUxMzY2OQ==", "bodyText": "If there was no such record written on reprocessing then we can't apply any check \ud83d\ude05\nBecause of #5420, we can not fail and assume that something went wrong.", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496513669", "createdAt": "2020-09-29T08:16:34Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java", "diffHunk": "@@ -342,4 +370,54 @@ private void onRecovered(final long lastProcessedPosition) {\n     recoveryFuture.complete(lastProcessedPosition);\n     failedEventPositions.clear();\n   }\n+\n+  private void verifyRecordMatchesToReprocessing(final TypedRecord<?> currentEvent) {\n+\n+    if (currentEvent.getSourceRecordPosition() < 0\n+        || currentEvent.getSourceRecordPosition() <= snapshotPosition) {\n+      // ignore commands (i.e. no source currentEvent position) and records that are not produced by\n+      // the reprocessing (i.e. the source currentEvent is already compacted)\n+      return;\n+    }\n+\n+    // if a record is not written to the log stream then the state could be corrupted\n+    reprocessingStreamWriter.getRecords().stream()\n+        .filter(record -> record.getSourceRecordPosition() < currentEvent.getSourceRecordPosition())\n+        .findFirst()\n+        .ifPresent(\n+            missingRecordOnLogStream -> {\n+              throw new InconsistentReprocessingException(\n+                  \"Records were created on reprocessing but not written on the log stream.\",\n+                  typedEvent,\n+                  missingRecordOnLogStream);\n+            });\n+\n+    // If the record was not written on reprocessing then the next record may have a different key,\n+    // or the state is corrupted. But since the source record position can be wrong (#5420), we can\n+    // not fail the reprocessing at the moment.\n+\n+    reprocessingStreamWriter.getRecords().stream()\n+        .filter(\n+            record -> record.getSourceRecordPosition() == currentEvent.getSourceRecordPosition())\n+        .findFirst()\n+        .ifPresent(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ1MzUyMQ=="}, "originalCommit": {"oid": "9b26061e0bbe7b1eb536a58bcd29d612a5810e1d"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzk0NTQzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzowMDowOFrOHZdj1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTowNjoxM1rOHZji0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2MDc1Ng==", "bodyText": "Here the error message still says  \"source event\".", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496460756", "createdAt": "2020-09-29T07:00:08Z", "author": {"login": "deepthidevaki"}, "path": "engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java", "diffHunk": "@@ -211,11 +220,11 @@ private void readNextEvent() {\n     }\n \n     currentEvent = logStreamReader.next();\n-    if (currentEvent.getPosition() > lastSourceEventPosition) {\n+    if (currentEvent.getPosition() > lastFollowUpEventPosition) {\n       throw new IllegalStateException(\n           String.format(\n               ERROR_MESSAGE_REPROCESSING_NO_SOURCE_EVENT,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b26061e0bbe7b1eb536a58bcd29d612a5810e1d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUxNjA3OQ==", "bodyText": "True. I can change it to \"Expected to find last follow-up event position '%d', but last position was '%d'. Failed to reprocess on processor\"", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496516079", "createdAt": "2020-09-29T08:18:44Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java", "diffHunk": "@@ -211,11 +220,11 @@ private void readNextEvent() {\n     }\n \n     currentEvent = logStreamReader.next();\n-    if (currentEvent.getPosition() > lastSourceEventPosition) {\n+    if (currentEvent.getPosition() > lastFollowUpEventPosition) {\n       throw new IllegalStateException(\n           String.format(\n               ERROR_MESSAGE_REPROCESSING_NO_SOURCE_EVENT,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2MDc1Ng=="}, "originalCommit": {"oid": "9b26061e0bbe7b1eb536a58bcd29d612a5810e1d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1ODgwMg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496558802", "createdAt": "2020-09-29T09:06:13Z", "author": {"login": "deepthidevaki"}, "path": "engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java", "diffHunk": "@@ -211,11 +220,11 @@ private void readNextEvent() {\n     }\n \n     currentEvent = logStreamReader.next();\n-    if (currentEvent.getPosition() > lastSourceEventPosition) {\n+    if (currentEvent.getPosition() > lastFollowUpEventPosition) {\n       throw new IllegalStateException(\n           String.format(\n               ERROR_MESSAGE_REPROCESSING_NO_SOURCE_EVENT,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ2MDc1Ng=="}, "originalCommit": {"oid": "9b26061e0bbe7b1eb536a58bcd29d612a5810e1d"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODA3OTYzOnYy", "diffSide": "RIGHT", "path": "engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzozNzo0OVrOHZe0NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODoxMzozOVrOHZgmAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ4MTMzMw==", "bodyText": "Is this log required? Previous log says it was successfully reprocessed.", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496481333", "createdAt": "2020-09-29T07:37:49Z", "author": {"login": "deepthidevaki"}, "path": "engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java", "diffHunk": "@@ -330,8 +348,18 @@ private void updateStateUntilDone() {\n   }\n \n   private void onRecordReprocessed(final LoggedEvent currentEvent) {\n-    if (currentEvent.getPosition() == lastSourceEventPosition) {\n+    reprocessingStreamWriter.removeRecord(\n+        currentEvent.getKey(), currentEvent.getSourceEventPosition());\n+\n+    // do reprocessing until the last source event but read until the last follow-up event to check\n+    // for inconsistent reprocessing records\n+    if (currentEvent.getPosition() >= lastFollowUpEventPosition) {\n       LOG.info(LOG_STMT_REPROCESSING_FINISHED, currentEvent.getPosition());\n+      LOG.debug(\"No reprocessing issue detected on partition {}.\", zeebeState.getPartitionId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b26061e0bbe7b1eb536a58bcd29d612a5810e1d"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUxMDQ2Nw==", "bodyText": "It is not required. I thought it is more explicit but I can also remove it.", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496510467", "createdAt": "2020-09-29T08:13:39Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processing/streamprocessor/ReProcessingStateMachine.java", "diffHunk": "@@ -330,8 +348,18 @@ private void updateStateUntilDone() {\n   }\n \n   private void onRecordReprocessed(final LoggedEvent currentEvent) {\n-    if (currentEvent.getPosition() == lastSourceEventPosition) {\n+    reprocessingStreamWriter.removeRecord(\n+        currentEvent.getKey(), currentEvent.getSourceEventPosition());\n+\n+    // do reprocessing until the last source event but read until the last follow-up event to check\n+    // for inconsistent reprocessing records\n+    if (currentEvent.getPosition() >= lastFollowUpEventPosition) {\n       LOG.info(LOG_STMT_REPROCESSING_FINISHED, currentEvent.getPosition());\n+      LOG.debug(\"No reprocessing issue detected on partition {}.\", zeebeState.getPartitionId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ4MTMzMw=="}, "originalCommit": {"oid": "9b26061e0bbe7b1eb536a58bcd29d612a5810e1d"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwODExNjk5OnYy", "diffSide": "RIGHT", "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwNzo0Nzo1NlrOHZfK8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMToyNDo0OVrOHZogsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ4NzE1NA==", "bodyText": "This looks like a temp fix for #5385. Then why don't the tests works with snapshot?", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496487154", "createdAt": "2020-09-29T07:47:56Z", "author": {"login": "deepthidevaki"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "diffHunk": "@@ -194,33 +271,56 @@ public void oldGatewayWithNewBroker() {\n     TestUtil.waitUntil(() -> state.hasElementInState(PROCESS_ID, \"ELEMENT_COMPLETED\"));\n   }\n \n+  @Ignore(\"https://github.com/zeebe-io/zeebe/issues/5385\")\n   @Test\n   public void upgradeWithSnapshot() {\n-    upgradeZeebe(false);\n+    upgradeZeebe(true);\n   }\n \n   @Test\n   public void upgradeWithoutSnapshot() {\n-    upgradeZeebe(true);\n+    upgradeZeebe(false);\n   }\n \n-  private void upgradeZeebe(final boolean deleteSnapshot) {\n+  private void upgradeZeebe(final boolean withSnapshot) {\n     // given\n-    state.broker(LAST_VERSION, tmpFolder.getRoot().getPath()).start();\n+    state.broker(LAST_VERSION, tmpFolder.getRoot().getPath()).start(true);\n     final long wfInstanceKey = testCase.setUp(state.client());\n     final long key = testCase.runBefore(state);\n \n     // when\n-    state.close();\n     final File snapshot = new File(tmpFolder.getRoot(), \"raft-partition/partitions/1/snapshots/\");\n \n-    assertThat(snapshot).exists();\n-    if (deleteSnapshot) {\n-      Files.delete(snapshot);\n+    if (withSnapshot) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b26061e0bbe7b1eb536a58bcd29d612a5810e1d"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjUzNTYxNA==", "bodyText": "In some cases, the broker creates no snapshot. It prints the message: We will skip taking this snapshot, because we haven't processed something yet..", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496535614", "createdAt": "2020-09-29T08:36:41Z", "author": {"login": "saig0"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "diffHunk": "@@ -194,33 +271,56 @@ public void oldGatewayWithNewBroker() {\n     TestUtil.waitUntil(() -> state.hasElementInState(PROCESS_ID, \"ELEMENT_COMPLETED\"));\n   }\n \n+  @Ignore(\"https://github.com/zeebe-io/zeebe/issues/5385\")\n   @Test\n   public void upgradeWithSnapshot() {\n-    upgradeZeebe(false);\n+    upgradeZeebe(true);\n   }\n \n   @Test\n   public void upgradeWithoutSnapshot() {\n-    upgradeZeebe(true);\n+    upgradeZeebe(false);\n   }\n \n-  private void upgradeZeebe(final boolean deleteSnapshot) {\n+  private void upgradeZeebe(final boolean withSnapshot) {\n     // given\n-    state.broker(LAST_VERSION, tmpFolder.getRoot().getPath()).start();\n+    state.broker(LAST_VERSION, tmpFolder.getRoot().getPath()).start(true);\n     final long wfInstanceKey = testCase.setUp(state.client());\n     final long key = testCase.runBefore(state);\n \n     // when\n-    state.close();\n     final File snapshot = new File(tmpFolder.getRoot(), \"raft-partition/partitions/1/snapshots/\");\n \n-    assertThat(snapshot).exists();\n-    if (deleteSnapshot) {\n-      Files.delete(snapshot);\n+    if (withSnapshot) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ4NzE1NA=="}, "originalCommit": {"oid": "9b26061e0bbe7b1eb536a58bcd29d612a5810e1d"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY0MDE3OQ==", "bodyText": "The snapshot is not created because of a bug in 0.24.0 that is fixed in a later version.", "url": "https://github.com/camunda-cloud/zeebe/pull/5421#discussion_r496640179", "createdAt": "2020-09-29T11:24:49Z", "author": {"login": "saig0"}, "path": "upgrade-tests/src/test/java/io/zeebe/test/UpgradeTest.java", "diffHunk": "@@ -194,33 +271,56 @@ public void oldGatewayWithNewBroker() {\n     TestUtil.waitUntil(() -> state.hasElementInState(PROCESS_ID, \"ELEMENT_COMPLETED\"));\n   }\n \n+  @Ignore(\"https://github.com/zeebe-io/zeebe/issues/5385\")\n   @Test\n   public void upgradeWithSnapshot() {\n-    upgradeZeebe(false);\n+    upgradeZeebe(true);\n   }\n \n   @Test\n   public void upgradeWithoutSnapshot() {\n-    upgradeZeebe(true);\n+    upgradeZeebe(false);\n   }\n \n-  private void upgradeZeebe(final boolean deleteSnapshot) {\n+  private void upgradeZeebe(final boolean withSnapshot) {\n     // given\n-    state.broker(LAST_VERSION, tmpFolder.getRoot().getPath()).start();\n+    state.broker(LAST_VERSION, tmpFolder.getRoot().getPath()).start(true);\n     final long wfInstanceKey = testCase.setUp(state.client());\n     final long key = testCase.runBefore(state);\n \n     // when\n-    state.close();\n     final File snapshot = new File(tmpFolder.getRoot(), \"raft-partition/partitions/1/snapshots/\");\n \n-    assertThat(snapshot).exists();\n-    if (deleteSnapshot) {\n-      Files.delete(snapshot);\n+    if (withSnapshot) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ4NzE1NA=="}, "originalCommit": {"oid": "9b26061e0bbe7b1eb536a58bcd29d612a5810e1d"}, "originalPosition": 141}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 274, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}