{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzMjAxNDI5", "number": 4603, "title": "Migrate intermediate catch event processor", "bodyText": "Description\nMigrate intermediate catch event processor.\nRelated issues\ncloses #4472", "createdAt": "2020-05-26T13:20:21Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4603", "merged": true, "mergeCommit": {"oid": "6ebad320bc8b93110a55db3a35c3fe0ba2fd5cef"}, "closed": true, "closedAt": "2020-05-28T07:31:44Z", "author": {"login": "korthout"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclFlrzAH2gAyNDIzMjAxNDI5OmM4ZTQwNTdmZDA2ZDc2MjlmMTIyYzMyMTQ4ZmQ3ODllMzNlODFjMGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclaLZyAH2gAyNDIzMjAxNDI5Ojk4ZDg0Y2UyYzc3ZDg5ZDU4MjQ1MGNlMDMxYjVkYjJjODNjYTY3ZDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c8e4057fd06d7629f122c32148fd789e33e81c0a", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/c8e4057fd06d7629f122c32148fd789e33e81c0a", "committedDate": "2020-05-26T14:31:58Z", "message": "chore(engine): refactor message name extraction move incident raising\n\nThis commit moves incident raising away from the expression processor\nand into the place where the the expression processor is being used."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f805726bc7f50ec080a93a6cbc43c9d4f4f142e7", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/f805726bc7f50ec080a93a6cbc43c9d4f4f142e7", "committedDate": "2020-05-26T13:18:57Z", "message": "chore(engine): migrate intermediate catch event processor"}, "afterCommit": {"oid": "98af34f729c3908e0aef300ef278f5313c58f2bd", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/98af34f729c3908e0aef300ef278f5313c58f2bd", "committedDate": "2020-05-26T14:32:46Z", "message": "chore(engine): migrate intermediate catch event processor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "98af34f729c3908e0aef300ef278f5313c58f2bd", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/98af34f729c3908e0aef300ef278f5313c58f2bd", "committedDate": "2020-05-26T14:32:46Z", "message": "chore(engine): migrate intermediate catch event processor"}, "afterCommit": {"oid": "701f0a5934d3a56b5886e2582d5e93877aa887d7", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/701f0a5934d3a56b5886e2582d5e93877aa887d7", "committedDate": "2020-05-26T14:45:21Z", "message": "chore(engine): migrate intermediate catch event processor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98a3d8e4378fba7267305520ef12a7c910cab0cf", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/98a3d8e4378fba7267305520ef12a7c910cab0cf", "committedDate": "2020-05-26T14:45:42Z", "message": "chore(engine): migrate intermediate catch event processor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "701f0a5934d3a56b5886e2582d5e93877aa887d7", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/701f0a5934d3a56b5886e2582d5e93877aa887d7", "committedDate": "2020-05-26T14:45:21Z", "message": "chore(engine): migrate intermediate catch event processor"}, "afterCommit": {"oid": "98a3d8e4378fba7267305520ef12a7c910cab0cf", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/98a3d8e4378fba7267305520ef12a7c910cab0cf", "committedDate": "2020-05-26T14:45:42Z", "message": "chore(engine): migrate intermediate catch event processor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4ODY0MTY4", "url": "https://github.com/camunda-cloud/zeebe/pull/4603#pullrequestreview-418864168", "createdAt": "2020-05-27T05:21:24Z", "commit": {"oid": "98a3d8e4378fba7267305520ef12a7c910cab0cf"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNToyMToyNFrOGa5yRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNTo1NTo0M1rOGa6aFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2MjkxOA==", "bodyText": "Should we discuss this point? Or, is everything clear? :)", "url": "https://github.com/camunda-cloud/zeebe/pull/4603#discussion_r430862918", "createdAt": "2020-05-27T05:21:24Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/handlers/CatchEventSubscriber.java", "diffHunk": "@@ -35,9 +35,10 @@ public CatchEventSubscriber(final CatchEventBehavior catchEventBehavior) {\n       context.raiseIncident(ErrorType.EXTRACT_VALUE_ERROR, e.getMessage());\n       return false;\n     } catch (final MessageNameException e) {\n-      // incident was already raised internally; processing was interrupted at the point the\n-      // exception was thrown; no further processing shall take place, that's why we return false\n-      // here\n+      // processing was interrupted at the point the exception was thrown; no further processing\n+      // shall take place, that's why we return false here\n+      // todo verify that this is the correct level to raise the incident at", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a3d8e4378fba7267305520ef12a7c910cab0cf"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2NzcwMA==", "bodyText": "Nope. An intermediate catch event may not have a boundary event attached to it \ud83d\ude01", "url": "https://github.com/camunda-cloud/zeebe/pull/4603#discussion_r430867700", "createdAt": "2020-05-27T05:38:15Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/event/IntermediateCatchEventProcessor.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.event;\n+\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.nwe.BpmnElementProcessor;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.behavior.BpmnEventSubscriptionBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnIncidentBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateTransitionBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnVariableMappingBehavior;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableCatchEventElement;\n+\n+public class IntermediateCatchEventProcessor\n+    implements BpmnElementProcessor<ExecutableCatchEventElement> {\n+\n+  private final BpmnEventSubscriptionBehavior eventSubscriptionBehavior;\n+  private final BpmnIncidentBehavior incidentBehavior;\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final BpmnVariableMappingBehavior variableMappingBehavior;\n+\n+  public IntermediateCatchEventProcessor(final BpmnBehaviors bpmnBehaviors) {\n+    eventSubscriptionBehavior = bpmnBehaviors.eventSubscriptionBehavior();\n+    incidentBehavior = bpmnBehaviors.incidentBehavior();\n+    stateBehavior = bpmnBehaviors.stateBehavior();\n+    stateTransitionBehavior = bpmnBehaviors.stateTransitionBehavior();\n+    variableMappingBehavior = bpmnBehaviors.variableMappingBehavior();\n+  }\n+\n+  @Override\n+  public Class<ExecutableCatchEventElement> getType() {\n+    return ExecutableCatchEventElement.class;\n+  }\n+\n+  @Override\n+  public void onActivating(\n+      final ExecutableCatchEventElement element, final BpmnElementContext context) {\n+    variableMappingBehavior\n+        .applyInputMappings(context, element)\n+        .flatMap(ok -> eventSubscriptionBehavior.subscribeToEvents(element, context))\n+        .ifRightOrLeft(\n+            ok -> stateTransitionBehavior.transitionToActivated(context),\n+            failure -> incidentBehavior.createIncident(failure, context));\n+  }\n+\n+  @Override\n+  public void onActivated(\n+      final ExecutableCatchEventElement element, final BpmnElementContext context) {\n+    if (element.isNone()) {\n+      stateTransitionBehavior.transitionToCompleting(context);\n+    }\n+  }\n+\n+  @Override\n+  public void onCompleting(\n+      final ExecutableCatchEventElement element, final BpmnElementContext context) {\n+    variableMappingBehavior\n+        .applyOutputMappings(context, element)\n+        .ifRightOrLeft(\n+            ok -> {\n+              eventSubscriptionBehavior.unsubscribeFromEvents(context);\n+              stateTransitionBehavior.transitionToCompleted(context);\n+            },\n+            failure -> incidentBehavior.createIncident(failure, context));\n+  }\n+\n+  @Override\n+  public void onCompleted(\n+      final ExecutableCatchEventElement element, final BpmnElementContext context) {\n+    stateTransitionBehavior.takeOutgoingSequenceFlows(element, context);\n+    stateBehavior.consumeToken(context);\n+    stateBehavior.removeElementInstance(context);\n+  }\n+\n+  @Override\n+  public void onTerminating(\n+      final ExecutableCatchEventElement element, final BpmnElementContext context) {\n+    eventSubscriptionBehavior.unsubscribeFromEvents(context);\n+    stateTransitionBehavior.transitionToTerminated(context);\n+  }\n+\n+  @Override\n+  public void onTerminated(\n+      final ExecutableCatchEventElement element, final BpmnElementContext context) {\n+    eventSubscriptionBehavior.publishTriggeredBoundaryEvent(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a3d8e4378fba7267305520ef12a7c910cab0cf"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg2OTYzNQ==", "bodyText": "I think we should take the transition to completing only if the event was triggered (i.e. the event trigger was found in triggerIntermediateEvent).", "url": "https://github.com/camunda-cloud/zeebe/pull/4603#discussion_r430869635", "createdAt": "2020-05-27T05:44:39Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/event/IntermediateCatchEventProcessor.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.event;\n+\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.nwe.BpmnElementProcessor;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.behavior.BpmnEventSubscriptionBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnIncidentBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateTransitionBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnVariableMappingBehavior;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableCatchEventElement;\n+\n+public class IntermediateCatchEventProcessor\n+    implements BpmnElementProcessor<ExecutableCatchEventElement> {\n+\n+  private final BpmnEventSubscriptionBehavior eventSubscriptionBehavior;\n+  private final BpmnIncidentBehavior incidentBehavior;\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final BpmnVariableMappingBehavior variableMappingBehavior;\n+\n+  public IntermediateCatchEventProcessor(final BpmnBehaviors bpmnBehaviors) {\n+    eventSubscriptionBehavior = bpmnBehaviors.eventSubscriptionBehavior();\n+    incidentBehavior = bpmnBehaviors.incidentBehavior();\n+    stateBehavior = bpmnBehaviors.stateBehavior();\n+    stateTransitionBehavior = bpmnBehaviors.stateTransitionBehavior();\n+    variableMappingBehavior = bpmnBehaviors.variableMappingBehavior();\n+  }\n+\n+  @Override\n+  public Class<ExecutableCatchEventElement> getType() {\n+    return ExecutableCatchEventElement.class;\n+  }\n+\n+  @Override\n+  public void onActivating(\n+      final ExecutableCatchEventElement element, final BpmnElementContext context) {\n+    variableMappingBehavior\n+        .applyInputMappings(context, element)\n+        .flatMap(ok -> eventSubscriptionBehavior.subscribeToEvents(element, context))\n+        .ifRightOrLeft(\n+            ok -> stateTransitionBehavior.transitionToActivated(context),\n+            failure -> incidentBehavior.createIncident(failure, context));\n+  }\n+\n+  @Override\n+  public void onActivated(\n+      final ExecutableCatchEventElement element, final BpmnElementContext context) {\n+    if (element.isNone()) {\n+      stateTransitionBehavior.transitionToCompleting(context);\n+    }\n+  }\n+\n+  @Override\n+  public void onCompleting(\n+      final ExecutableCatchEventElement element, final BpmnElementContext context) {\n+    variableMappingBehavior\n+        .applyOutputMappings(context, element)\n+        .ifRightOrLeft(\n+            ok -> {\n+              eventSubscriptionBehavior.unsubscribeFromEvents(context);\n+              stateTransitionBehavior.transitionToCompleted(context);\n+            },\n+            failure -> incidentBehavior.createIncident(failure, context));\n+  }\n+\n+  @Override\n+  public void onCompleted(\n+      final ExecutableCatchEventElement element, final BpmnElementContext context) {\n+    stateTransitionBehavior.takeOutgoingSequenceFlows(element, context);\n+    stateBehavior.consumeToken(context);\n+    stateBehavior.removeElementInstance(context);\n+  }\n+\n+  @Override\n+  public void onTerminating(\n+      final ExecutableCatchEventElement element, final BpmnElementContext context) {\n+    eventSubscriptionBehavior.unsubscribeFromEvents(context);\n+    stateTransitionBehavior.transitionToTerminated(context);\n+  }\n+\n+  @Override\n+  public void onTerminated(\n+      final ExecutableCatchEventElement element, final BpmnElementContext context) {\n+    eventSubscriptionBehavior.publishTriggeredBoundaryEvent(context);\n+    incidentBehavior.resolveIncidents(context);\n+    stateTransitionBehavior.onElementTerminated(element, context);\n+    stateBehavior.consumeToken(context);\n+  }\n+\n+  @Override\n+  public void onEventOccurred(\n+      final ExecutableCatchEventElement element, final BpmnElementContext context) {\n+    eventSubscriptionBehavior.triggerIntermediateEvent(context);\n+    stateTransitionBehavior.transitionToCompleting(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a3d8e4378fba7267305520ef12a7c910cab0cf"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg3MTE1OQ==", "bodyText": "An intermediate catch event must have an event definition. I don't see a case when it has no event definition and we complete it immediately. I know it comes from the existing code but I have no idea why \ud83d\ude05\nLet's remove it if you agree.", "url": "https://github.com/camunda-cloud/zeebe/pull/4603#discussion_r430871159", "createdAt": "2020-05-27T05:49:41Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/event/IntermediateCatchEventProcessor.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.event;\n+\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.nwe.BpmnElementProcessor;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.behavior.BpmnEventSubscriptionBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnIncidentBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateTransitionBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnVariableMappingBehavior;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableCatchEventElement;\n+\n+public class IntermediateCatchEventProcessor\n+    implements BpmnElementProcessor<ExecutableCatchEventElement> {\n+\n+  private final BpmnEventSubscriptionBehavior eventSubscriptionBehavior;\n+  private final BpmnIncidentBehavior incidentBehavior;\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final BpmnVariableMappingBehavior variableMappingBehavior;\n+\n+  public IntermediateCatchEventProcessor(final BpmnBehaviors bpmnBehaviors) {\n+    eventSubscriptionBehavior = bpmnBehaviors.eventSubscriptionBehavior();\n+    incidentBehavior = bpmnBehaviors.incidentBehavior();\n+    stateBehavior = bpmnBehaviors.stateBehavior();\n+    stateTransitionBehavior = bpmnBehaviors.stateTransitionBehavior();\n+    variableMappingBehavior = bpmnBehaviors.variableMappingBehavior();\n+  }\n+\n+  @Override\n+  public Class<ExecutableCatchEventElement> getType() {\n+    return ExecutableCatchEventElement.class;\n+  }\n+\n+  @Override\n+  public void onActivating(\n+      final ExecutableCatchEventElement element, final BpmnElementContext context) {\n+    variableMappingBehavior\n+        .applyInputMappings(context, element)\n+        .flatMap(ok -> eventSubscriptionBehavior.subscribeToEvents(element, context))\n+        .ifRightOrLeft(\n+            ok -> stateTransitionBehavior.transitionToActivated(context),\n+            failure -> incidentBehavior.createIncident(failure, context));\n+  }\n+\n+  @Override\n+  public void onActivated(\n+      final ExecutableCatchEventElement element, final BpmnElementContext context) {\n+    if (element.isNone()) {\n+      stateTransitionBehavior.transitionToCompleting(context);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a3d8e4378fba7267305520ef12a7c910cab0cf"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDg3MzEwOQ==", "bodyText": "Good catch \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/4603#discussion_r430873109", "createdAt": "2020-05-27T05:55:43Z", "author": {"login": "saig0"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnEventSubscriptionBehavior.java", "diffHunk": "@@ -238,6 +256,8 @@ private void activateBoundaryEvent(\n       return Either.left(\n           new Failure(\n               e.getMessage(), ErrorType.EXTRACT_VALUE_ERROR, context.getElementInstanceKey()));\n+    } catch (final MessageNameException e) {\n+      return Either.left(e.getFailure());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98a3d8e4378fba7267305520ef12a7c910cab0cf"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "721d6f5e0a2b706962d41ca1792dab06c00ade8e", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/721d6f5e0a2b706962d41ca1792dab06c00ade8e", "committedDate": "2020-05-27T11:04:58Z", "message": "chore(engine): apply review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98d84ce2c77d89d582450ce031b5db2c83ca67d5", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/98d84ce2c77d89d582450ce031b5db2c83ca67d5", "committedDate": "2020-05-27T14:31:16Z", "message": "chore(engine): apply another review comment"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2845, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}