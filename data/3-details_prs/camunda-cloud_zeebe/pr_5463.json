{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2Nzg5NTk0", "number": 5463, "title": "Support memory mapped log stream segments in replicated system", "bodyText": "Description\nThis PR makes usage of memory mapped files for the log stream possible in replicated systems, by splitting the shared mapped buffers between the SegmentWriter and SegmentReaders to private mapped buffers. This means there are no longer race conditions between the writer and readers during closing (and concurrently reading).\nIn order to allow private mapped buffers, some changes are necessary:\nFirst, we need to make sure that entries are flushed at the right moments. So the leader must flush on all commits and the followers on all appends.\nSecondly, each of the readers now becomes responsible for their own mapped buffer, which needs to be freed when closing.\nThird, this PR changes when the readers map their respective file channel. Previously, first the channel is opened, the first entry is read, and then the channel is mapped after which the first entry is read again (in the reset method), but that does not seem necessary. Now, the channel is immediately mapped and then the first entry is read (still in the reset method).\nRelated issues\ncloses #4274\nDefinition of Done\nNot all items need to be done depending on the issue and the pull request.\nCode changes:\n\n The changes are backwards compatibility with previous versions\n If it fixes a bug then PRs are created to backport the fix to the last two minor versions\n\nTesting:\n\n There are unit/integration tests that verify all acceptance criterias of the issue\n New tests are written to ensure backwards compatibility with further versions\n The behavior is tested manually\n The impact of the changes is verified by a benchmark\n\nDocumentation:\n\n The documentation is updated (e.g. BPMN reference, configuration, examples, get-started guides, etc.)\n New content is added to the release announcement", "createdAt": "2020-10-02T09:22:15Z", "url": "https://github.com/camunda-cloud/zeebe/pull/5463", "merged": true, "mergeCommit": {"oid": "dedd01de785e4a5b2e41aabaa2780cfdfa87c2f8"}, "closed": true, "closedAt": "2020-10-12T12:07:57Z", "author": {"login": "korthout"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdP1I9LgBqjM4NDQ0NjcwMDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdRyduSABqjM4NjYyMjUzMDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "123b2c632584a9612800072322955806d0325efe", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/123b2c632584a9612800072322955806d0325efe", "committedDate": "2020-10-02T12:13:36Z", "message": "fix(atomix): restrict when to close"}, "afterCommit": {"oid": "13a6c69d47f69c992975b5f5210b6227d679a4cb", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/13a6c69d47f69c992975b5f5210b6227d679a4cb", "committedDate": "2020-10-06T09:37:51Z", "message": "chore(atomix): use separate buffers for readers\n\nThe JournalSegmentReaders re-used the MappedByteBuffer from the\nJournalSegmentWriter. It may have occured that the Writer closes and\nfrees up the buffer, but that is was still in use by a reader. By\nsplitting these up we avoid that.\n\nThis is only possible if we guarantee that all events are flushed\nonAppend on the follower. To be precise, exactly just before the\nfollower acknowledges the append as successful."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13a6c69d47f69c992975b5f5210b6227d679a4cb", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/13a6c69d47f69c992975b5f5210b6227d679a4cb", "committedDate": "2020-10-06T09:37:51Z", "message": "chore(atomix): use separate buffers for readers\n\nThe JournalSegmentReaders re-used the MappedByteBuffer from the\nJournalSegmentWriter. It may have occured that the Writer closes and\nfrees up the buffer, but that is was still in use by a reader. By\nsplitting these up we avoid that.\n\nThis is only possible if we guarantee that all events are flushed\nonAppend on the follower. To be precise, exactly just before the\nfollower acknowledges the append as successful."}, "afterCommit": {"oid": "5ae5fbf8c893830c70764ba8d008f7306de6d0f7", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/5ae5fbf8c893830c70764ba8d008f7306de6d0f7", "committedDate": "2020-10-06T11:40:10Z", "message": "chore(atomix): use separate buffers for readers\n\nThe JournalSegmentReaders re-used the MappedByteBuffer from the\nJournalSegmentWriter. It may have occured that the Writer closes and\nfrees up the buffer, but that is was still in use by a reader. By\nsplitting these up we avoid that.\n\nThis is only possible if we guarantee that all events are flushed\nonAppend on the follower. To be precise, exactly just before the\nfollower acknowledges the append as successful."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3d0c8980375c0436844911fa8f5f1b4afd8665d8", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/3d0c8980375c0436844911fa8f5f1b4afd8665d8", "committedDate": "2020-10-06T12:53:57Z", "message": "refactor(atomix): remove MappableJournalSegmentReader"}, "afterCommit": {"oid": "c6be4027d9909485e461b53a88d9e5e79052ce3e", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/c6be4027d9909485e461b53a88d9e5e79052ce3e", "committedDate": "2020-10-06T15:40:01Z", "message": "refactor(atomix): remove MappableJournalSegmentWriter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c6be4027d9909485e461b53a88d9e5e79052ce3e", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/c6be4027d9909485e461b53a88d9e5e79052ce3e", "committedDate": "2020-10-06T15:40:01Z", "message": "refactor(atomix): remove MappableJournalSegmentWriter"}, "afterCommit": {"oid": "682ad80565ec7ec34b6fe244682a7fadf71a948b", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/682ad80565ec7ec34b6fe244682a7fadf71a948b", "committedDate": "2020-10-06T15:45:17Z", "message": "chore(atomix): reduce reader channels access"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "682ad80565ec7ec34b6fe244682a7fadf71a948b", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/682ad80565ec7ec34b6fe244682a7fadf71a948b", "committedDate": "2020-10-06T15:45:17Z", "message": "chore(atomix): reduce reader channels access"}, "afterCommit": {"oid": "f29afd9d371b7539f0dcb0936f9cf202320c552d", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/f29afd9d371b7539f0dcb0936f9cf202320c552d", "committedDate": "2020-10-06T16:40:51Z", "message": "chore(atomix): use agrona to free mapped buffer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "648899fc932271c71f99c7655433d29a6f4b8979", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/648899fc932271c71f99c7655433d29a6f4b8979", "committedDate": "2020-10-08T15:25:03Z", "message": "doc(config): add mmap config setting to templates"}, "afterCommit": {"oid": "a2f744b64f5734737ea031d187acbe5ce6256b98", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/a2f744b64f5734737ea031d187acbe5ce6256b98", "committedDate": "2020-10-08T15:27:17Z", "message": "docs(config): add mmap config setting to templates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1NjE4NjI2", "url": "https://github.com/camunda-cloud/zeebe/pull/5463#pullrequestreview-505618626", "createdAt": "2020-10-09T12:18:26Z", "commit": {"oid": "a2f744b64f5734737ea031d187acbe5ce6256b98"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMjoxODoyNlrOHfHR9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMjoyOTowM1rOHfHnQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM4NzE4OQ==", "bodyText": "I don't think this is correct - we flush on commit for the leader because the leader already includes itself in the quorum, so before we can truly commit we need to persist the write.", "url": "https://github.com/camunda-cloud/zeebe/pull/5463#discussion_r502387189", "createdAt": "2020-10-09T12:18:26Z", "author": {"login": "npepinpe"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/RaftContext.java", "diffHunk": "@@ -350,6 +349,10 @@ public long setCommitIndex(final long commitIndex) {\n     if (commitIndex > previousCommitIndex) {\n       this.commitIndex = commitIndex;\n       logWriter.commit(Math.min(commitIndex, logWriter.getLastIndex()));\n+      if (raftLog.isFlushOnCommit() && isLeader()) {\n+        // writer's buffer is isolated from readers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f744b64f5734737ea031d187acbe5ce6256b98"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM4NzQwNw==", "bodyText": "Just a side note, most screens are probably big enough to put this on a single line ;)\nAlso, it's not because the writer's buffer is isolated from readers, but because for us to truly acknowledge the append to the leader, we need to ensure the write is truly persisted, not just buffered in memory and eventually flushed.", "url": "https://github.com/camunda-cloud/zeebe/pull/5463#discussion_r502387407", "createdAt": "2020-10-09T12:18:54Z", "author": {"login": "npepinpe"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/roles/PassiveRole.java", "diffHunk": "@@ -609,6 +609,10 @@ protected void appendEntries(\n       raft.notifyCommitListeners(commitIndex);\n     }\n \n+    // Make sure all entries are flushed before ack\n+    // because writer's buffer is isolated from readers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f744b64f5734737ea031d187acbe5ce6256b98"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM4ODM3MQ==", "bodyText": "I'm guessing this was unused?", "url": "https://github.com/camunda-cloud/zeebe/pull/5463#discussion_r502388371", "createdAt": "2020-10-09T12:20:47Z", "author": {"login": "npepinpe"}, "path": "atomix/storage/src/main/java/io/atomix/storage/journal/FileChannelJournalSegmentWriter.java", "diffHunk": "@@ -325,11 +330,6 @@ public boolean isFull() {\n         || getNextIndex() - firstIndex >= segment.descriptor().maxEntries();\n   }\n \n-  /** Returns the first index written to the segment. */\n-  public long firstIndex() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f744b64f5734737ea031d187acbe5ce6256b98"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM5MTY1MA==", "bodyText": "afaik you can close the channel once you've mapped it, no need to keep it around.\nSo you could do:\ntry(final FileChannel channel = file.openChannel(\n            StandardOpenOption.CREATE, StandardOpenOption.READ, StandardOpenOption.WRITE)) {\n  buffer = mapChannel(channel, segment);\n}\nBut verify in case I'm wrong \ud83d\ude42\nOr you can just use org.agrona.IoUtil.mapExistingFile(File, MapMode, String) and forgo opening the channel at all \ud83d\ude42", "url": "https://github.com/camunda-cloud/zeebe/pull/5463#discussion_r502391650", "createdAt": "2020-10-09T12:27:07Z", "author": {"login": "npepinpe"}, "path": "atomix/storage/src/main/java/io/atomix/storage/journal/MappedJournalSegmentWriter.java", "diffHunk": "@@ -46,38 +49,41 @@\n  */\n class MappedJournalSegmentWriter<E> implements JournalWriter<E> {\n \n-  private final MappedByteBuffer mappedBuffer;\n-  private final ByteBuffer buffer;\n+  private final FileChannel channel;\n+  private final MappedByteBuffer buffer;\n   private final JournalSegment<E> segment;\n   private final int maxEntrySize;\n   private final JournalIndex index;\n   private final Namespace namespace;\n   private final long firstIndex;\n   private Indexed<E> lastEntry;\n+  private boolean isOpen = true;\n \n   MappedJournalSegmentWriter(\n-      final MappedByteBuffer buffer,\n+      final JournalSegmentFile file,\n       final JournalSegment<E> segment,\n       final int maxEntrySize,\n       final JournalIndex index,\n       final Namespace namespace) {\n-    mappedBuffer = buffer;\n-    this.buffer = buffer.slice();\n     this.segment = segment;\n     this.maxEntrySize = maxEntrySize;\n     this.index = index;\n     this.namespace = namespace;\n     firstIndex = segment.index();\n+    channel =\n+        file.openChannel(\n+            StandardOpenOption.CREATE, StandardOpenOption.READ, StandardOpenOption.WRITE);\n+    buffer = mapChannel(channel, segment);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f744b64f5734737ea031d187acbe5ce6256b98"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM5MjIzMA==", "bodyText": "Nit: you can also use org.agrona.IoUtil.unmap(buffer). It just calls BufferUtil, however imo it's a bit more readable in its intention.", "url": "https://github.com/camunda-cloud/zeebe/pull/5463#discussion_r502392230", "createdAt": "2020-10-09T12:28:14Z", "author": {"login": "npepinpe"}, "path": "atomix/storage/src/main/java/io/atomix/storage/journal/MappedJournalSegmentWriter.java", "diffHunk": "@@ -259,16 +262,20 @@ public void truncate(final long index) {\n \n   @Override\n   public void flush() {\n-    mappedBuffer.force();\n+    buffer.force();\n   }\n \n   @Override\n   public void close() {\n-    flush();\n-    try {\n-      BufferCleaner.freeBuffer(mappedBuffer);\n-    } catch (final IOException e) {\n-      throw new StorageException(e);\n+    if (isOpen) {\n+      isOpen = false;\n+      flush();\n+      BufferUtil.free(buffer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f744b64f5734737ea031d187acbe5ce6256b98"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM5MjY0Mg==", "bodyText": "I guess we can also remove the constant MMAP_REPLICATION_ERROR_MSG?", "url": "https://github.com/camunda-cloud/zeebe/pull/5463#discussion_r502392642", "createdAt": "2020-10-09T12:29:03Z", "author": {"login": "npepinpe"}, "path": "broker/src/main/java/io/zeebe/broker/system/SystemContext.java", "diffHunk": "@@ -76,13 +75,7 @@ private void validateConfiguration() {\n       throw new IllegalArgumentException(String.format(NODE_ID_ERROR_MSG, nodeId, clusterSize));\n     }\n \n-    final StorageLevel storageLevel = data.getAtomixStorageLevel();\n     final int replicationFactor = cluster.getReplicationFactor();\n-\n-    if (storageLevel == StorageLevel.MAPPED && replicationFactor > 1) {\n-      throw new IllegalStateException(MMAP_REPLICATION_ERROR_MSG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2f744b64f5734737ea031d187acbe5ce6256b98"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NTIyNzM3", "url": "https://github.com/camunda-cloud/zeebe/pull/5463#pullrequestreview-506522737", "createdAt": "2020-10-12T11:10:03Z", "commit": {"oid": "b8027dd5b97933acad28f4f9957a85de215753a0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ecb93164946f64cb9d6f45a7086597abfefb521", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/1ecb93164946f64cb9d6f45a7086597abfefb521", "committedDate": "2020-10-12T11:39:18Z", "message": "chore(broker): remove replicated mmap restriction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe6dc89c815742bffd9dde5b9e5b942050f35614", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/fe6dc89c815742bffd9dde5b9e5b942050f35614", "committedDate": "2020-10-12T11:39:22Z", "message": "chore(atomix): only flush on commit on leader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1a7e7da4bf34719f342682d220f88833854f1a8", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/c1a7e7da4bf34719f342682d220f88833854f1a8", "committedDate": "2020-10-12T11:39:22Z", "message": "chore(atomix): use separate buffers for readers\n\nThe JournalSegmentReaders re-used the MappedByteBuffer from the\nJournalSegmentWriter. It may have occured that the Writer closes and\nfrees up the buffer, but that is was still in use by a reader. By\nsplitting these up we avoid that.\n\nThis is only possible if we guarantee that all events are flushed\nonAppend on the follower. To be precise, exactly just before the\nfollower acknowledges the append as successful."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "785d0fd09791fd5843c52b629f27ebd8f34a1b1b", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/785d0fd09791fd5843c52b629f27ebd8f34a1b1b", "committedDate": "2020-10-12T11:39:22Z", "message": "refactor(atomix): remove SegmentReader/Writer indirection\n\nThe MappableJournalSegmentReader and MappableJournalSegmentWriter seemed\nto only exist to allow runtime switching between memory mapped and file\nchannel reader/writers. This brought additional complexity that is\nunnecessary for zeebe."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a1a3dda6bb7b7d2f5c54a6f23fb6126d782da84", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/4a1a3dda6bb7b7d2f5c54a6f23fb6126d782da84", "committedDate": "2020-10-12T11:39:22Z", "message": "chore(atomix): reduce reader channels access"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4994f99c7d2762474f02cecd5fe0dc961440841f", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/4994f99c7d2762474f02cecd5fe0dc961440841f", "committedDate": "2020-10-12T11:39:22Z", "message": "chore(atomix): use agrona to free mapped buffer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "491f08171b1884d7dac7bf0451366d4d298d28b8", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/491f08171b1884d7dac7bf0451366d4d298d28b8", "committedDate": "2020-10-12T11:39:22Z", "message": "chore(atomix): document explicit flushes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7786ee81d33f82c5b7148241b2002af1e3c91334", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/7786ee81d33f82c5b7148241b2002af1e3c91334", "committedDate": "2020-10-12T11:39:22Z", "message": "docs(config): add mmap config setting to templates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7022bc072302a7ef6ccdb431302b10dacb26d233", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/7022bc072302a7ef6ccdb431302b10dacb26d233", "committedDate": "2020-10-12T11:40:07Z", "message": "chore(atomix): apply review hints"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b8027dd5b97933acad28f4f9957a85de215753a0", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/b8027dd5b97933acad28f4f9957a85de215753a0", "committedDate": "2020-10-12T08:20:14Z", "message": "chore(atomix): apply review hints"}, "afterCommit": {"oid": "7022bc072302a7ef6ccdb431302b10dacb26d233", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/7022bc072302a7ef6ccdb431302b10dacb26d233", "committedDate": "2020-10-12T11:40:07Z", "message": "chore(atomix): apply review hints"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2408, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}