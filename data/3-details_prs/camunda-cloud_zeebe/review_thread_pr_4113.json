{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNDgzNDM0", "number": 4113, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDozNzo0NFrODqu5tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjoxNjoxNFrODq3bYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTM1MjIzOnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/AtomixSnapshotStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDozNzo0NFrOF6qNpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoyMToxNlrOF6yhGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1MzM0OA==", "bodyText": "We can use FileUtil:ensureDirectoryExists which you added in another PR to be consistent.", "url": "https://github.com/camunda-cloud/zeebe/pull/4113#discussion_r397053348", "createdAt": "2020-03-24T10:37:44Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/AtomixSnapshotStorage.java", "diffHunk": "@@ -23,32 +23,37 @@\n import java.util.Set;\n import java.util.concurrent.CopyOnWriteArraySet;\n import java.util.stream.Stream;\n+import org.agrona.IoUtil;\n import org.slf4j.Logger;\n \n public final class AtomixSnapshotStorage implements SnapshotStorage, SnapshotListener {\n \n   private static final Logger LOGGER = new ZbLogger(AtomixSnapshotStorage.class);\n \n   private final Path runtimeDirectory;\n+  private final Path pendingDirectory;\n   private final AtomixRecordEntrySupplier entrySupplier;\n   private final SnapshotStore store;\n   private final Set<SnapshotDeletionListener> deletionListeners;\n   private final SnapshotMetrics metrics;\n \n   public AtomixSnapshotStorage(\n       final Path runtimeDirectory,\n+      final Path pendingDirectory,\n       final SnapshotStore store,\n       final AtomixRecordEntrySupplier entrySupplier,\n       final SnapshotMetrics metrics) {\n     this.runtimeDirectory = runtimeDirectory;\n+    this.pendingDirectory = pendingDirectory;\n     this.entrySupplier = entrySupplier;\n     this.store = store;\n     this.metrics = metrics;\n \n     this.deletionListeners = new CopyOnWriteArraySet<>();\n-    this.store.addListener(this);\n \n+    IoUtil.ensureDirectoryExists(pendingDirectory.toFile(), \"push replication pending directory\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dff011a5812e56dbd5bf97503ea45baa9881b10"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE4OTQwMg==", "bodyText": "As soon as the other PR is merged \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/4113#discussion_r397189402", "createdAt": "2020-03-24T14:21:16Z", "author": {"login": "npepinpe"}, "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/AtomixSnapshotStorage.java", "diffHunk": "@@ -23,32 +23,37 @@\n import java.util.Set;\n import java.util.concurrent.CopyOnWriteArraySet;\n import java.util.stream.Stream;\n+import org.agrona.IoUtil;\n import org.slf4j.Logger;\n \n public final class AtomixSnapshotStorage implements SnapshotStorage, SnapshotListener {\n \n   private static final Logger LOGGER = new ZbLogger(AtomixSnapshotStorage.class);\n \n   private final Path runtimeDirectory;\n+  private final Path pendingDirectory;\n   private final AtomixRecordEntrySupplier entrySupplier;\n   private final SnapshotStore store;\n   private final Set<SnapshotDeletionListener> deletionListeners;\n   private final SnapshotMetrics metrics;\n \n   public AtomixSnapshotStorage(\n       final Path runtimeDirectory,\n+      final Path pendingDirectory,\n       final SnapshotStore store,\n       final AtomixRecordEntrySupplier entrySupplier,\n       final SnapshotMetrics metrics) {\n     this.runtimeDirectory = runtimeDirectory;\n+    this.pendingDirectory = pendingDirectory;\n     this.entrySupplier = entrySupplier;\n     this.store = store;\n     this.metrics = metrics;\n \n     this.deletionListeners = new CopyOnWriteArraySet<>();\n-    this.store.addListener(this);\n \n+    IoUtil.ensureDirectoryExists(pendingDirectory.toFile(), \"push replication pending directory\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1MzM0OA=="}, "originalCommit": {"oid": "2dff011a5812e56dbd5bf97503ea45baa9881b10"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MTM3NzA1OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/AtomixSnapshotStorage.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDo0NDoyMVrOF6qcvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMDo1Njo0OFrOF6q4tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1NzIxNA==", "bodyText": "Doesn't purgeSnapshot does the cleanup?", "url": "https://github.com/camunda-cloud/zeebe/pull/4113#discussion_r397057214", "createdAt": "2020-03-24T10:44:21Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/AtomixSnapshotStorage.java", "diffHunk": "@@ -142,8 +147,13 @@ public void onNewSnapshot(\n     metrics.incrementSnapshotCount();\n     observeSnapshotSize(snapshot);\n \n-    LOGGER.debug(\"Purging snapshots older than {}\", snapshot);\n-    store.purgeSnapshots(snapshot);\n+    try {\n+      LOGGER.debug(\"Purging snapshots older than {}\", snapshot);\n+      store.purgeSnapshots(snapshot);\n+      DbSnapshotStore.cleanUpTemporarySnapshots(pendingDirectory, snapshot.index());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dff011a5812e56dbd5bf97503ea45baa9881b10"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA2MTM4Nw==", "bodyText": "It now only does for the one pending directory it knows about - do you think it should also purge this one as well? I'm also not sure if it's a good idea for it do it anyway, because purgeSnapshots can be called from different thread contexts, so we might still run into the issue of deleting on going replications? Though it should be more fault tolerant", "url": "https://github.com/camunda-cloud/zeebe/pull/4113#discussion_r397061387", "createdAt": "2020-03-24T10:51:39Z", "author": {"login": "npepinpe"}, "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/AtomixSnapshotStorage.java", "diffHunk": "@@ -142,8 +147,13 @@ public void onNewSnapshot(\n     metrics.incrementSnapshotCount();\n     observeSnapshotSize(snapshot);\n \n-    LOGGER.debug(\"Purging snapshots older than {}\", snapshot);\n-    store.purgeSnapshots(snapshot);\n+    try {\n+      LOGGER.debug(\"Purging snapshots older than {}\", snapshot);\n+      store.purgeSnapshots(snapshot);\n+      DbSnapshotStore.cleanUpTemporarySnapshots(pendingDirectory, snapshot.index());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1NzIxNA=="}, "originalCommit": {"oid": "2dff011a5812e56dbd5bf97503ea45baa9881b10"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA2NDM3Mg==", "bodyText": "Sorry, I missed that DbSnapshot is shared between raft and atomix. Then it make sense to cleanup here. But then wouldn't we cleanup raft-pending snapshot while we purge snapshots here?", "url": "https://github.com/camunda-cloud/zeebe/pull/4113#discussion_r397064372", "createdAt": "2020-03-24T10:56:48Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/AtomixSnapshotStorage.java", "diffHunk": "@@ -142,8 +147,13 @@ public void onNewSnapshot(\n     metrics.incrementSnapshotCount();\n     observeSnapshotSize(snapshot);\n \n-    LOGGER.debug(\"Purging snapshots older than {}\", snapshot);\n-    store.purgeSnapshots(snapshot);\n+    try {\n+      LOGGER.debug(\"Purging snapshots older than {}\", snapshot);\n+      store.purgeSnapshots(snapshot);\n+      DbSnapshotStore.cleanUpTemporarySnapshots(pendingDirectory, snapshot.index());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA1NzIxNA=="}, "originalCommit": {"oid": "2dff011a5812e56dbd5bf97503ea45baa9881b10"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Mjc0OTE1OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/DbSnapshotStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjoxNjoxNFrOF64GOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjoxNjoxNFrOF64GOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzI4MDgyNg==", "bodyText": "This isn't used anymore. Can remove.", "url": "https://github.com/camunda-cloud/zeebe/pull/4113#discussion_r397280826", "createdAt": "2020-03-24T16:16:14Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/storage/snapshot/DbSnapshotStore.java", "diffHunk": "@@ -170,6 +171,35 @@ public void removeListener(final SnapshotListener listener) {\n     listeners.remove(listener);\n   }\n \n+  private void purgePendingSnapshot(final Path pendingSnapshot) {\n+    try {\n+      FileUtil.deleteFolder(pendingSnapshot);\n+      LOGGER.debug(\"Delete not completed (orphaned) snapshot {}\", pendingSnapshot);\n+    } catch (final IOException e) {\n+      LOGGER.error(\"Failed to delete not completed (orphaned) snapshot {}\", pendingSnapshot);\n+    }\n+  }\n+\n+  static void cleanUpTemporarySnapshots(final Path pendingDirectory, final long cutoffIndex)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "617be890a64e32e9f101b077a94ca7375025c6fc"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4802, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}