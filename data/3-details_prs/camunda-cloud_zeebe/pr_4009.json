{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NjgxNzM5", "number": 4009, "title": "chore(logstream): enable health check on logstorage appender", "bodyText": "Description\n\nEnable actor specific exception handling instead of logging and continuing with the next job.\nExpose an api to fail an actor. Actors can use this when exceptions occur.\nLogStorage appender fails the actor when unexpected exceptions occur. When the actor is failed or closed it is considered as unhealthy.\n\nRelated issues\ncloses #4000\nPull Request Checklist\n\n All commit messages match our commit message guidelines\n The submitting code follows our code style\n If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-03-09T16:15:49Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4009", "merged": true, "mergeCommit": {"oid": "6515ee3fff314b31100cbc5e355aa0a289a9d90d"}, "closed": true, "closedAt": "2020-03-16T16:04:53Z", "author": {"login": "deepthidevaki"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMMNZYAFqTM3MTY5MjkzMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcON1vMgBqjMxMzMxMDMxNzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNjkyOTMz", "url": "https://github.com/camunda-cloud/zeebe/pull/4009#pullrequestreview-371692933", "createdAt": "2020-03-10T05:43:14Z", "commit": {"oid": "f0be716e3cd59e6d209f58fab4532e02b0f6e88b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNTo0MzoxNFrOF0CIlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwNjowNjoxNlrOF0Ccjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwNTIzOA==", "bodyText": "should we maybe complete  this future exceptionally?", "url": "https://github.com/camunda-cloud/zeebe/pull/4009#discussion_r390105238", "createdAt": "2020-03-10T05:43:14Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStorageAppender.java", "diffHunk": "@@ -130,6 +139,30 @@ protected void onActorStarting() {\n     actor.consume(writeBufferSubscription, this::onWriteBufferAvailable);\n   }\n \n+  @Override\n+  protected void onActorClosed() {\n+    closeFuture.complete(null);\n+  }\n+\n+  @Override\n+  public ActorFuture<Void> closeAsync() {\n+    if (actor.isClosed()) {\n+      return closeFuture;\n+    }\n+    super.closeAsync();\n+    return closeFuture;\n+  }\n+\n+  @Override\n+  protected void handleFailure(final Exception failure) {\n+    onFailure(failure);\n+  }\n+\n+  @Override\n+  public void onActorFailed() {\n+    closeFuture.complete(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0be716e3cd59e6d209f58fab4532e02b0f6e88b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwNTg0NQ==", "bodyText": "I have the feeling you have a different formating setting then we do \ud83e\udd14 It is really hard to see the diff when the methods are reordered \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/4009#discussion_r390105845", "createdAt": "2020-03-10T05:46:04Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStreamImpl.java", "diffHunk": "@@ -101,63 +104,47 @@ public String getLogName() {\n   }\n \n   @Override\n-  public String getName() {\n-    return actorName;\n-  }\n-\n-  @Override\n-  public void close() {\n-    closeAsync().join();\n+  public ActorFuture<Long> getCommitPositionAsync() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0be716e3cd59e6d209f58fab4532e02b0f6e88b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwNjY2Mg==", "bodyText": "Is it possible to recover? \ud83d\ude05 I mean the actor is closed right? Seems that the appender has not implement this method?", "url": "https://github.com/camunda-cloud/zeebe/pull/4009#discussion_r390106662", "createdAt": "2020-03-10T05:49:38Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStreamImpl.java", "diffHunk": "@@ -335,13 +339,38 @@ private int determineInitialPartitionId() {\n       final long lastPosition = logReader.seekToEnd();\n \n       // dispatcher needs to generate positions greater than the last position\n-      int partitionId = 0;\n+      int segmentPartitionId = 0;\n \n       if (lastPosition > 0) {\n-        partitionId = PositionUtil.partitionId(lastPosition);\n+        segmentPartitionId = PositionUtil.partitionId(lastPosition);\n       }\n \n-      return partitionId;\n+      return segmentPartitionId;\n+    }\n+  }\n+\n+  @Override\n+  public HealthStatus getHealthStatus() {\n+    return actor.isClosed() ? HealthStatus.UNHEALTHY : HealthStatus.HEALTHY;\n+  }\n+\n+  @Override\n+  public void addFailureListener(final FailureListener failureListener) {\n+    actor.run(() -> this.failureListener = failureListener);\n+  }\n+\n+  @Override\n+  public void onFailure() {\n+    if (failureListener != null) {\n+      failureListener.onFailure();\n+    }\n+    closeAsync();\n+  }\n+\n+  @Override\n+  public void onRecovered() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0be716e3cd59e6d209f58fab4532e02b0f6e88b"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDEwODcxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private void onFailure(final Throwable error) {\n          \n          \n            \n              private void onFailure(final Exception exception) {", "url": "https://github.com/camunda-cloud/zeebe/pull/4009#discussion_r390108711", "createdAt": "2020-03-10T05:59:03Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/main/java/io/zeebe/logstreams/impl/log/LogStorageAppender.java", "diffHunk": "@@ -152,6 +185,24 @@ private Positions readPositions(final ByteBuffer buffer) {\n     return positions;\n   }\n \n+  @Override\n+  public HealthStatus getHealthStatus() {\n+    return actor.isClosed() ? HealthStatus.UNHEALTHY : HealthStatus.HEALTHY;\n+  }\n+\n+  @Override\n+  public void addFailureListener(final FailureListener failureListener) {\n+    actor.run(() -> this.failureListener = failureListener);\n+  }\n+\n+  private void onFailure(final Throwable error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0be716e3cd59e6d209f58fab4532e02b0f6e88b"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDExMDM1MQ==", "bodyText": "So the actor can decide whether he wants to fail ?", "url": "https://github.com/camunda-cloud/zeebe/pull/4009#discussion_r390110351", "createdAt": "2020-03-10T06:06:16Z", "author": {"login": "Zelldon"}, "path": "util/src/main/java/io/zeebe/util/sched/ActorTask.java", "diffHunk": "@@ -294,9 +294,7 @@ public void onFailure(final Throwable failure) {\n         break;\n \n       default:\n-        Loggers.ACTOR_LOGGER.error(\n-            \"Actor failed in phase '{}'. Continue with next job.\", lifecyclePhase, failure);\n-\n+        actor.handleFailure(failure);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0be716e3cd59e6d209f58fab4532e02b0f6e88b"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dca1d4d31b78fb155b00c6ae489724664318cbef", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/dca1d4d31b78fb155b00c6ae489724664318cbef", "committedDate": "2020-03-11T14:26:40Z", "message": "chore(util): do not catch throwable from an actor job"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eee759e72dd82e3e25077670bcd037e5d4faaf15", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/eee759e72dd82e3e25077670bcd037e5d4faaf15", "committedDate": "2020-03-11T14:26:40Z", "message": "chore(util): allow actor specific exception handling"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0be716e3cd59e6d209f58fab4532e02b0f6e88b", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/f0be716e3cd59e6d209f58fab4532e02b0f6e88b", "committedDate": "2020-03-09T16:06:40Z", "message": "chore(logstream): enable health check on logstream and logstorage appender"}, "afterCommit": {"oid": "2cc4c8ab8d6151d94b1e3f52702d4c02d8634120", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/2cc4c8ab8d6151d94b1e3f52702d4c02d8634120", "committedDate": "2020-03-11T14:44:46Z", "message": "chore(logstream): enable health check on logstream and logstorage appender"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MTY5MDc5", "url": "https://github.com/camunda-cloud/zeebe/pull/4009#pullrequestreview-375169079", "createdAt": "2020-03-16T12:29:04Z", "commit": {"oid": "2cc4c8ab8d6151d94b1e3f52702d4c02d8634120"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMjoyOTowNFrOF2xx7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMjoyOTowNFrOF2xx7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk4MzAyMw==", "bodyText": "Could we also check/test the happy path please", "url": "https://github.com/camunda-cloud/zeebe/pull/4009#discussion_r392983023", "createdAt": "2020-03-16T12:29:04Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/test/java/io/zeebe/logstreams/impl/log/LogStorageAppenderHealthTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.logstreams.impl.log;\n+\n+import static io.zeebe.test.util.TestUtil.waitUntil;\n+import static io.zeebe.util.buffer.BufferUtil.wrapString;\n+\n+import io.zeebe.dispatcher.Dispatcher;\n+import io.zeebe.dispatcher.Dispatchers;\n+import io.zeebe.logstreams.spi.LogStorage;\n+import io.zeebe.logstreams.spi.LogStorageReader;\n+import io.zeebe.util.ByteValue;\n+import io.zeebe.util.health.HealthStatus;\n+import io.zeebe.util.sched.testing.ActorSchedulerRule;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.function.BiConsumer;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public final class LogStorageAppenderHealthTest {\n+\n+  private static final int MAX_FRAGMENT_SIZE = 1024;\n+  private static final int PARTITION_ID = 0;\n+\n+  @Rule public final ActorSchedulerRule schedulerRule = new ActorSchedulerRule();\n+\n+  private Dispatcher dispatcher;\n+  private ControllableLogStorage failingLogStorage;\n+  private LogStorageAppender appender;\n+  private LogStreamWriterImpl writer;\n+\n+  @Before\n+  public void setUp() {\n+    failingLogStorage = new ControllableLogStorage();\n+\n+    dispatcher =\n+        Dispatchers.create(\"0\")\n+            .actorScheduler(schedulerRule.get())\n+            .bufferSize((int) ByteValue.ofMegabytes(100 * MAX_FRAGMENT_SIZE))\n+            .maxFragmentLength(MAX_FRAGMENT_SIZE)\n+            .initialPartitionId(0)\n+            .build();\n+    final var subscription = dispatcher.openSubscription(\"log\");\n+\n+    appender =\n+        new LogStorageAppender(\n+            \"appender\", PARTITION_ID, failingLogStorage, subscription, MAX_FRAGMENT_SIZE);\n+    writer = new LogStreamWriterImpl(PARTITION_ID, dispatcher);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    appender.close();\n+    dispatcher.close();\n+  }\n+\n+  @Test\n+  public void shouldFailActorWhenWriteFails() {\n+    // given\n+    failingLogStorage.onNextAppend(\n+        (pos, listener) -> listener.onWriteError(new RuntimeException(\"foo\")));\n+\n+    // when\n+    writer.value(wrapString(\"value\")).tryWrite();\n+    schedulerRule.submitActor(appender).join();\n+\n+    // then\n+    waitUntil(() -> appender.getHealthStatus() == HealthStatus.UNHEALTHY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cc4c8ab8d6151d94b1e3f52702d4c02d8634120"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MTY5NjA2", "url": "https://github.com/camunda-cloud/zeebe/pull/4009#pullrequestreview-375169606", "createdAt": "2020-03-16T12:29:50Z", "commit": {"oid": "2cc4c8ab8d6151d94b1e3f52702d4c02d8634120"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e82920fb868b842af141e4f4eb9b5ac8456e7edd", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/e82920fb868b842af141e4f4eb9b5ac8456e7edd", "committedDate": "2020-03-16T13:07:55Z", "message": "chore(logstream): enable health check on logstream and logstorage appender"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2cc4c8ab8d6151d94b1e3f52702d4c02d8634120", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/2cc4c8ab8d6151d94b1e3f52702d4c02d8634120", "committedDate": "2020-03-11T14:44:46Z", "message": "chore(logstream): enable health check on logstream and logstorage appender"}, "afterCommit": {"oid": "e82920fb868b842af141e4f4eb9b5ac8456e7edd", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/e82920fb868b842af141e4f4eb9b5ac8456e7edd", "committedDate": "2020-03-16T13:07:55Z", "message": "chore(logstream): enable health check on logstream and logstorage appender"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3050, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}