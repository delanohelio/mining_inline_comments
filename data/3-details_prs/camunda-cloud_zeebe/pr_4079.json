{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMDYzMjk5", "number": 4079, "title": "feat(broker): FEEL expression in variable mappings", "bodyText": "Description\n\ntransform input and output variable mappings into a FEEL context expression\nprovide a FEEL append function to merge nested properties for output mappings\n\nwrote the function in Scala because it uses the Scala types from the FEEL engine\nwriting the function in Java would make it more complicated and less easy to understand\n\n\nvalidate that the source expression is valid\nvalidate that the target expression is a path\n\nRelated issues\ncloses #3808\nPull Request Checklist\n\n All commit messages match our commit message guidelines\n The submitting code follows our code style\n If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-03-19T15:14:58Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4079", "merged": true, "mergeCommit": {"oid": "0f9255ce7fb54427afb2dc6535b1c65148d1df76"}, "closed": true, "closedAt": "2020-03-25T12:45:31Z", "author": {"login": "saig0"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPNnepABqjMxNDYwNTIzMjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRGSMjABqjMxNjM2NjU2MDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b20db2c824e68aa7d1f73c75ad2e7dc5a2cb0814", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/b20db2c824e68aa7d1f73c75ad2e7dc5a2cb0814", "committedDate": "2020-03-19T15:11:25Z", "message": "feat(broker): FEEL expression in variable mappings\n\n* transform input and output variable mappings into a FEEL context expression\n* provide a FEEL append function to merge nested properties for output mappings\n* validate that the source expression is valid\n* validate that the target expression is a path"}, "afterCommit": {"oid": "8032c872e9cda60e2df863a163530a555bf4dd98", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8032c872e9cda60e2df863a163530a555bf4dd98", "committedDate": "2020-03-19T15:26:36Z", "message": "feat(broker): FEEL expression in variable mappings\n\n* transform input and output variable mappings into a FEEL context expression\n* provide a FEEL append function to merge nested properties for output mappings\n* validate that the source expression is valid\n* validate that the target expression is a path"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8032c872e9cda60e2df863a163530a555bf4dd98", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8032c872e9cda60e2df863a163530a555bf4dd98", "committedDate": "2020-03-19T15:26:36Z", "message": "feat(broker): FEEL expression in variable mappings\n\n* transform input and output variable mappings into a FEEL context expression\n* provide a FEEL append function to merge nested properties for output mappings\n* validate that the source expression is valid\n* validate that the target expression is a path"}, "afterCommit": {"oid": "2edaa4a2f12e25e589ebc330b3245775443e78be", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/2edaa4a2f12e25e589ebc330b3245775443e78be", "committedDate": "2020-03-20T05:15:12Z", "message": "feat(broker): FEEL expression in variable mappings\n\n* transform input and output variable mappings into a FEEL context expression\n* provide a FEEL append function to merge nested properties for output mappings\n* validate that the source expression is valid\n* validate that the target expression is a path"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2edaa4a2f12e25e589ebc330b3245775443e78be", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/2edaa4a2f12e25e589ebc330b3245775443e78be", "committedDate": "2020-03-20T05:15:12Z", "message": "feat(broker): FEEL expression in variable mappings\n\n* transform input and output variable mappings into a FEEL context expression\n* provide a FEEL append function to merge nested properties for output mappings\n* validate that the source expression is valid\n* validate that the target expression is a path"}, "afterCommit": {"oid": "29c80274f851e5418c0717dd86bfe141fd665f05", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/29c80274f851e5418c0717dd86bfe141fd665f05", "committedDate": "2020-03-20T13:00:42Z", "message": "feat(broker): FEEL expression in variable mappings\n\n* transform input and output variable mappings into a FEEL context expression\n* provide a FEEL append function to merge nested properties for output mappings\n* validate that the source expression is valid\n* validate that the target expression is a valid path expression"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29c80274f851e5418c0717dd86bfe141fd665f05", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/29c80274f851e5418c0717dd86bfe141fd665f05", "committedDate": "2020-03-20T13:00:42Z", "message": "feat(broker): FEEL expression in variable mappings\n\n* transform input and output variable mappings into a FEEL context expression\n* provide a FEEL append function to merge nested properties for output mappings\n* validate that the source expression is valid\n* validate that the target expression is a valid path expression"}, "afterCommit": {"oid": "9173c252f2a96b472631c7a6b5de51e6c29d5d37", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/9173c252f2a96b472631c7a6b5de51e6c29d5d37", "committedDate": "2020-03-20T13:18:18Z", "message": "feat(broker): FEEL expression in variable mappings\n\n* transform input and output variable mappings into a FEEL context expression\n* provide a FEEL append function to merge nested properties for output mappings\n* validate that the source expression is valid\n* validate that the target expression is a valid path expression"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMDc4MzMw", "url": "https://github.com/camunda-cloud/zeebe/pull/4079#pullrequestreview-380078330", "createdAt": "2020-03-24T08:14:42Z", "commit": {"oid": "9173c252f2a96b472631c7a6b5de51e6c29d5d37"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODoxNDo0MlrOF6k-2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODo0MzowMVrOF6l6JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2NzY0Mw==", "bodyText": "Why not use s.zeebeOutput(\"foo\", \"bar\")?", "url": "https://github.com/camunda-cloud/zeebe/pull/4079#discussion_r396967643", "createdAt": "2020-03-24T08:14:42Z", "author": {"login": "deepthidevaki"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/deployment/model/validation/ZeebeRuntimeValidationTest.java", "diffHunk": "@@ -76,45 +88,93 @@\n         Arrays.asList(expect(ConditionExpression.class, INVALID_EXPRESSION_MESSAGE))\n       },\n       {\n-        // not a json path expression\n+        // not a valid expression\n+        Bpmn.createExecutableProcess(\"process\")\n+            .startEvent()\n+            .serviceTask(\"task\", s -> s.zeebeInput(INVALID_EXPRESSION, \"foo\"))\n+            .endEvent()\n+            .done(),\n+        Arrays.asList(expect(ZeebeInput.class, INVALID_EXPRESSION_MESSAGE))\n+      },\n+      {\n+        // static expression\n+        Bpmn.createExecutableProcess(\"process\")\n+            .startEvent()\n+            .serviceTask(\"task\", s -> zeebeInput(s, \"foo\", \"bar\"))\n+            .endEvent()\n+            .done(),\n+        Arrays.asList(expect(ZeebeInput.class, STATIC_EXPRESSION_MESSAGE))\n+      },\n+      {\n+        // empty expression\n+        Bpmn.createExecutableProcess(\"process\")\n+            .startEvent()\n+            .serviceTask(\"task\", s -> zeebeInput(s, \"\", \"bar\"))\n+            .endEvent()\n+            .done(),\n+        Arrays.asList(expect(ZeebeInput.class, MISSING_EXPRESSION_MESSAGE))\n+      },\n+      {\n+        // empty path expression\n+        Bpmn.createExecutableProcess(\"process\")\n+            .startEvent()\n+            .serviceTask(\"task\", s -> zeebeInput(s, \"=foo\", \"\"))\n+            .endEvent()\n+            .done(),\n+        Arrays.asList(expect(ZeebeInput.class, MISSING_PATH_EXPRESSION_MESSAGE))\n+      },\n+      {\n+        // invalid target expression\n         Bpmn.createExecutableProcess(\"process\")\n             .startEvent()\n-            .serviceTask(\"task\", s -> s.zeebeInput(INVALID_PATH_QUERY, \"foo\"))\n+            .serviceTask(\"task\", s -> s.zeebeInput(\"foo\", INVALID_PATH_EXPRESSION))\n             .endEvent()\n             .done(),\n-        Arrays.asList(expect(ZeebeInput.class, INVALID_PATH_QUERY_MESSAGE))\n+        Arrays.asList(expect(ZeebeInput.class, INVALID_PATH_EXPRESSION_MESSAGE))\n       },\n-      { // not a json path expression\n+      { // not a valid expression\n         Bpmn.createExecutableProcess(\"process\")\n             .startEvent()\n-            .serviceTask(\"task\", s -> s.zeebeOutput(INVALID_PATH_QUERY, \"foo\"))\n+            .serviceTask(\"task\", s -> s.zeebeOutput(INVALID_EXPRESSION, \"foo\"))\n             .endEvent()\n             .done(),\n-        Arrays.asList(expect(ZeebeOutput.class, INVALID_PATH_QUERY_MESSAGE))\n+        Arrays.asList(expect(ZeebeOutput.class, INVALID_EXPRESSION_MESSAGE))\n       },\n       {\n-        // input source expression is not supported\n+        // static expression\n         Bpmn.createExecutableProcess(\"process\")\n             .startEvent()\n-            .serviceTask(\"task\", s -> s.zeebeInput(\"foo[1]\", \"foo\"))\n+            .serviceTask(\"task\", s -> zeebeOutput(s, \"foo\", \"bar\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9173c252f2a96b472631c7a6b5de51e6c29d5d37"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk2ODkzNQ==", "bodyText": "Why were all theses tests removed?", "url": "https://github.com/camunda-cloud/zeebe/pull/4079#discussion_r396968935", "createdAt": "2020-03-24T08:17:14Z", "author": {"login": "deepthidevaki"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/handlers/element/ElementActivatedHandlerTest.java", "diffHunk": "@@ -1,70 +0,0 @@\n-/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9173c252f2a96b472631c7a6b5de51e6c29d5d37"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3MDg0NA==", "bodyText": "Is this the desired behavior? Just curious.", "url": "https://github.com/camunda-cloud/zeebe/pull/4079#discussion_r396970844", "createdAt": "2020-03-24T08:20:47Z", "author": {"login": "deepthidevaki"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/variable/mapping/VariableInputMappingTransformerTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor.workflow.variable.mapping;\n+\n+import static io.zeebe.test.util.MsgPackUtil.asMsgPack;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import io.zeebe.el.ExpressionLanguage;\n+import io.zeebe.el.ExpressionLanguageFactory;\n+import io.zeebe.el.ResultType;\n+import io.zeebe.engine.processor.workflow.deployment.model.transformer.VariableMappingTransformer;\n+import io.zeebe.model.bpmn.instance.zeebe.ZeebeMapping;\n+import io.zeebe.test.util.MsgPackUtil;\n+import java.util.List;\n+import java.util.Map;\n+import org.agrona.DirectBuffer;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameter;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public final class VariableInputMappingTransformerTest {\n+\n+  @Parameter(0)\n+  public List<ZeebeMapping> mappings;\n+\n+  @Parameter(1)\n+  public Map<String, DirectBuffer> variables;\n+\n+  @Parameter(2)\n+  public String expectedOutput;\n+\n+  private final VariableMappingTransformer transformer = new VariableMappingTransformer();\n+  private final ExpressionLanguage expressionLanguage =\n+      ExpressionLanguageFactory.createExpressionLanguage();\n+\n+  @Parameters(name = \"with {0} to {2}\")\n+  public static Object[][] parameters() {\n+    return new Object[][] {\n+      // no mappings\n+      {List.of(), Map.of(), \"{}\"},\n+      // direct mapping\n+      {List.of(mapping(\"x\", \"x\")), Map.of(\"x\", asMsgPack(\"1\")), \"{'x':1}\"},\n+      {List.of(mapping(\"x\", \"a\")), Map.of(\"x\", asMsgPack(\"1\")), \"{'a':1}\"},\n+      {\n+        List.of(mapping(\"x\", \"a\"), mapping(\"y\", \"b\")),\n+        Map.of(\"x\", asMsgPack(\"1\"), \"y\", asMsgPack(\"2\")),\n+        \"{'a':1, 'b':2}\"\n+      },\n+      {List.of(mapping(\"x\", \"a\")), Map.of(\"x\", asMsgPack(\"{'y':1}\")), \"{'a':{'y':1}}\"},\n+      // nested target\n+      {List.of(mapping(\"x\", \"a.b\")), Map.of(\"x\", asMsgPack(\"1\")), \"{'a':{'b':1}}\"},\n+      {\n+        List.of(mapping(\"x\", \"a.b\"), mapping(\"y\", \"a.c\")),\n+        Map.of(\"x\", asMsgPack(\"1\"), \"y\", asMsgPack(\"2\")),\n+        \"{'a':{'b':1, 'c':2}}\"\n+      },\n+      {List.of(mapping(\"x\", \"a.b.c\")), Map.of(\"x\", asMsgPack(\"1\")), \"{'a':{'b':{'c':1}}}}\"},\n+      // nested source\n+      {List.of(mapping(\"x.y\", \"a\")), Map.of(\"x\", asMsgPack(\"{'y':1}\")), \"{'a':1}\"},\n+      {\n+        List.of(mapping(\"x.y\", \"a\"), mapping(\"x.z\", \"b\")),\n+        Map.of(\"x\", asMsgPack(\"{'y':1, 'z':2}\")),\n+        \"{'a':1, 'b':2}\"\n+      },\n+      {\n+        List.of(mapping(\"x.y\", \"a.b\"), mapping(\"x.z\", \"a.c\")),\n+        Map.of(\"x\", asMsgPack(\"{'y':1, 'z':2}\")),\n+        \"{'a': {'b':1, 'c':2}}\"\n+      },\n+      // source FEEL expression\n+      {List.of(mapping(\"1\", \"a\")), Map.of(), \"{'a':1}\"},\n+      {List.of(mapping(\"\\\"foo\\\"\", \"a\")), Map.of(), \"{'a':'foo'}\"},\n+      {List.of(mapping(\"[1,2,3]\", \"a\")), Map.of(), \"{'a':[1,2,3]}\"},\n+      {List.of(mapping(\"x + y\", \"a\")), Map.of(\"x\", asMsgPack(\"1\"), \"y\", asMsgPack(\"2\")), \"{'a':3}\"},\n+      {\n+        List.of(mapping(\"{x:x, y:y}\", \"a\")),\n+        Map.of(\"x\", asMsgPack(\"1\"), \"y\", asMsgPack(\"2\")),\n+        \"{'a':{'x':1, 'y':2}}\"\n+      },\n+      {\n+        List.of(mapping(\"append(x, y)\", \"a\")),\n+        Map.of(\"x\", asMsgPack(\"[1,2]\"), \"y\", asMsgPack(\"3\")),\n+        \"{'a':[1,2,3]}\"\n+      },\n+      // evaluate mappings in order\n+      {\n+        List.of(mapping(\"x\", \"a\"), mapping(\"a + 1\", \"b\")),\n+        Map.of(\"x\", asMsgPack(\"1\")),\n+        \"{'a':1, 'b':2}\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9173c252f2a96b472631c7a6b5de51e6c29d5d37"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk4MjgyMQ==", "bodyText": "What are the consequences of throwing exception here? Is it handled later and the deployment will be rejected?", "url": "https://github.com/camunda-cloud/zeebe/pull/4079#discussion_r396982821", "createdAt": "2020-03-24T08:43:01Z", "author": {"login": "deepthidevaki"}, "path": "engine/src/main/java/io/zeebe/engine/processor/workflow/deployment/model/transformer/VariableMappingTransformer.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.processor.workflow.deployment.model.transformer;\n+\n+import io.zeebe.el.Expression;\n+import io.zeebe.el.ExpressionLanguage;\n+import io.zeebe.model.bpmn.instance.zeebe.ZeebeMapping;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Transform variable mappings into an expression.\n+ *\n+ * <p>The resulting expression is a FEEL context that has a similar structure as a JSON document.\n+ * Each target of a mapping is a key in the context and the source of this mapping is the context\n+ * value. The source expression can be any FEEL expression. A nested target expression is\n+ * transformed into a nested context.\n+ *\n+ * <p>Variable mappings:\n+ *\n+ * <pre>\n+ *   source | target\n+ *   =======|=======\n+ *    x     | a\n+ *    y     | b.c\n+ *    z     | b.d\n+ * </pre>\n+ *\n+ * FEEL context expression:\n+ *\n+ * <pre>\n+ *   {\n+ *     a: x,\n+ *     b: {\n+ *       c: y,\n+ *       d: z\n+ *     }\n+ *   }\n+ * </pre>\n+ */\n+public final class VariableMappingTransformer {\n+\n+  private static final String EXPRESSION_MARKER = \"=\";\n+\n+  public Expression transformInputMappings(\n+      final Collection<? extends ZeebeMapping> inputMappings,\n+      final ExpressionLanguage expressionLanguage) {\n+\n+    final var mappings = toMappings(inputMappings, expressionLanguage);\n+    final var context = asContext(mappings);\n+    final var contextExpression =\n+        asFeelContextExpression(context, (contextValue, contextPath) -> contextValue);\n+    return parseExpression(contextExpression, expressionLanguage);\n+  }\n+\n+  public Expression transformOutputMappings(\n+      final Collection<? extends ZeebeMapping> outputMappings,\n+      final ExpressionLanguage expressionLanguage) {\n+\n+    final var mappings = toMappings(outputMappings, expressionLanguage);\n+    final var context = asContext(mappings);\n+    final var contextExpression = asFeelContextExpression(context, this::appendContextExpression);\n+    return parseExpression(contextExpression, expressionLanguage);\n+  }\n+\n+  private List<Mapping> toMappings(\n+      final Collection<? extends ZeebeMapping> mappings,\n+      final ExpressionLanguage expressionLanguage) {\n+    return mappings.stream()\n+        .map(\n+            mapping -> {\n+              final var source = mapping.getSource();\n+              final var sourceExpression = expressionLanguage.parseExpression(source);\n+              return new Mapping(sourceExpression, mapping.getTarget());\n+            })\n+        .collect(Collectors.toList());\n+  }\n+\n+  private MappingContext asContext(final List<Mapping> mappings) {\n+    final var context = new MappingContext();\n+\n+    for (final Mapping mapping : mappings) {\n+      final var sourceExpression = mapping.source;\n+      final var targetPathExpression = mapping.target;\n+\n+      final var targetPathParts = splitPathExpression(targetPathExpression);\n+      createContextEntry(targetPathParts, sourceExpression, context);\n+    }\n+    return context;\n+  }\n+\n+  private List<String> splitPathExpression(final String path) {\n+    final var parts = path.split(\"\\\\.\");\n+    return new ArrayList<>(Arrays.asList(parts));\n+  }\n+\n+  private void createContextEntry(\n+      final List<String> targetPathParts,\n+      final Expression sourceExpression,\n+      final MappingContext context) {\n+    final String target = targetPathParts.remove(0);\n+\n+    if (targetPathParts.isEmpty()) {\n+      context.addEntry(target, sourceExpression);\n+\n+    } else {\n+      final var nestedContext = context.getOrAddContext(target);\n+      createContextEntry(targetPathParts, sourceExpression, nestedContext);\n+    }\n+  }\n+\n+  private String asFeelContextExpression(\n+      final MappingContext context,\n+      final BiFunction<String, List<String>, Object> contextValueVisitor) {\n+    return context.visit(feelContextBuilder(contextValueVisitor));\n+  }\n+\n+  private MappingContextVisitor<String> feelContextBuilder(\n+      final BiFunction<String, List<String>, Object> contextValueVisitor) {\n+    return new MappingContextVisitor<>() {\n+      @Override\n+      public String onEntry(final String targetKey, final Expression sourceExpression) {\n+        return targetKey + \":\" + sourceExpression.getExpression();\n+      }\n+\n+      @Override\n+      public String onContext(final List<String> entries) {\n+        return \"{\" + String.join(\",\", entries) + \"}\";\n+      }\n+\n+      @Override\n+      public String onContextEntry(\n+          final String targetKey, final String contextValue, final List<String> contextPath) {\n+        return targetKey + \":\" + contextValueVisitor.apply(contextValue, contextPath);\n+      }\n+    };\n+  }\n+\n+  private String appendContextExpression(\n+      final String nestedContext, final List<String> contextPath) {\n+    // for a nested target mapping 'x -> a.b', append the nested property 'b' to\n+    // the existing context variable 'a' (instead of overriding 'a')\n+    // example: x = 1 and a = {'c':2} results in a = {'b':1, 'c':2}\n+    final var existingContext = String.join(\".\", contextPath);\n+    return \"appendTo(\" + existingContext + \",\" + nestedContext + \")\";\n+  }\n+\n+  private Expression parseExpression(\n+      final String contextExpression, final ExpressionLanguage expressionLanguage) {\n+    final var expression =\n+        expressionLanguage.parseExpression(EXPRESSION_MARKER + contextExpression);\n+\n+    if (!expression.isValid()) {\n+      throw new IllegalStateException(\n+          String.format(\n+              \"Failed to build variable mapping expression: %s\", expression.getFailureMessage()));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9173c252f2a96b472631c7a6b5de51e6c29d5d37"}, "originalPosition": 168}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9173c252f2a96b472631c7a6b5de51e6c29d5d37", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/9173c252f2a96b472631c7a6b5de51e6c29d5d37", "committedDate": "2020-03-20T13:18:18Z", "message": "feat(broker): FEEL expression in variable mappings\n\n* transform input and output variable mappings into a FEEL context expression\n* provide a FEEL append function to merge nested properties for output mappings\n* validate that the source expression is valid\n* validate that the target expression is a valid path expression"}, "afterCommit": {"oid": "ab3f90ced681db6de2c12fddd9a191ca7a195676", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/ab3f90ced681db6de2c12fddd9a191ca7a195676", "committedDate": "2020-03-25T09:55:05Z", "message": "chore(engine): rebasing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxMDM1ODg1", "url": "https://github.com/camunda-cloud/zeebe/pull/4079#pullrequestreview-381035885", "createdAt": "2020-03-25T10:48:21Z", "commit": {"oid": "ab3f90ced681db6de2c12fddd9a191ca7a195676"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a3caf8538f778054f1a3e05e490a4a1954086a5", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8a3caf8538f778054f1a3e05e490a4a1954086a5", "committedDate": "2020-03-25T12:01:05Z", "message": "feat(broker): FEEL expression in variable mappings\n\n* transform input and output variable mappings into a FEEL context expression\n* provide a FEEL append function to merge nested properties for output mappings\n* validate that the source expression is valid\n* validate that the target expression is a valid path expression\n* align variable mapping builder method names with other expression attributes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab3f90ced681db6de2c12fddd9a191ca7a195676", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/ab3f90ced681db6de2c12fddd9a191ca7a195676", "committedDate": "2020-03-25T09:55:05Z", "message": "chore(engine): rebasing"}, "afterCommit": {"oid": "8a3caf8538f778054f1a3e05e490a4a1954086a5", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8a3caf8538f778054f1a3e05e490a4a1954086a5", "committedDate": "2020-03-25T12:01:05Z", "message": "feat(broker): FEEL expression in variable mappings\n\n* transform input and output variable mappings into a FEEL context expression\n* provide a FEEL append function to merge nested properties for output mappings\n* validate that the source expression is valid\n* validate that the target expression is a valid path expression\n* align variable mapping builder method names with other expression attributes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3086, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}