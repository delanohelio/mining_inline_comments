{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NDQ1MDE1", "number": 4372, "title": "fix(atomix): consume read buffer correctly", "bodyText": "Description\nFix issue where the read buffer was consumed only half and the rest was\nthrown away.\nRefactor FileChannelJournalSegmentReader#readNext to improve readability and hopefully maintainability.\n\nI run also a benchmark with these changes (#4358 was also part of the branch I run a benchmark with)\n\nRelated issues\n\ncloses #4248\nPull Request Checklist\n\n All commit messages match our commit message guidelines\n The submitting code follows our code style\n If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-04-24T09:43:12Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4372", "merged": true, "mergeCommit": {"oid": "bf5d2fa26f2c95674bbe735eeea6afc3af7c2148"}, "closed": true, "closedAt": "2020-05-01T08:26:24Z", "author": {"login": "Zelldon"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcauQg3gH2gAyNDA4NDQ1MDE1OmFmN2RlMTM0ZjRjODRjMTFiZDkyMjQ0YjE0OWUzZWYwZjJlZjRmMzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccRaHCAFqTQwMjM2NjgxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "af7de134f4c84c11bd92244b149e3ef0f2ef4f38", "author": {"user": {"login": "Zelldon", "name": "Christopher Zell"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/af7de134f4c84c11bd92244b149e3ef0f2ef4f38", "committedDate": "2020-04-24T09:41:47Z", "message": "fix(atomix): consume read buffer correctly\n\n Fix issue where the read buffer was consumed only half and the rest was\n thrown away.\n\n Refactor FileChannelJournalSegmentReader#readNext to improve\n readability and hopefully maintainability."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwOTc0MjIw", "url": "https://github.com/camunda-cloud/zeebe/pull/4372#pullrequestreview-400974220", "createdAt": "2020-04-27T13:53:59Z", "commit": {"oid": "af7de134f4c84c11bd92244b149e3ef0f2ef4f38"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMzo1Mzo1OVrOGMkZOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMzo1Mzo1OVrOGMkZOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTgzMjM3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final var cantReadEntry = memory.remaining() < length;\n          \n          \n            \n                  final var cantReadEntry = memory.remaining() < length + Integer.BYTES;\n          \n      \n    \n    \n  \n\nShould include the checksum.", "url": "https://github.com/camunda-cloud/zeebe/pull/4372#discussion_r415832379", "createdAt": "2020-04-27T13:53:59Z", "author": {"login": "deepthidevaki"}, "path": "atomix/storage/src/main/java/io/atomix/storage/journal/FileChannelJournalSegmentReader.java", "diffHunk": "@@ -172,54 +172,82 @@ private void readNext() {\n     final long index = getNextIndex();\n \n     try {\n-      // Read more bytes from the segment if necessary.\n-      if (memory.remaining() < maxEntrySize) {\n-        final long position = channel.position() + memory.position();\n-        channel.position(position);\n-        memory.clear();\n-        channel.read(memory);\n-        channel.position(position);\n-        memory.flip();\n-      }\n-\n       // Mark the buffer so it can be reset if necessary.\n       memory.mark();\n \n-      try {\n-        // Read the length of the entry.\n-        final int length = memory.getInt();\n-\n-        // If the buffer length is zero then return.\n-        if (length <= 0 || length > maxEntrySize) {\n-          memory.reset().limit(memory.position());\n-          nextEntry = null;\n-          return;\n-        }\n-\n-        // Read the checksum of the entry.\n-        final long checksum = memory.getInt() & 0xFFFFFFFFL;\n-\n-        // Compute the checksum for the entry bytes.\n-        final Checksum crc32 = new CRC32();\n-        crc32.update(memory.array(), memory.position(), length);\n-\n-        // If the stored checksum equals the computed checksum, return the entry.\n-        if (checksum == crc32.getValue()) {\n-          final int limit = memory.limit();\n-          memory.limit(memory.position() + length);\n-          final E entry = namespace.deserialize(memory);\n-          memory.limit(limit);\n-          nextEntry = new Indexed<>(index, entry, length);\n-        } else {\n-          memory.reset().limit(memory.position());\n-          nextEntry = null;\n-        }\n-      } catch (final BufferUnderflowException e) {\n-        memory.reset().limit(memory.position());\n-        nextEntry = null;\n+      final var cantReadLength = memory.remaining() < Integer.BYTES;\n+      if (cantReadLength) {\n+        readBytesIntoBuffer();\n+        memory.mark();\n+      }\n+\n+      final int length = memory.getInt();\n+      if (isLengthInvalid(length)) {\n+        return;\n+      }\n+\n+      final var cantReadEntry = memory.remaining() < length;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af7de134f4c84c11bd92244b149e3ef0f2ef4f38"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b111a977c289674007760213533d0396fccda9b0", "author": {"user": {"login": "Zelldon", "name": "Christopher Zell"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/b111a977c289674007760213533d0396fccda9b0", "committedDate": "2020-04-28T10:11:30Z", "message": "chore(atomix): take checksum length into account\n\n Adjust check such that it takes also checksum into account. Adjust tests such that they fail if this change is missing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMzY2ODE5", "url": "https://github.com/camunda-cloud/zeebe/pull/4372#pullrequestreview-402366819", "createdAt": "2020-04-29T05:07:42Z", "commit": {"oid": "b111a977c289674007760213533d0396fccda9b0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNTowNzo0M1rOGNv47g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNTowNzo0M1rOGNv47g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzA2OTI5NA==", "bodyText": "I'm thinking if it would be good to test with multiple max entry sizes to find other potential bugs in future.", "url": "https://github.com/camunda-cloud/zeebe/pull/4372#discussion_r417069294", "createdAt": "2020-04-29T05:07:43Z", "author": {"login": "deepthidevaki"}, "path": "atomix/storage/src/test/java/io/atomix/storage/journal/AbstractJournalTest.java", "diffHunk": "@@ -91,7 +91,7 @@ public static Collection primeNumbers() {\n         .withNamespace(NAMESPACE)\n         .withStorageLevel(storageLevel())\n         .withMaxSegmentSize(maxSegmentSize)\n-        .withMaxEntrySize(64)\n+        .withMaxEntrySize(48)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b111a977c289674007760213533d0396fccda9b0"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2858, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}