{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NDMyMDE5", "number": 3907, "title": "3869 spring boot config", "bodyText": "Description\n\nchanges configuration from TOML to YAML\nadds backwards compatibility for old environment variables\nchanges exporter configuration from list to map\nadds dependency to Spring Boot\n\nFor more details, please refer to the linked issue\nRelated issues\ncloses #3869\nPull Request Checklist\n\n[ X ] All commit messages match our commit message guidelines\n[ X ] The submitting code follows our code style\n[ X ] If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-02-21T19:16:41Z", "url": "https://github.com/camunda-cloud/zeebe/pull/3907", "merged": true, "mergeCommit": {"oid": "97bda63f2619c996980c8317ee4741fca6dbdc17"}, "closed": true, "closedAt": "2020-03-03T17:17:28Z", "author": {"login": "pihme"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHajEHgBqjMwNjQ3MTU4MDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKDtb0AFqTM2ODA1NTE2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca7586d04dea44b7e5bd4a55913a57fa010d2804", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/ca7586d04dea44b7e5bd4a55913a57fa010d2804", "committedDate": "2020-02-21T18:24:38Z", "message": "feat(broker): Use map instead of list to configure exporters\n\nMaps have two advantages:\n- If several config files are used, each exporter will be added to the configuration (with lists they would be replaced)\n- Maps give each exporter an addressable key; this way it is possible to set environment variables that e.g. overwrite the password inside the elasticsearch exporter\n\nThis also means that the ID is no longer part of the ExporterCfg object. Instead the ID is given outside.\n\nThe ID is still part of the ExporterDescriptor, though, and corresponds to the key under wich the exporter was added to the BrokerCfg"}, "afterCommit": {"oid": "4f910d0dbfda943af6c15b8ae680c5ab0e759f4d", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/4f910d0dbfda943af6c15b8ae680c5ab0e759f4d", "committedDate": "2020-02-24T09:59:09Z", "message": "feat(broker): Use map instead of list to configure exporters\n\nMaps have two advantages:\n- If several config files are used, each exporter will be added to the configuration (with lists they would be replaced)\n- Maps give each exporter an addressable key; this way it is possible to set environment variables that e.g. overwrite the password inside the elasticsearch exporter\n\nThis also means that the ID is no longer part of the ExporterCfg object. Instead the ID is given outside.\n\nThe ID is still part of the ExporterDescriptor, though, and corresponds to the key under wich the exporter was added to the BrokerCfg"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4f910d0dbfda943af6c15b8ae680c5ab0e759f4d", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/4f910d0dbfda943af6c15b8ae680c5ab0e759f4d", "committedDate": "2020-02-24T09:59:09Z", "message": "feat(broker): Use map instead of list to configure exporters\n\nMaps have two advantages:\n- If several config files are used, each exporter will be added to the configuration (with lists they would be replaced)\n- Maps give each exporter an addressable key; this way it is possible to set environment variables that e.g. overwrite the password inside the elasticsearch exporter\n\nThis also means that the ID is no longer part of the ExporterCfg object. Instead the ID is given outside.\n\nThe ID is still part of the ExporterDescriptor, though, and corresponds to the key under wich the exporter was added to the BrokerCfg"}, "afterCommit": {"oid": "700726102b03e50011dbddec27e6fbd04def7fd9", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/700726102b03e50011dbddec27e6fbd04def7fd9", "committedDate": "2020-02-24T10:37:47Z", "message": "feat(broker): Use map instead of list to configure exporters\n\nMaps have two advantages:\n- If several config files are used, each exporter will be added to the configuration (with lists they would be replaced)\n- Maps give each exporter an addressable key; this way it is possible to set environment variables that e.g. overwrite the password inside the elasticsearch exporter\n\nThis also means that the ID is no longer part of the ExporterCfg object. Instead the ID is given outside.\n\nThe ID is still part of the ExporterDescriptor, though, and corresponds to the key under wich the exporter was added to the BrokerCfg"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35be982d71f7239d1e3959945320e9d9b65cda51", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/35be982d71f7239d1e3959945320e9d9b65cda51", "committedDate": "2020-02-24T18:43:23Z", "message": "feat(broker): Map old env vars to new ones and warn user"}, "afterCommit": {"oid": "2bb5471e96670dc98429c3ec28a71327307c6d88", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/2bb5471e96670dc98429c3ec28a71327307c6d88", "committedDate": "2020-02-24T22:03:07Z", "message": "feat(broker): Map old env vars to new ones and warn user"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2bb5471e96670dc98429c3ec28a71327307c6d88", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/2bb5471e96670dc98429c3ec28a71327307c6d88", "committedDate": "2020-02-24T22:03:07Z", "message": "feat(broker): Map old env vars to new ones and warn user"}, "afterCommit": {"oid": "2a964075389b13eb0e96959bd50145804462d8ad", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/2a964075389b13eb0e96959bd50145804462d8ad", "committedDate": "2020-02-24T22:11:45Z", "message": "feat(broker): Map old env vars to new ones and warn user"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ff6e38fe1fd53c9b219f59e0d28c853b1bd1ac2", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/0ff6e38fe1fd53c9b219f59e0d28c853b1bd1ac2", "committedDate": "2020-02-26T13:49:44Z", "message": "Merge branch '3869-spring-boot-config' of https://github.com/zeebe-io/zeebe into 3869-spring-boot-config"}, "afterCommit": {"oid": "bae1de251968c18843ac3bc987f2b386a0867f9a", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/bae1de251968c18843ac3bc987f2b386a0867f9a", "committedDate": "2020-02-26T13:44:25Z", "message": "feat(broker): Map old env vars to new ones and warn user"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bae1de251968c18843ac3bc987f2b386a0867f9a", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/bae1de251968c18843ac3bc987f2b386a0867f9a", "committedDate": "2020-02-26T13:44:25Z", "message": "feat(broker): Map old env vars to new ones and warn user"}, "afterCommit": {"oid": "1bdf430a1b97014a53384fcc67f0e2eddf276687", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/1bdf430a1b97014a53384fcc67f0e2eddf276687", "committedDate": "2020-02-26T14:51:13Z", "message": "feat(broker): Map old env vars to new ones and warn user"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1bdf430a1b97014a53384fcc67f0e2eddf276687", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/1bdf430a1b97014a53384fcc67f0e2eddf276687", "committedDate": "2020-02-26T14:51:13Z", "message": "feat(broker): Map old env vars to new ones and warn user"}, "afterCommit": {"oid": "5408a7cbdf8c3d14dba25caf5b56af3e9728503d", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/5408a7cbdf8c3d14dba25caf5b56af3e9728503d", "committedDate": "2020-02-26T15:17:39Z", "message": "feat(broker): Map old env vars to new ones and warn user"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5408a7cbdf8c3d14dba25caf5b56af3e9728503d", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/5408a7cbdf8c3d14dba25caf5b56af3e9728503d", "committedDate": "2020-02-26T15:17:39Z", "message": "feat(broker): Map old env vars to new ones and warn user"}, "afterCommit": {"oid": "ce62b162c5e15e8538358da4f1db0c6165f97159", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/ce62b162c5e15e8538358da4f1db0c6165f97159", "committedDate": "2020-02-26T16:54:14Z", "message": "feat(broker): Map old env vars to new ones and warn user"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ce62b162c5e15e8538358da4f1db0c6165f97159", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/ce62b162c5e15e8538358da4f1db0c6165f97159", "committedDate": "2020-02-26T16:54:14Z", "message": "feat(broker): Map old env vars to new ones and warn user"}, "afterCommit": {"oid": "4c15b1df8b8b11021d0c228f45e5fa6fc6b9ff08", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/4c15b1df8b8b11021d0c228f45e5fa6fc6b9ff08", "committedDate": "2020-02-26T17:29:06Z", "message": "fixup post rebase"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c15b1df8b8b11021d0c228f45e5fa6fc6b9ff08", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/4c15b1df8b8b11021d0c228f45e5fa6fc6b9ff08", "committedDate": "2020-02-26T17:29:06Z", "message": "fixup post rebase"}, "afterCommit": {"oid": "f2129e626cca591544f1ffadd586dea7dcb110a6", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/f2129e626cca591544f1ffadd586dea7dcb110a6", "committedDate": "2020-02-26T17:35:51Z", "message": "fixup post rebase"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f2129e626cca591544f1ffadd586dea7dcb110a6", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/f2129e626cca591544f1ffadd586dea7dcb110a6", "committedDate": "2020-02-26T17:35:51Z", "message": "fixup post rebase"}, "afterCommit": {"oid": "be2c3c1b5475d3272100dddf6ebc72c19ba4492b", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/be2c3c1b5475d3272100dddf6ebc72c19ba4492b", "committedDate": "2020-02-27T14:00:37Z", "message": "fixup post rebase"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be2c3c1b5475d3272100dddf6ebc72c19ba4492b", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/be2c3c1b5475d3272100dddf6ebc72c19ba4492b", "committedDate": "2020-02-27T14:00:37Z", "message": "fixup post rebase"}, "afterCommit": {"oid": "c149018ef10934749d0739224aa45681505dff2c", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/c149018ef10934749d0739224aa45681505dff2c", "committedDate": "2020-02-27T14:01:40Z", "message": "feat(broker): Map old env vars to new ones and warn user"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c149018ef10934749d0739224aa45681505dff2c", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/c149018ef10934749d0739224aa45681505dff2c", "committedDate": "2020-02-27T14:01:40Z", "message": "feat(broker): Map old env vars to new ones and warn user"}, "afterCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/cebf83aef164da275826ce152f16f1940f7ec176", "committedDate": "2020-02-27T14:11:19Z", "message": "feat(broker): Map old env vars to new ones and warn user"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NDgyODcx", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#pullrequestreview-366482871", "createdAt": "2020-02-28T15:31:53Z", "commit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNTozMTo1M1rOFv4-Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNjoyNjo1N1rOFv658w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2MDg2Ng==", "bodyText": "So if we used\nzeebe:\n  broker:\n    ...\nInstead of zeebe-broker as top level key, the variable would be ZEEBE_BROKER_GATEWAY_NETWORK_HOST?", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385760866", "createdAt": "2020-02-28T15:31:53Z", "author": {"login": "npepinpe"}, "path": "Dockerfile", "diffHunk": "@@ -4,7 +4,7 @@ ARG DISTBALL\n \n ENV ZB_HOME=/usr/local/zeebe \\\n     ZEEBE_LOG_LEVEL=info \\\n-    ZEEBE_GATEWAY_HOST=0.0.0.0 \\\n+    ZEEBEBROKER_GATEWAY_NETWORK_HOST=0.0.0.0 \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2MzI4Ng==", "bodyText": "Can we also add this as the default ID as part of DebugLogExporter? Or perhaps have DebugLogExporter.createDefaultExporter(value) or DebugLogExporter.newDefaultExporter(value)?", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385763286", "createdAt": "2020-02-28T15:35:49Z", "author": {"login": "npepinpe"}, "path": "broker/src/main/java/io/zeebe/broker/system/configuration/BrokerCfg.java", "diffHunk": "@@ -9,46 +9,50 @@\n \n import com.google.gson.GsonBuilder;\n import io.zeebe.broker.exporter.debug.DebugLogExporter;\n-import io.zeebe.util.DurationUtil;\n import io.zeebe.util.Environment;\n import java.time.Duration;\n-import java.util.ArrayList;\n-import java.util.List;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.stereotype.Component;\n \n+@Component\n+@ConfigurationProperties(prefix = \"zeebe-broker\")\n public final class BrokerCfg {\n \n   private NetworkCfg network = new NetworkCfg();\n   private ClusterCfg cluster = new ClusterCfg();\n   private ThreadsCfg threads = new ThreadsCfg();\n   private DataCfg data = new DataCfg();\n-  private List<ExporterCfg> exporters = new ArrayList<>();\n+  private Map<String, ExporterCfg> exporters = new HashMap<>();\n   private EmbeddedGatewayCfg gateway = new EmbeddedGatewayCfg();\n   private BackpressureCfg backpressure = new BackpressureCfg();\n \n-  private String stepTimeout = \"5m\";\n+  private Duration stepTimeout = Duration.ofMinutes(5);\n \n   public void init(final String brokerBase) {\n     init(brokerBase, new Environment());\n   }\n \n   public void init(final String brokerBase, final Environment environment) {\n     applyEnvironment(environment);\n-    network.init(this, brokerBase, environment);\n-    cluster.init(this, brokerBase, environment);\n-    threads.init(this, brokerBase, environment);\n-    data.init(this, brokerBase, environment);\n-    exporters.forEach(e -> e.init(this, brokerBase, environment));\n-    gateway.init(this, brokerBase, environment);\n-    backpressure.init(this, brokerBase, environment);\n+    network.init(this, brokerBase);\n+    cluster.init(this, brokerBase);\n+    threads.init(this, brokerBase);\n+    data.init(this, brokerBase);\n+    exporters.values().forEach(e -> e.init(this, brokerBase));\n+    gateway.init(this, brokerBase);\n+    backpressure.init(this, brokerBase);\n   }\n \n   private void applyEnvironment(final Environment environment) {\n     environment\n         .get(EnvironmentConstants.ENV_DEBUG_EXPORTER)\n         .ifPresent(\n             value ->\n-                exporters.add(DebugLogExporter.defaultConfig(\"pretty\".equalsIgnoreCase(value))));\n-    environment.get(EnvironmentConstants.ENV_STEP_TIMEOUT).ifPresent(this::setStepTimeout);\n+                exporters.put(\n+                    \"DebugLogExporter\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2NTY3Ng==", "bodyText": "If this is only used in the BrokerCfg post process step, I would move that constant there, what do you think? In general I'm not a fan of constant-only classes/files, but open to discussion.", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385765676", "createdAt": "2020-02-28T15:39:37Z", "author": {"login": "npepinpe"}, "path": "broker/src/main/java/io/zeebe/broker/system/configuration/EnvironmentConstants.java", "diffHunk": "@@ -9,17 +9,5 @@\n \n public final class EnvironmentConstants {\n \n-  public static final String ENV_NODE_ID = \"ZEEBE_NODE_ID\";\n-  public static final String ENV_HOST = \"ZEEBE_HOST\";\n-  public static final String ENV_ADVERTISED_HOST = \"ZEEBE_ADVERTISED_HOST\";\n-  public static final String ENV_PORT_OFFSET = \"ZEEBE_PORT_OFFSET\";\n-  public static final String ENV_INITIAL_CONTACT_POINTS = \"ZEEBE_CONTACT_POINTS\";\n-  public static final String ENV_DIRECTORIES = \"ZEEBE_DIRECTORIES\";\n-  public static final String ENV_PARTITIONS_COUNT = \"ZEEBE_PARTITIONS_COUNT\";\n-  public static final String ENV_REPLICATION_FACTOR = \"ZEEBE_REPLICATION_FACTOR\";\n-  public static final String ENV_CLUSTER_SIZE = \"ZEEBE_CLUSTER_SIZE\";\n-  public static final String ENV_CLUSTER_NAME = \"ZEEBE_CLUSTER_NAME\";\n-  public static final String ENV_EMBED_GATEWAY = \"ZEEBE_EMBED_GATEWAY\";\n   public static final String ENV_DEBUG_EXPORTER = \"ZEEBE_DEBUG\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc2OTY1OQ==", "bodyText": "Nit: might as well keep using var here.", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385769659", "createdAt": "2020-02-28T15:46:08Z", "author": {"login": "npepinpe"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -115,10 +115,13 @@ public ZeebePartition(\n     this.scheduler = actorScheduler;\n     this.maxFragmentSize = (int) brokerCfg.getNetwork().getMaxMessageSizeInBytes();\n \n+    final var exporterEntries = brokerCfg.getExporters().entrySet();\n     // load and validate exporters\n-    for (final ExporterCfg exporterCfg : brokerCfg.getExporters()) {\n+    for (final var exporterEntry : exporterEntries) {\n+      final String id = exporterEntry.getKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3MDM1OQ==", "bodyText": "Hm, I guess this means the behavior is now different - though I would argue for the better \ud83d\udc4d\nNit: I guess the test name is invalid now since we're not ignoring it.", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385770359", "createdAt": "2020-02-28T15:47:20Z", "author": {"login": "npepinpe"}, "path": "broker/src/test/java/io/zeebe/broker/system/configuration/BrokerCfgTest.java", "diffHunk": "@@ -120,20 +101,24 @@ public void shouldUseSpecifiedNodeId() {\n \n   @Test\n   public void shouldUseNodeIdFromEnvironment() {\n-    environment.put(ENV_NODE_ID, \"42\");\n+    environment.put(ZEEBE_BROKER_CLUSTER_NODE_ID, \"42\");\n     assertDefaultNodeId(42);\n   }\n \n   @Test\n   public void shouldUseNodeIdFromEnvironmentWithSpecifiedNodeId() {\n-    environment.put(ENV_NODE_ID, \"42\");\n+    environment.put(ZEEBE_BROKER_CLUSTER_NODE_ID, \"42\");\n     assertNodeId(\"specific-node-id\", 42);\n   }\n \n   @Test\n   public void shouldIgnoreInvalidNodeIdFromEnvironment() {\n-    environment.put(ENV_NODE_ID, \"a\");\n-    assertDefaultNodeId(DEFAULT_NODE_ID);\n+    // given\n+    environment.put(ZEEBE_BROKER_CLUSTER_NODE_ID, \"a\");\n+\n+    // when + then\n+    Assertions.assertThatThrownBy(() -> assertDefaultNodeId(DEFAULT_NODE_ID))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3MDk2Mw==", "bodyText": "Nit: same as above I guess", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385770963", "createdAt": "2020-02-28T15:48:21Z", "author": {"login": "npepinpe"}, "path": "broker/src/test/java/io/zeebe/broker/system/configuration/BrokerCfgTest.java", "diffHunk": "@@ -175,21 +160,29 @@ public void shouldUsePortOffsetFromEnvironment() {\n \n   @Test\n   public void shouldUsePortOffsetFromEnvironmentWithSpecifiedPorts() {\n-    environment.put(ENV_PORT_OFFSET, \"3\");\n+    environment.put(ZEEBE_BROKER_NETWORK_PORT_OFFSET, \"3\");\n     final int offset = 30;\n     assertPorts(\"specific-ports\", 1 + offset, 5 + offset, 6 + offset);\n   }\n \n   @Test\n   public void shouldIgnoreInvalidPortOffsetFromEnvironment() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3MjE3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ClusterCfgTest {\n          \n          \n            \n            public final class ClusterCfgTest {\n          \n      \n    \n    \n  \n\nNit: kind of inconsequential here, but we usually make classes final unless otherwise needed.", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385772171", "createdAt": "2020-02-28T15:50:30Z", "author": {"login": "npepinpe"}, "path": "broker/src/test/java/io/zeebe/broker/system/configuration/ClusterCfgTest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.configuration;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.junit.Test;\n+\n+public class ClusterCfgTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3MjQyOQ==", "bodyText": "I've seen you use this before, just out of curiosity, what does sut stand for?", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385772429", "createdAt": "2020-02-28T15:50:56Z", "author": {"login": "npepinpe"}, "path": "broker/src/test/java/io/zeebe/broker/system/configuration/ClusterCfgTest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.broker.system.configuration;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.junit.Test;\n+\n+public class ClusterCfgTest {\n+\n+  @Test\n+  public void shouldSanitizeContactPoints() {\n+    // given\n+    final ClusterCfg sutClusterConfig = new ClusterCfg();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3NzA0OA==", "bodyText": "We typically mark everything final unless otherwise necessary.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class EnvironmentHelper {\n          \n          \n            \n            public final class EnvironmentHelper {\n          \n      \n    \n    \n  \n\nAs this class seems to be intended to not be instantiated, I would propose to also add a private constructor just to make that clear.", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385777048", "createdAt": "2020-02-28T15:58:55Z", "author": {"login": "npepinpe"}, "path": "dist/src/main/java/io/zeebe/EnvironmentHelper.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.springframework.core.env.Environment;\n+\n+public class EnvironmentHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3NzI1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static boolean isProductionEnvironment(Environment springEnvironment) {\n          \n          \n            \n              public static boolean isProductionEnvironment(final Environment springEnvironment) {", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385777253", "createdAt": "2020-02-28T15:59:15Z", "author": {"login": "npepinpe"}, "path": "dist/src/main/java/io/zeebe/EnvironmentHelper.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.springframework.core.env.Environment;\n+\n+public class EnvironmentHelper {\n+\n+  public static boolean isProductionEnvironment(Environment springEnvironment) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3Nzc5NA==", "bodyText": "Is it possible for this to be null? What does that imply, i.e. the auto-wiring failed?", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385777794", "createdAt": "2020-02-28T16:00:15Z", "author": {"login": "npepinpe"}, "path": "dist/src/main/java/io/zeebe/EnvironmentHelper.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.springframework.core.env.Environment;\n+\n+public class EnvironmentHelper {\n+\n+  public static boolean isProductionEnvironment(Environment springEnvironment) {\n+    boolean result = true;\n+\n+    if (springEnvironment == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3OTA5Mg==", "bodyText": "I think it's not possible for activeProfiles to be null according to their source code - they return a static empty array instance. Although I guess since they don't annotate it as NonNull it could change? What do you think?", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385779092", "createdAt": "2020-02-28T16:02:21Z", "author": {"login": "npepinpe"}, "path": "dist/src/main/java/io/zeebe/EnvironmentHelper.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import org.springframework.core.env.Environment;\n+\n+public class EnvironmentHelper {\n+\n+  public static boolean isProductionEnvironment(Environment springEnvironment) {\n+    boolean result = true;\n+\n+    if (springEnvironment == null) {\n+      result = false;\n+    } else {\n+      final String[] activeProfiles = springEnvironment.getActiveProfiles();\n+      if (activeProfiles != null && !(activeProfiles.length == 0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc3OTk1MA==", "bodyText": "What's the different between putting this here or in the launcher? Apart from showing it when not starting this from the distribution launcher?", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385779950", "createdAt": "2020-02-28T16:03:53Z", "author": {"login": "npepinpe"}, "path": "dist/src/main/java/io/zeebe/broker/StandaloneBroker.java", "diffHunk": "@@ -9,24 +9,52 @@\n \n import static java.lang.Runtime.getRuntime;\n \n+import io.zeebe.EnvironmentHelper;\n import io.zeebe.broker.system.configuration.BrokerCfg;\n+import io.zeebe.legacy.tomlconfig.LegacyConfigurationSupport;\n+import io.zeebe.legacy.tomlconfig.LegacyConfigurationSupport.Scope;\n import io.zeebe.util.FileUtil;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Paths;\n import java.util.concurrent.CountDownLatch;\n import org.apache.logging.log4j.LogManager;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.core.env.Environment;\n \n-public class StandaloneBroker {\n-  private static final CountDownLatch WAITING_LATCH = new CountDownLatch(1);\n-  private static String tempFolder;\n+@SpringBootApplication\n+public class StandaloneBroker implements CommandLineRunner {\n+\n+  @Autowired BrokerCfg configuration;\n+  @Autowired Environment springEnvironment;\n+\n+  private final CountDownLatch waiting_latch = new CountDownLatch(1);\n+  private String tempFolder;\n \n   public static void main(final String[] args) throws Exception {\n+    System.setProperty(\"spring.banner.location\", \"classpath:/assets/zeebe_broker_banner.txt\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4MDgxMg==", "bodyText": "Do you feel the method names do not reflect properly what they do?", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385780812", "createdAt": "2020-02-28T16:05:28Z", "author": {"login": "npepinpe"}, "path": "dist/src/main/java/io/zeebe/broker/StandaloneBroker.java", "diffHunk": "@@ -9,24 +9,52 @@\n \n import static java.lang.Runtime.getRuntime;\n \n+import io.zeebe.EnvironmentHelper;\n import io.zeebe.broker.system.configuration.BrokerCfg;\n+import io.zeebe.legacy.tomlconfig.LegacyConfigurationSupport;\n+import io.zeebe.legacy.tomlconfig.LegacyConfigurationSupport.Scope;\n import io.zeebe.util.FileUtil;\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Paths;\n import java.util.concurrent.CountDownLatch;\n import org.apache.logging.log4j.LogManager;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.core.env.Environment;\n \n-public class StandaloneBroker {\n-  private static final CountDownLatch WAITING_LATCH = new CountDownLatch(1);\n-  private static String tempFolder;\n+@SpringBootApplication\n+public class StandaloneBroker implements CommandLineRunner {\n+\n+  @Autowired BrokerCfg configuration;\n+  @Autowired Environment springEnvironment;\n+\n+  private final CountDownLatch waiting_latch = new CountDownLatch(1);\n+  private String tempFolder;\n \n   public static void main(final String[] args) throws Exception {\n+    System.setProperty(\"spring.banner.location\", \"classpath:/assets/zeebe_broker_banner.txt\");\n+\n+    final LegacyConfigurationSupport legacyConfigSupport =\n+        new LegacyConfigurationSupport(Scope.BROKER);\n+    legacyConfigSupport.checkForLegacyTomlConfigurationArgument(args, \"broker.cfg.yaml\");\n+    legacyConfigSupport.checkForLegacyEnvironmentVariables();\n+\n+    SpringApplication.run(StandaloneBroker.class, args);\n+  }\n+\n+  @Override\n+  public void run(final String... args) throws Exception {\n     final Broker broker;\n \n-    if (args.length == 1) {\n-      broker = createBrokerFromConfiguration(args);\n+    if (EnvironmentHelper.isProductionEnvironment(springEnvironment)) {\n+      // creates a broker in the base directory that will run with the configuration provided by", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4MTY4NQ==", "bodyText": "So the previous behavior still allowed environment variables to override the configuration, as resolving was part of the post-processing step. Is there anything that speaks against using the spring provided configuration (which will be default if the user doesn't specify anything)?", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385781685", "createdAt": "2020-02-28T16:07:11Z", "author": {"login": "npepinpe"}, "path": "dist/src/main/java/io/zeebe/broker/StandaloneBroker.java", "diffHunk": "@@ -44,32 +72,32 @@ public void run() {\n                 }\n               }\n             });\n-    WAITING_LATCH.await();\n+    waiting_latch.await();\n   }\n \n-  private static Broker createBrokerFromConfiguration(final String[] args) {\n+  private Broker createBrokerInBaseDirectory() {\n     String basePath = System.getProperty(\"basedir\");\n \n     if (basePath == null) {\n       basePath = Paths.get(\".\").toAbsolutePath().normalize().toString();\n     }\n \n-    return new Broker(args[0], basePath, null);\n+    return new Broker(configuration, basePath, null);\n   }\n \n-  private static Broker createDefaultBrokerInTempDirectory() {\n+  private Broker createDefaultBrokerInTempDirectory() {\n     Loggers.SYSTEM_LOGGER.info(\"No configuration file specified. Using default configuration.\");\n \n     try {\n       tempFolder = Files.createTempDirectory(\"zeebe\").toAbsolutePath().normalize().toString();\n-      final BrokerCfg cfg = new BrokerCfg();\n-      return new Broker(cfg, tempFolder, null);\n+      final BrokerCfg defaultConfiguration = new BrokerCfg();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4MTg4Mw==", "bodyText": "Same question as in StandaloneBroker", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385781883", "createdAt": "2020-02-28T16:07:35Z", "author": {"login": "npepinpe"}, "path": "dist/src/main/java/io/zeebe/gateway/StandaloneGateway.java", "diffHunk": "@@ -90,8 +100,7 @@ public void run() throws IOException, InterruptedException {\n   }\n \n   public static void main(final String[] args) throws Exception {\n-    final GatewayCfg gatewayCfg = initConfiguration(args);\n-    gatewayCfg.init();\n+    System.setProperty(\"spring.banner.location\", \"classpath:/assets/zeebe_gateway_banner.txt\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4MjIzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class EnvironmentHelperTest {\n          \n          \n            \n            public final class EnvironmentHelperTest {", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385782239", "createdAt": "2020-02-28T16:08:17Z", "author": {"login": "npepinpe"}, "path": "dist/src/test/java/io/zeebe/EnvironmentHelperTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Test;\n+import org.mockito.Mockito;\n+import org.springframework.core.env.Environment;\n+\n+public class EnvironmentHelperTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4NDM2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class LegacyConfigurationSupport {\n          \n          \n            \n            public final class LegacyConfigurationSupport {", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385784366", "createdAt": "2020-02-28T16:12:12Z", "author": {"login": "npepinpe"}, "path": "legacy/toml-config/src/main/java/io/zeebe/legacy/tomlconfig/LegacyConfigurationSupport.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.legacy.tomlconfig;\n+\n+import io.zeebe.legacy.tomlconfig.util.Loggers;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Function;\n+\n+public class LegacyConfigurationSupport {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4NDcxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final Map<String, Function<String, String>> VALUE_CONVERTERS_GATEWAY =\n          \n          \n            \n              private static final Map<String, UnaryOperator<String>> VALUE_CONVERTERS_GATEWAY =\n          \n      \n    \n    \n  \n\nNote: I guess you can't directly commit this change as it will need to import UnaryOperator first.", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385784711", "createdAt": "2020-02-28T16:12:43Z", "author": {"login": "npepinpe"}, "path": "legacy/toml-config/src/main/java/io/zeebe/legacy/tomlconfig/LegacyConfigurationSupport.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.legacy.tomlconfig;\n+\n+import io.zeebe.legacy.tomlconfig.util.Loggers;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Function;\n+\n+public class LegacyConfigurationSupport {\n+  private static final Map<String, Replacement> MAPPING_GATEWAY = new HashMap<>();\n+  private static final Map<String, Function<String, String>> VALUE_CONVERTERS_GATEWAY =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4NDgxOQ==", "bodyText": "Same as above, but more importantly, is this used anywhere? It seems in checkForLegacyEnvironmentVariables we use an empty map as mapping?", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385784819", "createdAt": "2020-02-28T16:12:55Z", "author": {"login": "npepinpe"}, "path": "legacy/toml-config/src/main/java/io/zeebe/legacy/tomlconfig/LegacyConfigurationSupport.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.legacy.tomlconfig;\n+\n+import io.zeebe.legacy.tomlconfig.util.Loggers;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Function;\n+\n+public class LegacyConfigurationSupport {\n+  private static final Map<String, Replacement> MAPPING_GATEWAY = new HashMap<>();\n+  private static final Map<String, Function<String, String>> VALUE_CONVERTERS_GATEWAY =\n+      new HashMap<>();\n+  private static final Map<String, Replacement> MAPPING_BROKER = new HashMap<>();\n+  private static final Map<String, Function<String, String>> VALUE_CONVERTERS_BROKER =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4NTEzOA==", "bodyText": "That's a pretty big lambda, can we extract it to a method?", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385785138", "createdAt": "2020-02-28T16:13:32Z", "author": {"login": "npepinpe"}, "path": "legacy/toml-config/src/main/java/io/zeebe/legacy/tomlconfig/LegacyConfigurationSupport.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.legacy.tomlconfig;\n+\n+import io.zeebe.legacy.tomlconfig.util.Loggers;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Function;\n+\n+public class LegacyConfigurationSupport {\n+  private static final Map<String, Replacement> MAPPING_GATEWAY = new HashMap<>();\n+  private static final Map<String, Function<String, String>> VALUE_CONVERTERS_GATEWAY =\n+      new HashMap<>();\n+  private static final Map<String, Replacement> MAPPING_BROKER = new HashMap<>();\n+  private static final Map<String, Function<String, String>> VALUE_CONVERTERS_BROKER =\n+      new HashMap<>();\n+  private static final int DEFAULT_CONTACT_POINT_PORT = 26502;\n+\n+  static { // static initialization for mapping tables\n+\n+    // zeebe-gateway.network\n+    MAPPING_GATEWAY.put(\"ZEEBE_GATEWAY_HOST\", new Replacement(\"zeebe-gateway.network.host\"));\n+    MAPPING_GATEWAY.put(\"ZEEBE_GATEWAY_PORT\", new Replacement(\"zeebe-gateway.network.port\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_KEEP_ALIVE_INTERVAL\",\n+        new Replacement(\"zeebe-gateway.network.minKeepAliveInterval\"));\n+\n+    // zeebe-gateway.cluster\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_REQUEST_TIMEOUT\", new Replacement(\"zeebe-gateway.cluster.requestTimeout\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CONTACT_POINT\", new Replacement(\"zeebe-gateway.cluster.contactPoint\"));\n+    VALUE_CONVERTERS_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CONTACT_POINT\",\n+        value -> value.contains(\":\") ? value : value + \":\" + DEFAULT_CONTACT_POINT_PORT);\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_NAME\", new Replacement(\"zeebe-gateway.cluster.clusterName\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_MEMBER_ID\", new Replacement(\"zeebe-gateway.cluster.memberId\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_HOST\", new Replacement(\"zeebe-gateway.cluster.host\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_PORT\", new Replacement(\"zeebe-gateway.cluster.port\"));\n+\n+    // zeebe-gateway.monitoring\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MONITORING_ENABLED\", new Replacement(\"zeebe-gateway.monitoring.enadbled\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MONITORING_HOST\", new Replacement(\"zeebe-gateway.monitoring.host\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MONITORING_PORT\", new Replacement(\"zeebe-gateway.monitoring.port\"));\n+\n+    // zeebe-gateway.threads\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MANAGEMENT_THREADS\",\n+        new Replacement(\"zeebe-gateway.threads.managementThreads\"));\n+\n+    // zeebe-gateway.security\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_SECURITY_ENABLED\", new Replacement(\"zeebe-gateway.security.enabled\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CERTIFICATE_PATH\",\n+        new Replacement(\"zeebe-gateway.security.certificateChainPath\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_PRIVATE_KEY_PATH\", new Replacement(\"zeebe-gateway.security.privateKeyPath\"));\n+\n+    // zeebe-broker ----------------------------------------\n+    MAPPING_BROKER.put(\"ZEEBE_STEP_TIMEOUT\", new Replacement(\"zeebe-broker.stepTimeout\"));\n+\n+    // zeebe-broker.cluster\n+    MAPPING_BROKER.put(\"ZEEBE_NODE_ID\", new Replacement(\"zeebe-broker.cluster.nodeId\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_CONTACT_POINTS\", new Replacement(\"zeebe-broker.cluster.initialContactPoints\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_PARTITIONS_COUNT\", new Replacement(\"zeebe-broker.cluster.partitionsCount\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_REPLICATION_FACTOR\", new Replacement(\"zeebe-broker.cluster.replicationFactor\"));\n+    MAPPING_BROKER.put(\"ZEEBE_CLUSTER_SIZE\", new Replacement(\"zeebe-broker.cluster.clusterSize\"));\n+    MAPPING_BROKER.put(\"ZEEBE_CLUSTER_NAME\", new Replacement(\"zeebe-broker.cluster.clusterName\"));\n+\n+    // zeebe-broker.data\n+    MAPPING_BROKER.put(\"ZEEBE_DIRECTORIES\", new Replacement(\"zeebe-broker.data.directories\"));\n+\n+    // zeebe-broker.gateway\n+    MAPPING_BROKER.put(\"ZEEBE_EMBED_GATEWAY\", new Replacement(\"zeebe-broker.gateway.enable\"));\n+\n+    /* this essentially copies all entries from the gateway mapping table, but modifies\n+     * the new environment variables from \"zeebe-gateway.*\" to \"zeebe-broker.gateway.*\"\n+     */\n+    MAPPING_GATEWAY\n+        .entrySet()\n+        .forEach(\n+            entry -> {\n+              final String oldEnvironmentVariable = entry.getKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4NTMwNg==", "bodyText": "Was this completed?", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385785306", "createdAt": "2020-02-28T16:13:49Z", "author": {"login": "npepinpe"}, "path": "legacy/toml-config/src/main/java/io/zeebe/legacy/tomlconfig/LegacyConfigurationSupport.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.legacy.tomlconfig;\n+\n+import io.zeebe.legacy.tomlconfig.util.Loggers;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Function;\n+\n+public class LegacyConfigurationSupport {\n+  private static final Map<String, Replacement> MAPPING_GATEWAY = new HashMap<>();\n+  private static final Map<String, Function<String, String>> VALUE_CONVERTERS_GATEWAY =\n+      new HashMap<>();\n+  private static final Map<String, Replacement> MAPPING_BROKER = new HashMap<>();\n+  private static final Map<String, Function<String, String>> VALUE_CONVERTERS_BROKER =\n+      new HashMap<>();\n+  private static final int DEFAULT_CONTACT_POINT_PORT = 26502;\n+\n+  static { // static initialization for mapping tables\n+\n+    // zeebe-gateway.network\n+    MAPPING_GATEWAY.put(\"ZEEBE_GATEWAY_HOST\", new Replacement(\"zeebe-gateway.network.host\"));\n+    MAPPING_GATEWAY.put(\"ZEEBE_GATEWAY_PORT\", new Replacement(\"zeebe-gateway.network.port\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_KEEP_ALIVE_INTERVAL\",\n+        new Replacement(\"zeebe-gateway.network.minKeepAliveInterval\"));\n+\n+    // zeebe-gateway.cluster\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_REQUEST_TIMEOUT\", new Replacement(\"zeebe-gateway.cluster.requestTimeout\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CONTACT_POINT\", new Replacement(\"zeebe-gateway.cluster.contactPoint\"));\n+    VALUE_CONVERTERS_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CONTACT_POINT\",\n+        value -> value.contains(\":\") ? value : value + \":\" + DEFAULT_CONTACT_POINT_PORT);\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_NAME\", new Replacement(\"zeebe-gateway.cluster.clusterName\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_MEMBER_ID\", new Replacement(\"zeebe-gateway.cluster.memberId\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_HOST\", new Replacement(\"zeebe-gateway.cluster.host\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_PORT\", new Replacement(\"zeebe-gateway.cluster.port\"));\n+\n+    // zeebe-gateway.monitoring\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MONITORING_ENABLED\", new Replacement(\"zeebe-gateway.monitoring.enadbled\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MONITORING_HOST\", new Replacement(\"zeebe-gateway.monitoring.host\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MONITORING_PORT\", new Replacement(\"zeebe-gateway.monitoring.port\"));\n+\n+    // zeebe-gateway.threads\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MANAGEMENT_THREADS\",\n+        new Replacement(\"zeebe-gateway.threads.managementThreads\"));\n+\n+    // zeebe-gateway.security\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_SECURITY_ENABLED\", new Replacement(\"zeebe-gateway.security.enabled\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CERTIFICATE_PATH\",\n+        new Replacement(\"zeebe-gateway.security.certificateChainPath\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_PRIVATE_KEY_PATH\", new Replacement(\"zeebe-gateway.security.privateKeyPath\"));\n+\n+    // zeebe-broker ----------------------------------------\n+    MAPPING_BROKER.put(\"ZEEBE_STEP_TIMEOUT\", new Replacement(\"zeebe-broker.stepTimeout\"));\n+\n+    // zeebe-broker.cluster\n+    MAPPING_BROKER.put(\"ZEEBE_NODE_ID\", new Replacement(\"zeebe-broker.cluster.nodeId\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_CONTACT_POINTS\", new Replacement(\"zeebe-broker.cluster.initialContactPoints\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_PARTITIONS_COUNT\", new Replacement(\"zeebe-broker.cluster.partitionsCount\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_REPLICATION_FACTOR\", new Replacement(\"zeebe-broker.cluster.replicationFactor\"));\n+    MAPPING_BROKER.put(\"ZEEBE_CLUSTER_SIZE\", new Replacement(\"zeebe-broker.cluster.clusterSize\"));\n+    MAPPING_BROKER.put(\"ZEEBE_CLUSTER_NAME\", new Replacement(\"zeebe-broker.cluster.clusterName\"));\n+\n+    // zeebe-broker.data\n+    MAPPING_BROKER.put(\"ZEEBE_DIRECTORIES\", new Replacement(\"zeebe-broker.data.directories\"));\n+\n+    // zeebe-broker.gateway\n+    MAPPING_BROKER.put(\"ZEEBE_EMBED_GATEWAY\", new Replacement(\"zeebe-broker.gateway.enable\"));\n+\n+    /* this essentially copies all entries from the gateway mapping table, but modifies\n+     * the new environment variables from \"zeebe-gateway.*\" to \"zeebe-broker.gateway.*\"\n+     */\n+    MAPPING_GATEWAY\n+        .entrySet()\n+        .forEach(\n+            entry -> {\n+              final String oldEnvironmentVariable = entry.getKey();\n+              final String newEnvironmentVariableInGatewayContext =\n+                  entry.getValue().getCanonicalRepresentation();\n+\n+              assert newEnvironmentVariableInGatewayContext.startsWith(\"zeebe-\");\n+              final int insertionPoint = \"zeebe-\".length();\n+\n+              final String newEnvironmentVariableInBrokerContext =\n+                  newEnvironmentVariableInGatewayContext.substring(0, insertionPoint) // \"zeebe-\"\n+                      + \"broker.\"\n+                      + newEnvironmentVariableInGatewayContext.substring(\n+                          insertionPoint); // \"gateway.*\"\n+\n+              MAPPING_BROKER.put(\n+                  oldEnvironmentVariable, new Replacement(newEnvironmentVariableInBrokerContext));\n+            });\n+    VALUE_CONVERTERS_BROKER.putAll(VALUE_CONVERTERS_GATEWAY);\n+\n+    // zeebe-broker.network\n+    MAPPING_BROKER.put(\"ZEEBE_HOST\", new Replacement(\"zeebe-broker.network.host\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_ADVERTISED_HOST\", new Replacement(\"zeebe-broker.network.advertisedHost\"));\n+    MAPPING_BROKER.put(\"ZEEBE_PORT_OFFSET\", new Replacement(\"zeebe-broker.network.portOffset\"));\n+\n+    // TODO check docker files and shell scripts and change those as well;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4NTQwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public LegacyConfigurationSupport(Scope scope) {\n          \n          \n            \n              public LegacyConfigurationSupport(final Scope scope) {", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385785408", "createdAt": "2020-02-28T16:14:00Z", "author": {"login": "npepinpe"}, "path": "legacy/toml-config/src/main/java/io/zeebe/legacy/tomlconfig/LegacyConfigurationSupport.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.legacy.tomlconfig;\n+\n+import io.zeebe.legacy.tomlconfig.util.Loggers;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Function;\n+\n+public class LegacyConfigurationSupport {\n+  private static final Map<String, Replacement> MAPPING_GATEWAY = new HashMap<>();\n+  private static final Map<String, Function<String, String>> VALUE_CONVERTERS_GATEWAY =\n+      new HashMap<>();\n+  private static final Map<String, Replacement> MAPPING_BROKER = new HashMap<>();\n+  private static final Map<String, Function<String, String>> VALUE_CONVERTERS_BROKER =\n+      new HashMap<>();\n+  private static final int DEFAULT_CONTACT_POINT_PORT = 26502;\n+\n+  static { // static initialization for mapping tables\n+\n+    // zeebe-gateway.network\n+    MAPPING_GATEWAY.put(\"ZEEBE_GATEWAY_HOST\", new Replacement(\"zeebe-gateway.network.host\"));\n+    MAPPING_GATEWAY.put(\"ZEEBE_GATEWAY_PORT\", new Replacement(\"zeebe-gateway.network.port\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_KEEP_ALIVE_INTERVAL\",\n+        new Replacement(\"zeebe-gateway.network.minKeepAliveInterval\"));\n+\n+    // zeebe-gateway.cluster\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_REQUEST_TIMEOUT\", new Replacement(\"zeebe-gateway.cluster.requestTimeout\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CONTACT_POINT\", new Replacement(\"zeebe-gateway.cluster.contactPoint\"));\n+    VALUE_CONVERTERS_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CONTACT_POINT\",\n+        value -> value.contains(\":\") ? value : value + \":\" + DEFAULT_CONTACT_POINT_PORT);\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_NAME\", new Replacement(\"zeebe-gateway.cluster.clusterName\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_MEMBER_ID\", new Replacement(\"zeebe-gateway.cluster.memberId\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_HOST\", new Replacement(\"zeebe-gateway.cluster.host\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_PORT\", new Replacement(\"zeebe-gateway.cluster.port\"));\n+\n+    // zeebe-gateway.monitoring\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MONITORING_ENABLED\", new Replacement(\"zeebe-gateway.monitoring.enadbled\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MONITORING_HOST\", new Replacement(\"zeebe-gateway.monitoring.host\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MONITORING_PORT\", new Replacement(\"zeebe-gateway.monitoring.port\"));\n+\n+    // zeebe-gateway.threads\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MANAGEMENT_THREADS\",\n+        new Replacement(\"zeebe-gateway.threads.managementThreads\"));\n+\n+    // zeebe-gateway.security\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_SECURITY_ENABLED\", new Replacement(\"zeebe-gateway.security.enabled\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CERTIFICATE_PATH\",\n+        new Replacement(\"zeebe-gateway.security.certificateChainPath\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_PRIVATE_KEY_PATH\", new Replacement(\"zeebe-gateway.security.privateKeyPath\"));\n+\n+    // zeebe-broker ----------------------------------------\n+    MAPPING_BROKER.put(\"ZEEBE_STEP_TIMEOUT\", new Replacement(\"zeebe-broker.stepTimeout\"));\n+\n+    // zeebe-broker.cluster\n+    MAPPING_BROKER.put(\"ZEEBE_NODE_ID\", new Replacement(\"zeebe-broker.cluster.nodeId\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_CONTACT_POINTS\", new Replacement(\"zeebe-broker.cluster.initialContactPoints\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_PARTITIONS_COUNT\", new Replacement(\"zeebe-broker.cluster.partitionsCount\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_REPLICATION_FACTOR\", new Replacement(\"zeebe-broker.cluster.replicationFactor\"));\n+    MAPPING_BROKER.put(\"ZEEBE_CLUSTER_SIZE\", new Replacement(\"zeebe-broker.cluster.clusterSize\"));\n+    MAPPING_BROKER.put(\"ZEEBE_CLUSTER_NAME\", new Replacement(\"zeebe-broker.cluster.clusterName\"));\n+\n+    // zeebe-broker.data\n+    MAPPING_BROKER.put(\"ZEEBE_DIRECTORIES\", new Replacement(\"zeebe-broker.data.directories\"));\n+\n+    // zeebe-broker.gateway\n+    MAPPING_BROKER.put(\"ZEEBE_EMBED_GATEWAY\", new Replacement(\"zeebe-broker.gateway.enable\"));\n+\n+    /* this essentially copies all entries from the gateway mapping table, but modifies\n+     * the new environment variables from \"zeebe-gateway.*\" to \"zeebe-broker.gateway.*\"\n+     */\n+    MAPPING_GATEWAY\n+        .entrySet()\n+        .forEach(\n+            entry -> {\n+              final String oldEnvironmentVariable = entry.getKey();\n+              final String newEnvironmentVariableInGatewayContext =\n+                  entry.getValue().getCanonicalRepresentation();\n+\n+              assert newEnvironmentVariableInGatewayContext.startsWith(\"zeebe-\");\n+              final int insertionPoint = \"zeebe-\".length();\n+\n+              final String newEnvironmentVariableInBrokerContext =\n+                  newEnvironmentVariableInGatewayContext.substring(0, insertionPoint) // \"zeebe-\"\n+                      + \"broker.\"\n+                      + newEnvironmentVariableInGatewayContext.substring(\n+                          insertionPoint); // \"gateway.*\"\n+\n+              MAPPING_BROKER.put(\n+                  oldEnvironmentVariable, new Replacement(newEnvironmentVariableInBrokerContext));\n+            });\n+    VALUE_CONVERTERS_BROKER.putAll(VALUE_CONVERTERS_GATEWAY);\n+\n+    // zeebe-broker.network\n+    MAPPING_BROKER.put(\"ZEEBE_HOST\", new Replacement(\"zeebe-broker.network.host\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_ADVERTISED_HOST\", new Replacement(\"zeebe-broker.network.advertisedHost\"));\n+    MAPPING_BROKER.put(\"ZEEBE_PORT_OFFSET\", new Replacement(\"zeebe-broker.network.portOffset\"));\n+\n+    // TODO check docker files and shell scripts and change those as well;\n+    //  if so remove hint in header of sample config files\n+    //  also test that it works when using the startup script\n+\n+  }\n+\n+  private final Scope scope;\n+\n+  public LegacyConfigurationSupport(Scope scope) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4NTQ5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void checkForLegacyTomlConfigurationArgument(String[] args, String recommendedSetting) {\n          \n          \n            \n              public void checkForLegacyTomlConfigurationArgument(final String[] args, final String recommendedSetting) {", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385785490", "createdAt": "2020-02-28T16:14:11Z", "author": {"login": "npepinpe"}, "path": "legacy/toml-config/src/main/java/io/zeebe/legacy/tomlconfig/LegacyConfigurationSupport.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.legacy.tomlconfig;\n+\n+import io.zeebe.legacy.tomlconfig.util.Loggers;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Function;\n+\n+public class LegacyConfigurationSupport {\n+  private static final Map<String, Replacement> MAPPING_GATEWAY = new HashMap<>();\n+  private static final Map<String, Function<String, String>> VALUE_CONVERTERS_GATEWAY =\n+      new HashMap<>();\n+  private static final Map<String, Replacement> MAPPING_BROKER = new HashMap<>();\n+  private static final Map<String, Function<String, String>> VALUE_CONVERTERS_BROKER =\n+      new HashMap<>();\n+  private static final int DEFAULT_CONTACT_POINT_PORT = 26502;\n+\n+  static { // static initialization for mapping tables\n+\n+    // zeebe-gateway.network\n+    MAPPING_GATEWAY.put(\"ZEEBE_GATEWAY_HOST\", new Replacement(\"zeebe-gateway.network.host\"));\n+    MAPPING_GATEWAY.put(\"ZEEBE_GATEWAY_PORT\", new Replacement(\"zeebe-gateway.network.port\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_KEEP_ALIVE_INTERVAL\",\n+        new Replacement(\"zeebe-gateway.network.minKeepAliveInterval\"));\n+\n+    // zeebe-gateway.cluster\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_REQUEST_TIMEOUT\", new Replacement(\"zeebe-gateway.cluster.requestTimeout\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CONTACT_POINT\", new Replacement(\"zeebe-gateway.cluster.contactPoint\"));\n+    VALUE_CONVERTERS_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CONTACT_POINT\",\n+        value -> value.contains(\":\") ? value : value + \":\" + DEFAULT_CONTACT_POINT_PORT);\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_NAME\", new Replacement(\"zeebe-gateway.cluster.clusterName\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_MEMBER_ID\", new Replacement(\"zeebe-gateway.cluster.memberId\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_HOST\", new Replacement(\"zeebe-gateway.cluster.host\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_PORT\", new Replacement(\"zeebe-gateway.cluster.port\"));\n+\n+    // zeebe-gateway.monitoring\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MONITORING_ENABLED\", new Replacement(\"zeebe-gateway.monitoring.enadbled\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MONITORING_HOST\", new Replacement(\"zeebe-gateway.monitoring.host\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MONITORING_PORT\", new Replacement(\"zeebe-gateway.monitoring.port\"));\n+\n+    // zeebe-gateway.threads\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MANAGEMENT_THREADS\",\n+        new Replacement(\"zeebe-gateway.threads.managementThreads\"));\n+\n+    // zeebe-gateway.security\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_SECURITY_ENABLED\", new Replacement(\"zeebe-gateway.security.enabled\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CERTIFICATE_PATH\",\n+        new Replacement(\"zeebe-gateway.security.certificateChainPath\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_PRIVATE_KEY_PATH\", new Replacement(\"zeebe-gateway.security.privateKeyPath\"));\n+\n+    // zeebe-broker ----------------------------------------\n+    MAPPING_BROKER.put(\"ZEEBE_STEP_TIMEOUT\", new Replacement(\"zeebe-broker.stepTimeout\"));\n+\n+    // zeebe-broker.cluster\n+    MAPPING_BROKER.put(\"ZEEBE_NODE_ID\", new Replacement(\"zeebe-broker.cluster.nodeId\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_CONTACT_POINTS\", new Replacement(\"zeebe-broker.cluster.initialContactPoints\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_PARTITIONS_COUNT\", new Replacement(\"zeebe-broker.cluster.partitionsCount\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_REPLICATION_FACTOR\", new Replacement(\"zeebe-broker.cluster.replicationFactor\"));\n+    MAPPING_BROKER.put(\"ZEEBE_CLUSTER_SIZE\", new Replacement(\"zeebe-broker.cluster.clusterSize\"));\n+    MAPPING_BROKER.put(\"ZEEBE_CLUSTER_NAME\", new Replacement(\"zeebe-broker.cluster.clusterName\"));\n+\n+    // zeebe-broker.data\n+    MAPPING_BROKER.put(\"ZEEBE_DIRECTORIES\", new Replacement(\"zeebe-broker.data.directories\"));\n+\n+    // zeebe-broker.gateway\n+    MAPPING_BROKER.put(\"ZEEBE_EMBED_GATEWAY\", new Replacement(\"zeebe-broker.gateway.enable\"));\n+\n+    /* this essentially copies all entries from the gateway mapping table, but modifies\n+     * the new environment variables from \"zeebe-gateway.*\" to \"zeebe-broker.gateway.*\"\n+     */\n+    MAPPING_GATEWAY\n+        .entrySet()\n+        .forEach(\n+            entry -> {\n+              final String oldEnvironmentVariable = entry.getKey();\n+              final String newEnvironmentVariableInGatewayContext =\n+                  entry.getValue().getCanonicalRepresentation();\n+\n+              assert newEnvironmentVariableInGatewayContext.startsWith(\"zeebe-\");\n+              final int insertionPoint = \"zeebe-\".length();\n+\n+              final String newEnvironmentVariableInBrokerContext =\n+                  newEnvironmentVariableInGatewayContext.substring(0, insertionPoint) // \"zeebe-\"\n+                      + \"broker.\"\n+                      + newEnvironmentVariableInGatewayContext.substring(\n+                          insertionPoint); // \"gateway.*\"\n+\n+              MAPPING_BROKER.put(\n+                  oldEnvironmentVariable, new Replacement(newEnvironmentVariableInBrokerContext));\n+            });\n+    VALUE_CONVERTERS_BROKER.putAll(VALUE_CONVERTERS_GATEWAY);\n+\n+    // zeebe-broker.network\n+    MAPPING_BROKER.put(\"ZEEBE_HOST\", new Replacement(\"zeebe-broker.network.host\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_ADVERTISED_HOST\", new Replacement(\"zeebe-broker.network.advertisedHost\"));\n+    MAPPING_BROKER.put(\"ZEEBE_PORT_OFFSET\", new Replacement(\"zeebe-broker.network.portOffset\"));\n+\n+    // TODO check docker files and shell scripts and change those as well;\n+    //  if so remove hint in header of sample config files\n+    //  also test that it works when using the startup script\n+\n+  }\n+\n+  private final Scope scope;\n+\n+  public LegacyConfigurationSupport(Scope scope) {\n+    this.scope = scope;\n+  }\n+\n+  /**\n+   * This method checks whether the program was called with a toml configuration file. If so, it\n+   * prints out a warning.\n+   */\n+  public void checkForLegacyTomlConfigurationArgument(String[] args, String recommendedSetting) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4NjY2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final Map<String, Function<String, String>> valueConverters;\n          \n          \n            \n                final Map<String, UnaryOperator<String> valueConverters;", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385786669", "createdAt": "2020-02-28T16:16:24Z", "author": {"login": "npepinpe"}, "path": "legacy/toml-config/src/main/java/io/zeebe/legacy/tomlconfig/LegacyConfigurationSupport.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.legacy.tomlconfig;\n+\n+import io.zeebe.legacy.tomlconfig.util.Loggers;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Function;\n+\n+public class LegacyConfigurationSupport {\n+  private static final Map<String, Replacement> MAPPING_GATEWAY = new HashMap<>();\n+  private static final Map<String, Function<String, String>> VALUE_CONVERTERS_GATEWAY =\n+      new HashMap<>();\n+  private static final Map<String, Replacement> MAPPING_BROKER = new HashMap<>();\n+  private static final Map<String, Function<String, String>> VALUE_CONVERTERS_BROKER =\n+      new HashMap<>();\n+  private static final int DEFAULT_CONTACT_POINT_PORT = 26502;\n+\n+  static { // static initialization for mapping tables\n+\n+    // zeebe-gateway.network\n+    MAPPING_GATEWAY.put(\"ZEEBE_GATEWAY_HOST\", new Replacement(\"zeebe-gateway.network.host\"));\n+    MAPPING_GATEWAY.put(\"ZEEBE_GATEWAY_PORT\", new Replacement(\"zeebe-gateway.network.port\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_KEEP_ALIVE_INTERVAL\",\n+        new Replacement(\"zeebe-gateway.network.minKeepAliveInterval\"));\n+\n+    // zeebe-gateway.cluster\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_REQUEST_TIMEOUT\", new Replacement(\"zeebe-gateway.cluster.requestTimeout\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CONTACT_POINT\", new Replacement(\"zeebe-gateway.cluster.contactPoint\"));\n+    VALUE_CONVERTERS_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CONTACT_POINT\",\n+        value -> value.contains(\":\") ? value : value + \":\" + DEFAULT_CONTACT_POINT_PORT);\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_NAME\", new Replacement(\"zeebe-gateway.cluster.clusterName\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_MEMBER_ID\", new Replacement(\"zeebe-gateway.cluster.memberId\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_HOST\", new Replacement(\"zeebe-gateway.cluster.host\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_PORT\", new Replacement(\"zeebe-gateway.cluster.port\"));\n+\n+    // zeebe-gateway.monitoring\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MONITORING_ENABLED\", new Replacement(\"zeebe-gateway.monitoring.enadbled\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MONITORING_HOST\", new Replacement(\"zeebe-gateway.monitoring.host\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MONITORING_PORT\", new Replacement(\"zeebe-gateway.monitoring.port\"));\n+\n+    // zeebe-gateway.threads\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MANAGEMENT_THREADS\",\n+        new Replacement(\"zeebe-gateway.threads.managementThreads\"));\n+\n+    // zeebe-gateway.security\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_SECURITY_ENABLED\", new Replacement(\"zeebe-gateway.security.enabled\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CERTIFICATE_PATH\",\n+        new Replacement(\"zeebe-gateway.security.certificateChainPath\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_PRIVATE_KEY_PATH\", new Replacement(\"zeebe-gateway.security.privateKeyPath\"));\n+\n+    // zeebe-broker ----------------------------------------\n+    MAPPING_BROKER.put(\"ZEEBE_STEP_TIMEOUT\", new Replacement(\"zeebe-broker.stepTimeout\"));\n+\n+    // zeebe-broker.cluster\n+    MAPPING_BROKER.put(\"ZEEBE_NODE_ID\", new Replacement(\"zeebe-broker.cluster.nodeId\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_CONTACT_POINTS\", new Replacement(\"zeebe-broker.cluster.initialContactPoints\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_PARTITIONS_COUNT\", new Replacement(\"zeebe-broker.cluster.partitionsCount\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_REPLICATION_FACTOR\", new Replacement(\"zeebe-broker.cluster.replicationFactor\"));\n+    MAPPING_BROKER.put(\"ZEEBE_CLUSTER_SIZE\", new Replacement(\"zeebe-broker.cluster.clusterSize\"));\n+    MAPPING_BROKER.put(\"ZEEBE_CLUSTER_NAME\", new Replacement(\"zeebe-broker.cluster.clusterName\"));\n+\n+    // zeebe-broker.data\n+    MAPPING_BROKER.put(\"ZEEBE_DIRECTORIES\", new Replacement(\"zeebe-broker.data.directories\"));\n+\n+    // zeebe-broker.gateway\n+    MAPPING_BROKER.put(\"ZEEBE_EMBED_GATEWAY\", new Replacement(\"zeebe-broker.gateway.enable\"));\n+\n+    /* this essentially copies all entries from the gateway mapping table, but modifies\n+     * the new environment variables from \"zeebe-gateway.*\" to \"zeebe-broker.gateway.*\"\n+     */\n+    MAPPING_GATEWAY\n+        .entrySet()\n+        .forEach(\n+            entry -> {\n+              final String oldEnvironmentVariable = entry.getKey();\n+              final String newEnvironmentVariableInGatewayContext =\n+                  entry.getValue().getCanonicalRepresentation();\n+\n+              assert newEnvironmentVariableInGatewayContext.startsWith(\"zeebe-\");\n+              final int insertionPoint = \"zeebe-\".length();\n+\n+              final String newEnvironmentVariableInBrokerContext =\n+                  newEnvironmentVariableInGatewayContext.substring(0, insertionPoint) // \"zeebe-\"\n+                      + \"broker.\"\n+                      + newEnvironmentVariableInGatewayContext.substring(\n+                          insertionPoint); // \"gateway.*\"\n+\n+              MAPPING_BROKER.put(\n+                  oldEnvironmentVariable, new Replacement(newEnvironmentVariableInBrokerContext));\n+            });\n+    VALUE_CONVERTERS_BROKER.putAll(VALUE_CONVERTERS_GATEWAY);\n+\n+    // zeebe-broker.network\n+    MAPPING_BROKER.put(\"ZEEBE_HOST\", new Replacement(\"zeebe-broker.network.host\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_ADVERTISED_HOST\", new Replacement(\"zeebe-broker.network.advertisedHost\"));\n+    MAPPING_BROKER.put(\"ZEEBE_PORT_OFFSET\", new Replacement(\"zeebe-broker.network.portOffset\"));\n+\n+    // TODO check docker files and shell scripts and change those as well;\n+    //  if so remove hint in header of sample config files\n+    //  also test that it works when using the startup script\n+\n+  }\n+\n+  private final Scope scope;\n+\n+  public LegacyConfigurationSupport(Scope scope) {\n+    this.scope = scope;\n+  }\n+\n+  /**\n+   * This method checks whether the program was called with a toml configuration file. If so, it\n+   * prints out a warning.\n+   */\n+  public void checkForLegacyTomlConfigurationArgument(String[] args, String recommendedSetting) {\n+    if (args.length == 1 && args[0].endsWith(\".toml\")) {\n+      final String configFileArgument = args[0];\n+      Loggers.LEGACY_LOGGER.warn(\n+          \"Found command line argument \"\n+              + configFileArgument\n+              + \" which might be a TOML configuration file.\");\n+      Loggers.LEGACY_LOGGER.info(\n+          \"TOML configuration files are no longer supported. Please specify a YAML configuration file\"\n+              + \"and set it via environment variable \\\"spring.config.additional-location\\\" (e.g. \"\n+              + \"\\\"export spring.config.additional-location='file:./config/\"\n+              + recommendedSetting\n+              + \"'\\\").\");\n+      Loggers.LEGACY_LOGGER.info(\n+          \"The ./config/ folder contains a configuration file template. Alternatively, you can also use environment variables.\");\n+    }\n+  }\n+\n+  /**\n+   * This method checks for legacy environment variables. If it finds an old environment variable\n+   * which is set, it looks whether the new counterpart is set. If the new counterpart is set, it\n+   * does nothing. If it is not set, it sets a system setting under the new key that has the same\n+   * value as is associated with the old environment variable. This effectively makes the old\n+   * environment variable value visible under the new environment variable. It also prints out a\n+   * warning to the log.\n+   */\n+  public void checkForLegacyEnvironmentVariables() {\n+\n+    final Map<String, Replacement> mappingTable;\n+    final Map<String, Function<String, String>> valueConverters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4NjgzNw==", "bodyText": "I guess we meant to use VALUE_CONVERTERS_BROKER here?", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385786837", "createdAt": "2020-02-28T16:16:40Z", "author": {"login": "npepinpe"}, "path": "legacy/toml-config/src/main/java/io/zeebe/legacy/tomlconfig/LegacyConfigurationSupport.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.legacy.tomlconfig;\n+\n+import io.zeebe.legacy.tomlconfig.util.Loggers;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Function;\n+\n+public class LegacyConfigurationSupport {\n+  private static final Map<String, Replacement> MAPPING_GATEWAY = new HashMap<>();\n+  private static final Map<String, Function<String, String>> VALUE_CONVERTERS_GATEWAY =\n+      new HashMap<>();\n+  private static final Map<String, Replacement> MAPPING_BROKER = new HashMap<>();\n+  private static final Map<String, Function<String, String>> VALUE_CONVERTERS_BROKER =\n+      new HashMap<>();\n+  private static final int DEFAULT_CONTACT_POINT_PORT = 26502;\n+\n+  static { // static initialization for mapping tables\n+\n+    // zeebe-gateway.network\n+    MAPPING_GATEWAY.put(\"ZEEBE_GATEWAY_HOST\", new Replacement(\"zeebe-gateway.network.host\"));\n+    MAPPING_GATEWAY.put(\"ZEEBE_GATEWAY_PORT\", new Replacement(\"zeebe-gateway.network.port\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_KEEP_ALIVE_INTERVAL\",\n+        new Replacement(\"zeebe-gateway.network.minKeepAliveInterval\"));\n+\n+    // zeebe-gateway.cluster\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_REQUEST_TIMEOUT\", new Replacement(\"zeebe-gateway.cluster.requestTimeout\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CONTACT_POINT\", new Replacement(\"zeebe-gateway.cluster.contactPoint\"));\n+    VALUE_CONVERTERS_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CONTACT_POINT\",\n+        value -> value.contains(\":\") ? value : value + \":\" + DEFAULT_CONTACT_POINT_PORT);\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_NAME\", new Replacement(\"zeebe-gateway.cluster.clusterName\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_MEMBER_ID\", new Replacement(\"zeebe-gateway.cluster.memberId\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_HOST\", new Replacement(\"zeebe-gateway.cluster.host\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_PORT\", new Replacement(\"zeebe-gateway.cluster.port\"));\n+\n+    // zeebe-gateway.monitoring\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MONITORING_ENABLED\", new Replacement(\"zeebe-gateway.monitoring.enadbled\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MONITORING_HOST\", new Replacement(\"zeebe-gateway.monitoring.host\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MONITORING_PORT\", new Replacement(\"zeebe-gateway.monitoring.port\"));\n+\n+    // zeebe-gateway.threads\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MANAGEMENT_THREADS\",\n+        new Replacement(\"zeebe-gateway.threads.managementThreads\"));\n+\n+    // zeebe-gateway.security\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_SECURITY_ENABLED\", new Replacement(\"zeebe-gateway.security.enabled\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CERTIFICATE_PATH\",\n+        new Replacement(\"zeebe-gateway.security.certificateChainPath\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_PRIVATE_KEY_PATH\", new Replacement(\"zeebe-gateway.security.privateKeyPath\"));\n+\n+    // zeebe-broker ----------------------------------------\n+    MAPPING_BROKER.put(\"ZEEBE_STEP_TIMEOUT\", new Replacement(\"zeebe-broker.stepTimeout\"));\n+\n+    // zeebe-broker.cluster\n+    MAPPING_BROKER.put(\"ZEEBE_NODE_ID\", new Replacement(\"zeebe-broker.cluster.nodeId\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_CONTACT_POINTS\", new Replacement(\"zeebe-broker.cluster.initialContactPoints\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_PARTITIONS_COUNT\", new Replacement(\"zeebe-broker.cluster.partitionsCount\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_REPLICATION_FACTOR\", new Replacement(\"zeebe-broker.cluster.replicationFactor\"));\n+    MAPPING_BROKER.put(\"ZEEBE_CLUSTER_SIZE\", new Replacement(\"zeebe-broker.cluster.clusterSize\"));\n+    MAPPING_BROKER.put(\"ZEEBE_CLUSTER_NAME\", new Replacement(\"zeebe-broker.cluster.clusterName\"));\n+\n+    // zeebe-broker.data\n+    MAPPING_BROKER.put(\"ZEEBE_DIRECTORIES\", new Replacement(\"zeebe-broker.data.directories\"));\n+\n+    // zeebe-broker.gateway\n+    MAPPING_BROKER.put(\"ZEEBE_EMBED_GATEWAY\", new Replacement(\"zeebe-broker.gateway.enable\"));\n+\n+    /* this essentially copies all entries from the gateway mapping table, but modifies\n+     * the new environment variables from \"zeebe-gateway.*\" to \"zeebe-broker.gateway.*\"\n+     */\n+    MAPPING_GATEWAY\n+        .entrySet()\n+        .forEach(\n+            entry -> {\n+              final String oldEnvironmentVariable = entry.getKey();\n+              final String newEnvironmentVariableInGatewayContext =\n+                  entry.getValue().getCanonicalRepresentation();\n+\n+              assert newEnvironmentVariableInGatewayContext.startsWith(\"zeebe-\");\n+              final int insertionPoint = \"zeebe-\".length();\n+\n+              final String newEnvironmentVariableInBrokerContext =\n+                  newEnvironmentVariableInGatewayContext.substring(0, insertionPoint) // \"zeebe-\"\n+                      + \"broker.\"\n+                      + newEnvironmentVariableInGatewayContext.substring(\n+                          insertionPoint); // \"gateway.*\"\n+\n+              MAPPING_BROKER.put(\n+                  oldEnvironmentVariable, new Replacement(newEnvironmentVariableInBrokerContext));\n+            });\n+    VALUE_CONVERTERS_BROKER.putAll(VALUE_CONVERTERS_GATEWAY);\n+\n+    // zeebe-broker.network\n+    MAPPING_BROKER.put(\"ZEEBE_HOST\", new Replacement(\"zeebe-broker.network.host\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_ADVERTISED_HOST\", new Replacement(\"zeebe-broker.network.advertisedHost\"));\n+    MAPPING_BROKER.put(\"ZEEBE_PORT_OFFSET\", new Replacement(\"zeebe-broker.network.portOffset\"));\n+\n+    // TODO check docker files and shell scripts and change those as well;\n+    //  if so remove hint in header of sample config files\n+    //  also test that it works when using the startup script\n+\n+  }\n+\n+  private final Scope scope;\n+\n+  public LegacyConfigurationSupport(Scope scope) {\n+    this.scope = scope;\n+  }\n+\n+  /**\n+   * This method checks whether the program was called with a toml configuration file. If so, it\n+   * prints out a warning.\n+   */\n+  public void checkForLegacyTomlConfigurationArgument(String[] args, String recommendedSetting) {\n+    if (args.length == 1 && args[0].endsWith(\".toml\")) {\n+      final String configFileArgument = args[0];\n+      Loggers.LEGACY_LOGGER.warn(\n+          \"Found command line argument \"\n+              + configFileArgument\n+              + \" which might be a TOML configuration file.\");\n+      Loggers.LEGACY_LOGGER.info(\n+          \"TOML configuration files are no longer supported. Please specify a YAML configuration file\"\n+              + \"and set it via environment variable \\\"spring.config.additional-location\\\" (e.g. \"\n+              + \"\\\"export spring.config.additional-location='file:./config/\"\n+              + recommendedSetting\n+              + \"'\\\").\");\n+      Loggers.LEGACY_LOGGER.info(\n+          \"The ./config/ folder contains a configuration file template. Alternatively, you can also use environment variables.\");\n+    }\n+  }\n+\n+  /**\n+   * This method checks for legacy environment variables. If it finds an old environment variable\n+   * which is set, it looks whether the new counterpart is set. If the new counterpart is set, it\n+   * does nothing. If it is not set, it sets a system setting under the new key that has the same\n+   * value as is associated with the old environment variable. This effectively makes the old\n+   * environment variable value visible under the new environment variable. It also prints out a\n+   * warning to the log.\n+   */\n+  public void checkForLegacyEnvironmentVariables() {\n+\n+    final Map<String, Replacement> mappingTable;\n+    final Map<String, Function<String, String>> valueConverters;\n+\n+    switch (scope) {\n+      case GATEWAY:\n+        mappingTable = MAPPING_GATEWAY;\n+        valueConverters = VALUE_CONVERTERS_GATEWAY;\n+        break;\n+\n+      case BROKER:\n+        mappingTable = MAPPING_BROKER;\n+        valueConverters = Collections.emptyMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4ODcyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                MAPPING_GATEWAY\n          \n          \n            \n                    .entrySet()\n          \n          \n            \n                    .forEach(\n          \n          \n            \n                MAPPING_GATEWAY\n          \n          \n            \n                    .forEach(\n          \n      \n    \n    \n  \n\nI think it can be called directly now", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385788721", "createdAt": "2020-02-28T16:20:10Z", "author": {"login": "npepinpe"}, "path": "legacy/toml-config/src/main/java/io/zeebe/legacy/tomlconfig/LegacyConfigurationSupport.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.legacy.tomlconfig;\n+\n+import io.zeebe.legacy.tomlconfig.util.Loggers;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.function.Function;\n+\n+public class LegacyConfigurationSupport {\n+  private static final Map<String, Replacement> MAPPING_GATEWAY = new HashMap<>();\n+  private static final Map<String, Function<String, String>> VALUE_CONVERTERS_GATEWAY =\n+      new HashMap<>();\n+  private static final Map<String, Replacement> MAPPING_BROKER = new HashMap<>();\n+  private static final Map<String, Function<String, String>> VALUE_CONVERTERS_BROKER =\n+      new HashMap<>();\n+  private static final int DEFAULT_CONTACT_POINT_PORT = 26502;\n+\n+  static { // static initialization for mapping tables\n+\n+    // zeebe-gateway.network\n+    MAPPING_GATEWAY.put(\"ZEEBE_GATEWAY_HOST\", new Replacement(\"zeebe-gateway.network.host\"));\n+    MAPPING_GATEWAY.put(\"ZEEBE_GATEWAY_PORT\", new Replacement(\"zeebe-gateway.network.port\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_KEEP_ALIVE_INTERVAL\",\n+        new Replacement(\"zeebe-gateway.network.minKeepAliveInterval\"));\n+\n+    // zeebe-gateway.cluster\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_REQUEST_TIMEOUT\", new Replacement(\"zeebe-gateway.cluster.requestTimeout\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CONTACT_POINT\", new Replacement(\"zeebe-gateway.cluster.contactPoint\"));\n+    VALUE_CONVERTERS_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CONTACT_POINT\",\n+        value -> value.contains(\":\") ? value : value + \":\" + DEFAULT_CONTACT_POINT_PORT);\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_NAME\", new Replacement(\"zeebe-gateway.cluster.clusterName\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_MEMBER_ID\", new Replacement(\"zeebe-gateway.cluster.memberId\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_HOST\", new Replacement(\"zeebe-gateway.cluster.host\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CLUSTER_PORT\", new Replacement(\"zeebe-gateway.cluster.port\"));\n+\n+    // zeebe-gateway.monitoring\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MONITORING_ENABLED\", new Replacement(\"zeebe-gateway.monitoring.enadbled\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MONITORING_HOST\", new Replacement(\"zeebe-gateway.monitoring.host\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MONITORING_PORT\", new Replacement(\"zeebe-gateway.monitoring.port\"));\n+\n+    // zeebe-gateway.threads\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_MANAGEMENT_THREADS\",\n+        new Replacement(\"zeebe-gateway.threads.managementThreads\"));\n+\n+    // zeebe-gateway.security\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_SECURITY_ENABLED\", new Replacement(\"zeebe-gateway.security.enabled\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_CERTIFICATE_PATH\",\n+        new Replacement(\"zeebe-gateway.security.certificateChainPath\"));\n+    MAPPING_GATEWAY.put(\n+        \"ZEEBE_GATEWAY_PRIVATE_KEY_PATH\", new Replacement(\"zeebe-gateway.security.privateKeyPath\"));\n+\n+    // zeebe-broker ----------------------------------------\n+    MAPPING_BROKER.put(\"ZEEBE_STEP_TIMEOUT\", new Replacement(\"zeebe-broker.stepTimeout\"));\n+\n+    // zeebe-broker.cluster\n+    MAPPING_BROKER.put(\"ZEEBE_NODE_ID\", new Replacement(\"zeebe-broker.cluster.nodeId\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_CONTACT_POINTS\", new Replacement(\"zeebe-broker.cluster.initialContactPoints\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_PARTITIONS_COUNT\", new Replacement(\"zeebe-broker.cluster.partitionsCount\"));\n+    MAPPING_BROKER.put(\n+        \"ZEEBE_REPLICATION_FACTOR\", new Replacement(\"zeebe-broker.cluster.replicationFactor\"));\n+    MAPPING_BROKER.put(\"ZEEBE_CLUSTER_SIZE\", new Replacement(\"zeebe-broker.cluster.clusterSize\"));\n+    MAPPING_BROKER.put(\"ZEEBE_CLUSTER_NAME\", new Replacement(\"zeebe-broker.cluster.clusterName\"));\n+\n+    // zeebe-broker.data\n+    MAPPING_BROKER.put(\"ZEEBE_DIRECTORIES\", new Replacement(\"zeebe-broker.data.directories\"));\n+\n+    // zeebe-broker.gateway\n+    MAPPING_BROKER.put(\"ZEEBE_EMBED_GATEWAY\", new Replacement(\"zeebe-broker.gateway.enable\"));\n+\n+    /* this essentially copies all entries from the gateway mapping table, but modifies\n+     * the new environment variables from \"zeebe-gateway.*\" to \"zeebe-broker.gateway.*\"\n+     */\n+    MAPPING_GATEWAY\n+        .entrySet()\n+        .forEach(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4ODk0Mg==", "bodyText": "I guess this wasn't meant to be here \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385788942", "createdAt": "2020-02-28T16:20:34Z", "author": {"login": "npepinpe"}, "path": "legacy/toml-config/src/main/java/io/zeebe/legacy/tomlconfig/LegacyConfigurationSupport.java.orig", "diffHunk": "@@ -0,0 +1,233 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc4OTgzNA==", "bodyText": "Should we have a test that the environment variables are properly mapped?", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385789834", "createdAt": "2020-02-28T16:22:13Z", "author": {"login": "npepinpe"}, "path": "legacy/toml-config/src/test/java/io/zeebe/legacy/tomlconfig/LegacyConfigurationSupportTest.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.legacy.tomlconfig;\n+\n+import io.zeebe.legacy.tomlconfig.LegacyConfigurationSupport.Replacement;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Test;\n+\n+public class LegacyConfigurationSupportTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5MDc0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class TestConfigurationFactory {\n          \n          \n            \n            public final class TestConfigurationFactory {", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385790742", "createdAt": "2020-02-28T16:23:44Z", "author": {"login": "npepinpe"}, "path": "test-util/src/main/java/io/zeebe/test/util/TestConfigurationFactory.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.test.util;\n+\n+import io.zeebe.util.Environment;\n+import io.zeebe.util.Loggers;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.config.YamlPropertiesFactoryBean;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.bind.BindResult;\n+import org.springframework.boot.context.properties.bind.Binder;\n+import org.springframework.boot.context.properties.source.ConfigurationPropertySource;\n+import org.springframework.boot.context.properties.source.ConfigurationPropertySources;\n+import org.springframework.core.env.MapPropertySource;\n+import org.springframework.core.env.MutablePropertySources;\n+import org.springframework.core.env.PropertiesPropertySource;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.InputStreamResource;\n+import org.springframework.core.io.Resource;\n+\n+/**\n+ * This class mimics the Spring Boot configuration mechanism. It reads configuration from a YAML\n+ * file or input stream and then overlays a map of environment settings, that can be passed in as\n+ * argument. It does not consider the actual system environment settings. Instead, the test can\n+ * specify the environment settings it wants to test through an {@code Environment} object. <br>\n+ * There are several caveats though:\n+ *\n+ * <ul>\n+ *   <li>If using the file based interface, the file must be available on the classpath\n+ *   <li>It is assumed that the created types have public no arg constructors\n+ *   <li>This implementation does not support relaxed binding (it was tried during development, but\n+ *       in the end the rules for relaxed binding didn't match up with the ones used by Spring Boot\n+ *       proper. This lead to confusion and eventually the relaxed naming support was dropped)\n+ *   <li>This class does not support the full feature set of Spring Boot configuration. Among others\n+ *       it does not support profiles or overlaying configuration from multiple files\n+ * </ul>\n+ */\n+public class TestConfigurationFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5MDg2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final Environment environment, String prefix, final String fileName, final Class<T> type) {\n          \n          \n            \n                  final Environment environment, final String prefix, final String fileName, final Class<T> type) {", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385790865", "createdAt": "2020-02-28T16:23:58Z", "author": {"login": "npepinpe"}, "path": "test-util/src/main/java/io/zeebe/test/util/TestConfigurationFactory.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.test.util;\n+\n+import io.zeebe.util.Environment;\n+import io.zeebe.util.Loggers;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.config.YamlPropertiesFactoryBean;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.bind.BindResult;\n+import org.springframework.boot.context.properties.bind.Binder;\n+import org.springframework.boot.context.properties.source.ConfigurationPropertySource;\n+import org.springframework.boot.context.properties.source.ConfigurationPropertySources;\n+import org.springframework.core.env.MapPropertySource;\n+import org.springframework.core.env.MutablePropertySources;\n+import org.springframework.core.env.PropertiesPropertySource;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.InputStreamResource;\n+import org.springframework.core.io.Resource;\n+\n+/**\n+ * This class mimics the Spring Boot configuration mechanism. It reads configuration from a YAML\n+ * file or input stream and then overlays a map of environment settings, that can be passed in as\n+ * argument. It does not consider the actual system environment settings. Instead, the test can\n+ * specify the environment settings it wants to test through an {@code Environment} object. <br>\n+ * There are several caveats though:\n+ *\n+ * <ul>\n+ *   <li>If using the file based interface, the file must be available on the classpath\n+ *   <li>It is assumed that the created types have public no arg constructors\n+ *   <li>This implementation does not support relaxed binding (it was tried during development, but\n+ *       in the end the rules for relaxed binding didn't match up with the ones used by Spring Boot\n+ *       proper. This lead to confusion and eventually the relaxed naming support was dropped)\n+ *   <li>This class does not support the full feature set of Spring Boot configuration. Among others\n+ *       it does not support profiles or overlaying configuration from multiple files\n+ * </ul>\n+ */\n+public class TestConfigurationFactory {\n+\n+  public static final Logger LOG = Loggers.CONFIG_LOGGER;\n+\n+  /**\n+   * Reads the configuration from the input stream and binds it to an object\n+   *\n+   * @param configurationInputStream input stream of the configuration file; must not be {@code\n+   *     null}\n+   * @param type type of object to be created; it is assumed that this object has a public no arg\n+   *     constructor; must not be {@code null}; must have a {@link ConfigurationProperties}\n+   *     annotation with a {@code prefix} attribute\n+   */\n+  public <T> T create(final InputStream configurationInputStream, final Class<T> type) {\n+    final ConfigurationProperties annotation = type.getAnnotation(ConfigurationProperties.class);\n+    final String prefix;\n+    if (annotation != null && annotation.prefix() != null) {\n+      prefix = annotation.prefix();\n+    } else {\n+      throw new IllegalArgumentException(\n+          \"Unable to identify prefix for type\" + type.getSimpleName());\n+    }\n+    return create(null, prefix, configurationInputStream, type);\n+  }\n+\n+  /**\n+   * Reads the configuration file from the class path and binds it to an object\n+   *\n+   * @param environment environment to simulate environment variables that can be overlayed; may be\n+   *     {@code} null\n+   * @param prefix the top level element in the configuration that should be mapped to the object\n+   * @param fileName filename of the configuration file; must be available on the classpath; must\n+   *     not be {@code null}\n+   * @param type type of object to be created; it is assumed that this object has a public no arg\n+   *     constructor; must not be {@code null}\n+   */\n+  public <T> T create(\n+      final Environment environment, String prefix, final String fileName, final Class<T> type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5MTQ1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  String prefix,\n          \n          \n            \n                  final String prefix,", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385791453", "createdAt": "2020-02-28T16:25:05Z", "author": {"login": "npepinpe"}, "path": "test-util/src/main/java/io/zeebe/test/util/TestConfigurationFactory.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.test.util;\n+\n+import io.zeebe.util.Environment;\n+import io.zeebe.util.Loggers;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.config.YamlPropertiesFactoryBean;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.bind.BindResult;\n+import org.springframework.boot.context.properties.bind.Binder;\n+import org.springframework.boot.context.properties.source.ConfigurationPropertySource;\n+import org.springframework.boot.context.properties.source.ConfigurationPropertySources;\n+import org.springframework.core.env.MapPropertySource;\n+import org.springframework.core.env.MutablePropertySources;\n+import org.springframework.core.env.PropertiesPropertySource;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.InputStreamResource;\n+import org.springframework.core.io.Resource;\n+\n+/**\n+ * This class mimics the Spring Boot configuration mechanism. It reads configuration from a YAML\n+ * file or input stream and then overlays a map of environment settings, that can be passed in as\n+ * argument. It does not consider the actual system environment settings. Instead, the test can\n+ * specify the environment settings it wants to test through an {@code Environment} object. <br>\n+ * There are several caveats though:\n+ *\n+ * <ul>\n+ *   <li>If using the file based interface, the file must be available on the classpath\n+ *   <li>It is assumed that the created types have public no arg constructors\n+ *   <li>This implementation does not support relaxed binding (it was tried during development, but\n+ *       in the end the rules for relaxed binding didn't match up with the ones used by Spring Boot\n+ *       proper. This lead to confusion and eventually the relaxed naming support was dropped)\n+ *   <li>This class does not support the full feature set of Spring Boot configuration. Among others\n+ *       it does not support profiles or overlaying configuration from multiple files\n+ * </ul>\n+ */\n+public class TestConfigurationFactory {\n+\n+  public static final Logger LOG = Loggers.CONFIG_LOGGER;\n+\n+  /**\n+   * Reads the configuration from the input stream and binds it to an object\n+   *\n+   * @param configurationInputStream input stream of the configuration file; must not be {@code\n+   *     null}\n+   * @param type type of object to be created; it is assumed that this object has a public no arg\n+   *     constructor; must not be {@code null}; must have a {@link ConfigurationProperties}\n+   *     annotation with a {@code prefix} attribute\n+   */\n+  public <T> T create(final InputStream configurationInputStream, final Class<T> type) {\n+    final ConfigurationProperties annotation = type.getAnnotation(ConfigurationProperties.class);\n+    final String prefix;\n+    if (annotation != null && annotation.prefix() != null) {\n+      prefix = annotation.prefix();\n+    } else {\n+      throw new IllegalArgumentException(\n+          \"Unable to identify prefix for type\" + type.getSimpleName());\n+    }\n+    return create(null, prefix, configurationInputStream, type);\n+  }\n+\n+  /**\n+   * Reads the configuration file from the class path and binds it to an object\n+   *\n+   * @param environment environment to simulate environment variables that can be overlayed; may be\n+   *     {@code} null\n+   * @param prefix the top level element in the configuration that should be mapped to the object\n+   * @param fileName filename of the configuration file; must be available on the classpath; must\n+   *     not be {@code null}\n+   * @param type type of object to be created; it is assumed that this object has a public no arg\n+   *     constructor; must not be {@code null}\n+   */\n+  public <T> T create(\n+      final Environment environment, String prefix, final String fileName, final Class<T> type) {\n+    LOG.debug(\"Reading configuration for {} from file {}\", type, fileName);\n+\n+    try (InputStream inputStream = new ClassPathResource(fileName).getInputStream()) {\n+\n+      return create(environment, prefix, inputStream, type);\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(e);\n+    }\n+  }\n+\n+  /**\n+   * Reads the configuration from the input stream and binds it to an object\n+   *\n+   * @param environment environment to simulate environment variables that can be overlayed; may be\n+   *     {@code} null\n+   * @param prefix the top level element in the configuration that should be mapped to the object\n+   * @param inputStream input stream of the configuration file; must not be {@code null}\n+   * @param type type of object to be created; it is assumed that this object has a public no arg\n+   *     constructor; must not be {@code null}\n+   */\n+  public <T> T create(\n+      final Environment environment,\n+      String prefix,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5MTU1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Properties loadYamlProperties(InputStream inputStream) {\n          \n          \n            \n              private Properties loadYamlProperties(final InputStream inputStream) {", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385791553", "createdAt": "2020-02-28T16:25:18Z", "author": {"login": "npepinpe"}, "path": "test-util/src/main/java/io/zeebe/test/util/TestConfigurationFactory.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.test.util;\n+\n+import io.zeebe.util.Environment;\n+import io.zeebe.util.Loggers;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.config.YamlPropertiesFactoryBean;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.bind.BindResult;\n+import org.springframework.boot.context.properties.bind.Binder;\n+import org.springframework.boot.context.properties.source.ConfigurationPropertySource;\n+import org.springframework.boot.context.properties.source.ConfigurationPropertySources;\n+import org.springframework.core.env.MapPropertySource;\n+import org.springframework.core.env.MutablePropertySources;\n+import org.springframework.core.env.PropertiesPropertySource;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.InputStreamResource;\n+import org.springframework.core.io.Resource;\n+\n+/**\n+ * This class mimics the Spring Boot configuration mechanism. It reads configuration from a YAML\n+ * file or input stream and then overlays a map of environment settings, that can be passed in as\n+ * argument. It does not consider the actual system environment settings. Instead, the test can\n+ * specify the environment settings it wants to test through an {@code Environment} object. <br>\n+ * There are several caveats though:\n+ *\n+ * <ul>\n+ *   <li>If using the file based interface, the file must be available on the classpath\n+ *   <li>It is assumed that the created types have public no arg constructors\n+ *   <li>This implementation does not support relaxed binding (it was tried during development, but\n+ *       in the end the rules for relaxed binding didn't match up with the ones used by Spring Boot\n+ *       proper. This lead to confusion and eventually the relaxed naming support was dropped)\n+ *   <li>This class does not support the full feature set of Spring Boot configuration. Among others\n+ *       it does not support profiles or overlaying configuration from multiple files\n+ * </ul>\n+ */\n+public class TestConfigurationFactory {\n+\n+  public static final Logger LOG = Loggers.CONFIG_LOGGER;\n+\n+  /**\n+   * Reads the configuration from the input stream and binds it to an object\n+   *\n+   * @param configurationInputStream input stream of the configuration file; must not be {@code\n+   *     null}\n+   * @param type type of object to be created; it is assumed that this object has a public no arg\n+   *     constructor; must not be {@code null}; must have a {@link ConfigurationProperties}\n+   *     annotation with a {@code prefix} attribute\n+   */\n+  public <T> T create(final InputStream configurationInputStream, final Class<T> type) {\n+    final ConfigurationProperties annotation = type.getAnnotation(ConfigurationProperties.class);\n+    final String prefix;\n+    if (annotation != null && annotation.prefix() != null) {\n+      prefix = annotation.prefix();\n+    } else {\n+      throw new IllegalArgumentException(\n+          \"Unable to identify prefix for type\" + type.getSimpleName());\n+    }\n+    return create(null, prefix, configurationInputStream, type);\n+  }\n+\n+  /**\n+   * Reads the configuration file from the class path and binds it to an object\n+   *\n+   * @param environment environment to simulate environment variables that can be overlayed; may be\n+   *     {@code} null\n+   * @param prefix the top level element in the configuration that should be mapped to the object\n+   * @param fileName filename of the configuration file; must be available on the classpath; must\n+   *     not be {@code null}\n+   * @param type type of object to be created; it is assumed that this object has a public no arg\n+   *     constructor; must not be {@code null}\n+   */\n+  public <T> T create(\n+      final Environment environment, String prefix, final String fileName, final Class<T> type) {\n+    LOG.debug(\"Reading configuration for {} from file {}\", type, fileName);\n+\n+    try (InputStream inputStream = new ClassPathResource(fileName).getInputStream()) {\n+\n+      return create(environment, prefix, inputStream, type);\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(e);\n+    }\n+  }\n+\n+  /**\n+   * Reads the configuration from the input stream and binds it to an object\n+   *\n+   * @param environment environment to simulate environment variables that can be overlayed; may be\n+   *     {@code} null\n+   * @param prefix the top level element in the configuration that should be mapped to the object\n+   * @param inputStream input stream of the configuration file; must not be {@code null}\n+   * @param type type of object to be created; it is assumed that this object has a public no arg\n+   *     constructor; must not be {@code null}\n+   */\n+  public <T> T create(\n+      final Environment environment,\n+      String prefix,\n+      final InputStream inputStream,\n+      final Class<T> type) {\n+    LOG.debug(\"Reading configuration for {} from input stream\", type);\n+\n+    final Map<String, Object> propertiesFromEnvironment = convertEnvironmentIntoMap(environment);\n+    final Properties propertiesFromFile = loadYamlProperties(inputStream);\n+\n+    final MutablePropertySources propertySources = new MutablePropertySources();\n+\n+    propertySources.addLast(\n+        new MapPropertySource(\"environment properties strict\", propertiesFromEnvironment));\n+    propertySources.addLast(\n+        new PropertiesPropertySource(\"properties from file\", propertiesFromFile));\n+\n+    final Constructor<T> constructor;\n+    final T target;\n+    try {\n+      constructor = type.getConstructor();\n+      target = constructor.newInstance();\n+    } catch (NoSuchMethodException\n+        | InstantiationException\n+        | IllegalAccessException\n+        | InvocationTargetException e) {\n+      throw new IllegalStateException(e);\n+    }\n+\n+    final Iterable<ConfigurationPropertySource> configPropertySource =\n+        ConfigurationPropertySources.from(propertySources);\n+\n+    final BindResult<T> bindResult = new Binder(configPropertySource).bind(prefix, type);\n+\n+    if (!bindResult.isBound()) {\n+      LOG.warn(\n+          \"No binding result parsing the configuration. This is normal if the configuration is empty.\"\n+              + \" Otherwise it is a configuration or programming error.\");\n+      return target;\n+    } else {\n+      return bindResult.get();\n+    }\n+  }\n+\n+  private Properties loadYamlProperties(InputStream inputStream) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5MTY0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private Map<String, Object> convertEnvironmentIntoMap(Environment environment) {\n          \n          \n            \n              private Map<String, Object> convertEnvironmentIntoMap(final Environment environment) {", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385791648", "createdAt": "2020-02-28T16:25:28Z", "author": {"login": "npepinpe"}, "path": "test-util/src/main/java/io/zeebe/test/util/TestConfigurationFactory.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.test.util;\n+\n+import io.zeebe.util.Environment;\n+import io.zeebe.util.Loggers;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import org.slf4j.Logger;\n+import org.springframework.beans.factory.config.YamlPropertiesFactoryBean;\n+import org.springframework.boot.context.properties.ConfigurationProperties;\n+import org.springframework.boot.context.properties.bind.BindResult;\n+import org.springframework.boot.context.properties.bind.Binder;\n+import org.springframework.boot.context.properties.source.ConfigurationPropertySource;\n+import org.springframework.boot.context.properties.source.ConfigurationPropertySources;\n+import org.springframework.core.env.MapPropertySource;\n+import org.springframework.core.env.MutablePropertySources;\n+import org.springframework.core.env.PropertiesPropertySource;\n+import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.io.InputStreamResource;\n+import org.springframework.core.io.Resource;\n+\n+/**\n+ * This class mimics the Spring Boot configuration mechanism. It reads configuration from a YAML\n+ * file or input stream and then overlays a map of environment settings, that can be passed in as\n+ * argument. It does not consider the actual system environment settings. Instead, the test can\n+ * specify the environment settings it wants to test through an {@code Environment} object. <br>\n+ * There are several caveats though:\n+ *\n+ * <ul>\n+ *   <li>If using the file based interface, the file must be available on the classpath\n+ *   <li>It is assumed that the created types have public no arg constructors\n+ *   <li>This implementation does not support relaxed binding (it was tried during development, but\n+ *       in the end the rules for relaxed binding didn't match up with the ones used by Spring Boot\n+ *       proper. This lead to confusion and eventually the relaxed naming support was dropped)\n+ *   <li>This class does not support the full feature set of Spring Boot configuration. Among others\n+ *       it does not support profiles or overlaying configuration from multiple files\n+ * </ul>\n+ */\n+public class TestConfigurationFactory {\n+\n+  public static final Logger LOG = Loggers.CONFIG_LOGGER;\n+\n+  /**\n+   * Reads the configuration from the input stream and binds it to an object\n+   *\n+   * @param configurationInputStream input stream of the configuration file; must not be {@code\n+   *     null}\n+   * @param type type of object to be created; it is assumed that this object has a public no arg\n+   *     constructor; must not be {@code null}; must have a {@link ConfigurationProperties}\n+   *     annotation with a {@code prefix} attribute\n+   */\n+  public <T> T create(final InputStream configurationInputStream, final Class<T> type) {\n+    final ConfigurationProperties annotation = type.getAnnotation(ConfigurationProperties.class);\n+    final String prefix;\n+    if (annotation != null && annotation.prefix() != null) {\n+      prefix = annotation.prefix();\n+    } else {\n+      throw new IllegalArgumentException(\n+          \"Unable to identify prefix for type\" + type.getSimpleName());\n+    }\n+    return create(null, prefix, configurationInputStream, type);\n+  }\n+\n+  /**\n+   * Reads the configuration file from the class path and binds it to an object\n+   *\n+   * @param environment environment to simulate environment variables that can be overlayed; may be\n+   *     {@code} null\n+   * @param prefix the top level element in the configuration that should be mapped to the object\n+   * @param fileName filename of the configuration file; must be available on the classpath; must\n+   *     not be {@code null}\n+   * @param type type of object to be created; it is assumed that this object has a public no arg\n+   *     constructor; must not be {@code null}\n+   */\n+  public <T> T create(\n+      final Environment environment, String prefix, final String fileName, final Class<T> type) {\n+    LOG.debug(\"Reading configuration for {} from file {}\", type, fileName);\n+\n+    try (InputStream inputStream = new ClassPathResource(fileName).getInputStream()) {\n+\n+      return create(environment, prefix, inputStream, type);\n+    } catch (IOException e) {\n+      throw new UncheckedIOException(e);\n+    }\n+  }\n+\n+  /**\n+   * Reads the configuration from the input stream and binds it to an object\n+   *\n+   * @param environment environment to simulate environment variables that can be overlayed; may be\n+   *     {@code} null\n+   * @param prefix the top level element in the configuration that should be mapped to the object\n+   * @param inputStream input stream of the configuration file; must not be {@code null}\n+   * @param type type of object to be created; it is assumed that this object has a public no arg\n+   *     constructor; must not be {@code null}\n+   */\n+  public <T> T create(\n+      final Environment environment,\n+      String prefix,\n+      final InputStream inputStream,\n+      final Class<T> type) {\n+    LOG.debug(\"Reading configuration for {} from input stream\", type);\n+\n+    final Map<String, Object> propertiesFromEnvironment = convertEnvironmentIntoMap(environment);\n+    final Properties propertiesFromFile = loadYamlProperties(inputStream);\n+\n+    final MutablePropertySources propertySources = new MutablePropertySources();\n+\n+    propertySources.addLast(\n+        new MapPropertySource(\"environment properties strict\", propertiesFromEnvironment));\n+    propertySources.addLast(\n+        new PropertiesPropertySource(\"properties from file\", propertiesFromFile));\n+\n+    final Constructor<T> constructor;\n+    final T target;\n+    try {\n+      constructor = type.getConstructor();\n+      target = constructor.newInstance();\n+    } catch (NoSuchMethodException\n+        | InstantiationException\n+        | IllegalAccessException\n+        | InvocationTargetException e) {\n+      throw new IllegalStateException(e);\n+    }\n+\n+    final Iterable<ConfigurationPropertySource> configPropertySource =\n+        ConfigurationPropertySources.from(propertySources);\n+\n+    final BindResult<T> bindResult = new Binder(configPropertySource).bind(prefix, type);\n+\n+    if (!bindResult.isBound()) {\n+      LOG.warn(\n+          \"No binding result parsing the configuration. This is normal if the configuration is empty.\"\n+              + \" Otherwise it is a configuration or programming error.\");\n+      return target;\n+    } else {\n+      return bindResult.get();\n+    }\n+  }\n+\n+  private Properties loadYamlProperties(InputStream inputStream) {\n+    final Resource resource = new InputStreamResource(inputStream);\n+    final YamlPropertiesFactoryBean factoryBean = new YamlPropertiesFactoryBean();\n+    factoryBean.setResources(resource);\n+    return factoryBean.getObject();\n+  }\n+\n+  private Map<String, Object> convertEnvironmentIntoMap(Environment environment) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc5MjQ5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static final Function<List<String>, List<String>> LIST_SANITIZER =\n          \n          \n            \n              public static final UnaryOperator<List<String>> LIST_SANITIZER =\n          \n      \n    \n    \n  \n\nThat said, what is the advantage of declaring it like this versus declaring it as a static method?", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#discussion_r385792499", "createdAt": "2020-02-28T16:26:57Z", "author": {"login": "npepinpe"}, "path": "util/src/main/java/io/zeebe/util/StringUtil.java", "diffHunk": "@@ -7,11 +7,28 @@\n  */\n package io.zeebe.util;\n \n+import static java.util.function.Predicate.not;\n+import static java.util.stream.Collectors.toList;\n+\n import java.nio.charset.Charset;\n import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.Function;\n \n public final class StringUtil {\n \n+  /** Helper functions that removes nulls and empty strings and trims all remaining strings */\n+  public static final Function<List<String>, List<String>> LIST_SANITIZER =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176"}, "originalPosition": 18}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cebf83aef164da275826ce152f16f1940f7ec176", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/cebf83aef164da275826ce152f16f1940f7ec176", "committedDate": "2020-02-27T14:11:19Z", "message": "feat(broker): Map old env vars to new ones and warn user"}, "afterCommit": {"oid": "6b3ffe86e3904c157946ccf2f59b263fdc22708c", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/6b3ffe86e3904c157946ccf2f59b263fdc22708c", "committedDate": "2020-03-03T10:53:27Z", "message": "feat(broker): Map old env vars to new ones and warn user"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b3ffe86e3904c157946ccf2f59b263fdc22708c", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/6b3ffe86e3904c157946ccf2f59b263fdc22708c", "committedDate": "2020-03-03T10:53:27Z", "message": "feat(broker): Map old env vars to new ones and warn user"}, "afterCommit": {"oid": "49146ab5e6c61e8a1c57cbc1cf2561bd9587fd3b", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/49146ab5e6c61e8a1c57cbc1cf2561bd9587fd3b", "committedDate": "2020-03-03T12:01:02Z", "message": "feat(broker): Map old env vars to new ones and warn user"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "49146ab5e6c61e8a1c57cbc1cf2561bd9587fd3b", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/49146ab5e6c61e8a1c57cbc1cf2561bd9587fd3b", "committedDate": "2020-03-03T12:01:02Z", "message": "feat(broker): Map old env vars to new ones and warn user"}, "afterCommit": {"oid": "de3b18c66bda97d1ffe8370aecdab22a92e3ea2d", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/de3b18c66bda97d1ffe8370aecdab22a92e3ea2d", "committedDate": "2020-03-03T12:16:54Z", "message": "feat(broker): Map old env vars to new ones and warn user"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d03e6fa83c0eb16016f78b215f7d9c1bd3687f9", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/6d03e6fa83c0eb16016f78b215f7d9c1bd3687f9", "committedDate": "2020-03-03T13:14:55Z", "message": "chore(broker): Copy configuration classes to legacy package\n\nThese classes were copied so that later they may be used to migrate from the old configuration to the new configuration."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "658fa4eb268be6807a05f5427a2f7f99601955d1", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/658fa4eb268be6807a05f5427a2f7f99601955d1", "committedDate": "2020-03-03T13:15:51Z", "message": "feat(broker): Use Spring Boot Configuration to configure zeebe"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de3b18c66bda97d1ffe8370aecdab22a92e3ea2d", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/de3b18c66bda97d1ffe8370aecdab22a92e3ea2d", "committedDate": "2020-03-03T12:16:54Z", "message": "feat(broker): Map old env vars to new ones and warn user"}, "afterCommit": {"oid": "1a037909e3b1a00f0d7690b903f766a4031a1e1b", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/1a037909e3b1a00f0d7690b903f766a4031a1e1b", "committedDate": "2020-03-03T13:20:24Z", "message": "feat(broker): Map old env vars to new ones and warn user"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "613404c66529067383be0162fde0037e3625fa79", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/613404c66529067383be0162fde0037e3625fa79", "committedDate": "2020-03-03T13:48:19Z", "message": "feat(broker): Replace TOML with YAML in tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a9515f856881669e116a45fe6d74cc58dfd8c82", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8a9515f856881669e116a45fe6d74cc58dfd8c82", "committedDate": "2020-03-03T13:48:19Z", "message": "feat(broker): Use Duration and DataSize instead of Strings in config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5893780cd7f423e70f3c54f1b28d42e5fcaf6fbd", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/5893780cd7f423e70f3c54f1b28d42e5fcaf6fbd", "committedDate": "2020-03-03T13:48:19Z", "message": "feat(broker): Use map instead of list to configure exporters\n\nMaps have two advantages:\n- If several config files are used, each exporter will be added to the configuration (with lists they would be replaced)\n- Maps give each exporter an addressable key; this way it is possible to set environment variables that e.g. overwrite the password inside the elasticsearch exporter\n\nThis also means that the ID is no longer part of the ExporterCfg object. Instead the ID is given outside.\n\nThe ID is still part of the ExporterDescriptor, though, and corresponds to the key under wich the exporter was added to the BrokerCfg"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5becb045a1214ce092d78b40c272b063f6cd92ef", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/5becb045a1214ce092d78b40c272b063f6cd92ef", "committedDate": "2020-03-03T13:48:20Z", "message": "chore(util): Move legacy classes into dedicated module\n\nThis module will live as long as we need to be backwards compatible with the old configuration mechanism and old environment variables. After that, the module can be removed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a223c887c5a7516b070d00a8afcd81b55ee1e42", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8a223c887c5a7516b070d00a8afcd81b55ee1e42", "committedDate": "2020-03-03T13:48:21Z", "message": "feat(broker): Map old env vars to new ones and warn user"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b15d6267cb168090067a2294136b198a959e194", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/0b15d6267cb168090067a2294136b198a959e194", "committedDate": "2020-03-03T13:30:04Z", "message": "chore(broker): Use config in dev mode too"}, "afterCommit": {"oid": "1eeef5f5153c718b16c2bfc7a197bd7e136f536c", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/1eeef5f5153c718b16c2bfc7a197bd7e136f536c", "committedDate": "2020-03-03T13:48:21Z", "message": "chore(broker): Use config in dev mode too"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "591a819230f3e6feb799cbc6fa1b120db4e3adac", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/591a819230f3e6feb799cbc6fa1b120db4e3adac", "committedDate": "2020-03-03T14:00:36Z", "message": "chore(broker): Use config in dev mode too"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1a4e27113751ec0b4eb1b523a4c3cf40508ccea", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/d1a4e27113751ec0b4eb1b523a4c3cf40508ccea", "committedDate": "2020-03-03T14:00:36Z", "message": "chore(broker): Change top level config from zeebe-broker to zeebe.broker; ditto for gateway\n\nThis changes the top level configuration element for\n\n- the broker from \"zeebe-broker\" to \"zeebe.broker\"\n- the gateway from \"zeebe-gateway\" to \"zeebe.gateway\"\n\nCorrespondingly, environment variables change for\n- the broker from \"ZEEBEBROKER_*\" to \"ZEEBE_BROKER_*\"\n- the gateway from \"ZEEBEGATEWAY_*\" to \"ZEEBE_GATEWAY_*\""}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1eeef5f5153c718b16c2bfc7a197bd7e136f536c", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/1eeef5f5153c718b16c2bfc7a197bd7e136f536c", "committedDate": "2020-03-03T13:48:21Z", "message": "chore(broker): Use config in dev mode too"}, "afterCommit": {"oid": "d1a4e27113751ec0b4eb1b523a4c3cf40508ccea", "author": {"user": {"login": "pihme", "name": "Peter Ihme"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/d1a4e27113751ec0b4eb1b523a4c3cf40508ccea", "committedDate": "2020-03-03T14:00:36Z", "message": "chore(broker): Change top level config from zeebe-broker to zeebe.broker; ditto for gateway\n\nThis changes the top level configuration element for\n\n- the broker from \"zeebe-broker\" to \"zeebe.broker\"\n- the gateway from \"zeebe-gateway\" to \"zeebe.gateway\"\n\nCorrespondingly, environment variables change for\n- the broker from \"ZEEBEBROKER_*\" to \"ZEEBE_BROKER_*\"\n- the gateway from \"ZEEBEGATEWAY_*\" to \"ZEEBE_GATEWAY_*\""}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDU1MTYw", "url": "https://github.com/camunda-cloud/zeebe/pull/3907#pullrequestreview-368055160", "createdAt": "2020-03-03T15:04:40Z", "commit": {"oid": "d1a4e27113751ec0b4eb1b523a4c3cf40508ccea"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3159, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}