{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNzY1NTEx", "number": 5972, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODowNjoyOFrOFBpaPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODowNjo1OFrOFBpbAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjcxMzU2OnYy", "diffSide": "RIGHT", "path": "clients/go/cmd/zbctl/main_test.go", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODowNjoyOFrOIAaVxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMjo1OToxNFrOIFPP5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwMjQ2OQ==", "bodyText": "This isn't obvious to me, can you elaborate? By deploying this means we spend more time in setup, so we don't have to wait for the jobs to be created?", "url": "https://github.com/camunda-cloud/zeebe/pull/5972#discussion_r537302469", "createdAt": "2020-12-07T08:06:28Z", "author": {"login": "npepinpe"}, "path": "clients/go/cmd/zbctl/main_test.go", "diffHunk": "@@ -95,10 +95,22 @@ var tests = []struct {\n \t\tgoldenFile: \"testdata/create_worker.golden\",\n \t},\n \t{\n-\t\tname:       \"activate job\",\n+\t\tname:       \"empty activate job\",\n+\t\tcmd:        \"--insecure activate jobs jobType --maxJobsToActivate 0\",\n+\t\tgoldenFile: \"testdata/empty_activate_job.golden\",\n+\t},\n+\t{\n+\t\tname:       \"single activate job\",\n \t\tsetupCmds:  []string{\"--insecure deploy testdata/job_model.bpmn\", \"--insecure create instance jobProcess\"},\n-\t\tcmd:        \"--insecure activate jobs jobType\",\n-\t\tgoldenFile: \"testdata/activate_job.golden\",\n+\t\tcmd:        \"--insecure activate jobs jobType --maxJobsToActivate 1\",\n+\t\tgoldenFile: \"testdata/single_activate_job.golden\",\n+\t},\n+\t{\n+\t\tname: \"double activate job\",\n+\t\t// we deploy on the end again to spent more time in setup phase to avoid a race condition, that we can activate more jobs then one", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d525cc42aa36687717181071d5372e40efa3fdf2"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwMzgwOA==", "bodyText": "If that's correct, then wouldn't setting a longer time out on activate jobs work? Or is that not possible via zbctl?", "url": "https://github.com/camunda-cloud/zeebe/pull/5972#discussion_r537303808", "createdAt": "2020-12-07T08:08:46Z", "author": {"login": "npepinpe"}, "path": "clients/go/cmd/zbctl/main_test.go", "diffHunk": "@@ -95,10 +95,22 @@ var tests = []struct {\n \t\tgoldenFile: \"testdata/create_worker.golden\",\n \t},\n \t{\n-\t\tname:       \"activate job\",\n+\t\tname:       \"empty activate job\",\n+\t\tcmd:        \"--insecure activate jobs jobType --maxJobsToActivate 0\",\n+\t\tgoldenFile: \"testdata/empty_activate_job.golden\",\n+\t},\n+\t{\n+\t\tname:       \"single activate job\",\n \t\tsetupCmds:  []string{\"--insecure deploy testdata/job_model.bpmn\", \"--insecure create instance jobProcess\"},\n-\t\tcmd:        \"--insecure activate jobs jobType\",\n-\t\tgoldenFile: \"testdata/activate_job.golden\",\n+\t\tcmd:        \"--insecure activate jobs jobType --maxJobsToActivate 1\",\n+\t\tgoldenFile: \"testdata/single_activate_job.golden\",\n+\t},\n+\t{\n+\t\tname: \"double activate job\",\n+\t\t// we deploy on the end again to spent more time in setup phase to avoid a race condition, that we can activate more jobs then one", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwMjQ2OQ=="}, "originalCommit": {"oid": "d525cc42aa36687717181071d5372e40efa3fdf2"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5NTM5MA==", "bodyText": "Ok I tried with requestTimeout 30s, but doesn't work. The thing is that only one job exist when the activate command is send (without the second deployment). This job is immediately returned. In general this is fine because this is just the max value we are setting, but in this test we want explicitly 2 because we want to test the output. This is the reason why I added the second deployment to have more time such that the second job is available. Sleep would also be ok but I dont know where to put this, since the tests are highly parameterized.", "url": "https://github.com/camunda-cloud/zeebe/pull/5972#discussion_r538795390", "createdAt": "2020-12-08T20:49:15Z", "author": {"login": "Zelldon"}, "path": "clients/go/cmd/zbctl/main_test.go", "diffHunk": "@@ -95,10 +95,22 @@ var tests = []struct {\n \t\tgoldenFile: \"testdata/create_worker.golden\",\n \t},\n \t{\n-\t\tname:       \"activate job\",\n+\t\tname:       \"empty activate job\",\n+\t\tcmd:        \"--insecure activate jobs jobType --maxJobsToActivate 0\",\n+\t\tgoldenFile: \"testdata/empty_activate_job.golden\",\n+\t},\n+\t{\n+\t\tname:       \"single activate job\",\n \t\tsetupCmds:  []string{\"--insecure deploy testdata/job_model.bpmn\", \"--insecure create instance jobProcess\"},\n-\t\tcmd:        \"--insecure activate jobs jobType\",\n-\t\tgoldenFile: \"testdata/activate_job.golden\",\n+\t\tcmd:        \"--insecure activate jobs jobType --maxJobsToActivate 1\",\n+\t\tgoldenFile: \"testdata/single_activate_job.golden\",\n+\t},\n+\t{\n+\t\tname: \"double activate job\",\n+\t\t// we deploy on the end again to spent more time in setup phase to avoid a race condition, that we can activate more jobs then one", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwMjQ2OQ=="}, "originalCommit": {"oid": "d525cc42aa36687717181071d5372e40efa3fdf2"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM2MzYyMw==", "bodyText": "I see what you mean - there's no way for us to wait until both jobs are created before actually activating them. My main worry is this has potential to be flaky, but I wouldn't block this for now.", "url": "https://github.com/camunda-cloud/zeebe/pull/5972#discussion_r542363623", "createdAt": "2020-12-14T12:59:14Z", "author": {"login": "npepinpe"}, "path": "clients/go/cmd/zbctl/main_test.go", "diffHunk": "@@ -95,10 +95,22 @@ var tests = []struct {\n \t\tgoldenFile: \"testdata/create_worker.golden\",\n \t},\n \t{\n-\t\tname:       \"activate job\",\n+\t\tname:       \"empty activate job\",\n+\t\tcmd:        \"--insecure activate jobs jobType --maxJobsToActivate 0\",\n+\t\tgoldenFile: \"testdata/empty_activate_job.golden\",\n+\t},\n+\t{\n+\t\tname:       \"single activate job\",\n \t\tsetupCmds:  []string{\"--insecure deploy testdata/job_model.bpmn\", \"--insecure create instance jobProcess\"},\n-\t\tcmd:        \"--insecure activate jobs jobType\",\n-\t\tgoldenFile: \"testdata/activate_job.golden\",\n+\t\tcmd:        \"--insecure activate jobs jobType --maxJobsToActivate 1\",\n+\t\tgoldenFile: \"testdata/single_activate_job.golden\",\n+\t},\n+\t{\n+\t\tname: \"double activate job\",\n+\t\t// we deploy on the end again to spent more time in setup phase to avoid a race condition, that we can activate more jobs then one", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwMjQ2OQ=="}, "originalCommit": {"oid": "d525cc42aa36687717181071d5372e40efa3fdf2"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjcxNTUzOnYy", "diffSide": "RIGHT", "path": "clients/go/cmd/zbctl/main_test.go", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODowNjo1OFrOIAaW7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwODozOTo0MlrOIAbhSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwMjc2NA==", "bodyText": "hehe, welcome to the world of go, where all variables are a single letter \ud83d\ude02", "url": "https://github.com/camunda-cloud/zeebe/pull/5972#discussion_r537302764", "createdAt": "2020-12-07T08:06:58Z", "author": {"login": "npepinpe"}, "path": "clients/go/cmd/zbctl/main_test.go", "diffHunk": "@@ -118,16 +130,16 @@ func TestZbctlWithInsecureGateway(t *testing.T) {\n \t\t})\n }\n \n-func (s *integrationTestSuite) TestCommonCommands() {\n+func (suite *integrationTestSuite) TestCommonCommands() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d525cc42aa36687717181071d5372e40efa3fdf2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMxODY3NQ==", "bodyText": "Oh is this convention?\ud83d\ude48\ud83d\ude05 I hope not \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/5972#discussion_r537318675", "createdAt": "2020-12-07T08:34:31Z", "author": {"login": "Zelldon"}, "path": "clients/go/cmd/zbctl/main_test.go", "diffHunk": "@@ -118,16 +130,16 @@ func TestZbctlWithInsecureGateway(t *testing.T) {\n \t\t})\n }\n \n-func (s *integrationTestSuite) TestCommonCommands() {\n+func (suite *integrationTestSuite) TestCommonCommands() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwMjc2NA=="}, "originalCommit": {"oid": "d525cc42aa36687717181071d5372e40efa3fdf2"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMyMTgwMQ==", "bodyText": "https://github.com/golang/go/wiki/CodeReviewComments#variable-names \ud83e\udd37\u200d\u2642\ufe0f I think I made it sound worse than it is, I kind of get the reasoning, but I guess it mostly works if you're disciplined and keep your functions pretty short.", "url": "https://github.com/camunda-cloud/zeebe/pull/5972#discussion_r537321801", "createdAt": "2020-12-07T08:39:42Z", "author": {"login": "npepinpe"}, "path": "clients/go/cmd/zbctl/main_test.go", "diffHunk": "@@ -118,16 +130,16 @@ func TestZbctlWithInsecureGateway(t *testing.T) {\n \t\t})\n }\n \n-func (s *integrationTestSuite) TestCommonCommands() {\n+func (suite *integrationTestSuite) TestCommonCommands() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwMjc2NA=="}, "originalCommit": {"oid": "d525cc42aa36687717181071d5372e40efa3fdf2"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 87, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}