{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1Mjg4Nzcx", "number": 5255, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMToyMjo0N1rOEdqm6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozMjoxM1rOEeSbTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTQyMjUwOnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/test/java/io/atomix/raft/RaftFailOverTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMToyMjo0N1rOHI9RYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMToyMjo0N1rOHI9RYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE1NDUzMQ==", "bodyText": "Should be assertAllNodesHaveSnapshotWithIndex", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r479154531", "createdAt": "2020-08-28T11:22:47Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/test/java/io/atomix/raft/RaftFailOverTest.java", "diffHunk": "@@ -347,7 +343,7 @@ public void shouldReplicateSnapshotToOldLeaderAfterRestart() throws Exception {\n     raftRule.joinCluster(leader);\n \n     // then\n-    assertThat(raftRule.allNodesHaveSnapshotWithIndex(200)).isTrue();\n+    raftRule.assertallNodesHaveSnapshotWithIndex(200);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f7ec170282b71f2528e586a6e32c49476500bb8"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTQ0Mjc3OnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/test/java/io/atomix/raft/snapshot/InMemorySnapshot.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMToyNTo1M1rOHI9euw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMToyNTo1M1rOHI9euw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE1Nzk0Nw==", "bodyText": "I assume this can be removed ? :D", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r479157947", "createdAt": "2020-08-28T11:25:53Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/test/java/io/atomix/raft/snapshot/InMemorySnapshot.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright \u00a9 2020 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.atomix.raft.snapshot;\n+\n+import io.atomix.utils.time.WallClockTimestamp;\n+import io.zeebe.snapshots.raft.PersistedSnapshot;\n+import io.zeebe.snapshots.raft.ReceivedSnapshot;\n+import io.zeebe.snapshots.raft.SnapshotChunk;\n+import io.zeebe.snapshots.raft.SnapshotChunkReader;\n+import io.zeebe.util.StringUtil;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Path;\n+import java.util.NavigableMap;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import org.agrona.concurrent.UnsafeBuffer;\n+import org.slf4j.LoggerFactory;\n+\n+public class InMemorySnapshot implements PersistedSnapshot, ReceivedSnapshot {\n+\n+  private final TestSnapshotStore testSnapshotStore;\n+  private final long index;\n+  private final long term;\n+  private final WallClockTimestamp timestamp;\n+  private final String id;\n+  private final NavigableMap<String, String> chunks = new TreeMap<>();\n+  private ByteBuffer nextExpected;\n+\n+  InMemorySnapshot(final TestSnapshotStore testSnapshotStore, final String snapshotId) {\n+    this.testSnapshotStore = testSnapshotStore;\n+    id = snapshotId;\n+    final var parts = snapshotId.split(\"-\");\n+    index = Long.parseLong(parts[0]);\n+    term = Long.parseLong(parts[1]);\n+    timestamp = WallClockTimestamp.from(Long.parseLong(parts[2]));\n+  }\n+\n+  InMemorySnapshot(\n+      final TestSnapshotStore testSnapshotStore,\n+      final long index,\n+      final long term,\n+      final WallClockTimestamp timestamp) {\n+    this.testSnapshotStore = testSnapshotStore;\n+    this.index = index;\n+    this.term = term;\n+    this.timestamp = timestamp;\n+    this.id = String.format(\"%d-%d-%d\", index, term, timestamp.unixTimestamp());\n+  }\n+\n+  public static InMemorySnapshot newPersistedSnapshot(\n+      final long index, final long term, final int size, final TestSnapshotStore snapshotStore) {\n+    final var snapshot = new InMemorySnapshot(snapshotStore, index, term, new WallClockTimestamp());\n+    for (int i = 0; i < size; i++) {\n+      snapshot.writeChunks(\"chunk-\" + i, \"test\".getBytes());\n+    }\n+    snapshot.persist();\n+    return snapshot;\n+  }\n+\n+  void writeChunks(final String id, final byte[] chunk) {\n+    chunks.put(id, StringUtil.fromBytes(chunk));\n+  }\n+\n+  @Override\n+  public WallClockTimestamp getTimestamp() {\n+    return timestamp;\n+  }\n+\n+  @Override\n+  public int version() {\n+    return 1;\n+  }\n+\n+  @Override\n+  public long getIndex() {\n+    return index;\n+  }\n+\n+  @Override\n+  public long getTerm() {\n+    return term;\n+  }\n+\n+  @Override\n+  public SnapshotChunkReader newChunkReader() {\n+    return new SnapshotChunkReader() {\n+      private NavigableMap<String, String> iterator = chunks;\n+\n+      @Override\n+      public void seek(final ByteBuffer id) {\n+        final var chunkId = byteBufferToString(id);\n+        iterator = chunks.tailMap(chunkId, true);\n+      }\n+\n+      @Override\n+      public ByteBuffer nextId() {\n+        if (!hasNext()) {\n+          return null;\n+        }\n+        return ByteBuffer.wrap(iterator.firstEntry().getKey().getBytes());\n+      }\n+\n+      @Override\n+      public void close() {\n+        iterator = null;\n+      }\n+\n+      @Override\n+      public boolean hasNext() {\n+        return !iterator.isEmpty();\n+      }\n+\n+      @Override\n+      public SnapshotChunk next() {\n+        final var nextEntry = iterator.firstEntry();\n+        LoggerFactory.getLogger(\"FINDME\").info(\"Returning next chunk Id = {}\", nextEntry.getKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f7ec170282b71f2528e586a6e32c49476500bb8"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTQ0NjY4OnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/test/java/io/atomix/raft/snapshot/InMemorySnapshot.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMToyNjozMlrOHI9hfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMToyNjozMlrOHI9hfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTE1ODY1NA==", "bodyText": "Maybe we have something like that already in io.zeebe.util.BufferUtil", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r479158654", "createdAt": "2020-08-28T11:26:32Z", "author": {"login": "Zelldon"}, "path": "atomix/cluster/src/test/java/io/atomix/raft/snapshot/InMemorySnapshot.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * Copyright \u00a9 2020 camunda services GmbH (info@camunda.com)\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.atomix.raft.snapshot;\n+\n+import io.atomix.utils.time.WallClockTimestamp;\n+import io.zeebe.snapshots.raft.PersistedSnapshot;\n+import io.zeebe.snapshots.raft.ReceivedSnapshot;\n+import io.zeebe.snapshots.raft.SnapshotChunk;\n+import io.zeebe.snapshots.raft.SnapshotChunkReader;\n+import io.zeebe.util.StringUtil;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Path;\n+import java.util.NavigableMap;\n+import java.util.Objects;\n+import java.util.TreeMap;\n+import org.agrona.concurrent.UnsafeBuffer;\n+import org.slf4j.LoggerFactory;\n+\n+public class InMemorySnapshot implements PersistedSnapshot, ReceivedSnapshot {\n+\n+  private final TestSnapshotStore testSnapshotStore;\n+  private final long index;\n+  private final long term;\n+  private final WallClockTimestamp timestamp;\n+  private final String id;\n+  private final NavigableMap<String, String> chunks = new TreeMap<>();\n+  private ByteBuffer nextExpected;\n+\n+  InMemorySnapshot(final TestSnapshotStore testSnapshotStore, final String snapshotId) {\n+    this.testSnapshotStore = testSnapshotStore;\n+    id = snapshotId;\n+    final var parts = snapshotId.split(\"-\");\n+    index = Long.parseLong(parts[0]);\n+    term = Long.parseLong(parts[1]);\n+    timestamp = WallClockTimestamp.from(Long.parseLong(parts[2]));\n+  }\n+\n+  InMemorySnapshot(\n+      final TestSnapshotStore testSnapshotStore,\n+      final long index,\n+      final long term,\n+      final WallClockTimestamp timestamp) {\n+    this.testSnapshotStore = testSnapshotStore;\n+    this.index = index;\n+    this.term = term;\n+    this.timestamp = timestamp;\n+    this.id = String.format(\"%d-%d-%d\", index, term, timestamp.unixTimestamp());\n+  }\n+\n+  public static InMemorySnapshot newPersistedSnapshot(\n+      final long index, final long term, final int size, final TestSnapshotStore snapshotStore) {\n+    final var snapshot = new InMemorySnapshot(snapshotStore, index, term, new WallClockTimestamp());\n+    for (int i = 0; i < size; i++) {\n+      snapshot.writeChunks(\"chunk-\" + i, \"test\".getBytes());\n+    }\n+    snapshot.persist();\n+    return snapshot;\n+  }\n+\n+  void writeChunks(final String id, final byte[] chunk) {\n+    chunks.put(id, StringUtil.fromBytes(chunk));\n+  }\n+\n+  @Override\n+  public WallClockTimestamp getTimestamp() {\n+    return timestamp;\n+  }\n+\n+  @Override\n+  public int version() {\n+    return 1;\n+  }\n+\n+  @Override\n+  public long getIndex() {\n+    return index;\n+  }\n+\n+  @Override\n+  public long getTerm() {\n+    return term;\n+  }\n+\n+  @Override\n+  public SnapshotChunkReader newChunkReader() {\n+    return new SnapshotChunkReader() {\n+      private NavigableMap<String, String> iterator = chunks;\n+\n+      @Override\n+      public void seek(final ByteBuffer id) {\n+        final var chunkId = byteBufferToString(id);\n+        iterator = chunks.tailMap(chunkId, true);\n+      }\n+\n+      @Override\n+      public ByteBuffer nextId() {\n+        if (!hasNext()) {\n+          return null;\n+        }\n+        return ByteBuffer.wrap(iterator.firstEntry().getKey().getBytes());\n+      }\n+\n+      @Override\n+      public void close() {\n+        iterator = null;\n+      }\n+\n+      @Override\n+      public boolean hasNext() {\n+        return !iterator.isEmpty();\n+      }\n+\n+      @Override\n+      public SnapshotChunk next() {\n+        final var nextEntry = iterator.firstEntry();\n+        LoggerFactory.getLogger(\"FINDME\").info(\"Returning next chunk Id = {}\", nextEntry.getKey());\n+        iterator = chunks.tailMap(nextEntry.getKey(), false);\n+        return new TestSnapshotChunkImpl(\n+            id, nextEntry.getKey(), StringUtil.getBytes(nextEntry.getValue()), chunks.size());\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public void delete() {}\n+\n+  @Override\n+  public Path getPath() {\n+    return null;\n+  }\n+\n+  @Override\n+  public long getCompactionBound() {\n+    return index;\n+  }\n+\n+  @Override\n+  public String getId() {\n+    return id;\n+  }\n+\n+  private String byteBufferToString(final ByteBuffer buf) {\n+    final var view = new UnsafeBuffer(buf);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f7ec170282b71f2528e586a6e32c49476500bb8"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTg1NDU0OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjoyNToxMVrOHJBv_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNzozNjoyM1rOHJt3PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIyNzkwMA==", "bodyText": "Why is this called active? I assume because you can actively create a snapshot ? :D", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r479227900", "createdAt": "2020-08-28T12:25:11Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -89,7 +89,7 @@\n   private LogStream logStream;\n   private Role raftRole;\n   private SnapshotReplication stateReplication;\n-  private PersistedSnapshotStore persistedSnapshotStore;\n+  private final ActivePersistedSnapshotStore persistedSnapshotStore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e18ceedb01ec29e99d2ca819e1e17565a891c59"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1MDY1Mw==", "bodyText": "We agreed on ConstructableSnapshotStore, if someone has a better name feel free to propose.", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r479950653", "createdAt": "2020-08-31T07:36:23Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -89,7 +89,7 @@\n   private LogStream logStream;\n   private Role raftRole;\n   private SnapshotReplication stateReplication;\n-  private PersistedSnapshotStore persistedSnapshotStore;\n+  private final ActivePersistedSnapshotStore persistedSnapshotStore;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIyNzkwMA=="}, "originalCommit": {"oid": "5e18ceedb01ec29e99d2ca819e1e17565a891c59"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTg3MzEwOnYy", "diffSide": "RIGHT", "path": "broker/src/test/java/io/zeebe/broker/system/partitions/AsyncSnapshotingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjoyNzo0OFrOHJB8UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjoyNzo0OFrOHJB8UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzMTA1Ng==", "bodyText": "Why we not using the interface?", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r479231056", "createdAt": "2020-08-28T12:27:48Z", "author": {"login": "Zelldon"}, "path": "broker/src/test/java/io/zeebe/broker/system/partitions/AsyncSnapshotingTest.java", "diffHunk": "@@ -63,13 +63,14 @@\n   private AsyncSnapshotDirector asyncSnapshotDirector;\n   private StreamProcessor mockStreamProcessor;\n   private List<ActorCondition> conditionList;\n-  private PersistedSnapshotStore persistedSnapshotStore;\n+  private FileBasedSnapshotStore persistedSnapshotStore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e18ceedb01ec29e99d2ca819e1e17565a891c59"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTg4MTExOnYy", "diffSide": "RIGHT", "path": "logstreams/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjoyODo1N1rOHJCBjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjoyODo1N1rOHJCBjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzMjM5OQ==", "bodyText": "I assume this is not intended", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r479232399", "createdAt": "2020-08-28T12:28:57Z", "author": {"login": "Zelldon"}, "path": "logstreams/pom.xml", "diffHunk": "@@ -86,6 +91,11 @@\n       <groupId>io.zeebe</groupId>\n       <artifactId>atomix-cluster</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>io.zeebe</groupId>\n+      <artifactId>atomix-utils</artifactId>\n+      <version>0.25.0-SNAPSHOT</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e18ceedb01ec29e99d2ca819e1e17565a891c59"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTg4MzA0OnYy", "diffSide": "RIGHT", "path": "logstreams/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjoyOToxMlrOHJCCwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODoyNjo1NlrOHJvaFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzMjcwNQ==", "bodyText": "Do we still need to snapshot classes here?", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r479232705", "createdAt": "2020-08-28T12:29:12Z", "author": {"login": "Zelldon"}, "path": "logstreams/pom.xml", "diffHunk": "@@ -73,6 +73,11 @@\n       <artifactId>atomix-storage</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>io.zeebe</groupId>\n+      <artifactId>zeebe-snapshots</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e18ceedb01ec29e99d2ca819e1e17565a891c59"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk3NTk1Nw==", "bodyText": "Only used by log deletetion test, can be moved to broker.", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r479975957", "createdAt": "2020-08-31T08:26:56Z", "author": {"login": "deepthidevaki"}, "path": "logstreams/pom.xml", "diffHunk": "@@ -73,6 +73,11 @@\n       <artifactId>atomix-storage</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>io.zeebe</groupId>\n+      <artifactId>zeebe-snapshots</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzMjcwNQ=="}, "originalCommit": {"oid": "5e18ceedb01ec29e99d2ca819e1e17565a891c59"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTg4NzgzOnYy", "diffSide": "RIGHT", "path": "logstreams/src/test/java/io/zeebe/logstreams/util/AtomixLogStorageRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjoyOTo1NFrOHJCF-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjoyOTo1NFrOHJCF-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzMzUyOQ==", "bodyText": "Why we are not using the interface?", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r479233529", "createdAt": "2020-08-28T12:29:54Z", "author": {"login": "Zelldon"}, "path": "logstreams/src/test/java/io/zeebe/logstreams/util/AtomixLogStorageRule.java", "diffHunk": "@@ -51,13 +51,13 @@\n   private ZeebeIndexAdapter indexMapping;\n   private RaftStorage raftStorage;\n   private RaftLog raftLog;\n-  private PersistedSnapshotStore persistedSnapshotStore;\n+  private NoopSnapshotStore persistedSnapshotStore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e18ceedb01ec29e99d2ca819e1e17565a891c59"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTkxNzk1OnYy", "diffSide": "RIGHT", "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/ActivePersistedSnapshotStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjozNDoxMFrOHJCaEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjozNDoxMFrOHJCaEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzODY3NQ==", "bodyText": "Active sounds a bit odd to me. Maybe WritableSnapshotStore or PersistableSnapshotStore", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r479238675", "createdAt": "2020-08-28T12:34:10Z", "author": {"login": "Zelldon"}, "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/ActivePersistedSnapshotStore.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.snapshots.broker;\n+\n+import io.zeebe.snapshots.raft.PersistedSnapshotStore;\n+import io.zeebe.snapshots.raft.TransientSnapshot;\n+import java.util.Optional;\n+\n+/** A persisted snapshot store than can create a new snapshot and persists it. */\n+public interface ActivePersistedSnapshotStore extends PersistedSnapshotStore {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e18ceedb01ec29e99d2ca819e1e17565a891c59"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTkyNDgyOnYy", "diffSide": "RIGHT", "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/impl/FileBasedReceivedSnapshot.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjozNTowNlrOHJCejA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjozNTowNlrOHJCejA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzOTgyMA==", "bodyText": "Maybe we implemented here a fallback to accept also old snapshot id's?", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r479239820", "createdAt": "2020-08-28T12:35:06Z", "author": {"login": "Zelldon"}, "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/impl/FileBasedReceivedSnapshot.java", "diffHunk": "@@ -171,8 +163,11 @@ private boolean isTotalCountInvalid(final int currentTotalCount) {\n   }\n \n   private boolean isSnapshotIdInvalid(final String snapshotId) {\n-    final var expectedSnapshotId = metadata.getSnapshotIdAsString();\n-    return !expectedSnapshotId.equals(snapshotId);\n+    final var receivedSnapshotId = FileBasedSnapshotMetadata.ofFileName(snapshotId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e18ceedb01ec29e99d2ca819e1e17565a891c59"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTkzNDE5OnYy", "diffSide": "RIGHT", "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/impl/FileBasedSnapshotMetadata.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjozNjozMFrOHJCk7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjozNjozMFrOHJCk7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0MTQ1Mg==", "bodyText": "Ah cool so we can already receive old snapshots.", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r479241452", "createdAt": "2020-08-28T12:36:30Z", "author": {"login": "Zelldon"}, "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/impl/FileBasedSnapshotMetadata.java", "diffHunk": "@@ -42,15 +53,34 @@\n         final var index = Long.parseLong(parts[0]);\n         final var term = Long.parseLong(parts[1]);\n         final var timestamp = Long.parseLong(parts[2]);\n+        final var processedPosition = Long.parseLong(parts[3]);\n+        final var exporterPosition = Long.parseLong(parts[4]);\n \n         metadata =\n             Optional.of(\n-                new FileBasedSnapshotMetadata(index, term, WallClockTimestamp.from(timestamp)));\n+                new FileBasedSnapshotMetadata(\n+                    index,\n+                    term,\n+                    WallClockTimestamp.from(timestamp),\n+                    processedPosition,\n+                    exporterPosition));\n       } catch (final NumberFormatException e) {\n         LOGGER.warn(\"Failed to parse part of snapshot metadata\", e);\n       }\n-    }\n+    } else if (parts.length >= METADATA_PARTS_OLD_VERSION) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e18ceedb01ec29e99d2ca819e1e17565a891c59"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTk0ODA2OnYy", "diffSide": "RIGHT", "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/impl/FileBasedSnapshotStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjozODozMFrOHJCubw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjozODozMFrOHJCubw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0Mzg4Nw==", "bodyText": "Is the timestamp also used? Can this ever happen then ? \ud83d\ude05", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r479243887", "createdAt": "2020-08-28T12:38:30Z", "author": {"login": "Zelldon"}, "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/impl/FileBasedSnapshotStore.java", "diffHunk": "@@ -180,6 +164,28 @@ public void delete() {\n     }\n   }\n \n+  @Override\n+  public Optional<TransientSnapshot> newTransientSnapshot(\n+      final long index,\n+      final long term,\n+      final long processedPosition,\n+      final long exportedPosition) {\n+\n+    final WallClockTimestamp timestamp = WallClockTimestamp.from(System.currentTimeMillis());\n+    final var newSnapshotId =\n+        new FileBasedSnapshotMetadata(index, term, timestamp, processedPosition, exportedPosition);\n+    final FileBasedSnapshot currentSnapshot = currentPersistedSnapshotRef.get();\n+    if (currentSnapshot != null && currentSnapshot.getMetadata().compareTo(newSnapshotId) == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e18ceedb01ec29e99d2ca819e1e17565a891c59"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTk2ODkzOnYy", "diffSide": "RIGHT", "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/impl/FileBasedSnapshotStoreFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjo0MToyN1rOHJC8Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjo0MzozN1rOHJDEXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0NzQyMg==", "bodyText": "Please always try to return the interfaces", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r479247422", "createdAt": "2020-08-28T12:41:27Z", "author": {"login": "Zelldon"}, "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/impl/FileBasedSnapshotStoreFactory.java", "diffHunk": "@@ -43,7 +38,14 @@ public PersistedSnapshotStore createSnapshotStore(final Path root, final String\n     IoUtil.ensureDirectoryExists(snapshotDirectory.toFile(), \"Snapshot directory\");\n     IoUtil.ensureDirectoryExists(pendingDirectory.toFile(), \"Pending snapshot directory\");\n \n-    return new FileBasedSnapshotStore(\n-        new SnapshotMetrics(partitionName), snapshotDirectory, pendingDirectory);\n+    return partitionSnapshotStores.computeIfAbsent(\n+        partitionName,\n+        p ->\n+            new FileBasedSnapshotStore(\n+                new SnapshotMetrics(partitionName), snapshotDirectory, pendingDirectory));\n+  }\n+\n+  public FileBasedSnapshotStore getSnapshotStore(final String partitionName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e18ceedb01ec29e99d2ca819e1e17565a891c59"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0ODY5NQ==", "bodyText": "Why was this necessary? To get the same store in the ZeebePartition as in the journal?", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r479248695", "createdAt": "2020-08-28T12:42:39Z", "author": {"login": "Zelldon"}, "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/impl/FileBasedSnapshotStoreFactory.java", "diffHunk": "@@ -43,7 +38,14 @@ public PersistedSnapshotStore createSnapshotStore(final Path root, final String\n     IoUtil.ensureDirectoryExists(snapshotDirectory.toFile(), \"Snapshot directory\");\n     IoUtil.ensureDirectoryExists(pendingDirectory.toFile(), \"Pending snapshot directory\");\n \n-    return new FileBasedSnapshotStore(\n-        new SnapshotMetrics(partitionName), snapshotDirectory, pendingDirectory);\n+    return partitionSnapshotStores.computeIfAbsent(\n+        partitionName,\n+        p ->\n+            new FileBasedSnapshotStore(\n+                new SnapshotMetrics(partitionName), snapshotDirectory, pendingDirectory));\n+  }\n+\n+  public FileBasedSnapshotStore getSnapshotStore(final String partitionName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0NzQyMg=="}, "originalCommit": {"oid": "5e18ceedb01ec29e99d2ca819e1e17565a891c59"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0OTUwMg==", "bodyText": "Is is problematic if we never really recreate the store when we had a leader change?", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r479249502", "createdAt": "2020-08-28T12:43:37Z", "author": {"login": "Zelldon"}, "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/impl/FileBasedSnapshotStoreFactory.java", "diffHunk": "@@ -43,7 +38,14 @@ public PersistedSnapshotStore createSnapshotStore(final Path root, final String\n     IoUtil.ensureDirectoryExists(snapshotDirectory.toFile(), \"Snapshot directory\");\n     IoUtil.ensureDirectoryExists(pendingDirectory.toFile(), \"Pending snapshot directory\");\n \n-    return new FileBasedSnapshotStore(\n-        new SnapshotMetrics(partitionName), snapshotDirectory, pendingDirectory);\n+    return partitionSnapshotStores.computeIfAbsent(\n+        partitionName,\n+        p ->\n+            new FileBasedSnapshotStore(\n+                new SnapshotMetrics(partitionName), snapshotDirectory, pendingDirectory));\n+  }\n+\n+  public FileBasedSnapshotStore getSnapshotStore(final String partitionName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI0NzQyMg=="}, "originalCommit": {"oid": "5e18ceedb01ec29e99d2ca819e1e17565a891c59"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjAwMDM3OnYy", "diffSide": "RIGHT", "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/impl/FileBasedSnapshotStoreFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjo0NzowN1rOHJDQEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODoyMjoyN1rOHJvQ8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI1MjQ5OA==", "bodyText": "I thought we want to have two factory methods in this factory one to create a store which can receive chunks and one which can be used to take snapshots?", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r479252498", "createdAt": "2020-08-28T12:47:07Z", "author": {"login": "Zelldon"}, "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/impl/FileBasedSnapshotStoreFactory.java", "diffHunk": "@@ -43,7 +38,14 @@ public PersistedSnapshotStore createSnapshotStore(final Path root, final String\n     IoUtil.ensureDirectoryExists(snapshotDirectory.toFile(), \"Snapshot directory\");\n     IoUtil.ensureDirectoryExists(pendingDirectory.toFile(), \"Pending snapshot directory\");\n \n-    return new FileBasedSnapshotStore(\n-        new SnapshotMetrics(partitionName), snapshotDirectory, pendingDirectory);\n+    return partitionSnapshotStores.computeIfAbsent(\n+        partitionName,\n+        p ->\n+            new FileBasedSnapshotStore(\n+                new SnapshotMetrics(partitionName), snapshotDirectory, pendingDirectory));\n+  }\n+\n+  public FileBasedSnapshotStore getSnapshotStore(final String partitionName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e18ceedb01ec29e99d2ca819e1e17565a891c59"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk3MzYxNg==", "bodyText": "We will create two factory Interfaces  - ConstructableStoreFactory and ReceivableStoreFactory", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r479973616", "createdAt": "2020-08-31T08:22:27Z", "author": {"login": "deepthidevaki"}, "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/impl/FileBasedSnapshotStoreFactory.java", "diffHunk": "@@ -43,7 +38,14 @@ public PersistedSnapshotStore createSnapshotStore(final Path root, final String\n     IoUtil.ensureDirectoryExists(snapshotDirectory.toFile(), \"Snapshot directory\");\n     IoUtil.ensureDirectoryExists(pendingDirectory.toFile(), \"Pending snapshot directory\");\n \n-    return new FileBasedSnapshotStore(\n-        new SnapshotMetrics(partitionName), snapshotDirectory, pendingDirectory);\n+    return partitionSnapshotStores.computeIfAbsent(\n+        partitionName,\n+        p ->\n+            new FileBasedSnapshotStore(\n+                new SnapshotMetrics(partitionName), snapshotDirectory, pendingDirectory));\n+  }\n+\n+  public FileBasedSnapshotStore getSnapshotStore(final String partitionName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI1MjQ5OA=="}, "originalCommit": {"oid": "5e18ceedb01ec29e99d2ca819e1e17565a891c59"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjAwNDc2OnYy", "diffSide": "RIGHT", "path": "snapshot/src/test/java/io/zeebe/snapshots/broker/impl/FileBasedReceivedSnapshotTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjo0ODowMFrOHJDS_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjo0ODowMFrOHJDS_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI1MzI0NQ==", "bodyText": "We we need to cast this everywhere ?", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r479253245", "createdAt": "2020-08-28T12:48:00Z", "author": {"login": "Zelldon"}, "path": "snapshot/src/test/java/io/zeebe/snapshots/broker/impl/FileBasedReceivedSnapshotTest.java", "diffHunk": "@@ -50,22 +37,26 @@\n public class FileBasedReceivedSnapshotTest {\n \n   @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();\n-  private PersistedSnapshotStore senderSnapshotStore;\n-  private PersistedSnapshotStore receiverSnapshotStore;\n+  private FileBasedSnapshotStore senderSnapshotStore;\n+  private FileBasedSnapshotStore receiverSnapshotStore;\n   private Path receiverSnapshotsDir;\n   private Path receiverPendingSnapshotsDir;\n-  private FileBasedSnapshotStoreFactory factory;\n \n   @Before\n   public void before() throws Exception {\n-    factory = new FileBasedSnapshotStoreFactory();\n     final String partitionName = \"1\";\n     final File senderRoot = temporaryFolder.newFolder(\"sender\");\n \n-    senderSnapshotStore = factory.createSnapshotStore(senderRoot.toPath(), partitionName);\n+    senderSnapshotStore =\n+        (FileBasedSnapshotStore)\n+            new FileBasedSnapshotStoreFactory()\n+                .createSnapshotStore(senderRoot.toPath(), partitionName);\n \n     final var receiverRoot = temporaryFolder.newFolder(\"received\");\n-    receiverSnapshotStore = factory.createSnapshotStore(receiverRoot.toPath(), partitionName);\n+    receiverSnapshotStore =\n+        (FileBasedSnapshotStore)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e18ceedb01ec29e99d2ca819e1e17565a891c59"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NjAwOTQxOnYy", "diffSide": "RIGHT", "path": "snapshot/src/test/java/io/zeebe/snapshots/broker/impl/FileBasedTransientSnapshotTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjo0OTowMFrOHJDWMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjo0OTowMFrOHJDWMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI1NDA2NA==", "bodyText": "i would expect that we still can use the interfaces otherwise we did something wrong in our api", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r479254064", "createdAt": "2020-08-28T12:49:00Z", "author": {"login": "Zelldon"}, "path": "snapshot/src/test/java/io/zeebe/snapshots/broker/impl/FileBasedTransientSnapshotTest.java", "diffHunk": "@@ -40,7 +30,7 @@\n public class FileBasedTransientSnapshotTest {\n \n   @Rule public TemporaryFolder temporaryFolder = new TemporaryFolder();\n-  private PersistedSnapshotStore persistedSnapshotStore;\n+  private FileBasedSnapshotStore persistedSnapshotStore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e18ceedb01ec29e99d2ca819e1e17565a891c59"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTkzMDQzOnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjoyNzozNlrOHJ2u4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozNTowN1rOHJ299A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5NTk3MA==", "bodyText": "could we rename it to supplier? Or just use the supplier once to get the store?", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r480095970", "createdAt": "2020-08-31T12:27:36Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -113,13 +113,13 @@ public ZeebePartition(\n       final BrokerCfg brokerCfg,\n       final CommandApiService commandApiService,\n       final ZeebeIndexMapping zeebeIndexMapping,\n-      final ActivePersistedSnapshotStore persistedSnapshotStore,\n+      final SnapshotStoreSupplier snapshotStoreFactory,\n       final TypedRecordProcessorsFactory typedRecordProcessorsFactory) {\n     this.localBroker = localBroker;\n     this.atomixRaftPartition = atomixRaftPartition;\n     this.messagingService = messagingService;\n     this.brokerCfg = brokerCfg;\n-    this.persistedSnapshotStore = persistedSnapshotStore;\n+    this.snapshotStoreFactory = snapshotStoreFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfad20ed0e36d403c5771f3209f1b52ef5e06713"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5OTgyOA==", "bodyText": "Ah this is already outdated nevermind", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r480099828", "createdAt": "2020-08-31T12:35:07Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -113,13 +113,13 @@ public ZeebePartition(\n       final BrokerCfg brokerCfg,\n       final CommandApiService commandApiService,\n       final ZeebeIndexMapping zeebeIndexMapping,\n-      final ActivePersistedSnapshotStore persistedSnapshotStore,\n+      final SnapshotStoreSupplier snapshotStoreFactory,\n       final TypedRecordProcessorsFactory typedRecordProcessorsFactory) {\n     this.localBroker = localBroker;\n     this.atomixRaftPartition = atomixRaftPartition;\n     this.messagingService = messagingService;\n     this.brokerCfg = brokerCfg;\n-    this.persistedSnapshotStore = persistedSnapshotStore;\n+    this.snapshotStoreFactory = snapshotStoreFactory;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5NTk3MA=="}, "originalCommit": {"oid": "cfad20ed0e36d403c5771f3209f1b52ef5e06713"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTk0NDc5OnYy", "diffSide": "RIGHT", "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/ConstructableSnapshotStore.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozMTo0NVrOHJ23Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMzoxNTo0MVrOHJ4UUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5ODE0Mg==", "bodyText": "Would be cool if we can adjust the docs then", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r480098142", "createdAt": "2020-08-31T12:31:45Z", "author": {"login": "Zelldon"}, "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/ConstructableSnapshotStore.java", "diffHunk": "@@ -12,7 +12,7 @@\n import java.util.Optional;\n \n /** A persisted snapshot store than can create a new snapshot and persists it. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfad20ed0e36d403c5771f3209f1b52ef5e06713"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDExODMzMA==", "bodyText": "Isn't the doc already up-to-date?", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r480118330", "createdAt": "2020-08-31T13:09:24Z", "author": {"login": "deepthidevaki"}, "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/ConstructableSnapshotStore.java", "diffHunk": "@@ -12,7 +12,7 @@\n import java.util.Optional;\n \n /** A persisted snapshot store than can create a new snapshot and persists it. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5ODE0Mg=="}, "originalCommit": {"oid": "cfad20ed0e36d403c5771f3209f1b52ef5e06713"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEyMTAwMg==", "bodyText": "Hm ok maybe you're right. I thought maybe using this word 'constructing' in the doc would fit here as well. But feel free to reject this comment", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r480121002", "createdAt": "2020-08-31T13:14:06Z", "author": {"login": "Zelldon"}, "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/ConstructableSnapshotStore.java", "diffHunk": "@@ -12,7 +12,7 @@\n import java.util.Optional;\n \n /** A persisted snapshot store than can create a new snapshot and persists it. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5ODE0Mg=="}, "originalCommit": {"oid": "cfad20ed0e36d403c5771f3209f1b52ef5e06713"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEyMTkzOQ==", "bodyText": "Ah.. ok. Let me see if I can improve it. Thanks.", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r480121939", "createdAt": "2020-08-31T13:15:41Z", "author": {"login": "deepthidevaki"}, "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/ConstructableSnapshotStore.java", "diffHunk": "@@ -12,7 +12,7 @@\n import java.util.Optional;\n \n /** A persisted snapshot store than can create a new snapshot and persists it. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5ODE0Mg=="}, "originalCommit": {"oid": "cfad20ed0e36d403c5771f3209f1b52ef5e06713"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTk0NjM4OnYy", "diffSide": "RIGHT", "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/SnapshotStoreSupplier.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjozMjoxM1rOHJ24Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoyNDoyOFrOHJ7AGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5ODM4Nw==", "bodyText": "Do we need that?", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r480098387", "createdAt": "2020-08-31T12:32:13Z", "author": {"login": "Zelldon"}, "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/SnapshotStoreSupplier.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.snapshots.broker;\n+\n+import io.zeebe.snapshots.raft.PersistedSnapshotStore;\n+import io.zeebe.snapshots.raft.ReceivableSnapshotStore;\n+\n+public interface SnapshotStoreSupplier {\n+\n+  /**\n+   * Returns a partition's {@link ConstructableSnapshotStore}\n+   *\n+   * @param partitionName\n+   * @return a ConstructableSnapshotStore\n+   */\n+  ConstructableSnapshotStore getConstructableSnapshotStore(String partitionName);\n+\n+  /**\n+   * Returns a partition's {@link ReceivableSnapshotStore}\n+   *\n+   * @param partitionName\n+   * @return a ReceivableSnapshotStore\n+   */\n+  ReceivableSnapshotStore getReceivableSnapshotStore(final String partitionName);\n+\n+  /**\n+   * Returns a partition's {@link PersistedSnapshotStore}\n+   *\n+   * @param partitionName\n+   * @return a ConstructableSnapshotStore\n+   */\n+  PersistedSnapshotStore getPersistedSnapshotStore(String partitionName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfad20ed0e36d403c5771f3209f1b52ef5e06713"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDExNzQ2OA==", "bodyText": "LogDeletionService expects only PersistedSnapshotStore. It doesn't care if it is Receivable or Constructable.", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r480117468", "createdAt": "2020-08-31T13:07:52Z", "author": {"login": "deepthidevaki"}, "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/SnapshotStoreSupplier.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.snapshots.broker;\n+\n+import io.zeebe.snapshots.raft.PersistedSnapshotStore;\n+import io.zeebe.snapshots.raft.ReceivableSnapshotStore;\n+\n+public interface SnapshotStoreSupplier {\n+\n+  /**\n+   * Returns a partition's {@link ConstructableSnapshotStore}\n+   *\n+   * @param partitionName\n+   * @return a ConstructableSnapshotStore\n+   */\n+  ConstructableSnapshotStore getConstructableSnapshotStore(String partitionName);\n+\n+  /**\n+   * Returns a partition's {@link ReceivableSnapshotStore}\n+   *\n+   * @param partitionName\n+   * @return a ReceivableSnapshotStore\n+   */\n+  ReceivableSnapshotStore getReceivableSnapshotStore(final String partitionName);\n+\n+  /**\n+   * Returns a partition's {@link PersistedSnapshotStore}\n+   *\n+   * @param partitionName\n+   * @return a ConstructableSnapshotStore\n+   */\n+  PersistedSnapshotStore getPersistedSnapshotStore(String partitionName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5ODM4Nw=="}, "originalCommit": {"oid": "cfad20ed0e36d403c5771f3209f1b52ef5e06713"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDExODIwNg==", "bodyText": "But the other interfaces extend this one right? So you can just give one of them? Not sure whether it makes sense to have this getter", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r480118206", "createdAt": "2020-08-31T13:09:11Z", "author": {"login": "Zelldon"}, "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/SnapshotStoreSupplier.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.snapshots.broker;\n+\n+import io.zeebe.snapshots.raft.PersistedSnapshotStore;\n+import io.zeebe.snapshots.raft.ReceivableSnapshotStore;\n+\n+public interface SnapshotStoreSupplier {\n+\n+  /**\n+   * Returns a partition's {@link ConstructableSnapshotStore}\n+   *\n+   * @param partitionName\n+   * @return a ConstructableSnapshotStore\n+   */\n+  ConstructableSnapshotStore getConstructableSnapshotStore(String partitionName);\n+\n+  /**\n+   * Returns a partition's {@link ReceivableSnapshotStore}\n+   *\n+   * @param partitionName\n+   * @return a ReceivableSnapshotStore\n+   */\n+  ReceivableSnapshotStore getReceivableSnapshotStore(final String partitionName);\n+\n+  /**\n+   * Returns a partition's {@link PersistedSnapshotStore}\n+   *\n+   * @param partitionName\n+   * @return a ConstructableSnapshotStore\n+   */\n+  PersistedSnapshotStore getPersistedSnapshotStore(String partitionName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5ODM4Nw=="}, "originalCommit": {"oid": "cfad20ed0e36d403c5771f3209f1b52ef5e06713"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEyMDkwMg==", "bodyText": "Then the question is which one to use. Both would pass the compiler. But conceptually, on the leader it does not make sense  to use RecievableStore and on the follower to use ConstructableStore.", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r480120902", "createdAt": "2020-08-31T13:13:55Z", "author": {"login": "deepthidevaki"}, "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/SnapshotStoreSupplier.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.snapshots.broker;\n+\n+import io.zeebe.snapshots.raft.PersistedSnapshotStore;\n+import io.zeebe.snapshots.raft.ReceivableSnapshotStore;\n+\n+public interface SnapshotStoreSupplier {\n+\n+  /**\n+   * Returns a partition's {@link ConstructableSnapshotStore}\n+   *\n+   * @param partitionName\n+   * @return a ConstructableSnapshotStore\n+   */\n+  ConstructableSnapshotStore getConstructableSnapshotStore(String partitionName);\n+\n+  /**\n+   * Returns a partition's {@link ReceivableSnapshotStore}\n+   *\n+   * @param partitionName\n+   * @return a ReceivableSnapshotStore\n+   */\n+  ReceivableSnapshotStore getReceivableSnapshotStore(final String partitionName);\n+\n+  /**\n+   * Returns a partition's {@link PersistedSnapshotStore}\n+   *\n+   * @param partitionName\n+   * @return a ConstructableSnapshotStore\n+   */\n+  PersistedSnapshotStore getPersistedSnapshotStore(String partitionName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5ODM4Nw=="}, "originalCommit": {"oid": "cfad20ed0e36d403c5771f3209f1b52ef5e06713"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEzNjg3Mg==", "bodyText": "sounds not ideal but ok should be fine for now", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r480136872", "createdAt": "2020-08-31T13:38:27Z", "author": {"login": "Zelldon"}, "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/SnapshotStoreSupplier.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.snapshots.broker;\n+\n+import io.zeebe.snapshots.raft.PersistedSnapshotStore;\n+import io.zeebe.snapshots.raft.ReceivableSnapshotStore;\n+\n+public interface SnapshotStoreSupplier {\n+\n+  /**\n+   * Returns a partition's {@link ConstructableSnapshotStore}\n+   *\n+   * @param partitionName\n+   * @return a ConstructableSnapshotStore\n+   */\n+  ConstructableSnapshotStore getConstructableSnapshotStore(String partitionName);\n+\n+  /**\n+   * Returns a partition's {@link ReceivableSnapshotStore}\n+   *\n+   * @param partitionName\n+   * @return a ReceivableSnapshotStore\n+   */\n+  ReceivableSnapshotStore getReceivableSnapshotStore(final String partitionName);\n+\n+  /**\n+   * Returns a partition's {@link PersistedSnapshotStore}\n+   *\n+   * @param partitionName\n+   * @return a ConstructableSnapshotStore\n+   */\n+  PersistedSnapshotStore getPersistedSnapshotStore(String partitionName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5ODM4Nw=="}, "originalCommit": {"oid": "cfad20ed0e36d403c5771f3209f1b52ef5e06713"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2NTkxMg==", "bodyText": "Thanks. I don't like it either. But could not find a better way. :)  Any other comments?", "url": "https://github.com/camunda-cloud/zeebe/pull/5255#discussion_r480165912", "createdAt": "2020-08-31T14:24:28Z", "author": {"login": "deepthidevaki"}, "path": "snapshot/src/main/java/io/zeebe/snapshots/broker/SnapshotStoreSupplier.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.snapshots.broker;\n+\n+import io.zeebe.snapshots.raft.PersistedSnapshotStore;\n+import io.zeebe.snapshots.raft.ReceivableSnapshotStore;\n+\n+public interface SnapshotStoreSupplier {\n+\n+  /**\n+   * Returns a partition's {@link ConstructableSnapshotStore}\n+   *\n+   * @param partitionName\n+   * @return a ConstructableSnapshotStore\n+   */\n+  ConstructableSnapshotStore getConstructableSnapshotStore(String partitionName);\n+\n+  /**\n+   * Returns a partition's {@link ReceivableSnapshotStore}\n+   *\n+   * @param partitionName\n+   * @return a ReceivableSnapshotStore\n+   */\n+  ReceivableSnapshotStore getReceivableSnapshotStore(final String partitionName);\n+\n+  /**\n+   * Returns a partition's {@link PersistedSnapshotStore}\n+   *\n+   * @param partitionName\n+   * @return a ConstructableSnapshotStore\n+   */\n+  PersistedSnapshotStore getPersistedSnapshotStore(String partitionName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA5ODM4Nw=="}, "originalCommit": {"oid": "cfad20ed0e36d403c5771f3209f1b52ef5e06713"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 326, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}