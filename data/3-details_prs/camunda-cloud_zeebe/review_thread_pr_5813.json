{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5Mjk5MjA1", "number": 5813, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNzo1NTowMVrOE5Tczg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzo0MjowNlrOE7a1Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTIyOTU4OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNzo1NTowMVrOHzraDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDowNDoxNFrOHzyMXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1MDYwNw==", "bodyText": "If the node leaves the partition, quorum will also change from 3 to 2. We don't want to do that.", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r523950607", "createdAt": "2020-11-16T07:55:01Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -272,11 +272,17 @@ public void onRecovered() {\n         });\n   }\n \n-  private void onInstallFailure() {\n+  private void onInstallFailure(final long term) {\n     zeebePartitionHealth.setServicesInstalled(false);\n+    context\n+        .getPartitionListeners()\n+        .forEach(l -> l.onBecomingInactive(context.getPartitionId(), term));\n+\n     if (context.getRaftPartition().getRole() == Role.LEADER) {\n       LOG.info(\"Unexpected failures occurred when installing leader services, stepping down\");\n       context.getRaftPartition().stepDown();\n+    } else {\n+      context.getRaftPartition().leave();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bfd3beffd8b73081828614b5b6388864eb4419c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk2NjkwNQ==", "bodyText": "We should either \"stop\" the raft server or transition to \"Role.INACTIVE\". Transitioning to Inactive will be safer, because several other modules might expect a running raft server.", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r523966905", "createdAt": "2020-11-16T08:28:10Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -272,11 +272,17 @@ public void onRecovered() {\n         });\n   }\n \n-  private void onInstallFailure() {\n+  private void onInstallFailure(final long term) {\n     zeebePartitionHealth.setServicesInstalled(false);\n+    context\n+        .getPartitionListeners()\n+        .forEach(l -> l.onBecomingInactive(context.getPartitionId(), term));\n+\n     if (context.getRaftPartition().getRole() == Role.LEADER) {\n       LOG.info(\"Unexpected failures occurred when installing leader services, stepping down\");\n       context.getRaftPartition().stepDown();\n+    } else {\n+      context.getRaftPartition().leave();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1MDYwNw=="}, "originalCommit": {"oid": "7bfd3beffd8b73081828614b5b6388864eb4419c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAyMTY3OA==", "bodyText": "That's what leave() does:\nhttps://github.com/zeebe-io/zeebe/blob/ba3400c7ee0a6f910a3b1cfef75fb668f7cecca0/atomix/cluster/src/main/java/io/atomix/raft/cluster/impl/RaftClusterContext.java#L262\nleave() transitions to INACTIVE. The reaction to the role transition is to leave the cluster. Which makes sense since it's not going to take part in consensus. We can shutdown the broker so it can be restarted as soon as possible, but that will impact other partitions", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r524021678", "createdAt": "2020-11-16T09:28:47Z", "author": {"login": "MiguelPires"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -272,11 +272,17 @@ public void onRecovered() {\n         });\n   }\n \n-  private void onInstallFailure() {\n+  private void onInstallFailure(final long term) {\n     zeebePartitionHealth.setServicesInstalled(false);\n+    context\n+        .getPartitionListeners()\n+        .forEach(l -> l.onBecomingInactive(context.getPartitionId(), term));\n+\n     if (context.getRaftPartition().getRole() == Role.LEADER) {\n       LOG.info(\"Unexpected failures occurred when installing leader services, stepping down\");\n       context.getRaftPartition().stepDown();\n+    } else {\n+      context.getRaftPartition().leave();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1MDYwNw=="}, "originalCommit": {"oid": "7bfd3beffd8b73081828614b5b6388864eb4419c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA2MTc4OQ==", "bodyText": "leave() also leaves the replication group which means that the other nodes would stop communicating with this - we don't want to do that because this node is still part of the replication group, but it is only in a error state.. What we really need is only transition to Inactive which means it is still part of the replication group, but doesn't actively do anything. It acts as if it is unreachable.", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r524061789", "createdAt": "2020-11-16T10:04:14Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -272,11 +272,17 @@ public void onRecovered() {\n         });\n   }\n \n-  private void onInstallFailure() {\n+  private void onInstallFailure(final long term) {\n     zeebePartitionHealth.setServicesInstalled(false);\n+    context\n+        .getPartitionListeners()\n+        .forEach(l -> l.onBecomingInactive(context.getPartitionId(), term));\n+\n     if (context.getRaftPartition().getRole() == Role.LEADER) {\n       LOG.info(\"Unexpected failures occurred when installing leader services, stepping down\");\n       context.getRaftPartition().stepDown();\n+    } else {\n+      context.getRaftPartition().leave();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1MDYwNw=="}, "originalCommit": {"oid": "7bfd3beffd8b73081828614b5b6388864eb4419c"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTIzOTc0OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNzo1ODoxOVrOHzrf3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNzo1ODoxOVrOHzrf3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1MjA5Mw==", "bodyText": "This log level can be debug, right?", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r523952093", "createdAt": "2020-11-16T07:58:19Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java", "diffHunk": "@@ -107,23 +100,41 @@ private void installPartition(\n             });\n   }\n \n+  private void tryCloseStep(final PartitionStep step) {\n+    // close if there's anything to close. Don't add to 'opened' list, since the open did not\n+    // complete, the close might also fail but that shouldn't prevent the next transition\n+    try {\n+      step.close(context);\n+    } catch (final Exception e) {\n+      LOG.info(\"Couldn't close partition step '{}' that failed to open\", step.getName(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bfd3beffd8b73081828614b5b6388864eb4419c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTI0ODQ3OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODowMDo1MFrOHzrkxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODowMDo1MFrOHzrkxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1MzM1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    (v, newThrowable) -> {\n          \n          \n            \n                    (v, closeFailedError) -> {", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r523953351", "createdAt": "2020-11-16T08:00:50Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionTransitionImpl.java", "diffHunk": "@@ -132,26 +143,22 @@ private void stepByStepClosing(\n \n     final ActorFuture<Void> closeFuture = step.close(context);\n     closeFuture.onComplete(\n-        (v, t) -> {\n-          if (t == null) {\n+        (v, newThrowable) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bfd3beffd8b73081828614b5b6388864eb4419c"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTI2NDIwOnYy", "diffSide": "RIGHT", "path": "protocol/src/main/resources/protocol.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODowNjoyOVrOHzruQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMDoxMjowMlrOH1mZTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1NTc3OA==", "bodyText": "How does this work on the gateway side? Would it work during rolling upgrade, gateway and broker is on different versions?", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r523955778", "createdAt": "2020-11-16T08:06:29Z", "author": {"login": "deepthidevaki"}, "path": "protocol/src/main/resources/protocol.xml", "diffHunk": "@@ -55,6 +55,7 @@\n     <enum name=\"PartitionRole\" encodingType=\"uint8\">\n       <validValue name=\"LEADER\">0</validValue>\n       <validValue name=\"FOLLOWER\">1</validValue>\n+      <validValue name=\"INACTIVE\">2</validValue>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bfd3beffd8b73081828614b5b6388864eb4419c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTk2NTY0NQ==", "bodyText": "A previous version would map the value to SBE_UNKNOWN but it shouldn't break", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r525965645", "createdAt": "2020-11-18T10:12:02Z", "author": {"login": "MiguelPires"}, "path": "protocol/src/main/resources/protocol.xml", "diffHunk": "@@ -55,6 +55,7 @@\n     <enum name=\"PartitionRole\" encodingType=\"uint8\">\n       <validValue name=\"LEADER\">0</validValue>\n       <validValue name=\"FOLLOWER\">1</validValue>\n+      <validValue name=\"INACTIVE\">2</validValue>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1NTc3OA=="}, "originalCommit": {"oid": "7bfd3beffd8b73081828614b5b6388864eb4419c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzQwMTc5OnYy", "diffSide": "RIGHT", "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/DefaultRaftServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzozODo0MVrOH3Dmaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzozODo0MVrOH3Dmaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5MjcxNQ==", "bodyText": "Add @Override", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r527492715", "createdAt": "2020-11-20T07:38:41Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/raft/impl/DefaultRaftServer.java", "diffHunk": "@@ -149,6 +149,17 @@ public void removeFailureListener(final Runnable failureListener) {\n     return future;\n   }\n \n+  public CompletableFuture<Void> goInactive() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1885b611ca2d4f6a1d1f8f9f55a3a156eb4d2b57"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzQwODQyOnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzo0MTowOVrOH3DqaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzo0MTowOVrOH3DqaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5MzczNw==", "bodyText": "May be also add a log here?", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r527493737", "createdAt": "2020-11-20T07:41:09Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -272,11 +272,17 @@ public void onRecovered() {\n         });\n   }\n \n-  private void onInstallFailure() {\n+  private void onInstallFailure(final long term) {\n     zeebePartitionHealth.setServicesInstalled(false);\n+    context\n+        .getPartitionListeners()\n+        .forEach(l -> l.onBecomingInactive(context.getPartitionId(), term));\n+\n     if (context.getRaftPartition().getRole() == Role.LEADER) {\n       LOG.info(\"Unexpected failures occurred when installing leader services, stepping down\");\n       context.getRaftPartition().stepDown();\n+    } else {\n+      context.getRaftPartition().goInactive();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1885b611ca2d4f6a1d1f8f9f55a3a156eb4d2b57"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzQwOTg0OnYy", "diffSide": "RIGHT", "path": "broker/src/test/java/io/zeebe/broker/system/partitions/ZeebePartitionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzo0MTo1MVrOH3DrQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzo0MTo1MVrOH3DrQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5Mzk1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThatNoException().isThrownBy(() -> latch.await(30, TimeUnit.SECONDS));\n          \n          \n            \n                assertThat(latch.await(30, TimeUnit.SECONDS)).isTrue();", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r527493953", "createdAt": "2020-11-20T07:41:51Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/test/java/io/zeebe/broker/system/partitions/ZeebePartitionTest.java", "diffHunk": "@@ -100,6 +107,76 @@ public void shouldCallOnRecoveredOnAddFailureListenerAndHealthy() {\n     verify(failureListener, only()).onRecovered();\n   }\n \n+  @Test\n+  public void shouldStepDownAfterFailedLeaderTransition() {\n+    // given\n+    final ZeebePartition partition = new ZeebePartition(ctx, transition);\n+    schedulerRule.submitActor(partition);\n+    final CountDownLatch latch = new CountDownLatch(1);\n+\n+    when(transition.toLeader())\n+        .thenReturn(CompletableActorFuture.completedExceptionally(new Exception(\"expected\")));\n+    when(transition.toFollower())\n+        .then(\n+            invocation -> {\n+              latch.countDown();\n+              return CompletableActorFuture.completed(null);\n+            });\n+    when(raft.getRole()).thenReturn(Role.LEADER);\n+    when(raft.stepDown())\n+        .then(\n+            invocation -> {\n+              partition.onNewRole(Role.FOLLOWER, 2);\n+              return CompletableFuture.completedFuture(null);\n+            });\n+\n+    // when\n+    partition.onNewRole(Role.LEADER, 1);\n+    schedulerRule.workUntilDone();\n+    assertThatNoException().isThrownBy(() -> latch.await(30, TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1885b611ca2d4f6a1d1f8f9f55a3a156eb4d2b57"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzQxMDcxOnYy", "diffSide": "RIGHT", "path": "broker/src/test/java/io/zeebe/broker/system/partitions/ZeebePartitionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzo0MjowNlrOH3DrtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwNzo0MjowNlrOH3DrtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ5NDA2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThatNoException().isThrownBy(() -> latch.await(30, TimeUnit.SECONDS));\n          \n          \n            \n                assertThat(latch.await(30, TimeUnit.SECONDS)).isTrue();", "url": "https://github.com/camunda-cloud/zeebe/pull/5813#discussion_r527494068", "createdAt": "2020-11-20T07:42:06Z", "author": {"login": "deepthidevaki"}, "path": "broker/src/test/java/io/zeebe/broker/system/partitions/ZeebePartitionTest.java", "diffHunk": "@@ -100,6 +107,76 @@ public void shouldCallOnRecoveredOnAddFailureListenerAndHealthy() {\n     verify(failureListener, only()).onRecovered();\n   }\n \n+  @Test\n+  public void shouldStepDownAfterFailedLeaderTransition() {\n+    // given\n+    final ZeebePartition partition = new ZeebePartition(ctx, transition);\n+    schedulerRule.submitActor(partition);\n+    final CountDownLatch latch = new CountDownLatch(1);\n+\n+    when(transition.toLeader())\n+        .thenReturn(CompletableActorFuture.completedExceptionally(new Exception(\"expected\")));\n+    when(transition.toFollower())\n+        .then(\n+            invocation -> {\n+              latch.countDown();\n+              return CompletableActorFuture.completed(null);\n+            });\n+    when(raft.getRole()).thenReturn(Role.LEADER);\n+    when(raft.stepDown())\n+        .then(\n+            invocation -> {\n+              partition.onNewRole(Role.FOLLOWER, 2);\n+              return CompletableFuture.completedFuture(null);\n+            });\n+\n+    // when\n+    partition.onNewRole(Role.LEADER, 1);\n+    schedulerRule.workUntilDone();\n+    assertThatNoException().isThrownBy(() -> latch.await(30, TimeUnit.SECONDS));\n+\n+    // then\n+    final InOrder order = inOrder(transition, raft);\n+    order.verify(transition).toLeader();\n+    order.verify(raft).stepDown();\n+    order.verify(transition).toFollower();\n+  }\n+\n+  @Test\n+  public void shouldGoInactiveAfterFailedFollowerTransition() {\n+    // given\n+    final ZeebePartition partition = new ZeebePartition(ctx, transition);\n+    schedulerRule.submitActor(partition);\n+    final CountDownLatch latch = new CountDownLatch(1);\n+\n+    when(transition.toFollower())\n+        .thenReturn(CompletableActorFuture.completedExceptionally(new Exception(\"expected\")));\n+    when(transition.toInactive())\n+        .then(\n+            invocation -> {\n+              latch.countDown();\n+              return CompletableActorFuture.completed(null);\n+            });\n+    when(raft.getRole()).thenReturn(Role.FOLLOWER);\n+    when(raft.goInactive())\n+        .then(\n+            invocation -> {\n+              partition.onNewRole(Role.INACTIVE, 2);\n+              return CompletableFuture.completedFuture(null);\n+            });\n+\n+    // when\n+    partition.onNewRole(Role.FOLLOWER, 1);\n+    schedulerRule.workUntilDone();\n+    assertThatNoException().isThrownBy(() -> latch.await(30, TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1885b611ca2d4f6a1d1f8f9f55a3a156eb4d2b57"}, "originalPosition": 114}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 146, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}