{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3Njg3NjIy", "number": 4781, "title": "Multiple Swim improvements", "bodyText": "Description\nThis PR fixes several issues:\n\nwe no longer send requests to local nodes.\nwe not trigger mutliple MEMBER_REMOVE events for the SWIM listeners\nwe send requests no longer on a fixed rate\n\n\nRelated issues\n\ncloses #4780\ncloses #4779\ncloses #4778\nPull Request Checklist\n\n All commit messages match our commit message guidelines\n The submitting code follows our code style\n If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-06-22T05:18:36Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4781", "merged": true, "mergeCommit": {"oid": "fbea33d88a9b2ad520b2786b2587c76bbfb9f3bf"}, "closed": true, "closedAt": "2020-06-29T07:13:15Z", "author": {"login": "Zelldon"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABctpxbLAH2gAyNDM3Njg3NjIyOmRkOWZhMWM2Yzk3N2I4Y2EyOWFmOTc2YTAxOThhN2RiN2FkOWEzYzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcv7WRfgBqjM0OTE1MDY5Mzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dd9fa1c6c977b8ca29af976a0198a7db7ad9a3c4", "author": {"user": {"login": "Zelldon", "name": "Christopher Zell"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/dd9fa1c6c977b8ca29af976a0198a7db7ad9a3c4", "committedDate": "2020-06-22T05:12:46Z", "message": "chore(atomix): do not trigger listeners multiple times\n\n removethe possibility that listerners got MEMBER_REMOVED multiple\n times"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NDkwMzU1", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#pullrequestreview-435490355", "createdAt": "2020-06-23T06:55:01Z", "commit": {"oid": "d1a34f6e7c961986eecb758a5b1d847f2fe3fc32"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNjo1NTowMlrOGnbp2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNDoyMzowNVrOGnrslw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAwMDcyOA==", "bodyText": "Why is comparing with address needed?", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#discussion_r444000728", "createdAt": "2020-06-23T06:55:02Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "diffHunk": "@@ -225,14 +229,15 @@ private void checkMetadata() {\n    */\n   private boolean updateState(final ImmutableMember member) {\n     // If the member matches the local member, ignore the update.\n-    if (member.id().equals(localMember.id())) {\n+    if (member.id().equals(localMember.id()) || member.address().equals(localMember.address())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1a34f6e7c961986eecb758a5b1d847f2fe3fc32"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI1MjA2Nw==", "bodyText": "Should we wait for the response to schedule the next probe? Worst case, if the remote member is dead, we wait probeTimeout + probeInterval  time to send the next probe. This will increase the latency to detect failures of other nodes. Right?", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#discussion_r444252067", "createdAt": "2020-06-23T14:07:32Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "diffHunk": "@@ -523,6 +525,10 @@ private void probe(final ImmutableMember member) {\n                   requestProbes(swimMember.copy());\n                 }\n               }\n+              swimScheduler.schedule(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1a34f6e7c961986eecb758a5b1d847f2fe3fc32"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI1MzI3Mg==", "bodyText": "These futures should be updated when they are scheduled again.", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#discussion_r444253272", "createdAt": "2020-06-23T14:09:13Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "diffHunk": "@@ -161,22 +161,26 @@ public Member getMember(final MemberId memberId) {\n       this.localProperties.putAll(localMember.properties());\n       discoveryService.addListener(discoveryEventListener);\n \n-      LOGGER.info(\"{} - Member activated: {}\", localMember.id(), localMember);\n+      // we need to add our local node to the member list,\n+      // to share the mapping between node id and address in the cluster\n       localMember.setState(State.ALIVE);\n       members.put(localMember.id(), localMember);\n       post(new GroupMembershipEvent(GroupMembershipEvent.Type.MEMBER_ADDED, localMember));\n \n+      LOGGER.debug(\"Nodes from discovery service {}\", discoveryService.getNodes());\n+\n       registerHandlers();\n       gossipFuture =\n-          swimScheduler.scheduleAtFixedRate(\n-              this::gossip, 0, config.getGossipInterval().toMillis(), TimeUnit.MILLISECONDS);\n+          swimScheduler.schedule(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1a34f6e7c961986eecb758a5b1d847f2fe3fc32"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI1MzU1NA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#discussion_r444253554", "createdAt": "2020-06-23T14:09:35Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "diffHunk": "@@ -388,25 +385,20 @@ private void checkFailures() {\n           && System.currentTimeMillis() - member.getUpdated()\n               > config.getFailureTimeout().toMillis()) {\n         member.setState(State.DEAD);\n-        members.remove(member.id());\n-        randomMembers.remove(member);\n-        Collections.shuffle(randomMembers);\n-        LOGGER.debug(\"{} - Member removed {}\", this.localMember.id(), member);\n-        post(new GroupMembershipEvent(GroupMembershipEvent.Type.MEMBER_REMOVED, member.copy()));\n+\n+        tryRemoveMember(member);\n         recordUpdate(member.copy());\n       }\n     }\n   }\n \n-  /** Synchronizes the node state with peers. */\n-  private void syncAll() {\n-    final List<SwimMember> syncMembers =\n-        discoveryService.getNodes().stream()\n-            .map(node -> new SwimMember(MemberId.from(node.id().id()), node.address()))\n-            .filter(member -> !member.id().equals(localMember.id()))\n-            .collect(Collectors.toList());\n-    for (final SwimMember member : syncMembers) {\n-      sync(member.copy());\n+  private void tryRemoveMember(final SwimMember member) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1a34f6e7c961986eecb758a5b1d847f2fe3fc32"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDI2MzU3NQ==", "bodyText": "Similar to sync(),  if probeMembers is empty, you have to schedule probe.", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#discussion_r444263575", "createdAt": "2020-06-23T14:23:05Z", "author": {"login": "deepthidevaki"}, "path": "atomix/cluster/src/main/java/io/atomix/cluster/protocol/SwimMembershipProtocol.java", "diffHunk": "@@ -475,20 +476,21 @@ private void probe() {\n     // This is necessary to ensure we attempt to probe all nodes that are provided by the discovery\n     // provider.\n     final List<SwimMember> probeMembers =\n-        Lists.newArrayList(\n-            discoveryService.getNodes().stream()\n-                .map(node -> new SwimMember(MemberId.from(node.id().id()), node.address()))\n-                .filter(member -> !members.containsKey(member.id()))\n-                .filter(member -> !member.id().equals(localMember.id()))\n-                .sorted(Comparator.comparing(Member::id))\n-                .collect(Collectors.toList()));\n+        discoveryService.getNodes().stream()\n+            .map(node -> new SwimMember(MemberId.from(node.id().id()), node.address()))\n+            .filter(member -> !members.containsKey(member.id()))\n+            .filter(member -> !member.id().equals(localMember.id()))\n+            .filter(member -> !member.address().equals(localMember.address()))\n+            .sorted(Comparator.comparing(Member::id))\n+            .collect(Collectors.toList());\n \n     // Then add the randomly sorted list of SWIM members.\n     probeMembers.addAll(randomMembers);\n \n     // If there are members to probe, select the next member to probe using a counter for round\n     // robin probes.\n     if (!probeMembers.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1a34f6e7c961986eecb758a5b1d847f2fe3fc32"}, "originalPosition": 191}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a059103f75a2fb29db75e71ee3b85175b3175ef7", "author": {"user": {"login": "Zelldon", "name": "Christopher Zell"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/a059103f75a2fb29db75e71ee3b85175b3175ef7", "committedDate": "2020-06-26T09:58:32Z", "message": "chore(atomix): remove address check in updateState"}, "afterCommit": {"oid": "f98a8a3a44c0a1159227b18a498af3660a754a25", "author": {"user": {"login": "Zelldon", "name": "Christopher Zell"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/f98a8a3a44c0a1159227b18a498af3660a754a25", "committedDate": "2020-06-26T10:20:18Z", "message": "chore(atomix): remove address check in updateState"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4OTA4NDQx", "url": "https://github.com/camunda-cloud/zeebe/pull/4781#pullrequestreview-438908441", "createdAt": "2020-06-29T06:08:51Z", "commit": {"oid": "f98a8a3a44c0a1159227b18a498af3660a754a25"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9556935960cf6ea35817a933834f68527376758b", "author": {"user": {"login": "Zelldon", "name": "Christopher Zell"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/9556935960cf6ea35817a933834f68527376758b", "committedDate": "2020-06-29T06:48:42Z", "message": "chore(swim): do not send requests to local node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb785bb6bc2097f68a36d33d8444e1d69fc0e5bf", "author": {"user": {"login": "Zelldon", "name": "Christopher Zell"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/eb785bb6bc2097f68a36d33d8444e1d69fc0e5bf", "committedDate": "2020-06-29T06:49:03Z", "message": "chore(atomix): trigger swim requests not in a fixed rate\n\n Requests are awaited for reponse or timeout and then next requests are\n scheduled"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f98a8a3a44c0a1159227b18a498af3660a754a25", "author": {"user": {"login": "Zelldon", "name": "Christopher Zell"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/f98a8a3a44c0a1159227b18a498af3660a754a25", "committedDate": "2020-06-26T10:20:18Z", "message": "chore(atomix): remove address check in updateState"}, "afterCommit": {"oid": "eb785bb6bc2097f68a36d33d8444e1d69fc0e5bf", "author": {"user": {"login": "Zelldon", "name": "Christopher Zell"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/eb785bb6bc2097f68a36d33d8444e1d69fc0e5bf", "committedDate": "2020-06-29T06:49:03Z", "message": "chore(atomix): trigger swim requests not in a fixed rate\n\n Requests are awaited for reponse or timeout and then next requests are\n scheduled"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2802, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}