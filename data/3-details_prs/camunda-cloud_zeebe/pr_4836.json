{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNjQ5Nzcw", "number": 4836, "title": "Improve logging of gRPC request exceptions", "bodyText": "Description\nDon't log broker rejections on error level. Instead log them at trace level. This PR also adds tests for logging of errors in the gateway and changes the message and log level of other exceptional broker responses in the gateway.\nRelated issues\ncloses #4665\nDefinition of Done\nNot all items need to be done depending on the issue and the pull request.\nCode changes:\n\n The changes are backwards compatibility with previous versions\n If it fixes a bug then PRs are created to backport the fix to the last two minor versions\n\nTesting:\n\n There are unit/integration tests that verify all acceptance criterias of the issue\n New tests are written to ensure backwards compatibility with further versions\n The behavior is tested manually\n The impact of the changes is verified by a benchmark\n\nDocumentation:\n\n The documentation is updated (e.g. BPMN reference, configuration, examples, get-started guides, etc.)\n New content is added to the release annoncement", "createdAt": "2020-06-26T15:29:42Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4836", "merged": true, "mergeCommit": {"oid": "6e40fcd358994270a41c1ed7bb64b518b3ab922c"}, "closed": true, "closedAt": "2020-07-10T12:19:44Z", "author": {"login": "korthout"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvFBAkgBqjM0ODcwOTQ2NzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczhT1UgBqjM1MzMzNzUyNDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5080a2e0e734cc26b6e44267a016582ac0868239", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/5080a2e0e734cc26b6e44267a016582ac0868239", "committedDate": "2020-06-26T15:26:43Z", "message": "test(gateway): broker errors should be logged"}, "afterCommit": {"oid": "b8d74d03580b34fac4aa31960ed34cd7708360ab", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/b8d74d03580b34fac4aa31960ed34cd7708360ab", "committedDate": "2020-06-26T15:30:52Z", "message": "test(gateway): broker errors should be logged"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f5b0d9004ab0cc67abb710d4efe5a6b99309187", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/5f5b0d9004ab0cc67abb710d4efe5a6b99309187", "committedDate": "2020-06-30T15:14:16Z", "message": "chore(gateway): improve logging of gRPC request exceptions"}, "afterCommit": {"oid": "c2fbd93e75acc8718700d36dc7f5f693c8dc99c6", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/c2fbd93e75acc8718700d36dc7f5f693c8dc99c6", "committedDate": "2020-06-30T16:23:43Z", "message": "chore(gateway): improve logging of gRPC request exceptions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwOTI3NDA3", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#pullrequestreview-440927407", "createdAt": "2020-07-01T14:33:42Z", "commit": {"oid": "c2fbd93e75acc8718700d36dc7f5f693c8dc99c6"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDozMzo0MlrOGrokbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNTozMDoxOFrOGrq6NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQwNjYzNg==", "bodyText": "Out of curiosity, why trace and not debug (here as well as in the other cases)?", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r448406636", "createdAt": "2020-07-01T14:33:42Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/EndpointManager.java", "diffHunk": "@@ -400,32 +401,36 @@ public static StatusRuntimeException convertThrowable(final Throwable cause) {\n \n     if (cause instanceof BrokerErrorException) {\n       status = mapBrokerErrorToStatus(((BrokerErrorException) cause).getError());\n+      // When there is back pressure, there will be a lot of `RESOURCE_EXHAUSTED` errors and the log\n+      // can get flooded. Until we find a way to limit the number of log messages,\n+      // let's do not log them.\n+      if (status.getCode() != Status.RESOURCE_EXHAUSTED.getCode()) {\n+        Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"received error from broker\", cause);\n+      }\n     } else if (cause instanceof BrokerRejectionException) {\n       status = mapRejectionToStatus(((BrokerRejectionException) cause).getRejection());\n+      Loggers.GATEWAY_LOGGER.trace(GRPC_ERROR_TEMPLATE + \"broker rejected request\", cause);\n     } else if (cause instanceof ClientOutOfMemoryException) {\n       status = Status.UNAVAILABLE.augmentDescription(cause.getMessage());\n+      Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"gateway out of memory\", cause);\n     } else if (cause instanceof TimeoutException) { // can be thrown by transport\n       status =\n           Status.DEADLINE_EXCEEDED.augmentDescription(\n               \"Time out between gateway and broker: \" + cause.getMessage());\n+      Loggers.GATEWAY_LOGGER.trace(\n+          GRPC_ERROR_TEMPLATE + \"request timed out between gateway and broker\", cause);\n     } else if (cause instanceof GrpcStatusException) {\n       status = ((GrpcStatusException) cause).getGrpcStatus();\n+      Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"a GrpcStatusException occurred\", cause);\n     } else if (cause instanceof PartitionNotFoundException) {\n       status = Status.NOT_FOUND.augmentDescription(cause.getMessage());\n+      Loggers.GATEWAY_LOGGER.trace(GRPC_ERROR_TEMPLATE + \"request could not be delivered\", cause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2fbd93e75acc8718700d36dc7f5f693c8dc99c6"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0MTY0MQ==", "bodyText": "I looked into it, and this case I think is not possible anymore - a ClientOutOfMemoryException would happen literally only if the JVM ran out of memory, which would already throw an OOM, so I don't think this exception is even used anymore?", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r448441641", "createdAt": "2020-07-01T15:25:20Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/EndpointManager.java", "diffHunk": "@@ -400,32 +401,36 @@ public static StatusRuntimeException convertThrowable(final Throwable cause) {\n \n     if (cause instanceof BrokerErrorException) {\n       status = mapBrokerErrorToStatus(((BrokerErrorException) cause).getError());\n+      // When there is back pressure, there will be a lot of `RESOURCE_EXHAUSTED` errors and the log\n+      // can get flooded. Until we find a way to limit the number of log messages,\n+      // let's do not log them.\n+      if (status.getCode() != Status.RESOURCE_EXHAUSTED.getCode()) {\n+        Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"received error from broker\", cause);\n+      }\n     } else if (cause instanceof BrokerRejectionException) {\n       status = mapRejectionToStatus(((BrokerRejectionException) cause).getRejection());\n+      Loggers.GATEWAY_LOGGER.trace(GRPC_ERROR_TEMPLATE + \"broker rejected request\", cause);\n     } else if (cause instanceof ClientOutOfMemoryException) {\n       status = Status.UNAVAILABLE.augmentDescription(cause.getMessage());\n+      Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"gateway out of memory\", cause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2fbd93e75acc8718700d36dc7f5f693c8dc99c6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0Mjk4Mg==", "bodyText": "It seems GrpcStatusException is an interface which exceptions should implement to determine what status to return. At the moment, some of them are in fact akin to rejections (e.g. we couldn't parse your create workflow payload), so I don't think they should be errors. They're essentially the gateway saying hey this request is wrong before even sending it - but do check, I could be misunderstanding it (even though I wrote it \ud83d\ude48 Though I think it was a mistake haha)", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r448442982", "createdAt": "2020-07-01T15:27:18Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/EndpointManager.java", "diffHunk": "@@ -400,32 +401,36 @@ public static StatusRuntimeException convertThrowable(final Throwable cause) {\n \n     if (cause instanceof BrokerErrorException) {\n       status = mapBrokerErrorToStatus(((BrokerErrorException) cause).getError());\n+      // When there is back pressure, there will be a lot of `RESOURCE_EXHAUSTED` errors and the log\n+      // can get flooded. Until we find a way to limit the number of log messages,\n+      // let's do not log them.\n+      if (status.getCode() != Status.RESOURCE_EXHAUSTED.getCode()) {\n+        Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"received error from broker\", cause);\n+      }\n     } else if (cause instanceof BrokerRejectionException) {\n       status = mapRejectionToStatus(((BrokerRejectionException) cause).getRejection());\n+      Loggers.GATEWAY_LOGGER.trace(GRPC_ERROR_TEMPLATE + \"broker rejected request\", cause);\n     } else if (cause instanceof ClientOutOfMemoryException) {\n       status = Status.UNAVAILABLE.augmentDescription(cause.getMessage());\n+      Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"gateway out of memory\", cause);\n     } else if (cause instanceof TimeoutException) { // can be thrown by transport\n       status =\n           Status.DEADLINE_EXCEEDED.augmentDescription(\n               \"Time out between gateway and broker: \" + cause.getMessage());\n+      Loggers.GATEWAY_LOGGER.trace(\n+          GRPC_ERROR_TEMPLATE + \"request timed out between gateway and broker\", cause);\n     } else if (cause instanceof GrpcStatusException) {\n       status = ((GrpcStatusException) cause).getGrpcStatus();\n+      Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"a GrpcStatusException occurred\", cause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2fbd93e75acc8718700d36dc7f5f693c8dc99c6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0NDQ3OA==", "bodyText": "What does this do?", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r448444478", "createdAt": "2020-07-01T15:29:36Z", "author": {"login": "npepinpe"}, "path": "gateway/src/test/java/io/zeebe/gateway/api/util/GatewayTest.java", "diffHunk": "@@ -42,4 +43,9 @@ public void setUp() {\n     client = gatewayRule.getClient();\n     brokerClient = gatewayRule.getBrokerClient();\n   }\n+\n+  @After\n+  public void tearDown() {\n+    // nothing to do", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2fbd93e75acc8718700d36dc7f5f693c8dc99c6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ0NDk4MA==", "bodyText": "good catch \ud83d\udcaa", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r448444980", "createdAt": "2020-07-01T15:30:18Z", "author": {"login": "npepinpe"}, "path": "util/src/main/java/io/zeebe/util/logging/RecordingAppender.java", "diffHunk": "@@ -14,24 +14,41 @@\n import org.apache.logging.log4j.core.ErrorHandler;\n import org.apache.logging.log4j.core.Layout;\n import org.apache.logging.log4j.core.LogEvent;\n+import org.apache.logging.log4j.core.appender.NullAppender;\n \n /**\n  * An {@link Appender} decorator which delegates all method to the underlying appender while\n  * recording all events it receives through {@link #append(LogEvent)}. These are accessible\n- * afterwards through {@link #getAppendedEvents()}, in the order in which they were appended.\n+ * afterwards through {@link #getAppendedEvents()}, in the order in which they were appended. The\n+ * default underlying appender is a {@link NullAppender}.\n+ *\n+ * <p>Note, that the RecordingAppender when used to record the log events of a {@link\n+ * io.zeebe.util.ZbLogger}, that the appender can only record logs starting at the enabled log\n+ * level.\n  */\n-final class RecordingAppender implements Appender {\n+// todo: move this class to zeebe-test-utils\n+public final class RecordingAppender implements Appender {\n   private final Appender delegate;\n   private final List<LogEvent> appendedEvents;\n \n+  /**\n+   * Construct a RecordingAppender.\n+   *\n+   * @param delegate The underlying appender to delegate all log events to\n+   */\n   public RecordingAppender(final Appender delegate) {\n     this.delegate = delegate;\n     this.appendedEvents = new ArrayList<>();\n   }\n \n+  /** Construct a RecordingAppender using a NullAppender as underlying appender. */\n+  public RecordingAppender() {\n+    this(NullAppender.createAppender(\"RecordingAppender\"));\n+  }\n+\n   @Override\n   public void append(final LogEvent event) {\n-    appendedEvents.add(event);\n+    appendedEvents.add(event.toImmutable());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2fbd93e75acc8718700d36dc7f5f693c8dc99c6"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7547612e60812c0568227f04f1ee5988fd5f9eb", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/b7547612e60812c0568227f04f1ee5988fd5f9eb", "committedDate": "2020-07-02T13:38:37Z", "message": "chore(gateway): add log4j-api dep to pom"}, "afterCommit": {"oid": "e7233f9e92b908c1f30030df6ff63bb2662bd94f", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/e7233f9e92b908c1f30030df6ff63bb2662bd94f", "committedDate": "2020-07-02T13:59:26Z", "message": "chore(gateway): add log4j-api dep to pom"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNzEwMTc0", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#pullrequestreview-441710174", "createdAt": "2020-07-02T14:03:59Z", "commit": {"oid": "e7233f9e92b908c1f30030df6ff63bb2662bd94f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDowNDowMFrOGsOW-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDowNDowMFrOGsOW-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAyNTc4NQ==", "bodyText": "As part of resolving conflicts with 8c065fe, I added this catch to this method, instead of to the sendRequestWithRetry above, as that one now reuses all of this code.", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r449025785", "createdAt": "2020-07-02T14:04:00Z", "author": {"login": "korthout"}, "path": "gateway/src/test/java/io/zeebe/gateway/api/util/StubbedBrokerClient.java", "diffHunk": "@@ -96,15 +79,20 @@ public void close() {}\n     try {\n       final RequestHandler requestHandler = requestHandlers.get(request.getClass());\n       final BrokerResponse<T> response = requestHandler.handle(request);\n-      if (response.isResponse()) {\n-        responseConsumer.accept(response.getKey(), response.getResponse());\n-      } else if (response.isRejection()) {\n-        throwableConsumer.accept(new BrokerRejectionException(response.getRejection()));\n-      } else if (response.isError()) {\n-        throwableConsumer.accept(new BrokerErrorException(response.getError()));\n-      } else {\n-        throwableConsumer.accept(\n-            new IllegalBrokerResponseException(\"Unknown response received: \" + response));\n+      try {\n+        if (response.isResponse()) {\n+          responseConsumer.accept(response.getKey(), response.getResponse());\n+        } else if (response.isRejection()) {\n+          throwableConsumer.accept(new BrokerRejectionException(response.getRejection()));\n+        } else if (response.isError()) {\n+          throwableConsumer.accept(new BrokerErrorException(response.getError()));\n+        } else {\n+          throwableConsumer.accept(\n+              new IllegalBrokerResponseException(\n+                  \"Expected broker response to be either response, rejection, or error, but is neither of them []\"));\n+        }\n+      } catch (final RuntimeException e) {\n+        throwableConsumer.accept(new BrokerResponseException(e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7233f9e92b908c1f30030df6ff63bb2662bd94f"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNDIzOTM4", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#pullrequestreview-442423938", "createdAt": "2020-07-03T13:46:26Z", "commit": {"oid": "fe0f12507d9c8da843ee3d42b746d596e4831b95"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMzo0NjoyNlrOGsw6LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNDowNjoyMlrOGsxdqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU5MTg1Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  <groupId>org.apache.logging.log4j</groupId>\n          \n          \n            \n                  <groupId>org.apache.logging.log4j</groupId>\n          \n          \n            \n                  <scope>test</scope>", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r449591852", "createdAt": "2020-07-03T13:46:26Z", "author": {"login": "npepinpe"}, "path": "gateway/pom.xml", "diffHunk": "@@ -60,6 +60,11 @@\n       <artifactId>slf4j-api</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <artifactId>log4j-api</artifactId>\n+      <groupId>org.apache.logging.log4j</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0f12507d9c8da843ee3d42b746d596e4831b95"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYwMDkzOA==", "bodyText": "Nitpick: not sure we gain much by \"dry\"ing the use of GRPC_ERROR_TEMPLATE, I'd personally just put each error reasons as a separate static string, e.g.\nprivate static final GRPC_BROKER_ERROR_MESSAGE = \"Expected to handle gRPC request, but the broker returned an error\";\nprivate static final GRPC_BROKER_REJECTION_MESSAGE = \"Broker rejected request\";\nprivate static final GRPC_TIME_OUT_MESSAGE = \"Request timed out between gateway and broker\";\n// ...\n(just a nit, so you can ignore this tbh - also reworded some messages since they aren't error messages)", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#discussion_r449600938", "createdAt": "2020-07-03T14:06:22Z", "author": {"login": "npepinpe"}, "path": "gateway/src/main/java/io/zeebe/gateway/EndpointManager.java", "diffHunk": "@@ -400,32 +392,36 @@ public static StatusRuntimeException convertThrowable(final Throwable cause) {\n \n     if (cause instanceof BrokerErrorException) {\n       status = mapBrokerErrorToStatus(((BrokerErrorException) cause).getError());\n+      // When there is back pressure, there will be a lot of `RESOURCE_EXHAUSTED` errors and the log\n+      // can get flooded. Until we find a way to limit the number of log messages,\n+      // let's do not log them.\n+      if (status.getCode() != Status.RESOURCE_EXHAUSTED.getCode()) {\n+        Loggers.GATEWAY_LOGGER.error(GRPC_ERROR_TEMPLATE + \"received error from broker\", cause);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe0f12507d9c8da843ee3d42b746d596e4831b95"}, "originalPosition": 48}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "91957c4ba1647eafc98a9a64ce995560f5f5a535", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/91957c4ba1647eafc98a9a64ce995560f5f5a535", "committedDate": "2020-07-09T12:46:19Z", "message": "chore(gateway): apply nitpick"}, "afterCommit": {"oid": "8054ece2efed6434f75a334c8ed2632fdfe910aa", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8054ece2efed6434f75a334c8ed2632fdfe910aa", "committedDate": "2020-07-09T13:48:06Z", "message": "chore(gateway): improve logging of gRPC request exceptions\n\n* change logging messages and levels of gRPC request exceptions\n* remove GrpcStatusException\n* move RecordingAppender to main sources\n* test that broker errors are logged\n* add log4j-api dep to pom"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NzcwMTk5", "url": "https://github.com/camunda-cloud/zeebe/pull/4836#pullrequestreview-445770199", "createdAt": "2020-07-09T16:15:55Z", "commit": {"oid": "8054ece2efed6434f75a334c8ed2632fdfe910aa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e4412d2e23d63de07a23b061dafb0bbaaffc56e", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/7e4412d2e23d63de07a23b061dafb0bbaaffc56e", "committedDate": "2020-07-10T10:44:29Z", "message": "chore(gateway): improve logging of gRPC request exceptions\n\n* change logging messages and levels of gRPC request exceptions\n* remove GrpcStatusException\n* move RecordingAppender to main sources\n* test that broker errors are logged\n* add log4j-api dep to pom"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8054ece2efed6434f75a334c8ed2632fdfe910aa", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8054ece2efed6434f75a334c8ed2632fdfe910aa", "committedDate": "2020-07-09T13:48:06Z", "message": "chore(gateway): improve logging of gRPC request exceptions\n\n* change logging messages and levels of gRPC request exceptions\n* remove GrpcStatusException\n* move RecordingAppender to main sources\n* test that broker errors are logged\n* add log4j-api dep to pom"}, "afterCommit": {"oid": "7e4412d2e23d63de07a23b061dafb0bbaaffc56e", "author": {"user": {"login": "korthout", "name": "Nico Korthout"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/7e4412d2e23d63de07a23b061dafb0bbaaffc56e", "committedDate": "2020-07-10T10:44:29Z", "message": "chore(gateway): improve logging of gRPC request exceptions\n\n* change logging messages and levels of gRPC request exceptions\n* remove GrpcStatusException\n* move RecordingAppender to main sources\n* test that broker errors are logged\n* add log4j-api dep to pom"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2659, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}