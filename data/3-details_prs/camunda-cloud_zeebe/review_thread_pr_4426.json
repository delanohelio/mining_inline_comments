{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExMzk1ODc4", "number": 4426, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjowODoxNlrOD49XjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoxOTozN1rOD49mZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDUyMzAxOnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/AtomixFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjowODoxNlrOGP9a4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMzowODozM1rOGP_epg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4ODEyOQ==", "bodyText": "Not sure this change makes things better as you now have a dependency to Spring DataSize in this class", "url": "https://github.com/camunda-cloud/zeebe/pull/4426#discussion_r419388129", "createdAt": "2020-05-04T12:08:16Z", "author": {"login": "pihme"}, "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/AtomixFactory.java", "diffHunk": "@@ -97,13 +98,15 @@ private static RaftPartitionGroup createRaftPartitionGroup(\n                 (raftContext, threadContext, threadContextFactory) ->\n                     new ZeebeRaftStateMachine(raftContext))\n             .withSnapshotStoreFactory(new DbSnapshotStoreFactory())\n+            .withStorageLevel(dataCfg.getAtomixStorageLevel())\n             .withFlushOnCommit();\n \n     // by default, the Atomix max entry size is 1 MB\n     final int maxMessageSize = (int) networkCfg.getMaxMessageSizeInBytes();\n     partitionGroupBuilder.withMaxEntrySize(maxMessageSize);\n \n-    Optional.ofNullable(dataCfg.getLogSegmentSizeInBytes())\n+    Optional.ofNullable(dataCfg.getLogSegmentSize())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f42cb3f97f2b115029e9a45dda619825c8cc73f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQwMDYyMw==", "bodyText": "Hadn't thought of that; I just corrected it as afaik Optional.ofNullable of a primitive is never null?", "url": "https://github.com/camunda-cloud/zeebe/pull/4426#discussion_r419400623", "createdAt": "2020-05-04T12:32:11Z", "author": {"login": "npepinpe"}, "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/AtomixFactory.java", "diffHunk": "@@ -97,13 +98,15 @@ private static RaftPartitionGroup createRaftPartitionGroup(\n                 (raftContext, threadContext, threadContextFactory) ->\n                     new ZeebeRaftStateMachine(raftContext))\n             .withSnapshotStoreFactory(new DbSnapshotStoreFactory())\n+            .withStorageLevel(dataCfg.getAtomixStorageLevel())\n             .withFlushOnCommit();\n \n     // by default, the Atomix max entry size is 1 MB\n     final int maxMessageSize = (int) networkCfg.getMaxMessageSizeInBytes();\n     partitionGroupBuilder.withMaxEntrySize(maxMessageSize);\n \n-    Optional.ofNullable(dataCfg.getLogSegmentSizeInBytes())\n+    Optional.ofNullable(dataCfg.getLogSegmentSize())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4ODEyOQ=="}, "originalCommit": {"oid": "1f42cb3f97f2b115029e9a45dda619825c8cc73f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQxNDQ5NA==", "bodyText": "true, this is somewhat misleading. getLogmentSize will never be null.", "url": "https://github.com/camunda-cloud/zeebe/pull/4426#discussion_r419414494", "createdAt": "2020-05-04T12:56:03Z", "author": {"login": "pihme"}, "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/AtomixFactory.java", "diffHunk": "@@ -97,13 +98,15 @@ private static RaftPartitionGroup createRaftPartitionGroup(\n                 (raftContext, threadContext, threadContextFactory) ->\n                     new ZeebeRaftStateMachine(raftContext))\n             .withSnapshotStoreFactory(new DbSnapshotStoreFactory())\n+            .withStorageLevel(dataCfg.getAtomixStorageLevel())\n             .withFlushOnCommit();\n \n     // by default, the Atomix max entry size is 1 MB\n     final int maxMessageSize = (int) networkCfg.getMaxMessageSizeInBytes();\n     partitionGroupBuilder.withMaxEntrySize(maxMessageSize);\n \n-    Optional.ofNullable(dataCfg.getLogSegmentSizeInBytes())\n+    Optional.ofNullable(dataCfg.getLogSegmentSize())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4ODEyOQ=="}, "originalCommit": {"oid": "1f42cb3f97f2b115029e9a45dda619825c8cc73f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQyMTg2Mg==", "bodyText": "I moved the Optional.ofNullable to the configuration class, let me know what you think.", "url": "https://github.com/camunda-cloud/zeebe/pull/4426#discussion_r419421862", "createdAt": "2020-05-04T13:08:33Z", "author": {"login": "npepinpe"}, "path": "broker/src/main/java/io/zeebe/broker/clustering/atomix/AtomixFactory.java", "diffHunk": "@@ -97,13 +98,15 @@ private static RaftPartitionGroup createRaftPartitionGroup(\n                 (raftContext, threadContext, threadContextFactory) ->\n                     new ZeebeRaftStateMachine(raftContext))\n             .withSnapshotStoreFactory(new DbSnapshotStoreFactory())\n+            .withStorageLevel(dataCfg.getAtomixStorageLevel())\n             .withFlushOnCommit();\n \n     // by default, the Atomix max entry size is 1 MB\n     final int maxMessageSize = (int) networkCfg.getMaxMessageSizeInBytes();\n     partitionGroupBuilder.withMaxEntrySize(maxMessageSize);\n \n-    Optional.ofNullable(dataCfg.getLogSegmentSizeInBytes())\n+    Optional.ofNullable(dataCfg.getLogSegmentSize())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4ODEyOQ=="}, "originalCommit": {"oid": "1f42cb3f97f2b115029e9a45dda619825c8cc73f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDUzMjY3OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/SystemContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoxMDo1OVrOGP9gtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoxMDo1OVrOGP9gtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM4OTYyMA==", "bodyText": "this behavior is different from what is specified in the issue\n\nIf the user sets this option to true but also uses replication we will log a warning and disable this option to not prevent the broker from starting.\n\nPlease align the two, either by adding a comment to the issue/changing the issue; or changing this here", "url": "https://github.com/camunda-cloud/zeebe/pull/4426#discussion_r419389620", "createdAt": "2020-05-04T12:10:59Z", "author": {"login": "pihme"}, "path": "broker/src/main/java/io/zeebe/broker/system/SystemContext.java", "diffHunk": "@@ -70,7 +75,13 @@ private void validateConfiguration() {\n       throw new IllegalArgumentException(String.format(NODE_ID_ERROR_MSG, nodeId, clusterSize));\n     }\n \n+    final StorageLevel storageLevel = data.getAtomixStorageLevel();\n     final int replicationFactor = cluster.getReplicationFactor();\n+\n+    if (storageLevel == StorageLevel.MAPPED && replicationFactor > 1) {\n+      throw new IllegalStateException(MMAP_REPLICATION_ERROR_MSG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f42cb3f97f2b115029e9a45dda619825c8cc73f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDUzODQyOnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/SystemContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoxMjozNFrOGP9kHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo1MToxNVrOGP-2bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5MDQ5NA==", "bodyText": "Maxybe a little more context would be helpful in the how to fix part:\nE.g. set BrokertCfg->DataCfg-useMmap to false", "url": "https://github.com/camunda-cloud/zeebe/pull/4426#discussion_r419390494", "createdAt": "2020-05-04T12:12:34Z", "author": {"login": "pihme"}, "path": "broker/src/main/java/io/zeebe/broker/system/SystemContext.java", "diffHunk": "@@ -29,6 +31,8 @@\n       \"Replication factor %s needs to be larger then zero and not larger then cluster size %s.\";\n   private static final String SNAPSHOT_PERIOD_ERROR_MSG =\n       \"Snapshot period %s needs to be larger then or equals to one minute.\";\n+  private static final String MMAP_REPLICATION_ERROR_MSG =\n+      \"Using memory mapped storage level is currently unsafe with replication enabled; if you wish to use replication, set useMmap to false\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f42cb3f97f2b115029e9a45dda619825c8cc73f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQxMTU2NA==", "bodyText": "Will update with env var to look for/update \ud83d\udc4d", "url": "https://github.com/camunda-cloud/zeebe/pull/4426#discussion_r419411564", "createdAt": "2020-05-04T12:51:15Z", "author": {"login": "npepinpe"}, "path": "broker/src/main/java/io/zeebe/broker/system/SystemContext.java", "diffHunk": "@@ -29,6 +31,8 @@\n       \"Replication factor %s needs to be larger then zero and not larger then cluster size %s.\";\n   private static final String SNAPSHOT_PERIOD_ERROR_MSG =\n       \"Snapshot period %s needs to be larger then or equals to one minute.\";\n+  private static final String MMAP_REPLICATION_ERROR_MSG =\n+      \"Using memory mapped storage level is currently unsafe with replication enabled; if you wish to use replication, set useMmap to false\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5MDQ5NA=="}, "originalCommit": {"oid": "1f42cb3f97f2b115029e9a45dda619825c8cc73f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDU0NjU5OnYy", "diffSide": "RIGHT", "path": "broker/src/main/java/io/zeebe/broker/system/configuration/DataCfg.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoxNToxMFrOGP9pHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoxNToxMFrOGP9pHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5MTc3NA==", "bodyText": "Maybe find a more neutral name. Not sure if the name is universal or particular to Atomix. At the very least it could be more verbose like \"useMemoryMap()\" or something like that", "url": "https://github.com/camunda-cloud/zeebe/pull/4426#discussion_r419391774", "createdAt": "2020-05-04T12:15:10Z", "author": {"login": "pihme"}, "path": "broker/src/main/java/io/zeebe/broker/system/configuration/DataCfg.java", "diffHunk": "@@ -64,10 +67,22 @@ public int getLogIndexDensity() {\n     return logIndexDensity;\n   }\n \n-  public void setLogIndexDensity(int logIndexDensity) {\n+  public void setLogIndexDensity(final int logIndexDensity) {\n     this.logIndexDensity = logIndexDensity;\n   }\n \n+  public boolean useMmap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f42cb3f97f2b115029e9a45dda619825c8cc73f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDU1NjUzOnYy", "diffSide": "RIGHT", "path": "broker/src/test/java/io/zeebe/broker/system/SystemContextTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoxODoxMlrOGP9vJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjo1MjozOVrOGP-5kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5MzMxOQ==", "bodyText": "Personally, not a fan of the expectedException rule. I would rather use Assertions.assertThatThronwBy(..) as it makes clearer where the exception is expected.\nFee free to ignore this comment, because it fits to the other test methods in this class.", "url": "https://github.com/camunda-cloud/zeebe/pull/4426#discussion_r419393319", "createdAt": "2020-05-04T12:18:12Z", "author": {"login": "pihme"}, "path": "broker/src/test/java/io/zeebe/broker/system/SystemContextTest.java", "diffHunk": "@@ -131,6 +131,20 @@ public void shouldNotThrowExceptionIfSnapshotPeriodIsEqualToOneMinute() {\n         .isEqualTo(Duration.ofMinutes(1));\n   }\n \n+  @Test\n+  public void shouldInvalidateConfigIfUseMmapTrueWithReplication() {\n+    // given\n+    final BrokerCfg brokerCfg = new BrokerCfg();\n+    brokerCfg.getData().setUseMmap(true);\n+    brokerCfg.getCluster().setClusterSize(2);\n+    brokerCfg.getCluster().setReplicationFactor(2);\n+\n+    // then\n+    expectedException.expect(IllegalStateException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f42cb3f97f2b115029e9a45dda619825c8cc73f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQxMjM3MA==", "bodyText": "Hm, I also prefer assert but in this case I kept it as you said, since it was consistent with the rest of the tests \ud83d\ude05 I'd also lean towards keeping things consistent over my personal preference", "url": "https://github.com/camunda-cloud/zeebe/pull/4426#discussion_r419412370", "createdAt": "2020-05-04T12:52:39Z", "author": {"login": "npepinpe"}, "path": "broker/src/test/java/io/zeebe/broker/system/SystemContextTest.java", "diffHunk": "@@ -131,6 +131,20 @@ public void shouldNotThrowExceptionIfSnapshotPeriodIsEqualToOneMinute() {\n         .isEqualTo(Duration.ofMinutes(1));\n   }\n \n+  @Test\n+  public void shouldInvalidateConfigIfUseMmapTrueWithReplication() {\n+    // given\n+    final BrokerCfg brokerCfg = new BrokerCfg();\n+    brokerCfg.getData().setUseMmap(true);\n+    brokerCfg.getCluster().setClusterSize(2);\n+    brokerCfg.getCluster().setReplicationFactor(2);\n+\n+    // then\n+    expectedException.expect(IllegalStateException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5MzMxOQ=="}, "originalCommit": {"oid": "1f42cb3f97f2b115029e9a45dda619825c8cc73f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMDU2MTAzOnYy", "diffSide": "RIGHT", "path": "broker/src/test/java/io/zeebe/broker/system/configuration/DataCfgTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoxOTozN1rOGP9x1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMjoxOTozN1rOGP9x1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM5NDAwNw==", "bodyText": "Please add a test for the default value, if setUseMmap was never called", "url": "https://github.com/camunda-cloud/zeebe/pull/4426#discussion_r419394007", "createdAt": "2020-05-04T12:19:37Z", "author": {"login": "pihme"}, "path": "broker/src/test/java/io/zeebe/broker/system/configuration/DataCfgTest.java", "diffHunk": "@@ -30,4 +31,30 @@ public void shouldSanitizeDirectories() {\n \n     assertThat(actual).isEqualTo(expected);\n   }\n+\n+  @Test\n+  public void shouldGetMappedAtomixStorageLevel() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f42cb3f97f2b115029e9a45dda619825c8cc73f"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4767, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}