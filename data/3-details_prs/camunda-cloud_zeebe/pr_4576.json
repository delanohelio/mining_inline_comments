{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNzc5NTk5", "number": 4576, "title": "chore(engine): migrate sequence flow processor", "bodyText": "Description\n\nmock a BPMN element processor to simplify the implementation\njoin incoming sequence flows on a parallel gateway\nremove unused handlers\n\nRelated issues\ncloses #4479\nPull Request Checklist\n\n All commit messages match our commit message guidelines\n The submitting code follows our code style\n If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-05-22T08:09:40Z", "url": "https://github.com/camunda-cloud/zeebe/pull/4576", "merged": true, "mergeCommit": {"oid": "b3a28720da3e49658377fc415f58018ef3bd91ed"}, "closed": true, "closedAt": "2020-05-25T06:04:27Z", "author": {"login": "saig0"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjtt65gH2gAyNDIxNzc5NTk5OjhlZjgzZTk0ZDllNWJmZTkwMGQ5NjI4NmVkMDgyYTY0YWNhYjk2ZWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjxTw3AFqTQxNjg0NTU5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8ef83e94d9e5bfe900d96286ed082a64acab96ea", "author": {"user": {"login": "saig0", "name": "Philipp Ossler"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8ef83e94d9e5bfe900d96286ed082a64acab96ea", "committedDate": "2020-05-22T08:09:19Z", "message": "chore(engine): migrate sequence flow processor\n\n* mock a BPMN element processor to simplify the implementation\n* join incoming sequence flows on parallel gateway\n* remove unused handlers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2ODQ1NTk5", "url": "https://github.com/camunda-cloud/zeebe/pull/4576#pullrequestreview-416845599", "createdAt": "2020-05-22T11:39:25Z", "commit": {"oid": "8ef83e94d9e5bfe900d96286ed082a64acab96ea"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTozOToyNVrOGZUHVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo1MDoyM1rOGZUYZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5NzE0Mg==", "bodyText": "Considering our little thought experiment regarding a different way to deal with sequence flow processing, I would like to use onActivated here. That would then be the state in which the flow is actually taken (while activating is the step in which the condition could be checked.", "url": "https://github.com/camunda-cloud/zeebe/pull/4576#discussion_r429197142", "createdAt": "2020-05-22T11:39:25Z", "author": {"login": "korthout"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/BpmnStreamProcessor.java", "diffHunk": "@@ -142,6 +142,11 @@ private void processEvent(\n       case ELEMENT_TERMINATED:\n         processor.onTerminated(element, context);\n         break;\n+      case SEQUENCE_FLOW_TAKEN:\n+        // in order to keep the implementation simple, a sequence flow acts as an element that can\n+        // process `activating`\n+        processor.onActivating(element, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef83e94d9e5bfe900d96286ed082a64acab96ea"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5ODM3Ng==", "bodyText": "\ud83d\udc7e", "url": "https://github.com/camunda-cloud/zeebe/pull/4576#discussion_r429198376", "createdAt": "2020-05-22T11:42:34Z", "author": {"login": "korthout"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/sequenceflow/SequenceFlowProcessor.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Copyright Camunda Services GmbH and/or licensed to Camunda Services GmbH under\n+ * one or more contributor license agreements. See the NOTICE file distributed\n+ * with this work for additional information regarding copyright ownership.\n+ * Licensed under the Zeebe Community License 1.0. You may not use this file\n+ * except in compliance with the Zeebe Community License 1.0.\n+ */\n+package io.zeebe.engine.nwe.sequenceflow;\n+\n+import io.zeebe.engine.nwe.BpmnElementContext;\n+import io.zeebe.engine.nwe.BpmnElementProcessor;\n+import io.zeebe.engine.nwe.behavior.BpmnBehaviors;\n+import io.zeebe.engine.nwe.behavior.BpmnDeferredRecordsBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateBehavior;\n+import io.zeebe.engine.nwe.behavior.BpmnStateTransitionBehavior;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableFlowNode;\n+import io.zeebe.engine.processor.workflow.deployment.model.element.ExecutableSequenceFlow;\n+import io.zeebe.engine.state.instance.IndexedRecord;\n+import io.zeebe.protocol.record.intent.WorkflowInstanceIntent;\n+import io.zeebe.protocol.record.value.BpmnElementType;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * A sequence flow doesn't have a proper lifecycle as the other BPMN elements. It can only be taken.\n+ * However, it implements the same interface to keep the rest of implementation simple. But only the\n+ * method {@link #onActivating(ExecutableSequenceFlow, BpmnElementContext)} perform the action.\n+ * Calling other methods causes an exception.\n+ */\n+public final class SequenceFlowProcessor implements BpmnElementProcessor<ExecutableSequenceFlow> {\n+\n+  private final BpmnStateTransitionBehavior stateTransitionBehavior;\n+  private final BpmnStateBehavior stateBehavior;\n+  private final BpmnDeferredRecordsBehavior deferredRecordsBehavior;\n+\n+  public SequenceFlowProcessor(final BpmnBehaviors bpmnBehaviors) {\n+    stateTransitionBehavior = bpmnBehaviors.stateTransitionBehavior();\n+    stateBehavior = bpmnBehaviors.stateBehavior();\n+    deferredRecordsBehavior = bpmnBehaviors.deferredRecordsBehavior();\n+  }\n+\n+  @Override\n+  public Class<ExecutableSequenceFlow> getType() {\n+    return ExecutableSequenceFlow.class;\n+  }\n+\n+  @Override\n+  public void onActivating(final ExecutableSequenceFlow element, final BpmnElementContext context) {\n+    onSequenceFlowTaken(element, context);\n+  }\n+\n+  @Override\n+  public void onActivated(final ExecutableSequenceFlow element, final BpmnElementContext context) {\n+    throw new UnsupportedSequenceFlowOperationException(context);\n+  }\n+\n+  @Override\n+  public void onCompleting(final ExecutableSequenceFlow element, final BpmnElementContext context) {\n+    throw new UnsupportedSequenceFlowOperationException(context);\n+  }\n+\n+  @Override\n+  public void onCompleted(final ExecutableSequenceFlow element, final BpmnElementContext context) {\n+    throw new UnsupportedSequenceFlowOperationException(context);\n+  }\n+\n+  @Override\n+  public void onTerminating(\n+      final ExecutableSequenceFlow element, final BpmnElementContext context) {\n+    throw new UnsupportedSequenceFlowOperationException(context);\n+  }\n+\n+  @Override\n+  public void onTerminated(final ExecutableSequenceFlow element, final BpmnElementContext context) {\n+    throw new UnsupportedSequenceFlowOperationException(context);\n+  }\n+\n+  @Override\n+  public void onEventOccurred(\n+      final ExecutableSequenceFlow element, final BpmnElementContext context) {\n+    throw new UnsupportedSequenceFlowOperationException(context);\n+  }\n+\n+  private void onSequenceFlowTaken(\n+      final ExecutableSequenceFlow element, final BpmnElementContext context) {\n+\n+    final var targetElement = element.getTarget();\n+\n+    if (targetElement.getElementType() == BpmnElementType.PARALLEL_GATEWAY) {\n+      joinOnParallelGateway(targetElement, context);\n+\n+    } else {\n+      stateTransitionBehavior.activateElementInstanceInFlowScope(context, targetElement);\n+    }\n+  }\n+\n+  private void joinOnParallelGateway(\n+      final ExecutableFlowNode parallelGateway, final BpmnElementContext context) {\n+\n+    // before the parallel gateway is activated, each incoming sequence flow of the gateway must be\n+    // taken (at least once)\n+\n+    // if a sequence flow is taken more than once then the redundant token remains for the next\n+    // activation of the gateway (Tetris principle)\n+\n+    final var flowScopeContext = stateBehavior.getFlowScopeContext(context);\n+\n+    // store which sequence flows are taken as deferred records\n+    deferredRecordsBehavior.deferNewRecord(\n+        flowScopeContext,\n+        context.getElementInstanceKey(),\n+        context.getRecordValue(),\n+        context.getIntent());\n+\n+    final var tokensBySequenceFlow =\n+        deferredRecordsBehavior.getDeferredRecords(flowScopeContext).stream()\n+            .filter(record -> record.getState() == WorkflowInstanceIntent.SEQUENCE_FLOW_TAKEN)\n+            .filter(record -> isIncomingSequenceFlow(record, parallelGateway))\n+            .collect(Collectors.groupingBy(record -> record.getValue().getElementIdBuffer()));\n+\n+    if (tokensBySequenceFlow.size() == parallelGateway.getIncoming().size()) {\n+      // all incoming sequence flows are taken, so the gateway can be activated\n+\n+      final var flowScopeInstance = stateBehavior.getFlowScopeInstance(context);\n+\n+      // consume one token per sequence flow\n+      tokensBySequenceFlow.forEach(\n+          (sequenceFlow, tokens) -> {\n+            final var firstToken = tokens.get(0);\n+            deferredRecordsBehavior.removeDeferredRecord(flowScopeContext, firstToken);\n+\n+            flowScopeInstance.consumeToken();\n+          });\n+\n+      // spawn a new token for the activated gateway\n+      flowScopeInstance.spawnToken();\n+      stateBehavior.updateElementInstance(flowScopeInstance);\n+\n+      stateTransitionBehavior.activateElementInstanceInFlowScope(context, parallelGateway);\n+    }\n+  }\n+\n+  private boolean isIncomingSequenceFlow(\n+      final IndexedRecord record, final ExecutableFlowNode parallelGateway) {\n+    final var elementId = record.getValue().getElementIdBuffer();\n+\n+    for (final ExecutableSequenceFlow incomingSequenceFlow : parallelGateway.getIncoming()) {\n+      if (elementId.equals(incomingSequenceFlow.getId())) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n+  private static final class UnsupportedSequenceFlowOperationException\n+      extends UnsupportedOperationException {\n+\n+    private static final String MESSAGE =\n+        \"This is not the method you're looking for. [context: %s]\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef83e94d9e5bfe900d96286ed082a64acab96ea"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIwMTUwOA==", "bodyText": "This method is quite similar to BpmnStateTransitionBehavior#takeSequenceFlow, but there we also do:\nstateBehavior.spawnToken(context);\n\nShould we do that here too?", "url": "https://github.com/camunda-cloud/zeebe/pull/4576#discussion_r429201508", "createdAt": "2020-05-22T11:50:23Z", "author": {"login": "korthout"}, "path": "engine/src/main/java/io/zeebe/engine/nwe/behavior/BpmnStateTransitionBehavior.java", "diffHunk": "@@ -154,6 +154,25 @@ public ElementInstance activateChildInstance(\n     return stateBehavior.createChildElementInstance(context, childInstanceKey, childInstanceRecord);\n   }\n \n+  public void activateElementInstanceInFlowScope(\n+      final BpmnElementContext context, final ExecutableFlowElement element) {\n+\n+    final var elementInstanceRecord =\n+        context\n+            .getRecordValue()\n+            .setFlowScopeKey(context.getFlowScopeKey())\n+            .setElementId(element.getId())\n+            .setBpmnElementType(element.getElementType());\n+\n+    final var elementInstanceKey = keyGenerator.nextKey();\n+\n+    streamWriter.appendNewEvent(\n+        elementInstanceKey, WorkflowInstanceIntent.ELEMENT_ACTIVATING, elementInstanceRecord);\n+\n+    stateBehavior.createElementInstanceInFlowScope(\n+        context, elementInstanceKey, elementInstanceRecord);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ef83e94d9e5bfe900d96286ed082a64acab96ea"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2833, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}