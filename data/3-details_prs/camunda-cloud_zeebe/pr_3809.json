{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNDk0MTky", "number": 3809, "title": "chore(clients/go): time out container wait strategy and output container logs", "bodyText": "Description\n\ntimes out container start up and outputs container logs when it happens\n\nRelated issues\ncloses #3641\nPull Request Checklist\n\n All commit messages match our commit message guidelines\n The submitting code follows our code style\n If submitting code, please run mvn clean install -DskipTests locally before committing", "createdAt": "2020-02-07T16:25:04Z", "url": "https://github.com/camunda-cloud/zeebe/pull/3809", "merged": true, "mergeCommit": {"oid": "0fe302f522969700f9f5f26ea7695bb0aa1bfaa0"}, "closed": true, "closedAt": "2020-02-10T13:30:10Z", "author": {"login": "npepinpe"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCB5jdAFqTM1NTI3NzM1NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcC80dWABqjMwMjI2MjIzNTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1Mjc3MzU1", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#pullrequestreview-355277355", "createdAt": "2020-02-07T16:26:42Z", "commit": {"oid": "c88ada2a716338fba2dd1245a59e336af0f039c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyNjo0MlrOFnCvBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyNjo0MlrOFnCvBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MzU4OA==", "bodyText": "if block ends with a return statement, so drop this else and outdent its block (move short variable declaration to its own line if necessary) (from golint)", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#discussion_r376483588", "createdAt": "2020-02-07T16:26:42Z", "author": {"login": "golangcibot"}, "path": "clients/go/internal/containersuite/containerSuite.go", "diffHunk": "@@ -57,6 +59,35 @@ func (s zeebeWaitStrategy) WaitUntilReady(ctx context.Context, target wait.Strat\n \t\treturn err\n \t}\n \n+\tdefer func() {\n+\t\t_ = zbClient.Close()\n+\t}()\n+\n+\tfinishedChan := make(chan error, 1)\n+\tgo s.waitForTopology(finishedChan, zbClient)\n+\n+\tselect {\n+\tcase err = <-finishedChan:\n+\t\treturn err\n+\tcase <-time.After(utils.DefaultContainerWaitTimeout):\n+\t\treader, err := target.Logs(ctx)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container, and failed to obtain container logs: %w\", err)\n+\t\t}\n+\t\tif bytes, err := ioutil.ReadAll(reader); err != nil {\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"=====================================\\n\")\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"Container logs\\n\")\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"=====================================\\n\")\n+\t\t\t_, _ = fmt.Fprintf(os.Stderr, \"%s\", bytes)\n+\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container\")\n+\t\t} else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c88ada2a716338fba2dd1245a59e336af0f039c3"}, "originalPosition": 35}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fdc5a86a5bf5acbf5368344d6a7be5087d6b560d", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/fdc5a86a5bf5acbf5368344d6a7be5087d6b560d", "committedDate": "2020-02-08T15:27:06Z", "message": "chore(clients/go): increase default container timeout"}, "afterCommit": {"oid": "5fb10cbf500f62536c9f307b817ab8cae661cb3f", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/5fb10cbf500f62536c9f307b817ab8cae661cb3f", "committedDate": "2020-02-10T08:44:30Z", "message": "chore(clients/go): increase default container timeout"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1ODAwOTkx", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#pullrequestreview-355800991", "createdAt": "2020-02-10T09:47:33Z", "commit": {"oid": "5fb10cbf500f62536c9f307b817ab8cae661cb3f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQwOTo0NzozM1rOFnfl4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMDozNjo1NlrOFnhMtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk1NjM4NA==", "bodyText": "I think you want to do the opposite here, print the logs if the error is nil", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#discussion_r376956384", "createdAt": "2020-02-10T09:47:33Z", "author": {"login": "MiguelPires"}, "path": "clients/go/internal/containersuite/containerSuite.go", "diffHunk": "@@ -57,6 +59,35 @@ func (s zeebeWaitStrategy) WaitUntilReady(ctx context.Context, target wait.Strat\n \t\treturn err\n \t}\n \n+\tdefer func() {\n+\t\t_ = zbClient.Close()\n+\t}()\n+\n+\tfinishedChan := make(chan error, 1)\n+\tgo s.waitForTopology(finishedChan, zbClient)\n+\n+\tselect {\n+\tcase err = <-finishedChan:\n+\t\treturn err\n+\tcase <-time.After(utils.DefaultContainerWaitTimeout):\n+\t\treader, err := target.Logs(ctx)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container, and failed to obtain container logs: %w\", err)\n+\t\t}\n+\t\tif bytes, err := ioutil.ReadAll(reader); err != nil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb10cbf500f62536c9f307b817ab8cae661cb3f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk2MjkzNQ==", "bodyText": "Here you can just do errors.New since you're not formatting. The end result is the same though so not a big deal", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#discussion_r376962935", "createdAt": "2020-02-10T09:58:53Z", "author": {"login": "MiguelPires"}, "path": "clients/go/internal/containersuite/containerSuite.go", "diffHunk": "@@ -57,6 +59,35 @@ func (s zeebeWaitStrategy) WaitUntilReady(ctx context.Context, target wait.Strat\n \t\treturn err\n \t}\n \n+\tdefer func() {\n+\t\t_ = zbClient.Close()\n+\t}()\n+\n+\tfinishedChan := make(chan error, 1)\n+\tgo s.waitForTopology(finishedChan, zbClient)\n+\n+\tselect {\n+\tcase err = <-finishedChan:\n+\t\treturn err\n+\tcase <-time.After(utils.DefaultContainerWaitTimeout):\n+\t\treader, err := target.Logs(ctx)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container, and failed to obtain container logs: %w\", err)\n+\t\t}\n+\t\tif bytes, err := ioutil.ReadAll(reader); err != nil {\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"=====================================\\n\")\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"Container logs\\n\")\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"=====================================\\n\")\n+\t\t\t_, _ = fmt.Fprintf(os.Stderr, \"%s\", bytes)\n+\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb10cbf500f62536c9f307b817ab8cae661cb3f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk2MzMwNw==", "bodyText": "Error messages shouldn't be capitalized or end with punctuation because they're usually wrapped (this applies to the other errors as well)", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#discussion_r376963307", "createdAt": "2020-02-10T09:59:38Z", "author": {"login": "MiguelPires"}, "path": "clients/go/internal/containersuite/containerSuite.go", "diffHunk": "@@ -57,6 +59,35 @@ func (s zeebeWaitStrategy) WaitUntilReady(ctx context.Context, target wait.Strat\n \t\treturn err\n \t}\n \n+\tdefer func() {\n+\t\t_ = zbClient.Close()\n+\t}()\n+\n+\tfinishedChan := make(chan error, 1)\n+\tgo s.waitForTopology(finishedChan, zbClient)\n+\n+\tselect {\n+\tcase err = <-finishedChan:\n+\t\treturn err\n+\tcase <-time.After(utils.DefaultContainerWaitTimeout):\n+\t\treader, err := target.Logs(ctx)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container, and failed to obtain container logs: %w\", err)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb10cbf500f62536c9f307b817ab8cae661cb3f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3MTAyOQ==", "bodyText": "If this method stays the same, one thing we can do here is have the parameter as finished chan<- error which makes this a write-only channel and explicitly tells us what happens with it.", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#discussion_r376971029", "createdAt": "2020-02-10T10:14:17Z", "author": {"login": "MiguelPires"}, "path": "clients/go/internal/containersuite/containerSuite.go", "diffHunk": "@@ -57,6 +59,35 @@ func (s zeebeWaitStrategy) WaitUntilReady(ctx context.Context, target wait.Strat\n \t\treturn err\n \t}\n \n+\tdefer func() {\n+\t\t_ = zbClient.Close()\n+\t}()\n+\n+\tfinishedChan := make(chan error, 1)\n+\tgo s.waitForTopology(finishedChan, zbClient)\n+\n+\tselect {\n+\tcase err = <-finishedChan:\n+\t\treturn err\n+\tcase <-time.After(utils.DefaultContainerWaitTimeout):\n+\t\treader, err := target.Logs(ctx)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container, and failed to obtain container logs: %w\", err)\n+\t\t}\n+\t\tif bytes, err := ioutil.ReadAll(reader); err != nil {\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"=====================================\\n\")\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"Container logs\\n\")\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"=====================================\\n\")\n+\t\t\t_, _ = fmt.Fprintf(os.Stderr, \"%s\", bytes)\n+\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container\")\n+\t\t}\n+\n+\t\treturn fmt.Errorf(\"Timed out awaiting container, but failed to read container logs: %w\", err)\n+\t}\n+}\n+\n+func (s zeebeWaitStrategy) waitForTopology(finishedChan chan error, zbClient zbc.Client) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb10cbf500f62536c9f307b817ab8cae661cb3f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk3MTU4Ng==", "bodyText": "I wouldn't pass the channel into the method since I think it restricts the reusability of this method (you can only use it in a separate goroutine and you have to give it a channel). I'd either: a) make the method synchronous and have the lambda put the error value in the channel or b) make it asynchronous and self contained, by having it create the channel and go routine itself", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#discussion_r376971586", "createdAt": "2020-02-10T10:15:26Z", "author": {"login": "MiguelPires"}, "path": "clients/go/internal/containersuite/containerSuite.go", "diffHunk": "@@ -57,6 +59,35 @@ func (s zeebeWaitStrategy) WaitUntilReady(ctx context.Context, target wait.Strat\n \t\treturn err\n \t}\n \n+\tdefer func() {\n+\t\t_ = zbClient.Close()\n+\t}()\n+\n+\tfinishedChan := make(chan error, 1)\n+\tgo s.waitForTopology(finishedChan, zbClient)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb10cbf500f62536c9f307b817ab8cae661cb3f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njk4MjcxMA==", "bodyText": "Minor thing: you can do fmt.Fprintln if you want", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#discussion_r376982710", "createdAt": "2020-02-10T10:36:56Z", "author": {"login": "MiguelPires"}, "path": "clients/go/internal/containersuite/containerSuite.go", "diffHunk": "@@ -57,6 +59,35 @@ func (s zeebeWaitStrategy) WaitUntilReady(ctx context.Context, target wait.Strat\n \t\treturn err\n \t}\n \n+\tdefer func() {\n+\t\t_ = zbClient.Close()\n+\t}()\n+\n+\tfinishedChan := make(chan error, 1)\n+\tgo s.waitForTopology(finishedChan, zbClient)\n+\n+\tselect {\n+\tcase err = <-finishedChan:\n+\t\treturn err\n+\tcase <-time.After(utils.DefaultContainerWaitTimeout):\n+\t\treader, err := target.Logs(ctx)\n+\t\tif err != nil {\n+\t\t\treturn fmt.Errorf(\"Timed out awaiting container, and failed to obtain container logs: %w\", err)\n+\t\t}\n+\t\tif bytes, err := ioutil.ReadAll(reader); err != nil {\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"=====================================\\n\")\n+\t\t\t_, _ = fmt.Fprint(os.Stderr, \"Container logs\\n\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fb10cbf500f62536c9f307b817ab8cae661cb3f"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1OTE4MjE5", "url": "https://github.com/camunda-cloud/zeebe/pull/3809#pullrequestreview-355918219", "createdAt": "2020-02-10T13:03:56Z", "commit": {"oid": "8182c80d2b9f59f09adfdc10f83aa1496032fff5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fe302f522969700f9f5f26ea7695bb0aa1bfaa0", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/0fe302f522969700f9f5f26ea7695bb0aa1bfaa0", "committedDate": "2020-02-10T13:05:24Z", "message": "chore(clients/go): time out container wait strategy and output container logs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8182c80d2b9f59f09adfdc10f83aa1496032fff5", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8182c80d2b9f59f09adfdc10f83aa1496032fff5", "committedDate": "2020-02-10T12:31:39Z", "message": "chore(clients/go): apply review feedback"}, "afterCommit": {"oid": "0fe302f522969700f9f5f26ea7695bb0aa1bfaa0", "author": {"user": {"login": "npepinpe", "name": "Nicolas Pepin-Perreault"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/0fe302f522969700f9f5f26ea7695bb0aa1bfaa0", "committedDate": "2020-02-10T13:05:24Z", "message": "chore(clients/go): time out container wait strategy and output container logs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3116, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}