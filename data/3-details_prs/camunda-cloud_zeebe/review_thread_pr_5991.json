{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MjIyMjMw", "number": 5991, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo1NDoxMFrOFDRWxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo1NDoxMFrOFDRWxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4OTc0NDA2OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processing/job/ActivateJobsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo1NDoxMFrOIC1fPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo1NDoxMFrOIC1fPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0NDQxMw==", "bodyText": "Verify the job types more strictly.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final var types =\n          \n          \n            \n                    activatedJobBatch.getJobs().stream().map(JobRecordValue::getType).distinct().count();\n          \n          \n            \n                assertThat(types).isEqualTo(1);\n          \n          \n            \n                assertThat(activatedJobBatch.getJobs()).extracting(JobRecordValue::getType).containsOnly(taskType);", "url": "https://github.com/camunda-cloud/zeebe/pull/5991#discussion_r539844413", "createdAt": "2020-12-10T04:54:10Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processing/job/ActivateJobsTest.java", "diffHunk": "@@ -239,16 +238,14 @@ public void shouldOnlyReturnJobsOfCorrectType() {\n     final List<Long> jobs = activateJobs(taskType, 7);\n \n     // then\n-    assertThat(jobs).containsOnlyElementsOf(jobKeys);\n+    assertThat(jobs).containsExactly(jobKeys.toArray(new Long[0]));\n \n-    final List<Record<JobRecordValue>> records =\n-        jobRecords(JobIntent.ACTIVATED)\n-            .withType(taskType)\n-            .limit(jobKeys.size())\n-            .collect(Collectors.toList());\n+    final var activatedJobBatch = getActivatedJobBatch();\n+    assertThat(activatedJobBatch).hasJobKeys(jobKeys);\n \n-    assertThat(records).extracting(Record::getKey).containsOnlyElementsOf(jobKeys);\n-    assertThat(records).extracting(\"value.type\").containsOnly(taskType);\n+    final var types =\n+        activatedJobBatch.getJobs().stream().map(JobRecordValue::getType).distinct().count();\n+    assertThat(types).isEqualTo(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87cd9d1572882dcce08d13100ad216d7d6593770"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 97, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}