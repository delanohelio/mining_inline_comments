{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1NzU5Nzg3", "number": 5903, "title": "Endpoint to pause and resume exporting", "bodyText": "Description\n\nPause/Resume exporter via admin endpoint\nInclude exporter state in partition status returned by admin endpoint\n\nRelated issues\ncloses #5902\nDefinition of Done\nNot all items need to be done depending on the issue and the pull request.\nCode changes:\n\n The changes are backwards compatibility with previous versions\n If it fixes a bug then PRs are created to backport the fix to the last two minor versions. You can trigger a backport by assigning labels (e.g. backport stable/0.25) to the PR, in case that fails you need to create backports manually.\n\nTesting:\n\n There are unit/integration tests that verify all acceptance criterias of the issue\n New tests are written to ensure backwards compatibility with further versions\n The behavior is tested manually\n The impact of the changes is verified by a benchmark\n\nDocumentation:\n\n The documentation is updated (e.g. BPMN reference, configuration, examples, get-started guides, etc.)\n New content is added to the release announcement", "createdAt": "2020-11-23T14:13:31Z", "url": "https://github.com/camunda-cloud/zeebe/pull/5903", "merged": true, "mergeCommit": {"oid": "ba5267bd3c4378632954e51577a9dd86c42fd023"}, "closed": true, "closedAt": "2020-11-30T10:01:58Z", "author": {"login": "deepthidevaki"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfV1o-gBqjQwMjc4NjcyOTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgn-mSgBqjQwNDYyNDQ1NTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aad14cdadc0e613473d01190b96d3cfeb163e1e9", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/aad14cdadc0e613473d01190b96d3cfeb163e1e9", "committedDate": "2020-11-23T13:50:03Z", "message": "feat(broker): expose pause exporting via admin api"}, "afterCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/b926a85a4901cc4a8755579f617e2ca5e160f2dc", "committedDate": "2020-11-23T14:15:12Z", "message": "feat(broker): expose pause exporting via admin api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MzI4MzQ1", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#pullrequestreview-538328345", "createdAt": "2020-11-25T09:56:55Z", "commit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo1Njo1NlrOH5rkOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDozNzoxNFrOH52SgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0NDY2NA==", "bodyText": "Maybe we can move this out to a method like shouldExport. It gets a bit out of hand", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530244664", "createdAt": "2020-11-25T09:56:56Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/exporter/stream/ExporterDirector.java", "diffHunk": "@@ -235,7 +256,7 @@ private void skipRecord(final LoggedEvent currentEvent) {\n   }\n \n   private void readNextEvent() {\n-    if (isOpened.get() && logStreamReader.hasNext() && !inExportingPhase) {\n+    if (isOpened.get() && logStreamReader.hasNext() && !inExportingPhase && !isPaused) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0Njg0OQ==", "bodyText": "We probably also want to have one endpoint to pause everything right?", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530246849", "createdAt": "2020-11-25T10:00:00Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminService.java", "diffHunk": "@@ -17,6 +17,12 @@\n   /** Request a partition to resume its StreamProcessor */\n   void resumeStreamProcessing();\n \n+  /** Request a partition to pause exporting */\n+  void pauseExporting();\n+\n+  /** Request a partition to resume exporting */\n+  void resumeExporting();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwMTY4MA==", "bodyText": "So we have a optional in a future? sounds like duplicated complexity \ud83e\udd14", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530401680", "createdAt": "2020-11-25T14:11:20Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -83,16 +96,23 @@ public void prepareForUpgrade() {\n \n   private CompletableFuture<PartitionStatus> getPartitionStatus(final ZeebePartition partition) {\n     final CompletableFuture<PartitionStatus> partitionStatus = new CompletableFuture<>();\n-    getStreamProcessor(partition)\n-        .onComplete(\n-            (streamProcessor, throwable) -> {\n-              if (throwable != null) {\n-                partitionStatus.completeExceptionally(throwable);\n+    final var streamProcessorFuture = toCompletableFuture(partition.getStreamProcessor());\n+    final var exporterDirectorFuture = toCompletableFuture(partition.getExporterDirector());\n+    CompletableFuture.allOf(streamProcessorFuture, exporterDirectorFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n                 return;\n               }\n-              streamProcessor.ifPresentOrElse(\n-                  sp -> getLeaderPartitionStatus(partition, sp, partitionStatus),\n-                  () -> getFollowerPartitionStatus(partition, partitionStatus));\n+              final var streamProcessor = streamProcessorFuture.join();\n+              final var exporterDirector = exporterDirectorFuture.join();\n+              if (streamProcessor.isPresent() && exporterDirector.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwMzIxNg==", "bodyText": "Normally it is wise to use enums for that. This would be more future proven. What are you doing if we add a new case like, stopped, canceled, interrupted.", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530403216", "createdAt": "2020-11-25T14:13:40Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -107,64 +127,77 @@ private void getFollowerPartitionStatus(\n   private void getLeaderPartitionStatus(\n       final ZeebePartition partition,\n       final StreamProcessor streamProcessor,\n+      final ExporterDirector exporterDirector,\n       final CompletableFuture<PartitionStatus> partitionStatus) {\n-    final var positionFuture = streamProcessor.getLastProcessedPositionAsync();\n-    positionFuture.onComplete(\n-        (processedPosition, positionRetrieveError) -> {\n-          if (positionRetrieveError != null) {\n-            partitionStatus.completeExceptionally(positionRetrieveError);\n-            return;\n-          }\n+    final var positionFuture = toCompletableFuture(streamProcessor.getLastProcessedPositionAsync());\n+    final var currentPhaseFuture = toCompletableFuture(streamProcessor.getCurrentPhase());\n+    final var exporterPhaseFuture = toCompletableFuture(exporterDirector.isExportingPaused());\n+    final var exporterPosition = exporterDirector.getState().getLowestPosition();\n+    final var snapshotId = getSnapshotId(partition);\n+    final var processedPositionInSnapshot =\n+        snapshotId\n+            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n+            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n+            .orElse(null);\n+\n+    CompletableFuture.allOf(positionFuture, currentPhaseFuture, exporterPhaseFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n+                return;\n+              }\n+              final var processedPosition = positionFuture.join();\n+              final var processorPhase = currentPhaseFuture.join();\n+              final var exporterPhase = exporterPhaseFuture.join() ? \"PAUSED\" : \"EXPORTING\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNDY0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n          \n          \n            \n                        .flatMap(FileBasedSnapshotMetadata::ofFileName)", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530404640", "createdAt": "2020-11-25T14:15:43Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -107,64 +127,77 @@ private void getFollowerPartitionStatus(\n   private void getLeaderPartitionStatus(\n       final ZeebePartition partition,\n       final StreamProcessor streamProcessor,\n+      final ExporterDirector exporterDirector,\n       final CompletableFuture<PartitionStatus> partitionStatus) {\n-    final var positionFuture = streamProcessor.getLastProcessedPositionAsync();\n-    positionFuture.onComplete(\n-        (processedPosition, positionRetrieveError) -> {\n-          if (positionRetrieveError != null) {\n-            partitionStatus.completeExceptionally(positionRetrieveError);\n-            return;\n-          }\n+    final var positionFuture = toCompletableFuture(streamProcessor.getLastProcessedPositionAsync());\n+    final var currentPhaseFuture = toCompletableFuture(streamProcessor.getCurrentPhase());\n+    final var exporterPhaseFuture = toCompletableFuture(exporterDirector.isExportingPaused());\n+    final var exporterPosition = exporterDirector.getState().getLowestPosition();\n+    final var snapshotId = getSnapshotId(partition);\n+    final var processedPositionInSnapshot =\n+        snapshotId\n+            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNTI3Ng==", "bodyText": "Would also be consistent with the processing phase, were we already have that.", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530405276", "createdAt": "2020-11-25T14:16:38Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -107,64 +127,77 @@ private void getFollowerPartitionStatus(\n   private void getLeaderPartitionStatus(\n       final ZeebePartition partition,\n       final StreamProcessor streamProcessor,\n+      final ExporterDirector exporterDirector,\n       final CompletableFuture<PartitionStatus> partitionStatus) {\n-    final var positionFuture = streamProcessor.getLastProcessedPositionAsync();\n-    positionFuture.onComplete(\n-        (processedPosition, positionRetrieveError) -> {\n-          if (positionRetrieveError != null) {\n-            partitionStatus.completeExceptionally(positionRetrieveError);\n-            return;\n-          }\n+    final var positionFuture = toCompletableFuture(streamProcessor.getLastProcessedPositionAsync());\n+    final var currentPhaseFuture = toCompletableFuture(streamProcessor.getCurrentPhase());\n+    final var exporterPhaseFuture = toCompletableFuture(exporterDirector.isExportingPaused());\n+    final var exporterPosition = exporterDirector.getState().getLowestPosition();\n+    final var snapshotId = getSnapshotId(partition);\n+    final var processedPositionInSnapshot =\n+        snapshotId\n+            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n+            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n+            .orElse(null);\n+\n+    CompletableFuture.allOf(positionFuture, currentPhaseFuture, exporterPhaseFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n+                return;\n+              }\n+              final var processedPosition = positionFuture.join();\n+              final var processorPhase = currentPhaseFuture.join();\n+              final var exporterPhase = exporterPhaseFuture.join() ? \"PAUSED\" : \"EXPORTING\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwMzIxNg=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNzY3MQ==", "bodyText": "I could swear that we had this functionality before somewhere :D", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530407671", "createdAt": "2020-11-25T14:19:46Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -107,64 +127,77 @@ private void getFollowerPartitionStatus(\n   private void getLeaderPartitionStatus(\n       final ZeebePartition partition,\n       final StreamProcessor streamProcessor,\n+      final ExporterDirector exporterDirector,\n       final CompletableFuture<PartitionStatus> partitionStatus) {\n-    final var positionFuture = streamProcessor.getLastProcessedPositionAsync();\n-    positionFuture.onComplete(\n-        (processedPosition, positionRetrieveError) -> {\n-          if (positionRetrieveError != null) {\n-            partitionStatus.completeExceptionally(positionRetrieveError);\n-            return;\n-          }\n+    final var positionFuture = toCompletableFuture(streamProcessor.getLastProcessedPositionAsync());\n+    final var currentPhaseFuture = toCompletableFuture(streamProcessor.getCurrentPhase());\n+    final var exporterPhaseFuture = toCompletableFuture(exporterDirector.isExportingPaused());\n+    final var exporterPosition = exporterDirector.getState().getLowestPosition();\n+    final var snapshotId = getSnapshotId(partition);\n+    final var processedPositionInSnapshot =\n+        snapshotId\n+            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n+            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n+            .orElse(null);\n+\n+    CompletableFuture.allOf(positionFuture, currentPhaseFuture, exporterPhaseFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n+                return;\n+              }\n+              final var processedPosition = positionFuture.join();\n+              final var processorPhase = currentPhaseFuture.join();\n+              final var exporterPhase = exporterPhaseFuture.join() ? \"PAUSED\" : \"EXPORTING\";\n+              final var status =\n+                  PartitionStatus.ofLeader(\n+                      processedPosition,\n+                      snapshotId.orElse(null),\n+                      processedPositionInSnapshot,\n+                      processorPhase,\n+                      exporterPhase,\n+                      exporterPosition);\n+              partitionStatus.complete(status);\n+            });\n+  }\n \n-          streamProcessor\n-              .getCurrentPhase()\n-              .onComplete(\n-                  (phase, phaseError) -> {\n-                    if (phaseError != null) {\n-                      partitionStatus.completeExceptionally(phaseError);\n-                      return;\n-                    }\n-\n-                    final var snapshotId = getSnapshotId(partition);\n-                    final var processedPositionInSnapshot =\n-                        snapshotId\n-                            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n-                            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n-                            .orElse(null);\n-                    final var status =\n-                        PartitionStatus.ofLeader(\n-                            processedPosition,\n-                            snapshotId.orElse(null),\n-                            processedPositionInSnapshot,\n-                            phase);\n-                    partitionStatus.complete(status);\n-                  });\n+  private <T> CompletableFuture<T> toCompletableFuture(final ActorFuture<T> actorFuture) {\n+    final CompletableFuture<T> future = new CompletableFuture<>();\n+    actorFuture.onComplete(\n+        (result, error) -> {\n+          if (error == null) {\n+            future.complete(result);\n+          } else {\n+            future.completeExceptionally(error);\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwODUzMQ==", "bodyText": "But why we need that actually?", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530408531", "createdAt": "2020-11-25T14:20:54Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -107,64 +127,77 @@ private void getFollowerPartitionStatus(\n   private void getLeaderPartitionStatus(\n       final ZeebePartition partition,\n       final StreamProcessor streamProcessor,\n+      final ExporterDirector exporterDirector,\n       final CompletableFuture<PartitionStatus> partitionStatus) {\n-    final var positionFuture = streamProcessor.getLastProcessedPositionAsync();\n-    positionFuture.onComplete(\n-        (processedPosition, positionRetrieveError) -> {\n-          if (positionRetrieveError != null) {\n-            partitionStatus.completeExceptionally(positionRetrieveError);\n-            return;\n-          }\n+    final var positionFuture = toCompletableFuture(streamProcessor.getLastProcessedPositionAsync());\n+    final var currentPhaseFuture = toCompletableFuture(streamProcessor.getCurrentPhase());\n+    final var exporterPhaseFuture = toCompletableFuture(exporterDirector.isExportingPaused());\n+    final var exporterPosition = exporterDirector.getState().getLowestPosition();\n+    final var snapshotId = getSnapshotId(partition);\n+    final var processedPositionInSnapshot =\n+        snapshotId\n+            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n+            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n+            .orElse(null);\n+\n+    CompletableFuture.allOf(positionFuture, currentPhaseFuture, exporterPhaseFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n+                return;\n+              }\n+              final var processedPosition = positionFuture.join();\n+              final var processorPhase = currentPhaseFuture.join();\n+              final var exporterPhase = exporterPhaseFuture.join() ? \"PAUSED\" : \"EXPORTING\";\n+              final var status =\n+                  PartitionStatus.ofLeader(\n+                      processedPosition,\n+                      snapshotId.orElse(null),\n+                      processedPositionInSnapshot,\n+                      processorPhase,\n+                      exporterPhase,\n+                      exporterPosition);\n+              partitionStatus.complete(status);\n+            });\n+  }\n \n-          streamProcessor\n-              .getCurrentPhase()\n-              .onComplete(\n-                  (phase, phaseError) -> {\n-                    if (phaseError != null) {\n-                      partitionStatus.completeExceptionally(phaseError);\n-                      return;\n-                    }\n-\n-                    final var snapshotId = getSnapshotId(partition);\n-                    final var processedPositionInSnapshot =\n-                        snapshotId\n-                            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n-                            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n-                            .orElse(null);\n-                    final var status =\n-                        PartitionStatus.ofLeader(\n-                            processedPosition,\n-                            snapshotId.orElse(null),\n-                            processedPositionInSnapshot,\n-                            phase);\n-                    partitionStatus.complete(status);\n-                  });\n+  private <T> CompletableFuture<T> toCompletableFuture(final ActorFuture<T> actorFuture) {\n+    final CompletableFuture<T> future = new CompletableFuture<>();\n+    actorFuture.onComplete(\n+        (result, error) -> {\n+          if (error == null) {\n+            future.complete(result);\n+          } else {\n+            future.completeExceptionally(error);\n+          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNzY3MQ=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwOTE2Nw==", "bodyText": "There is an actor.runOnCompletion(Collection<ActorFuture> futures);", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530409167", "createdAt": "2020-11-25T14:21:47Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -107,64 +127,77 @@ private void getFollowerPartitionStatus(\n   private void getLeaderPartitionStatus(\n       final ZeebePartition partition,\n       final StreamProcessor streamProcessor,\n+      final ExporterDirector exporterDirector,\n       final CompletableFuture<PartitionStatus> partitionStatus) {\n-    final var positionFuture = streamProcessor.getLastProcessedPositionAsync();\n-    positionFuture.onComplete(\n-        (processedPosition, positionRetrieveError) -> {\n-          if (positionRetrieveError != null) {\n-            partitionStatus.completeExceptionally(positionRetrieveError);\n-            return;\n-          }\n+    final var positionFuture = toCompletableFuture(streamProcessor.getLastProcessedPositionAsync());\n+    final var currentPhaseFuture = toCompletableFuture(streamProcessor.getCurrentPhase());\n+    final var exporterPhaseFuture = toCompletableFuture(exporterDirector.isExportingPaused());\n+    final var exporterPosition = exporterDirector.getState().getLowestPosition();\n+    final var snapshotId = getSnapshotId(partition);\n+    final var processedPositionInSnapshot =\n+        snapshotId\n+            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n+            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n+            .orElse(null);\n+\n+    CompletableFuture.allOf(positionFuture, currentPhaseFuture, exporterPhaseFuture)\n+        .whenComplete(\n+            (nothing, error) -> {\n+              if (error != null) {\n+                partitionStatus.completeExceptionally(error);\n+                return;\n+              }\n+              final var processedPosition = positionFuture.join();\n+              final var processorPhase = currentPhaseFuture.join();\n+              final var exporterPhase = exporterPhaseFuture.join() ? \"PAUSED\" : \"EXPORTING\";\n+              final var status =\n+                  PartitionStatus.ofLeader(\n+                      processedPosition,\n+                      snapshotId.orElse(null),\n+                      processedPositionInSnapshot,\n+                      processorPhase,\n+                      exporterPhase,\n+                      exporterPosition);\n+              partitionStatus.complete(status);\n+            });\n+  }\n \n-          streamProcessor\n-              .getCurrentPhase()\n-              .onComplete(\n-                  (phase, phaseError) -> {\n-                    if (phaseError != null) {\n-                      partitionStatus.completeExceptionally(phaseError);\n-                      return;\n-                    }\n-\n-                    final var snapshotId = getSnapshotId(partition);\n-                    final var processedPositionInSnapshot =\n-                        snapshotId\n-                            .flatMap(s -> FileBasedSnapshotMetadata.ofFileName(s))\n-                            .map(FileBasedSnapshotMetadata::getProcessedPosition)\n-                            .orElse(null);\n-                    final var status =\n-                        PartitionStatus.ofLeader(\n-                            processedPosition,\n-                            snapshotId.orElse(null),\n-                            processedPositionInSnapshot,\n-                            phase);\n-                    partitionStatus.complete(status);\n-                  });\n+  private <T> CompletableFuture<T> toCompletableFuture(final ActorFuture<T> actorFuture) {\n+    final CompletableFuture<T> future = new CompletableFuture<>();\n+    actorFuture.onComplete(\n+        (result, error) -> {\n+          if (error == null) {\n+            future.complete(result);\n+          } else {\n+            future.completeExceptionally(error);\n+          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQwNzY3MQ=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxNDY3OA==", "bodyText": "This is exact duplicates. Could we make it parameterized to reuse it?", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530414678", "createdAt": "2020-11-25T14:29:30Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/PartitionProcessingState.java", "diffHunk": "@@ -64,4 +67,37 @@ private void initProcessingStatus() {\n   public boolean shouldProcess() {\n     return isDiskSpaceAvailable() && !isProcessingPaused();\n   }\n+\n+  public boolean isExportingPaused() {\n+    return isExportingPaused;\n+  }\n+\n+  @SuppressWarnings({\"squid:S899\"})\n+  public void pauseExporting() throws IOException {\n+    final File persistedExporterPauseState = getPersistedExporterPauseState();\n+    persistedExporterPauseState.createNewFile();\n+    if (persistedExporterPauseState.exists()) {\n+      isExportingPaused = true;\n+    }\n+  }\n+\n+  public void resumeExporting() throws IOException {\n+    final File persistedExporterPauseState = getPersistedExporterPauseState();\n+    Files.deleteIfExists(persistedExporterPauseState.toPath());\n+    if (!persistedExporterPauseState.exists()) {\n+      isExportingPaused = false;\n+    }\n+  }\n+\n+  private File getPersistedExporterPauseState() {\n+    return raftPartition\n+        .dataDirectory()\n+        .toPath()\n+        .resolve(PERSISTED_EXPORTER_PAUSE_STATE_FILENAME)\n+        .toFile();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxNzg4Mg==", "bodyText": "Not sure whether I get this.\nWe first pause the exporting (which actually internally just persist the file), then we check whether there is a exporter and whether we should not export (which should always be the case i guess?!).\nMaybe it makes sense to rename the method so it is more clear what actually happens. We persist the pausing state and remove the check. I see no value in it?", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530417882", "createdAt": "2020-11-25T14:34:05Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/ZeebePartition.java", "diffHunk": "@@ -382,4 +383,42 @@ public void triggerSnapshot() {\n   public ActorFuture<Optional<StreamProcessor>> getStreamProcessor() {\n     return actor.call(() -> Optional.ofNullable(context.getStreamProcessor()));\n   }\n+\n+  public ActorFuture<Optional<ExporterDirector>> getExporterDirector() {\n+    return actor.call(() -> Optional.ofNullable(context.getExporterDirector()));\n+  }\n+\n+  public ActorFuture<Void> pauseExporting() {\n+    final CompletableActorFuture<Void> completed = new CompletableActorFuture<>();\n+    actor.call(\n+        () -> {\n+          try {\n+            context.pauseExporting();\n+\n+            if (context.getExporterDirector() != null && !context.shouldExport()) {\n+              context.getExporterDirector().pauseExporting().onComplete(completed);\n+            } else {\n+              completed.complete(null);\n+            }\n+          } catch (final IOException e) {\n+            LOG.error(\"Could not pause exporting\", e);\n+            completed.completeExceptionally(e);\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxOTAyNg==", "bodyText": "Is this maybe problematic? That we might have an race condition where we can export maybe one record because we are so fast?", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530419026", "createdAt": "2020-11-25T14:35:30Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/steps/ExporterDirectorPartitionStep.java", "diffHunk": "@@ -34,7 +34,14 @@\n \n     final ExporterDirector director = new ExporterDirector(exporterCtx);\n     context.setExporterDirector(director);\n-    return director.startAsync(context.getScheduler());\n+    final var started = director.startAsync(context.getScheduler());\n+    started.onComplete(\n+        (nothing, error) -> {\n+          if (error == null && !context.shouldExport()) {\n+            director.pauseExporting();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxOTMyMA==", "bodyText": "Might make sense to give the state as parameter of the startAsync?", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530419320", "createdAt": "2020-11-25T14:35:53Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/partitions/impl/steps/ExporterDirectorPartitionStep.java", "diffHunk": "@@ -34,7 +34,14 @@\n \n     final ExporterDirector director = new ExporterDirector(exporterCtx);\n     context.setExporterDirector(director);\n-    return director.startAsync(context.getScheduler());\n+    final var started = director.startAsync(context.getScheduler());\n+    started.onComplete(\n+        (nothing, error) -> {\n+          if (error == null && !context.shouldExport()) {\n+            director.pauseExporting();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxOTAyNg=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQxOTY5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                clientRule.createSingleJob(\"test\");", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530419695", "createdAt": "2020-11-25T14:36:21Z", "author": {"login": "Zelldon"}, "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceTest.java", "diffHunk": "@@ -79,7 +79,33 @@ public void shouldUnPauseStreamProcessorWhenRequested() {\n   }\n \n   @Test\n-  public void shouldPauseStreamProcessorAndTakeSnapshotWhenPrepareUgrade() {\n+  public void shouldPauseExporterWhenRequested() {\n+    // given\n+    clientRule.createSingleJob(\"test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMDAzNg==", "bodyText": "what is the matter of this? We never assert whether we have seen this record?", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530420036", "createdAt": "2020-11-25T14:36:52Z", "author": {"login": "Zelldon"}, "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceTest.java", "diffHunk": "@@ -79,7 +79,33 @@ public void shouldUnPauseStreamProcessorWhenRequested() {\n   }\n \n   @Test\n-  public void shouldPauseStreamProcessorAndTakeSnapshotWhenPrepareUgrade() {\n+  public void shouldPauseExporterWhenRequested() {\n+    // given\n+    clientRule.createSingleJob(\"test\");\n+\n+    // when\n+    leaderAdminService.pauseExporting();\n+\n+    // then\n+    assertExporterPhase(leaderAdminService, \"PAUSED\");\n+  }\n+\n+  @Test\n+  public void shouldResumeExportingWhenRequested() {\n+    // given\n+    clientRule.createSingleJob(\"test\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMDM1Mg==", "bodyText": "Would be nice to have such a verification", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r530420352", "createdAt": "2020-11-25T14:37:14Z", "author": {"login": "Zelldon"}, "path": "qa/integration-tests/src/test/java/io/zeebe/broker/it/system/BrokerAdminServiceTest.java", "diffHunk": "@@ -79,7 +79,33 @@ public void shouldUnPauseStreamProcessorWhenRequested() {\n   }\n \n   @Test\n-  public void shouldPauseStreamProcessorAndTakeSnapshotWhenPrepareUgrade() {\n+  public void shouldPauseExporterWhenRequested() {\n+    // given\n+    clientRule.createSingleJob(\"test\");\n+\n+    // when\n+    leaderAdminService.pauseExporting();\n+\n+    // then\n+    assertExporterPhase(leaderAdminService, \"PAUSED\");\n+  }\n+\n+  @Test\n+  public void shouldResumeExportingWhenRequested() {\n+    // given\n+    clientRule.createSingleJob(\"test\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMDAzNg=="}, "originalCommit": {"oid": "b926a85a4901cc4a8755579f617e2ca5e160f2dc"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MzM2Njgy", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#pullrequestreview-539336682", "createdAt": "2020-11-26T13:57:44Z", "commit": {"oid": "e9f0eed8c01a38e11a74d8132e045016ec50c435"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMzo1Nzo0NFrOH6cfvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMzo1Nzo0NFrOH6cfvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTA0NjMzMw==", "bodyText": "These cast are not necessary or?", "url": "https://github.com/camunda-cloud/zeebe/pull/5903#discussion_r531046333", "createdAt": "2020-11-26T13:57:44Z", "author": {"login": "Zelldon"}, "path": "broker/src/main/java/io/zeebe/broker/system/management/BrokerAdminServiceImpl.java", "diffHunk": "@@ -96,24 +96,24 @@ public void prepareForUpgrade() {\n \n   private CompletableFuture<PartitionStatus> getPartitionStatus(final ZeebePartition partition) {\n     final CompletableFuture<PartitionStatus> partitionStatus = new CompletableFuture<>();\n-    final var streamProcessorFuture = toCompletableFuture(partition.getStreamProcessor());\n-    final var exporterDirectorFuture = toCompletableFuture(partition.getExporterDirector());\n-    CompletableFuture.allOf(streamProcessorFuture, exporterDirectorFuture)\n-        .whenComplete(\n-            (nothing, error) -> {\n-              if (error != null) {\n-                partitionStatus.completeExceptionally(error);\n-                return;\n-              }\n-              final var streamProcessor = streamProcessorFuture.join();\n-              final var exporterDirector = exporterDirectorFuture.join();\n-              if (streamProcessor.isPresent() && exporterDirector.isPresent()) {\n-                getLeaderPartitionStatus(\n-                    partition, streamProcessor.get(), exporterDirector.get(), partitionStatus);\n-              } else {\n-                getFollowerPartitionStatus(partition, partitionStatus);\n-              }\n-            });\n+    final var streamProcessorFuture = partition.getStreamProcessor();\n+    final var exporterDirectorFuture = partition.getExporterDirector();\n+    actor.runOnCompletion(\n+        List.of((ActorFuture) streamProcessorFuture, (ActorFuture) exporterDirectorFuture),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9f0eed8c01a38e11a74d8132e045016ec50c435"}, "originalPosition": 25}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a74e37d46f3d00c4589bb41eab003984ca391d02", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/a74e37d46f3d00c4589bb41eab003984ca391d02", "committedDate": "2020-11-26T14:24:13Z", "message": "chore(broker): refactor"}, "afterCommit": {"oid": "17758b142230d7316b946f30732e3f9068b4867d", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/17758b142230d7316b946f30732e3f9068b4867d", "committedDate": "2020-11-27T08:21:41Z", "message": "feat(broker): api to pause and resume exporting\nEndpoint exposed via actuator/partitions/pauseExporting"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17758b142230d7316b946f30732e3f9068b4867d", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/17758b142230d7316b946f30732e3f9068b4867d", "committedDate": "2020-11-27T08:21:41Z", "message": "feat(broker): api to pause and resume exporting\nEndpoint exposed via actuator/partitions/pauseExporting"}, "afterCommit": {"oid": "8e0b1e5bd906816b675e8882339c97d091348c53", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8e0b1e5bd906816b675e8882339c97d091348c53", "committedDate": "2020-11-27T10:08:24Z", "message": "feat(broker): api to pause and resume exporting\nEndpoint exposed via actuator/partitions/pauseExporting"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e0b1e5bd906816b675e8882339c97d091348c53", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/8e0b1e5bd906816b675e8882339c97d091348c53", "committedDate": "2020-11-27T10:08:24Z", "message": "feat(broker): api to pause and resume exporting\nEndpoint exposed via actuator/partitions/pauseExporting"}, "afterCommit": {"oid": "37217e0bda64983f539372d40ede0d1184ce0692", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/37217e0bda64983f539372d40ede0d1184ce0692", "committedDate": "2020-11-27T10:26:45Z", "message": "feat(broker): api to pause and resume exporting\nEndpoint exposed via actuator/partitions/pauseExporting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69df66a6971f0eb65b305dba391484001d4ae9f2", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/69df66a6971f0eb65b305dba391484001d4ae9f2", "committedDate": "2020-11-27T13:57:14Z", "message": "feat(broker): api to pause and resume exporting\nEndpoint exposed via actuator/partitions/pauseExporting"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "37217e0bda64983f539372d40ede0d1184ce0692", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/37217e0bda64983f539372d40ede0d1184ce0692", "committedDate": "2020-11-27T10:26:45Z", "message": "feat(broker): api to pause and resume exporting\nEndpoint exposed via actuator/partitions/pauseExporting"}, "afterCommit": {"oid": "69df66a6971f0eb65b305dba391484001d4ae9f2", "author": {"user": {"login": "deepthidevaki", "name": "Deepthi Devaki Akkoorath"}}, "url": "https://github.com/camunda-cloud/zeebe/commit/69df66a6971f0eb65b305dba391484001d4ae9f2", "committedDate": "2020-11-27T13:57:14Z", "message": "feat(broker): api to pause and resume exporting\nEndpoint exposed via actuator/partitions/pauseExporting"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2259, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}