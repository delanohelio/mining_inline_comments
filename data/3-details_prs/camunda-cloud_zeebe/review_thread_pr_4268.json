{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMjc3NDEy", "number": 4268, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzoxMDozN1rODxgnRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjoxMjoyOVrODxnZng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjQxMTU4OnYy", "diffSide": "RIGHT", "path": "expression-language/src/main/java/io/zeebe/el/Expression.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzoxMDozN1rOGFBBnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzoxMDozN1rOGFBBnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxMjg2MQ==", "bodyText": "Please add some unit tests for the different implementations.", "url": "https://github.com/camunda-cloud/zeebe/pull/4268#discussion_r407912861", "createdAt": "2020-04-14T07:10:37Z", "author": {"login": "saig0"}, "path": "expression-language/src/main/java/io/zeebe/el/Expression.java", "diffHunk": "@@ -7,12 +7,20 @@\n  */\n package io.zeebe.el;\n \n+import java.util.Optional;\n+\n /** A parsed expression. */\n public interface Expression {\n \n   /** @return the (raw) expression as string */\n   String getExpression();\n \n+  /**\n+   * @return optional of the name of the variable if expression is a single variable or a property\n+   *     of a single variable, otherwise empty\n+   */\n+  Optional<String> getVariableName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a3e1be7d1678bcdde3f320c068687eb1d03ad83"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjQ0MjQwOnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzoxOTo0MlrOGFBT0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzoxOTo0MlrOGFBT0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxNzUyMQ==", "bodyText": "This check is done in completeJobs()", "url": "https://github.com/camunda-cloud/zeebe/pull/4268#discussion_r407917521", "createdAt": "2020-04-14T07:19:42Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java", "diffHunk": "@@ -518,6 +521,48 @@ public void shouldIterateOverNestedInputCollection() {\n         .containsExactlyElementsOf(INPUT_COLLECTION);\n   }\n \n+  @Test\n+  public void shouldCollectNestedOutputElements() {\n+    // given\n+    ENGINE\n+        .deployment()\n+        .withXmlResource(\n+            workflow(\n+                miBuilder.andThen(\n+                    m -> m.zeebeOutputElementExpression(OUTPUT_ELEMENT_EXPRESSION + \".nested\"))))\n+        .deploy();\n+\n+    final long workflowInstanceKey =\n+        ENGINE\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(INPUT_COLLECTION_EXPRESSION, INPUT_COLLECTION)\n+            .create();\n+\n+    RecordingExporter.jobRecords(JobIntent.CREATED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .limit(INPUT_COLLECTION.size())\n+        .exists();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a3e1be7d1678bcdde3f320c068687eb1d03ad83"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMjQ1MzA0OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzoyMjo1NFrOGFBaGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzoyMjo1NFrOGFBaGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxOTEzMQ==", "bodyText": "What do you want to check here?\nI think that we should verify that\n\nthe variable is created without .nested in its name (which is the issue that was fixed)\nthe variable is initialized with null\nthe values are collected in the output collection", "url": "https://github.com/camunda-cloud/zeebe/pull/4268#discussion_r407919131", "createdAt": "2020-04-14T07:22:54Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java", "diffHunk": "@@ -518,6 +521,48 @@ public void shouldIterateOverNestedInputCollection() {\n         .containsExactlyElementsOf(INPUT_COLLECTION);\n   }\n \n+  @Test\n+  public void shouldCollectNestedOutputElements() {\n+    // given\n+    ENGINE\n+        .deployment()\n+        .withXmlResource(\n+            workflow(\n+                miBuilder.andThen(\n+                    m -> m.zeebeOutputElementExpression(OUTPUT_ELEMENT_EXPRESSION + \".nested\"))))\n+        .deploy();\n+\n+    final long workflowInstanceKey =\n+        ENGINE\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(INPUT_COLLECTION_EXPRESSION, INPUT_COLLECTION)\n+            .create();\n+\n+    RecordingExporter.jobRecords(JobIntent.CREATED)\n+        .withWorkflowInstanceKey(workflowInstanceKey)\n+        .limit(INPUT_COLLECTION.size())\n+        .exists();\n+\n+    // complete job\n+    completeJobs(\n+        workflowInstanceKey,\n+        INPUT_COLLECTION.size(),\n+        i -> Map.of(\"nested\", OUTPUT_COLLECTION.get(i)));\n+\n+    // then\n+    final List<Long> scopeKeys =\n+        RecordingExporter.variableRecords(VariableIntent.CREATED)\n+            .withName(OUTPUT_ELEMENT_EXPRESSION)\n+            .map(Record::getValue)\n+            .map(VariableRecordValue::getScopeKey)\n+            .limit(3)\n+            .collect(Collectors.toList());\n+    assertThat(scopeKeys)\n+        .hasSize(3)\n+        .allSatisfy(scopeKey -> assertThat(scopeKeys).containsOnlyOnce(scopeKey));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a3e1be7d1678bcdde3f320c068687eb1d03ad83"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzUwNDg0OnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjowNjo1MlrOGFLdtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjowNjo1MlrOGFLdtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4Mzg5NQ==", "bodyText": "That looks tricky \ud83d\ude02", "url": "https://github.com/camunda-cloud/zeebe/pull/4268#discussion_r408083895", "createdAt": "2020-04-14T12:06:52Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java", "diffHunk": "@@ -539,28 +539,67 @@ public void shouldCollectNestedOutputElements() {\n             .withVariable(INPUT_COLLECTION_EXPRESSION, INPUT_COLLECTION)\n             .create();\n \n-    RecordingExporter.jobRecords(JobIntent.CREATED)\n-        .withWorkflowInstanceKey(workflowInstanceKey)\n-        .limit(INPUT_COLLECTION.size())\n-        .exists();\n-\n-    // complete job\n+    // complete jobs\n     completeJobs(\n         workflowInstanceKey,\n         INPUT_COLLECTION.size(),\n         i -> Map.of(\"nested\", OUTPUT_COLLECTION.get(i)));\n \n     // then\n-    final List<Long> scopeKeys =\n-        RecordingExporter.variableRecords(VariableIntent.CREATED)\n-            .withName(OUTPUT_ELEMENT_EXPRESSION)\n-            .map(Record::getValue)\n-            .map(VariableRecordValue::getScopeKey)\n-            .limit(3)\n-            .collect(Collectors.toList());\n-    assertThat(scopeKeys)\n-        .hasSize(3)\n-        .allSatisfy(scopeKey -> assertThat(scopeKeys).containsOnlyOnce(scopeKey));\n+    assertThat(\n+            RecordingExporter.variableRecords(VariableIntent.CREATED)\n+                .withName(OUTPUT_ELEMENT_EXPRESSION) // without '.nested'\n+                .withValue(\"null\")\n+                .limit(INPUT_COLLECTION.size()))\n+        .hasSize(INPUT_COLLECTION.size());\n+\n+    assertThat(\n+            RecordingExporter.variableRecords()\n+                .withName(OUTPUT_COLLECTION_VARIABLE)\n+                .withScopeKey(workflowInstanceKey)\n+                .getFirst()\n+                .getValue())\n+        .hasValue(JsonUtil.toJson(OUTPUT_COLLECTION));\n+  }\n+\n+  @Test\n+  public void shouldCollectOutputElementsFromExpression() {\n+    // given\n+    ENGINE\n+        .deployment()\n+        .withXmlResource(\n+            workflow(\n+                miBuilder.andThen(\n+                    m ->\n+                        m.zeebeOutputElementExpression(\n+                            \"number(string(loopCounter) + string(loopCounter))\"))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "509f41cabfab36f2e1a33a905375b027e2f4035f"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzUyMzUwOnYy", "diffSide": "RIGHT", "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjoxMjoyOVrOGFLpYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNTozMjo0OVrOGFUgGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4Njg4MA==", "bodyText": "Limiting the records to a specific number is a bit unsteady. Instead, we can limit the records from creating a workflow instance to its completion/termination.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        RecordingExporter.variableRecords(VariableIntent.CREATED)\n          \n          \n            \n                            .map(Record::getValue)\n          \n          \n            \n                            .map(VariableRecordValue::getName)\n          \n          \n            \n                            .limit(10))\n          \n          \n            \n                         RecordingExporter.records()\n          \n          \n            \n                            .limitToWorkflowInstance(workflowInstanceKey)\n          \n          \n            \n                            .variableRecords()\n          \n          \n            \n                            .map(Record::getValue)\n          \n          \n            \n                            .map(VariableRecordValue::getName))", "url": "https://github.com/camunda-cloud/zeebe/pull/4268#discussion_r408086880", "createdAt": "2020-04-14T12:12:29Z", "author": {"login": "saig0"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java", "diffHunk": "@@ -539,28 +539,67 @@ public void shouldCollectNestedOutputElements() {\n             .withVariable(INPUT_COLLECTION_EXPRESSION, INPUT_COLLECTION)\n             .create();\n \n-    RecordingExporter.jobRecords(JobIntent.CREATED)\n-        .withWorkflowInstanceKey(workflowInstanceKey)\n-        .limit(INPUT_COLLECTION.size())\n-        .exists();\n-\n-    // complete job\n+    // complete jobs\n     completeJobs(\n         workflowInstanceKey,\n         INPUT_COLLECTION.size(),\n         i -> Map.of(\"nested\", OUTPUT_COLLECTION.get(i)));\n \n     // then\n-    final List<Long> scopeKeys =\n-        RecordingExporter.variableRecords(VariableIntent.CREATED)\n-            .withName(OUTPUT_ELEMENT_EXPRESSION)\n-            .map(Record::getValue)\n-            .map(VariableRecordValue::getScopeKey)\n-            .limit(3)\n-            .collect(Collectors.toList());\n-    assertThat(scopeKeys)\n-        .hasSize(3)\n-        .allSatisfy(scopeKey -> assertThat(scopeKeys).containsOnlyOnce(scopeKey));\n+    assertThat(\n+            RecordingExporter.variableRecords(VariableIntent.CREATED)\n+                .withName(OUTPUT_ELEMENT_EXPRESSION) // without '.nested'\n+                .withValue(\"null\")\n+                .limit(INPUT_COLLECTION.size()))\n+        .hasSize(INPUT_COLLECTION.size());\n+\n+    assertThat(\n+            RecordingExporter.variableRecords()\n+                .withName(OUTPUT_COLLECTION_VARIABLE)\n+                .withScopeKey(workflowInstanceKey)\n+                .getFirst()\n+                .getValue())\n+        .hasValue(JsonUtil.toJson(OUTPUT_COLLECTION));\n+  }\n+\n+  @Test\n+  public void shouldCollectOutputElementsFromExpression() {\n+    // given\n+    ENGINE\n+        .deployment()\n+        .withXmlResource(\n+            workflow(\n+                miBuilder.andThen(\n+                    m ->\n+                        m.zeebeOutputElementExpression(\n+                            \"number(string(loopCounter) + string(loopCounter))\"))))\n+        .deploy();\n+\n+    final long workflowInstanceKey =\n+        ENGINE\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(INPUT_COLLECTION_EXPRESSION, INPUT_COLLECTION)\n+            .create();\n+\n+    // complete jobs\n+    completeJobs(workflowInstanceKey, INPUT_COLLECTION.size());\n+\n+    // then\n+    assertThat(\n+            RecordingExporter.variableRecords(VariableIntent.CREATED)\n+                .map(Record::getValue)\n+                .map(VariableRecordValue::getName)\n+                .limit(10))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "509f41cabfab36f2e1a33a905375b027e2f4035f"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIzMTk2MA==", "bodyText": "Nice, that's a good one to learn about.", "url": "https://github.com/camunda-cloud/zeebe/pull/4268#discussion_r408231960", "createdAt": "2020-04-14T15:32:49Z", "author": {"login": "korthout"}, "path": "engine/src/test/java/io/zeebe/engine/processor/workflow/multiinstance/MultiInstanceActivityTest.java", "diffHunk": "@@ -539,28 +539,67 @@ public void shouldCollectNestedOutputElements() {\n             .withVariable(INPUT_COLLECTION_EXPRESSION, INPUT_COLLECTION)\n             .create();\n \n-    RecordingExporter.jobRecords(JobIntent.CREATED)\n-        .withWorkflowInstanceKey(workflowInstanceKey)\n-        .limit(INPUT_COLLECTION.size())\n-        .exists();\n-\n-    // complete job\n+    // complete jobs\n     completeJobs(\n         workflowInstanceKey,\n         INPUT_COLLECTION.size(),\n         i -> Map.of(\"nested\", OUTPUT_COLLECTION.get(i)));\n \n     // then\n-    final List<Long> scopeKeys =\n-        RecordingExporter.variableRecords(VariableIntent.CREATED)\n-            .withName(OUTPUT_ELEMENT_EXPRESSION)\n-            .map(Record::getValue)\n-            .map(VariableRecordValue::getScopeKey)\n-            .limit(3)\n-            .collect(Collectors.toList());\n-    assertThat(scopeKeys)\n-        .hasSize(3)\n-        .allSatisfy(scopeKey -> assertThat(scopeKeys).containsOnlyOnce(scopeKey));\n+    assertThat(\n+            RecordingExporter.variableRecords(VariableIntent.CREATED)\n+                .withName(OUTPUT_ELEMENT_EXPRESSION) // without '.nested'\n+                .withValue(\"null\")\n+                .limit(INPUT_COLLECTION.size()))\n+        .hasSize(INPUT_COLLECTION.size());\n+\n+    assertThat(\n+            RecordingExporter.variableRecords()\n+                .withName(OUTPUT_COLLECTION_VARIABLE)\n+                .withScopeKey(workflowInstanceKey)\n+                .getFirst()\n+                .getValue())\n+        .hasValue(JsonUtil.toJson(OUTPUT_COLLECTION));\n+  }\n+\n+  @Test\n+  public void shouldCollectOutputElementsFromExpression() {\n+    // given\n+    ENGINE\n+        .deployment()\n+        .withXmlResource(\n+            workflow(\n+                miBuilder.andThen(\n+                    m ->\n+                        m.zeebeOutputElementExpression(\n+                            \"number(string(loopCounter) + string(loopCounter))\"))))\n+        .deploy();\n+\n+    final long workflowInstanceKey =\n+        ENGINE\n+            .workflowInstance()\n+            .ofBpmnProcessId(PROCESS_ID)\n+            .withVariable(INPUT_COLLECTION_EXPRESSION, INPUT_COLLECTION)\n+            .create();\n+\n+    // complete jobs\n+    completeJobs(workflowInstanceKey, INPUT_COLLECTION.size());\n+\n+    // then\n+    assertThat(\n+            RecordingExporter.variableRecords(VariableIntent.CREATED)\n+                .map(Record::getValue)\n+                .map(VariableRecordValue::getName)\n+                .limit(10))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4Njg4MA=="}, "originalCommit": {"oid": "509f41cabfab36f2e1a33a905375b027e2f4035f"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4857, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}