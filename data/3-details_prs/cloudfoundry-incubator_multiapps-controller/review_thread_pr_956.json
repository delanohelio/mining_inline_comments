{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxNzg3Mzcw", "number": 956, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDoyNToyM1rOEmoMKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODoyMToyMlrOEnW3Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTM5ODE3OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/cf/TaggingRequestFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDoyNToyM1rOHWxL5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDoyNToyM1rOHWxL5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYzNjU4Mw==", "bodyText": "Probably rename it to TaggingRequestFilterFunction to be suitable with the interface name", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/956#discussion_r493636583", "createdAt": "2020-09-23T14:25:23Z", "author": {"login": "boyan-velinov"}, "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/cf/TaggingRequestFilter.java", "diffHunk": "@@ -1,14 +1,14 @@\n package org.cloudfoundry.multiapps.controller.core.cf;\n \n-import java.io.IOException;\n-\n import org.springframework.http.HttpHeaders;\n-import org.springframework.http.HttpRequest;\n-import org.springframework.http.client.ClientHttpRequestExecution;\n-import org.springframework.http.client.ClientHttpRequestInterceptor;\n-import org.springframework.http.client.ClientHttpResponse;\n+import org.springframework.web.reactive.function.client.ClientRequest;\n+import org.springframework.web.reactive.function.client.ClientResponse;\n+import org.springframework.web.reactive.function.client.ExchangeFilterFunction;\n+import org.springframework.web.reactive.function.client.ExchangeFunction;\n+\n+import reactor.core.publisher.Mono;\n \n-class TaggingRequestInterceptor implements ClientHttpRequestInterceptor {\n+class TaggingRequestFilter implements ExchangeFilterFunction {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2029e5bb0319f01e0770b018c15ae4d6e51e860"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTQ5MTQ4OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/cf/TaggingRequestFilterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo0Mzo0NFrOHWyFmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo0Mzo0NFrOHWyFmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1MTM1NQ==", "bodyText": "You can assign clientRequest.headers() to local field called \"actualHeaders\" and use it afterwads.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/956#discussion_r493651355", "createdAt": "2020-09-23T14:43:44Z", "author": {"login": "boyan-velinov"}, "path": "multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/cf/TaggingRequestFilterTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package org.cloudfoundry.multiapps.controller.core.cf;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.cloudfoundry.multiapps.controller.core.util.ApplicationConfiguration;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.client.reactive.ClientHttpRequest;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.reactive.function.BodyInserter;\n+import org.springframework.web.reactive.function.client.ClientRequest;\n+import org.springframework.web.reactive.function.client.ExchangeFunction;\n+import org.springframework.web.reactive.function.client.ExchangeStrategies;\n+\n+import reactor.core.publisher.Mono;\n+\n+public class TaggingRequestFilterTest {\n+\n+    private static final String TEST_VERSION_VALUE = \"1.58.0\";\n+    private static final String TEST_ORG_VALUE = \"faceorg\";\n+    private static final String TEST_SPACE_VALUE = \"myspace\";\n+    private HttpHeaders httpHeaders;\n+    private ClientRequest clientRequest;\n+    @Mock\n+    private ExchangeFunction nextFilter;\n+    @Mock\n+    private ApplicationConfiguration configuration;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        httpHeaders = new HttpHeaders();\n+        clientRequest = initializeClientRequest();\n+        MockitoAnnotations.openMocks(this)\n+                          .close();\n+    }\n+\n+    private ClientRequest initializeClientRequest() {\n+        return new ClientRequest() {\n+\n+            @Override\n+            public Map<String, Object> attributes() {\n+                return null;\n+            }\n+\n+            @Override\n+            public BodyInserter<?, ? super ClientHttpRequest> body() {\n+                return null;\n+            }\n+\n+            @Override\n+            public MultiValueMap<String, String> cookies() {\n+                return null;\n+            }\n+\n+            @Override\n+            public HttpHeaders headers() {\n+                return httpHeaders;\n+            }\n+\n+            @Override\n+            public String logPrefix() {\n+                return null;\n+            }\n+\n+            @Override\n+            public HttpMethod method() {\n+                return null;\n+            }\n+\n+            @Override\n+            public URI url() {\n+                return null;\n+            }\n+\n+            @Override\n+            public Mono<Void> writeTo(ClientHttpRequest arg0, ExchangeStrategies arg1) {\n+                return null;\n+            }\n+        };\n+    }\n+\n+    @Test\n+    public void testInjectGenericValue() throws IOException {\n+        TaggingRequestFilter testedFilter = new TaggingRequestFilter(\"1.58.0\");\n+        testedFilter.filter(clientRequest, nextFilter);\n+        assertNotNull(clientRequest.headers());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2029e5bb0319f01e0770b018c15ae4d6e51e860"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTUwNjEzOnYy", "diffSide": "RIGHT", "path": "multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/cf/TaggingRequestFilterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo0Njo0NFrOHWyOxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo0Njo0NFrOHWyOxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1MzcwMA==", "bodyText": "You can simplify by using assertEquals(expectedValue, actualHeaders.getFirst(TaggingRequestFilter.TAG_HEADER_NAME))", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/956#discussion_r493653700", "createdAt": "2020-09-23T14:46:44Z", "author": {"login": "boyan-velinov"}, "path": "multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/cf/TaggingRequestFilterTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package org.cloudfoundry.multiapps.controller.core.cf;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.cloudfoundry.multiapps.controller.core.util.ApplicationConfiguration;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.client.reactive.ClientHttpRequest;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.reactive.function.BodyInserter;\n+import org.springframework.web.reactive.function.client.ClientRequest;\n+import org.springframework.web.reactive.function.client.ExchangeFunction;\n+import org.springframework.web.reactive.function.client.ExchangeStrategies;\n+\n+import reactor.core.publisher.Mono;\n+\n+public class TaggingRequestFilterTest {\n+\n+    private static final String TEST_VERSION_VALUE = \"1.58.0\";\n+    private static final String TEST_ORG_VALUE = \"faceorg\";\n+    private static final String TEST_SPACE_VALUE = \"myspace\";\n+    private HttpHeaders httpHeaders;\n+    private ClientRequest clientRequest;\n+    @Mock\n+    private ExchangeFunction nextFilter;\n+    @Mock\n+    private ApplicationConfiguration configuration;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        httpHeaders = new HttpHeaders();\n+        clientRequest = initializeClientRequest();\n+        MockitoAnnotations.openMocks(this)\n+                          .close();\n+    }\n+\n+    private ClientRequest initializeClientRequest() {\n+        return new ClientRequest() {\n+\n+            @Override\n+            public Map<String, Object> attributes() {\n+                return null;\n+            }\n+\n+            @Override\n+            public BodyInserter<?, ? super ClientHttpRequest> body() {\n+                return null;\n+            }\n+\n+            @Override\n+            public MultiValueMap<String, String> cookies() {\n+                return null;\n+            }\n+\n+            @Override\n+            public HttpHeaders headers() {\n+                return httpHeaders;\n+            }\n+\n+            @Override\n+            public String logPrefix() {\n+                return null;\n+            }\n+\n+            @Override\n+            public HttpMethod method() {\n+                return null;\n+            }\n+\n+            @Override\n+            public URI url() {\n+                return null;\n+            }\n+\n+            @Override\n+            public Mono<Void> writeTo(ClientHttpRequest arg0, ExchangeStrategies arg1) {\n+                return null;\n+            }\n+        };\n+    }\n+\n+    @Test\n+    public void testInjectGenericValue() throws IOException {\n+        TaggingRequestFilter testedFilter = new TaggingRequestFilter(\"1.58.0\");\n+        testedFilter.filter(clientRequest, nextFilter);\n+        assertNotNull(clientRequest.headers());\n+        assertTrue(clientRequest.headers()\n+                                .containsKey(TaggingRequestFilter.TAG_HEADER_NAME));\n+        String expectedValue = \"MTA deploy-service v1.58.0\";\n+        Optional<String> foundValue = clientRequest.headers()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2029e5bb0319f01e0770b018c15ae4d6e51e860"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTUxNjE0OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/cf/TaggingRequestFilterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo0ODo0NFrOHWyVLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo0ODo0NFrOHWyVLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1NTM0MQ==", "bodyText": "I think this unit test is not needed because it is already covered.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/956#discussion_r493655341", "createdAt": "2020-09-23T14:48:44Z", "author": {"login": "boyan-velinov"}, "path": "multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/cf/TaggingRequestFilterTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package org.cloudfoundry.multiapps.controller.core.cf;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.cloudfoundry.multiapps.controller.core.util.ApplicationConfiguration;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.client.reactive.ClientHttpRequest;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.reactive.function.BodyInserter;\n+import org.springframework.web.reactive.function.client.ClientRequest;\n+import org.springframework.web.reactive.function.client.ExchangeFunction;\n+import org.springframework.web.reactive.function.client.ExchangeStrategies;\n+\n+import reactor.core.publisher.Mono;\n+\n+public class TaggingRequestFilterTest {\n+\n+    private static final String TEST_VERSION_VALUE = \"1.58.0\";\n+    private static final String TEST_ORG_VALUE = \"faceorg\";\n+    private static final String TEST_SPACE_VALUE = \"myspace\";\n+    private HttpHeaders httpHeaders;\n+    private ClientRequest clientRequest;\n+    @Mock\n+    private ExchangeFunction nextFilter;\n+    @Mock\n+    private ApplicationConfiguration configuration;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        httpHeaders = new HttpHeaders();\n+        clientRequest = initializeClientRequest();\n+        MockitoAnnotations.openMocks(this)\n+                          .close();\n+    }\n+\n+    private ClientRequest initializeClientRequest() {\n+        return new ClientRequest() {\n+\n+            @Override\n+            public Map<String, Object> attributes() {\n+                return null;\n+            }\n+\n+            @Override\n+            public BodyInserter<?, ? super ClientHttpRequest> body() {\n+                return null;\n+            }\n+\n+            @Override\n+            public MultiValueMap<String, String> cookies() {\n+                return null;\n+            }\n+\n+            @Override\n+            public HttpHeaders headers() {\n+                return httpHeaders;\n+            }\n+\n+            @Override\n+            public String logPrefix() {\n+                return null;\n+            }\n+\n+            @Override\n+            public HttpMethod method() {\n+                return null;\n+            }\n+\n+            @Override\n+            public URI url() {\n+                return null;\n+            }\n+\n+            @Override\n+            public Mono<Void> writeTo(ClientHttpRequest arg0, ExchangeStrategies arg1) {\n+                return null;\n+            }\n+        };\n+    }\n+\n+    @Test\n+    public void testInjectGenericValue() throws IOException {\n+        TaggingRequestFilter testedFilter = new TaggingRequestFilter(\"1.58.0\");\n+        testedFilter.filter(clientRequest, nextFilter);\n+        assertNotNull(clientRequest.headers());\n+        assertTrue(clientRequest.headers()\n+                                .containsKey(TaggingRequestFilter.TAG_HEADER_NAME));\n+        String expectedValue = \"MTA deploy-service v1.58.0\";\n+        Optional<String> foundValue = clientRequest.headers()\n+                                                   .get(TaggingRequestFilter.TAG_HEADER_NAME)\n+                                                   .stream()\n+                                                   .filter(value -> value.equals(expectedValue))\n+                                                   .findFirst();\n+        assertTrue(foundValue.isPresent());\n+    }\n+\n+    @Test\n+    public void testInjectOrgAndSpaceValues() throws IOException {\n+        TaggingRequestFilter testedFilter = new TaggingRequestFilter(TEST_VERSION_VALUE, TEST_ORG_VALUE, TEST_SPACE_VALUE);\n+        testedFilter.filter(clientRequest, nextFilter);\n+        HttpHeaders headers = clientRequest.headers();\n+        assertNotNull(headers);\n+        assertTrue(headers.containsKey(TaggingRequestFilter.TAG_HEADER_ORG_NAME));\n+        assertTrue(headers.containsKey(TaggingRequestFilter.TAG_HEADER_SPACE_NAME));\n+        String expectedValue = \"MTA deploy-service v1.58.0\";\n+        Optional<String> foundValue = headers.get(TaggingRequestFilter.TAG_HEADER_NAME)\n+                                             .stream()\n+                                             .filter(value -> value.equals(expectedValue))\n+                                             .findFirst();\n+        assertTrue(foundValue.isPresent());\n+        Optional<String> foundOrgValue = headers.get(TaggingRequestFilter.TAG_HEADER_ORG_NAME)\n+                                                .stream()\n+                                                .filter(value -> value.equals(TEST_ORG_VALUE))\n+                                                .findFirst();\n+        assertTrue(foundOrgValue.isPresent());\n+        Optional<String> foundSpaceValue = headers.get(TaggingRequestFilter.TAG_HEADER_SPACE_NAME)\n+                                                  .stream()\n+                                                  .filter(value -> value.equals(TEST_SPACE_VALUE))\n+                                                  .findFirst();\n+        assertTrue(foundSpaceValue.isPresent());\n+\n+    }\n+\n+    @Test\n+    public void testGetHeaderValue() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2029e5bb0319f01e0770b018c15ae4d6e51e860"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTUyNDk5OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo1MDoxOVrOHWyaog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo1MDoxOVrOHWyaog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1NjczOA==", "bodyText": "Are these formatting changes needed?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/956#discussion_r493656738", "createdAt": "2020-09-23T14:50:19Z", "author": {"login": "boyan-velinov"}, "path": "pom.xml", "diffHunk": "@@ -685,8 +692,8 @@\n                 <artifactId>quartz</artifactId>\n                 <version>${quartz.version}</version>\n                 <exclusions>\n-                    <!-- C3P0 is only used if Quartz needs to create its own DataSource. Since we use Spring for that purpose, \n-                        it is not required. -->\n+                    <!-- C3P0 is only used if Quartz needs to create its \n+                        own DataSource. Since we use Spring for that purpose, it is not required. -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2029e5bb0319f01e0770b018c15ae4d6e51e860"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTUzNDU1OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/cf/TaggingRequestFilterTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo1MjowOVrOHWygmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDo1MjowOVrOHWygmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY1ODI2Nw==", "bodyText": "Why so many unit tests? I think that some of them tests the same thing.\nYou can prepare one larger unit tests that tests every tag, other option is to have 3 different unit tests for each tag", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/956#discussion_r493658267", "createdAt": "2020-09-23T14:52:09Z", "author": {"login": "boyan-velinov"}, "path": "multiapps-controller-core/src/test/java/org/cloudfoundry/multiapps/controller/core/cf/TaggingRequestFilterTest.java", "diffHunk": "@@ -0,0 +1,169 @@\n+package org.cloudfoundry.multiapps.controller.core.cf;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.cloudfoundry.multiapps.controller.core.util.ApplicationConfiguration;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.http.client.reactive.ClientHttpRequest;\n+import org.springframework.util.MultiValueMap;\n+import org.springframework.web.reactive.function.BodyInserter;\n+import org.springframework.web.reactive.function.client.ClientRequest;\n+import org.springframework.web.reactive.function.client.ExchangeFunction;\n+import org.springframework.web.reactive.function.client.ExchangeStrategies;\n+\n+import reactor.core.publisher.Mono;\n+\n+public class TaggingRequestFilterTest {\n+\n+    private static final String TEST_VERSION_VALUE = \"1.58.0\";\n+    private static final String TEST_ORG_VALUE = \"faceorg\";\n+    private static final String TEST_SPACE_VALUE = \"myspace\";\n+    private HttpHeaders httpHeaders;\n+    private ClientRequest clientRequest;\n+    @Mock\n+    private ExchangeFunction nextFilter;\n+    @Mock\n+    private ApplicationConfiguration configuration;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        httpHeaders = new HttpHeaders();\n+        clientRequest = initializeClientRequest();\n+        MockitoAnnotations.openMocks(this)\n+                          .close();\n+    }\n+\n+    private ClientRequest initializeClientRequest() {\n+        return new ClientRequest() {\n+\n+            @Override\n+            public Map<String, Object> attributes() {\n+                return null;\n+            }\n+\n+            @Override\n+            public BodyInserter<?, ? super ClientHttpRequest> body() {\n+                return null;\n+            }\n+\n+            @Override\n+            public MultiValueMap<String, String> cookies() {\n+                return null;\n+            }\n+\n+            @Override\n+            public HttpHeaders headers() {\n+                return httpHeaders;\n+            }\n+\n+            @Override\n+            public String logPrefix() {\n+                return null;\n+            }\n+\n+            @Override\n+            public HttpMethod method() {\n+                return null;\n+            }\n+\n+            @Override\n+            public URI url() {\n+                return null;\n+            }\n+\n+            @Override\n+            public Mono<Void> writeTo(ClientHttpRequest arg0, ExchangeStrategies arg1) {\n+                return null;\n+            }\n+        };\n+    }\n+\n+    @Test\n+    public void testInjectGenericValue() throws IOException {\n+        TaggingRequestFilter testedFilter = new TaggingRequestFilter(\"1.58.0\");\n+        testedFilter.filter(clientRequest, nextFilter);\n+        assertNotNull(clientRequest.headers());\n+        assertTrue(clientRequest.headers()\n+                                .containsKey(TaggingRequestFilter.TAG_HEADER_NAME));\n+        String expectedValue = \"MTA deploy-service v1.58.0\";\n+        Optional<String> foundValue = clientRequest.headers()\n+                                                   .get(TaggingRequestFilter.TAG_HEADER_NAME)\n+                                                   .stream()\n+                                                   .filter(value -> value.equals(expectedValue))\n+                                                   .findFirst();\n+        assertTrue(foundValue.isPresent());\n+    }\n+\n+    @Test\n+    public void testInjectOrgAndSpaceValues() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2029e5bb0319f01e0770b018c15ae4d6e51e860"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Njc4ODYyOnYy", "diffSide": "LEFT", "path": "multiapps-controller-client/src/main/java/org/cloudfoundry/multiapps/controller/client/ResilientCloudControllerClient.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzowMDoyOVrOHX3Zeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzowMDoyOVrOHX3Zeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc4NjkzOA==", "bodyText": "This was executed with retry... xD /facepalm", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/956#discussion_r494786938", "createdAt": "2020-09-25T07:00:29Z", "author": {"login": "nictas"}, "path": "multiapps-controller-client/src/main/java/org/cloudfoundry/multiapps/controller/client/ResilientCloudControllerClient.java", "diffHunk": "@@ -569,21 +567,6 @@ public void logout() {\n         executeWithRetry(delegate::logout);\n     }\n \n-    @Override\n-    public void registerRestLogListener(RestLogCallback callBack) {\n-        executeWithRetry(() -> delegate.registerRestLogListener(callBack));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da605e63e48410fd38f52b0b357d23c5c19b5b2e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NzA0NTQ2OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-core/src/main/java/module-info.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODoyMToyMlrOHX52Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwODoyMToyMlrOHX52Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgyNzAzMQ==", "bodyText": "Order these alphabetically for easier navigation.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/956#discussion_r494827031", "createdAt": "2020-09-25T08:21:22Z", "author": {"login": "nictas"}, "path": "multiapps-controller-core/src/main/java/module-info.java", "diffHunk": "@@ -76,6 +76,8 @@\n     requires spring.security.core;\n     requires spring.security.jwt;\n     requires spring.web;\n+    requires spring.webflux;\n+    requires reactor.core;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da605e63e48410fd38f52b0b357d23c5c19b5b2e"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 428, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}