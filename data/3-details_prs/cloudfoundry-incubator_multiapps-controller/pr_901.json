{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4Njg4OTc0", "number": 901, "title": "Adds tests for database migration tool and refactors database migration executors ", "bodyText": "Refactoring the executor classes required changes to the type setters and Table Metadata interfaces.", "createdAt": "2020-07-14T07:01:59Z", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901", "merged": true, "mergeCommit": {"oid": "74f5b93fb0ae0a1adf5733a35acf9dfc817961e7"}, "closed": true, "closedAt": "2020-07-17T10:13:27Z", "author": {"login": "Boris-ILIEV"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0xAQFAFqTQ0Nzg0MzUwMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1wTAIAH2gAyNDQ4Njg4OTc0OjllNDQ2MzlkNWVjY2M2Yzk1NDUxNDE2MmFmMDBjOGE2YTY2YjE2OWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3ODQzNTAy", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#pullrequestreview-447843502", "createdAt": "2020-07-14T07:09:20Z", "commit": {"oid": "87b75694479f4b22d9b473cebd839bf0aed288a6"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNzowOToyMFrOGxHC6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNzozNDo0M1rOGxH00A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE0ODg0MQ==", "bodyText": "Use Collections.emptyList() here and remove the NON_EXISTING_DATABASE_TYPE_SETTER constant (BOOL_DEFAULT_DATABASE_TYPE_SETTER would do the job).", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454148841", "createdAt": "2020-07-14T07:09:20Z", "author": {"login": "nictas"}, "path": "com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.executor.type;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+class DatabaseTypeSetterFactoryTest {\n+\n+    private static final String NON_EXISTING_DATABASE_TYPE_SETTER = \"test\";\n+    private static final String BOOL_DEFAULT_DATABASE_TYPE_SETTER = \"bool\";\n+    private static final String LONG_DEFAULT_DATABASE_TYPE_SETTER = \"int8\";\n+    private static final String STRING_DEFAULT_DATABASE_TYPE_SETTER_1 = \"varchar\";\n+    private static final String STRING_DEFAULT_DATABASE_TYPE_SETTER_2 = \"text\";\n+\n+    private DatabaseTypeSetterFactory databaseTypeSetterFactory;\n+\n+    @Test\n+    public void testGetWithNullStringParameter() {\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory();\n+\n+        Assertions.assertThrows(IllegalStateException.class, () -> databaseTypeSetterFactory.get(null));\n+    }\n+\n+    @Test\n+    public void testGetWithEmptyStringParameter() {\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory();\n+\n+        Assertions.assertThrows(IllegalStateException.class, () -> databaseTypeSetterFactory.get(\"\"));\n+    }\n+\n+    @Test\n+    public void testGetWithCustomRegisteredTypeSettersAndSingleMatch() {\n+        List<DatabaseTypeSetter> registeredDatabaseTypeSetters = Arrays.asList(new BooleanDatabaseTypeSetter());\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory(registeredDatabaseTypeSetters);\n+\n+        DatabaseTypeSetter resultDatabaseTypeSetter = databaseTypeSetterFactory.get(BOOL_DEFAULT_DATABASE_TYPE_SETTER);\n+\n+        Assertions.assertEquals(registeredDatabaseTypeSetters.get(0), resultDatabaseTypeSetter);\n+    }\n+\n+    @Test\n+    public void testGetWithCustomRegisteredTypeSettersWhenNoMatchingTypeSetter() {\n+        List<DatabaseTypeSetter> registeredDatabaseTypeSetters = Arrays.asList(new BooleanDatabaseTypeSetter());\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory(registeredDatabaseTypeSetters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87b75694479f4b22d9b473cebd839bf0aed288a6"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE0OTI3Mw==", "bodyText": "Remove this field. Use a local variable instead. Fields are only useful for sharing state between methods, but you're always re-initializing the value of this one.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454149273", "createdAt": "2020-07-14T07:10:20Z", "author": {"login": "nictas"}, "path": "com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.executor.type;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+class DatabaseTypeSetterFactoryTest {\n+\n+    private static final String NON_EXISTING_DATABASE_TYPE_SETTER = \"test\";\n+    private static final String BOOL_DEFAULT_DATABASE_TYPE_SETTER = \"bool\";\n+    private static final String LONG_DEFAULT_DATABASE_TYPE_SETTER = \"int8\";\n+    private static final String STRING_DEFAULT_DATABASE_TYPE_SETTER_1 = \"varchar\";\n+    private static final String STRING_DEFAULT_DATABASE_TYPE_SETTER_2 = \"text\";\n+\n+    private DatabaseTypeSetterFactory databaseTypeSetterFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87b75694479f4b22d9b473cebd839bf0aed288a6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE0OTg0Nw==", "bodyText": "Rename these constants to BOOL_TYPE, LONG_TYPE, etc. Right now, based on their name, it looks like they should contain instances of DatabaseTypeSetter.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454149847", "createdAt": "2020-07-14T07:11:31Z", "author": {"login": "nictas"}, "path": "com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.executor.type;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+class DatabaseTypeSetterFactoryTest {\n+\n+    private static final String NON_EXISTING_DATABASE_TYPE_SETTER = \"test\";\n+    private static final String BOOL_DEFAULT_DATABASE_TYPE_SETTER = \"bool\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87b75694479f4b22d9b473cebd839bf0aed288a6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1MDM0MA==", "bodyText": "Merge this test with the next two. All three of them test whether the default configuration is correct, so there's no reason to have them as separate tests.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454150340", "createdAt": "2020-07-14T07:12:32Z", "author": {"login": "nictas"}, "path": "com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.executor.type;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+class DatabaseTypeSetterFactoryTest {\n+\n+    private static final String NON_EXISTING_DATABASE_TYPE_SETTER = \"test\";\n+    private static final String BOOL_DEFAULT_DATABASE_TYPE_SETTER = \"bool\";\n+    private static final String LONG_DEFAULT_DATABASE_TYPE_SETTER = \"int8\";\n+    private static final String STRING_DEFAULT_DATABASE_TYPE_SETTER_1 = \"varchar\";\n+    private static final String STRING_DEFAULT_DATABASE_TYPE_SETTER_2 = \"text\";\n+\n+    private DatabaseTypeSetterFactory databaseTypeSetterFactory;\n+\n+    @Test\n+    public void testGetWithNullStringParameter() {\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory();\n+\n+        Assertions.assertThrows(IllegalStateException.class, () -> databaseTypeSetterFactory.get(null));\n+    }\n+\n+    @Test\n+    public void testGetWithEmptyStringParameter() {\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory();\n+\n+        Assertions.assertThrows(IllegalStateException.class, () -> databaseTypeSetterFactory.get(\"\"));\n+    }\n+\n+    @Test\n+    public void testGetWithCustomRegisteredTypeSettersAndSingleMatch() {\n+        List<DatabaseTypeSetter> registeredDatabaseTypeSetters = Arrays.asList(new BooleanDatabaseTypeSetter());\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory(registeredDatabaseTypeSetters);\n+\n+        DatabaseTypeSetter resultDatabaseTypeSetter = databaseTypeSetterFactory.get(BOOL_DEFAULT_DATABASE_TYPE_SETTER);\n+\n+        Assertions.assertEquals(registeredDatabaseTypeSetters.get(0), resultDatabaseTypeSetter);\n+    }\n+\n+    @Test\n+    public void testGetWithCustomRegisteredTypeSettersWhenNoMatchingTypeSetter() {\n+        List<DatabaseTypeSetter> registeredDatabaseTypeSetters = Arrays.asList(new BooleanDatabaseTypeSetter());\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory(registeredDatabaseTypeSetters);\n+\n+        Assertions.assertThrows(IllegalStateException.class, () -> databaseTypeSetterFactory.get(NON_EXISTING_DATABASE_TYPE_SETTER));\n+    }\n+\n+    @Test\n+    public void testGetWithCustomRegisteredTypeSettersWhenMultipleMatchingTypeSetters() {\n+        List<DatabaseTypeSetter> registeredDatabaseTypeSetters = Arrays.asList(new BooleanDatabaseTypeSetter(),\n+                                                                               new BooleanDatabaseTypeSetter());\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory(registeredDatabaseTypeSetters);\n+\n+        Assertions.assertThrows(IllegalStateException.class, () -> databaseTypeSetterFactory.get(BOOL_DEFAULT_DATABASE_TYPE_SETTER));\n+    }\n+\n+    @Test\n+    public void testGetWithDefaultRegisteredTypeSettersWhenMatchingBoolTypeSetter() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87b75694479f4b22d9b473cebd839bf0aed288a6"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1MTM4MQ==", "bodyText": "This assertion actually tests the type setter itself (whether it supports both string types) and not the factory. Change it to Assertions.assertTrue(resultDatabaseTypeSetter.getSupportedTypes().contains(STRING_TYPE)); and remove the STRING_DEFAULT_DATABASE_TYPE_SETTER_2 constant.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454151381", "createdAt": "2020-07-14T07:14:43Z", "author": {"login": "nictas"}, "path": "com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/DatabaseTypeSetterFactoryTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.executor.type;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+class DatabaseTypeSetterFactoryTest {\n+\n+    private static final String NON_EXISTING_DATABASE_TYPE_SETTER = \"test\";\n+    private static final String BOOL_DEFAULT_DATABASE_TYPE_SETTER = \"bool\";\n+    private static final String LONG_DEFAULT_DATABASE_TYPE_SETTER = \"int8\";\n+    private static final String STRING_DEFAULT_DATABASE_TYPE_SETTER_1 = \"varchar\";\n+    private static final String STRING_DEFAULT_DATABASE_TYPE_SETTER_2 = \"text\";\n+\n+    private DatabaseTypeSetterFactory databaseTypeSetterFactory;\n+\n+    @Test\n+    public void testGetWithNullStringParameter() {\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory();\n+\n+        Assertions.assertThrows(IllegalStateException.class, () -> databaseTypeSetterFactory.get(null));\n+    }\n+\n+    @Test\n+    public void testGetWithEmptyStringParameter() {\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory();\n+\n+        Assertions.assertThrows(IllegalStateException.class, () -> databaseTypeSetterFactory.get(\"\"));\n+    }\n+\n+    @Test\n+    public void testGetWithCustomRegisteredTypeSettersAndSingleMatch() {\n+        List<DatabaseTypeSetter> registeredDatabaseTypeSetters = Arrays.asList(new BooleanDatabaseTypeSetter());\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory(registeredDatabaseTypeSetters);\n+\n+        DatabaseTypeSetter resultDatabaseTypeSetter = databaseTypeSetterFactory.get(BOOL_DEFAULT_DATABASE_TYPE_SETTER);\n+\n+        Assertions.assertEquals(registeredDatabaseTypeSetters.get(0), resultDatabaseTypeSetter);\n+    }\n+\n+    @Test\n+    public void testGetWithCustomRegisteredTypeSettersWhenNoMatchingTypeSetter() {\n+        List<DatabaseTypeSetter> registeredDatabaseTypeSetters = Arrays.asList(new BooleanDatabaseTypeSetter());\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory(registeredDatabaseTypeSetters);\n+\n+        Assertions.assertThrows(IllegalStateException.class, () -> databaseTypeSetterFactory.get(NON_EXISTING_DATABASE_TYPE_SETTER));\n+    }\n+\n+    @Test\n+    public void testGetWithCustomRegisteredTypeSettersWhenMultipleMatchingTypeSetters() {\n+        List<DatabaseTypeSetter> registeredDatabaseTypeSetters = Arrays.asList(new BooleanDatabaseTypeSetter(),\n+                                                                               new BooleanDatabaseTypeSetter());\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory(registeredDatabaseTypeSetters);\n+\n+        Assertions.assertThrows(IllegalStateException.class, () -> databaseTypeSetterFactory.get(BOOL_DEFAULT_DATABASE_TYPE_SETTER));\n+    }\n+\n+    @Test\n+    public void testGetWithDefaultRegisteredTypeSettersWhenMatchingBoolTypeSetter() {\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory();\n+\n+        DatabaseTypeSetter resultDatabaseTypeSetter = databaseTypeSetterFactory.get(BOOL_DEFAULT_DATABASE_TYPE_SETTER);\n+\n+        Assertions.assertTrue(resultDatabaseTypeSetter.getSupportedTypes()\n+                                                      .contains(BOOL_DEFAULT_DATABASE_TYPE_SETTER));\n+    }\n+\n+    @Test\n+    public void testGetWithDefaultRegisteredTypeSettersWhenMatchingLongTypeSetter() {\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory();\n+\n+        DatabaseTypeSetter resultDatabaseTypeSetter = databaseTypeSetterFactory.get(LONG_DEFAULT_DATABASE_TYPE_SETTER);\n+\n+        Assertions.assertTrue(resultDatabaseTypeSetter.getSupportedTypes()\n+                                                      .contains(LONG_DEFAULT_DATABASE_TYPE_SETTER));\n+    }\n+\n+    @Test\n+    public void testGetWithDefaultRegisteredTypeSettersWhenMatchingStringTypeSetter1() {\n+        databaseTypeSetterFactory = new DatabaseTypeSetterFactory();\n+\n+        DatabaseTypeSetter resultDatabaseTypeSetter = databaseTypeSetterFactory.get(STRING_DEFAULT_DATABASE_TYPE_SETTER_1);\n+\n+        Assertions.assertTrue(resultDatabaseTypeSetter.getSupportedTypes()\n+                                                      .contains(STRING_DEFAULT_DATABASE_TYPE_SETTER_2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87b75694479f4b22d9b473cebd839bf0aed288a6"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1MjAwNQ==", "bodyText": "You've renamed the type, but not some of the variables/methods. Rename them for consistency.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454152005", "createdAt": "2020-07-14T07:15:58Z", "author": {"login": "nictas"}, "path": "com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseTableMigrationExecutor.java", "diffHunk": "@@ -24,11 +24,11 @@\n     @Override\n     public void executeMigrationInternal(String databaseTable) throws SQLException {\n         logger.info(\"Migrating table \\\"{}\\\"...\", databaseTable);\n-        DatabaseTableMetadata sourceTableMetadata = extractTableMetadataFromSourceDatabase(databaseTable);\n+        DatabaseTableData sourceTableMetadata = extractTableMetadataFromSourceDatabase(databaseTable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5827a0a88efd9383a9482c7b7afa015a487ec662"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1Mzk4MA==", "bodyText": "Do you need the entire metadata as key? Why not just the column's name?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454153980", "createdAt": "2020-07-14T07:19:59Z", "author": {"login": "nictas"}, "path": "com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/metadata/DatabaseTableRowData.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.metadata;\n+\n+import java.util.Map;\n+\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+public interface DatabaseTableRowData {\n+\n+    Map<DatabaseTableColumnMetadata, Object> getValues();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5827a0a88efd9383a9482c7b7afa015a487ec662"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1Njk0MA==", "bodyText": "The index starts from 0 here, but ResultSet counts is columns from 1. See: https://docs.oracle.com/javase/7/docs/api/java/sql/ResultSet.html#getObject(int,%20java.util.Map)", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454156940", "createdAt": "2020-07-14T07:25:42Z", "author": {"login": "nictas"}, "path": "com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/client/DatabaseQueryClient.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.client;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.ResultSet;\n+import java.sql.ResultSetMetaData;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.sap.cloud.lm.sl.cf.database.migration.executor.type.DatabaseTypeSetter;\n+import com.sap.cloud.lm.sl.cf.database.migration.executor.type.DatabaseTypeSetterFactory;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.DatabaseTableColumnMetadata;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.DatabaseTableData;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.DatabaseTableRowData;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.ImmutableDatabaseTableColumnMetadata;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.ImmutableDatabaseTableData;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.ImmutableDatabaseTableRowData;\n+import com.sap.cloud.lm.sl.cf.persistence.util.JdbcUtil;\n+import com.sap.cloud.lm.sl.cf.persistence.util.SqlQueryExecutor;\n+\n+public class DatabaseQueryClient {\n+\n+    private final SqlQueryExecutor sqlQueryExecutor;\n+\n+    public DatabaseQueryClient(SqlQueryExecutor sqlQueryExecutor) {\n+        this.sqlQueryExecutor = sqlQueryExecutor;\n+    }\n+\n+    public long getLastSequenceValue(String sequenceName) throws SQLException {\n+        return sqlQueryExecutor.executeWithAutoCommit(connection -> {\n+            PreparedStatement preparedStatement = null;\n+            ResultSet resultSet = null;\n+            try {\n+                preparedStatement = connection.prepareStatement(String.format(\"SELECT last_value FROM %s\", sequenceName));\n+                resultSet = preparedStatement.executeQuery();\n+                while (resultSet.next()) {\n+                    return resultSet.getLong(1);\n+                }\n+                return 0L;\n+            } finally {\n+                JdbcUtil.closeQuietly(resultSet);\n+                JdbcUtil.closeQuietly(preparedStatement);\n+            }\n+        });\n+    }\n+\n+    public void updateSequence(String sequenceName, long lastSequenceValue) throws SQLException {\n+        sqlQueryExecutor.executeWithAutoCommit(connection -> {\n+            PreparedStatement preparedStatement = null;\n+            try {\n+                preparedStatement = connection.prepareStatement(String.format(\"SELECT setval('%s', %d, false)\", sequenceName,\n+                                                                              lastSequenceValue));\n+                preparedStatement.executeQuery();\n+                return null;\n+            } finally {\n+                JdbcUtil.closeQuietly(preparedStatement);\n+            }\n+        });\n+    }\n+\n+    public DatabaseTableData extractTableData(String databaseTable) throws SQLException {\n+        return sqlQueryExecutor.executeWithAutoCommit(connection -> {\n+            PreparedStatement preparedStatement = null;\n+            ResultSet resultSet = null;\n+            try {\n+                preparedStatement = connection.prepareStatement(String.format(\"SELECT * FROM %s\", databaseTable));\n+                resultSet = preparedStatement.executeQuery();\n+                return buildDatabaseTableData(databaseTable, resultSet);\n+            } finally {\n+                JdbcUtil.closeQuietly(resultSet);\n+                JdbcUtil.closeQuietly(preparedStatement);\n+            }\n+        });\n+    }\n+\n+    private DatabaseTableData buildDatabaseTableData(String databaseTable, ResultSet resultSet) throws SQLException {\n+        List<DatabaseTableColumnMetadata> databaseTableColumnsMetadata = parseDatabaseColumnsMetadata(resultSet.getMetaData());\n+        List<DatabaseTableRowData> databaseTableRowsData = parseDatabaseRowsData(resultSet, databaseTableColumnsMetadata);\n+        return ImmutableDatabaseTableData.builder()\n+                                         .tableName(databaseTable)\n+                                         .addAllTableColumnsMetadata(databaseTableColumnsMetadata)\n+                                         .addAllTableRowsData(databaseTableRowsData)\n+                                         .build();\n+    }\n+\n+    private List<DatabaseTableColumnMetadata> parseDatabaseColumnsMetadata(ResultSetMetaData resultSetMetadata) throws SQLException {\n+        List<DatabaseTableColumnMetadata> databaseColumnsMetadata = new ArrayList<>();\n+        for (int currentColumnIndex = 1; currentColumnIndex <= resultSetMetadata.getColumnCount(); currentColumnIndex++) {\n+            databaseColumnsMetadata.add(ImmutableDatabaseTableColumnMetadata.builder()\n+                                                                            .columnName(resultSetMetadata.getColumnName(currentColumnIndex))\n+                                                                            .columnType(resultSetMetadata.getColumnTypeName(currentColumnIndex))\n+                                                                            .build());\n+        }\n+        return databaseColumnsMetadata;\n+    }\n+\n+    private List<DatabaseTableRowData> parseDatabaseRowsData(ResultSet resultSet, List<DatabaseTableColumnMetadata> databaseColumnsMetadata)\n+        throws SQLException {\n+        List<DatabaseTableRowData> databaseTableRowsData = new ArrayList<>();\n+        while (resultSet.next()) {\n+            databaseTableRowsData.add(ImmutableDatabaseTableRowData.builder()\n+                                                                   .putAllValues(collectRowValues(resultSet, databaseColumnsMetadata))\n+                                                                   .build());\n+        }\n+        return databaseTableRowsData;\n+    }\n+\n+    private Map<DatabaseTableColumnMetadata, Object>\n+            collectRowValues(ResultSet resultSet, List<DatabaseTableColumnMetadata> databaseColumnsMetadata) throws SQLException {\n+        Map<DatabaseTableColumnMetadata, Object> databaseTableRowValues = new HashMap<>();\n+        for (int currentColumnIndex = 0; currentColumnIndex < databaseColumnsMetadata.size(); currentColumnIndex++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef2c261918da4608cb417db81c63816aaa136a60"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2MDA4NA==", "bodyText": "You don't need constants for these. Just use them directly. Constants are useful for reducing duplication and giving a meaningful name to something, but here they're not doing either.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454160084", "createdAt": "2020-07-14T07:31:39Z", "author": {"login": "nictas"}, "path": "com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseSequenceMigrationExecutorTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.executor;\n+\n+import java.sql.SQLException;\n+\n+import javax.sql.DataSource;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import com.sap.cloud.lm.sl.cf.database.migration.client.DatabaseQueryClient;\n+\n+class DatabaseSequenceMigrationExecutorTest {\n+\n+    private static final String TEST_SEQUENCE_NAME = \"test\";\n+\n+    private static final long ZERO_SEQUENCE_VALUE = 0L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7531498dc719495f9865826d67156371ad36097"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2MDgwNw==", "bodyText": "Since null is the default value mocks return, this statement is not needed.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454160807", "createdAt": "2020-07-14T07:33:07Z", "author": {"login": "nictas"}, "path": "com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseTableMigrationExecutorTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.executor;\n+\n+import java.sql.SQLException;\n+\n+import javax.sql.DataSource;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import com.sap.cloud.lm.sl.cf.database.migration.client.DatabaseQueryClient;\n+import com.sap.cloud.lm.sl.cf.database.migration.generator.DatabaseTableInsertQueryGenerator;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.DatabaseTableData;\n+\n+class DatabaseTableMigrationExecutorTest {\n+\n+    private static final String TEST_DATABASE_TABLE = \"test\";\n+    private static final DatabaseTableData DATABASE_TABLE_METADATA = null;\n+\n+    @Mock\n+    private DataSource mockSourceDataSource;\n+    @Mock\n+    private DataSource mockTargetDataSource;\n+    @Mock\n+    private DatabaseQueryClient mockSourceDatabaseQueryClient;\n+    @Mock\n+    private DatabaseQueryClient mockTargetDatabaseQueryClient;\n+    @Mock\n+    private DatabaseTableInsertQueryGenerator mockDatabaseTableInsertQueryGenerator;\n+\n+    private ImmutableDatabaseTableMigrationExecutor databaseTableMigrationExecutor;\n+\n+    @BeforeEach\n+    public void initialiseDatabaseTableMigrationExecutorAndConfigureMocks() throws SQLException {\n+        MockitoAnnotations.initMocks(this);\n+        databaseTableMigrationExecutor = ImmutableDatabaseTableMigrationExecutor.builder()\n+                                                                                .sourceDataSource(mockSourceDataSource)\n+                                                                                .targetDataSource(mockTargetDataSource)\n+                                                                                .sourceDatabaseQueryClient(mockSourceDatabaseQueryClient)\n+                                                                                .targetDatabaseQueryClient(mockTargetDatabaseQueryClient)\n+                                                                                .databaseTableInsertQueryGenerator(mockDatabaseTableInsertQueryGenerator)\n+                                                                                .build();\n+        Mockito.doReturn(DATABASE_TABLE_METADATA)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13cfc2fb9f64b58f53853b674b92f4e6f99415f8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2MTYxNg==", "bodyText": "Test executeMigration and not executeMigrationInternal since the latter is more prone to changes in its interface.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454161616", "createdAt": "2020-07-14T07:34:43Z", "author": {"login": "nictas"}, "path": "com.sap.cloud.lm.sl.cf.database/src/test/java/com/sap/cloud/lm/sl/cf/database/migration/executor/DatabaseTableMigrationExecutorTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package com.sap.cloud.lm.sl.cf.database.migration.executor;\n+\n+import java.sql.SQLException;\n+\n+import javax.sql.DataSource;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import com.sap.cloud.lm.sl.cf.database.migration.client.DatabaseQueryClient;\n+import com.sap.cloud.lm.sl.cf.database.migration.generator.DatabaseTableInsertQueryGenerator;\n+import com.sap.cloud.lm.sl.cf.database.migration.metadata.DatabaseTableData;\n+\n+class DatabaseTableMigrationExecutorTest {\n+\n+    private static final String TEST_DATABASE_TABLE = \"test\";\n+    private static final DatabaseTableData DATABASE_TABLE_METADATA = null;\n+\n+    @Mock\n+    private DataSource mockSourceDataSource;\n+    @Mock\n+    private DataSource mockTargetDataSource;\n+    @Mock\n+    private DatabaseQueryClient mockSourceDatabaseQueryClient;\n+    @Mock\n+    private DatabaseQueryClient mockTargetDatabaseQueryClient;\n+    @Mock\n+    private DatabaseTableInsertQueryGenerator mockDatabaseTableInsertQueryGenerator;\n+\n+    private ImmutableDatabaseTableMigrationExecutor databaseTableMigrationExecutor;\n+\n+    @BeforeEach\n+    public void initialiseDatabaseTableMigrationExecutorAndConfigureMocks() throws SQLException {\n+        MockitoAnnotations.initMocks(this);\n+        databaseTableMigrationExecutor = ImmutableDatabaseTableMigrationExecutor.builder()\n+                                                                                .sourceDataSource(mockSourceDataSource)\n+                                                                                .targetDataSource(mockTargetDataSource)\n+                                                                                .sourceDatabaseQueryClient(mockSourceDatabaseQueryClient)\n+                                                                                .targetDatabaseQueryClient(mockTargetDatabaseQueryClient)\n+                                                                                .databaseTableInsertQueryGenerator(mockDatabaseTableInsertQueryGenerator)\n+                                                                                .build();\n+        Mockito.doReturn(DATABASE_TABLE_METADATA)\n+               .when(mockSourceDatabaseQueryClient)\n+               .extractTableData(Mockito.anyString());\n+        Mockito.doReturn(\"\")\n+               .when(mockDatabaseTableInsertQueryGenerator)\n+               .generate(DATABASE_TABLE_METADATA);\n+    }\n+\n+    @Test\n+    public void testExecuteMigrationInternalWithTestDatabaseTableString() throws SQLException {\n+        databaseTableMigrationExecutor.executeMigrationInternal(TEST_DATABASE_TABLE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13cfc2fb9f64b58f53853b674b92f4e6f99415f8"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3OTM1MTg0", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#pullrequestreview-447935184", "createdAt": "2020-07-14T09:19:36Z", "commit": {"oid": "ea5f1ebe3d7a1edd70420dbe673b975c682842dd"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOToxOTozNlrOGxLb9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwOToyMDowMVrOGxLc6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIyMDc5MQ==", "bodyText": "Unnecessary unboxing of value", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454220791", "createdAt": "2020-07-14T09:19:36Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/BooleanDatabaseTypeSetter.java", "diffHunk": "@@ -14,8 +13,9 @@\n     }\n \n     @Override\n-    public void setType(int columnIndex, PreparedStatement insertStatement, ResultSet sourceData) throws SQLException {\n-        insertStatement.setBoolean(columnIndex, sourceData.getBoolean(columnIndex));\n+    public void setType(int columnIndex, PreparedStatement insertStatement, Object value) throws SQLException {\n+        insertStatement.setBoolean(columnIndex, ((Boolean) value).booleanValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea5f1ebe3d7a1edd70420dbe673b975c682842dd"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDIyMTAzMw==", "bodyText": "Unnecessary unboxing of value", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#discussion_r454221033", "createdAt": "2020-07-14T09:20:01Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.database/src/main/java/com/sap/cloud/lm/sl/cf/database/migration/executor/type/LongDatabaseTypeSetter.java", "diffHunk": "@@ -14,8 +13,8 @@\n     }\n \n     @Override\n-    public void setType(int columnIndex, PreparedStatement insertStatement, ResultSet sourceData) throws SQLException {\n-        insertStatement.setLong(columnIndex, sourceData.getLong(columnIndex));\n+    public void setType(int columnIndex, PreparedStatement insertStatement, Object value) throws SQLException {\n+        insertStatement.setLong(columnIndex, ((Long) value).longValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea5f1ebe3d7a1edd70420dbe673b975c682842dd"}, "originalPosition": 15}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea5f1ebe3d7a1edd70420dbe673b975c682842dd", "author": {"user": {"login": "Boris-ILIEV", "name": null}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/ea5f1ebe3d7a1edd70420dbe673b975c682842dd", "committedDate": "2020-07-13T16:15:19Z", "message": "Adds test for DatabaseTableInsertQueryGenerator"}, "afterCommit": {"oid": "0dadba95ca85f138b1de9e57a326468629d50d76", "author": {"user": {"login": "Boris-ILIEV", "name": null}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/0dadba95ca85f138b1de9e57a326468629d50d76", "committedDate": "2020-07-14T09:40:01Z", "message": "Adds test for DatabaseTableInsertQueryGenerator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0dadba95ca85f138b1de9e57a326468629d50d76", "author": {"user": {"login": "Boris-ILIEV", "name": null}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/0dadba95ca85f138b1de9e57a326468629d50d76", "committedDate": "2020-07-14T09:40:01Z", "message": "Adds test for DatabaseTableInsertQueryGenerator"}, "afterCommit": {"oid": "a38f26c99256b66530702c5e4fb6f9660c05ba45", "author": {"user": {"login": "Boris-ILIEV", "name": null}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/a38f26c99256b66530702c5e4fb6f9660c05ba45", "committedDate": "2020-07-14T09:46:01Z", "message": "Adds test for DatabaseTableInsertQueryGenerator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a38f26c99256b66530702c5e4fb6f9660c05ba45", "author": {"user": {"login": "Boris-ILIEV", "name": null}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/a38f26c99256b66530702c5e4fb6f9660c05ba45", "committedDate": "2020-07-14T09:46:01Z", "message": "Adds test for DatabaseTableInsertQueryGenerator"}, "afterCommit": {"oid": "1292277df421f1d548566d5eec1d23f9f3e6656a", "author": {"user": {"login": "Boris-ILIEV", "name": null}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/1292277df421f1d548566d5eec1d23f9f3e6656a", "committedDate": "2020-07-14T09:54:04Z", "message": "Adds test for DatabaseTableInsertQueryGenerator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MDM0Mzgw", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/901#pullrequestreview-448034380", "createdAt": "2020-07-14T11:51:18Z", "commit": {"oid": "1292277df421f1d548566d5eec1d23f9f3e6656a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8bef3a8854d5677ac6989b10d8c427903668a72", "author": {"user": {"login": "Boris-ILIEV", "name": null}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/f8bef3a8854d5677ac6989b10d8c427903668a72", "committedDate": "2020-07-16T15:04:17Z", "message": "Makes DatabaseTypeSetterFactory testable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd09d2e87a890f6541669a15510bab37e6f88016", "author": {"user": {"login": "Boris-ILIEV", "name": null}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/cd09d2e87a890f6541669a15510bab37e6f88016", "committedDate": "2020-07-16T15:04:17Z", "message": "Adds DatabaseTypeSetterFactory test class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d778409837e01a9f3b7e473b6cd91c736fd6bb92", "author": {"user": {"login": "Boris-ILIEV", "name": null}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/d778409837e01a9f3b7e473b6cd91c736fd6bb92", "committedDate": "2020-07-17T06:51:49Z", "message": "Adds DatabaseTableRowData interface and renames DatabaseTableMetadata to DatabaseTableData"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "788b5e24165f3565db0199b5c477a92ee4ab3b6e", "author": {"user": {"login": "Boris-ILIEV", "name": null}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/788b5e24165f3565db0199b5c477a92ee4ab3b6e", "committedDate": "2020-07-17T06:52:52Z", "message": "Adds DatabaseQueryClient class with changes in type setters and implements them in the project"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4268e018e9ccd37567f5627e6636a1025b4e96b2", "author": {"user": {"login": "Boris-ILIEV", "name": null}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/4268e018e9ccd37567f5627e6636a1025b4e96b2", "committedDate": "2020-07-17T06:52:52Z", "message": "Adds test for DatabaseSequenceMigrationExecutor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0c3839aee79ebba9e2c8fe6f0fb2afa21a35cbe", "author": {"user": {"login": "Boris-ILIEV", "name": null}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/c0c3839aee79ebba9e2c8fe6f0fb2afa21a35cbe", "committedDate": "2020-07-17T06:52:52Z", "message": "Adds test for DatabaseTableMigrationExecutor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b718255bacc9c71bcfd3823f63e61c2d18c424a", "author": {"user": {"login": "Boris-ILIEV", "name": null}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/8b718255bacc9c71bcfd3823f63e61c2d18c424a", "committedDate": "2020-07-17T06:52:52Z", "message": "Adds test for DatabaseTableInsertQueryGenerator"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1292277df421f1d548566d5eec1d23f9f3e6656a", "author": {"user": {"login": "Boris-ILIEV", "name": null}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/1292277df421f1d548566d5eec1d23f9f3e6656a", "committedDate": "2020-07-14T09:54:04Z", "message": "Adds test for DatabaseTableInsertQueryGenerator"}, "afterCommit": {"oid": "8b718255bacc9c71bcfd3823f63e61c2d18c424a", "author": {"user": {"login": "Boris-ILIEV", "name": null}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/8b718255bacc9c71bcfd3823f63e61c2d18c424a", "committedDate": "2020-07-17T06:52:52Z", "message": "Adds test for DatabaseTableInsertQueryGenerator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e44639d5eccc6c954514162af00c8a6a66b169f", "author": {"user": {"login": "Boris-ILIEV", "name": null}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/9e44639d5eccc6c954514162af00c8a6a66b169f", "committedDate": "2020-07-17T09:20:16Z", "message": "Adds multiapps package-info file and updates DatabaseTableRowData"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 958, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}