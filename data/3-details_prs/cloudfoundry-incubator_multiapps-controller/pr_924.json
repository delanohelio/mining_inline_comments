{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NjI4MTEz", "number": 924, "title": "Fix inaccurate calculation of delay between steps", "bodyText": "LMCROSSITXSADEPLOY-2135", "createdAt": "2020-08-07T14:12:12Z", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924", "merged": true, "mergeCommit": {"oid": "71345dc820e15edafdf03e38a03218194b4b54fa"}, "closed": true, "closedAt": "2020-08-27T14:07:45Z", "author": {"login": "radito3"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc9fuFDgFqTQ2NDA0MTQ3MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDA85-AFqTQ3Njc1NTI5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MDQxNDcx", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#pullrequestreview-464041471", "createdAt": "2020-08-10T08:30:24Z", "commit": {"oid": "090a5b1e434fe2e94b507d5089e741b72bcbfaa9"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwODozMDoyNFrOG-Fnzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxMDoyODo1MFrOG-JKAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc1NzAwNw==", "bodyText": "This message is a bit hard to read. I suggest:\nTime statistics for process \\\"{0}\\\" (part of operation \\\"{1}\\\"): duration \\\"{2}\\\" ms; delay between steps \\\"{3}\\\" ms\"", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r467757007", "createdAt": "2020-08-10T08:30:24Z", "author": {"login": "nictas"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/Messages.java", "diffHunk": "@@ -532,6 +532,9 @@\n     public static final String PACKAGE_STATUS_0_IS_IN_STATE_1 = \"Package status: \\\"{0}\\\" is in state: \\\"{1}\\\"\";\n     public static final String UPLOADED_PACKAGE_0 = \"Uploaded package: \\\"{0}\\\"\";\n     public static final String VERIFYING_APPLICATION_0_EXISTS = \"Verifying application: \\\"{0}\\\" exists\";\n+    public static final String PROCESS_TIME_FOR_OPERATION_0_PROCESS_1_DURATION_2_DELAY_3 = \"Process time for operation with id \\\"{0}\\\", process instance with id \\\"{1}\\\", process duration \\\"{2}\\\"ms, delay between steps \\\"{3}\\\"ms\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090a5b1e434fe2e94b507d5089e741b72bcbfaa9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc1ODQzNw==", "bodyText": "Same. I suggest:\nTime statistics for operation \\\"{0}\\\": duration \\\"{1}\\\" ms; delay between steps \\\"{2}\\\" ms\"", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r467758437", "createdAt": "2020-08-10T08:33:09Z", "author": {"login": "nictas"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/Messages.java", "diffHunk": "@@ -532,6 +532,9 @@\n     public static final String PACKAGE_STATUS_0_IS_IN_STATE_1 = \"Package status: \\\"{0}\\\" is in state: \\\"{1}\\\"\";\n     public static final String UPLOADED_PACKAGE_0 = \"Uploaded package: \\\"{0}\\\"\";\n     public static final String VERIFYING_APPLICATION_0_EXISTS = \"Verifying application: \\\"{0}\\\" exists\";\n+    public static final String PROCESS_TIME_FOR_OPERATION_0_PROCESS_1_DURATION_2_DELAY_3 = \"Process time for operation with id \\\"{0}\\\", process instance with id \\\"{1}\\\", process duration \\\"{2}\\\"ms, delay between steps \\\"{3}\\\"ms\";\n+    public static final String PROCESS_TIME_FOR_OPERATION_0_DURATION_1_DELAY_2 = \"Process time for operation with id \\\"{0}\\\", operation duration \\\"{1}\\\"ms, delay between steps \\\"{2}\\\"ms\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090a5b1e434fe2e94b507d5089e741b72bcbfaa9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc2MjQ3OQ==", "bodyText": "Here we're storing only clients that can be associated with some Flowable process. That's because there's a Flowable listener that removes them from this cache when the process finishes, but there's no such thing for clients that are created in our REST controllers. Theoretically, if the cache wasn't memory-sensitive they would stay in it forever, which would eventually cause an OOM error. Your change makes it so that every client is stored. This would work thanks to the memory-sensitivity, but it would still be less optimal than what we have currently, so I don't think this refactoring is a good idea.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r467762479", "createdAt": "2020-08-10T08:41:49Z", "author": {"login": "nictas"}, "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/cf/CloudControllerClientProvider.java", "diffHunk": "@@ -126,33 +108,16 @@ private OAuth2AccessToken getValidToken(String userName) {\n     }\n \n     private CloudControllerClient getClientFromCache(String userName, String org, String space) {\n-        return getClientFromCache(userName, org, space, null);\n-    }\n-\n-    private CloudControllerClient getClientFromCache(String userName, String org, String space, String processId) {\n-        // Get a client from the cache or create a new one if needed\n         String key = getKey(userName, org, space);\n-        CloudControllerClient client = clients.get(key);\n-        if (client == null) {\n-            client = clientFactory.createClient(getValidToken(userName), org, space);\n-            if (processId != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090a5b1e434fe2e94b507d5089e741b72bcbfaa9"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc2NDAyNw==", "bodyText": "The name of the method doesn't really fit with its return value IMO. Maybe it should be called collectProcessTimes? Consider renaming the entire class as well.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r467764027", "createdAt": "2020-08-10T08:45:01Z", "author": {"login": "nictas"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/util/OperationTimeAggregator.java", "diffHunk": "@@ -9,52 +10,53 @@\n import javax.inject.Named;\n \n import org.cloudfoundry.multiapps.controller.process.flowable.FlowableFacade;\n-import org.cloudfoundry.multiapps.controller.process.util.ProcessTimeCalculator.ProcessTime;\n-import org.cloudfoundry.multiapps.controller.process.util.ProcessTimeCalculator.ProcessTimeLogger;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n @Named\n public class OperationTimeAggregator {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(OperationTimeAggregator.class);\n-\n-    private ProcessTimeCalculator processTimeCalculator;\n-    private FlowableFacade flowableFacade;\n+    private final ProcessTimeCalculator processTimeCalculator;\n+    private final FlowableFacade flowableFacade;\n \n     @Inject\n     public OperationTimeAggregator(FlowableFacade flowableFacade) {\n         this.flowableFacade = flowableFacade;\n         this.processTimeCalculator = new ProcessTimeCalculator(flowableFacade);\n     }\n \n-    public void aggregateOperationTime(String correlationId) {\n+    public Map<String, ProcessTime> aggregateOperationTime(String correlationId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090a5b1e434fe2e94b507d5089e741b72bcbfaa9"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc5NDE1Mw==", "bodyText": "I agree. :D", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r467794153", "createdAt": "2020-08-10T09:44:44Z", "author": {"login": "nictas"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/util/OperationTimeAggregator.java", "diffHunk": "@@ -9,52 +10,53 @@\n import javax.inject.Named;\n \n import org.cloudfoundry.multiapps.controller.process.flowable.FlowableFacade;\n-import org.cloudfoundry.multiapps.controller.process.util.ProcessTimeCalculator.ProcessTime;\n-import org.cloudfoundry.multiapps.controller.process.util.ProcessTimeCalculator.ProcessTimeLogger;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n @Named\n public class OperationTimeAggregator {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(OperationTimeAggregator.class);\n-\n-    private ProcessTimeCalculator processTimeCalculator;\n-    private FlowableFacade flowableFacade;\n+    private final ProcessTimeCalculator processTimeCalculator;\n+    private final FlowableFacade flowableFacade;\n \n     @Inject\n     public OperationTimeAggregator(FlowableFacade flowableFacade) {\n         this.flowableFacade = flowableFacade;\n         this.processTimeCalculator = new ProcessTimeCalculator(flowableFacade);\n     }\n \n-    public void aggregateOperationTime(String correlationId) {\n+    public Map<String, ProcessTime> aggregateOperationTime(String correlationId) {\n         List<String> historicSubProcesses = flowableFacade.getHistoricSubProcessIds(correlationId);\n         historicSubProcesses.add(correlationId);\n \n-        Map<String, ProcessTime> processTimesForSubProcesses = historicSubProcesses.stream()\n-                                                                                   .collect(Collectors.toMap(processId -> processId,\n-                                                                                                             processTimeCalculator::calculate));\n-        processTimesForSubProcesses.forEach((key, value) -> logProcessTimeIndividually(value, correlationId,\n-                key));\n-\n-        ProcessTime rootProcessTime = processTimesForSubProcesses.get(correlationId);\n-        logOverallProcesstime(correlationId, rootProcessTime, processTimesForSubProcesses.values());\n+        return historicSubProcesses.stream()\n+                                   .collect(Collectors.toMap(processId -> processId, processTimeCalculator::calculate));\n     }\n \n-    private void logProcessTimeIndividually(ProcessTime processTime, String correlationId, String processInstanceId) {\n-        ProcessTimeLogger.logProcessTimeIndividually(LOGGER, processTime, correlationId, processInstanceId);\n-    }\n+    public ProcessTime computeOverallProcessTime(String correlationId, Map<String, ProcessTime> processTimes) {\n+        //may not be the best idea if this changes the input parameter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090a5b1e434fe2e94b507d5089e741b72bcbfaa9"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc5NzcwOQ==", "bodyText": "What if you have a call activity within a call activity (no parallel BS)? The end time of the sub process started by the first call activity will be after the start time of the sub process started by the inner call activity. This method will return true, but that will be incorrect.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r467797709", "createdAt": "2020-08-10T09:52:06Z", "author": {"login": "nictas"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/util/OperationTimeAggregator.java", "diffHunk": "@@ -9,52 +10,53 @@\n import javax.inject.Named;\n \n import org.cloudfoundry.multiapps.controller.process.flowable.FlowableFacade;\n-import org.cloudfoundry.multiapps.controller.process.util.ProcessTimeCalculator.ProcessTime;\n-import org.cloudfoundry.multiapps.controller.process.util.ProcessTimeCalculator.ProcessTimeLogger;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n @Named\n public class OperationTimeAggregator {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(OperationTimeAggregator.class);\n-\n-    private ProcessTimeCalculator processTimeCalculator;\n-    private FlowableFacade flowableFacade;\n+    private final ProcessTimeCalculator processTimeCalculator;\n+    private final FlowableFacade flowableFacade;\n \n     @Inject\n     public OperationTimeAggregator(FlowableFacade flowableFacade) {\n         this.flowableFacade = flowableFacade;\n         this.processTimeCalculator = new ProcessTimeCalculator(flowableFacade);\n     }\n \n-    public void aggregateOperationTime(String correlationId) {\n+    public Map<String, ProcessTime> aggregateOperationTime(String correlationId) {\n         List<String> historicSubProcesses = flowableFacade.getHistoricSubProcessIds(correlationId);\n         historicSubProcesses.add(correlationId);\n \n-        Map<String, ProcessTime> processTimesForSubProcesses = historicSubProcesses.stream()\n-                                                                                   .collect(Collectors.toMap(processId -> processId,\n-                                                                                                             processTimeCalculator::calculate));\n-        processTimesForSubProcesses.forEach((key, value) -> logProcessTimeIndividually(value, correlationId,\n-                key));\n-\n-        ProcessTime rootProcessTime = processTimesForSubProcesses.get(correlationId);\n-        logOverallProcesstime(correlationId, rootProcessTime, processTimesForSubProcesses.values());\n+        return historicSubProcesses.stream()\n+                                   .collect(Collectors.toMap(processId -> processId, processTimeCalculator::calculate));\n     }\n \n-    private void logProcessTimeIndividually(ProcessTime processTime, String correlationId, String processInstanceId) {\n-        ProcessTimeLogger.logProcessTimeIndividually(LOGGER, processTime, correlationId, processInstanceId);\n-    }\n+    public ProcessTime computeOverallProcessTime(String correlationId, Map<String, ProcessTime> processTimes) {\n+        //may not be the best idea if this changes the input parameter\n+        ProcessTime rootProcessTime = processTimes.remove(correlationId);\n \n-    private void logOverallProcesstime(String correlationId, ProcessTime rootProcessTime,\n-                                       Collection<ProcessTime> subProcessesProcessTimes) {\n-        long overallDelayBetweenSteps = subProcessesProcessTimes.stream()\n-                                                                .mapToLong(ProcessTime::getDelayBetweenSteps)\n-                                                                .sum();\n-        ProcessTime overallProcessTime = ImmutableProcessTime.copyOf(rootProcessTime)\n-                                                             .withDelayBetweenSteps(rootProcessTime.getDelayBetweenSteps()\n-                                                                 + overallDelayBetweenSteps);\n+        long overallDelayBetweenSteps = processTimes.values()\n+                                                    .stream()\n+                                                    .mapToLong(ProcessTime::getDelayBetweenSteps)\n+                                                    .sum();\n+\n+        return ImmutableProcessTime.copyOf(rootProcessTime)\n+                                   .withDelayBetweenSteps(rootProcessTime.getDelayBetweenSteps() + overallDelayBetweenSteps);\n+    }\n \n-        ProcessTimeLogger.logOverallProcessTime(LOGGER, overallProcessTime, correlationId);\n+    public boolean hasParallelSubProcesses(Map<String, ProcessTime> subProcessTimes) {\n+        ProcessTime[] processTimes = subProcessTimes.values()\n+                                                    .toArray(new ProcessTime[0]);\n+        Arrays.sort(processTimes, Comparator.comparing(ProcessTime::getStartTime));\n+\n+        for (int i = 0; i < processTimes.length - 1; i++) {\n+            for (int j = i + 1; j < processTimes.length; j++) {\n+                if (processTimes[i].getEndTime()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090a5b1e434fe2e94b507d5089e741b72bcbfaa9"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc5ODEyMw==", "bodyText": "Is this actually serialized anywhere? If not, then you don't need these Jackson annotations.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r467798123", "createdAt": "2020-08-10T09:52:54Z", "author": {"login": "nictas"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/util/ProcessTime.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package org.cloudfoundry.multiapps.controller.process.util;\n+\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n+import org.immutables.value.Value;\n+\n+import java.util.Date;\n+\n+@Value.Immutable\n+@JsonSerialize(as = ImmutableProcessTime.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090a5b1e434fe2e94b507d5089e741b72bcbfaa9"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Nzc5OTgyMA==", "bodyText": "Why not when(flowableFacade.getHistoricProcessById(CORRELATION_ID)).thenReturn(createProcess())? It would be consistent with the line above.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r467799820", "createdAt": "2020-08-10T09:56:15Z", "author": {"login": "nictas"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/util/OperationTimeAggregatorTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.cloudfoundry.multiapps.controller.process.util;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+import org.cloudfoundry.multiapps.controller.process.flowable.FlowableFacade;\n+import org.flowable.engine.HistoryService;\n+import org.flowable.engine.ProcessEngine;\n+import org.flowable.engine.history.HistoricActivityInstance;\n+import org.flowable.engine.history.HistoricActivityInstanceQuery;\n+import org.flowable.engine.history.HistoricProcessInstance;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class OperationTimeAggregatorTest {\n+\n+    private static final String CORRELATION_ID = \"id\";\n+\n+    @Mock\n+    private FlowableFacade flowableFacade;\n+    @InjectMocks\n+    private OperationTimeAggregator operationTimeAggregator;\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+    }\n+\n+    @Test\n+    void testOperationTimeWithNoSubProcesses() {\n+        //maybe split this test into multiple?\n+        when(flowableFacade.getHistoricSubProcessIds(CORRELATION_ID)).thenReturn(new ArrayList<>());\n+        doReturn(createProcess()).when(flowableFacade).getHistoricProcessById(CORRELATION_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090a5b1e434fe2e94b507d5089e741b72bcbfaa9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgwMDYzMw==", "bodyText": "Here you're using Mockito.when, but above you're using the static import. Use one or the other, but not both. Personally I prefer the one without the static import.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r467800633", "createdAt": "2020-08-10T09:57:50Z", "author": {"login": "nictas"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/util/OperationTimeAggregatorTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.cloudfoundry.multiapps.controller.process.util;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+import org.cloudfoundry.multiapps.controller.process.flowable.FlowableFacade;\n+import org.flowable.engine.HistoryService;\n+import org.flowable.engine.ProcessEngine;\n+import org.flowable.engine.history.HistoricActivityInstance;\n+import org.flowable.engine.history.HistoricActivityInstanceQuery;\n+import org.flowable.engine.history.HistoricProcessInstance;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class OperationTimeAggregatorTest {\n+\n+    private static final String CORRELATION_ID = \"id\";\n+\n+    @Mock\n+    private FlowableFacade flowableFacade;\n+    @InjectMocks\n+    private OperationTimeAggregator operationTimeAggregator;\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+    }\n+\n+    @Test\n+    void testOperationTimeWithNoSubProcesses() {\n+        //maybe split this test into multiple?\n+        when(flowableFacade.getHistoricSubProcessIds(CORRELATION_ID)).thenReturn(new ArrayList<>());\n+        doReturn(createProcess()).when(flowableFacade).getHistoricProcessById(CORRELATION_ID);\n+\n+        ProcessEngine processEngine = Mockito.mock(ProcessEngine.class);\n+        Mockito.when(flowableFacade.getProcessEngine())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090a5b1e434fe2e94b507d5089e741b72bcbfaa9"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzgxNDkxMg==", "bodyText": "Use Mockito.when instead of doReturn.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r467814912", "createdAt": "2020-08-10T10:28:50Z", "author": {"login": "nictas"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/util/OperationTimeAggregatorTest.java", "diffHunk": "@@ -0,0 +1,108 @@\n+package org.cloudfoundry.multiapps.controller.process.util;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.when;\n+\n+import org.cloudfoundry.multiapps.controller.process.flowable.FlowableFacade;\n+import org.flowable.engine.HistoryService;\n+import org.flowable.engine.ProcessEngine;\n+import org.flowable.engine.history.HistoricActivityInstance;\n+import org.flowable.engine.history.HistoricActivityInstanceQuery;\n+import org.flowable.engine.history.HistoricProcessInstance;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class OperationTimeAggregatorTest {\n+\n+    private static final String CORRELATION_ID = \"id\";\n+\n+    @Mock\n+    private FlowableFacade flowableFacade;\n+    @InjectMocks\n+    private OperationTimeAggregator operationTimeAggregator;\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+    }\n+\n+    @Test\n+    void testOperationTimeWithNoSubProcesses() {\n+        //maybe split this test into multiple?\n+        when(flowableFacade.getHistoricSubProcessIds(CORRELATION_ID)).thenReturn(new ArrayList<>());\n+        doReturn(createProcess()).when(flowableFacade).getHistoricProcessById(CORRELATION_ID);\n+\n+        ProcessEngine processEngine = Mockito.mock(ProcessEngine.class);\n+        Mockito.when(flowableFacade.getProcessEngine())\n+               .thenReturn(processEngine);\n+        HistoryService historyServiceMock = Mockito.mock(HistoryService.class);\n+        Mockito.when(processEngine.getHistoryService())\n+               .thenReturn(historyServiceMock);\n+        HistoricActivityInstanceQuery historicActivityInstanceQueryMock = Mockito.mock(HistoricActivityInstanceQuery.class);\n+        Mockito.when(historyServiceMock.createHistoricActivityInstanceQuery())\n+               .thenReturn(historicActivityInstanceQueryMock);\n+        Mockito.when(historicActivityInstanceQueryMock.processInstanceId(CORRELATION_ID))\n+               .thenReturn(historicActivityInstanceQueryMock);\n+        doReturn(mockProcessActivities(\"serviceTask\", 2, 100))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "090a5b1e434fe2e94b507d5089e741b72bcbfaa9"}, "originalPosition": 59}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "090a5b1e434fe2e94b507d5089e741b72bcbfaa9", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/090a5b1e434fe2e94b507d5089e741b72bcbfaa9", "committedDate": "2020-08-07T14:08:15Z", "message": "Fix inaccurate calculation of delay between steps\n\nlink to jira item will be here..."}, "afterCommit": {"oid": "0b868e33fa54794ed82cd578744ecfd6e6883aa3", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/0b868e33fa54794ed82cd578744ecfd6e6883aa3", "committedDate": "2020-08-17T09:30:42Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b868e33fa54794ed82cd578744ecfd6e6883aa3", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/0b868e33fa54794ed82cd578744ecfd6e6883aa3", "committedDate": "2020-08-17T09:30:42Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}, "afterCommit": {"oid": "1cee5dd32e1daa7fdc793ffbcecaeedb6a273fc5", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/1cee5dd32e1daa7fdc793ffbcecaeedb6a273fc5", "committedDate": "2020-08-17T09:49:46Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1cee5dd32e1daa7fdc793ffbcecaeedb6a273fc5", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/1cee5dd32e1daa7fdc793ffbcecaeedb6a273fc5", "committedDate": "2020-08-17T09:49:46Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}, "afterCommit": {"oid": "f4ffc7e30734b16f43255a94510942bfd6515cf2", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/f4ffc7e30734b16f43255a94510942bfd6515cf2", "committedDate": "2020-08-17T09:58:35Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f4ffc7e30734b16f43255a94510942bfd6515cf2", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/f4ffc7e30734b16f43255a94510942bfd6515cf2", "committedDate": "2020-08-17T09:58:35Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}, "afterCommit": {"oid": "dfe99897d47702fa980930d2269f9a963c52cf3b", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/dfe99897d47702fa980930d2269f9a963c52cf3b", "committedDate": "2020-08-17T10:06:41Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dfe99897d47702fa980930d2269f9a963c52cf3b", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/dfe99897d47702fa980930d2269f9a963c52cf3b", "committedDate": "2020-08-17T10:06:41Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}, "afterCommit": {"oid": "ab9f5fb8d2989954ee175201bdc93c45dcbc1ee4", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/ab9f5fb8d2989954ee175201bdc93c45dcbc1ee4", "committedDate": "2020-08-18T13:20:59Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab9f5fb8d2989954ee175201bdc93c45dcbc1ee4", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/ab9f5fb8d2989954ee175201bdc93c45dcbc1ee4", "committedDate": "2020-08-18T13:20:59Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}, "afterCommit": {"oid": "81fe818bfd41a59b4d6746669f235915dc1da695", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/81fe818bfd41a59b4d6746669f235915dc1da695", "committedDate": "2020-08-20T13:42:21Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "81fe818bfd41a59b4d6746669f235915dc1da695", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/81fe818bfd41a59b4d6746669f235915dc1da695", "committedDate": "2020-08-20T13:42:21Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}, "afterCommit": {"oid": "9d06b5a33cc6e42b75ebd7942a31166e75c63df3", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/9d06b5a33cc6e42b75ebd7942a31166e75c63df3", "committedDate": "2020-08-24T08:09:55Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d06b5a33cc6e42b75ebd7942a31166e75c63df3", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/9d06b5a33cc6e42b75ebd7942a31166e75c63df3", "committedDate": "2020-08-24T08:09:55Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}, "afterCommit": {"oid": "76c434b61d13a1297c6cd910d6cedf9bbdcb1f31", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/76c434b61d13a1297c6cd910d6cedf9bbdcb1f31", "committedDate": "2020-08-24T11:44:04Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "76c434b61d13a1297c6cd910d6cedf9bbdcb1f31", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/76c434b61d13a1297c6cd910d6cedf9bbdcb1f31", "committedDate": "2020-08-24T11:44:04Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}, "afterCommit": {"oid": "6f2a4aeaa3353b6155f6f3752ca5ea9dfc7380be", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/6f2a4aeaa3353b6155f6f3752ca5ea9dfc7380be", "committedDate": "2020-08-24T12:05:43Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0MzIyOTI0", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#pullrequestreview-474322924", "createdAt": "2020-08-25T09:55:31Z", "commit": {"oid": "6f2a4aeaa3353b6155f6f3752ca5ea9dfc7380be"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwOTo1NjozOVrOHGQwzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxMzozMTozOVrOHGYNbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjMyODE0MQ==", "bodyText": "Exception message does not match with passed variable. The message is related with space_id but passed argument is orgName.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r476328141", "createdAt": "2020-08-25T09:56:39Z", "author": {"login": "theghost5800"}, "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/cf/CloudControllerClientProvider.java", "diffHunk": "@@ -49,15 +49,15 @@ public CloudControllerClient getControllerClient(String userName, String org, St\n      * one.\n      *\n      * @param userName the user name associated with the client\n-     * @param spaceGuid the space guid associated with the client\n-     * @param processId the processId associated with the client\n+     * @param orgName the organization name associated with the client\n+     * @param spaceName the space name associated with the client\n      * @return a CF client for the specified access token, organization, and space\n      */\n-    public CloudControllerClient getControllerClient(String userName, String spaceGuid, String processId) {\n+    public CloudControllerClient getControllerClient(String userName, String orgName, String spaceName) {\n         try {\n-            return getClientFromCache(userName, spaceGuid, processId);\n+            return getClientFromCache(userName, orgName, spaceName);\n         } catch (CloudOperationException e) {\n-            throw new SLException(e, Messages.CANT_CREATE_CLIENT_FOR_SPACE_ID, spaceGuid);\n+            throw new SLException(e, Messages.CANT_CREATE_CLIENT_FOR_SPACE_ID, orgName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2a4aeaa3353b6155f6f3752ca5ea9dfc7380be"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM0MjMwMw==", "bodyText": "Do you think that it could be better to log step name instead of processId?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r476342303", "createdAt": "2020-08-25T10:22:45Z", "author": {"login": "theghost5800"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/util/OperationInFinalStateHandler.java", "diffHunk": "@@ -80,21 +82,41 @@ protected void setOperationState(String processInstanceId, Operation.State state\n         Operation operation = operationService.createQuery()\n                                               .processId(processInstanceId)\n                                               .singleResult();\n-        LOGGER.info(MessageFormat.format(Messages.PROCESS_0_RELEASING_LOCK_FOR_MTA_1_IN_SPACE_2, operation.getProcessId(),\n-                                         operation.getMtaId(), operation.getSpaceId()));\n+        LOGGER.info(format(Messages.PROCESS_0_RELEASING_LOCK_FOR_MTA_1_IN_SPACE_2, operation.getProcessId(), operation.getMtaId(),\n+                           operation.getSpaceId()));\n         operation = ImmutableOperation.builder()\n                                       .from(operation)\n                                       .state(state)\n                                       .hasAcquiredLock(false)\n                                       .endedAt(ZonedDateTime.now())\n                                       .build();\n         operationService.update(operation, operation);\n-        LOGGER.debug(MessageFormat.format(Messages.PROCESS_0_RELEASED_LOCK, operation.getProcessId()));\n+        LOGGER.debug(format(Messages.PROCESS_0_RELEASED_LOCK, operation.getProcessId()));\n         historicOperationEventPersister.add(processInstanceId, toEventType(state));\n     }\n \n     private EventType toEventType(State state) {\n         return state == Operation.State.FINISHED ? EventType.FINISHED : EventType.ABORTED;\n     }\n \n+    private void logOperationTime(String correlationId) {\n+        Map<String, ProcessTime> processTimes = operationTimeAggregator.collectProcessTimes(correlationId);\n+\n+        processTimes.forEach((processId, processTime) -> logProcessTime(correlationId, processId, processTime));\n+\n+        ProcessTime overallProcessTime = operationTimeAggregator.computeOverallProcessTime(correlationId, processTimes);\n+\n+        if (overallProcessTime.hasParallelSubProcesses()) {\n+            LOGGER.info(format(Messages.TIME_STATISTICS_FOR_OPERATION_WITH_PARALLEL_PROCESSES_0_DURATION_1_DELAY_2, correlationId,\n+                               overallProcessTime.getProcessDuration(), overallProcessTime.getDelayBetweenSteps()));\n+        } else {\n+            LOGGER.info(format(Messages.TIME_STATISTICS_FOR_OPERATION_0_DURATION_1_DELAY_2, correlationId,\n+                               overallProcessTime.getProcessDuration(), overallProcessTime.getDelayBetweenSteps()));\n+        }\n+    }\n+\n+    private void logProcessTime(String correlationId, String processId, ProcessTime processTime) {\n+        LOGGER.debug(format(Messages.TIME_STATISTICS_FOR_PROCESS_0_OPERATION_1_DURATION_2_DELAY_3, processId, correlationId,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2a4aeaa3353b6155f6f3752ca5ea9dfc7380be"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM4MTg4MQ==", "bodyText": "fix order of methods", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r476381881", "createdAt": "2020-08-25T11:39:53Z", "author": {"login": "theghost5800"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/util/ProcessTimeCalculator.java", "diffHunk": "@@ -32,24 +31,47 @@ public ProcessTimeCalculator(FlowableFacade flowableFacade) {\n \n     public ProcessTime calculate(String processInstanceId) {\n         HistoricProcessInstance rootProcessInstance = flowableFacade.getHistoricProcessById(processInstanceId);\n-\n-        long processDuration = calculateProcessDuration(rootProcessInstance);\n-\n         List<HistoricActivityInstance> processActivities = flowableFacade.getProcessEngine()\n                                                                          .getHistoryService()\n                                                                          .createHistoricActivityInstanceQuery()\n                                                                          .processInstanceId(processInstanceId)\n                                                                          .list();\n+        long processDuration = calculateProcessDuration(rootProcessInstance);\n+        long flatSum = flattenProcessDuration(processActivities);\n+\n         long processActivitiesTime = calculateFilteredProcessActivitiesTime(processActivities, inst -> true);\n-        long callActivitiesTime = calculateFilteredProcessActivitiesTime(processActivities, this::isCallActivity);\n         long timerEventsTime = calculateFilteredProcessActivitiesTime(processActivities, this::isTimerEvent);\n+        long gatewaysTime = calculateFilteredProcessActivitiesTime(processActivities, this::isGateway);\n \n         return ImmutableProcessTime.builder()\n                                    .processDuration(processDuration)\n-                                   .delayBetweenSteps(processDuration - processActivitiesTime + callActivitiesTime + timerEventsTime)\n+                                   .delayBetweenSteps((processDuration + flatSum) - processActivitiesTime + timerEventsTime + gatewaysTime)\n+                                   .hasParallelSubProcesses(flatSum != 0)\n                                    .build();\n     }\n \n+    private long flattenProcessDuration(List<HistoricActivityInstance> processActivitiesList) {\n+        HistoricActivityInstance[] processActivities = processActivitiesList.toArray(new HistoricActivityInstance[0]);\n+        Arrays.sort(processActivities, Comparator.comparing(HistoricActivityInstance::getStartTime));\n+        long flatSum = 0;\n+\n+        for (int i = 0; i < processActivities.length - 1; i++) {\n+            for (int j = i + 1; j < processActivities.length; j++) {\n+                if (areParallelActivities(processActivities[i], processActivities[j])) {\n+                    flatSum += calculateActivityDuration(processActivities[j]);\n+                }\n+            }\n+        }\n+\n+        return flatSum;\n+    }\n+\n+    private boolean areParallelActivities(HistoricActivityInstance instance1, HistoricActivityInstance instance2) {\n+        return instance1.getEndTime()\n+                        .after(instance2.getStartTime())\n+            && CALL_ACTIVITY_TYPE.equals(instance2.getActivityType());\n+    }\n+\n     private long calculateProcessDuration(HistoricProcessInstance processInstance) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2a4aeaa3353b6155f6f3752ca5ea9dfc7380be"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM4NjQyMA==", "bodyText": "Why don't use toArray() method?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r476386420", "createdAt": "2020-08-25T11:46:55Z", "author": {"login": "theghost5800"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/util/ProcessTimeCalculator.java", "diffHunk": "@@ -32,24 +31,47 @@ public ProcessTimeCalculator(FlowableFacade flowableFacade) {\n \n     public ProcessTime calculate(String processInstanceId) {\n         HistoricProcessInstance rootProcessInstance = flowableFacade.getHistoricProcessById(processInstanceId);\n-\n-        long processDuration = calculateProcessDuration(rootProcessInstance);\n-\n         List<HistoricActivityInstance> processActivities = flowableFacade.getProcessEngine()\n                                                                          .getHistoryService()\n                                                                          .createHistoricActivityInstanceQuery()\n                                                                          .processInstanceId(processInstanceId)\n                                                                          .list();\n+        long processDuration = calculateProcessDuration(rootProcessInstance);\n+        long flatSum = flattenProcessDuration(processActivities);\n+\n         long processActivitiesTime = calculateFilteredProcessActivitiesTime(processActivities, inst -> true);\n-        long callActivitiesTime = calculateFilteredProcessActivitiesTime(processActivities, this::isCallActivity);\n         long timerEventsTime = calculateFilteredProcessActivitiesTime(processActivities, this::isTimerEvent);\n+        long gatewaysTime = calculateFilteredProcessActivitiesTime(processActivities, this::isGateway);\n \n         return ImmutableProcessTime.builder()\n                                    .processDuration(processDuration)\n-                                   .delayBetweenSteps(processDuration - processActivitiesTime + callActivitiesTime + timerEventsTime)\n+                                   .delayBetweenSteps((processDuration + flatSum) - processActivitiesTime + timerEventsTime + gatewaysTime)\n+                                   .hasParallelSubProcesses(flatSum != 0)\n                                    .build();\n     }\n \n+    private long flattenProcessDuration(List<HistoricActivityInstance> processActivitiesList) {\n+        HistoricActivityInstance[] processActivities = processActivitiesList.toArray(new HistoricActivityInstance[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2a4aeaa3353b6155f6f3752ca5ea9dfc7380be"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM4Nzc2NA==", "bodyText": "Is it possible to use another solution without converting the list into array and avoid using of nested loops", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r476387764", "createdAt": "2020-08-25T11:49:31Z", "author": {"login": "theghost5800"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/util/ProcessTimeCalculator.java", "diffHunk": "@@ -32,24 +31,47 @@ public ProcessTimeCalculator(FlowableFacade flowableFacade) {\n \n     public ProcessTime calculate(String processInstanceId) {\n         HistoricProcessInstance rootProcessInstance = flowableFacade.getHistoricProcessById(processInstanceId);\n-\n-        long processDuration = calculateProcessDuration(rootProcessInstance);\n-\n         List<HistoricActivityInstance> processActivities = flowableFacade.getProcessEngine()\n                                                                          .getHistoryService()\n                                                                          .createHistoricActivityInstanceQuery()\n                                                                          .processInstanceId(processInstanceId)\n                                                                          .list();\n+        long processDuration = calculateProcessDuration(rootProcessInstance);\n+        long flatSum = flattenProcessDuration(processActivities);\n+\n         long processActivitiesTime = calculateFilteredProcessActivitiesTime(processActivities, inst -> true);\n-        long callActivitiesTime = calculateFilteredProcessActivitiesTime(processActivities, this::isCallActivity);\n         long timerEventsTime = calculateFilteredProcessActivitiesTime(processActivities, this::isTimerEvent);\n+        long gatewaysTime = calculateFilteredProcessActivitiesTime(processActivities, this::isGateway);\n \n         return ImmutableProcessTime.builder()\n                                    .processDuration(processDuration)\n-                                   .delayBetweenSteps(processDuration - processActivitiesTime + callActivitiesTime + timerEventsTime)\n+                                   .delayBetweenSteps((processDuration + flatSum) - processActivitiesTime + timerEventsTime + gatewaysTime)\n+                                   .hasParallelSubProcesses(flatSum != 0)\n                                    .build();\n     }\n \n+    private long flattenProcessDuration(List<HistoricActivityInstance> processActivitiesList) {\n+        HistoricActivityInstance[] processActivities = processActivitiesList.toArray(new HistoricActivityInstance[0]);\n+        Arrays.sort(processActivities, Comparator.comparing(HistoricActivityInstance::getStartTime));\n+        long flatSum = 0;\n+\n+        for (int i = 0; i < processActivities.length - 1; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2a4aeaa3353b6155f6f3752ca5ea9dfc7380be"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM5MDM5Ng==", "bodyText": "Why you need to compare end time of instance1 and start time of instance2? Isn't it enought to check activity type only?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r476390396", "createdAt": "2020-08-25T11:54:35Z", "author": {"login": "theghost5800"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/util/ProcessTimeCalculator.java", "diffHunk": "@@ -32,24 +31,47 @@ public ProcessTimeCalculator(FlowableFacade flowableFacade) {\n \n     public ProcessTime calculate(String processInstanceId) {\n         HistoricProcessInstance rootProcessInstance = flowableFacade.getHistoricProcessById(processInstanceId);\n-\n-        long processDuration = calculateProcessDuration(rootProcessInstance);\n-\n         List<HistoricActivityInstance> processActivities = flowableFacade.getProcessEngine()\n                                                                          .getHistoryService()\n                                                                          .createHistoricActivityInstanceQuery()\n                                                                          .processInstanceId(processInstanceId)\n                                                                          .list();\n+        long processDuration = calculateProcessDuration(rootProcessInstance);\n+        long flatSum = flattenProcessDuration(processActivities);\n+\n         long processActivitiesTime = calculateFilteredProcessActivitiesTime(processActivities, inst -> true);\n-        long callActivitiesTime = calculateFilteredProcessActivitiesTime(processActivities, this::isCallActivity);\n         long timerEventsTime = calculateFilteredProcessActivitiesTime(processActivities, this::isTimerEvent);\n+        long gatewaysTime = calculateFilteredProcessActivitiesTime(processActivities, this::isGateway);\n \n         return ImmutableProcessTime.builder()\n                                    .processDuration(processDuration)\n-                                   .delayBetweenSteps(processDuration - processActivitiesTime + callActivitiesTime + timerEventsTime)\n+                                   .delayBetweenSteps((processDuration + flatSum) - processActivitiesTime + timerEventsTime + gatewaysTime)\n+                                   .hasParallelSubProcesses(flatSum != 0)\n                                    .build();\n     }\n \n+    private long flattenProcessDuration(List<HistoricActivityInstance> processActivitiesList) {\n+        HistoricActivityInstance[] processActivities = processActivitiesList.toArray(new HistoricActivityInstance[0]);\n+        Arrays.sort(processActivities, Comparator.comparing(HistoricActivityInstance::getStartTime));\n+        long flatSum = 0;\n+\n+        for (int i = 0; i < processActivities.length - 1; i++) {\n+            for (int j = i + 1; j < processActivities.length; j++) {\n+                if (areParallelActivities(processActivities[i], processActivities[j])) {\n+                    flatSum += calculateActivityDuration(processActivities[j]);\n+                }\n+            }\n+        }\n+\n+        return flatSum;\n+    }\n+\n+    private boolean areParallelActivities(HistoricActivityInstance instance1, HistoricActivityInstance instance2) {\n+        return instance1.getEndTime()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2a4aeaa3353b6155f6f3752ca5ea9dfc7380be"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM5NTE4MQ==", "bodyText": "Maybe it will be better to use equalsIgnoreCase for all activity types", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r476395181", "createdAt": "2020-08-25T12:03:43Z", "author": {"login": "theghost5800"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/util/ProcessTimeCalculator.java", "diffHunk": "@@ -8,18 +10,15 @@\n import org.cloudfoundry.multiapps.controller.process.flowable.FlowableFacade;\n import org.flowable.engine.history.HistoricActivityInstance;\n import org.flowable.engine.history.HistoricProcessInstance;\n-import org.immutables.value.Value.Immutable;\n-\n-import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n-import com.fasterxml.jackson.databind.annotation.JsonSerialize;\n \n public class ProcessTimeCalculator {\n \n     private static final String CALL_ACTIVITY_TYPE = \"callActivity\";\n     private static final String TIMER_EVENT_TYPE = \"intermediateCatchEvent\";\n+    private static final String GATEWAY_TYPE = \"Gateway\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2a4aeaa3353b6155f6f3752ca5ea9dfc7380be"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQwNjgxNQ==", "bodyText": "Is it okay to initialize this variable locally instead of passing offset as parameter? I am asking this because I have already notice that you have method called createProcess where your pass offset. Maybe you have to pass offset as parameter in both methods.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r476406815", "createdAt": "2020-08-25T12:23:54Z", "author": {"login": "theghost5800"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/util/OperationTimeAggregatorTest.java", "diffHunk": "@@ -0,0 +1,284 @@\n+package org.cloudfoundry.multiapps.controller.process.util;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.cloudfoundry.multiapps.controller.process.flowable.FlowableFacade;\n+import org.flowable.engine.HistoryService;\n+import org.flowable.engine.ProcessEngine;\n+import org.flowable.engine.history.HistoricActivityInstance;\n+import org.flowable.engine.history.HistoricActivityInstanceQuery;\n+import org.flowable.engine.history.HistoricProcessInstance;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+public class OperationTimeAggregatorTest {\n+\n+    private static final String CORRELATION_ID = \"id\";\n+\n+    @Mock\n+    private FlowableFacade flowableFacade;\n+    @InjectMocks\n+    private OperationTimeAggregator operationTimeAggregator;\n+\n+    //TODO the tests here will work in a real life scenario if the subprocesses are registered as both:\n+    // a callActivity historic activity within the process\n+    // and\n+    // a different historic process (with the same correlation id)\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.openMocks(this);\n+    }\n+\n+    @Test\n+    void testOperationTimeWithNoSubProcesses() {\n+        Mockito.when(flowableFacade.getHistoricSubProcessIds(CORRELATION_ID))\n+               .thenReturn(new ArrayList<>());\n+        HistoricProcessInstance process = createProcess(200);\n+        Mockito.when(flowableFacade.getHistoricProcessById(CORRELATION_ID))\n+               .thenReturn(process);\n+        List<HistoricActivityInstance> activities = mockProcessActivities(false,\n+                                                                          SimpleActivity.of(\"serviceTask\", 2, 100));\n+        mockQuery(activities);\n+\n+        Map<String, ProcessTime> result = operationTimeAggregator.collectProcessTimes(CORRELATION_ID);\n+        assertEquals(1, result.size());\n+        ProcessTime rootProcessTime = result.get(CORRELATION_ID);\n+\n+        ProcessTime overallTime = operationTimeAggregator.computeOverallProcessTime(CORRELATION_ID, result);\n+\n+        assertEquals(200, rootProcessTime.getProcessDuration());\n+        assertEquals(0, rootProcessTime.getDelayBetweenSteps());\n+        assertEquals(rootProcessTime, overallTime);\n+        assertFalse(overallTime.hasParallelSubProcesses());\n+    }\n+\n+    private void mockQuery(List<HistoricActivityInstance> rootProcessActivities, List<HistoricActivityInstance>... subProcessActivities) {\n+        Supplier<HistoricActivityInstanceQuery> querySupplier = () -> Mockito.mock(HistoricActivityInstanceQuery.class);\n+\n+        ProcessEngine processEngine = Mockito.mock(ProcessEngine.class);\n+        Mockito.when(flowableFacade.getProcessEngine())\n+               .thenReturn(processEngine);\n+        HistoryService historyServiceMock = Mockito.mock(HistoryService.class);\n+        Mockito.when(processEngine.getHistoryService())\n+               .thenReturn(historyServiceMock);\n+\n+        HistoricActivityInstanceQuery rootProcessQuery = querySupplier.get();\n+        Mockito.when(historyServiceMock.createHistoricActivityInstanceQuery())\n+               .thenReturn(rootProcessQuery);\n+        Mockito.when(rootProcessQuery.processInstanceId(CORRELATION_ID))\n+               .thenReturn(rootProcessQuery);\n+        Mockito.when(rootProcessQuery.list())\n+               .thenReturn(rootProcessActivities);\n+\n+        for (int i = 0; i < subProcessActivities.length; i++) {\n+            HistoricActivityInstanceQuery subProcessQuery = querySupplier.get();\n+\n+            Mockito.when(rootProcessQuery.processInstanceId(Integer.toString(i)))\n+                   .thenReturn(subProcessQuery);\n+            Mockito.when(subProcessQuery.list())\n+                   .thenReturn(subProcessActivities[i]);\n+        }\n+    }\n+\n+    @Test\n+    void testOperationTimeWithOneSubProcess() {\n+        List<String> subProcessIds = new ArrayList<>();\n+        subProcessIds.add(\"0\");\n+        Mockito.when(flowableFacade.getHistoricSubProcessIds(CORRELATION_ID))\n+               .thenReturn(subProcessIds);\n+        HistoricProcessInstance rootProcess = createProcess(400);\n+        Mockito.when(flowableFacade.getHistoricProcessById(CORRELATION_ID))\n+               .thenReturn(rootProcess);\n+        HistoricProcessInstance subProcess = createProcess(150);\n+        Mockito.when(flowableFacade.getHistoricProcessById(\"0\"))\n+               .thenReturn(subProcess);\n+\n+        List<HistoricActivityInstance> rootProcessActivities = mockProcessActivities(false,\n+                                                                                     SimpleActivity.of(\"serviceTask\", 2, 100),\n+                                                                                     SimpleActivity.of(\"callActivity\", 1, 150),\n+                                                                                     SimpleActivity.of(\"exclusiveGateway\", 1, 50));\n+        List<HistoricActivityInstance> subProcessActivities = mockProcessActivities(false,\n+                                                                                    SimpleActivity.of(\"serviceTask\", 1, 100),\n+                                                                                    SimpleActivity.of(\"exclusiveGateway\", 1, 50));\n+        mockQuery(rootProcessActivities, subProcessActivities);\n+\n+        Map<String, ProcessTime> result = operationTimeAggregator.collectProcessTimes(CORRELATION_ID);\n+        assertEquals(2, result.size());\n+        ProcessTime rootProcessTime = result.get(CORRELATION_ID);\n+        ProcessTime subProcessTime = result.get(\"0\");\n+\n+        ProcessTime overallTime = operationTimeAggregator.computeOverallProcessTime(CORRELATION_ID, result);\n+\n+        assertEquals(50, rootProcessTime.getDelayBetweenSteps());\n+        assertEquals(400, rootProcessTime.getProcessDuration());\n+        assertEquals(150, subProcessTime.getProcessDuration());\n+        assertEquals(50, subProcessTime.getDelayBetweenSteps());\n+        assertEquals(100, overallTime.getDelayBetweenSteps());\n+        assertFalse(overallTime.hasParallelSubProcesses());\n+    }\n+\n+    @Test\n+    void testOperationWithTwoSubProcesses() {\n+        List<String> subProcessIds = new ArrayList<>();\n+        subProcessIds.add(\"0\");\n+        subProcessIds.add(\"1\");\n+        Mockito.when(flowableFacade.getHistoricSubProcessIds(CORRELATION_ID))\n+               .thenReturn(subProcessIds);\n+        HistoricProcessInstance process = createProcess(0, 650);\n+        Mockito.when(flowableFacade.getHistoricProcessById(CORRELATION_ID))\n+               .thenReturn(process);\n+        HistoricProcessInstance process1 = createProcess(1, 150);\n+        Mockito.when(flowableFacade.getHistoricProcessById(\"0\"))\n+               .thenReturn(process1);\n+        HistoricProcessInstance process2 = createProcess(152, 250);\n+        Mockito.when(flowableFacade.getHistoricProcessById(\"1\"))\n+               .thenReturn(process2);\n+\n+        List<HistoricActivityInstance> rootProcessActivities = mockProcessActivities(false,\n+                                                                                     SimpleActivity.of(\"serviceTask\", 2, 100),\n+                                                                                     SimpleActivity.of(\"callActivity\", 1, 150),\n+                                                                                     SimpleActivity.of(\"callActivity\", 1, 250),\n+                                                                                     SimpleActivity.of(\"exclusiveGateway\", 1, 50));\n+        List<HistoricActivityInstance> subProcessOneActivities = mockProcessActivities(false,\n+                                                                                       SimpleActivity.of(\"serviceTask\", 1, 100),\n+                                                                                       SimpleActivity.of(\"exclusiveGateway\", 1, 50));\n+        List<HistoricActivityInstance> subProcessTwoActivities = mockProcessActivities(false,\n+                                                                                       SimpleActivity.of(\"serviceTask\", 2, 100),\n+                                                                                       SimpleActivity.of(\"exclusiveGateway\", 1, 50));\n+\n+       mockQuery(rootProcessActivities, subProcessOneActivities, subProcessTwoActivities);\n+\n+        Map<String, ProcessTime> result = operationTimeAggregator.collectProcessTimes(CORRELATION_ID);\n+        assertEquals(3, result.size());\n+        ProcessTime rootProcessTime = result.get(CORRELATION_ID);\n+        ProcessTime subProcessOneTime = result.get(\"0\");\n+        ProcessTime subProcessTwoTime = result.get(\"1\");\n+\n+        ProcessTime overallTime = operationTimeAggregator.computeOverallProcessTime(CORRELATION_ID, result);\n+\n+        assertEquals(50, rootProcessTime.getDelayBetweenSteps());\n+        assertEquals(650, rootProcessTime.getProcessDuration());\n+        assertEquals(150, subProcessOneTime.getProcessDuration());\n+        assertEquals(50, subProcessOneTime.getDelayBetweenSteps());\n+        assertEquals(250, subProcessTwoTime.getProcessDuration());\n+        assertEquals(50, subProcessTwoTime.getDelayBetweenSteps());\n+        assertEquals(150, overallTime.getDelayBetweenSteps());\n+        assertFalse(overallTime.hasParallelSubProcesses());\n+    }\n+\n+    @Test\n+    void testOperationWithTwoParallelSubProcesses() {\n+        long initialOffset = System.currentTimeMillis();\n+        List<String> subProcessIds = new ArrayList<>();\n+        subProcessIds.add(\"0\");\n+        subProcessIds.add(\"1\");\n+        Mockito.when(flowableFacade.getHistoricSubProcessIds(CORRELATION_ID))\n+               .thenReturn(subProcessIds);\n+        HistoricProcessInstance process = createProcess(initialOffset, 400);\n+        Mockito.when(flowableFacade.getHistoricProcessById(CORRELATION_ID))\n+               .thenReturn(process);\n+        HistoricProcessInstance process1 = createProcess(initialOffset + 10, 150);\n+        Mockito.when(flowableFacade.getHistoricProcessById(\"0\"))\n+               .thenReturn(process1);\n+        HistoricProcessInstance process2 = createProcess(initialOffset + 20, 250);\n+        Mockito.when(flowableFacade.getHistoricProcessById(\"1\"))\n+               .thenReturn(process2);\n+\n+        List<HistoricActivityInstance> rootProcessActivities = mockProcessActivities(true,\n+                                                                                     SimpleActivity.of(\"serviceTask\", 1, 50),\n+                                                                                     SimpleActivity.of(\"callActivity\", 1, 150),\n+                                                                                     SimpleActivity.of(\"callActivity\", 1, 250),\n+                                                                                     SimpleActivity.of(\"exclusiveGateway\", 2, 50));\n+        List<HistoricActivityInstance> subProcessOneActivities = mockProcessActivities(false,\n+                                                                                       SimpleActivity.of(\"serviceTask\", 1, 100),\n+                                                                                       SimpleActivity.of(\"exclusiveGateway\", 1, 50));\n+        List<HistoricActivityInstance> subProcessTwoActivities = mockProcessActivities(false,\n+                                                                                       SimpleActivity.of(\"serviceTask\", 2, 100),\n+                                                                                       SimpleActivity.of(\"exclusiveGateway\", 1, 50));\n+\n+        mockQuery(rootProcessActivities, subProcessOneActivities, subProcessTwoActivities);\n+\n+        Map<String, ProcessTime> result = operationTimeAggregator.collectProcessTimes(CORRELATION_ID);\n+        assertEquals(3, result.size());\n+        ProcessTime rootProcessTime = result.get(CORRELATION_ID);\n+        ProcessTime subProcessOneTime = result.get(\"0\");\n+        ProcessTime subProcessTwoTime = result.get(\"1\");\n+\n+        ProcessTime overallTime = operationTimeAggregator.computeOverallProcessTime(CORRELATION_ID, result);\n+\n+        assertEquals(200, rootProcessTime.getDelayBetweenSteps());\n+        assertEquals(400, rootProcessTime.getProcessDuration());\n+        assertEquals(150, subProcessOneTime.getProcessDuration());\n+        assertEquals(50, subProcessOneTime.getDelayBetweenSteps());\n+        assertEquals(250, subProcessTwoTime.getProcessDuration());\n+        assertEquals(50, subProcessTwoTime.getDelayBetweenSteps());\n+        assertEquals(300, overallTime.getDelayBetweenSteps());\n+        assertTrue(overallTime.hasParallelSubProcesses());\n+    }\n+\n+    private HistoricProcessInstance createProcess(long processTime) {\n+        return createProcess(0, processTime);\n+    }\n+\n+    private List<HistoricActivityInstance> mockProcessActivities(boolean parallel, SimpleActivity... activities) {\n+        long offset = System.currentTimeMillis();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2a4aeaa3353b6155f6f3752ca5ea9dfc7380be"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxNDQzMg==", "bodyText": "Extract processEngine as field", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r476414432", "createdAt": "2020-08-25T12:37:25Z", "author": {"login": "theghost5800"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/util/OperationTimeAggregatorTest.java", "diffHunk": "@@ -0,0 +1,284 @@\n+package org.cloudfoundry.multiapps.controller.process.util;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.cloudfoundry.multiapps.controller.process.flowable.FlowableFacade;\n+import org.flowable.engine.HistoryService;\n+import org.flowable.engine.ProcessEngine;\n+import org.flowable.engine.history.HistoricActivityInstance;\n+import org.flowable.engine.history.HistoricActivityInstanceQuery;\n+import org.flowable.engine.history.HistoricProcessInstance;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+public class OperationTimeAggregatorTest {\n+\n+    private static final String CORRELATION_ID = \"id\";\n+\n+    @Mock\n+    private FlowableFacade flowableFacade;\n+    @InjectMocks\n+    private OperationTimeAggregator operationTimeAggregator;\n+\n+    //TODO the tests here will work in a real life scenario if the subprocesses are registered as both:\n+    // a callActivity historic activity within the process\n+    // and\n+    // a different historic process (with the same correlation id)\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.openMocks(this);\n+    }\n+\n+    @Test\n+    void testOperationTimeWithNoSubProcesses() {\n+        Mockito.when(flowableFacade.getHistoricSubProcessIds(CORRELATION_ID))\n+               .thenReturn(new ArrayList<>());\n+        HistoricProcessInstance process = createProcess(200);\n+        Mockito.when(flowableFacade.getHistoricProcessById(CORRELATION_ID))\n+               .thenReturn(process);\n+        List<HistoricActivityInstance> activities = mockProcessActivities(false,\n+                                                                          SimpleActivity.of(\"serviceTask\", 2, 100));\n+        mockQuery(activities);\n+\n+        Map<String, ProcessTime> result = operationTimeAggregator.collectProcessTimes(CORRELATION_ID);\n+        assertEquals(1, result.size());\n+        ProcessTime rootProcessTime = result.get(CORRELATION_ID);\n+\n+        ProcessTime overallTime = operationTimeAggregator.computeOverallProcessTime(CORRELATION_ID, result);\n+\n+        assertEquals(200, rootProcessTime.getProcessDuration());\n+        assertEquals(0, rootProcessTime.getDelayBetweenSteps());\n+        assertEquals(rootProcessTime, overallTime);\n+        assertFalse(overallTime.hasParallelSubProcesses());\n+    }\n+\n+    private void mockQuery(List<HistoricActivityInstance> rootProcessActivities, List<HistoricActivityInstance>... subProcessActivities) {\n+        Supplier<HistoricActivityInstanceQuery> querySupplier = () -> Mockito.mock(HistoricActivityInstanceQuery.class);\n+\n+        ProcessEngine processEngine = Mockito.mock(ProcessEngine.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2a4aeaa3353b6155f6f3752ca5ea9dfc7380be"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxNTMxNw==", "bodyText": "Extract historyService as field and align variable name with other mock objects", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r476415317", "createdAt": "2020-08-25T12:38:54Z", "author": {"login": "theghost5800"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/util/OperationTimeAggregatorTest.java", "diffHunk": "@@ -0,0 +1,284 @@\n+package org.cloudfoundry.multiapps.controller.process.util;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.cloudfoundry.multiapps.controller.process.flowable.FlowableFacade;\n+import org.flowable.engine.HistoryService;\n+import org.flowable.engine.ProcessEngine;\n+import org.flowable.engine.history.HistoricActivityInstance;\n+import org.flowable.engine.history.HistoricActivityInstanceQuery;\n+import org.flowable.engine.history.HistoricProcessInstance;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+public class OperationTimeAggregatorTest {\n+\n+    private static final String CORRELATION_ID = \"id\";\n+\n+    @Mock\n+    private FlowableFacade flowableFacade;\n+    @InjectMocks\n+    private OperationTimeAggregator operationTimeAggregator;\n+\n+    //TODO the tests here will work in a real life scenario if the subprocesses are registered as both:\n+    // a callActivity historic activity within the process\n+    // and\n+    // a different historic process (with the same correlation id)\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.openMocks(this);\n+    }\n+\n+    @Test\n+    void testOperationTimeWithNoSubProcesses() {\n+        Mockito.when(flowableFacade.getHistoricSubProcessIds(CORRELATION_ID))\n+               .thenReturn(new ArrayList<>());\n+        HistoricProcessInstance process = createProcess(200);\n+        Mockito.when(flowableFacade.getHistoricProcessById(CORRELATION_ID))\n+               .thenReturn(process);\n+        List<HistoricActivityInstance> activities = mockProcessActivities(false,\n+                                                                          SimpleActivity.of(\"serviceTask\", 2, 100));\n+        mockQuery(activities);\n+\n+        Map<String, ProcessTime> result = operationTimeAggregator.collectProcessTimes(CORRELATION_ID);\n+        assertEquals(1, result.size());\n+        ProcessTime rootProcessTime = result.get(CORRELATION_ID);\n+\n+        ProcessTime overallTime = operationTimeAggregator.computeOverallProcessTime(CORRELATION_ID, result);\n+\n+        assertEquals(200, rootProcessTime.getProcessDuration());\n+        assertEquals(0, rootProcessTime.getDelayBetweenSteps());\n+        assertEquals(rootProcessTime, overallTime);\n+        assertFalse(overallTime.hasParallelSubProcesses());\n+    }\n+\n+    private void mockQuery(List<HistoricActivityInstance> rootProcessActivities, List<HistoricActivityInstance>... subProcessActivities) {\n+        Supplier<HistoricActivityInstanceQuery> querySupplier = () -> Mockito.mock(HistoricActivityInstanceQuery.class);\n+\n+        ProcessEngine processEngine = Mockito.mock(ProcessEngine.class);\n+        Mockito.when(flowableFacade.getProcessEngine())\n+               .thenReturn(processEngine);\n+        HistoryService historyServiceMock = Mockito.mock(HistoryService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2a4aeaa3353b6155f6f3752ca5ea9dfc7380be"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQxOTY4Ng==", "bodyText": "you can convert varargs into list (Arrays::asList) and use forEach method", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r476419686", "createdAt": "2020-08-25T12:46:10Z", "author": {"login": "theghost5800"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/util/OperationTimeAggregatorTest.java", "diffHunk": "@@ -0,0 +1,284 @@\n+package org.cloudfoundry.multiapps.controller.process.util;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.cloudfoundry.multiapps.controller.process.flowable.FlowableFacade;\n+import org.flowable.engine.HistoryService;\n+import org.flowable.engine.ProcessEngine;\n+import org.flowable.engine.history.HistoricActivityInstance;\n+import org.flowable.engine.history.HistoricActivityInstanceQuery;\n+import org.flowable.engine.history.HistoricProcessInstance;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+public class OperationTimeAggregatorTest {\n+\n+    private static final String CORRELATION_ID = \"id\";\n+\n+    @Mock\n+    private FlowableFacade flowableFacade;\n+    @InjectMocks\n+    private OperationTimeAggregator operationTimeAggregator;\n+\n+    //TODO the tests here will work in a real life scenario if the subprocesses are registered as both:\n+    // a callActivity historic activity within the process\n+    // and\n+    // a different historic process (with the same correlation id)\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.openMocks(this);\n+    }\n+\n+    @Test\n+    void testOperationTimeWithNoSubProcesses() {\n+        Mockito.when(flowableFacade.getHistoricSubProcessIds(CORRELATION_ID))\n+               .thenReturn(new ArrayList<>());\n+        HistoricProcessInstance process = createProcess(200);\n+        Mockito.when(flowableFacade.getHistoricProcessById(CORRELATION_ID))\n+               .thenReturn(process);\n+        List<HistoricActivityInstance> activities = mockProcessActivities(false,\n+                                                                          SimpleActivity.of(\"serviceTask\", 2, 100));\n+        mockQuery(activities);\n+\n+        Map<String, ProcessTime> result = operationTimeAggregator.collectProcessTimes(CORRELATION_ID);\n+        assertEquals(1, result.size());\n+        ProcessTime rootProcessTime = result.get(CORRELATION_ID);\n+\n+        ProcessTime overallTime = operationTimeAggregator.computeOverallProcessTime(CORRELATION_ID, result);\n+\n+        assertEquals(200, rootProcessTime.getProcessDuration());\n+        assertEquals(0, rootProcessTime.getDelayBetweenSteps());\n+        assertEquals(rootProcessTime, overallTime);\n+        assertFalse(overallTime.hasParallelSubProcesses());\n+    }\n+\n+    private void mockQuery(List<HistoricActivityInstance> rootProcessActivities, List<HistoricActivityInstance>... subProcessActivities) {\n+        Supplier<HistoricActivityInstanceQuery> querySupplier = () -> Mockito.mock(HistoricActivityInstanceQuery.class);\n+\n+        ProcessEngine processEngine = Mockito.mock(ProcessEngine.class);\n+        Mockito.when(flowableFacade.getProcessEngine())\n+               .thenReturn(processEngine);\n+        HistoryService historyServiceMock = Mockito.mock(HistoryService.class);\n+        Mockito.when(processEngine.getHistoryService())\n+               .thenReturn(historyServiceMock);\n+\n+        HistoricActivityInstanceQuery rootProcessQuery = querySupplier.get();\n+        Mockito.when(historyServiceMock.createHistoricActivityInstanceQuery())\n+               .thenReturn(rootProcessQuery);\n+        Mockito.when(rootProcessQuery.processInstanceId(CORRELATION_ID))\n+               .thenReturn(rootProcessQuery);\n+        Mockito.when(rootProcessQuery.list())\n+               .thenReturn(rootProcessActivities);\n+\n+        for (int i = 0; i < subProcessActivities.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2a4aeaa3353b6155f6f3752ca5ea9dfc7380be"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQyMDQxMA==", "bodyText": "Arrays.asList(\"0\")", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r476420410", "createdAt": "2020-08-25T12:47:27Z", "author": {"login": "theghost5800"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/util/OperationTimeAggregatorTest.java", "diffHunk": "@@ -0,0 +1,284 @@\n+package org.cloudfoundry.multiapps.controller.process.util;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.cloudfoundry.multiapps.controller.process.flowable.FlowableFacade;\n+import org.flowable.engine.HistoryService;\n+import org.flowable.engine.ProcessEngine;\n+import org.flowable.engine.history.HistoricActivityInstance;\n+import org.flowable.engine.history.HistoricActivityInstanceQuery;\n+import org.flowable.engine.history.HistoricProcessInstance;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+public class OperationTimeAggregatorTest {\n+\n+    private static final String CORRELATION_ID = \"id\";\n+\n+    @Mock\n+    private FlowableFacade flowableFacade;\n+    @InjectMocks\n+    private OperationTimeAggregator operationTimeAggregator;\n+\n+    //TODO the tests here will work in a real life scenario if the subprocesses are registered as both:\n+    // a callActivity historic activity within the process\n+    // and\n+    // a different historic process (with the same correlation id)\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.openMocks(this);\n+    }\n+\n+    @Test\n+    void testOperationTimeWithNoSubProcesses() {\n+        Mockito.when(flowableFacade.getHistoricSubProcessIds(CORRELATION_ID))\n+               .thenReturn(new ArrayList<>());\n+        HistoricProcessInstance process = createProcess(200);\n+        Mockito.when(flowableFacade.getHistoricProcessById(CORRELATION_ID))\n+               .thenReturn(process);\n+        List<HistoricActivityInstance> activities = mockProcessActivities(false,\n+                                                                          SimpleActivity.of(\"serviceTask\", 2, 100));\n+        mockQuery(activities);\n+\n+        Map<String, ProcessTime> result = operationTimeAggregator.collectProcessTimes(CORRELATION_ID);\n+        assertEquals(1, result.size());\n+        ProcessTime rootProcessTime = result.get(CORRELATION_ID);\n+\n+        ProcessTime overallTime = operationTimeAggregator.computeOverallProcessTime(CORRELATION_ID, result);\n+\n+        assertEquals(200, rootProcessTime.getProcessDuration());\n+        assertEquals(0, rootProcessTime.getDelayBetweenSteps());\n+        assertEquals(rootProcessTime, overallTime);\n+        assertFalse(overallTime.hasParallelSubProcesses());\n+    }\n+\n+    private void mockQuery(List<HistoricActivityInstance> rootProcessActivities, List<HistoricActivityInstance>... subProcessActivities) {\n+        Supplier<HistoricActivityInstanceQuery> querySupplier = () -> Mockito.mock(HistoricActivityInstanceQuery.class);\n+\n+        ProcessEngine processEngine = Mockito.mock(ProcessEngine.class);\n+        Mockito.when(flowableFacade.getProcessEngine())\n+               .thenReturn(processEngine);\n+        HistoryService historyServiceMock = Mockito.mock(HistoryService.class);\n+        Mockito.when(processEngine.getHistoryService())\n+               .thenReturn(historyServiceMock);\n+\n+        HistoricActivityInstanceQuery rootProcessQuery = querySupplier.get();\n+        Mockito.when(historyServiceMock.createHistoricActivityInstanceQuery())\n+               .thenReturn(rootProcessQuery);\n+        Mockito.when(rootProcessQuery.processInstanceId(CORRELATION_ID))\n+               .thenReturn(rootProcessQuery);\n+        Mockito.when(rootProcessQuery.list())\n+               .thenReturn(rootProcessActivities);\n+\n+        for (int i = 0; i < subProcessActivities.length; i++) {\n+            HistoricActivityInstanceQuery subProcessQuery = querySupplier.get();\n+\n+            Mockito.when(rootProcessQuery.processInstanceId(Integer.toString(i)))\n+                   .thenReturn(subProcessQuery);\n+            Mockito.when(subProcessQuery.list())\n+                   .thenReturn(subProcessActivities[i]);\n+        }\n+    }\n+\n+    @Test\n+    void testOperationTimeWithOneSubProcess() {\n+        List<String> subProcessIds = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2a4aeaa3353b6155f6f3752ca5ea9dfc7380be"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ1MDE1Ng==", "bodyText": "Is it possible to avoid nested for loop", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r476450156", "createdAt": "2020-08-25T13:31:39Z", "author": {"login": "theghost5800"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/util/OperationTimeAggregatorTest.java", "diffHunk": "@@ -0,0 +1,284 @@\n+package org.cloudfoundry.multiapps.controller.process.util;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.cloudfoundry.multiapps.controller.process.flowable.FlowableFacade;\n+import org.flowable.engine.HistoryService;\n+import org.flowable.engine.ProcessEngine;\n+import org.flowable.engine.history.HistoricActivityInstance;\n+import org.flowable.engine.history.HistoricActivityInstanceQuery;\n+import org.flowable.engine.history.HistoricProcessInstance;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+public class OperationTimeAggregatorTest {\n+\n+    private static final String CORRELATION_ID = \"id\";\n+\n+    @Mock\n+    private FlowableFacade flowableFacade;\n+    @InjectMocks\n+    private OperationTimeAggregator operationTimeAggregator;\n+\n+    //TODO the tests here will work in a real life scenario if the subprocesses are registered as both:\n+    // a callActivity historic activity within the process\n+    // and\n+    // a different historic process (with the same correlation id)\n+\n+    @BeforeEach\n+    void setUp() {\n+        MockitoAnnotations.openMocks(this);\n+    }\n+\n+    @Test\n+    void testOperationTimeWithNoSubProcesses() {\n+        Mockito.when(flowableFacade.getHistoricSubProcessIds(CORRELATION_ID))\n+               .thenReturn(new ArrayList<>());\n+        HistoricProcessInstance process = createProcess(200);\n+        Mockito.when(flowableFacade.getHistoricProcessById(CORRELATION_ID))\n+               .thenReturn(process);\n+        List<HistoricActivityInstance> activities = mockProcessActivities(false,\n+                                                                          SimpleActivity.of(\"serviceTask\", 2, 100));\n+        mockQuery(activities);\n+\n+        Map<String, ProcessTime> result = operationTimeAggregator.collectProcessTimes(CORRELATION_ID);\n+        assertEquals(1, result.size());\n+        ProcessTime rootProcessTime = result.get(CORRELATION_ID);\n+\n+        ProcessTime overallTime = operationTimeAggregator.computeOverallProcessTime(CORRELATION_ID, result);\n+\n+        assertEquals(200, rootProcessTime.getProcessDuration());\n+        assertEquals(0, rootProcessTime.getDelayBetweenSteps());\n+        assertEquals(rootProcessTime, overallTime);\n+        assertFalse(overallTime.hasParallelSubProcesses());\n+    }\n+\n+    private void mockQuery(List<HistoricActivityInstance> rootProcessActivities, List<HistoricActivityInstance>... subProcessActivities) {\n+        Supplier<HistoricActivityInstanceQuery> querySupplier = () -> Mockito.mock(HistoricActivityInstanceQuery.class);\n+\n+        ProcessEngine processEngine = Mockito.mock(ProcessEngine.class);\n+        Mockito.when(flowableFacade.getProcessEngine())\n+               .thenReturn(processEngine);\n+        HistoryService historyServiceMock = Mockito.mock(HistoryService.class);\n+        Mockito.when(processEngine.getHistoryService())\n+               .thenReturn(historyServiceMock);\n+\n+        HistoricActivityInstanceQuery rootProcessQuery = querySupplier.get();\n+        Mockito.when(historyServiceMock.createHistoricActivityInstanceQuery())\n+               .thenReturn(rootProcessQuery);\n+        Mockito.when(rootProcessQuery.processInstanceId(CORRELATION_ID))\n+               .thenReturn(rootProcessQuery);\n+        Mockito.when(rootProcessQuery.list())\n+               .thenReturn(rootProcessActivities);\n+\n+        for (int i = 0; i < subProcessActivities.length; i++) {\n+            HistoricActivityInstanceQuery subProcessQuery = querySupplier.get();\n+\n+            Mockito.when(rootProcessQuery.processInstanceId(Integer.toString(i)))\n+                   .thenReturn(subProcessQuery);\n+            Mockito.when(subProcessQuery.list())\n+                   .thenReturn(subProcessActivities[i]);\n+        }\n+    }\n+\n+    @Test\n+    void testOperationTimeWithOneSubProcess() {\n+        List<String> subProcessIds = new ArrayList<>();\n+        subProcessIds.add(\"0\");\n+        Mockito.when(flowableFacade.getHistoricSubProcessIds(CORRELATION_ID))\n+               .thenReturn(subProcessIds);\n+        HistoricProcessInstance rootProcess = createProcess(400);\n+        Mockito.when(flowableFacade.getHistoricProcessById(CORRELATION_ID))\n+               .thenReturn(rootProcess);\n+        HistoricProcessInstance subProcess = createProcess(150);\n+        Mockito.when(flowableFacade.getHistoricProcessById(\"0\"))\n+               .thenReturn(subProcess);\n+\n+        List<HistoricActivityInstance> rootProcessActivities = mockProcessActivities(false,\n+                                                                                     SimpleActivity.of(\"serviceTask\", 2, 100),\n+                                                                                     SimpleActivity.of(\"callActivity\", 1, 150),\n+                                                                                     SimpleActivity.of(\"exclusiveGateway\", 1, 50));\n+        List<HistoricActivityInstance> subProcessActivities = mockProcessActivities(false,\n+                                                                                    SimpleActivity.of(\"serviceTask\", 1, 100),\n+                                                                                    SimpleActivity.of(\"exclusiveGateway\", 1, 50));\n+        mockQuery(rootProcessActivities, subProcessActivities);\n+\n+        Map<String, ProcessTime> result = operationTimeAggregator.collectProcessTimes(CORRELATION_ID);\n+        assertEquals(2, result.size());\n+        ProcessTime rootProcessTime = result.get(CORRELATION_ID);\n+        ProcessTime subProcessTime = result.get(\"0\");\n+\n+        ProcessTime overallTime = operationTimeAggregator.computeOverallProcessTime(CORRELATION_ID, result);\n+\n+        assertEquals(50, rootProcessTime.getDelayBetweenSteps());\n+        assertEquals(400, rootProcessTime.getProcessDuration());\n+        assertEquals(150, subProcessTime.getProcessDuration());\n+        assertEquals(50, subProcessTime.getDelayBetweenSteps());\n+        assertEquals(100, overallTime.getDelayBetweenSteps());\n+        assertFalse(overallTime.hasParallelSubProcesses());\n+    }\n+\n+    @Test\n+    void testOperationWithTwoSubProcesses() {\n+        List<String> subProcessIds = new ArrayList<>();\n+        subProcessIds.add(\"0\");\n+        subProcessIds.add(\"1\");\n+        Mockito.when(flowableFacade.getHistoricSubProcessIds(CORRELATION_ID))\n+               .thenReturn(subProcessIds);\n+        HistoricProcessInstance process = createProcess(0, 650);\n+        Mockito.when(flowableFacade.getHistoricProcessById(CORRELATION_ID))\n+               .thenReturn(process);\n+        HistoricProcessInstance process1 = createProcess(1, 150);\n+        Mockito.when(flowableFacade.getHistoricProcessById(\"0\"))\n+               .thenReturn(process1);\n+        HistoricProcessInstance process2 = createProcess(152, 250);\n+        Mockito.when(flowableFacade.getHistoricProcessById(\"1\"))\n+               .thenReturn(process2);\n+\n+        List<HistoricActivityInstance> rootProcessActivities = mockProcessActivities(false,\n+                                                                                     SimpleActivity.of(\"serviceTask\", 2, 100),\n+                                                                                     SimpleActivity.of(\"callActivity\", 1, 150),\n+                                                                                     SimpleActivity.of(\"callActivity\", 1, 250),\n+                                                                                     SimpleActivity.of(\"exclusiveGateway\", 1, 50));\n+        List<HistoricActivityInstance> subProcessOneActivities = mockProcessActivities(false,\n+                                                                                       SimpleActivity.of(\"serviceTask\", 1, 100),\n+                                                                                       SimpleActivity.of(\"exclusiveGateway\", 1, 50));\n+        List<HistoricActivityInstance> subProcessTwoActivities = mockProcessActivities(false,\n+                                                                                       SimpleActivity.of(\"serviceTask\", 2, 100),\n+                                                                                       SimpleActivity.of(\"exclusiveGateway\", 1, 50));\n+\n+       mockQuery(rootProcessActivities, subProcessOneActivities, subProcessTwoActivities);\n+\n+        Map<String, ProcessTime> result = operationTimeAggregator.collectProcessTimes(CORRELATION_ID);\n+        assertEquals(3, result.size());\n+        ProcessTime rootProcessTime = result.get(CORRELATION_ID);\n+        ProcessTime subProcessOneTime = result.get(\"0\");\n+        ProcessTime subProcessTwoTime = result.get(\"1\");\n+\n+        ProcessTime overallTime = operationTimeAggregator.computeOverallProcessTime(CORRELATION_ID, result);\n+\n+        assertEquals(50, rootProcessTime.getDelayBetweenSteps());\n+        assertEquals(650, rootProcessTime.getProcessDuration());\n+        assertEquals(150, subProcessOneTime.getProcessDuration());\n+        assertEquals(50, subProcessOneTime.getDelayBetweenSteps());\n+        assertEquals(250, subProcessTwoTime.getProcessDuration());\n+        assertEquals(50, subProcessTwoTime.getDelayBetweenSteps());\n+        assertEquals(150, overallTime.getDelayBetweenSteps());\n+        assertFalse(overallTime.hasParallelSubProcesses());\n+    }\n+\n+    @Test\n+    void testOperationWithTwoParallelSubProcesses() {\n+        long initialOffset = System.currentTimeMillis();\n+        List<String> subProcessIds = new ArrayList<>();\n+        subProcessIds.add(\"0\");\n+        subProcessIds.add(\"1\");\n+        Mockito.when(flowableFacade.getHistoricSubProcessIds(CORRELATION_ID))\n+               .thenReturn(subProcessIds);\n+        HistoricProcessInstance process = createProcess(initialOffset, 400);\n+        Mockito.when(flowableFacade.getHistoricProcessById(CORRELATION_ID))\n+               .thenReturn(process);\n+        HistoricProcessInstance process1 = createProcess(initialOffset + 10, 150);\n+        Mockito.when(flowableFacade.getHistoricProcessById(\"0\"))\n+               .thenReturn(process1);\n+        HistoricProcessInstance process2 = createProcess(initialOffset + 20, 250);\n+        Mockito.when(flowableFacade.getHistoricProcessById(\"1\"))\n+               .thenReturn(process2);\n+\n+        List<HistoricActivityInstance> rootProcessActivities = mockProcessActivities(true,\n+                                                                                     SimpleActivity.of(\"serviceTask\", 1, 50),\n+                                                                                     SimpleActivity.of(\"callActivity\", 1, 150),\n+                                                                                     SimpleActivity.of(\"callActivity\", 1, 250),\n+                                                                                     SimpleActivity.of(\"exclusiveGateway\", 2, 50));\n+        List<HistoricActivityInstance> subProcessOneActivities = mockProcessActivities(false,\n+                                                                                       SimpleActivity.of(\"serviceTask\", 1, 100),\n+                                                                                       SimpleActivity.of(\"exclusiveGateway\", 1, 50));\n+        List<HistoricActivityInstance> subProcessTwoActivities = mockProcessActivities(false,\n+                                                                                       SimpleActivity.of(\"serviceTask\", 2, 100),\n+                                                                                       SimpleActivity.of(\"exclusiveGateway\", 1, 50));\n+\n+        mockQuery(rootProcessActivities, subProcessOneActivities, subProcessTwoActivities);\n+\n+        Map<String, ProcessTime> result = operationTimeAggregator.collectProcessTimes(CORRELATION_ID);\n+        assertEquals(3, result.size());\n+        ProcessTime rootProcessTime = result.get(CORRELATION_ID);\n+        ProcessTime subProcessOneTime = result.get(\"0\");\n+        ProcessTime subProcessTwoTime = result.get(\"1\");\n+\n+        ProcessTime overallTime = operationTimeAggregator.computeOverallProcessTime(CORRELATION_ID, result);\n+\n+        assertEquals(200, rootProcessTime.getDelayBetweenSteps());\n+        assertEquals(400, rootProcessTime.getProcessDuration());\n+        assertEquals(150, subProcessOneTime.getProcessDuration());\n+        assertEquals(50, subProcessOneTime.getDelayBetweenSteps());\n+        assertEquals(250, subProcessTwoTime.getProcessDuration());\n+        assertEquals(50, subProcessTwoTime.getDelayBetweenSteps());\n+        assertEquals(300, overallTime.getDelayBetweenSteps());\n+        assertTrue(overallTime.hasParallelSubProcesses());\n+    }\n+\n+    private HistoricProcessInstance createProcess(long processTime) {\n+        return createProcess(0, processTime);\n+    }\n+\n+    private List<HistoricActivityInstance> mockProcessActivities(boolean parallel, SimpleActivity... activities) {\n+        long offset = System.currentTimeMillis();\n+        List<HistoricActivityInstance> result = new ArrayList<>();\n+\n+        for (SimpleActivity activity : activities) {\n+            for (int i = 1; i <= activity.numberOf; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2a4aeaa3353b6155f6f3752ca5ea9dfc7380be"}, "originalPosition": 241}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MjIwNDg4", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#pullrequestreview-475220488", "createdAt": "2020-08-26T07:27:37Z", "commit": {"oid": "6f2a4aeaa3353b6155f6f3752ca5ea9dfc7380be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzoyNzozN1rOHG_Snw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzoyNzozN1rOHG_Snw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MDQ2Mw==", "bodyText": "Hmmm... Here we're removing the root process time from the map, only to add its value later in:\nreturn ImmutableProcessTime.copyOf(rootProcessTime)\n                           .withDelayBetweenSteps(rootProcessTime.getDelayBetweenSteps() + overallDelayBetweenSteps);\n\nWe can do just processTimesWithoutRootProcess.get(correlationId); and then construct the result as:\nreturn ImmutableProcessTime.copyOf(rootProcessTime)\n                           .withDelayBetweenSteps(overallDelayBetweenSteps);", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r477090463", "createdAt": "2020-08-26T07:27:37Z", "author": {"login": "nictas"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/util/OperationTimeAggregator.java", "diffHunk": "@@ -10,58 +9,37 @@\n import javax.inject.Named;\n \n import org.cloudfoundry.multiapps.controller.process.flowable.FlowableFacade;\n-import org.cloudfoundry.multiapps.controller.process.util.ProcessTimeCalculator.ProcessTime;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n @Named\n public class OperationTimeAggregator {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(OperationTimeAggregator.class);\n-\n-    private ProcessTimeCalculator processTimeCalculator;\n-    private FlowableFacade flowableFacade;\n+    private final ProcessTimeCalculator processTimeCalculator;\n+    private final FlowableFacade flowableFacade;\n \n     @Inject\n     public OperationTimeAggregator(FlowableFacade flowableFacade) {\n         this.flowableFacade = flowableFacade;\n         this.processTimeCalculator = new ProcessTimeCalculator(flowableFacade);\n     }\n \n-    public void aggregateOperationTime(String correlationId) {\n+    public Map<String, ProcessTime> collectProcessTimes(String correlationId) {\n         List<String> historicSubProcesses = flowableFacade.getHistoricSubProcessIds(correlationId);\n         historicSubProcesses.add(correlationId);\n \n-        Map<String, ProcessTime> processTimesForSubProcesses = historicSubProcesses.stream()\n-                                                                                   .collect(Collectors.toMap(processId -> processId,\n-                                                                                                             processTimeCalculator::calculate));\n-        processTimesForSubProcesses.forEach((key, value) -> logProcessTimeIndividually(value, correlationId, key));\n-\n-        ProcessTime rootProcessTime = processTimesForSubProcesses.get(correlationId);\n-        logOverallProcesstime(correlationId, rootProcessTime, processTimesForSubProcesses.values());\n+        return historicSubProcesses.stream()\n+                                   .collect(Collectors.toMap(processId -> processId, processTimeCalculator::calculate));\n     }\n \n-    private void logOverallProcesstime(String correlationId, ProcessTime rootProcessTime,\n-                                       Collection<ProcessTime> subProcessesProcessTimes) {\n-        long overallDelayBetweenSteps = subProcessesProcessTimes.stream()\n-                                                                .mapToLong(ProcessTime::getDelayBetweenSteps)\n-                                                                .sum();\n-        ProcessTime overallProcessTime = ImmutableProcessTime.copyOf(rootProcessTime)\n-                                                             .withDelayBetweenSteps(rootProcessTime.getDelayBetweenSteps()\n-                                                                 + overallDelayBetweenSteps);\n-\n-        logOverallProcessTime(overallProcessTime, correlationId);\n-    }\n+    public ProcessTime computeOverallProcessTime(String correlationId, Map<String, ProcessTime> processTimes) {\n+        Map<String, ProcessTime> processTimesWithoutRootProcess = new HashMap<>(processTimes);\n+        ProcessTime rootProcessTime = processTimesWithoutRootProcess.remove(correlationId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2a4aeaa3353b6155f6f3752ca5ea9dfc7380be"}, "originalPosition": 62}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6f2a4aeaa3353b6155f6f3752ca5ea9dfc7380be", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/6f2a4aeaa3353b6155f6f3752ca5ea9dfc7380be", "committedDate": "2020-08-24T12:05:43Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}, "afterCommit": {"oid": "3adfc26fb423a35e5a3f09601a0c6fc4f8c85cfb", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/3adfc26fb423a35e5a3f09601a0c6fc4f8c85cfb", "committedDate": "2020-08-26T13:57:32Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NDE2Mjc4", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#pullrequestreview-476416278", "createdAt": "2020-08-27T06:22:09Z", "commit": {"oid": "3adfc26fb423a35e5a3f09601a0c6fc4f8c85cfb"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjoyMjowOVrOHIBaXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNjozMDozM1rOHIBzHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE3Mzc5MQ==", "bodyText": "This code is called once per process and not once per step, so it doesn't make sense to log the step name.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r478173791", "createdAt": "2020-08-27T06:22:09Z", "author": {"login": "nictas"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/util/OperationInFinalStateHandler.java", "diffHunk": "@@ -80,21 +82,41 @@ protected void setOperationState(String processInstanceId, Operation.State state\n         Operation operation = operationService.createQuery()\n                                               .processId(processInstanceId)\n                                               .singleResult();\n-        LOGGER.info(MessageFormat.format(Messages.PROCESS_0_RELEASING_LOCK_FOR_MTA_1_IN_SPACE_2, operation.getProcessId(),\n-                                         operation.getMtaId(), operation.getSpaceId()));\n+        LOGGER.info(format(Messages.PROCESS_0_RELEASING_LOCK_FOR_MTA_1_IN_SPACE_2, operation.getProcessId(), operation.getMtaId(),\n+                           operation.getSpaceId()));\n         operation = ImmutableOperation.builder()\n                                       .from(operation)\n                                       .state(state)\n                                       .hasAcquiredLock(false)\n                                       .endedAt(ZonedDateTime.now())\n                                       .build();\n         operationService.update(operation, operation);\n-        LOGGER.debug(MessageFormat.format(Messages.PROCESS_0_RELEASED_LOCK, operation.getProcessId()));\n+        LOGGER.debug(format(Messages.PROCESS_0_RELEASED_LOCK, operation.getProcessId()));\n         historicOperationEventPersister.add(processInstanceId, toEventType(state));\n     }\n \n     private EventType toEventType(State state) {\n         return state == Operation.State.FINISHED ? EventType.FINISHED : EventType.ABORTED;\n     }\n \n+    private void logOperationTime(String correlationId) {\n+        Map<String, ProcessTime> processTimes = operationTimeAggregator.collectProcessTimes(correlationId);\n+\n+        processTimes.forEach((processId, processTime) -> logProcessTime(correlationId, processId, processTime));\n+\n+        ProcessTime overallProcessTime = operationTimeAggregator.computeOverallProcessTime(correlationId, processTimes);\n+\n+        if (overallProcessTime.hasParallelSubProcesses()) {\n+            LOGGER.info(format(Messages.TIME_STATISTICS_FOR_OPERATION_WITH_PARALLEL_PROCESSES_0_DURATION_1_DELAY_2, correlationId,\n+                               overallProcessTime.getProcessDuration(), overallProcessTime.getDelayBetweenSteps()));\n+        } else {\n+            LOGGER.info(format(Messages.TIME_STATISTICS_FOR_OPERATION_0_DURATION_1_DELAY_2, correlationId,\n+                               overallProcessTime.getProcessDuration(), overallProcessTime.getDelayBetweenSteps()));\n+        }\n+    }\n+\n+    private void logProcessTime(String correlationId, String processId, ProcessTime processTime) {\n+        LOGGER.debug(format(Messages.TIME_STATISTICS_FOR_PROCESS_0_OPERATION_1_DURATION_2_DELAY_3, processId, correlationId,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjM0MjMwMw=="}, "originalCommit": {"oid": "6f2a4aeaa3353b6155f6f3752ca5ea9dfc7380be"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE3NTAwNw==", "bodyText": "This will be obvious to anyone who tries to refactor this code, so this comment is unnecessary.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r478175007", "createdAt": "2020-08-27T06:23:52Z", "author": {"login": "nictas"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/util/ProcessTimeCalculator.java", "diffHunk": "@@ -64,24 +63,46 @@ private long calculateFilteredProcessActivitiesTime(List<HistoricActivityInstanc\n                                                         Predicate<HistoricActivityInstance> filter) {\n         return processActivities.stream()\n                                 .filter(filter)\n-                                .mapToLong(HistoricActivityInstance::getDurationInMillis)\n+                                .mapToLong(this::calculateActivityDuration)\n                                 .sum();\n     }\n \n-    private boolean isCallActivity(HistoricActivityInstance historicActivityInstance) {\n-        return CALL_ACTIVITY_TYPE.equals(historicActivityInstance.getActivityType());\n+    // unfortunately, HistoricActivityInstance and HistoricProcessInstance have no common ancestor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3adfc26fb423a35e5a3f09601a0c6fc4f8c85cfb"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE3NjE0OQ==", "bodyText": "This is a bit too long of a line. It's hard to read.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r478176149", "createdAt": "2020-08-27T06:25:19Z", "author": {"login": "nictas"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/util/ProcessTimeCalculator.java", "diffHunk": "@@ -64,24 +63,46 @@ private long calculateFilteredProcessActivitiesTime(List<HistoricActivityInstanc\n                                                         Predicate<HistoricActivityInstance> filter) {\n         return processActivities.stream()\n                                 .filter(filter)\n-                                .mapToLong(HistoricActivityInstance::getDurationInMillis)\n+                                .mapToLong(this::calculateActivityDuration)\n                                 .sum();\n     }\n \n-    private boolean isCallActivity(HistoricActivityInstance historicActivityInstance) {\n-        return CALL_ACTIVITY_TYPE.equals(historicActivityInstance.getActivityType());\n+    // unfortunately, HistoricActivityInstance and HistoricProcessInstance have no common ancestor\n+    // even though both have getStart/EndTime methods\n+    // that's why there is duplication in the methods\n+    private long calculateActivityDuration(HistoricActivityInstance activityInstance) {\n+        Date startTime = activityInstance.getStartTime();\n+        Date endTime = determineProcessActivityEndTime(activityInstance);\n+        return endTime.getTime() - startTime.getTime();\n+    }\n+\n+    private Date determineProcessActivityEndTime(HistoricActivityInstance activityInstance) {\n+        return activityInstance.getEndTime() == null ? new Date(currentTimeSupplier.getAsLong()) : activityInstance.getEndTime();\n     }\n \n     private boolean isTimerEvent(HistoricActivityInstance historicActivityInstance) {\n         return TIMER_EVENT_TYPE.equals(historicActivityInstance.getActivityType());\n     }\n \n-    @Immutable\n-    @JsonSerialize(as = ImmutableProcessTime.class)\n-    @JsonDeserialize(as = ImmutableProcessTime.class)\n-    public interface ProcessTime {\n-        long getProcessDuration();\n+    private boolean isSequenceFlow(HistoricActivityInstance historicActivityInstance) {\n+        return SEQUENCE_FLOW_TYPE.equals(historicActivityInstance.getActivityType());\n+    }\n+\n+    private boolean isGateway(HistoricActivityInstance historicActivityInstance) {\n+        String activityType = historicActivityInstance.getActivityType();\n+        return activityType != null && activityType.endsWith(GATEWAY_TYPE);\n+    }\n \n-        long getDelayBetweenSteps();\n+    private long getDelayBetweenActivities(List<HistoricActivityInstance> activities) {\n+        HistoricActivityInstance[] processActivities = activities.toArray(new HistoricActivityInstance[0]);\n+        Arrays.sort(processActivities, Comparator.comparing(HistoricActivityInstance::getStartTime));\n+        long result = 0;\n+\n+        for (int i = 0; i < processActivities.length - 1; i++) {\n+            long delay = processActivities[i + 1].getStartTime()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3adfc26fb423a35e5a3f09601a0c6fc4f8c85cfb"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODE4MDEyNw==", "bodyText": "Add a comment here saying that this is done, because of the possibility of parallel call activities.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#discussion_r478180127", "createdAt": "2020-08-27T06:30:33Z", "author": {"login": "nictas"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/util/ProcessTimeCalculator.java", "diffHunk": "@@ -64,24 +63,46 @@ private long calculateFilteredProcessActivitiesTime(List<HistoricActivityInstanc\n                                                         Predicate<HistoricActivityInstance> filter) {\n         return processActivities.stream()\n                                 .filter(filter)\n-                                .mapToLong(HistoricActivityInstance::getDurationInMillis)\n+                                .mapToLong(this::calculateActivityDuration)\n                                 .sum();\n     }\n \n-    private boolean isCallActivity(HistoricActivityInstance historicActivityInstance) {\n-        return CALL_ACTIVITY_TYPE.equals(historicActivityInstance.getActivityType());\n+    // unfortunately, HistoricActivityInstance and HistoricProcessInstance have no common ancestor\n+    // even though both have getStart/EndTime methods\n+    // that's why there is duplication in the methods\n+    private long calculateActivityDuration(HistoricActivityInstance activityInstance) {\n+        Date startTime = activityInstance.getStartTime();\n+        Date endTime = determineProcessActivityEndTime(activityInstance);\n+        return endTime.getTime() - startTime.getTime();\n+    }\n+\n+    private Date determineProcessActivityEndTime(HistoricActivityInstance activityInstance) {\n+        return activityInstance.getEndTime() == null ? new Date(currentTimeSupplier.getAsLong()) : activityInstance.getEndTime();\n     }\n \n     private boolean isTimerEvent(HistoricActivityInstance historicActivityInstance) {\n         return TIMER_EVENT_TYPE.equals(historicActivityInstance.getActivityType());\n     }\n \n-    @Immutable\n-    @JsonSerialize(as = ImmutableProcessTime.class)\n-    @JsonDeserialize(as = ImmutableProcessTime.class)\n-    public interface ProcessTime {\n-        long getProcessDuration();\n+    private boolean isSequenceFlow(HistoricActivityInstance historicActivityInstance) {\n+        return SEQUENCE_FLOW_TYPE.equals(historicActivityInstance.getActivityType());\n+    }\n+\n+    private boolean isGateway(HistoricActivityInstance historicActivityInstance) {\n+        String activityType = historicActivityInstance.getActivityType();\n+        return activityType != null && activityType.endsWith(GATEWAY_TYPE);\n+    }\n \n-        long getDelayBetweenSteps();\n+    private long getDelayBetweenActivities(List<HistoricActivityInstance> activities) {\n+        HistoricActivityInstance[] processActivities = activities.toArray(new HistoricActivityInstance[0]);\n+        Arrays.sort(processActivities, Comparator.comparing(HistoricActivityInstance::getStartTime));\n+        long result = 0;\n+\n+        for (int i = 0; i < processActivities.length - 1; i++) {\n+            long delay = processActivities[i + 1].getStartTime()\n+                                                 .getTime() - determineProcessActivityEndTime(processActivities[i]).getTime();\n+            result += delay < 0 ? 0 : delay;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3adfc26fb423a35e5a3f09601a0c6fc4f8c85cfb"}, "originalPosition": 110}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce82a5a3661d9abb24d8ae1d7a3575a9b2f51d01", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/ce82a5a3661d9abb24d8ae1d7a3575a9b2f51d01", "committedDate": "2020-08-27T13:35:03Z", "message": "Refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7ba8a0dd6d8e173751c9491c73a46acfff70840", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/e7ba8a0dd6d8e173751c9491c73a46acfff70840", "committedDate": "2020-08-27T13:35:03Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3adfc26fb423a35e5a3f09601a0c6fc4f8c85cfb", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/3adfc26fb423a35e5a3f09601a0c6fc4f8c85cfb", "committedDate": "2020-08-26T13:57:32Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}, "afterCommit": {"oid": "e7ba8a0dd6d8e173751c9491c73a46acfff70840", "author": {"user": {"login": "radito3", "name": "Rangel Ivanov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/e7ba8a0dd6d8e173751c9491c73a46acfff70840", "committedDate": "2020-08-27T13:35:03Z", "message": "Fix inaccurate calculation of delay between steps\n\nLMCROSSITXSADEPLOY-2135"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NzQ1MDYw", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#pullrequestreview-476745060", "createdAt": "2020-08-27T13:55:04Z", "commit": {"oid": "e7ba8a0dd6d8e173751c9491c73a46acfff70840"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NzU1Mjkw", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/924#pullrequestreview-476755290", "createdAt": "2020-08-27T14:05:32Z", "commit": {"oid": "e7ba8a0dd6d8e173751c9491c73a46acfff70840"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 769, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}