{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NjQ1MTE5", "number": 928, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjozNzoyOVrOEXm5pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDoyOToyMVrOEXpzXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTkwMDUyOnYy", "diffSide": "RIGHT", "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/persistence/query/impl/ConfigurationSubscriptionQueryImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjozNzoyOVrOG_fX6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMjozNzoyOVrOG_fX6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTIyNzQ5Nw==", "bodyText": "Good to find that!\nIt was regression delivered by me :(", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/928#discussion_r469227497", "createdAt": "2020-08-12T12:37:29Z", "author": {"login": "boyan-velinov"}, "path": "multiapps-controller-core/src/main/java/org/cloudfoundry/multiapps/controller/core/persistence/query/impl/ConfigurationSubscriptionQueryImpl.java", "diffHunk": "@@ -126,7 +126,8 @@ public int deleteAll(String spaceId) {\n                                                                        .condition(getCriteriaBuilder()::equal)\n                                                                        .value(spaceId)\n                                                                        .build());\n-        return executeInTransaction(manager -> createDeleteQuery(manager, queryCriteria, ConfigurationEntryDto.class).executeUpdate());\n+        return executeInTransaction(manager -> createDeleteQuery(manager, queryCriteria,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2a9acf836233f7c2414eb955e2d1b0f55ad4ab"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjM3NTk3OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/jobs/ConfigurationSubscriptionCleaner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDoyOToyMVrOG_j8cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDo0MzozOFrOG_kk7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwMjM4NQ==", "bodyText": "If one exception is thrown at the begining of stream processing, the deletion of other entries will not happen at all.\nSo, let's not rethrow the exception.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/928#discussion_r469302385", "createdAt": "2020-08-12T14:29:21Z", "author": {"login": "boyan-velinov"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/jobs/ConfigurationSubscriptionCleaner.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.cloudfoundry.multiapps.controller.process.jobs;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.CloudControllerClientImpl;\n+import org.cloudfoundry.client.lib.CloudCredentials;\n+import org.cloudfoundry.client.lib.CloudOperationException;\n+import org.cloudfoundry.multiapps.controller.core.auditlogging.AuditLoggingProvider;\n+import org.cloudfoundry.multiapps.controller.core.model.ConfigurationSubscription;\n+import org.cloudfoundry.multiapps.controller.core.persistence.service.ConfigurationSubscriptionService;\n+import org.cloudfoundry.multiapps.controller.core.util.ApplicationConfiguration;\n+import org.cloudfoundry.multiapps.controller.core.util.SecurityUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpStatus;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Named\n+@Order(40)\n+public class ConfigurationSubscriptionCleaner implements Cleaner {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ConfigurationSubscriptionCleaner.class);\n+    private static final String AUTH_ORIGIN = \"uaa\";\n+\n+    protected ApplicationConfiguration configuration;\n+    protected ConfigurationSubscriptionService configurationSubscriptionService;\n+    protected CloudControllerClient cfClient;\n+    private boolean executed;\n+\n+    @Inject\n+    public ConfigurationSubscriptionCleaner(ApplicationConfiguration applicationConfiguration, ConfigurationSubscriptionService configurationSubscriptionService) {\n+        this.configuration = applicationConfiguration;\n+        this.configurationSubscriptionService = configurationSubscriptionService;\n+        this.executed = false;\n+    }\n+\n+    @Override\n+    public void execute(Date expirationTime) {\n+        if (!executed) {\n+            LOGGER.debug(CleanUpJob.LOG_MARKER, \"Deleting orphaned configuration subscriptions...\");\n+            deleteOrphanedConfigurationSubscriptions();\n+            LOGGER.debug(CleanUpJob.LOG_MARKER, \"Orphaned configuration subscriptions deleted\");\n+            executed = true;\n+        }\n+    }\n+\n+    private void deleteOrphanedConfigurationSubscriptions() {\n+        List<ConfigurationSubscription> configurationSubscriptions = configurationSubscriptionService.createQuery()\n+                                                                                                     .list();\n+        configurationSubscriptions.stream()\n+                                  .filter(this::hasNoAssociatedSpace)\n+                                  .peek(this::auditLogDeletion)\n+                                  .map(ConfigurationSubscription::getSpaceId)\n+                                  .distinct()\n+                                  .forEach(this::deleteConfigurationSubscriptionsBySpaceId);\n+    }\n+\n+    private boolean hasNoAssociatedSpace(ConfigurationSubscription configurationSubscription) {\n+        String spaceId = configurationSubscription.getSpaceId();\n+        return !spaceExists(spaceId);\n+    }\n+\n+    private boolean spaceExists(String spaceId) {\n+        if (cfClient == null) {\n+            initCloudControllerClient();\n+        }\n+        try {\n+            cfClient.getSpace(UUID.fromString(spaceId));\n+            return true;\n+        } catch (CloudOperationException e) {\n+            if (e.getStatusCode()\n+                 .equals(HttpStatus.NOT_FOUND)) {\n+                return false;\n+            }\n+            throw e;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab2a9acf836233f7c2414eb955e2d1b0f55ad4ab"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxMjc0OQ==", "bodyText": "only logging as a handling?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/928#discussion_r469312749", "createdAt": "2020-08-12T14:43:38Z", "author": {"login": "radoslav-d"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/jobs/ConfigurationSubscriptionCleaner.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package org.cloudfoundry.multiapps.controller.process.jobs;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.CloudControllerClientImpl;\n+import org.cloudfoundry.client.lib.CloudCredentials;\n+import org.cloudfoundry.client.lib.CloudOperationException;\n+import org.cloudfoundry.multiapps.controller.core.auditlogging.AuditLoggingProvider;\n+import org.cloudfoundry.multiapps.controller.core.model.ConfigurationSubscription;\n+import org.cloudfoundry.multiapps.controller.core.persistence.service.ConfigurationSubscriptionService;\n+import org.cloudfoundry.multiapps.controller.core.util.ApplicationConfiguration;\n+import org.cloudfoundry.multiapps.controller.core.util.SecurityUtil;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.core.annotation.Order;\n+import org.springframework.http.HttpStatus;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.UUID;\n+\n+@Named\n+@Order(40)\n+public class ConfigurationSubscriptionCleaner implements Cleaner {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ConfigurationSubscriptionCleaner.class);\n+    private static final String AUTH_ORIGIN = \"uaa\";\n+\n+    protected ApplicationConfiguration configuration;\n+    protected ConfigurationSubscriptionService configurationSubscriptionService;\n+    protected CloudControllerClient cfClient;\n+    private boolean executed;\n+\n+    @Inject\n+    public ConfigurationSubscriptionCleaner(ApplicationConfiguration applicationConfiguration, ConfigurationSubscriptionService configurationSubscriptionService) {\n+        this.configuration = applicationConfiguration;\n+        this.configurationSubscriptionService = configurationSubscriptionService;\n+        this.executed = false;\n+    }\n+\n+    @Override\n+    public void execute(Date expirationTime) {\n+        if (!executed) {\n+            LOGGER.debug(CleanUpJob.LOG_MARKER, \"Deleting orphaned configuration subscriptions...\");\n+            deleteOrphanedConfigurationSubscriptions();\n+            LOGGER.debug(CleanUpJob.LOG_MARKER, \"Orphaned configuration subscriptions deleted\");\n+            executed = true;\n+        }\n+    }\n+\n+    private void deleteOrphanedConfigurationSubscriptions() {\n+        List<ConfigurationSubscription> configurationSubscriptions = configurationSubscriptionService.createQuery()\n+                                                                                                     .list();\n+        configurationSubscriptions.stream()\n+                                  .filter(this::hasNoAssociatedSpace)\n+                                  .peek(this::auditLogDeletion)\n+                                  .map(ConfigurationSubscription::getSpaceId)\n+                                  .distinct()\n+                                  .forEach(this::deleteConfigurationSubscriptionsBySpaceId);\n+    }\n+\n+    private boolean hasNoAssociatedSpace(ConfigurationSubscription configurationSubscription) {\n+        String spaceId = configurationSubscription.getSpaceId();\n+        return !spaceExists(spaceId);\n+    }\n+\n+    private boolean spaceExists(String spaceId) {\n+        if (cfClient == null) {\n+            initCloudControllerClient();\n+        }\n+        try {\n+            cfClient.getSpace(UUID.fromString(spaceId));\n+            return true;\n+        } catch (CloudOperationException e) {\n+            if (e.getStatusCode()\n+                 .equals(HttpStatus.NOT_FOUND)) {\n+                return false;\n+            }\n+            throw e;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMwMjM4NQ=="}, "originalCommit": {"oid": "ab2a9acf836233f7c2414eb955e2d1b0f55ad4ab"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 393, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}