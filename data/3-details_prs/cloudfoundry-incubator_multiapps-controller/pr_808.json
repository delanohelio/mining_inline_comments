{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NzEzMTg1", "number": 808, "title": "Refactor ServiceCreator to call cf client", "bodyText": "Replace the programmatic filtering of services and the plain http rest\ncall for creating a service with a call to the CloudControllerClient.\nThis will remove duplicated logic and code, which already lives in\ncf-java-client.\nJIRA: LMCROSSITXSADEPLOY-1516", "createdAt": "2020-03-17T09:11:08Z", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/808", "merged": true, "mergeCommit": {"oid": "88434498bdd6d944122d24dd9376c373beb596b4"}, "closed": true, "closedAt": "2020-03-17T12:46:21Z", "author": {"login": "radoslav-d"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOgRA1AFqTM3NTkxMzg1OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOiGPwgH2gAyMzg5NzEzMTg1OjJkZDEzM2FlZGY2YTUyNzIxMTM0YzczYmIyOGM4MWM1ZjE3Y2FjNmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1OTEzODU5", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/808#pullrequestreview-375913859", "createdAt": "2020-03-17T10:36:34Z", "commit": {"oid": "a2c46a3123fff94eb58550a6d900b89de4ebbe63"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1OTE1NzUy", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/808#pullrequestreview-375915752", "createdAt": "2020-03-17T10:39:11Z", "commit": {"oid": "a2c46a3123fff94eb58550a6d900b89de4ebbe63"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDozOToxMlrOF3WiaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMDo0NDo1OFrOF3Wutw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4NTI1Ng==", "bodyText": "Please make sure that this request covers all the Request parameters + calls the correct URL(accepts_incomplete query parameter).", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/808#discussion_r393585256", "createdAt": "2020-03-17T10:39:12Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/clients/ServiceCreator.java", "diffHunk": "@@ -36,36 +29,15 @@ ServiceCreator withErrorHandlerSupplier(Supplier<CustomControllerClientErrorHand\n         return this;\n     }\n \n-    public MethodExecution<String> createService(CloudControllerClient client, CloudServiceExtended service, String spaceId) {\n+    public MethodExecution<String> createService(CloudControllerClient client, CloudServiceExtended service) {\n         return errorHandlerSupplier.get()\n-                                   .handleErrorsOrReturnResult(() -> attemptToCreateService(client, service, spaceId));\n+                                   .handleErrorsOrReturnResult(() -> attemptToCreateService(client, service));\n     }\n \n-    private MethodExecution<String> attemptToCreateService(CloudControllerClient client, CloudServiceExtended service, String spaceId) {\n+    private MethodExecution<String> attemptToCreateService(CloudControllerClient client, CloudServiceExtended service) {\n         assertServiceAttributes(service);\n-\n-        RestTemplate restTemplate = getRestTemplate(client);\n-        String cloudControllerUrl = client.getCloudControllerUrl()\n-                                          .toString();\n-        CloudServicePlan cloudServicePlan = findPlanForService(client, service);\n-\n-        Map<String, Object> serviceRequest = createServiceRequest(service, spaceId, cloudServicePlan);\n-        String url = getUrl(cloudControllerUrl, CREATE_SERVICE_URL_ACCEPTS_INCOMPLETE_TRUE);\n-        HttpEntity<Map<String, Object>> requestEntity = new HttpEntity<>(serviceRequest);\n-        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, requestEntity, String.class);\n-        return MethodExecution.fromResponseEntity(response);\n-    }\n-\n-    private Map<String, Object> createServiceRequest(CloudServiceExtended service, String spaceId, CloudServicePlan cloudServicePlan) {\n-        Map<String, Object> serviceRequest = new HashMap<>();\n-        serviceRequest.put(SPACE_GUID, spaceId);\n-        serviceRequest.put(SERVICE_NAME, service.getName());\n-        serviceRequest.put(SERVICE_PLAN_GUID, cloudServicePlan.getMetadata()\n-                                                              .getGuid()\n-                                                              .toString());\n-        serviceRequest.put(SERVICE_PARAMETERS, service.getCredentials());\n-        serviceRequest.put(SERVICE_TAGS, service.getTags());\n-        return serviceRequest;\n+        client.createService(service);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c46a3123fff94eb58550a6d900b89de4ebbe63"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4NTkzOQ==", "bodyText": "If you are sure that this call is enough and is doing all the necessarry putting of request parameters, remove the class and replace every usage of ServiceCreator with client.createService(service);", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/808#discussion_r393585939", "createdAt": "2020-03-17T10:40:29Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/clients/ServiceCreator.java", "diffHunk": "@@ -36,36 +29,15 @@ ServiceCreator withErrorHandlerSupplier(Supplier<CustomControllerClientErrorHand\n         return this;\n     }\n \n-    public MethodExecution<String> createService(CloudControllerClient client, CloudServiceExtended service, String spaceId) {\n+    public MethodExecution<String> createService(CloudControllerClient client, CloudServiceExtended service) {\n         return errorHandlerSupplier.get()\n-                                   .handleErrorsOrReturnResult(() -> attemptToCreateService(client, service, spaceId));\n+                                   .handleErrorsOrReturnResult(() -> attemptToCreateService(client, service));\n     }\n \n-    private MethodExecution<String> attemptToCreateService(CloudControllerClient client, CloudServiceExtended service, String spaceId) {\n+    private MethodExecution<String> attemptToCreateService(CloudControllerClient client, CloudServiceExtended service) {\n         assertServiceAttributes(service);\n-\n-        RestTemplate restTemplate = getRestTemplate(client);\n-        String cloudControllerUrl = client.getCloudControllerUrl()\n-                                          .toString();\n-        CloudServicePlan cloudServicePlan = findPlanForService(client, service);\n-\n-        Map<String, Object> serviceRequest = createServiceRequest(service, spaceId, cloudServicePlan);\n-        String url = getUrl(cloudControllerUrl, CREATE_SERVICE_URL_ACCEPTS_INCOMPLETE_TRUE);\n-        HttpEntity<Map<String, Object>> requestEntity = new HttpEntity<>(serviceRequest);\n-        ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.POST, requestEntity, String.class);\n-        return MethodExecution.fromResponseEntity(response);\n-    }\n-\n-    private Map<String, Object> createServiceRequest(CloudServiceExtended service, String spaceId, CloudServicePlan cloudServicePlan) {\n-        Map<String, Object> serviceRequest = new HashMap<>();\n-        serviceRequest.put(SPACE_GUID, spaceId);\n-        serviceRequest.put(SERVICE_NAME, service.getName());\n-        serviceRequest.put(SERVICE_PLAN_GUID, cloudServicePlan.getMetadata()\n-                                                              .getGuid()\n-                                                              .toString());\n-        serviceRequest.put(SERVICE_PARAMETERS, service.getCredentials());\n-        serviceRequest.put(SERVICE_TAGS, service.getTags());\n-        return serviceRequest;\n+        client.createService(service);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4NTI1Ng=="}, "originalCommit": {"oid": "a2c46a3123fff94eb58550a6d900b89de4ebbe63"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4NzMyNg==", "bodyText": "Why reset? Isn't the new Mocked object be enough here?\nIf no, please refactor the test in order to be.\nFurther reading: https://softwareengineering.stackexchange.com/questions/188299/is-this-an-appropriate-use-of-mockitos-reset-method", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/808#discussion_r393587326", "createdAt": "2020-03-17T10:42:56Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/test/java/com/sap/cloud/lm/sl/cf/core/cf/clients/CloudServiceOperatorTest.java", "diffHunk": "@@ -49,15 +46,13 @@ private void prepareRestTemplateFactory() {\n \n     private void prepareClient() throws IOException {\n         URL controllerUrl = new URL(CONTROLLER_URL);\n+        Mockito.reset(client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c46a3123fff94eb58550a6d900b89de4ebbe63"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4NzY3MQ==", "bodyText": "What about the detailed message? Is it gone and how the 401 Unauthorized is replacing it?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/808#discussion_r393587671", "createdAt": "2020-03-17T10:43:33Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/test/java/com/sap/cloud/lm/sl/cf/core/cf/clients/ServiceWithAlternativesCreatorTest.java", "diffHunk": "@@ -48,62 +38,44 @@\n                 Arguments.of(\"service-03.json\", \"Service label must not be null\", IllegalArgumentException.class),\n                 Arguments.of(\"service-04.json\", \"Service name must not be null\", IllegalArgumentException.class),\n                 Arguments.of(\"service-05.json\", \"Service plan must not be null\", IllegalArgumentException.class),\n-                Arguments.of(\"service-06.json\", \"Could not create service instance \\\"foo\\\". Service plan \\\"v3.4-extra-large\\\" from service offering \\\"mongodb\\\" was not found.\", CloudOperationException.class),\n-                Arguments.of(\"service-07.json\", \"Could not create service instance \\\"foo\\\". Service plan \\\"v2.0-sp3\\\" from service offering \\\"hana\\\" was not found.\", CloudOperationException.class),\n+                Arguments.of(\"service-06.json\", \"401 Unauthorized\", CloudOperationException.class),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c46a3123fff94eb58550a6d900b89de4ebbe63"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU4ODQwNw==", "bodyText": "In testing the appropiate words for inputs are \"actual\" and \"expected\".\nSo, maybe you culd use actualService ?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/808#discussion_r393588407", "createdAt": "2020-03-17T10:44:58Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/test/resources/com/sap/cloud/lm/sl/cf/core/cf/clients/service-01.json", "diffHunk": "@@ -1,5 +1,5 @@\n {\n-  \"service\": {\n+  \"initialService\": {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c46a3123fff94eb58550a6d900b89de4ebbe63"}, "originalPosition": 3}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "206c84cec7b994e62b7f479fa96da305f72b8146", "author": {"user": {"login": "radoslav-d", "name": "Radoslav Dimitrov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/206c84cec7b994e62b7f479fa96da305f72b8146", "committedDate": "2020-03-17T11:22:46Z", "message": "Refactor ServiceCreator to call cf client\n\nReplace the programmatic filtering of services and the plain http rest\ncall for creating a service with a call to the CloudControllerClient.\nThis will remove duplicated logic and code, which already lives in\ncf-java-client. JIRA: LMCROSSITXSADEPLOY-1516"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2c46a3123fff94eb58550a6d900b89de4ebbe63", "author": {"user": {"login": "radoslav-d", "name": "Radoslav Dimitrov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/a2c46a3123fff94eb58550a6d900b89de4ebbe63", "committedDate": "2020-03-17T09:09:31Z", "message": "Refactor ServiceCreator to call cf client\n\nReplace the programmatic filtering of services and the plain http rest\ncall for creating a service with a call to the CloudControllerClient.\nThis will remove duplicated logic and code, which already lives in\ncf-java-client. JIRA: LMCROSSITXSADEPLOY-1516"}, "afterCommit": {"oid": "206c84cec7b994e62b7f479fa96da305f72b8146", "author": {"user": {"login": "radoslav-d", "name": "Radoslav Dimitrov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/206c84cec7b994e62b7f479fa96da305f72b8146", "committedDate": "2020-03-17T11:22:46Z", "message": "Refactor ServiceCreator to call cf client\n\nReplace the programmatic filtering of services and the plain http rest\ncall for creating a service with a call to the CloudControllerClient.\nThis will remove duplicated logic and code, which already lives in\ncf-java-client. JIRA: LMCROSSITXSADEPLOY-1516"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1OTcyNjMx", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/808#pullrequestreview-375972631", "createdAt": "2020-03-17T12:06:08Z", "commit": {"oid": "206c84cec7b994e62b7f479fa96da305f72b8146"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dd133aedf6a52721134c73bb28c81c5f17cac6c", "author": {"user": {"login": "radoslav-d", "name": "Radoslav Dimitrov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/2dd133aedf6a52721134c73bb28c81c5f17cac6c", "committedDate": "2020-03-17T12:44:37Z", "message": "Adopt CF Java client 1.21.3\n\nJIRA: LMCROSSITXSADEPLOY-1516"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 871, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}