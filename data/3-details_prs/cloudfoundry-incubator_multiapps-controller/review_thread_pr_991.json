{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5OTE1Njgz", "number": 991, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDowMjo1NFrOE5XoCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDoyMDowOVrOE5gjcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTkxMzcwOnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/main/java/module-info.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDowMjo1NFrOHzyG9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDowMjo1NFrOHzyG9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA2MDQwNg==", "bodyText": "What do you think about naming the package org.cloudfoundry.multiapps.controller.process.dynatrace?\nMy point is that all the classes are related to the dynatrace configuration. Event sounds more like something that is part of the flowable.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/991#discussion_r524060406", "createdAt": "2020-11-16T10:02:54Z", "author": {"login": "radoslav-d"}, "path": "multiapps-controller-process/src/main/java/module-info.java", "diffHunk": "@@ -2,6 +2,7 @@\n \n     exports org.cloudfoundry.multiapps.controller.process;\n     exports org.cloudfoundry.multiapps.controller.process.client;\n+    exports org.cloudfoundry.multiapps.controller.process.event;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19b1ce2155178481e61f0bf84d8e9006c77b8f60"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTk0MTE3OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/event/DynatraceProcessEvent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDowNzowNVrOHzyYqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDowNzowNVrOHzyYqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA2NDkzOA==", "bodyText": "Can this be null?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/991#discussion_r524064938", "createdAt": "2020-11-16T10:07:05Z", "author": {"login": "radoslav-d"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/event/DynatraceProcessEvent.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.cloudfoundry.multiapps.controller.process.event;\r\n+\r\n+import org.cloudfoundry.multiapps.common.Nullable;\r\n+import org.cloudfoundry.multiapps.controller.api.model.ProcessType;\r\n+import org.cloudfoundry.multiapps.controller.api.model.ProcessTypeDeserializer;\r\n+import org.cloudfoundry.multiapps.controller.api.model.ProcessTypeSerializer;\r\n+import org.immutables.value.Value;\r\n+\r\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\r\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\r\n+\r\n+@Value.Immutable\r\n+@JsonSerialize(as = ImmutableDynatraceProcessEvent.class)\r\n+@JsonDeserialize(as = ImmutableDynatraceProcessEvent.class)\r\n+public abstract class DynatraceProcessEvent {\r\n+    public enum EventType {\r\n+\r\n+        STARTED, FINISHED, FAILED;\r\n+\r\n+        public static EventType fromValue(String v) {\r\n+            for (EventType b : EventType.values()) {\r\n+                if (b.name()\r\n+                     .equals(v)) {\r\n+                    return b;\r\n+                }\r\n+            }\r\n+            return null;\r\n+        }\r\n+    }\r\n+    \r\n+    public abstract String getProcessId();\r\n+\r\n+    @JsonSerialize(using = ProcessTypeSerializer.class)\r\n+    @JsonDeserialize(using = ProcessTypeDeserializer.class)\r\n+    public abstract ProcessType getProcessType();\r\n+    \r\n+    public abstract String getSpaceId();\r\n+\r\n+    @Nullable\r\n+    public abstract String getMtaId();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19b1ce2155178481e61f0bf84d8e9006c77b8f60"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTk0NTgyOnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/event/DynatraceProcessEvent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDowNzo0OFrOHzybsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDowNzo0OFrOHzybsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA2NTcxNA==", "bodyText": "I think it will be more structured if you move this code at the bottom of the file.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/991#discussion_r524065714", "createdAt": "2020-11-16T10:07:48Z", "author": {"login": "radoslav-d"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/event/DynatraceProcessEvent.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.cloudfoundry.multiapps.controller.process.event;\r\n+\r\n+import org.cloudfoundry.multiapps.common.Nullable;\r\n+import org.cloudfoundry.multiapps.controller.api.model.ProcessType;\r\n+import org.cloudfoundry.multiapps.controller.api.model.ProcessTypeDeserializer;\r\n+import org.cloudfoundry.multiapps.controller.api.model.ProcessTypeSerializer;\r\n+import org.immutables.value.Value;\r\n+\r\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\r\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\r\n+\r\n+@Value.Immutable\r\n+@JsonSerialize(as = ImmutableDynatraceProcessEvent.class)\r\n+@JsonDeserialize(as = ImmutableDynatraceProcessEvent.class)\r\n+public abstract class DynatraceProcessEvent {\r\n+    public enum EventType {\r\n+\r\n+        STARTED, FINISHED, FAILED;\r\n+\r\n+        public static EventType fromValue(String v) {\r\n+            for (EventType b : EventType.values()) {\r\n+                if (b.name()\r\n+                     .equals(v)) {\r\n+                    return b;\r\n+                }\r\n+            }\r\n+            return null;\r\n+        }\r\n+    }\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19b1ce2155178481e61f0bf84d8e9006c77b8f60"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTk2MzkxOnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/flowable/AbortProcessAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxMDozMFrOHzynXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxMDozMFrOHzynXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA2ODcwMg==", "bodyText": "I suggest that you either refactor the message or remove the log at all.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/991#discussion_r524068702", "createdAt": "2020-11-16T10:10:30Z", "author": {"login": "radoslav-d"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/flowable/AbortProcessAction.java", "diffHunk": "@@ -34,6 +48,32 @@ public void executeActualProcessAction(String user, String superProcessInstanceI\n         historicEventService.add(ImmutableHistoricOperationEvent.of(superProcessInstanceId, HistoricOperationEvent.EventType.ABORTED));\n         historicEventService.add(ImmutableHistoricOperationEvent.of(superProcessInstanceId,\n                                                                     HistoricOperationEvent.EventType.ABORT_EXECUTED));\n+        publishDynatraceEvent(superProcessInstanceId);\n+    }\n+    \n+    private void publishDynatraceEvent(String processId) {\n+        LOGGER.info(\"entering publishDynatraceEvent\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19b1ce2155178481e61f0bf84d8e9006c77b8f60"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTk4NDM5OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/flowable/AbortProcessAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxMzozN1rOHzy02g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxMzozN1rOHzy02g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3MjE1NA==", "bodyText": "Select more detailed messages", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/991#discussion_r524072154", "createdAt": "2020-11-16T10:13:37Z", "author": {"login": "radoslav-d"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/flowable/AbortProcessAction.java", "diffHunk": "@@ -34,6 +48,32 @@ public void executeActualProcessAction(String user, String superProcessInstanceI\n         historicEventService.add(ImmutableHistoricOperationEvent.of(superProcessInstanceId, HistoricOperationEvent.EventType.ABORTED));\n         historicEventService.add(ImmutableHistoricOperationEvent.of(superProcessInstanceId,\n                                                                     HistoricOperationEvent.EventType.ABORT_EXECUTED));\n+        publishDynatraceEvent(superProcessInstanceId);\n+    }\n+    \n+    private void publishDynatraceEvent(String processId) {\n+        LOGGER.info(\"entering publishDynatraceEvent\");\n+        List<ProgressMessage> errorProgressMessages = progressMessageService.createQuery()\n+                                                                            .processId(processId)\n+                                                                            .type(ProgressMessageType.ERROR)\n+                                                                            .list();\n+        if (errorProgressMessages.isEmpty()) {\n+            LOGGER.info(\"no error messages\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19b1ce2155178481e61f0bf84d8e9006c77b8f60"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjAxMTI0OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/AbortProcessActionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxNzo0NlrOHzzHEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxNzo0NlrOHzzHEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3NjgxOQ==", "bodyText": "Is this TODO comment still applicable?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/991#discussion_r524076819", "createdAt": "2020-11-16T10:17:46Z", "author": {"login": "radoslav-d"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/AbortProcessActionTest.java", "diffHunk": "@@ -33,24 +58,60 @@ void testAbortExecution() {\n         Mockito.verify(historicOperationEventService)\n                .add(ImmutableHistoricOperationEvent.of(PROCESS_GUID, HistoricOperationEvent.EventType.ABORT_EXECUTED));\n     }\n+    \n+    @Test\n+    void testAbortActionAndPublishingDynatraceEvent() {\n+        ProcessType processType = ProcessType.DEPLOY;\n+        Mockito.when(progressMessageQuery.list()).thenReturn(List.of(progressMessage));\n+        Mockito.when(operation.getMtaId()).thenReturn(MTA_ID);\n+        Mockito.when(operation.getSpaceId()).thenReturn(SPACE_ID);\n+        Mockito.when(operation.getProcessType()).thenReturn(processType);\n+        processAction.execute(null, PROCESS_GUID);\n+        ArgumentCaptor<DynatraceProcessEvent> argumentCaptor = ArgumentCaptor.forClass(DynatraceProcessEvent.class);\n+        Mockito.verify(dynatraceEventPublisher).publish(argumentCaptor.capture(), Mockito.any());\n+        DynatraceProcessEvent actualDynatraceEvent = argumentCaptor.getValue();\n+        assertEquals(MTA_ID, actualDynatraceEvent.getMtaId());\n+        assertEquals(SPACE_ID, actualDynatraceEvent.getSpaceId());\n+        assertEquals(processType, actualDynatraceEvent.getProcessType());\n+        assertEquals(DynatraceProcessEvent.EventType.FAILED, actualDynatraceEvent.getEventType());\n+    }\n+\n+    \n+    @Test\n+    void testAbortActionNoPublishingDynatraceEvent() {\n+        Mockito.when(progressMessageQuery.list()).thenReturn(Collections.emptyList());\n+        processAction.execute(null, PROCESS_GUID);\n+        Mockito.verify(dynatraceEventPublisher, Mockito.never()).publish(Mockito.any(), Mockito.any());\n+    }\n \n     private void prepareOperationService() {\n         OperationQuery mockedOperationQuery = Mockito.mock(OperationQuery.class);\n         Mockito.when(mockedOperationQuery.processId(PROCESS_GUID))\n                .thenReturn(mockedOperationQuery);\n-        Operation operation = Mockito.mock(Operation.class);\n         Mockito.when(mockedOperationQuery.singleResult())\n                .thenReturn(operation);\n         Mockito.when(operationService.createQuery())\n                .thenReturn(mockedOperationQuery);\n     }\n \n+    private void prepareProgressMessageService() {\n+        Mockito.when(progressMessageService.createQuery())\n+               .thenReturn(progressMessageQuery);\n+        Mockito.when(progressMessageQuery.processId(PROCESS_GUID))\n+               .thenReturn(progressMessageQuery);\n+        Mockito.when(progressMessageQuery.type(ProgressMessageType.ERROR))\n+               .thenReturn(progressMessageQuery);\n+    }\n+\n     @Override\n     protected ProcessAction createProcessAction() {\n         return new AbortProcessAction(flowableFacade,\n                                       Collections.emptyList(),\n                                       historicOperationEventService,\n                                       operationService,\n-                                      cloudControllerClientProvider);\n+                                      cloudControllerClientProvider,\n+                                      progressMessageService,\n+                                      dynatraceEventPublisher);\n+        // TODO check nulls above", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19b1ce2155178481e61f0bf84d8e9006c77b8f60"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjAxNjcyOnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/AbortProcessActionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxODo0M1rOHzzKww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxODo0M1rOHzzKww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3Nzc2Mw==", "bodyText": "formatting", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/991#discussion_r524077763", "createdAt": "2020-11-16T10:18:43Z", "author": {"login": "radoslav-d"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/AbortProcessActionTest.java", "diffHunk": "@@ -33,24 +58,60 @@ void testAbortExecution() {\n         Mockito.verify(historicOperationEventService)\n                .add(ImmutableHistoricOperationEvent.of(PROCESS_GUID, HistoricOperationEvent.EventType.ABORT_EXECUTED));\n     }\n+    \n+    @Test\n+    void testAbortActionAndPublishingDynatraceEvent() {\n+        ProcessType processType = ProcessType.DEPLOY;\n+        Mockito.when(progressMessageQuery.list()).thenReturn(List.of(progressMessage));\n+        Mockito.when(operation.getMtaId()).thenReturn(MTA_ID);\n+        Mockito.when(operation.getSpaceId()).thenReturn(SPACE_ID);\n+        Mockito.when(operation.getProcessType()).thenReturn(processType);\n+        processAction.execute(null, PROCESS_GUID);\n+        ArgumentCaptor<DynatraceProcessEvent> argumentCaptor = ArgumentCaptor.forClass(DynatraceProcessEvent.class);\n+        Mockito.verify(dynatraceEventPublisher).publish(argumentCaptor.capture(), Mockito.any());\n+        DynatraceProcessEvent actualDynatraceEvent = argumentCaptor.getValue();\n+        assertEquals(MTA_ID, actualDynatraceEvent.getMtaId());\n+        assertEquals(SPACE_ID, actualDynatraceEvent.getSpaceId());\n+        assertEquals(processType, actualDynatraceEvent.getProcessType());\n+        assertEquals(DynatraceProcessEvent.EventType.FAILED, actualDynatraceEvent.getEventType());\n+    }\n+\n+    \n+    @Test\n+    void testAbortActionNoPublishingDynatraceEvent() {\n+        Mockito.when(progressMessageQuery.list()).thenReturn(Collections.emptyList());\n+        processAction.execute(null, PROCESS_GUID);\n+        Mockito.verify(dynatraceEventPublisher, Mockito.never()).publish(Mockito.any(), Mockito.any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19b1ce2155178481e61f0bf84d8e9006c77b8f60"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjAyMDY3OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/AbortProcessActionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxOToyNFrOHzzNrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoxOToyNFrOHzzNrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA3ODUxMQ==", "bodyText": "formatting", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/991#discussion_r524078511", "createdAt": "2020-11-16T10:19:24Z", "author": {"login": "radoslav-d"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/AbortProcessActionTest.java", "diffHunk": "@@ -33,24 +58,60 @@ void testAbortExecution() {\n         Mockito.verify(historicOperationEventService)\n                .add(ImmutableHistoricOperationEvent.of(PROCESS_GUID, HistoricOperationEvent.EventType.ABORT_EXECUTED));\n     }\n+    \n+    @Test\n+    void testAbortActionAndPublishingDynatraceEvent() {\n+        ProcessType processType = ProcessType.DEPLOY;\n+        Mockito.when(progressMessageQuery.list()).thenReturn(List.of(progressMessage));\n+        Mockito.when(operation.getMtaId()).thenReturn(MTA_ID);\n+        Mockito.when(operation.getSpaceId()).thenReturn(SPACE_ID);\n+        Mockito.when(operation.getProcessType()).thenReturn(processType);\n+        processAction.execute(null, PROCESS_GUID);\n+        ArgumentCaptor<DynatraceProcessEvent> argumentCaptor = ArgumentCaptor.forClass(DynatraceProcessEvent.class);\n+        Mockito.verify(dynatraceEventPublisher).publish(argumentCaptor.capture(), Mockito.any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19b1ce2155178481e61f0bf84d8e9006c77b8f60"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjAzNTk0OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/listeners/EndProcessListenerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoyMTozMFrOHzzXKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoyMTozMFrOHzzXKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA4MDkzNg==", "bodyText": "format", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/991#discussion_r524080936", "createdAt": "2020-11-16T10:21:30Z", "author": {"login": "radoslav-d"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/listeners/EndProcessListenerTest.java", "diffHunk": "@@ -1,27 +1,51 @@\n package org.cloudfoundry.multiapps.controller.process.listeners;\n \n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n import org.cloudfoundry.multiapps.controller.api.model.Operation;\n+import org.cloudfoundry.multiapps.controller.api.model.ProcessType;\n+import org.cloudfoundry.multiapps.controller.process.event.DynatraceEventPublisher;\n+import org.cloudfoundry.multiapps.controller.process.event.DynatraceProcessEvent;\n import org.cloudfoundry.multiapps.controller.process.util.MockDelegateExecution;\n import org.cloudfoundry.multiapps.controller.process.util.OperationInFinalStateHandler;\n+import org.cloudfoundry.multiapps.controller.process.util.ProcessTypeParser;\n import org.cloudfoundry.multiapps.controller.process.variables.VariableHandling;\n import org.cloudfoundry.multiapps.controller.process.variables.Variables;\n import org.flowable.engine.delegate.DelegateExecution;\n import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n import org.mockito.Mockito;\n \n class EndProcessListenerTest {\n \n     private final OperationInFinalStateHandler eventHandler = Mockito.mock(OperationInFinalStateHandler.class);\n+    private final DynatraceEventPublisher dynatraceEventPublisher = Mockito.mock(DynatraceEventPublisher.class);\n+    private final ProcessTypeParser processTypeParser = Mockito.mock(ProcessTypeParser.class);\n     private final DelegateExecution execution = MockDelegateExecution.createSpyInstance();\n+    \n+    private final static String SPACE_ID = \"9ba1dfc7-9c2c-40d5-8bf9-fd04fa7a1722\";\n+    private final static String MTA_ID = \"my-mta\";\n+    private final static ProcessType PROCESS_TYPE = ProcessType.DEPLOY;\n \n     @Test\n     void testNotifyInternal() {\n-        EndProcessListener endProcessListener = new EndProcessListener(eventHandler);\n+        EndProcessListener endProcessListener = new EndProcessListener(eventHandler, dynatraceEventPublisher, processTypeParser);\n         // set the process as root process\n         VariableHandling.set(execution, Variables.CORRELATION_ID, execution.getProcessInstanceId());\n+        VariableHandling.set(execution, Variables.SPACE_GUID, SPACE_ID);\n+        VariableHandling.set(execution, Variables.MTA_ID, MTA_ID);\n+        Mockito.when(processTypeParser.getProcessType(execution)).thenReturn(PROCESS_TYPE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19b1ce2155178481e61f0bf84d8e9006c77b8f60"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NjAzNzQ1OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/listeners/EndProcessListenerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoyMTo0NVrOHzzYGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMDoyMTo0NVrOHzzYGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDA4MTE3OQ==", "bodyText": "format", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/991#discussion_r524081179", "createdAt": "2020-11-16T10:21:45Z", "author": {"login": "radoslav-d"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/listeners/EndProcessListenerTest.java", "diffHunk": "@@ -1,27 +1,51 @@\n package org.cloudfoundry.multiapps.controller.process.listeners;\n \n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n import org.cloudfoundry.multiapps.controller.api.model.Operation;\n+import org.cloudfoundry.multiapps.controller.api.model.ProcessType;\n+import org.cloudfoundry.multiapps.controller.process.event.DynatraceEventPublisher;\n+import org.cloudfoundry.multiapps.controller.process.event.DynatraceProcessEvent;\n import org.cloudfoundry.multiapps.controller.process.util.MockDelegateExecution;\n import org.cloudfoundry.multiapps.controller.process.util.OperationInFinalStateHandler;\n+import org.cloudfoundry.multiapps.controller.process.util.ProcessTypeParser;\n import org.cloudfoundry.multiapps.controller.process.variables.VariableHandling;\n import org.cloudfoundry.multiapps.controller.process.variables.Variables;\n import org.flowable.engine.delegate.DelegateExecution;\n import org.junit.jupiter.api.Test;\n+import org.mockito.ArgumentCaptor;\n import org.mockito.Mockito;\n \n class EndProcessListenerTest {\n \n     private final OperationInFinalStateHandler eventHandler = Mockito.mock(OperationInFinalStateHandler.class);\n+    private final DynatraceEventPublisher dynatraceEventPublisher = Mockito.mock(DynatraceEventPublisher.class);\n+    private final ProcessTypeParser processTypeParser = Mockito.mock(ProcessTypeParser.class);\n     private final DelegateExecution execution = MockDelegateExecution.createSpyInstance();\n+    \n+    private final static String SPACE_ID = \"9ba1dfc7-9c2c-40d5-8bf9-fd04fa7a1722\";\n+    private final static String MTA_ID = \"my-mta\";\n+    private final static ProcessType PROCESS_TYPE = ProcessType.DEPLOY;\n \n     @Test\n     void testNotifyInternal() {\n-        EndProcessListener endProcessListener = new EndProcessListener(eventHandler);\n+        EndProcessListener endProcessListener = new EndProcessListener(eventHandler, dynatraceEventPublisher, processTypeParser);\n         // set the process as root process\n         VariableHandling.set(execution, Variables.CORRELATION_ID, execution.getProcessInstanceId());\n+        VariableHandling.set(execution, Variables.SPACE_GUID, SPACE_ID);\n+        VariableHandling.set(execution, Variables.MTA_ID, MTA_ID);\n+        Mockito.when(processTypeParser.getProcessType(execution)).thenReturn(PROCESS_TYPE);\n         endProcessListener.notifyInternal(execution);\n         Mockito.verify(eventHandler)\n                .handle(execution, Operation.State.FINISHED);\n+        ArgumentCaptor<DynatraceProcessEvent> argumentCaptor = ArgumentCaptor.forClass(DynatraceProcessEvent.class);\n+        Mockito.verify(dynatraceEventPublisher).publish(argumentCaptor.capture(), Mockito.any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19b1ce2155178481e61f0bf84d8e9006c77b8f60"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzM2NjI4OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/dynatrace/DynatraceProcessEvent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDoxODoxMVrOH0Astw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDoxODoxMVrOH0Astw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI5OTQ0Nw==", "bodyText": "nice!", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/991#discussion_r524299447", "createdAt": "2020-11-16T14:18:11Z", "author": {"login": "radoslav-d"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/dynatrace/DynatraceProcessEvent.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package org.cloudfoundry.multiapps.controller.process.dynatrace;\r\n+\r\n+import org.cloudfoundry.multiapps.controller.process.dynatrace.ImmutableDynatraceProcessEvent;\r\n+import org.immutables.value.Value;\r\n+\r\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\r\n+import com.fasterxml.jackson.databind.annotation.JsonSerialize;\r\n+\r\n+@Value.Immutable\r\n+@JsonSerialize(as = ImmutableDynatraceProcessEvent.class)\r\n+@JsonDeserialize(as = ImmutableDynatraceProcessEvent.class)\r\n+public abstract class DynatraceProcessEvent implements DyntraceProcessEntity {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bfaee98a56aa0fc05f670f40f7f62cc04accac4"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NzM3NjQ4OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/dynatrace/DynatraceProcessDurationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDoyMDowOVrOH0AzHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNDoyMDowOVrOH0AzHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDMwMTA4NA==", "bodyText": "great that this worked", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/991#discussion_r524301084", "createdAt": "2020-11-16T14:20:09Z", "author": {"login": "radoslav-d"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/dynatrace/DynatraceProcessDurationTest.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.cloudfoundry.multiapps.controller.process.dynatrace;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+public class DynatraceProcessDurationTest {\n+\n+    private static final String DYNATRACE_PROCESS_EVENT_CLASS_NAME = \"org.cloudfoundry.multiapps.controller.process.dynatrace.DynatraceProcessDuration\";\n+    private static final String GET_PROCESS_ID_METHOD_NAME = \"getProcessId\";\n+    private static final String GET_PROCESS_TYPE_METHOD_NAME = \"getProcessType\";\n+    private static final String GET_SPACE_ID_METHOD_NAME = \"getSpaceId\";\n+    private static final String GET_MTA_ID_METHOD_NAME = \"getMtaId\";\n+    private static final String GET_PRPCESS_DURATION_METHOD_NAME = \"getProcessDuration\";\n+    private static final String GET_OPERATION_STATE_METHOD_NAME = \"getOperationState\";\n+    private static final String MISSING_REQUIRED_DYNATRACE_ENTRY_POINT = \"MISSING REQUIRED DYNATRACE ENTRY POINT. IF IT IS CHANGED BY INTENTION, MAKE SURE THAT DYNATRACE CONFIGURATION IS UPDATED IN TIME\";\n+\n+    @Test\n+    void testDynatraceProcessEventClassExists() {\n+        try {\n+            Class.forName(DYNATRACE_PROCESS_EVENT_CLASS_NAME);\n+        } catch (ClassNotFoundException e) {\n+            Assertions.fail(MISSING_REQUIRED_DYNATRACE_ENTRY_POINT, e);\n+        }\n+    }\n+\n+    @Test\n+    void testDynatraceProcessDurationHasAllRequiredMethods() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bfaee98a56aa0fc05f670f40f7f62cc04accac4"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 462, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}