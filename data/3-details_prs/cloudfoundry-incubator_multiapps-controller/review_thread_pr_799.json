{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NjE1MTAy", "number": 799, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDo0NToyN1rODmoLEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTowNToxMlrODpJoKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODMwNjczOnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DeleteServicesStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDo0NToyN1rOF0Jrrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDo0NToyN1rOF0Jrrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIyODkxMA==", "bodyText": "This is not really properly parallel. It will have a maximum of 2 threads operating in parallel. You should use ForkJoinPoolUtil to ensure proper parallelism.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r390228910", "createdAt": "2020-03-10T10:45:27Z", "author": {"login": "VaskoBozhurski"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DeleteServicesStep.java", "diffHunk": "@@ -99,129 +86,36 @@ protected String getStepErrorMessageAdditionalDescription(DelegateExecution cont\n         return ExceptionMessageTailMapper.map(configuration, CloudComponents.SERVICE_BROKERS, offering);\r\n     }\r\n \r\n-    private List<CloudServiceExtended> getServicesData(List<String> serviceNames, ExecutionWrapper execution) {\r\n+    private List<CloudServiceInstance> getServiceInstancesData(List<String> servicesToDelete, ExecutionWrapper execution) {\r\n         CloudControllerClient client = execution.getControllerClient();\r\n \r\n-        return serviceNames.parallelStream()\r\n-                           .map(name -> client.getService(name, false))\r\n-                           .filter(Objects::nonNull)\r\n-                           .map(this::buildCloudServiceExtended)\r\n-                           .collect(Collectors.toList());\r\n-    }\r\n-\r\n-    private ImmutableCloudServiceExtended buildCloudServiceExtended(CloudService service) {\r\n-        return ImmutableCloudServiceExtended.builder()\r\n-                                            .metadata(service.getMetadata())\r\n-                                            .name(service.getName())\r\n-                                            .build();\r\n+        return servicesToDelete.parallelStream()\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d3c903e95b9b5f2a66c28e2c258534a302ef26"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODMyNjAxOnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDo1MToxOVrOF0J32Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDo1MToxOVrOF0J32Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzMjAyNQ==", "bodyText": "Perhaps it would be better to first just release a new version of the cloudfoundry client so that we don't forget about this snapshot. :)", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r390232025", "createdAt": "2020-03-10T10:51:19Z", "author": {"login": "VaskoBozhurski"}, "path": "pom.xml", "diffHunk": "@@ -55,7 +55,7 @@\n         <netty-codec-http.version>4.1.45.Final</netty-codec-http.version>\n         <liquibase.version>3.4.1</liquibase.version>\n         <liquibase-slf4j.version>1.2.1</liquibase-slf4j.version>\n-        <cloudfoundry.client.version>1.21.1</cloudfoundry.client.version>\n+        <cloudfoundry.client.version>1.22.0-SNAPSHOT</cloudfoundry.client.version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d3c903e95b9b5f2a66c28e2c258534a302ef26"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODM5MDQ1OnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/ServiceRemovalCalculator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMToxMTozMVrOF0KgCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMToxMTozMVrOF0KgCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0MjMxMw==", "bodyText": "can you doublecheck if this is correct? The service action should be for 1 service, but the signature of the method is a list of services.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r390242313", "createdAt": "2020-03-10T11:11:31Z", "author": {"login": "VaskoBozhurski"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/ServiceRemovalCalculator.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package com.sap.cloud.lm.sl.cf.process.util;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.clients.ServiceGetter;\n+import com.sap.cloud.lm.sl.cf.core.model.ServiceInstanceWithServiceKeys;\n+import com.sap.cloud.lm.sl.cf.process.Messages;\n+import com.sap.cloud.lm.sl.cf.process.analytics.model.ServiceAction;\n+import com.sap.cloud.lm.sl.cf.process.steps.ExecutionWrapper;\n+import com.sap.cloud.lm.sl.cf.process.steps.StepsUtil;\n+\n+@Named\n+public class ServiceRemovalCalculator {\n+\n+    private ServiceGetter serviceGetter;\n+\n+    @Inject\n+    public ServiceRemovalCalculator(ServiceGetter serviceGetter) {\n+        this.serviceGetter = serviceGetter;\n+    }\n+\n+    public List<ServiceInstanceWithServiceKeys> calculateServicesToDelete(ExecutionWrapper execution,\n+                                                                          List<CloudServiceInstance> serviceInstances) {\n+        List<ServiceInstanceWithServiceKeys> serviceInstancesWithServiceKeys = getServiceInstancesWithServiceKeys(execution.getControllerClient(),\n+                                                                                                                  serviceInstances);\n+        if (StepsUtil.getServiceActionsToExecute(execution.getContext())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d3c903e95b9b5f2a66c28e2c258534a302ef26"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODQxOTc5OnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/ServiceRemoval.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMToyMjowNFrOF0Kycw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMToyMjowNFrOF0Kycw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI0NzAyNw==", "bodyText": "maybe extract into a method and turn the for() into a stream?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r390247027", "createdAt": "2020-03-10T11:22:04Z", "author": {"login": "VaskoBozhurski"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/ServiceRemoval.java", "diffHunk": "@@ -0,0 +1,155 @@\n+package com.sap.cloud.lm.sl.cf.process.util;\n+\n+import java.text.MessageFormat;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.CloudControllerException;\n+import org.cloudfoundry.client.lib.CloudException;\n+import org.cloudfoundry.client.lib.CloudOperationException;\n+import org.cloudfoundry.client.lib.CloudServiceBrokerException;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.cloudfoundry.client.lib.domain.CloudServiceBinding;\n+import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\n+import org.cloudfoundry.client.lib.domain.CloudServiceKey;\n+import org.springframework.http.HttpStatus;\n+\n+import com.sap.cloud.lm.sl.cf.core.model.ServiceInstanceWithServiceKeys;\n+import com.sap.cloud.lm.sl.cf.core.model.ServiceOperation;\n+import com.sap.cloud.lm.sl.cf.core.security.serialization.SecureSerializationFacade;\n+import com.sap.cloud.lm.sl.cf.core.util.ApplicationConfiguration;\n+import com.sap.cloud.lm.sl.cf.process.Constants;\n+import com.sap.cloud.lm.sl.cf.process.Messages;\n+import com.sap.cloud.lm.sl.cf.process.steps.ExecutionWrapper;\n+import com.sap.cloud.lm.sl.cf.process.steps.StepsUtil;\n+import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper.CloudComponents;\n+import com.sap.cloud.lm.sl.common.SLException;\n+\n+@Named\n+public class ServiceRemoval {\n+\n+    private final SecureSerializationFacade secureSerializer = new SecureSerializationFacade();\n+\n+    private ApplicationConfiguration configuration;\n+    private ServiceRemovalCalculator serviceRemovalCalculator;\n+\n+    @Inject\n+    public ServiceRemoval(ApplicationConfiguration configuration, ServiceRemovalCalculator serviceRemovalCalculator) {\n+        this.configuration = configuration;\n+        this.serviceRemovalCalculator = serviceRemovalCalculator;\n+    }\n+\n+    public Map<String, ServiceOperation.Type> deleteServices(ExecutionWrapper execution, List<CloudServiceInstance> serviceInstancesData) {\n+        Map<String, ServiceOperation.Type> triggeredServiceOperations = new HashMap<>();\n+        CloudControllerClient client = execution.getControllerClient();\n+\n+        List<ServiceInstanceWithServiceKeys> servicesToDelete = determineServiceIntancesToDelete(execution, serviceInstancesData);\n+        for (ServiceInstanceWithServiceKeys service : servicesToDelete) {\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9d3c903e95b9b5f2a66c28e2c258534a302ef26"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzYwNzQ0OnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/clients/ServiceGetter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTozMjoyMVrOF1js7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTozMjoyMVrOF1js7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwMzc5MA==", "bodyText": "If buildServiceInstanceWithServiceKeys(service, client) isn't called elsewhere you can just move the code to getServiceInstancesWithServiceKeys.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r391703790", "createdAt": "2020-03-12T15:32:21Z", "author": {"login": "VaskoBozhurski"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/clients/ServiceGetter.java", "diffHunk": "@@ -37,24 +36,19 @@ public ServiceGetter(@Qualifier(\"serviceInstanceGetter\") AbstractServiceGetter s\n         return serviceInstance;\n     }\n \n-    public List<ServiceInstanceWithServiceKeys> getServiceInstancesWithServiceKeys(CloudControllerClient client,\n-                                                                                   List<CloudServiceInstance> services) {\n-        return services.stream()\n-                       .map(service -> buildServiceInstanceWithServiceKeys(service, client))\n-                       .collect(Collectors.toList());\n+    public ServiceInstanceWithServiceKeys getServiceInstancesWithServiceKeys(CloudControllerClient client, CloudServiceInstance service) {\n+        return buildServiceInstanceWithServiceKeys(service, client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69a9f8d95c2a55cb1ef3d04a998d7bc513fcfed3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzYyODI5OnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/StepsUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTozNzo0M1rOF1j7Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjowNTozN1rOF2BQ_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwNzM5OQ==", "bodyText": "this was a json binary before, are you sure the list will be properly serialized now with just setVariable in all cases?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r391707399", "createdAt": "2020-03-12T15:37:43Z", "author": {"login": "VaskoBozhurski"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/StepsUtil.java", "diffHunk": "@@ -345,13 +345,19 @@ static void setAppsToUndeploy(VariableScope scope, List<CloudApplication> apps)\n     }\r\n \r\n     public static List<String> getServicesToDelete(VariableScope scope) {\r\n-        TypeReference<List<String>> type = new TypeReference<List<String>>() {\r\n-        };\r\n-        return getFromJsonBinary(scope, Constants.VAR_SERVICES_TO_DELETE, type);\r\n+        return getObject(scope, Constants.VAR_SERVICES_TO_DELETE, Collections.emptyList());\r\n     }\r\n \r\n     public static void setServicesToDelete(VariableScope scope, List<String> services) {\r\n-        setAsJsonBinary(scope, Constants.VAR_SERVICES_TO_DELETE, services);\r\n+        scope.setVariable(Constants.VAR_SERVICES_TO_DELETE, services);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69a9f8d95c2a55cb1ef3d04a998d7bc513fcfed3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc0MDI5Ng==", "bodyText": "This change was necessary because Flowable engine throw exception that result from getServicesToDelete() method is not a Collection.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r391740296", "createdAt": "2020-03-12T16:27:17Z", "author": {"login": "theghost5800"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/StepsUtil.java", "diffHunk": "@@ -345,13 +345,19 @@ static void setAppsToUndeploy(VariableScope scope, List<CloudApplication> apps)\n     }\r\n \r\n     public static List<String> getServicesToDelete(VariableScope scope) {\r\n-        TypeReference<List<String>> type = new TypeReference<List<String>>() {\r\n-        };\r\n-        return getFromJsonBinary(scope, Constants.VAR_SERVICES_TO_DELETE, type);\r\n+        return getObject(scope, Constants.VAR_SERVICES_TO_DELETE, Collections.emptyList());\r\n     }\r\n \r\n     public static void setServicesToDelete(VariableScope scope, List<String> services) {\r\n-        setAsJsonBinary(scope, Constants.VAR_SERVICES_TO_DELETE, services);\r\n+        scope.setVariable(Constants.VAR_SERVICES_TO_DELETE, services);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwNzM5OQ=="}, "originalCommit": {"oid": "69a9f8d95c2a55cb1ef3d04a998d7bc513fcfed3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE4ODE1OQ==", "bodyText": "From the conversation, my understanding is that you'd want to use this variable in flowable bpmn diagram in order to parallelize the deletion of services, and you could not do that because you need the variable not to be in 'bytearray' format in the database. This is okay. However - is this backwards compatible? What would happen if I retry my deployment, that has this variable stored as 'bytearray' after the release of the diagram change happens - will the deployment fail?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r392188159", "createdAt": "2020-03-13T12:05:37Z", "author": {"login": "valentinEmpy"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/StepsUtil.java", "diffHunk": "@@ -345,13 +345,19 @@ static void setAppsToUndeploy(VariableScope scope, List<CloudApplication> apps)\n     }\r\n \r\n     public static List<String> getServicesToDelete(VariableScope scope) {\r\n-        TypeReference<List<String>> type = new TypeReference<List<String>>() {\r\n-        };\r\n-        return getFromJsonBinary(scope, Constants.VAR_SERVICES_TO_DELETE, type);\r\n+        return getObject(scope, Constants.VAR_SERVICES_TO_DELETE, Collections.emptyList());\r\n     }\r\n \r\n     public static void setServicesToDelete(VariableScope scope, List<String> services) {\r\n-        setAsJsonBinary(scope, Constants.VAR_SERVICES_TO_DELETE, services);\r\n+        scope.setVariable(Constants.VAR_SERVICES_TO_DELETE, services);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcwNzM5OQ=="}, "originalCommit": {"oid": "69a9f8d95c2a55cb1ef3d04a998d7bc513fcfed3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDY4OTAwOnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/clients/ServiceGetter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjowMzoyNlrOF2BNzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjowMzoyNlrOF2BNzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE4NzM0MA==", "bodyText": "getServiceInstance(S), plural? Furthermore, read below about the ServiceInstanceWithServiceKeys class", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r392187340", "createdAt": "2020-03-13T12:03:26Z", "author": {"login": "valentinEmpy"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/clients/ServiceGetter.java", "diffHunk": "@@ -22,19 +28,26 @@ public ServiceGetter(@Qualifier(\"serviceInstanceGetter\") AbstractServiceGetter s\n         this.userProvidedServiceInstanceGetter = userProvidedServiceInstanceGetter;\n     }\n \n-    public Map<String, Object> getServiceInstance(CloudControllerClient client, String serviceName, String spaceId) {\n-        Map<String, Object> serviceInstance = serviceInstanceGetter.getServiceInstance(client, serviceName, spaceId);\n-        if (serviceInstance == null || serviceInstance.isEmpty()) {\n-            serviceInstance = userProvidedServiceInstanceGetter.getServiceInstance(client, serviceName, spaceId);\n-        }\n-        return serviceInstance;\n-    }\n-\n     public Map<String, Object> getServiceInstanceEntity(CloudControllerClient client, String serviceName, String spaceId) {\n         Map<String, Object> serviceInstance = serviceInstanceGetter.getServiceInstanceEntity(client, serviceName, spaceId);\n         if (serviceInstance == null || serviceInstance.isEmpty()) {\n             serviceInstance = userProvidedServiceInstanceGetter.getServiceInstanceEntity(client, serviceName, spaceId);\n         }\n         return serviceInstance;\n     }\n+\n+    public ServiceInstanceWithServiceKeys getServiceInstancesWithServiceKeys(CloudControllerClient client, CloudServiceInstance service) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edb3e8d6a67c7ae8f7a43f9625c34af2d93872a7"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDY4OTEzOnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/ServiceInstanceWithServiceKeys.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjowMzozMVrOF2BN5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjowMzozMVrOF2BN5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE4NzM2NA==", "bodyText": "What is the benefit of having this class? As far as I can see, it is used only in delete services step, do you think it'd be simpler to just acquire the service and the service keys as separate entities and process them accordingly. What does this 'wrapping' help with? Wouldn't the code be more understandable and explicit in DeleteServicesStep if that was applied? What do you think", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r392187364", "createdAt": "2020-03-13T12:03:31Z", "author": {"login": "valentinEmpy"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/ServiceInstanceWithServiceKeys.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.sap.cloud.lm.sl.cf.core.model;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\n+import org.cloudfoundry.client.lib.domain.CloudServiceKey;\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+public interface ServiceInstanceWithServiceKeys {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edb3e8d6a67c7ae8f7a43f9625c34af2d93872a7"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDY4OTM2OnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/ServiceInstanceWithServiceKeys.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjowMzozN1rOF2BOBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjowMzozN1rOF2BOBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE4NzM5OQ==", "bodyText": "Take a look at Immutables documentation. Quote:\n\"There's no need to use @Value.Default to return empty collections as collection attributes are empty by default if not initialized.\"", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r392187399", "createdAt": "2020-03-13T12:03:37Z", "author": {"login": "valentinEmpy"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/ServiceInstanceWithServiceKeys.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package com.sap.cloud.lm.sl.cf.core.model;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\n+import org.cloudfoundry.client.lib.domain.CloudServiceKey;\n+import org.immutables.value.Value;\n+\n+@Value.Immutable\n+public interface ServiceInstanceWithServiceKeys {\n+\n+    CloudServiceInstance getServiceInstance();\n+\n+    @Value.Default\n+    default List<CloudServiceKey> getServiceKeys() {\n+        return Collections.emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edb3e8d6a67c7ae8f7a43f9625c34af2d93872a7"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDY5MDM0OnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/Messages.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjowMzo1N1rOF2BOtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOToyMzoyMFrOF3T36g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE4NzU3Mw==", "bodyText": "What is the double ' for? I assume it is a type?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r392187573", "createdAt": "2020-03-13T12:03:57Z", "author": {"login": "valentinEmpy"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/Messages.java", "diffHunk": "@@ -180,6 +172,7 @@\n     public static final String MISSING_SERVICE_OPERATION_STATE = \"Stopping service operation polling of \\\"{0}\\\" due to missing operation state...\";\r\n     public static final String CANNOT_GET_CONTEXT_FOR_EVENT_0_AND_PROCESS_1 = \"Could not get context for Flowable engine event (type: {0}, process ID: {1}).\";\r\n     public static final String SERVICE_0_IS_IN_STATE_1_AND_MAY_NOT_BE_OPERATIONAL = \"Service \\\"{0}\\\" is in state \\\"{1}\\\" and may not be operational. Actions like update of credentials and binding may fail! Consider recreating it by specifying the --delete-services option.\";\r\n+    public static final String SERVICE_NOT_BE_DELETED_DUE_TO_SERVICE_BINDINGS_AND_SERVICE_KEYS = \"Service \\\"{0}\\\" won''t be deleted due to existing service bindings and/or service keys\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edb3e8d6a67c7ae8f7a43f9625c34af2d93872a7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzU0MTYxMA==", "bodyText": "It was required before to escape single quote because if you don't escape it, MessageFormatter stop to resolve placeholders after single quote, now there is not others placeholders, so I will delete it.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r393541610", "createdAt": "2020-03-17T09:23:20Z", "author": {"login": "theghost5800"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/Messages.java", "diffHunk": "@@ -180,6 +172,7 @@\n     public static final String MISSING_SERVICE_OPERATION_STATE = \"Stopping service operation polling of \\\"{0}\\\" due to missing operation state...\";\r\n     public static final String CANNOT_GET_CONTEXT_FOR_EVENT_0_AND_PROCESS_1 = \"Could not get context for Flowable engine event (type: {0}, process ID: {1}).\";\r\n     public static final String SERVICE_0_IS_IN_STATE_1_AND_MAY_NOT_BE_OPERATIONAL = \"Service \\\"{0}\\\" is in state \\\"{1}\\\" and may not be operational. Actions like update of credentials and binding may fail! Consider recreating it by specifying the --delete-services option.\";\r\n+    public static final String SERVICE_NOT_BE_DELETED_DUE_TO_SERVICE_BINDINGS_AND_SERVICE_KEYS = \"Service \\\"{0}\\\" won''t be deleted due to existing service bindings and/or service keys\";\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE4NzU3Mw=="}, "originalCommit": {"oid": "edb3e8d6a67c7ae8f7a43f9625c34af2d93872a7"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDY5MDg1OnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DeleteServicesStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjowNDoxMlrOF2BPBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjowNDoxMlrOF2BPBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE4NzY1Mg==", "bodyText": "Why does this method have the suffix 'Data'? Also, the variables assigned in the above methods also include the 'Data' suffix. Do we really need this method anyway, why not just call the client directly where this method is used?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r392187652", "createdAt": "2020-03-13T12:04:12Z", "author": {"login": "valentinEmpy"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DeleteServicesStep.java", "diffHunk": "@@ -99,129 +87,33 @@ protected String getStepErrorMessageAdditionalDescription(DelegateExecution cont\n         return ExceptionMessageTailMapper.map(configuration, CloudComponents.SERVICE_BROKERS, offering);\r\n     }\r\n \r\n-    private List<CloudServiceExtended> getServicesData(List<String> serviceNames, ExecutionWrapper execution) {\r\n-        CloudControllerClient client = execution.getControllerClient();\r\n+    private CloudServiceInstance getServiceInstanceData(String serviceToDelete, CloudControllerClient client) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edb3e8d6a67c7ae8f7a43f9625c34af2d93872a7"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDY5NDI1OnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/ServiceRemoval.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjowNTo0NFrOF2BRMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjowNTo0NFrOF2BRMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE4ODIwOQ==", "bodyText": "Can we rename this class? Reading it leaves me with the impression that it represents some 'operation' - the removal of the service. Perhaps - remover?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r392188209", "createdAt": "2020-03-13T12:05:44Z", "author": {"login": "valentinEmpy"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/ServiceRemoval.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.sap.cloud.lm.sl.cf.process.util;\n+\n+import java.text.MessageFormat;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.CloudControllerException;\n+import org.cloudfoundry.client.lib.CloudException;\n+import org.cloudfoundry.client.lib.CloudOperationException;\n+import org.cloudfoundry.client.lib.CloudServiceBrokerException;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.cloudfoundry.client.lib.domain.CloudServiceBinding;\n+import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\n+import org.cloudfoundry.client.lib.domain.CloudServiceKey;\n+import org.springframework.http.HttpStatus;\n+\n+import com.sap.cloud.lm.sl.cf.core.model.ServiceInstanceWithServiceKeys;\n+import com.sap.cloud.lm.sl.cf.core.security.serialization.SecureSerializationFacade;\n+import com.sap.cloud.lm.sl.cf.core.util.ApplicationConfiguration;\n+import com.sap.cloud.lm.sl.cf.process.Constants;\n+import com.sap.cloud.lm.sl.cf.process.Messages;\n+import com.sap.cloud.lm.sl.cf.process.steps.ExecutionWrapper;\n+import com.sap.cloud.lm.sl.cf.process.steps.StepsUtil;\n+import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper.CloudComponents;\n+import com.sap.cloud.lm.sl.common.SLException;\n+\n+@Named\n+public class ServiceRemoval {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edb3e8d6a67c7ae8f7a43f9625c34af2d93872a7"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDY5NDQyOnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/ServiceRemoval.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjowNTo0OVrOF2BRSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjowNTo0OVrOF2BRSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE4ODIzNQ==", "bodyText": "Why are those checks needed? You check for empty associations before you call deleteService. If there are no empty associations - would this ever be reached at all?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r392188235", "createdAt": "2020-03-13T12:05:49Z", "author": {"login": "valentinEmpy"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/ServiceRemoval.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.sap.cloud.lm.sl.cf.process.util;\n+\n+import java.text.MessageFormat;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.CloudControllerException;\n+import org.cloudfoundry.client.lib.CloudException;\n+import org.cloudfoundry.client.lib.CloudOperationException;\n+import org.cloudfoundry.client.lib.CloudServiceBrokerException;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.cloudfoundry.client.lib.domain.CloudServiceBinding;\n+import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\n+import org.cloudfoundry.client.lib.domain.CloudServiceKey;\n+import org.springframework.http.HttpStatus;\n+\n+import com.sap.cloud.lm.sl.cf.core.model.ServiceInstanceWithServiceKeys;\n+import com.sap.cloud.lm.sl.cf.core.security.serialization.SecureSerializationFacade;\n+import com.sap.cloud.lm.sl.cf.core.util.ApplicationConfiguration;\n+import com.sap.cloud.lm.sl.cf.process.Constants;\n+import com.sap.cloud.lm.sl.cf.process.Messages;\n+import com.sap.cloud.lm.sl.cf.process.steps.ExecutionWrapper;\n+import com.sap.cloud.lm.sl.cf.process.steps.StepsUtil;\n+import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper.CloudComponents;\n+import com.sap.cloud.lm.sl.common.SLException;\n+\n+@Named\n+public class ServiceRemoval {\n+\n+    private final SecureSerializationFacade secureSerializer = new SecureSerializationFacade();\n+\n+    private ApplicationConfiguration configuration;\n+\n+    @Inject\n+    public ServiceRemoval(ApplicationConfiguration configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+    public void deleteService(ExecutionWrapper execution, ServiceInstanceWithServiceKeys service) {\n+        CloudControllerClient client = execution.getControllerClient();\n+\n+        try {\n+            prepareServicesToDelete(client, execution.getStepLogger(), service);\n+            deleteService(client, execution.getStepLogger(), service);\n+        } catch (CloudException e) {\n+            processException(execution, e, client.getServiceInstance(service.getServiceInstance()\n+                                                                            .getName()));\n+        }\n+\n+    }\n+\n+    private void prepareServicesToDelete(CloudControllerClient client, StepLogger stepLogger, ServiceInstanceWithServiceKeys service) {\n+        unbindService(client, stepLogger, service.getServiceInstance());\n+        deleteServiceKeys(client, stepLogger, service.getServiceKeys());\n+\n+    }\n+\n+    private void unbindService(CloudControllerClient client, StepLogger stepLogger, CloudServiceInstance serviceInstance) {\n+        List<CloudServiceBinding> bindings = serviceInstance.getBindings();\n+        if (bindings.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edb3e8d6a67c7ae8f7a43f9625c34af2d93872a7"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDY5NDc2OnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/ServiceRemoval.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjowNTo1M1rOF2BReg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjowNTo1M1rOF2BReg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjE4ODI4Mg==", "bodyText": "The method name is not very descriptive. Reading it, does not point at what exception message exactly it builds, especially the 'New' keyword. I had to check in the implementation to understand that it builds an error message wen deleting a service.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r392188282", "createdAt": "2020-03-13T12:05:53Z", "author": {"login": "valentinEmpy"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/ServiceRemoval.java", "diffHunk": "@@ -0,0 +1,138 @@\n+package com.sap.cloud.lm.sl.cf.process.util;\n+\n+import java.text.MessageFormat;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.CloudControllerException;\n+import org.cloudfoundry.client.lib.CloudException;\n+import org.cloudfoundry.client.lib.CloudOperationException;\n+import org.cloudfoundry.client.lib.CloudServiceBrokerException;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.cloudfoundry.client.lib.domain.CloudServiceBinding;\n+import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\n+import org.cloudfoundry.client.lib.domain.CloudServiceKey;\n+import org.springframework.http.HttpStatus;\n+\n+import com.sap.cloud.lm.sl.cf.core.model.ServiceInstanceWithServiceKeys;\n+import com.sap.cloud.lm.sl.cf.core.security.serialization.SecureSerializationFacade;\n+import com.sap.cloud.lm.sl.cf.core.util.ApplicationConfiguration;\n+import com.sap.cloud.lm.sl.cf.process.Constants;\n+import com.sap.cloud.lm.sl.cf.process.Messages;\n+import com.sap.cloud.lm.sl.cf.process.steps.ExecutionWrapper;\n+import com.sap.cloud.lm.sl.cf.process.steps.StepsUtil;\n+import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper.CloudComponents;\n+import com.sap.cloud.lm.sl.common.SLException;\n+\n+@Named\n+public class ServiceRemoval {\n+\n+    private final SecureSerializationFacade secureSerializer = new SecureSerializationFacade();\n+\n+    private ApplicationConfiguration configuration;\n+\n+    @Inject\n+    public ServiceRemoval(ApplicationConfiguration configuration) {\n+        this.configuration = configuration;\n+    }\n+\n+    public void deleteService(ExecutionWrapper execution, ServiceInstanceWithServiceKeys service) {\n+        CloudControllerClient client = execution.getControllerClient();\n+\n+        try {\n+            prepareServicesToDelete(client, execution.getStepLogger(), service);\n+            deleteService(client, execution.getStepLogger(), service);\n+        } catch (CloudException e) {\n+            processException(execution, e, client.getServiceInstance(service.getServiceInstance()\n+                                                                            .getName()));\n+        }\n+\n+    }\n+\n+    private void prepareServicesToDelete(CloudControllerClient client, StepLogger stepLogger, ServiceInstanceWithServiceKeys service) {\n+        unbindService(client, stepLogger, service.getServiceInstance());\n+        deleteServiceKeys(client, stepLogger, service.getServiceKeys());\n+\n+    }\n+\n+    private void unbindService(CloudControllerClient client, StepLogger stepLogger, CloudServiceInstance serviceInstance) {\n+        List<CloudServiceBinding> bindings = serviceInstance.getBindings();\n+        if (bindings.isEmpty()) {\n+            return;\n+        }\n+        logBindings(stepLogger, bindings);\n+        List<CloudApplication> applications = client.getApplications();\n+        for (CloudServiceBinding binding : bindings) {\n+            CloudApplication application = StepsUtil.getBoundApplication(applications, binding.getApplicationGuid());\n+            if (application == null) {\n+                throw new IllegalStateException(MessageFormat.format(Messages.COULD_NOT_FIND_APPLICATION_WITH_GUID_0,\n+                                                                     binding.getApplicationGuid()));\n+            }\n+            stepLogger.info(Messages.UNBINDING_SERVICE_FROM_APP, serviceInstance, application.getName());\n+            client.unbindService(application, serviceInstance.getService());\n+        }\n+    }\n+\n+    private void logBindings(StepLogger stepLogger, List<CloudServiceBinding> bindings) {\n+        stepLogger.debug(Messages.SERVICE_BINDINGS_EXISTS, secureSerializer.toJson(bindings));\n+    }\n+\n+    private void deleteServiceKeys(CloudControllerClient client, StepLogger stepLogger, List<CloudServiceKey> serviceKeys) {\n+        for (CloudServiceKey serviceKey : serviceKeys) {\n+            stepLogger.info(Messages.DELETING_SERVICE_KEY_FOR_SERVICE, serviceKey.getName(), serviceKeys);\n+            client.deleteServiceKey(serviceKey);\n+        }\n+    }\n+\n+    private void deleteService(CloudControllerClient client, StepLogger stepLogger, ServiceInstanceWithServiceKeys service) {\n+        stepLogger.info(Messages.DELETING_SERVICE, service.getServiceInstance()\n+                                                          .getName());\n+        client.deleteService(service.getServiceInstance()\n+                                    .getService());\n+        stepLogger.debug(Messages.SERVICE_DELETED, service.getServiceInstance()\n+                                                          .getName());\n+    }\n+\n+    private void processException(ExecutionWrapper execution, Exception e, CloudServiceInstance serviceInstance) {\n+        if (e instanceof CloudOperationException) {\n+            e = evaluateCloudOperationException(execution, (CloudOperationException) e, serviceInstance.getName(),\n+                                                serviceInstance.getService()\n+                                                               .getLabel());\n+            if (e == null) {\n+                return;\n+            }\n+        }\n+        wrapAndThrowException(e, serviceInstance);\n+    }\n+\n+    private CloudOperationException evaluateCloudOperationException(ExecutionWrapper execution, CloudOperationException e,\n+                                                                    String serviceName, String label) {\n+        if (e.getStatusCode() == HttpStatus.NOT_FOUND) {\n+            execution.getStepLogger()\n+                     .warn(MessageFormat.format(Messages.COULD_NOT_DELETE_SERVICE, serviceName), e,\n+                           ExceptionMessageTailMapper.map(configuration, CloudComponents.SERVICE_BROKERS, label));\n+            return null;\n+        }\n+        if (e.getStatusCode() == HttpStatus.BAD_GATEWAY) {\n+            StepsUtil.setServiceOffering(execution.getContext(), Constants.VAR_SERVICE_OFFERING, label);\n+            return new CloudServiceBrokerException(e);\n+        }\n+        return new CloudControllerException(e);\n+\n+    }\n+\n+    private void wrapAndThrowException(Exception e, CloudServiceInstance serviceInstance) {\n+        String msg = buildNewExceptionMessage(e, serviceInstance.getService());\n+        throw new SLException(e, msg);\n+    }\n+\n+    private String buildNewExceptionMessage(Exception e, CloudService service) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edb3e8d6a67c7ae8f7a43f9625c34af2d93872a7"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDY4NDIzOnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/ServicesToDeleteProcessGetter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDo0OToxMlrOF4IgVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDo0OToxMlrOF4IgVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQwMzkyNw==", "bodyText": "*ProcessGetter suffix? Looking at the name, without taking a look at the implementation leaves me with the impression it returns some kind of a process (service deletion process), whereas it returns a process variable. Do you think there's a more descriptive/appropriate class name (The first part is reasonable, I am referring to the suffix here)?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r394403927", "createdAt": "2020-03-18T14:49:12Z", "author": {"login": "valentinEmpy"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/ServicesToDeleteProcessGetter.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.sap.cloud.lm.sl.cf.process.util;\n+\n+import java.util.List;\n+\n+import javax.inject.Named;\n+\n+import org.flowable.engine.delegate.DelegateExecution;\n+\n+import com.sap.cloud.lm.sl.cf.process.steps.StepsUtil;\n+\n+@Named(\"servicesToDeleteProcessGetter\")\n+public class ServicesToDeleteProcessGetter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d34c6dcf7b5f760b8ff7464d6ffd9fde50c51d3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDcwMzQ3OnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/StepsUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDo1MzoxMFrOF4Isvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDo1MzoxMFrOF4Isvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQwNzEwMw==", "bodyText": "This branch will always be taken? The 'getObject' method returns a list if it manages to find the variable and also returns a list if it does not (an empty one as you've specified), so in both cases it would result in this branch?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r394407103", "createdAt": "2020-03-18T14:53:10Z", "author": {"login": "valentinEmpy"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/StepsUtil.java", "diffHunk": "@@ -345,7 +345,13 @@ static void setAppsToUndeploy(VariableScope scope, List<CloudApplication> apps)\n     }\r\n \r\n     public static List<String> getServicesToDelete(VariableScope scope) {\r\n-        return getObject(scope, Constants.VAR_SERVICES_TO_DELETE, Collections.emptyList());\r\n+        Object servicesToDelete = getObject(scope, Constants.VAR_SERVICES_TO_DELETE, Collections.emptyList());\r\n+        if (servicesToDelete instanceof List) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d34c6dcf7b5f760b8ff7464d6ffd9fde50c51d3"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDczNjExOnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DeleteServiceStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDo1OTo1OVrOF4JB2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNDo1OTo1OVrOF4JB2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxMjUwNw==", "bodyText": "I feel like this method should only check for associations but it does more than 1 thing (what its name says it does) - it also checks for determined service actions (I miss finding any association with 'conflict' here). What do you think?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r394412507", "createdAt": "2020-03-18T14:59:59Z", "author": {"login": "valentinEmpy"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DeleteServiceStep.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.sap.cloud.lm.sl.cf.process.steps;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.List;\r\n+\r\n+import javax.inject.Inject;\r\n+import javax.inject.Named;\r\n+\r\n+import org.cloudfoundry.client.lib.CloudControllerClient;\r\n+import org.cloudfoundry.client.lib.domain.CloudServiceBinding;\r\n+import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\r\n+import org.cloudfoundry.client.lib.domain.CloudServiceKey;\r\n+import org.flowable.engine.delegate.DelegateExecution;\r\n+import org.springframework.beans.factory.config.BeanDefinition;\r\n+import org.springframework.context.annotation.Scope;\r\n+\r\n+import com.sap.cloud.lm.sl.cf.client.lib.domain.CloudServiceExtended;\r\n+import com.sap.cloud.lm.sl.cf.client.lib.domain.ImmutableCloudServiceExtended;\r\n+import com.sap.cloud.lm.sl.cf.core.model.ServiceOperation;\r\n+import com.sap.cloud.lm.sl.cf.process.Messages;\r\n+import com.sap.cloud.lm.sl.cf.process.analytics.model.ServiceAction;\r\n+import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper;\r\n+import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper.CloudComponents;\r\n+import com.sap.cloud.lm.sl.cf.process.util.ServiceOperationGetter;\r\n+import com.sap.cloud.lm.sl.cf.process.util.ServiceProgressReporter;\r\n+import com.sap.cloud.lm.sl.cf.process.util.ServiceRemover;\r\n+import com.sap.cloud.lm.sl.common.util.MapUtil;\r\n+\r\n+@Named(\"deleteServiceStep\")\r\n+@Scope(BeanDefinition.SCOPE_PROTOTYPE)\r\n+public class DeleteServiceStep extends AsyncFlowableStep {\r\n+\r\n+    private ServiceOperationGetter serviceOperationGetter;\r\n+    private ServiceProgressReporter serviceProgressReporter;\r\n+    private ServiceRemover serviceRemover;\r\n+\r\n+    @Inject\r\n+    public DeleteServiceStep(ServiceOperationGetter serviceOperationGetter, ServiceProgressReporter serviceProgressReporter,\r\n+                             ServiceRemover serviceRemover) {\r\n+        this.serviceOperationGetter = serviceOperationGetter;\r\n+        this.serviceProgressReporter = serviceProgressReporter;\r\n+        this.serviceRemover = serviceRemover;\r\n+    }\r\n+\r\n+    @Override\r\n+    protected StepPhase executeAsyncStep(ExecutionWrapper execution) {\r\n+        String serviceToDelete = StepsUtil.getServiceToDelete(execution.getContext());\r\n+        if (serviceToDelete == null) {\r\n+            getStepLogger().debug(Messages.MISSING_SERVICE_TO_DELETE);\r\n+            return StepPhase.DONE;\r\n+        }\r\n+\r\n+        getStepLogger().debug(Messages.DELETING_DISCONTINUED_SERVICE_0, serviceToDelete);\r\n+\r\n+        CloudControllerClient client = execution.getControllerClient();\r\n+\r\n+        CloudServiceInstance serviceInstance = client.getServiceInstance(serviceToDelete, false);\r\n+        if (serviceInstance == null) {\r\n+            getStepLogger().info(Messages.SERVICE_IS_ALREADY_DELETED, serviceToDelete);\r\n+            return StepPhase.DONE;\r\n+        }\r\n+        StepsUtil.setServicesData(execution.getContext(), buildCloudServiceExtendedList(serviceInstance));\r\n+\r\n+        List<CloudServiceKey> serviceKeys = client.getServiceKeys(serviceInstance.getService());\r\n+\r\n+        if (isDeletePossible(execution.getContext(), serviceInstance.getBindings(), serviceKeys)) {\r\n+            deleteService(execution, serviceInstance, serviceKeys);\r\n+            StepsUtil.setTriggeredServiceOperations(execution.getContext(), MapUtil.asMap(serviceToDelete, ServiceOperation.Type.DELETE));\r\n+            return StepPhase.POLL;\r\n+        }\r\n+\r\n+        getStepLogger().warn(Messages.SERVICE_NOT_BE_DELETED_DUE_TO_SERVICE_BINDINGS_AND_SERVICE_KEYS, serviceToDelete);\r\n+        return StepPhase.DONE;\r\n+\r\n+    }\r\n+\r\n+    @Override\r\n+    protected String getStepErrorMessage(DelegateExecution context) {\r\n+        return Messages.ERROR_DELETING_SERVICES;\r\n+    }\r\n+\r\n+    @Override\r\n+    protected String getStepErrorMessageAdditionalDescription(DelegateExecution context) {\r\n+        String offering = StepsUtil.getServiceOffering(context);\r\n+        return ExceptionMessageTailMapper.map(configuration, CloudComponents.SERVICE_BROKERS, offering);\r\n+    }\r\n+\r\n+    private List<CloudServiceExtended> buildCloudServiceExtendedList(CloudServiceInstance serviceInstanceData) {\r\n+        return Collections.singletonList(buildCloudServiceExtended(serviceInstanceData));\r\n+    }\r\n+\r\n+    private ImmutableCloudServiceExtended buildCloudServiceExtended(CloudServiceInstance service) {\r\n+        return ImmutableCloudServiceExtended.builder()\r\n+                                            .from(service.getService())\r\n+                                            .build();\r\n+    }\r\n+\r\n+    private boolean isDeletePossible(DelegateExecution context, List<CloudServiceBinding> serviceBindings,\r\n+                                     List<CloudServiceKey> serviceKeys) {\r\n+        return hasNoConflictWithServiceBindings(context, serviceBindings) && hasNoConflictWithServiceKeys(context, serviceKeys);\r\n+    }\r\n+\r\n+    private boolean hasNoConflictWithServiceBindings(DelegateExecution context, List<CloudServiceBinding> serviceBindings) {\r\n+        return serviceBindings.isEmpty() || StepsUtil.getServiceActionsToExecute(context)\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d34c6dcf7b5f760b8ff7464d6ffd9fde50c51d3"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDczODgwOnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DeleteServiceStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTowMDozNFrOF4JDkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTowMDozNFrOF4JDkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxMjk0Ng==", "bodyText": "Same as the above comment. What do you think?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r394412946", "createdAt": "2020-03-18T15:00:34Z", "author": {"login": "valentinEmpy"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DeleteServiceStep.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.sap.cloud.lm.sl.cf.process.steps;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.List;\r\n+\r\n+import javax.inject.Inject;\r\n+import javax.inject.Named;\r\n+\r\n+import org.cloudfoundry.client.lib.CloudControllerClient;\r\n+import org.cloudfoundry.client.lib.domain.CloudServiceBinding;\r\n+import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\r\n+import org.cloudfoundry.client.lib.domain.CloudServiceKey;\r\n+import org.flowable.engine.delegate.DelegateExecution;\r\n+import org.springframework.beans.factory.config.BeanDefinition;\r\n+import org.springframework.context.annotation.Scope;\r\n+\r\n+import com.sap.cloud.lm.sl.cf.client.lib.domain.CloudServiceExtended;\r\n+import com.sap.cloud.lm.sl.cf.client.lib.domain.ImmutableCloudServiceExtended;\r\n+import com.sap.cloud.lm.sl.cf.core.model.ServiceOperation;\r\n+import com.sap.cloud.lm.sl.cf.process.Messages;\r\n+import com.sap.cloud.lm.sl.cf.process.analytics.model.ServiceAction;\r\n+import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper;\r\n+import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper.CloudComponents;\r\n+import com.sap.cloud.lm.sl.cf.process.util.ServiceOperationGetter;\r\n+import com.sap.cloud.lm.sl.cf.process.util.ServiceProgressReporter;\r\n+import com.sap.cloud.lm.sl.cf.process.util.ServiceRemover;\r\n+import com.sap.cloud.lm.sl.common.util.MapUtil;\r\n+\r\n+@Named(\"deleteServiceStep\")\r\n+@Scope(BeanDefinition.SCOPE_PROTOTYPE)\r\n+public class DeleteServiceStep extends AsyncFlowableStep {\r\n+\r\n+    private ServiceOperationGetter serviceOperationGetter;\r\n+    private ServiceProgressReporter serviceProgressReporter;\r\n+    private ServiceRemover serviceRemover;\r\n+\r\n+    @Inject\r\n+    public DeleteServiceStep(ServiceOperationGetter serviceOperationGetter, ServiceProgressReporter serviceProgressReporter,\r\n+                             ServiceRemover serviceRemover) {\r\n+        this.serviceOperationGetter = serviceOperationGetter;\r\n+        this.serviceProgressReporter = serviceProgressReporter;\r\n+        this.serviceRemover = serviceRemover;\r\n+    }\r\n+\r\n+    @Override\r\n+    protected StepPhase executeAsyncStep(ExecutionWrapper execution) {\r\n+        String serviceToDelete = StepsUtil.getServiceToDelete(execution.getContext());\r\n+        if (serviceToDelete == null) {\r\n+            getStepLogger().debug(Messages.MISSING_SERVICE_TO_DELETE);\r\n+            return StepPhase.DONE;\r\n+        }\r\n+\r\n+        getStepLogger().debug(Messages.DELETING_DISCONTINUED_SERVICE_0, serviceToDelete);\r\n+\r\n+        CloudControllerClient client = execution.getControllerClient();\r\n+\r\n+        CloudServiceInstance serviceInstance = client.getServiceInstance(serviceToDelete, false);\r\n+        if (serviceInstance == null) {\r\n+            getStepLogger().info(Messages.SERVICE_IS_ALREADY_DELETED, serviceToDelete);\r\n+            return StepPhase.DONE;\r\n+        }\r\n+        StepsUtil.setServicesData(execution.getContext(), buildCloudServiceExtendedList(serviceInstance));\r\n+\r\n+        List<CloudServiceKey> serviceKeys = client.getServiceKeys(serviceInstance.getService());\r\n+\r\n+        if (isDeletePossible(execution.getContext(), serviceInstance.getBindings(), serviceKeys)) {\r\n+            deleteService(execution, serviceInstance, serviceKeys);\r\n+            StepsUtil.setTriggeredServiceOperations(execution.getContext(), MapUtil.asMap(serviceToDelete, ServiceOperation.Type.DELETE));\r\n+            return StepPhase.POLL;\r\n+        }\r\n+\r\n+        getStepLogger().warn(Messages.SERVICE_NOT_BE_DELETED_DUE_TO_SERVICE_BINDINGS_AND_SERVICE_KEYS, serviceToDelete);\r\n+        return StepPhase.DONE;\r\n+\r\n+    }\r\n+\r\n+    @Override\r\n+    protected String getStepErrorMessage(DelegateExecution context) {\r\n+        return Messages.ERROR_DELETING_SERVICES;\r\n+    }\r\n+\r\n+    @Override\r\n+    protected String getStepErrorMessageAdditionalDescription(DelegateExecution context) {\r\n+        String offering = StepsUtil.getServiceOffering(context);\r\n+        return ExceptionMessageTailMapper.map(configuration, CloudComponents.SERVICE_BROKERS, offering);\r\n+    }\r\n+\r\n+    private List<CloudServiceExtended> buildCloudServiceExtendedList(CloudServiceInstance serviceInstanceData) {\r\n+        return Collections.singletonList(buildCloudServiceExtended(serviceInstanceData));\r\n+    }\r\n+\r\n+    private ImmutableCloudServiceExtended buildCloudServiceExtended(CloudServiceInstance service) {\r\n+        return ImmutableCloudServiceExtended.builder()\r\n+                                            .from(service.getService())\r\n+                                            .build();\r\n+    }\r\n+\r\n+    private boolean isDeletePossible(DelegateExecution context, List<CloudServiceBinding> serviceBindings,\r\n+                                     List<CloudServiceKey> serviceKeys) {\r\n+        return hasNoConflictWithServiceBindings(context, serviceBindings) && hasNoConflictWithServiceKeys(context, serviceKeys);\r\n+    }\r\n+\r\n+    private boolean hasNoConflictWithServiceBindings(DelegateExecution context, List<CloudServiceBinding> serviceBindings) {\r\n+        return serviceBindings.isEmpty() || StepsUtil.getServiceActionsToExecute(context)\r\n+                                                     .contains(ServiceAction.RECREATE);\r\n+    }\r\n+\r\n+    private boolean hasNoConflictWithServiceKeys(DelegateExecution context, List<CloudServiceKey> serviceKeys) {\r\n+        return serviceKeys.isEmpty() || StepsUtil.shouldDeleteServiceKeys(context);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d34c6dcf7b5f760b8ff7464d6ffd9fde50c51d3"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDc0MTIwOnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DeleteServiceStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTowMTowOFrOF4JFKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTowMTowOFrOF4JFKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxMzM1NQ==", "bodyText": "Why not just get rid of this method? It is a one-liner anyway.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r394413355", "createdAt": "2020-03-18T15:01:08Z", "author": {"login": "valentinEmpy"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DeleteServiceStep.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.sap.cloud.lm.sl.cf.process.steps;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.List;\r\n+\r\n+import javax.inject.Inject;\r\n+import javax.inject.Named;\r\n+\r\n+import org.cloudfoundry.client.lib.CloudControllerClient;\r\n+import org.cloudfoundry.client.lib.domain.CloudServiceBinding;\r\n+import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\r\n+import org.cloudfoundry.client.lib.domain.CloudServiceKey;\r\n+import org.flowable.engine.delegate.DelegateExecution;\r\n+import org.springframework.beans.factory.config.BeanDefinition;\r\n+import org.springframework.context.annotation.Scope;\r\n+\r\n+import com.sap.cloud.lm.sl.cf.client.lib.domain.CloudServiceExtended;\r\n+import com.sap.cloud.lm.sl.cf.client.lib.domain.ImmutableCloudServiceExtended;\r\n+import com.sap.cloud.lm.sl.cf.core.model.ServiceOperation;\r\n+import com.sap.cloud.lm.sl.cf.process.Messages;\r\n+import com.sap.cloud.lm.sl.cf.process.analytics.model.ServiceAction;\r\n+import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper;\r\n+import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper.CloudComponents;\r\n+import com.sap.cloud.lm.sl.cf.process.util.ServiceOperationGetter;\r\n+import com.sap.cloud.lm.sl.cf.process.util.ServiceProgressReporter;\r\n+import com.sap.cloud.lm.sl.cf.process.util.ServiceRemover;\r\n+import com.sap.cloud.lm.sl.common.util.MapUtil;\r\n+\r\n+@Named(\"deleteServiceStep\")\r\n+@Scope(BeanDefinition.SCOPE_PROTOTYPE)\r\n+public class DeleteServiceStep extends AsyncFlowableStep {\r\n+\r\n+    private ServiceOperationGetter serviceOperationGetter;\r\n+    private ServiceProgressReporter serviceProgressReporter;\r\n+    private ServiceRemover serviceRemover;\r\n+\r\n+    @Inject\r\n+    public DeleteServiceStep(ServiceOperationGetter serviceOperationGetter, ServiceProgressReporter serviceProgressReporter,\r\n+                             ServiceRemover serviceRemover) {\r\n+        this.serviceOperationGetter = serviceOperationGetter;\r\n+        this.serviceProgressReporter = serviceProgressReporter;\r\n+        this.serviceRemover = serviceRemover;\r\n+    }\r\n+\r\n+    @Override\r\n+    protected StepPhase executeAsyncStep(ExecutionWrapper execution) {\r\n+        String serviceToDelete = StepsUtil.getServiceToDelete(execution.getContext());\r\n+        if (serviceToDelete == null) {\r\n+            getStepLogger().debug(Messages.MISSING_SERVICE_TO_DELETE);\r\n+            return StepPhase.DONE;\r\n+        }\r\n+\r\n+        getStepLogger().debug(Messages.DELETING_DISCONTINUED_SERVICE_0, serviceToDelete);\r\n+\r\n+        CloudControllerClient client = execution.getControllerClient();\r\n+\r\n+        CloudServiceInstance serviceInstance = client.getServiceInstance(serviceToDelete, false);\r\n+        if (serviceInstance == null) {\r\n+            getStepLogger().info(Messages.SERVICE_IS_ALREADY_DELETED, serviceToDelete);\r\n+            return StepPhase.DONE;\r\n+        }\r\n+        StepsUtil.setServicesData(execution.getContext(), buildCloudServiceExtendedList(serviceInstance));\r\n+\r\n+        List<CloudServiceKey> serviceKeys = client.getServiceKeys(serviceInstance.getService());\r\n+\r\n+        if (isDeletePossible(execution.getContext(), serviceInstance.getBindings(), serviceKeys)) {\r\n+            deleteService(execution, serviceInstance, serviceKeys);\r\n+            StepsUtil.setTriggeredServiceOperations(execution.getContext(), MapUtil.asMap(serviceToDelete, ServiceOperation.Type.DELETE));\r\n+            return StepPhase.POLL;\r\n+        }\r\n+\r\n+        getStepLogger().warn(Messages.SERVICE_NOT_BE_DELETED_DUE_TO_SERVICE_BINDINGS_AND_SERVICE_KEYS, serviceToDelete);\r\n+        return StepPhase.DONE;\r\n+\r\n+    }\r\n+\r\n+    @Override\r\n+    protected String getStepErrorMessage(DelegateExecution context) {\r\n+        return Messages.ERROR_DELETING_SERVICES;\r\n+    }\r\n+\r\n+    @Override\r\n+    protected String getStepErrorMessageAdditionalDescription(DelegateExecution context) {\r\n+        String offering = StepsUtil.getServiceOffering(context);\r\n+        return ExceptionMessageTailMapper.map(configuration, CloudComponents.SERVICE_BROKERS, offering);\r\n+    }\r\n+\r\n+    private List<CloudServiceExtended> buildCloudServiceExtendedList(CloudServiceInstance serviceInstanceData) {\r\n+        return Collections.singletonList(buildCloudServiceExtended(serviceInstanceData));\r\n+    }\r\n+\r\n+    private ImmutableCloudServiceExtended buildCloudServiceExtended(CloudServiceInstance service) {\r\n+        return ImmutableCloudServiceExtended.builder()\r\n+                                            .from(service.getService())\r\n+                                            .build();\r\n+    }\r\n+\r\n+    private boolean isDeletePossible(DelegateExecution context, List<CloudServiceBinding> serviceBindings,\r\n+                                     List<CloudServiceKey> serviceKeys) {\r\n+        return hasNoConflictWithServiceBindings(context, serviceBindings) && hasNoConflictWithServiceKeys(context, serviceKeys);\r\n+    }\r\n+\r\n+    private boolean hasNoConflictWithServiceBindings(DelegateExecution context, List<CloudServiceBinding> serviceBindings) {\r\n+        return serviceBindings.isEmpty() || StepsUtil.getServiceActionsToExecute(context)\r\n+                                                     .contains(ServiceAction.RECREATE);\r\n+    }\r\n+\r\n+    private boolean hasNoConflictWithServiceKeys(DelegateExecution context, List<CloudServiceKey> serviceKeys) {\r\n+        return serviceKeys.isEmpty() || StepsUtil.shouldDeleteServiceKeys(context);\r\n+    }\r\n+\r\n+    private void deleteService(ExecutionWrapper execution, CloudServiceInstance serviceInstance, List<CloudServiceKey> serviceKeys) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d34c6dcf7b5f760b8ff7464d6ffd9fde50c51d3"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDc1MDg3OnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DeleteServicesStep.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTowMzoxNFrOF4JLuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNToxNDoxMVrOF4JsdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxNTAzMw==", "bodyText": "As mentioned earlier - I do not understand the suffix 'Data' here. The method just retrieves Service Instances so 'getServices' seems sufficient. What purpose does the 'Data' suffix serve here?\nThis includes variables and methods. Below is another variable and method containing the 'Data' suffix again.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r394415033", "createdAt": "2020-03-18T15:03:14Z", "author": {"login": "valentinEmpy"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DeleteServicesStep.java", "diffHunk": "@@ -1,124 +1,232 @@\n-package com.sap.cloud.lm.sl.cf.process.steps;\r\n-\r\n-import java.util.Collections;\r\n-import java.util.List;\r\n-\r\n-import javax.inject.Inject;\r\n-import javax.inject.Named;\r\n-\r\n-import org.cloudfoundry.client.lib.CloudControllerClient;\r\n-import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\r\n-import org.flowable.engine.delegate.DelegateExecution;\r\n-import org.springframework.beans.factory.config.BeanDefinition;\r\n-import org.springframework.context.annotation.Scope;\r\n-\r\n-import com.sap.cloud.lm.sl.cf.client.lib.domain.CloudServiceExtended;\r\n-import com.sap.cloud.lm.sl.cf.client.lib.domain.ImmutableCloudServiceExtended;\r\n-import com.sap.cloud.lm.sl.cf.core.cf.clients.ServiceGetter;\r\n-import com.sap.cloud.lm.sl.cf.core.model.ServiceInstanceWithServiceKeys;\r\n-import com.sap.cloud.lm.sl.cf.core.model.ServiceOperation;\r\n-import com.sap.cloud.lm.sl.cf.process.Messages;\r\n-import com.sap.cloud.lm.sl.cf.process.analytics.model.ServiceAction;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper.CloudComponents;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ServiceOperationGetter;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ServiceProgressReporter;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ServiceRemoval;\r\n-import com.sap.cloud.lm.sl.common.util.MapUtil;\r\n-\r\n-@Named(\"deleteServicesStep\")\r\n-@Scope(BeanDefinition.SCOPE_PROTOTYPE)\r\n-public class DeleteServicesStep extends AsyncFlowableStep {\r\n-\r\n-    private ServiceOperationGetter serviceOperationGetter;\r\n-    private ServiceProgressReporter serviceProgressReporter;\r\n-    private ServiceRemoval serviceRemoval;\r\n-    private ServiceGetter serviceGetter;\r\n-\r\n-    @Inject\r\n-    public DeleteServicesStep(ServiceOperationGetter serviceOperationGetter, ServiceProgressReporter serviceProgressReporter,\r\n-                              ServiceRemoval serviceRemoval, ServiceGetter serviceGetter) {\r\n-        this.serviceOperationGetter = serviceOperationGetter;\r\n-        this.serviceProgressReporter = serviceProgressReporter;\r\n-        this.serviceRemoval = serviceRemoval;\r\n-        this.serviceGetter = serviceGetter;\r\n-    }\r\n-\r\n-    @Override\r\n-    protected StepPhase executeAsyncStep(ExecutionWrapper execution) {\r\n-        String serviceToDelete = StepsUtil.getServiceToDelete(execution.getContext());\r\n-        if (serviceToDelete == null) {\r\n-            getStepLogger().debug(Messages.MISSING_SERVICE_TO_DELETE);\r\n-            return StepPhase.DONE;\r\n-        }\r\n-\r\n-        getStepLogger().debug(Messages.DELETING_DISCONTINUED_SERVICE_0, serviceToDelete);\r\n-\r\n-        CloudControllerClient client = execution.getControllerClient();\r\n-\r\n-        CloudServiceInstance serviceInstanceData = getServiceInstanceData(serviceToDelete, client);\r\n-        if (serviceInstanceData == null) {\r\n-            getStepLogger().info(Messages.SERVICE_IS_ALREADY_DELETED, serviceToDelete);\r\n-            return StepPhase.DONE;\r\n-        }\r\n-        StepsUtil.setServicesData(execution.getContext(), buildCloudServiceExtendedList(serviceInstanceData));\r\n-\r\n-        ServiceInstanceWithServiceKeys serviceInstanceWithServiceKeys = getServiceInstanceWithServiceKeys(client, serviceInstanceData);\r\n-\r\n-        if (isDeletePossible(execution.getContext(), serviceInstanceWithServiceKeys)) {\r\n-            deleteService(execution, serviceInstanceWithServiceKeys);\r\n-            StepsUtil.setTriggeredServiceOperations(execution.getContext(), MapUtil.asMap(serviceToDelete, ServiceOperation.Type.DELETE));\r\n-            return StepPhase.POLL;\r\n-        }\r\n-\r\n-        getStepLogger().warn(Messages.SERVICE_NOT_BE_DELETED_DUE_TO_SERVICE_BINDINGS_AND_SERVICE_KEYS, serviceToDelete);\r\n-        return StepPhase.DONE;\r\n-\r\n-    }\r\n-\r\n-    @Override\r\n-    protected String getStepErrorMessage(DelegateExecution context) {\r\n-        return Messages.ERROR_DELETING_SERVICES;\r\n-    }\r\n-\r\n-    @Override\r\n-    protected String getStepErrorMessageAdditionalDescription(DelegateExecution context) {\r\n-        String offering = StepsUtil.getServiceOffering(context);\r\n-        return ExceptionMessageTailMapper.map(configuration, CloudComponents.SERVICE_BROKERS, offering);\r\n-    }\r\n-\r\n-    private CloudServiceInstance getServiceInstanceData(String serviceToDelete, CloudControllerClient client) {\r\n-        return client.getServiceInstance(serviceToDelete, false);\r\n-    }\r\n-\r\n-    private List<CloudServiceExtended> buildCloudServiceExtendedList(CloudServiceInstance serviceInstanceData) {\r\n-        return Collections.singletonList(buildCloudServiceExtended(serviceInstanceData));\r\n-    }\r\n-\r\n-    private ImmutableCloudServiceExtended buildCloudServiceExtended(CloudServiceInstance service) {\r\n-        return ImmutableCloudServiceExtended.builder()\r\n-                                            .from(service.getService())\r\n-                                            .build();\r\n-    }\r\n-\r\n-    private ServiceInstanceWithServiceKeys getServiceInstanceWithServiceKeys(CloudControllerClient client,\r\n-                                                                             CloudServiceInstance serviceInstanceData) {\r\n-        return serviceGetter.getServiceInstancesWithServiceKeys(client, serviceInstanceData);\r\n-    }\r\n-\r\n-    private boolean isDeletePossible(DelegateExecution context, ServiceInstanceWithServiceKeys serviceInstanceWithServiceKeys) {\r\n-        return StepsUtil.getServiceActionsToExecute(context)\r\n-                        .contains(ServiceAction.RECREATE)\r\n-            || serviceInstanceWithServiceKeys.hasEmptyAssociations();\r\n-    }\r\n-\r\n-    private void deleteService(ExecutionWrapper execution, ServiceInstanceWithServiceKeys serviceInstanceWithServiceKeys) {\r\n-        serviceRemoval.deleteService(execution, serviceInstanceWithServiceKeys);\r\n-    }\r\n-\r\n-    @Override\r\n-    protected List<AsyncExecution> getAsyncStepExecutions(ExecutionWrapper execution) {\r\n-        return Collections.singletonList(new PollServiceDeleteOperationsExecution(serviceOperationGetter, serviceProgressReporter));\r\n-    }\r\n-\r\n-}\r\n+package com.sap.cloud.lm.sl.cf.process.steps;\n+\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.CloudControllerException;\n+import org.cloudfoundry.client.lib.CloudException;\n+import org.cloudfoundry.client.lib.CloudOperationException;\n+import org.cloudfoundry.client.lib.CloudServiceBrokerException;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.cloudfoundry.client.lib.domain.CloudServiceBinding;\n+import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\n+import org.cloudfoundry.client.lib.domain.CloudServiceKey;\n+import org.flowable.engine.delegate.DelegateExecution;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.http.HttpStatus;\n+\n+import com.sap.cloud.lm.sl.cf.client.lib.domain.CloudServiceExtended;\n+import com.sap.cloud.lm.sl.cf.client.lib.domain.ImmutableCloudServiceExtended;\n+import com.sap.cloud.lm.sl.cf.core.model.ServiceOperation;\n+import com.sap.cloud.lm.sl.cf.core.security.serialization.SecureSerializationFacade;\n+import com.sap.cloud.lm.sl.cf.process.Constants;\n+import com.sap.cloud.lm.sl.cf.process.Messages;\n+import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper;\n+import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper.CloudComponents;\n+import com.sap.cloud.lm.sl.cf.process.util.ServiceOperationGetter;\n+import com.sap.cloud.lm.sl.cf.process.util.ServiceProgressReporter;\n+import com.sap.cloud.lm.sl.common.SLException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+\n+@Named(\"deleteServicesStep\")\n+@Scope(BeanDefinition.SCOPE_PROTOTYPE)\n+public class DeleteServicesStep extends AsyncFlowableStep {\n+\n+    private final SecureSerializationFacade secureSerializer = new SecureSerializationFacade();\n+\n+    private ServiceOperationGetter serviceOperationGetter;\n+    private ServiceProgressReporter serviceProgressReporter;\n+\n+    @Inject\n+    public DeleteServicesStep(ServiceOperationGetter serviceOperationGetter, ServiceProgressReporter serviceProgressReporter) {\n+        this.serviceOperationGetter = serviceOperationGetter;\n+        this.serviceProgressReporter = serviceProgressReporter;\n+    }\n+\n+    @Override\n+    protected StepPhase executeAsyncStep(ExecutionWrapper execution) {\n+        getStepLogger().debug(Messages.DELETING_SERVICES);\n+\n+        CloudControllerClient client = execution.getControllerClient();\n+\n+        List<String> servicesToDelete = new ArrayList<>(StepsUtil.getServicesToDelete(execution.getContext()));\n+\n+        if (servicesToDelete.isEmpty()) {\n+            getStepLogger().debug(Messages.MISSING_SERVICES_TO_DELETE);\n+            return StepPhase.DONE;\n+        }\n+\n+        List<CloudServiceExtended> servicesData = getServicesData(servicesToDelete, execution);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d34c6dcf7b5f760b8ff7464d6ffd9fde50c51d3"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQyMDY4Ng==", "bodyText": "This class was returned as it is due backward compatability. This class will be removed after the release of these changes. I can rename this method and variable and add comment at the begging that this class will be removed.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r394420686", "createdAt": "2020-03-18T15:10:36Z", "author": {"login": "theghost5800"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DeleteServicesStep.java", "diffHunk": "@@ -1,124 +1,232 @@\n-package com.sap.cloud.lm.sl.cf.process.steps;\r\n-\r\n-import java.util.Collections;\r\n-import java.util.List;\r\n-\r\n-import javax.inject.Inject;\r\n-import javax.inject.Named;\r\n-\r\n-import org.cloudfoundry.client.lib.CloudControllerClient;\r\n-import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\r\n-import org.flowable.engine.delegate.DelegateExecution;\r\n-import org.springframework.beans.factory.config.BeanDefinition;\r\n-import org.springframework.context.annotation.Scope;\r\n-\r\n-import com.sap.cloud.lm.sl.cf.client.lib.domain.CloudServiceExtended;\r\n-import com.sap.cloud.lm.sl.cf.client.lib.domain.ImmutableCloudServiceExtended;\r\n-import com.sap.cloud.lm.sl.cf.core.cf.clients.ServiceGetter;\r\n-import com.sap.cloud.lm.sl.cf.core.model.ServiceInstanceWithServiceKeys;\r\n-import com.sap.cloud.lm.sl.cf.core.model.ServiceOperation;\r\n-import com.sap.cloud.lm.sl.cf.process.Messages;\r\n-import com.sap.cloud.lm.sl.cf.process.analytics.model.ServiceAction;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper.CloudComponents;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ServiceOperationGetter;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ServiceProgressReporter;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ServiceRemoval;\r\n-import com.sap.cloud.lm.sl.common.util.MapUtil;\r\n-\r\n-@Named(\"deleteServicesStep\")\r\n-@Scope(BeanDefinition.SCOPE_PROTOTYPE)\r\n-public class DeleteServicesStep extends AsyncFlowableStep {\r\n-\r\n-    private ServiceOperationGetter serviceOperationGetter;\r\n-    private ServiceProgressReporter serviceProgressReporter;\r\n-    private ServiceRemoval serviceRemoval;\r\n-    private ServiceGetter serviceGetter;\r\n-\r\n-    @Inject\r\n-    public DeleteServicesStep(ServiceOperationGetter serviceOperationGetter, ServiceProgressReporter serviceProgressReporter,\r\n-                              ServiceRemoval serviceRemoval, ServiceGetter serviceGetter) {\r\n-        this.serviceOperationGetter = serviceOperationGetter;\r\n-        this.serviceProgressReporter = serviceProgressReporter;\r\n-        this.serviceRemoval = serviceRemoval;\r\n-        this.serviceGetter = serviceGetter;\r\n-    }\r\n-\r\n-    @Override\r\n-    protected StepPhase executeAsyncStep(ExecutionWrapper execution) {\r\n-        String serviceToDelete = StepsUtil.getServiceToDelete(execution.getContext());\r\n-        if (serviceToDelete == null) {\r\n-            getStepLogger().debug(Messages.MISSING_SERVICE_TO_DELETE);\r\n-            return StepPhase.DONE;\r\n-        }\r\n-\r\n-        getStepLogger().debug(Messages.DELETING_DISCONTINUED_SERVICE_0, serviceToDelete);\r\n-\r\n-        CloudControllerClient client = execution.getControllerClient();\r\n-\r\n-        CloudServiceInstance serviceInstanceData = getServiceInstanceData(serviceToDelete, client);\r\n-        if (serviceInstanceData == null) {\r\n-            getStepLogger().info(Messages.SERVICE_IS_ALREADY_DELETED, serviceToDelete);\r\n-            return StepPhase.DONE;\r\n-        }\r\n-        StepsUtil.setServicesData(execution.getContext(), buildCloudServiceExtendedList(serviceInstanceData));\r\n-\r\n-        ServiceInstanceWithServiceKeys serviceInstanceWithServiceKeys = getServiceInstanceWithServiceKeys(client, serviceInstanceData);\r\n-\r\n-        if (isDeletePossible(execution.getContext(), serviceInstanceWithServiceKeys)) {\r\n-            deleteService(execution, serviceInstanceWithServiceKeys);\r\n-            StepsUtil.setTriggeredServiceOperations(execution.getContext(), MapUtil.asMap(serviceToDelete, ServiceOperation.Type.DELETE));\r\n-            return StepPhase.POLL;\r\n-        }\r\n-\r\n-        getStepLogger().warn(Messages.SERVICE_NOT_BE_DELETED_DUE_TO_SERVICE_BINDINGS_AND_SERVICE_KEYS, serviceToDelete);\r\n-        return StepPhase.DONE;\r\n-\r\n-    }\r\n-\r\n-    @Override\r\n-    protected String getStepErrorMessage(DelegateExecution context) {\r\n-        return Messages.ERROR_DELETING_SERVICES;\r\n-    }\r\n-\r\n-    @Override\r\n-    protected String getStepErrorMessageAdditionalDescription(DelegateExecution context) {\r\n-        String offering = StepsUtil.getServiceOffering(context);\r\n-        return ExceptionMessageTailMapper.map(configuration, CloudComponents.SERVICE_BROKERS, offering);\r\n-    }\r\n-\r\n-    private CloudServiceInstance getServiceInstanceData(String serviceToDelete, CloudControllerClient client) {\r\n-        return client.getServiceInstance(serviceToDelete, false);\r\n-    }\r\n-\r\n-    private List<CloudServiceExtended> buildCloudServiceExtendedList(CloudServiceInstance serviceInstanceData) {\r\n-        return Collections.singletonList(buildCloudServiceExtended(serviceInstanceData));\r\n-    }\r\n-\r\n-    private ImmutableCloudServiceExtended buildCloudServiceExtended(CloudServiceInstance service) {\r\n-        return ImmutableCloudServiceExtended.builder()\r\n-                                            .from(service.getService())\r\n-                                            .build();\r\n-    }\r\n-\r\n-    private ServiceInstanceWithServiceKeys getServiceInstanceWithServiceKeys(CloudControllerClient client,\r\n-                                                                             CloudServiceInstance serviceInstanceData) {\r\n-        return serviceGetter.getServiceInstancesWithServiceKeys(client, serviceInstanceData);\r\n-    }\r\n-\r\n-    private boolean isDeletePossible(DelegateExecution context, ServiceInstanceWithServiceKeys serviceInstanceWithServiceKeys) {\r\n-        return StepsUtil.getServiceActionsToExecute(context)\r\n-                        .contains(ServiceAction.RECREATE)\r\n-            || serviceInstanceWithServiceKeys.hasEmptyAssociations();\r\n-    }\r\n-\r\n-    private void deleteService(ExecutionWrapper execution, ServiceInstanceWithServiceKeys serviceInstanceWithServiceKeys) {\r\n-        serviceRemoval.deleteService(execution, serviceInstanceWithServiceKeys);\r\n-    }\r\n-\r\n-    @Override\r\n-    protected List<AsyncExecution> getAsyncStepExecutions(ExecutionWrapper execution) {\r\n-        return Collections.singletonList(new PollServiceDeleteOperationsExecution(serviceOperationGetter, serviceProgressReporter));\r\n-    }\r\n-\r\n-}\r\n+package com.sap.cloud.lm.sl.cf.process.steps;\n+\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.CloudControllerException;\n+import org.cloudfoundry.client.lib.CloudException;\n+import org.cloudfoundry.client.lib.CloudOperationException;\n+import org.cloudfoundry.client.lib.CloudServiceBrokerException;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.cloudfoundry.client.lib.domain.CloudServiceBinding;\n+import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\n+import org.cloudfoundry.client.lib.domain.CloudServiceKey;\n+import org.flowable.engine.delegate.DelegateExecution;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.http.HttpStatus;\n+\n+import com.sap.cloud.lm.sl.cf.client.lib.domain.CloudServiceExtended;\n+import com.sap.cloud.lm.sl.cf.client.lib.domain.ImmutableCloudServiceExtended;\n+import com.sap.cloud.lm.sl.cf.core.model.ServiceOperation;\n+import com.sap.cloud.lm.sl.cf.core.security.serialization.SecureSerializationFacade;\n+import com.sap.cloud.lm.sl.cf.process.Constants;\n+import com.sap.cloud.lm.sl.cf.process.Messages;\n+import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper;\n+import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper.CloudComponents;\n+import com.sap.cloud.lm.sl.cf.process.util.ServiceOperationGetter;\n+import com.sap.cloud.lm.sl.cf.process.util.ServiceProgressReporter;\n+import com.sap.cloud.lm.sl.common.SLException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+\n+@Named(\"deleteServicesStep\")\n+@Scope(BeanDefinition.SCOPE_PROTOTYPE)\n+public class DeleteServicesStep extends AsyncFlowableStep {\n+\n+    private final SecureSerializationFacade secureSerializer = new SecureSerializationFacade();\n+\n+    private ServiceOperationGetter serviceOperationGetter;\n+    private ServiceProgressReporter serviceProgressReporter;\n+\n+    @Inject\n+    public DeleteServicesStep(ServiceOperationGetter serviceOperationGetter, ServiceProgressReporter serviceProgressReporter) {\n+        this.serviceOperationGetter = serviceOperationGetter;\n+        this.serviceProgressReporter = serviceProgressReporter;\n+    }\n+\n+    @Override\n+    protected StepPhase executeAsyncStep(ExecutionWrapper execution) {\n+        getStepLogger().debug(Messages.DELETING_SERVICES);\n+\n+        CloudControllerClient client = execution.getControllerClient();\n+\n+        List<String> servicesToDelete = new ArrayList<>(StepsUtil.getServicesToDelete(execution.getContext()));\n+\n+        if (servicesToDelete.isEmpty()) {\n+            getStepLogger().debug(Messages.MISSING_SERVICES_TO_DELETE);\n+            return StepPhase.DONE;\n+        }\n+\n+        List<CloudServiceExtended> servicesData = getServicesData(servicesToDelete, execution);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxNTAzMw=="}, "originalCommit": {"oid": "0d34c6dcf7b5f760b8ff7464d6ffd9fde50c51d3"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQyMzQxMw==", "bodyText": "Perhaps put the @ Deprecated annotation as well and explain why it will be removed", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r394423413", "createdAt": "2020-03-18T15:14:11Z", "author": {"login": "valentinEmpy"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DeleteServicesStep.java", "diffHunk": "@@ -1,124 +1,232 @@\n-package com.sap.cloud.lm.sl.cf.process.steps;\r\n-\r\n-import java.util.Collections;\r\n-import java.util.List;\r\n-\r\n-import javax.inject.Inject;\r\n-import javax.inject.Named;\r\n-\r\n-import org.cloudfoundry.client.lib.CloudControllerClient;\r\n-import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\r\n-import org.flowable.engine.delegate.DelegateExecution;\r\n-import org.springframework.beans.factory.config.BeanDefinition;\r\n-import org.springframework.context.annotation.Scope;\r\n-\r\n-import com.sap.cloud.lm.sl.cf.client.lib.domain.CloudServiceExtended;\r\n-import com.sap.cloud.lm.sl.cf.client.lib.domain.ImmutableCloudServiceExtended;\r\n-import com.sap.cloud.lm.sl.cf.core.cf.clients.ServiceGetter;\r\n-import com.sap.cloud.lm.sl.cf.core.model.ServiceInstanceWithServiceKeys;\r\n-import com.sap.cloud.lm.sl.cf.core.model.ServiceOperation;\r\n-import com.sap.cloud.lm.sl.cf.process.Messages;\r\n-import com.sap.cloud.lm.sl.cf.process.analytics.model.ServiceAction;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper.CloudComponents;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ServiceOperationGetter;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ServiceProgressReporter;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ServiceRemoval;\r\n-import com.sap.cloud.lm.sl.common.util.MapUtil;\r\n-\r\n-@Named(\"deleteServicesStep\")\r\n-@Scope(BeanDefinition.SCOPE_PROTOTYPE)\r\n-public class DeleteServicesStep extends AsyncFlowableStep {\r\n-\r\n-    private ServiceOperationGetter serviceOperationGetter;\r\n-    private ServiceProgressReporter serviceProgressReporter;\r\n-    private ServiceRemoval serviceRemoval;\r\n-    private ServiceGetter serviceGetter;\r\n-\r\n-    @Inject\r\n-    public DeleteServicesStep(ServiceOperationGetter serviceOperationGetter, ServiceProgressReporter serviceProgressReporter,\r\n-                              ServiceRemoval serviceRemoval, ServiceGetter serviceGetter) {\r\n-        this.serviceOperationGetter = serviceOperationGetter;\r\n-        this.serviceProgressReporter = serviceProgressReporter;\r\n-        this.serviceRemoval = serviceRemoval;\r\n-        this.serviceGetter = serviceGetter;\r\n-    }\r\n-\r\n-    @Override\r\n-    protected StepPhase executeAsyncStep(ExecutionWrapper execution) {\r\n-        String serviceToDelete = StepsUtil.getServiceToDelete(execution.getContext());\r\n-        if (serviceToDelete == null) {\r\n-            getStepLogger().debug(Messages.MISSING_SERVICE_TO_DELETE);\r\n-            return StepPhase.DONE;\r\n-        }\r\n-\r\n-        getStepLogger().debug(Messages.DELETING_DISCONTINUED_SERVICE_0, serviceToDelete);\r\n-\r\n-        CloudControllerClient client = execution.getControllerClient();\r\n-\r\n-        CloudServiceInstance serviceInstanceData = getServiceInstanceData(serviceToDelete, client);\r\n-        if (serviceInstanceData == null) {\r\n-            getStepLogger().info(Messages.SERVICE_IS_ALREADY_DELETED, serviceToDelete);\r\n-            return StepPhase.DONE;\r\n-        }\r\n-        StepsUtil.setServicesData(execution.getContext(), buildCloudServiceExtendedList(serviceInstanceData));\r\n-\r\n-        ServiceInstanceWithServiceKeys serviceInstanceWithServiceKeys = getServiceInstanceWithServiceKeys(client, serviceInstanceData);\r\n-\r\n-        if (isDeletePossible(execution.getContext(), serviceInstanceWithServiceKeys)) {\r\n-            deleteService(execution, serviceInstanceWithServiceKeys);\r\n-            StepsUtil.setTriggeredServiceOperations(execution.getContext(), MapUtil.asMap(serviceToDelete, ServiceOperation.Type.DELETE));\r\n-            return StepPhase.POLL;\r\n-        }\r\n-\r\n-        getStepLogger().warn(Messages.SERVICE_NOT_BE_DELETED_DUE_TO_SERVICE_BINDINGS_AND_SERVICE_KEYS, serviceToDelete);\r\n-        return StepPhase.DONE;\r\n-\r\n-    }\r\n-\r\n-    @Override\r\n-    protected String getStepErrorMessage(DelegateExecution context) {\r\n-        return Messages.ERROR_DELETING_SERVICES;\r\n-    }\r\n-\r\n-    @Override\r\n-    protected String getStepErrorMessageAdditionalDescription(DelegateExecution context) {\r\n-        String offering = StepsUtil.getServiceOffering(context);\r\n-        return ExceptionMessageTailMapper.map(configuration, CloudComponents.SERVICE_BROKERS, offering);\r\n-    }\r\n-\r\n-    private CloudServiceInstance getServiceInstanceData(String serviceToDelete, CloudControllerClient client) {\r\n-        return client.getServiceInstance(serviceToDelete, false);\r\n-    }\r\n-\r\n-    private List<CloudServiceExtended> buildCloudServiceExtendedList(CloudServiceInstance serviceInstanceData) {\r\n-        return Collections.singletonList(buildCloudServiceExtended(serviceInstanceData));\r\n-    }\r\n-\r\n-    private ImmutableCloudServiceExtended buildCloudServiceExtended(CloudServiceInstance service) {\r\n-        return ImmutableCloudServiceExtended.builder()\r\n-                                            .from(service.getService())\r\n-                                            .build();\r\n-    }\r\n-\r\n-    private ServiceInstanceWithServiceKeys getServiceInstanceWithServiceKeys(CloudControllerClient client,\r\n-                                                                             CloudServiceInstance serviceInstanceData) {\r\n-        return serviceGetter.getServiceInstancesWithServiceKeys(client, serviceInstanceData);\r\n-    }\r\n-\r\n-    private boolean isDeletePossible(DelegateExecution context, ServiceInstanceWithServiceKeys serviceInstanceWithServiceKeys) {\r\n-        return StepsUtil.getServiceActionsToExecute(context)\r\n-                        .contains(ServiceAction.RECREATE)\r\n-            || serviceInstanceWithServiceKeys.hasEmptyAssociations();\r\n-    }\r\n-\r\n-    private void deleteService(ExecutionWrapper execution, ServiceInstanceWithServiceKeys serviceInstanceWithServiceKeys) {\r\n-        serviceRemoval.deleteService(execution, serviceInstanceWithServiceKeys);\r\n-    }\r\n-\r\n-    @Override\r\n-    protected List<AsyncExecution> getAsyncStepExecutions(ExecutionWrapper execution) {\r\n-        return Collections.singletonList(new PollServiceDeleteOperationsExecution(serviceOperationGetter, serviceProgressReporter));\r\n-    }\r\n-\r\n-}\r\n+package com.sap.cloud.lm.sl.cf.process.steps;\n+\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.CloudControllerException;\n+import org.cloudfoundry.client.lib.CloudException;\n+import org.cloudfoundry.client.lib.CloudOperationException;\n+import org.cloudfoundry.client.lib.CloudServiceBrokerException;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.cloudfoundry.client.lib.domain.CloudServiceBinding;\n+import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\n+import org.cloudfoundry.client.lib.domain.CloudServiceKey;\n+import org.flowable.engine.delegate.DelegateExecution;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.http.HttpStatus;\n+\n+import com.sap.cloud.lm.sl.cf.client.lib.domain.CloudServiceExtended;\n+import com.sap.cloud.lm.sl.cf.client.lib.domain.ImmutableCloudServiceExtended;\n+import com.sap.cloud.lm.sl.cf.core.model.ServiceOperation;\n+import com.sap.cloud.lm.sl.cf.core.security.serialization.SecureSerializationFacade;\n+import com.sap.cloud.lm.sl.cf.process.Constants;\n+import com.sap.cloud.lm.sl.cf.process.Messages;\n+import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper;\n+import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper.CloudComponents;\n+import com.sap.cloud.lm.sl.cf.process.util.ServiceOperationGetter;\n+import com.sap.cloud.lm.sl.cf.process.util.ServiceProgressReporter;\n+import com.sap.cloud.lm.sl.common.SLException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+\n+@Named(\"deleteServicesStep\")\n+@Scope(BeanDefinition.SCOPE_PROTOTYPE)\n+public class DeleteServicesStep extends AsyncFlowableStep {\n+\n+    private final SecureSerializationFacade secureSerializer = new SecureSerializationFacade();\n+\n+    private ServiceOperationGetter serviceOperationGetter;\n+    private ServiceProgressReporter serviceProgressReporter;\n+\n+    @Inject\n+    public DeleteServicesStep(ServiceOperationGetter serviceOperationGetter, ServiceProgressReporter serviceProgressReporter) {\n+        this.serviceOperationGetter = serviceOperationGetter;\n+        this.serviceProgressReporter = serviceProgressReporter;\n+    }\n+\n+    @Override\n+    protected StepPhase executeAsyncStep(ExecutionWrapper execution) {\n+        getStepLogger().debug(Messages.DELETING_SERVICES);\n+\n+        CloudControllerClient client = execution.getControllerClient();\n+\n+        List<String> servicesToDelete = new ArrayList<>(StepsUtil.getServicesToDelete(execution.getContext()));\n+\n+        if (servicesToDelete.isEmpty()) {\n+            getStepLogger().debug(Messages.MISSING_SERVICES_TO_DELETE);\n+            return StepPhase.DONE;\n+        }\n+\n+        List<CloudServiceExtended> servicesData = getServicesData(servicesToDelete, execution);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxNTAzMw=="}, "originalCommit": {"oid": "0d34c6dcf7b5f760b8ff7464d6ffd9fde50c51d3"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDc1ODEzOnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DeleteServicesStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTowNDo1NFrOF4JQow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTowNDo1NFrOF4JQow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxNjI5MQ==", "bodyText": "The old comment still stands.\nThe method name is not very descriptive. Reading it, does not point at what exception message exactly it builds, especially the 'New' keyword. I had to check in the implementation to understand that it builds an error message wen deleting a service.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r394416291", "createdAt": "2020-03-18T15:04:54Z", "author": {"login": "valentinEmpy"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DeleteServicesStep.java", "diffHunk": "@@ -1,124 +1,232 @@\n-package com.sap.cloud.lm.sl.cf.process.steps;\r\n-\r\n-import java.util.Collections;\r\n-import java.util.List;\r\n-\r\n-import javax.inject.Inject;\r\n-import javax.inject.Named;\r\n-\r\n-import org.cloudfoundry.client.lib.CloudControllerClient;\r\n-import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\r\n-import org.flowable.engine.delegate.DelegateExecution;\r\n-import org.springframework.beans.factory.config.BeanDefinition;\r\n-import org.springframework.context.annotation.Scope;\r\n-\r\n-import com.sap.cloud.lm.sl.cf.client.lib.domain.CloudServiceExtended;\r\n-import com.sap.cloud.lm.sl.cf.client.lib.domain.ImmutableCloudServiceExtended;\r\n-import com.sap.cloud.lm.sl.cf.core.cf.clients.ServiceGetter;\r\n-import com.sap.cloud.lm.sl.cf.core.model.ServiceInstanceWithServiceKeys;\r\n-import com.sap.cloud.lm.sl.cf.core.model.ServiceOperation;\r\n-import com.sap.cloud.lm.sl.cf.process.Messages;\r\n-import com.sap.cloud.lm.sl.cf.process.analytics.model.ServiceAction;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper.CloudComponents;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ServiceOperationGetter;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ServiceProgressReporter;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ServiceRemoval;\r\n-import com.sap.cloud.lm.sl.common.util.MapUtil;\r\n-\r\n-@Named(\"deleteServicesStep\")\r\n-@Scope(BeanDefinition.SCOPE_PROTOTYPE)\r\n-public class DeleteServicesStep extends AsyncFlowableStep {\r\n-\r\n-    private ServiceOperationGetter serviceOperationGetter;\r\n-    private ServiceProgressReporter serviceProgressReporter;\r\n-    private ServiceRemoval serviceRemoval;\r\n-    private ServiceGetter serviceGetter;\r\n-\r\n-    @Inject\r\n-    public DeleteServicesStep(ServiceOperationGetter serviceOperationGetter, ServiceProgressReporter serviceProgressReporter,\r\n-                              ServiceRemoval serviceRemoval, ServiceGetter serviceGetter) {\r\n-        this.serviceOperationGetter = serviceOperationGetter;\r\n-        this.serviceProgressReporter = serviceProgressReporter;\r\n-        this.serviceRemoval = serviceRemoval;\r\n-        this.serviceGetter = serviceGetter;\r\n-    }\r\n-\r\n-    @Override\r\n-    protected StepPhase executeAsyncStep(ExecutionWrapper execution) {\r\n-        String serviceToDelete = StepsUtil.getServiceToDelete(execution.getContext());\r\n-        if (serviceToDelete == null) {\r\n-            getStepLogger().debug(Messages.MISSING_SERVICE_TO_DELETE);\r\n-            return StepPhase.DONE;\r\n-        }\r\n-\r\n-        getStepLogger().debug(Messages.DELETING_DISCONTINUED_SERVICE_0, serviceToDelete);\r\n-\r\n-        CloudControllerClient client = execution.getControllerClient();\r\n-\r\n-        CloudServiceInstance serviceInstanceData = getServiceInstanceData(serviceToDelete, client);\r\n-        if (serviceInstanceData == null) {\r\n-            getStepLogger().info(Messages.SERVICE_IS_ALREADY_DELETED, serviceToDelete);\r\n-            return StepPhase.DONE;\r\n-        }\r\n-        StepsUtil.setServicesData(execution.getContext(), buildCloudServiceExtendedList(serviceInstanceData));\r\n-\r\n-        ServiceInstanceWithServiceKeys serviceInstanceWithServiceKeys = getServiceInstanceWithServiceKeys(client, serviceInstanceData);\r\n-\r\n-        if (isDeletePossible(execution.getContext(), serviceInstanceWithServiceKeys)) {\r\n-            deleteService(execution, serviceInstanceWithServiceKeys);\r\n-            StepsUtil.setTriggeredServiceOperations(execution.getContext(), MapUtil.asMap(serviceToDelete, ServiceOperation.Type.DELETE));\r\n-            return StepPhase.POLL;\r\n-        }\r\n-\r\n-        getStepLogger().warn(Messages.SERVICE_NOT_BE_DELETED_DUE_TO_SERVICE_BINDINGS_AND_SERVICE_KEYS, serviceToDelete);\r\n-        return StepPhase.DONE;\r\n-\r\n-    }\r\n-\r\n-    @Override\r\n-    protected String getStepErrorMessage(DelegateExecution context) {\r\n-        return Messages.ERROR_DELETING_SERVICES;\r\n-    }\r\n-\r\n-    @Override\r\n-    protected String getStepErrorMessageAdditionalDescription(DelegateExecution context) {\r\n-        String offering = StepsUtil.getServiceOffering(context);\r\n-        return ExceptionMessageTailMapper.map(configuration, CloudComponents.SERVICE_BROKERS, offering);\r\n-    }\r\n-\r\n-    private CloudServiceInstance getServiceInstanceData(String serviceToDelete, CloudControllerClient client) {\r\n-        return client.getServiceInstance(serviceToDelete, false);\r\n-    }\r\n-\r\n-    private List<CloudServiceExtended> buildCloudServiceExtendedList(CloudServiceInstance serviceInstanceData) {\r\n-        return Collections.singletonList(buildCloudServiceExtended(serviceInstanceData));\r\n-    }\r\n-\r\n-    private ImmutableCloudServiceExtended buildCloudServiceExtended(CloudServiceInstance service) {\r\n-        return ImmutableCloudServiceExtended.builder()\r\n-                                            .from(service.getService())\r\n-                                            .build();\r\n-    }\r\n-\r\n-    private ServiceInstanceWithServiceKeys getServiceInstanceWithServiceKeys(CloudControllerClient client,\r\n-                                                                             CloudServiceInstance serviceInstanceData) {\r\n-        return serviceGetter.getServiceInstancesWithServiceKeys(client, serviceInstanceData);\r\n-    }\r\n-\r\n-    private boolean isDeletePossible(DelegateExecution context, ServiceInstanceWithServiceKeys serviceInstanceWithServiceKeys) {\r\n-        return StepsUtil.getServiceActionsToExecute(context)\r\n-                        .contains(ServiceAction.RECREATE)\r\n-            || serviceInstanceWithServiceKeys.hasEmptyAssociations();\r\n-    }\r\n-\r\n-    private void deleteService(ExecutionWrapper execution, ServiceInstanceWithServiceKeys serviceInstanceWithServiceKeys) {\r\n-        serviceRemoval.deleteService(execution, serviceInstanceWithServiceKeys);\r\n-    }\r\n-\r\n-    @Override\r\n-    protected List<AsyncExecution> getAsyncStepExecutions(ExecutionWrapper execution) {\r\n-        return Collections.singletonList(new PollServiceDeleteOperationsExecution(serviceOperationGetter, serviceProgressReporter));\r\n-    }\r\n-\r\n-}\r\n+package com.sap.cloud.lm.sl.cf.process.steps;\n+\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.CloudControllerException;\n+import org.cloudfoundry.client.lib.CloudException;\n+import org.cloudfoundry.client.lib.CloudOperationException;\n+import org.cloudfoundry.client.lib.CloudServiceBrokerException;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.cloudfoundry.client.lib.domain.CloudServiceBinding;\n+import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\n+import org.cloudfoundry.client.lib.domain.CloudServiceKey;\n+import org.flowable.engine.delegate.DelegateExecution;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.http.HttpStatus;\n+\n+import com.sap.cloud.lm.sl.cf.client.lib.domain.CloudServiceExtended;\n+import com.sap.cloud.lm.sl.cf.client.lib.domain.ImmutableCloudServiceExtended;\n+import com.sap.cloud.lm.sl.cf.core.model.ServiceOperation;\n+import com.sap.cloud.lm.sl.cf.core.security.serialization.SecureSerializationFacade;\n+import com.sap.cloud.lm.sl.cf.process.Constants;\n+import com.sap.cloud.lm.sl.cf.process.Messages;\n+import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper;\n+import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper.CloudComponents;\n+import com.sap.cloud.lm.sl.cf.process.util.ServiceOperationGetter;\n+import com.sap.cloud.lm.sl.cf.process.util.ServiceProgressReporter;\n+import com.sap.cloud.lm.sl.common.SLException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+\n+@Named(\"deleteServicesStep\")\n+@Scope(BeanDefinition.SCOPE_PROTOTYPE)\n+public class DeleteServicesStep extends AsyncFlowableStep {\n+\n+    private final SecureSerializationFacade secureSerializer = new SecureSerializationFacade();\n+\n+    private ServiceOperationGetter serviceOperationGetter;\n+    private ServiceProgressReporter serviceProgressReporter;\n+\n+    @Inject\n+    public DeleteServicesStep(ServiceOperationGetter serviceOperationGetter, ServiceProgressReporter serviceProgressReporter) {\n+        this.serviceOperationGetter = serviceOperationGetter;\n+        this.serviceProgressReporter = serviceProgressReporter;\n+    }\n+\n+    @Override\n+    protected StepPhase executeAsyncStep(ExecutionWrapper execution) {\n+        getStepLogger().debug(Messages.DELETING_SERVICES);\n+\n+        CloudControllerClient client = execution.getControllerClient();\n+\n+        List<String> servicesToDelete = new ArrayList<>(StepsUtil.getServicesToDelete(execution.getContext()));\n+\n+        if (servicesToDelete.isEmpty()) {\n+            getStepLogger().debug(Messages.MISSING_SERVICES_TO_DELETE);\n+            return StepPhase.DONE;\n+        }\n+\n+        List<CloudServiceExtended> servicesData = getServicesData(servicesToDelete, execution);\n+        List<String> servicesWithoutData = getServicesWithoutData(servicesToDelete, servicesData);\n+        if (!servicesWithoutData.isEmpty()) {\n+            execution.getStepLogger()\n+                     .info(Messages.SERVICES_ARE_ALREADY_DELETED, servicesWithoutData);\n+            servicesToDelete.removeAll(servicesWithoutData);\n+        }\n+        StepsUtil.setServicesData(execution.getContext(), servicesData);\n+\n+        Map<String, ServiceOperation.Type> triggeredServiceOperations = deleteServices(execution.getContext(), client, servicesToDelete);\n+\n+        execution.getStepLogger()\n+                 .debug(Messages.TRIGGERED_SERVICE_OPERATIONS, JsonUtil.toJson(triggeredServiceOperations, true));\n+        StepsUtil.setTriggeredServiceOperations(execution.getContext(), triggeredServiceOperations);\n+\n+        getStepLogger().debug(Messages.SERVICES_DELETED);\n+        return StepPhase.POLL;\n+    }\n+\n+    @Override\n+    protected String getStepErrorMessage(DelegateExecution context) {\n+        return Messages.ERROR_DELETING_SERVICES;\n+    }\n+\n+    @Override\n+    protected String getStepErrorMessageAdditionalDescription(DelegateExecution context) {\n+        String offering = StepsUtil.getServiceOffering(context);\n+        return ExceptionMessageTailMapper.map(configuration, CloudComponents.SERVICE_BROKERS, offering);\n+    }\n+\n+    private List<CloudServiceExtended> getServicesData(List<String> serviceNames, ExecutionWrapper execution) {\n+        CloudControllerClient client = execution.getControllerClient();\n+\n+        return serviceNames.parallelStream()\n+                           .map(name -> client.getService(name, false))\n+                           .filter(Objects::nonNull)\n+                           .map(this::buildCloudServiceExtended)\n+                           .collect(Collectors.toList());\n+    }\n+\n+    private ImmutableCloudServiceExtended buildCloudServiceExtended(CloudService service) {\n+        return ImmutableCloudServiceExtended.builder()\n+                                            .metadata(service.getMetadata())\n+                                            .name(service.getName())\n+                                            .build();\n+    }\n+\n+    private List<String> getServicesWithoutData(List<String> servicesToDelete, List<CloudServiceExtended> servicesData) {\n+        List<String> servicesWithDataNames = servicesData.stream()\n+                                                         .map(CloudServiceExtended::getName)\n+                                                         .collect(Collectors.toList());\n+        return ListUtils.removeAll(servicesToDelete, servicesWithDataNames);\n+    }\n+\n+    private Map<String, ServiceOperation.Type> deleteServices(DelegateExecution context, CloudControllerClient client,\n+                                                              List<String> serviceNames) {\n+        Map<String, ServiceOperation.Type> triggeredServiceOperations = new HashMap<>();\n+\n+        for (String serviceName : serviceNames) {\n+            try {\n+                prepareServicesToDelete(client, serviceName);\n+                deleteService(client, serviceName);\n+                triggeredServiceOperations.put(serviceName, ServiceOperation.Type.DELETE);\n+            } catch (CloudException e) {\n+                processException(context, e, client.getServiceInstance(serviceName), serviceName);\n+            }\n+        }\n+        return triggeredServiceOperations;\n+    }\n+\n+    private void prepareServicesToDelete(CloudControllerClient client, String serviceName) {\n+        unbindService(client, serviceName);\n+        deleteServiceKeys(client, serviceName);\n+    }\n+\n+    private void unbindService(CloudControllerClient client, String serviceName) {\n+        CloudServiceInstance serviceInstance = client.getServiceInstance(serviceName);\n+        List<CloudServiceBinding> bindings = serviceInstance.getBindings();\n+        if (bindings.isEmpty()) {\n+            return;\n+        }\n+        logBindings(bindings);\n+        for (CloudServiceBinding binding : bindings) {\n+            CloudApplication application = StepsUtil.getBoundApplication(client.getApplications(), binding.getApplicationGuid());\n+            if (application == null) {\n+                throw new IllegalStateException(MessageFormat.format(Messages.COULD_NOT_FIND_APPLICATION_WITH_GUID_0,\n+                                                                     binding.getApplicationGuid()));\n+            }\n+            getStepLogger().info(Messages.UNBINDING_SERVICE_FROM_APP, serviceName, application.getName());\n+            client.unbindService(application.getName(), serviceName);\n+        }\n+    }\n+\n+    private void deleteServiceKeys(CloudControllerClient client, String serviceName) {\n+        CloudService service = client.getService(serviceName);\n+        if (service.isUserProvided()) {\n+            return;\n+        }\n+        List<CloudServiceKey> serviceKeys = client.getServiceKeys(serviceName);\n+        for (CloudServiceKey serviceKey : serviceKeys) {\n+            getStepLogger().info(Messages.DELETING_SERVICE_KEY_FOR_SERVICE, serviceKey.getName(), serviceName);\n+            client.deleteServiceKey(serviceName, serviceKey.getName());\n+        }\n+    }\n+\n+    private void deleteService(CloudControllerClient client, String serviceName) {\n+        getStepLogger().info(Messages.DELETING_SERVICE, serviceName);\n+        client.deleteService(serviceName);\n+        getStepLogger().debug(Messages.SERVICE_DELETED, serviceName);\n+    }\n+\n+    private void processException(DelegateExecution context, Exception e, CloudServiceInstance serviceInstance, String serviceName) {\n+        if (e instanceof CloudOperationException) {\n+            e = evaluateCloudOperationException(context, (CloudOperationException) e, serviceName, serviceInstance.getService()\n+                                                                                                                  .getLabel());\n+            if (e == null) {\n+                return;\n+            }\n+        }\n+        wrapAndThrowException(e, serviceInstance, serviceName);\n+    }\n+\n+    private CloudOperationException evaluateCloudOperationException(DelegateExecution context, CloudOperationException e,\n+                                                                    String serviceName, String label) {\n+        if (e.getStatusCode() == HttpStatus.NOT_FOUND) {\n+            getStepLogger().warn(MessageFormat.format(Messages.COULD_NOT_DELETE_SERVICE, serviceName), e,\n+                                 ExceptionMessageTailMapper.map(configuration, CloudComponents.SERVICE_BROKERS, label));\n+            return null;\n+        }\n+        if (e.getStatusCode() == HttpStatus.BAD_GATEWAY) {\n+            StepsUtil.setServiceOffering(context, Constants.VAR_SERVICE_OFFERING, label);\n+            return new CloudServiceBrokerException(e);\n+        }\n+        return new CloudControllerException(e);\n+\n+    }\n+\n+    private void wrapAndThrowException(Exception e, CloudServiceInstance serviceInstance, String serviceName) {\n+        String msg = buildNewExceptionMessage(e, serviceInstance, serviceName);\n+        throw new SLException(e, msg);\n+    }\n+\n+    private String buildNewExceptionMessage(Exception e, CloudServiceInstance serviceInstance, String serviceName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d34c6dcf7b5f760b8ff7464d6ffd9fde50c51d3"}, "originalPosition": 338}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDc1OTQ1OnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DeleteServicesStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTowNToxMlrOF4JRlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTowNToxMlrOF4JRlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQxNjUzMw==", "bodyText": "Why not just get rid of this method? It is a one-liner anyway.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/799#discussion_r394416533", "createdAt": "2020-03-18T15:05:12Z", "author": {"login": "valentinEmpy"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DeleteServicesStep.java", "diffHunk": "@@ -1,124 +1,232 @@\n-package com.sap.cloud.lm.sl.cf.process.steps;\r\n-\r\n-import java.util.Collections;\r\n-import java.util.List;\r\n-\r\n-import javax.inject.Inject;\r\n-import javax.inject.Named;\r\n-\r\n-import org.cloudfoundry.client.lib.CloudControllerClient;\r\n-import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\r\n-import org.flowable.engine.delegate.DelegateExecution;\r\n-import org.springframework.beans.factory.config.BeanDefinition;\r\n-import org.springframework.context.annotation.Scope;\r\n-\r\n-import com.sap.cloud.lm.sl.cf.client.lib.domain.CloudServiceExtended;\r\n-import com.sap.cloud.lm.sl.cf.client.lib.domain.ImmutableCloudServiceExtended;\r\n-import com.sap.cloud.lm.sl.cf.core.cf.clients.ServiceGetter;\r\n-import com.sap.cloud.lm.sl.cf.core.model.ServiceInstanceWithServiceKeys;\r\n-import com.sap.cloud.lm.sl.cf.core.model.ServiceOperation;\r\n-import com.sap.cloud.lm.sl.cf.process.Messages;\r\n-import com.sap.cloud.lm.sl.cf.process.analytics.model.ServiceAction;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper.CloudComponents;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ServiceOperationGetter;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ServiceProgressReporter;\r\n-import com.sap.cloud.lm.sl.cf.process.util.ServiceRemoval;\r\n-import com.sap.cloud.lm.sl.common.util.MapUtil;\r\n-\r\n-@Named(\"deleteServicesStep\")\r\n-@Scope(BeanDefinition.SCOPE_PROTOTYPE)\r\n-public class DeleteServicesStep extends AsyncFlowableStep {\r\n-\r\n-    private ServiceOperationGetter serviceOperationGetter;\r\n-    private ServiceProgressReporter serviceProgressReporter;\r\n-    private ServiceRemoval serviceRemoval;\r\n-    private ServiceGetter serviceGetter;\r\n-\r\n-    @Inject\r\n-    public DeleteServicesStep(ServiceOperationGetter serviceOperationGetter, ServiceProgressReporter serviceProgressReporter,\r\n-                              ServiceRemoval serviceRemoval, ServiceGetter serviceGetter) {\r\n-        this.serviceOperationGetter = serviceOperationGetter;\r\n-        this.serviceProgressReporter = serviceProgressReporter;\r\n-        this.serviceRemoval = serviceRemoval;\r\n-        this.serviceGetter = serviceGetter;\r\n-    }\r\n-\r\n-    @Override\r\n-    protected StepPhase executeAsyncStep(ExecutionWrapper execution) {\r\n-        String serviceToDelete = StepsUtil.getServiceToDelete(execution.getContext());\r\n-        if (serviceToDelete == null) {\r\n-            getStepLogger().debug(Messages.MISSING_SERVICE_TO_DELETE);\r\n-            return StepPhase.DONE;\r\n-        }\r\n-\r\n-        getStepLogger().debug(Messages.DELETING_DISCONTINUED_SERVICE_0, serviceToDelete);\r\n-\r\n-        CloudControllerClient client = execution.getControllerClient();\r\n-\r\n-        CloudServiceInstance serviceInstanceData = getServiceInstanceData(serviceToDelete, client);\r\n-        if (serviceInstanceData == null) {\r\n-            getStepLogger().info(Messages.SERVICE_IS_ALREADY_DELETED, serviceToDelete);\r\n-            return StepPhase.DONE;\r\n-        }\r\n-        StepsUtil.setServicesData(execution.getContext(), buildCloudServiceExtendedList(serviceInstanceData));\r\n-\r\n-        ServiceInstanceWithServiceKeys serviceInstanceWithServiceKeys = getServiceInstanceWithServiceKeys(client, serviceInstanceData);\r\n-\r\n-        if (isDeletePossible(execution.getContext(), serviceInstanceWithServiceKeys)) {\r\n-            deleteService(execution, serviceInstanceWithServiceKeys);\r\n-            StepsUtil.setTriggeredServiceOperations(execution.getContext(), MapUtil.asMap(serviceToDelete, ServiceOperation.Type.DELETE));\r\n-            return StepPhase.POLL;\r\n-        }\r\n-\r\n-        getStepLogger().warn(Messages.SERVICE_NOT_BE_DELETED_DUE_TO_SERVICE_BINDINGS_AND_SERVICE_KEYS, serviceToDelete);\r\n-        return StepPhase.DONE;\r\n-\r\n-    }\r\n-\r\n-    @Override\r\n-    protected String getStepErrorMessage(DelegateExecution context) {\r\n-        return Messages.ERROR_DELETING_SERVICES;\r\n-    }\r\n-\r\n-    @Override\r\n-    protected String getStepErrorMessageAdditionalDescription(DelegateExecution context) {\r\n-        String offering = StepsUtil.getServiceOffering(context);\r\n-        return ExceptionMessageTailMapper.map(configuration, CloudComponents.SERVICE_BROKERS, offering);\r\n-    }\r\n-\r\n-    private CloudServiceInstance getServiceInstanceData(String serviceToDelete, CloudControllerClient client) {\r\n-        return client.getServiceInstance(serviceToDelete, false);\r\n-    }\r\n-\r\n-    private List<CloudServiceExtended> buildCloudServiceExtendedList(CloudServiceInstance serviceInstanceData) {\r\n-        return Collections.singletonList(buildCloudServiceExtended(serviceInstanceData));\r\n-    }\r\n-\r\n-    private ImmutableCloudServiceExtended buildCloudServiceExtended(CloudServiceInstance service) {\r\n-        return ImmutableCloudServiceExtended.builder()\r\n-                                            .from(service.getService())\r\n-                                            .build();\r\n-    }\r\n-\r\n-    private ServiceInstanceWithServiceKeys getServiceInstanceWithServiceKeys(CloudControllerClient client,\r\n-                                                                             CloudServiceInstance serviceInstanceData) {\r\n-        return serviceGetter.getServiceInstancesWithServiceKeys(client, serviceInstanceData);\r\n-    }\r\n-\r\n-    private boolean isDeletePossible(DelegateExecution context, ServiceInstanceWithServiceKeys serviceInstanceWithServiceKeys) {\r\n-        return StepsUtil.getServiceActionsToExecute(context)\r\n-                        .contains(ServiceAction.RECREATE)\r\n-            || serviceInstanceWithServiceKeys.hasEmptyAssociations();\r\n-    }\r\n-\r\n-    private void deleteService(ExecutionWrapper execution, ServiceInstanceWithServiceKeys serviceInstanceWithServiceKeys) {\r\n-        serviceRemoval.deleteService(execution, serviceInstanceWithServiceKeys);\r\n-    }\r\n-\r\n-    @Override\r\n-    protected List<AsyncExecution> getAsyncStepExecutions(ExecutionWrapper execution) {\r\n-        return Collections.singletonList(new PollServiceDeleteOperationsExecution(serviceOperationGetter, serviceProgressReporter));\r\n-    }\r\n-\r\n-}\r\n+package com.sap.cloud.lm.sl.cf.process.steps;\n+\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.CloudControllerException;\n+import org.cloudfoundry.client.lib.CloudException;\n+import org.cloudfoundry.client.lib.CloudOperationException;\n+import org.cloudfoundry.client.lib.CloudServiceBrokerException;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.cloudfoundry.client.lib.domain.CloudServiceBinding;\n+import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\n+import org.cloudfoundry.client.lib.domain.CloudServiceKey;\n+import org.flowable.engine.delegate.DelegateExecution;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.http.HttpStatus;\n+\n+import com.sap.cloud.lm.sl.cf.client.lib.domain.CloudServiceExtended;\n+import com.sap.cloud.lm.sl.cf.client.lib.domain.ImmutableCloudServiceExtended;\n+import com.sap.cloud.lm.sl.cf.core.model.ServiceOperation;\n+import com.sap.cloud.lm.sl.cf.core.security.serialization.SecureSerializationFacade;\n+import com.sap.cloud.lm.sl.cf.process.Constants;\n+import com.sap.cloud.lm.sl.cf.process.Messages;\n+import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper;\n+import com.sap.cloud.lm.sl.cf.process.util.ExceptionMessageTailMapper.CloudComponents;\n+import com.sap.cloud.lm.sl.cf.process.util.ServiceOperationGetter;\n+import com.sap.cloud.lm.sl.cf.process.util.ServiceProgressReporter;\n+import com.sap.cloud.lm.sl.common.SLException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+\n+@Named(\"deleteServicesStep\")\n+@Scope(BeanDefinition.SCOPE_PROTOTYPE)\n+public class DeleteServicesStep extends AsyncFlowableStep {\n+\n+    private final SecureSerializationFacade secureSerializer = new SecureSerializationFacade();\n+\n+    private ServiceOperationGetter serviceOperationGetter;\n+    private ServiceProgressReporter serviceProgressReporter;\n+\n+    @Inject\n+    public DeleteServicesStep(ServiceOperationGetter serviceOperationGetter, ServiceProgressReporter serviceProgressReporter) {\n+        this.serviceOperationGetter = serviceOperationGetter;\n+        this.serviceProgressReporter = serviceProgressReporter;\n+    }\n+\n+    @Override\n+    protected StepPhase executeAsyncStep(ExecutionWrapper execution) {\n+        getStepLogger().debug(Messages.DELETING_SERVICES);\n+\n+        CloudControllerClient client = execution.getControllerClient();\n+\n+        List<String> servicesToDelete = new ArrayList<>(StepsUtil.getServicesToDelete(execution.getContext()));\n+\n+        if (servicesToDelete.isEmpty()) {\n+            getStepLogger().debug(Messages.MISSING_SERVICES_TO_DELETE);\n+            return StepPhase.DONE;\n+        }\n+\n+        List<CloudServiceExtended> servicesData = getServicesData(servicesToDelete, execution);\n+        List<String> servicesWithoutData = getServicesWithoutData(servicesToDelete, servicesData);\n+        if (!servicesWithoutData.isEmpty()) {\n+            execution.getStepLogger()\n+                     .info(Messages.SERVICES_ARE_ALREADY_DELETED, servicesWithoutData);\n+            servicesToDelete.removeAll(servicesWithoutData);\n+        }\n+        StepsUtil.setServicesData(execution.getContext(), servicesData);\n+\n+        Map<String, ServiceOperation.Type> triggeredServiceOperations = deleteServices(execution.getContext(), client, servicesToDelete);\n+\n+        execution.getStepLogger()\n+                 .debug(Messages.TRIGGERED_SERVICE_OPERATIONS, JsonUtil.toJson(triggeredServiceOperations, true));\n+        StepsUtil.setTriggeredServiceOperations(execution.getContext(), triggeredServiceOperations);\n+\n+        getStepLogger().debug(Messages.SERVICES_DELETED);\n+        return StepPhase.POLL;\n+    }\n+\n+    @Override\n+    protected String getStepErrorMessage(DelegateExecution context) {\n+        return Messages.ERROR_DELETING_SERVICES;\n+    }\n+\n+    @Override\n+    protected String getStepErrorMessageAdditionalDescription(DelegateExecution context) {\n+        String offering = StepsUtil.getServiceOffering(context);\n+        return ExceptionMessageTailMapper.map(configuration, CloudComponents.SERVICE_BROKERS, offering);\n+    }\n+\n+    private List<CloudServiceExtended> getServicesData(List<String> serviceNames, ExecutionWrapper execution) {\n+        CloudControllerClient client = execution.getControllerClient();\n+\n+        return serviceNames.parallelStream()\n+                           .map(name -> client.getService(name, false))\n+                           .filter(Objects::nonNull)\n+                           .map(this::buildCloudServiceExtended)\n+                           .collect(Collectors.toList());\n+    }\n+\n+    private ImmutableCloudServiceExtended buildCloudServiceExtended(CloudService service) {\n+        return ImmutableCloudServiceExtended.builder()\n+                                            .metadata(service.getMetadata())\n+                                            .name(service.getName())\n+                                            .build();\n+    }\n+\n+    private List<String> getServicesWithoutData(List<String> servicesToDelete, List<CloudServiceExtended> servicesData) {\n+        List<String> servicesWithDataNames = servicesData.stream()\n+                                                         .map(CloudServiceExtended::getName)\n+                                                         .collect(Collectors.toList());\n+        return ListUtils.removeAll(servicesToDelete, servicesWithDataNames);\n+    }\n+\n+    private Map<String, ServiceOperation.Type> deleteServices(DelegateExecution context, CloudControllerClient client,\n+                                                              List<String> serviceNames) {\n+        Map<String, ServiceOperation.Type> triggeredServiceOperations = new HashMap<>();\n+\n+        for (String serviceName : serviceNames) {\n+            try {\n+                prepareServicesToDelete(client, serviceName);\n+                deleteService(client, serviceName);\n+                triggeredServiceOperations.put(serviceName, ServiceOperation.Type.DELETE);\n+            } catch (CloudException e) {\n+                processException(context, e, client.getServiceInstance(serviceName), serviceName);\n+            }\n+        }\n+        return triggeredServiceOperations;\n+    }\n+\n+    private void prepareServicesToDelete(CloudControllerClient client, String serviceName) {\n+        unbindService(client, serviceName);\n+        deleteServiceKeys(client, serviceName);\n+    }\n+\n+    private void unbindService(CloudControllerClient client, String serviceName) {\n+        CloudServiceInstance serviceInstance = client.getServiceInstance(serviceName);\n+        List<CloudServiceBinding> bindings = serviceInstance.getBindings();\n+        if (bindings.isEmpty()) {\n+            return;\n+        }\n+        logBindings(bindings);\n+        for (CloudServiceBinding binding : bindings) {\n+            CloudApplication application = StepsUtil.getBoundApplication(client.getApplications(), binding.getApplicationGuid());\n+            if (application == null) {\n+                throw new IllegalStateException(MessageFormat.format(Messages.COULD_NOT_FIND_APPLICATION_WITH_GUID_0,\n+                                                                     binding.getApplicationGuid()));\n+            }\n+            getStepLogger().info(Messages.UNBINDING_SERVICE_FROM_APP, serviceName, application.getName());\n+            client.unbindService(application.getName(), serviceName);\n+        }\n+    }\n+\n+    private void deleteServiceKeys(CloudControllerClient client, String serviceName) {\n+        CloudService service = client.getService(serviceName);\n+        if (service.isUserProvided()) {\n+            return;\n+        }\n+        List<CloudServiceKey> serviceKeys = client.getServiceKeys(serviceName);\n+        for (CloudServiceKey serviceKey : serviceKeys) {\n+            getStepLogger().info(Messages.DELETING_SERVICE_KEY_FOR_SERVICE, serviceKey.getName(), serviceName);\n+            client.deleteServiceKey(serviceName, serviceKey.getName());\n+        }\n+    }\n+\n+    private void deleteService(CloudControllerClient client, String serviceName) {\n+        getStepLogger().info(Messages.DELETING_SERVICE, serviceName);\n+        client.deleteService(serviceName);\n+        getStepLogger().debug(Messages.SERVICE_DELETED, serviceName);\n+    }\n+\n+    private void processException(DelegateExecution context, Exception e, CloudServiceInstance serviceInstance, String serviceName) {\n+        if (e instanceof CloudOperationException) {\n+            e = evaluateCloudOperationException(context, (CloudOperationException) e, serviceName, serviceInstance.getService()\n+                                                                                                                  .getLabel());\n+            if (e == null) {\n+                return;\n+            }\n+        }\n+        wrapAndThrowException(e, serviceInstance, serviceName);\n+    }\n+\n+    private CloudOperationException evaluateCloudOperationException(DelegateExecution context, CloudOperationException e,\n+                                                                    String serviceName, String label) {\n+        if (e.getStatusCode() == HttpStatus.NOT_FOUND) {\n+            getStepLogger().warn(MessageFormat.format(Messages.COULD_NOT_DELETE_SERVICE, serviceName), e,\n+                                 ExceptionMessageTailMapper.map(configuration, CloudComponents.SERVICE_BROKERS, label));\n+            return null;\n+        }\n+        if (e.getStatusCode() == HttpStatus.BAD_GATEWAY) {\n+            StepsUtil.setServiceOffering(context, Constants.VAR_SERVICE_OFFERING, label);\n+            return new CloudServiceBrokerException(e);\n+        }\n+        return new CloudControllerException(e);\n+\n+    }\n+\n+    private void wrapAndThrowException(Exception e, CloudServiceInstance serviceInstance, String serviceName) {\n+        String msg = buildNewExceptionMessage(e, serviceInstance, serviceName);\n+        throw new SLException(e, msg);\n+    }\n+\n+    private String buildNewExceptionMessage(Exception e, CloudServiceInstance serviceInstance, String serviceName) {\n+        if (serviceInstance == null) {\n+            return MessageFormat.format(Messages.ERROR_DELETING_SERVICE_SHORT, serviceName, e.getMessage());\n+        }\n+        CloudService service = serviceInstance.getService();\n+        return MessageFormat.format(Messages.ERROR_DELETING_SERVICE, service.getName(), service.getLabel(), service.getPlan(),\n+                                    e.getMessage());\n+    }\n+\n+    private void logBindings(List<CloudServiceBinding> bindings) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d34c6dcf7b5f760b8ff7464d6ffd9fde50c51d3"}, "originalPosition": 347}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 621, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}