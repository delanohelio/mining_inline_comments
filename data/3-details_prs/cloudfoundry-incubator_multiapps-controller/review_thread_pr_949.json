{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0NzAwMzEz", "number": 949, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODoxMDo0MVrOEibaCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDozMDowMFrOEifWWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTM2MDcyOnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/flowable/Action.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODoxMDo0MVrOHQS2-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwODoxMDo0MVrOHQS2-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njg0ODI0OA==", "bodyText": "The same can be achieved without the class variable with name().toLowerCase()", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/949#discussion_r486848248", "createdAt": "2020-09-11T08:10:41Z", "author": {"login": "radito3"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/flowable/Action.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package org.cloudfoundry.multiapps.controller.process.flowable;\n+\n+import java.text.MessageFormat;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.cloudfoundry.multiapps.controller.process.Messages;\n+\n+public enum Action {\n+\n+    ABORT(\"abort\"), RESUME(\"resume\"), RETRY(\"retry\"), START(\"start\");\n+\n+    private final String actionId;\n+\n+    private static final Map<String, Action> namesToActions = Stream.of(values())\n+                                                                    .collect(Collectors.toMap(Action::getActionId, Function.identity()));\n+\n+    Action(String actionId) {\n+        this.actionId = actionId;\n+    }\n+\n+    public String getActionId() {\n+        return actionId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3eb1cf6d4717fd4df55af981b83d68f4a303c4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTg2MzE5OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/flowable/SetRetryPhaseAdditionalProcessAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTo1NToyMlrOHQYE9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTo1NToyMlrOHQYE9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkzMzc1MA==", "bodyText": "Fix order of methods", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/949#discussion_r486933750", "createdAt": "2020-09-11T09:55:22Z", "author": {"login": "radito3"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/flowable/SetRetryPhaseAdditionalProcessAction.java", "diffHunk": "@@ -25,19 +25,22 @@ public void executeAdditionalProcessAction(String processInstanceId) {\n                       .map(this::toExecutionEntityImpl)\n                       .filter(executionEntityImpl -> executionEntityImpl.getDeadLetterJobCount() > 0)\n                       .map(ExecutionEntityImpl::getProcessInstanceId)\n-                      .forEach(executionProcessId -> flowableFacade.getProcessEngine()\n-                                                                   .getRuntimeService()\n-                                                                   .setVariable(executionProcessId, Variables.STEP_PHASE.getName(),\n-                                                                                StepPhase.RETRY.toString()));\n+                      .forEach(this::setRetryPhaseForProcess);\n     }\n \n-    private ExecutionEntityImpl toExecutionEntityImpl(Execution e) {\n-        return (ExecutionEntityImpl) e;\n+    private void setRetryPhaseForProcess(String executionProcessId) {\n+        flowableFacade.getProcessEngine()\n+                      .getRuntimeService()\n+                      .setVariable(executionProcessId, Variables.STEP_PHASE.getName(), StepPhase.RETRY.toString());\n+    }\n+\n+    private ExecutionEntityImpl toExecutionEntityImpl(Execution execution) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3eb1cf6d4717fd4df55af981b83d68f4a303c4"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTg3NzE2OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/flowable/ProcessActionRegistry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTo1NzozOVrOHQYOVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTo1NzozOVrOHQYOVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkzNjE1MA==", "bodyText": "Wouldn't it be better, now that Action is an enum, that this method takes an Action variable as its input parameter?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/949#discussion_r486936150", "createdAt": "2020-09-11T09:57:39Z", "author": {"login": "radito3"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/flowable/ProcessActionRegistry.java", "diffHunk": "@@ -17,9 +20,10 @@ public ProcessActionRegistry(List<ProcessAction> processActions) {\n \n     public ProcessAction getAction(String actionId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3eb1cf6d4717fd4df55af981b83d68f4a303c4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTkzNzE1OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/util/HistoricOperationEventGetter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDowODoxMVrOHQY3aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTozOTo0N1rOHQbaHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk0NjY2NQ==", "bodyText": "If this is only used in ProcessStepHelper, I don't think we need this extra class.\nAnd, if it's only used to check about the ABORT_EXECUTED event type, I suggest changing this to\nhistoricEventService.createQuery().processId(...).type(ABORT_EXECUTED).list()\nand checking whether this list is empty.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/949#discussion_r486946665", "createdAt": "2020-09-11T10:08:11Z", "author": {"login": "radito3"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/util/HistoricOperationEventGetter.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.cloudfoundry.multiapps.controller.process.util;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.cloudfoundry.multiapps.controller.core.model.HistoricOperationEvent;\n+import org.cloudfoundry.multiapps.controller.core.persistence.service.HistoricOperationEventService;\n+\n+@Named\n+public class HistoricOperationEventGetter {\n+\n+    private final HistoricOperationEventService historicOperationEventService;\n+\n+    @Inject\n+    public HistoricOperationEventGetter(HistoricOperationEventService historicOperationEventService) {\n+        this.historicOperationEventService = historicOperationEventService;\n+    }\n+\n+    public List<HistoricOperationEvent> getHistoricOperationEventsByProcessId(String processId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3eb1cf6d4717fd4df55af981b83d68f4a303c4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk4ODMxOA==", "bodyText": "Used ProcessHelper instead of this class", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/949#discussion_r486988318", "createdAt": "2020-09-11T11:39:47Z", "author": {"login": "IvanBorislavovDimitrov"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/util/HistoricOperationEventGetter.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.cloudfoundry.multiapps.controller.process.util;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.cloudfoundry.multiapps.controller.core.model.HistoricOperationEvent;\n+import org.cloudfoundry.multiapps.controller.core.persistence.service.HistoricOperationEventService;\n+\n+@Named\n+public class HistoricOperationEventGetter {\n+\n+    private final HistoricOperationEventService historicOperationEventService;\n+\n+    @Inject\n+    public HistoricOperationEventGetter(HistoricOperationEventService historicOperationEventService) {\n+        this.historicOperationEventService = historicOperationEventService;\n+    }\n+\n+    public List<HistoricOperationEvent> getHistoricOperationEventsByProcessId(String processId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk0NjY2NQ=="}, "originalCommit": {"oid": "4a3eb1cf6d4717fd4df55af981b83d68f4a303c4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTkzOTc2OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/steps/SyncFlowableStep.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDowOToxMVrOHQY5CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo0MzowNFrOHQbgOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk0NzA4MA==", "bodyText": "This class already has 4 parameters, which is a bit much, and changing it to 5 isn't recommended.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/949#discussion_r486947080", "createdAt": "2020-09-11T10:09:11Z", "author": {"login": "radito3"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/steps/SyncFlowableStep.java", "diffHunk": "@@ -188,7 +191,8 @@ protected ProcessStepHelper getStepHelper() {\n             stepHelper = new ProcessStepHelper(getProgressMessageService(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3eb1cf6d4717fd4df55af981b83d68f4a303c4"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk4OTg4Mw==", "bodyText": "Used immutable instead", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/949#discussion_r486989883", "createdAt": "2020-09-11T11:43:04Z", "author": {"login": "IvanBorislavovDimitrov"}, "path": "multiapps-controller-process/src/main/java/org/cloudfoundry/multiapps/controller/process/steps/SyncFlowableStep.java", "diffHunk": "@@ -188,7 +191,8 @@ protected ProcessStepHelper getStepHelper() {\n             stepHelper = new ProcessStepHelper(getProgressMessageService(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk0NzA4MA=="}, "originalCommit": {"oid": "4a3eb1cf6d4717fd4df55af981b83d68f4a303c4"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTk1MzI5OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/AbortProcessActionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoxMzoyN1rOHQZBSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoxMzoyN1rOHQZBSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk0OTE5Mw==", "bodyText": "Change it to use the concrete processId, not just any string", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/949#discussion_r486949193", "createdAt": "2020-09-11T10:13:27Z", "author": {"login": "radito3"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/AbortProcessActionTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package org.cloudfoundry.multiapps.controller.process.flowable;\n+\n+import static org.mockito.ArgumentMatchers.anyString;\n+\n+import java.util.Collections;\n+\n+import org.cloudfoundry.multiapps.controller.api.model.Operation;\n+import org.cloudfoundry.multiapps.controller.core.model.HistoricOperationEvent;\n+import org.cloudfoundry.multiapps.controller.core.persistence.query.OperationQuery;\n+import org.cloudfoundry.multiapps.controller.core.persistence.service.OperationService;\n+import org.cloudfoundry.multiapps.controller.process.util.HistoricOperationEventPersister;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+\n+class AbortProcessActionTest extends ProcessActionTest {\n+\n+    @Mock\n+    private HistoricOperationEventPersister historicOperationEventPersister;\n+    @Mock\n+    private OperationService operationService;\n+\n+    @BeforeEach\n+    void setUp() {\n+        prepareOperationService();\n+    }\n+\n+    @Test\n+    void testAbortExecution() {\n+        processAction.execute(null, PROCESS_GUID);\n+        Mockito.verify(historicOperationEventPersister)\n+               .add(PROCESS_GUID, HistoricOperationEvent.EventType.ABORTED);\n+        Mockito.verify(historicOperationEventPersister)\n+               .add(PROCESS_GUID, HistoricOperationEvent.EventType.ABORT_EXECUTED);\n+    }\n+\n+    private void prepareOperationService() {\n+        OperationQuery mockedOperationQuery = Mockito.mock(OperationQuery.class);\n+        Mockito.when(mockedOperationQuery.processId(anyString()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3eb1cf6d4717fd4df55af981b83d68f4a303c4"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTk2MDkwOnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/ProcessActionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoxNTo0MFrOHQZFpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoxNTo0MFrOHQZFpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1MDMxMQ==", "bodyText": "When having this many identical function calls, I suggest making a supplier of random uuids and calling its get() method", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/949#discussion_r486950311", "createdAt": "2020-09-11T10:15:40Z", "author": {"login": "radito3"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/ProcessActionTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+package org.cloudfoundry.multiapps.controller.process.flowable;\n+\n+import static org.mockito.ArgumentMatchers.anyString;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.cloudfoundry.multiapps.controller.core.cf.CloudControllerClientProvider;\n+import org.cloudfoundry.multiapps.controller.core.persistence.service.ProgressMessageService;\n+import org.flowable.engine.HistoryService;\n+import org.flowable.engine.ProcessEngine;\n+import org.flowable.engine.RuntimeService;\n+import org.flowable.engine.runtime.Execution;\n+import org.flowable.variable.api.history.HistoricVariableInstanceQuery;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+abstract class ProcessActionTest {\n+\n+    static final String EXECUTION_ID = UUID.randomUUID()\n+                                           .toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3eb1cf6d4717fd4df55af981b83d68f4a303c4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTk2ODEzOnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/ProcessActonRegistryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoxNzo1MFrOHQZKAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoxNzo1MFrOHQZKAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1MTQyNg==", "bodyText": "This test is identical to testGetAbortProcessAction. Either change or remove it", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/949#discussion_r486951426", "createdAt": "2020-09-11T10:17:50Z", "author": {"login": "radito3"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/ProcessActonRegistryTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package org.cloudfoundry.multiapps.controller.process.flowable;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.text.MessageFormat;\n+import java.util.List;\n+\n+import org.cloudfoundry.multiapps.controller.process.Messages;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+class ProcessActonRegistryTest {\n+\n+    private ProcessActionRegistry processActionRegistry;\n+\n+    @BeforeEach\n+    void setUp() {\n+        processActionRegistry = new ProcessActionRegistry(getProcessActions());\n+    }\n+\n+    @Test\n+    void testGetStartProcessAction() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3eb1cf6d4717fd4df55af981b83d68f4a303c4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTk2OTI4OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/ProcessActonRegistryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoxODoxNlrOHQZKxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoxODoxNlrOHQZKxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1MTYyMQ==", "bodyText": "These 3 tests are really similar, so I suggest making them one ParameterizedTest", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/949#discussion_r486951621", "createdAt": "2020-09-11T10:18:16Z", "author": {"login": "radito3"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/ProcessActonRegistryTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package org.cloudfoundry.multiapps.controller.process.flowable;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.text.MessageFormat;\n+import java.util.List;\n+\n+import org.cloudfoundry.multiapps.controller.process.Messages;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+class ProcessActonRegistryTest {\n+\n+    private ProcessActionRegistry processActionRegistry;\n+\n+    @BeforeEach\n+    void setUp() {\n+        processActionRegistry = new ProcessActionRegistry(getProcessActions());\n+    }\n+\n+    @Test\n+    void testGetStartProcessAction() {\n+        ProcessAction abortProcessAction = processActionRegistry.getAction(Action.ABORT.getActionId());\n+        assertEquals(Action.ABORT, abortProcessAction.getAction());\n+    }\n+\n+    @Test\n+    void testGetResumeProcessAction() {\n+        ProcessAction resumeProcessAction = processActionRegistry.getAction(Action.RESUME.getActionId());\n+        assertEquals(Action.RESUME, resumeProcessAction.getAction());\n+    }\n+\n+    @Test\n+    void testGetRetryProcessAction() {\n+        ProcessAction retryProcessAction = processActionRegistry.getAction(Action.RETRY.getActionId());\n+        assertEquals(Action.RETRY, retryProcessAction.getAction());\n+    }\n+\n+    @Test\n+    void testGetAbortProcessAction() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3eb1cf6d4717fd4df55af981b83d68f4a303c4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTk3NDMyOnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/ProcessActonRegistryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoxOTo0OVrOHQZN5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo0MDo1MFrOHQbcGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1MjQyMA==", "bodyText": "Why do you need these mock classes?\nIsn't is possible with Mockito.spy(StartProcessAction.class)?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/949#discussion_r486952420", "createdAt": "2020-09-11T10:19:49Z", "author": {"login": "radito3"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/ProcessActonRegistryTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package org.cloudfoundry.multiapps.controller.process.flowable;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.text.MessageFormat;\n+import java.util.List;\n+\n+import org.cloudfoundry.multiapps.controller.process.Messages;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+class ProcessActonRegistryTest {\n+\n+    private ProcessActionRegistry processActionRegistry;\n+\n+    @BeforeEach\n+    void setUp() {\n+        processActionRegistry = new ProcessActionRegistry(getProcessActions());\n+    }\n+\n+    @Test\n+    void testGetStartProcessAction() {\n+        ProcessAction abortProcessAction = processActionRegistry.getAction(Action.ABORT.getActionId());\n+        assertEquals(Action.ABORT, abortProcessAction.getAction());\n+    }\n+\n+    @Test\n+    void testGetResumeProcessAction() {\n+        ProcessAction resumeProcessAction = processActionRegistry.getAction(Action.RESUME.getActionId());\n+        assertEquals(Action.RESUME, resumeProcessAction.getAction());\n+    }\n+\n+    @Test\n+    void testGetRetryProcessAction() {\n+        ProcessAction retryProcessAction = processActionRegistry.getAction(Action.RETRY.getActionId());\n+        assertEquals(Action.RETRY, retryProcessAction.getAction());\n+    }\n+\n+    @Test\n+    void testGetAbortProcessAction() {\n+        ProcessAction abortProcessAction = processActionRegistry.getAction(Action.ABORT.getActionId());\n+        assertEquals(Action.ABORT, abortProcessAction.getAction());\n+    }\n+\n+    @Test\n+    void testGetInvalidOperation() {\n+        Exception exception = assertThrows(IllegalStateException.class, () -> processActionRegistry.getAction(\"invalid\"));\n+        assertEquals(MessageFormat.format(Messages.UNSUPPORTED_ACTION, \"invalid\"), exception.getMessage());\n+    }\n+\n+    private List<ProcessAction> getProcessActions() {\n+        return List.of(new MockedStartProcessAction(), new MockedResumeProcessAction(), new MockedRetryProcessAction(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3eb1cf6d4717fd4df55af981b83d68f4a303c4"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk4ODgyNg==", "bodyText": "Mockito.spy requires 0 arguments constructor", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/949#discussion_r486988826", "createdAt": "2020-09-11T11:40:50Z", "author": {"login": "IvanBorislavovDimitrov"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/ProcessActonRegistryTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package org.cloudfoundry.multiapps.controller.process.flowable;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+import java.text.MessageFormat;\n+import java.util.List;\n+\n+import org.cloudfoundry.multiapps.controller.process.Messages;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+class ProcessActonRegistryTest {\n+\n+    private ProcessActionRegistry processActionRegistry;\n+\n+    @BeforeEach\n+    void setUp() {\n+        processActionRegistry = new ProcessActionRegistry(getProcessActions());\n+    }\n+\n+    @Test\n+    void testGetStartProcessAction() {\n+        ProcessAction abortProcessAction = processActionRegistry.getAction(Action.ABORT.getActionId());\n+        assertEquals(Action.ABORT, abortProcessAction.getAction());\n+    }\n+\n+    @Test\n+    void testGetResumeProcessAction() {\n+        ProcessAction resumeProcessAction = processActionRegistry.getAction(Action.RESUME.getActionId());\n+        assertEquals(Action.RESUME, resumeProcessAction.getAction());\n+    }\n+\n+    @Test\n+    void testGetRetryProcessAction() {\n+        ProcessAction retryProcessAction = processActionRegistry.getAction(Action.RETRY.getActionId());\n+        assertEquals(Action.RETRY, retryProcessAction.getAction());\n+    }\n+\n+    @Test\n+    void testGetAbortProcessAction() {\n+        ProcessAction abortProcessAction = processActionRegistry.getAction(Action.ABORT.getActionId());\n+        assertEquals(Action.ABORT, abortProcessAction.getAction());\n+    }\n+\n+    @Test\n+    void testGetInvalidOperation() {\n+        Exception exception = assertThrows(IllegalStateException.class, () -> processActionRegistry.getAction(\"invalid\"));\n+        assertEquals(MessageFormat.format(Messages.UNSUPPORTED_ACTION, \"invalid\"), exception.getMessage());\n+    }\n+\n+    private List<ProcessAction> getProcessActions() {\n+        return List.of(new MockedStartProcessAction(), new MockedResumeProcessAction(), new MockedRetryProcessAction(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1MjQyMA=="}, "originalCommit": {"oid": "4a3eb1cf6d4717fd4df55af981b83d68f4a303c4"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTk3NzQ5OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/ResumeProcessActionTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoyMDozNVrOHQZPpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMTo0MToxM1rOHQbcww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1Mjg2OA==", "bodyText": "Why is the resume action called twice here?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/949#discussion_r486952868", "createdAt": "2020-09-11T10:20:35Z", "author": {"login": "radito3"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/ResumeProcessActionTest.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.cloudfoundry.multiapps.controller.process.flowable;\n+\n+import static org.mockito.Mockito.times;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.cloudfoundry.multiapps.controller.process.variables.Variables;\n+import org.flowable.engine.runtime.Execution;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+class ResumeProcessActionTest extends ProcessActionTest {\n+\n+    @Test\n+    void testResumeExecutionWithExecutionsAtReceiveTask() {\n+        processAction.execute(\"fake-user\", PROCESS_GUID);\n+        Mockito.verify(flowableFacade, times(2))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3eb1cf6d4717fd4df55af981b83d68f4a303c4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk4ODk5NQ==", "bodyText": "Because of the root process and one of the parent processes", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/949#discussion_r486988995", "createdAt": "2020-09-11T11:41:13Z", "author": {"login": "IvanBorislavovDimitrov"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/ResumeProcessActionTest.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.cloudfoundry.multiapps.controller.process.flowable;\n+\n+import static org.mockito.Mockito.times;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.cloudfoundry.multiapps.controller.process.variables.Variables;\n+import org.flowable.engine.runtime.Execution;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+class ResumeProcessActionTest extends ProcessActionTest {\n+\n+    @Test\n+    void testResumeExecutionWithExecutionsAtReceiveTask() {\n+        processAction.execute(\"fake-user\", PROCESS_GUID);\n+        Mockito.verify(flowableFacade, times(2))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1Mjg2OA=="}, "originalCommit": {"oid": "4a3eb1cf6d4717fd4df55af981b83d68f4a303c4"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTk4MjY4OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/RetryProcessAdditionalActionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoyMjoxNFrOHQZSwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoyMjoxNFrOHQZSwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1MzY2NQ==", "bodyText": "Same comment as before. Use Supplier", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/949#discussion_r486953665", "createdAt": "2020-09-11T10:22:14Z", "author": {"login": "radito3"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/RetryProcessAdditionalActionTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.cloudfoundry.multiapps.controller.process.flowable;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.times;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.cloudfoundry.multiapps.controller.core.persistence.query.ProgressMessageQuery;\n+import org.cloudfoundry.multiapps.controller.core.persistence.service.ProgressMessageService;\n+import org.flowable.engine.runtime.Execution;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+class RetryProcessAdditionalActionTest {\n+\n+    private static final String PROCESS_GUID = UUID.randomUUID()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3eb1cf6d4717fd4df55af981b83d68f4a303c4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTk4NTg3OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/RetryProcessAdditionalActionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoyMzoxOFrOHQZUnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoyMzoxOFrOHQZUnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1NDE0MA==", "bodyText": "We can use List.of(...) now that we have Java 11", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/949#discussion_r486954140", "createdAt": "2020-09-11T10:23:18Z", "author": {"login": "radito3"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/RetryProcessAdditionalActionTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package org.cloudfoundry.multiapps.controller.process.flowable;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.times;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.cloudfoundry.multiapps.controller.core.persistence.query.ProgressMessageQuery;\n+import org.cloudfoundry.multiapps.controller.core.persistence.service.ProgressMessageService;\n+import org.flowable.engine.runtime.Execution;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+class RetryProcessAdditionalActionTest {\n+\n+    private static final String PROCESS_GUID = UUID.randomUUID()\n+                                                   .toString();\n+    private static final String EXECUTION_1_ACTIVITY_ID = UUID.randomUUID()\n+                                                              .toString();\n+    private static final String EXECUTION_2_ACTIVITY_ID = UUID.randomUUID()\n+                                                              .toString();\n+\n+    @Mock\n+    private FlowableFacade flowableFacade;\n+    @Mock\n+    private ProgressMessageService progressMessageService;\n+    @Mock\n+    private ProgressMessageQuery progressMessageQuery;\n+    @InjectMocks\n+    private RetryProcessAdditionalAction retryProcessAdditionalAction;\n+\n+    @BeforeEach\n+    void setUp() throws Exception {\n+        MockitoAnnotations.openMocks(this)\n+                          .close();\n+        prepareFlowableFacade();\n+        prepareProgressMessageService();\n+        prepareProgressMessageQuery();\n+    }\n+\n+    @Test\n+    void testExecuteAdditionalAction() {\n+        retryProcessAdditionalAction.executeAdditionalProcessAction(PROCESS_GUID);\n+        Mockito.verify(progressMessageQuery, times(2))\n+               .delete();\n+    }\n+\n+    private void prepareFlowableFacade() {\n+        List<Execution> mockedExecutions = getMockedExecutions();\n+        Mockito.when(flowableFacade.getActiveProcessExecutions(PROCESS_GUID))\n+               .thenReturn(mockedExecutions);\n+    }\n+\n+    private List<Execution> getMockedExecutions() {\n+        Execution firstExecution = Mockito.mock(Execution.class);\n+        Mockito.when(firstExecution.getActivityId())\n+               .thenReturn(EXECUTION_1_ACTIVITY_ID);\n+        Execution secondExecution = Mockito.mock(Execution.class);\n+        Mockito.when(secondExecution.getActivityId())\n+               .thenReturn(EXECUTION_2_ACTIVITY_ID);\n+        return Arrays.asList(firstExecution, secondExecution);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3eb1cf6d4717fd4df55af981b83d68f4a303c4"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NTk4ODA0OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/SetRetryPhaseAdditionalProcessActionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoyNDowM1rOHQZV3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoyNDowM1rOHQZV3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1NDQ2Mw==", "bodyText": "Use Supplier", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/949#discussion_r486954463", "createdAt": "2020-09-11T10:24:03Z", "author": {"login": "radito3"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/flowable/SetRetryPhaseAdditionalProcessActionTest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.cloudfoundry.multiapps.controller.process.flowable;\n+\n+import static org.mockito.Mockito.never;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.UUID;\n+\n+import org.cloudfoundry.multiapps.controller.process.steps.StepPhase;\n+import org.cloudfoundry.multiapps.controller.process.variables.Variables;\n+import org.flowable.engine.ProcessEngine;\n+import org.flowable.engine.RuntimeService;\n+import org.flowable.engine.impl.persistence.entity.ExecutionEntityImpl;\n+import org.flowable.engine.runtime.Execution;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+class SetRetryPhaseAdditionalProcessActionTest {\n+\n+    private static final String PROCESS_GUID = UUID.randomUUID()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3eb1cf6d4717fd4df55af981b83d68f4a303c4"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjAwNjY0OnYy", "diffSide": "RIGHT", "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/steps/ProcessStepHelperTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDozMDowMFrOHQZhDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDozMDowMFrOHQZhDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1NzMyNg==", "bodyText": "Extract in method", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/949#discussion_r486957326", "createdAt": "2020-09-11T10:30:00Z", "author": {"login": "radito3"}, "path": "multiapps-controller-process/src/test/java/org/cloudfoundry/multiapps/controller/process/steps/ProcessStepHelperTest.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.cloudfoundry.multiapps.controller.process.steps;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.multiapps.common.ContentException;\n+import org.cloudfoundry.multiapps.common.SLException;\n+import org.cloudfoundry.multiapps.controller.core.model.ErrorType;\n+import org.cloudfoundry.multiapps.controller.core.model.HistoricOperationEvent;\n+import org.cloudfoundry.multiapps.controller.core.model.ImmutableHistoricOperationEvent;\n+import org.cloudfoundry.multiapps.controller.core.persistence.service.ProgressMessageService;\n+import org.cloudfoundry.multiapps.controller.persistence.services.ProcessLogger;\n+import org.cloudfoundry.multiapps.controller.persistence.services.ProcessLogsPersister;\n+import org.cloudfoundry.multiapps.controller.process.Messages;\n+import org.cloudfoundry.multiapps.controller.process.util.HistoricOperationEventGetter;\n+import org.cloudfoundry.multiapps.controller.process.util.StepLogger;\n+import org.cloudfoundry.multiapps.controller.process.variables.Variables;\n+import org.flowable.bpmn.model.FlowElement;\n+import org.flowable.bpmn.model.SubProcess;\n+import org.flowable.engine.ProcessEngineConfiguration;\n+import org.flowable.engine.RuntimeService;\n+import org.flowable.engine.delegate.DelegateExecution;\n+import org.flowable.engine.runtime.Execution;\n+import org.flowable.engine.runtime.ExecutionQuery;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+\n+class ProcessStepHelperTest {\n+\n+    private static final String CORRELATION_GUID = UUID.randomUUID()\n+                                                       .toString();\n+    private static final String TASK_GUID = UUID.randomUUID()\n+                                                .toString();\n+\n+    @Mock\n+    private ProgressMessageService progressMessageService;\n+    @Mock\n+    private ProcessLogsPersister processLogsPersister;\n+    @Mock\n+    private StepLogger stepLogger;\n+    @Mock\n+    private ProcessEngineConfiguration processEngineConfiguration;\n+    @Mock\n+    private HistoricOperationEventGetter historicOperationEventGetter;\n+    @Mock\n+    private ProcessContext context;\n+    @Mock\n+    private DelegateExecution execution;\n+    private ProcessStepHelper processStepHelper;\n+\n+    @BeforeEach\n+    void setUp() throws Exception {\n+        MockitoAnnotations.openMocks(this)\n+                          .close();\n+        prepareStepLogger();\n+        prepareContext();\n+        processStepHelper = new ProcessStepHelper(progressMessageService,\n+                                                  stepLogger,\n+                                                  processLogsPersister,\n+                                                  processEngineConfiguration,\n+                                                  historicOperationEventGetter);\n+    }\n+\n+    @Test\n+    void testPostExecutionStep() {\n+        Mockito.when(context.getVariable(Variables.TASK_ID))\n+               .thenReturn(TASK_GUID);\n+        FlowElement flowElement = Mockito.mock(SubProcess.class);\n+        Mockito.when(execution.getCurrentFlowElement())\n+               .thenReturn(flowElement);\n+\n+        processStepHelper.postExecuteStep(context, StepPhase.DONE);\n+        Mockito.verify(processLogsPersister)\n+               .persistLogs(CORRELATION_GUID, TASK_GUID);\n+        Mockito.verify(context)\n+               .setVariable(Variables.STEP_EXECUTION, StepPhase.DONE.toString());\n+    }\n+\n+    @Test\n+    void testPreExecuteStepWithoutError() {\n+        Mockito.when(execution.getCurrentActivityId())\n+               .thenReturn(\"activityId\");\n+        processStepHelper.preExecuteStep(context, StepPhase.EXECUTE);\n+        Mockito.verify(context)\n+               .setVariable(Variables.TASK_ID, \"activityId\");\n+        Mockito.verify(context)\n+               .setVariable(Variables.STEP_PHASE, StepPhase.EXECUTE);\n+    }\n+\n+    @Test\n+    void testPreExecuteStepWithError() {\n+        Mockito.when(execution.getCurrentActivityId())\n+               .thenReturn(\"activityId\");\n+        Mockito.when(context.getVariable(Variables.ERROR_TYPE))\n+               .thenReturn(ErrorType.CONTENT_ERROR);\n+        processStepHelper.preExecuteStep(context, StepPhase.DONE);\n+        Mockito.verify(context)\n+               .setVariable(Variables.TASK_ID, \"activityId\");\n+        Mockito.verify(context)\n+               .setVariable(Variables.STEP_PHASE, StepPhase.DONE);\n+        Mockito.verify(context)\n+               .removeVariable(Variables.ERROR_TYPE);\n+    }\n+\n+    @Test\n+    void testLogExceptionAndStoreExceptionContentError() {\n+        prepareProgressMessagesService();\n+        processStepHelper.logExceptionAndStoreProgressMessage(context, new ContentException(\"content exception\"));\n+        Mockito.verify(context)\n+               .setVariable(Variables.ERROR_TYPE, ErrorType.CONTENT_ERROR);\n+        Mockito.verify(progressMessageService)\n+               .add(any());\n+    }\n+\n+    @Test\n+    void testLogExceptionAndStoreExceptionUnknownError() {\n+        prepareProgressMessagesService();\n+        processStepHelper.logExceptionAndStoreProgressMessage(context, new RuntimeException(\"runtime exception\"));\n+        Mockito.verify(context)\n+               .setVariable(Variables.ERROR_TYPE, ErrorType.UNKNOWN_ERROR);\n+        Mockito.verify(progressMessageService)\n+               .add(any());\n+    }\n+\n+    @Test\n+    void testFailStepPhaseAbortIsInvoked() {\n+        prepareHistoricOperationsEventGetter(HistoricOperationEvent.EventType.STARTED, HistoricOperationEvent.EventType.FINISHED,\n+                                             HistoricOperationEvent.EventType.ABORT_EXECUTED);\n+        Exception exception = Assertions.assertThrows(SLException.class, () -> processStepHelper.failStepIfProcessIsAborted(context));\n+        Assertions.assertEquals(Messages.PROCESS_WAS_ABORTED, exception.getMessage());\n+    }\n+\n+    @Test\n+    void testFailedStepPhaseAbortIsNotInvoked() {\n+        prepareHistoricOperationsEventGetter(HistoricOperationEvent.EventType.STARTED, HistoricOperationEvent.EventType.FINISHED);\n+        Assertions.assertDoesNotThrow(() -> processStepHelper.failStepIfProcessIsAborted(context));\n+    }\n+\n+    private void prepareStepLogger() {\n+        ProcessLogger processLogger = Mockito.mock(ProcessLogger.class);\n+        Mockito.when(stepLogger.getProcessLogger())\n+               .thenReturn(processLogger);\n+    }\n+\n+    private void prepareContext() {\n+        Mockito.when(context.getVariable(Variables.CORRELATION_ID))\n+               .thenReturn(CORRELATION_GUID);\n+        Mockito.when(context.getExecution())\n+               .thenReturn(execution);\n+    }\n+\n+    private void prepareProgressMessagesService() {\n+        RuntimeService runtimeService = Mockito.mock(RuntimeService.class);\n+        ExecutionQuery executionQuery = Mockito.mock(ExecutionQuery.class);\n+        Mockito.when(processEngineConfiguration.getRuntimeService())\n+               .thenReturn(runtimeService);\n+        Mockito.when(runtimeService.createExecutionQuery())\n+               .thenReturn(executionQuery);\n+        Mockito.when(executionQuery.processInstanceId(any()))\n+               .thenReturn(executionQuery);\n+        List<Execution> mockedExecutions = getMockedExecutions();\n+        Mockito.when(executionQuery.list())\n+               .thenReturn(mockedExecutions);\n+    }\n+\n+    private List<Execution> getMockedExecutions() {\n+        Execution execution = Mockito.mock(Execution.class);\n+        Mockito.when(execution.getActivityId())\n+               .thenReturn(\"activityId\");\n+        return Collections.singletonList(execution);\n+    }\n+\n+    private void prepareHistoricOperationsEventGetter(HistoricOperationEvent.EventType... eventTypes) {\n+        List<HistoricOperationEvent> historicOperationEvents = mapEventTypesToHistoricEvents(eventTypes);\n+        Mockito.when(historicOperationEventGetter.getHistoricOperationEventsByProcessId(CORRELATION_GUID))\n+               .thenReturn(historicOperationEvents);\n+    }\n+\n+    private List<HistoricOperationEvent> mapEventTypesToHistoricEvents(HistoricOperationEvent.EventType... eventTypes) {\n+        return Arrays.stream(eventTypes)\n+                     .map(eventType -> ImmutableHistoricOperationEvent.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3eb1cf6d4717fd4df55af981b83d68f4a303c4"}, "originalPosition": 190}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 415, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}