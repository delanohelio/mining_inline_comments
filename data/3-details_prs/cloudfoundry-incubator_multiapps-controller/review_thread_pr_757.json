{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MzMzODU2", "number": 757, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToxMzo1MlrODfd_GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTozMjo0MlrODfeZJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzIzNzM2OnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToxMzo1MlrOFpMEUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToxMzo1MlrOFpMEUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczMzY1MQ==", "bodyText": "Let's add unit test for that", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/757#discussion_r378733651", "createdAt": "2020-02-13T09:13:52Z", "author": {"login": "boyan-velinov"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java", "diffHunk": "@@ -44,10 +46,21 @@\n         List<CloudEntity> mtaMetadataEntities = mtaMetadataEntityCollectors.stream()\n                                                                            .map(collector -> collector.collect(client, criteria))\n                                                                            .flatMap(List::stream)\n+                                                                           .filter(this::nonEmptyMtaId)\n                                                                            .collect(Collectors.toList());\n         return mtaMetadataEntityAggregator.aggregate(mtaMetadataEntities);\n     }\n \n+    private boolean nonEmptyMtaId(CloudEntity entity) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68405b4e1bfd7ca32e02462ba3368b143d3db751"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzIzOTAxOnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToxNDoyNlrOFpMFaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToxNDoyNlrOFpMFaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczMzkzMQ==", "bodyText": "Is it a good idea to use Optional for such composition of nullable objects", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/757#discussion_r378733931", "createdAt": "2020-02-13T09:14:26Z", "author": {"login": "boyan-velinov"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java", "diffHunk": "@@ -44,10 +46,21 @@\n         List<CloudEntity> mtaMetadataEntities = mtaMetadataEntityCollectors.stream()\n                                                                            .map(collector -> collector.collect(client, criteria))\n                                                                            .flatMap(List::stream)\n+                                                                           .filter(this::nonEmptyMtaId)\n                                                                            .collect(Collectors.toList());\n         return mtaMetadataEntityAggregator.aggregate(mtaMetadataEntities);\n     }\n \n+    private boolean nonEmptyMtaId(CloudEntity entity) {\n+        Metadata serviceMetadata = entity.getV3Metadata();\n+        if (serviceMetadata == null || serviceMetadata.getLabels() == null) {\n+            return false;\n+        }\n+        String mtaId = serviceMetadata.getLabels()\n+                                      .get(MtaMetadataLabels.MTA_ID);\n+        return !StringUtils.isEmpty(mtaId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68405b4e1bfd7ca32e02462ba3368b143d3db751"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzI0MTUzOnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DetachServicesFromMtaStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToxNToxNlrOFpMG7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToxNToxNlrOFpMG7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczNDMxNw==", "bodyText": "Can we have some unit tests for the step", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/757#discussion_r378734317", "createdAt": "2020-02-13T09:15:16Z", "author": {"login": "boyan-velinov"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DetachServicesFromMtaStep.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.sap.cloud.lm.sl.cf.process.steps;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataLabels;\n+import com.sap.cloud.lm.sl.cf.process.message.Messages;\n+import org.apache.commons.lang3.StringUtils;\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\n+import org.cloudfoundry.client.v3.Metadata;\n+import org.flowable.engine.delegate.DelegateExecution;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.context.annotation.Scope;\n+\n+import javax.inject.Named;\n+import java.text.MessageFormat;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+@Named(\"detachServicesFromMtaStep\")\n+@Scope(BeanDefinition.SCOPE_PROTOTYPE)\n+public class DetachServicesFromMtaStep extends SyncFlowableStep {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68405b4e1bfd7ca32e02462ba3368b143d3db751"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzI3NDMyOnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ApplicationCloudModelBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOToyNDozNVrOFpMa0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMToxNzo0OFrOFpQEFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczOTQxMA==", "bodyText": "What will happen if resource has type \"existing-service-key\"", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/757#discussion_r378739410", "createdAt": "2020-02-13T09:24:35Z", "author": {"login": "boyan-velinov"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ApplicationCloudModelBuilder.java", "diffHunk": "@@ -117,18 +116,10 @@ protected CloudApplicationExtended getApplication(Module module) {\n                                                 .dockerInfo(parseParameters(parametersList, new DockerInfoParser()))\r\n                                                 .attributesUpdateStrategy(getApplicationAttributesUpdateStrategy(parametersList))\r\n                                                 .v3Metadata(ApplicationMetadataBuilder.build(deploymentDescriptor, module,\r\n-                                                                                             resourcesAndResourceTypes))\r\n+                                                                                             getApplicationServices(module)))\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50a1d5b11de41facd7e2761d92d787c003c24246"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc5OTEyNQ==", "bodyText": "Tested, seems fine as the filtering works.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/757#discussion_r378799125", "createdAt": "2020-02-13T11:17:48Z", "author": {"login": "valentinEmpy"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ApplicationCloudModelBuilder.java", "diffHunk": "@@ -117,18 +116,10 @@ protected CloudApplicationExtended getApplication(Module module) {\n                                                 .dockerInfo(parseParameters(parametersList, new DockerInfoParser()))\r\n                                                 .attributesUpdateStrategy(getApplicationAttributesUpdateStrategy(parametersList))\r\n                                                 .v3Metadata(ApplicationMetadataBuilder.build(deploymentDescriptor, module,\r\n-                                                                                             resourcesAndResourceTypes))\r\n+                                                                                             getApplicationServices(module)))\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODczOTQxMA=="}, "originalCommit": {"oid": "50a1d5b11de41facd7e2761d92d787c003c24246"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzI5NTQyOnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/BuildCloudUndeployModelStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTozMDoyNlrOFpMnog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTozMDoyNlrOFpMnog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc0MjY5MA==", "bodyText": "Add unit test", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/757#discussion_r378742690", "createdAt": "2020-02-13T09:30:26Z", "author": {"login": "boyan-velinov"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/BuildCloudUndeployModelStep.java", "diffHunk": "@@ -144,20 +154,23 @@ private void setComponentsToUndeploy(DelegateExecution context, List<String> ser\n     }\n \n     private List<String> computeServicesToDelete(List<DeployedMtaApplication> appsWithoutChange,\n-                                                 List<DeployedMtaService> deployedMtaServices, Set<String> servicesForApplications) {\n+                                                 List<DeployedMtaService> deployedMtaServices, Set<String> servicesForApplications,\n+                                                 List<String> servicesForCurrentDeployment) {\n         return deployedMtaServices.stream()\n                                   .map(DeployedMtaService::getName)\n-                                  .filter(name -> shouldDeleteService(appsWithoutChange, name, servicesForApplications))\n+                                  .filter(service -> shouldDeleteService(service, appsWithoutChange, servicesForApplications,\n+                                                                         servicesForCurrentDeployment))\n                                   .sorted()\n                                   .collect(Collectors.toList());\n     }\n \n-    private boolean shouldDeleteService(List<DeployedMtaApplication> appsToKeep, String service, Set<String> servicesForApplications) {\n+    private boolean shouldDeleteService(String service, List<DeployedMtaApplication> appsToKeep, Set<String> servicesForApplications,\n+                                        List<String> servicesForCurrentDeployment) {\n         return appsToKeep.stream()\n                          .flatMap(module -> module.getBoundMtaServices()\n                                                   .stream())\n                          .noneMatch(service::equalsIgnoreCase)\n-            && !servicesForApplications.contains(service);\n+            && !servicesForApplications.contains(service) && !servicesForCurrentDeployment.contains(service);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f3d81b6dbf72aae2166abe116f5dee6ee7622ee"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzMwNDA3OnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DetachServicesFromMtaStep.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTozMjo0MlrOFpMsug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTozMjo0MlrOFpMsug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc0Mzk5NA==", "bodyText": "Better clean everything MTA related, not only MTA_ID", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/757#discussion_r378743994", "createdAt": "2020-02-13T09:32:42Z", "author": {"login": "boyan-velinov"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DetachServicesFromMtaStep.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.sap.cloud.lm.sl.cf.process.steps;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataLabels;\n+import com.sap.cloud.lm.sl.cf.process.message.Messages;\n+import org.apache.commons.lang3.StringUtils;\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\n+import org.cloudfoundry.client.v3.Metadata;\n+import org.flowable.engine.delegate.DelegateExecution;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.context.annotation.Scope;\n+\n+import javax.inject.Named;\n+import java.text.MessageFormat;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n+@Named(\"detachServicesFromMtaStep\")\n+@Scope(BeanDefinition.SCOPE_PROTOTYPE)\n+public class DetachServicesFromMtaStep extends SyncFlowableStep {\n+\n+    @Override\n+    protected StepPhase executeStep(ExecutionWrapper execution) {\n+        getStepLogger().debug(Messages.DETACHING_SERVICES_FROM_MTA);\n+\n+        List<String> serviceNamesToDetachFromMta = StepsUtil.getServicesToDelete(execution.getContext());\n+        CloudControllerClient client = execution.getControllerClient();\n+        List<CloudServiceInstance> servicesToDetachFromMta = getServices(serviceNamesToDetachFromMta, client);\n+        deleteMtaMetadataFromServices(servicesToDetachFromMta, client);\n+\n+        getStepLogger().debug(Messages.SERVICES_DETACHED_FROM_MTA);\n+        return StepPhase.DONE;\n+    }\n+\n+    private List<CloudServiceInstance> getServices(List<String> serviceNames, CloudControllerClient client) {\n+        return serviceNames.stream()\n+                           .map(client::getServiceInstance)\n+                           .collect(Collectors.toList());\n+    }\n+\n+    private void deleteMtaMetadataFromServices(List<CloudServiceInstance> servicesToDetachFromMta, CloudControllerClient client) {\n+        for (CloudServiceInstance serviceToDetachFromMta : servicesToDetachFromMta) {\n+            Metadata serviceMetadata = serviceToDetachFromMta.getV3Metadata();\n+            if (serviceMetadata == null) {\n+                continue;\n+            }\n+            getStepLogger().info(MessageFormat.format(Messages.DETACHING_SERVICE_0_FROM_MTA, serviceToDetachFromMta.getName()));\n+            UUID serviceGuid = serviceToDetachFromMta.getMetadata()\n+                                                     .getGuid();\n+            client.updateServiceMetadata(serviceGuid, getMetadataWithEmptyMtaId(serviceMetadata));\n+        }\n+    }\n+\n+    // FIXME Once the fix for deleting metadata is available in cf-java-client, the whole MTA metadata must be deleted instead of setting an empty MTA_ID value\n+    private Metadata getMetadataWithEmptyMtaId(Metadata metadata) {\n+        return Metadata.builder()\n+                       .from(metadata)\n+                       .label(MtaMetadataLabels.MTA_ID, StringUtils.EMPTY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68405b4e1bfd7ca32e02462ba3368b143d3db751"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 594, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}