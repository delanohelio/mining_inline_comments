{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNjI0NTEy", "number": 726, "title": "Metadata", "bodyText": "", "createdAt": "2020-01-14T13:05:56Z", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726", "merged": true, "mergeCommit": {"oid": "0880f89519741a2bd7ee77e9e908e9cb264e2991"}, "closed": true, "closedAt": "2020-02-05T17:41:52Z", "author": {"login": "valentinEmpy"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9Z9BHgBqjI5NzYzMzExNzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBZrt3gBqjMwMTA5NDI2MjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b4a9551277361d10b0114d081f4c9d1a0ac5dfd", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/0b4a9551277361d10b0114d081f4c9d1a0ac5dfd", "committedDate": "2020-01-14T13:04:38Z", "message": "Metadata unit test fixes and bug fix"}, "afterCommit": {"oid": "8bc405963750a01048a97b993916b86a75f8dd2c", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/8bc405963750a01048a97b993916b86a75f8dd2c", "committedDate": "2020-01-24T07:14:00Z", "message": "Refactoring Mta Metadata"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8bc405963750a01048a97b993916b86a75f8dd2c", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/8bc405963750a01048a97b993916b86a75f8dd2c", "committedDate": "2020-01-24T07:14:00Z", "message": "Refactoring Mta Metadata"}, "afterCommit": {"oid": "e1ac8c0452fa919dfd235a0a924742b9d0f9b292", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/e1ac8c0452fa919dfd235a0a924742b9d0f9b292", "committedDate": "2020-01-24T07:42:30Z", "message": "Refactoring Mta Metadata"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1ac8c0452fa919dfd235a0a924742b9d0f9b292", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/e1ac8c0452fa919dfd235a0a924742b9d0f9b292", "committedDate": "2020-01-24T07:42:30Z", "message": "Refactoring Mta Metadata"}, "afterCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/11d9462ec98a34c4811fb8c58bede26e204d11fe", "committedDate": "2020-01-24T07:59:06Z", "message": "Refactoring Mta Metadata"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODQzNjM2", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#pullrequestreview-347843636", "createdAt": "2020-01-24T09:50:12Z", "commit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "state": "COMMENTED", "comments": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOTo1MDoxMlrOFhYfaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMTo0MTo1MVrOFhbPmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU0ODU4NQ==", "bodyText": "Why are we creating 2 streams from lists and then collect into a list?\nWhy don't we just use ListUtils.union(List, List) ?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370548585", "createdAt": "2020-01-24T09:50:12Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityAggregator;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityCollector;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.MtaMetadataEntity;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteriaBuilder;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+\n+@Component\n+public class DeployedMtaDetector {\n+\n+    @Autowired\n+    private List<MtaMetadataEntityCollector<?>> mtaMetadataEntityCollectors;\n+\n+    @Autowired\n+    private MtaMetadataEntityAggregator mtaMetadataEntityAggregator;\n+\n+    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n+        MtaMetadataCriteria selectionCriteria = MtaMetadataCriteriaBuilder.builder()\n+                                                                          .label(MtaMetadataCriteriaBuilder.LABEL_MTA_ID)\n+                                                                          .exists()\n+                                                                          .build();\n+        List<DeployedMta> deployedMtas = getDeployedMtasByMetadataSelectionCriteria(selectionCriteria, client);\n+        List<DeployedMta> deployedMtasByEnv = getDeployedMtasByEnv(client).stream()\n+                                                                          .filter(deployedMtaByEnv -> !deployedMtas.contains(deployedMtaByEnv))\n+                                                                          .collect(Collectors.toList());\n+        return Stream.concat(deployedMtas.stream(), deployedMtasByEnv.stream())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1Mzg0NQ==", "bodyText": "I think a cleaner way of doing this is collecting like this\nCollectors.toMap(mta -> mta.getMetadata().getId(), mta -> mta, this::mergeMtas)\nThis way, there won't be a need to use optional and the map's values could be directly passed to a list constructor", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370553845", "createdAt": "2020-01-24T10:02:01Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java", "diffHunk": "@@ -0,0 +1,118 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityAggregator;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityCollector;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.MtaMetadataEntity;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteriaBuilder;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+\n+@Component\n+public class DeployedMtaDetector {\n+\n+    @Autowired\n+    private List<MtaMetadataEntityCollector<?>> mtaMetadataEntityCollectors;\n+\n+    @Autowired\n+    private MtaMetadataEntityAggregator mtaMetadataEntityAggregator;\n+\n+    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n+        MtaMetadataCriteria selectionCriteria = MtaMetadataCriteriaBuilder.builder()\n+                                                                          .label(MtaMetadataCriteriaBuilder.LABEL_MTA_ID)\n+                                                                          .exists()\n+                                                                          .build();\n+        List<DeployedMta> deployedMtas = getDeployedMtasByMetadataSelectionCriteria(selectionCriteria, client);\n+        List<DeployedMta> deployedMtasByEnv = getDeployedMtasByEnv(client).stream()\n+                                                                          .filter(deployedMtaByEnv -> !deployedMtas.contains(deployedMtaByEnv))\n+                                                                          .collect(Collectors.toList());\n+        return Stream.concat(deployedMtas.stream(), deployedMtasByEnv.stream())\n+                     .collect(Collectors.toList());\n+    }\n+\n+    private List<DeployedMta> getDeployedMtasByMetadataSelectionCriteria(MtaMetadataCriteria criteria, CloudControllerClient client) {\n+        List<MtaMetadataEntity> mtaMetadataEntities = mtaMetadataEntityCollectors.stream()\n+                                                                                 .map(collector -> collector.collect(criteria, client))\n+                                                                                 .flatMap(List::stream)\n+                                                                                 .collect(Collectors.toList());\n+        List<DeployedMta> deployedMtas = mtaMetadataEntityAggregator.aggregate(mtaMetadataEntities);\n+        return processDeployedMtas(deployedMtas);\n+    }\n+\n+    private List<DeployedMta> processDeployedMtas(List<DeployedMta> deployedMtas) {\n+        List<DeployedMta> mergedMtasById = mergeDifferentVersionsOfMtasWithSameId(deployedMtas);\n+        return removeEmptyMtas(mergedMtasById);\n+    }\n+\n+    private List<DeployedMta> mergeDifferentVersionsOfMtasWithSameId(List<DeployedMta> mtas) {\n+        Map<String, Optional<DeployedMta>> deployedMtasById = mtas.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1NDg3Ng==", "bodyText": "Why not use Immutables?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370554876", "createdAt": "2020-01-24T10:04:21Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/ApplicationMtaMetadata.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata;\n+\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+\n+public class ApplicationMtaMetadata {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1NTIxMg==", "bodyText": "Same as the above comment.\nThis is unneeded complexity with the merging of mtas.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370555212", "createdAt": "2020-01-24T10:05:12Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetectorEnv.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ApplicationMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.ApplicationMtaMetadataEnvExtractor;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+//TODO delete this class and its usages after the CF metadata becomes the go to metadata approach\n+//A release note should be already present explaining that the migration (at least one mta redeploy) is mandatory\n+public class DeployedMtaDetectorEnv {\n+\n+    /**\n+     * Detects all deployed components on this platform.\n+     *\n+     */\n+\n+    private final CloudControllerClient client;\n+\n+    public DeployedMtaDetectorEnv(CloudControllerClient client) {\n+        this.client = client;\n+    }\n+\n+    public List<DeployedMta> detectAllDeployedComponents() {\n+        List<DeployedMta> deployedMtas = client.getApplications()\n+                                               .stream()\n+                                               .map(ApplicationMtaMetadataEnvExtractor::extractMetadata)\n+                                               .filter(Objects::nonNull)\n+                                               .map(this::getDeployedMta)\n+                                               .collect(Collectors.toList());\n+        return mergeDifferentVersionsOfMtasWithSameId(deployedMtas);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1NTM1Mg==", "bodyText": "Immutables?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370555352", "createdAt": "2020-01-24T10:05:33Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/ServiceMtaMetadata.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata;\n+\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+\n+public class ServiceMtaMetadata {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1NjA3Mg==", "bodyText": "Why not give the prefix and label a default non-null value and/or check when they are being set that the value passed is not null and change this to return prefix + label?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370556072", "createdAt": "2020-01-24T10:07:06Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/criteria/LabelBuilder.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+public class LabelBuilder {\n+    private MtaMetadataCriteriaBuilder mtaMetadataCriteriaBuilder;\n+    private String label;\n+    private String prefix;\n+\n+    public LabelBuilder(MtaMetadataCriteriaBuilder mtaMetadataCriteriaBuilder, String label) {\n+        this.mtaMetadataCriteriaBuilder = mtaMetadataCriteriaBuilder;\n+        this.label = label;\n+    }\n+\n+    public LabelBuilder withPrefix(String prefix) {\n+        MtaMetadataCriteriaValidator.validateLabelKeyPrefix(prefix);\n+        this.prefix = prefix;\n+        return this;\n+    }\n+\n+    public FinalizingBuilder exists() {\n+        return completeQuery(buildLabel());\n+    }\n+\n+    public FinalizingBuilder notExists() {\n+        return completeQuery(\"!\" + buildLabel());\n+    }\n+\n+    public FinalizingBuilder haveValue(String value) {\n+        MtaMetadataCriteriaValidator.validateLabelValue(value);\n+        return completeQuery(buildLabel() + \"=\" + value);\n+    }\n+\n+    public FinalizingBuilder notHaveValue(String value) {\n+        MtaMetadataCriteriaValidator.validateLabelValue(value);\n+        return completeQuery(buildLabel() + \"!=\" + value);\n+    }\n+\n+    public FinalizingBuilder valueIn(List<String> values) {\n+        String concatenatedValues = values.stream()\n+                                          .peek(MtaMetadataCriteriaValidator::validateLabelValue)\n+                                          .collect(Collectors.joining(\",\"));\n+        return completeQuery(buildLabel() + \" in (\" + concatenatedValues + \")\");\n+    }\n+\n+    public FinalizingBuilder valueNotIn(List<String> values) {\n+        String concatenatedValues = values.stream()\n+                                          .peek(MtaMetadataCriteriaValidator::validateLabelValue)\n+                                          .collect(Collectors.joining(\",\"));\n+        return completeQuery(buildLabel() + \" notin (\" + concatenatedValues + \")\");\n+    }\n+\n+    private String buildLabel() {\n+        return Stream.of(prefix, label)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU1ODE4MA==", "bodyText": "I prefer .map(Map::values).flatMap(Collection::stream)", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370558180", "createdAt": "2020-01-24T10:11:39Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.MtaMetadataEntity;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class MtaMetadataEntityAggregator {\n+\n+    public List<DeployedMta> aggregate(List<MtaMetadataEntity> entities) {\n+        Map<String, Map<Version, List<MtaMetadataEntity>>> entitiesByIdByVersion = getMtaMetadataEntitiesByIdByVersion(entities);\n+        return entitiesByIdByVersion.values()\n+                                    .stream()\n+                                    .flatMap(entitiesByVersion -> entitiesByVersion.values()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MjQxNA==", "bodyText": "Parameters can't be null since it's .getOrDefault(..., Collections.emptyMap())", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370582414", "createdAt": "2020-01-24T11:09:56Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ApplicationMetadataBuilder.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.v2;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.client.v3.Metadata;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataLabels;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.ApplicationMtaMetadataExtractor;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.SupportedParameters;\n+import com.sap.cloud.lm.sl.cf.core.util.NameUtil;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+import com.sap.cloud.lm.sl.mta.model.DeploymentDescriptor;\n+import com.sap.cloud.lm.sl.mta.model.Module;\n+import com.sap.cloud.lm.sl.mta.model.ProvidedDependency;\n+import com.sap.cloud.lm.sl.mta.model.Resource;\n+\n+public class ApplicationMetadataBuilder {\n+\n+    public static Metadata build(DeploymentDescriptor deploymentDescriptor, Module module, List<ResourceAndResourceType> moduleResources,\n+                                 List<String> uris) {\n+        List<DeployedMtaResource> deployedResources = moduleResources.stream()\n+                                                                     .map(resource -> mapResourceToDeployedMtaResource(resource, module))\n+                                                                     .collect(Collectors.toList());\n+\n+        List<String> providedDependenciesNames = module.getProvidedDependencies()\n+                                                       .stream()\n+                                                       .filter(ProvidedDependency::isPublic)\n+                                                       .map(ProvidedDependency::getName)\n+                                                       .collect(Collectors.toList());\n+\n+        DeployedMtaModule deployedMtaModule = DeployedMtaModule.builder()\n+                                                               .withModuleName(module.getName())\n+                                                               .withAppName(NameUtil.getApplicationName(module))\n+                                                               .withProvidedDependencyNames(providedDependenciesNames)\n+                                                               .withResources(deployedResources)\n+                                                               .withUris(uris)\n+                                                               .build();\n+\n+        return Metadata.builder()\n+                       .label(MtaMetadataLabels.MTA_ID, deploymentDescriptor.getId())\n+                       .label(MtaMetadataLabels.MTA_VERSION, deploymentDescriptor.getVersion())\n+                       .annotation(ApplicationMtaMetadataExtractor.MODULE, JsonUtil.toJson(deployedMtaModule, true))\n+                       .build();\n+    }\n+\n+    private static DeployedMtaResource mapResourceToDeployedMtaResource(ResourceAndResourceType applicationService, Module module) {\n+        ResourceType resourceType = applicationService.getResourceType();\n+        Resource resource = applicationService.getResource();\n+        if (resourceType != ResourceType.USER_PROVIDED_SERVICE) {\n+            return DeployedMtaResource.builder()\n+                                      .withServiceName(NameUtil.getServiceName(resource))\n+                                      .withResourceName(resource.getName())\n+                                      .build();\n+        }\n+\n+        List<DeployedMtaModule> deployedMtaModules = Collections.singletonList(DeployedMtaModule.builder()\n+                                                                                                .withModuleName(module.getName())\n+                                                                                                .withAppName(NameUtil.getApplicationName(module))\n+                                                                                                .build());\n+        Map<String, Object> parameters = (Map<String, Object>) resource.getParameters()\n+                                                                       .getOrDefault(SupportedParameters.SERVICE_CONFIG,\n+                                                                                     Collections.emptyMap());\n+        if (parameters == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MzA4OQ==", "bodyText": "This class has a lot in common with the application metadata builder.\nIs it possible that some form of generalization be done to reduce duplication?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370583089", "createdAt": "2020-01-24T11:11:41Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ServiceMetadataBuilder.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.v2;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.ServiceMtaMetadataExtractor;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataLabels;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.util.NameUtil;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+import com.sap.cloud.lm.sl.mta.model.DeploymentDescriptor;\n+import com.sap.cloud.lm.sl.mta.model.Module;\n+import com.sap.cloud.lm.sl.mta.model.Resource;\n+import org.cloudfoundry.client.v3.Metadata;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class ServiceMetadataBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NTI1MA==", "bodyText": "Is it possible to use Immutables?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370585250", "createdAt": "2020-01-24T11:17:59Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/DeployedMta.java", "diffHunk": "@@ -1,29 +1,37 @@\n package com.sap.cloud.lm.sl.cf.core.model;\r\n \r\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\r\n+\r\n+import java.util.ArrayList;\r\n import java.util.List;\r\n import java.util.Objects;\r\n-import java.util.Set;\r\n \r\n public class DeployedMta {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NTU2NA==", "bodyText": "Immutables?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370585564", "createdAt": "2020-01-24T11:18:51Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/DeployedMtaModule.java", "diffHunk": "@@ -1,30 +1,31 @@\n package com.sap.cloud.lm.sl.cf.core.model;\n \n+import java.util.ArrayList;\n import java.util.Date;\n import java.util.List;\n+import java.util.Objects;\n \n public class DeployedMtaModule {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NTY3OQ==", "bodyText": "Immutables?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370585679", "createdAt": "2020-01-24T11:19:11Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/DeployedMtaResource.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package com.sap.cloud.lm.sl.cf.core.model;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class DeployedMtaResource {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NzQwMA==", "bodyText": "I prefer .map(Module::getResources).flatMap(List::stream)", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370587400", "createdAt": "2020-01-24T11:24:00Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/BuildCloudUndeployModelStep.java", "diffHunk": "@@ -142,18 +143,20 @@ private void setComponentsToUndeploy(DelegateExecution context, List<String> ser\n         StepsUtil.setAppsToUndeploy(context, apps);\n     }\n \n-    private List<String> computeServicesToDelete(List<DeployedMtaModule> modulesWithoutChange, Set<String> existingServices,\n+    private List<String> computeServicesToDelete(List<DeployedMtaModule> modulesWithoutChange, List<DeployedMtaResource> existingServices,\n                                                  Set<String> servicesForApplications) {\n         return existingServices.stream()\n-                               .filter(service -> shouldDeleteService(modulesWithoutChange, service, servicesForApplications))\n+                               .map(DeployedMtaResource::getServiceName)\n+                               .filter(name -> shouldDeleteService(modulesWithoutChange, name, servicesForApplications))\n                                .sorted()\n                                .collect(Collectors.toList());\n     }\n \n     private boolean shouldDeleteService(List<DeployedMtaModule> modulesToKeep, String service, Set<String> servicesForApplications) {\n         return modulesToKeep.stream()\n-                            .map(DeployedMtaModule::getServices)\n-                            .noneMatch(moduleToKeepService -> moduleToKeepService.contains(service))\n+                            .flatMap(module -> module.getResources().stream())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4ODcxNw==", "bodyText": "The formatting in this class seems a bit weird", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370588717", "createdAt": "2020-01-24T11:27:35Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CheckForCreationConflictsStep.java", "diffHunk": "@@ -11,31 +11,39 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n \n+import javax.inject.Inject;\n import javax.inject.Named;\n \n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil;\n+import org.apache.commons.lang3.StringUtils;\n import org.cloudfoundry.client.lib.CloudControllerClient;\n import org.cloudfoundry.client.lib.CloudControllerException;\n import org.cloudfoundry.client.lib.CloudOperationException;\n import org.cloudfoundry.client.lib.domain.CloudApplication;\n import org.cloudfoundry.client.lib.domain.CloudServiceBinding;\n import org.cloudfoundry.client.lib.domain.CloudServiceInstance;\n+import org.cloudfoundry.client.v3.Metadata;\n import org.flowable.engine.delegate.DelegateExecution;\n import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.context.annotation.Scope;\n \n import com.sap.cloud.lm.sl.cf.client.lib.domain.CloudServiceExtended;\n-import com.sap.cloud.lm.sl.cf.core.cf.detect.ApplicationMtaMetadataParser;\n-import com.sap.cloud.lm.sl.cf.core.cf.detect.DeployedComponentsDetector;\n-import com.sap.cloud.lm.sl.cf.core.model.ApplicationMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.ApplicationMtaMetadataEnvExtractor;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.ApplicationMtaMetadataExtractor;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ApplicationMtaMetadata;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n import com.sap.cloud.lm.sl.cf.process.message.Messages;\n import com.sap.cloud.lm.sl.common.SLException;\n \n @Named(\"checkForCreationConflictsStep\")\n @Scope(BeanDefinition.SCOPE_PROTOTYPE)\n public class CheckForCreationConflictsStep extends SyncFlowableStep {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4OTQxOQ==", "bodyText": "Why is this duplicated?\nFirst here in handleAppAtributes, then again in handleAppMetadata?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370589419", "createdAt": "2020-01-24T11:29:37Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CreateOrUpdateAppStep.java", "diffHunk": "@@ -171,6 +173,10 @@ public void handleApplicationAttributes() {\n             }\r\n             client.createApplication(app.getName(), app.getStaging(), diskQuota, memory, uris, Collections.emptyList(),\r\n                                      app.getDockerInfo());\r\n+            CloudApplication application = client.getApplication(app.getName());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4OTc2OA==", "bodyText": "Does the metadata override the equals() method?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370589768", "createdAt": "2020-01-24T11:30:39Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CreateOrUpdateAppStep.java", "diffHunk": "@@ -279,6 +293,19 @@ public void printStepEndMessage() {\n                                                               getStepLogger()).updateApplication(client, app);\r\n         }\r\n \r\n+        @Override\r\n+        public void handleApplicationMetadata() {\r\n+            if(app.getV3Metadata() != null) {\r\n+                boolean shouldUpdateMetadata = true;\r\n+                if(existingApp.getV3Metadata() != null) {\r\n+                    shouldUpdateMetadata = !existingApp.getV3Metadata().equals(app.getV3Metadata());\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MDEzNw==", "bodyText": "I think it would be slightly better if this condition is inverted and the function returns if the metadata is null", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370590137", "createdAt": "2020-01-24T11:31:29Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/CreateOrUpdateAppStep.java", "diffHunk": "@@ -279,6 +293,19 @@ public void printStepEndMessage() {\n                                                               getStepLogger()).updateApplication(client, app);\r\n         }\r\n \r\n+        @Override\r\n+        public void handleApplicationMetadata() {\r\n+            if(app.getV3Metadata() != null) {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MTAxNA==", "bodyText": "Could be substituted with return newMetadata != null", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370591014", "createdAt": "2020-01-24T11:34:03Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/DetermineServiceCreateUpdateServiceActionsStep.java", "diffHunk": "@@ -177,6 +184,18 @@ private String buildServiceType(CloudService service) {\n         return label + \"/\" + plan;\n     }\n \n+    private boolean shouldUpdateMetadata(CloudServiceExtended service, CloudService existingService, CloudControllerClient client) {\n+        Metadata existingMetadata = existingService.getV3Metadata();\n+        Metadata newMetadata = service.getV3Metadata();\n+        if (existingMetadata != null && newMetadata != null) {\n+            return !existingMetadata.equals(newMetadata);\n+        }\n+        if (newMetadata != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MTI1Mg==", "bodyText": "Why is this imported if it's not used?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370591252", "createdAt": "2020-01-24T11:34:46Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/ServiceStep.java", "diffHunk": "@@ -8,6 +8,7 @@\n import javax.inject.Named;\n \n import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.v3.Metadata;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MTU5Mg==", "bodyText": "This method is duplicated a lot in many files.\nMaybe introduce a Factory for the metadata?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370591592", "createdAt": "2020-01-24T11:35:44Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/SyncFlowableStepWithHooks.java", "diffHunk": "@@ -89,8 +97,17 @@ private Module determineModuleFromAppName(DeploymentDescriptor deploymentDescrip\n     }\n \n     protected String getModuleName(CloudApplicationExtended cloudApplication) {\n-        return ApplicationMtaMetadataParser.parseAppMetadata(cloudApplication)\n-                                           .getModuleName();\n+        return getApplicationMtaMetadata(cloudApplication)\n+            .getDeployedMtaModule()\n+            .getModuleName();\n+    }\n+\n+    private ApplicationMtaMetadata getApplicationMtaMetadata(CloudApplication app) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MTg5OQ==", "bodyText": "singletonList", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370591899", "createdAt": "2020-01-24T11:36:34Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/UpdateServiceMetadataStep.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.sap.cloud.lm.sl.cf.process.steps;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.CloudControllerException;\n+import org.cloudfoundry.client.lib.CloudOperationException;\n+import org.cloudfoundry.client.lib.CloudServiceBrokerException;\n+import org.cloudfoundry.client.lib.domain.CloudMetadata;\n+import org.cloudfoundry.client.lib.domain.ImmutableCloudService;\n+import org.flowable.engine.delegate.DelegateExecution;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.client.lib.domain.CloudServiceExtended;\n+import com.sap.cloud.lm.sl.cf.core.cf.clients.ServiceWithAlternativesCreator;\n+import com.sap.cloud.lm.sl.cf.core.cf.services.ServiceOperationType;\n+import com.sap.cloud.lm.sl.cf.core.exec.MethodExecution;\n+import com.sap.cloud.lm.sl.cf.core.exec.MethodExecution.ExecutionState;\n+import com.sap.cloud.lm.sl.cf.process.message.Messages;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+\n+@Component(\"updateServiceMetadataStep\")\n+@Scope(BeanDefinition.SCOPE_PROTOTYPE)\n+public class UpdateServiceMetadataStep extends ServiceStep {\n+\n+    @Override\n+    protected MethodExecution<String> executeOperation(DelegateExecution execution, CloudControllerClient controllerClient,\n+                                                       CloudServiceExtended service) {\n+        return updateServiceMetadata(execution, controllerClient, service);\n+    }\n+\n+    private MethodExecution<String> updateServiceMetadata(DelegateExecution context, CloudControllerClient client, CloudServiceExtended service) {\n+        getStepLogger().debug(Messages.UPDATING_SERVICE_METADATA, service.getName(), service.getResourceName());\n+        updateServiceMetadata(service, client);\n+        getStepLogger().debug(Messages.SERVICE_METADATA_UPDATED, service.getName());\n+        return new MethodExecution<>(null, ExecutionState.FINISHED);\n+    }\n+\n+    private void updateServiceMetadata(CloudServiceExtended serviceToProcess, CloudControllerClient client) {\n+        ImmutableCloudService serviceWithMetadata = ImmutableCloudService.copyOf(serviceToProcess);\n+        CloudMetadata serviceMeta = client.getService(serviceWithMetadata.getName()).getMetadata();\n+        serviceWithMetadata = serviceWithMetadata.withMetadata(serviceMeta);\n+        client.updateServiceMetadata(serviceWithMetadata.getMetadata().getGuid(), serviceWithMetadata.getV3Metadata());\n+        getStepLogger().debug(\"updated service metadata name: \" + serviceWithMetadata + \" metadata: \" + JsonUtil.toJson(serviceWithMetadata.getV3Metadata(), true));\n+    }\n+\n+    @Override\n+    protected List<AsyncExecution> getAsyncStepExecutions(ExecutionWrapper execution) {\n+        return Arrays.asList(new PollServiceCreateOrUpdateOperationsExecution(getServiceOperationGetter(), getServiceProgressReporter()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MjMyOA==", "bodyText": "It's difficult to read with this formatting", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370592328", "createdAt": "2020-01-24T11:37:51Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.process/src/test/java/com/sap/cloud/lm/sl/cf/process/helpers/ApplicationColorDetectorTest.java", "diffHunk": "@@ -225,11 +230,7 @@ private Date parseDate(String date) {\n     }\n \n     private DeployedMtaModule createMtaModule(String moduleName, String appName, Date createdOn) {\n-        DeployedMtaModule deployedMtaModule = new DeployedMtaModule();\n-        deployedMtaModule.setModuleName(moduleName);\n-        deployedMtaModule.setAppName(appName);\n-        deployedMtaModule.setCreatedOn(createdOn);\n-        return deployedMtaModule;\n+        return DeployedMtaModule.builder().withModuleName(moduleName).withAppName(appName).withCreatedOn(createdOn).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MzI5Nw==", "bodyText": "return deployedMtas.stream().map(this::getMta).collect(Collectors.toList())", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370593297", "createdAt": "2020-01-24T11:40:46Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.web/src/main/java/com/sap/cloud/lm/sl/cf/web/api/impl/MtasApiServiceImpl.java", "diffHunk": "@@ -34,45 +35,47 @@\n     @Inject\n     private CloudControllerClientProvider clientProvider;\n \n+    @Inject\n+    private DeployedMtaDetector deployedMtaDetector;\n+\n     @Override\n     public ResponseEntity<List<Mta>> getMtas(String spaceGuid) {\n-        DeployedComponents deployedComponents = detectDeployedComponents(spaceGuid);\n+        List<DeployedMta> deployedMtas = deployedMtaDetector.getAllDeployedMtas(getCloudFoundryClient(spaceGuid));\n+        List<Mta> mtas = getMtas(deployedMtas);\n         return ResponseEntity.ok()\n-                             .body(getMtas(deployedComponents));\n+                             .body(mtas);\n     }\n \n     @Override\n     public ResponseEntity<Mta> getMta(String spaceGuid, String mtaId) {\n-        DeployedMta mta = detectDeployedComponents(spaceGuid).findDeployedMta(mtaId);\n-        if (mta == null) {\n-            throw new NotFoundException(Messages.MTA_NOT_FOUND, mtaId);\n-        }\n+        Optional<DeployedMta> optionalDeployedMta = deployedMtaDetector.getDeployedMta(mtaId, getCloudFoundryClient(spaceGuid));\n+        DeployedMta deployedMta = optionalDeployedMta.orElseThrow(() -> new NotFoundException(Messages.MTA_NOT_FOUND, mtaId));\n         return ResponseEntity.ok()\n-                             .body(getMta(mta));\n-    }\n-\n-    private DeployedComponents detectDeployedComponents(String spaceGuid) {\n-        List<CloudApplication> applications = getCloudFoundryClient(spaceGuid).getApplications();\n-        return new DeployedComponentsDetector().detectAllDeployedComponents(applications);\n+                             .body(getMta(deployedMta));\n     }\n \n     private CloudControllerClient getCloudFoundryClient(String spaceGuid) {\n         UserInfo userInfo = SecurityContextUtil.getUserInfo();\n         return clientProvider.getControllerClient(userInfo.getName(), spaceGuid);\n     }\n \n-    private List<Mta> getMtas(DeployedComponents components) {\n-        return components.getMtas()\n-                         .stream()\n-                         .map(this::getMta)\n-                         .collect(Collectors.toList());\n+    private List<Mta> getMtas(List<DeployedMta> deployedMtas) {\n+        List<Mta> mtas = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU5MzY4OA==", "bodyText": "In the change above you use a method reference, here you don't.\nUse one or the other in all places", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r370593688", "createdAt": "2020-01-24T11:41:51Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.web/src/main/java/com/sap/cloud/lm/sl/cf/web/api/impl/MtasApiServiceImpl.java", "diffHunk": "@@ -88,11 +91,14 @@ private Module getModule(DeployedMtaModule module) {\n                               .moduleName(module.getModuleName())\n                               .providedDendencyNames(module.getProvidedDependencyNames())\n                               .uris(module.getUris())\n-                              .services(module.getServices())\n+                              .services(module.getResources()\n+                                              .stream()\n+                                              .map(s -> s.getServiceName())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 100}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/11d9462ec98a34c4811fb8c58bede26e204d11fe", "committedDate": "2020-01-24T07:59:06Z", "message": "Refactoring Mta Metadata"}, "afterCommit": {"oid": "78df8caa5c7d3f458d21bd81fc67b431aff10584", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/78df8caa5c7d3f458d21bd81fc67b431aff10584", "committedDate": "2020-01-27T08:31:25Z", "message": "Refactoring Mta Metadata"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78df8caa5c7d3f458d21bd81fc67b431aff10584", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/78df8caa5c7d3f458d21bd81fc67b431aff10584", "committedDate": "2020-01-27T08:31:25Z", "message": "Refactoring Mta Metadata"}, "afterCommit": {"oid": "d1736fef636a4f38959966f6d6a859dc70045679", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/d1736fef636a4f38959966f6d6a859dc70045679", "committedDate": "2020-01-28T22:32:29Z", "message": "Refactoring Mta Metadata"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d1736fef636a4f38959966f6d6a859dc70045679", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/d1736fef636a4f38959966f6d6a859dc70045679", "committedDate": "2020-01-28T22:32:29Z", "message": "Refactoring Mta Metadata"}, "afterCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/4603b0626b9898d17e21f3643adc5926df7bca3a", "committedDate": "2020-01-28T22:53:32Z", "message": "Refactoring Mta Metadata"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5OTUzMDUy", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#pullrequestreview-349953052", "createdAt": "2020-01-29T09:10:43Z", "commit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOToxMDo0M1rOFjBI4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOToyOToyNVrOFjBrkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2MzEzNw==", "bodyText": "This can be substituted with\napplications.stream().collect(groupingBy(app -> parseMetadata(app).getId())", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372263137", "createdAt": "2020-01-29T09:10:43Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.EnvMtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+//TODO delete this class and its usages after the CF metadata becomes the go to metadata approach\n+//A release note should be already present explaining that the migration (at least one mta redeploy) is mandatory\n+@Component\n+public class DeployedMtaEnvDetector {\n+\n+    @Inject\n+    private EnvMtaMetadataParser envMtaMetadataParser;\n+\n+    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n+        Map<String, List<CloudApplication>> applicationsByMtaId = getApplicationsByMtaId(client);\n+        return applicationsByMtaId.values()\n+                                  .stream()\n+                                  .map(this::toDeployedMta)\n+                                  .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, List<CloudApplication>> getApplicationsByMtaId(CloudControllerClient client) {\n+        Map<String, List<CloudApplication>> applicationsByMtaId = new HashMap<>();\n+        List<CloudApplication> applications = getApplicationsWithEnvMetadata(client);\n+        for (CloudApplication application : applications) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2NDYzMw==", "bodyText": "can be substituted with\nentities.stream().collect(groupingBy(entity -> parseMetadata(entity).getId())", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372264633", "createdAt": "2020-01-29T09:14:03Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.MtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class MtaMetadataEntityAggregator {\n+\n+    @Inject\n+    private MtaMetadataParser mtaMetadataParser;\n+\n+    public List<DeployedMta> aggregate(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = getEntitiesByMtaId(entities);\n+        return entitiesByMtaId.values()\n+                              .stream()\n+                              .map(this::toDeployedMta)\n+                              .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, List<CloudEntity>> getEntitiesByMtaId(List<CloudEntity> entities) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2ODc5Mw==", "bodyText": "This is a bit confusing. The check is if the keys of the env don't have common elements with the metadata fields and then negates it. That's a bit roundabout.\nI would prefer the other way around.\nChange it to app.getEnv().keySet().stream().anyMatch(ENV_METADATA_FIELDS::contains)\nAnd if you want that slight bit of performance, change the type of the env_metadata_fields to a HashSet", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372268793", "createdAt": "2020-01-29T09:22:59Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.message.Messages;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaResource;\n+import com.sap.cloud.lm.sl.common.ParsingException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class EnvMtaMetadataParser {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvMtaMetadataParser.class);\n+    private static final List<String> ENV_METADATA_FIELDS = Arrays.asList(Constants.ENV_MTA_METADATA, Constants.ENV_MTA_MODULE_METADATA,\n+                                                                         Constants.ENV_MTA_SERVICES,\n+                                                                         Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+\n+    public boolean hasMtaMetadata(CloudApplication application) {\n+        return !Collections.disjoint(application.getEnv()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3MjAxNg==", "bodyText": "Shouldn't this be negated?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372272016", "createdAt": "2020-01-29T09:29:25Z", "author": {"login": "radito3"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/MtaMetadataParser.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n+\n+import static com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil.getMtaId;\n+import static com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil.getMtaVersion;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.cloudfoundry.client.v3.Metadata;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataAnnotations;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataLabels;\n+import com.sap.cloud.lm.sl.cf.core.message.Messages;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.common.ParsingException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+\n+@Component\n+public class MtaMetadataParser {\n+\n+    private static final List<String> METADATA_LABELS = Arrays.asList(MtaMetadataLabels.MTA_ID, MtaMetadataLabels.MTA_VERSION);\n+\n+    public boolean hasMtaMetadata(CloudEntity entity) {\n+        Metadata metadata = entity.getV3Metadata();\n+        if (metadata == null || metadata.getLabels() == null) {\n+            return false;\n+        }\n+        return Collections.disjoint(metadata.getLabels()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 36}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/4603b0626b9898d17e21f3643adc5926df7bca3a", "committedDate": "2020-01-28T22:53:32Z", "message": "Refactoring Mta Metadata"}, "afterCommit": {"oid": "19fe229012989c6a094822b4c6c10241784cdf03", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/19fe229012989c6a094822b4c6c10241784cdf03", "committedDate": "2020-01-29T10:22:13Z", "message": "Refactoring Mta Metadata"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5OTY1NTAx", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#pullrequestreview-349965501", "createdAt": "2020-01-29T09:31:02Z", "commit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwOTozMTowMlrOFjBuqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMzoxODozMVrOFjIBkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3MjgwOQ==", "bodyText": "Extract this to method as well.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372272809", "createdAt": "2020-01-29T09:31:02Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteriaBuilder;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityAggregator;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityCollector;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+\n+@Component\n+public class DeployedMtaDetector {\n+\n+    @Inject\n+    private List<MtaMetadataEntityCollector<?>> mtaMetadataEntityCollectors;\n+\n+    @Inject\n+    private MtaMetadataEntityAggregator mtaMetadataEntityAggregator;\n+\n+    @Inject\n+    private DeployedMtaEnvDetector deployedMtaEnvDetector;\n+\n+    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n+        MtaMetadataCriteria selectionCriteria = MtaMetadataCriteriaBuilder.builder()\n+                                                                          .label(MtaMetadataCriteriaBuilder.LABEL_MTA_ID)\n+                                                                          .exists()\n+                                                                          .build();\n+        List<DeployedMta> deployedMtas = getDeployedMtasByMetadataSelectionCriteria(selectionCriteria, client);\n+        List<DeployedMta> deployedMtasByEnv = deployedMtaEnvDetector.getAllDeployedMtas(client)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3MzI1Nw==", "bodyText": "Order to method by their invocation order.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372273257", "createdAt": "2020-01-29T09:31:57Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteriaBuilder;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityAggregator;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityCollector;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+\n+@Component\n+public class DeployedMtaDetector {\n+\n+    @Inject\n+    private List<MtaMetadataEntityCollector<?>> mtaMetadataEntityCollectors;\n+\n+    @Inject\n+    private MtaMetadataEntityAggregator mtaMetadataEntityAggregator;\n+\n+    @Inject\n+    private DeployedMtaEnvDetector deployedMtaEnvDetector;\n+\n+    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n+        MtaMetadataCriteria selectionCriteria = MtaMetadataCriteriaBuilder.builder()\n+                                                                          .label(MtaMetadataCriteriaBuilder.LABEL_MTA_ID)\n+                                                                          .exists()\n+                                                                          .build();\n+        List<DeployedMta> deployedMtas = getDeployedMtasByMetadataSelectionCriteria(selectionCriteria, client);\n+        List<DeployedMta> deployedMtasByEnv = deployedMtaEnvDetector.getAllDeployedMtas(client)\n+                                                                    .stream()\n+                                                                    .filter(deployedMtaByEnv -> !deployedMtas.contains(deployedMtaByEnv))\n+                                                                    .collect(Collectors.toList());\n+        return ListUtils.union(deployedMtas, deployedMtasByEnv);\n+    }\n+\n+    private List<DeployedMta> getDeployedMtasByMetadataSelectionCriteria(MtaMetadataCriteria criteria, CloudControllerClient client) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3MzY4OQ==", "bodyText": "Re-order the args(client, criteria) - this way it would match some of the others interfaces we have which are working with the Client.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372273689", "createdAt": "2020-01-29T09:32:58Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityCollector.java", "diffHunk": "@@ -0,0 +1,14 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n+\n+import java.util.List;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n+\n+public interface MtaMetadataEntityCollector<T extends CloudEntity> {\n+\n+    List<T> collect(MtaMetadataCriteria criteria, CloudControllerClient client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3NDA2Mw==", "bodyText": "Use Named annotation for consistency", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372274063", "createdAt": "2020-01-29T09:33:36Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteriaBuilder;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityAggregator;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityCollector;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+\n+@Component", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3NDY5OA==", "bodyText": "Maybe detectDeployedMtas ?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372274698", "createdAt": "2020-01-29T09:34:55Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteriaBuilder;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityAggregator;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityCollector;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+\n+@Component\n+public class DeployedMtaDetector {\n+\n+    @Inject\n+    private List<MtaMetadataEntityCollector<?>> mtaMetadataEntityCollectors;\n+\n+    @Inject\n+    private MtaMetadataEntityAggregator mtaMetadataEntityAggregator;\n+\n+    @Inject\n+    private DeployedMtaEnvDetector deployedMtaEnvDetector;\n+\n+    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3NDgxMw==", "bodyText": "Maybe detect...?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372274813", "createdAt": "2020-01-29T09:35:10Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaDetector.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteriaBuilder;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityAggregator;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor.MtaMetadataEntityCollector;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+\n+@Component\n+public class DeployedMtaDetector {\n+\n+    @Inject\n+    private List<MtaMetadataEntityCollector<?>> mtaMetadataEntityCollectors;\n+\n+    @Inject\n+    private MtaMetadataEntityAggregator mtaMetadataEntityAggregator;\n+\n+    @Inject\n+    private DeployedMtaEnvDetector deployedMtaEnvDetector;\n+\n+    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n+        MtaMetadataCriteria selectionCriteria = MtaMetadataCriteriaBuilder.builder()\n+                                                                          .label(MtaMetadataCriteriaBuilder.LABEL_MTA_ID)\n+                                                                          .exists()\n+                                                                          .build();\n+        List<DeployedMta> deployedMtas = getDeployedMtasByMetadataSelectionCriteria(selectionCriteria, client);\n+        List<DeployedMta> deployedMtasByEnv = deployedMtaEnvDetector.getAllDeployedMtas(client)\n+                                                                    .stream()\n+                                                                    .filter(deployedMtaByEnv -> !deployedMtas.contains(deployedMtaByEnv))\n+                                                                    .collect(Collectors.toList());\n+        return ListUtils.union(deployedMtas, deployedMtasByEnv);\n+    }\n+\n+    private List<DeployedMta> getDeployedMtasByMetadataSelectionCriteria(MtaMetadataCriteria criteria, CloudControllerClient client) {\n+        List<CloudEntity> mtaMetadataEntities = mtaMetadataEntityCollectors.stream()\n+                                                                           .map(collector -> collector.collect(criteria, client))\n+                                                                           .flatMap(List::stream)\n+                                                                           .collect(Collectors.toList());\n+        return mtaMetadataEntityAggregator.aggregate(mtaMetadataEntities);\n+    }\n+\n+    public Optional<DeployedMta> getDeployedMta(String mtaId, CloudControllerClient client) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3NTExMw==", "bodyText": "We are aware of this TODO.\nBetter - remove it and write a java doc which explains it.\nAlso, add Deprecated annotation", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372275113", "createdAt": "2020-01-29T09:35:50Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.EnvMtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+//TODO delete this class and its usages after the CF metadata becomes the go to metadata approach", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3NTQxNQ==", "bodyText": "I would use Constructor based injection for one or two class fields", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372275415", "createdAt": "2020-01-29T09:36:27Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.EnvMtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+//TODO delete this class and its usages after the CF metadata becomes the go to metadata approach\n+//A release note should be already present explaining that the migration (at least one mta redeploy) is mandatory\n+@Component\n+public class DeployedMtaEnvDetector {\n+\n+    @Inject\n+    private EnvMtaMetadataParser envMtaMetadataParser;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3NTkyMw==", "bodyText": "Hmm both detectors have, maybe, the same interface??", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372275923", "createdAt": "2020-01-29T09:37:28Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.EnvMtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+//TODO delete this class and its usages after the CF metadata becomes the go to metadata approach\n+//A release note should be already present explaining that the migration (at least one mta redeploy) is mandatory\n+@Component\n+public class DeployedMtaEnvDetector {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI3OTY3OQ==", "bodyText": "I think entries.get(0) is confusing.\nWhy don't just iterate trhrough the entryset and then for each do the below methods?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372279679", "createdAt": "2020-01-29T09:44:48Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.MtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class MtaMetadataEntityAggregator {\n+\n+    @Inject\n+    private MtaMetadataParser mtaMetadataParser;\n+\n+    public List<DeployedMta> aggregate(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = getEntitiesByMtaId(entities);\n+        return entitiesByMtaId.values()\n+                              .stream()\n+                              .map(this::toDeployedMta)\n+                              .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, List<CloudEntity>> getEntitiesByMtaId(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = new HashMap<>();\n+        for (CloudEntity entity : entities) {\n+            String mtaId = mtaMetadataParser.parseMtaMetadata(entity)\n+                                            .getId();\n+            if (entitiesByMtaId.containsKey(mtaId)) {\n+                entitiesByMtaId.get(mtaId)\n+                               .add(entity);\n+            } else {\n+                entitiesByMtaId.put(mtaId, new ArrayList<>(Arrays.asList(entity)));\n+            }\n+        }\n+        return entitiesByMtaId;\n+    }\n+\n+    private DeployedMta toDeployedMta(List<CloudEntity> entities) {\n+        MtaMetadata mtaMetadata = getMtaMetadata(entities);\n+        return ImmutableDeployedMta.builder()\n+                                   .metadata(mtaMetadata)\n+                                   .modules(getModules(entities))\n+                                   .resources(getResources(entities))\n+                                   .build();\n+    }\n+\n+    private MtaMetadata getMtaMetadata(List<CloudEntity> entities) {\n+        String mtaId = mtaMetadataParser.parseMtaMetadata(entities.get(0))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4MDE5Nw==", "bodyText": "maybe groupEntitiesByMtaId?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372280197", "createdAt": "2020-01-29T09:45:50Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.MtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class MtaMetadataEntityAggregator {\n+\n+    @Inject\n+    private MtaMetadataParser mtaMetadataParser;\n+\n+    public List<DeployedMta> aggregate(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = getEntitiesByMtaId(entities);\n+        return entitiesByMtaId.values()\n+                              .stream()\n+                              .map(this::toDeployedMta)\n+                              .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, List<CloudEntity>> getEntitiesByMtaId(List<CloudEntity> entities) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4MDMyMw==", "bodyText": "Rename it to result - easy for reading.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372280323", "createdAt": "2020-01-29T09:46:06Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.MtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class MtaMetadataEntityAggregator {\n+\n+    @Inject\n+    private MtaMetadataParser mtaMetadataParser;\n+\n+    public List<DeployedMta> aggregate(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = getEntitiesByMtaId(entities);\n+        return entitiesByMtaId.values()\n+                              .stream()\n+                              .map(this::toDeployedMta)\n+                              .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, List<CloudEntity>> getEntitiesByMtaId(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4NTg0Mw==", "bodyText": "What about computeIfAbsent?\nTry it - if it is readable and understandable -> do it that way otherwise leave it as it is.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372285843", "createdAt": "2020-01-29T09:56:29Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.MtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class MtaMetadataEntityAggregator {\n+\n+    @Inject\n+    private MtaMetadataParser mtaMetadataParser;\n+\n+    public List<DeployedMta> aggregate(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = getEntitiesByMtaId(entities);\n+        return entitiesByMtaId.values()\n+                              .stream()\n+                              .map(this::toDeployedMta)\n+                              .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, List<CloudEntity>> getEntitiesByMtaId(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = new HashMap<>();\n+        for (CloudEntity entity : entities) {\n+            String mtaId = mtaMetadataParser.parseMtaMetadata(entity)\n+                                            .getId();\n+            if (entitiesByMtaId.containsKey(mtaId)) {\n+                entitiesByMtaId.get(mtaId)\n+                               .add(entity);\n+            } else {\n+                entitiesByMtaId.put(mtaId, new ArrayList<>(Arrays.asList(entity)));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4NzI0NA==", "bodyText": "Do we need to check for the others except Constants.ENV_MTA_METADATA", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372287244", "createdAt": "2020-01-29T09:59:06Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.EnvMtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+//TODO delete this class and its usages after the CF metadata becomes the go to metadata approach\n+//A release note should be already present explaining that the migration (at least one mta redeploy) is mandatory\n+@Component\n+public class DeployedMtaEnvDetector {\n+\n+    @Inject\n+    private EnvMtaMetadataParser envMtaMetadataParser;\n+\n+    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n+        Map<String, List<CloudApplication>> applicationsByMtaId = getApplicationsByMtaId(client);\n+        return applicationsByMtaId.values()\n+                                  .stream()\n+                                  .map(this::toDeployedMta)\n+                                  .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, List<CloudApplication>> getApplicationsByMtaId(CloudControllerClient client) {\n+        Map<String, List<CloudApplication>> applicationsByMtaId = new HashMap<>();\n+        List<CloudApplication> applications = getApplicationsWithEnvMetadata(client);\n+        for (CloudApplication application : applications) {\n+            String mtaId = envMtaMetadataParser.parseMtaMetadata(application)\n+                                               .getId();\n+            if (applicationsByMtaId.containsKey(mtaId)) {\n+                applicationsByMtaId.get(mtaId)\n+                                   .add(application);\n+            } else {\n+                applicationsByMtaId.put(mtaId, new ArrayList<>(Arrays.asList(application)));\n+            }\n+        }\n+        return applicationsByMtaId;\n+    }\n+\n+    private List<CloudApplication> getApplicationsWithEnvMetadata(CloudControllerClient client) {\n+        return client.getApplications()\n+                     .stream()\n+                     .filter(this::hasEnvMetadata)\n+                     .collect(Collectors.toList());\n+    }\n+\n+    private boolean hasEnvMetadata(CloudApplication application) {\n+        Map<String, String> env = application.getEnv();\n+        return env.containsKey(Constants.ENV_MTA_METADATA) || env.containsKey(Constants.ENV_MTA_MODULE_METADATA)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4NzYzMg==", "bodyText": "Hmmmmm I think I have already seen this ????????!??!?!?!?!?!", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372287632", "createdAt": "2020-01-29T09:59:51Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.EnvMtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+//TODO delete this class and its usages after the CF metadata becomes the go to metadata approach\n+//A release note should be already present explaining that the migration (at least one mta redeploy) is mandatory\n+@Component\n+public class DeployedMtaEnvDetector {\n+\n+    @Inject\n+    private EnvMtaMetadataParser envMtaMetadataParser;\n+\n+    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n+        Map<String, List<CloudApplication>> applicationsByMtaId = getApplicationsByMtaId(client);\n+        return applicationsByMtaId.values()\n+                                  .stream()\n+                                  .map(this::toDeployedMta)\n+                                  .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, List<CloudApplication>> getApplicationsByMtaId(CloudControllerClient client) {\n+        Map<String, List<CloudApplication>> applicationsByMtaId = new HashMap<>();\n+        List<CloudApplication> applications = getApplicationsWithEnvMetadata(client);\n+        for (CloudApplication application : applications) {\n+            String mtaId = envMtaMetadataParser.parseMtaMetadata(application)\n+                                               .getId();\n+            if (applicationsByMtaId.containsKey(mtaId)) {\n+                applicationsByMtaId.get(mtaId)\n+                                   .add(application);\n+            } else {\n+                applicationsByMtaId.put(mtaId, new ArrayList<>(Arrays.asList(application)));\n+            }\n+        }\n+        return applicationsByMtaId;\n+    }\n+\n+    private List<CloudApplication> getApplicationsWithEnvMetadata(CloudControllerClient client) {\n+        return client.getApplications()\n+                     .stream()\n+                     .filter(this::hasEnvMetadata)\n+                     .collect(Collectors.toList());\n+    }\n+\n+    private boolean hasEnvMetadata(CloudApplication application) {\n+        Map<String, String> env = application.getEnv();\n+        return env.containsKey(Constants.ENV_MTA_METADATA) || env.containsKey(Constants.ENV_MTA_MODULE_METADATA)\n+            || env.containsKey(Constants.ENV_MTA_SERVICES) || env.containsKey(Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+    }\n+\n+    private DeployedMta toDeployedMta(List<CloudApplication> applications) {\n+        MtaMetadata mtaMetadata = getMtaMetadata(applications);\n+        List<DeployedMtaModule> modules = new ArrayList<>();\n+        List<DeployedMtaResource> resources = new ArrayList<>();\n+        for (CloudApplication application : applications) {\n+            DeployedMtaModule module = envMtaMetadataParser.parseModule(application);\n+            modules.add(module);\n+            resources.addAll(module.getResources());\n+        }\n+        return ImmutableDeployedMta.builder()\n+                                   .metadata(mtaMetadata)\n+                                   .modules(modules)\n+                                   .resources(resources)\n+                                   .build();\n+    }\n+\n+    private MtaMetadata getMtaMetadata(List<CloudApplication> applications) {\n+        String mtaId = envMtaMetadataParser.parseMtaMetadata(applications.get(0))\n+                                           .getId();\n+        Version version = getVersion(applications);\n+        return ImmutableMtaMetadata.builder()\n+                                   .id(mtaId)\n+                                   .version(version)\n+                                   .build();\n+    }\n+\n+    private Version getVersion(List<CloudApplication> applications) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4ODIyOA==", "bodyText": "Named", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372288228", "createdAt": "2020-01-29T10:00:56Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataApplicationCollector.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n+\n+import java.util.List;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n+\n+@Component\n+public class MtaMetadataApplicationCollector implements MtaMetadataEntityCollector<CloudApplication> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5NzM1MQ==", "bodyText": "Make it generic and put it in the method", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372297351", "createdAt": "2020-01-29T10:19:01Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java", "diffHunk": "@@ -0,0 +1,134 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.message.Messages;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaResource;\n+import com.sap.cloud.lm.sl.common.ParsingException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class EnvMtaMetadataParser {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvMtaMetadataParser.class);\n+    private static final List<String> ENV_METADATA_FIELDS = Arrays.asList(Constants.ENV_MTA_METADATA, Constants.ENV_MTA_MODULE_METADATA,\n+                                                                         Constants.ENV_MTA_SERVICES,\n+                                                                         Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+\n+    public boolean hasMtaMetadata(CloudApplication application) {\n+        return !Collections.disjoint(application.getEnv()\n+                                                .keySet(),\n+                                     ENV_METADATA_FIELDS);\n+    }\n+\n+    public MtaMetadata parseMtaMetadata(CloudApplication application) {\n+        try {\n+            if (!isMtaMetadataComplete(application)) {\n+                throw new ParsingException(Messages.MTA_METADATA_FOR_APP_0_IS_INCOMPLETE, application.getName());\n+            }\n+            String envMtaMetadata = application.getEnv()\n+                                               .get(Constants.ENV_MTA_METADATA);\n+            Map<String, Object> mtaMetadata = JsonUtil.convertJsonToMap(envMtaMetadata);\n+            String exceptionMessage = MessageFormat.format(Messages.ENV_OF_APP_0_CONTAINS_INVALID_VALUE_FOR_1, application.getName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5ODQwNw==", "bodyText": "Do we need to ignore the MTA_ID and MTA_VERSION if the v3 metadata is presented?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372298407", "createdAt": "2020-01-29T10:21:22Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/MtaMetadataParser.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n+\n+import static com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil.getMtaId;\n+import static com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil.getMtaVersion;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.cloudfoundry.client.v3.Metadata;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataAnnotations;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataLabels;\n+import com.sap.cloud.lm.sl.cf.core.message.Messages;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.common.ParsingException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+\n+@Component\n+public class MtaMetadataParser {\n+\n+    private static final List<String> METADATA_LABELS = Arrays.asList(MtaMetadataLabels.MTA_ID, MtaMetadataLabels.MTA_VERSION);\n+\n+    public boolean hasMtaMetadata(CloudEntity entity) {\n+        Metadata metadata = entity.getV3Metadata();\n+        if (metadata == null || metadata.getLabels() == null) {\n+            return false;\n+        }\n+        return Collections.disjoint(metadata.getLabels()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI5OTAyOQ==", "bodyText": "Do we need this check?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372299029", "createdAt": "2020-01-29T10:22:41Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/MtaMetadataParser.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n+\n+import static com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil.getMtaId;\n+import static com.sap.cloud.lm.sl.cf.core.cf.metadata.util.MtaMetadataUtil.getMtaVersion;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.cloudfoundry.client.v3.Metadata;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataAnnotations;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataLabels;\n+import com.sap.cloud.lm.sl.cf.core.message.Messages;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.common.ParsingException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+\n+@Component\n+public class MtaMetadataParser {\n+\n+    private static final List<String> METADATA_LABELS = Arrays.asList(MtaMetadataLabels.MTA_ID, MtaMetadataLabels.MTA_VERSION);\n+\n+    public boolean hasMtaMetadata(CloudEntity entity) {\n+        Metadata metadata = entity.getV3Metadata();\n+        if (metadata == null || metadata.getLabels() == null) {\n+            return false;\n+        }\n+        return Collections.disjoint(metadata.getLabels()\n+                                            .keySet(),\n+                                    METADATA_LABELS);\n+    }\n+\n+    public MtaMetadata parseMtaMetadata(CloudEntity entity) {\n+        try {\n+            if (!isMtaMetadataComplete(entity)) {\n+                throw new ParsingException(Messages.MTA_METADATA_FOR_0_IS_INCOMPLETE, entity.getName());\n+            }\n+            return toMtaMetadata(entity.getV3Metadata());\n+        } catch (ParsingException e) {\n+            throw new ParsingException(e, Messages.CANT_PARSE_MTA_METADATA_FOR_0, entity.getName());\n+        }\n+    }\n+\n+    private boolean isMtaMetadataComplete(CloudEntity entity) {\n+        return entity.getV3Metadata()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM1MDkxOA==", "bodyText": "As we talked with Radi, try using computeIfAbsent and if it is looking better -> leave it that way.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372350918", "createdAt": "2020-01-29T12:21:03Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/detect/DeployedMtaEnvDetector.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.detect;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.EnvMtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+//TODO delete this class and its usages after the CF metadata becomes the go to metadata approach\n+//A release note should be already present explaining that the migration (at least one mta redeploy) is mandatory\n+@Component\n+public class DeployedMtaEnvDetector {\n+\n+    @Inject\n+    private EnvMtaMetadataParser envMtaMetadataParser;\n+\n+    public List<DeployedMta> getAllDeployedMtas(CloudControllerClient client) {\n+        Map<String, List<CloudApplication>> applicationsByMtaId = getApplicationsByMtaId(client);\n+        return applicationsByMtaId.values()\n+                                  .stream()\n+                                  .map(this::toDeployedMta)\n+                                  .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, List<CloudApplication>> getApplicationsByMtaId(CloudControllerClient client) {\n+        Map<String, List<CloudApplication>> applicationsByMtaId = new HashMap<>();\n+        List<CloudApplication> applications = getApplicationsWithEnvMetadata(client);\n+        for (CloudApplication application : applications) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI2MzEzNw=="}, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2ODA5OA==", "bodyText": "Apply Named annotation everywhere.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372368098", "createdAt": "2020-01-29T13:01:07Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataApplicationCollector.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n+\n+import java.util.List;\n+\n+import org.cloudfoundry.client.lib.CloudControllerClient;\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.criteria.MtaMetadataCriteria;\n+\n+@Component\n+public class MtaMetadataApplicationCollector implements MtaMetadataEntityCollector<CloudApplication> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjI4ODIyOA=="}, "originalCommit": {"oid": "4603b0626b9898d17e21f3643adc5926df7bca3a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2ODQwMw==", "bodyText": "HMMMMMM, I think the whole class is somehow duplicated somewhere else?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372368403", "createdAt": "2020-01-29T13:01:47Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/entity/processor/MtaMetadataEntityAggregator.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.entity.processor;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.cloudfoundry.client.lib.domain.CloudEntity;\n+import org.cloudfoundry.client.lib.domain.CloudService;\n+import org.springframework.stereotype.Component;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.MtaMetadataParser;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMta;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMta;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class MtaMetadataEntityAggregator {\n+\n+    @Inject\n+    private MtaMetadataParser mtaMetadataParser;\n+\n+    public List<DeployedMta> aggregate(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = getEntitiesByMtaId(entities);\n+        return entitiesByMtaId.values()\n+                              .stream()\n+                              .map(this::toDeployedMta)\n+                              .collect(Collectors.toList());\n+    }\n+\n+    private Map<String, List<CloudEntity>> getEntitiesByMtaId(List<CloudEntity> entities) {\n+        Map<String, List<CloudEntity>> entitiesByMtaId = new HashMap<>();\n+        for (CloudEntity entity : entities) {\n+            String mtaId = mtaMetadataParser.parseMtaMetadata(entity)\n+                                            .getId();\n+            if (entitiesByMtaId.containsKey(mtaId)) {\n+                entitiesByMtaId.get(mtaId)\n+                               .add(entity);\n+            } else {\n+                entitiesByMtaId.put(mtaId, new ArrayList<>(Arrays.asList(entity)));\n+            }\n+        }\n+        return entitiesByMtaId;\n+    }\n+\n+    private DeployedMta toDeployedMta(List<CloudEntity> entities) {\n+        MtaMetadata mtaMetadata = getMtaMetadata(entities);\n+        return ImmutableDeployedMta.builder()\n+                                   .metadata(mtaMetadata)\n+                                   .modules(getModules(entities))\n+                                   .resources(getResources(entities))\n+                                   .build();\n+    }\n+\n+    private MtaMetadata getMtaMetadata(List<CloudEntity> entities) {\n+        String mtaId = mtaMetadataParser.parseMtaMetadata(entities.get(0))\n+                                        .getId();\n+        Version version = getVersion(entities);\n+        return ImmutableMtaMetadata.builder()\n+                                   .id(mtaId)\n+                                   .version(version)\n+                                   .build();\n+    }\n+\n+    private Version getVersion(List<CloudEntity> entities) {\n+        if (allHaveSameMtaVersion(entities)) {\n+            return mtaMetadataParser.parseMtaMetadata(entities.get(0))\n+                                    .getVersion();\n+        }\n+        return null;\n+    }\n+\n+    private boolean allHaveSameMtaVersion(List<CloudEntity> entities) {\n+        return entities.stream()\n+                       .map(entity -> mtaMetadataParser.parseMtaMetadata(entity)\n+                                                       .getVersion())\n+                       .distinct()\n+                       .count() == 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fe229012989c6a094822b4c6c10241784cdf03"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2ODg1MQ==", "bodyText": "Is it parsing exception? Isn't it IllegalState?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372368851", "createdAt": "2020-01-29T13:02:51Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.message.Messages;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaResource;\n+import com.sap.cloud.lm.sl.common.ParsingException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class EnvMtaMetadataParser {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvMtaMetadataParser.class);\n+    private static final List<String> ENV_METADATA_FIELDS = Arrays.asList(Constants.ENV_MTA_METADATA, Constants.ENV_MTA_MODULE_METADATA,\n+                                                                          Constants.ENV_MTA_SERVICES,\n+                                                                          Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+\n+    public boolean hasMtaMetadata(CloudApplication application) {\n+        return application.getEnv()\n+                          .keySet()\n+                          .stream()\n+                          .anyMatch(ENV_METADATA_FIELDS::contains);\n+    }\n+\n+    public MtaMetadata parseMtaMetadata(CloudApplication application) {\n+        try {\n+            if (!isMtaMetadataComplete(application)) {\n+                throw new ParsingException(Messages.MTA_METADATA_FOR_APP_0_IS_INCOMPLETE, application.getName());\n+            }\n+            String envMtaMetadata = application.getEnv()\n+                                               .get(Constants.ENV_MTA_METADATA);\n+            Map<String, Object> mtaMetadata = JsonUtil.convertJsonToMap(envMtaMetadata);\n+            String exceptionMessage = MessageFormat.format(Messages.ENV_OF_APP_0_CONTAINS_INVALID_VALUE_FOR_1, application.getName(),\n+                                                           Constants.ENV_MTA_METADATA);\n+            String id = (String) getRequired(mtaMetadata, Constants.ATTR_ID, exceptionMessage);\n+            String version = (String) getRequired(mtaMetadata, Constants.ATTR_VERSION, exceptionMessage);\n+            return ImmutableMtaMetadata.builder()\n+                                       .id(id)\n+                                       .version(Version.parseVersion(version))\n+                                       .build();\n+        } catch (ParsingException e) {\n+            throw new ParsingException(e, Messages.CANT_PARSE_MTA_ENV_METADATA_FOR_APP_0, application.getName());\n+        }\n+    }\n+\n+    private boolean isMtaMetadataComplete(CloudApplication application) {\n+        return application.getEnv()\n+                          .keySet()\n+                          .containsAll(ENV_METADATA_FIELDS);\n+    }\n+\n+    private <K, V> V getRequired(Map<K, V> map, K key, String exceptionMessage) {\n+        V value = map.get(key);\n+        if (value == null) {\n+            throw new ParsingException(exceptionMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fe229012989c6a094822b4c6c10241784cdf03"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2OTU3Nw==", "bodyText": "I think the cast is not needed here", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372369577", "createdAt": "2020-01-29T13:04:27Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.message.Messages;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaResource;\n+import com.sap.cloud.lm.sl.common.ParsingException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class EnvMtaMetadataParser {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvMtaMetadataParser.class);\n+    private static final List<String> ENV_METADATA_FIELDS = Arrays.asList(Constants.ENV_MTA_METADATA, Constants.ENV_MTA_MODULE_METADATA,\n+                                                                          Constants.ENV_MTA_SERVICES,\n+                                                                          Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+\n+    public boolean hasMtaMetadata(CloudApplication application) {\n+        return application.getEnv()\n+                          .keySet()\n+                          .stream()\n+                          .anyMatch(ENV_METADATA_FIELDS::contains);\n+    }\n+\n+    public MtaMetadata parseMtaMetadata(CloudApplication application) {\n+        try {\n+            if (!isMtaMetadataComplete(application)) {\n+                throw new ParsingException(Messages.MTA_METADATA_FOR_APP_0_IS_INCOMPLETE, application.getName());\n+            }\n+            String envMtaMetadata = application.getEnv()\n+                                               .get(Constants.ENV_MTA_METADATA);\n+            Map<String, Object> mtaMetadata = JsonUtil.convertJsonToMap(envMtaMetadata);\n+            String exceptionMessage = MessageFormat.format(Messages.ENV_OF_APP_0_CONTAINS_INVALID_VALUE_FOR_1, application.getName(),\n+                                                           Constants.ENV_MTA_METADATA);\n+            String id = (String) getRequired(mtaMetadata, Constants.ATTR_ID, exceptionMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fe229012989c6a094822b4c6c10241784cdf03"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3MDIyMQ==", "bodyText": "services /resources ?!?!??!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372370221", "createdAt": "2020-01-29T13:05:57Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.message.Messages;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaResource;\n+import com.sap.cloud.lm.sl.common.ParsingException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class EnvMtaMetadataParser {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvMtaMetadataParser.class);\n+    private static final List<String> ENV_METADATA_FIELDS = Arrays.asList(Constants.ENV_MTA_METADATA, Constants.ENV_MTA_MODULE_METADATA,\n+                                                                          Constants.ENV_MTA_SERVICES,\n+                                                                          Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+\n+    public boolean hasMtaMetadata(CloudApplication application) {\n+        return application.getEnv()\n+                          .keySet()\n+                          .stream()\n+                          .anyMatch(ENV_METADATA_FIELDS::contains);\n+    }\n+\n+    public MtaMetadata parseMtaMetadata(CloudApplication application) {\n+        try {\n+            if (!isMtaMetadataComplete(application)) {\n+                throw new ParsingException(Messages.MTA_METADATA_FOR_APP_0_IS_INCOMPLETE, application.getName());\n+            }\n+            String envMtaMetadata = application.getEnv()\n+                                               .get(Constants.ENV_MTA_METADATA);\n+            Map<String, Object> mtaMetadata = JsonUtil.convertJsonToMap(envMtaMetadata);\n+            String exceptionMessage = MessageFormat.format(Messages.ENV_OF_APP_0_CONTAINS_INVALID_VALUE_FOR_1, application.getName(),\n+                                                           Constants.ENV_MTA_METADATA);\n+            String id = (String) getRequired(mtaMetadata, Constants.ATTR_ID, exceptionMessage);\n+            String version = (String) getRequired(mtaMetadata, Constants.ATTR_VERSION, exceptionMessage);\n+            return ImmutableMtaMetadata.builder()\n+                                       .id(id)\n+                                       .version(Version.parseVersion(version))\n+                                       .build();\n+        } catch (ParsingException e) {\n+            throw new ParsingException(e, Messages.CANT_PARSE_MTA_ENV_METADATA_FOR_APP_0, application.getName());\n+        }\n+    }\n+\n+    private boolean isMtaMetadataComplete(CloudApplication application) {\n+        return application.getEnv()\n+                          .keySet()\n+                          .containsAll(ENV_METADATA_FIELDS);\n+    }\n+\n+    private <K, V> V getRequired(Map<K, V> map, K key, String exceptionMessage) {\n+        V value = map.get(key);\n+        if (value == null) {\n+            throw new ParsingException(exceptionMessage);\n+        }\n+        return value;\n+    }\n+\n+    public DeployedMtaModule parseModule(CloudApplication application) {\n+        try {\n+            if (!isMtaMetadataComplete(application)) {\n+                throw new ParsingException(Messages.MTA_METADATA_FOR_APP_0_IS_INCOMPLETE, application.getName());\n+            }\n+            String moduleName = parseModuleName(application);\n+            List<String> providedDependencyNames = parseProvidedDependencyNames(application);\n+            List<DeployedMtaResource> services = parseResources(application);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fe229012989c6a094822b4c6c10241784cdf03"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3MTg1Mw==", "bodyText": "This is common with the other convertion?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372371853", "createdAt": "2020-01-29T13:09:35Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/metadata/processor/EnvMtaMetadataParser.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.metadata.processor;\n+\n+import java.text.MessageFormat;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.client.lib.domain.CloudApplication;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.sap.cloud.lm.sl.cf.core.Constants;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.ImmutableMtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadata;\n+import com.sap.cloud.lm.sl.cf.core.message.Messages;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaResource;\n+import com.sap.cloud.lm.sl.common.ParsingException;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+import com.sap.cloud.lm.sl.mta.model.Version;\n+\n+@Component\n+public class EnvMtaMetadataParser {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(EnvMtaMetadataParser.class);\n+    private static final List<String> ENV_METADATA_FIELDS = Arrays.asList(Constants.ENV_MTA_METADATA, Constants.ENV_MTA_MODULE_METADATA,\n+                                                                          Constants.ENV_MTA_SERVICES,\n+                                                                          Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+\n+    public boolean hasMtaMetadata(CloudApplication application) {\n+        return application.getEnv()\n+                          .keySet()\n+                          .stream()\n+                          .anyMatch(ENV_METADATA_FIELDS::contains);\n+    }\n+\n+    public MtaMetadata parseMtaMetadata(CloudApplication application) {\n+        try {\n+            if (!isMtaMetadataComplete(application)) {\n+                throw new ParsingException(Messages.MTA_METADATA_FOR_APP_0_IS_INCOMPLETE, application.getName());\n+            }\n+            String envMtaMetadata = application.getEnv()\n+                                               .get(Constants.ENV_MTA_METADATA);\n+            Map<String, Object> mtaMetadata = JsonUtil.convertJsonToMap(envMtaMetadata);\n+            String exceptionMessage = MessageFormat.format(Messages.ENV_OF_APP_0_CONTAINS_INVALID_VALUE_FOR_1, application.getName(),\n+                                                           Constants.ENV_MTA_METADATA);\n+            String id = (String) getRequired(mtaMetadata, Constants.ATTR_ID, exceptionMessage);\n+            String version = (String) getRequired(mtaMetadata, Constants.ATTR_VERSION, exceptionMessage);\n+            return ImmutableMtaMetadata.builder()\n+                                       .id(id)\n+                                       .version(Version.parseVersion(version))\n+                                       .build();\n+        } catch (ParsingException e) {\n+            throw new ParsingException(e, Messages.CANT_PARSE_MTA_ENV_METADATA_FOR_APP_0, application.getName());\n+        }\n+    }\n+\n+    private boolean isMtaMetadataComplete(CloudApplication application) {\n+        return application.getEnv()\n+                          .keySet()\n+                          .containsAll(ENV_METADATA_FIELDS);\n+    }\n+\n+    private <K, V> V getRequired(Map<K, V> map, K key, String exceptionMessage) {\n+        V value = map.get(key);\n+        if (value == null) {\n+            throw new ParsingException(exceptionMessage);\n+        }\n+        return value;\n+    }\n+\n+    public DeployedMtaModule parseModule(CloudApplication application) {\n+        try {\n+            if (!isMtaMetadataComplete(application)) {\n+                throw new ParsingException(Messages.MTA_METADATA_FOR_APP_0_IS_INCOMPLETE, application.getName());\n+            }\n+            String moduleName = parseModuleName(application);\n+            List<String> providedDependencyNames = parseProvidedDependencyNames(application);\n+            List<DeployedMtaResource> services = parseResources(application);\n+            return ImmutableDeployedMtaModule.builder()\n+                                             .appName(application.getName())\n+                                             .moduleName(moduleName)\n+                                             .providedDependencyNames(providedDependencyNames)\n+                                             .resources(services)\n+                                             .build();\n+        } catch (ParsingException e) {\n+            throw new ParsingException(e, Messages.CANT_PARSE_MTA_ENV_METADATA_FOR_APP_0, application.getName());\n+        }\n+    }\n+\n+    private String parseModuleName(CloudApplication application) {\n+        String envValue = application.getEnv()\n+                                     .get(Constants.ENV_MTA_MODULE_METADATA);\n+        Map<String, Object> mtaModuleMetadata = JsonUtil.convertJsonToMap(envValue);\n+        return (String) getRequired(mtaModuleMetadata, Constants.ATTR_NAME,\n+                                    MessageFormat.format(Messages.ENV_OF_APP_0_CONTAINS_INVALID_VALUE_FOR_1, application.getName(),\n+                                                         Constants.ENV_MTA_MODULE_METADATA));\n+    }\n+\n+    private List<String> parseProvidedDependencyNames(CloudApplication application) {\n+        String envValue = application.getEnv()\n+                                     .get(Constants.ENV_MTA_MODULE_PUBLIC_PROVIDED_DEPENDENCIES);\n+        try {\n+            return JsonUtil.convertJsonToList(envValue, new TypeReference<List<String>>() {\n+            });\n+        } catch (ParsingException e) {\n+            LOGGER.warn(MessageFormat.format(Messages.COULD_NOT_PARSE_PROVIDED_DEPENDENCY_NAMES_1_OF_APP_0, application.getName(),\n+                                             envValue),\n+                        e);\n+            return Collections.emptyList();\n+        }\n+    }\n+\n+    private List<DeployedMtaResource> parseResources(CloudApplication application) {\n+        return parseServices(application).stream()\n+                                         .map(name -> ImmutableDeployedMtaResource.builder()\n+                                                                                  .serviceName(name)\n+                                                                                  .build())\n+                                         .collect(Collectors.toList());\n+    }\n+\n+    private List<String> parseServices(CloudApplication application) {\n+        String envValue = application.getEnv()\n+                                     .get(Constants.ENV_MTA_SERVICES);\n+        return JsonUtil.convertJsonToList(envValue, new TypeReference<List<String>>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fe229012989c6a094822b4c6c10241784cdf03"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3MzI0Mg==", "bodyText": "Please, keep the naming - if you are using resource user resource as a whole if service then service, do not mix them. In this case, the resource should be used.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372373242", "createdAt": "2020-01-29T13:12:44Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ApplicationMetadataBuilder.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.v2;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.client.v3.Metadata;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataAnnotations;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataLabels;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.SupportedParameters;\n+import com.sap.cloud.lm.sl.cf.core.util.NameUtil;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+import com.sap.cloud.lm.sl.mta.model.DeploymentDescriptor;\n+import com.sap.cloud.lm.sl.mta.model.Module;\n+import com.sap.cloud.lm.sl.mta.model.ProvidedDependency;\n+import com.sap.cloud.lm.sl.mta.model.Resource;\n+\n+public class ApplicationMetadataBuilder {\n+\n+    public static Metadata build(DeploymentDescriptor deploymentDescriptor, Module module, List<ResourceAndResourceType> moduleResources,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fe229012989c6a094822b4c6c10241784cdf03"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3NDQzMA==", "bodyText": "I would suggest, splitting this builder into several small builders which are intended to build each MtaMetadata entry separately.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372374430", "createdAt": "2020-01-29T13:15:28Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ApplicationMetadataBuilder.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.v2;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import org.cloudfoundry.client.v3.Metadata;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataAnnotations;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataLabels;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.ImmutableDeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.model.SupportedParameters;\n+import com.sap.cloud.lm.sl.cf.core.util.NameUtil;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+import com.sap.cloud.lm.sl.mta.model.DeploymentDescriptor;\n+import com.sap.cloud.lm.sl.mta.model.Module;\n+import com.sap.cloud.lm.sl.mta.model.ProvidedDependency;\n+import com.sap.cloud.lm.sl.mta.model.Resource;\n+\n+public class ApplicationMetadataBuilder {\n+\n+    public static Metadata build(DeploymentDescriptor deploymentDescriptor, Module module, List<ResourceAndResourceType> moduleResources,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fe229012989c6a094822b4c6c10241784cdf03"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3NDY2NQ==", "bodyText": "Check my above comment and you will find a way to workaround it.", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372374665", "createdAt": "2020-01-29T13:15:57Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/cf/v2/ServiceMetadataBuilder.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.sap.cloud.lm.sl.cf.core.cf.v2;\n+\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.processor.ServiceMtaMetadataExtractor;\n+import com.sap.cloud.lm.sl.cf.core.cf.metadata.MtaMetadataLabels;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaModule;\n+import com.sap.cloud.lm.sl.cf.core.model.DeployedMtaResource;\n+import com.sap.cloud.lm.sl.cf.core.util.NameUtil;\n+import com.sap.cloud.lm.sl.common.util.JsonUtil;\n+import com.sap.cloud.lm.sl.mta.model.DeploymentDescriptor;\n+import com.sap.cloud.lm.sl.mta.model.Module;\n+import com.sap.cloud.lm.sl.mta.model.Resource;\n+import org.cloudfoundry.client.v3.Metadata;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+public class ServiceMetadataBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4MzA4OQ=="}, "originalCommit": {"oid": "11d9462ec98a34c4811fb8c58bede26e204d11fe"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3NTc4Ng==", "bodyText": "Double '", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372375786", "createdAt": "2020-01-29T13:18:10Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/message/Messages.java", "diffHunk": "@@ -64,8 +64,13 @@\n     public static final String UNABLE_TO_PARSE_MEMORY_STRING_0 = \"Unable to parse memory string \\\"{0}\\\"\";\r\n     public static final String CANT_CREATE_SERVICE_NOT_MATCHING_OFFERINGS_OR_PLAN = \"Service \\\"{0}\\\" could not be created because none of the service offering(s) \\\"{1}\\\" match with existing service offerings or provide service plan \\\"{2}\\\"\";\r\n     public static final String CANT_CREATE_SERVICE = \"Service \\\"{0}\\\" could not be created because all attempt(s) to use service offerings \\\"{1}\\\" failed\";\r\n-    public static final String CANT_PARSE_MTA_METADATA_FOR_APP_0 = \"Cannot parse MTA metadata for application \\\"{0}\\\". This indicates that MTA reserved variables in the application''s environment were modified manually. Either revert the changes or delete the application.\";\r\n+    public static final String CANT_PARSE_MTA_ENV_METADATA_FOR_APP_0 = \"Cannot parse MTA metadata for application \\\"{0}\\\". This indicates that MTA reserved variables in the application''s environment were modified manually. Either revert the changes or delete the application.\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fe229012989c6a094822b4c6c10241784cdf03"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM3NTk1NQ==", "bodyText": "Same", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/726#discussion_r372375955", "createdAt": "2020-01-29T13:18:31Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/message/Messages.java", "diffHunk": "@@ -64,8 +64,13 @@\n     public static final String UNABLE_TO_PARSE_MEMORY_STRING_0 = \"Unable to parse memory string \\\"{0}\\\"\";\r\n     public static final String CANT_CREATE_SERVICE_NOT_MATCHING_OFFERINGS_OR_PLAN = \"Service \\\"{0}\\\" could not be created because none of the service offering(s) \\\"{1}\\\" match with existing service offerings or provide service plan \\\"{2}\\\"\";\r\n     public static final String CANT_CREATE_SERVICE = \"Service \\\"{0}\\\" could not be created because all attempt(s) to use service offerings \\\"{1}\\\" failed\";\r\n-    public static final String CANT_PARSE_MTA_METADATA_FOR_APP_0 = \"Cannot parse MTA metadata for application \\\"{0}\\\". This indicates that MTA reserved variables in the application''s environment were modified manually. Either revert the changes or delete the application.\";\r\n+    public static final String CANT_PARSE_MTA_ENV_METADATA_FOR_APP_0 = \"Cannot parse MTA metadata for application \\\"{0}\\\". This indicates that MTA reserved variables in the application''s environment were modified manually. Either revert the changes or delete the application.\";\r\n+    public static final String CANT_PARSE_MTA_METADATA_FOR_0 = \"Cannot parse MTA metadata for \\\"{0}\\\". This indicates that MTA reserved variables in the entity''s metadata were modified manually. Either revert the changes or delete the entity.\";\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19fe229012989c6a094822b4c6c10241784cdf03"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "19fe229012989c6a094822b4c6c10241784cdf03", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/19fe229012989c6a094822b4c6c10241784cdf03", "committedDate": "2020-01-29T10:22:13Z", "message": "Refactoring Mta Metadata"}, "afterCommit": {"oid": "9605e85e8a7c4690544b1527cff0005c90460937", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/9605e85e8a7c4690544b1527cff0005c90460937", "committedDate": "2020-01-30T16:20:56Z", "message": "Refactoring Mta Metadata"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9605e85e8a7c4690544b1527cff0005c90460937", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/9605e85e8a7c4690544b1527cff0005c90460937", "committedDate": "2020-01-30T16:20:56Z", "message": "Refactoring Mta Metadata"}, "afterCommit": {"oid": "0573548ccc12fc841abc87531edf1a0dde5f4630", "author": {"user": {"login": "petko-boyadzhiev", "name": "Petko Boyadzhiev"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/0573548ccc12fc841abc87531edf1a0dde5f4630", "committedDate": "2020-02-03T23:28:25Z", "message": "Mta Metadata implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0573548ccc12fc841abc87531edf1a0dde5f4630", "author": {"user": {"login": "petko-boyadzhiev", "name": "Petko Boyadzhiev"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/0573548ccc12fc841abc87531edf1a0dde5f4630", "committedDate": "2020-02-03T23:28:25Z", "message": "Mta Metadata implementation"}, "afterCommit": {"oid": "f0cfa127bd597764d695eb12216b86355788e11a", "author": {"user": {"login": "petko-boyadzhiev", "name": "Petko Boyadzhiev"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/f0cfa127bd597764d695eb12216b86355788e11a", "committedDate": "2020-02-03T23:34:37Z", "message": "Mta Metadata implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0cfa127bd597764d695eb12216b86355788e11a", "author": {"user": {"login": "petko-boyadzhiev", "name": "Petko Boyadzhiev"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/f0cfa127bd597764d695eb12216b86355788e11a", "committedDate": "2020-02-03T23:34:37Z", "message": "Mta Metadata implementation"}, "afterCommit": {"oid": "13c74955de132f4885081ef5aee1db04877fdab8", "author": {"user": {"login": "petko-boyadzhiev", "name": "Petko Boyadzhiev"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/13c74955de132f4885081ef5aee1db04877fdab8", "committedDate": "2020-02-03T23:44:16Z", "message": "Mta Metadata implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "13c74955de132f4885081ef5aee1db04877fdab8", "author": {"user": {"login": "petko-boyadzhiev", "name": "Petko Boyadzhiev"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/13c74955de132f4885081ef5aee1db04877fdab8", "committedDate": "2020-02-03T23:44:16Z", "message": "Mta Metadata implementation"}, "afterCommit": {"oid": "892f1c7b3fda74a783435c8104f9ba26622a0b93", "author": {"user": {"login": "petko-boyadzhiev", "name": "Petko Boyadzhiev"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/892f1c7b3fda74a783435c8104f9ba26622a0b93", "committedDate": "2020-02-04T07:08:55Z", "message": "Mta Metadata implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "892f1c7b3fda74a783435c8104f9ba26622a0b93", "author": {"user": {"login": "petko-boyadzhiev", "name": "Petko Boyadzhiev"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/892f1c7b3fda74a783435c8104f9ba26622a0b93", "committedDate": "2020-02-04T07:08:55Z", "message": "Mta Metadata implementation"}, "afterCommit": {"oid": "0621abad62667d302864160bb97959b45d18328a", "author": {"user": {"login": "petko-boyadzhiev", "name": "Petko Boyadzhiev"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/0621abad62667d302864160bb97959b45d18328a", "committedDate": "2020-02-04T08:43:35Z", "message": "Mta Metadata implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0621abad62667d302864160bb97959b45d18328a", "author": {"user": {"login": "petko-boyadzhiev", "name": "Petko Boyadzhiev"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/0621abad62667d302864160bb97959b45d18328a", "committedDate": "2020-02-04T08:43:35Z", "message": "Mta Metadata implementation"}, "afterCommit": {"oid": "630912638958f3484c95f096b5c096423f689647", "author": {"user": {"login": "petko-boyadzhiev", "name": "Petko Boyadzhiev"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/630912638958f3484c95f096b5c096423f689647", "committedDate": "2020-02-04T09:51:44Z", "message": "Mta Metadata implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "630912638958f3484c95f096b5c096423f689647", "author": {"user": {"login": "petko-boyadzhiev", "name": "Petko Boyadzhiev"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/630912638958f3484c95f096b5c096423f689647", "committedDate": "2020-02-04T09:51:44Z", "message": "Mta Metadata implementation"}, "afterCommit": {"oid": "bb2758fc02294462b07bd6e28b0a853f0fa62d1d", "author": {"user": {"login": "petko-boyadzhiev", "name": "Petko Boyadzhiev"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/bb2758fc02294462b07bd6e28b0a853f0fa62d1d", "committedDate": "2020-02-04T16:31:18Z", "message": "Mta Metadata implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bb2758fc02294462b07bd6e28b0a853f0fa62d1d", "author": {"user": {"login": "petko-boyadzhiev", "name": "Petko Boyadzhiev"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/bb2758fc02294462b07bd6e28b0a853f0fa62d1d", "committedDate": "2020-02-04T16:31:18Z", "message": "Mta Metadata implementation"}, "afterCommit": {"oid": "ca23a2ed05ebd355078466accca9e516c6ef6943", "author": {"user": {"login": "petko-boyadzhiev", "name": "Petko Boyadzhiev"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/ca23a2ed05ebd355078466accca9e516c6ef6943", "committedDate": "2020-02-05T12:07:40Z", "message": "Mta Metadata implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca23a2ed05ebd355078466accca9e516c6ef6943", "author": {"user": {"login": "petko-boyadzhiev", "name": "Petko Boyadzhiev"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/ca23a2ed05ebd355078466accca9e516c6ef6943", "committedDate": "2020-02-05T12:07:40Z", "message": "Mta Metadata implementation"}, "afterCommit": {"oid": "ce5d1677e0e7b1a1958fee0738a2f96008232b2f", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/ce5d1677e0e7b1a1958fee0738a2f96008232b2f", "committedDate": "2020-02-05T13:58:12Z", "message": "Unit tests for metadata and adjusting existing ones"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ce5d1677e0e7b1a1958fee0738a2f96008232b2f", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/ce5d1677e0e7b1a1958fee0738a2f96008232b2f", "committedDate": "2020-02-05T13:58:12Z", "message": "Unit tests for metadata and adjusting existing ones"}, "afterCommit": {"oid": "58fd1991dc45f9074595603a28f0e57ddabb0b11", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/58fd1991dc45f9074595603a28f0e57ddabb0b11", "committedDate": "2020-02-05T14:01:27Z", "message": "[Metadata] Unit tests and adjusting existing ones"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9337c3ba3b50e83385b94df28c5e67566ca5dc8d", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/9337c3ba3b50e83385b94df28c5e67566ca5dc8d", "committedDate": "2020-02-05T17:04:39Z", "message": "[Metadata] Adopt multiapps 1.86.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c0c8b16b11119e2d5e92e3f3fcac05ab4b52f11", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/2c0c8b16b11119e2d5e92e3f3fcac05ab4b52f11", "committedDate": "2020-02-05T17:05:45Z", "message": "[Metadata] Adopt cf-java-client-sap 1.19.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2de5085ddc34c91a395dfa804da27d92555f81b4", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/2de5085ddc34c91a395dfa804da27d92555f81b4", "committedDate": "2020-02-05T17:05:49Z", "message": "[Metadata] Simplify deployed mta entities"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a0e8aa03d2be8b820c27209f5b19ce33fb61f32", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/8a0e8aa03d2be8b820c27209f5b19ce33fb61f32", "committedDate": "2020-02-05T17:05:49Z", "message": "[Metadata] Adapt to cf-java-client changes with new metadata methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9131a6154c8f2055878a4f53abfb82d70325cb34", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/9131a6154c8f2055878a4f53abfb82d70325cb34", "committedDate": "2020-02-05T17:05:49Z", "message": "[Metadata] Mta entity collectors, aggregators, parsers for v3 metadata"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "58fd1991dc45f9074595603a28f0e57ddabb0b11", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/58fd1991dc45f9074595603a28f0e57ddabb0b11", "committedDate": "2020-02-05T14:01:27Z", "message": "[Metadata] Unit tests and adjusting existing ones"}, "afterCommit": {"oid": "347b1d0f1d5683c28539d9d8de92eff763120fdf", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/347b1d0f1d5683c28539d9d8de92eff763120fdf", "committedDate": "2020-02-05T17:05:50Z", "message": "[Metadata] Unit tests and adjusting existing ones"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eff34aa71a291ec09c0537a9388ca3c81e51cff7", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/eff34aa71a291ec09c0537a9388ca3c81e51cff7", "committedDate": "2020-02-05T17:32:24Z", "message": "[Metadata] Builders and corresponding steps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc13c2ccbf1eba6c3587a02b2f9b643c63485eef", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/cc13c2ccbf1eba6c3587a02b2f9b643c63485eef", "committedDate": "2020-02-05T17:32:35Z", "message": "[Metadata] Use new mta detectors in mtas api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2623e3c7236fe687a7ba187e914616101b54693", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/b2623e3c7236fe687a7ba187e914616101b54693", "committedDate": "2020-02-05T17:32:35Z", "message": "[Metadata] Update all steps using mta entities and metadata"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ebf0a587ea6ea6f50da392cf14f2c465f2e3c60", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/7ebf0a587ea6ea6f50da392cf14f2c465f2e3c60", "committedDate": "2020-02-05T17:32:35Z", "message": "[Metadata] Update metadata messages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd27b166fc523ef7441843eee2637fd0ed0c6c4f", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/dd27b166fc523ef7441843eee2637fd0ed0c6c4f", "committedDate": "2020-02-05T17:32:36Z", "message": "[Metadata] Unit tests and adjusting existing ones"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "347b1d0f1d5683c28539d9d8de92eff763120fdf", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/347b1d0f1d5683c28539d9d8de92eff763120fdf", "committedDate": "2020-02-05T17:05:50Z", "message": "[Metadata] Unit tests and adjusting existing ones"}, "afterCommit": {"oid": "dd27b166fc523ef7441843eee2637fd0ed0c6c4f", "author": {"user": {"login": "valentinEmpy", "name": "Valentin Velkov"}}, "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/commit/dd27b166fc523ef7441843eee2637fd0ed0c6c4f", "committedDate": "2020-02-05T17:32:36Z", "message": "[Metadata] Unit tests and adjusting existing ones"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 971, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}