{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0Mzk5NTMx", "number": 867, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDoxMDoyOVrOEAhmog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoxNzoyMFrOEBUFIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTg2MDE4OnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/RestartAppStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDoxMDoyOVrOGb28Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDoxMDoyOVrOGb28Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2NDgzNA==", "bodyText": "Add this to the abstract *WithHooks step", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/867#discussion_r431864834", "createdAt": "2020-05-28T14:10:29Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/RestartAppStep.java", "diffHunk": "@@ -28,6 +29,8 @@\n \r\n     @Inject\r\n     protected RecentLogsRetriever recentLogsRetriever;\r\n+    @Inject\r\n+    private HooksPhaseBuilder hooksPhaseBuilder;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78911872acd2c91e82dbe3a9788588bdc34c1367"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTg3OTUyOnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/SubprocessPhase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDoxNTowNVrOGb3Ipg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDoxNjoxNVrOGb3L4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2ODA3MA==", "bodyText": "I do not get why we need this.\nIf we need the blue_green phase, why not directly put it here - SubprocessPhase -> BlueGreenPhase\nand the corresponding phases will be IDLE/LIVE", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/867#discussion_r431868070", "createdAt": "2020-05-28T14:15:05Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/SubprocessPhase.java", "diffHunk": "@@ -0,0 +1,6 @@\n+package com.sap.cloud.lm.sl.cf.core.model;\n+\n+public enum SubprocessPhase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19e852880763bc18ad607080653e06b7cfa83421"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2ODg5Ng==", "bodyText": "Or can we use only the Phase.AFTER_RESUME in order to determine whether we are in IDLE or LIVE phases?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/867#discussion_r431868896", "createdAt": "2020-05-28T14:16:15Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/SubprocessPhase.java", "diffHunk": "@@ -0,0 +1,6 @@\n+package com.sap.cloud.lm.sl.cf.core.model;\n+\n+public enum SubprocessPhase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2ODA3MA=="}, "originalCommit": {"oid": "19e852880763bc18ad607080653e06b7cfa83421"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTkyMjkxOnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/HooksPhaseBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDoyNDo0NFrOGb3kjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDoyNDo0NFrOGb3kjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg3NTIxMw==", "bodyText": "I would extract the whole logic as follows - as we are having hook phases which consists of the following parts ... we could extract this logic in different methods or inner classes and the whole method would look like this:\npublic String buildHookPhase(HookPhase hookPhase){\n     String getDeploymentType = getDeploymentType(); // perform some validation whether the current deployment                                                                                                                                                      type is deploy or blue-green\n     String optionalPhaseLocator = getOptionalPhaseLocator(); // here the check whether the context.getVariable(Variables.PHASE) != Phase.AFTER_RESUME should be made\n     return getDeploymentType + \".\" + DEFAULT_HOOK_ENTITY + \".\" + hookPhase.getValue() + \".\" + optionalPhaseLocator // if presented, else it should be omitted.\n\n}", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/867#discussion_r431875213", "createdAt": "2020-05-28T14:24:44Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/HooksPhaseBuilder.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.sap.cloud.lm.sl.cf.process.util;\n+\n+import com.sap.cloud.lm.sl.cf.core.model.HookPhase;\n+import com.sap.cloud.lm.sl.cf.core.model.HookPhaseProcessType;\n+import com.sap.cloud.lm.sl.cf.core.model.HookProcessPhase;\n+import com.sap.cloud.lm.sl.cf.core.model.Phase;\n+import com.sap.cloud.lm.sl.cf.core.model.SubprocessPhase;\n+import com.sap.cloud.lm.sl.cf.process.steps.ProcessContext;\n+import com.sap.cloud.lm.sl.cf.process.variables.Variables;\n+import com.sap.cloud.lm.sl.cf.web.api.model.ProcessType;\n+\n+public class HooksPhaseBuilder {\n+\n+    private static final String HOOKS_DELIMITER = \".\";\n+    private final ProcessTypeParser processTypeParser;\n+    private final ProcessContext context;\n+\n+    public HooksPhaseBuilder(ProcessTypeParser processTypeParser, ProcessContext context) {\n+        this.processTypeParser = processTypeParser;\n+        this.context = context;\n+    }\n+\n+    public String buildHookPhase(HookPhase hookPhase) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19e852880763bc18ad607080653e06b7cfa83421"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzQwODUzOnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/HookPhase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjowNDo1NFrOGcZ6_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjowNDo1NFrOGcZ6_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQzODAxMw==", "bodyText": "can replace this with Function.identity()", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/867#discussion_r432438013", "createdAt": "2020-05-29T12:04:54Z", "author": {"login": "ikasarov"}, "path": "com.sap.cloud.lm.sl.cf.core/src/main/java/com/sap/cloud/lm/sl/cf/core/model/HookPhase.java", "diffHunk": "@@ -6,26 +6,33 @@\n import java.util.stream.Collectors;\n \n public enum HookPhase {\n-    APPLICATION_BEFORE_STOP_LIVE(\"application.before-stop.live\"),\n-    APPLICATION_BEFORE_STOP_IDLE(\"application.before-stop.idle\"),\n-    APPLICATION_AFTER_STOP_LIVE(\"application.after-stop.live\"),\n-    APPLICATION_AFTER_STOP_IDLE(\"application.after-stop.idle\"),\n-    APPLICATION_BEFORE_UNMAP_ROUTES(\"application.before-unmap-routes\"),\n-    APPLICATION_BEFORE_START_IDLE(\"application.before-start.idle\"),\n-    APPLICATION_BEFORE_START_LIVE(\"application.before-start.live\"),\n-    APPLICATION_BEFORE_START(\"application.before-start\"),\n+    BEFORE_STOP(\"before-stop\"),\n+    DEPLOY_APPLICATION_BEFORE_STOP(\"deploy.application.before-stop\"),\n+    BLUE_GREEN_APPLICATION_BEFORE_STOP_IDLE(\"blue-green.application.before-stop.idle\"),\n+    BLUE_GREEN_APPLICATION_BEFORE_STOP_LIVE(\"blue-green.application.before-stop.live\"),\n+    AFTER_STOP(\"after-stop\"),\n+    DEPLOY_APPLICATION_AFTER_STOP(\"deploy.application.after-stop\"),\n+    BLUE_GREEN_APPLICATION_AFTER_STOP_IDLE(\"blue-green.application.after-stop.idle\"),\n+    BLUE_GREEN_APPLICATION_AFTER_STOP_LIVE(\"blue-green.application.after-stop.live\"),\n+    BEFORE_UNMAP_ROUTES(\"before-unmap-routes\"),\n+    DEPLOY_APPLICATION_BEFORE_UNMAP_ROUTES(\"deploy.application.before-unmap-routes\"),\n+    BLUE_GREEN_APPLICATION_BEFORE_UNMAP_ROUTES_LIVE(\"blue-green.application.before-unmap-routes.live\"),\n+    BLUE_GREEN_APPLICATION_BEFORE_UNMAP_ROUTES_IDLE(\"blue-green.application.before-unmap-routes.idle\"),\n+    BEFORE_START(\"before-start\"),\n+    DEPLOY_APPLICATION_BEFORE_START(\"deploy.application.before-start\"),\n+    BLUE_GREEN_APPLICATION_BEFORE_START_IDLE(\"blue-green.application.before-start.idle\"),\n+    BLUE_GREEN_APPLICATION_BEFORE_START_LIVE(\"blue-green.application.before-start.live\"),\n     NONE(\"\");\n \n+    private static Map<String, HookPhase> namesToValues = Arrays.stream(HookPhase.values())\n+                                                                .collect(Collectors.toMap(hookPhase -> hookPhase.value,\n+                                                                                          hookPhase -> hookPhase));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98d98fdc93c91c4517c83095b8f968695ed46140"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzQ4MTQ4OnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/SyncFlowableStepWithHooks.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjoyNzo1NlrOGcanVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMjoyNzo1NlrOGcanVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ0OTM2NQ==", "bodyText": "why is this saved in the executedHooks but not used for anything?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/867#discussion_r432449365", "createdAt": "2020-05-29T12:27:56Z", "author": {"login": "ikasarov"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/SyncFlowableStepWithHooks.java", "diffHunk": "@@ -25,20 +26,21 @@\n     @Inject\n     private HooksPhaseGetter hooksPhaseGetter;\n     @Inject\n-    private HooksExecutor hooksExecutor;\n+    protected HooksPhaseBuilder hooksPhaseBuilder;\n \n     @Override\n     protected StepPhase executeStep(ProcessContext context) {\n         ModuleDeterminer moduleDeterminer = getModuleDeterminer(context);\n         StepPhase currentStepPhase = context.getVariable(Variables.STEP_PHASE);\n         Module moduleToDeploy = moduleDeterminer.determineModuleToDeploy(context);\n         HooksCalculator hooksCalculator = getHooksCalculator(context);\n-        List<Hook> executedHooks = hooksExecutor.executeBeforeStepHooks(hooksCalculator, moduleToDeploy, currentStepPhase);\n+        HooksExecutor hooksExecutor = getHooksExecutor(hooksCalculator, moduleToDeploy);\n+        List<Hook> executedHooks = hooksExecutor.executeBeforeStepHooks(currentStepPhase);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98d98fdc93c91c4517c83095b8f968695ed46140"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzU4NTQ5OnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/HooksPhaseBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzowMToxMVrOGcbpsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMzowNDoyNlrOGcbw0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2NjM1NQ==", "bodyText": "wouldn't it make a bit more sense to have this code in the enum for the HookPhase itself?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/867#discussion_r432466355", "createdAt": "2020-05-29T13:01:11Z", "author": {"login": "ikasarov"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/HooksPhaseBuilder.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.sap.cloud.lm.sl.cf.process.util;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.sap.cloud.lm.sl.cf.core.model.HookPhase;\n+import com.sap.cloud.lm.sl.cf.core.model.HookPhaseProcessType;\n+import com.sap.cloud.lm.sl.cf.core.model.HookProcessPhase;\n+import com.sap.cloud.lm.sl.cf.core.model.Phase;\n+import com.sap.cloud.lm.sl.cf.core.model.SubprocessPhase;\n+import com.sap.cloud.lm.sl.cf.process.steps.ProcessContext;\n+import com.sap.cloud.lm.sl.cf.process.variables.Variables;\n+import com.sap.cloud.lm.sl.cf.web.api.model.ProcessType;\n+\n+@Named\n+public class HooksPhaseBuilder {\n+\n+    private static final String HOOKS_DELIMITER = \".\";\n+    private static final String DEFAULT_HOOK_ENTITY = \"application\";\n+    private final ProcessTypeParser processTypeParser;\n+\n+    @Inject\n+    public HooksPhaseBuilder(ProcessTypeParser processTypeParser) {\n+        this.processTypeParser = processTypeParser;\n+    }\n+\n+    public List<HookPhase> buildHookPhases(List<HookPhase> hookPhases, ProcessContext context) {\n+        return hookPhases.stream()\n+                         .map(hookPhase -> buildPhase(hookPhase, context))\n+                         .map(HookPhase::fromString)\n+                         .collect(Collectors.toList());\n+    }\n+\n+    private String buildPhase(HookPhase hookPhase, ProcessContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98d98fdc93c91c4517c83095b8f968695ed46140"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2ODE3Ng==", "bodyText": "for example: HOOKS_DELIMITER is something already used in the enum, as well as the enum has a method to get a value from 1 string, why not add a method to get a value from all the needed strings (deploymentType, phase, phaseLocator)", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/867#discussion_r432468176", "createdAt": "2020-05-29T13:04:26Z", "author": {"login": "ikasarov"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/HooksPhaseBuilder.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.sap.cloud.lm.sl.cf.process.util;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import com.sap.cloud.lm.sl.cf.core.model.HookPhase;\n+import com.sap.cloud.lm.sl.cf.core.model.HookPhaseProcessType;\n+import com.sap.cloud.lm.sl.cf.core.model.HookProcessPhase;\n+import com.sap.cloud.lm.sl.cf.core.model.Phase;\n+import com.sap.cloud.lm.sl.cf.core.model.SubprocessPhase;\n+import com.sap.cloud.lm.sl.cf.process.steps.ProcessContext;\n+import com.sap.cloud.lm.sl.cf.process.variables.Variables;\n+import com.sap.cloud.lm.sl.cf.web.api.model.ProcessType;\n+\n+@Named\n+public class HooksPhaseBuilder {\n+\n+    private static final String HOOKS_DELIMITER = \".\";\n+    private static final String DEFAULT_HOOK_ENTITY = \"application\";\n+    private final ProcessTypeParser processTypeParser;\n+\n+    @Inject\n+    public HooksPhaseBuilder(ProcessTypeParser processTypeParser) {\n+        this.processTypeParser = processTypeParser;\n+    }\n+\n+    public List<HookPhase> buildHookPhases(List<HookPhase> hookPhases, ProcessContext context) {\n+        return hookPhases.stream()\n+                         .map(hookPhase -> buildPhase(hookPhase, context))\n+                         .map(HookPhase::fromString)\n+                         .collect(Collectors.toList());\n+    }\n+\n+    private String buildPhase(HookPhase hookPhase, ProcessContext context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQ2NjM1NQ=="}, "originalCommit": {"oid": "98d98fdc93c91c4517c83095b8f968695ed46140"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODExMTQxOnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/StopAppStep.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDowOTo1NFrOGdFYLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDowOTo1NFrOGdFYLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE0OTk5OQ==", "bodyText": "Try extracting the whole block of code into another method and try to re-use it below, in the method getHookPhasesAfterStep, because it seems like a copy-pasted below?", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/867#discussion_r433149999", "createdAt": "2020-06-01T10:09:54Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/steps/StopAppStep.java", "diffHunk": "@@ -58,12 +59,28 @@ protected String getStepErrorMessage(ProcessContext context) {\n \r\n     @Override\r\n     public List<HookPhase> getHookPhasesBeforeStep(ProcessContext context) {\r\n-        return hooksPhaseBuilder.buildHookPhases(Collections.singletonList(HookPhase.BEFORE_STOP), context);\r\n+        List<HookPhase> hookPhases = new ArrayList<>();\r\n+        hookPhases.add(HookPhase.BEFORE_STOP);\r\n+        ProcessType processType = processTypeParser.getProcessType(context.getExecution());\r\n+        if (ProcessType.BLUE_GREEN_DEPLOY.equals(processType)) {\r\n+            hookPhases.add(HookPhase.APPLICATION_BEFORE_STOP_IDLE);\r\n+        } else {\r\n+            hookPhases.add(HookPhase.APPLICATION_BEFORE_STOP_LIVE);\r\n+        }\r\n+        return hooksPhaseBuilder.buildHookPhases(hookPhases, context);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eae61914f7ef8e5a7f2140231e1f9d031995e547"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODEyNTYxOnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/ModuleHooksAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoxNToxN1rOGdFg-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoxNToxN1rOGdFg-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1MjI1MQ==", "bodyText": "rename to containsOldPhase", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/867#discussion_r433152251", "createdAt": "2020-06-01T10:15:17Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/ModuleHooksAggregator.java", "diffHunk": "@@ -82,7 +82,26 @@ private boolean shouldExecuteHook(Map<String, List<String>> alreadyExecutedHooks\n     private boolean hasAllPhasesExecuted(Map<String, List<String>> alreadyExecutedHooks, Hook hookToBeExecuted,\n                                          List<HookPhase> hookPhasesForCurrentStepPhase) {\n         List<HookPhase> executedHookPhasesForHook = getExecutedHookPhasesForHook(alreadyExecutedHooks, hookToBeExecuted.getName());\n-        return executedHookPhasesForHook.containsAll(hookPhasesForCurrentStepPhase);\n+        return executedHookPhasesForHook.containsAll(getHookPhasesForCurrentStepPhase(hookToBeExecuted, hookPhasesForCurrentStepPhase));\n+    }\n+\n+    @Deprecated\n+    private List<HookPhase> getHookPhasesForCurrentStepPhase(Hook hookToBeExecuted, List<HookPhase> hookPhasesForCurrentStepPhase) {\n+        boolean isThereOldPhase = hookToBeExecuted.getPhases()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eae61914f7ef8e5a7f2140231e1f9d031995e547"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODEyODgzOnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/ModuleHooksAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoxNjo0MVrOGdFjAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoxNjo0MVrOGdFjAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1Mjc2OQ==", "bodyText": "extract this getHookPhasesForCurrentStepPhase(hookToBeExecuted, hookPhasesForCurrentStepPhase) to a variable", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/867#discussion_r433152769", "createdAt": "2020-06-01T10:16:41Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/ModuleHooksAggregator.java", "diffHunk": "@@ -82,7 +82,26 @@ private boolean shouldExecuteHook(Map<String, List<String>> alreadyExecutedHooks\n     private boolean hasAllPhasesExecuted(Map<String, List<String>> alreadyExecutedHooks, Hook hookToBeExecuted,\n                                          List<HookPhase> hookPhasesForCurrentStepPhase) {\n         List<HookPhase> executedHookPhasesForHook = getExecutedHookPhasesForHook(alreadyExecutedHooks, hookToBeExecuted.getName());\n-        return executedHookPhasesForHook.containsAll(hookPhasesForCurrentStepPhase);\n+        return executedHookPhasesForHook.containsAll(getHookPhasesForCurrentStepPhase(hookToBeExecuted, hookPhasesForCurrentStepPhase));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eae61914f7ef8e5a7f2140231e1f9d031995e547"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODEzMDI0OnYy", "diffSide": "RIGHT", "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/ModuleHooksAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoxNzoyMFrOGdFj_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMDoxNzoyMFrOGdFj_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE1MzAyMQ==", "bodyText": "Extract HookPhase.getOldPhases() .contains(hookPhase) into method and re-use it below", "url": "https://github.com/cloudfoundry-incubator/multiapps-controller/pull/867#discussion_r433153021", "createdAt": "2020-06-01T10:17:20Z", "author": {"login": "enchobelezirev"}, "path": "com.sap.cloud.lm.sl.cf.process/src/main/java/com/sap/cloud/lm/sl/cf/process/util/ModuleHooksAggregator.java", "diffHunk": "@@ -82,7 +82,26 @@ private boolean shouldExecuteHook(Map<String, List<String>> alreadyExecutedHooks\n     private boolean hasAllPhasesExecuted(Map<String, List<String>> alreadyExecutedHooks, Hook hookToBeExecuted,\n                                          List<HookPhase> hookPhasesForCurrentStepPhase) {\n         List<HookPhase> executedHookPhasesForHook = getExecutedHookPhasesForHook(alreadyExecutedHooks, hookToBeExecuted.getName());\n-        return executedHookPhasesForHook.containsAll(hookPhasesForCurrentStepPhase);\n+        return executedHookPhasesForHook.containsAll(getHookPhasesForCurrentStepPhase(hookToBeExecuted, hookPhasesForCurrentStepPhase));\n+    }\n+\n+    @Deprecated\n+    private List<HookPhase> getHookPhasesForCurrentStepPhase(Hook hookToBeExecuted, List<HookPhase> hookPhasesForCurrentStepPhase) {\n+        boolean isThereOldPhase = hookToBeExecuted.getPhases()\n+                                                  .stream()\n+                                                  .anyMatch(hookPhase -> HookPhase.getOldPhases()\n+                                                                                  .contains(HookPhase.fromString(hookPhase)));\n+        if (isThereOldPhase) {\n+            return hookPhasesForCurrentStepPhase.stream()\n+                                                .filter(hookPhase -> HookPhase.getOldPhases()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eae61914f7ef8e5a7f2140231e1f9d031995e547"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 541, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}