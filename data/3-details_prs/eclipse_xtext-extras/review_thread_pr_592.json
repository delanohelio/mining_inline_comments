{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MTAyMzIx", "number": 592, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoxMToyMlrOD3gKrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoxNTo0MlrOD3hcHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTI1Mjk0OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/TreeAppendableUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoxMToyMlrOGNyVTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzoxMToyMlrOGNyVTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEwOTMyNQ==", "bodyText": "ok", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417109325", "createdAt": "2020-04-29T07:11:22Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/TreeAppendableUtil.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.compiler;\n+\n+import com.google.inject.Inject;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.generator.trace.LocationData;\n+import org.eclipse.xtext.resource.ILocationInFileProvider;\n+import org.eclipse.xtext.resource.ILocationInFileProviderExtension;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.util.ITextRegionWithLineInformation;\n+import org.eclipse.xtext.xbase.compiler.output.ITreeAppendable;\n+import org.eclipse.xtext.xbase.compiler.output.TreeAppendable;\n+\n+public class TreeAppendableUtil {\n+\t@Inject\n+\tprivate ILocationInFileProvider locationProvider;\n+\n+\tpublic ITreeAppendable traceSignificant(ITreeAppendable appendable, EObject source) {\n+\t\treturn this.traceSignificant(appendable, source, false);\n+\t}\n+\n+\tpublic ITreeAppendable traceSignificant(ITreeAppendable appendable, EObject source, boolean useForDebugging) {\n+\t\tif (appendable instanceof TreeAppendable) {\n+\t\t\treturn ((TreeAppendable) appendable).trace(source,\n+\t\t\t\t\tILocationInFileProviderExtension.RegionDescription.SIGNIFICANT, useForDebugging);\n+\t\t} else {\n+\t\t\tITextRegionWithLineInformation it = (ITextRegionWithLineInformation) locationProvider\n+\t\t\t\t\t.getSignificantTextRegion(source);\n+\t\t\tif (it != null && it != ITextRegion.EMPTY_REGION) {\n+\t\t\t\treturn appendable.trace(new LocationData(it.getOffset(), it.getLength(), it.getLineNumber(),\n+\t\t\t\t\t\tit.getEndLineNumber(), null), useForDebugging);\n+\t\t\t} else {\n+\t\t\t\treturn appendable;\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tpublic ITreeAppendable traceWithComments(ITreeAppendable appendable, EObject source) {\n+\t\tif (appendable instanceof TreeAppendable) {\n+\t\t\treturn ((TreeAppendable) appendable).trace(source,\n+\t\t\t\t\tILocationInFileProviderExtension.RegionDescription.INCLUDING_COMMENTS, false);\n+\t\t} else {\n+\t\t\tfinal ITextRegionWithLineInformation it;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6754d69e90c0558516ed83b6bb98dc68fa1793a"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTM5NDg1OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/annotations/validation/AnnotationValueValidator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo1NTo0MVrOGNzqzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo1NTo0MVrOGNzqzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzMTIxNA==", "bodyText": "Not sure if it's really better: expression.getElements().stream().allMatch(this::isValidAnnotationValue)", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417131214", "createdAt": "2020-04-29T07:55:41Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/annotations/validation/AnnotationValueValidator.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.annotations.validation;\n+\n+import org.eclipse.xtext.validation.ValidationMessageAcceptor;\n+import org.eclipse.xtext.xbase.XAbstractFeatureCall;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.XListLiteral;\n+import org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotation;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.validation.ConstantExpressionValidator;\n+import org.eclipse.xtext.xbase.validation.IssueCodes;\n+import org.eclipse.xtext.xbase.validation.NotResolvedFeatureException;\n+\n+/**\n+ * @author Sebastian Zarnekow - Initial contribution and API\n+ */\n+public class AnnotationValueValidator extends ConstantExpressionValidator {\n+\tpublic void validateAnnotationValue(XExpression value, ValidationMessageAcceptor acceptor) {\n+\t\ttry {\n+\t\t\tif (!isValidAnnotationValue(value)) {\n+\t\t\t\tacceptor.acceptError(\"The value for an annotation attribute must be a constant expression\", value, null,\n+\t\t\t\t\t\tValidationMessageAcceptor.INSIGNIFICANT_INDEX, IssueCodes.ANNOTATIONS_ILLEGAL_ATTRIBUTE);\n+\t\t\t}\n+\t\t} catch (NotResolvedFeatureException e) {\n+\t\t\t// do nothing\n+\t\t}\n+\t}\n+\n+\tprotected boolean _isValidAnnotationValue(XExpression expression) {\n+\t\treturn super.isConstant(expression);\n+\t}\n+\n+\tprotected boolean _isValidAnnotationValue(Void nullValue) {\n+\t\treturn true;\n+\t}\n+\n+\tprotected boolean _isValidAnnotationValue(XListLiteral expression) {\n+\t\treturn expression.getElements().isEmpty()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "424410cf971634f664d2f451c4512bdef6cac6b1"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTM5ODUyOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/annotations/validation/AnnotationValueValidator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo1Njo0NFrOGNztEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo1Njo0NFrOGNztEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzMTc5NA==", "bodyText": "I'd like to avoid IterableExtensions and friends in production code", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417131794", "createdAt": "2020-04-29T07:56:44Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/annotations/validation/AnnotationValueValidator.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.annotations.validation;\n+\n+import org.eclipse.xtext.validation.ValidationMessageAcceptor;\n+import org.eclipse.xtext.xbase.XAbstractFeatureCall;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.XListLiteral;\n+import org.eclipse.xtext.xbase.annotations.xAnnotations.XAnnotation;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "424410cf971634f664d2f451c4512bdef6cac6b1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTM5OTcxOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/BrokenTypeRefDetector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo1NzowN1rOGNzt3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo1NzowN1rOGNzt3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzMTk5Ng==", "bodyText": "it.getReferences().stream().anyMatch(..)", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417131996", "createdAt": "2020-04-29T07:57:07Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/BrokenTypeRefDetector.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/**\n+ * Copyright (c) 2012, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.compiler;\n+\n+import org.eclipse.xtext.common.types.JvmCompoundTypeReference;\n+import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;\n+import org.eclipse.xtext.common.types.JvmTypeReference;\n+import org.eclipse.xtext.common.types.JvmWildcardTypeReference;\n+import org.eclipse.xtext.common.types.util.AbstractTypeReferenceVisitor;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+\n+/**\n+ * A visitor that detects broken type references. Returns <code>true</code> if a\n+ * broken reference was detected.\n+ */\n+public class BrokenTypeRefDetector extends AbstractTypeReferenceVisitor.InheritanceAware<Boolean> {\n+\t@Override\n+\tprotected Boolean handleNullReference() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic Boolean doVisitTypeReference(JvmTypeReference it) {\n+\t\treturn it.getType() == null || it.getType().eIsProxy();\n+\t}\n+\n+\t@Override\n+\tpublic Boolean doVisitCompoundTypeReference(JvmCompoundTypeReference it) {\n+\t\treturn doVisitTypeReference(it) || IterableExtensions.exists(it.getReferences(), ref -> visit(ref));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "424410cf971634f664d2f451c4512bdef6cac6b1"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTQwMjE4OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/LoopExtensions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo1Nzo0OVrOGNzvYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo1Nzo0OVrOGNzvYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzMjM4NQ==", "bodyText": "T extends Object -> T is sufficient", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417132385", "createdAt": "2020-04-29T07:57:49Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/LoopExtensions.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2012 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.compiler;\n+\n+import org.eclipse.xtext.xbase.compiler.output.ITreeAppendable;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+\n+import com.google.common.collect.Iterables;\n+\n+/**\n+ * @author Jan Koehnlein\n+ */\n+public class LoopExtensions {\n+\t/**\n+\t * Iterates elements and execute the procedure. A prefix, a separator and a\n+\t * suffix can be initialized with the loopInitializer lambda.\n+\t */\n+\tpublic <T extends Object> void forEach(ITreeAppendable appendable, Iterable<T> elements,\n+\t\t\tProcedure1<? super LoopParams> loopInitializer, Procedure1<? super T> procedure) {\n+\t\tif (Iterables.isEmpty(elements)) {\n+\t\t\treturn;\n+\t\t}\n+\t\tLoopParams params = new LoopParams();\n+\t\tloopInitializer.apply(params);\n+\t\tparams.appendPrefix(appendable);\n+\t\tprocedure.apply(Iterables.getFirst(elements, null));\n+\t\tIterableExtensions.tail(elements).forEach((T it) -> {\n+\t\t\tparams.appendSeparator(appendable);\n+\t\t\tprocedure.apply(it);\n+\t\t});\n+\t\tparams.appendSuffix(appendable);\n+\t}\n+\n+\t/**\n+\t * Uses curly braces and comma as delimiters. Doesn't use them for single\n+\t * valued iterables.\n+\t */\n+\tpublic <T extends Object> void forEachWithShortcut(ITreeAppendable appendable, Iterable<T> elements,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "424410cf971634f664d2f451c4512bdef6cac6b1"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTQwNTM2OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/LoopExtensions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo1ODo0NlrOGNzxbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwNzo1ODo0NlrOGNzxbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzMjkxMQ==", "bodyText": "<T> without upper bound is equivalent", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417132911", "createdAt": "2020-04-29T07:58:46Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/LoopExtensions.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * Copyright (c) 2012 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.compiler;\n+\n+import org.eclipse.xtext.xbase.compiler.output.ITreeAppendable;\n+import org.eclipse.xtext.xbase.lib.IterableExtensions;\n+import org.eclipse.xtext.xbase.lib.Procedures.Procedure1;\n+\n+import com.google.common.collect.Iterables;\n+\n+/**\n+ * @author Jan Koehnlein\n+ */\n+public class LoopExtensions {\n+\t/**\n+\t * Iterates elements and execute the procedure. A prefix, a separator and a\n+\t * suffix can be initialized with the loopInitializer lambda.\n+\t */\n+\tpublic <T extends Object> void forEach(ITreeAppendable appendable, Iterable<T> elements,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "424410cf971634f664d2f451c4512bdef6cac6b1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTQ1MDY5OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/LoopParams.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoxMjowMFrOGN0NEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoxMjowMFrOGN0NEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzEzOTk4Ng==", "bodyText": "A few unnecessary param types in the lambdas", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417139986", "createdAt": "2020-04-29T08:12:00Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/LoopParams.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\n+ * Copyright (c) 2012, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.compiler;\n+\n+import org.eclipse.xtext.xbase.compiler.output.ITreeAppendable;\n+import org.eclipse.xtext.xbase.lib.Functions.Function1;\n+\n+public class LoopParams {\n+\tprivate Function1<? super ITreeAppendable, ? extends ITreeAppendable> prefix;\n+\n+\tprivate Function1<? super ITreeAppendable, ? extends ITreeAppendable> separator;\n+\n+\tprivate Function1<? super ITreeAppendable, ? extends ITreeAppendable> suffix;\n+\n+\tpublic Function1<? super ITreeAppendable, ? extends ITreeAppendable> setPrefix(\n+\t\t\tFunction1<? super ITreeAppendable, ? extends ITreeAppendable> prefix) {\n+\t\treturn this.prefix = prefix;\n+\t}\n+\n+\tpublic Function1<? super ITreeAppendable, ? extends ITreeAppendable> setSeparator(\n+\t\t\tFunction1<? super ITreeAppendable, ? extends ITreeAppendable> separator) {\n+\t\treturn this.separator = separator;\n+\t}\n+\n+\tpublic Function1<? super ITreeAppendable, ? extends ITreeAppendable> setSuffix(\n+\t\t\tFunction1<? super ITreeAppendable, ? extends ITreeAppendable> suffix) {\n+\t\treturn this.suffix = suffix;\n+\t}\n+\n+\tpublic Function1<? super ITreeAppendable, ? extends ITreeAppendable> setPrefix(String prefix) {\n+\t\treturn this.prefix = (ITreeAppendable it) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "424410cf971634f664d2f451c4512bdef6cac6b1"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTQ1NDI4OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/TreeAppendableUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoxMzoxM1rOGN0PaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozNTozOFrOGN0-qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0MDU4NQ==", "bodyText": "Looks like we could extract a single protected method here", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417140585", "createdAt": "2020-04-29T08:13:13Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/TreeAppendableUtil.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.compiler;\n+\n+import com.google.inject.Inject;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.generator.trace.LocationData;\n+import org.eclipse.xtext.resource.ILocationInFileProvider;\n+import org.eclipse.xtext.resource.ILocationInFileProviderExtension;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.util.ITextRegionWithLineInformation;\n+import org.eclipse.xtext.xbase.compiler.output.ITreeAppendable;\n+import org.eclipse.xtext.xbase.compiler.output.TreeAppendable;\n+\n+public class TreeAppendableUtil {\n+\t@Inject\n+\tprivate ILocationInFileProvider locationProvider;\n+\n+\tpublic ITreeAppendable traceSignificant(ITreeAppendable appendable, EObject source) {\n+\t\treturn traceSignificant(appendable, source, false);\n+\t}\n+\n+\tpublic ITreeAppendable traceSignificant(ITreeAppendable appendable, EObject source, boolean useForDebugging) {\n+\t\tif (appendable instanceof TreeAppendable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "424410cf971634f664d2f451c4512bdef6cac6b1"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MjY4MQ==", "bodyText": "elses are not the same", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417152681", "createdAt": "2020-04-29T08:35:38Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/TreeAppendableUtil.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.compiler;\n+\n+import com.google.inject.Inject;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.xtext.generator.trace.LocationData;\n+import org.eclipse.xtext.resource.ILocationInFileProvider;\n+import org.eclipse.xtext.resource.ILocationInFileProviderExtension;\n+import org.eclipse.xtext.util.ITextRegion;\n+import org.eclipse.xtext.util.ITextRegionWithLineInformation;\n+import org.eclipse.xtext.xbase.compiler.output.ITreeAppendable;\n+import org.eclipse.xtext.xbase.compiler.output.TreeAppendable;\n+\n+public class TreeAppendableUtil {\n+\t@Inject\n+\tprivate ILocationInFileProvider locationProvider;\n+\n+\tpublic ITreeAppendable traceSignificant(ITreeAppendable appendable, EObject source) {\n+\t\treturn traceSignificant(appendable, source, false);\n+\t}\n+\n+\tpublic ITreeAppendable traceSignificant(ITreeAppendable appendable, EObject source, boolean useForDebugging) {\n+\t\tif (appendable instanceof TreeAppendable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0MDU4NQ=="}, "originalCommit": {"oid": "424410cf971634f664d2f451c4512bdef6cac6b1"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTQ1ODI2OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/imports/ImportsAcceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoxNDozM1rOGN0R4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoxNDozM1rOGN0R4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0MTIxOQ==", "bodyText": "Unnecessary @Accessors", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417141219", "createdAt": "2020-04-29T08:14:33Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/imports/ImportsAcceptor.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.imports;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.eclipse.xtend.lib.annotations.AccessorType;\n+import org.eclipse.xtend.lib.annotations.Accessors;\n+import org.eclipse.xtext.common.types.JvmIdentifiableElement;\n+import org.eclipse.xtext.common.types.JvmType;\n+import org.eclipse.xtext.xbase.XAbstractFeatureCall;\n+\n+/**\n+ * @author dhuebner - Initial contribution and API\n+ */\n+public interface ImportsAcceptor {\n+\t@Accessors(AccessorType.PUBLIC_GETTER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "424410cf971634f664d2f451c4512bdef6cac6b1"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTQ1OTA5OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/imports/StaticallyImportedMemberProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoxNDo0N1rOGN0SZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoxNDo0N1rOGN0SZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0MTM0OQ==", "bodyText": "CollectionLiterals", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417141349", "createdAt": "2020-04-29T08:14:47Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/imports/StaticallyImportedMemberProvider.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) 2014, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xbase.imports;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.xtext.common.types.JvmDeclaredType;\n+import org.eclipse.xtext.common.types.JvmFeature;\n+import org.eclipse.xtext.resource.XtextResource;\n+import org.eclipse.xtext.xbase.lib.CollectionLiterals;\n+import org.eclipse.xtext.xbase.typesystem.override.IResolvedFeatures;\n+import org.eclipse.xtext.xbase.typesystem.util.ContextualVisibilityHelper;\n+import org.eclipse.xtext.xbase.typesystem.util.IVisibilityHelper;\n+import org.eclipse.xtext.xtype.XImportDeclaration;\n+\n+import com.google.common.collect.Iterables;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Anton Kosyakov - Initial contribution and API\n+ */\n+public class StaticallyImportedMemberProvider {\n+\t@Inject\n+\tprivate IImportsConfiguration importsConfiguration;\n+\n+\t@Inject\n+\tprivate IResolvedFeatures.Provider resolvedFeaturesProvider;\n+\n+\t@Inject\n+\tprivate IVisibilityHelper visibilityHelper;\n+\n+\tpublic Iterable<JvmFeature> findAllFeatures(XImportDeclaration it) {\n+\t\tJvmDeclaredType importedType = it.getImportedType();\n+\t\tif (!it.isStatic() || importedType == null) {\n+\t\t\treturn CollectionLiterals.<JvmFeature>emptyList();\n+\t\t}\n+\t\tIVisibilityHelper visibilityHelper = getVisibilityHelper(it.eResource());\n+\t\tIResolvedFeatures resolvedFeatures = resolvedFeaturesProvider.getResolvedFeatures(importedType);\n+\t\treturn Iterables.filter(resolvedFeatures.getAllFeatures(), (JvmFeature feature) -> {\n+\t\t\treturn feature.isStatic() && visibilityHelper.isVisible(feature)\n+\t\t\t\t\t&& (it.getMemberName() == null || feature.getSimpleName().startsWith(it.getMemberName()));\n+\t\t});\n+\t}\n+\n+\tpublic Iterable<JvmFeature> getAllFeatures(XImportDeclaration it) {\n+\t\treturn getAllFeatures(it.eResource(), it.getImportedType(), it.isStatic(), it.isExtension(),\n+\t\t\t\tit.getMemberName());\n+\t}\n+\n+\tpublic Iterable<JvmFeature> getAllFeatures(Resource resource, JvmDeclaredType importedType, boolean isStatic,\n+\t\t\tboolean extension, String memberName) {\n+\t\tif (!isStatic || importedType == null) {\n+\t\t\treturn CollectionLiterals.<JvmFeature>emptyList();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "424410cf971634f664d2f451c4512bdef6cac6b1"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTQ2MTQwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/jvmmodel/JvmIdentifiableMetaData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoxNTo0MlrOGN0UCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoxNTo0MlrOGN0UCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0MTc2OA==", "bodyText": "Accessors", "url": "https://github.com/eclipse/xtext-extras/pull/592#discussion_r417141768", "createdAt": "2020-04-29T08:15:42Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/jvmmodel/JvmIdentifiableMetaData.java", "diffHunk": "@@ -20,22 +18,20 @@\n  * \n  * @since 2.7\n  */\n-@SuppressWarnings(\"all\")\n public class JvmIdentifiableMetaData extends AdapterImpl {\n-  @Accessors\n-  private boolean synthetic;\n-  \n-  @Override\n-  public boolean isAdapterForType(final Object type) {\n-    return Objects.equal(JvmIdentifiableMetaData.class, type);\n-  }\n-  \n-  @Pure\n-  public boolean isSynthetic() {\n-    return this.synthetic;\n-  }\n-  \n-  public void setSynthetic(final boolean synthetic) {\n-    this.synthetic = synthetic;\n-  }\n+\t@Accessors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "424410cf971634f664d2f451c4512bdef6cac6b1"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 701, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}