{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MzIxMTUz", "number": 576, "title": "[eclipse/xtext#1679] ported xtend code 2 java", "bodyText": "[eclipse/xtext#1679] ported xtend code 2 java\nSigned-off-by: Christian Dietrich christian.dietrich@itemis.de", "createdAt": "2020-03-10T19:25:46Z", "url": "https://github.com/eclipse/xtext-extras/pull/576", "merged": true, "mergeCommit": {"oid": "eb7635d41be0367128c63a65b281a94b3024dcac"}, "closed": true, "closedAt": "2020-03-12T14:29:08Z", "author": {"login": "cdietrich"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMoHWKAFqTM3MjgxNDkzOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcM8fUQgFqTM3MzU5ODg5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyODE0OTM5", "url": "https://github.com/eclipse/xtext-extras/pull/576#pullrequestreview-372814939", "createdAt": "2020-03-11T14:33:20Z", "commit": {"oid": "ec0d114c1b05d94a3dc18564221631ef472a8e1c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDozMzoyMFrOF05o_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDozNjozMVrOF05ySA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNDY1NQ==", "bodyText": "Unneeded finals", "url": "https://github.com/eclipse/xtext-extras/pull/576#discussion_r391014655", "createdAt": "2020-03-11T14:33:20Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.builder.standalone.tests/src/org/eclipse/xtext/builder/tests/MyGenerator.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright (c) 2009, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.builder.tests;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.xtext.builder.tests.builderTestLanguage.Element;\n+import org.eclipse.xtext.generator.IFileSystemAccess;\n+import org.eclipse.xtext.generator.IFileSystemAccess2;\n+import org.eclipse.xtext.generator.IGenerator;\n+import org.eclipse.xtext.xbase.lib.IteratorExtensions;\n+\n+import com.google.common.collect.Iterables;\n+\n+public class MyGenerator implements IGenerator {\n+\t@Override\n+\tpublic void doGenerate(final Resource input, final IFileSystemAccess fsa) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec0d114c1b05d94a3dc18564221631ef472a8e1c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNTYxNg==", "bodyText": "Don't we prefer Streams.stream(...).filter(...)?", "url": "https://github.com/eclipse/xtext-extras/pull/576#discussion_r391015616", "createdAt": "2020-03-11T14:34:38Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.builder.standalone.tests/src/org/eclipse/xtext/builder/tests/MyGenerator.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\n+ * Copyright (c) 2009, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.builder.tests;\n+\n+import org.eclipse.emf.ecore.resource.Resource;\n+import org.eclipse.xtext.builder.tests.builderTestLanguage.Element;\n+import org.eclipse.xtext.generator.IFileSystemAccess;\n+import org.eclipse.xtext.generator.IFileSystemAccess2;\n+import org.eclipse.xtext.generator.IGenerator;\n+import org.eclipse.xtext.xbase.lib.IteratorExtensions;\n+\n+import com.google.common.collect.Iterables;\n+\n+public class MyGenerator implements IGenerator {\n+\t@Override\n+\tpublic void doGenerate(final Resource input, final IFileSystemAccess fsa) {\n+\t\tfor (final Element ele : Iterables.filter(IteratorExtensions.toIterable(input.getAllContents()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec0d114c1b05d94a3dc18564221631ef472a8e1c"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNjQ3NA==", "bodyText": "We don't like sneakies", "url": "https://github.com/eclipse/xtext-extras/pull/576#discussion_r391016474", "createdAt": "2020-03-11T14:35:46Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.java/src/org/eclipse/xtext/java/resource/InMemoryClassLoader.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/**\n+ * Copyright (c) 2018, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.java.resource;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.net.URLStreamHandler;\n+import java.util.Map;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+\n+public class InMemoryClassLoader extends ClassLoader {\n+\tprivate Map<String, byte[]> classMap;\n+\n+\tpublic InMemoryClassLoader(Map<String, byte[]> classMap, ClassLoader parent) {\n+\t\tsuper(parent);\n+\t\tthis.classMap = classMap;\n+\t}\n+\n+\t@Override\n+\tprotected Class<?> findClass(String name) throws ClassNotFoundException {\n+\t\tbyte[] bytes = classMap.get(name);\n+\t\tif (bytes == null) {\n+\t\t\treturn super.findClass(name);\n+\t\t} else {\n+\t\t\treturn defineClass(name, bytes, 0, bytes.length);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic URL getResource(String path) {\n+\t\ttry {\n+\t\t\tif (path.endsWith(\".class\")) {\n+\t\t\t\tString className = pathToClassName(path);\n+\t\t\t\tbyte[] bytes = classMap.get(className);\n+\t\t\t\tif (bytes != null) {\n+\t\t\t\t\treturn new URL(\"in-memory\", null, -1, path, new URLStreamHandler() {\n+\t\t\t\t\t\t@Override\n+\t\t\t\t\t\tprotected URLConnection openConnection(URL it) throws IOException {\n+\t\t\t\t\t\t\treturn new URLConnection(it) {\n+\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\tpublic void connect() {\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\tpublic InputStream getInputStream() {\n+\t\t\t\t\t\t\t\t\treturn new ByteArrayInputStream(bytes);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t};\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t\t}\n+\t\t\t\treturn super.getResource(path);\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t} catch (MalformedURLException e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tprotected URL findResource(String path) {\n+\t\ttry {\n+\t\t\tif (path.endsWith(\".class\")) {\n+\t\t\t\tString className = pathToClassName(path);\n+\t\t\t\tbyte[] bytes = classMap.get(className);\n+\t\t\t\tif (bytes != null) {\n+\t\t\t\t\treturn new URL(\"in-memory\", null, -1, path, new URLStreamHandler() {\n+\t\t\t\t\t\t@Override\n+\t\t\t\t\t\tprotected URLConnection openConnection(URL it) throws IOException {\n+\t\t\t\t\t\t\treturn new URLConnection(it) {\n+\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\tpublic void connect() {\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\tpublic InputStream getInputStream() {\n+\t\t\t\t\t\t\t\t\treturn new ByteArrayInputStream(bytes);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t};\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn super.findResource(path);\n+\t\t} catch (MalformedURLException e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec0d114c1b05d94a3dc18564221631ef472a8e1c"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNjczMg==", "bodyText": "Sneaky", "url": "https://github.com/eclipse/xtext-extras/pull/576#discussion_r391016732", "createdAt": "2020-03-11T14:36:04Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.java/src/org/eclipse/xtext/java/resource/InMemoryClassLoader.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/**\n+ * Copyright (c) 2018, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.java.resource;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.net.URLStreamHandler;\n+import java.util.Map;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+\n+public class InMemoryClassLoader extends ClassLoader {\n+\tprivate Map<String, byte[]> classMap;\n+\n+\tpublic InMemoryClassLoader(Map<String, byte[]> classMap, ClassLoader parent) {\n+\t\tsuper(parent);\n+\t\tthis.classMap = classMap;\n+\t}\n+\n+\t@Override\n+\tprotected Class<?> findClass(String name) throws ClassNotFoundException {\n+\t\tbyte[] bytes = classMap.get(name);\n+\t\tif (bytes == null) {\n+\t\t\treturn super.findClass(name);\n+\t\t} else {\n+\t\t\treturn defineClass(name, bytes, 0, bytes.length);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic URL getResource(String path) {\n+\t\ttry {\n+\t\t\tif (path.endsWith(\".class\")) {\n+\t\t\t\tString className = pathToClassName(path);\n+\t\t\t\tbyte[] bytes = classMap.get(className);\n+\t\t\t\tif (bytes != null) {\n+\t\t\t\t\treturn new URL(\"in-memory\", null, -1, path, new URLStreamHandler() {\n+\t\t\t\t\t\t@Override\n+\t\t\t\t\t\tprotected URLConnection openConnection(URL it) throws IOException {\n+\t\t\t\t\t\t\treturn new URLConnection(it) {\n+\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\tpublic void connect() {\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\tpublic InputStream getInputStream() {\n+\t\t\t\t\t\t\t\t\treturn new ByteArrayInputStream(bytes);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t};\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t\t}\n+\t\t\t\treturn super.getResource(path);\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t} catch (MalformedURLException e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec0d114c1b05d94a3dc18564221631ef472a8e1c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAxNzAzMg==", "bodyText": "You can extract this code, it's being used in the method above as well", "url": "https://github.com/eclipse/xtext-extras/pull/576#discussion_r391017032", "createdAt": "2020-03-11T14:36:31Z", "author": {"login": "tivervac"}, "path": "org.eclipse.xtext.java/src/org/eclipse/xtext/java/resource/InMemoryClassLoader.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/**\n+ * Copyright (c) 2018, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.java.resource;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.net.URLStreamHandler;\n+import java.util.Map;\n+import org.eclipse.xtext.xbase.lib.Exceptions;\n+\n+public class InMemoryClassLoader extends ClassLoader {\n+\tprivate Map<String, byte[]> classMap;\n+\n+\tpublic InMemoryClassLoader(Map<String, byte[]> classMap, ClassLoader parent) {\n+\t\tsuper(parent);\n+\t\tthis.classMap = classMap;\n+\t}\n+\n+\t@Override\n+\tprotected Class<?> findClass(String name) throws ClassNotFoundException {\n+\t\tbyte[] bytes = classMap.get(name);\n+\t\tif (bytes == null) {\n+\t\t\treturn super.findClass(name);\n+\t\t} else {\n+\t\t\treturn defineClass(name, bytes, 0, bytes.length);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic URL getResource(String path) {\n+\t\ttry {\n+\t\t\tif (path.endsWith(\".class\")) {\n+\t\t\t\tString className = pathToClassName(path);\n+\t\t\t\tbyte[] bytes = classMap.get(className);\n+\t\t\t\tif (bytes != null) {\n+\t\t\t\t\treturn new URL(\"in-memory\", null, -1, path, new URLStreamHandler() {\n+\t\t\t\t\t\t@Override\n+\t\t\t\t\t\tprotected URLConnection openConnection(URL it) throws IOException {\n+\t\t\t\t\t\t\treturn new URLConnection(it) {\n+\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\tpublic void connect() {\n+\t\t\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\t\t\t@Override\n+\t\t\t\t\t\t\t\tpublic InputStream getInputStream() {\n+\t\t\t\t\t\t\t\t\treturn new ByteArrayInputStream(bytes);\n+\t\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t\t};\n+\t\t\t\t\t\t}\n+\t\t\t\t\t});\n+\t\t\t\t}\n+\t\t\t\treturn super.getResource(path);\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t} catch (MalformedURLException e) {\n+\t\t\tthrow Exceptions.sneakyThrow(e);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tprotected URL findResource(String path) {\n+\t\ttry {\n+\t\t\tif (path.endsWith(\".class\")) {\n+\t\t\t\tString className = pathToClassName(path);\n+\t\t\t\tbyte[] bytes = classMap.get(className);\n+\t\t\t\tif (bytes != null) {\n+\t\t\t\t\treturn new URL(\"in-memory\", null, -1, path, new URLStreamHandler() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec0d114c1b05d94a3dc18564221631ef472a8e1c"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d3abb3fa5b06715e7845a8b5c6169ecaad39646", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-extras/commit/9d3abb3fa5b06715e7845a8b5c6169ecaad39646", "committedDate": "2020-03-11T18:25:07Z", "message": "[eclipse/xtext#1679] ported xtend code 2 java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec0d114c1b05d94a3dc18564221631ef472a8e1c", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-extras/commit/ec0d114c1b05d94a3dc18564221631ef472a8e1c", "committedDate": "2020-03-10T19:24:48Z", "message": "[eclipse/xtext#1679] ported xtend code 2 java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "9d3abb3fa5b06715e7845a8b5c6169ecaad39646", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-extras/commit/9d3abb3fa5b06715e7845a8b5c6169ecaad39646", "committedDate": "2020-03-11T18:25:07Z", "message": "[eclipse/xtext#1679] ported xtend code 2 java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNTk4ODkw", "url": "https://github.com/eclipse/xtext-extras/pull/576#pullrequestreview-373598890", "createdAt": "2020-03-12T14:21:41Z", "commit": {"oid": "9d3abb3fa5b06715e7845a8b5c6169ecaad39646"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4328, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}