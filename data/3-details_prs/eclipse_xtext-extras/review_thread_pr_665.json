{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyMjQ2MTE4", "number": 665, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTo1Njo1MVrOE58C3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOToxNTowOFrOE8IGYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTg4MDYyOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.extras.tests/src-gen/org/eclipse/xtext/generator/grammarAccess/services/GrammarAccessTestLanguageGrammarAccess.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTo1Njo1MVrOH0tBBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzoyOToyN1rOH6-c0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyNTU0Mw==", "bodyText": "@ArneDeutsch Missing formatting rule for qualified types in Actions? I wouldn't expect a space around ::", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r525025543", "createdAt": "2020-11-17T09:56:51Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.extras.tests/src-gen/org/eclipse/xtext/generator/grammarAccess/services/GrammarAccessTestLanguageGrammarAccess.java", "diffHunk": "@@ -64,16 +64,16 @@\n \t\tprivate final Action cATypeAction_1 = (Action)cGroup.eContents().get(1);\n \t\t\n \t\t//AType root::AType:\n-\t\t//\t'foo' {root::AType};\n+\t\t//\t'foo' {root :: AType};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1170a07dfa490f5008999890575e49b865c75a6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0ODYzMA==", "bodyText": "problem is indeed still there", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r528548630", "createdAt": "2020-11-23T08:57:30Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.extras.tests/src-gen/org/eclipse/xtext/generator/grammarAccess/services/GrammarAccessTestLanguageGrammarAccess.java", "diffHunk": "@@ -64,16 +64,16 @@\n \t\tprivate final Action cATypeAction_1 = (Action)cGroup.eContents().get(1);\n \t\t\n \t\t//AType root::AType:\n-\t\t//\t'foo' {root::AType};\n+\t\t//\t'foo' {root :: AType};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyNTU0Mw=="}, "originalCommit": {"oid": "d1170a07dfa490f5008999890575e49b865c75a6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwMjY0Mg==", "bodyText": "Tested and fixed.", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r531602642", "createdAt": "2020-11-27T13:29:27Z", "author": {"login": "ArneDeutsch"}, "path": "org.eclipse.xtext.extras.tests/src-gen/org/eclipse/xtext/generator/grammarAccess/services/GrammarAccessTestLanguageGrammarAccess.java", "diffHunk": "@@ -64,16 +64,16 @@\n \t\tprivate final Action cATypeAction_1 = (Action)cGroup.eContents().get(1);\n \t\t\n \t\t//AType root::AType:\n-\t\t//\t'foo' {root::AType};\n+\t\t//\t'foo' {root :: AType};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyNTU0Mw=="}, "originalCommit": {"oid": "d1170a07dfa490f5008999890575e49b865c75a6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTg4OTgwOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.purexbase/src-gen/org/eclipse/xtext/purexbase/services/PureXbaseGrammarAccess.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTo1OTowOVrOH0tHCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzo1MjoyOVrOH6_K5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyNzA4Mw==", "bodyText": "Hmm there is a noSpace around the assignment ops, nevertheless we see a line break.\nhttps://github.com/eclipse/xtext-core/blob/master/org.eclipse.xtext/src/org/eclipse/xtext/xtext/XtextFormatterJava.java#L90\n@ArneDeutsch Something worthy to investigate?", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r525027083", "createdAt": "2020-11-17T09:59:09Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.purexbase/src-gen/org/eclipse/xtext/purexbase/services/PureXbaseGrammarAccess.java", "diffHunk": "@@ -401,20 +409,20 @@\n \t\t\n \t\t//@Override\n \t\t//XAssignment xbase::XExpression:\n-\t\t//\t{xbase::XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |\n-\t\t//\tXConditionalExpression (=> ({xbase::XBinaryOperation.leftOperand=current}\n-\t\t//\tfeature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;\n+\t\t//\t{xbase :: XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |\n+\t\t//\tXConditionalExpression (=> ({xbase :: XBinaryOperation . leftOperand= current} feature=", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "892a01875e4100cbfbef1e344efe0ce1b8fec7ef"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxMTQ1NA==", "bodyText": "The guilty is the following code (I commented the \"bad\" lines):\n\tprotected void format(CrossReference ref, IFormattableDocument doc) {\n//\t\tdoc.prepend(regionFor(ref).keyword(\"[\"), it -> it.autowrap());\n\t\tdoc.append(regionFor(ref).keyword(\"[\"), it -> it.noSpace());\n\t\tdoc.prepend(regionFor(ref).keyword(\"]\"), it -> it.noSpace());\n//\t\tdoc.append(regionFor(ref).keyword(\"]\"), it -> it.autowrap());\n\t\tdoc.surround(regionFor(ref).keyword(\"|\"), it -> it.noSpace());\n\t\tdoc.format(ref.getType());\n\t}\n\nI have run most tests locally and it seems I can remove the autowrap without breaking anything else. BUT ... the rule is a bit unfortunate ... the original looks like this:\n@Override \nXAssignment returns xbase::XExpression :\n\t{xbase::XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |\n\tXConditionalExpression (\n\t\t=>({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment\n\t)?;\n\nWith above formatting I get the following:\n@Override\nXAssignment returns xbase::XExpression:\n\t{xbase::XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |\n\tXConditionalExpression (=>\n\t({xbase::XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])\n\trightOperand=XAssignment)?;\n\nNot THAT nice ... happens because the open paranthesis is the first possible autowrap point ...", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r531611454", "createdAt": "2020-11-27T13:46:31Z", "author": {"login": "ArneDeutsch"}, "path": "org.eclipse.xtext.purexbase/src-gen/org/eclipse/xtext/purexbase/services/PureXbaseGrammarAccess.java", "diffHunk": "@@ -401,20 +409,20 @@\n \t\t\n \t\t//@Override\n \t\t//XAssignment xbase::XExpression:\n-\t\t//\t{xbase::XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |\n-\t\t//\tXConditionalExpression (=> ({xbase::XBinaryOperation.leftOperand=current}\n-\t\t//\tfeature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;\n+\t\t//\t{xbase :: XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |\n+\t\t//\tXConditionalExpression (=> ({xbase :: XBinaryOperation . leftOperand= current} feature=", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyNzA4Mw=="}, "originalCommit": {"oid": "892a01875e4100cbfbef1e344efe0ce1b8fec7ef"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxNDQzNw==", "bodyText": "I added autowrap before and after Actions (braces) ... this results in the following ... guess that is as good as we can get.\n@Override\nXAssignment returns xbase::XExpression:\n\t{xbase::XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |\n\tXConditionalExpression (=>({xbase::XBinaryOperation.leftOperand=current}\n\tfeature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r531614437", "createdAt": "2020-11-27T13:52:29Z", "author": {"login": "ArneDeutsch"}, "path": "org.eclipse.xtext.purexbase/src-gen/org/eclipse/xtext/purexbase/services/PureXbaseGrammarAccess.java", "diffHunk": "@@ -401,20 +409,20 @@\n \t\t\n \t\t//@Override\n \t\t//XAssignment xbase::XExpression:\n-\t\t//\t{xbase::XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |\n-\t\t//\tXConditionalExpression (=> ({xbase::XBinaryOperation.leftOperand=current}\n-\t\t//\tfeature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;\n+\t\t//\t{xbase :: XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |\n+\t\t//\tXConditionalExpression (=> ({xbase :: XBinaryOperation . leftOperand= current} feature=", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyNzA4Mw=="}, "originalCommit": {"oid": "892a01875e4100cbfbef1e344efe0ce1b8fec7ef"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTg5MzIxOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.purexbase/src-gen/org/eclipse/xtext/purexbase/services/PureXbaseGrammarAccess.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTo1OTo1NVrOH0tJKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMzozNDowNVrOH6-mHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyNzYyNg==", "bodyText": "Why are the spaces kept here but not for other cases? @ArneDeutsch", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r525027626", "createdAt": "2020-11-17T09:59:55Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.purexbase/src-gen/org/eclipse/xtext/purexbase/services/PureXbaseGrammarAccess.java", "diffHunk": "@@ -488,30 +496,29 @@\n \t\tprivate final RuleCall cElseXExpressionParserRuleCall_1_2_1_0 = (RuleCall)cElseAssignment_1_2_1.eContents().get(0);\n \t\t\n \t\t//XConditionalExpression xbase::XExpression:\n-\t\t//\tXOrExpression (\n-\t\t//\t// The java grammar does only allow other XConditionalExpression after the colon, but we can be more relaxed\n-\t\t//\t-> ({xbase::XIfExpression.if=current} conditionalExpression?='?') then=XExpression (-> ':' else=XExpression)?)?;\n+\t\t//\tXOrExpression (// The java grammar does only allow other XConditionalExpression after the colon, but we can be more relaxed\n+\t\t//\t-> ({xbase :: XIfExpression . if= current} conditionalExpression?='?') then=XExpression (->':' else=XExpression)?)?;\n \t\t@Override public ParserRule getRule() { return rule; }\n \t\t\n-\t\t//XOrExpression ( // The java grammar does only allow other XConditionalExpression after the colon, but we can be more relaxed\n-\t\t//-> ({xbase::XIfExpression.if=current} conditionalExpression?='?') then=XExpression (-> ':' else=XExpression)?)?\n+\t\t//XOrExpression (// The java grammar does only allow other XConditionalExpression after the colon, but we can be more relaxed\n+\t\t//-> ({xbase :: XIfExpression . if= current} conditionalExpression?='?') then=XExpression (->':' else=XExpression)?)?\n \t\tpublic Group getGroup() { return cGroup; }\n \t\t\n \t\t//XOrExpression\n \t\tpublic RuleCall getXOrExpressionParserRuleCall_0() { return cXOrExpressionParserRuleCall_0; }\n \t\t\n-\t\t//( // The java grammar does only allow other XConditionalExpression after the colon, but we can be more relaxed\n-\t\t//-> ({xbase::XIfExpression.if=current} conditionalExpression?='?') then=XExpression (-> ':' else=XExpression)?)?\n+\t\t//(// The java grammar does only allow other XConditionalExpression after the colon, but we can be more relaxed\n+\t\t//-> ({xbase :: XIfExpression . if= current} conditionalExpression?='?') then=XExpression (->':' else=XExpression)?)?\n \t\tpublic Group getGroup_1() { return cGroup_1; }\n \t\t\n \t\t//// The java grammar does only allow other XConditionalExpression after the colon, but we can be more relaxed\n-\t\t//-> ({xbase::XIfExpression.if=current} conditionalExpression?='?')\n+\t\t//\t\t-> ({xbase :: XIfExpression . if= current} conditionalExpression?='?')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "892a01875e4100cbfbef1e344efe0ce1b8fec7ef"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYwNTAyMw==", "bodyText": "Will be fixed with next commit ... recursion in actions where missing.", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r531605023", "createdAt": "2020-11-27T13:34:05Z", "author": {"login": "ArneDeutsch"}, "path": "org.eclipse.xtext.purexbase/src-gen/org/eclipse/xtext/purexbase/services/PureXbaseGrammarAccess.java", "diffHunk": "@@ -488,30 +496,29 @@\n \t\tprivate final RuleCall cElseXExpressionParserRuleCall_1_2_1_0 = (RuleCall)cElseAssignment_1_2_1.eContents().get(0);\n \t\t\n \t\t//XConditionalExpression xbase::XExpression:\n-\t\t//\tXOrExpression (\n-\t\t//\t// The java grammar does only allow other XConditionalExpression after the colon, but we can be more relaxed\n-\t\t//\t-> ({xbase::XIfExpression.if=current} conditionalExpression?='?') then=XExpression (-> ':' else=XExpression)?)?;\n+\t\t//\tXOrExpression (// The java grammar does only allow other XConditionalExpression after the colon, but we can be more relaxed\n+\t\t//\t-> ({xbase :: XIfExpression . if= current} conditionalExpression?='?') then=XExpression (->':' else=XExpression)?)?;\n \t\t@Override public ParserRule getRule() { return rule; }\n \t\t\n-\t\t//XOrExpression ( // The java grammar does only allow other XConditionalExpression after the colon, but we can be more relaxed\n-\t\t//-> ({xbase::XIfExpression.if=current} conditionalExpression?='?') then=XExpression (-> ':' else=XExpression)?)?\n+\t\t//XOrExpression (// The java grammar does only allow other XConditionalExpression after the colon, but we can be more relaxed\n+\t\t//-> ({xbase :: XIfExpression . if= current} conditionalExpression?='?') then=XExpression (->':' else=XExpression)?)?\n \t\tpublic Group getGroup() { return cGroup; }\n \t\t\n \t\t//XOrExpression\n \t\tpublic RuleCall getXOrExpressionParserRuleCall_0() { return cXOrExpressionParserRuleCall_0; }\n \t\t\n-\t\t//( // The java grammar does only allow other XConditionalExpression after the colon, but we can be more relaxed\n-\t\t//-> ({xbase::XIfExpression.if=current} conditionalExpression?='?') then=XExpression (-> ':' else=XExpression)?)?\n+\t\t//(// The java grammar does only allow other XConditionalExpression after the colon, but we can be more relaxed\n+\t\t//-> ({xbase :: XIfExpression . if= current} conditionalExpression?='?') then=XExpression (->':' else=XExpression)?)?\n \t\tpublic Group getGroup_1() { return cGroup_1; }\n \t\t\n \t\t//// The java grammar does only allow other XConditionalExpression after the colon, but we can be more relaxed\n-\t\t//-> ({xbase::XIfExpression.if=current} conditionalExpression?='?')\n+\t\t//\t\t-> ({xbase :: XIfExpression . if= current} conditionalExpression?='?')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyNzYyNg=="}, "originalCommit": {"oid": "892a01875e4100cbfbef1e344efe0ce1b8fec7ef"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDczMjQ1OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.purexbase/src-gen/org/eclipse/xtext/purexbase/services/PureXbaseGrammarAccess.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwODo0ODozOFrOH4DwMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwODo0ODozOFrOH4DwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0Mzc5NQ==", "bodyText": "This is still an issue @ArneDeutsch", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r528543795", "createdAt": "2020-11-23T08:48:38Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.purexbase/src-gen/org/eclipse/xtext/purexbase/services/PureXbaseGrammarAccess.java", "diffHunk": "@@ -62,13 +62,13 @@\n \t\tprivate final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);\n \t\t\n \t\t//SpecialBlockExpression xbase::XBlockExpression:\n-\t\t//\t{xbase::XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*;\n+\t\t//\t{xbase :: XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e3a334693f31246c5110f37b177f7423b72b601"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDczNDI5OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xbase.testlanguages/src-gen/org/eclipse/xtext/xbase/testlanguages/bug462047/services/Bug462047LangGrammarAccess.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwODo0OToxMFrOH4DxRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMzozOToxNlrOH_RTRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDA3MA==", "bodyText": "Still weird @ArneDeutsch", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r528544070", "createdAt": "2020-11-23T08:49:10Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase.testlanguages/src-gen/org/eclipse/xtext/xbase/testlanguages/bug462047/services/Bug462047LangGrammarAccess.java", "diffHunk": "@@ -475,8 +475,8 @@ public ParserRule getXListLiteralRule() {\n \t//XClosure XExpression:\n \t//\t=> ({XClosure}\n \t//\t'[')\n-\t//\t=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?\n-\t//\texplicitSyntax?='|')?\n+\t//\t=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)\n+\t//\t? explicitSyntax?='|')?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e3a334693f31246c5110f37b177f7423b72b601"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjEwNTc5OQ==", "bodyText": "The formatter does not do that. Unsure why it happens here.", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r536105799", "createdAt": "2020-12-04T13:39:16Z", "author": {"login": "ArneDeutsch"}, "path": "org.eclipse.xtext.xbase.testlanguages/src-gen/org/eclipse/xtext/xbase/testlanguages/bug462047/services/Bug462047LangGrammarAccess.java", "diffHunk": "@@ -475,8 +475,8 @@ public ParserRule getXListLiteralRule() {\n \t//XClosure XExpression:\n \t//\t=> ({XClosure}\n \t//\t'[')\n-\t//\t=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?\n-\t//\texplicitSyntax?='|')?\n+\t//\t=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)\n+\t//\t? explicitSyntax?='|')?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDA3MA=="}, "originalCommit": {"oid": "4e3a334693f31246c5110f37b177f7423b72b601"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDczNTc1OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xbase.testlanguages/src-gen/org/eclipse/xtext/xbase/testlanguages/services/ContentAssistFragmentTestLangGrammarAccess.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwODo0OTozOVrOH4DyLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDowMjo0OFrOH6_fQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDMwMg==", "bodyText": "Still weird @ArneDeutsch\n@cdietrich Was this generated with the latest fixes applied?", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r528544302", "createdAt": "2020-11-23T08:49:39Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase.testlanguages/src-gen/org/eclipse/xtext/xbase/testlanguages/services/ContentAssistFragmentTestLangGrammarAccess.java", "diffHunk": "@@ -450,11 +450,11 @@ public ParserRule getOpPostfixRule() {\n \t}\n \t\n \t//XMemberFeatureCall XExpression:\n-\t//\tXPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?=\"::\")\n-\t//\tfeature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment\n+\t//\tXPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?=\"::\") feature=", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e3a334693f31246c5110f37b177f7423b72b601"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NTI1Mg==", "bodyText": "thought so. will check", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r528545252", "createdAt": "2020-11-23T08:51:25Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.xbase.testlanguages/src-gen/org/eclipse/xtext/xbase/testlanguages/services/ContentAssistFragmentTestLangGrammarAccess.java", "diffHunk": "@@ -450,11 +450,11 @@ public ParserRule getOpPostfixRule() {\n \t}\n \t\n \t//XMemberFeatureCall XExpression:\n-\t//\tXPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?=\"::\")\n-\t//\tfeature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment\n+\t//\tXPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?=\"::\") feature=", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDMwMg=="}, "originalCommit": {"oid": "4e3a334693f31246c5110f37b177f7423b72b601"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0ODkyOQ==", "bodyText": "nope this linebreak withing assignment instead of before is still there", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r528548929", "createdAt": "2020-11-23T08:58:03Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.xbase.testlanguages/src-gen/org/eclipse/xtext/xbase/testlanguages/services/ContentAssistFragmentTestLangGrammarAccess.java", "diffHunk": "@@ -450,11 +450,11 @@ public ParserRule getOpPostfixRule() {\n \t}\n \t\n \t//XMemberFeatureCall XExpression:\n-\t//\tXPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?=\"::\")\n-\t//\tfeature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment\n+\t//\tXPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?=\"::\") feature=", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDMwMg=="}, "originalCommit": {"oid": "4e3a334693f31246c5110f37b177f7423b72b601"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYxOTY1MA==", "bodyText": "Added a test. With latest conmmit the following:\nXMemberFeatureCall returns XExpression:\n\tXPrimaryExpression\n\t(=>({XAssignment.assignable=current} ('.'|explicitStatic?=\"::\") feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment\n\t|=>({XMemberFeatureCall.memberCallTarget=current} (\".\"|nullSafe?=\"?.\"|explicitStatic?=\"::\"))\n\t\t('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?\n\t\tfeature=[types::JvmIdentifiableElement|IdOrSuper] (\n\t\t\t=>explicitOperationCall?='('\n\t\t\t\t(\n\t\t\t\t    memberCallArguments+=XShortClosure\n\t\t\t\t  | memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*\n\t\t\t\t)?\n\t\t\t')')?\n\t\t\tmemberCallArguments+=XClosure?\n\t\t)*;\n\nwill be formatted to:\nXMemberFeatureCall returns XExpression:\n\tXPrimaryExpression\n\t(=>({XAssignment.assignable=current} ('.' | explicitStatic?=\"::\")\n\tfeature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment\n\t| =>({XMemberFeatureCall.memberCallTarget=current} (\".\" | nullSafe?=\"?.\" | explicitStatic?=\"::\"))\n\t('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?\n\tfeature=[types::JvmIdentifiableElement|IdOrSuper] (=>explicitOperationCall?='('\n\t(memberCallArguments+=XShortClosure\n\t| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?\n\t')')?\n\tmemberCallArguments+=XClosure?)*;\n\nThis looks expectable for me.", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r531619650", "createdAt": "2020-11-27T14:02:48Z", "author": {"login": "ArneDeutsch"}, "path": "org.eclipse.xtext.xbase.testlanguages/src-gen/org/eclipse/xtext/xbase/testlanguages/services/ContentAssistFragmentTestLangGrammarAccess.java", "diffHunk": "@@ -450,11 +450,11 @@ public ParserRule getOpPostfixRule() {\n \t}\n \t\n \t//XMemberFeatureCall XExpression:\n-\t//\tXPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?=\"::\")\n-\t//\tfeature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment\n+\t//\tXPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?=\"::\") feature=", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0NDMwMg=="}, "originalCommit": {"oid": "4e3a334693f31246c5110f37b177f7423b72b601"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDgwNDcyOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.purexbase/src-gen/org/eclipse/xtext/purexbase/services/PureXbaseGrammarAccess.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTowOToyNVrOH4EbAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDowNDo1MFrOH6_jKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1NDc1Mg==", "bodyText": "Unexpected line-break in the assignment", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r528554752", "createdAt": "2020-11-23T09:09:25Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.purexbase/src-gen/org/eclipse/xtext/purexbase/services/PureXbaseGrammarAccess.java", "diffHunk": "@@ -401,20 +409,20 @@\n \t\t\n \t\t//@Override\n \t\t//XAssignment xbase::XExpression:\n-\t\t//\t{xbase::XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |\n-\t\t//\tXConditionalExpression (=> ({xbase::XBinaryOperation.leftOperand=current}\n-\t\t//\tfeature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;\n+\t\t//\t{xbase :: XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |\n+\t\t//\tXConditionalExpression (=> ({xbase :: XBinaryOperation.leftOperand=current} feature=", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22fc484f6c243e66ec3acdb45b698b44a93be00e"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYyMDY0OA==", "bodyText": "Will be fixed with next commit.", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r531620648", "createdAt": "2020-11-27T14:04:50Z", "author": {"login": "ArneDeutsch"}, "path": "org.eclipse.xtext.purexbase/src-gen/org/eclipse/xtext/purexbase/services/PureXbaseGrammarAccess.java", "diffHunk": "@@ -401,20 +409,20 @@\n \t\t\n \t\t//@Override\n \t\t//XAssignment xbase::XExpression:\n-\t\t//\t{xbase::XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |\n-\t\t//\tXConditionalExpression (=> ({xbase::XBinaryOperation.leftOperand=current}\n-\t\t//\tfeature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;\n+\t\t//\t{xbase :: XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment |\n+\t\t//\tXConditionalExpression (=> ({xbase :: XBinaryOperation.leftOperand=current} feature=", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1NDc1Mg=="}, "originalCommit": {"oid": "22fc484f6c243e66ec3acdb45b698b44a93be00e"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDgwNjg4OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.purexbase/src-gen/org/eclipse/xtext/purexbase/services/PureXbaseGrammarAccess.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOTowOTo1OFrOH4EcTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDoxNjoyN1rOH6_6RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1NTA4NA==", "bodyText": "Unexpected line-break before the cardinality.", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r528555084", "createdAt": "2020-11-23T09:09:58Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.purexbase/src-gen/org/eclipse/xtext/purexbase/services/PureXbaseGrammarAccess.java", "diffHunk": "@@ -994,8 +1000,8 @@ public ParserRule getXListLiteralRule() {\n \t//XClosure XExpression:\n \t//\t=> ({XClosure}\n \t//\t'[')\n-\t//\t=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?\n-\t//\texplicitSyntax?='|')?\n+\t//\t=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)\n+\t//\t? explicitSyntax?='|')?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22fc484f6c243e66ec3acdb45b698b44a93be00e"}, "originalPosition": 357}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYyNTQwNA==", "bodyText": "This is because of the autowrap in the following code:\n\tprivate void formatParens(EObject element, IFormattableDocument doc) {\n\t\tdoc.prepend(regionFor(element).keyword(\"(\"), it -> it.autowrap());\n\t\tdoc.append(regionFor(element).keyword(\"(\"), it -> it.noSpace());\n\t\tdoc.prepend(regionFor(element).keyword(\")\"), it -> it.noSpace());\n\t\tdoc.append(regionFor(element).keyword(\")\"), it -> it.autowrap());\n\t}\n\nWe allow autowrap after paranthesis ... guess we want to have that, to break lines at reasonable places ... not sure how to make it better ...", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r531625404", "createdAt": "2020-11-27T14:14:19Z", "author": {"login": "ArneDeutsch"}, "path": "org.eclipse.xtext.purexbase/src-gen/org/eclipse/xtext/purexbase/services/PureXbaseGrammarAccess.java", "diffHunk": "@@ -994,8 +1000,8 @@ public ParserRule getXListLiteralRule() {\n \t//XClosure XExpression:\n \t//\t=> ({XClosure}\n \t//\t'[')\n-\t//\t=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?\n-\t//\texplicitSyntax?='|')?\n+\t//\t=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)\n+\t//\t? explicitSyntax?='|')?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1NTA4NA=="}, "originalCommit": {"oid": "22fc484f6c243e66ec3acdb45b698b44a93be00e"}, "originalPosition": 357}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYyNjU2NA==", "bodyText": "Have it ... allow autowrap after the question mark as well:\n\tprivate void formatCardinality(EObject element, IFormattableDocument doc) {\n\t\tregionFor(element).keywords(\"?\", \"*\", \"+\").forEach(r -> doc.prepend(r, it -> it.noSpace()));\n\t\tregionFor(element).keywords(\"?\", \"*\", \"+\").forEach(r -> doc.append(r, it -> it.autowrap()));\n\t}", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r531626564", "createdAt": "2020-11-27T14:16:27Z", "author": {"login": "ArneDeutsch"}, "path": "org.eclipse.xtext.purexbase/src-gen/org/eclipse/xtext/purexbase/services/PureXbaseGrammarAccess.java", "diffHunk": "@@ -994,8 +1000,8 @@ public ParserRule getXListLiteralRule() {\n \t//XClosure XExpression:\n \t//\t=> ({XClosure}\n \t//\t'[')\n-\t//\t=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?\n-\t//\texplicitSyntax?='|')?\n+\t//\t=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)\n+\t//\t? explicitSyntax?='|')?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1NTA4NA=="}, "originalCommit": {"oid": "22fc484f6c243e66ec3acdb45b698b44a93be00e"}, "originalPosition": 357}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDgxMDE3OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.purexbase/src-gen/org/eclipse/xtext/purexbase/services/PureXbaseGrammarAccess.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOToxMDo0NlrOH4EeGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOToxMDo0NlrOH4EeGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1NTU0NA==", "bodyText": "Nice improvements for the line-break before the predicate", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r528555544", "createdAt": "2020-11-23T09:10:46Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.purexbase/src-gen/org/eclipse/xtext/purexbase/services/PureXbaseGrammarAccess.java", "diffHunk": "@@ -1390,9 +1397,9 @@ public ParserRule getXFunctionTypeRefRule() {\n \t}\n \t\n \t//JvmParameterizedTypeReference:\n-\t//\ttype=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','\n-\t//\targuments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>\n-\t//\t'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;\n+\t//\ttype=[JvmType|super::QualifiedName] (=>'<' arguments+=JvmArgumentTypeReference (','\n+\t//\targuments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (\n+\t//\t=>'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22fc484f6c243e66ec3acdb45b698b44a93be00e"}, "originalPosition": 447}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDgxMDg5OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.purexbase/src-gen/org/eclipse/xtext/purexbase/services/PureXbaseGrammarAccess.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOToxMDo1OVrOH4Eeiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOToxMDo1OVrOH4Eeiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1NTY1OQ==", "bodyText": "Nice improvement to the comment handling", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r528555659", "createdAt": "2020-11-23T09:10:59Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.purexbase/src-gen/org/eclipse/xtext/purexbase/services/PureXbaseGrammarAccess.java", "diffHunk": "@@ -1330,7 +1336,8 @@ public ParserRule getNumberRule() {\n \t///**\n \t// * Dummy rule, for \"better\" downwards compatibility, since GrammarAccess generates non-static inner classes,\n \t// * which makes downstream grammars break on classloading, when a rule is removed.\n-\t// */ StaticQualifier:\n+\t// */\n+\t//StaticQualifier:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22fc484f6c243e66ec3acdb45b698b44a93be00e"}, "originalPosition": 434}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDgxNDAzOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xbase.testlanguages/src-gen/org/eclipse/xtext/xbase/testlanguages/services/ContentAssistFragmentTestLangGrammarAccess.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOToxMTo1MVrOH4Egbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDoyMDoyOFrOH7ACRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1NjE0Mg==", "bodyText": "Unexpected space after the predicate if followed by a parentheses.", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r528556142", "createdAt": "2020-11-23T09:11:51Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase.testlanguages/src-gen/org/eclipse/xtext/xbase/testlanguages/services/ContentAssistFragmentTestLangGrammarAccess.java", "diffHunk": "@@ -544,8 +544,8 @@ public ParserRule getXExpressionInClosureRule() {\n \t}\n \t\n \t//XShortClosure XExpression:\n-\t//\t=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?\n-\t//\texplicitSyntax?='|') expression=XExpression;\n+\t//\t=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22fc484f6c243e66ec3acdb45b698b44a93be00e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYyODYxNA==", "bodyText": "Will be fixed with next commit by allowing autowrap after question mark.", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r531628614", "createdAt": "2020-11-27T14:20:28Z", "author": {"login": "ArneDeutsch"}, "path": "org.eclipse.xtext.xbase.testlanguages/src-gen/org/eclipse/xtext/xbase/testlanguages/services/ContentAssistFragmentTestLangGrammarAccess.java", "diffHunk": "@@ -544,8 +544,8 @@ public ParserRule getXExpressionInClosureRule() {\n \t}\n \t\n \t//XShortClosure XExpression:\n-\t//\t=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?\n-\t//\texplicitSyntax?='|') expression=XExpression;\n+\t//\t=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1NjE0Mg=="}, "originalCommit": {"oid": "22fc484f6c243e66ec3acdb45b698b44a93be00e"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDgyMTMxOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xbase/src-gen/org/eclipse/xtext/xbase/annotations/services/XbaseWithAnnotationsGrammarAccess.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOToxMzo1MlrOH4EkvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDoyNjo0NFrOH7AOqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1NzI0NQ==", "bodyText": "Unexpected line-break after the opening parenthesis if there is no line-break before the closing parenthesis and no indentation applied. To be discussed if we want to do something about this and if so, what we want to do about this.", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r528557245", "createdAt": "2020-11-23T09:13:52Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase/src-gen/org/eclipse/xtext/xbase/annotations/services/XbaseWithAnnotationsGrammarAccess.java", "diffHunk": "@@ -54,15 +54,17 @@\n \t\t\n \t\t//XAnnotation:\n \t\t//\t{XAnnotation}\n-\t\t//\t'@' annotationType=[types::JvmAnnotationType|QualifiedName] (=> '(' (elementValuePairs+=XAnnotationElementValuePair\n-\t\t//\t(',' elementValuePairs+=XAnnotationElementValuePair)*\n+\t\t//\t'@' annotationType=[types::JvmAnnotationType|QualifiedName] (=>'(' (elementValuePairs+=XAnnotationElementValuePair (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22fc484f6c243e66ec3acdb45b698b44a93be00e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYzMTc4NQ==", "bodyText": "With latest patch the following\nXAnnotation :\n\t{XAnnotation}\n\t'@' annotationType=[types::JvmAnnotationType | QualifiedName] (=>'('\n\t\t(\n\t\t\telementValuePairs+=XAnnotationElementValuePair (',' elementValuePairs+=XAnnotationElementValuePair)*\n\t\t|\tvalue=XAnnotationElementValueOrCommaList\n\t\t)?\n\t')')?\n;\n\nwill result in\nXAnnotation:\n\t{XAnnotation}\n\t'@' annotationType=[types::JvmAnnotationType|QualifiedName] (=>'('\n\t(elementValuePairs+=XAnnotationElementValuePair (',' elementValuePairs+=XAnnotationElementValuePair)*\n\t| value=XAnnotationElementValueOrCommaList)?\n\t')')?;\n\nLooks ok for me.", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r531631785", "createdAt": "2020-11-27T14:26:44Z", "author": {"login": "ArneDeutsch"}, "path": "org.eclipse.xtext.xbase/src-gen/org/eclipse/xtext/xbase/annotations/services/XbaseWithAnnotationsGrammarAccess.java", "diffHunk": "@@ -54,15 +54,17 @@\n \t\t\n \t\t//XAnnotation:\n \t\t//\t{XAnnotation}\n-\t\t//\t'@' annotationType=[types::JvmAnnotationType|QualifiedName] (=> '(' (elementValuePairs+=XAnnotationElementValuePair\n-\t\t//\t(',' elementValuePairs+=XAnnotationElementValuePair)*\n+\t\t//\t'@' annotationType=[types::JvmAnnotationType|QualifiedName] (=>'(' (elementValuePairs+=XAnnotationElementValuePair (", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1NzI0NQ=="}, "originalCommit": {"oid": "22fc484f6c243e66ec3acdb45b698b44a93be00e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNDgyNzIyOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xbase/src-gen/org/eclipse/xtext/xbase/annotations/services/XbaseWithAnnotationsGrammarAccess.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwOToxNTowOFrOH4EoAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDoyNzozMVrOH7AQMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1ODA4Mg==", "bodyText": "I think I mentioned it before: Unexpected space after the assignment operator.", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r528558082", "createdAt": "2020-11-23T09:15:08Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase/src-gen/org/eclipse/xtext/xbase/annotations/services/XbaseWithAnnotationsGrammarAccess.java", "diffHunk": "@@ -241,16 +244,16 @@\n \t\t//']'\n \t\tpublic Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }\n \t\t\n-\t\t//XAnnotationOrExpression ({xbase::XListLiteral.elements+=current} (',' elements+=XAnnotationOrExpression)+)?\n+\t\t//XAnnotationOrExpression ({xbase :: XListLiteral.elements+= current} (',' elements+=XAnnotationOrExpression)+)?\n \t\tpublic Group getGroup_1() { return cGroup_1; }\n \t\t\n \t\t//XAnnotationOrExpression\n \t\tpublic RuleCall getXAnnotationOrExpressionParserRuleCall_1_0() { return cXAnnotationOrExpressionParserRuleCall_1_0; }\n \t\t\n-\t\t//({xbase::XListLiteral.elements+=current} (',' elements+=XAnnotationOrExpression)+)?\n+\t\t//({xbase :: XListLiteral.elements+= current} (',' elements+=XAnnotationOrExpression)+)?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22fc484f6c243e66ec3acdb45b698b44a93be00e"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTYzMjE3Ng==", "bodyText": "Missing recursion, will be fixed with next commit.", "url": "https://github.com/eclipse/xtext-extras/pull/665#discussion_r531632176", "createdAt": "2020-11-27T14:27:31Z", "author": {"login": "ArneDeutsch"}, "path": "org.eclipse.xtext.xbase/src-gen/org/eclipse/xtext/xbase/annotations/services/XbaseWithAnnotationsGrammarAccess.java", "diffHunk": "@@ -241,16 +244,16 @@\n \t\t//']'\n \t\tpublic Keyword getRightSquareBracketKeyword_0_2() { return cRightSquareBracketKeyword_0_2; }\n \t\t\n-\t\t//XAnnotationOrExpression ({xbase::XListLiteral.elements+=current} (',' elements+=XAnnotationOrExpression)+)?\n+\t\t//XAnnotationOrExpression ({xbase :: XListLiteral.elements+= current} (',' elements+=XAnnotationOrExpression)+)?\n \t\tpublic Group getGroup_1() { return cGroup_1; }\n \t\t\n \t\t//XAnnotationOrExpression\n \t\tpublic RuleCall getXAnnotationOrExpressionParserRuleCall_1_0() { return cXAnnotationOrExpressionParserRuleCall_1_0; }\n \t\t\n-\t\t//({xbase::XListLiteral.elements+=current} (',' elements+=XAnnotationOrExpression)+)?\n+\t\t//({xbase :: XListLiteral.elements+= current} (',' elements+=XAnnotationOrExpression)+)?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU1ODA4Mg=="}, "originalCommit": {"oid": "22fc484f6c243e66ec3acdb45b698b44a93be00e"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 665, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}