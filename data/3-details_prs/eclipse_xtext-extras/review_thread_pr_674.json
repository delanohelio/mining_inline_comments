{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMzI2MTMy", "number": 674, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDoxMjo1NFrOE_Kxng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDoxMjo1NFrOE_Kxng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjcyMjg2OnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/interpreter/impl/XbaseInterpreter.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDoxMjo1NFrOH8uZEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNDo1MzoyN1rOH8wn_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzNjY5MQ==", "bodyText": "wonder if this is a regression in internalEvaluate", "url": "https://github.com/eclipse/xtext-extras/pull/674#discussion_r533436691", "createdAt": "2020-12-01T14:12:54Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/interpreter/impl/XbaseInterpreter.java", "diffHunk": "@@ -294,8 +294,13 @@ protected Object _doEvaluate(XNullLiteral literal, IEvaluationContext context, C\n \t}\n \t\n \tprotected Object _doEvaluate(XReturnExpression returnExpr, IEvaluationContext context, CancelIndicator indicator) {\n-\t\tObject returnValue = internalEvaluate(returnExpr.getExpression(), context, indicator);\n-\t\tthrow new ReturnValue(returnValue);\n+\t\tXExpression expression = returnExpr.getExpression();\n+\t\tif (expression != null) {\n+\t\t\tObject returnValue = internalEvaluate(returnExpr.getExpression(), context, indicator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0f4003abc3862cd88635650ced8b38b6a57e1f5"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzODA5NQ==", "bodyText": "and or if we should have an elseif for Null/Void in  org.eclipse.xtext.xbase.interpreter.impl.XbaseInterpreter.doEvaluate(XExpression, IEvaluationContext, CancelIndicator)", "url": "https://github.com/eclipse/xtext-extras/pull/674#discussion_r533438095", "createdAt": "2020-12-01T14:14:51Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/interpreter/impl/XbaseInterpreter.java", "diffHunk": "@@ -294,8 +294,13 @@ protected Object _doEvaluate(XNullLiteral literal, IEvaluationContext context, C\n \t}\n \t\n \tprotected Object _doEvaluate(XReturnExpression returnExpr, IEvaluationContext context, CancelIndicator indicator) {\n-\t\tObject returnValue = internalEvaluate(returnExpr.getExpression(), context, indicator);\n-\t\tthrow new ReturnValue(returnValue);\n+\t\tXExpression expression = returnExpr.getExpression();\n+\t\tif (expression != null) {\n+\t\t\tObject returnValue = internalEvaluate(returnExpr.getExpression(), context, indicator);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzNjY5MQ=="}, "originalCommit": {"oid": "f0f4003abc3862cd88635650ced8b38b6a57e1f5"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzODIzMg==", "bodyText": "@szarnekow what do you think?", "url": "https://github.com/eclipse/xtext-extras/pull/674#discussion_r533438232", "createdAt": "2020-12-01T14:15:04Z", "author": {"login": "cdietrich"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/interpreter/impl/XbaseInterpreter.java", "diffHunk": "@@ -294,8 +294,13 @@ protected Object _doEvaluate(XNullLiteral literal, IEvaluationContext context, C\n \t}\n \t\n \tprotected Object _doEvaluate(XReturnExpression returnExpr, IEvaluationContext context, CancelIndicator indicator) {\n-\t\tObject returnValue = internalEvaluate(returnExpr.getExpression(), context, indicator);\n-\t\tthrow new ReturnValue(returnValue);\n+\t\tXExpression expression = returnExpr.getExpression();\n+\t\tif (expression != null) {\n+\t\t\tObject returnValue = internalEvaluate(returnExpr.getExpression(), context, indicator);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzNjY5MQ=="}, "originalCommit": {"oid": "f0f4003abc3862cd88635650ced8b38b6a57e1f5"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ2ODg3OQ==", "bodyText": "wonder if we should add a testcase to\nAbstractXbaseEvaluationTest / XbaseInterpreterTest\n\nYes, that would be necessary. Xbase does not allow to define methods though the tests should be based on lambda expressions with a procedural type, e.g. val Runnable r = [ return; ]; r.run()", "url": "https://github.com/eclipse/xtext-extras/pull/674#discussion_r533468879", "createdAt": "2020-12-01T14:48:36Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/interpreter/impl/XbaseInterpreter.java", "diffHunk": "@@ -294,8 +294,13 @@ protected Object _doEvaluate(XNullLiteral literal, IEvaluationContext context, C\n \t}\n \t\n \tprotected Object _doEvaluate(XReturnExpression returnExpr, IEvaluationContext context, CancelIndicator indicator) {\n-\t\tObject returnValue = internalEvaluate(returnExpr.getExpression(), context, indicator);\n-\t\tthrow new ReturnValue(returnValue);\n+\t\tXExpression expression = returnExpr.getExpression();\n+\t\tif (expression != null) {\n+\t\t\tObject returnValue = internalEvaluate(returnExpr.getExpression(), context, indicator);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzNjY5MQ=="}, "originalCommit": {"oid": "f0f4003abc3862cd88635650ced8b38b6a57e1f5"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ3MjUxOA==", "bodyText": "I don't think it's a regression. Looks like it was an incomplete solution since 2011", "url": "https://github.com/eclipse/xtext-extras/pull/674#discussion_r533472518", "createdAt": "2020-12-01T14:52:24Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/interpreter/impl/XbaseInterpreter.java", "diffHunk": "@@ -294,8 +294,13 @@ protected Object _doEvaluate(XNullLiteral literal, IEvaluationContext context, C\n \t}\n \t\n \tprotected Object _doEvaluate(XReturnExpression returnExpr, IEvaluationContext context, CancelIndicator indicator) {\n-\t\tObject returnValue = internalEvaluate(returnExpr.getExpression(), context, indicator);\n-\t\tthrow new ReturnValue(returnValue);\n+\t\tXExpression expression = returnExpr.getExpression();\n+\t\tif (expression != null) {\n+\t\t\tObject returnValue = internalEvaluate(returnExpr.getExpression(), context, indicator);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzNjY5MQ=="}, "originalCommit": {"oid": "f0f4003abc3862cd88635650ced8b38b6a57e1f5"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQ3MzI3Nw==", "bodyText": "an elseif for Null/Void in org.eclipse.xtext.xbase.interpreter.impl.XbaseInterpreter.doEvaluate\n\nNo, I don't think so. A null expression would be a programming error which is already indicated by the IllegalArgumentException.", "url": "https://github.com/eclipse/xtext-extras/pull/674#discussion_r533473277", "createdAt": "2020-12-01T14:53:27Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/interpreter/impl/XbaseInterpreter.java", "diffHunk": "@@ -294,8 +294,13 @@ protected Object _doEvaluate(XNullLiteral literal, IEvaluationContext context, C\n \t}\n \t\n \tprotected Object _doEvaluate(XReturnExpression returnExpr, IEvaluationContext context, CancelIndicator indicator) {\n-\t\tObject returnValue = internalEvaluate(returnExpr.getExpression(), context, indicator);\n-\t\tthrow new ReturnValue(returnValue);\n+\t\tXExpression expression = returnExpr.getExpression();\n+\t\tif (expression != null) {\n+\t\t\tObject returnValue = internalEvaluate(returnExpr.getExpression(), context, indicator);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzQzNjY5MQ=="}, "originalCommit": {"oid": "f0f4003abc3862cd88635650ced8b38b6a57e1f5"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 667, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}