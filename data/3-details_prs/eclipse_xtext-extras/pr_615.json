{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NjQ2MTI5", "number": 615, "title": "[eclipse/xtext#1777] converted xtend code to java", "bodyText": "[eclipse/xtext#1777] converted xtend code to java\nSigned-off-by: Christian Dietrich christian.dietrich@itemis.de", "createdAt": "2020-06-04T07:34:15Z", "url": "https://github.com/eclipse/xtext-extras/pull/615", "merged": true, "mergeCommit": {"oid": "2579c0a341683cea61d52b6982cc60ca6512777f"}, "closed": true, "closedAt": "2020-06-04T10:40:05Z", "author": {"login": "cdietrich"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcn6r0WgFqTQyNDI2MTY5Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcn6v9-gBqjM0MDU5ODgxMzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MjYxNjky", "url": "https://github.com/eclipse/xtext-extras/pull/615#pullrequestreview-424261692", "createdAt": "2020-06-04T09:25:21Z", "commit": {"oid": "27b67db9cdf87d2c79f169cb5341062c97832a36"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOToyNToyMVrOGe9XLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOTozMToxNFrOGe9lRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExNTgyMw==", "bodyText": "XFunctionTypeRefs.buildUri(..) -> buildUri(..)", "url": "https://github.com/eclipse/xtext-extras/pull/615#discussion_r435115823", "createdAt": "2020-06-04T09:25:21Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xtype/util/XFunctionTypeRefs.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtype.util;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.InternalEObject;\n+import org.eclipse.emf.ecore.util.EcoreUtil;\n+import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;\n+import org.eclipse.xtext.common.types.JvmPrimitiveType;\n+import org.eclipse.xtext.common.types.JvmType;\n+import org.eclipse.xtext.common.types.JvmTypeReference;\n+import org.eclipse.xtext.common.types.JvmVoid;\n+import org.eclipse.xtext.common.types.TypesFactory;\n+import org.eclipse.xtext.common.types.access.impl.ClassURIHelper;\n+import org.eclipse.xtext.xbase.lib.Functions;\n+import org.eclipse.xtext.xbase.lib.Procedures;\n+\n+/**\n+ * @author Anton Kosyakov - Initial contribution and API\n+ */\n+public class XFunctionTypeRefs {\n+\tpublic static URI computeTypeUri(boolean procedure, int functionParamCount) {\n+\t\treturn URI.createURI(XFunctionTypeRefs.buildUri(procedure, functionParamCount));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b67db9cdf87d2c79f169cb5341062c97832a36"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExNjQ4MQ==", "bodyText": "Unnecessary qualified static method call (similar to the other case above).", "url": "https://github.com/eclipse/xtext-extras/pull/615#discussion_r435116481", "createdAt": "2020-06-04T09:26:27Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xtype/util/XFunctionTypeRefs.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtype.util;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.InternalEObject;\n+import org.eclipse.emf.ecore.util.EcoreUtil;\n+import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;\n+import org.eclipse.xtext.common.types.JvmPrimitiveType;\n+import org.eclipse.xtext.common.types.JvmType;\n+import org.eclipse.xtext.common.types.JvmTypeReference;\n+import org.eclipse.xtext.common.types.JvmVoid;\n+import org.eclipse.xtext.common.types.TypesFactory;\n+import org.eclipse.xtext.common.types.access.impl.ClassURIHelper;\n+import org.eclipse.xtext.xbase.lib.Functions;\n+import org.eclipse.xtext.xbase.lib.Procedures;\n+\n+/**\n+ * @author Anton Kosyakov - Initial contribution and API\n+ */\n+public class XFunctionTypeRefs {\n+\tpublic static URI computeTypeUri(boolean procedure, int functionParamCount) {\n+\t\treturn URI.createURI(XFunctionTypeRefs.buildUri(procedure, functionParamCount));\n+\t}\n+\n+\tpublic static String buildUri(boolean procedure, int functionParamCount) {\n+\t\tint paramCount = Math.min(6, functionParamCount);\n+\t\tif (procedure) {\n+\t\t\treturn \"java:/Objects/\" + Procedures.class.getCanonicalName() + \"#\" + Procedures.class.getCanonicalName()\n+\t\t\t\t\t+ \"$Procedure\" + Integer.valueOf(paramCount);\n+\t\t}\n+\t\treturn \"java:/Objects/\" + Functions.class.getCanonicalName() + \"#\" + Functions.class.getCanonicalName()\n+\t\t\t\t+ \"$Function\" + Integer.valueOf(paramCount);\n+\t}\n+\n+\tpublic static URI computeTypeUri(Class<?> topLevelClass) {\n+\t\treturn new ClassURIHelper().getFullURI(topLevelClass);\n+\t}\n+\n+\tpublic static JvmTypeReference wrapIfNecessary(JvmTypeReference reference, JvmType type) {\n+\t\tif (type instanceof JvmPrimitiveType) {\n+\t\t\tJvmType wrappedType = XFunctionTypeRefs.getWrappedType(type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b67db9cdf87d2c79f169cb5341062c97832a36"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExNzgxNA==", "bodyText": "Reminds me of org.eclipse.xtext.common.types.util.Primitives", "url": "https://github.com/eclipse/xtext-extras/pull/615#discussion_r435117814", "createdAt": "2020-06-04T09:28:36Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xtype/util/XFunctionTypeRefs.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtype.util;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.InternalEObject;\n+import org.eclipse.emf.ecore.util.EcoreUtil;\n+import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;\n+import org.eclipse.xtext.common.types.JvmPrimitiveType;\n+import org.eclipse.xtext.common.types.JvmType;\n+import org.eclipse.xtext.common.types.JvmTypeReference;\n+import org.eclipse.xtext.common.types.JvmVoid;\n+import org.eclipse.xtext.common.types.TypesFactory;\n+import org.eclipse.xtext.common.types.access.impl.ClassURIHelper;\n+import org.eclipse.xtext.xbase.lib.Functions;\n+import org.eclipse.xtext.xbase.lib.Procedures;\n+\n+/**\n+ * @author Anton Kosyakov - Initial contribution and API\n+ */\n+public class XFunctionTypeRefs {\n+\tpublic static URI computeTypeUri(boolean procedure, int functionParamCount) {\n+\t\treturn URI.createURI(XFunctionTypeRefs.buildUri(procedure, functionParamCount));\n+\t}\n+\n+\tpublic static String buildUri(boolean procedure, int functionParamCount) {\n+\t\tint paramCount = Math.min(6, functionParamCount);\n+\t\tif (procedure) {\n+\t\t\treturn \"java:/Objects/\" + Procedures.class.getCanonicalName() + \"#\" + Procedures.class.getCanonicalName()\n+\t\t\t\t\t+ \"$Procedure\" + Integer.valueOf(paramCount);\n+\t\t}\n+\t\treturn \"java:/Objects/\" + Functions.class.getCanonicalName() + \"#\" + Functions.class.getCanonicalName()\n+\t\t\t\t+ \"$Function\" + Integer.valueOf(paramCount);\n+\t}\n+\n+\tpublic static URI computeTypeUri(Class<?> topLevelClass) {\n+\t\treturn new ClassURIHelper().getFullURI(topLevelClass);\n+\t}\n+\n+\tpublic static JvmTypeReference wrapIfNecessary(JvmTypeReference reference, JvmType type) {\n+\t\tif (type instanceof JvmPrimitiveType) {\n+\t\t\tJvmType wrappedType = XFunctionTypeRefs.getWrappedType(type);\n+\t\t\tif (wrappedType == null) {\n+\t\t\t\treturn reference;\n+\t\t\t} else {\n+\t\t\t\tJvmParameterizedTypeReference result = TypesFactory.eINSTANCE\n+\t\t\t\t\t\t.createJvmParameterizedTypeReference();\n+\t\t\t\tresult.setType(wrappedType);\n+\t\t\t\treturn result;\n+\t\t\t}\n+\t\t} else if (type instanceof JvmVoid) {\n+\t\t\tif (!((JvmVoid) type).eIsProxy()) {\n+\t\t\t\tJvmParameterizedTypeReference result = TypesFactory.eINSTANCE\n+\t\t\t\t\t\t.createJvmParameterizedTypeReference();\n+\t\t\t\tresult.setType(XFunctionTypeRefs.getType(Void.class, type));\n+\t\t\t\treturn result;\n+\t\t\t}\n+\t\t}\n+\t\treturn reference;\n+\t}\n+\n+\tpublic static JvmType getWrappedType(JvmType type) {\n+\t\tString name = type.getIdentifier();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b67db9cdf87d2c79f169cb5341062c97832a36"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExODI4OQ==", "bodyText": "Reminds me of org.eclipse.xtext.common.types.access.impl.ClassURIHelper.getFullURI(Type)", "url": "https://github.com/eclipse/xtext-extras/pull/615#discussion_r435118289", "createdAt": "2020-06-04T09:29:24Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xtype/util/XFunctionTypeRefs.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2013, 2020 itemis AG (http://www.itemis.eu) and others.\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0.\n+ * \n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.eclipse.xtext.xtype.util;\n+\n+import org.eclipse.emf.common.util.URI;\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.emf.ecore.InternalEObject;\n+import org.eclipse.emf.ecore.util.EcoreUtil;\n+import org.eclipse.xtext.common.types.JvmParameterizedTypeReference;\n+import org.eclipse.xtext.common.types.JvmPrimitiveType;\n+import org.eclipse.xtext.common.types.JvmType;\n+import org.eclipse.xtext.common.types.JvmTypeReference;\n+import org.eclipse.xtext.common.types.JvmVoid;\n+import org.eclipse.xtext.common.types.TypesFactory;\n+import org.eclipse.xtext.common.types.access.impl.ClassURIHelper;\n+import org.eclipse.xtext.xbase.lib.Functions;\n+import org.eclipse.xtext.xbase.lib.Procedures;\n+\n+/**\n+ * @author Anton Kosyakov - Initial contribution and API\n+ */\n+public class XFunctionTypeRefs {\n+\tpublic static URI computeTypeUri(boolean procedure, int functionParamCount) {\n+\t\treturn URI.createURI(XFunctionTypeRefs.buildUri(procedure, functionParamCount));\n+\t}\n+\n+\tpublic static String buildUri(boolean procedure, int functionParamCount) {\n+\t\tint paramCount = Math.min(6, functionParamCount);\n+\t\tif (procedure) {\n+\t\t\treturn \"java:/Objects/\" + Procedures.class.getCanonicalName() + \"#\" + Procedures.class.getCanonicalName()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b67db9cdf87d2c79f169cb5341062c97832a36"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExOTQzMQ==", "bodyText": "This class probably deserves a follow-up-ticket for the cleanup.", "url": "https://github.com/eclipse/xtext-extras/pull/615#discussion_r435119431", "createdAt": "2020-06-04T09:31:14Z", "author": {"login": "szarnekow"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xtype/util/XFunctionTypeRefs.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b67db9cdf87d2c79f169cb5341062c97832a36"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a931b6989d01c506fbc40bcc37d92cb6d6b38742", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-extras/commit/a931b6989d01c506fbc40bcc37d92cb6d6b38742", "committedDate": "2020-06-04T09:35:53Z", "message": "[eclipse/xtext#1777] converted xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "27b67db9cdf87d2c79f169cb5341062c97832a36", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-extras/commit/27b67db9cdf87d2c79f169cb5341062c97832a36", "committedDate": "2020-06-03T12:19:35Z", "message": "[eclipse/xtext#1777] converted xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}, "afterCommit": {"oid": "a931b6989d01c506fbc40bcc37d92cb6d6b38742", "author": {"user": {"login": "cdietrich", "name": "Christian Dietrich"}}, "url": "https://github.com/eclipse/xtext-extras/commit/a931b6989d01c506fbc40bcc37d92cb6d6b38742", "committedDate": "2020-06-04T09:35:53Z", "message": "[eclipse/xtext#1777] converted xtend code to java\n\nSigned-off-by: Christian Dietrich <christian.dietrich@itemis.de>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4421, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}