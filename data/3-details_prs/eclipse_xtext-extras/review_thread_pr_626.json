{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3OTUwNTgz", "number": 626, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwMzowNDo0MFrOENqtYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwMzowNDo0MFrOENqtYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzY2NjkxOnYy", "diffSide": "RIGHT", "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/TypeConvertingCompiler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwMzowNDo0MVrOGwaAoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDozODozMVrOGwi--g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQxMDk3Ng==", "bodyText": "Should be 2.23", "url": "https://github.com/eclipse/xtext-extras/pull/626#discussion_r453410976", "createdAt": "2020-07-13T03:04:41Z", "author": {"login": "miklossy"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/TypeConvertingCompiler.java", "diffHunk": "@@ -213,12 +213,20 @@ protected JvmOperation findImplementingOperation(LightweightTypeReference closur\n \t\treturn getTypeComputationServices().getFunctionTypes().findImplementingOperation(closureType);\n \t}\n \t\n-\tprivate void doCastConversion(final LightweightTypeReference castTo, final ITreeAppendable b, final Later expression) {\n-\t\tb.append(\"((\");\n-\t\tb.append(castTo);\n-\t\tb.append(\")\");\n-\t\texpression.exec(b);\n-\t\tb.append(\")\");\n+\t/**\n+\t * Invoked to generate the Java cast operation to the given buffer.\n+\t * \n+\t * @param castTo is the expected type of the cast expression.\n+\t * @param buffer is the receiver of the Java expression.\n+\t * @param expression is the expression that has to be casted.\n+\t * @since 2.22", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31cd19dbf6d5fbefd856f1a8f244002543f59650"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU1ODAxMA==", "bodyText": "Done.", "url": "https://github.com/eclipse/xtext-extras/pull/626#discussion_r453558010", "createdAt": "2020-07-13T10:38:31Z", "author": {"login": "gallandarakhneorg"}, "path": "org.eclipse.xtext.xbase/src/org/eclipse/xtext/xbase/compiler/TypeConvertingCompiler.java", "diffHunk": "@@ -213,12 +213,20 @@ protected JvmOperation findImplementingOperation(LightweightTypeReference closur\n \t\treturn getTypeComputationServices().getFunctionTypes().findImplementingOperation(closureType);\n \t}\n \t\n-\tprivate void doCastConversion(final LightweightTypeReference castTo, final ITreeAppendable b, final Later expression) {\n-\t\tb.append(\"((\");\n-\t\tb.append(castTo);\n-\t\tb.append(\")\");\n-\t\texpression.exec(b);\n-\t\tb.append(\")\");\n+\t/**\n+\t * Invoked to generate the Java cast operation to the given buffer.\n+\t * \n+\t * @param castTo is the expected type of the cast expression.\n+\t * @param buffer is the receiver of the Java expression.\n+\t * @param expression is the expression that has to be casted.\n+\t * @since 2.22", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQxMDk3Ng=="}, "originalCommit": {"oid": "31cd19dbf6d5fbefd856f1a8f244002543f59650"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 731, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}