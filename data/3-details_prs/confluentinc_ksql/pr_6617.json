{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNjQ0MDcx", "number": 6617, "title": "chore: support arrays/maps with mismatched elements", "bodyText": "Description\nfixes: #6470\nAlso contains a few edge case fixes for the general cast of coercing lists of expressions.\n\n1st commit fixes ARRAY constructor.\n2nd commit fixes MAP constructor.\n3rd commit removes now unnecessary casts from in.json\n4th commit adds test covering coercion of array of structs where structs have different fields and field types.\n\nTesting done\nusual\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-11-16T12:51:22Z", "url": "https://github.com/confluentinc/ksql/pull/6617", "merged": true, "mergeCommit": {"oid": "54f6fbe5a5f392f337505eae90223e21eaa94bf5"}, "closed": true, "closedAt": "2020-11-17T15:55:17Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddEbUfAH2gAyNTIxNjQ0MDcxOjAzNzU2M2IwN2EyZTA5MTFmMjdiMTg0ZjVmNjJmMjA0NTNmYmY4MmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddbmy3gH2gAyNTIxNjQ0MDcxOmE2MzRhMTkyNzU1MWFmNGMxMjE4ZTc4Mzc1NDljZGVmMGQyZTRiYzI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "037563b07a2e0911f27b184f5f62f20453fbf82e", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/037563b07a2e0911f27b184f5f62f20453fbf82e", "committedDate": "2020-11-16T12:50:30Z", "message": "chore: support arrays with mismatched elements\n\npart fix for https://github.com/confluentinc/ksql/issues/6470. (MAP / STRUCT remaining)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMjkxMzI4", "url": "https://github.com/confluentinc/ksql/pull/6617#pullrequestreview-531291328", "createdAt": "2020-11-16T12:52:10Z", "commit": {"oid": "037563b07a2e0911f27b184f5f62f20453fbf82e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjo1MjoxMFrOHz9TcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjo1MjoxMFrOHz9TcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI0MzgyNA==", "bodyText": "Removed, as 0.7.1 was a long time ago. This should really of been in the upgrade notes, not the main docs.", "url": "https://github.com/confluentinc/ksql/pull/6617#discussion_r524243824", "createdAt": "2020-11-16T12:52:10Z", "author": {"login": "big-andy-coates"}, "path": "docs/developer-guide/syntax-reference.md", "diffHunk": "@@ -241,24 +241,11 @@ statement by using the syntax `ARRAY<ElementType>`. For example,\n `ARRAY<INT>` defines an array of integers.\n \n Also, you can output an array from a query by using a SELECT statement.\n-The following example creates an array from a stream named `s1`. \n+The following example creates an array from a stream named `s1` using\n+the [`ARRAY` constructor function](ksqldb-reference/scalar-functions.md#array).\n \n ```sql\n-SELECT ARRAY[1, 2] FROM s1 EMIT CHANGES;\n-```\n-\n-Starting in version 0.7.1, the built-in AS_ARRAY function syntax for\n-creating arrays doesn't work. Replace AS_ARRAY with the ARRAY constructor\n-syntax. For example, replace this legacy query:\n-\n-```sql\n-CREATE STREAM OUTPUT AS SELECT cube_explode(as_array(col1, col2)) VAL1, ABS(col3) VAL2 FROM TEST;\n-```\n-\n-With this query:\n-\n-```sql\n-CREATE STREAM OUTPUT AS SELECT cube_explode(array[col1, col2]) VAL1, ABS(col3) VAL2 FROM TEST;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "037563b07a2e0911f27b184f5f62f20453fbf82e"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMjkxNzEw", "url": "https://github.com/confluentinc/ksql/pull/6617#pullrequestreview-531291710", "createdAt": "2020-11-16T12:52:44Z", "commit": {"oid": "037563b07a2e0911f27b184f5f62f20453fbf82e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjo1Mjo0NFrOHz9VzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxMjo1Mjo0NFrOHz9VzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDI0NDQyOA==", "bodyText": "Bug fix: fixes issues where value has a negative scale.", "url": "https://github.com/confluentinc/ksql/pull/6617#discussion_r524244428", "createdAt": "2020-11-16T12:52:44Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/DecimalUtil.java", "diffHunk": "@@ -268,15 +268,18 @@ private static void ensureMax(final BigDecimal value, final int precision, final\n   }\n \n   public static SqlType fromValue(final BigDecimal value) {\n-    final BigDecimal bigDecimalZero = BigDecimal.ZERO;\n+    // SqlDecimal does not support negative scale:\n+    final BigDecimal decimal = value.scale() < 0\n+        ? value.setScale(0, BigDecimal.ROUND_UNNECESSARY)\n+        : value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "037563b07a2e0911f27b184f5f62f20453fbf82e"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e33a3e96e8fd89ca3d91f4490faaabcd07816fdb", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/e33a3e96e8fd89ca3d91f4490faaabcd07816fdb", "committedDate": "2020-11-16T13:33:16Z", "message": "chore: support maps with mismatched key and value types\n\npart fix for https://github.com/confluentinc/ksql/issues/6470. (STRUCT remaining)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f0b5c63dd42085cd77b2055f46e54ae6b3254d0", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/8f0b5c63dd42085cd77b2055f46e54ae6b3254d0", "committedDate": "2020-11-16T13:38:34Z", "message": "chore: update in.json removing unnecessary casts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "742e7feb610041f9fde9533a0075eb5f02769a6f", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/742e7feb610041f9fde9533a0075eb5f02769a6f", "committedDate": "2020-11-16T13:46:29Z", "message": "chore: array of struct test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMzk0Mjg4", "url": "https://github.com/confluentinc/ksql/pull/6617#pullrequestreview-531394288", "createdAt": "2020-11-16T14:52:58Z", "commit": {"oid": "742e7feb610041f9fde9533a0075eb5f02769a6f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc5b157c9a34e8454bc225f7045048714e62861c", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/cc5b157c9a34e8454bc225f7045048714e62861c", "committedDate": "2020-11-16T15:39:28Z", "message": "chore: fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxNTEwNzc5", "url": "https://github.com/confluentinc/ksql/pull/6617#pullrequestreview-531510779", "createdAt": "2020-11-16T16:50:40Z", "commit": {"oid": "037563b07a2e0911f27b184f5f62f20453fbf82e"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjo1MDo0MFrOH0H1NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjo1ODo0N1rOH0INbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQxNjMwOQ==", "bodyText": "nit: let's add a postcondition to ensure the type of the array at the end (same goes for the other tests)", "url": "https://github.com/confluentinc/ksql/pull/6617#discussion_r524416309", "createdAt": "2020-11-16T16:50:40Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/create_array.json", "diffHunk": "@@ -54,14 +54,27 @@\n       }\n     },\n     {\n-      \"name\": \"construct a list from mismatching elements\",\n+      \"name\": \"construct a list from compatible mismatching elements\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "037563b07a2e0911f27b184f5f62f20453fbf82e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQyMTM5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * <p>Coercion is performed in order. So the type type of the first non-null expression drives the\n          \n          \n            \n               * <p>Coercion is performed in order. So the type of the first non-null expression drives the", "url": "https://github.com/confluentinc/ksql/pull/6617#discussion_r524421392", "createdAt": "2020-11-16T16:57:17Z", "author": {"login": "agavra"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/util/CoercionUtil.java", "diffHunk": "@@ -91,32 +91,65 @@ private CoercionUtil() {\n    *\n    * <p>Any non-literal expressions that don't match the common type, but which can be coerced, will\n    * be wrapped in an explicit {@code CAST} to convert them to the required type.\n+   *\n+   * <p>Coercion is performed in order. So the type type of the first non-null expression drives the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5b157c9a34e8454bc225f7045048714e62861c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQyMjUwOA==", "bodyText": "is there a way to specify a DOUBLE with a string, or do they always get cast to decimals?", "url": "https://github.com/confluentinc/ksql/pull/6617#discussion_r524422508", "createdAt": "2020-11-16T16:58:47Z", "author": {"login": "agavra"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/util/CoercionUtil.java", "diffHunk": "@@ -307,14 +340,50 @@ private static void validateStringCanBeCoercedToBoolean(final String value) {\n         final String value, \n         final SqlType targetType\n     ) {\n+      Preconditions.checkArgument(targetType.baseType().isNumber());\n+\n       try {\n-        final BigDecimal result = new BigDecimal(value.trim());\n-        return Optional.of(resolveCommonNumericType(result, targetType));\n+        final SqlType sourceType = getStringNumericType(value);\n+\n+        if (sourceType.baseType() == SqlBaseType.DOUBLE\n+            || targetType.baseType() == SqlBaseType.DOUBLE\n+        ) {\n+          return Optional.of(SqlTypes.DOUBLE);\n+        }\n+\n+        if (sourceType.baseType() == SqlBaseType.DECIMAL\n+            || targetType.baseType() == SqlBaseType.DECIMAL\n+        ) {\n+          return Optional.of(DecimalUtil.widen(sourceType, targetType));\n+        }\n+\n+        return Optional.of(sourceType.baseType().canImplicitlyCast(targetType.baseType())\n+            ? targetType\n+            : sourceType);\n       } catch (final NumberFormatException e) {\n         throw invalidSyntaxException(value, targetType);\n       }\n     }\n \n+    private static SqlType getStringNumericType(final String value) {\n+      final BigDecimal result = new BigDecimal(value.trim());\n+\n+      final boolean containsDpOrScientific = value.contains(\".\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc5b157c9a34e8454bc225f7045048714e62861c"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a634a1927551af4c1218e7837549cdef0d2e4bc2", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/a634a1927551af4c1218e7837549cdef0d2e4bc2", "committedDate": "2020-11-17T15:50:51Z", "message": "chore: almog's requested changes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4542, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}