{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NjUyOTg1", "number": 4951, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMzoyMzo1NFrODtUoSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzowMDo1N1rODtn3dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODUwNTA0OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMzoyMzo1NFrOF-rqXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjoyMzozOFrOF_UyfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3MTM4OQ==", "bodyText": "how does this interact with host forwarding? If I forwarded to a host that is overwhelmed will I then try it's standby? It might make sense to check the error message and not forward to another host in this scenario (not sure if that's what happens or not)", "url": "https://github.com/confluentinc/ksql/pull/4951#discussion_r401271389", "createdAt": "2020-03-31T23:23:54Z", "author": {"login": "agavra"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -168,6 +172,11 @@ public TableRowsEntity execute(\n               + \"this feature.\");\n     }\n \n+    if (!rateLimiter.tryAcquire()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dc64405c7ae9933d55cb7b9d2bab2876c944628"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4MzI0NQ==", "bodyText": "That's a fair question.  At the moment, it checks the limit at both places, which seems like a reasonable method generally since both have to take part in responding.\nIt doesn't handle this failure in a special manner at the forwarder and it would just try the standby, as you're hinting at.  This could be a way to quickly shift load from one overwhelmed host to another, though in the current scheme, next time, we'll just try the overwhelmed host again, so it's not perfect at the moment.\nTo me, being overwhelmed with queries is not unlike the host being down temporarily, and the solution we have is to fail over to a standby.  What do you think @vinothchandar ?", "url": "https://github.com/confluentinc/ksql/pull/4951#discussion_r401283245", "createdAt": "2020-04-01T00:03:12Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -168,6 +172,11 @@ public TableRowsEntity execute(\n               + \"this feature.\");\n     }\n \n+    if (!rateLimiter.tryAcquire()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3MTM4OQ=="}, "originalCommit": {"oid": "3dc64405c7ae9933d55cb7b9d2bab2876c944628"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5MDU1NA==", "bodyText": "@AlanConfluent I don't understand from the code how it will try the standby if the active has exceeded the rate limit. The check does not happen in the forwarding loop so if the active fails, the query will fail.", "url": "https://github.com/confluentinc/ksql/pull/4951#discussion_r401290554", "createdAt": "2020-04-01T00:29:49Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -168,6 +172,11 @@ public TableRowsEntity execute(\n               + \"this feature.\");\n     }\n \n+    if (!rateLimiter.tryAcquire()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3MTM4OQ=="}, "originalCommit": {"oid": "3dc64405c7ae9933d55cb7b9d2bab2876c944628"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5NTEwMw==", "bodyText": "If the rate limit check fails at the forwarding node, that it just fails.  That means that the node accessed to answer pull queries is overwhelmed.  I could move this down to the local pull query section, but it wouldn't limit someone from forwarding lots of pull queries through a single forwarding node, which seems bad.\nIf it fails the rate limit at the actual active node, then the forwarding loop will go on to the standby.\nfor (KsqlNode node : filteredAndOrderedNodes) {\n      try {\n        return routeQuery(node, statement, executionContext, serviceContext, pullQueryContext);\n      } catch (Exception t) {\n        LOG.debug(\"Error routing query {} to host {} at timestamp {}\",\n                 statement.getStatementText(), node, System.currentTimeMillis());\n      }\n    }", "url": "https://github.com/confluentinc/ksql/pull/4951#discussion_r401295103", "createdAt": "2020-04-01T00:46:53Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -168,6 +172,11 @@ public TableRowsEntity execute(\n               + \"this feature.\");\n     }\n \n+    if (!rateLimiter.tryAcquire()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3MTM4OQ=="}, "originalCommit": {"oid": "3dc64405c7ae9933d55cb7b9d2bab2876c944628"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTMxMjYxNg==", "bodyText": "By forwarding node do you mean a router? The way I understand how this change would work is this: If there is a router and the router exceeds the rate limit, it will fail the query. If the router is not overwhelmed, it will go to the forwarding loop and will try the active and standbys. If there is no router, then the active will fail the query if is has exceeded the rate limit.", "url": "https://github.com/confluentinc/ksql/pull/4951#discussion_r401312616", "createdAt": "2020-04-01T01:55:22Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -168,6 +172,11 @@ public TableRowsEntity execute(\n               + \"this feature.\");\n     }\n \n+    if (!rateLimiter.tryAcquire()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3MTM4OQ=="}, "originalCommit": {"oid": "3dc64405c7ae9933d55cb7b9d2bab2876c944628"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc0MTAzOA==", "bodyText": "Fly by comment (feel free to ignore) :): I feel we can just enforce at the router and over time, things will settle down to that rate when all routers enforce the limit.. This is a simpler model to understand..", "url": "https://github.com/confluentinc/ksql/pull/4951#discussion_r401741038", "createdAt": "2020-04-01T16:18:44Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -168,6 +172,11 @@ public TableRowsEntity execute(\n               + \"this feature.\");\n     }\n \n+    if (!rateLimiter.tryAcquire()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3MTM4OQ=="}, "originalCommit": {"oid": "3dc64405c7ae9933d55cb7b9d2bab2876c944628"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0NTIxMw==", "bodyText": "Alright, I agree it's a little hard to reason about if you're trying to figure out total QPS available.\nI have it now check the rate limit so long as it's not been forwarded yet.  It should be noted that this doesn't prevent people from deliberately trying to circumvent the limit by always setting the \"forwarded\" flag, though it may not find the desired data in that case (if it lives elsewhere).  Any scheme (without internal, trusted rpcs) that tries to only check a limit for some requests has this issue since flags can be spoofed.  I think that's not an issue for this feature though since it's not meant for security.", "url": "https://github.com/confluentinc/ksql/pull/4951#discussion_r401945213", "createdAt": "2020-04-01T22:23:38Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -168,6 +172,11 @@ public TableRowsEntity execute(\n               + \"this feature.\");\n     }\n \n+    if (!rateLimiter.tryAcquire()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3MTM4OQ=="}, "originalCommit": {"oid": "3dc64405c7ae9933d55cb7b9d2bab2876c944628"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MTY1Njg0OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNzowMDo1N1rOF_KDwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMjoyNDowMFrOF_UzCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2OTQwOQ==", "bodyText": "How does this fail here? There are no queries issued?", "url": "https://github.com/confluentinc/ksql/pull/4951#discussion_r401769409", "createdAt": "2020-04-01T17:00:57Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorTest.java", "diffHunk": "@@ -118,4 +120,22 @@ public void shouldRedirectQueriesToQueryEndPoint() {\n       );\n     }\n   }\n+\n+  @RunWith(MockitoJUnitRunner.class)\n+  public static class RateLimit {\n+\n+    @Rule\n+    public final TemporaryEngine engine = new TemporaryEngine()\n+        .withConfigs(ImmutableMap.of(KsqlConfig.KSQL_QUERY_PULL_MAX_QPS_CONFIG, 2));\n+\n+    @Test\n+    public void shouldRateLimit() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eb51d46b2553ba49ad688b6eaabcf8e01576f1d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk0NTM1Mw==", "bodyText": "It checks the limit before the request is issued.  It effectively asks for permission, and if it's at the limit, it's not given permission.", "url": "https://github.com/confluentinc/ksql/pull/4951#discussion_r401945353", "createdAt": "2020-04-01T22:24:00Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorTest.java", "diffHunk": "@@ -118,4 +120,22 @@ public void shouldRedirectQueriesToQueryEndPoint() {\n       );\n     }\n   }\n+\n+  @RunWith(MockitoJUnitRunner.class)\n+  public static class RateLimit {\n+\n+    @Rule\n+    public final TemporaryEngine engine = new TemporaryEngine()\n+        .withConfigs(ImmutableMap.of(KsqlConfig.KSQL_QUERY_PULL_MAX_QPS_CONFIG, 2));\n+\n+    @Test\n+    public void shouldRateLimit() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTc2OTQwOQ=="}, "originalCommit": {"oid": "3eb51d46b2553ba49ad688b6eaabcf8e01576f1d"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3714, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}