{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NTA1Mjg0", "number": 4401, "title": "fix: partial push & persistent query support for window bounds columns", "bodyText": "Description\nfixes: #3871\nIs needed to fix:\n\n#3633\n#4015\n\nBefore this change the version of ROWKEY copied to the value schema during processing of data in the Streams topology was always of type STRING regardless of the actual key type. This is because windowed keys had a ROWKEY in the format <actual key> : Window{start=<windowStart>, end=<windowEnd>}. While ROWKEY in the value schema was a STRING, ROWKEY in the key schema was the actual type, e.g. INT.  This is confusing and will lead to bugs.  Also, the formated string isn't very friendly for users.\nThis change looks to introduce the WINDOWSTART and WINDOWEND columns that were reserved in #4388. The obvious approach would be to add WINDOWSTART and WINDOWEND as columns in the key schema. Unfortunately, this would be a much bigger change as many parts of the code currently rely on there being only a single key column. The planned structured key work will resolve this.\nFor now, we only add the windows bounds columns when we LogicalSchema.withMetaAndKeyColsInValue(true). This is a bit of a temporary hack, but gets us where we need to be. This will be cleaned up as part of the structured key work.\nWith this change ROWKEY for windowed sources no longer has the format <actual key> : Window{start=<windowStart>, end=<windowEnd>}: ROWKEY is now only the actual key and the window bounds can be accessed by WINDOWSTART and WINDOWEND. These two window bounds columns are included in a pull SELECT * query. Likewise a join will include the window bounds columns from both sides in the join result if the join is SELECT *.\nExamples:\nPush queries\n\nA select * on a windowed source will not include WINDOWSTART and WINDOWEND. ROWKEY will be the actual key, not a formatted string.\n\nksql> SELECT * FROM windowedSource emit changes\n\n-- old output\n+---------------+------------------------------------------------------+--------+---------+------+\n| ROWTIME       | ROWKEY                                               | USERID | PAGEID  | TOTAL|\n+---------------+------------------------------------------------------+--------+---------+------+\n| 1557183929488 | User_9|+|Page_39 : Window{start=1557183900000 end=-} | User_9 | Page_39 | 1    |\n| 1557183930211 | User_1|+|Page_79 : Window{start=1557183900000 end=-} | User_1 | Page_79 | 1    |\n\n-- new output\n+---------------+---------------+---------------+------------------+--------+---------+------+\n| ROWTIME       | WINDOWSTART   | WINDOWEND     | ROWKEY           | USERID | PAGEID  | TOTAL|\n+---------------+---------------+---------------+------------------+--------+---------+------+\n| 1557183919786 | 1557183900000 | 1557183960000 | User_5|+|Page_12 | User_5 | Page_12 | 1    |\n| 1557183929488 | 1557183900000 | 1557183960000 | User_9|+|Page_39 | User_9 | Page_39 | 1    |\n\n\nWINDOWSTART and WINDOWEND are available in the SELECT, GROUPBY, WHERE, HAVING clauses etc.\n\nFor example:\nSELECT TIMESTAMPTOSTRING(WINDOWSTART,'yyyy-MM-dd HH:mm:ss Z') FROM windowedSource emit changes;\nHowever, don't get too excited just yet as there is a known limitation that drastically reduces the availability of this syntax:\nKNOWN LIMITATION\nWhere a query builds a windowed source from a non-windowed source the window bounds columns are not available.  For example:\n-- won't yet work:\nSELECT WINDOWSTART FROM FROM someSource WINDOW TUMBLING (SIZE 1 SECOND) group by ROWKEY;\n\nThis issue is tracked by: #4397\n\nJoins of windowed sources include the WINDOWSTART and WINDOWEND columns from both sides.\n\nPull queries\nKNOWN LIMITATION\nPull queries have not been updated yet. This will be done in a follow up PR #3633. This is mainly to keep this PR manageable.\nPersistent queries\nPersistent C*AS queries work similar to push queries and have the same known limitation.\nBREAKING CHANGE: Any query of a windowed source that uses ROWKEY in the SELECT projection will see the contents of ROWKEY change from a formatted STRING containing the underlying key and the window bounds, to just the underlying key.  Queries can access the window bounds using WINDOWSTART and WINDOWEND.\nBREAKING CHANGE: Joins on windowed sources now include WINDOWSTART and WINDOWEND columns from both sides on a SELECT *.\nHOW TO REVIEW:\nThe main changes are:\n\nLogicalSchema.withMetaAndKeyValueColumns now adds WINDOWSTART and WINDOWEND columns into the VALUE schema for windowed sources.\nSourceBuilder not populates the new WINDOWSTART and WINDOWEND columns for windowed sources.\nUnfortunately, for this to work, a couple of places in Analysis and Analyzer had to be updated to call LogicalSchema.withMetaAndKeyValueColumns to ensure the window bounds columns are available.  This is a bit hacky, but much less short-term work that adding WINDOWSTART and WINDOWEND to the key schema.\n\nTesting done\nManual and suitable QTT/RQTT tests added.\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-01-29T11:25:28Z", "url": "https://github.com/confluentinc/ksql/pull/4401", "merged": true, "mergeCommit": {"oid": "48aa6ece932cc19afcd4067ad373258b8fd31231"}, "closed": true, "closedAt": "2020-01-29T21:36:49Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_ELmfgH2gAyMzY4NTA1Mjg0OmQ5ZDRiMzkwMWM1NWRmMjk2ODIyMWQ3NzkzYzQ5MmQ5YWU1MDdiYzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_M78zAH2gAyMzY4NTA1Mjg0OjQ0MjBjNzUwODY3ZDlhNTQyYmM2ZWQzZDZhMGJlMjlhYWZmNDc5ZGI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d9d4b3901c55df2968221d7793c492d9ae507bc1", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/d9d4b3901c55df2968221d7793c492d9ae507bc1", "committedDate": "2020-01-29T11:24:27Z", "message": "chore: support window bounds columns in persistent and pull queries\n\nfixes: https://github.com/confluentinc/ksql/issues/3871\n\nIs needed to fix:\n- https://github.com/confluentinc/ksql/issues/3633\n- https://github.com/confluentinc/ksql/issues/4015\n\nBefore this change the version of `ROWKEY` copied to the value schema during processing of data in the Streams topology was always of type `STRING` regardless of the actual key type. This is because windowed keys had a `ROWKEY` in the format `<actual key> : Window{start=<windowStart>, end=<windowEnd>}`. While `ROWKEY` in the value schema was a `STRING`, `ROWKEY` in the key schema was the actual type, e.g. `INT`.  This is confusing and will lead to bugs.  Also, the formated string isn't very friendly for users.\n\nThis change looks to introduce the `WINDOWSTART` and `WINDOWEND` columns that were reserved in https://github.com/confluentinc/ksql/pull/4388. The obvious approach would be to add `WINDOWSTART` and `WINDOWEND` as columns in the key schema. Unfortunately, this would be a much bigger change as many parts of the code currently rely on there being only a single key column. The planned structured key work will resolve this.\n\nFor now, we only add the windows bounds columns when we `LogicalSchema.withMetaAndKeyColsInValue(true)`. This is a bit of a temporary hack, but gets us where we need to be. This will be cleaned up as part of the structured key work.\n\nWith this change `ROWKEY` for windowed sources no longer has the format `<actual key> : Window{start=<windowStart>, end=<windowEnd>}`: `ROWKEY` is now only the _actual_ key and the window bounds can be accessed by `WINDOWSTART` and `WINDOWEND`. These two window bounds columns are included in a pull `SELECT *` query. Likewise a join will include the window bounds columns from both sides in the join result if the join is `SELECT *`.\n\n## Examples:\n\n### Push queries\n\n* A select * on a windowed source will not include `WINDOWSTART` and `WINDOWEND`. `ROWKEY` will be the actual key, not a formatted string.\n\n```\nksql> SELECT * FROM windowedSource emit changes\n\n-- old output\n+---------------+------------------------------------------------------+--------+---------+------+\n| ROWTIME       | ROWKEY                                               | USERID | PAGEID  | TOTAL|\n+---------------+------------------------------------------------------+--------+---------+------+\n| 1557183929488 | User_9|+|Page_39 : Window{start=1557183900000 end=-} | User_9 | Page_39 | 1    |\n| 1557183930211 | User_1|+|Page_79 : Window{start=1557183900000 end=-} | User_1 | Page_79 | 1    |\n\n-- new output\n+---------------+---------------+---------------+------------------+--------+---------+------+\n| ROWTIME       | WINDOWSTART   | WINDOWEND     | ROWKEY           | USERID | PAGEID  | TOTAL|\n+---------------+---------------+---------------+------------------+--------+---------+------+\n| 1557183919786 | 1557183900000 | 1557183960000 | User_5|+|Page_12 | User_5 | Page_12 | 1    |\n| 1557183929488 | 1557183900000 | 1557183960000 | User_9|+|Page_39 | User_9 | Page_39 | 1    |\n```\n\n* `WINDOWSTART` and `WINDOWEND` are available in the SELECT, GROUPBY, WHERE, HAVING clauses etc.\n\nFor example:\n\n```sql\nSELECT TIMESTAMPTOSTRING(WINDOWSTART,'yyyy-MM-dd HH:mm:ss Z') FROM windowedSource emit changes;\n```\n\nHowever, don't get too excited just yet as there is a known limitation that drastically reduces the availability of this syntax:\n\n**KNOWN LIMITATION**\nWhere a query builds a windowed source from a non-windowed source the window bounds columns are not available.  For example:\n\n```\n-- won't yet work:\nSELECT WINDOWSTART FROM FROM someSource WINDOW TUMBLING (SIZE 1 SECOND) group by ROWKEY;\n```\n\nThis issue is tracked by: https://github.com/confluentinc/ksql/issues/4397\n\n* Joins of windowed sources include the `WINDOWSTART` and `WINDOWEND` columns from both sides.\n\n### Pull queries\n\n**KNOWN LIMITATION**\nPull queries have not been updated yet. This will be done in a follow up PR https://github.com/confluentinc/ksql/issues/3633. This is mainly to keep this PR manageable.\n\n### Persistent queries\n\nPersistent C*AS queries work similar to push queries and have the same known limitation.\n\nBREAKING CHANGE: Any query of a windowed source that uses `ROWKEY` in the SELECT projection will see the contents of `ROWKEY` change from a formatted `STRING` containing the underlying key and the window bounds, to just the underlying key.  Queries can access the window bounds using `WINDOWSTART` and `WINDOWEND`.\n\nBREAKING CHANGE: Joins on windowed sources now include `WINDOWSTART` and `WINDOWEND` columns from both sides on a `SELECT *`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/acd9f27000a7fa80024d5dc5dfee12a28db6784d", "committedDate": "2020-01-29T12:03:01Z", "message": "chore: must of been tripping\n\nKSQL does support `<` operator for strings... revert doc change & add test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMDM2Mzk2", "url": "https://github.com/confluentinc/ksql/pull/4401#pullrequestreview-350036396", "createdAt": "2020-01-29T11:27:39Z", "commit": {"oid": "d9d4b3901c55df2968221d7793c492d9ae507bc1"}, "state": "COMMENTED", "comments": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMToyNzo0MFrOFjFI2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjoxNzo1MVrOFjGa0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyODY2NA==", "bodyText": "While updating the docs to include window bounds columns and update ROWKEY I noticed some inconsistencies / old formats etc.  I could of put these in their own PR, but it would have clashed, so I've lumped them in this PR (sorry).  I'll call out my thinking for the changes...\nUpdated to reflect you can also create a stream, using CREATE STREAM, that will create its own backing topic in Kafka.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372328664", "createdAt": "2020-01-29T11:27:40Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/create-a-stream.md", "diffHunk": "@@ -5,22 +5,23 @@ tagline: Create a Stream from a Kafka topic\n description: Learn how to use the CREATE STREAM statement on a Kafka topic\n ---\n \n-In ksqlDB, you create streams from {{ site.aktm }} topics, and you create\n-streams of query results from other streams.\n+In ksqlDB, you create streams from existing {{ site.aktm }} topics, create\n+streams that will create new {{ site.aktm }} topics, or create streams of \n+query results from other streams.\n \n--   Use the CREATE STREAM statement to create a stream from a Kafka\n-    topic.\n+-   Use the CREATE STREAM statement to create a stream from an existing Kafka\n+    topic, or a new Kafka topic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d4b3901c55df2968221d7793c492d9ae507bc1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyODgzOQ==", "bodyText": "Added clarification on why you'd want to set a key field in the WITH clause.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372328839", "createdAt": "2020-01-29T11:28:05Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/create-a-stream.md", "diffHunk": "@@ -102,6 +103,9 @@ The previous SQL statement makes no assumptions about the Kafka message\n key in the underlying Kafka topic. If the value of the message key in\n the topic is the same as one of the columns defined in the stream, you\n can specify the key in the WITH clause of the CREATE STREAM statement.\n+If you later use this column name to perform a join or a repartition KSQL\n+knows no repartition is needed. In effect, the named column becomes an\n+alias for ROWKEY.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d4b3901c55df2968221d7793c492d9ae507bc1"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyOTY5OA==", "bodyText": "Added example of how to create a stream over a NEW kafka topic, i.e. the command creates the topic.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372329698", "createdAt": "2020-01-29T11:30:10Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/create-a-stream.md", "diffHunk": "@@ -180,6 +184,31 @@ Kafka topic          : pageviews (partitions: 1, replication: 1)\n [...]\n ```\n \n+Create a Stream backed by a new Kafka Topic\n+-------------------------------------------\n+\n+Use the CREATE STREAM statement to create a stream without a preexisting \n+topic by providing the PARTITIONS count, and optionally the REPLICA count,\n+in the WITH clause.\n+\n+Taking the example of the pageviews table from above, but where the underlying\n+Kafka topic does not already exist, you can create the stream by pasting\n+the following CREATE STREAM statement into the CLI:\n+\n+```sql\n+CREATE STREAM pageviews\n+  (viewtime BIGINT,\n+   userid VARCHAR,\n+   pageid VARCHAR)\n+  WITH (KAFKA_TOPIC='pageviews',\n+        PARTITIONS=4,\n+        REPLICAS=3\n+        VALUE_FORMAT='DELIMITED')\n+  EMIT CHANGES;\n+```\n+\n+This will create the pageviews topics for you with the supplied partition and replica count.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9d4b3901c55df2968221d7793c492d9ae507bc1"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0MzU1Ng==", "bodyText": "Updated inline with current formatting.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372343556", "createdAt": "2020-01-29T12:03:33Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/create-a-stream.md", "diffHunk": "@@ -276,9 +305,9 @@ Your output should resemble:\n \n ```\n      Query ID               | Kafka Topic     | Query String\n-    --------------------------------------------------------------------------------------------------------------------------------------------------------\n+\n      CSAS_PAGEVIEWS_INTRO_0 | PAGEVIEWS_INTRO | CREATE STREAM pageviews_intro AS       SELECT * FROM pageviews       WHERE pageid < 'Page_20' EMIT CHANGES;\n-    --------------------------------------------------------------------------------------------------------------------------------------------------------\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0Mzk0Nw==", "bodyText": "As above, KSQL can create tables that create their own topics.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372343947", "createdAt": "2020-01-29T12:04:27Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/create-a-table.md", "diffHunk": "@@ -5,22 +5,24 @@ tagline: Create a Table from a Kafka topic\n description: Learn how to use the CREATE TABLE statement on a Kafka topic\n ---\n \n-In ksqlDB, you create tables from {{ site.aktm }} topics, and you create\n-tables of query results from other tables or streams.\n+In ksqlDB, you create tables from existing {{ site.aktm }} topics, create\n+tables that will create new {{ site.aktm }} topics, or create tables of \n+query results from other tables or streams.\n \n--   Use the CREATE TABLE statement to create a table from a Kafka topic.\n+-   Use the CREATE TABLE statement to create a table from an existing Kafka topic,\n+    or a new Kafka topic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0NDEyNw==", "bodyText": "updated inline with new format.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372344127", "createdAt": "2020-01-29T12:04:46Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/create-a-table.md", "diffHunk": "@@ -109,13 +111,16 @@ SELECT statement:\n SELECT * FROM users EMIT CHANGES;\n ```\n \n-Your output should resemble:\n+Assuming the table has content, your output should resemble:\n \n ```\n-1541439611069 | User_2 | 1498028899054 | User_2 | MALE | Region_1\n-1541439611320 | User_6 | 1505677113995 | User_6 | FEMALE | Region_7\n-1541439611396 | User_5 | 1491338621627 | User_5 | OTHER | Region_2\n-1541439611536 | User_9 | 1492621173463 | User_9 | FEMALE | Region_3\n++---------------+--------+---------------+--------+--------+----------+\n+| ROWTIME       | ROWKEY | REGISTERTIME  | USERID | GENDER | REGIONID |\n++---------------+--------+---------------+--------+--------+----------+\n+| 1541439611069 | User_2 | 1498028899054 | User_2 | MALE   | Region_1 |\n+| 1541439611320 | User_6 | 1505677113995 | User_6 | FEMALE | Region_7 |\n+| 1541439611396 | User_5 | 1491338621627 | User_5 | OTHER  | Region_2 |\n+| 1541439611536 | User_9 | 1492621173463 | User_9 | FEMALE | Region_3 |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0NDM4Mg==", "bodyText": "Added details of how to have KSQL create a new topic for a new table.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372344382", "createdAt": "2020-01-29T12:05:21Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/create-a-table.md", "diffHunk": "@@ -124,6 +129,33 @@ Press Ctrl+C to stop printing the query results.\n The table values update continuously with the most recent records,\n because the underlying `users` topic receives new messages continuously.\n \n+Create a Table backed by a new Kafka Topic\n+------------------------------------------\n+\n+Use the CREATE TABLE statement to create a table without a preexisting \n+topic by providing the PARTITIONS count, and optionally the REPLICA count,\n+in the WITH clause.\n+\n+Taking the example of the users table from above, but where the underlying\n+Kafka topic does not already exist, you can create the table by pasting\n+the following CREATE TABLE statement into the CLI:\n+\n+```sql\n+CREATE TABLE users\n+  (registertime BIGINT,\n+   userid VARCHAR,\n+   gender VARCHAR,\n+   regionid VARCHAR)\n+  WITH (KAFKA_TOPIC = 'users',\n+        VALUE_FORMAT='JSON',\n+        PARTITIONS=4,\n+        REPLICAS=3\n+        KEY = 'userid');\n+```\n+\n+This will create the users topics for you with the supplied partition and replica count.\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0NDUwNw==", "bodyText": "updated inline with current output format.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372344507", "createdAt": "2020-01-29T12:05:37Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/create-a-table.md", "diffHunk": "@@ -206,9 +238,9 @@ Your output should resemble:\n \n ```\n  Query ID            | Kafka Topic  | Query String\n-------------------------------------------------------------------------------------------------------------------------------------------------------\n+\n  CTAS_USERS_FEMALE_0 | USERS_FEMALE | CREATE TABLE users_female AS   SELECT userid, gender, regionid FROM users   WHERE gender='FEMALE' EMIT CHANGES;\n-------------------------------------------------------------------------------------------------------------------------------------------------------\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0NjM1MA==", "bodyText": "Removed viewtime from key of aggregation.\nIMHO, having viewtime in there makes it a nonsensical example.\nWithout viewtime the table being built counts the number of times a specific user visits each page within a single minute.   OK, that's a pretty wacky table, but it at least works.\nWith viewtime the table being built counts the number of times a specific user visits each page within the same millisecond and then windowed it per minute.  It's highly unlikely a user can visit the same page twice within the same millisecond, so the count will always be 1.\nHence, removed viewtime.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372346350", "createdAt": "2020-01-29T12:09:44Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/create-a-table.md", "diffHunk": "@@ -225,9 +257,9 @@ to include a function like COUNT(*) in the SELECT clause.\n \n ```sql\n CREATE TABLE pageviews_table AS\n-  SELECT viewtime, userid, pageid, COUNT(*) AS TOTAL\n+  SELECT userid, pageid, COUNT(*) AS TOTAL\n   FROM pageviews_original WINDOW TUMBLING (SIZE 1 MINUTES)\n-  GROUP BY viewtime, userid, pageid\n+  GROUP BY userid, pageid\n   EMIT CHANGES;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0Njc4Mg==", "bodyText": "Updated with:\n\ncurrent formatting\nto reflect removal of viewtime from composite key\nto reflect changes in ROWKEY and addition of WINDOWSTART and WINDOWEND.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372346782", "createdAt": "2020-01-29T12:10:42Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/create-a-table.md", "diffHunk": "@@ -250,30 +282,39 @@ SELECT * FROM pageviews_table EMIT CHANGES;\n Your output should resemble:\n \n ```\n-1557183929488 | 1557183929488|+|User_9|+|Page_39 : Window{start=1557183900000 end=-} | 1557183929488 | User_9 | Page_39 | 1\n-1557183930211 | 1557183930211|+|User_1|+|Page_79 : Window{start=1557183900000 end=-} | 1557183930211 | User_1 | Page_79 | 1\n-1557183930687 | 1557183930687|+|User_9|+|Page_34 : Window{start=1557183900000 end=-} | 1557183930687 | User_9 | Page_34 | 1\n-1557183929786 | 1557183929786|+|User_5|+|Page_12 : Window{start=1557183900000 end=-} | 1557183929786 | User_5 | Page_12 | 1\n-1557183931095 | 1557183931095|+|User_3|+|Page_43 : Window{start=1557183900000 end=-} | 1557183931095 | User_3 | Page_43 | 1\n-1557183930184 | 1557183930184|+|User_1|+|Page_29 : Window{start=1557183900000 end=-} | 1557183930184 | User_1 | Page_29 | 1\n-1557183930727 | 1557183930726|+|User_6|+|Page_93 : Window{start=1557183900000 end=-} | 1557183930726 | User_6 | Page_93 | 1\n++---------------+---------------+---------------+------------------+--------+---------+------+\n+| ROWTIME       | WINDOWSTART   | WINDOWEND     | ROWKEY           | USERID | PAGEID  | TOTAL|\n++---------------+---------------+---------------+------------------+--------+---------+------+\n+| 1557183919786 | 1557183900000 | 1557183960000 | User_5|+|Page_12 | User_5 | Page_12 | 1    |\n+| 1557183929488 | 1557183900000 | 1557183960000 | User_9|+|Page_39 | User_9 | Page_39 | 1    |\n+| 1557183930211 | 1557183900000 | 1557183960000 | User_1|+|Page_79 | User_1 | Page_79 | 1    |\n+| 1557183930687 | 1557183900000 | 1557183960000 | User_9|+|Page_34 | User_9 | Page_34 | 1    |\n+| 1557183929786 | 1557183900000 | 1557183960000 | User_5|+|Page_12 | User_5 | Page_12 | 2    |\n+| 1557183931095 | 1557183900000 | 1557183960000 | User_3|+|Page_43 | User_3 | Page_43 | 1    |\n+| 1557183930184 | 1557183900000 | 1557183960000 | User_1|+|Page_29 | User_1 | Page_29 | 1    |\n+| 1557183930727 | 1557183900000 | 1557183960000 | User_6|+|Page_93 | User_6 | Page_93 | 3    |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0Njk2Nw==", "bodyText": "This is a common question asked by users, so good to explain how/why it can happen.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372346967", "createdAt": "2020-01-29T12:11:11Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/create-a-table.md", "diffHunk": "@@ -250,30 +282,39 @@ SELECT * FROM pageviews_table EMIT CHANGES;\n Your output should resemble:\n \n ```\n-1557183929488 | 1557183929488|+|User_9|+|Page_39 : Window{start=1557183900000 end=-} | 1557183929488 | User_9 | Page_39 | 1\n-1557183930211 | 1557183930211|+|User_1|+|Page_79 : Window{start=1557183900000 end=-} | 1557183930211 | User_1 | Page_79 | 1\n-1557183930687 | 1557183930687|+|User_9|+|Page_34 : Window{start=1557183900000 end=-} | 1557183930687 | User_9 | Page_34 | 1\n-1557183929786 | 1557183929786|+|User_5|+|Page_12 : Window{start=1557183900000 end=-} | 1557183929786 | User_5 | Page_12 | 1\n-1557183931095 | 1557183931095|+|User_3|+|Page_43 : Window{start=1557183900000 end=-} | 1557183931095 | User_3 | Page_43 | 1\n-1557183930184 | 1557183930184|+|User_1|+|Page_29 : Window{start=1557183900000 end=-} | 1557183930184 | User_1 | Page_29 | 1\n-1557183930727 | 1557183930726|+|User_6|+|Page_93 : Window{start=1557183900000 end=-} | 1557183930726 | User_6 | Page_93 | 1\n++---------------+---------------+---------------+------------------+--------+---------+------+\n+| ROWTIME       | WINDOWSTART   | WINDOWEND     | ROWKEY           | USERID | PAGEID  | TOTAL|\n++---------------+---------------+---------------+------------------+--------+---------+------+\n+| 1557183919786 | 1557183900000 | 1557183960000 | User_5|+|Page_12 | User_5 | Page_12 | 1    |\n+| 1557183929488 | 1557183900000 | 1557183960000 | User_9|+|Page_39 | User_9 | Page_39 | 1    |\n+| 1557183930211 | 1557183900000 | 1557183960000 | User_1|+|Page_79 | User_1 | Page_79 | 1    |\n+| 1557183930687 | 1557183900000 | 1557183960000 | User_9|+|Page_34 | User_9 | Page_34 | 1    |\n+| 1557183929786 | 1557183900000 | 1557183960000 | User_5|+|Page_12 | User_5 | Page_12 | 2    |\n+| 1557183931095 | 1557183900000 | 1557183960000 | User_3|+|Page_43 | User_3 | Page_43 | 1    |\n+| 1557183930184 | 1557183900000 | 1557183960000 | User_1|+|Page_29 | User_1 | Page_29 | 1    |\n+| 1557183930727 | 1557183900000 | 1557183960000 | User_6|+|Page_93 | User_6 | Page_93 | 3    |\n ^CQuery terminated\n ```\n \n+!!! note\n+        It is possible for the same key to be output multiple time when emitting changes\n+        to the table. This is because each time the row in the table changes it will be emitted.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0NzA3Ng==", "bodyText": "Updated to reflect the removal of viewtime from the composite key", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372347076", "createdAt": "2020-01-29T12:11:27Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/create-a-table.md", "diffHunk": "@@ -250,30 +282,39 @@ SELECT * FROM pageviews_table EMIT CHANGES;\n Your output should resemble:\n \n ```\n-1557183929488 | 1557183929488|+|User_9|+|Page_39 : Window{start=1557183900000 end=-} | 1557183929488 | User_9 | Page_39 | 1\n-1557183930211 | 1557183930211|+|User_1|+|Page_79 : Window{start=1557183900000 end=-} | 1557183930211 | User_1 | Page_79 | 1\n-1557183930687 | 1557183930687|+|User_9|+|Page_34 : Window{start=1557183900000 end=-} | 1557183930687 | User_9 | Page_34 | 1\n-1557183929786 | 1557183929786|+|User_5|+|Page_12 : Window{start=1557183900000 end=-} | 1557183929786 | User_5 | Page_12 | 1\n-1557183931095 | 1557183931095|+|User_3|+|Page_43 : Window{start=1557183900000 end=-} | 1557183931095 | User_3 | Page_43 | 1\n-1557183930184 | 1557183930184|+|User_1|+|Page_29 : Window{start=1557183900000 end=-} | 1557183930184 | User_1 | Page_29 | 1\n-1557183930727 | 1557183930726|+|User_6|+|Page_93 : Window{start=1557183900000 end=-} | 1557183930726 | User_6 | Page_93 | 1\n++---------------+---------------+---------------+------------------+--------+---------+------+\n+| ROWTIME       | WINDOWSTART   | WINDOWEND     | ROWKEY           | USERID | PAGEID  | TOTAL|\n++---------------+---------------+---------------+------------------+--------+---------+------+\n+| 1557183919786 | 1557183900000 | 1557183960000 | User_5|+|Page_12 | User_5 | Page_12 | 1    |\n+| 1557183929488 | 1557183900000 | 1557183960000 | User_9|+|Page_39 | User_9 | Page_39 | 1    |\n+| 1557183930211 | 1557183900000 | 1557183960000 | User_1|+|Page_79 | User_1 | Page_79 | 1    |\n+| 1557183930687 | 1557183900000 | 1557183960000 | User_9|+|Page_34 | User_9 | Page_34 | 1    |\n+| 1557183929786 | 1557183900000 | 1557183960000 | User_5|+|Page_12 | User_5 | Page_12 | 2    |\n+| 1557183931095 | 1557183900000 | 1557183960000 | User_3|+|Page_43 | User_3 | Page_43 | 1    |\n+| 1557183930184 | 1557183900000 | 1557183960000 | User_1|+|Page_29 | User_1 | Page_29 | 1    |\n+| 1557183930727 | 1557183900000 | 1557183960000 | User_6|+|Page_93 | User_6 | Page_93 | 3    |\n ^CQuery terminated\n ```\n \n+!!! note\n+        It is possible for the same key to be output multiple time when emitting changes\n+        to the table. This is because each time the row in the table changes it will be emitted.\n+\n Look up the value for a specific key within the table by using a SELECT\n statement.\n \n ```sql\n-SELECT * FROM pageviews_table WHERE ROWKEY='1557183929488|+|User_9|+|Page_39';\n+SELECT * FROM pageviews_table WHERE ROWKEY='User_9|+|Page_39';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0NzU3OQ==", "bodyText": "Update to:\n\nnew formatting\nreflect removal of viewtime from composite key\n\nNote: its intentional that WINDOWEND is not included. This functionality is not there yet.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372347579", "createdAt": "2020-01-29T12:12:40Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/create-a-table.md", "diffHunk": "@@ -250,30 +282,39 @@ SELECT * FROM pageviews_table EMIT CHANGES;\n Your output should resemble:\n \n ```\n-1557183929488 | 1557183929488|+|User_9|+|Page_39 : Window{start=1557183900000 end=-} | 1557183929488 | User_9 | Page_39 | 1\n-1557183930211 | 1557183930211|+|User_1|+|Page_79 : Window{start=1557183900000 end=-} | 1557183930211 | User_1 | Page_79 | 1\n-1557183930687 | 1557183930687|+|User_9|+|Page_34 : Window{start=1557183900000 end=-} | 1557183930687 | User_9 | Page_34 | 1\n-1557183929786 | 1557183929786|+|User_5|+|Page_12 : Window{start=1557183900000 end=-} | 1557183929786 | User_5 | Page_12 | 1\n-1557183931095 | 1557183931095|+|User_3|+|Page_43 : Window{start=1557183900000 end=-} | 1557183931095 | User_3 | Page_43 | 1\n-1557183930184 | 1557183930184|+|User_1|+|Page_29 : Window{start=1557183900000 end=-} | 1557183930184 | User_1 | Page_29 | 1\n-1557183930727 | 1557183930726|+|User_6|+|Page_93 : Window{start=1557183900000 end=-} | 1557183930726 | User_6 | Page_93 | 1\n++---------------+---------------+---------------+------------------+--------+---------+------+\n+| ROWTIME       | WINDOWSTART   | WINDOWEND     | ROWKEY           | USERID | PAGEID  | TOTAL|\n++---------------+---------------+---------------+------------------+--------+---------+------+\n+| 1557183919786 | 1557183900000 | 1557183960000 | User_5|+|Page_12 | User_5 | Page_12 | 1    |\n+| 1557183929488 | 1557183900000 | 1557183960000 | User_9|+|Page_39 | User_9 | Page_39 | 1    |\n+| 1557183930211 | 1557183900000 | 1557183960000 | User_1|+|Page_79 | User_1 | Page_79 | 1    |\n+| 1557183930687 | 1557183900000 | 1557183960000 | User_9|+|Page_34 | User_9 | Page_34 | 1    |\n+| 1557183929786 | 1557183900000 | 1557183960000 | User_5|+|Page_12 | User_5 | Page_12 | 2    |\n+| 1557183931095 | 1557183900000 | 1557183960000 | User_3|+|Page_43 | User_3 | Page_43 | 1    |\n+| 1557183930184 | 1557183900000 | 1557183960000 | User_1|+|Page_29 | User_1 | Page_29 | 1    |\n+| 1557183930727 | 1557183900000 | 1557183960000 | User_6|+|Page_93 | User_6 | Page_93 | 3    |\n ^CQuery terminated\n ```\n \n+!!! note\n+        It is possible for the same key to be output multiple time when emitting changes\n+        to the table. This is because each time the row in the table changes it will be emitted.\n+\n Look up the value for a specific key within the table by using a SELECT\n statement.\n \n ```sql\n-SELECT * FROM pageviews_table WHERE ROWKEY='1557183929488|+|User_9|+|Page_39';\n+SELECT * FROM pageviews_table WHERE ROWKEY='User_9|+|Page_39';\n ```\n \n Your output should resemble:\n \n ```\n- ROWKEY STRING KEY                | WINDOWSTART BIGINT KEY | VIEWTIME BIGINT | USERID STRING | PAGEID STRING | TOTAL BIGINT\n-----------------------------------------------------------------------------------------------------------------------------\n- 1557183929488|+|User_9|+|Page_39 | 1557183900000          | 1557183929488   | User_9        | Page_39       | 1\n-----------------------------------------------------------------------------------------------------------------------------\n++-----------------+---------------+---------------+--------+---------+-------+\n+ ROWKEY           | WINDOWSTART   | ROWTIME       | USERID | PAGEID  | TOTAL |\n+------------------+---------------+---------------+--------+---------+-------+\n+ User_9|+|Page_39 | 1557183900000 | 1557183929488 | User_9 | Page_39 | 1     |\n+Query terminated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0ODA1OA==", "bodyText": "Updated to reflect changes in ROWKEY and addition of WINDOWSTART and WINDOWEND.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372348058", "createdAt": "2020-01-29T12:13:51Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/tutorials/clickstream-docker.md", "diffHunk": "@@ -305,11 +305,11 @@ SELECT * FROM EVENTS_PER_MIN EMIT CHANGES LIMIT 5;\n Your output should resemble:\n \n ```\n-1536662819576 | 24 : Window{start=1536662760000 end=-} | 24 | 12\n-1536662819685 | 4 : Window{start=1536662760000 end=-} | 4 | 19\n-1536662847582 | 4 : Window{start=1536662820000 end=-} | 4 | 75\n-1536662847586 | 24 : Window{start=1536662820000 end=-} | 24 | 101\n-1536662879959 | 29 : Window{start=1536662820000 end=-} | 29 | 2\n+1536662819576 | 1536662760000 | 1536662765000 | 24 | 24 | 12\n+1536662819685 | 1536662760000 | 1536662765000 | 4  | 4 | 19\n+1536662847582 | 1536662820000 | 1536662825000 | 4  | 4 | 75\n+1536662847586 | 1536662820000 | 1536662825000 | 24 | 24 | 101\n+1536662879959 | 1536662820000 | 1536662825000 | 29 | 29 | 2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0ODA3Ng==", "bodyText": "Updated to reflect changes in ROWKEY and addition of WINDOWSTART and WINDOWEND.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372348076", "createdAt": "2020-01-29T12:13:55Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/tutorials/clickstream-docker.md", "diffHunk": "@@ -323,11 +323,11 @@ SELECT * FROM PAGES_PER_MIN EMIT CHANGES LIMIT 5;\n Your output should resemble:\n \n ```\n-1536662784977 | 21 : Window{start=1536662725000 end=-} | 21 | 2\n-1536662789353 | 21 : Window{start=1536662730000 end=-} | 21 | 7\n-1536662793715 | 21 : Window{start=1536662735000 end=-} | 21 | 20\n-1536662799627 | 21 : Window{start=1536662740000 end=-} | 21 | 35\n-1536662804534 | 21 : Window{start=1536662745000 end=-} | 21 | 40\n+1536662784977 | 1536662725000 | 1536662730000 | 21 | 21 | 2\n+1536662789353 | 1536662730000 | 1536662735000 | 21 | 21 | 7\n+1536662793715 | 1536662735000 | 1536662740000 | 21 | 21 | 20\n+1536662799627 | 1536662740000 | 1536662745000 | 21 | 21 | 35\n+1536662804534 | 1536662745000 | 1536662750000 | 21 | 21 | 40", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0ODMzMA==", "bodyText": "Updated to reflect changes in ROWKEY and addition of WINDOWSTART and WINDOWEND.\nQQ: is this file used/needed? should this file be removed?  all the other docs for the clickstream demo are now elsewhere, as is the code. cc @JimGalasyn @rmoff", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372348330", "createdAt": "2020-01-29T12:14:34Z", "author": {"login": "big-andy-coates"}, "path": "ksql-clickstream-demo/non-docker-clickstream.md", "diffHunk": "@@ -247,11 +247,11 @@ These steps will guide you through how to setup your environment and run the cli\n     Your output should resemble:\n \n     ```bash\n-    1503585475000 | 4 : Window{start=1503585475000 end=-} | 4 | 14\n-    1503585480000 | 25 : Window{start=1503585480000 end=-} | 25 | 9\n-    1503585480000 | 16 : Window{start=1503585480000 end=-} | 16 | 6\n-    1503585475000 | 25 : Window{start=1503585475000 end=-} | 25 | 20\n-    1503585480000 | 37 : Window{start=1503585480000 end=-} | 37 | 6\n+    1503585475000 | 1503585475000 | 1503585480000 | 4 | 4 | 14\n+    1503585480000 | 1503585480000 | 1503585485000 | 25 | 25 | 9\n+    1503585480000 | 1503585480000 | 1503585485000 | 16 | 16 | 6\n+    1503585475000 | 1503585475000 | 1503585480000 | 25 | 25 | 20\n+    1503585480000 | 1503585480000 | 1503585485000 | 37 | 37 | 6", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0ODYyNA==", "bodyText": "Bit of a hack - but gets us across the finish line and will be cleaned up with structured key work.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372348624", "createdAt": "2020-01-29T12:15:15Z", "author": {"login": "big-andy-coates"}, "path": "ksql-common/src/main/java/io/confluent/ksql/schema/ksql/LogicalSchema.java", "diffHunk": "@@ -244,16 +243,27 @@ private LogicalSchema rebuild(\n         builder.add(Column.of(c.name(), c.type(), Namespace.VALUE, valueIndex++));\n       }\n \n+      if (windowedKey) {\n+        builder.add(\n+            Column.of(SchemaUtil.WINDOWSTART_NAME, SqlTypes.BIGINT, Namespace.VALUE, valueIndex++));\n+        builder.add(\n+            Column.of(SchemaUtil.WINDOWEND_NAME, SqlTypes.BIGINT, Namespace.VALUE, valueIndex++));\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0ODkwNQ==", "bodyText": "Need to do this to ensure the Analyser has access to window bounds columns.  (Again, yes, this is a bit hacky).", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372348905", "createdAt": "2020-01-29T12:15:59Z", "author": {"login": "big-andy-coates"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/Analysis.java", "diffHunk": "@@ -230,6 +230,14 @@ void addTableFunction(final FunctionCall functionCall) {\n     return tableFunctions;\n   }\n \n+  private static LogicalSchema buildStreamsSchema(final AliasedDataSource s) {\n+    // Include metadata & key columns in the value schema to match the schema the streams\n+    // topology will use.\n+    return s.getDataSource()\n+        .getSchema()\n+        .withMetaAndKeyColsInValue(s.getDataSource().getKsqlTopic().getKeyFormat().isWindowed());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0OTIwMw==", "bodyText": "We can now remove old special handling of window bounds columns for pull queries.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372349203", "createdAt": "2020-01-29T12:16:41Z", "author": {"login": "big-andy-coates"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/Analyzer.java", "diffHunk": "@@ -313,26 +313,19 @@ private void throwOnUnknownColumnReference() {\n           new ExpressionAnalyzer(analysis.getFromSourceSchemas());\n \n       for (final SelectExpression selectExpression : analysis.getSelectExpressions()) {\n-        expressionAnalyzer.analyzeExpression(selectExpression.getExpression(), false);\n+        expressionAnalyzer.analyzeExpression(selectExpression.getExpression());\n       }\n \n       analysis.getWhereExpression().ifPresent(where -> {\n-        final boolean allowWindowMetaFields = pullQuery\n-            && analysis.getFromDataSources().get(0)\n-            .getDataSource()\n-            .getKsqlTopic()\n-            .getKeyFormat()\n-            .isWindowed();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0OTM2NQ==", "bodyText": "Again, a bit hacky, but ensures window bounds columns are available.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372349365", "createdAt": "2020-01-29T12:17:09Z", "author": {"login": "big-andy-coates"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/Analyzer.java", "diffHunk": "@@ -587,13 +578,14 @@ private void visitSelectStar(final AllColumns allColumns) {\n             : \"\";\n \n         final LogicalSchema schema = source.getDataSource().getSchema();\n+        final boolean windowed = source.getDataSource().getKsqlTopic().getKeyFormat().isWindowed();\n \n         // Non-join persistent queries only require value columns on SELECT *\n         // where as joins and transient queries require all columns in the select:\n         // See https://github.com/confluentinc/ksql/issues/3731 for more info\n         final List<Column> valueColumns = persistent && !analysis.isJoin()\n             ? schema.value()\n-            : schema.columns();\n+            : schema.withMetaAndKeyColsInValue(windowed).value();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0OTQ4OA==", "bodyText": "Removal of previous hacks :)", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372349488", "createdAt": "2020-01-29T12:17:29Z", "author": {"login": "big-andy-coates"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -90,13 +82,7 @@ public Void visitQualifiedColumnReference(\n         final ColumnRef name\n     ) {\n       final Set<SourceName> sourcesWithField = sourceSchemas.sourcesWithField(sourceName, name);\n-\n       if (sourcesWithField.isEmpty()) {\n-        if (allowWindowMetaFields && name.name().equals(SchemaUtil.WINDOWSTART_NAME)) {\n-          // window start doesn't have a source as its a special hacky column\n-          return Optional.empty();\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM0OTY1MQ==", "bodyText": "Added to test something while I was messing with the examples.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372349651", "createdAt": "2020-01-29T12:17:51Z", "author": {"login": "big-andy-coates"}, "path": "ksql-functional-tests/src/test/resources/query-validation-tests/string.json", "diffHunk": "@@ -0,0 +1,38 @@\n+{\n+  \"tests\": [\n+    {\n+      \"name\": \"< operator\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (text STRING) WITH (kafka_topic='test_topic', value_format='DELIMITED');\",\n+        \"CREATE STREAM OUTPUT AS select text, text < 'b2' from INPUT;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"value\": \"a1\"},\n+        {\"topic\": \"test_topic\", \"value\": \"b1\"},\n+        {\"topic\": \"test_topic\", \"value\": \"B2\"},\n+        {\"topic\": \"test_topic\", \"value\": \"b2\"},\n+        {\"topic\": \"test_topic\", \"value\": \"b3\"},\n+        {\"topic\": \"test_topic\", \"value\": \"b10\"},\n+        {\"topic\": \"test_topic\", \"value\": \"b01\"}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"value\": \"a1,true\"},\n+        {\"topic\": \"OUTPUT\", \"value\": \"b1,true\"},\n+        {\"topic\": \"OUTPUT\", \"value\": \"B2,true\"},\n+        {\"topic\": \"OUTPUT\", \"value\": \"b2,false\"},\n+        {\"topic\": \"OUTPUT\", \"value\": \"b3,false\"},\n+        {\"topic\": \"OUTPUT\", \"value\": \"b10,true\"},\n+        {\"topic\": \"OUTPUT\", \"value\": \"b01,true\"}\n+      ],\n+      \"post\": {\n+        \"sources\": [\n+          {\n+            \"name\": \"OUTPUT\",\n+            \"type\": \"stream\",\n+            \"schema\": \"`ROWKEY` STRING KEY, `TEXT` STRING, `KSQL_COL_1` BOOLEAN\"\n+          }\n+        ]\n+      }\n+    }\n+  ]\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzQwMzAw", "url": "https://github.com/confluentinc/ksql/pull/4401#pullrequestreview-350340300", "createdAt": "2020-01-29T18:46:37Z", "commit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzg0MTkw", "url": "https://github.com/confluentinc/ksql/pull/4401#pullrequestreview-350384190", "createdAt": "2020-01-29T19:56:45Z", "commit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1Njo0NVrOFjVpbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1Njo0NVrOFjVpbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5OTE0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you later use this column name to perform a join or a repartition KSQL\n          \n          \n            \n            If you use this column name later to perform a join or a repartition, ksqlDB", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372599148", "createdAt": "2020-01-29T19:56:45Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/create-a-stream.md", "diffHunk": "@@ -102,6 +103,9 @@ The previous SQL statement makes no assumptions about the Kafka message\n key in the underlying Kafka topic. If the value of the message key in\n the topic is the same as one of the columns defined in the stream, you\n can specify the key in the WITH clause of the CREATE STREAM statement.\n+If you later use this column name to perform a join or a repartition KSQL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzg0Nzg4", "url": "https://github.com/confluentinc/ksql/pull/4401#pullrequestreview-350384788", "createdAt": "2020-01-29T19:57:46Z", "commit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1Nzo0NlrOFjVrTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1Nzo0NlrOFjVrTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjU5OTYyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Taking the example of the pageviews table from above, but where the underlying\n          \n          \n            \n            Taking the example of the `pageviews` table from above, but where the underlying", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372599628", "createdAt": "2020-01-29T19:57:46Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/create-a-stream.md", "diffHunk": "@@ -180,6 +184,31 @@ Kafka topic          : pageviews (partitions: 1, replication: 1)\n [...]\n ```\n \n+Create a Stream backed by a new Kafka Topic\n+-------------------------------------------\n+\n+Use the CREATE STREAM statement to create a stream without a preexisting \n+topic by providing the PARTITIONS count, and optionally the REPLICA count,\n+in the WITH clause.\n+\n+Taking the example of the pageviews table from above, but where the underlying", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzg1NDY0", "url": "https://github.com/confluentinc/ksql/pull/4401#pullrequestreview-350385464", "createdAt": "2020-01-29T19:58:56Z", "commit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1ODo1NlrOFjVtXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxOTo1ODo1NlrOFjVtXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwMDE1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This will create the pageviews topics for you with the supplied partition and replica count.\n          \n          \n            \n            This statement creates the `pageviews` topic with the supplied partition and replica count.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372600159", "createdAt": "2020-01-29T19:58:56Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/create-a-stream.md", "diffHunk": "@@ -180,6 +184,31 @@ Kafka topic          : pageviews (partitions: 1, replication: 1)\n [...]\n ```\n \n+Create a Stream backed by a new Kafka Topic\n+-------------------------------------------\n+\n+Use the CREATE STREAM statement to create a stream without a preexisting \n+topic by providing the PARTITIONS count, and optionally the REPLICA count,\n+in the WITH clause.\n+\n+Taking the example of the pageviews table from above, but where the underlying\n+Kafka topic does not already exist, you can create the stream by pasting\n+the following CREATE STREAM statement into the CLI:\n+\n+```sql\n+CREATE STREAM pageviews\n+  (viewtime BIGINT,\n+   userid VARCHAR,\n+   pageid VARCHAR)\n+  WITH (KAFKA_TOPIC='pageviews',\n+        PARTITIONS=4,\n+        REPLICAS=3\n+        VALUE_FORMAT='DELIMITED')\n+  EMIT CHANGES;\n+```\n+\n+This will create the pageviews topics for you with the supplied partition and replica count.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzg3NTI4", "url": "https://github.com/confluentinc/ksql/pull/4401#pullrequestreview-350387528", "createdAt": "2020-01-29T20:02:15Z", "commit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDowMjoxNVrOFjVzmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDowMjoxNVrOFjVzmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwMTc1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Taking the example of the users table from above, but where the underlying\n          \n          \n            \n            Taking the example of the `users` table from above, but where the underlying", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372601755", "createdAt": "2020-01-29T20:02:15Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/create-a-table.md", "diffHunk": "@@ -124,6 +129,33 @@ Press Ctrl+C to stop printing the query results.\n The table values update continuously with the most recent records,\n because the underlying `users` topic receives new messages continuously.\n \n+Create a Table backed by a new Kafka Topic\n+------------------------------------------\n+\n+Use the CREATE TABLE statement to create a table without a preexisting \n+topic by providing the PARTITIONS count, and optionally the REPLICA count,\n+in the WITH clause.\n+\n+Taking the example of the users table from above, but where the underlying", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzg3ODU0", "url": "https://github.com/confluentinc/ksql/pull/4401#pullrequestreview-350387854", "createdAt": "2020-01-29T20:02:48Z", "commit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDowMjo0OVrOFjV0nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDowMjo0OVrOFjV0nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwMjAxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Kafka topic does not already exist, you can create the table by pasting\n          \n          \n            \n            Kafka topic does not already exist, you can create the table by using", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372602012", "createdAt": "2020-01-29T20:02:49Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/create-a-table.md", "diffHunk": "@@ -124,6 +129,33 @@ Press Ctrl+C to stop printing the query results.\n The table values update continuously with the most recent records,\n because the underlying `users` topic receives new messages continuously.\n \n+Create a Table backed by a new Kafka Topic\n+------------------------------------------\n+\n+Use the CREATE TABLE statement to create a table without a preexisting \n+topic by providing the PARTITIONS count, and optionally the REPLICA count,\n+in the WITH clause.\n+\n+Taking the example of the users table from above, but where the underlying\n+Kafka topic does not already exist, you can create the table by pasting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzg4MDk1", "url": "https://github.com/confluentinc/ksql/pull/4401#pullrequestreview-350388095", "createdAt": "2020-01-29T20:03:14Z", "commit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDowMzoxNFrOFjV1pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDowMzoxNFrOFjV1pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwMjI3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            the following CREATE TABLE statement into the CLI:\n          \n          \n            \n            the following CREATE TABLE statement.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372602278", "createdAt": "2020-01-29T20:03:14Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/create-a-table.md", "diffHunk": "@@ -124,6 +129,33 @@ Press Ctrl+C to stop printing the query results.\n The table values update continuously with the most recent records,\n because the underlying `users` topic receives new messages continuously.\n \n+Create a Table backed by a new Kafka Topic\n+------------------------------------------\n+\n+Use the CREATE TABLE statement to create a table without a preexisting \n+topic by providing the PARTITIONS count, and optionally the REPLICA count,\n+in the WITH clause.\n+\n+Taking the example of the users table from above, but where the underlying\n+Kafka topic does not already exist, you can create the table by pasting\n+the following CREATE TABLE statement into the CLI:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzg4NTA5", "url": "https://github.com/confluentinc/ksql/pull/4401#pullrequestreview-350388509", "createdAt": "2020-01-29T20:04:02Z", "commit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDowNDowMlrOFjV3AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDowNDowMlrOFjV3AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwMjYyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This will create the users topics for you with the supplied partition and replica count.\n          \n          \n            \n            This statement creates the `users` topic with the supplied partition and replica count.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372602625", "createdAt": "2020-01-29T20:04:02Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/create-a-table.md", "diffHunk": "@@ -124,6 +129,33 @@ Press Ctrl+C to stop printing the query results.\n The table values update continuously with the most recent records,\n because the underlying `users` topic receives new messages continuously.\n \n+Create a Table backed by a new Kafka Topic\n+------------------------------------------\n+\n+Use the CREATE TABLE statement to create a table without a preexisting \n+topic by providing the PARTITIONS count, and optionally the REPLICA count,\n+in the WITH clause.\n+\n+Taking the example of the users table from above, but where the underlying\n+Kafka topic does not already exist, you can create the table by pasting\n+the following CREATE TABLE statement into the CLI:\n+\n+```sql\n+CREATE TABLE users\n+  (registertime BIGINT,\n+   userid VARCHAR,\n+   gender VARCHAR,\n+   regionid VARCHAR)\n+  WITH (KAFKA_TOPIC = 'users',\n+        VALUE_FORMAT='JSON',\n+        PARTITIONS=4,\n+        REPLICAS=3\n+        KEY = 'userid');\n+```\n+\n+This will create the users topics for you with the supplied partition and replica count.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzg5NTk0", "url": "https://github.com/confluentinc/ksql/pull/4401#pullrequestreview-350389594", "createdAt": "2020-01-29T20:05:48Z", "commit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDowNTo0OFrOFjV6UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDowNTo0OFrOFjV6UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwMzQ3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    It is possible for the same key to be output multiple time when emitting changes\n          \n          \n            \n                    It is possible for the same key to be output multiple times when emitting changes", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372603472", "createdAt": "2020-01-29T20:05:48Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/create-a-table.md", "diffHunk": "@@ -250,30 +282,39 @@ SELECT * FROM pageviews_table EMIT CHANGES;\n Your output should resemble:\n \n ```\n-1557183929488 | 1557183929488|+|User_9|+|Page_39 : Window{start=1557183900000 end=-} | 1557183929488 | User_9 | Page_39 | 1\n-1557183930211 | 1557183930211|+|User_1|+|Page_79 : Window{start=1557183900000 end=-} | 1557183930211 | User_1 | Page_79 | 1\n-1557183930687 | 1557183930687|+|User_9|+|Page_34 : Window{start=1557183900000 end=-} | 1557183930687 | User_9 | Page_34 | 1\n-1557183929786 | 1557183929786|+|User_5|+|Page_12 : Window{start=1557183900000 end=-} | 1557183929786 | User_5 | Page_12 | 1\n-1557183931095 | 1557183931095|+|User_3|+|Page_43 : Window{start=1557183900000 end=-} | 1557183931095 | User_3 | Page_43 | 1\n-1557183930184 | 1557183930184|+|User_1|+|Page_29 : Window{start=1557183900000 end=-} | 1557183930184 | User_1 | Page_29 | 1\n-1557183930727 | 1557183930726|+|User_6|+|Page_93 : Window{start=1557183900000 end=-} | 1557183930726 | User_6 | Page_93 | 1\n++---------------+---------------+---------------+------------------+--------+---------+------+\n+| ROWTIME       | WINDOWSTART   | WINDOWEND     | ROWKEY           | USERID | PAGEID  | TOTAL|\n++---------------+---------------+---------------+------------------+--------+---------+------+\n+| 1557183919786 | 1557183900000 | 1557183960000 | User_5|+|Page_12 | User_5 | Page_12 | 1    |\n+| 1557183929488 | 1557183900000 | 1557183960000 | User_9|+|Page_39 | User_9 | Page_39 | 1    |\n+| 1557183930211 | 1557183900000 | 1557183960000 | User_1|+|Page_79 | User_1 | Page_79 | 1    |\n+| 1557183930687 | 1557183900000 | 1557183960000 | User_9|+|Page_34 | User_9 | Page_34 | 1    |\n+| 1557183929786 | 1557183900000 | 1557183960000 | User_5|+|Page_12 | User_5 | Page_12 | 2    |\n+| 1557183931095 | 1557183900000 | 1557183960000 | User_3|+|Page_43 | User_3 | Page_43 | 1    |\n+| 1557183930184 | 1557183900000 | 1557183960000 | User_1|+|Page_29 | User_1 | Page_29 | 1    |\n+| 1557183930727 | 1557183900000 | 1557183960000 | User_6|+|Page_93 | User_6 | Page_93 | 3    |\n ^CQuery terminated\n ```\n \n+!!! note\n+        It is possible for the same key to be output multiple time when emitting changes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzkwMTM4", "url": "https://github.com/confluentinc/ksql/pull/4401#pullrequestreview-350390138", "createdAt": "2020-01-29T20:06:48Z", "commit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDowNjo0OFrOFjV77A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDowNjo0OFrOFjV77A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwMzg4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    to the table. This is because each time the row in the table changes it will be emitted.\n          \n          \n            \n                    to the table, because each time the row in the table changes, the key is emitted.", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372603884", "createdAt": "2020-01-29T20:06:48Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/create-a-table.md", "diffHunk": "@@ -250,30 +282,39 @@ SELECT * FROM pageviews_table EMIT CHANGES;\n Your output should resemble:\n \n ```\n-1557183929488 | 1557183929488|+|User_9|+|Page_39 : Window{start=1557183900000 end=-} | 1557183929488 | User_9 | Page_39 | 1\n-1557183930211 | 1557183930211|+|User_1|+|Page_79 : Window{start=1557183900000 end=-} | 1557183930211 | User_1 | Page_79 | 1\n-1557183930687 | 1557183930687|+|User_9|+|Page_34 : Window{start=1557183900000 end=-} | 1557183930687 | User_9 | Page_34 | 1\n-1557183929786 | 1557183929786|+|User_5|+|Page_12 : Window{start=1557183900000 end=-} | 1557183929786 | User_5 | Page_12 | 1\n-1557183931095 | 1557183931095|+|User_3|+|Page_43 : Window{start=1557183900000 end=-} | 1557183931095 | User_3 | Page_43 | 1\n-1557183930184 | 1557183930184|+|User_1|+|Page_29 : Window{start=1557183900000 end=-} | 1557183930184 | User_1 | Page_29 | 1\n-1557183930727 | 1557183930726|+|User_6|+|Page_93 : Window{start=1557183900000 end=-} | 1557183930726 | User_6 | Page_93 | 1\n++---------------+---------------+---------------+------------------+--------+---------+------+\n+| ROWTIME       | WINDOWSTART   | WINDOWEND     | ROWKEY           | USERID | PAGEID  | TOTAL|\n++---------------+---------------+---------------+------------------+--------+---------+------+\n+| 1557183919786 | 1557183900000 | 1557183960000 | User_5|+|Page_12 | User_5 | Page_12 | 1    |\n+| 1557183929488 | 1557183900000 | 1557183960000 | User_9|+|Page_39 | User_9 | Page_39 | 1    |\n+| 1557183930211 | 1557183900000 | 1557183960000 | User_1|+|Page_79 | User_1 | Page_79 | 1    |\n+| 1557183930687 | 1557183900000 | 1557183960000 | User_9|+|Page_34 | User_9 | Page_34 | 1    |\n+| 1557183929786 | 1557183900000 | 1557183960000 | User_5|+|Page_12 | User_5 | Page_12 | 2    |\n+| 1557183931095 | 1557183900000 | 1557183960000 | User_3|+|Page_43 | User_3 | Page_43 | 1    |\n+| 1557183930184 | 1557183900000 | 1557183960000 | User_1|+|Page_29 | User_1 | Page_29 | 1    |\n+| 1557183930727 | 1557183900000 | 1557183960000 | User_6|+|Page_93 | User_6 | Page_93 | 3    |\n ^CQuery terminated\n ```\n \n+!!! note\n+        It is possible for the same key to be output multiple time when emitting changes\n+        to the table. This is because each time the row in the table changes it will be emitted.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 139}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzkyNjEx", "url": "https://github.com/confluentinc/ksql/pull/4401#pullrequestreview-350392611", "createdAt": "2020-01-29T20:10:56Z", "commit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzkzNDg2", "url": "https://github.com/confluentinc/ksql/pull/4401#pullrequestreview-350393486", "createdAt": "2020-01-29T20:12:32Z", "commit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDoxMjozMlrOFjWFyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDoxMjozMlrOFjWFyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwNjQwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            knows no repartition is needed. In effect, the named column becomes an\n          \n          \n            \n            knows that no repartition is needed. In effect, the named column becomes an", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372606409", "createdAt": "2020-01-29T20:12:32Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/create-a-stream.md", "diffHunk": "@@ -102,6 +103,9 @@ The previous SQL statement makes no assumptions about the Kafka message\n key in the underlying Kafka topic. If the value of the message key in\n the topic is the same as one of the columns defined in the stream, you\n can specify the key in the WITH clause of the CREATE STREAM statement.\n+If you later use this column name to perform a join or a repartition KSQL\n+knows no repartition is needed. In effect, the named column becomes an", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMzk0NDg2", "url": "https://github.com/confluentinc/ksql/pull/4401#pullrequestreview-350394486", "createdAt": "2020-01-29T20:14:13Z", "commit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDoxNDoxM1rOFjWIrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDoxNDoxM1rOFjWIrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwNzE0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            tables that will create new {{ site.aktm }} topics, or create tables of \n          \n          \n            \n            tables that will create new {{ site.ak }} topics, or create tables of", "url": "https://github.com/confluentinc/ksql/pull/4401#discussion_r372607148", "createdAt": "2020-01-29T20:14:13Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/create-a-table.md", "diffHunk": "@@ -5,22 +5,24 @@ tagline: Create a Table from a Kafka topic\n description: Learn how to use the CREATE TABLE statement on a Kafka topic\n ---\n \n-In ksqlDB, you create tables from {{ site.aktm }} topics, and you create\n-tables of query results from other tables or streams.\n+In ksqlDB, you create tables from existing {{ site.aktm }} topics, create\n+tables that will create new {{ site.aktm }} topics, or create tables of ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e074f506840c627e543f825acffe17348b8d12ae", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/e074f506840c627e543f825acffe17348b8d12ae", "committedDate": "2020-01-29T21:35:57Z", "message": "Update docs-md/developer-guide/create-a-stream.md\n\nCo-Authored-By: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff48f49310ace5bb9d617be599b0e39d47434a5b", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/ff48f49310ace5bb9d617be599b0e39d47434a5b", "committedDate": "2020-01-29T21:36:20Z", "message": "Update docs-md/developer-guide/create-a-table.md\n\nCo-Authored-By: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4420c750867d9a542bc6ed3d6a0be29aaff479db", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/4420c750867d9a542bc6ed3d6a0be29aaff479db", "committedDate": "2020-01-29T21:36:30Z", "message": "Update docs-md/developer-guide/create-a-stream.md\n\nCo-Authored-By: Jim Galasyn <jim.galasyn@confluent.io>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 166, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}