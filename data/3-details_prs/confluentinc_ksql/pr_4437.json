{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMDI4MjQy", "number": 4437, "title": "refactor: introduce Format interface", "bodyText": "Description\nThis change looks large but it's really quite simple - most of it is just auto-renaming of things:\n\nExtract an interface Format and rename the existing enum Formats\nMove each enum into its own class (e.g. Format.AVRO is now AvroFormat)\nMove some functionality into the classes instead of using switch statements throughout the code\n\nThis sets us up toward allowing pluggable schema support and makes it easier to add new formats (e.g. protobuf, coming soon).\nReview Guide\n\nAll you really need to look at are Format, Formats, AvroFormat, JsonFormat, KafkaFormat and DelimitedFormat. The rest is basically IDE jitter.\n\nTesting done\n\nAdded some new tests\nmvn clean install\n\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-02-04T20:10:34Z", "url": "https://github.com/confluentinc/ksql/pull/4437", "merged": true, "mergeCommit": {"oid": "b324bf543698464165f6627fa37bfc35084e2495"}, "closed": true, "closedAt": "2020-02-05T17:39:48Z", "author": {"login": "agavra"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBIUcxgBqjMwMDc3NTAzNjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBZOirgBqjMwMTA4Mjc5MDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8309e29721baa09aa3ea64661143cbdf4268a32d", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/8309e29721baa09aa3ea64661143cbdf4268a32d", "committedDate": "2020-02-04T20:06:55Z", "message": "refactor: introduce Format interface"}, "afterCommit": {"oid": "5ca39a67e1c491ea5a1e46837a2020ad35f8ec50", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/5ca39a67e1c491ea5a1e46837a2020ad35f8ec50", "committedDate": "2020-02-04T21:21:18Z", "message": "refactor: introduce Format interface"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMjk2Njg0", "url": "https://github.com/confluentinc/ksql/pull/4437#pullrequestreview-353296684", "createdAt": "2020-02-04T20:59:10Z", "commit": {"oid": "8309e29721baa09aa3ea64661143cbdf4268a32d"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMDo1OToxMFrOFljP1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMToyODowN1rOFlkE4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxOTEyNw==", "bodyText": "We're adding a abstract base class just to overload toString?   Yuck! Just call name() rather than use toString().\nThis is even more true considering we're to support pluggable formats: we can't rely on other people correctly overloading toString, so we shouldn't rely on it.", "url": "https://github.com/confluentinc/ksql/pull/4437#discussion_r374919127", "createdAt": "2020-02-04T20:59:10Z", "author": {"login": "big-andy-coates"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/AbstractFormat.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.serde;\n+\n+public abstract class AbstractFormat implements Format {\n+\n+  @Override\n+  public String toString() {\n+    return name();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8309e29721baa09aa3ea64661143cbdf4268a32d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkxOTUwOQ==", "bodyText": "Document if its case sensitive?", "url": "https://github.com/confluentinc/ksql/pull/4437#discussion_r374919509", "createdAt": "2020-02-04T20:59:52Z", "author": {"login": "big-andy-coates"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/Format.java", "diffHunk": "@@ -15,69 +15,29 @@\n \n package io.confluent.ksql.serde;\n \n-import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Sets;\n import com.google.common.collect.Sets.SetView;\n-import io.confluent.ksql.serde.avro.KsqlAvroSerdeFactory;\n-import io.confluent.ksql.serde.delimited.KsqlDelimitedSerdeFactory;\n-import io.confluent.ksql.serde.json.KsqlJsonSerdeFactory;\n-import io.confluent.ksql.serde.kafka.KafkaSerdeFactory;\n-import io.confluent.ksql.util.KsqlConstants;\n import io.confluent.ksql.util.KsqlException;\n import java.util.Map;\n-import java.util.Optional;\n import java.util.Set;\n \n-public enum Format {\n-\n-  JSON(true, ImmutableSet.of(), ImmutableSet.of()) {\n-    @Override\n-    public KsqlSerdeFactory getSerdeFactory(final FormatInfo info) {\n-      return new KsqlJsonSerdeFactory();\n-    }\n-  },\n-\n-  AVRO(true, ImmutableSet.of(FormatInfo.FULL_SCHEMA_NAME), ImmutableSet.of()) {\n-    @Override\n-    public KsqlSerdeFactory getSerdeFactory(final FormatInfo info) {\n-      final String schemaFullName = info.getProperties()\n-          .getOrDefault(FormatInfo.FULL_SCHEMA_NAME, KsqlConstants.DEFAULT_AVRO_SCHEMA_FULL_NAME);\n-\n-      return new KsqlAvroSerdeFactory(schemaFullName);\n-    }\n-  },\n-\n-  DELIMITED(false, ImmutableSet.of(FormatInfo.DELIMITER), ImmutableSet.of(FormatInfo.DELIMITER)) {\n-    @Override\n-    public KsqlSerdeFactory getSerdeFactory(final FormatInfo info) {\n-      return new KsqlDelimitedSerdeFactory(\n-          Optional.ofNullable(\n-              info.getProperties().get(FormatInfo.DELIMITER)\n-          ).map(Delimiter::parse)\n-      );\n-    }\n-  },\n-\n-  KAFKA(false, ImmutableSet.of(), ImmutableSet.of()) {\n-    @Override\n-    public KsqlSerdeFactory getSerdeFactory(final FormatInfo info) {\n-      return new KafkaSerdeFactory();\n-    }\n-  };\n-\n-  private final boolean supportsUnwrapping;\n-  private final Set<String> validConfigs;\n-  private final Set<String> inheritableProperties;\n+/**\n+ * A {@code Format} is a serialization specification of a Kafka topic\n+ * in ksqlDB. The builtin formats are specified in the {@link Formats}\n+ * class.\n+ */\n+public interface Format {\n \n-  Format(\n-      final boolean supportsUnwrapping,\n-      final Set<String> validConfigs,\n-      final Set<String> inheritableProperties\n-  ) {\n-    this.supportsUnwrapping = supportsUnwrapping;\n-    this.validConfigs = validConfigs;\n-    this.inheritableProperties = inheritableProperties;\n-  }\n+  /**\n+   * The name of the {@code Format} specification. If this format supports\n+   * Confluent Schema Registry integration (either builtin or custom via the\n+   * {@code ParsedSchema} plugin support), this should match the value returned\n+   * by {@link io.confluent.kafka.schemaregistry.ParsedSchema#name}.\n+   *\n+   * @return the name of this Format\n+   * @see #supportsSchemaInference()\n+   */\n+  String name();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8309e29721baa09aa3ea64661143cbdf4268a32d"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyMTQ0MQ==", "bodyText": "Having written this code I now know that this should be the other way around, i.e. it should be supportsWrapping, which effectively means 'it supports wrapping multiple columns into fields of some anonymous outer object', e.g. like a JSON object or a Protobuf message.\nUnfortunately, I've never found the time to flip this.  But it would clean up some nasties in the code.\nIf we're making this a public API then I'd flip this first.", "url": "https://github.com/confluentinc/ksql/pull/4437#discussion_r374921441", "createdAt": "2020-02-04T21:03:57Z", "author": {"login": "big-andy-coates"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/Format.java", "diffHunk": "@@ -86,18 +46,37 @@ public KsqlSerdeFactory getSerdeFactory(final FormatInfo info) {\n    *\n    * @return whether or not this format supports unwrapping\n    */\n-  public boolean supportsUnwrapping() {\n-    return supportsUnwrapping;\n+  default boolean supportsUnwrapping() {\n+    return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8309e29721baa09aa3ea64661143cbdf4268a32d"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyMTgyNg==", "bodyText": "Can we add a @PublicApi annotation and mark this with it, (and any others you can think of, e.g. UDF family of stuff).\n(Separate PR, obvs).", "url": "https://github.com/confluentinc/ksql/pull/4437#discussion_r374921826", "createdAt": "2020-02-04T21:04:49Z", "author": {"login": "big-andy-coates"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/Format.java", "diffHunk": "@@ -15,69 +15,29 @@\n \n package io.confluent.ksql.serde;\n \n-import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Sets;\n import com.google.common.collect.Sets.SetView;\n-import io.confluent.ksql.serde.avro.KsqlAvroSerdeFactory;\n-import io.confluent.ksql.serde.delimited.KsqlDelimitedSerdeFactory;\n-import io.confluent.ksql.serde.json.KsqlJsonSerdeFactory;\n-import io.confluent.ksql.serde.kafka.KafkaSerdeFactory;\n-import io.confluent.ksql.util.KsqlConstants;\n import io.confluent.ksql.util.KsqlException;\n import java.util.Map;\n-import java.util.Optional;\n import java.util.Set;\n \n-public enum Format {\n-\n-  JSON(true, ImmutableSet.of(), ImmutableSet.of()) {\n-    @Override\n-    public KsqlSerdeFactory getSerdeFactory(final FormatInfo info) {\n-      return new KsqlJsonSerdeFactory();\n-    }\n-  },\n-\n-  AVRO(true, ImmutableSet.of(FormatInfo.FULL_SCHEMA_NAME), ImmutableSet.of()) {\n-    @Override\n-    public KsqlSerdeFactory getSerdeFactory(final FormatInfo info) {\n-      final String schemaFullName = info.getProperties()\n-          .getOrDefault(FormatInfo.FULL_SCHEMA_NAME, KsqlConstants.DEFAULT_AVRO_SCHEMA_FULL_NAME);\n-\n-      return new KsqlAvroSerdeFactory(schemaFullName);\n-    }\n-  },\n-\n-  DELIMITED(false, ImmutableSet.of(FormatInfo.DELIMITER), ImmutableSet.of(FormatInfo.DELIMITER)) {\n-    @Override\n-    public KsqlSerdeFactory getSerdeFactory(final FormatInfo info) {\n-      return new KsqlDelimitedSerdeFactory(\n-          Optional.ofNullable(\n-              info.getProperties().get(FormatInfo.DELIMITER)\n-          ).map(Delimiter::parse)\n-      );\n-    }\n-  },\n-\n-  KAFKA(false, ImmutableSet.of(), ImmutableSet.of()) {\n-    @Override\n-    public KsqlSerdeFactory getSerdeFactory(final FormatInfo info) {\n-      return new KafkaSerdeFactory();\n-    }\n-  };\n-\n-  private final boolean supportsUnwrapping;\n-  private final Set<String> validConfigs;\n-  private final Set<String> inheritableProperties;\n+/**\n+ * A {@code Format} is a serialization specification of a Kafka topic\n+ * in ksqlDB. The builtin formats are specified in the {@link Formats}\n+ * class.\n+ */\n+public interface Format {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8309e29721baa09aa3ea64661143cbdf4268a32d"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyMjAyMQ==", "bodyText": "nice :D", "url": "https://github.com/confluentinc/ksql/pull/4437#discussion_r374922021", "createdAt": "2020-02-04T21:05:16Z", "author": {"login": "big-andy-coates"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/Format.java", "diffHunk": "@@ -86,18 +46,37 @@ public KsqlSerdeFactory getSerdeFactory(final FormatInfo info) {\n    *\n    * @return whether or not this format supports unwrapping\n    */\n-  public boolean supportsUnwrapping() {\n-    return supportsUnwrapping;\n+  default boolean supportsUnwrapping() {\n+    return false;\n   }\n \n   /**\n+   * Whether or not this format can infer the schema without supplying the\n+   * table elements in the {@code CREATE} clause. If it does, it is necessary\n+   * that the {@link #name()} is identical to the name specified in the corresponding\n+   * {@link io.confluent.kafka.schemaregistry.ParsedSchema#name}\n+   *\n+   * @return {@code true} if this {@code Format} supports schema inference\n+   *         through Confluent Schema Registry.\n+   */\n+  default boolean supportsSchemaInference() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8309e29721baa09aa3ea64661143cbdf4268a32d"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyMjMxMw==", "bodyText": "default to empty set?", "url": "https://github.com/confluentinc/ksql/pull/4437#discussion_r374922313", "createdAt": "2020-02-04T21:05:48Z", "author": {"login": "big-andy-coates"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/Format.java", "diffHunk": "@@ -107,6 +86,16 @@ public void validateProperties(final Map<String, String> properties) {\n     });\n   }\n \n+  /**\n+   * If the format accepts custom properties in the WITH clause of the statement,\n+   * this method dictates which property keys are valid keys. This is used in\n+   * conjunction with {@link #validateProperties(Map)} to ensure that the format\n+   * configuration is valid.\n+   *\n+   * @return a set of valid property names\n+   */\n+  Set<String> getSupportedProperties();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8309e29721baa09aa3ea64661143cbdf4268a32d"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyMzE3MA==", "bodyText": "nit: on the javadoc\n\nSpecifies the set of \"inheritable\" properties - these properties will persist across streams and tables if a sink is created from a source of the same type and does not explicitly overwrite the property.\n\nDon't really know what 'source of the same type' means.  Do you mean the sink has the same format?", "url": "https://github.com/confluentinc/ksql/pull/4437#discussion_r374923170", "createdAt": "2020-02-04T21:07:39Z", "author": {"login": "big-andy-coates"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/Format.java", "diffHunk": "@@ -117,25 +106,18 @@ public void validateProperties(final Map<String, String> properties) {\n    * created with that stream as its source will also have the same delimiter\n    * value of {@code x}</p>\n    *\n+   * <p>The default implementation of this method assumes that all of the\n+   * supported properties are inheritable.</p>\n+   *\n    * @return the set of properties that are considered \"inheritable\"\n    */\n-  public Set<String> getInheritableProperties() {\n-    return inheritableProperties;\n+  default Set<String> getInheritableProperties() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8309e29721baa09aa3ea64661143cbdf4268a32d"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyNjIxMQ==", "bodyText": "If KsqlSerdeFactory is going to become part of our public API then we should give it some love to make it more extensible, e.g.:\n\nRather than passing config and SR clients as params, pass them via a Context object, which allows us to add more things to it later without needing to change the signature.\nConsider removing KSqlConfig from the method sigs completely, as this is specific to our serde classes. Instead, pluggable formats can implement Configurable if they need config.  (We should limit what config is passed to 3rd party formats just like we do for UDFs e.g. we shouldn't be passing all config that may contain secrets etc).\nmove the type checking version of createSerde out of the interface.", "url": "https://github.com/confluentinc/ksql/pull/4437#discussion_r374926211", "createdAt": "2020-02-04T21:14:07Z", "author": {"login": "big-andy-coates"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/Format.java", "diffHunk": "@@ -117,25 +106,18 @@ public void validateProperties(final Map<String, String> properties) {\n    * created with that stream as its source will also have the same delimiter\n    * value of {@code x}</p>\n    *\n+   * <p>The default implementation of this method assumes that all of the\n+   * supported properties are inheritable.</p>\n+   *\n    * @return the set of properties that are considered \"inheritable\"\n    */\n-  public Set<String> getInheritableProperties() {\n-    return inheritableProperties;\n+  default Set<String> getInheritableProperties() {\n+    return getSupportedProperties();\n   }\n \n   /**\n    * @param info the info containing information required for generating the factory\n    * @return a {@code KsqlSerdeFactory} that generates serdes for the given format\n    */\n-  public abstract KsqlSerdeFactory getSerdeFactory(FormatInfo info);\n-\n-  public static Format of(final FormatInfo value) {\n-    try {\n-      final Format format = valueOf(value.getFormat().toUpperCase());\n-      format.validateProperties(value.getProperties());\n-      return format;\n-    } catch (final IllegalArgumentException e) {\n-      throw new KsqlException(\"Unknown format: \" + value.getFormat());\n-    }\n-  }\n+  KsqlSerdeFactory getSerdeFactory(FormatInfo info);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8309e29721baa09aa3ea64661143cbdf4268a32d"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkyNjU1NA==", "bodyText": "I take it this will grow to be a class that knows about all formats in time?", "url": "https://github.com/confluentinc/ksql/pull/4437#discussion_r374926554", "createdAt": "2020-02-04T21:14:53Z", "author": {"login": "big-andy-coates"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/Formats.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.serde;\n+\n+import io.confluent.ksql.serde.avro.AvroFormat;\n+import io.confluent.ksql.serde.delimited.DelimitedFormat;\n+import io.confluent.ksql.serde.json.JsonFormat;\n+import io.confluent.ksql.serde.kafka.KafkaFormat;\n+import io.confluent.ksql.util.KsqlException;\n+\n+/**\n+ * A class containing the builtin supported formats in ksqlDB.\n+ */\n+public final class Formats {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8309e29721baa09aa3ea64661143cbdf4268a32d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzMjcwNw==", "bodyText": "Humm... just looked at how VALUE_AVRO_SCHEMA_FULL_NAME in the WITH clause is wired up to this. (Same for DELIMITED).\nThinking...\n\nRemember that we'll have key variants of these at some point soon.  I think what's there will work, i.e. we'll have to change CreateSourceAsProperties.getFormatProperties() to getValueFormatProperties() or something. Maybe if you plan ahead for key formats you may get a better long term design.  No biggie though.\nVALUE_AVRO_SCHEMA_FULL_NAME should urgently be renamed to VALUE_SCHEMA_FULL_NAME is we're soon to have Json or Protobuf schema names in there.\nCreateSourceAsProperties codifies the mapping from VALUE_AVRO_SCHEMA_FULL_NAME to fullSchemaName.  That works fine for our built in ones, but how would other formats expose their properties in the WITH clause?  Maybe the property names exposed by the formats should match the names used in the WITH clause, (with optional VALUE_ or KEY_ prefixes).", "url": "https://github.com/confluentinc/ksql/pull/4437#discussion_r374932707", "createdAt": "2020-02-04T21:28:07Z", "author": {"login": "big-andy-coates"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/avro/AvroFormat.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.serde.avro;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.kafka.schemaregistry.avro.AvroSchema;\n+import io.confluent.ksql.serde.AbstractFormat;\n+import io.confluent.ksql.serde.FormatInfo;\n+import io.confluent.ksql.serde.KsqlSerdeFactory;\n+import io.confluent.ksql.util.KsqlConstants;\n+import java.util.Set;\n+\n+public final class AvroFormat extends AbstractFormat {\n+\n+  public static final String FULL_SCHEMA_NAME = \"fullSchemaName\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca39a67e1c491ea5a1e46837a2020ad35f8ec50"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMzIxMDY3", "url": "https://github.com/confluentinc/ksql/pull/4437#pullrequestreview-353321067", "createdAt": "2020-02-04T21:40:33Z", "commit": {"oid": "5ca39a67e1c491ea5a1e46837a2020ad35f8ec50"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTo0MDozM1rOFlkamQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQyMTo0MDozM1rOFlkamQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDkzODI2NQ==", "bodyText": "hummm... nasty name clash... can we rename one? e.g. PlanFormats? Or make your Formats something like FormatFactory?", "url": "https://github.com/confluentinc/ksql/pull/4437#discussion_r374938265", "createdAt": "2020-02-04T21:40:33Z", "author": {"login": "big-andy-coates"}, "path": "ksql-engine/src/test/java/io/confluent/ksql/structured/SchemaKGroupedStreamTest.java", "diffHunk": "@@ -178,7 +177,7 @@ public void shouldBuildStepForWindowedAggregate() {\n             ExecutionStepFactory.streamWindowedAggregate(\n                 queryContext,\n                 schemaGroupedStream.getSourceStep(),\n-                Formats.of(expected, valueFormat, SerdeOption.none()),\n+                io.confluent.ksql.execution.plan.Formats.of(expected, valueFormat, SerdeOption.none()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca39a67e1c491ea5a1e46837a2020ad35f8ec50"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5ca39a67e1c491ea5a1e46837a2020ad35f8ec50", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/5ca39a67e1c491ea5a1e46837a2020ad35f8ec50", "committedDate": "2020-02-04T21:21:18Z", "message": "refactor: introduce Format interface"}, "afterCommit": {"oid": "4ce59863a1245487d271a9cf4ca51759c9e1557f", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/4ce59863a1245487d271a9cf4ca51759c9e1557f", "committedDate": "2020-02-04T22:50:24Z", "message": "refactor: introduce Format interface"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ce59863a1245487d271a9cf4ca51759c9e1557f", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/4ce59863a1245487d271a9cf4ca51759c9e1557f", "committedDate": "2020-02-04T22:50:24Z", "message": "refactor: introduce Format interface"}, "afterCommit": {"oid": "fb33bfc96c26d678ef35adc8336dec471cb53ace", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/fb33bfc96c26d678ef35adc8336dec471cb53ace", "committedDate": "2020-02-05T00:47:05Z", "message": "refactor: introduce Format interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f93260273f5cc21ecd831c66ce586cd3c501e43", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/5f93260273f5cc21ecd831c66ce586cd3c501e43", "committedDate": "2020-02-05T17:03:16Z", "message": "refactor: introduce Format interface"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fb33bfc96c26d678ef35adc8336dec471cb53ace", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/fb33bfc96c26d678ef35adc8336dec471cb53ace", "committedDate": "2020-02-05T00:47:05Z", "message": "refactor: introduce Format interface"}, "afterCommit": {"oid": "5f93260273f5cc21ecd831c66ce586cd3c501e43", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/5f93260273f5cc21ecd831c66ce586cd3c501e43", "committedDate": "2020-02-05T17:03:16Z", "message": "refactor: introduce Format interface"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4944, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}