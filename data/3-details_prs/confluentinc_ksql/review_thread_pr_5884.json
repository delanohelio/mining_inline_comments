{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MzczNDM1", "number": 5884, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowMTozOVrOESlojg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjo0Mjo0M1rOEUH0GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTI2NDE0OnYy", "diffSide": "RIGHT", "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/TableSuppressBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowMTozOVrOG32jbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowMTozOVrOG32jbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxODY3MQ==", "bodyText": "I think this could benefit from a comment explaining why we're adding the transformValues here", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461218671", "createdAt": "2020-07-27T23:01:39Z", "author": {"login": "agavra"}, "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/TableSuppressBuilder.java", "diffHunk": "@@ -15,17 +15,98 @@\n \n package io.confluent.ksql.execution.streams;\n \n+import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n import io.confluent.ksql.execution.plan.KTableHolder;\n-import io.confluent.ksql.util.KsqlException;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.plan.TableSuppress;\n+import io.confluent.ksql.execution.streams.transform.KsTransformer;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+import io.confluent.ksql.serde.SerdeOption;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.common.utils.Bytes;\n+import org.apache.kafka.streams.kstream.KTable;\n+import org.apache.kafka.streams.kstream.Materialized;\n+import org.apache.kafka.streams.kstream.Suppressed;\n+import org.apache.kafka.streams.state.KeyValueStore;\n+\n \n public final class TableSuppressBuilder {\n \n-  private TableSuppressBuilder() {\n+  private static final String SUPPRESS_OP_NAME = \"Suppress\";\n+\n+  public TableSuppressBuilder() {\n   }\n \n-  public static <K> KTableHolder<K> build(\n-      final KTableHolder<K> table\n+  public <K> KTableHolder<K> build(\n+      final KTableHolder<K> table,\n+      final TableSuppress<K> step,\n+      final KsqlQueryBuilder queryBuilder,\n+      final KeySerdeFactory keySerdeFactory,\n+      final MaterializedFactory materializedFactory\n   ) {\n-    throw new KsqlException(\"EMIT FINAL is not yet supported\");\n+    return build(\n+        table,\n+        step,\n+        queryBuilder,\n+        keySerdeFactory,\n+        materializedFactory,\n+        PhysicalSchema::from\n+    );\n+  }\n+\n+  @VisibleForTesting\n+  @SuppressWarnings(\"unchecked\")\n+  <K> KTableHolder<K> build(\n+      final KTableHolder<K> table,\n+      final TableSuppress<K> step,\n+      final KsqlQueryBuilder queryBuilder,\n+      final KeySerdeFactory keySerdeFactory,\n+      final MaterializedFactory materializedFactory,\n+      final BiFunction<LogicalSchema, Set<SerdeOption>, PhysicalSchema> physicalSchemaFactory\n+  ) {\n+    final PhysicalSchema physicalSchema = physicalSchemaFactory.apply(\n+        table.getSchema(),\n+        step.getInternalFormats().getOptions()\n+    );\n+    final QueryContext queryContext = QueryContext.Stacker.of(\n+        step.getProperties().getQueryContext())\n+        .push(SUPPRESS_OP_NAME).getQueryContext();\n+    final Serde<GenericRow> valueSerde = queryBuilder.buildValueSerde(\n+        step.getInternalFormats().getValueFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+    final Serde<K> keySerde = keySerdeFactory.buildKeySerde(\n+        step.getInternalFormats().getKeyFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+    final Materialized<K, GenericRow, KeyValueStore<Bytes, byte[]>> materialized =\n+        materializedFactory.create(\n+            keySerde,\n+            valueSerde,\n+            SUPPRESS_OP_NAME\n+        );\n+\n+    final KTable<K, GenericRow> suppressed = table.getTable().transformValues(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "934e79aba168460590f384ae21332f8b6529730f"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTI2Nzg1OnYy", "diffSide": "RIGHT", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/TableSuppress.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowMzoxMFrOG32llw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMDoxMzoyMlrOG33_Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxOTIyMw==", "bodyText": "is this used anywhere?", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461219223", "createdAt": "2020-07-27T23:03:10Z", "author": {"login": "agavra"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/TableSuppress.java", "diffHunk": "@@ -57,6 +63,14 @@ public RefinementInfo getRefinementInfo() {\n     return refinementInfo;\n   }\n \n+  public Formats getInternalFormats() {\n+    return internalFormats;\n+  }\n+\n+  public KsqlWindowExpression getWindowExpression() {\n+    return windowExpression;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "934e79aba168460590f384ae21332f8b6529730f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0MTMzNg==", "bodyText": "I don't see it being called anywhere explicitly but when I remove it, I fail all my suppress qtts with the same error,\njava.lang.RuntimeException: com.fasterxml.jackson.databind.exc.MismatchedInputException: Missing required creator property 'windowExpression' (index 4)", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461241336", "createdAt": "2020-07-28T00:10:55Z", "author": {"login": "nae701"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/TableSuppress.java", "diffHunk": "@@ -57,6 +63,14 @@ public RefinementInfo getRefinementInfo() {\n     return refinementInfo;\n   }\n \n+  public Formats getInternalFormats() {\n+    return internalFormats;\n+  }\n+\n+  public KsqlWindowExpression getWindowExpression() {\n+    return windowExpression;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxOTIyMw=="}, "originalCommit": {"oid": "934e79aba168460590f384ae21332f8b6529730f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0MjE1MA==", "bodyText": "you need to also remove it from the constructor and the @JsonProperty annotation", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461242150", "createdAt": "2020-07-28T00:13:22Z", "author": {"login": "agavra"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/TableSuppress.java", "diffHunk": "@@ -57,6 +63,14 @@ public RefinementInfo getRefinementInfo() {\n     return refinementInfo;\n   }\n \n+  public Formats getInternalFormats() {\n+    return internalFormats;\n+  }\n+\n+  public KsqlWindowExpression getWindowExpression() {\n+    return windowExpression;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIxOTIyMw=="}, "originalCommit": {"oid": "934e79aba168460590f384ae21332f8b6529730f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTI3NDk1OnYy", "diffSide": "RIGHT", "path": "ksqldb-streams/src/test/java/io/confluent/ksql/execution/streams/TableSuppressBuilderTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowNjowOFrOG32pvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwMDowMjowMVrOG33woA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMDI4Nw==", "bodyText": "just wondering, where did you pick this up? it's really cool - I think it's better than our standard @RunWith(MockitoJUnitRunner.class)", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461220287", "createdAt": "2020-07-27T23:06:08Z", "author": {"login": "agavra"}, "path": "ksqldb-streams/src/test/java/io/confluent/ksql/execution/streams/TableSuppressBuilderTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.execution.plan.ExecutionStep;\n+import io.confluent.ksql.execution.plan.ExecutionStepPropertiesV1;\n+import io.confluent.ksql.execution.plan.Formats;\n+import io.confluent.ksql.execution.plan.KTableHolder;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.plan.TableSuppress;\n+import io.confluent.ksql.execution.windows.KsqlWindowExpression;\n+import io.confluent.ksql.function.FunctionRegistry;\n+import io.confluent.ksql.logging.processing.ProcessingLogger;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+import io.confluent.ksql.serde.RefinementInfo;\n+import io.confluent.ksql.serde.SerdeOption;\n+import io.confluent.ksql.util.KsqlConfig;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.streams.kstream.KTable;\n+import org.apache.kafka.streams.kstream.Materialized;\n+import org.apache.kafka.streams.processor.StateStore;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+public class TableSuppressBuilderTest {\n+\n+  @Mock\n+  private KsqlQueryBuilder queryBuilder;\n+  @Mock\n+  private ExecutionStep<KTableHolder<Struct>> sourceStep;\n+  @Mock\n+  private KTable<Struct, GenericRow> sourceKTable;\n+  @Mock\n+  private KTable<Struct, GenericRow> preKTable;\n+  @Mock\n+  private KTable<Struct, GenericRow> suppressedKTable;\n+  @Mock\n+  private RefinementInfo refinementInfo;\n+  @Mock\n+  private Formats internalFormats;\n+  @Mock\n+  private KsqlWindowExpression windowExpression;\n+  @Mock\n+  private KeySerdeFactory<Struct> keySerdeFactory;\n+  @Mock\n+  private MaterializedFactory materializedFactory;\n+  @Mock\n+  private  PhysicalSchema physicalSchema;\n+  @Mock\n+  private  Serde<GenericRow> valueSerde;\n+  @Mock\n+  private  Serde<Struct> keySerde;\n+  @Mock\n+  private  Materialized<Object, GenericRow, StateStore> materialized;\n+  @Mock\n+  private KTableHolder<Struct> tableHolder;\n+  @Mock\n+  private KTableHolder<Struct> suppressedtable;\n+\n+  private final QueryContext queryContext = new QueryContext.Stacker()\n+      .push(\"bar\")\n+      .getQueryContext();\n+  private TableSuppress<Struct> tableSuppress;\n+  private BiFunction<LogicalSchema, Set<SerdeOption>, PhysicalSchema> physicalSchemaFactory;\n+  private TableSuppressBuilder builder;\n+\n+  @Rule\n+  public final MockitoRule mockitoRule = MockitoJUnit.rule();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "934e79aba168460590f384ae21332f8b6529730f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzNTk0OA==", "bodyText": "This is what TableGroupByBuilderTest uses so I just followed that, why do you think it is better than our standard @RunWith(MockitoJUnitRunner.class)?", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461235948", "createdAt": "2020-07-27T23:54:26Z", "author": {"login": "nae701"}, "path": "ksqldb-streams/src/test/java/io/confluent/ksql/execution/streams/TableSuppressBuilderTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.execution.plan.ExecutionStep;\n+import io.confluent.ksql.execution.plan.ExecutionStepPropertiesV1;\n+import io.confluent.ksql.execution.plan.Formats;\n+import io.confluent.ksql.execution.plan.KTableHolder;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.plan.TableSuppress;\n+import io.confluent.ksql.execution.windows.KsqlWindowExpression;\n+import io.confluent.ksql.function.FunctionRegistry;\n+import io.confluent.ksql.logging.processing.ProcessingLogger;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+import io.confluent.ksql.serde.RefinementInfo;\n+import io.confluent.ksql.serde.SerdeOption;\n+import io.confluent.ksql.util.KsqlConfig;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.streams.kstream.KTable;\n+import org.apache.kafka.streams.kstream.Materialized;\n+import org.apache.kafka.streams.processor.StateStore;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+public class TableSuppressBuilderTest {\n+\n+  @Mock\n+  private KsqlQueryBuilder queryBuilder;\n+  @Mock\n+  private ExecutionStep<KTableHolder<Struct>> sourceStep;\n+  @Mock\n+  private KTable<Struct, GenericRow> sourceKTable;\n+  @Mock\n+  private KTable<Struct, GenericRow> preKTable;\n+  @Mock\n+  private KTable<Struct, GenericRow> suppressedKTable;\n+  @Mock\n+  private RefinementInfo refinementInfo;\n+  @Mock\n+  private Formats internalFormats;\n+  @Mock\n+  private KsqlWindowExpression windowExpression;\n+  @Mock\n+  private KeySerdeFactory<Struct> keySerdeFactory;\n+  @Mock\n+  private MaterializedFactory materializedFactory;\n+  @Mock\n+  private  PhysicalSchema physicalSchema;\n+  @Mock\n+  private  Serde<GenericRow> valueSerde;\n+  @Mock\n+  private  Serde<Struct> keySerde;\n+  @Mock\n+  private  Materialized<Object, GenericRow, StateStore> materialized;\n+  @Mock\n+  private KTableHolder<Struct> tableHolder;\n+  @Mock\n+  private KTableHolder<Struct> suppressedtable;\n+\n+  private final QueryContext queryContext = new QueryContext.Stacker()\n+      .push(\"bar\")\n+      .getQueryContext();\n+  private TableSuppress<Struct> tableSuppress;\n+  private BiFunction<LogicalSchema, Set<SerdeOption>, PhysicalSchema> physicalSchemaFactory;\n+  private TableSuppressBuilder builder;\n+\n+  @Rule\n+  public final MockitoRule mockitoRule = MockitoJUnit.rule();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMDI4Nw=="}, "originalCommit": {"oid": "934e79aba168460590f384ae21332f8b6529730f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIzODQzMg==", "bodyText": "With @RunWith you can only have one runner, which means if you want to run it with another runner (Enclosed.class or Parameterized.class for example) you can't use mocks with the @Mock annotation. That, and it doesn't use reflection to find the class which is just always been a pet peeve of mine.", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461238432", "createdAt": "2020-07-28T00:02:01Z", "author": {"login": "agavra"}, "path": "ksqldb-streams/src/test/java/io/confluent/ksql/execution/streams/TableSuppressBuilderTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.execution.plan.ExecutionStep;\n+import io.confluent.ksql.execution.plan.ExecutionStepPropertiesV1;\n+import io.confluent.ksql.execution.plan.Formats;\n+import io.confluent.ksql.execution.plan.KTableHolder;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.plan.TableSuppress;\n+import io.confluent.ksql.execution.windows.KsqlWindowExpression;\n+import io.confluent.ksql.function.FunctionRegistry;\n+import io.confluent.ksql.logging.processing.ProcessingLogger;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+import io.confluent.ksql.serde.RefinementInfo;\n+import io.confluent.ksql.serde.SerdeOption;\n+import io.confluent.ksql.util.KsqlConfig;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.streams.kstream.KTable;\n+import org.apache.kafka.streams.kstream.Materialized;\n+import org.apache.kafka.streams.processor.StateStore;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+public class TableSuppressBuilderTest {\n+\n+  @Mock\n+  private KsqlQueryBuilder queryBuilder;\n+  @Mock\n+  private ExecutionStep<KTableHolder<Struct>> sourceStep;\n+  @Mock\n+  private KTable<Struct, GenericRow> sourceKTable;\n+  @Mock\n+  private KTable<Struct, GenericRow> preKTable;\n+  @Mock\n+  private KTable<Struct, GenericRow> suppressedKTable;\n+  @Mock\n+  private RefinementInfo refinementInfo;\n+  @Mock\n+  private Formats internalFormats;\n+  @Mock\n+  private KsqlWindowExpression windowExpression;\n+  @Mock\n+  private KeySerdeFactory<Struct> keySerdeFactory;\n+  @Mock\n+  private MaterializedFactory materializedFactory;\n+  @Mock\n+  private  PhysicalSchema physicalSchema;\n+  @Mock\n+  private  Serde<GenericRow> valueSerde;\n+  @Mock\n+  private  Serde<Struct> keySerde;\n+  @Mock\n+  private  Materialized<Object, GenericRow, StateStore> materialized;\n+  @Mock\n+  private KTableHolder<Struct> tableHolder;\n+  @Mock\n+  private KTableHolder<Struct> suppressedtable;\n+\n+  private final QueryContext queryContext = new QueryContext.Stacker()\n+      .push(\"bar\")\n+      .getQueryContext();\n+  private TableSuppress<Struct> tableSuppress;\n+  private BiFunction<LogicalSchema, Set<SerdeOption>, PhysicalSchema> physicalSchemaFactory;\n+  private TableSuppressBuilder builder;\n+\n+  @Rule\n+  public final MockitoRule mockitoRule = MockitoJUnit.rule();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMDI4Nw=="}, "originalCommit": {"oid": "934e79aba168460590f384ae21332f8b6529730f"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTMwMTI5OnYy", "diffSide": "RIGHT", "path": "ksqldb-streams/src/test/java/io/confluent/ksql/execution/streams/TableSuppressBuilderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoxODoxNVrOG325Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoxODoxNVrOG325Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDI1OA==", "bodyText": "it might be valuable to ensure that we're calling suppress with a FinalResultsSuppressionBuilder passed in. You can see usages of @Captor to see examples of how to use mockito to intercept the arguments being passed in and very that they're of the type you expect.\nThis is in contrast to other supressed instances we might be passing in in the future if we support things other than window close.", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461224258", "createdAt": "2020-07-27T23:18:15Z", "author": {"login": "agavra"}, "path": "ksqldb-streams/src/test/java/io/confluent/ksql/execution/streams/TableSuppressBuilderTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.execution.plan.ExecutionStep;\n+import io.confluent.ksql.execution.plan.ExecutionStepPropertiesV1;\n+import io.confluent.ksql.execution.plan.Formats;\n+import io.confluent.ksql.execution.plan.KTableHolder;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.plan.TableSuppress;\n+import io.confluent.ksql.execution.windows.KsqlWindowExpression;\n+import io.confluent.ksql.function.FunctionRegistry;\n+import io.confluent.ksql.logging.processing.ProcessingLogger;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+import io.confluent.ksql.serde.RefinementInfo;\n+import io.confluent.ksql.serde.SerdeOption;\n+import io.confluent.ksql.util.KsqlConfig;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.streams.kstream.KTable;\n+import org.apache.kafka.streams.kstream.Materialized;\n+import org.apache.kafka.streams.processor.StateStore;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+\n+public class TableSuppressBuilderTest {\n+\n+  @Mock\n+  private KsqlQueryBuilder queryBuilder;\n+  @Mock\n+  private ExecutionStep<KTableHolder<Struct>> sourceStep;\n+  @Mock\n+  private KTable<Struct, GenericRow> sourceKTable;\n+  @Mock\n+  private KTable<Struct, GenericRow> preKTable;\n+  @Mock\n+  private KTable<Struct, GenericRow> suppressedKTable;\n+  @Mock\n+  private RefinementInfo refinementInfo;\n+  @Mock\n+  private Formats internalFormats;\n+  @Mock\n+  private KsqlWindowExpression windowExpression;\n+  @Mock\n+  private KeySerdeFactory<Struct> keySerdeFactory;\n+  @Mock\n+  private MaterializedFactory materializedFactory;\n+  @Mock\n+  private  PhysicalSchema physicalSchema;\n+  @Mock\n+  private  Serde<GenericRow> valueSerde;\n+  @Mock\n+  private  Serde<Struct> keySerde;\n+  @Mock\n+  private  Materialized<Object, GenericRow, StateStore> materialized;\n+  @Mock\n+  private KTableHolder<Struct> tableHolder;\n+  @Mock\n+  private KTableHolder<Struct> suppressedtable;\n+\n+  private final QueryContext queryContext = new QueryContext.Stacker()\n+      .push(\"bar\")\n+      .getQueryContext();\n+  private TableSuppress<Struct> tableSuppress;\n+  private BiFunction<LogicalSchema, Set<SerdeOption>, PhysicalSchema> physicalSchemaFactory;\n+  private TableSuppressBuilder builder;\n+\n+  @Rule\n+  public final MockitoRule mockitoRule = MockitoJUnit.rule();\n+\n+  @Before\n+  @SuppressWarnings(\"unchecked\")\n+  public void init() {\n+    final ExecutionStepPropertiesV1 properties = new ExecutionStepPropertiesV1(queryContext);\n+\n+    physicalSchemaFactory = (a,b) -> physicalSchema;\n+    when(queryBuilder.buildValueSerde(any(), any(), any())).thenReturn(valueSerde);\n+    when(keySerdeFactory.buildKeySerde(any(), any(), any())).thenReturn(keySerde);\n+    when(materializedFactory.create(any(), any(), any())).thenReturn(materialized);\n+\n+    when(tableHolder.getTable()).thenReturn(sourceKTable);\n+    when(sourceKTable.transformValues(any(), any(Materialized.class))).thenReturn(preKTable);\n+    when(preKTable.suppress(any())).thenReturn(suppressedKTable);\n+    when(tableHolder.withTable(any(),any())).thenReturn(suppressedtable);\n+\n+    tableSuppress = new TableSuppress<>(properties, sourceStep, refinementInfo, internalFormats, windowExpression);\n+    builder = new TableSuppressBuilder();\n+  }\n+\n+  @Test\n+  @SuppressWarnings(\"unchecked\")\n+  public void shouldSuppressSourceTable() {\n+    // When:\n+    final KTableHolder<Struct> result = builder.build(tableHolder, tableSuppress, queryBuilder, keySerdeFactory, materializedFactory, physicalSchemaFactory);\n+\n+    // Then:\n+    assertThat(result, is(suppressedtable));\n+    verify(sourceKTable).transformValues(any(),any(Materialized.class));\n+    verify(preKTable).suppress(any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "934e79aba168460590f384ae21332f8b6529730f"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTMwOTYwOnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoyMTo1NVrOG32-PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo1ODo1MFrOG48m4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNTUzMg==", "bodyText": "noting here in case the test doesn't come up later - what happens if we suppress with a tombstone? (e.g. the value coming in is entirely null, not a null column within the value)", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461225532", "createdAt": "2020-07-27T23:21:55Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "diffHunk": "@@ -15,10 +92,222 @@\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0}\n       ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should handle null values\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "934e79aba168460590f384ae21332f8b6529730f"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NDYzNw==", "bodyText": "The FinalResultsSuppressionBuilder defaults to dropping tombstones, I will add a test to double check this", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461784637", "createdAt": "2020-07-28T18:25:51Z", "author": {"login": "nae701"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "diffHunk": "@@ -15,10 +92,222 @@\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0}\n       ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should handle null values\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNTUzMg=="}, "originalCommit": {"oid": "934e79aba168460590f384ae21332f8b6529730f"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc5OTc5Mg==", "bodyText": "@vvcephei Almog said that tombstones happen only on source tables, and since we are only suppressing on windowed streams, we don't have to worry about handling tombstones? What do you think", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461799792", "createdAt": "2020-07-28T18:52:41Z", "author": {"login": "nae701"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "diffHunk": "@@ -15,10 +92,222 @@\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0}\n       ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should handle null values\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNTUzMg=="}, "originalCommit": {"oid": "934e79aba168460590f384ae21332f8b6529730f"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MTQyNg==", "bodyText": "Hey @nae701 and @agavra , a \"tombstone\" in this case means that the result of the windowed aggregation is null, not that the input record's value is null. I'm not sure if any of the available aggregations in KSQL can do this. If so, you can test it; if not, you don't have to worry about it.\nFor example (taken from the docs):\nSELECT orderzip_code, TOPK(order_total, 5) FROM orders\n  WINDOW TUMBLING (SIZE 1 HOUR) GROUP BY order_zipcode\n  EMIT CHANGES;\n\nIn this case, the suppression would get a tombstone iff TOPK(order_total, 5) returns null (which I don't think it does, nor does COUNT, etc...).\nCan you plug in a UDF for the aggregation function? If so, you can make it return nulls as desired and test the tombstone case.", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461881426", "createdAt": "2020-07-28T21:10:14Z", "author": {"login": "vvcephei"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "diffHunk": "@@ -15,10 +92,222 @@\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0}\n       ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should handle null values\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNTUzMg=="}, "originalCommit": {"oid": "934e79aba168460590f384ae21332f8b6529730f"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MjI3Mw==", "bodyText": "I thought about this some more, I don't think it's possible for ksql to produce a tombstone in this case. Even if TOPK would return null, we still don't get a tombstone - we just get a null value for the column (probably KSQL_COL_2 or whatever the generated name would be in this case", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461882273", "createdAt": "2020-07-28T21:11:50Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "diffHunk": "@@ -15,10 +92,222 @@\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0}\n       ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should handle null values\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNTUzMg=="}, "originalCommit": {"oid": "934e79aba168460590f384ae21332f8b6529730f"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2NjQzNA==", "bodyText": "Oh, I see, you mean we should see an output like this?\n{\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": null},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1}\n\nIf that is defined behavior we should probably have a test for it.", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r462366434", "createdAt": "2020-07-29T14:58:50Z", "author": {"login": "vvcephei"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "diffHunk": "@@ -15,10 +92,222 @@\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0}\n       ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should handle null values\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNTUzMg=="}, "originalCommit": {"oid": "934e79aba168460590f384ae21332f8b6529730f"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTMxNTk5OnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoyNDoyOVrOG33B3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMToxMjo0N1rOG4fFVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNjQ2Mg==", "bodyText": "how do we get a count of 2 here? I might be missing something, but I only see one value that should match (or is null timestamp treated as 0?):\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461226462", "createdAt": "2020-07-27T23:24:29Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "diffHunk": "@@ -15,10 +92,222 @@\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0}\n       ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should handle null values\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(COL1) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": null},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "934e79aba168460590f384ae21332f8b6529730f"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0Mjk3MA==", "bodyText": "Yeah the null timestamp is treated as 0 for some reason", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461242970", "createdAt": "2020-07-28T00:16:11Z", "author": {"login": "nae701"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "diffHunk": "@@ -15,10 +92,222 @@\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0}\n       ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should handle null values\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(COL1) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": null},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNjQ2Mg=="}, "originalCommit": {"oid": "934e79aba168460590f384ae21332f8b6529730f"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY5Nzk2OQ==", "bodyText": "cc @vvcephei - can you confirm? though I suppose in reality you'd never have a 0 timestamp so this window would always be past the grace period and it's only a testing \"bug\"", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461697969", "createdAt": "2020-07-28T16:04:46Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "diffHunk": "@@ -15,10 +92,222 @@\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0}\n       ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should handle null values\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(COL1) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": null},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNjQ2Mg=="}, "originalCommit": {"oid": "934e79aba168460590f384ae21332f8b6529730f"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg4MjcwOA==", "bodyText": "You probably need to just take a look at the behavior of the thing that reads these test specs. Timestamp is a primitive long in Streams (and Kafka in general), so there's nothing that would automatically convert a null to 0. If anything, you might get a NullPointerException trying to cast null to long (I.e., unboxing Long) at some point.", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461882708", "createdAt": "2020-07-28T21:12:47Z", "author": {"login": "vvcephei"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "diffHunk": "@@ -15,10 +92,222 @@\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0}\n       ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should handle null values\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(COL1) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": null},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNjQ2Mg=="}, "originalCommit": {"oid": "934e79aba168460590f384ae21332f8b6529730f"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTMyMDE5OnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoyNjoyNFrOG33EPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoyNjoyNFrOG33EPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNzA3MA==", "bodyText": "what if we made the third window start at a value in the middle instead of consecutive 0 -> 2 -> 4, like 10?", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461227070", "createdAt": "2020-07-27T23:26:24Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "diffHunk": "@@ -15,10 +92,222 @@\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0}\n       ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should handle null values\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(COL1) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": null},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should drop events with no key\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\",\"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\",\"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\",\"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 0}\n+      ]\n+    },\n+    {\n+      \"name\": \"should support final results for tumbling windows\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should support final results for tumbling windows with large jump\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 2 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 3},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 4},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 30}\n+\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 3},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 4, \"end\": 6, \"type\": \"time\"},\"timestamp\": 4}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "934e79aba168460590f384ae21332f8b6529730f"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTMyNzAyOnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoyOTo1MlrOG33IXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzoyOTo1MlrOG33IXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyODEyNQ==", "bodyText": "we should test a session window that lasts longer than the session window size (e.g. 0,4,8 should all be in the same session window because the session gets extended). I'm also not sure it makes sense to have a session window with a grace period that's less than the session size so we should test a case where it's >= to the session size and in a future PR we might want to even fail if the grace period is less than the session size", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461228125", "createdAt": "2020-07-27T23:29:52Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "diffHunk": "@@ -15,10 +92,222 @@\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0}\n       ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should handle null values\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(COL1) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": null},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should drop events with no key\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\",\"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\",\"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\",\"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 0}\n+      ]\n+    },\n+    {\n+      \"name\": \"should support final results for tumbling windows\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should support final results for tumbling windows with large jump\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 2 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 3},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 4},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 30}\n+\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 3},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 4, \"end\": 6, \"type\": \"time\"},\"timestamp\": 4}\n+\n+      ]\n+    },\n+    {\n+      \"name\": \"should support final results for session windows\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW SESSION (5 MILLISECONDS, GRACE PERIOD 0 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "934e79aba168460590f384ae21332f8b6529730f"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3OTMzNTQ0OnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzozMzo1N1rOG33NYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzozMzo1N1rOG33NYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyOTQxMQ==", "bodyText": "let's also test a suppress with a filter (WHERE clause)", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461229411", "createdAt": "2020-07-27T23:33:57Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "diffHunk": "@@ -15,10 +92,222 @@\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0}\n       ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should handle null values\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(COL1) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": null},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should drop events with no key\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\",\"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\",\"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\",\"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 0}\n+      ]\n+    },\n+    {\n+      \"name\": \"should support final results for tumbling windows\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should support final results for tumbling windows with large jump\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 2 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 3},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 4},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 30}\n+\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 3},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 4, \"end\": 6, \"type\": \"time\"},\"timestamp\": 4}\n+\n+      ]\n+    },\n+    {\n+      \"name\": \"should support final results for session windows\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW SESSION (5 MILLISECONDS, GRACE PERIOD 0 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k2\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 6},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 30}\n+\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 3},\"window\": {\"start\": 0, \"end\": 5, \"type\": \"session\"},\"timestamp\": 5},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k2\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 6, \"end\": 6, \"type\": \"session\"},\"timestamp\": 6}\n+      ]\n+    },\n+    {\n+      \"name\": \"should support final results for hopping windows\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW HOPPING (SIZE 5 MILLISECONDS,ADVANCE BY 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 6},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 10}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 5, \"type\": \"time\"}, \"timestamp\": 2},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 3},\"window\": {\"start\": 2, \"end\": 7, \"type\": \"time\"},\"timestamp\": 6},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 4, \"end\": 9, \"type\": \"time\"},\"timestamp\": 6}\n+      ]\n+    },\n+    {\n+      \"name\": \"should suppress multiple keys\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k2\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k2\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k2\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2}\n+\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k2\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should suppress after join\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "934e79aba168460590f384ae21332f8b6529730f"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mzc4OTM0OnYy", "diffSide": "RIGHT", "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/TableSuppressBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjoxMzo1MlrOG4hfaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMjo0OToxN1rOG4iZ3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyMjE1NQ==", "bodyText": "It looks like this is going to pass the name to Materialized and then pass the Materialized to transformValues, right? That's probably not what you want to do, since it will cause Streams to store a full extra copy of the table right before Suppress.\nI'm guessing you just wanted to pass the key and value serdes into Suppress, in which case, you can replace this with:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final Materialized<K, GenericRow, KeyValueStore<Bytes, byte[]>> materialized =\n          \n          \n            \n                    materializedFactory.create(\n          \n          \n            \n                        keySerde,\n          \n          \n            \n                        valueSerde,\n          \n          \n            \n                        SUPPRESS_OP_NAME\n          \n          \n            \n                    );\n          \n          \n            \n                final Materialized<K, GenericRow, KeyValueStore<Bytes, byte[]>> materialized =\n          \n          \n            \n                    Materialized.with(\n          \n          \n            \n                        keySerde,\n          \n          \n            \n                        valueSerde\n          \n          \n            \n                    );\n          \n      \n    \n    \n  \n\nIt's a subtle and dangerous API, I know.", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461922155", "createdAt": "2020-07-28T22:13:52Z", "author": {"login": "vvcephei"}, "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/TableSuppressBuilder.java", "diffHunk": "@@ -15,17 +15,98 @@\n \n package io.confluent.ksql.execution.streams;\n \n+import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n import io.confluent.ksql.execution.plan.KTableHolder;\n-import io.confluent.ksql.util.KsqlException;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.plan.TableSuppress;\n+import io.confluent.ksql.execution.streams.transform.KsTransformer;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+import io.confluent.ksql.serde.SerdeOption;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.common.utils.Bytes;\n+import org.apache.kafka.streams.kstream.KTable;\n+import org.apache.kafka.streams.kstream.Materialized;\n+import org.apache.kafka.streams.kstream.Suppressed;\n+import org.apache.kafka.streams.state.KeyValueStore;\n+\n \n public final class TableSuppressBuilder {\n \n-  private TableSuppressBuilder() {\n+  private static final String SUPPRESS_OP_NAME = \"Suppress\";\n+\n+  public TableSuppressBuilder() {\n   }\n \n-  public static <K> KTableHolder<K> build(\n-      final KTableHolder<K> table\n+  public <K> KTableHolder<K> build(\n+      final KTableHolder<K> table,\n+      final TableSuppress<K> step,\n+      final KsqlQueryBuilder queryBuilder,\n+      final KeySerdeFactory keySerdeFactory,\n+      final MaterializedFactory materializedFactory\n   ) {\n-    throw new KsqlException(\"EMIT FINAL is not yet supported\");\n+    return build(\n+        table,\n+        step,\n+        queryBuilder,\n+        keySerdeFactory,\n+        materializedFactory,\n+        PhysicalSchema::from\n+    );\n+  }\n+\n+  @VisibleForTesting\n+  @SuppressWarnings(\"unchecked\")\n+  <K> KTableHolder<K> build(\n+      final KTableHolder<K> table,\n+      final TableSuppress<K> step,\n+      final KsqlQueryBuilder queryBuilder,\n+      final KeySerdeFactory keySerdeFactory,\n+      final MaterializedFactory materializedFactory,\n+      final BiFunction<LogicalSchema, Set<SerdeOption>, PhysicalSchema> physicalSchemaFactory\n+  ) {\n+    final PhysicalSchema physicalSchema = physicalSchemaFactory.apply(\n+        table.getSchema(),\n+        step.getInternalFormats().getOptions()\n+    );\n+    final QueryContext queryContext = QueryContext.Stacker.of(\n+        step.getProperties().getQueryContext())\n+        .push(SUPPRESS_OP_NAME).getQueryContext();\n+    final Serde<GenericRow> valueSerde = queryBuilder.buildValueSerde(\n+        step.getInternalFormats().getValueFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+    final Serde<K> keySerde = keySerdeFactory.buildKeySerde(\n+        step.getInternalFormats().getKeyFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+    final Materialized<K, GenericRow, KeyValueStore<Bytes, byte[]>> materialized =\n+        materializedFactory.create(\n+            keySerde,\n+            valueSerde,\n+            SUPPRESS_OP_NAME\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb818b50cea0c436f927f91d83448562f1b8fc00"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkzNzExNg==", "bodyText": "Ah great catch, thanks John!", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461937116", "createdAt": "2020-07-28T22:49:17Z", "author": {"login": "nae701"}, "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/TableSuppressBuilder.java", "diffHunk": "@@ -15,17 +15,98 @@\n \n package io.confluent.ksql.execution.streams;\n \n+import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n import io.confluent.ksql.execution.plan.KTableHolder;\n-import io.confluent.ksql.util.KsqlException;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.plan.TableSuppress;\n+import io.confluent.ksql.execution.streams.transform.KsTransformer;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+import io.confluent.ksql.serde.SerdeOption;\n+import java.util.Set;\n+import java.util.function.BiFunction;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.common.utils.Bytes;\n+import org.apache.kafka.streams.kstream.KTable;\n+import org.apache.kafka.streams.kstream.Materialized;\n+import org.apache.kafka.streams.kstream.Suppressed;\n+import org.apache.kafka.streams.state.KeyValueStore;\n+\n \n public final class TableSuppressBuilder {\n \n-  private TableSuppressBuilder() {\n+  private static final String SUPPRESS_OP_NAME = \"Suppress\";\n+\n+  public TableSuppressBuilder() {\n   }\n \n-  public static <K> KTableHolder<K> build(\n-      final KTableHolder<K> table\n+  public <K> KTableHolder<K> build(\n+      final KTableHolder<K> table,\n+      final TableSuppress<K> step,\n+      final KsqlQueryBuilder queryBuilder,\n+      final KeySerdeFactory keySerdeFactory,\n+      final MaterializedFactory materializedFactory\n   ) {\n-    throw new KsqlException(\"EMIT FINAL is not yet supported\");\n+    return build(\n+        table,\n+        step,\n+        queryBuilder,\n+        keySerdeFactory,\n+        materializedFactory,\n+        PhysicalSchema::from\n+    );\n+  }\n+\n+  @VisibleForTesting\n+  @SuppressWarnings(\"unchecked\")\n+  <K> KTableHolder<K> build(\n+      final KTableHolder<K> table,\n+      final TableSuppress<K> step,\n+      final KsqlQueryBuilder queryBuilder,\n+      final KeySerdeFactory keySerdeFactory,\n+      final MaterializedFactory materializedFactory,\n+      final BiFunction<LogicalSchema, Set<SerdeOption>, PhysicalSchema> physicalSchemaFactory\n+  ) {\n+    final PhysicalSchema physicalSchema = physicalSchemaFactory.apply(\n+        table.getSchema(),\n+        step.getInternalFormats().getOptions()\n+    );\n+    final QueryContext queryContext = QueryContext.Stacker.of(\n+        step.getProperties().getQueryContext())\n+        .push(SUPPRESS_OP_NAME).getQueryContext();\n+    final Serde<GenericRow> valueSerde = queryBuilder.buildValueSerde(\n+        step.getInternalFormats().getValueFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+    final Serde<K> keySerde = keySerdeFactory.buildKeySerde(\n+        step.getInternalFormats().getKeyFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+    final Materialized<K, GenericRow, KeyValueStore<Bytes, byte[]>> materialized =\n+        materializedFactory.create(\n+            keySerde,\n+            valueSerde,\n+            SUPPRESS_OP_NAME\n+        );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTkyMjE1NQ=="}, "originalCommit": {"oid": "eb818b50cea0c436f927f91d83448562f1b8fc00"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDI5Mzk1OnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/historical_plans/suppress_-_should_drop_events_with_no_key/6.1.0_1595888718687/spec.json", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwMjoxNDo1MVrOG4mEkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo0NzowMVrOG48EKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5NzIwMw==", "bodyText": "Feel free to disregard this comment, but it seems like it would be easier to read these specs if there were one record per line.", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r461997203", "createdAt": "2020-07-29T02:14:51Z", "author": {"login": "vvcephei"}, "path": "ksqldb-functional-tests/src/test/resources/historical_plans/suppress_-_should_drop_events_with_no_key/6.1.0_1595888718687/spec.json", "diffHunk": "@@ -0,0 +1,154 @@\n+{\n+  \"version\" : \"6.1.0\",\n+  \"timestamp\" : 1595888718687,\n+  \"path\" : \"query-validation-tests/suppress.json\",\n+  \"schemas\" : {\n+    \"CTAS_OUTPUT_0.KsqlTopic.Source\" : \"STRUCT<COL1 VARCHAR> NOT NULL\",\n+    \"CTAS_OUTPUT_0.Aggregate.GroupBy\" : \"STRUCT<ID VARCHAR, ROWTIME BIGINT> NOT NULL\",\n+    \"CTAS_OUTPUT_0.Aggregate.Aggregate.Materialize\" : \"STRUCT<ID VARCHAR, ROWTIME BIGINT, KSQL_AGG_VARIABLE_0 BIGINT> NOT NULL\",\n+    \"CTAS_OUTPUT_0.Suppress.Suppress\" : \"STRUCT<COUNT BIGINT> NOT NULL\",\n+    \"CTAS_OUTPUT_0.OUTPUT\" : \"STRUCT<COUNT BIGINT> NOT NULL\"\n+  },\n+  \"testCase\" : {\n+    \"name\" : \"should drop events with no key\",\n+    \"inputs\" : [ {\n+      \"topic\" : \"input_topic\",\n+      \"key\" : \"k1\",\n+      \"value\" : {\n+        \"COL1\" : \"v1\"\n+      },\n+      \"timestamp\" : 0\n+    }, {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "872f11ca17c3999c5d6016d2fbd5e403b5fc8682"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNDQ2Ng==", "bodyText": "I am not quite sure why these records are not all on one line, this may just be the way that the historical plans are generated ? cc @agavra . But if you want to look at better formatted tests, they should be properly formatted in ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r462014466", "createdAt": "2020-07-29T03:21:22Z", "author": {"login": "nae701"}, "path": "ksqldb-functional-tests/src/test/resources/historical_plans/suppress_-_should_drop_events_with_no_key/6.1.0_1595888718687/spec.json", "diffHunk": "@@ -0,0 +1,154 @@\n+{\n+  \"version\" : \"6.1.0\",\n+  \"timestamp\" : 1595888718687,\n+  \"path\" : \"query-validation-tests/suppress.json\",\n+  \"schemas\" : {\n+    \"CTAS_OUTPUT_0.KsqlTopic.Source\" : \"STRUCT<COL1 VARCHAR> NOT NULL\",\n+    \"CTAS_OUTPUT_0.Aggregate.GroupBy\" : \"STRUCT<ID VARCHAR, ROWTIME BIGINT> NOT NULL\",\n+    \"CTAS_OUTPUT_0.Aggregate.Aggregate.Materialize\" : \"STRUCT<ID VARCHAR, ROWTIME BIGINT, KSQL_AGG_VARIABLE_0 BIGINT> NOT NULL\",\n+    \"CTAS_OUTPUT_0.Suppress.Suppress\" : \"STRUCT<COUNT BIGINT> NOT NULL\",\n+    \"CTAS_OUTPUT_0.OUTPUT\" : \"STRUCT<COUNT BIGINT> NOT NULL\"\n+  },\n+  \"testCase\" : {\n+    \"name\" : \"should drop events with no key\",\n+    \"inputs\" : [ {\n+      \"topic\" : \"input_topic\",\n+      \"key\" : \"k1\",\n+      \"value\" : {\n+        \"COL1\" : \"v1\"\n+      },\n+      \"timestamp\" : 0\n+    }, {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5NzIwMw=="}, "originalCommit": {"oid": "872f11ca17c3999c5d6016d2fbd5e403b5fc8682"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjAxNTc4OA==", "bodyText": "okay yeah I checked other existing historical tests and they all seemed to be formatted like this, but you can still just look at the suppress.json specified above for a more user-friendly reading experience :)", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r462015788", "createdAt": "2020-07-29T03:26:28Z", "author": {"login": "nae701"}, "path": "ksqldb-functional-tests/src/test/resources/historical_plans/suppress_-_should_drop_events_with_no_key/6.1.0_1595888718687/spec.json", "diffHunk": "@@ -0,0 +1,154 @@\n+{\n+  \"version\" : \"6.1.0\",\n+  \"timestamp\" : 1595888718687,\n+  \"path\" : \"query-validation-tests/suppress.json\",\n+  \"schemas\" : {\n+    \"CTAS_OUTPUT_0.KsqlTopic.Source\" : \"STRUCT<COL1 VARCHAR> NOT NULL\",\n+    \"CTAS_OUTPUT_0.Aggregate.GroupBy\" : \"STRUCT<ID VARCHAR, ROWTIME BIGINT> NOT NULL\",\n+    \"CTAS_OUTPUT_0.Aggregate.Aggregate.Materialize\" : \"STRUCT<ID VARCHAR, ROWTIME BIGINT, KSQL_AGG_VARIABLE_0 BIGINT> NOT NULL\",\n+    \"CTAS_OUTPUT_0.Suppress.Suppress\" : \"STRUCT<COUNT BIGINT> NOT NULL\",\n+    \"CTAS_OUTPUT_0.OUTPUT\" : \"STRUCT<COUNT BIGINT> NOT NULL\"\n+  },\n+  \"testCase\" : {\n+    \"name\" : \"should drop events with no key\",\n+    \"inputs\" : [ {\n+      \"topic\" : \"input_topic\",\n+      \"key\" : \"k1\",\n+      \"value\" : {\n+        \"COL1\" : \"v1\"\n+      },\n+      \"timestamp\" : 0\n+    }, {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5NzIwMw=="}, "originalCommit": {"oid": "872f11ca17c3999c5d6016d2fbd5e403b5fc8682"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1NjU0OA==", "bodyText": "Ah, I didn't realize the tests were also specified in that file. So much easier to read!", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r462356548", "createdAt": "2020-07-29T14:45:40Z", "author": {"login": "vvcephei"}, "path": "ksqldb-functional-tests/src/test/resources/historical_plans/suppress_-_should_drop_events_with_no_key/6.1.0_1595888718687/spec.json", "diffHunk": "@@ -0,0 +1,154 @@\n+{\n+  \"version\" : \"6.1.0\",\n+  \"timestamp\" : 1595888718687,\n+  \"path\" : \"query-validation-tests/suppress.json\",\n+  \"schemas\" : {\n+    \"CTAS_OUTPUT_0.KsqlTopic.Source\" : \"STRUCT<COL1 VARCHAR> NOT NULL\",\n+    \"CTAS_OUTPUT_0.Aggregate.GroupBy\" : \"STRUCT<ID VARCHAR, ROWTIME BIGINT> NOT NULL\",\n+    \"CTAS_OUTPUT_0.Aggregate.Aggregate.Materialize\" : \"STRUCT<ID VARCHAR, ROWTIME BIGINT, KSQL_AGG_VARIABLE_0 BIGINT> NOT NULL\",\n+    \"CTAS_OUTPUT_0.Suppress.Suppress\" : \"STRUCT<COUNT BIGINT> NOT NULL\",\n+    \"CTAS_OUTPUT_0.OUTPUT\" : \"STRUCT<COUNT BIGINT> NOT NULL\"\n+  },\n+  \"testCase\" : {\n+    \"name\" : \"should drop events with no key\",\n+    \"inputs\" : [ {\n+      \"topic\" : \"input_topic\",\n+      \"key\" : \"k1\",\n+      \"value\" : {\n+        \"COL1\" : \"v1\"\n+      },\n+      \"timestamp\" : 0\n+    }, {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5NzIwMw=="}, "originalCommit": {"oid": "872f11ca17c3999c5d6016d2fbd5e403b5fc8682"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM1NzU0NA==", "bodyText": "I guess in retrospect, we should check in the generated files in exactly the format they're generated so that we get a clean diff in the future. Sorry for my confusion.", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r462357544", "createdAt": "2020-07-29T14:47:01Z", "author": {"login": "vvcephei"}, "path": "ksqldb-functional-tests/src/test/resources/historical_plans/suppress_-_should_drop_events_with_no_key/6.1.0_1595888718687/spec.json", "diffHunk": "@@ -0,0 +1,154 @@\n+{\n+  \"version\" : \"6.1.0\",\n+  \"timestamp\" : 1595888718687,\n+  \"path\" : \"query-validation-tests/suppress.json\",\n+  \"schemas\" : {\n+    \"CTAS_OUTPUT_0.KsqlTopic.Source\" : \"STRUCT<COL1 VARCHAR> NOT NULL\",\n+    \"CTAS_OUTPUT_0.Aggregate.GroupBy\" : \"STRUCT<ID VARCHAR, ROWTIME BIGINT> NOT NULL\",\n+    \"CTAS_OUTPUT_0.Aggregate.Aggregate.Materialize\" : \"STRUCT<ID VARCHAR, ROWTIME BIGINT, KSQL_AGG_VARIABLE_0 BIGINT> NOT NULL\",\n+    \"CTAS_OUTPUT_0.Suppress.Suppress\" : \"STRUCT<COUNT BIGINT> NOT NULL\",\n+    \"CTAS_OUTPUT_0.OUTPUT\" : \"STRUCT<COUNT BIGINT> NOT NULL\"\n+  },\n+  \"testCase\" : {\n+    \"name\" : \"should drop events with no key\",\n+    \"inputs\" : [ {\n+      \"topic\" : \"input_topic\",\n+      \"key\" : \"k1\",\n+      \"value\" : {\n+        \"COL1\" : \"v1\"\n+      },\n+      \"timestamp\" : 0\n+    }, {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk5NzIwMw=="}, "originalCommit": {"oid": "872f11ca17c3999c5d6016d2fbd5e403b5fc8682"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjY0ODY2OnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDo1MzoxM1rOG48WYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzoyNTo1MFrOG6QO4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2MjIxMA==", "bodyText": "I'm sorry, but I'm not seeing how this example differs from the prior one. It seems like a 2ms tumbling window with no grace period should be emitted when that last record arrives at time 2. What have I missed?", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r462362210", "createdAt": "2020-07-29T14:53:13Z", "author": {"login": "vvcephei"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "diffHunk": "@@ -1,7 +1,83 @@\n {\n   \"tests\": [\n     {\n-      \"name\": \"Should Throw on Emit Final\",\n+      \"name\": \"should emit final result immediately at window end if grace is specified as zero\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 0 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1}\n+      ]\n+    },\n+    {\n+      \"name\": \"should not emit final result before window end if grace is specified as zero\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 0 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2}\n+      ],\n+      \"outputs\": [\n+      ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6f3ae0b63b316dc22c7a81f4af4cf89f52b1104"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzczNjU0NA==", "bodyText": "This is a typo, the third input should not be there, and that's why there is no expected output. The test is passing however which confuses me, I'm taking a closer look", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r463736544", "createdAt": "2020-07-31T17:25:50Z", "author": {"login": "nae701"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "diffHunk": "@@ -1,7 +1,83 @@\n {\n   \"tests\": [\n     {\n-      \"name\": \"Should Throw on Emit Final\",\n+      \"name\": \"should emit final result immediately at window end if grace is specified as zero\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 0 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1}\n+      ]\n+    },\n+    {\n+      \"name\": \"should not emit final result before window end if grace is specified as zero\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 0 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2}\n+      ],\n+      \"outputs\": [\n+      ]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM2MjIxMA=="}, "originalCommit": {"oid": "b6f3ae0b63b316dc22c7a81f4af4cf89f52b1104"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4ODA0NzA2OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/SuppressNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMTowMTozM1rOG5KByw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMTowMTo0OFrOG5KCTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NjMxNQ==", "bodyText": "testing GitHub IntelliJ integration", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r462586315", "createdAt": "2020-07-29T21:01:33Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/SuppressNode.java", "diffHunk": "@@ -20,6 +20,7 @@\n import io.confluent.ksql.name.SourceName;\n import io.confluent.ksql.schema.ksql.LogicalSchema;\n import io.confluent.ksql.serde.RefinementInfo;\n+import io.confluent.ksql.serde.ValueFormat;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6f3ae0b63b316dc22c7a81f4af4cf89f52b1104"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NjQ0NQ==", "bodyText": "woah - sorry forthe spam", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r462586445", "createdAt": "2020-07-29T21:01:48Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/SuppressNode.java", "diffHunk": "@@ -20,6 +20,7 @@\n import io.confluent.ksql.name.SourceName;\n import io.confluent.ksql.schema.ksql.LogicalSchema;\n import io.confluent.ksql.serde.RefinementInfo;\n+import io.confluent.ksql.serde.ValueFormat;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU4NjMxNQ=="}, "originalCommit": {"oid": "b6f3ae0b63b316dc22c7a81f4af4cf89f52b1104"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTM0MDM5OnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjozOToyNFrOG6O6Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjozOToyNFrOG6O6Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcxNDkxOQ==", "bodyText": "We should probably also add an event with an explicitly null key here.", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r463714919", "createdAt": "2020-07-31T16:39:24Z", "author": {"login": "vvcephei"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "diffHunk": "@@ -15,10 +91,239 @@\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0}\n       ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should handle null values\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(COL1) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should drop events with no key\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\",\"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\",\"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\",\"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 0}\n+      ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6f3ae0b63b316dc22c7a81f4af4cf89f52b1104"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTM0MTExOnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjozOTozOVrOG6O62g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjozOTozOVrOG6O62g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcxNTAzNA==", "bodyText": "This looks out of place, given the name of this spec.", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r463715034", "createdAt": "2020-07-31T16:39:39Z", "author": {"login": "vvcephei"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "diffHunk": "@@ -15,10 +91,239 @@\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0}\n       ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should handle null values\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(COL1) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6f3ae0b63b316dc22c7a81f4af4cf89f52b1104"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTM1MDAwOnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjo0Mjo0M1rOG6PAfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzo0NzoyM1rOG7C_2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcxNjQ3OQ==", "bodyText": "What do you think about also adding a test for join after suppression? I don't know if you're allowed to join windowed streams, which may disqualify this idea.", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r463716479", "createdAt": "2020-07-31T16:42:43Z", "author": {"login": "vvcephei"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "diffHunk": "@@ -15,10 +91,239 @@\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0}\n       ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should handle null values\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(COL1) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should drop events with no key\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\",\"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\",\"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\",\"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 0}\n+      ]\n+    },\n+    {\n+      \"name\": \"should support final results for tumbling windows\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should support final results for tumbling windows with large jump\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 2 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 3},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 10},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 30}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 3},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 10, \"end\": 12, \"type\": \"time\"},\"timestamp\": 10}\n+\n+      ]\n+    },\n+    {\n+      \"name\": \"should support final results for session windows\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW SESSION (5 MILLISECONDS, GRACE PERIOD 6 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 4},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 8},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 16},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 15},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 30}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 3},\"window\": {\"start\": 0, \"end\": 8, \"type\": \"session\"},\"timestamp\": 8},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 15, \"end\": 16, \"type\": \"session\"},\"timestamp\": 16}\n+      ]\n+    },\n+    {\n+      \"name\": \"should support final results for hopping windows\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW HOPPING (SIZE 5 MILLISECONDS,ADVANCE BY 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 6},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 10}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 5, \"type\": \"time\"}, \"timestamp\": 2},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 3},\"window\": {\"start\": 2, \"end\": 7, \"type\": \"time\"},\"timestamp\": 6},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 4, \"end\": 9, \"type\": \"time\"},\"timestamp\": 6}\n+      ]\n+    },\n+    {\n+      \"name\": \"should suppress multiple keys\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k2\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k2\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k2\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2}\n+\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k2\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should suppress after join\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6f3ae0b63b316dc22c7a81f4af4cf89f52b1104"}, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzg4MTYzMw==", "bodyText": "I am not sure either but maybe @agavra knows? Though my understanding was that suppression here will return a table with windowed keys, and the only windowed joins that ksqlDB supports is that between two streams? I may be misunderstanding the joins possible here though", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r463881633", "createdAt": "2020-07-31T23:09:19Z", "author": {"login": "nae701"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "diffHunk": "@@ -15,10 +91,239 @@\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0}\n       ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should handle null values\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(COL1) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should drop events with no key\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\",\"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\",\"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\",\"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 0}\n+      ]\n+    },\n+    {\n+      \"name\": \"should support final results for tumbling windows\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should support final results for tumbling windows with large jump\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 2 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 3},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 10},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 30}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 3},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 10, \"end\": 12, \"type\": \"time\"},\"timestamp\": 10}\n+\n+      ]\n+    },\n+    {\n+      \"name\": \"should support final results for session windows\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW SESSION (5 MILLISECONDS, GRACE PERIOD 6 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 4},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 8},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 16},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 15},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 30}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 3},\"window\": {\"start\": 0, \"end\": 8, \"type\": \"session\"},\"timestamp\": 8},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 15, \"end\": 16, \"type\": \"session\"},\"timestamp\": 16}\n+      ]\n+    },\n+    {\n+      \"name\": \"should support final results for hopping windows\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW HOPPING (SIZE 5 MILLISECONDS,ADVANCE BY 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 6},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 10}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 5, \"type\": \"time\"}, \"timestamp\": 2},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 3},\"window\": {\"start\": 2, \"end\": 7, \"type\": \"time\"},\"timestamp\": 6},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 4, \"end\": 9, \"type\": \"time\"},\"timestamp\": 6}\n+      ]\n+    },\n+    {\n+      \"name\": \"should suppress multiple keys\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k2\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k2\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k2\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2}\n+\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k2\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should suppress after join\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcxNjQ3OQ=="}, "originalCommit": {"oid": "b6f3ae0b63b316dc22c7a81f4af4cf89f52b1104"}, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU2ODI4MA==", "bodyText": "I don't think we allow windowed sources to any operation at the moment, so probably no need to test that here", "url": "https://github.com/confluentinc/ksql/pull/5884#discussion_r464568280", "createdAt": "2020-08-03T17:47:23Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/suppress.json", "diffHunk": "@@ -15,10 +91,239 @@\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n         {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0}\n       ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should handle null values\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(COL1) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": null},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should drop events with no key\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\",\"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\",\"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\",\"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 0}\n+      ]\n+    },\n+    {\n+      \"name\": \"should support final results for tumbling windows\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should support final results for tumbling windows with large jump\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 2 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 3},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 10},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 30}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 3},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 10, \"end\": 12, \"type\": \"time\"},\"timestamp\": 10}\n+\n+      ]\n+    },\n+    {\n+      \"name\": \"should support final results for session windows\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW SESSION (5 MILLISECONDS, GRACE PERIOD 6 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 4},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 8},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 16},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 15},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 30}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 3},\"window\": {\"start\": 0, \"end\": 8, \"type\": \"session\"},\"timestamp\": 8},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 15, \"end\": 16, \"type\": \"session\"},\"timestamp\": 16}\n+      ]\n+    },\n+    {\n+      \"name\": \"should support final results for hopping windows\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW HOPPING (SIZE 5 MILLISECONDS,ADVANCE BY 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 6},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 10}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 4},\"window\": {\"start\": 0, \"end\": 5, \"type\": \"time\"}, \"timestamp\": 2},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 3},\"window\": {\"start\": 2, \"end\": 7, \"type\": \"time\"},\"timestamp\": 6},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 4, \"end\": 9, \"type\": \"time\"},\"timestamp\": 6}\n+      ]\n+    },\n+    {\n+      \"name\": \"should suppress multiple keys\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID STRING KEY, COL1 STRING) WITH (kafka_topic='input_topic',value_format='JSON');\",\n+        \"CREATE TABLE OUTPUT AS SELECT ID, COUNT(*) as COUNT FROM INPUT WINDOW TUMBLING (SIZE 2 MILLISECONDS, GRACE PERIOD 1 MILLISECONDS) GROUP BY ID EMIT FINAL;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k2\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 1},\n+        {\"topic\": \"input_topic\", \"key\": \"k2\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 5},\n+        {\"topic\": \"input_topic\", \"key\": \"k1\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 0},\n+        {\"topic\": \"input_topic\", \"key\": \"k2\", \"value\": {\"COL1\": \"v1\"},\"timestamp\": 2}\n+\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k2\", \"value\": {\"COUNT\": 2},\"window\": {\"start\": 0, \"end\": 2, \"type\": \"time\"},\"timestamp\": 1},\n+        {\"topic\": \"OUTPUT\", \"key\": \"k1\", \"value\": {\"COUNT\": 1},\"window\": {\"start\": 2, \"end\": 4, \"type\": \"time\"},\"timestamp\": 2}\n+      ]\n+    },\n+    {\n+      \"name\": \"should suppress after join\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcxNjQ3OQ=="}, "originalCommit": {"oid": "b6f3ae0b63b316dc22c7a81f4af4cf89f52b1104"}, "originalPosition": 239}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2991, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}