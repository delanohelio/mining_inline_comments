{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NzQyODEy", "number": 4743, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDoxNjoxNlrODmnlDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDoxNjoxNlrODmnlDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODIwOTQzOnYy", "diffSide": "RIGHT", "path": "ksql-cli/src/main/java/io/confluent/ksql/cli/console/CommentStripper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDoxNjoxNlrOF0Iubg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMjo1OTo1M1rOF1MIRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIxMzIzMA==", "bodyText": "Taken at face value, the old code looked more cross-platform independent. Would you mind explaining the workings behind this change?", "url": "https://github.com/confluentinc/ksql/pull/4743#discussion_r390213230", "createdAt": "2020-03-10T10:16:16Z", "author": {"login": "big-andy-coates"}, "path": "ksql-cli/src/main/java/io/confluent/ksql/cli/console/CommentStripper.java", "diffHunk": "@@ -98,7 +98,7 @@ private String strip() {\n     private String trimComment(final int partStart) {\n       final String part = line.substring(partStart, pos - 1).trim();\n \n-      final int newLine = line.indexOf(System.lineSeparator(), pos + 1);\n+      final int newLine = line.indexOf(\"\\n\", pos + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5666f83311678fc95bd48a9729198e0bcccc9ca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTMxNzU3Mw==", "bodyText": "Yeah, this was the most PITA part of the whole fix, and the only place i think where i changed the code-under-test rather than the test code itself.  IIRC, after debugging deeper than anyone should ever have to into the nested and repeated calls of the various parser classes, it's the case that this code only ever gets passed the output of an invocation of a JLine parser, which has already normalized the embedded line feeds to \\n.\nNote that there's confusion in the code about the meaning of variables called \"line\" - sometimes it's \"a string of characters delimited by a newline\", as you might intuit, and sometimes \"a logical line, maybe containing embedded newlines which we sometimes want to retain and sometimes don't, delimited by the line termination character (the ; we use to indicate end-of-sql-statement)\".", "url": "https://github.com/confluentinc/ksql/pull/4743#discussion_r391317573", "createdAt": "2020-03-11T22:59:53Z", "author": {"login": "blueedgenick"}, "path": "ksql-cli/src/main/java/io/confluent/ksql/cli/console/CommentStripper.java", "diffHunk": "@@ -98,7 +98,7 @@ private String strip() {\n     private String trimComment(final int partStart) {\n       final String part = line.substring(partStart, pos - 1).trim();\n \n-      final int newLine = line.indexOf(System.lineSeparator(), pos + 1);\n+      final int newLine = line.indexOf(\"\\n\", pos + 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIxMzIzMA=="}, "originalCommit": {"oid": "f5666f83311678fc95bd48a9729198e0bcccc9ca"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2061, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}