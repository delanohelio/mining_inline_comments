{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMjk5NjUw", "number": 4889, "title": "fix: If startup hangs (esp on preconditions), shutdown server correctly", "bodyText": "Description\nOften when the server is starting up, it waits for preconditions to be met.  If the preconditions can't be met, it tries indefinitely.  If the server shuts down, the JVM will not stop due to this unending preconditions effort.\nThis change allows the preconditions to be interrupted during shutdown so that the application and JVM exit properly.\nFixes #4779\nTesting done\nmvn package\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-03-24T23:08:30Z", "url": "https://github.com/confluentinc/ksql/pull/4889", "merged": true, "mergeCommit": {"oid": "20c4b5903c13fb8435aa94e486b637074b5bb769"}, "closed": true, "closedAt": "2020-03-25T22:07:50Z", "author": {"login": "AlanConfluent"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQ7DfegH2gAyMzkzMjk5NjUwOmJjMjA5MmNkOTgzYzQ4MjU5NjJhOTRjNDM0ZDg1YjI4YWVhMmE4NmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRi1c4gFqTM4MjQwNzQ1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bc2092cd983c4825962a94c434d85b28aea2a86b", "author": {"user": {"login": "AlanConfluent", "name": "Alan Sheinberg"}}, "url": "https://github.com/confluentinc/ksql/commit/bc2092cd983c4825962a94c434d85b28aea2a86b", "committedDate": "2020-03-24T22:57:05Z", "message": "fix: If startup hangs (esp on preconditions), shutdown server correctly"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwODc5NDkw", "url": "https://github.com/confluentinc/ksql/pull/4889#pullrequestreview-380879490", "createdAt": "2020-03-25T06:14:38Z", "commit": {"oid": "bc2092cd983c4825962a94c434d85b28aea2a86b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgxODcxODU5", "url": "https://github.com/confluentinc/ksql/pull/4889#pullrequestreview-381871859", "createdAt": "2020-03-26T10:22:12Z", "commit": {"oid": "bc2092cd983c4825962a94c434d85b28aea2a86b"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDoyMjoxM1rOF8AJkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMDozNTo1NVrOF8AqQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2MTMzMA==", "bodyText": "Why are we using a checked exception here?  We don't really use checked exceptions any more. They're a PITA! Why not extend KsqlServerException?", "url": "https://github.com/confluentinc/ksql/pull/4889#discussion_r398461330", "createdAt": "2020-03-26T10:22:13Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -391,6 +404,13 @@ private KsqlFailedPrecondition(final String message) {\n     }\n   }\n \n+  static final class AbortApplicationStartException extends Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc2092cd983c4825962a94c434d85b28aea2a86b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2MzEyOQ==", "bodyText": "nit: Rather than taking a AtomicBoolean, why not take a Supplier<Boolean>?  The latter is more general and flexible, allowing method that returns a boolean to be used.\nYou can then wire this up by passing stopRetrying::get.", "url": "https://github.com/confluentinc/ksql/pull/4889#discussion_r398463129", "createdAt": "2020-03-26T10:25:09Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/RetryUtil.java", "diffHunk": "@@ -53,6 +55,7 @@ public static void retryWithBackoff(\n       final int initialWaitMs,\n       final int maxWaitMs,\n       final Runnable runnable,\n+      final AtomicBoolean stopRetrying,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc2092cd983c4825962a94c434d85b28aea2a86b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2NTY1Ng==", "bodyText": "You can do this with less code with:\nassertThrows(\n   RuntimeException.class,\n   () -> RetryUtil.retryWithBackoff(3, 1, 100, runnable, sleep, stopRetrying, Collections.emptyList())\n);", "url": "https://github.com/confluentinc/ksql/pull/4889#discussion_r398465656", "createdAt": "2020-03-26T10:29:20Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-common/src/test/java/io/confluent/ksql/util/RetryUtilTest.java", "diffHunk": "@@ -80,4 +85,27 @@ public void shouldThrowPassThroughExceptions() {\n     }\n     verify(runnable, times(1)).run();\n   }\n+\n+  @Test\n+  public void shouldRespectStopRetrying() {\n+    doThrow(new RuntimeException(\"error\")).when(runnable).run();\n+    int[] times = new int[1];\n+    doAnswer(invocationOnMock -> {\n+      // Interrupts on the 2nd sleep\n+      if (times[0]++ == 1) {\n+        stopRetrying.set(true);\n+      }\n+      return null;\n+    }).when(sleep).accept(any());\n+    try {\n+      RetryUtil.retryWithBackoff(3, 1, 100, runnable, sleep, stopRetrying, Collections.emptyList());\n+      fail(\"retry should have thrown\");\n+    } catch (final RuntimeException e) {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc2092cd983c4825962a94c434d85b28aea2a86b"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2NzEzNQ==", "bodyText": "This message seems a little confusing. It's an error, but the text sounds more like a success...  maybe\nlog.error(\"Failed to meet preconditions. Existing...\", e);", "url": "https://github.com/confluentinc/ksql/pull/4889#discussion_r398467135", "createdAt": "2020-03-26T10:31:45Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -404,17 +424,27 @@ private void checkPreconditions() {\n     }\n   }\n \n-  private void waitForPreconditions() {\n+  private void waitForPreconditions() throws AbortApplicationStartException {\n     final List<Predicate<Exception>> predicates = ImmutableList.of(\n         e -> !(e instanceof KsqlFailedPrecondition)\n     );\n-    RetryUtil.retryWithBackoff(\n-        Integer.MAX_VALUE,\n-        1000,\n-        30000,\n-        this::checkPreconditions,\n-        predicates\n-    );\n+    try {\n+      RetryUtil.retryWithBackoff(\n+          Integer.MAX_VALUE,\n+          1000,\n+          30000,\n+          this::checkPreconditions,\n+          shuttingDown,\n+          predicates\n+      );\n+    } catch (KsqlFailedPrecondition e) {\n+      log.error(\"Finished Precondition retrying\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc2092cd983c4825962a94c434d85b28aea2a86b"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2OTQwNA==", "bodyText": "If we're interrupting the start up thread, then there's a high chance we'll see interrupt exceptions being thrown. Yet I don't see anywhere that we catch this, now expected, exception.  This may lead to the exception being logged out, which isn't ideal if its expected.\nMaybe the code in startAsync need to also catch interrupted exceptions and log out the Aborting application start?", "url": "https://github.com/confluentinc/ksql/pull/4889#discussion_r398469404", "createdAt": "2020-03-26T10:35:25Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -456,6 +486,13 @@ private void initialize(final KsqlConfig configWithApplicationServer) {\n   @SuppressWarnings(\"checkstyle:NPathComplexity\")\n   @Override\n   public void triggerShutdown() {\n+    // First, make sure the server wasn't stuck in startup.  Set the shutdown flag and interrupt the\n+    // startup thread if it's been hanging.\n+    shuttingDown.set(true);\n+    if (startAsyncThread != null) {\n+      startAsyncThread.interrupt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc2092cd983c4825962a94c434d85b28aea2a86b"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2OTY5OA==", "bodyText": "If we make AbortApplicationStartException a non-checked exception we can drop all these throws...", "url": "https://github.com/confluentinc/ksql/pull/4889#discussion_r398469698", "createdAt": "2020-03-26T10:35:55Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/KsqlRestApplicationTest.java", "diffHunk": "@@ -415,7 +421,7 @@ public void shouldNotInitializeUntilPreconditionsChecked() {\n   }\n \n   @Test\n-  public void shouldConfigureRocksDBConfigSetter() {\n+  public void shouldConfigureRocksDBConfigSetter() throws AbortApplicationStartException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc2092cd983c4825962a94c434d85b28aea2a86b"}, "originalPosition": 108}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNDA3NDU3", "url": "https://github.com/confluentinc/ksql/pull/4889#pullrequestreview-382407457", "createdAt": "2020-03-26T20:51:24Z", "commit": {"oid": "bc2092cd983c4825962a94c434d85b28aea2a86b"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDo1MToyNFrOF8Z7Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMToxMToyNFrOF8apJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4MzU5OA==", "bodyText": "Sure.  Extended KsqlServerException.", "url": "https://github.com/confluentinc/ksql/pull/4889#discussion_r398883598", "createdAt": "2020-03-26T20:51:24Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -391,6 +404,13 @@ private KsqlFailedPrecondition(final String message) {\n     }\n   }\n \n+  static final class AbortApplicationStartException extends Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2MTMzMA=="}, "originalCommit": {"oid": "bc2092cd983c4825962a94c434d85b28aea2a86b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4NDU0OQ==", "bodyText": "Yeah, I agree.  Changed.", "url": "https://github.com/confluentinc/ksql/pull/4889#discussion_r398884549", "createdAt": "2020-03-26T20:53:08Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -404,17 +424,27 @@ private void checkPreconditions() {\n     }\n   }\n \n-  private void waitForPreconditions() {\n+  private void waitForPreconditions() throws AbortApplicationStartException {\n     final List<Predicate<Exception>> predicates = ImmutableList.of(\n         e -> !(e instanceof KsqlFailedPrecondition)\n     );\n-    RetryUtil.retryWithBackoff(\n-        Integer.MAX_VALUE,\n-        1000,\n-        30000,\n-        this::checkPreconditions,\n-        predicates\n-    );\n+    try {\n+      RetryUtil.retryWithBackoff(\n+          Integer.MAX_VALUE,\n+          1000,\n+          30000,\n+          this::checkPreconditions,\n+          shuttingDown,\n+          predicates\n+      );\n+    } catch (KsqlFailedPrecondition e) {\n+      log.error(\"Finished Precondition retrying\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2NzEzNQ=="}, "originalCommit": {"oid": "bc2092cd983c4825962a94c434d85b28aea2a86b"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5MDM3OA==", "bodyText": "In this particular case, it's caught in RetryUtil:\nduration -> {\n          try {\n            Thread.sleep(duration);\n          } catch (final InterruptedException e) {\n            log.debug(\"retryWithBackoff interrupted while sleeping\");\n          }\n        },\n\nI believe it would only throw this exception if someone did something that could be interrupted (like sleeping), and since it's a checked exception, they would have to catch it explicitly (or let it bubble up explicitly).  In this case, I would want them to catch it and then throw a AbortApplicationStartException which is already handled.  So I don't think catching InterruptedExceptions at the startAsync level would be required.  Is that reasonable?", "url": "https://github.com/confluentinc/ksql/pull/4889#discussion_r398890378", "createdAt": "2020-03-26T21:03:23Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -456,6 +486,13 @@ private void initialize(final KsqlConfig configWithApplicationServer) {\n   @SuppressWarnings(\"checkstyle:NPathComplexity\")\n   @Override\n   public void triggerShutdown() {\n+    // First, make sure the server wasn't stuck in startup.  Set the shutdown flag and interrupt the\n+    // startup thread if it's been hanging.\n+    shuttingDown.set(true);\n+    if (startAsyncThread != null) {\n+      startAsyncThread.interrupt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2OTQwNA=="}, "originalCommit": {"oid": "bc2092cd983c4825962a94c434d85b28aea2a86b"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5MDY0Ng==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/4889#discussion_r398890646", "createdAt": "2020-03-26T21:03:39Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/KsqlRestApplicationTest.java", "diffHunk": "@@ -415,7 +421,7 @@ public void shouldNotInitializeUntilPreconditionsChecked() {\n   }\n \n   @Test\n-  public void shouldConfigureRocksDBConfigSetter() {\n+  public void shouldConfigureRocksDBConfigSetter() throws AbortApplicationStartException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2OTY5OA=="}, "originalCommit": {"oid": "bc2092cd983c4825962a94c434d85b28aea2a86b"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5MTIyNg==", "bodyText": "Good suggestion.", "url": "https://github.com/confluentinc/ksql/pull/4889#discussion_r398891226", "createdAt": "2020-03-26T21:04:10Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/RetryUtil.java", "diffHunk": "@@ -53,6 +55,7 @@ public static void retryWithBackoff(\n       final int initialWaitMs,\n       final int maxWaitMs,\n       final Runnable runnable,\n+      final AtomicBoolean stopRetrying,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2MzEyOQ=="}, "originalCommit": {"oid": "bc2092cd983c4825962a94c434d85b28aea2a86b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg5NTM5OQ==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/4889#discussion_r398895399", "createdAt": "2020-03-26T21:11:24Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-common/src/test/java/io/confluent/ksql/util/RetryUtilTest.java", "diffHunk": "@@ -80,4 +85,27 @@ public void shouldThrowPassThroughExceptions() {\n     }\n     verify(runnable, times(1)).run();\n   }\n+\n+  @Test\n+  public void shouldRespectStopRetrying() {\n+    doThrow(new RuntimeException(\"error\")).when(runnable).run();\n+    int[] times = new int[1];\n+    doAnswer(invocationOnMock -> {\n+      // Interrupts on the 2nd sleep\n+      if (times[0]++ == 1) {\n+        stopRetrying.set(true);\n+      }\n+      return null;\n+    }).when(sleep).accept(any());\n+    try {\n+      RetryUtil.retryWithBackoff(3, 1, 100, runnable, sleep, stopRetrying, Collections.emptyList());\n+      fail(\"retry should have thrown\");\n+    } catch (final RuntimeException e) {\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODQ2NTY1Ng=="}, "originalCommit": {"oid": "bc2092cd983c4825962a94c434d85b28aea2a86b"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4921, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}