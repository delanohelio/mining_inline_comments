{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MjMwMzk5", "number": 6182, "title": "fix: fail on non-string MAP keys", "bodyText": "Description\nfixes: #6181\nFixes ksqlDB so that statements that create maps with non-string keys fail.\nCrux of the issue was in SqlTypeParser, which ignored the key type.\nAdditionally, there were many places in the code that checked for non-STRING keys, but they always were STRING keys by this point.  These checks have generally been removed in prep for supporting non-STRING keys.  It is the format that should decide if it can handle non-STRING keys or not, hence the code now fails these statements because the key/value format rejects them as unsupported. This opens the way to PROTOBUF supporting integer keys in the future: only the Protobuf Serde could should need to change. (#6177).\nMain changes:\n\nFix to SqlMap and factory method SqlTypes.map to have the map type take a key type as well as a value type.\nFix SqlTypeParser so that the parser does not ignore the key type.\nFix MapType of the ParamType family of types in the same was as SqlMap.\nFix UdfUtil to handle map keys\nFix exception types in a few places.\n\nMost of the rest is just test code change to take into account the new parameters.  Sorry, forgot to push as separate commits.\nTesting done\nUsual\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-09-10T19:09:34Z", "url": "https://github.com/confluentinc/ksql/pull/6182", "merged": true, "mergeCommit": {"oid": "9d4cc6d1800c31879321f06c905c4f9175ca175f"}, "closed": true, "closedAt": "2020-09-11T14:16:23Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHlp3JgH2gAyNDg0MjMwMzk5OjhkM2ZmNWE0MjA4OTIzOGMzNjI5MzkwMWE5NjIzZjExYWYwMTdkMTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdH0qwOAH2gAyNDg0MjMwMzk5OjU3ZmNjZDRmNzNmNmI0NTM4YjQxMjdhNWE4NmY0MjFhNWU2MzYyMzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8d3ff5a42089238c36293901a9623f11af017d12", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/8d3ff5a42089238c36293901a9623f11af017d12", "committedDate": "2020-09-10T19:06:55Z", "message": "fix: fail on non-string MAP keys\n\nfixes: https://github.com/confluentinc/ksql/issues/6181\n\nFixes ksqlDB so that statements that create maps with non-string keys fail.\n\nCrux of the issue was in `SqlTypeParser`, which ignored the key type.\n\nAdditionally, there were many places in the code that checked for non-STRING keys, but they always were STRING keys by this point.  These checks have generally been removed in prep for supporting non-STRING keys.  It is the format that should decide if it can handle non-STRING keys or not, hence the code now fails these statements because the key/value format rejects them as unsupported. This opens the way to PROTOBUF supporting integer keys in the future: only the Protobuf Serde could should need to change. (https://github.com/confluentinc/ksql/issues/6177)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e169b638f2c658909e3774dc7f0bbde48a7046e", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/0e169b638f2c658909e3774dc7f0bbde48a7046e", "committedDate": "2020-09-10T19:20:22Z", "message": "chore: include SqlTypeWalker"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NDE3NjU1", "url": "https://github.com/confluentinc/ksql/pull/6182#pullrequestreview-486417655", "createdAt": "2020-09-11T01:41:11Z", "commit": {"oid": "0e169b638f2c658909e3774dc7f0bbde48a7046e"}, "state": "APPROVED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMTo0MToxMlrOHQLRMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMjowMjo1OVrOHQLovA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyMzg4OQ==", "bodyText": "This error message doesn't make sense to me. The block above throws if any key types are null, so if we reach here and keyTypes.size() is zero, that means no keys were specified, but that's not possible either since if (exp.getMap().isEmpty()) is already checked and handled at the start of the method.", "url": "https://github.com/confluentinc/ksql/pull/6182#discussion_r486723889", "createdAt": "2020-09-11T01:41:12Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/util/ExpressionTypeManager.java", "diffHunk": "@@ -401,12 +401,14 @@ public Void visitCreateMapExpression(\n           })\n           .collect(Collectors.toList());\n \n-      if (keyTypes.stream().anyMatch(type -> !SqlTypes.STRING.equals(type))) {\n-        final String types = keyTypes.stream()\n-            .map(type -> type == null ? \"NULL\" : type.toString())\n-            .collect(Collectors.joining(\", \", \"[\", \"]\"));\n+      if (keyTypes.stream().anyMatch(type -> type == null)) {\n+        throw new KsqlException(\"Map keys can not be NULL\");\n+      }\n \n-        throw new KsqlException(\"Only STRING keys are supported in maps but got: \" + types);\n+      if (keyTypes.size() == 0) {\n+        throw new KsqlException(\"Cannot construct a map with all NULL key \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e169b638f2c658909e3774dc7f0bbde48a7046e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyNDk5NA==", "bodyText": "Why are we catching KsqlStatementException and throwing a different KsqlStatementException here? Did you mean to catch KsqlException instead?", "url": "https://github.com/confluentinc/ksql/pull/6182#discussion_r486724994", "createdAt": "2020-09-11T01:45:02Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/tools/TestExecutorUtil.java", "diffHunk": "@@ -308,15 +308,20 @@ private static ExecuteResultAndSources executePlan(\n       final KsqlExecutionContext executionContext,\n       final ConfiguredKsqlPlan plan\n   ) {\n-    final ExecuteResult executeResult = executionContext.execute(\n-        executionContext.getServiceContext(),\n-        plan\n-    );\n+    try {\n+      final ExecuteResult executeResult = executionContext.execute(\n+          executionContext.getServiceContext(),\n+          plan\n+      );\n \n-    final Optional<List<DataSource>> dataSources = plan.getPlan().getQueryPlan()\n-        .map(queryPlan -> getSources(queryPlan.getSources(), executionContext.getMetaStore()));\n+      final Optional<List<DataSource>> dataSources = plan.getPlan().getQueryPlan()\n+          .map(queryPlan -> getSources(queryPlan.getSources(), executionContext.getMetaStore()));\n \n-    return new ExecuteResultAndSources(executeResult, dataSources);\n+      return new ExecuteResultAndSources(executeResult, dataSources);\n+    } catch (final KsqlStatementException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e169b638f2c658909e3774dc7f0bbde48a7046e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyNTU5Ng==", "bodyText": "How come this results in KsqlException whereas the test above results in KsqlStatementException? The inconsistency is surprising.", "url": "https://github.com/confluentinc/ksql/pull/6182#discussion_r486725596", "createdAt": "2020-09-11T01:47:08Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/avro.json", "diffHunk": "@@ -639,6 +639,27 @@\n           {\"name\": \"OUTPUT\", \"type\": \"stream\", \"schema\": \"ID INT KEY, C1 BOOLEAN, C2 INT, C3 BIGINT, C4 DOUBLE, C5 STRING\"}\n         ]\n       }\n+    },\n+    {\n+      \"name\": \"map with non-string keys fails - C*\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo MAP<INT, DOUBLE>) WITH (kafka_topic='input_topic', value_format='AVRO');\"\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n+        \"message\": \"Avro only supports MAPs with STRING keys\"\n+      }\n+    },\n+    {\n+      \"name\": \"map with non-string keys fails - C*AS\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (k INT, v DOUBLE) WITH (kafka_topic='input_topic', value_format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT MAP(k:=v) FROM INPUT;\"\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlException\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e169b638f2c658909e3774dc7f0bbde48a7046e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyNzQ0Mw==", "bodyText": "SchemaInfo doesn't currently expose the key schema for maps. Is this intended as follow-up work for when ksqlDB's use of protobuf is actually extended to support non-string keys?", "url": "https://github.com/confluentinc/ksql/pull/6182#discussion_r486727443", "createdAt": "2020-09-11T01:54:12Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/util/EntityUtilTest.java", "diffHunk": "@@ -61,7 +61,7 @@ public void shouldBuildCorrectBooleanField() {\n   public void shouldBuildCorrectMapField() {\n     // Given:\n     final LogicalSchema schema = LogicalSchema.builder()\n-        .valueColumn(ColumnName.of(\"field\"), SqlTypes.map(SqlTypes.INTEGER))\n+        .valueColumn(ColumnName.of(\"field\"), SqlTypes.map(SqlTypes.BIGINT, SqlTypes.INTEGER))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e169b638f2c658909e3774dc7f0bbde48a7046e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyODU1Mw==", "bodyText": "Why this change? Statements with non-string map keys in Avro format should've already been rejected during validation, before reaching this, right? Same question for the other serde changes below.", "url": "https://github.com/confluentinc/ksql/pull/6182#discussion_r486728553", "createdAt": "2020-09-11T01:58:02Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/avro/AvroDataTranslator.java", "diffHunk": "@@ -135,7 +136,7 @@ private static Schema throwOnInvalidSchema(final Schema schema) {\n       @Override\n       public Void visitMap(final Schema schema, final Void key, final Void value) {\n         if (schema.keySchema().type() != Type.STRING) {\n-          throw new IllegalArgumentException(\"Avro only supports MAPs with STRING keys\");\n+          throw new KsqlException(\"Avro only supports MAPs with STRING keys\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e169b638f2c658909e3774dc7f0bbde48a7046e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyOTE1Mg==", "bodyText": "This looks like it should be SqlMap.of(SqlTypes.STRING, SqlPrimitiveType.of(SqlTypes.BOOLEAN)) instead?", "url": "https://github.com/confluentinc/ksql/pull/6182#discussion_r486729152", "createdAt": "2020-09-11T02:00:11Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-udf/src/test/java/io/confluent/ksql/schema/ksql/types/SqlArrayTest.java", "diffHunk": "@@ -36,7 +36,7 @@ public void shouldImplementHashCodeAndEqualsProperly() {\n     new EqualsTester()\n         .addEqualityGroup(SqlArray.of(SOME_TYPE), SqlArray.of(SOME_TYPE))\n         .addEqualityGroup(SqlArray.of(SqlPrimitiveType.of(SqlBaseType.BOOLEAN)))\n-        .addEqualityGroup(SqlMap.of(SqlPrimitiveType.of(SqlBaseType.BOOLEAN)))\n+        .addEqualityGroup(SqlMap.of(SqlTypes.STRING, SqlTypes.BOOLEAN))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e169b638f2c658909e3774dc7f0bbde48a7046e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyOTg5OQ==", "bodyText": "Not your code but I notice that shouldLoadParameterizedListParams() (the test above this one in this file) doesn't test what it says it's testing. Wanna fix it while you're in here?", "url": "https://github.com/confluentinc/ksql/pull/6182#discussion_r486729899", "createdAt": "2020-09-11T02:02:54Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/function/UdtfLoaderTest.java", "diffHunk": "@@ -97,13 +97,13 @@ public void shouldLoadParameterizedMapParams() {\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e169b638f2c658909e3774dc7f0bbde48a7046e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyOTkwOA==", "bodyText": "Curious: why the addition of a timeout to this test file in particular? Seems unrelated to the changes in this PR?", "url": "https://github.com/confluentinc/ksql/pull/6182#discussion_r486729908", "createdAt": "2020-09-11T02:02:56Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/integration/SecureIntegrationTest.java", "diffHunk": "@@ -112,6 +114,10 @@\n       .outerRule(Retry.of(3, ZooKeeperClientException.class, 3, TimeUnit.SECONDS))\n       .around(TEST_HARNESS);\n \n+\n+  @Rule\n+  public final Timeout timeout = Timeout.seconds(30);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e169b638f2c658909e3774dc7f0bbde48a7046e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyOTkxNg==", "bodyText": "Any particular reason this is reversed?", "url": "https://github.com/confluentinc/ksql/pull/6182#discussion_r486729916", "createdAt": "2020-09-11T02:02:59Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-parser/src/test/java/io/confluent/ksql/parser/json/KsqlTypesSerdeModuleTest.java", "diffHunk": "@@ -75,19 +78,22 @@ public void shouldSerDeSqlArrayTypes() throws JsonProcessingException {\n   @Test\n   public void shouldSerDeSqlMapTypes() throws JsonProcessingException {\n     // Given:\n-    final SqlType[] types = new SqlType[]{\n+    final List<SqlType> types = ImmutableList.of(\n         SqlTypes.INTEGER,\n         SqlTypes.BIGINT,\n         SqlTypes.DOUBLE,\n         SqlTypes.STRING\n-    };\n+    );\n \n-    for (final SqlType type : types) {\n-      // When:\n-      final SqlType out = MAPPER.readValue(MAPPER.writeValueAsString(SqlMap.of(type)), SqlType.class);\n+    for (final SqlType keyType : types) {\n+      for (final SqlType valueType : Lists.reverse(types)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e169b638f2c658909e3774dc7f0bbde48a7046e"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8925e97ae7463c70f202621d3c6a1f92d8e8548", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/c8925e97ae7463c70f202621d3c6a1f92d8e8548", "committedDate": "2020-09-11T11:31:21Z", "message": "test: requested changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57fccd4f73f6b4538b4127a5a86f421a5e636234", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/57fccd4f73f6b4538b4127a5a86f421a5e636234", "committedDate": "2020-09-11T12:36:28Z", "message": "test: avoid the need to 'correct' KsqlStatementExceptions in QTT\n\nNegative test cases should if it is not the last statement in the test case that causes the expected exception to be thrown.  This is so that there aren't test cases were the author thinks it is the last statement that fails, but its actually an earlier one.\n\nTo achieve this, the code was testing the contents of the `KsqlStatementException` to assert it matched the last statement in the test case.  However, because the engine reformts code it the test executor needed to mess around correcting the contents of the statement exception.\n\nThis commit simplifies things by just asserting the last statement failed, rather than relying on `KqlStatementException` contents."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4648, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}