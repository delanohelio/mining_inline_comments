{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MDEzMjE2", "number": 6036, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToxMDo1M1rOEZYtgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNToyNTo1M1rOEe9X2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDU0NzIxOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-reference/create-connector.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToxMDo1M1rOHCKpHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjowNTo1NFrOHCQWvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzMzU2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            CREATE SOURCE | SINK CONNECTOR connector_name [IF EXISTS] WITH( property_name = expression [, ...]);\n          \n          \n            \n            CREATE SOURCE | SINK CONNECTOR connector_name [IF NOT EXISTS] WITH( property_name = expression [, ...]);", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472033566", "createdAt": "2020-08-18T09:10:53Z", "author": {"login": "big-andy-coates"}, "path": "docs/developer-guide/ksqldb-reference/create-connector.md", "diffHunk": "@@ -13,7 +13,7 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE SOURCE | SINK CONNECTOR connector_name WITH( property_name = expression [, ...]);\r\n+CREATE SOURCE | SINK CONNECTOR connector_name [IF EXISTS] WITH( property_name = expression [, ...]);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEyNzE2NQ==", "bodyText": "Ahh ! This slipped right through , fixed this", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472127165", "createdAt": "2020-08-18T12:05:54Z", "author": {"login": "hemantgs"}, "path": "docs/developer-guide/ksqldb-reference/create-connector.md", "diffHunk": "@@ -13,7 +13,7 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE SOURCE | SINK CONNECTOR connector_name WITH( property_name = expression [, ...]);\r\n+CREATE SOURCE | SINK CONNECTOR connector_name [IF EXISTS] WITH( property_name = expression [, ...]);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzMzU2Ng=="}, "originalCommit": {"oid": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDU0ODI0OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-reference/create-connector.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToxMToxMVrOHCKpvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo0MDoyMVrOHEyG-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzMzcyNA==", "bodyText": "Note sure why this talks about types and them not existing. Isn't this about connectors that do exist?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the IF EXISTS clause is present, the statement doesn't fail if the\n          \n          \n            \n            type doesn't exist.\n          \n          \n            \n            \n          \n          \n            \n            If the `IF NOT EXISTS` clause is present, the statement does nothing if a connector with the supplied name already exists.\n          \n          \n            \n            \n          \n      \n    \n    \n  \n\n??", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472033724", "createdAt": "2020-08-18T09:11:11Z", "author": {"login": "big-andy-coates"}, "path": "docs/developer-guide/ksqldb-reference/create-connector.md", "diffHunk": "@@ -24,6 +24,9 @@ configuration passed in the WITH clause. Some connectors have ksqlDB templates\n that simplify configuring them. For more information, see\r\n [Natively Supported Connectors](../../concepts/connectors.md#natively-supported-connectors).\r\n \r\n+If the IF EXISTS clause is present, the statement doesn't fail if the\r\n+type doesn't exist.\r\n+\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEyNzgyMA==", "bodyText": "Yes , I have changed this , according to the behavior similar CREATE STREAMS  though there was no docs for it", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472127820", "createdAt": "2020-08-18T12:07:12Z", "author": {"login": "hemantgs"}, "path": "docs/developer-guide/ksqldb-reference/create-connector.md", "diffHunk": "@@ -24,6 +24,9 @@ configuration passed in the WITH clause. Some connectors have ksqlDB templates\n that simplify configuring them. For more information, see\r\n [Natively Supported Connectors](../../concepts/connectors.md#natively-supported-connectors).\r\n \r\n+If the IF EXISTS clause is present, the statement doesn't fail if the\r\n+type doesn't exist.\r\n+\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzMzcyNA=="}, "originalCommit": {"oid": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU3Njk4Nw==", "bodyText": "If you have time can you either add docs to CREATE STREAM or raise a docs PR about it missing, please?", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r474576987", "createdAt": "2020-08-21T09:31:26Z", "author": {"login": "big-andy-coates"}, "path": "docs/developer-guide/ksqldb-reference/create-connector.md", "diffHunk": "@@ -24,6 +24,9 @@ configuration passed in the WITH clause. Some connectors have ksqlDB templates\n that simplify configuring them. For more information, see\r\n [Natively Supported Connectors](../../concepts/connectors.md#natively-supported-connectors).\r\n \r\n+If the IF EXISTS clause is present, the statement doesn't fail if the\r\n+type doesn't exist.\r\n+\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzMzcyNA=="}, "originalCommit": {"oid": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NzMzNw==", "bodyText": "Sure thing, I have created #6073 , have added docs for CREATE STREAM and CREATE TABLE as well", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r474777337", "createdAt": "2020-08-21T15:40:21Z", "author": {"login": "hemantgs"}, "path": "docs/developer-guide/ksqldb-reference/create-connector.md", "diffHunk": "@@ -24,6 +24,9 @@ configuration passed in the WITH clause. Some connectors have ksqlDB templates\n that simplify configuring them. For more information, see\r\n [Natively Supported Connectors](../../concepts/connectors.md#natively-supported-connectors).\r\n \r\n+If the IF EXISTS clause is present, the statement doesn't fail if the\r\n+type doesn't exist.\r\n+\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzMzcyNA=="}, "originalCommit": {"oid": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDU1NTMyOnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToxMzowN1rOHCKuSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjowNzoyOFrOHCQZ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzNDg4OQ==", "bodyText": "Needs adding to hashCode, equals and toString.", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472034889", "createdAt": "2020-08-18T09:13:07Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateConnector.java", "diffHunk": "@@ -34,32 +34,41 @@\n   private final String name;\n   private final ImmutableMap<String, Literal> config;\n   private final Type type;\n+  private final boolean notExists;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEyNzk1NQ==", "bodyText": "Fixed this", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472127955", "createdAt": "2020-08-18T12:07:28Z", "author": {"login": "hemantgs"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateConnector.java", "diffHunk": "@@ -34,32 +34,41 @@\n   private final String name;\n   private final ImmutableMap<String, Literal> config;\n   private final Type type;\n+  private final boolean notExists;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzNDg4OQ=="}, "originalCommit": {"oid": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDU2MDcyOnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToxNDozMVrOHCKxuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjowODo0M1rOHCQcHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzNTc2OA==", "bodyText": "Please add test case on the end:\n.addEqualityGroup(\n   new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK, true)\n)\nThis would have found the bug of not having this new field in hashCode and equals :D", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472035768", "createdAt": "2020-08-18T09:14:31Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java", "diffHunk": "@@ -39,18 +39,18 @@\n   public void testEquals() {\n     new EqualsTester()\n         .addEqualityGroup(\n-            new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE),\n-            new CreateConnector(Optional.of(OTHER_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE),\n-            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE)\n+            new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE,false),\n+            new CreateConnector(Optional.of(OTHER_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE,false),\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE,false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(OTHER_NAME, CONFIG, CreateConnector.Type.SOURCE)\n+            new CreateConnector(OTHER_NAME, CONFIG, CreateConnector.Type.SOURCE,false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(NAME, OTHER_CONFIG, CreateConnector.Type.SOURCE)\n+            new CreateConnector(NAME, OTHER_CONFIG, CreateConnector.Type.SOURCE,false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK)\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK,false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEyODU0MA==", "bodyText": "Indeed yes , :) I was under the impression object equality here should not depend on ifNotExists,\nbut I see the rationale now .. added the test case", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472128540", "createdAt": "2020-08-18T12:08:43Z", "author": {"login": "hemantgs"}, "path": "ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java", "diffHunk": "@@ -39,18 +39,18 @@\n   public void testEquals() {\n     new EqualsTester()\n         .addEqualityGroup(\n-            new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE),\n-            new CreateConnector(Optional.of(OTHER_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE),\n-            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE)\n+            new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE,false),\n+            new CreateConnector(Optional.of(OTHER_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE,false),\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE,false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(OTHER_NAME, CONFIG, CreateConnector.Type.SOURCE)\n+            new CreateConnector(OTHER_NAME, CONFIG, CreateConnector.Type.SOURCE,false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(NAME, OTHER_CONFIG, CreateConnector.Type.SOURCE)\n+            new CreateConnector(NAME, OTHER_CONFIG, CreateConnector.Type.SOURCE,false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK)\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK,false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzNTc2OA=="}, "originalCommit": {"oid": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDU2MjA0OnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToxNDo1MVrOHCKygg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToxNDo1MVrOHCKygg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzNTk3MA==", "bodyText": "nit: code style: need space after ,:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE,false),\n          \n          \n            \n                        new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE, false),\n          \n      \n    \n    \n  \n\nSame for others below.", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472035970", "createdAt": "2020-08-18T09:14:51Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java", "diffHunk": "@@ -39,18 +39,18 @@\n   public void testEquals() {\n     new EqualsTester()\n         .addEqualityGroup(\n-            new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE),\n-            new CreateConnector(Optional.of(OTHER_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE),\n-            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE)\n+            new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE,false),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDU3ODYxOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToxOToxM1rOHCK8kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowMjo1OVrOHGfExQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODU0Ng==", "bodyText": "bug: doesn't this need to be reversed?   This returns true if the user included IF NOT EXIST in the statement.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (createConnector.isNotExists()) {\n          \n          \n            \n                if (!createConnector.isNotExists()) {", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472038546", "createdAt": "2020-08-18T09:19:13Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -62,4 +68,30 @@ private ConnectExecutor() { }\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n+\n+  private static void throwIfConnectorIsDuplicate(final CreateConnector createConnector,\n+      final ConnectClient client) {\n+    if (createConnector.isNotExists()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzMDIzNg==", "bodyText": "It would be right to proceed with checking if the supplied connector exists only if  IF NOT EXISTS is in the query right ? else we could just avoid the check , meaning\nif `IF NOT EXISTS`\n   checkDuplicate\nelse\n   continue", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472130236", "createdAt": "2020-08-18T12:11:57Z", "author": {"login": "hemantgs"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -62,4 +68,30 @@ private ConnectExecutor() { }\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n+\n+  private static void throwIfConnectorIsDuplicate(final CreateConnector createConnector,\n+      final ConnectClient client) {\n+    if (createConnector.isNotExists()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODU0Ng=="}, "originalCommit": {"oid": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIxODYwOQ==", "bodyText": "If the IF NOT EXISTS is set, then it should not cause an error if the connector already exists. Btw, I found out the CREATE STREAM|TABLE IF NOT EXISTS does not work as expected either (#6050).", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r473218609", "createdAt": "2020-08-19T17:54:19Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -62,4 +68,30 @@ private ConnectExecutor() { }\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n+\n+  private static void throwIfConnectorIsDuplicate(final CreateConnector createConnector,\n+      final ConnectClient client) {\n+    if (createConnector.isNotExists()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODU0Ng=="}, "originalCommit": {"oid": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU5NDQyMA==", "bodyText": "The default functionality, without IF NOT EXISTS would be to fail if a connector with the same name already exists.  (I'm assuming the Connect API would return some kind of 'already exists' error). Adding the IF NOT EXISTS syntax should mean it does NOT fail if the connector exists, instead it should be a no-op.  Hence the logic should be:\nvoid create(...) {\n\n   if (stmt.ifNotExists() && connectorExists(stmt.connectorName()) {\n      // Connector exists already:\n      return;\n   }\n\n   addConnector(stmt);\n}\nOf course, this would suffer from a race condition: the connector could be added by another system between the connectorExists check and the addConnector call.  So really, we also need the addConnector call to gracefully handle the already exists error we get back from the Connect client, and if we're handling than, is there really any point in the connectExists call?   Hence the code could just be:\nvoid create(...) {\n   final ConnectResponse<ConnectorInfo> response = client.create(...);\n   if (response.datum().isPresent()) {\n      return success(...);\n   }\n\n   if (stmt.ifNotExists()) {\n      // somehow determine if the error was because the connector already existed with that name\n      // hopefully this is possible by looking at the http status code, maybe its 409. Not sure.\n      // Otherwise, we'd have to search the error message, which is brittle and we'd need an integration\n      // test to ensure changes to Connect error message don't break this: \n      if (isAlreadyExisttsError(response)) {\n         return alreadyExists(...);\n      }\n   }\n\n   return response.error() \n        .map(err -> new ErrorEntity(statement.getStatementText(), err));\t        .map(err -> new ErrorEntity(statement.getStatementText(), err));\nNote, that's just pseudo code. I've no idea what the client does if the connector already exists.\nNote2:it might help if the method isNotExists was renamed to onlyIfNotExists or ifNotExists or reversed and named ignoreIfExists, as isNotExists is .... confusing... at least to me.", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r474594420", "createdAt": "2020-08-21T09:50:39Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -62,4 +68,30 @@ private ConnectExecutor() { }\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n+\n+  private static void throwIfConnectorIsDuplicate(final CreateConnector createConnector,\n+      final ConnectClient client) {\n+    if (createConnector.isNotExists()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODU0Ng=="}, "originalCommit": {"oid": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3OTY5NQ==", "bodyText": "Ahh , this makes it very clear :)\nI suppose I should wait for #6067 to be merged , once that is merged , it would make sense to return a WarningEntity with an appropriate message from ConnectExecutor when IF NOT EXISTS is set and the connector exists , instead of returning an error", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r474779695", "createdAt": "2020-08-21T15:44:42Z", "author": {"login": "hemantgs"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -62,4 +68,30 @@ private ConnectExecutor() { }\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n+\n+  private static void throwIfConnectorIsDuplicate(final CreateConnector createConnector,\n+      final ConnectClient client) {\n+    if (createConnector.isNotExists()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODU0Ng=="}, "originalCommit": {"oid": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTkxODYxNg==", "bodyText": "@hemantgs, #6067 has been merged!", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r475918616", "createdAt": "2020-08-24T22:00:12Z", "author": {"login": "jzaralim"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -62,4 +68,30 @@ private ConnectExecutor() { }\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n+\n+  private static void throwIfConnectorIsDuplicate(final CreateConnector createConnector,\n+      final ConnectClient client) {\n+    if (createConnector.isNotExists()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODU0Ng=="}, "originalCommit": {"oid": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2MjYyOQ==", "bodyText": "Fixed this , as per suggestions\na query with IF NOT EXISTS will return\nMessage                               \n---------------------------------------\n Connector CALLS_READER already exists \n---------------------------------------\n\nif connector exists", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r476562629", "createdAt": "2020-08-25T16:02:59Z", "author": {"login": "hemantgs"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -62,4 +68,30 @@ private ConnectExecutor() { }\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n+\n+  private static void throwIfConnectorIsDuplicate(final CreateConnector createConnector,\n+      final ConnectClient client) {\n+    if (createConnector.isNotExists()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzODU0Ng=="}, "originalCommit": {"oid": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MDU4NzIxOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOToyMToyMlrOHCLBnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjoxMjo1MlrOHCQknA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzOTgzNg==", "bodyText": "The Optional<String> return value of this is not needed. A simple boolean would suffice.  Also, it looks like you're ignoring any connect error.  If the response returns an error we probably want to bubble that up, right?   The code handles errors by doing this:\nreturn response.error()\n        .map(err -> new ErrorEntity(statement.getStatementText(), err));\nYou'll need to do something similar if the connectors call fails.  You could do this by throwing an exception that holds the ErrorEntity, or by combining checkConnectorExists and throwIfConnectorIsDuplicate together and have throwIfConnectorIsDuplicate return an Optional<ErrorEntity>. Either works.", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472039836", "createdAt": "2020-08-18T09:21:22Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -62,4 +68,30 @@ private ConnectExecutor() { }\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n+\n+  private static void throwIfConnectorIsDuplicate(final CreateConnector createConnector,\n+      final ConnectClient client) {\n+    if (createConnector.isNotExists()) {\n+      checkConnectorExists(client, createConnector)\n+          .ifPresent(connector -> {\n+            throw new KsqlException(String.format(\n+                \"Cannot add connector '%s': A connector with the same name already exists\",\n+                connector));\n+          });\n+    }\n+  }\n+\n+  private static Optional<String> checkConnectorExists(final ConnectClient client,\n+      final CreateConnector createConnector) {\n+    final ConnectResponse<List<String>> connectorsResponse = client.connectors();\n+    if (connectorsResponse.datum().isPresent()) {\n+      return connectorsResponse.datum()\n+          .get()\n+          .stream()\n+          .filter(connector -> StringUtils.equalsIgnoreCase(createConnector.getName(), connector))\n+          .findAny();\n+    }\n+    return Optional.empty();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzMDcxNg==", "bodyText": "Fixed this to throw the ErrorEntity if there occurs an error with connects()", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r472130716", "createdAt": "2020-08-18T12:12:52Z", "author": {"login": "hemantgs"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -62,4 +68,30 @@ private ConnectExecutor() { }\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n+\n+  private static void throwIfConnectorIsDuplicate(final CreateConnector createConnector,\n+      final ConnectClient client) {\n+    if (createConnector.isNotExists()) {\n+      checkConnectorExists(client, createConnector)\n+          .ifPresent(connector -> {\n+            throw new KsqlException(String.format(\n+                \"Cannot add connector '%s': A connector with the same name already exists\",\n+                connector));\n+          });\n+    }\n+  }\n+\n+  private static Optional<String> checkConnectorExists(final ConnectClient client,\n+      final CreateConnector createConnector) {\n+    final ConnectResponse<List<String>> connectorsResponse = client.connectors();\n+    if (connectorsResponse.datum().isPresent()) {\n+      return connectorsResponse.datum()\n+          .get()\n+          .stream()\n+          .filter(connector -> StringUtils.equalsIgnoreCase(createConnector.getName(), connector))\n+          .findAny();\n+    }\n+    return Optional.empty();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzOTgzNg=="}, "originalCommit": {"oid": "d2caca1ebb633f3b304b5abf4cbc68af40c02cba"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzgyNDk0OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-reference/create-connector.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzoyNjo0NlrOHDSBBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowMzoxMVrOHGfFPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwMjk1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            CREATE SOURCE | SINK CONNECTOR connector_name [IF NOT EXISTS] WITH( property_name = expression [, ...]);\n          \n          \n            \n            CREATE SOURCE | SINK CONNECTOR [IF NOT EXISTS] connector_name WITH( property_name = expression [, ...]);", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r473202950", "createdAt": "2020-08-19T17:26:46Z", "author": {"login": "spena"}, "path": "docs/developer-guide/ksqldb-reference/create-connector.md", "diffHunk": "@@ -13,7 +13,7 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE SOURCE | SINK CONNECTOR connector_name WITH( property_name = expression [, ...]);\r\n+CREATE SOURCE | SINK CONNECTOR connector_name [IF NOT EXISTS] WITH( property_name = expression [, ...]);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "131980eeb9d99bef98b2d6ada9c3b3b75e3f25cb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2Mjc0OQ==", "bodyText": "fixed this", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r476562749", "createdAt": "2020-08-25T16:03:11Z", "author": {"login": "hemantgs"}, "path": "docs/developer-guide/ksqldb-reference/create-connector.md", "diffHunk": "@@ -13,7 +13,7 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE SOURCE | SINK CONNECTOR connector_name WITH( property_name = expression [, ...]);\r\n+CREATE SOURCE | SINK CONNECTOR connector_name [IF NOT EXISTS] WITH( property_name = expression [, ...]);\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwMjk1MA=="}, "originalCommit": {"oid": "131980eeb9d99bef98b2d6ada9c3b3b75e3f25cb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzgzNDE4OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-reference/create-connector.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzoyOToyOVrOHDSGsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTo1MTowNFrOHEUhpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwNDQwMg==", "bodyText": "Contrary, if the IF NOT EXISTS clause is present, the statement doesn't fail if the connector already exists.", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r473204402", "createdAt": "2020-08-19T17:29:29Z", "author": {"login": "spena"}, "path": "docs/developer-guide/ksqldb-reference/create-connector.md", "diffHunk": "@@ -24,6 +24,9 @@ configuration passed in the WITH clause. Some connectors have ksqlDB templates\n that simplify configuring them. For more information, see\r\n [Natively Supported Connectors](../../concepts/connectors.md#natively-supported-connectors).\r\n \r\n+If the IF NOT EXISTS clause is present, the statement will fail if a connector with the supplied name\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "131980eeb9d99bef98b2d6ada9c3b3b75e3f25cb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIyNjMwMA==", "bodyText": "@spena I see , the current implementation in this PR throws an exception if a connector exists ,\nso the expectation would be to simply pass along an ErrorEntity and skipping the connector creation part of the code ?", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r473226300", "createdAt": "2020-08-19T18:07:44Z", "author": {"login": "hemantgs"}, "path": "docs/developer-guide/ksqldb-reference/create-connector.md", "diffHunk": "@@ -24,6 +24,9 @@ configuration passed in the WITH clause. Some connectors have ksqlDB templates\n that simplify configuring them. For more information, see\r\n [Natively Supported Connectors](../../concepts/connectors.md#natively-supported-connectors).\r\n \r\n+If the IF NOT EXISTS clause is present, the statement will fail if a connector with the supplied name\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwNDQwMg=="}, "originalCommit": {"oid": "131980eeb9d99bef98b2d6ada9c3b3b75e3f25cb"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI5MjY0Ng==", "bodyText": "Yes.\nBtw, there's another PR to support the DROP CONNECTOR IF EXISTS and included a WarningEntity class. It would be good to return that instead of the ErrorEntity (See https://github.com/confluentinc/ksql/pull/6067/files#diff-748287344db7330d94327cc33a1117e9)", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r474292646", "createdAt": "2020-08-20T21:51:04Z", "author": {"login": "spena"}, "path": "docs/developer-guide/ksqldb-reference/create-connector.md", "diffHunk": "@@ -24,6 +24,9 @@ configuration passed in the WITH clause. Some connectors have ksqlDB templates\n that simplify configuring them. For more information, see\r\n [Natively Supported Connectors](../../concepts/connectors.md#natively-supported-connectors).\r\n \r\n+If the IF NOT EXISTS clause is present, the statement will fail if a connector with the supplied name\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwNDQwMg=="}, "originalCommit": {"oid": "131980eeb9d99bef98b2d6ada9c3b3b75e3f25cb"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjQ3MDg2OnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQwOTo1MjoyMlrOHEnDJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowMzo0MFrOHGfGeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU5NjEzNQ==", "bodyText": "nit: only need one new equality group.  Each equality group should change one param only, compared to the first equality group.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    .addEqualityGroup(\n          \n          \n            \n                        new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK, true)\n          \n          \n            \n                    )\n          \n          \n            \n                    .addEqualityGroup(\n          \n          \n            \n                        new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE, true)\n          \n          \n            \n                    .addEqualityGroup(\n          \n          \n            \n                        new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE, true)", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r474596135", "createdAt": "2020-08-21T09:52:22Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java", "diffHunk": "@@ -39,18 +39,24 @@\n   public void testEquals() {\n     new EqualsTester()\n         .addEqualityGroup(\n-            new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE),\n-            new CreateConnector(Optional.of(OTHER_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE),\n-            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE)\n+            new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE, false),\n+            new CreateConnector(Optional.of(OTHER_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE, false),\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE, false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(OTHER_NAME, CONFIG, CreateConnector.Type.SOURCE)\n+            new CreateConnector(OTHER_NAME, CONFIG, CreateConnector.Type.SOURCE, false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(NAME, OTHER_CONFIG, CreateConnector.Type.SOURCE)\n+            new CreateConnector(NAME, OTHER_CONFIG, CreateConnector.Type.SOURCE, false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK)\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK, false)\n+        )\n+        .addEqualityGroup(\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK, true)\n+        )\n+        .addEqualityGroup(\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE, true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "131980eeb9d99bef98b2d6ada9c3b3b75e3f25cb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2MzA2NA==", "bodyText": "Removed the redundant equality group", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r476563064", "createdAt": "2020-08-25T16:03:40Z", "author": {"login": "hemantgs"}, "path": "ksqldb-parser/src/test/java/io/confluent/ksql/parser/tree/CreateConnectorTest.java", "diffHunk": "@@ -39,18 +39,24 @@\n   public void testEquals() {\n     new EqualsTester()\n         .addEqualityGroup(\n-            new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE),\n-            new CreateConnector(Optional.of(OTHER_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE),\n-            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE)\n+            new CreateConnector(Optional.of(SOME_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE, false),\n+            new CreateConnector(Optional.of(OTHER_LOCATION), NAME, CONFIG, CreateConnector.Type.SOURCE, false),\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE, false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(OTHER_NAME, CONFIG, CreateConnector.Type.SOURCE)\n+            new CreateConnector(OTHER_NAME, CONFIG, CreateConnector.Type.SOURCE, false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(NAME, OTHER_CONFIG, CreateConnector.Type.SOURCE)\n+            new CreateConnector(NAME, OTHER_CONFIG, CreateConnector.Type.SOURCE, false)\n         )\n         .addEqualityGroup(\n-            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK)\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK, false)\n+        )\n+        .addEqualityGroup(\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SINK, true)\n+        )\n+        .addEqualityGroup(\n+            new CreateConnector(NAME, CONFIG, CreateConnector.Type.SOURCE, true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDU5NjEzNQ=="}, "originalCommit": {"oid": "131980eeb9d99bef98b2d6ada9c3b3b75e3f25cb"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjUwNDc2OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMDowMjoyM1rOHEnYKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowMzo0OFrOHGfGwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYwMTUxNA==", "bodyText": "I'm not sure we want to throw an exception here. I think we need to return an ErrorEntity from the execute method - as the existing code does on an error.", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r474601514", "createdAt": "2020-08-21T10:02:23Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -62,4 +68,30 @@ private ConnectExecutor() { }\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n+\n+  private static void throwIfConnectorIsDuplicate(\n+      final CreateConnector createConnector,\n+      final ConnectClient client,\n+      final ConfiguredStatement<CreateConnector> statement\n+  ) {\n+    if (createConnector.isNotExists()) {\n+\n+      final ConnectResponse<List<String>> connectorsResponse = client.connectors();\n+\n+      connectorsResponse.error().ifPresent(err -> {\n+        throw new KsqlException(new ErrorEntity(statement.getStatementText(), err).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "131980eeb9d99bef98b2d6ada9c3b3b75e3f25cb"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2MzEzNg==", "bodyText": "Removed this", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r476563136", "createdAt": "2020-08-25T16:03:48Z", "author": {"login": "hemantgs"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -62,4 +68,30 @@ private ConnectExecutor() { }\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n+\n+  private static void throwIfConnectorIsDuplicate(\n+      final CreateConnector createConnector,\n+      final ConnectClient client,\n+      final ConfiguredStatement<CreateConnector> statement\n+  ) {\n+    if (createConnector.isNotExists()) {\n+\n+      final ConnectResponse<List<String>> connectorsResponse = client.connectors();\n+\n+      connectorsResponse.error().ifPresent(err -> {\n+        throw new KsqlException(new ErrorEntity(statement.getStatementText(), err).toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYwMTUxNA=="}, "originalCommit": {"oid": "131980eeb9d99bef98b2d6ada9c3b3b75e3f25cb"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NjUwNDk5OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMDowMjoyOVrOHEnYUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNjowMzo1N1rOHGfHGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYwMTU1NA==", "bodyText": "as above, I'm not sure we want to throw an exception here. I think we need to return an ErrorEntity from the execute method - as the existing code does on an error.", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r474601554", "createdAt": "2020-08-21T10:02:29Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -62,4 +68,30 @@ private ConnectExecutor() { }\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n+\n+  private static void throwIfConnectorIsDuplicate(\n+      final CreateConnector createConnector,\n+      final ConnectClient client,\n+      final ConfiguredStatement<CreateConnector> statement\n+  ) {\n+    if (createConnector.isNotExists()) {\n+\n+      final ConnectResponse<List<String>> connectorsResponse = client.connectors();\n+\n+      connectorsResponse.error().ifPresent(err -> {\n+        throw new KsqlException(new ErrorEntity(statement.getStatementText(), err).toString());\n+      });\n+\n+      connectorsResponse.datum()\n+          .get()\n+          .stream()\n+          .filter(connector -> StringUtils.equalsIgnoreCase(createConnector.getName(), connector))\n+          .findAny()\n+          .ifPresent(connector -> {\n+            throw new KsqlException(String.format(\n+                \"Cannot add connector '%s': A connector with the same name already exists\",\n+                connector));\n+          });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "131980eeb9d99bef98b2d6ada9c3b3b75e3f25cb"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU2MzIyNw==", "bodyText": "Removed this too", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r476563227", "createdAt": "2020-08-25T16:03:57Z", "author": {"login": "hemantgs"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -62,4 +68,30 @@ private ConnectExecutor() { }\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n+\n+  private static void throwIfConnectorIsDuplicate(\n+      final CreateConnector createConnector,\n+      final ConnectClient client,\n+      final ConfiguredStatement<CreateConnector> statement\n+  ) {\n+    if (createConnector.isNotExists()) {\n+\n+      final ConnectResponse<List<String>> connectorsResponse = client.connectors();\n+\n+      connectorsResponse.error().ifPresent(err -> {\n+        throw new KsqlException(new ErrorEntity(statement.getStatementText(), err).toString());\n+      });\n+\n+      connectorsResponse.datum()\n+          .get()\n+          .stream()\n+          .filter(connector -> StringUtils.equalsIgnoreCase(createConnector.getName(), connector))\n+          .findAny()\n+          .ifPresent(connector -> {\n+            throw new KsqlException(String.format(\n+                \"Cannot add connector '%s': A connector with the same name already exists\",\n+                connector));\n+          });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYwMTU1NA=="}, "originalCommit": {"oid": "131980eeb9d99bef98b2d6ada9c3b3b75e3f25cb"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTYzNTAwOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNzowMDo1N1rOHGhWiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo1NTo1MVrOHGljBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5OTk0Nw==", "bodyText": "I think we should check if the connector exists before attempting to call the client.create, and only if ifNotExists is true. I noticed the client.create() code retries up to 3 times in the following cases:\n.retryIfResult(\n              result -> result == null\n                  || result.httpCode() >= HttpStatus.SC_INTERNAL_SERVER_ERROR\n                  || result.httpCode() == HttpStatus.SC_CONFLICT)\n\nThere's no need to retry if the connector exists, right? Better just check if it exists to keep this command faster, then return the WarningEntity, otherwise try the create.", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r476599947", "createdAt": "2020-08-25T17:00:57Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -59,6 +62,11 @@ private ConnectExecutor() { }\n       );\n     }\n \n+    if (createConnector.ifNotExists() && response.httpCode() == HttpStatus.SC_CONFLICT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87a57929f92fc93ee2993126fa7a54495fa3b7d4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYxMTY4OA==", "bodyText": "@big-andy-coates  above had suggested inconsistencies might creep in\n\nOf course, this would suffer from a race condition: the connector could be added by another system between the connectorExists check and the addConnector call. So really, we also need the addConnector call to gracefully handle the already exists\n\nWould it rather be better to remove result.httpCode() == HttpStatus.SC_CONFLICT) from retryIfResult() since we will be handling HttpStatus.SC_CONFLICT with a WarningEntity ,\nMeaning does it make sense to even retry when we know the connector exists", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r476611688", "createdAt": "2020-08-25T17:20:25Z", "author": {"login": "hemantgs"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -59,6 +62,11 @@ private ConnectExecutor() { }\n       );\n     }\n \n+    if (createConnector.ifNotExists() && response.httpCode() == HttpStatus.SC_CONFLICT) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5OTk0Nw=="}, "originalCommit": {"oid": "87a57929f92fc93ee2993126fa7a54495fa3b7d4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjYyMDYwNg==", "bodyText": "Sadly we can't. The SC_CONFLICT may also happen if the worker group is in a rebalancing process.\nPOST /connectors\nCreate a new connector, returning the current connector info if successful. Return 409 (Conflict) if rebalance is in process\n\nWhat do you think of adding the check before attempting to create the connector just to avoid the retries, and also leave the current check you have in this PR in case a race-condition happens? As mentioned by Andy we also need the addConnector call to gracefully handle the already exists", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r476620606", "createdAt": "2020-08-25T17:30:38Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -59,6 +62,11 @@ private ConnectExecutor() { }\n       );\n     }\n \n+    if (createConnector.ifNotExists() && response.httpCode() == HttpStatus.SC_CONFLICT) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5OTk0Nw=="}, "originalCommit": {"oid": "87a57929f92fc93ee2993126fa7a54495fa3b7d4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2ODY3Ng==", "bodyText": "SC_CONFLICT may also happen if the worker group is in a rebalancing process.\n\nAh ! I did not know that ,\nso yeah I feel that would be the better option .\nI have updated the PR ..\nLots of conditionals to handle all cases \ud83d\ude04", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r476668676", "createdAt": "2020-08-25T18:55:51Z", "author": {"login": "hemantgs"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -59,6 +62,11 @@ private ConnectExecutor() { }\n       );\n     }\n \n+    if (createConnector.ifNotExists() && response.httpCode() == HttpStatus.SC_CONFLICT) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU5OTk0Nw=="}, "originalCommit": {"oid": "87a57929f92fc93ee2993126fa7a54495fa3b7d4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODk2Nzc4OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNToyMjoxNFrOHK7wnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToyOTo1OFrOHL08gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyNjkwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return null;\n          \n          \n            \n                return Optional.empty();", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r481226908", "createdAt": "2020-09-01T15:22:14Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -59,7 +71,43 @@ private ConnectExecutor() { }\n       );\n     }\n \n+    if (createConnector.ifNotExists() && response.httpCode() == HttpStatus.SC_CONFLICT) {\n+      return Optional.of(new WarningEntity(statement.getStatementText(),\n+          String.format(\"Connector %s already exists\", createConnector.getName())));\n+    }\n+\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n+\n+  private static Optional<KsqlEntity> handleIfNotExists(\n+      final ConfiguredStatement<CreateConnector> statement,\n+      final CreateConnector createConnector,\n+      final ConnectClient client) {\n+    if (createConnector.ifNotExists()) {\n+      final ConnectResponse<List<String>> connectorsResponse = client.connectors();\n+      if (connectorsResponse.error().isPresent()) {\n+        return connectorsResponse.error()\n+            .map(err -> new ErrorEntity(statement.getStatementText(), err));\n+      }\n+\n+      if (checkIfConnectorExists(createConnector, connectorsResponse)) {\n+        return Optional.of(new WarningEntity(statement.getStatementText(),\n+            String.format(\"Connector %s already exists\", createConnector.getName())));\n+      }\n+    }\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2b023cc6e463f6423fa5f80e10ea2450de0813d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE2Mzg0Mg==", "bodyText": "Changed this", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r482163842", "createdAt": "2020-09-02T15:29:58Z", "author": {"login": "hemantgs"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -59,7 +71,43 @@ private ConnectExecutor() { }\n       );\n     }\n \n+    if (createConnector.ifNotExists() && response.httpCode() == HttpStatus.SC_CONFLICT) {\n+      return Optional.of(new WarningEntity(statement.getStatementText(),\n+          String.format(\"Connector %s already exists\", createConnector.getName())));\n+    }\n+\n     return response.error()\n         .map(err -> new ErrorEntity(statement.getStatementText(), err));\n   }\n+\n+  private static Optional<KsqlEntity> handleIfNotExists(\n+      final ConfiguredStatement<CreateConnector> statement,\n+      final CreateConnector createConnector,\n+      final ConnectClient client) {\n+    if (createConnector.ifNotExists()) {\n+      final ConnectResponse<List<String>> connectorsResponse = client.connectors();\n+      if (connectorsResponse.error().isPresent()) {\n+        return connectorsResponse.error()\n+            .map(err -> new ErrorEntity(statement.getStatementText(), err));\n+      }\n+\n+      if (checkIfConnectorExists(createConnector, connectorsResponse)) {\n+        return Optional.of(new WarningEntity(statement.getStatementText(),\n+            String.format(\"Connector %s already exists\", createConnector.getName())));\n+      }\n+    }\n+    return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyNjkwOA=="}, "originalCommit": {"oid": "c2b023cc6e463f6423fa5f80e10ea2450de0813d"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODk2OTEyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNToyMjozNVrOHK7xeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTozMDowNlrOHL086g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyNzEzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (connectorsResponse != null) {\n          \n          \n            \n                if (connectorsResponse.isPresent()) {", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r481227130", "createdAt": "2020-09-01T15:22:35Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -43,6 +49,12 @@ private ConnectExecutor() { }\n     final CreateConnector createConnector = statement.getStatement();\n     final ConnectClient client = serviceContext.getConnectClient();\n \n+    final Optional<KsqlEntity> connectorsResponse = handleIfNotExists(\n+        statement, createConnector, client);\n+    if (connectorsResponse != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2b023cc6e463f6423fa5f80e10ea2450de0813d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE2Mzk0Ng==", "bodyText": "changed this", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r482163946", "createdAt": "2020-09-02T15:30:06Z", "author": {"login": "hemantgs"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -43,6 +49,12 @@ private ConnectExecutor() { }\n     final CreateConnector createConnector = statement.getStatement();\n     final ConnectClient client = serviceContext.getConnectClient();\n \n+    final Optional<KsqlEntity> connectorsResponse = handleIfNotExists(\n+        statement, createConnector, client);\n+    if (connectorsResponse != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyNzEzMA=="}, "originalCommit": {"oid": "c2b023cc6e463f6423fa5f80e10ea2450de0813d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODk4MjY1OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNToyNTo1M1rOHK76XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNTozMDo0OVrOHL0-8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyOTQwNQ==", "bodyText": "Should be sufficient to check if the connector now exists, e.g .\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (createConnector.ifNotExists() && response.httpCode() == HttpStatus.SC_CONFLICT) {\n          \n          \n            \n                  return Optional.of(new WarningEntity(statement.getStatementText(),\n          \n          \n            \n                      String.format(\"Connector %s already exists\", createConnector.getName())));\n          \n          \n            \n                }\n          \n          \n            \n                if (createConnector.ifNotExists()) {\n          \n          \n            \n                  // Check again to see if above call failed because someone else created the same connector:\n          \n          \n            \n                  final Optional<KsqlEntity> connectorsResponse = handleIfNotExists(statement, createConnector, client);\n          \n          \n            \n                  if (connectorsResponse.isPresent()) {\n          \n          \n            \n                     return connectorsResponse.get();\n          \n          \n            \n                  }\n          \n          \n            \n                }", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r481229405", "createdAt": "2020-09-01T15:25:53Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -59,7 +71,43 @@ private ConnectExecutor() { }\n       );\n     }\n \n+    if (createConnector.ifNotExists() && response.httpCode() == HttpStatus.SC_CONFLICT) {\n+      return Optional.of(new WarningEntity(statement.getStatementText(),\n+          String.format(\"Connector %s already exists\", createConnector.getName())));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2b023cc6e463f6423fa5f80e10ea2450de0813d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE2NDQ2NA==", "bodyText": "Yeah , have changed this to check if failure was because of connector being created again", "url": "https://github.com/confluentinc/ksql/pull/6036#discussion_r482164464", "createdAt": "2020-09-02T15:30:49Z", "author": {"login": "hemantgs"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ConnectExecutor.java", "diffHunk": "@@ -59,7 +71,43 @@ private ConnectExecutor() { }\n       );\n     }\n \n+    if (createConnector.ifNotExists() && response.httpCode() == HttpStatus.SC_CONFLICT) {\n+      return Optional.of(new WarningEntity(statement.getStatementText(),\n+          String.format(\"Connector %s already exists\", createConnector.getName())));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIyOTQwNQ=="}, "originalCommit": {"oid": "c2b023cc6e463f6423fa5f80e10ea2450de0813d"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2893, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}