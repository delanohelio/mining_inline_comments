{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNjAyODg0", "number": 6393, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjoxODoyMFrOEsHbyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjoxODoyMFrOEsHbyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Njk0NjAyOnYy", "diffSide": "LEFT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/PlanNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjoxODoyMFrOHfQhOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMToxNTowMlrOHf6S-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUzODU1NA==", "bodyText": "\ud83d\ude22 why not have JoiningNode implement copyWithFormat() instead of setFormat?", "url": "https://github.com/confluentinc/ksql/pull/6393#discussion_r502538554", "createdAt": "2020-10-09T16:18:20Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/PlanNode.java", "diffHunk": "@@ -42,7 +41,6 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-@Immutable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85cf3ea0197fcf9f70fff5637cc9dae9a4872216"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzIyMzAzNA==", "bodyText": "Because the note is already part of the logical plan. So it would need to swap itself out, which would mean the parent nodes reference would need to change to the node. Ergo, the parent node would need to be mutable.\nThe general direction is to move more and more logic from the Analyzer into the logical plan nodes, as this allows us to make use of the plan hierarchy and polymorphism to drive decision making. So more and more, the logical plan nodes, as they are today, will become more mutable.\nFor example, the final user-provided projection can be used to limit the number of columns we need to extract from each source.  The final projection node can inform parent nodes of the required columns. This would allow us to, for example, limit the columns we repartition to only those needed down stream, not the whole message: this could potentially be a massive saving.\nIf we want an immutable logical model, then we'll need a two-step process, i.e. a set of builder nodes, that can be baked into a immutable model.\nI'm a big fan of immutability, especially in the presence of multi-threading. However, in this case, I'm not sure it actually buys us much, at least not at the moment.", "url": "https://github.com/confluentinc/ksql/pull/6393#discussion_r503223034", "createdAt": "2020-10-12T11:15:02Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/PlanNode.java", "diffHunk": "@@ -42,7 +41,6 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-@Immutable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUzODU1NA=="}, "originalCommit": {"oid": "85cf3ea0197fcf9f70fff5637cc9dae9a4872216"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2686, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}