{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNTIzMzc0", "number": 6295, "title": "fix: JSON format to set correct scale of decimals", "bodyText": "Description\nIt is the responsibility of the format to ensure the data returned matches the required schema. This includes the scale of decimals. The JSON format was not correctly setting the scale of decimals when deserializing. For example, give:\nCREATE STREAM S (ID INT KEY, PRICE DECIMAL(10,2) WITH (kafka_topic='S', formats='JSON');\nThe above creates a stream with a single value column PRICE which should have a scale of 2, i.e. two decimal places.\nIf the data in tbe Kafka record's value was to have too small a scale, e.g.\n{\n   \"price\": 12\n}\nor\n{\n   \"price\": 12.1\n}\nThen the deserializer was returning the decimal as provided, i.e. 12 or 12.1. However, this is incorrect as the schema of the column states is has a scale of two. So all values for the column should have the scale set to two, i.e. the above examples should deserialize to 12.00 and 12.10. With this change they now do.\nTesting done\nUsual\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-09-24T15:20:46Z", "url": "https://github.com/confluentinc/ksql/pull/6295", "merged": true, "mergeCommit": {"oid": "57b7b2edf475affb0a8d40d604ba9091cb6eb556"}, "closed": true, "closedAt": "2020-09-28T16:21:56Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMCy2sgH2gAyNDkyNTIzMzc0OmJiMzFlZDc0N2VlNmEwYmM1NTIyZGY2Y2U3OWQwYmI5YTdmNGVlNzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNVKL7gFqTQ5NzYzNTQ0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bb31ed747ee6a0bc5522df6ce79d0bb9a7f4ee78", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/bb31ed747ee6a0bc5522df6ce79d0bb9a7f4ee78", "committedDate": "2020-09-24T15:19:41Z", "message": "fix: JSON format should correct scale of decimals when deserializing\n\nIt is the responsibility of the format to ensure the data returned matches the required schema. This includes the scale of decimals. The JSON format was not correctly setting the scale of decimals when deserializing. For example, give:\n\n```sql\nCREATE STREAM S (ID INT KEY, PRICE DECIMAL(10,2) WITH (kafka_topic='S', formats='JSON');\n```\n\nThe above creates a stream with a single value column `PRICE` which should have a scale of `2`, i.e. two decimal places.\n\nIf the data in tbe Kafka record's value was to have the incorrect, e.g.\n\n```json\n{\n   \"price\": 12\n}\n```\n\nor\n\n```json\n{\n   \"price\": 12.1\n}\n```\n\nThen the deserializer was returning the decimal as provided, i.e. `12` or `12.1`. However, this is incorrect as the schema of the column states is has a scale of two. So all values for the column should have the scale set to two, i.e. the above examples should deserialize to `12.00` and `12.10`. With this change they no do."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bfcaeced663ad71e450931c7a9c39dcf5fbd0e2", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/5bfcaeced663ad71e450931c7a9c39dcf5fbd0e2", "committedDate": "2020-09-24T15:20:08Z", "message": "test: updated QTT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bb34f94c7e6cf228e29d1cff60c94c47ca2fbbc", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/9bb34f94c7e6cf228e29d1cff60c94c47ca2fbbc", "committedDate": "2020-09-25T12:27:28Z", "message": "test: fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NjM1NDQ5", "url": "https://github.com/confluentinc/ksql/pull/6295#pullrequestreview-497635449", "createdAt": "2020-09-28T15:15:42Z", "commit": {"oid": "9bb34f94c7e6cf228e29d1cff60c94c47ca2fbbc"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNToxNTo0M1rOHZDJQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNToxNzoxMVrOHZDPjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAyNzk3MQ==", "bodyText": "Does ksqlDB always throw when deserializing decimals that don't fit into the specified precision/scale? What about when casting from other numeric types to decimals? There's no way for the user to specify rounding behavior? (Asking in case you know off the top of your head. If not I can poke around the code, not seeing anything in the docs one way or the other.)", "url": "https://github.com/confluentinc/ksql/pull/6295#discussion_r496027971", "createdAt": "2020-09-28T15:15:43Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-serde/src/test/java/io/confluent/ksql/serde/json/KsqlJsonDeserializerTest.java", "diffHunk": "@@ -538,6 +538,40 @@ public void shouldDeserializeDecimalsWithoutStrippingTrailingZeros() {\n     assertThat(result, is(new BigDecimal(\"10.0\")));\n   }\n \n+  @Test\n+  public void shouldFixScaleWhenDeserializingDecimalsWithTooSmallAScale() {\n+    // Given:\n+    final KsqlJsonDeserializer<BigDecimal> deserializer =\n+        givenDeserializerForSchema(DecimalUtil.builder(4, 3).build(), BigDecimal.class);\n+\n+    final byte[] bytes = addMagic(\"1.1\".getBytes(UTF_8));\n+\n+    // When:\n+    final Object result = deserializer.deserialize(SOME_TOPIC, bytes);\n+\n+    // Then:\n+    assertThat(result, is(new BigDecimal(\"1.100\")));\n+  }\n+\n+  @Test\n+  public void shouldThrowIfDecimalHasLargerScale() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb34f94c7e6cf228e29d1cff60c94c47ca2fbbc"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjAyOTU4MA==", "bodyText": "What's the philosophy behind when it makes sense to copy the underlying error message into the new error message?", "url": "https://github.com/confluentinc/ksql/pull/6295#discussion_r496029580", "createdAt": "2020-09-28T15:17:11Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/json/KsqlJsonDeserializer.java", "diffHunk": "@@ -126,7 +126,7 @@ public T deserialize(final String topic, final byte[] bytes) {\n       return SerdeUtils.castToTargetType(coerced, targetType);\n     } catch (final Exception e) {\n       throw new SerializationException(\n-          \"Failed to deserialize \" + target + \" from topic: \" + topic, e);\n+          \"Failed to deserialize \" + target + \" from topic: \" + topic + \". \" + e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb34f94c7e6cf228e29d1cff60c94c47ca2fbbc"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4675, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}