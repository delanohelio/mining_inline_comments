{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyOTY5Mzky", "number": 6432, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNDozODo0N1rOEtxemw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNDo0MDoyNVrOEtxftQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDMyMDI3OnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/avro.json", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNDozODo0N1rOHhwebA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjozNjowNVrOHiQgPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTI3Ng==", "bodyText": "Is there a purpose to including this value schema here, given that the test does not use value inference? If we want to test that this value schema is ignored in favor of the schema that's explicitly supplied in the statement, we should update this schema to be different. If not, can we remove this in order to clean up the tests?\nOr does the QTT framework require that it's present for Avro types, even if the schema inference isn't used...?", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505159276", "createdAt": "2020-10-15T04:38:47Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/avro.json", "diffHunk": "@@ -667,6 +667,33 @@\n         {\"topic\": \"OUTPUT\", \"value\": null}\n       ]\n     },\n+    {\n+      \"name\": \"BOOLEAN - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"boolean\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYyMDMzMg==", "bodyText": "I don't think it's necessary - I can add separate tests to make sure that it's respected if the schema differs.", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505620332", "createdAt": "2020-10-15T15:07:10Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/avro.json", "diffHunk": "@@ -667,6 +667,33 @@\n         {\"topic\": \"OUTPUT\", \"value\": null}\n       ]\n     },\n+    {\n+      \"name\": \"BOOLEAN - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"boolean\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTI3Ng=="}, "originalCommit": {"oid": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY0NzI3NQ==", "bodyText": "OK - I figured out what's going on and I'll fix it in a follow-up PR. We generate the topic information from the CT/CS statement if there is no topic node in the QTT. The problem is that if we have either the key or the value schema we need both because otherwise it won't generate the topic from the CT statement and use the one supplied (and we get a 404 when looking up the schema in SR). The fix isn't necessarily straightforward, so for now whenever we are using inference I'll just supply the key and value schema.", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505647275", "createdAt": "2020-10-15T15:43:06Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/avro.json", "diffHunk": "@@ -667,6 +667,33 @@\n         {\"topic\": \"OUTPUT\", \"value\": null}\n       ]\n     },\n+    {\n+      \"name\": \"BOOLEAN - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"boolean\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTI3Ng=="}, "originalCommit": {"oid": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY1NDI1OA==", "bodyText": "#6441 (comment)", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505654258", "createdAt": "2020-10-15T15:52:54Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/avro.json", "diffHunk": "@@ -667,6 +667,33 @@\n         {\"topic\": \"OUTPUT\", \"value\": null}\n       ]\n     },\n+    {\n+      \"name\": \"BOOLEAN - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"boolean\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTI3Ng=="}, "originalCommit": {"oid": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY4NDAyOQ==", "bodyText": "Thanks for investigating! Agreed we shouldn't block this PR.", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505684029", "createdAt": "2020-10-15T16:36:05Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/avro.json", "diffHunk": "@@ -667,6 +667,33 @@\n         {\"topic\": \"OUTPUT\", \"value\": null}\n       ]\n     },\n+    {\n+      \"name\": \"BOOLEAN - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"boolean\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTI3Ng=="}, "originalCommit": {"oid": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDMyMTAwOnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/avro.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNDozOToxNFrOHhwe2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNDozOToxNFrOHhwe2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTM4Ng==", "bodyText": "Same question about whether this key schema needs to be provided, given that there is no key inference in this test.", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505159386", "createdAt": "2020-10-15T04:39:14Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/avro.json", "diffHunk": "@@ -696,6 +723,340 @@\n         {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n       ]\n     },\n+    {\n+      \"name\": \"INT - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"int\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 10, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": 12, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 10, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": 12, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"BIGINT - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K BIGINT KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"long\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDMyMTUwOnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/tools/RecordTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNDozOToyOFrOHhwfHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNDozOToyOFrOHhwfHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTQ1Mg==", "bodyText": "nit: unused import.", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505159452", "createdAt": "2020-10-15T04:39:28Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/tools/RecordTest.java", "diffHunk": "@@ -19,6 +19,7 @@\n import static org.hamcrest.CoreMatchers.instanceOf;\n import static org.hamcrest.MatcherAssert.assertThat;\n \n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDMyMTU4OnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/tools/TestExecutorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNDozOTozMVrOHhwfKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTowNTo0M1rOHiMing==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTQ2NQ==", "bodyText": "Is this different from TextNode.valueOf(\"k1\")? Curious about the inconsistency between the key and value nodes.", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505159465", "createdAt": "2020-10-15T04:39:31Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/tools/TestExecutorTest.java", "diffHunk": "@@ -414,9 +415,9 @@ public void shouldPassOnExpectedOutput() {\n     final ProducerRecord<byte[], byte[]> rec1 = producerRecord(sinkTopic, 123456789L, \"k2\", \"v2\");\n     when(kafkaService.readRecords(SINK_TOPIC_NAME)).thenReturn(ImmutableList.of(rec0, rec1));\n \n-    final Record expected_0 = new Record(SINK_TOPIC_NAME, \"k1\", \"v1\", TextNode.valueOf(\"v1\"),\n+    final Record expected_0 = new Record(SINK_TOPIC_NAME, \"k1\", JsonNodeFactory.instance.textNode(\"k1\"), \"v1\", TextNode.valueOf(\"v1\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYxOTEwMg==", "bodyText": "\ud83d\ude44 to be honest, I've just always used JsonNodeFactory to create the nodes (I didn't even notice that they were using TextNode here). I don't think there's a difference:\n    // From JsonNodeFactory\n    public TextNode textNode(String text) { return TextNode.valueOf(text); }", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505619102", "createdAt": "2020-10-15T15:05:43Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/tools/TestExecutorTest.java", "diffHunk": "@@ -414,9 +415,9 @@ public void shouldPassOnExpectedOutput() {\n     final ProducerRecord<byte[], byte[]> rec1 = producerRecord(sinkTopic, 123456789L, \"k2\", \"v2\");\n     when(kafkaService.readRecords(SINK_TOPIC_NAME)).thenReturn(ImmutableList.of(rec0, rec1));\n \n-    final Record expected_0 = new Record(SINK_TOPIC_NAME, \"k1\", \"v1\", TextNode.valueOf(\"v1\"),\n+    final Record expected_0 = new Record(SINK_TOPIC_NAME, \"k1\", JsonNodeFactory.instance.textNode(\"k1\"), \"v1\", TextNode.valueOf(\"v1\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTQ2NQ=="}, "originalCommit": {"oid": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NDMyMzA5OnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/avro.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNDo0MDoyNVrOHhwf_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNTowNDoxOFrOHiMdZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTY3OQ==", "bodyText": "Whoops, this should be renamed to ROWKEY with the change in #6436. You should merge first and I'll update the test in my PR accordingly :)", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505159679", "createdAt": "2020-10-15T04:40:25Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/avro.json", "diffHunk": "@@ -696,6 +723,340 @@\n         {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n       ]\n     },\n+    {\n+      \"name\": \"INT - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"int\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 10, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": 12, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 10, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": 12, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"BIGINT - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K BIGINT KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"long\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 998877665544332211, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 998877665544332211, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"BIGINT - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"long\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 998877665544332211, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 998877665544332211, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"DOUBLE - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K DOUBLE KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"double\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 654.321, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 654.321, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"DOUBLE - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"double\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 654.321, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 654.321, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"STRING - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K VARCHAR KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"string\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"foo\", \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"foo\", \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"STRING - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"string\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"foo\", \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"foo\", \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"DECIMAL - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K DECIMAL(4,2) KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\n+            \"type\": \"bytes\",\n+            \"logicalType\": \"decimal\",\n+            \"precision\": 4,\n+            \"scale\": 2\n+          },\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 65.21, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 65.21, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"DECIMAL - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\n+            \"type\": \"bytes\",\n+            \"logicalType\": \"decimal\",\n+            \"precision\": 4,\n+            \"scale\": 2\n+          },\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 65.21, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 65.21, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"ARRAY - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K ARRAY<VARCHAR> KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\n+            \"type\": \"array\",\n+            \"items\": \"string\"\n+          },\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n+        \"message\": \"Unsupported key schema: [`K` ARRAY<STRING> KEY]\"\n+      }\n+    },\n+    {\n+      \"name\": \"ARRAY - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\n+            \"type\": \"array\",\n+            \"items\": \"string\"\n+          },\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n+        \"message\": \"Unsupported key schema: [`ROWVAL` ARRAY<STRING> KEY]\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2"}, "originalPosition": 340}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTYxNzc2Nw==", "bodyText": "\ud83d\udcaf that's good haha", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505617767", "createdAt": "2020-10-15T15:04:18Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/avro.json", "diffHunk": "@@ -696,6 +723,340 @@\n         {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n       ]\n     },\n+    {\n+      \"name\": \"INT - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"int\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 10, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": 12, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 10, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": 12, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"BIGINT - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K BIGINT KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"long\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 998877665544332211, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 998877665544332211, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"BIGINT - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"long\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 998877665544332211, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 998877665544332211, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"DOUBLE - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K DOUBLE KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"double\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 654.321, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 654.321, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"DOUBLE - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"double\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 654.321, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 654.321, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"STRING - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K VARCHAR KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"string\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"foo\", \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"foo\", \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"STRING - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"string\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"foo\", \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"foo\", \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"DECIMAL - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K DECIMAL(4,2) KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\n+            \"type\": \"bytes\",\n+            \"logicalType\": \"decimal\",\n+            \"precision\": 4,\n+            \"scale\": 2\n+          },\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 65.21, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 65.21, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"DECIMAL - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\n+            \"type\": \"bytes\",\n+            \"logicalType\": \"decimal\",\n+            \"precision\": 4,\n+            \"scale\": 2\n+          },\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 65.21, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 65.21, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"ARRAY - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K ARRAY<VARCHAR> KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\n+            \"type\": \"array\",\n+            \"items\": \"string\"\n+          },\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n+        \"message\": \"Unsupported key schema: [`K` ARRAY<STRING> KEY]\"\n+      }\n+    },\n+    {\n+      \"name\": \"ARRAY - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\n+            \"type\": \"array\",\n+            \"items\": \"string\"\n+          },\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n+        \"message\": \"Unsupported key schema: [`ROWVAL` ARRAY<STRING> KEY]\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTY3OQ=="}, "originalCommit": {"oid": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2"}, "originalPosition": 340}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2701, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}