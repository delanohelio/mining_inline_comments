{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzODUyMTYx", "number": 4335, "title": "feat: improve the semantics around decimal/floating point literals", "bodyText": "BREAKING CHANGE: standalone literals that used to be doubles may now be\ninterpreted as BigDecimal. In most scenarios, this won't affect any\nqueries as the DECIMAL can auto-cast to DOUBLE; in the case were the\nliteral standsalone, the output schema will be a DECIMAL instead of a\nDOUBLE. To specify a DOUBLE literal, use scientific notation (e.g.\n1.234E-5).\nfixes #3593\nDescription\nThe DIGIT+ '.' DIGIT*    | '.' DIGIT+ pattern will now resolve to a Decimal while anything in scientific notation (DIGIT+ ('.' DIGIT*)? EXPONENT  | '.' DIGIT+ EXPONENT) will resolve to a floating point (double) value. This is in line with SQL Server, IBM DB2 and is mostly consistent with Postgres which claims that \"Constants that contain decimal points and/or exponents are always initially presumed to be type numeric\" (numeric is the equivalent of our decimal type).\nTesting done\nAdded new tests were applicable and updated all old tests that used double constants.\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-01-16T21:21:59Z", "url": "https://github.com/confluentinc/ksql/pull/4335", "merged": true, "mergeCommit": {"oid": "d15026fe7c8993673152d740d46b16253896d8e8"}, "closed": true, "closedAt": "2020-01-22T19:57:24Z", "author": {"login": "agavra"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8lvnggBqjI5NjczNTY0NTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8545LgH2gAyMzYzODUyMTYxOjE4YTlmNjgxNDM0OTc3NGJhODczNDZkYjYzMzQwOGVkYzVkZGYwZmI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "939bc4caf97d40d8aee6ccbd913ecb31e9cc9505", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/939bc4caf97d40d8aee6ccbd913ecb31e9cc9505", "committedDate": "2020-01-16T01:02:11Z", "message": "feat: improve the semantics around decimal/floating point literals\n\nBREAKING CHANGE: standalone literals that used to be doubles will now be\ninterpreted as BigDecimal. In most scenarios, this won't affect any\nqueries as the DECIMAL can auto-cast to DOUBLE; in the case were the\nliteral standsalone, the output schema will be a DECIMAL instead of a\nDOUBLE. To specify a DOUBLE literal, use scientific notation (e.g.\n1.234E-5)."}, "afterCommit": {"oid": "0c8ae58fe1c670a500827e896ff62b9de16d4960", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/0c8ae58fe1c670a500827e896ff62b9de16d4960", "committedDate": "2020-01-21T18:48:42Z", "message": "feat: improve the semantics around decimal/floating point literals\n\nBREAKING CHANGE: standalone literals that used to be doubles will now be\ninterpreted as BigDecimal. In most scenarios, this won't affect any\nqueries as the DECIMAL can auto-cast to DOUBLE; in the case were the\nliteral standsalone, the output schema will be a DECIMAL instead of a\nDOUBLE. To specify a DOUBLE literal, use scientific notation (e.g.\n1.234E-5)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c38e4249c167fe360de11c3e3391ec901942825f", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/c38e4249c167fe360de11c3e3391ec901942825f", "committedDate": "2020-01-21T21:00:18Z", "message": "feat: improve the semantics around decimal/floating point literals\n\nBREAKING CHANGE: standalone literals that used to be doubles may now be\ninterpreted as BigDecimal. In most scenarios, this won't affect any\nqueries as the DECIMAL can auto-cast to DOUBLE; in the case were the\nliteral stands alone, the output schema will be a DECIMAL instead of a\nDOUBLE. To specify a DOUBLE literal, use scientific notation (e.g.\n1.234E-5)."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c8ae58fe1c670a500827e896ff62b9de16d4960", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/0c8ae58fe1c670a500827e896ff62b9de16d4960", "committedDate": "2020-01-21T18:48:42Z", "message": "feat: improve the semantics around decimal/floating point literals\n\nBREAKING CHANGE: standalone literals that used to be doubles will now be\ninterpreted as BigDecimal. In most scenarios, this won't affect any\nqueries as the DECIMAL can auto-cast to DOUBLE; in the case were the\nliteral standsalone, the output schema will be a DECIMAL instead of a\nDOUBLE. To specify a DOUBLE literal, use scientific notation (e.g.\n1.234E-5)."}, "afterCommit": {"oid": "c38e4249c167fe360de11c3e3391ec901942825f", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/c38e4249c167fe360de11c3e3391ec901942825f", "committedDate": "2020-01-21T21:00:18Z", "message": "feat: improve the semantics around decimal/floating point literals\n\nBREAKING CHANGE: standalone literals that used to be doubles may now be\ninterpreted as BigDecimal. In most scenarios, this won't affect any\nqueries as the DECIMAL can auto-cast to DOUBLE; in the case were the\nliteral stands alone, the output schema will be a DECIMAL instead of a\nDOUBLE. To specify a DOUBLE literal, use scientific notation (e.g.\n1.234E-5)."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MjM1NDA3", "url": "https://github.com/confluentinc/ksql/pull/4335#pullrequestreview-346235407", "createdAt": "2020-01-21T22:26:21Z", "commit": {"oid": "c38e4249c167fe360de11c3e3391ec901942825f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjoyNjoyMlrOFgK3qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjoyNjoyMlrOFgK3qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3Njg0MQ==", "bodyText": "nit: the error contract for this method seems a bit weird now. If the value cannot be coerced return empty, but if the value can't be coerced due to being a decimal that doesn't fit we return an error. Consider changing this to just throw if coercing fails.", "url": "https://github.com/confluentinc/ksql/pull/4335#discussion_r369276841", "createdAt": "2020-01-21T22:26:22Z", "author": {"login": "rodesai"}, "path": "ksql-parser/src/main/java/io/confluent/ksql/schema/ksql/DefaultSqlValueCoercer.java", "diffHunk": "@@ -23,28 +23,28 @@\n import io.confluent.ksql.schema.ksql.types.SqlStruct;\n import io.confluent.ksql.schema.ksql.types.SqlType;\n import io.confluent.ksql.schema.ksql.types.SqlTypes;\n-import io.confluent.ksql.util.KsqlException;\n+import io.confluent.ksql.util.DecimalUtil;\n import java.math.BigDecimal;\n-import java.math.MathContext;\n-import java.math.RoundingMode;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n-import java.util.function.Function;\n+import java.util.function.BiFunction;\n import org.apache.kafka.connect.data.Field;\n import org.apache.kafka.connect.data.Struct;\n \n public enum DefaultSqlValueCoercer implements SqlValueCoercer {\n \n   INSTANCE;\n \n-  private static final Map<SqlBaseType, Function<Number, Number>> UPCASTER =\n-      ImmutableMap.<SqlBaseType, Function<Number, Number>>builder()\n-          .put(SqlBaseType.INTEGER, Number::intValue)\n-          .put(SqlBaseType.BIGINT, Number::longValue)\n-          .put(SqlBaseType.DOUBLE, Number::doubleValue)\n-          .build();\n+  private static final Map<SqlBaseType, BiFunction<Number, SqlType, Number>> UPCASTER =\n+      ImmutableMap.<SqlBaseType, BiFunction<Number, SqlType, Number>>builder()\n+          .put(SqlBaseType.INTEGER, (num, type) -> num.intValue())\n+          .put(SqlBaseType.BIGINT, (num, type) -> num.longValue())\n+          .put(SqlBaseType.DOUBLE, (num, type) -> num.doubleValue())\n+          .put(SqlBaseType.DECIMAL, (num, type) ->\n+              DecimalUtil.ensureFit(new BigDecimal(String.format(\"%s\", num)), (SqlDecimal) type)\n+          ).build();\n \n   @Override\n   public Optional<?> coerce(final Object value, final SqlType targetType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c38e4249c167fe360de11c3e3391ec901942825f"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18a9f6814349774ba87346db633408edc5ddf0fb", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/18a9f6814349774ba87346db633408edc5ddf0fb", "committedDate": "2020-01-22T18:17:07Z", "message": "fix: rohan's comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 105, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}