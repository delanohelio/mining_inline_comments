{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMTEzODky", "number": 5730, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo0ODoyMFrOEKMBhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo0ODo0MFrOEKMCBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTE4MjE0OnYy", "diffSide": "LEFT", "path": "config/ksql-server.properties", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo0ODoyMVrOGrFfnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo0ODoyMVrOGrFfnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzMTk2Nw==", "bodyText": "nit: unnecessary whitespace changes", "url": "https://github.com/confluentinc/ksql/pull/5730#discussion_r447831967", "createdAt": "2020-06-30T16:48:21Z", "author": {"login": "vcrfxia"}, "path": "config/ksql-server.properties", "diffHunk": "@@ -64,11 +64,8 @@ bootstrap.servers=localhost:9092\n compression.type=snappy\n \n #------ Connect -------\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bfc8b4b0f6e4305c585e44a03336d02fd7c33ee"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTE4MzQwOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo0ODo0MFrOGrFgag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjo0ODo0MFrOGrFgag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgzMjE3MA==", "bodyText": "Should we only try to fail the promise if it hasn't already been completed?", "url": "https://github.com/confluentinc/ksql/pull/5730#discussion_r447832170", "createdAt": "2020-06-30T16:48:40Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java", "diffHunk": "@@ -113,19 +114,35 @@ static void handleOldApiResponse(final Server server, final RoutingContext routi\n     }\n   }\n \n-  private static void streamEndpointResponse(final Server server, final HttpServerResponse response,\n+  private static void streamEndpointResponse(final Server server,\n+      final RoutingContext routingContext,\n       final StreamingOutput streamingOutput) {\n     final WorkerExecutor workerExecutor = server.getWorkerExecutor();\n     final VertxCompletableFuture<Void> vcf = new VertxCompletableFuture<>();\n     workerExecutor.executeBlocking(promise -> {\n-      try (OutputStream os = new BufferedOutputStream(new ResponseOutputStream(response))) {\n-        streamingOutput.write(os);\n+      final OutputStream ros = new ResponseOutputStream(routingContext.response());\n+      routingContext.request().connection().closeHandler(v -> {\n+        // Close the OutputStream on close of the HTTP connection\n+        closeOutputStream(ros, promise);\n+      });\n+      try {\n+        streamingOutput.write(new BufferedOutputStream(ros));\n       } catch (Exception e) {\n         promise.fail(e);\n+      } finally {\n+        closeOutputStream(ros, promise);\n       }\n     }, vcf);\n   }\n \n+  private static void closeOutputStream(final OutputStream os, final Promise<Void> promise) {\n+    try {\n+      os.close();\n+    } catch (IOException e) {\n+      promise.fail(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bfc8b4b0f6e4305c585e44a03336d02fd7c33ee"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3246, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}