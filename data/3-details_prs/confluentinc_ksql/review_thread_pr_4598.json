{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NjEwNjgy", "number": 4598, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTo0MTowNVrODhfimg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTo0NzoxM1rODhfppA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDQ2MzYyOnYy", "diffSide": "RIGHT", "path": "ksql-functional-tests/src/test/java/io/confluent/ksql/test/planned/TestCasePlan.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTo0MTowNVrOFsQNNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTo0MTowNVrOFsQNNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0NzE4OQ==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  final List<KsqlPlan> planNode,\n          \n          \n            \n                  final List<KsqlPlan> planNodes,", "url": "https://github.com/confluentinc/ksql/pull/4598#discussion_r381947189", "createdAt": "2020-02-20T11:41:05Z", "author": {"login": "big-andy-coates"}, "path": "ksql-functional-tests/src/test/java/io/confluent/ksql/test/planned/TestCasePlan.java", "diffHunk": "@@ -16,55 +16,80 @@\n package io.confluent.ksql.test.planned;\n \n import io.confluent.ksql.engine.KsqlPlan;\n+import io.confluent.ksql.test.model.RecordNode;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n \n public final class TestCasePlan {\n-  private final TestCasePlanNode node;\n+  private final TestCaseSpecNode specNode;\n+  private final TestCasePlanNode planNode;\n   private final String topology;\n \n   TestCasePlan(\n       final String version,\n       final long timestamp,\n-      final List<KsqlPlan> plan,\n+      final List<KsqlPlan> planNode,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fe590f78dace55834e135c9c44470012155e2cd"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDQ2NjQ2OnYy", "diffSide": "RIGHT", "path": "ksql-functional-tests/src/test/java/io/confluent/ksql/test/planned/TestCasePlan.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTo0MjowM1rOFsQOxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTo0MjowM1rOFsQOxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0NzU4OA==", "bodyText": "I'd inline all of these accessors that access either planNode or specNode. Calls can just use getPlanNode().getPlan() etc.", "url": "https://github.com/confluentinc/ksql/pull/4598#discussion_r381947588", "createdAt": "2020-02-20T11:42:03Z", "author": {"login": "big-andy-coates"}, "path": "ksql-functional-tests/src/test/java/io/confluent/ksql/test/planned/TestCasePlan.java", "diffHunk": "@@ -16,55 +16,80 @@\n package io.confluent.ksql.test.planned;\n \n import io.confluent.ksql.engine.KsqlPlan;\n+import io.confluent.ksql.test.model.RecordNode;\n import java.util.List;\n import java.util.Map;\n import java.util.Objects;\n \n public final class TestCasePlan {\n-  private final TestCasePlanNode node;\n+  private final TestCaseSpecNode specNode;\n+  private final TestCasePlanNode planNode;\n   private final String topology;\n \n   TestCasePlan(\n       final String version,\n       final long timestamp,\n-      final List<KsqlPlan> plan,\n+      final List<KsqlPlan> planNode,\n       final String topology,\n       final Map<String, String> schemas,\n-      final Map<String, String> configs\n+      final Map<String, String> configs,\n+      final List<RecordNode> inputs,\n+      final List<RecordNode> outputs\n   ) {\n-    this(new TestCasePlanNode(version, timestamp, plan, schemas, configs), topology);\n+    this(\n+        new TestCaseSpecNode(version, timestamp, schemas, inputs, outputs),\n+        new TestCasePlanNode(planNode, configs),\n+        topology\n+    );\n   }\n \n-  TestCasePlan(final TestCasePlanNode node, final String topology) {\n-    this.node = Objects.requireNonNull(node, \"node\");\n+  TestCasePlan(\n+      final TestCaseSpecNode specNode,\n+      final TestCasePlanNode planNode,\n+      final String topology\n+  ) {\n+    this.specNode = Objects.requireNonNull(specNode, \"spec\");\n+    this.planNode = Objects.requireNonNull(planNode, \"plan\");\n     this.topology = Objects.requireNonNull(topology, \"topology\");\n   }\n \n   public List<KsqlPlan> getPlan() {\n-    return node.getPlan();\n+    return planNode.getPlan();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fe590f78dace55834e135c9c44470012155e2cd"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDQ3MjMzOnYy", "diffSide": "RIGHT", "path": "ksql-functional-tests/src/test/java/io/confluent/ksql/test/planned/TestCaseSpecNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTo0Mzo1MVrOFsQSSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTo0Mzo1MVrOFsQSSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0ODQ4OQ==", "bodyText": "nit: commented out code.\nIf these can be null I'd recommend making them Optional.  (You can plug Java8 support into Jackson if the mapper you're using doesn't have this already).\nPlus, i'd recommend taking an immutable copy of the input.", "url": "https://github.com/confluentinc/ksql/pull/4598#discussion_r381948489", "createdAt": "2020-02-20T11:43:51Z", "author": {"login": "big-andy-coates"}, "path": "ksql-functional-tests/src/test/java/io/confluent/ksql/test/planned/TestCaseSpecNode.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package io.confluent.ksql.test.planned;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.confluent.ksql.test.model.RecordNode;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class TestCaseSpecNode {\n+  private final String version;\n+  private final long timestamp;\n+  private final Map<String, String> schemas;\n+  private final List<RecordNode> inputs;\n+  private final List<RecordNode> outputs;\n+\n+  public TestCaseSpecNode(\n+      @JsonProperty(\"version\") final String version,\n+      @JsonProperty(\"timestamp\") final long timestamp,\n+      @JsonProperty(\"schemas\") final Map<String, String> schemas,\n+      @JsonProperty(\"inputs\") final List<RecordNode> inputs,\n+      @JsonProperty(\"outputs\") final List<RecordNode> outputs\n+  ) {\n+    this.version = Objects.requireNonNull(version, \"version\");\n+    this.timestamp = timestamp;\n+    this.schemas = Objects.requireNonNull(schemas, \"schemas\");\n+    this.inputs = inputs; // Objects.requireNonNull(inputs, \"inputs\");\n+    this.outputs = outputs; // Objects.requireNonNull(outputs, \"outputs\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fe590f78dace55834e135c9c44470012155e2cd"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDQ3NjgxOnYy", "diffSide": "RIGHT", "path": "ksql-functional-tests/src/test/resources/historical_plans/array_-_GENERATE_SERIES/5.5.0_1581572083765/plan.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTo0NTozMVrOFsQVGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTo0NTozMVrOFsQVGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0OTIxMA==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              \"plan\" : [ {\n          \n          \n            \n              \"plans\" : [ {", "url": "https://github.com/confluentinc/ksql/pull/4598#discussion_r381949210", "createdAt": "2020-02-20T11:45:31Z", "author": {"login": "big-andy-coates"}, "path": "ksql-functional-tests/src/test/resources/historical_plans/array_-_GENERATE_SERIES/5.5.0_1581572083765/plan.json", "diffHunk": "@@ -0,0 +1,144 @@\n+{\n+  \"plan\" : [ {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fe590f78dace55834e135c9c44470012155e2cd"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDQ4MTY0OnYy", "diffSide": "RIGHT", "path": "ksql-functional-tests/src/test/resources/historical_plans/array_-_GENERATE_SERIES/5.5.0_1581572083765/plan.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTo0NzoxM1rOFsQYGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMTo0NzoxM1rOFsQYGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk0OTk3Nw==", "bodyText": "out of interest, why do we include the configs?  do we include the configs in the details persisted to the command topic too?\nWondering, as I thought the plan contained all the information needed to build the query, so the config seems superfluous.", "url": "https://github.com/confluentinc/ksql/pull/4598#discussion_r381949977", "createdAt": "2020-02-20T11:47:13Z", "author": {"login": "big-andy-coates"}, "path": "ksql-functional-tests/src/test/resources/historical_plans/array_-_GENERATE_SERIES/5.5.0_1581572083765/plan.json", "diffHunk": "@@ -0,0 +1,144 @@\n+{\n+  \"plan\" : [ {\n+    \"@type\" : \"ksqlPlanV1\",\n+    \"statementText\" : \"CREATE STREAM TEST (F0 INTEGER, F1 INTEGER) WITH (KAFKA_TOPIC='test_topic', VALUE_FORMAT='JSON');\",\n+    \"ddlCommand\" : {\n+      \"@type\" : \"createStreamV1\",\n+      \"sourceName\" : \"TEST\",\n+      \"schema\" : \"`ROWKEY` STRING KEY, `F0` INTEGER, `F1` INTEGER\",\n+      \"keyField\" : null,\n+      \"timestampColumn\" : null,\n+      \"topicName\" : \"test_topic\",\n+      \"formats\" : {\n+        \"keyFormat\" : {\n+          \"format\" : \"KAFKA\",\n+          \"properties\" : { }\n+        },\n+        \"valueFormat\" : {\n+          \"format\" : \"JSON\",\n+          \"properties\" : { }\n+        },\n+        \"options\" : [ ]\n+      },\n+      \"windowInfo\" : null\n+    },\n+    \"queryPlan\" : null\n+  }, {\n+    \"@type\" : \"ksqlPlanV1\",\n+    \"statementText\" : \"CREATE STREAM OUTPUT AS SELECT GENERATE_SERIES(TEST.F0, TEST.F1) KSQL_COL_0\\nFROM TEST TEST\\nEMIT CHANGES\",\n+    \"ddlCommand\" : {\n+      \"@type\" : \"createStreamV1\",\n+      \"sourceName\" : \"OUTPUT\",\n+      \"schema\" : \"`ROWKEY` STRING KEY, `KSQL_COL_0` ARRAY<INTEGER>\",\n+      \"keyField\" : null,\n+      \"timestampColumn\" : null,\n+      \"topicName\" : \"OUTPUT\",\n+      \"formats\" : {\n+        \"keyFormat\" : {\n+          \"format\" : \"KAFKA\",\n+          \"properties\" : { }\n+        },\n+        \"valueFormat\" : {\n+          \"format\" : \"JSON\",\n+          \"properties\" : { }\n+        },\n+        \"options\" : [ ]\n+      },\n+      \"windowInfo\" : null\n+    },\n+    \"queryPlan\" : {\n+      \"sources\" : [ \"TEST\" ],\n+      \"sink\" : \"OUTPUT\",\n+      \"physicalPlan\" : {\n+        \"@type\" : \"streamSinkV1\",\n+        \"properties\" : {\n+          \"queryContext\" : \"OUTPUT\"\n+        },\n+        \"source\" : {\n+          \"@type\" : \"streamSelectV1\",\n+          \"properties\" : {\n+            \"queryContext\" : \"Project\"\n+          },\n+          \"source\" : {\n+            \"@type\" : \"streamSourceV1\",\n+            \"properties\" : {\n+              \"queryContext\" : \"KsqlTopic/Source\"\n+            },\n+            \"topicName\" : \"test_topic\",\n+            \"formats\" : {\n+              \"keyFormat\" : {\n+                \"format\" : \"KAFKA\",\n+                \"properties\" : { }\n+              },\n+              \"valueFormat\" : {\n+                \"format\" : \"JSON\",\n+                \"properties\" : { }\n+              },\n+              \"options\" : [ ]\n+            },\n+            \"timestampColumn\" : null,\n+            \"sourceSchema\" : \"`ROWKEY` STRING KEY, `F0` INTEGER, `F1` INTEGER\"\n+          },\n+          \"selectExpressions\" : [ \"GENERATE_SERIES(F0, F1) AS KSQL_COL_0\" ]\n+        },\n+        \"formats\" : {\n+          \"keyFormat\" : {\n+            \"format\" : \"KAFKA\",\n+            \"properties\" : { }\n+          },\n+          \"valueFormat\" : {\n+            \"format\" : \"JSON\",\n+            \"properties\" : { }\n+          },\n+          \"options\" : [ ]\n+        },\n+        \"topicName\" : \"OUTPUT\"\n+      },\n+      \"queryId\" : \"CSAS_OUTPUT_0\"\n+    }\n+  } ],\n+  \"configs\" : {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fe590f78dace55834e135c9c44470012155e2cd"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1983, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}