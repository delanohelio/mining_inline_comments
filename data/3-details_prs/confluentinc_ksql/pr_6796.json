{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNjA2NjEy", "number": 6796, "title": "chore: support multi-col pull queries", "bodyText": "Description\nSupport pull queries on aggregations that aggregate over multiple key columns by requiring that all keys that make up the primary key are selected in the WHERE clause as a conjunction of equality expressions (e.g. WHERE K1=1 AND K2=2).\n\"In\" queries are not yet supported, there's some thinking to be done about how we can support that (cc @AlanConfluent perhaps we could do something like WHERE K1 IN (1, 2) AND K2 in (3,4) and this would find keys that make up the cross-product of those fields {1,3}, {1, 4}, {2, 3}, {2, 4})\nAlternatively, we could consider supporting OR in order to get multiple keys (e.g. WHERE (K1 = 1 AND K2 =2) OR (K1 = 3 AND K2 = 4)\nTesting done\n\nUnit testing\nQTT testing\ne2e testing (in progress)\n\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-12-17T05:11:38Z", "url": "https://github.com/confluentinc/ksql/pull/6796", "merged": true, "mergeCommit": {"oid": "63dcfda6b8332b4b785318bb0803bf94dc2d3a3c"}, "closed": true, "closedAt": "2020-12-18T00:29:53Z", "author": {"login": "agavra"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnHnoHAFqTU1NDg2MDcyMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnLwD8ABqjQxMjc0MDgyMjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0ODYwNzIx", "url": "https://github.com/confluentinc/ksql/pull/6796#pullrequestreview-554860721", "createdAt": "2020-12-17T18:09:19Z", "commit": {"oid": "d3c348e226e2d65daa0f2c6468b4521ef8192adb"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODowOToxOVrOIICR9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODoxMjoyNlrOIICZoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5Njg4Nw==", "bodyText": "Add negative tests to check that sane errors are thrown if not all primary keys are selected, or if a multi-column key schema is used with IN rather than equality? Might also be good to add a test for a windowed aggregate with multiple keys.", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545296887", "createdAt": "2020-12-17T18:09:19Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-functional-tests/src/test/resources/rest-query-validation-tests/pull-queries-against-materialized-aggregates.json", "diffHunk": "@@ -2002,6 +2002,28 @@\n           {\"row\":{\"columns\":[10, 1]}}\n         ]}\n       ]\n+    },\n+    {\n+      \"name\": \"multi-column aggregation\",\n+      \"properties\": {\n+        \"ksql.multicol.key.format.enabled\" : true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID1 STRING KEY, ID2 INT) WITH (kafka_topic='test_topic', format='JSON');\",\n+        \"CREATE TABLE AGGREGATE AS SELECT ID1, ID2, COUNT(1) AS COUNT FROM INPUT GROUP BY ID1, ID2;\",\n+        \"SELECT * FROM AGGREGATE WHERE ID1='11' AND ID2=10;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"timestamp\": 12345, \"key\": \"11\", \"value\": {\"id2\": 10}}\n+      ],\n+      \"responses\": [\n+        {\"admin\": {\"@type\": \"currentStatus\"}},\n+        {\"admin\": {\"@type\": \"currentStatus\"}},\n+        {\"query\": [\n+          {\"header\":{\"schema\":\"`ID1` STRING KEY, `ID2` INTEGER KEY, `COUNT` BIGINT\"}},\n+          {\"row\":{\"columns\":[\"11\", 10, 1]}}\n+        ]}\n+      ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c348e226e2d65daa0f2c6468b4521ef8192adb"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5Njk2Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldSupportMultiKeyExpressionsThatDontCoverAllKeys() {\n          \n          \n            \n              public void shouldNotSupportMultiKeyExpressionsThatDontCoverAllKeys() {", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545296963", "createdAt": "2020-12-17T18:09:28Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/physical/pull/operators/WhereInfoTest.java", "diffHunk": "@@ -700,13 +684,32 @@ public void shouldThrowOnMultiKeyExpressions() {\n         expression2\n     );\n \n+    // When:\n+    final WhereInfo where = WhereInfo.extractWhereInfo(expression, MULTI_KEY_SCHEMA, true, METASTORE, CONFIG);\n+\n+    // Then:\n+    assertThat(where.getKeysBound(), is(ImmutableList.of(GenericKey.genericKey(1, 2))));\n+  }\n+\n+\n+  @Test\n+  public void shouldSupportMultiKeyExpressionsThatDontCoverAllKeys() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c348e226e2d65daa0f2c6468b4521ef8192adb"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5NzUxNQ==", "bodyText": "Do we have plans to support this before 0.15? If not it might be good to slip a line calling out the limitation into the docs.", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545297515", "createdAt": "2020-12-17T18:10:22Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/physical/pull/operators/WhereInfo.java", "diffHunk": "@@ -185,38 +187,67 @@ public boolean isWindowed() {\n     return getWindowBounds().isPresent();\n   }\n \n-  private static List<Object> extractKeysFromInPredicate(\n+  private static List<GenericKey> extractKeysFromInPredicate(\n       final List<InPredicate> inPredicates,\n       final LogicalSchema schema,\n       final MetaStore metaStore,\n       final KsqlConfig config\n   ) {\n+    if (schema.key().size() > 1) {\n+      throw invalidWhereClauseException(\"Schemas with multiple \"\n+          + \"KEY columns are not supported\", false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c348e226e2d65daa0f2c6468b4521ef8192adb"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5ODEyOA==", "bodyText": "This notation is confusing to me since the additional key_column=key clauses need to be separated by the AND keyword, not commas as this notation suggests. I'm not sure what the canonical way to denote this is. Maybe\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              WHERE key_column=key [, ...]\n          \n          \n            \n              WHERE key_column=key [AND ...]\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545298128", "createdAt": "2020-12-17T18:11:25Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-reference/select-pull-query.md", "diffHunk": "@@ -15,7 +15,7 @@ Synopsis\n ```sql\r\n SELECT select_expr [, ...]\r\n   FROM aggregate_table\r\n-  WHERE key_column=key\r\n+  WHERE key_column=key [, ...]\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c348e226e2d65daa0f2c6468b4521ef8192adb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5ODg0OQ==", "bodyText": "Maybe add a line saying that all key columns must be present in the constraints? Unless we think that creates more confusion than it clears up.", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545298849", "createdAt": "2020-12-17T18:12:26Z", "author": {"login": "vcrfxia"}, "path": "docs/concepts/queries/pull.md", "diffHunk": "@@ -36,7 +36,7 @@ Pull query features and limitations\n   with a GROUP BY clause.\r\n - For non-windowed aggregations, pull queries only support looking up events\r\n   by key.\r\n-- WHERE clauses can only have constraints on the key column for non-windowed tables.\r\n+- WHERE clauses can only have constraints on the key column(s) for non-windowed tables.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c348e226e2d65daa0f2c6468b4521ef8192adb"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0ODgxNDc3", "url": "https://github.com/confluentinc/ksql/pull/6796#pullrequestreview-554881477", "createdAt": "2020-12-17T18:36:53Z", "commit": {"oid": "d3c348e226e2d65daa0f2c6468b4521ef8192adb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODozNjo1NFrOIIDWIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODozNjo1NFrOIIDWIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNDMzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the `pageviews_by_region` was created as an aggregation of multiple columns (e.g. `countryId`\n          \n          \n            \n            If the `pageviews_by_region` table was created as an aggregation of multiple columns,", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545314338", "createdAt": "2020-12-17T18:36:54Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-reference/select-pull-query.md", "diffHunk": "@@ -49,6 +49,15 @@ SELECT * FROM pageviews_by_region\n     AND 1570051876000 <= WINDOWSTART AND WINDOWEND <= 1570138276000;\r\n ```\r\n \r\n+If the `pageviews_by_region` was created as an aggregation of multiple columns (e.g. `countryId`\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c348e226e2d65daa0f2c6468b4521ef8192adb"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0ODgyOTA5", "url": "https://github.com/confluentinc/ksql/pull/6796#pullrequestreview-554882909", "createdAt": "2020-12-17T18:38:48Z", "commit": {"oid": "d3c348e226e2d65daa0f2c6468b4521ef8192adb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODozODo0OFrOIIDa8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODozODo0OFrOIIDa8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMxNTU2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            and `regionId`) then each key column must be present in the WHERE clause:\n          \n          \n            \n            then each key column must be present in the WHERE clause. The following example shows how to query the table by the `countryId` and `regionId` columns.", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545315569", "createdAt": "2020-12-17T18:38:48Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-reference/select-pull-query.md", "diffHunk": "@@ -49,6 +49,15 @@ SELECT * FROM pageviews_by_region\n     AND 1570051876000 <= WINDOWSTART AND WINDOWEND <= 1570138276000;\r\n ```\r\n \r\n+If the `pageviews_by_region` was created as an aggregation of multiple columns (e.g. `countryId`\r\n+and `regionId`) then each key column must be present in the WHERE clause:\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c348e226e2d65daa0f2c6468b4521ef8192adb"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0ODgzOTYx", "url": "https://github.com/confluentinc/ksql/pull/6796#pullrequestreview-554883961", "createdAt": "2020-12-17T18:39:59Z", "commit": {"oid": "d3c348e226e2d65daa0f2c6468b4521ef8192adb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0ODg2MzU2", "url": "https://github.com/confluentinc/ksql/pull/6796#pullrequestreview-554886356", "createdAt": "2020-12-17T18:43:15Z", "commit": {"oid": "d3c348e226e2d65daa0f2c6468b4521ef8192adb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0OTc5Nzk1", "url": "https://github.com/confluentinc/ksql/pull/6796#pullrequestreview-554979795", "createdAt": "2020-12-17T20:54:32Z", "commit": {"oid": "d3c348e226e2d65daa0f2c6468b4521ef8192adb"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMDo1NDozMlrOIIIZpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMTowNzo0NFrOIII1yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM5NzE1OA==", "bodyText": "You mean schemas with multiple key columns are not supported for use with in predicates, right? (After all this PR is meant to support exactly that using other expressions).  Maybe have the message mention in predicates?", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545397158", "createdAt": "2020-12-17T20:54:32Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/physical/pull/operators/WhereInfo.java", "diffHunk": "@@ -185,38 +187,67 @@ public boolean isWindowed() {\n     return getWindowBounds().isPresent();\n   }\n \n-  private static List<Object> extractKeysFromInPredicate(\n+  private static List<GenericKey> extractKeysFromInPredicate(\n       final List<InPredicate> inPredicates,\n       final LogicalSchema schema,\n       final MetaStore metaStore,\n       final KsqlConfig config\n   ) {\n+    if (schema.key().size() > 1) {\n+      throw invalidWhereClauseException(\"Schemas with multiple \"\n+          + \"KEY columns are not supported\", false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTI5NzUxNQ=="}, "originalCommit": {"oid": "d3c348e226e2d65daa0f2c6468b4521ef8192adb"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQwNDM2MA==", "bodyText": "I'm not super familiar with BitSet, but is this the number of unique bits or the highest bit value you have to account for?\nAnd are key column indexes guaranteed to be the first 0...N indexes or can they skip around?\nI'm just asking to to be sure this has the capacity and because I'm curious to learn the answers.  :-)", "url": "https://github.com/confluentinc/ksql/pull/6796#discussion_r545404360", "createdAt": "2020-12-17T21:07:44Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/physical/pull/operators/WhereInfo.java", "diffHunk": "@@ -185,38 +187,67 @@ public boolean isWindowed() {\n     return getWindowBounds().isPresent();\n   }\n \n-  private static List<Object> extractKeysFromInPredicate(\n+  private static List<GenericKey> extractKeysFromInPredicate(\n       final List<InPredicate> inPredicates,\n       final LogicalSchema schema,\n       final MetaStore metaStore,\n       final KsqlConfig config\n   ) {\n+    if (schema.key().size() > 1) {\n+      throw invalidWhereClauseException(\"Schemas with multiple \"\n+          + \"KEY columns are not supported\", false);\n+    }\n+\n     final InPredicate inPredicate = Iterables.getLast(inPredicates);\n     final Column keyColumn = Iterables.getOnlyElement(schema.key());\n     return inPredicate.getValueList()\n         .getValues()\n         .stream()\n         .map(expression -> resolveKey(expression, keyColumn, metaStore, config, inPredicate))\n+        .map(GenericKey::genericKey)\n         .collect(Collectors.toList());\n   }\n \n-  private static Object extractKeyWhereClause(\n+  private static GenericKey extractKeyWhereClause(\n       final List<ComparisonExpression> comparisons,\n       final boolean windowed,\n       final LogicalSchema schema,\n       final MetaStore metaStore,\n       final KsqlConfig config\n   ) {\n-    final ComparisonExpression comparison = Iterables.getLast(comparisons);\n-    if (comparison.getType() != Type.EQUAL) {\n-      final ColumnName keyColumn = Iterables.getOnlyElement(schema.key()).name();\n-      throw invalidWhereClauseException(\"Bound on '\" + keyColumn.text()\n-          + \"' must currently be '='\", windowed);\n+    final Object[] keyContents = new Object[schema.key().size()];\n+    final BitSet seenKeys = new BitSet(schema.key().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3c348e226e2d65daa0f2c6468b4521ef8192adb"}, "originalPosition": 124}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81c8e710d3202b9fcfa7edf6f8b85247e45230b5", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/81c8e710d3202b9fcfa7edf6f8b85247e45230b5", "committedDate": "2020-12-17T22:55:23Z", "message": "chore: support multi-col pull queries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "106f49ff2447b931d5d29ca9908e314800cd046f", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/106f49ff2447b931d5d29ca9908e314800cd046f", "committedDate": "2020-12-17T22:55:24Z", "message": "docs: add docs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d3c348e226e2d65daa0f2c6468b4521ef8192adb", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/d3c348e226e2d65daa0f2c6468b4521ef8192adb", "committedDate": "2020-12-17T17:43:50Z", "message": "docs: add docs"}, "afterCommit": {"oid": "424065ce84457414198fea17d25aa4770da0fc52", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/424065ce84457414198fea17d25aa4770da0fc52", "committedDate": "2020-12-17T22:55:37Z", "message": "chore: rebase"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "424065ce84457414198fea17d25aa4770da0fc52", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/424065ce84457414198fea17d25aa4770da0fc52", "committedDate": "2020-12-17T22:55:37Z", "message": "chore: rebase"}, "afterCommit": {"oid": "e6025c74489315e5c44ac5925a91035f444bc5b5", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/e6025c74489315e5c44ac5925a91035f444bc5b5", "committedDate": "2020-12-17T22:56:34Z", "message": "chore: rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85a5b3aff1f83e1f5098f7d83111905894317de5", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/85a5b3aff1f83e1f5098f7d83111905894317de5", "committedDate": "2020-12-17T23:01:37Z", "message": "chore: review comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e6025c74489315e5c44ac5925a91035f444bc5b5", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/e6025c74489315e5c44ac5925a91035f444bc5b5", "committedDate": "2020-12-17T22:56:34Z", "message": "chore: rebase"}, "afterCommit": {"oid": "85a5b3aff1f83e1f5098f7d83111905894317de5", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/85a5b3aff1f83e1f5098f7d83111905894317de5", "committedDate": "2020-12-17T23:01:37Z", "message": "chore: review comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4530, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}