{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNTY0NTA0", "number": 4701, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzo0NTowMFrODlJBLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODowMDozN1rODlJV3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjcxNjYzOnYy", "diffSide": "RIGHT", "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzo0NTowMFrOFx3MwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTo1NzozMlrOFyZU5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyODkyOQ==", "bodyText": "making sure that I understand correctly, this is partially implemented? shouldn't be able to set the rowkey name here to the column name either way?", "url": "https://github.com/confluentinc/ksql/pull/4701#discussion_r387828929", "createdAt": "2020-03-04T17:45:00Z", "author": {"login": "agavra"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "diffHunk": "@@ -409,26 +411,36 @@ private LogicalSchema buildAggregateSchema(\n       final PlanNode sourcePlanNode,\n       final List<Expression> groupByExps\n   ) {\n+    final LogicalSchema sourceSchema = sourcePlanNode.getSchema();\n+\n+    final ColumnName keyName;\n     final SqlType keyType;\n     if (groupByExps.size() != 1) {\n+      keyName = SchemaUtil.ROWKEY_NAME;\n       keyType = SqlTypes.STRING;\n     } else {\n+      final Expression expression = groupByExps.get(0);\n+\n+      keyName = exactlyMatchesKeyColumns(expression, sourceSchema)\n+          ? ((ColumnReferenceExp) expression).getColumnName()\n+          : SchemaUtil.ROWKEY_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "635aad75036f42d7a64007641aa514980af4372a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMDg5Mg==", "bodyText": "Yep. This is called out in the description.  This is WIP...", "url": "https://github.com/confluentinc/ksql/pull/4701#discussion_r388230892", "createdAt": "2020-03-05T11:19:05Z", "author": {"login": "big-andy-coates"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "diffHunk": "@@ -409,26 +411,36 @@ private LogicalSchema buildAggregateSchema(\n       final PlanNode sourcePlanNode,\n       final List<Expression> groupByExps\n   ) {\n+    final LogicalSchema sourceSchema = sourcePlanNode.getSchema();\n+\n+    final ColumnName keyName;\n     final SqlType keyType;\n     if (groupByExps.size() != 1) {\n+      keyName = SchemaUtil.ROWKEY_NAME;\n       keyType = SqlTypes.STRING;\n     } else {\n+      final Expression expression = groupByExps.get(0);\n+\n+      keyName = exactlyMatchesKeyColumns(expression, sourceSchema)\n+          ? ((ColumnReferenceExp) expression).getColumnName()\n+          : SchemaUtil.ROWKEY_NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyODkyOQ=="}, "originalCommit": {"oid": "635aad75036f42d7a64007641aa514980af4372a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM4ODA2OA==", "bodyText": "just making sure :)", "url": "https://github.com/confluentinc/ksql/pull/4701#discussion_r388388068", "createdAt": "2020-03-05T15:57:32Z", "author": {"login": "agavra"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "diffHunk": "@@ -409,26 +411,36 @@ private LogicalSchema buildAggregateSchema(\n       final PlanNode sourcePlanNode,\n       final List<Expression> groupByExps\n   ) {\n+    final LogicalSchema sourceSchema = sourcePlanNode.getSchema();\n+\n+    final ColumnName keyName;\n     final SqlType keyType;\n     if (groupByExps.size() != 1) {\n+      keyName = SchemaUtil.ROWKEY_NAME;\n       keyType = SqlTypes.STRING;\n     } else {\n+      final Expression expression = groupByExps.get(0);\n+\n+      keyName = exactlyMatchesKeyColumns(expression, sourceSchema)\n+          ? ((ColumnReferenceExp) expression).getColumnName()\n+          : SchemaUtil.ROWKEY_NAME;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyODkyOQ=="}, "originalCommit": {"oid": "635aad75036f42d7a64007641aa514980af4372a"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjczOTMyOnYy", "diffSide": "RIGHT", "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/plan/KsqlStructuredDataOutputNode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzo1MTozMVrOFx3a8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMToxOTo1NlrOFyPwXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzMjU2MQ==", "bodyText": "if we have this, do we need #4697?", "url": "https://github.com/confluentinc/ksql/pull/4701#discussion_r387832561", "createdAt": "2020-03-04T17:51:31Z", "author": {"login": "agavra"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/plan/KsqlStructuredDataOutputNode.java", "diffHunk": "@@ -123,4 +129,19 @@ public KeyField getKeyField() {\n         getTimestampColumn()\n     );\n   }\n+\n+  private void validate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "635aad75036f42d7a64007641aa514980af4372a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMTI2MA==", "bodyText": "Maybe not. But #4697 makes things explicit.  I'm not 100% convinced its an improvement or just noise though...", "url": "https://github.com/confluentinc/ksql/pull/4701#discussion_r388231260", "createdAt": "2020-03-05T11:19:56Z", "author": {"login": "big-andy-coates"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/plan/KsqlStructuredDataOutputNode.java", "diffHunk": "@@ -123,4 +129,19 @@ public KeyField getKeyField() {\n         getTimestampColumn()\n     );\n   }\n+\n+  private void validate() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzMjU2MQ=="}, "originalCommit": {"oid": "635aad75036f42d7a64007641aa514980af4372a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjc2OTU4OnYy", "diffSide": "RIGHT", "path": "ksql-functional-tests/src/test/resources/query-validation-tests/elements.json", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODowMDozN1rOFx3uGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo1NDoyOFrOFzsBzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzNzQ2Nw==", "bodyText": "I think as part of this error message we should explain the semantics (that K will be available in the key schema)", "url": "https://github.com/confluentinc/ksql/pull/4701#discussion_r387837467", "createdAt": "2020-03-04T18:00:37Z", "author": {"login": "agavra"}, "path": "ksql-functional-tests/src/test/resources/query-validation-tests/elements.json", "diffHunk": "@@ -574,10 +602,30 @@\n         \"CREATE STREAM OUTPUT AS SELECT ROWKEY FROM INPUT;\"\n       ],\n       \"expectedException\": {\n-        \"type\": \"io.confluent.ksql.util.KsqlException\",\n+        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n         \"message\": \"Reserved column name in select: `ROWKEY`. Please remove or alias the column.\"\n       }\n     },\n+    {\n+      \"name\": \"non-join should reject KEY column name in projection\",\n+      \"comments\": [\n+        \"changes to the ksql query semantics are required to allow this.\",\n+        \"At the moment, the key schema passes through the select un-changed.\",\n+        \"which means the key column in the projection is added to the value schema\",\n+        \"but the name of the column clashes with the key column, resulting in an error\"\n+      ],\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K INT KEY, F0 INT) WITH (kafka_topic='input', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT AS SELECT K FROM INPUT;\"\n+      ],\n+      \"properties\": {\n+        \"ksql.any.key.name.enabled\": true\n+      },\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n+        \"message\": \"Value column name(s) `K` clashes with key column name(s).\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c6b03af5e7792f9890256e71ed15b52fdcdf224"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIzMjMxNQ==", "bodyText": "Not sure I follow.   What is it you're looking for?\nIt's already saying the value column name clashes with the key column name...\nI don't think it's always safe to say the data held in K will be available via the key column of the same name: it could be completely different data, just aliased to K.", "url": "https://github.com/confluentinc/ksql/pull/4701#discussion_r388232315", "createdAt": "2020-03-05T11:22:07Z", "author": {"login": "big-andy-coates"}, "path": "ksql-functional-tests/src/test/resources/query-validation-tests/elements.json", "diffHunk": "@@ -574,10 +602,30 @@\n         \"CREATE STREAM OUTPUT AS SELECT ROWKEY FROM INPUT;\"\n       ],\n       \"expectedException\": {\n-        \"type\": \"io.confluent.ksql.util.KsqlException\",\n+        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n         \"message\": \"Reserved column name in select: `ROWKEY`. Please remove or alias the column.\"\n       }\n     },\n+    {\n+      \"name\": \"non-join should reject KEY column name in projection\",\n+      \"comments\": [\n+        \"changes to the ksql query semantics are required to allow this.\",\n+        \"At the moment, the key schema passes through the select un-changed.\",\n+        \"which means the key column in the projection is added to the value schema\",\n+        \"but the name of the column clashes with the key column, resulting in an error\"\n+      ],\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K INT KEY, F0 INT) WITH (kafka_topic='input', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT AS SELECT K FROM INPUT;\"\n+      ],\n+      \"properties\": {\n+        \"ksql.any.key.name.enabled\": true\n+      },\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n+        \"message\": \"Value column name(s) `K` clashes with key column name(s).\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzNzQ2Nw=="}, "originalCommit": {"oid": "6c6b03af5e7792f9890256e71ed15b52fdcdf224"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0MzA1NQ==", "bodyText": "Concerns about error message hopefully addressed in #4739", "url": "https://github.com/confluentinc/ksql/pull/4701#discussion_r389743055", "createdAt": "2020-03-09T14:54:28Z", "author": {"login": "big-andy-coates"}, "path": "ksql-functional-tests/src/test/resources/query-validation-tests/elements.json", "diffHunk": "@@ -574,10 +602,30 @@\n         \"CREATE STREAM OUTPUT AS SELECT ROWKEY FROM INPUT;\"\n       ],\n       \"expectedException\": {\n-        \"type\": \"io.confluent.ksql.util.KsqlException\",\n+        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n         \"message\": \"Reserved column name in select: `ROWKEY`. Please remove or alias the column.\"\n       }\n     },\n+    {\n+      \"name\": \"non-join should reject KEY column name in projection\",\n+      \"comments\": [\n+        \"changes to the ksql query semantics are required to allow this.\",\n+        \"At the moment, the key schema passes through the select un-changed.\",\n+        \"which means the key column in the projection is added to the value schema\",\n+        \"but the name of the column clashes with the key column, resulting in an error\"\n+      ],\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K INT KEY, F0 INT) WITH (kafka_topic='input', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT AS SELECT K FROM INPUT;\"\n+      ],\n+      \"properties\": {\n+        \"ksql.any.key.name.enabled\": true\n+      },\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n+        \"message\": \"Value column name(s) `K` clashes with key column name(s).\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzNzQ2Nw=="}, "originalCommit": {"oid": "6c6b03af5e7792f9890256e71ed15b52fdcdf224"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2039, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}