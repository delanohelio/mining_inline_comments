{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyNDU1NTYy", "number": 6166, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODozOTozNFrOEhzlpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDowODo1NFrOEmPw-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODgzNjg0OnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/DefaultKsqlParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODozOTozNFrOHPU7jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQyMzo1MDo0MVrOHQwpDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzMzYxNA==", "bodyText": "It's better if you create a new class that has a list of the non-reserved keywords and then create there a method that returns all the not-allowed-to-use keywords by using also the SqlBaseParser.VOCABULARY. This way, if we ever need to use them in other places, we don't have to hardcode them again. It will make the code reusable and extendable. You can call the class KsqlParserUtils and have it public.", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r485833614", "createdAt": "2020-09-09T18:39:34Z", "author": {"login": "vpapavas"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/DefaultKsqlParser.java", "diffHunk": "@@ -130,4 +144,103 @@ private static String getStatementString(final SingleStatementContext singleStat\n         singleStatementContext.stop.getStopIndex()\n     ));\n   }\n+\n+  //checks if the error is a reserved keyword error by checking the message and offendingSymbol\n+  private static boolean isKeywordError(final String message, final Object offendingSymbol) {\n+    final String tokenName = ((CommonToken) offendingSymbol).getText().toLowerCase();\n+\n+    final Pattern keywordPattern = Pattern.compile(\"extraneous input.*expecting.*\");\n+    final Matcher m = keywordPattern.matcher(message);\n+    return reservedKeywords.contains(tokenName) && m.find();\n+  }\n+\n+  //Set of keywords minus the non-reserved ones\n+  private static final HashSet<String> reservedKeywords = new HashSet<>(Arrays.asList(\"advance\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "549c6e6b927d70a5218b4bde78c18606acbd09ef"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzMzNjIwNQ==", "bodyText": "added", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r487336205", "createdAt": "2020-09-11T23:50:41Z", "author": {"login": "cprasad1"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/DefaultKsqlParser.java", "diffHunk": "@@ -130,4 +144,103 @@ private static String getStatementString(final SingleStatementContext singleStat\n         singleStatementContext.stop.getStopIndex()\n     ));\n   }\n+\n+  //checks if the error is a reserved keyword error by checking the message and offendingSymbol\n+  private static boolean isKeywordError(final String message, final Object offendingSymbol) {\n+    final String tokenName = ((CommonToken) offendingSymbol).getText().toLowerCase();\n+\n+    final Pattern keywordPattern = Pattern.compile(\"extraneous input.*expecting.*\");\n+    final Matcher m = keywordPattern.matcher(message);\n+    return reservedKeywords.contains(tokenName) && m.find();\n+  }\n+\n+  //Set of keywords minus the non-reserved ones\n+  private static final HashSet<String> reservedKeywords = new HashSet<>(Arrays.asList(\"advance\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzMzYxNA=="}, "originalCommit": {"oid": "549c6e6b927d70a5218b4bde78c18606acbd09ef"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODQ3OTg1OnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/KsqlParserUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDoyODowNFrOHQxCnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDoyODowNFrOHQxCnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0Mjc0OQ==", "bodyText": "we should build this once statically and reuse it - no need to build it every time this method is called. And we should also refactor FunctionNameValidator so that this code is reused instead of copy-pasting it", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r487342749", "createdAt": "2020-09-12T00:28:04Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/KsqlParserUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.parser;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.antlr.v4.runtime.CharStreams;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.Vocabulary;\n+\n+public final class KsqlParserUtil {\n+\n+  private KsqlParserUtil() {\n+  }\n+\n+  public static boolean isReserved(final String token) {\n+\n+    final SqlBaseLexer sqlBaseLexer = new SqlBaseLexer(\n+            new CaseInsensitiveStream(CharStreams.fromString(token)));\n+    final CommonTokenStream tokenStream = new CommonTokenStream(sqlBaseLexer);\n+    final SqlBaseParser sqlBaseParser = new SqlBaseParser(tokenStream);\n+\n+    final SqlBaseParser.NonReservedContext nonReservedContext = sqlBaseParser.nonReserved();\n+    if (nonReservedContext.exception == null) {\n+      // if the token does not match \"nonReserved\", then we expect the above\n+      // method call to \"throw\" an exception\n+      return false;\n+    }\n+\n+    // this part was taken directly from FunctionNameValidator\n+    final Vocabulary vocabulary = SqlBaseParser.VOCABULARY;\n+    final int tokens = vocabulary.getMaxTokenType();\n+    final ImmutableSet.Builder<String> builder = ImmutableSet.builder();\n+\n+    for (int i = 0; i < tokens; i++) {\n+      final String symbolicName = vocabulary.getSymbolicName(i);\n+      if (symbolicName != null) {\n+        final String keyWord = symbolicName.toLowerCase();\n+        builder.add(keyWord);\n+      }\n+    }\n+\n+    final ImmutableSet<String> allVocab = builder.build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ea950bc6f4f74a449a24329df7de3b62ce01d2"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODQ4MTA2OnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/KsqlParserUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDoyOToxMlrOHQxDOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDoyOToxMlrOHQxDOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0MjkwNw==", "bodyText": "we should make sure to remove the normal error listeners, otherwise whenever we call this (expecting an error) it'll get logged to stdout", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r487342907", "createdAt": "2020-09-12T00:29:12Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/KsqlParserUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.parser;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.antlr.v4.runtime.CharStreams;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.Vocabulary;\n+\n+public final class KsqlParserUtil {\n+\n+  private KsqlParserUtil() {\n+  }\n+\n+  public static boolean isReserved(final String token) {\n+\n+    final SqlBaseLexer sqlBaseLexer = new SqlBaseLexer(\n+            new CaseInsensitiveStream(CharStreams.fromString(token)));\n+    final CommonTokenStream tokenStream = new CommonTokenStream(sqlBaseLexer);\n+    final SqlBaseParser sqlBaseParser = new SqlBaseParser(tokenStream);\n+\n+    final SqlBaseParser.NonReservedContext nonReservedContext = sqlBaseParser.nonReserved();\n+    if (nonReservedContext.exception == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ea950bc6f4f74a449a24329df7de3b62ce01d2"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODQ4MjMyOnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/KsqlParserUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDozMDoxNlrOHQxD5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOToyNzowMFrOHTBHyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0MzA3OQ==", "bodyText": "I would spend some time with a debugger and see if there's another way we can check if this doesn't match other than if there's an exception. There might be a cleaner way, I just hacked this together really quickly to prove that it was possible. Let me know if you can't find anything", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r487343079", "createdAt": "2020-09-12T00:30:16Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/KsqlParserUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.parser;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.antlr.v4.runtime.CharStreams;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.Vocabulary;\n+\n+public final class KsqlParserUtil {\n+\n+  private KsqlParserUtil() {\n+  }\n+\n+  public static boolean isReserved(final String token) {\n+\n+    final SqlBaseLexer sqlBaseLexer = new SqlBaseLexer(\n+            new CaseInsensitiveStream(CharStreams.fromString(token)));\n+    final CommonTokenStream tokenStream = new CommonTokenStream(sqlBaseLexer);\n+    final SqlBaseParser sqlBaseParser = new SqlBaseParser(tokenStream);\n+\n+    final SqlBaseParser.NonReservedContext nonReservedContext = sqlBaseParser.nonReserved();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ea950bc6f4f74a449a24329df7de3b62ce01d2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcwMzM2OQ==", "bodyText": "This seems to be the only way to do it for me. Tried to condense it down (seems to be a lot of work for checking something simple)", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r489703369", "createdAt": "2020-09-16T19:27:00Z", "author": {"login": "cprasad1"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/KsqlParserUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.parser;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.antlr.v4.runtime.CharStreams;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.Vocabulary;\n+\n+public final class KsqlParserUtil {\n+\n+  private KsqlParserUtil() {\n+  }\n+\n+  public static boolean isReserved(final String token) {\n+\n+    final SqlBaseLexer sqlBaseLexer = new SqlBaseLexer(\n+            new CaseInsensitiveStream(CharStreams.fromString(token)));\n+    final CommonTokenStream tokenStream = new CommonTokenStream(sqlBaseLexer);\n+    final SqlBaseParser sqlBaseParser = new SqlBaseParser(tokenStream);\n+\n+    final SqlBaseParser.NonReservedContext nonReservedContext = sqlBaseParser.nonReserved();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0MzA3OQ=="}, "originalCommit": {"oid": "e0ea950bc6f4f74a449a24329df7de3b62ce01d2"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODQ4MzQ1OnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/KsqlParserUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDozMTowMFrOHQxEdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDozMTowMFrOHQxEdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0MzIyMA==", "bodyText": "nit: javadoc :)", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r487343220", "createdAt": "2020-09-12T00:31:00Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/KsqlParserUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.parser;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.antlr.v4.runtime.CharStreams;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.Vocabulary;\n+\n+public final class KsqlParserUtil {\n+\n+  private KsqlParserUtil() {\n+  }\n+\n+  public static boolean isReserved(final String token) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ea950bc6f4f74a449a24329df7de3b62ce01d2"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODQ4Mzk1OnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/KsqlParserUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDozMToyMVrOHQxEtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDozMToyMVrOHQxEtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0MzI4Nw==", "bodyText": "super nit: I think ParserUtil is probably fine (I don't like the pattern of adding Ksql in front of everything \ud83d\ude02 )\nand in fact, I think there's already a ParserUtil class that we can just pop this into", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r487343287", "createdAt": "2020-09-12T00:31:21Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/KsqlParserUtil.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.parser;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.antlr.v4.runtime.CharStreams;\n+import org.antlr.v4.runtime.CommonTokenStream;\n+import org.antlr.v4.runtime.Vocabulary;\n+\n+public final class KsqlParserUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ea950bc6f4f74a449a24329df7de3b62ce01d2"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODQ4NTE2OnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/DefaultKsqlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDozMjoxNlrOHQxFYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDozMjoxNlrOHQxFYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0MzQ1OA==", "bodyText": "nit: should be javadoc, not comment", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r487343458", "createdAt": "2020-09-12T00:32:16Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/DefaultKsqlParser.java", "diffHunk": "@@ -130,4 +142,14 @@ private static String getStatementString(final SingleStatementContext singleStat\n         singleStatementContext.stop.getStopIndex()\n     ));\n   }\n+\n+  //checks if the error is a reserved keyword error by checking the message and offendingSymbol", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ea950bc6f4f74a449a24329df7de3b62ce01d2"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODQ4NTgxOnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/DefaultKsqlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDozMjo1NVrOHQxFxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDozMjo1NVrOHQxFxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0MzU1Ng==", "bodyText": "nit: this pattern should be compiled once and reused", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r487343556", "createdAt": "2020-09-12T00:32:55Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/DefaultKsqlParser.java", "diffHunk": "@@ -130,4 +142,14 @@ private static String getStatementString(final SingleStatementContext singleStat\n         singleStatementContext.stop.getStopIndex()\n     ));\n   }\n+\n+  //checks if the error is a reserved keyword error by checking the message and offendingSymbol\n+  private static boolean isKeywordError(final String message, final Object offendingSymbol) {\n+    final String tokenName = ((CommonToken) offendingSymbol).getText().toLowerCase();\n+\n+    final Pattern keywordPattern = Pattern.compile(\"extraneous input.*expecting.*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ea950bc6f4f74a449a24329df7de3b62ce01d2"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODQ4NjEzOnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/DefaultKsqlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDozMzoyNVrOHQxF-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDozMzoyNVrOHQxF-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0MzYxMQ==", "bodyText": "nit: we should flip the order here. m.find() is probably significantly cheaper than going through the full blown parser rules\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return KsqlParserUtil.isReserved(tokenName) && m.find();\n          \n          \n            \n                return m.find() && KsqlParserUtil.isReserved(tokenName);", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r487343611", "createdAt": "2020-09-12T00:33:25Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/DefaultKsqlParser.java", "diffHunk": "@@ -130,4 +142,14 @@ private static String getStatementString(final SingleStatementContext singleStat\n         singleStatementContext.stop.getStopIndex()\n     ));\n   }\n+\n+  //checks if the error is a reserved keyword error by checking the message and offendingSymbol\n+  private static boolean isKeywordError(final String message, final Object offendingSymbol) {\n+    final String tokenName = ((CommonToken) offendingSymbol).getText().toLowerCase();\n+\n+    final Pattern keywordPattern = Pattern.compile(\"extraneous input.*expecting.*\");\n+    final Matcher m = keywordPattern.matcher(message);\n+    return KsqlParserUtil.isReserved(tokenName) && m.find();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ea950bc6f4f74a449a24329df7de3b62ce01d2"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODQ4NzE4OnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/DefaultKsqlParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDozNDozOFrOHQxGlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOTo0OTowNFrOHTB1kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0Mzc2NQ==", "bodyText": "we should have an instanceOf check here - are we sure that for all exceptions the offendingSymbol is a CommonToken? What happens if it's not a CommonToken?\nAlso we should use Token instead of CommonToken as it's more resilient to underlying implementation changes", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r487343765", "createdAt": "2020-09-12T00:34:38Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/DefaultKsqlParser.java", "diffHunk": "@@ -130,4 +142,14 @@ private static String getStatementString(final SingleStatementContext singleStat\n         singleStatementContext.stop.getStopIndex()\n     ));\n   }\n+\n+  //checks if the error is a reserved keyword error by checking the message and offendingSymbol\n+  private static boolean isKeywordError(final String message, final Object offendingSymbol) {\n+    final String tokenName = ((CommonToken) offendingSymbol).getText().toLowerCase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ea950bc6f4f74a449a24329df7de3b62ce01d2"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxNTA5MQ==", "bodyText": "if it is not a Token then we should just return false as if the underlying error happens to be a reservedKeywordError then it has to be a Token so we would just default to the default error handling procedure if that isn't the case", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r489715091", "createdAt": "2020-09-16T19:49:04Z", "author": {"login": "cprasad1"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/DefaultKsqlParser.java", "diffHunk": "@@ -130,4 +142,14 @@ private static String getStatementString(final SingleStatementContext singleStat\n         singleStatementContext.stop.getStopIndex()\n     ));\n   }\n+\n+  //checks if the error is a reserved keyword error by checking the message and offendingSymbol\n+  private static boolean isKeywordError(final String message, final Object offendingSymbol) {\n+    final String tokenName = ((CommonToken) offendingSymbol).getText().toLowerCase();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0Mzc2NQ=="}, "originalCommit": {"oid": "e0ea950bc6f4f74a449a24329df7de3b62ce01d2"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODQ4ODQxOnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/DefaultKsqlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDozNToyNVrOHQxHLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwMDozNToyNVrOHQxHLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM0MzkxNw==", "bodyText": "since we're doing this exact check down inside isKeywordError we should just pull it out here and pass in the text directly", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r487343917", "createdAt": "2020-09-12T00:35:25Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/DefaultKsqlParser.java", "diffHunk": "@@ -47,7 +51,15 @@ public void syntaxError(\n         final String message,\n         final RecognitionException e\n     ) {\n-      throw new ParsingException(message, e, line, charPositionInLine);\n+      //Checks if the error is a reserved keyword error\n+      if (isKeywordError(message, offendingSymbol)) {\n+        final String tokenName = ((CommonToken) offendingSymbol).getText();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0ea950bc6f4f74a449a24329df7de3b62ce01d2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDgwMTIxOnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/util/ParserKeywordValidatorUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMDoxMzoyMlrOHTIUrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMDo0NjoyM1rOHTI3Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgyMTM1OQ==", "bodyText": "Could you move the comment to the method used for checking the function name and change the class javadoc to be that the class provides methods for checking whether keywords are java or ksql reserved?", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r489821359", "createdAt": "2020-09-17T00:13:22Z", "author": {"login": "vpapavas"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/util/ParserKeywordValidatorUtil.java", "diffHunk": "@@ -26,9 +26,10 @@\n /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d3dd50aac98540d2e3ada3e85003c1897e705b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgzMDE2Mg==", "bodyText": "done", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r489830162", "createdAt": "2020-09-17T00:46:23Z", "author": {"login": "cprasad1"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/util/ParserKeywordValidatorUtil.java", "diffHunk": "@@ -26,9 +26,10 @@\n /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgyMTM1OQ=="}, "originalCommit": {"oid": "c8d3dd50aac98540d2e3ada3e85003c1897e705b"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDgwODUwOnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/util/ParserUtil.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMDoxNzoyNlrOHTIYxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODoyMjozMlrOHTvqyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgyMjQwNg==", "bodyText": "I am a bit confused about the double negation in the comment :P If the token is a reserved token, then there will be an exception thrown?", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r489822406", "createdAt": "2020-09-17T00:17:26Z", "author": {"login": "vpapavas"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/util/ParserUtil.java", "diffHunk": "@@ -212,4 +220,31 @@ public static JsonObject convertJsonFieldCase(final JsonObject obj) {\n     }\n     return new JsonObject(convertedMap);\n   }\n+\n+  /**\n+   * Checks if the token is a reserved keyword or not\n+   * @param token the String that caused the parsing error\n+   * @return true if the token is a reserved keyword according to SqlBase.g4\n+   *         false otherwise\n+   */\n+  public static boolean isReserved(final String token) {\n+\n+    final SqlBaseLexer sqlBaseLexer = new SqlBaseLexer(\n+            new CaseInsensitiveStream(CharStreams.fromString(token)));\n+    final CommonTokenStream tokenStream = new CommonTokenStream(sqlBaseLexer);\n+    final SqlBaseParser sqlBaseParser = new SqlBaseParser(tokenStream);\n+\n+    sqlBaseParser.removeErrorListeners();\n+\n+    final SqlBaseParser.NonReservedContext nonReservedContext = sqlBaseParser.nonReserved();\n+    if (nonReservedContext.exception == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8d3dd50aac98540d2e3ada3e85003c1897e705b"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgzOTI5Ng==", "bodyText": "If we call nonReservedWord and if it successfully parses, then we just parsed through a nonReserved word as defined in SqlBase.g4. if it fails (throws an exception) then it still has the potential to be reserved and we continue checking for that. @agavra  is this assessment correct?", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r489839296", "createdAt": "2020-09-17T01:03:50Z", "author": {"login": "cprasad1"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/util/ParserUtil.java", "diffHunk": "@@ -212,4 +220,31 @@ public static JsonObject convertJsonFieldCase(final JsonObject obj) {\n     }\n     return new JsonObject(convertedMap);\n   }\n+\n+  /**\n+   * Checks if the token is a reserved keyword or not\n+   * @param token the String that caused the parsing error\n+   * @return true if the token is a reserved keyword according to SqlBase.g4\n+   *         false otherwise\n+   */\n+  public static boolean isReserved(final String token) {\n+\n+    final SqlBaseLexer sqlBaseLexer = new SqlBaseLexer(\n+            new CaseInsensitiveStream(CharStreams.fromString(token)));\n+    final CommonTokenStream tokenStream = new CommonTokenStream(sqlBaseLexer);\n+    final SqlBaseParser sqlBaseParser = new SqlBaseParser(tokenStream);\n+\n+    sqlBaseParser.removeErrorListeners();\n+\n+    final SqlBaseParser.NonReservedContext nonReservedContext = sqlBaseParser.nonReserved();\n+    if (nonReservedContext.exception == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgyMjQwNg=="}, "originalCommit": {"oid": "c8d3dd50aac98540d2e3ada3e85003c1897e705b"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwNTIxMw==", "bodyText": "yes, your comment here is better written than the way I phrased it originally! I think Vicky is right perhaps we should have the contrapositive of what I wrote:\nif no exception was \"thrown\" when calling the nonReserved rule, then this word matches that rule and is not reserved", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r490405213", "createdAt": "2020-09-17T16:40:06Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/util/ParserUtil.java", "diffHunk": "@@ -212,4 +220,31 @@ public static JsonObject convertJsonFieldCase(final JsonObject obj) {\n     }\n     return new JsonObject(convertedMap);\n   }\n+\n+  /**\n+   * Checks if the token is a reserved keyword or not\n+   * @param token the String that caused the parsing error\n+   * @return true if the token is a reserved keyword according to SqlBase.g4\n+   *         false otherwise\n+   */\n+  public static boolean isReserved(final String token) {\n+\n+    final SqlBaseLexer sqlBaseLexer = new SqlBaseLexer(\n+            new CaseInsensitiveStream(CharStreams.fromString(token)));\n+    final CommonTokenStream tokenStream = new CommonTokenStream(sqlBaseLexer);\n+    final SqlBaseParser sqlBaseParser = new SqlBaseParser(tokenStream);\n+\n+    sqlBaseParser.removeErrorListeners();\n+\n+    final SqlBaseParser.NonReservedContext nonReservedContext = sqlBaseParser.nonReserved();\n+    if (nonReservedContext.exception == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgyMjQwNg=="}, "originalCommit": {"oid": "c8d3dd50aac98540d2e3ada3e85003c1897e705b"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ2NTk5NA==", "bodyText": "ok done", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r490465994", "createdAt": "2020-09-17T18:22:32Z", "author": {"login": "cprasad1"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/util/ParserUtil.java", "diffHunk": "@@ -212,4 +220,31 @@ public static JsonObject convertJsonFieldCase(final JsonObject obj) {\n     }\n     return new JsonObject(convertedMap);\n   }\n+\n+  /**\n+   * Checks if the token is a reserved keyword or not\n+   * @param token the String that caused the parsing error\n+   * @return true if the token is a reserved keyword according to SqlBase.g4\n+   *         false otherwise\n+   */\n+  public static boolean isReserved(final String token) {\n+\n+    final SqlBaseLexer sqlBaseLexer = new SqlBaseLexer(\n+            new CaseInsensitiveStream(CharStreams.fromString(token)));\n+    final CommonTokenStream tokenStream = new CommonTokenStream(sqlBaseLexer);\n+    final SqlBaseParser sqlBaseParser = new SqlBaseParser(tokenStream);\n+\n+    sqlBaseParser.removeErrorListeners();\n+\n+    final SqlBaseParser.NonReservedContext nonReservedContext = sqlBaseParser.nonReserved();\n+    if (nonReservedContext.exception == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgyMjQwNg=="}, "originalCommit": {"oid": "c8d3dd50aac98540d2e3ada3e85003c1897e705b"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTM5MTU5OnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/util/ParserUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDowNzoxNFrOHWKeEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDowNzoxNFrOHWKeEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMjI1Nw==", "bodyText": "we usually suppress checkstyle warnings with comments instead of @SuppressWarnings for example:\n  // CHECKSTYLE_RULES.OFF: ClassDataAbstractionCoupling\n  public final class ParserUtil {\n    // CHECKSTYLE_RULES.ON: ClassDataAbstractionCoupling", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r493002257", "createdAt": "2020-09-22T20:07:14Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/util/ParserUtil.java", "diffHunk": "@@ -37,11 +39,15 @@\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.regex.Pattern;\n+import org.antlr.v4.runtime.CharStreams;\n+import org.antlr.v4.runtime.CommonTokenStream;\n import org.antlr.v4.runtime.ParserRuleContext;\n import org.antlr.v4.runtime.Token;\n import org.antlr.v4.runtime.tree.TerminalNode;\n \n+@SuppressWarnings(\"checkstyle:ClassDataAbstractionCoupling\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e593bcb4c98b72b99ea017fea2c3a6d840adcbde"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTM5NjQzOnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/DefaultKsqlParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDowODo1NFrOHWKhTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDowODo1NFrOHWKhTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMzA4NQ==", "bodyText": "maybe also suggest to the user that escaping it will work:\ncreate stream `size` as select ...\nthat will work", "url": "https://github.com/confluentinc/ksql/pull/6166#discussion_r493003085", "createdAt": "2020-09-22T20:08:54Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/DefaultKsqlParser.java", "diffHunk": "@@ -47,7 +50,16 @@ public void syntaxError(\n         final String message,\n         final RecognitionException e\n     ) {\n-      throw new ParsingException(message, e, line, charPositionInLine);\n+      if (offendingSymbol instanceof Token && isKeywordError(\n+              message, ((Token) offendingSymbol).getText())) {\n+        //Checks if the error is a reserved keyword error\n+        final String tokenName = ((Token) offendingSymbol).getText();\n+        final String newMessage =\n+                \"\\\"\" + tokenName + \"\\\" is a reserved keyword and it can't be used as an identifier\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e593bcb4c98b72b99ea017fea2c3a6d840adcbde"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2743, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}