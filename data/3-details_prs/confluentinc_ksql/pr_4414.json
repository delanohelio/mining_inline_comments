{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NTI0ODA4", "number": 4414, "title": "refactor: fix GenericRow encapsulation", "bodyText": "Description\nNote: stacked on top of #4412: please review that first.\nThe GenericRow that is so pervasive through the code has always been a bit of a mess:\n\nit's untyped: just a list of objects.\nit has verbose toString implementation.\nit has a weird equals, which is also out of whack with its hashCode.\nit leaks its internal state like crazy: i.e. it breaks encapsulation. It was basically a very leaky wrapper around a List<Object>.\n\nFollowing on from #4412, which added some new functionality to GenericRow, I couldn't resist spending some time fixing some of these issues.\nThis change fixes all but the first issue. It:\n\nsimplifies toString impl, removing array type handling, (which prod code doesn't use).\nNote: toString is not called in prod code that I can tell, it's just for debugging.\nremoves funkiness from equals. Looks like equals is also only called from tests.\nit fixes encapsulations: it no longer leaks mutable internal state via getColumns or constructors not taking defensive copies.  Mutating the state now requires explicit invocation of GenericRow methods. It's use of List<Object> internally is now an implementation detail, as it should be.\n\nThis change does not fix the fact that GenericRow is untyped.\nTo facilitate this change KudafAggregator has also been updated to accept the number of non-aggregate columns, rather than a list of non-aggregate column indexes. This is possible as the list of indexes was always sequential and zero-based, e.g. [0, 1, 2].\nHow to review\nThe first three commits are from #4412, so ignore them.\nThe next commit, refactor: fix GenericRow encapsulation, contains the main code change:\n\nStart by looking at the changes to GenericRow.\nThen look at KudafAggregator, which has been simplified to allow GenericRow to only have an efficient append method,  rather than allowing insertion of new elements at arbitrary indexes.  Note: the old code would of blown up if the indexes were out of order anyway as the index would have been out of bounds.\nThe look at the other places where GenericRow is being created.  The old code tended to create an ArrayList of values and then create a GenericRow from these.  The new code treats GenericRow as a first class citizen, creating and manipulating that. Never knowing it's still an ArrayList internally: better abstraction and encapsulation.\n\nThe next commit, chore: all the rest, contains all the associated changes to production code due to change of function names etc, and to any test code.\nThe next commit, chore: refactor undo aggregator, simplifies KsqlUndoAggregator in the same way as KudafAggregator above, thereby allowing AggregateParamsFactory to be simplified to not care about column indexes.\nThanks for reviewing!\nTesting done\nusual\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-01-31T10:54:38Z", "url": "https://github.com/confluentinc/ksql/pull/4414", "merged": true, "mergeCommit": {"oid": "c03c9b7254014b83722dca2022bd066ca797e66c"}, "closed": true, "closedAt": "2020-02-04T20:48:38Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_bbWUAH2gAyMzY5NTI0ODA4OjQ2NzllODQwMWFhM2JiMmJkM2EwNDMwZTlmMWZmMTIzNWMxZGI4NDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBG7H-gH2gAyMzY5NTI0ODA4Ojg4ZmRhOTVkNjNkNDRiZjhlMWVlYjI1YzkzMjgyYmRmMWRlMGVmYzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4679e8401aa3bb2bd3a0430e9f1ff1235c1db849", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/4679e8401aa3bb2bd3a0430e9f1ff1235c1db849", "committedDate": "2020-01-30T14:29:28Z", "message": "refactor: re-order value schema used in Streams processing\n\nPreviously, when copying the meta and key columns into the value schema to enable processing via a Streams topology the columns where copied to the _start_ of the value schema. For example, given a schema of:\n\n```sql\nROWKEY INT KEY, VAL0 STRING\n```\n\nThe schema used during processing would of been:\n\n```sql\nROWKEY INT KEY, ROWTIME BIGINT, ROWKEY INT, VAL0 STRING\n```\n\nNote: `ROWTIME` and `ROWKEY` columns are _before_ the existing value columns.\n\nThis meant the transformer in `SourceBuilder` had to add the value for `ROWTIME` and `ROWKEY`, (and now `WINDOWSTART` and `WINDOWEND` for windowed sources), to the _start_ of the list of values in the `GenericRow`.  Internally, `GenericRow` was using an `ArrayList`. Inserting at the start of an `ArrayList` requires all the existing elements to be shuffled down to make room for the new element, hence processing incurred an array copy operation when inserting each of these system columns.\n\nAdditionally, the buffer backing the `ArrayList` would first need to be resized to accomodate the new element, resulting in an allocation and another array-copy op.\n\nHere's the transformer code from `SourceBuilder` and details of the operations happening:\n\n```java\n@Override\npublic GenericRow transform(final K key, final GenericRow row) {\n  if (row == null) {\n    return row;\n  }\n\n  // The call below:\n  //   - allocates a new buffer of <current-size> + 1 to hold the new element\n  //   - performs an array copy to move all existing elements down one slot\n  //   - inserts ROWTIME at the start of the list.\n  row.getColumns().add(0, processorContext.timestamp());\n\n  // The call below:\n  //   - allocates a new buffer of <current-size> + <num-key-columns> to hold the new elements\n  //   - performs an array copy to move all the existing elements, except ROWTIME, down by <num-key-columns> slots\n  //   - inserts the key columns after ROWTIME.\n  row.getColumns().addAll(1, rowKeyGenerator.apply(key));\n  return row;\n}\n```\n\nAs you can see this results in two new allocations and two array copies. Given this is in the main processing loop these aren't cheap and are easily avoided.\n\nThe new code does this:\n\n```java\n@Override\npublic GenericRow transform(final K key, final GenericRow row) {\n    if (row == null) {\n        return row;\n    }\n\n    final long timestamp = processorContext.timestamp();\n    final Collection<?> keyColumns = rowKeyGenerator.apply(key);\n\n    // Ensures capacity is large enough for all inserts\n    row.ensureAdditionalCapacity(1 + keyColumns.size());\n    // Appends ROWTIME at the end of the list\n    row.getColumns().add(timestamp);\n    // Appends key columns at the end of the list\n    row.getColumns().addAll(keyColumns);\n    return row;\n}\n```\n\nThis has zero-or-one allocations, (see below for why its generally zero), and not unnecessary array copies.\n\nTo avoid the allocation of a new buffer when the transformer calls `row.ensureAdditionalCapacity(1 + keyColumns.size());` there is a change in `GenericRowSerDe` to create the initial `GenericRow` with enough spare capacity to hold `ROWTIME`, `ROWKEY`, `WINDOWSTART` and `WINDOWEND`.\n\nBREAKING CHANGE: the order of columns for internal topics has changed. The `DELIMITED` format can not handle this in a backwards compatible way. Hence this is a breaking change for any existing queries the use the `DELIMITED` format and have internal topics.\n\nThis change has been made now for two reasons:\n 1. its a breaking change, making it much harder to do later.\n 2. The recent  https://github.com/confluentinc/ksql/pull/4404 change introduced this same issue for pull queries. This current change corrects pull queries too.\n\n### How to review\n\nThere's actually not much code changed, it's mainly tests:\n\n1. `LogicalSchema.withMetaAndKeysInValue`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edbe8fcbeed0716f4b8ab2549e01ec642f0690b2", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/edbe8fcbeed0716f4b8ab2549e01ec642f0690b2", "committedDate": "2020-01-30T14:30:02Z", "message": "chore: update tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1919213ba48b53ba622edec96244e01abbc3f37", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/e1919213ba48b53ba622edec96244e01abbc3f37", "committedDate": "2020-01-30T14:47:53Z", "message": "chore: quick fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63405e01d8eedc6cddc381c7d6fed2475427bc2e", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/63405e01d8eedc6cddc381c7d6fed2475427bc2e", "committedDate": "2020-01-30T15:09:45Z", "message": "chore: disambiguate new constructor from old\n\nFix ambiguity between `new GenericRow(intialCapcity)` and `new GenericRow(singleIntColumn)`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "067c3022de13ca31ae22eb6fa77fa55e66259885", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/067c3022de13ca31ae22eb6fa77fa55e66259885", "committedDate": "2020-01-31T10:52:57Z", "message": "refactor: fix GenericRow encapsulation\n\nThe `GenericRow` that is so pervasive through the code has always been a bit of a mess:\n * it's untyped: just a list of objects.\n * it has verbose `toString` implementation.\n * it has a weird `equals`, which is also out of whack with its `hashCode`.\n * it leaks its internal state like crazy: i.e. it breaks encapsulation. It was basically a very leaky wrapper around a `List<Object>`.\n\nFollowing on from https://github.com/confluentinc/ksql/pull/4412, which added some new functionality to `GenericRow`, I couldn't resist spending some time fixing some of these issues.\n\nThis change fixes all but the first issue. It:\n * simplifies `toString` impl, removing array type handling, (which prod code doesn't use).\n   Note: `toString` is not called in prod code that I can tell, it's just for debugging.\n * removes funkiness from `equals`. Looks like `equals` is also only called from tests.\n * it fixes encapsulations: it no longer leaks mutable internal state via `getColumns` or constructors not taking defensive copies.  Mutating the state now requires explicit invocation of `GenericRow` methods. It's use of `List<Object>` internally is now an implementation detail, as it should be.\n\n This change does not fix the fact that `GenericRow` is untyped.\n\n To facilitate this change `KudafAggregator` has also been updated to accept the number of non-aggregate columns, rather than a list of non-aggregate column indexes. This is possible as the list of indexes was always sequential and zero-based, e.g. [0, 1, 2]."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f94aace331c143f8633dcc67036d37ab3862f3e0", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/f94aace331c143f8633dcc67036d37ab3862f3e0", "committedDate": "2020-01-31T10:56:33Z", "message": "chore: all the rest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5901b729455817f84615377a56c8620380657c5c", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/5901b729455817f84615377a56c8620380657c5c", "committedDate": "2020-01-31T11:22:29Z", "message": "chore: refactor undo aggregator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyNTk3NzQy", "url": "https://github.com/confluentinc/ksql/pull/4414#pullrequestreview-352597742", "createdAt": "2020-02-03T22:07:28Z", "commit": {"oid": "5901b729455817f84615377a56c8620380657c5c"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMjowNzoyOFrOFlBp8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMjowODoxNVrOFlBrZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2ODc1NQ==", "bodyText": "The NON_AGG_COLUMNS example in this unit test file confuses me since it seems to suggest non-aggregate columns may be intermingled with aggregate columns in the input, and violates the assumption that enables the refactor in this PR. I assume it's just the unit test that needs to be updated?", "url": "https://github.com/confluentinc/ksql/pull/4414#discussion_r374368755", "createdAt": "2020-02-03T22:07:28Z", "author": {"login": "vcrfxia"}, "path": "ksql-streams/src/test/java/io/confluent/ksql/execution/streams/AggregateParamsFactoryTest.java", "diffHunk": "@@ -132,10 +140,21 @@ public void init() {\n   @SuppressWarnings(\"unchecked\")\n   @Test\n   public void shouldCreateAggregatorWithCorrectParams() {\n-    verify(udafFactory).create(\n-        ImmutableList.of(0, 2),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5901b729455817f84615377a56c8620380657c5c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2ODk2MA==", "bodyText": "What happened to this concern about double comparison? Are doubles never being compared in tests?", "url": "https://github.com/confluentinc/ksql/pull/4414#discussion_r374368960", "createdAt": "2020-02-03T22:07:51Z", "author": {"login": "vcrfxia"}, "path": "ksql-common/src/main/java/io/confluent/ksql/GenericRow.java", "diffHunk": "@@ -15,83 +15,111 @@\n \n package io.confluent.ksql;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.annotations.VisibleForTesting;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n+import java.util.stream.Collectors;\n \n public class GenericRow {\n \n-  private final List<Object> columns;\n+  private final ArrayList<Object> values;\n \n   public GenericRow() {\n-    columns = new ArrayList<>();\n+    this(0);\n   }\n \n-  public GenericRow(final List<Object> columns) {\n-    Objects.requireNonNull(columns);\n-    this.columns = columns;\n+  public GenericRow(final int initialCapacity) {\n+    this.values = new ArrayList<>(initialCapacity);\n   }\n \n-  public GenericRow(final Object ...columns) {\n-    this(Arrays.asList(columns));\n+  @VisibleForTesting // Only use from tests\n+  public static GenericRow genericRow(final Object... columns) {\n+    return new GenericRow().appendAll(Arrays.asList(columns));\n+  }\n+\n+  /**\n+   * Ensure the row has enough capacity to hold {@code additionalCapacity} more elements that its\n+   * current size.\n+   *\n+   * <p>Useful to avoid unnecessary array copies when adding multiple elements.\n+   *\n+   * @param additionalCapacity the number of additional elements\n+   */\n+  public void ensureAdditionalCapacity(final int additionalCapacity) {\n+    values.ensureCapacity(additionalCapacity + values.size());\n+  }\n+\n+  public int size() {\n+    return values.size();\n+  }\n+\n+  public Object get(final int index) {\n+    return values.get(index);\n+  }\n+\n+  public void set(final int index, final Object value) {\n+    values.set(index, value);\n+  }\n+\n+  public GenericRow append(final Object value) {\n+    values.add(value);\n+    return this;\n+  }\n+\n+  public GenericRow appendAll(final Collection<?> values) {\n+    this.values.addAll(values);\n+    return this;\n+  }\n+\n+  @JsonProperty(\"columns\")\n+  public List<Object> values() {\n+    return Collections.unmodifiableList(values);\n   }\n \n   @Override\n   public String toString() {\n-    final StringBuilder stringBuilder = new StringBuilder(\"[ \");\n-    int currentIndex = 0;\n-    for (int i = 0; i < columns.size(); i++) {\n-      final Object obj = columns.get(i);\n-      if (obj == null) {\n-        stringBuilder.append(\"null\");\n-      } else if (obj.getClass().isArray()) {\n-        stringBuilder.append(Arrays.toString((Object[]) obj));\n-      } else if (obj instanceof String) {\n-        stringBuilder.append(\"'\")\n-            .append(obj)\n-            .append(\"'\");\n-      } else {\n-        stringBuilder.append(obj);\n-      }\n-\n-      currentIndex++;\n-      if (currentIndex < columns.size()) {\n-        stringBuilder.append(\" | \");\n-      }\n-    }\n-    stringBuilder.append(\" ]\");\n-    return stringBuilder.toString();\n+    return values.stream()\n+        .map(GenericRow::formatValue)\n+        .collect(Collectors.joining(\" | \", \"[ \", \" ]\"));\n   }\n \n   @Override\n   public boolean equals(final Object o) {\n     if (this == o) {\n       return true;\n     }\n+\n     if (o == null || getClass() != o.getClass()) {\n       return false;\n     }\n-    final GenericRow that = (GenericRow) o;\n-    if (columns.size() != that.columns.size()) {\n-      return false;\n-    }\n \n-    // For now string matching is used to compare the rows as double comparison will cause issues", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5901b729455817f84615377a56c8620380657c5c"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDM2OTEyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Ensure the row has enough capacity to hold {@code additionalCapacity} more elements that its\n          \n          \n            \n               * Ensure the row has enough capacity to hold {@code additionalCapacity} more elements than its\n          \n      \n    \n    \n  \n\nnit: typo", "url": "https://github.com/confluentinc/ksql/pull/4414#discussion_r374369124", "createdAt": "2020-02-03T22:08:15Z", "author": {"login": "vcrfxia"}, "path": "ksql-common/src/main/java/io/confluent/ksql/GenericRow.java", "diffHunk": "@@ -15,83 +15,111 @@\n \n package io.confluent.ksql;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.annotations.VisibleForTesting;\n import java.util.ArrayList;\n import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n+import java.util.stream.Collectors;\n \n public class GenericRow {\n \n-  private final List<Object> columns;\n+  private final ArrayList<Object> values;\n \n   public GenericRow() {\n-    columns = new ArrayList<>();\n+    this(0);\n   }\n \n-  public GenericRow(final List<Object> columns) {\n-    Objects.requireNonNull(columns);\n-    this.columns = columns;\n+  public GenericRow(final int initialCapacity) {\n+    this.values = new ArrayList<>(initialCapacity);\n   }\n \n-  public GenericRow(final Object ...columns) {\n-    this(Arrays.asList(columns));\n+  @VisibleForTesting // Only use from tests\n+  public static GenericRow genericRow(final Object... columns) {\n+    return new GenericRow().appendAll(Arrays.asList(columns));\n+  }\n+\n+  /**\n+   * Ensure the row has enough capacity to hold {@code additionalCapacity} more elements that its", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5901b729455817f84615377a56c8620380657c5c"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0043dd6a6c2574cef1b6bb87004654a83e8d0bc4", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/0043dd6a6c2574cef1b6bb87004654a83e8d0bc4", "committedDate": "2020-02-04T17:02:27Z", "message": "chore: merge from master\n\nConflicting files\nksql-common/src/main/java/io/confluent/ksql/GenericRow.java\nksql-common/src/test/java/io/confluent/ksql/GenericRowTest.java\nksql-engine/src/test/java/io/confluent/ksql/planner/plan/AggregateNodeTest.java\nksql-engine/src/test/java/io/confluent/ksql/structured/SchemaKTableTest.java\nksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java\nksql-rest-app/src/test/java/io/confluent/ksql/rest/entity/TableRowsEntityFactoryTest.java\nksql-serde/src/main/java/io/confluent/ksql/serde/GenericRowSerDe.java\nksql-streams/src/main/java/io/confluent/ksql/execution/streams/SourceBuilder.java\nksql-streams/src/test/java/io/confluent/ksql/execution/streams/AggregateParamsFactoryTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c92a35f39ddf448460b0688c4324d02afc9083b", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/5c92a35f39ddf448460b0688c4324d02afc9083b", "committedDate": "2020-02-04T19:41:51Z", "message": "Update ksql-common/src/main/java/io/confluent/ksql/GenericRow.java\n\nCo-Authored-By: Victoria Xia <victoria.f.xia281@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5617e9a17af787f5615adc52319d6539fe5209fc", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/5617e9a17af787f5615adc52319d6539fe5209fc", "committedDate": "2020-02-04T19:43:35Z", "message": "chore: fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "115f52b9bd24d6774aba6af7bf705984b61fa8bc", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/115f52b9bd24d6774aba6af7bf705984b61fa8bc", "committedDate": "2020-02-04T19:43:44Z", "message": "Merge branch 'master' into generic_row_encap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88fda95d63d44bf8e1eeb25c93282bdf1de0efc7", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/88fda95d63d44bf8e1eeb25c93282bdf1de0efc7", "committedDate": "2020-02-04T19:44:01Z", "message": "Merge branch 'generic_row_encap' of github.com:big-andy-coates/ksql into generic_row_encap"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 172, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}