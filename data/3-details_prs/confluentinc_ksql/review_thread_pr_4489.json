{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNjMzMzM1", "number": 4489, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjo0Nzo0N1rODeLEKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODo1NjowNVrODicIPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTY1MTYyOnYy", "diffSide": "RIGHT", "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjo0Nzo0N1rOFnMepA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzoyNDozMFrOFrLeew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0MzIzNg==", "bodyText": "I think the logic here should write the System.currenttimeMillis() in case there is no timestamp column set, right? Otherwise, the output ROWTIME is derived from the source topics.", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r376643236", "createdAt": "2020-02-07T22:47:47Z", "author": {"login": "spena"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License; you may not use this file\n+ * except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.execution.plan.Formats;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.timestamp.TimestampColumn;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.KStream;\n+import org.apache.kafka.streams.kstream.Produced;\n+import org.apache.kafka.streams.kstream.Transformer;\n+import org.apache.kafka.streams.kstream.TransformerSupplier;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.To;\n+\n+public final class SinkBuilder {\n+  private SinkBuilder() {\n+  }\n+\n+  public static  <K> void build(\n+      final LogicalSchema schema,\n+      final Formats formats,\n+      final Optional<TimestampColumn> timestampColumn,\n+      final String topicName,\n+      final KStream<K, GenericRow> stream,\n+      final KeySerdeFactory<K> keySerdeFactory,\n+      final QueryContext queryContext,\n+      final KsqlQueryBuilder queryBuilder\n+  ) {\n+    final PhysicalSchema physicalSchema = PhysicalSchema.from(schema, formats.getOptions());\n+\n+    final Serde<K> keySerde = keySerdeFactory.buildKeySerde(\n+        formats.getKeyFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final Serde<GenericRow> valueSerde = queryBuilder.buildValueSerde(\n+        formats.getValueFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final int timestampColumnIndex = timestampColumn.map(TimestampColumn::getColumn)\n+        .map(c -> schema.findValueColumn(c).orElseThrow(IllegalStateException::new))\n+        .map(Column::index)\n+        .orElse(-1);\n+\n+    stream.transform(new TransformTimestamp<>(timestampColumnIndex))\n+        .to(topicName, Produced.with(keySerde, valueSerde));\n+  }\n+\n+  static class TransformTimestamp<K>\n+      implements TransformerSupplier<K, GenericRow, KeyValue<K, GenericRow>> {\n+    private final int timestampColumnIndex;\n+\n+    TransformTimestamp(final int timestampColumnIndex) {\n+      this.timestampColumnIndex = timestampColumnIndex;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object o) {\n+      if (o == null || !(o instanceof TransformTimestamp)) {\n+        return false;\n+      }\n+\n+      final TransformTimestamp that = (TransformTimestamp)o;\n+      return timestampColumnIndex == that.timestampColumnIndex;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hashCode(timestampColumnIndex);\n+    }\n+\n+    @Override\n+    public Transformer<K, GenericRow, KeyValue<K, GenericRow>> get() {\n+      return new Transformer<K, GenericRow, KeyValue<K, GenericRow>>() {\n+        private ProcessorContext processorContext;\n+\n+        @Override\n+        public void init(final ProcessorContext processorContext) {\n+          this.processorContext = requireNonNull(processorContext, \"processorContext\");\n+        }\n+\n+        @Override\n+        public KeyValue<K, GenericRow> transform(final K key, final GenericRow row) {\n+          if (timestampColumnIndex >= 0 && row.get(timestampColumnIndex) instanceof Long) {\n+            processorContext.forward(\n+                key,\n+                row,\n+                To.all().withTimestamp((long) row.get(timestampColumnIndex))\n+            );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a63d42f59e78d6b41f8b2046b1c697b1d6a93341"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY4NzU0OQ==", "bodyText": "I don't think so. From my understanding the WITH ROWTIME clause in CTAS/CSAS statement overwrite the existing event-timestamp with something different. Hence, if no WITH ROWTIME column is specified the input key and value should be forwarded without a modified timestamp?\nIt seem atm, the transform() would drop the record if no WITH ROWTIME clause is present?", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r376687549", "createdAt": "2020-02-08T04:53:47Z", "author": {"login": "mjsax"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License; you may not use this file\n+ * except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.execution.plan.Formats;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.timestamp.TimestampColumn;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.KStream;\n+import org.apache.kafka.streams.kstream.Produced;\n+import org.apache.kafka.streams.kstream.Transformer;\n+import org.apache.kafka.streams.kstream.TransformerSupplier;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.To;\n+\n+public final class SinkBuilder {\n+  private SinkBuilder() {\n+  }\n+\n+  public static  <K> void build(\n+      final LogicalSchema schema,\n+      final Formats formats,\n+      final Optional<TimestampColumn> timestampColumn,\n+      final String topicName,\n+      final KStream<K, GenericRow> stream,\n+      final KeySerdeFactory<K> keySerdeFactory,\n+      final QueryContext queryContext,\n+      final KsqlQueryBuilder queryBuilder\n+  ) {\n+    final PhysicalSchema physicalSchema = PhysicalSchema.from(schema, formats.getOptions());\n+\n+    final Serde<K> keySerde = keySerdeFactory.buildKeySerde(\n+        formats.getKeyFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final Serde<GenericRow> valueSerde = queryBuilder.buildValueSerde(\n+        formats.getValueFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final int timestampColumnIndex = timestampColumn.map(TimestampColumn::getColumn)\n+        .map(c -> schema.findValueColumn(c).orElseThrow(IllegalStateException::new))\n+        .map(Column::index)\n+        .orElse(-1);\n+\n+    stream.transform(new TransformTimestamp<>(timestampColumnIndex))\n+        .to(topicName, Produced.with(keySerde, valueSerde));\n+  }\n+\n+  static class TransformTimestamp<K>\n+      implements TransformerSupplier<K, GenericRow, KeyValue<K, GenericRow>> {\n+    private final int timestampColumnIndex;\n+\n+    TransformTimestamp(final int timestampColumnIndex) {\n+      this.timestampColumnIndex = timestampColumnIndex;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object o) {\n+      if (o == null || !(o instanceof TransformTimestamp)) {\n+        return false;\n+      }\n+\n+      final TransformTimestamp that = (TransformTimestamp)o;\n+      return timestampColumnIndex == that.timestampColumnIndex;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hashCode(timestampColumnIndex);\n+    }\n+\n+    @Override\n+    public Transformer<K, GenericRow, KeyValue<K, GenericRow>> get() {\n+      return new Transformer<K, GenericRow, KeyValue<K, GenericRow>>() {\n+        private ProcessorContext processorContext;\n+\n+        @Override\n+        public void init(final ProcessorContext processorContext) {\n+          this.processorContext = requireNonNull(processorContext, \"processorContext\");\n+        }\n+\n+        @Override\n+        public KeyValue<K, GenericRow> transform(final K key, final GenericRow row) {\n+          if (timestampColumnIndex >= 0 && row.get(timestampColumnIndex) instanceof Long) {\n+            processorContext.forward(\n+                key,\n+                row,\n+                To.all().withTimestamp((long) row.get(timestampColumnIndex))\n+            );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0MzIzNg=="}, "originalCommit": {"oid": "a63d42f59e78d6b41f8b2046b1c697b1d6a93341"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyMTExNQ==", "bodyText": "Is this an out of date comment? It doesn't look to match the current impl...", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r380821115", "createdAt": "2020-02-18T17:24:30Z", "author": {"login": "big-andy-coates"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License; you may not use this file\n+ * except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.execution.plan.Formats;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.timestamp.TimestampColumn;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.KStream;\n+import org.apache.kafka.streams.kstream.Produced;\n+import org.apache.kafka.streams.kstream.Transformer;\n+import org.apache.kafka.streams.kstream.TransformerSupplier;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.To;\n+\n+public final class SinkBuilder {\n+  private SinkBuilder() {\n+  }\n+\n+  public static  <K> void build(\n+      final LogicalSchema schema,\n+      final Formats formats,\n+      final Optional<TimestampColumn> timestampColumn,\n+      final String topicName,\n+      final KStream<K, GenericRow> stream,\n+      final KeySerdeFactory<K> keySerdeFactory,\n+      final QueryContext queryContext,\n+      final KsqlQueryBuilder queryBuilder\n+  ) {\n+    final PhysicalSchema physicalSchema = PhysicalSchema.from(schema, formats.getOptions());\n+\n+    final Serde<K> keySerde = keySerdeFactory.buildKeySerde(\n+        formats.getKeyFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final Serde<GenericRow> valueSerde = queryBuilder.buildValueSerde(\n+        formats.getValueFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final int timestampColumnIndex = timestampColumn.map(TimestampColumn::getColumn)\n+        .map(c -> schema.findValueColumn(c).orElseThrow(IllegalStateException::new))\n+        .map(Column::index)\n+        .orElse(-1);\n+\n+    stream.transform(new TransformTimestamp<>(timestampColumnIndex))\n+        .to(topicName, Produced.with(keySerde, valueSerde));\n+  }\n+\n+  static class TransformTimestamp<K>\n+      implements TransformerSupplier<K, GenericRow, KeyValue<K, GenericRow>> {\n+    private final int timestampColumnIndex;\n+\n+    TransformTimestamp(final int timestampColumnIndex) {\n+      this.timestampColumnIndex = timestampColumnIndex;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object o) {\n+      if (o == null || !(o instanceof TransformTimestamp)) {\n+        return false;\n+      }\n+\n+      final TransformTimestamp that = (TransformTimestamp)o;\n+      return timestampColumnIndex == that.timestampColumnIndex;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hashCode(timestampColumnIndex);\n+    }\n+\n+    @Override\n+    public Transformer<K, GenericRow, KeyValue<K, GenericRow>> get() {\n+      return new Transformer<K, GenericRow, KeyValue<K, GenericRow>>() {\n+        private ProcessorContext processorContext;\n+\n+        @Override\n+        public void init(final ProcessorContext processorContext) {\n+          this.processorContext = requireNonNull(processorContext, \"processorContext\");\n+        }\n+\n+        @Override\n+        public KeyValue<K, GenericRow> transform(final K key, final GenericRow row) {\n+          if (timestampColumnIndex >= 0 && row.get(timestampColumnIndex) instanceof Long) {\n+            processorContext.forward(\n+                key,\n+                row,\n+                To.all().withTimestamp((long) row.get(timestampColumnIndex))\n+            );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0MzIzNg=="}, "originalCommit": {"oid": "a63d42f59e78d6b41f8b2046b1c697b1d6a93341"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTY2NTQ5OnYy", "diffSide": "RIGHT", "path": "ksql-functional-tests/src/test/resources/query-validation-tests/timestampformat.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjo1NDozN1rOFnMmdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMjo1NDozN1rOFnMmdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY0NTIzOQ==", "bodyText": "I added the WITH TIMESTAMP here to use the source timestamp as the output timestamp.", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r376645239", "createdAt": "2020-02-07T22:54:37Z", "author": {"login": "spena"}, "path": "ksql-functional-tests/src/test/resources/query-validation-tests/timestampformat.json", "diffHunk": "@@ -12,7 +12,7 @@\n       \"name\": \"timestamp format\",\n       \"statements\": [\n         \"CREATE STREAM TEST (ID bigint, event_timestamp VARCHAR) WITH (kafka_topic='test_topic', value_format='JSON', timestamp='event_timestamp', timestamp_format='yyyy-MM-dd''T''HH:mm:ssX');\",\n-        \"CREATE STREAM TS AS select id, stringtotimestamp(event_timestamp, 'yyyy-MM-dd''T''HH:mm:ssX') as ets from test;\"\n+        \"CREATE STREAM TS WITH (timestamp='ets') AS select id, stringtotimestamp(event_timestamp, 'yyyy-MM-dd''T''HH:mm:ssX') as ets from test;\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a63d42f59e78d6b41f8b2046b1c697b1d6a93341"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjkyMDU1OnYy", "diffSide": "RIGHT", "path": "ksql-execution/src/main/java/io/confluent/ksql/execution/plan/StreamSink.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo1Mjo0MVrOFrKUFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo0MDoyNFrOFtpqFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMjA3MA==", "bodyText": "why would an Optional field be required?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  @JsonProperty(value = \"timestampColumn\", required = true)\n          \n          \n            \n                  @JsonProperty(value = \"timestampColumn\")", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r380802070", "createdAt": "2020-02-18T16:52:41Z", "author": {"login": "big-andy-coates"}, "path": "ksql-execution/src/main/java/io/confluent/ksql/execution/plan/StreamSink.java", "diffHunk": "@@ -16,26 +16,34 @@\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.google.errorprone.annotations.Immutable;\n+import io.confluent.ksql.execution.timestamp.TimestampColumn;\n+\n import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n \n @Immutable\n public class StreamSink<K> implements ExecutionStep<KStreamHolder<K>> {\n   private final ExecutionStepPropertiesV1 properties;\n   private final ExecutionStep<KStreamHolder<K>>  source;\n   private final Formats formats;\n   private final String topicName;\n+  private final Optional<TimestampColumn> timestampColumn;\n \n   public StreamSink(\n       @JsonProperty(value = \"properties\", required = true) final ExecutionStepPropertiesV1 props,\n       @JsonProperty(value = \"source\", required = true) final ExecutionStep<KStreamHolder<K>> source,\n       @JsonProperty(value = \"formats\", required = true) final Formats formats,\n-      @JsonProperty(value = \"topicName\", required = true) final String topicName) {\n+      @JsonProperty(value = \"topicName\", required = true) final String topicName,\n+      @JsonProperty(value = \"timestampColumn\", required = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMjc1Ng==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383412756", "createdAt": "2020-02-24T17:40:24Z", "author": {"login": "spena"}, "path": "ksql-execution/src/main/java/io/confluent/ksql/execution/plan/StreamSink.java", "diffHunk": "@@ -16,26 +16,34 @@\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.google.errorprone.annotations.Immutable;\n+import io.confluent.ksql.execution.timestamp.TimestampColumn;\n+\n import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n \n @Immutable\n public class StreamSink<K> implements ExecutionStep<KStreamHolder<K>> {\n   private final ExecutionStepPropertiesV1 properties;\n   private final ExecutionStep<KStreamHolder<K>>  source;\n   private final Formats formats;\n   private final String topicName;\n+  private final Optional<TimestampColumn> timestampColumn;\n \n   public StreamSink(\n       @JsonProperty(value = \"properties\", required = true) final ExecutionStepPropertiesV1 props,\n       @JsonProperty(value = \"source\", required = true) final ExecutionStep<KStreamHolder<K>> source,\n       @JsonProperty(value = \"formats\", required = true) final Formats formats,\n-      @JsonProperty(value = \"topicName\", required = true) final String topicName) {\n+      @JsonProperty(value = \"topicName\", required = true) final String topicName,\n+      @JsonProperty(value = \"timestampColumn\", required = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMjA3MA=="}, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjkyMjM3OnYy", "diffSide": "RIGHT", "path": "ksql-execution/src/main/java/io/confluent/ksql/execution/plan/TableSink.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo1MzoxNFrOFrKVQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo0MDozMlrOFtpqQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMjM3MA==", "bodyText": "as above\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  @JsonProperty(value = \"timestampColumn\", required = true)\n          \n          \n            \n                  @JsonProperty(value = \"timestampColumn\")", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r380802370", "createdAt": "2020-02-18T16:53:14Z", "author": {"login": "big-andy-coates"}, "path": "ksql-execution/src/main/java/io/confluent/ksql/execution/plan/TableSink.java", "diffHunk": "@@ -17,27 +17,34 @@\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.google.errorprone.annotations.Immutable;\n+import io.confluent.ksql.execution.timestamp.TimestampColumn;\n+\n import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n \n @Immutable\n public class TableSink<K> implements ExecutionStep<KTableHolder<K>> {\n   private final ExecutionStepPropertiesV1 properties;\n   private final ExecutionStep<KTableHolder<K>> source;\n   private final Formats formats;\n   private final String topicName;\n+  private final Optional<TimestampColumn> timestampColumn;\n \n   public TableSink(\n       @JsonProperty(value = \"properties\", required = true) final ExecutionStepPropertiesV1 props,\n       @JsonProperty(value = \"source\", required = true) final ExecutionStep<KTableHolder<K>> source,\n       @JsonProperty(value = \"formats\", required = true) final Formats formats,\n-      @JsonProperty(value = \"topicName\", required = true) final String topicName\n+      @JsonProperty(value = \"topicName\", required = true) final String topicName,\n+      @JsonProperty(value = \"timestampColumn\", required = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMjgwMw==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383412803", "createdAt": "2020-02-24T17:40:32Z", "author": {"login": "spena"}, "path": "ksql-execution/src/main/java/io/confluent/ksql/execution/plan/TableSink.java", "diffHunk": "@@ -17,27 +17,34 @@\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.google.errorprone.annotations.Immutable;\n+import io.confluent.ksql.execution.timestamp.TimestampColumn;\n+\n import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n \n @Immutable\n public class TableSink<K> implements ExecutionStep<KTableHolder<K>> {\n   private final ExecutionStepPropertiesV1 properties;\n   private final ExecutionStep<KTableHolder<K>> source;\n   private final Formats formats;\n   private final String topicName;\n+  private final Optional<TimestampColumn> timestampColumn;\n \n   public TableSink(\n       @JsonProperty(value = \"properties\", required = true) final ExecutionStepPropertiesV1 props,\n       @JsonProperty(value = \"source\", required = true) final ExecutionStep<KTableHolder<K>> source,\n       @JsonProperty(value = \"formats\", required = true) final Formats formats,\n-      @JsonProperty(value = \"topicName\", required = true) final String topicName\n+      @JsonProperty(value = \"topicName\", required = true) final String topicName,\n+      @JsonProperty(value = \"timestampColumn\", required = true)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMjM3MA=="}, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjkyOTk5OnYy", "diffSide": "RIGHT", "path": "ksql-functional-tests/src/test/resources/expected_topology/0_6_0-pre/timestampformat_-_timestamp_format", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo1NDo0MVrOFrKZmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo0MDo1MlrOFtpq_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMzQ4MA==", "bodyText": "We should not be pushing these new properties into the expected topologies of old version. Just make the minimal topology change, not the props", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r380803480", "createdAt": "2020-02-18T16:54:41Z", "author": {"login": "big-andy-coates"}, "path": "ksql-functional-tests/src/test/resources/expected_topology/0_6_0-pre/timestampformat_-_timestamp_format", "diffHunk": "@@ -8,6 +8,7 @@\n   \"ksql.schema.registry.url\" : \"\",\n   \"ksql.streams.default.deserialization.exception.handler\" : \"io.confluent.ksql.errors.LogMetricAndContinueExceptionHandler\",\n   \"ksql.output.topic.name.prefix\" : \"\",\n+  \"ksql.query.pull.enable.stale.reads\" : \"false\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMjk5MQ==", "bodyText": "Done. I now used TopologyFileRewriter to generate the new files.", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383412991", "createdAt": "2020-02-24T17:40:52Z", "author": {"login": "spena"}, "path": "ksql-functional-tests/src/test/resources/expected_topology/0_6_0-pre/timestampformat_-_timestamp_format", "diffHunk": "@@ -8,6 +8,7 @@\n   \"ksql.schema.registry.url\" : \"\",\n   \"ksql.streams.default.deserialization.exception.handler\" : \"io.confluent.ksql.errors.LogMetricAndContinueExceptionHandler\",\n   \"ksql.output.topic.name.prefix\" : \"\",\n+  \"ksql.query.pull.enable.stale.reads\" : \"false\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwMzQ4MA=="}, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Njk1OTAzOnYy", "diffSide": "RIGHT", "path": "ksql-functional-tests/src/test/resources/query-validation-tests/timestampformat.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzowMjoxNlrOFrKriA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo0MTowMFrOFtprSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwODA3Mg==", "bodyText": "would be good to extend this set of tests to include some negative tests, e.g.\n\nwhere sink_ts doesn't exist in the schema (add separate test)\nwhere sink_ts includes invalid data, i.e. where ID is a negative number. (add to existing tests)\nwhere sink_ts is in string form, i.e. use timestampformat in the with of the CTAS/CSAS, (add separate tests)\nwhere the source has a timestamp column set in the WITH clause, and that column exists in the CSAS schema: the timestamp should NOT be updated in the CSAS, e.g.\n\n {\n      \"name\": \"timestamp column of source should not influent sink\",\n     \"statements\": [\n        \"CREATE STREAM INPUT (ID bigint, EVENT_TS bigint) WITH (kafka_topic='test_topic', value_format='JSON', timestamp='EVENT_TS');\",\n        \"CREATE STREAM OUTPUT AS SELECT id as EVENT_TS FROM INPUT;\"\n      ],\n      \"inputs\": [\n        {\"topic\": \"test_topic\", \"value\": {\"ID\": 1, \"EVENT_TS\":  1526075913000}},\n        {\"topic\": \"test_topic\", \"value\": {\"ID\": 2, \"EVENT_TS\":  1589234313000}}\n      ],\n      \"outputs\": [\n        {\"topic\": \"OUTPUT\", \"value\": {\"EVENT_TS\":1}, \"timestamp\": 1526075913000},\n        {\"topic\": \"OUTPUT\", \"value\": {\"EVENT_TS\":3}, \"timestamp\": 1589234313000}\n      ]\n    }", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r380808072", "createdAt": "2020-02-18T17:02:16Z", "author": {"login": "big-andy-coates"}, "path": "ksql-functional-tests/src/test/resources/query-validation-tests/timestampformat.json", "diffHunk": "@@ -37,6 +37,38 @@\n       \"outputs\": [\n         {\"topic\": \"TS\", \"value\": {\"ETS\": 1566912669200}, \"timestamp\": 1566912669200}\n       ]\n+    },\n+    {\n+      \"name\": \"KSQL override output timestamp for CSAS\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMzA2NA==", "bodyText": "Done. Added more tests.", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383413064", "createdAt": "2020-02-24T17:41:00Z", "author": {"login": "spena"}, "path": "ksql-functional-tests/src/test/resources/query-validation-tests/timestampformat.json", "diffHunk": "@@ -37,6 +37,38 @@\n       \"outputs\": [\n         {\"topic\": \"TS\", \"value\": {\"ETS\": 1566912669200}, \"timestamp\": 1566912669200}\n       ]\n+    },\n+    {\n+      \"name\": \"KSQL override output timestamp for CSAS\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwODA3Mg=="}, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Njk2NDQzOnYy", "diffSide": "RIGHT", "path": "ksql-functional-tests/src/test/resources/query-validation-tests/timestampformat.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzowMzo0M1rOFrKu7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo0MTowNlrOFtpreQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwODk0MA==", "bodyText": "The test case isn't testing timestamp in the with clause of the CS statement, so remove it, as it may confuse people.  Which means you can remove EVENT_TS too.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"CREATE STREAM TEST (ID bigint, EVENT_TS bigint) WITH (kafka_topic='test_topic', value_format='JSON', timestamp='EVENT_TS');\",\n          \n          \n            \n                    \"CREATE STREAM TEST (ID bigint) WITH (kafka_topic='test_topic', value_format='JSON');\",", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r380808940", "createdAt": "2020-02-18T17:03:43Z", "author": {"login": "big-andy-coates"}, "path": "ksql-functional-tests/src/test/resources/query-validation-tests/timestampformat.json", "diffHunk": "@@ -37,6 +37,38 @@\n       \"outputs\": [\n         {\"topic\": \"TS\", \"value\": {\"ETS\": 1566912669200}, \"timestamp\": 1566912669200}\n       ]\n+    },\n+    {\n+      \"name\": \"KSQL override output timestamp for CSAS\",\n+      \"statements\": [\n+        \"CREATE STREAM TEST (ID bigint, EVENT_TS bigint) WITH (kafka_topic='test_topic', value_format='JSON', timestamp='EVENT_TS');\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMzExMw==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383413113", "createdAt": "2020-02-24T17:41:06Z", "author": {"login": "spena"}, "path": "ksql-functional-tests/src/test/resources/query-validation-tests/timestampformat.json", "diffHunk": "@@ -37,6 +37,38 @@\n       \"outputs\": [\n         {\"topic\": \"TS\", \"value\": {\"ETS\": 1566912669200}, \"timestamp\": 1566912669200}\n       ]\n+    },\n+    {\n+      \"name\": \"KSQL override output timestamp for CSAS\",\n+      \"statements\": [\n+        \"CREATE STREAM TEST (ID bigint, EVENT_TS bigint) WITH (kafka_topic='test_topic', value_format='JSON', timestamp='EVENT_TS');\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwODk0MA=="}, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Njk2NTY1OnYy", "diffSide": "RIGHT", "path": "ksql-functional-tests/src/test/resources/query-validation-tests/timestampformat.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzowNDowM1rOFrKvsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo0MToxM1rOFtprqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwOTEzNg==", "bodyText": "As above\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"CREATE TABLE TEST (ID bigint, EVENT_TS bigint) WITH (kafka_topic='test_topic', value_format='JSON', timestamp='EVENT_TS');\",\n          \n          \n            \n                    \"CREATE TABLE TEST (ID bigint) WITH (kafka_topic='test_topic', value_format='JSON');\",", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r380809136", "createdAt": "2020-02-18T17:04:03Z", "author": {"login": "big-andy-coates"}, "path": "ksql-functional-tests/src/test/resources/query-validation-tests/timestampformat.json", "diffHunk": "@@ -37,6 +37,38 @@\n       \"outputs\": [\n         {\"topic\": \"TS\", \"value\": {\"ETS\": 1566912669200}, \"timestamp\": 1566912669200}\n       ]\n+    },\n+    {\n+      \"name\": \"KSQL override output timestamp for CSAS\",\n+      \"statements\": [\n+        \"CREATE STREAM TEST (ID bigint, EVENT_TS bigint) WITH (kafka_topic='test_topic', value_format='JSON', timestamp='EVENT_TS');\",\n+        \"CREATE STREAM TS WITH (timestamp='sink_ts') AS SELECT id as sink_ts, id, event_ts FROM test;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"value\": {\"ID\": 1, \"EVENT_TS\":  1526075913000}, \"timestamp\": 1526075913000},\n+        {\"topic\": \"test_topic\", \"value\": {\"ID\": 2, \"EVENT_TS\":  -1}, \"timestamp\": -1},\n+        {\"topic\": \"test_topic\", \"value\": {\"ID\": 3, \"EVENT_TS\":  1589234313000}, \"timestamp\": 1589234313000}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"TS\", \"value\": {\"SINK_TS\":1, \"ID\": 1, \"EVENT_TS\":  1526075913000}, \"timestamp\": 1},\n+        {\"topic\": \"TS\", \"value\": {\"SINK_TS\":3, \"ID\": 3, \"EVENT_TS\":  1589234313000}, \"timestamp\": 3}\n+      ]\n+    },\n+    {\n+      \"name\": \"KSQL override output timestamp for CTAS\",\n+      \"statements\": [\n+        \"CREATE TABLE TEST (ID bigint, EVENT_TS bigint) WITH (kafka_topic='test_topic', value_format='JSON', timestamp='EVENT_TS');\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMzE2MQ==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383413161", "createdAt": "2020-02-24T17:41:13Z", "author": {"login": "spena"}, "path": "ksql-functional-tests/src/test/resources/query-validation-tests/timestampformat.json", "diffHunk": "@@ -37,6 +37,38 @@\n       \"outputs\": [\n         {\"topic\": \"TS\", \"value\": {\"ETS\": 1566912669200}, \"timestamp\": 1566912669200}\n       ]\n+    },\n+    {\n+      \"name\": \"KSQL override output timestamp for CSAS\",\n+      \"statements\": [\n+        \"CREATE STREAM TEST (ID bigint, EVENT_TS bigint) WITH (kafka_topic='test_topic', value_format='JSON', timestamp='EVENT_TS');\",\n+        \"CREATE STREAM TS WITH (timestamp='sink_ts') AS SELECT id as sink_ts, id, event_ts FROM test;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"value\": {\"ID\": 1, \"EVENT_TS\":  1526075913000}, \"timestamp\": 1526075913000},\n+        {\"topic\": \"test_topic\", \"value\": {\"ID\": 2, \"EVENT_TS\":  -1}, \"timestamp\": -1},\n+        {\"topic\": \"test_topic\", \"value\": {\"ID\": 3, \"EVENT_TS\":  1589234313000}, \"timestamp\": 1589234313000}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"TS\", \"value\": {\"SINK_TS\":1, \"ID\": 1, \"EVENT_TS\":  1526075913000}, \"timestamp\": 1},\n+        {\"topic\": \"TS\", \"value\": {\"SINK_TS\":3, \"ID\": 3, \"EVENT_TS\":  1589234313000}, \"timestamp\": 3}\n+      ]\n+    },\n+    {\n+      \"name\": \"KSQL override output timestamp for CTAS\",\n+      \"statements\": [\n+        \"CREATE TABLE TEST (ID bigint, EVENT_TS bigint) WITH (kafka_topic='test_topic', value_format='JSON', timestamp='EVENT_TS');\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgwOTEzNg=="}, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Njk4MzE3OnYy", "diffSide": "RIGHT", "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzowODoyMlrOFrK6KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo0MToxOFrOFtpr2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxMTgxNw==", "bodyText": "Can we only add the transform step if there is a timestamp column specified?\n   final Optional<TransformTimestamp> tsTransformer = timestampColumn\n        .map(TimestampColumn::getColumn)\n        .map(c -> schema.findValueColumn(c).orElseThrow(IllegalStateException::new))\n        .map(Column::index)\n        .map(TransformTimestamp::new);\n\n   final KStream<K, GenericRow> transformed = tsTransformer\n        .map(stream::transform)\n        .orElse(stream);\n\n   return stream.to(topicName, Produced.with(keySerde, valueSerde));", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r380811817", "createdAt": "2020-02-18T17:08:22Z", "author": {"login": "big-andy-coates"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License; you may not use this file\n+ * except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.execution.plan.Formats;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.timestamp.TimestampColumn;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.KStream;\n+import org.apache.kafka.streams.kstream.Produced;\n+import org.apache.kafka.streams.kstream.Transformer;\n+import org.apache.kafka.streams.kstream.TransformerSupplier;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.To;\n+\n+public final class SinkBuilder {\n+  private SinkBuilder() {\n+  }\n+\n+  public static  <K> void build(\n+      final LogicalSchema schema,\n+      final Formats formats,\n+      final Optional<TimestampColumn> timestampColumn,\n+      final String topicName,\n+      final KStream<K, GenericRow> stream,\n+      final KeySerdeFactory<K> keySerdeFactory,\n+      final QueryContext queryContext,\n+      final KsqlQueryBuilder queryBuilder\n+  ) {\n+    final PhysicalSchema physicalSchema = PhysicalSchema.from(schema, formats.getOptions());\n+\n+    final Serde<K> keySerde = keySerdeFactory.buildKeySerde(\n+        formats.getKeyFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final Serde<GenericRow> valueSerde = queryBuilder.buildValueSerde(\n+        formats.getValueFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final int timestampColumnIndex = timestampColumn.map(TimestampColumn::getColumn)\n+        .map(c -> schema.findValueColumn(c).orElseThrow(IllegalStateException::new))\n+        .map(Column::index)\n+        .orElse(-1);\n+\n+    stream.transform(new TransformTimestamp<>(timestampColumnIndex))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMzIxMA==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383413210", "createdAt": "2020-02-24T17:41:18Z", "author": {"login": "spena"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License; you may not use this file\n+ * except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.execution.plan.Formats;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.timestamp.TimestampColumn;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.KStream;\n+import org.apache.kafka.streams.kstream.Produced;\n+import org.apache.kafka.streams.kstream.Transformer;\n+import org.apache.kafka.streams.kstream.TransformerSupplier;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.To;\n+\n+public final class SinkBuilder {\n+  private SinkBuilder() {\n+  }\n+\n+  public static  <K> void build(\n+      final LogicalSchema schema,\n+      final Formats formats,\n+      final Optional<TimestampColumn> timestampColumn,\n+      final String topicName,\n+      final KStream<K, GenericRow> stream,\n+      final KeySerdeFactory<K> keySerdeFactory,\n+      final QueryContext queryContext,\n+      final KsqlQueryBuilder queryBuilder\n+  ) {\n+    final PhysicalSchema physicalSchema = PhysicalSchema.from(schema, formats.getOptions());\n+\n+    final Serde<K> keySerde = keySerdeFactory.buildKeySerde(\n+        formats.getKeyFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final Serde<GenericRow> valueSerde = queryBuilder.buildValueSerde(\n+        formats.getValueFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final int timestampColumnIndex = timestampColumn.map(TimestampColumn::getColumn)\n+        .map(c -> schema.findValueColumn(c).orElseThrow(IllegalStateException::new))\n+        .map(Column::index)\n+        .orElse(-1);\n+\n+    stream.transform(new TransformTimestamp<>(timestampColumnIndex))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxMTgxNw=="}, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Njk4NTQyOnYy", "diffSide": "RIGHT", "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzowOTowMFrOFrK7hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo0MjoxN1rOFtpuCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxMjE2Ng==", "bodyText": "Do we need equals and hashCode for this class?", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r380812166", "createdAt": "2020-02-18T17:09:00Z", "author": {"login": "big-andy-coates"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License; you may not use this file\n+ * except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.execution.plan.Formats;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.timestamp.TimestampColumn;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.KStream;\n+import org.apache.kafka.streams.kstream.Produced;\n+import org.apache.kafka.streams.kstream.Transformer;\n+import org.apache.kafka.streams.kstream.TransformerSupplier;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.To;\n+\n+public final class SinkBuilder {\n+  private SinkBuilder() {\n+  }\n+\n+  public static  <K> void build(\n+      final LogicalSchema schema,\n+      final Formats formats,\n+      final Optional<TimestampColumn> timestampColumn,\n+      final String topicName,\n+      final KStream<K, GenericRow> stream,\n+      final KeySerdeFactory<K> keySerdeFactory,\n+      final QueryContext queryContext,\n+      final KsqlQueryBuilder queryBuilder\n+  ) {\n+    final PhysicalSchema physicalSchema = PhysicalSchema.from(schema, formats.getOptions());\n+\n+    final Serde<K> keySerde = keySerdeFactory.buildKeySerde(\n+        formats.getKeyFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final Serde<GenericRow> valueSerde = queryBuilder.buildValueSerde(\n+        formats.getValueFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final int timestampColumnIndex = timestampColumn.map(TimestampColumn::getColumn)\n+        .map(c -> schema.findValueColumn(c).orElseThrow(IllegalStateException::new))\n+        .map(Column::index)\n+        .orElse(-1);\n+\n+    stream.transform(new TransformTimestamp<>(timestampColumnIndex))\n+        .to(topicName, Produced.with(keySerde, valueSerde));\n+  }\n+\n+  static class TransformTimestamp<K>\n+      implements TransformerSupplier<K, GenericRow, KeyValue<K, GenericRow>> {\n+    private final int timestampColumnIndex;\n+\n+    TransformTimestamp(final int timestampColumnIndex) {\n+      this.timestampColumnIndex = timestampColumnIndex;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object o) {\n+      if (o == null || !(o instanceof TransformTimestamp)) {\n+        return false;\n+      }\n+\n+      final TransformTimestamp that = (TransformTimestamp)o;\n+      return timestampColumnIndex == that.timestampColumnIndex;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hashCode(timestampColumnIndex);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMzc3MA==", "bodyText": "Not needed anymore. I was using it for mocking tests when I used the assertThat methods to verify the same TransformTimestamp was called. I changed the approach and they're not used anymore.", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383413770", "createdAt": "2020-02-24T17:42:17Z", "author": {"login": "spena"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License; you may not use this file\n+ * except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.execution.plan.Formats;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.timestamp.TimestampColumn;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.KStream;\n+import org.apache.kafka.streams.kstream.Produced;\n+import org.apache.kafka.streams.kstream.Transformer;\n+import org.apache.kafka.streams.kstream.TransformerSupplier;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.To;\n+\n+public final class SinkBuilder {\n+  private SinkBuilder() {\n+  }\n+\n+  public static  <K> void build(\n+      final LogicalSchema schema,\n+      final Formats formats,\n+      final Optional<TimestampColumn> timestampColumn,\n+      final String topicName,\n+      final KStream<K, GenericRow> stream,\n+      final KeySerdeFactory<K> keySerdeFactory,\n+      final QueryContext queryContext,\n+      final KsqlQueryBuilder queryBuilder\n+  ) {\n+    final PhysicalSchema physicalSchema = PhysicalSchema.from(schema, formats.getOptions());\n+\n+    final Serde<K> keySerde = keySerdeFactory.buildKeySerde(\n+        formats.getKeyFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final Serde<GenericRow> valueSerde = queryBuilder.buildValueSerde(\n+        formats.getValueFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final int timestampColumnIndex = timestampColumn.map(TimestampColumn::getColumn)\n+        .map(c -> schema.findValueColumn(c).orElseThrow(IllegalStateException::new))\n+        .map(Column::index)\n+        .orElse(-1);\n+\n+    stream.transform(new TransformTimestamp<>(timestampColumnIndex))\n+        .to(topicName, Produced.with(keySerde, valueSerde));\n+  }\n+\n+  static class TransformTimestamp<K>\n+      implements TransformerSupplier<K, GenericRow, KeyValue<K, GenericRow>> {\n+    private final int timestampColumnIndex;\n+\n+    TransformTimestamp(final int timestampColumnIndex) {\n+      this.timestampColumnIndex = timestampColumnIndex;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object o) {\n+      if (o == null || !(o instanceof TransformTimestamp)) {\n+        return false;\n+      }\n+\n+      final TransformTimestamp that = (TransformTimestamp)o;\n+      return timestampColumnIndex == that.timestampColumnIndex;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hashCode(timestampColumnIndex);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxMjE2Ng=="}, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Njk5NjM2OnYy", "diffSide": "RIGHT", "path": "ksql-functional-tests/src/test/resources/query-validation-tests/timestampformat.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzoxMTo1OFrOFrLCZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo0MjoyMlrOFtpuJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxMzkyNA==", "bodyText": "nit: KSQL in name is superfluous!\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  \"name\": \"KSQL override output timestamp for CSAS\",\n          \n          \n            \n                  \"name\": \"override output timestamp for CSAS\",", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r380813924", "createdAt": "2020-02-18T17:11:58Z", "author": {"login": "big-andy-coates"}, "path": "ksql-functional-tests/src/test/resources/query-validation-tests/timestampformat.json", "diffHunk": "@@ -37,6 +37,38 @@\n       \"outputs\": [\n         {\"topic\": \"TS\", \"value\": {\"ETS\": 1566912669200}, \"timestamp\": 1566912669200}\n       ]\n+    },\n+    {\n+      \"name\": \"KSQL override output timestamp for CSAS\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMzc5OQ==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383413799", "createdAt": "2020-02-24T17:42:22Z", "author": {"login": "spena"}, "path": "ksql-functional-tests/src/test/resources/query-validation-tests/timestampformat.json", "diffHunk": "@@ -37,6 +37,38 @@\n       \"outputs\": [\n         {\"topic\": \"TS\", \"value\": {\"ETS\": 1566912669200}, \"timestamp\": 1566912669200}\n       ]\n+    },\n+    {\n+      \"name\": \"KSQL override output timestamp for CSAS\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxMzkyNA=="}, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Njk5NzMyOnYy", "diffSide": "RIGHT", "path": "ksql-functional-tests/src/test/resources/query-validation-tests/timestampformat.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzoxMjoxMFrOFrLDAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo0MjoyNlrOFtpuSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxNDA4MQ==", "bodyText": "as above\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  \"name\": \"KSQL override output timestamp for CTAS\",\n          \n          \n            \n                  \"name\": \"override output timestamp for CTAS\",", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r380814081", "createdAt": "2020-02-18T17:12:10Z", "author": {"login": "big-andy-coates"}, "path": "ksql-functional-tests/src/test/resources/query-validation-tests/timestampformat.json", "diffHunk": "@@ -37,6 +37,38 @@\n       \"outputs\": [\n         {\"topic\": \"TS\", \"value\": {\"ETS\": 1566912669200}, \"timestamp\": 1566912669200}\n       ]\n+    },\n+    {\n+      \"name\": \"KSQL override output timestamp for CSAS\",\n+      \"statements\": [\n+        \"CREATE STREAM TEST (ID bigint, EVENT_TS bigint) WITH (kafka_topic='test_topic', value_format='JSON', timestamp='EVENT_TS');\",\n+        \"CREATE STREAM TS WITH (timestamp='sink_ts') AS SELECT id as sink_ts, id, event_ts FROM test;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"value\": {\"ID\": 1, \"EVENT_TS\":  1526075913000}, \"timestamp\": 1526075913000},\n+        {\"topic\": \"test_topic\", \"value\": {\"ID\": 2, \"EVENT_TS\":  -1}, \"timestamp\": -1},\n+        {\"topic\": \"test_topic\", \"value\": {\"ID\": 3, \"EVENT_TS\":  1589234313000}, \"timestamp\": 1589234313000}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"TS\", \"value\": {\"SINK_TS\":1, \"ID\": 1, \"EVENT_TS\":  1526075913000}, \"timestamp\": 1},\n+        {\"topic\": \"TS\", \"value\": {\"SINK_TS\":3, \"ID\": 3, \"EVENT_TS\":  1589234313000}, \"timestamp\": 3}\n+      ]\n+    },\n+    {\n+      \"name\": \"KSQL override output timestamp for CTAS\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMzgzMw==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383413833", "createdAt": "2020-02-24T17:42:26Z", "author": {"login": "spena"}, "path": "ksql-functional-tests/src/test/resources/query-validation-tests/timestampformat.json", "diffHunk": "@@ -37,6 +37,38 @@\n       \"outputs\": [\n         {\"topic\": \"TS\", \"value\": {\"ETS\": 1566912669200}, \"timestamp\": 1566912669200}\n       ]\n+    },\n+    {\n+      \"name\": \"KSQL override output timestamp for CSAS\",\n+      \"statements\": [\n+        \"CREATE STREAM TEST (ID bigint, EVENT_TS bigint) WITH (kafka_topic='test_topic', value_format='JSON', timestamp='EVENT_TS');\",\n+        \"CREATE STREAM TS WITH (timestamp='sink_ts') AS SELECT id as sink_ts, id, event_ts FROM test;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"value\": {\"ID\": 1, \"EVENT_TS\":  1526075913000}, \"timestamp\": 1526075913000},\n+        {\"topic\": \"test_topic\", \"value\": {\"ID\": 2, \"EVENT_TS\":  -1}, \"timestamp\": -1},\n+        {\"topic\": \"test_topic\", \"value\": {\"ID\": 3, \"EVENT_TS\":  1589234313000}, \"timestamp\": 1589234313000}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"TS\", \"value\": {\"SINK_TS\":1, \"ID\": 1, \"EVENT_TS\":  1526075913000}, \"timestamp\": 1},\n+        {\"topic\": \"TS\", \"value\": {\"SINK_TS\":3, \"ID\": 3, \"EVENT_TS\":  1589234313000}, \"timestamp\": 3}\n+      ]\n+    },\n+    {\n+      \"name\": \"KSQL override output timestamp for CTAS\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxNDA4MQ=="}, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzAyNTY1OnYy", "diffSide": "RIGHT", "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzoyMDoxMFrOFrLU3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo0MjozMVrOFtpuag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxODY1NA==", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state, i.e. throw if negative.", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r380818654", "createdAt": "2020-02-18T17:20:10Z", "author": {"login": "big-andy-coates"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License; you may not use this file\n+ * except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.execution.plan.Formats;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.timestamp.TimestampColumn;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.KStream;\n+import org.apache.kafka.streams.kstream.Produced;\n+import org.apache.kafka.streams.kstream.Transformer;\n+import org.apache.kafka.streams.kstream.TransformerSupplier;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.To;\n+\n+public final class SinkBuilder {\n+  private SinkBuilder() {\n+  }\n+\n+  public static  <K> void build(\n+      final LogicalSchema schema,\n+      final Formats formats,\n+      final Optional<TimestampColumn> timestampColumn,\n+      final String topicName,\n+      final KStream<K, GenericRow> stream,\n+      final KeySerdeFactory<K> keySerdeFactory,\n+      final QueryContext queryContext,\n+      final KsqlQueryBuilder queryBuilder\n+  ) {\n+    final PhysicalSchema physicalSchema = PhysicalSchema.from(schema, formats.getOptions());\n+\n+    final Serde<K> keySerde = keySerdeFactory.buildKeySerde(\n+        formats.getKeyFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final Serde<GenericRow> valueSerde = queryBuilder.buildValueSerde(\n+        formats.getValueFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final int timestampColumnIndex = timestampColumn.map(TimestampColumn::getColumn)\n+        .map(c -> schema.findValueColumn(c).orElseThrow(IllegalStateException::new))\n+        .map(Column::index)\n+        .orElse(-1);\n+\n+    stream.transform(new TransformTimestamp<>(timestampColumnIndex))\n+        .to(topicName, Produced.with(keySerde, valueSerde));\n+  }\n+\n+  static class TransformTimestamp<K>\n+      implements TransformerSupplier<K, GenericRow, KeyValue<K, GenericRow>> {\n+    private final int timestampColumnIndex;\n+\n+    TransformTimestamp(final int timestampColumnIndex) {\n+      this.timestampColumnIndex = timestampColumnIndex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMzg2Ng==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383413866", "createdAt": "2020-02-24T17:42:31Z", "author": {"login": "spena"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License; you may not use this file\n+ * except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.execution.plan.Formats;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.timestamp.TimestampColumn;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.KStream;\n+import org.apache.kafka.streams.kstream.Produced;\n+import org.apache.kafka.streams.kstream.Transformer;\n+import org.apache.kafka.streams.kstream.TransformerSupplier;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.To;\n+\n+public final class SinkBuilder {\n+  private SinkBuilder() {\n+  }\n+\n+  public static  <K> void build(\n+      final LogicalSchema schema,\n+      final Formats formats,\n+      final Optional<TimestampColumn> timestampColumn,\n+      final String topicName,\n+      final KStream<K, GenericRow> stream,\n+      final KeySerdeFactory<K> keySerdeFactory,\n+      final QueryContext queryContext,\n+      final KsqlQueryBuilder queryBuilder\n+  ) {\n+    final PhysicalSchema physicalSchema = PhysicalSchema.from(schema, formats.getOptions());\n+\n+    final Serde<K> keySerde = keySerdeFactory.buildKeySerde(\n+        formats.getKeyFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final Serde<GenericRow> valueSerde = queryBuilder.buildValueSerde(\n+        formats.getValueFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final int timestampColumnIndex = timestampColumn.map(TimestampColumn::getColumn)\n+        .map(c -> schema.findValueColumn(c).orElseThrow(IllegalStateException::new))\n+        .map(Column::index)\n+        .orElse(-1);\n+\n+    stream.transform(new TransformTimestamp<>(timestampColumnIndex))\n+        .to(topicName, Produced.with(keySerde, valueSerde));\n+  }\n+\n+  static class TransformTimestamp<K>\n+      implements TransformerSupplier<K, GenericRow, KeyValue<K, GenericRow>> {\n+    private final int timestampColumnIndex;\n+\n+    TransformTimestamp(final int timestampColumnIndex) {\n+      this.timestampColumnIndex = timestampColumnIndex;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxODY1NA=="}, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzAzODA3OnYy", "diffSide": "RIGHT", "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzoyMzozN1rOFrLcnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo0MjozNlrOFtpumg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyMDYzOQ==", "bodyText": "The timestampColumnIndex >= 0 bit can be removed if we're not introducing this step if not timestamp column is supplied.\nThe row.get(timestampColumnIndex) instanceof Long bit should be removed as prior code should already have checked the timestamp column exists and is of the right type.\nBTW, I believe CTAS/CSAS support WITH(TIMESTAMP_FORMAT) (the docs say they do), so the value may well be a string!", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r380820639", "createdAt": "2020-02-18T17:23:37Z", "author": {"login": "big-andy-coates"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License; you may not use this file\n+ * except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.execution.plan.Formats;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.timestamp.TimestampColumn;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.KStream;\n+import org.apache.kafka.streams.kstream.Produced;\n+import org.apache.kafka.streams.kstream.Transformer;\n+import org.apache.kafka.streams.kstream.TransformerSupplier;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.To;\n+\n+public final class SinkBuilder {\n+  private SinkBuilder() {\n+  }\n+\n+  public static  <K> void build(\n+      final LogicalSchema schema,\n+      final Formats formats,\n+      final Optional<TimestampColumn> timestampColumn,\n+      final String topicName,\n+      final KStream<K, GenericRow> stream,\n+      final KeySerdeFactory<K> keySerdeFactory,\n+      final QueryContext queryContext,\n+      final KsqlQueryBuilder queryBuilder\n+  ) {\n+    final PhysicalSchema physicalSchema = PhysicalSchema.from(schema, formats.getOptions());\n+\n+    final Serde<K> keySerde = keySerdeFactory.buildKeySerde(\n+        formats.getKeyFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final Serde<GenericRow> valueSerde = queryBuilder.buildValueSerde(\n+        formats.getValueFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final int timestampColumnIndex = timestampColumn.map(TimestampColumn::getColumn)\n+        .map(c -> schema.findValueColumn(c).orElseThrow(IllegalStateException::new))\n+        .map(Column::index)\n+        .orElse(-1);\n+\n+    stream.transform(new TransformTimestamp<>(timestampColumnIndex))\n+        .to(topicName, Produced.with(keySerde, valueSerde));\n+  }\n+\n+  static class TransformTimestamp<K>\n+      implements TransformerSupplier<K, GenericRow, KeyValue<K, GenericRow>> {\n+    private final int timestampColumnIndex;\n+\n+    TransformTimestamp(final int timestampColumnIndex) {\n+      this.timestampColumnIndex = timestampColumnIndex;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object o) {\n+      if (o == null || !(o instanceof TransformTimestamp)) {\n+        return false;\n+      }\n+\n+      final TransformTimestamp that = (TransformTimestamp)o;\n+      return timestampColumnIndex == that.timestampColumnIndex;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hashCode(timestampColumnIndex);\n+    }\n+\n+    @Override\n+    public Transformer<K, GenericRow, KeyValue<K, GenericRow>> get() {\n+      return new Transformer<K, GenericRow, KeyValue<K, GenericRow>>() {\n+        private ProcessorContext processorContext;\n+\n+        @Override\n+        public void init(final ProcessorContext processorContext) {\n+          this.processorContext = requireNonNull(processorContext, \"processorContext\");\n+        }\n+\n+        @Override\n+        public KeyValue<K, GenericRow> transform(final K key, final GenericRow row) {\n+          if (timestampColumnIndex >= 0 && row.get(timestampColumnIndex) instanceof Long) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMzkxNA==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383413914", "createdAt": "2020-02-24T17:42:36Z", "author": {"login": "spena"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License; you may not use this file\n+ * except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.execution.plan.Formats;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.timestamp.TimestampColumn;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.KStream;\n+import org.apache.kafka.streams.kstream.Produced;\n+import org.apache.kafka.streams.kstream.Transformer;\n+import org.apache.kafka.streams.kstream.TransformerSupplier;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.To;\n+\n+public final class SinkBuilder {\n+  private SinkBuilder() {\n+  }\n+\n+  public static  <K> void build(\n+      final LogicalSchema schema,\n+      final Formats formats,\n+      final Optional<TimestampColumn> timestampColumn,\n+      final String topicName,\n+      final KStream<K, GenericRow> stream,\n+      final KeySerdeFactory<K> keySerdeFactory,\n+      final QueryContext queryContext,\n+      final KsqlQueryBuilder queryBuilder\n+  ) {\n+    final PhysicalSchema physicalSchema = PhysicalSchema.from(schema, formats.getOptions());\n+\n+    final Serde<K> keySerde = keySerdeFactory.buildKeySerde(\n+        formats.getKeyFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final Serde<GenericRow> valueSerde = queryBuilder.buildValueSerde(\n+        formats.getValueFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final int timestampColumnIndex = timestampColumn.map(TimestampColumn::getColumn)\n+        .map(c -> schema.findValueColumn(c).orElseThrow(IllegalStateException::new))\n+        .map(Column::index)\n+        .orElse(-1);\n+\n+    stream.transform(new TransformTimestamp<>(timestampColumnIndex))\n+        .to(topicName, Produced.with(keySerde, valueSerde));\n+  }\n+\n+  static class TransformTimestamp<K>\n+      implements TransformerSupplier<K, GenericRow, KeyValue<K, GenericRow>> {\n+    private final int timestampColumnIndex;\n+\n+    TransformTimestamp(final int timestampColumnIndex) {\n+      this.timestampColumnIndex = timestampColumnIndex;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object o) {\n+      if (o == null || !(o instanceof TransformTimestamp)) {\n+        return false;\n+      }\n+\n+      final TransformTimestamp that = (TransformTimestamp)o;\n+      return timestampColumnIndex == that.timestampColumnIndex;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hashCode(timestampColumnIndex);\n+    }\n+\n+    @Override\n+    public Transformer<K, GenericRow, KeyValue<K, GenericRow>> get() {\n+      return new Transformer<K, GenericRow, KeyValue<K, GenericRow>>() {\n+        private ProcessorContext processorContext;\n+\n+        @Override\n+        public void init(final ProcessorContext processorContext) {\n+          this.processorContext = requireNonNull(processorContext, \"processorContext\");\n+        }\n+\n+        @Override\n+        public KeyValue<K, GenericRow> transform(final K key, final GenericRow row) {\n+          if (timestampColumnIndex >= 0 && row.get(timestampColumnIndex) instanceof Long) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyMDYzOQ=="}, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzA2MDkwOnYy", "diffSide": "RIGHT", "path": "ksql-streams/src/test/java/io/confluent/ksql/execution/streams/StreamSinkBuilderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzozMDowMlrOFrLqxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo0Mjo0N1rOFtpu9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyNDI2MQ==", "bodyText": "This test class and TableSinkBuilderTest are now both essentially just testing the new SinkBuilder class.\nMove the tests from these two test classes into SinkBuilderTest and remove them.", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r380824261", "createdAt": "2020-02-18T17:30:02Z", "author": {"login": "big-andy-coates"}, "path": "ksql-streams/src/test/java/io/confluent/ksql/execution/streams/StreamSinkBuilderTest.java", "diffHunk": "@@ -90,12 +92,14 @@ public void setup() {\n     when(keySerdeFactory.buildKeySerde(any(), any(), any())).thenReturn(keySerde);\n     when(queryBuilder.buildValueSerde(any(), any(), any())).thenReturn(valSerde);\n     when(source.build(any())).thenReturn(new KStreamHolder<>(kStream, SCHEMA, keySerdeFactory));\n+    doReturn(kStream).when(kStream).transform(any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxNDAwNQ==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383414005", "createdAt": "2020-02-24T17:42:47Z", "author": {"login": "spena"}, "path": "ksql-streams/src/test/java/io/confluent/ksql/execution/streams/StreamSinkBuilderTest.java", "diffHunk": "@@ -90,12 +92,14 @@ public void setup() {\n     when(keySerdeFactory.buildKeySerde(any(), any(), any())).thenReturn(keySerde);\n     when(queryBuilder.buildValueSerde(any(), any(), any())).thenReturn(valSerde);\n     when(source.build(any())).thenReturn(new KStreamHolder<>(kStream, SCHEMA, keySerdeFactory));\n+    doReturn(kStream).when(kStream).transform(any());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyNDI2MQ=="}, "originalCommit": {"oid": "2a587f17b5c22837a4bee556d86a12b4bb742abe"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDI4OTAzOnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/test/resources/ksql-plan-schema/schema.json", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoyNTowMlrOFtrAGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDoxNzoyM1rOFuHtvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzNDc3OA==", "bodyText": "timestampColumn should be optional, right? Not required.\nI think with this the way it is the JSON would fail to validate if it had no timestamp column defined.", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383434778", "createdAt": "2020-02-24T18:25:02Z", "author": {"login": "big-andy-coates"}, "path": "ksql-rest-app/src/test/resources/ksql-plan-schema/schema.json", "diffHunk": "@@ -447,10 +447,13 @@\n         },\n         \"topicName\" : {\n           \"type\" : \"string\"\n+        },\n+        \"timestampColumn\" : {\n+          \"$ref\" : \"#/definitions/TimestampColumn\"\n         }\n       },\n       \"title\" : \"streamSinkV1\",\n-      \"required\" : [ \"@type\", \"properties\", \"source\", \"formats\", \"topicName\" ]\n+      \"required\" : [ \"@type\", \"properties\", \"source\", \"formats\", \"topicName\", \"timestampColumn\" ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4989d2cc4bddc2174b304a11a661f212077a61f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ1MTg0NQ==", "bodyText": "@rodesai is there a test somewhere that tests existing plans validate against the schema?", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383451845", "createdAt": "2020-02-24T18:58:10Z", "author": {"login": "big-andy-coates"}, "path": "ksql-rest-app/src/test/resources/ksql-plan-schema/schema.json", "diffHunk": "@@ -447,10 +447,13 @@\n         },\n         \"topicName\" : {\n           \"type\" : \"string\"\n+        },\n+        \"timestampColumn\" : {\n+          \"$ref\" : \"#/definitions/TimestampColumn\"\n         }\n       },\n       \"title\" : \"streamSinkV1\",\n-      \"required\" : [ \"@type\", \"properties\", \"source\", \"formats\", \"topicName\" ]\n+      \"required\" : [ \"@type\", \"properties\", \"source\", \"formats\", \"topicName\", \"timestampColumn\" ]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzNDc3OA=="}, "originalCommit": {"oid": "d4989d2cc4bddc2174b304a11a661f212077a61f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzU2NTA2NQ==", "bodyText": "our qtt tests should catch any existing plans that fail to deserialize. In this case I think the schema is just wrong. @spena how did you generate it?", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383565065", "createdAt": "2020-02-24T22:58:51Z", "author": {"login": "rodesai"}, "path": "ksql-rest-app/src/test/resources/ksql-plan-schema/schema.json", "diffHunk": "@@ -447,10 +447,13 @@\n         },\n         \"topicName\" : {\n           \"type\" : \"string\"\n+        },\n+        \"timestampColumn\" : {\n+          \"$ref\" : \"#/definitions/TimestampColumn\"\n         }\n       },\n       \"title\" : \"streamSinkV1\",\n-      \"required\" : [ \"@type\", \"properties\", \"source\", \"formats\", \"topicName\" ]\n+      \"required\" : [ \"@type\", \"properties\", \"source\", \"formats\", \"topicName\", \"timestampColumn\" ]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzNDc3OA=="}, "originalCommit": {"oid": "d4989d2cc4bddc2174b304a11a661f212077a61f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkwNTIxNQ==", "bodyText": "But do we deserialize using the schema?", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383905215", "createdAt": "2020-02-25T14:17:23Z", "author": {"login": "big-andy-coates"}, "path": "ksql-rest-app/src/test/resources/ksql-plan-schema/schema.json", "diffHunk": "@@ -447,10 +447,13 @@\n         },\n         \"topicName\" : {\n           \"type\" : \"string\"\n+        },\n+        \"timestampColumn\" : {\n+          \"$ref\" : \"#/definitions/TimestampColumn\"\n         }\n       },\n       \"title\" : \"streamSinkV1\",\n-      \"required\" : [ \"@type\", \"properties\", \"source\", \"formats\", \"topicName\" ]\n+      \"required\" : [ \"@type\", \"properties\", \"source\", \"formats\", \"topicName\", \"timestampColumn\" ]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzNDc3OA=="}, "originalCommit": {"oid": "d4989d2cc4bddc2174b304a11a661f212077a61f"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDI4OTc5OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/test/resources/ksql-plan-schema/schema.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoyNToxM1rOFtrAjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODoyNToxM1rOFtrAjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzNDg5NA==", "bodyText": "As above:\n\ntimestampColumn should be optional, right? Not required.\nI think with this the way it is the JSON would fail to validate if it had no timestamp column defined.", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383434894", "createdAt": "2020-02-24T18:25:13Z", "author": {"login": "big-andy-coates"}, "path": "ksql-rest-app/src/test/resources/ksql-plan-schema/schema.json", "diffHunk": "@@ -803,10 +806,13 @@\n         },\n         \"topicName\" : {\n           \"type\" : \"string\"\n+        },\n+        \"timestampColumn\" : {\n+          \"$ref\" : \"#/definitions/TimestampColumn\"\n         }\n       },\n       \"title\" : \"tableSinkV1\",\n-      \"required\" : [ \"@type\", \"properties\", \"source\", \"formats\", \"topicName\" ]\n+      \"required\" : [ \"@type\", \"properties\", \"source\", \"formats\", \"topicName\", \"timestampColumn\" ]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4989d2cc4bddc2174b304a11a661f212077a61f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDMyMTYwOnYy", "diffSide": "RIGHT", "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODozNTowMlrOFtrUKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODozNTowMlrOFtrUKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQzOTkxMw==", "bodyText": "Can we used the variant of transform that takes a Named please, so that we can give the step in the topology a more descriptive name than just KSTREAM-TRANSFORM-0003, e.g. name it Apply-timestamp or similar.\n(You'll need to re-write the topologies again once you've done this)", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383439913", "createdAt": "2020-02-24T18:35:02Z", "author": {"login": "big-andy-coates"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License; you may not use this file\n+ * except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.execution.plan.Formats;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.streams.timestamp.AbstractColumnTimestampExtractor;\n+import io.confluent.ksql.execution.streams.timestamp.TimestampExtractionPolicy;\n+import io.confluent.ksql.execution.streams.timestamp.TimestampExtractionPolicyFactory;\n+import io.confluent.ksql.execution.timestamp.TimestampColumn;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+import io.confluent.ksql.util.KsqlConfig;\n+import java.util.Optional;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.KStream;\n+import org.apache.kafka.streams.kstream.Produced;\n+import org.apache.kafka.streams.kstream.Transformer;\n+import org.apache.kafka.streams.kstream.TransformerSupplier;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.To;\n+\n+public final class SinkBuilder {\n+  private SinkBuilder() {\n+  }\n+\n+  public static  <K> void build(\n+      final LogicalSchema schema,\n+      final Formats formats,\n+      final Optional<TimestampColumn> timestampColumn,\n+      final String topicName,\n+      final KStream<K, GenericRow> stream,\n+      final KeySerdeFactory<K> keySerdeFactory,\n+      final QueryContext queryContext,\n+      final KsqlQueryBuilder queryBuilder\n+  ) {\n+    final PhysicalSchema physicalSchema = PhysicalSchema.from(schema, formats.getOptions());\n+\n+    final Serde<K> keySerde = keySerdeFactory.buildKeySerde(\n+        formats.getKeyFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final Serde<GenericRow> valueSerde = queryBuilder.buildValueSerde(\n+        formats.getValueFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final Optional<TransformTimestamp<K>> tsTransformer = timestampTransformer(\n+        queryBuilder.getKsqlConfig(),\n+        schema,\n+        timestampColumn\n+    );\n+\n+    final KStream<K, GenericRow> transformed = tsTransformer\n+        .map(t -> stream.transform(t))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4989d2cc4bddc2174b304a11a661f212077a61f"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDM2NTM0OnYy", "diffSide": "RIGHT", "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODo0ODoyNlrOFtrvHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODo0ODoyNlrOFtrvHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0NjgxNA==", "bodyText": "Remove this filter (and cast), by passing making TimestampExtractionPolicy.create return KsqlTimestampExtraction, where KsqlTimestampExtraction extends TimestampExtraction.", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383446814", "createdAt": "2020-02-24T18:48:26Z", "author": {"login": "big-andy-coates"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License; you may not use this file\n+ * except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.execution.plan.Formats;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.streams.timestamp.AbstractColumnTimestampExtractor;\n+import io.confluent.ksql.execution.streams.timestamp.TimestampExtractionPolicy;\n+import io.confluent.ksql.execution.streams.timestamp.TimestampExtractionPolicyFactory;\n+import io.confluent.ksql.execution.timestamp.TimestampColumn;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+import io.confluent.ksql.util.KsqlConfig;\n+import java.util.Optional;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.KStream;\n+import org.apache.kafka.streams.kstream.Produced;\n+import org.apache.kafka.streams.kstream.Transformer;\n+import org.apache.kafka.streams.kstream.TransformerSupplier;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.To;\n+\n+public final class SinkBuilder {\n+  private SinkBuilder() {\n+  }\n+\n+  public static  <K> void build(\n+      final LogicalSchema schema,\n+      final Formats formats,\n+      final Optional<TimestampColumn> timestampColumn,\n+      final String topicName,\n+      final KStream<K, GenericRow> stream,\n+      final KeySerdeFactory<K> keySerdeFactory,\n+      final QueryContext queryContext,\n+      final KsqlQueryBuilder queryBuilder\n+  ) {\n+    final PhysicalSchema physicalSchema = PhysicalSchema.from(schema, formats.getOptions());\n+\n+    final Serde<K> keySerde = keySerdeFactory.buildKeySerde(\n+        formats.getKeyFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final Serde<GenericRow> valueSerde = queryBuilder.buildValueSerde(\n+        formats.getValueFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final Optional<TransformTimestamp<K>> tsTransformer = timestampTransformer(\n+        queryBuilder.getKsqlConfig(),\n+        schema,\n+        timestampColumn\n+    );\n+\n+    final KStream<K, GenericRow> transformed = tsTransformer\n+        .map(t -> stream.transform(t))\n+        .orElse(stream);\n+\n+    transformed.to(topicName, Produced.with(keySerde, valueSerde));\n+  }\n+\n+  private static  <K> Optional<TransformTimestamp<K>> timestampTransformer(\n+      final KsqlConfig ksqlConfig,\n+      final LogicalSchema sourceSchema,\n+      final Optional<TimestampColumn> timestampColumn\n+  ) {\n+    if (!timestampColumn.isPresent()) {\n+      return Optional.empty();\n+    }\n+\n+    final TimestampExtractionPolicy timestampPolicy = TimestampExtractionPolicyFactory.create(\n+        ksqlConfig,\n+        sourceSchema,\n+        timestampColumn\n+    );\n+\n+    return timestampColumn\n+        .map(TimestampColumn::getColumn)\n+        .map(c -> sourceSchema.findValueColumn(c).orElseThrow(IllegalStateException::new))\n+        .map(Column::index)\n+        .map(timestampPolicy::create)\n+        .filter(te -> te instanceof AbstractColumnTimestampExtractor)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4989d2cc4bddc2174b304a11a661f212077a61f"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDM3NjI0OnYy", "diffSide": "RIGHT", "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/AbstractColumnTimestampExtractor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODo1MTo0NlrOFtr1qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODo1MTo0NlrOFtr1qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0ODQ5MA==", "bodyText": "I'd consider just making this an interface:\npublic interface KsqlTimestampExtractor implements TimestampExtractor {\n\n  long extract(GenericRow row);\n\n  default long extract(final ConsumerRecord<Object, Object> record, final long previousTimestamp) {\n       return extract((GenericRow) record.value());\n  }\n}\nThis is because the base class can't actually handle getting the column at index timetampColumnIndex out of the row for the subclasses, so the abstract class isn't adding much.\nNote:\n\nThis impl throws if the value is not a GenericRow - as it should always be a GenericRow and it should fail if its not.  Return a timestamp of 0 just doesn't make any sense.\nI've removed the common exception handling. Why? Because we'd want the same exception handling when calling extreact(row) directly, so it seems to me we still need the exception handling in the subclasses.", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383448490", "createdAt": "2020-02-24T18:51:46Z", "author": {"login": "big-andy-coates"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/AbstractColumnTimestampExtractor.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams.timestamp;\n+\n+import com.google.common.base.Preconditions;\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.util.KsqlException;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.streams.processor.TimestampExtractor;\n+\n+public abstract class AbstractColumnTimestampExtractor implements TimestampExtractor {\n+  protected final int timetampColumnIndex;\n+\n+  AbstractColumnTimestampExtractor(final int timestampColumnindex) {\n+    Preconditions.checkArgument(timestampColumnindex >= 0, \"timestampColumnindex must be >= 0\");\n+    this.timetampColumnIndex = timestampColumnindex;\n+  }\n+\n+  @Override\n+  public long extract(final ConsumerRecord<Object, Object> record, final long previousTimestamp) {\n+    if (record.value() instanceof GenericRow) {\n+      try {\n+        return extract((GenericRow) record.value());\n+      } catch (final Exception e) {\n+        throw new KsqlException(\"Unable to extract timestamp from record.\"\n+            + \" record=\" + record,\n+            e);\n+      }\n+    }\n+\n+    return 0;\n+  }\n+\n+  public abstract long extract(GenericRow row);\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4989d2cc4bddc2174b304a11a661f212077a61f"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDM4NjM2OnYy", "diffSide": "RIGHT", "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODo1NDo0N1rOFtr77Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODo1NDo0N1rOFtr77Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ1MDA5Mw==", "bodyText": "If this throws.... does the exception get logged?  Does it kill the streams task?\n@rodesai what do you think should be the behaviour here?  I guess it should be inline with other parts of the processing. What happens with (de)serialization errors?", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383450093", "createdAt": "2020-02-24T18:54:47Z", "author": {"login": "big-andy-coates"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SinkBuilder.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License; you may not use this file\n+ * except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.execution.plan.Formats;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.streams.timestamp.AbstractColumnTimestampExtractor;\n+import io.confluent.ksql.execution.streams.timestamp.TimestampExtractionPolicy;\n+import io.confluent.ksql.execution.streams.timestamp.TimestampExtractionPolicyFactory;\n+import io.confluent.ksql.execution.timestamp.TimestampColumn;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+import io.confluent.ksql.util.KsqlConfig;\n+import java.util.Optional;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.KStream;\n+import org.apache.kafka.streams.kstream.Produced;\n+import org.apache.kafka.streams.kstream.Transformer;\n+import org.apache.kafka.streams.kstream.TransformerSupplier;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.To;\n+\n+public final class SinkBuilder {\n+  private SinkBuilder() {\n+  }\n+\n+  public static  <K> void build(\n+      final LogicalSchema schema,\n+      final Formats formats,\n+      final Optional<TimestampColumn> timestampColumn,\n+      final String topicName,\n+      final KStream<K, GenericRow> stream,\n+      final KeySerdeFactory<K> keySerdeFactory,\n+      final QueryContext queryContext,\n+      final KsqlQueryBuilder queryBuilder\n+  ) {\n+    final PhysicalSchema physicalSchema = PhysicalSchema.from(schema, formats.getOptions());\n+\n+    final Serde<K> keySerde = keySerdeFactory.buildKeySerde(\n+        formats.getKeyFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final Serde<GenericRow> valueSerde = queryBuilder.buildValueSerde(\n+        formats.getValueFormat(),\n+        physicalSchema,\n+        queryContext\n+    );\n+\n+    final Optional<TransformTimestamp<K>> tsTransformer = timestampTransformer(\n+        queryBuilder.getKsqlConfig(),\n+        schema,\n+        timestampColumn\n+    );\n+\n+    final KStream<K, GenericRow> transformed = tsTransformer\n+        .map(t -> stream.transform(t))\n+        .orElse(stream);\n+\n+    transformed.to(topicName, Produced.with(keySerde, valueSerde));\n+  }\n+\n+  private static  <K> Optional<TransformTimestamp<K>> timestampTransformer(\n+      final KsqlConfig ksqlConfig,\n+      final LogicalSchema sourceSchema,\n+      final Optional<TimestampColumn> timestampColumn\n+  ) {\n+    if (!timestampColumn.isPresent()) {\n+      return Optional.empty();\n+    }\n+\n+    final TimestampExtractionPolicy timestampPolicy = TimestampExtractionPolicyFactory.create(\n+        ksqlConfig,\n+        sourceSchema,\n+        timestampColumn\n+    );\n+\n+    return timestampColumn\n+        .map(TimestampColumn::getColumn)\n+        .map(c -> sourceSchema.findValueColumn(c).orElseThrow(IllegalStateException::new))\n+        .map(Column::index)\n+        .map(timestampPolicy::create)\n+        .filter(te -> te instanceof AbstractColumnTimestampExtractor)\n+        .map(te -> new TransformTimestamp<>((AbstractColumnTimestampExtractor)te));\n+  }\n+\n+  static class TransformTimestamp<K>\n+      implements TransformerSupplier<K, GenericRow, KeyValue<K, GenericRow>> {\n+    final AbstractColumnTimestampExtractor timestampExtractor;\n+\n+    TransformTimestamp(final AbstractColumnTimestampExtractor timestampExtractor) {\n+      this.timestampExtractor = requireNonNull(timestampExtractor, \"timestampExtractor\");\n+    }\n+\n+    @Override\n+    public Transformer<K, GenericRow, KeyValue<K, GenericRow>> get() {\n+      return new Transformer<K, GenericRow, KeyValue<K, GenericRow>>() {\n+        private ProcessorContext processorContext;\n+\n+        @Override\n+        public void init(final ProcessorContext processorContext) {\n+          this.processorContext = requireNonNull(processorContext, \"processorContext\");\n+        }\n+\n+        @Override\n+        public KeyValue<K, GenericRow> transform(final K key, final GenericRow row) {\n+          processorContext.forward(\n+              key,\n+              row,\n+              To.all().withTimestamp(timestampExtractor.extract(row))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4989d2cc4bddc2174b304a11a661f212077a61f"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDM5MDM5OnYy", "diffSide": "RIGHT", "path": "ksql-streams/src/test/java/io/confluent/ksql/execution/streams/SinkBuilderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODo1NjowNVrOFtr-dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODo1NjowNVrOFtr-dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ1MDc0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldThrowIfNegativeProcessorContext() {\n          \n          \n            \n              public void shouldThrowOnNullProcessorContext() {", "url": "https://github.com/confluentinc/ksql/pull/4489#discussion_r383450742", "createdAt": "2020-02-24T18:56:05Z", "author": {"login": "big-andy-coates"}, "path": "ksql-streams/src/test/java/io/confluent/ksql/execution/streams/SinkBuilderTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License; you may not use this file\n+ * except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.execution.plan.Formats;\n+import io.confluent.ksql.execution.plan.KeySerdeFactory;\n+import io.confluent.ksql.execution.streams.timestamp.AbstractColumnTimestampExtractor;\n+import io.confluent.ksql.execution.timestamp.TimestampColumn;\n+import io.confluent.ksql.name.ColumnName;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+import io.confluent.ksql.schema.ksql.types.SqlTypes;\n+import io.confluent.ksql.serde.FormatFactory;\n+import io.confluent.ksql.serde.FormatInfo;\n+import io.confluent.ksql.serde.SerdeOption;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.streams.KeyValue;\n+import org.apache.kafka.streams.kstream.KStream;\n+import org.apache.kafka.streams.kstream.Produced;\n+import org.apache.kafka.streams.kstream.Transformer;\n+import org.apache.kafka.streams.processor.ProcessorContext;\n+import org.apache.kafka.streams.processor.To;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InOrder;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+import java.util.Optional;\n+\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SinkBuilderTest {\n+  private static final String TOPIC = \"TOPIC\";\n+\n+  private static final LogicalSchema SCHEMA = LogicalSchema.builder()\n+      .valueColumn(ColumnName.of(\"BLUE\"), SqlTypes.BIGINT)\n+      .valueColumn(ColumnName.of(\"GREEN\"), SqlTypes.STRING)\n+      .build();\n+\n+  private static final FormatInfo KEY_FORMAT = FormatInfo.of(FormatFactory.KAFKA.name());\n+  private static final FormatInfo VALUE_FORMAT = FormatInfo.of(FormatFactory.JSON.name());\n+  private static final PhysicalSchema PHYSICAL_SCHEMA =\n+      PhysicalSchema.from(SCHEMA.withoutMetaAndKeyColsInValue(), SerdeOption.none());\n+\n+  @Mock\n+  private KsqlQueryBuilder queryBuilder;\n+  @Mock\n+  private KeySerdeFactory<Struct> keySerdeFactory;\n+  @Mock\n+  private KStream<Struct, GenericRow> kStream;\n+  @Mock\n+  private Serde<Struct> keySerde;\n+  @Mock\n+  private Serde<GenericRow> valSerde;\n+  @Mock\n+  private QueryContext queryContext;\n+  @Mock\n+  private GenericRow row;\n+  @Captor\n+  private ArgumentCaptor<To> toCaptor;\n+\n+  @Before\n+  public void setup() {\n+    when(keySerdeFactory.buildKeySerde(any(), any(), any())).thenReturn(keySerde);\n+    when(queryBuilder.buildValueSerde(any(), any(), any())).thenReturn(valSerde);\n+    doReturn(kStream).when(kStream).transform(any());\n+  }\n+\n+  @Test\n+  public void shouldBuildKeySerdeCorrectly() {\n+    // Given/When\n+    buildDefaultSinkBuilder();\n+\n+    // Then:\n+    verify(keySerdeFactory).buildKeySerde(KEY_FORMAT, PHYSICAL_SCHEMA, queryContext);\n+  }\n+\n+  @Test\n+  public void shouldBuildValueSerdeCorrectly() {\n+    // Given/When\n+    buildDefaultSinkBuilder();\n+\n+    // Then:\n+    verify(queryBuilder).buildValueSerde(\n+        VALUE_FORMAT,\n+        PHYSICAL_SCHEMA,\n+        queryContext\n+    );\n+  }\n+\n+  @Test\n+  public void shouldWriteOutStreamWithCorrectSerdes() {\n+    // Given/When\n+    buildDefaultSinkBuilder();\n+\n+    // Then\n+    verify(kStream).to(anyString(), eq(Produced.with(keySerde, valSerde)));\n+  }\n+\n+  @Test\n+  public void shouldWriteOutStreamToCorrectTopic() {\n+    // Given/When\n+    buildDefaultSinkBuilder();\n+\n+    // Then\n+    verify(kStream).to(eq(TOPIC), any());\n+  }\n+\n+  @Test\n+  public void shouldBuildStreamUsingTransformTimestampWhenTimestampIsSpecified() {\n+    // Given/When\n+    SinkBuilder.build(\n+        SCHEMA,\n+        Formats.of(KEY_FORMAT, VALUE_FORMAT, SerdeOption.none()),\n+        Optional.of(new TimestampColumn(ColumnName.of(\"BLUE\"), Optional.empty())),\n+        TOPIC,\n+        kStream,\n+        keySerdeFactory,\n+        queryContext,\n+        queryBuilder\n+    );\n+\n+    // Then\n+    final InOrder inOrder = Mockito.inOrder(kStream);\n+    inOrder.verify(kStream).transform(any());\n+    inOrder.verify(kStream).to(anyString(), any());\n+    inOrder.verifyNoMoreInteractions();\n+  }\n+\n+  @Test\n+  public void shouldBuildStreamWithoutTransformTimestampWhenNoTimestampIsSpecified() {\n+    // Given/When\n+    buildDefaultSinkBuilder();\n+\n+    // Then\n+    final InOrder inOrder = Mockito.inOrder(kStream);\n+    inOrder.verify(kStream).to(anyString(), any());\n+    inOrder.verifyNoMoreInteractions();\n+  }\n+\n+  @Test\n+  public void shouldTransformTimestampRow() {\n+    // Given\n+    final long timestampColumnValue = 10001;\n+    final ProcessorContext context = mock(ProcessorContext.class);\n+    final AbstractColumnTimestampExtractor timestampExtractor\n+        = mock(AbstractColumnTimestampExtractor.class);\n+    when(timestampExtractor.extract(any())).thenReturn(timestampColumnValue);\n+\n+    // When\n+    final Transformer<String, GenericRow, KeyValue<String, GenericRow>> transformer =\n+        new SinkBuilder.TransformTimestamp<String>(timestampExtractor).get();\n+    transformer.init(context);\n+    final KeyValue<String, GenericRow> kv = transformer.transform(\"key\", row);\n+\n+    // Then\n+    assertNull(kv);\n+    verify(timestampExtractor).extract(row);\n+    verify(context, Mockito.times(1))\n+        .forward(eq(\"key\"), eq(row), toCaptor.capture());\n+    assertTrue(toCaptor.getValue().equals(To.all().withTimestamp(timestampColumnValue)));\n+  }\n+\n+  @Test(expected = NullPointerException.class)\n+  public void shouldThrowIfNegativeProcessorContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4989d2cc4bddc2174b304a11a661f212077a61f"}, "originalPosition": 195}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2121, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}