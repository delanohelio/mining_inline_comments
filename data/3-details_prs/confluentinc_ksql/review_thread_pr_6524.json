{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMzIzNjUw", "number": 6524, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTo0MDo0NFrOEyGT2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzozMzowNVrOE1h58w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTY3NjQwOnYy", "diffSide": "LEFT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTo0MDo0NFrOHojdbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTo0MTozOVrOHtBdMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI4NjA2Mg==", "bodyText": "We should be returning the record even if it isn't backed up. The CommandRunner has logic to detect when the command topic and backup are out of sync/the command is incompatible.", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r512286062", "createdAt": "2020-10-26T21:40:44Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "diffHunk": "@@ -90,7 +90,6 @@ public void start() {\n           log.warn(\"Backup is out of sync with the current command topic. \"\n               + \"Backups will not work until the previous command topic is \"\n               + \"restored or all backup files are deleted.\", e);\n-          return records;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a63a3b7f7323aa059387239625a5dfe0d1313cc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIwMTkyMA==", "bodyText": "this check detects the case where the backup and the command topic are inconsistent (have different contents). in that case we shouldn't return the command here, otherwise the command runner will try to execute it.", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r513201920", "createdAt": "2020-10-28T06:13:09Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "diffHunk": "@@ -90,7 +90,6 @@ public void start() {\n           log.warn(\"Backup is out of sync with the current command topic. \"\n               + \"Backups will not work until the previous command topic is \"\n               + \"restored or all backup files are deleted.\", e);\n-          return records;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI4NjA2Mg=="}, "originalCommit": {"oid": "3a63a3b7f7323aa059387239625a5dfe0d1313cc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYyMjQ3Ng==", "bodyText": "We should still return the record in some cases. For example, the command topic backup will fail to back up incompatible commands (it tries to deserialize the command before backing it up) Currently the throwOnInvalidRecords in the CommandTopicBackupImpl doesn't count as corruption so the incompatible commands don't actually cause the server to enter degraded state if backups are enabled. I think these incompatible commands should still be returned so the CommandRunner can attempt to deserialize it and enter degraded state properly", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r513622476", "createdAt": "2020-10-28T17:15:50Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "diffHunk": "@@ -90,7 +90,6 @@ public void start() {\n           log.warn(\"Backup is out of sync with the current command topic. \"\n               + \"Backups will not work until the previous command topic is \"\n               + \"restored or all backup files are deleted.\", e);\n-          return records;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI4NjA2Mg=="}, "originalCommit": {"oid": "3a63a3b7f7323aa059387239625a5dfe0d1313cc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3MTgyNQ==", "bodyText": "@rodesai I changed it so that we still return the command in the case of a KsqlException since this is thrown by the backup when there's an issue deserializing either the commandId or command. The command isn't returned if it's a KsqlServerException since that means the corruption check has triggered.", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r516971825", "createdAt": "2020-11-03T21:41:39Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "diffHunk": "@@ -90,7 +90,6 @@ public void start() {\n           log.warn(\"Backup is out of sync with the current command topic. \"\n               + \"Backups will not work until the previous command topic is \"\n               + \"restored or all backup files are deleted.\", e);\n-          return records;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI4NjA2Mg=="}, "originalCommit": {"oid": "3a63a3b7f7323aa059387239625a5dfe0d1313cc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjQzMzIxOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/RestoreOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzo1MDowMlrOHo9Lcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDoyOTo1OVrOHpZptA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcwNzQ0Mg==", "bodyText": "Doesn't this need the @SuppressWarnings(\"unused\") // Accessed via reflection too?", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r512707442", "createdAt": "2020-10-27T13:50:02Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/RestoreOptions.java", "diffHunk": "@@ -42,8 +42,16 @@\n \n   @SuppressWarnings(\"unused\") // Accessed via reflection\n   @Option(\n-      name = {\"--yes\", \"-y\"},\n-      description = \"Automatic \\\"yes\\\" as answer to prompt and run non-interactively.\")\n+      name = {\"--skip-incompatible-commands\", \"-s\"},\n+      description = \"This restore command can restore command topic commands that \"\n+          + \"are of version (\" + io.confluent.ksql.rest.server.computation.Command.VERSION + \") \"\n+          + \"or lower. If true, the restore command will skip all incompatible commands.\"\n+          + \"If false, the restore command will restore the backup file as is.\")\n+  private boolean skipIncompatibleCommands = false;\n+\n+  @Option(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c54d4a913c312ba17892f10ccdd245b4f76d181"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3Mzk0MA==", "bodyText": "I removed the header", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r513173940", "createdAt": "2020-10-28T04:29:59Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/RestoreOptions.java", "diffHunk": "@@ -42,8 +42,16 @@\n \n   @SuppressWarnings(\"unused\") // Accessed via reflection\n   @Option(\n-      name = {\"--yes\", \"-y\"},\n-      description = \"Automatic \\\"yes\\\" as answer to prompt and run non-interactively.\")\n+      name = {\"--skip-incompatible-commands\", \"-s\"},\n+      description = \"This restore command can restore command topic commands that \"\n+          + \"are of version (\" + io.confluent.ksql.rest.server.computation.Command.VERSION + \") \"\n+          + \"or lower. If true, the restore command will skip all incompatible commands.\"\n+          + \"If false, the restore command will restore the backup file as is.\")\n+  private boolean skipIncompatibleCommands = false;\n+\n+  @Option(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcwNzQ0Mg=="}, "originalCommit": {"oid": "6c54d4a913c312ba17892f10ccdd245b4f76d181"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjQ1NzMwOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/KsqlRestoreCommandTopic.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzo1NDo0MVrOHo9acg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDozMjo1MFrOHpZsxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxMTI4Mg==", "bodyText": "should we call throwOnInvalidRecords when skip is false? That way the restore will fail if a command is invalid, thus avoiding re-creating the command topic and writing partial commands.", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r512711282", "createdAt": "2020-10-27T13:54:41Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/KsqlRestoreCommandTopic.java", "diffHunk": "@@ -67,17 +70,26 @@ private static KsqlConfig loadServerConfig(final File configFile) {\n     return new KsqlConfig(serverProps);\n   }\n \n-  public static List<Pair<byte[], byte[]>> loadBackup(final File file) throws IOException {\n+  public static List<Pair<byte[], byte[]>> loadBackup(\n+      final File file,\n+      final RestoreOptions options\n+  ) throws IOException {\n     final BackupReplayFile commandTopicBackupFile = BackupReplayFile.readOnly(file);\n+    List<Pair<byte[], byte[]>> records = commandTopicBackupFile.readRecords();\n \n-    final List<Pair<byte[], byte[]>> records = commandTopicBackupFile.readRecords();\n-    throwOnInvalidRecords(records);\n+    if (options.isSkipIncompatibleCommands()) {\n+      records = removeIncompatibleCommands(records);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c54d4a913c312ba17892f10ccdd245b4f76d181"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3NDcyNg==", "bodyText": "Ok I changed it so that we always check that the commands are valid. The only different with the skip option is that if it's set to true, instead of throwing an exception and exiting the program when failing to deserialize the command due to a SerializationException/IncomaptibleKsqlCommandVersionException (which indicates an incompatible command) the method continues by skipping the command.", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r513174726", "createdAt": "2020-10-28T04:32:50Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/KsqlRestoreCommandTopic.java", "diffHunk": "@@ -67,17 +70,26 @@ private static KsqlConfig loadServerConfig(final File configFile) {\n     return new KsqlConfig(serverProps);\n   }\n \n-  public static List<Pair<byte[], byte[]>> loadBackup(final File file) throws IOException {\n+  public static List<Pair<byte[], byte[]>> loadBackup(\n+      final File file,\n+      final RestoreOptions options\n+  ) throws IOException {\n     final BackupReplayFile commandTopicBackupFile = BackupReplayFile.readOnly(file);\n+    List<Pair<byte[], byte[]>> records = commandTopicBackupFile.readRecords();\n \n-    final List<Pair<byte[], byte[]>> records = commandTopicBackupFile.readRecords();\n-    throwOnInvalidRecords(records);\n+    if (options.isSkipIncompatibleCommands()) {\n+      records = removeIncompatibleCommands(records);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxMTI4Mg=="}, "originalCommit": {"oid": "6c54d4a913c312ba17892f10ccdd245b4f76d181"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjQ5MDEzOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/integration/RestoreCommandTopicIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNDowMDozM1rOHo9uUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNDoyOTo1M1rOHpZplg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxNjM3MQ==", "bodyText": "This looks like what the BackupReplayFile does. Can it be reused?\n // Just create another write() that accept the key and value instead of a consumer\nBackupReplayFile.writable(backupFileLocation.toFile())\n    .write(commandIdInBytes, commandInBytes);", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r512716371", "createdAt": "2020-10-27T14:00:33Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/integration/RestoreCommandTopicIntegrationTest.java", "diffHunk": "@@ -173,4 +256,27 @@ private boolean isDegradedState() {\n   private List<KsqlEntity> makeKsqlRequest(final String sql) {\n     return RestIntegrationTestUtil.makeKsqlRequest(REST_APP, sql);\n   }\n+\n+  public static void writeToBackupFile(\n+      final CommandId commandId,\n+      final Command command,\n+      final Path backUpFileLocation\n+  ) throws IOException {\n+    FileOutputStream writer;\n+    try {\n+      writer = new FileOutputStream(new File(String.valueOf(backUpFileLocation)), true);\n+    } catch (final FileNotFoundException e) {\n+      throw new KsqlException(\n+          String.format(\"Failed to open backup file: %s\", backUpFileLocation), e);\n+    }\n+\n+    final byte[] keyValueSeparator = \":\".getBytes(StandardCharsets.UTF_8);\n+    final byte[] newLine = \"/n\".getBytes(StandardCharsets.UTF_8);\n+\n+    writer.write(InternalTopicSerdes.serializer().serialize(\"\", commandId));\n+    writer.write(keyValueSeparator);\n+    writer.write(InternalTopicSerdes.serializer().serialize(\"\", command));\n+    writer.write(newLine);\n+    writer.flush();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c54d4a913c312ba17892f10ccdd245b4f76d181"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzE3MzkxMA==", "bodyText": "I reused it now", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r513173910", "createdAt": "2020-10-28T04:29:53Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/integration/RestoreCommandTopicIntegrationTest.java", "diffHunk": "@@ -173,4 +256,27 @@ private boolean isDegradedState() {\n   private List<KsqlEntity> makeKsqlRequest(final String sql) {\n     return RestIntegrationTestUtil.makeKsqlRequest(REST_APP, sql);\n   }\n+\n+  public static void writeToBackupFile(\n+      final CommandId commandId,\n+      final Command command,\n+      final Path backUpFileLocation\n+  ) throws IOException {\n+    FileOutputStream writer;\n+    try {\n+      writer = new FileOutputStream(new File(String.valueOf(backUpFileLocation)), true);\n+    } catch (final FileNotFoundException e) {\n+      throw new KsqlException(\n+          String.format(\"Failed to open backup file: %s\", backUpFileLocation), e);\n+    }\n+\n+    final byte[] keyValueSeparator = \":\".getBytes(StandardCharsets.UTF_8);\n+    final byte[] newLine = \"/n\".getBytes(StandardCharsets.UTF_8);\n+\n+    writer.write(InternalTopicSerdes.serializer().serialize(\"\", commandId));\n+    writer.write(keyValueSeparator);\n+    writer.write(InternalTopicSerdes.serializer().serialize(\"\", command));\n+    writer.write(newLine);\n+    writer.flush();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcxNjM3MQ=="}, "originalCommit": {"oid": "6c54d4a913c312ba17892f10ccdd245b4f76d181"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTU5MTQ0OnYy", "diffSide": "LEFT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNjowNjo1M1rOHpbQIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QyMTozNzo1MlrOHtBWbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIwMDE2MA==", "bodyText": "We need to make the above exception more specific. We shouldn't just ignore any exception. Ditto for the other place this is used. I know this isn't part of your patch, but might as well do this now.", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r513200160", "createdAt": "2020-10-28T06:06:53Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "diffHunk": "@@ -117,7 +116,6 @@ public void start() {\n           log.warn(\"Backup is out of sync with the current command topic. \"\n               + \"Backups will not work until the previous command topic is \"\n               + \"restored or all backup files are deleted.\", e);\n-          return restoreCommands;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce2a9b59ff2969eae089529d399140fe8e11d309"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjk3MDA5Mg==", "bodyText": "I changed it to only catch a KsqlException or KsqlServerException", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r516970092", "createdAt": "2020-11-03T21:37:52Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "diffHunk": "@@ -117,7 +116,6 @@ public void start() {\n           log.warn(\"Backup is out of sync with the current command topic. \"\n               + \"Backups will not work until the previous command topic is \"\n               + \"restored or all backup files are deleted.\", e);\n-          return restoreCommands;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIwMDE2MA=="}, "originalCommit": {"oid": "ce2a9b59ff2969eae089529d399140fe8e11d309"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTYzMTAwOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzoyNDowOFrOHt2UsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzoyNDowOFrOHt2UsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzgzODAwMQ==", "bodyText": "we should define a new exception type for this case. this is a very specific error condition, and it should have its own exception class.", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r517838001", "createdAt": "2020-11-05T07:24:08Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "diffHunk": "@@ -86,7 +89,9 @@ public void start() {\n       for (ConsumerRecord<byte[], byte[]> record : iterable) {\n         try {\n           backupRecord(record);\n-        } catch (final Exception e) {\n+        } catch (final KsqlException e) {\n+          log.warn(\"Error encountered while backing up command.\", e);\n+        } catch (final KsqlServerException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507fe96761258996e2d51a4e7458e77080796e41"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTY0NzkyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzozMDoyOVrOHt2e0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxODowODo0MlrOHuQEcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0MDU5Mw==", "bodyText": "again - this should be a very specific exception indicating a deserialization error. Also, why are we even trying to deserialize the command from the backup logic (cc @spena)? It doesn't look like we're using any of the fields.", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r517840593", "createdAt": "2020-11-05T07:30:29Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "diffHunk": "@@ -86,7 +89,9 @@ public void start() {\n       for (ConsumerRecord<byte[], byte[]> record : iterable) {\n         try {\n           backupRecord(record);\n-        } catch (final Exception e) {\n+        } catch (final KsqlException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507fe96761258996e2d51a4e7458e77080796e41"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODI1OTgyNw==", "bodyText": "Ok after talking it over with @spena , we don't need this deserialization logic in the backup impl, it should just backup whatever is found in the command topic, deserialization should be handled after it's backed up. So I'll get rid of this catch block and we'll only have the KsqlServerException one.", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r518259827", "createdAt": "2020-11-05T18:08:42Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "diffHunk": "@@ -86,7 +89,9 @@ public void start() {\n       for (ConsumerRecord<byte[], byte[]> record : iterable) {\n         try {\n           backupRecord(record);\n-        } catch (final Exception e) {\n+        } catch (final KsqlException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0MDU5Mw=="}, "originalCommit": {"oid": "507fe96761258996e2d51a4e7458e77080796e41"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NTY1NDkxOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/KsqlRestoreCommandTopic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzozMzowNVrOHt2izw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwNzozMzowNVrOHt2izw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzg0MTYxNQ==", "bodyText": "nit: try and use the same variable name for the same thing everywhere (so either options or restoreOptions", "url": "https://github.com/confluentinc/ksql/pull/6524#discussion_r517841615", "createdAt": "2020-11-05T07:33:05Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/restore/KsqlRestoreCommandTopic.java", "diffHunk": "@@ -65,17 +79,42 @@ private static KsqlConfig loadServerConfig(final File configFile) {\n     return new KsqlConfig(serverProps);\n   }\n \n-  public static List<Pair<byte[], byte[]>> loadBackup(final File file) throws IOException {\n+  public static List<Pair<byte[], byte[]>> loadBackup(\n+      final File file,\n+      final RestoreOptions options,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507fe96761258996e2d51a4e7458e77080796e41"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2579, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}