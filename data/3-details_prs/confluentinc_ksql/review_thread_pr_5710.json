{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNzQzNTk3", "number": 5710, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDoxMjo0NFrOEJ0Ebg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDoyMjoxMVrOEJ0Q6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzI1NzQyOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/testutils/AnalysisTestUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDoxMjo0NFrOGqge4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDoxMjo0NFrOGqge4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIyNTU2OA==", "bodyText": "nit: unused import?", "url": "https://github.com/confluentinc/ksql/pull/5710#discussion_r447225568", "createdAt": "2020-06-29T20:12:44Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/testutils/AnalysisTestUtil.java", "diffHunk": "@@ -28,6 +28,7 @@\n import io.confluent.ksql.parser.tree.Statement;\n import io.confluent.ksql.planner.LogicalPlanner;\n import io.confluent.ksql.planner.plan.OutputNode;\n+import io.confluent.ksql.query.id.SequentialQueryIdGenerator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e13d0571947c468a1530dcc07854bb791ece848"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzI3MzA5OnYy", "diffSide": "LEFT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/KsqlStructuredDataOutputNode.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDoxNzoxMVrOGqgoTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzowODo1OFrOGqlnGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIyNzk4MA==", "bodyText": "What happened to this toUpperCase() call? I don't see it in the migrated code.", "url": "https://github.com/confluentinc/ksql/pull/5710#discussion_r447227980", "createdAt": "2020-06-29T20:17:11Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/KsqlStructuredDataOutputNode.java", "diffHunk": "@@ -83,15 +80,8 @@ public SourceName getIntoSourceName() {\n   }\n \n   @Override\n-  public QueryId getQueryId(final QueryIdGenerator queryIdGenerator) {\n-    final String base = queryIdGenerator.getNext().toUpperCase();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e13d0571947c468a1530dcc07854bb791ece848"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzODE0OA==", "bodyText": "they all actually return numbers, so it's kind-of irrelevant. I'll add it back for consistency, but we should probably change the API to just return a number.", "url": "https://github.com/confluentinc/ksql/pull/5710#discussion_r447238148", "createdAt": "2020-06-29T20:36:15Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/KsqlStructuredDataOutputNode.java", "diffHunk": "@@ -83,15 +80,8 @@ public SourceName getIntoSourceName() {\n   }\n \n   @Override\n-  public QueryId getQueryId(final QueryIdGenerator queryIdGenerator) {\n-    final String base = queryIdGenerator.getNext().toUpperCase();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIyNzk4MA=="}, "originalCommit": {"oid": "4e13d0571947c468a1530dcc07854bb791ece848"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwNzA2MQ==", "bodyText": "Looks like it was added back in one place but not another (https://github.com/confluentinc/ksql/blob/master/ksqldb-engine/src/main/java/io/confluent/ksql/engine/QueryIdUtil.java#L58) :) If they're always numbers I'm fine with leaving it off, though.", "url": "https://github.com/confluentinc/ksql/pull/5710#discussion_r447307061", "createdAt": "2020-06-29T23:01:08Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/KsqlStructuredDataOutputNode.java", "diffHunk": "@@ -83,15 +80,8 @@ public SourceName getIntoSourceName() {\n   }\n \n   @Override\n-  public QueryId getQueryId(final QueryIdGenerator queryIdGenerator) {\n-    final String base = queryIdGenerator.getNext().toUpperCase();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIyNzk4MA=="}, "originalCommit": {"oid": "4e13d0571947c468a1530dcc07854bb791ece848"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMwOTU5Mg==", "bodyText": "\ud83e\udd26 shouldn't make a difference, but i'll change it in the next PR to be safe", "url": "https://github.com/confluentinc/ksql/pull/5710#discussion_r447309592", "createdAt": "2020-06-29T23:08:58Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/KsqlStructuredDataOutputNode.java", "diffHunk": "@@ -83,15 +80,8 @@ public SourceName getIntoSourceName() {\n   }\n \n   @Override\n-  public QueryId getQueryId(final QueryIdGenerator queryIdGenerator) {\n-    final String base = queryIdGenerator.getNext().toUpperCase();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIyNzk4MA=="}, "originalCommit": {"oid": "4e13d0571947c468a1530dcc07854bb791ece848"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzI4OTM3OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/QueryIdUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDoyMjoxMVrOGqgyjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDo0MzoyN1rOGqhfOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzMDYwNQ==", "bodyText": "Why is there no check here on whether the sink specifies CREATE OR REPLACE or not?", "url": "https://github.com/confluentinc/ksql/pull/5710#discussion_r447230605", "createdAt": "2020-06-29T20:22:11Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/QueryIdUtil.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.engine;\n+\n+import com.google.common.collect.Iterables;\n+import io.confluent.ksql.metastore.MetaStore;\n+import io.confluent.ksql.metastore.model.DataSource.DataSourceType;\n+import io.confluent.ksql.name.SourceName;\n+import io.confluent.ksql.planner.plan.KsqlStructuredDataOutputNode;\n+import io.confluent.ksql.planner.plan.OutputNode;\n+import io.confluent.ksql.query.QueryId;\n+import io.confluent.ksql.query.id.QueryIdGenerator;\n+import io.confluent.ksql.util.KsqlException;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * Utility for constructing {@link QueryId}s - separate from {@code EngineExecutor} for\n+ * easy access to unit testing.\n+ */\n+final class QueryIdUtil {\n+\n+  private QueryIdUtil() {\n+  }\n+\n+  /**\n+   * Builds a {@link QueryId} for a physical plan specification.\n+   *\n+   * @param metaStore   the meta store representing the current state of the engine\n+   * @param idGenerator generates query ids\n+   * @param outputNode  the logical plan\n+   * @return the {@link QueryId} to be used\n+   */\n+  static QueryId buildId(\n+      final MetaStore metaStore,\n+      final QueryIdGenerator idGenerator,\n+      final OutputNode outputNode\n+  ) {\n+    if (!outputNode.getSinkName().isPresent()) {\n+      return new QueryId(String.valueOf(Math.abs(ThreadLocalRandom.current().nextLong())));\n+    }\n+\n+    final KsqlStructuredDataOutputNode structured = (KsqlStructuredDataOutputNode) outputNode;\n+    if (!structured.createInto()) {\n+      return new QueryId(\"INSERTQUERY_\" + idGenerator.getNext());\n+    }\n+\n+    final SourceName sink = outputNode.getSinkName().get();\n+    final Set<String> queriesForSink = metaStore.getQueriesWithSink(sink);\n+    if (queriesForSink.size() > 1) {\n+      throw new KsqlException(\"REPLACE for sink \" + sink + \" is not supported because there are \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e13d0571947c468a1530dcc07854bb791ece848"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI0MDMyNA==", "bodyText": "it'll actually fail before this point if it isn't a create or replace, but i'll make it explicit", "url": "https://github.com/confluentinc/ksql/pull/5710#discussion_r447240324", "createdAt": "2020-06-29T20:40:17Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/QueryIdUtil.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.engine;\n+\n+import com.google.common.collect.Iterables;\n+import io.confluent.ksql.metastore.MetaStore;\n+import io.confluent.ksql.metastore.model.DataSource.DataSourceType;\n+import io.confluent.ksql.name.SourceName;\n+import io.confluent.ksql.planner.plan.KsqlStructuredDataOutputNode;\n+import io.confluent.ksql.planner.plan.OutputNode;\n+import io.confluent.ksql.query.QueryId;\n+import io.confluent.ksql.query.id.QueryIdGenerator;\n+import io.confluent.ksql.util.KsqlException;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * Utility for constructing {@link QueryId}s - separate from {@code EngineExecutor} for\n+ * easy access to unit testing.\n+ */\n+final class QueryIdUtil {\n+\n+  private QueryIdUtil() {\n+  }\n+\n+  /**\n+   * Builds a {@link QueryId} for a physical plan specification.\n+   *\n+   * @param metaStore   the meta store representing the current state of the engine\n+   * @param idGenerator generates query ids\n+   * @param outputNode  the logical plan\n+   * @return the {@link QueryId} to be used\n+   */\n+  static QueryId buildId(\n+      final MetaStore metaStore,\n+      final QueryIdGenerator idGenerator,\n+      final OutputNode outputNode\n+  ) {\n+    if (!outputNode.getSinkName().isPresent()) {\n+      return new QueryId(String.valueOf(Math.abs(ThreadLocalRandom.current().nextLong())));\n+    }\n+\n+    final KsqlStructuredDataOutputNode structured = (KsqlStructuredDataOutputNode) outputNode;\n+    if (!structured.createInto()) {\n+      return new QueryId(\"INSERTQUERY_\" + idGenerator.getNext());\n+    }\n+\n+    final SourceName sink = outputNode.getSinkName().get();\n+    final Set<String> queriesForSink = metaStore.getQueriesWithSink(sink);\n+    if (queriesForSink.size() > 1) {\n+      throw new KsqlException(\"REPLACE for sink \" + sink + \" is not supported because there are \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzMDYwNQ=="}, "originalCommit": {"oid": "4e13d0571947c468a1530dcc07854bb791ece848"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI0MjA0MQ==", "bodyText": "On second thought, I'm going to leave it like that - whether or not the statement is CREATE OR REPLACE is not the responsibility of the queryID generation. If it's attempting to create an already existing statement without OR REPLACE it should fail in the metastore (putSource specifically)", "url": "https://github.com/confluentinc/ksql/pull/5710#discussion_r447242041", "createdAt": "2020-06-29T20:43:27Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/QueryIdUtil.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.engine;\n+\n+import com.google.common.collect.Iterables;\n+import io.confluent.ksql.metastore.MetaStore;\n+import io.confluent.ksql.metastore.model.DataSource.DataSourceType;\n+import io.confluent.ksql.name.SourceName;\n+import io.confluent.ksql.planner.plan.KsqlStructuredDataOutputNode;\n+import io.confluent.ksql.planner.plan.OutputNode;\n+import io.confluent.ksql.query.QueryId;\n+import io.confluent.ksql.query.id.QueryIdGenerator;\n+import io.confluent.ksql.util.KsqlException;\n+import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+/**\n+ * Utility for constructing {@link QueryId}s - separate from {@code EngineExecutor} for\n+ * easy access to unit testing.\n+ */\n+final class QueryIdUtil {\n+\n+  private QueryIdUtil() {\n+  }\n+\n+  /**\n+   * Builds a {@link QueryId} for a physical plan specification.\n+   *\n+   * @param metaStore   the meta store representing the current state of the engine\n+   * @param idGenerator generates query ids\n+   * @param outputNode  the logical plan\n+   * @return the {@link QueryId} to be used\n+   */\n+  static QueryId buildId(\n+      final MetaStore metaStore,\n+      final QueryIdGenerator idGenerator,\n+      final OutputNode outputNode\n+  ) {\n+    if (!outputNode.getSinkName().isPresent()) {\n+      return new QueryId(String.valueOf(Math.abs(ThreadLocalRandom.current().nextLong())));\n+    }\n+\n+    final KsqlStructuredDataOutputNode structured = (KsqlStructuredDataOutputNode) outputNode;\n+    if (!structured.createInto()) {\n+      return new QueryId(\"INSERTQUERY_\" + idGenerator.getNext());\n+    }\n+\n+    final SourceName sink = outputNode.getSinkName().get();\n+    final Set<String> queriesForSink = metaStore.getQueriesWithSink(sink);\n+    if (queriesForSink.size() > 1) {\n+      throw new KsqlException(\"REPLACE for sink \" + sink + \" is not supported because there are \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzMDYwNQ=="}, "originalCommit": {"oid": "4e13d0571947c468a1530dcc07854bb791ece848"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3227, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}