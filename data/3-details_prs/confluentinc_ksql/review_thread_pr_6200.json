{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2OTM4NzU4", "number": 6200, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMjo1Mjo1NFrOEj0R0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMjo1NjoxOFrOEj0Xow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTkyMTQ2OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/KeyValueExtractor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMjo1Mjo1NFrOHSZKeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMToxNjo1MFrOHSsDmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA0ODY5Nw==", "bodyText": "nit: this was true before your change, but we should consider how this design fares with regards to performance. we should not be creating a schema per-record (as I think we are here) - the older code would have been easier to \"cache\" the result inside the data source", "url": "https://github.com/confluentinc/ksql/pull/6200#discussion_r489048697", "createdAt": "2020-09-15T22:52:54Z", "author": {"login": "agavra"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/KeyValueExtractor.java", "diffHunk": "@@ -35,9 +37,13 @@\n   private KeyValueExtractor() {\n   }\n \n-  public static Struct extractKey(final JsonObject values, final LogicalSchema logicalSchema,\n-      final SqlValueCoercer sqlValueCoercer) {\n-    final Struct key = new Struct(logicalSchema.keyConnectSchema());\n+  public static Struct extractKey(\n+      final JsonObject values,\n+      final LogicalSchema logicalSchema,\n+      final SqlValueCoercer sqlValueCoercer\n+  ) {\n+    final ConnectSchema keySchema = ConnectSchemas.columnsToConnectSchema(logicalSchema.key());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db6dbe6af299b2804d80ee1dc17b68699092a1ee"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0MDk2OA==", "bodyText": "FYI: This is currently only used for inserts.\nTotally agree we should be thinking about perf here. However, as the plan is to move away from using Connect's Struct type for keys, this conversion is only temporary.\nRegardless, I'll pull the conversion higher up so its cached in my next PR.", "url": "https://github.com/confluentinc/ksql/pull/6200#discussion_r489240968", "createdAt": "2020-09-16T08:00:50Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/KeyValueExtractor.java", "diffHunk": "@@ -35,9 +37,13 @@\n   private KeyValueExtractor() {\n   }\n \n-  public static Struct extractKey(final JsonObject values, final LogicalSchema logicalSchema,\n-      final SqlValueCoercer sqlValueCoercer) {\n-    final Struct key = new Struct(logicalSchema.keyConnectSchema());\n+  public static Struct extractKey(\n+      final JsonObject values,\n+      final LogicalSchema logicalSchema,\n+      final SqlValueCoercer sqlValueCoercer\n+  ) {\n+    final ConnectSchema keySchema = ConnectSchemas.columnsToConnectSchema(logicalSchema.key());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA0ODY5Nw=="}, "originalCommit": {"oid": "db6dbe6af299b2804d80ee1dc17b68699092a1ee"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM1ODIzMg==", "bodyText": "See: https://github.com/confluentinc/ksql/pull/6206/files#r489274132", "url": "https://github.com/confluentinc/ksql/pull/6200#discussion_r489358232", "createdAt": "2020-09-16T11:16:50Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/KeyValueExtractor.java", "diffHunk": "@@ -35,9 +37,13 @@\n   private KeyValueExtractor() {\n   }\n \n-  public static Struct extractKey(final JsonObject values, final LogicalSchema logicalSchema,\n-      final SqlValueCoercer sqlValueCoercer) {\n-    final Struct key = new Struct(logicalSchema.keyConnectSchema());\n+  public static Struct extractKey(\n+      final JsonObject values,\n+      final LogicalSchema logicalSchema,\n+      final SqlValueCoercer sqlValueCoercer\n+  ) {\n+    final ConnectSchema keySchema = ConnectSchemas.columnsToConnectSchema(logicalSchema.key());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA0ODY5Nw=="}, "originalCommit": {"oid": "db6dbe6af299b2804d80ee1dc17b68699092a1ee"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTkzNjM1OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMjo1NjoxOFrOHSZU0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwODowMjo0OFrOHSk-AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA1MTM0Ng==", "bodyText": "pull queries are less problematic, but here's another per-record conversion", "url": "https://github.com/confluentinc/ksql/pull/6200#discussion_r489051346", "createdAt": "2020-09-15T22:56:18Z", "author": {"login": "agavra"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -1048,10 +1050,12 @@ private static KsqlException invalidWhereClauseException(\n   }\n \n   private static Struct asKeyStruct(final Object keyValue, final PhysicalSchema physicalSchema) {\n-    final Field keyField = Iterables\n-        .getOnlyElement(physicalSchema.keySchema().connectSchema().fields());\n+    final ConnectSchema keySchema = ConnectSchemas\n+        .columnsToConnectSchema(physicalSchema.keySchema().columns());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db6dbe6af299b2804d80ee1dc17b68699092a1ee"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI0MjExMg==", "bodyText": "As above, this conversion is only temporary.  In this case, it's a per-request cost, so can't be amalgamated.", "url": "https://github.com/confluentinc/ksql/pull/6200#discussion_r489242112", "createdAt": "2020-09-16T08:02:48Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -1048,10 +1050,12 @@ private static KsqlException invalidWhereClauseException(\n   }\n \n   private static Struct asKeyStruct(final Object keyValue, final PhysicalSchema physicalSchema) {\n-    final Field keyField = Iterables\n-        .getOnlyElement(physicalSchema.keySchema().connectSchema().fields());\n+    final ConnectSchema keySchema = ConnectSchemas\n+        .columnsToConnectSchema(physicalSchema.keySchema().columns());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA1MTM0Ng=="}, "originalCommit": {"oid": "db6dbe6af299b2804d80ee1dc17b68699092a1ee"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2781, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}