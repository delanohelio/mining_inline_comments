{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMjc5NTYx", "number": 6175, "title": "docs: klip-36: grace period for stream-stream joins", "bodyText": "See: #6152\nFormatted: https://github.com/agavra/ksql/blob/klip-36/design-proposals/klip-36-grace-stream-stream-joins.md", "createdAt": "2020-09-10T02:04:48Z", "url": "https://github.com/confluentinc/ksql/pull/6175", "merged": true, "mergeCommit": {"oid": "3e7c531894e93dbd85355d099f2ff735403035ba"}, "closed": true, "closedAt": "2020-09-23T19:59:35Z", "author": {"login": "agavra"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHolEmAFqTQ4NjM1NTQyMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLyMWsgBqjM3OTk4OTEzODk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzU1NDIw", "url": "https://github.com/confluentinc/ksql/pull/6175#pullrequestreview-486355420", "createdAt": "2020-09-10T22:31:24Z", "commit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjozMToyNFrOHQH82w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjozMToyNFrOHQH82w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2OTUzMQ==", "bodyText": "Are there plans to remove the old syntax eventually?\nFor my own education: my understanding was that GRACE PERIOD is optional in aggregations? Is this correct? Would it be optional for stream-stream joins, too?\nFor Kafka Streams, we had a discussions about making it a mandatory parameter.", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r486669531", "createdAt": "2020-09-10T22:31:24Z", "author": {"login": "mjsax"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzU1NzIw", "url": "https://github.com/confluentinc/ksql/pull/6175#pullrequestreview-486355720", "createdAt": "2020-09-10T22:32:07Z", "commit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjozMjowOFrOHQH92A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjozMjowOFrOHQH92A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2OTc4NA==", "bodyText": "Ah, so it should be optionally?", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r486669784", "createdAt": "2020-09-10T22:32:08Z", "author": {"login": "mjsax"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.\n+\n+## LOEs and Delivery Milestones\n+\n+Small LOE - under 2 weeks of engineering time to deliver the syntax and implementation.\n+\n+## Documentation Updates\n+\n+The entry in `join-streams-and-tables.md` will be updated to include the following:\n+\n+```md\n+When you join two streams, you must specify a WITHIN clause for matching\n+records that both occur within a specified time interval and optionally a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzU2MDI1", "url": "https://github.com/confluentinc/ksql/pull/6175#pullrequestreview-486356025", "createdAt": "2020-09-10T22:32:47Z", "commit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjozMjo0OFrOHQH-yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjozMjo0OFrOHQH-yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MDAyNQ==", "bodyText": "late -> out-of-order\nor better will define for how long out-of-order records will be accepted.", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r486670025", "createdAt": "2020-09-10T22:32:48Z", "author": {"login": "mjsax"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.\n+\n+## LOEs and Delivery Milestones\n+\n+Small LOE - under 2 weeks of engineering time to deliver the syntax and implementation.\n+\n+## Documentation Updates\n+\n+The entry in `join-streams-and-tables.md` will be updated to include the following:\n+\n+```md\n+When you join two streams, you must specify a WITHIN clause for matching\n+records that both occur within a specified time interval and optionally a\n+grace period. The WITHIN clause will specify the \"look back\" period on \n+the non-triggering stream while the grace period will define how late a record", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzU3MTU3", "url": "https://github.com/confluentinc/ksql/pull/6175#pullrequestreview-486357157", "createdAt": "2020-09-10T22:35:22Z", "commit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjozNToyMlrOHQICmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjozNToyMlrOHQICmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MTAwMg==", "bodyText": "This seems like some optimization potential? If one joins specifies a grace-period, we could auto-set it for the other join, too, saving storage but not losing any results?", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r486671002", "createdAt": "2020-09-10T22:35:22Z", "author": {"login": "mjsax"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.\n+\n+## LOEs and Delivery Milestones\n+\n+Small LOE - under 2 weeks of engineering time to deliver the syntax and implementation.\n+\n+## Documentation Updates\n+\n+The entry in `join-streams-and-tables.md` will be updated to include the following:\n+\n+```md\n+When you join two streams, you must specify a WITHIN clause for matching\n+records that both occur within a specified time interval and optionally a\n+grace period. The WITHIN clause will specify the \"look back\" period on \n+the non-triggering stream while the grace period will define how late a record\n+may arrive before being processed.\n+\n+For valid time units, see [Time Units](../syntax-reference.md#time-units).\n+\n+Here's an example stream-stream-stream join that combines `orders`, `payments` and `shipments` \n+streams. The resulting ``shipped_orders`` stream contains all orders paid within 1 hour of when\n+the order was placed, and shipped within 2 hours of the payment being received. \n+\n+   CREATE STREAM shipped_orders AS\n+     SELECT \n+        o.id as orderId \n+        o.itemid as itemId,\n+        s.id as shipmentId,\n+        p.id as paymentId\n+     FROM orders o\n+        INNER JOIN payments p WITHIN 1 HOURS ON p.id = o.id\n+        INNER JOIN shipments s WITHIN (SIZE 2 HOURS, GRACE PERIOD 30 MINUTES) ON s.id = o.id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDY5OTQ5", "url": "https://github.com/confluentinc/ksql/pull/6175#pullrequestreview-491069949", "createdAt": "2020-09-18T00:17:00Z", "commit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyOTYwMjYz", "url": "https://github.com/confluentinc/ksql/pull/6175#pullrequestreview-492960263", "createdAt": "2020-09-21T20:35:24Z", "commit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDozNToyNFrOHVheOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDo0NDo0MFrOHVhwgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMzMDU1NA==", "bodyText": "With reference to recent discussions around supporting older versions of the syntax for longer...  we'd likely want to support the old syntax for a while.", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r492330554", "createdAt": "2020-09-21T20:35:24Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2OTUzMQ=="}, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMzMjk0Nw==", "bodyText": "I think long term if should be required. However, we need to be backwards compatible, which means in the medium term it needs to be optional.\nPersonally, I would change the wording from and optionally `` to and it is recommended to supply a`.\nIn the docs I'd also detail what the default it and explain what the trade of is here, i.e. longer grace period means more storage, shorter grace period means less storage required.", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r492332947", "createdAt": "2020-09-21T20:40:14Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.\n+\n+## LOEs and Delivery Milestones\n+\n+Small LOE - under 2 weeks of engineering time to deliver the syntax and implementation.\n+\n+## Documentation Updates\n+\n+The entry in `join-streams-and-tables.md` will be updated to include the following:\n+\n+```md\n+When you join two streams, you must specify a WITHIN clause for matching\n+records that both occur within a specified time interval and optionally a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2OTc4NA=="}, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMzNTIzMw==", "bodyText": "We should probably avoid breaking changes in the syntax until we have a mechanism for dealing with them and supporting multiple language versions.  That said, I guess the KLIP can still detail what the final outcome should be, even if we delay implementing the breaking change for a bit.", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r492335233", "createdAt": "2020-09-21T20:44:40Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.\n+\n+## LOEs and Delivery Milestones\n+\n+Small LOE - under 2 weeks of engineering time to deliver the syntax and implementation.\n+\n+## Documentation Updates\n+\n+The entry in `join-streams-and-tables.md` will be updated to include the following:\n+\n+```md\n+When you join two streams, you must specify a WITHIN clause for matching\n+records that both occur within a specified time interval and optionally a\n+grace period. The WITHIN clause will specify the \"look back\" period on \n+the non-triggering stream while the grace period will define how late a record\n+may arrive before being processed.\n+\n+For valid time units, see [Time Units](../syntax-reference.md#time-units).\n+\n+Here's an example stream-stream-stream join that combines `orders`, `payments` and `shipments` \n+streams. The resulting ``shipped_orders`` stream contains all orders paid within 1 hour of when\n+the order was placed, and shipped within 2 hours of the payment being received. \n+\n+   CREATE STREAM shipped_orders AS\n+     SELECT \n+        o.id as orderId \n+        o.itemid as itemId,\n+        s.id as shipmentId,\n+        p.id as paymentId\n+     FROM orders o\n+        INNER JOIN payments p WITHIN 1 HOURS ON p.id = o.id\n+        INNER JOIN shipments s WITHIN (SIZE 2 HOURS, GRACE PERIOD 30 MINUTES) ON s.id = o.id;\n+```\n+\n+## Compatibility Implications\n+\n+- We should consider whether we want to support the older syntax or require all new joins\n+    to use the `(SIZE <size>, GRACE PERIOD <size>)` syntax (noting that `GRACE PERIOD` will\n+    be optional).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNDE4Mjcx", "url": "https://github.com/confluentinc/ksql/pull/6175#pullrequestreview-493418271", "createdAt": "2020-09-22T12:44:28Z", "commit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjo0NDoyOFrOHV4LMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjo0NDoyOFrOHV4LMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcwMjUxMg==", "bodyText": "It's too bad there's no easy way to automate this. I was wondering if we could do something similar to KsMaterializationFunctionalTest which verifies retention for windowed aggregates (link) but we'd have to expose the state stores for that which feels like overkill for purposes of testing.", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r492702512", "createdAt": "2020-09-22T12:44:28Z", "author": {"login": "vcrfxia"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3455cc566640975847c6b80748d7a2a63634698", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/d3455cc566640975847c6b80748d7a2a63634698", "committedDate": "2020-09-23T19:58:56Z", "message": "docs: klip-36: grace period for stream-stream joins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c07a10740e8775838f162604780174dc0f1d4b47", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/c07a10740e8775838f162604780174dc0f1d4b47", "committedDate": "2020-09-23T19:58:57Z", "message": "docs: minor updates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18", "committedDate": "2020-09-10T02:04:30Z", "message": "docs: klip-36: grace period for stream-stream joins"}, "afterCommit": {"oid": "c07a10740e8775838f162604780174dc0f1d4b47", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/c07a10740e8775838f162604780174dc0f1d4b47", "committedDate": "2020-09-23T19:58:57Z", "message": "docs: minor updates"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4646, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}