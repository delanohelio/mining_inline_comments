{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NzI5NjI0", "number": 5374, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTowODoxOFrOD9hPLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTozNTowOVrOD9hvKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODM0Mjg1OnYy", "diffSide": "RIGHT", "path": "config/ksql-server.properties", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTowODoxOFrOGXEEqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1NjowOVrOGXFgLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzNzE2Mw==", "bodyText": "meant to omit this?", "url": "https://github.com/confluentinc/ksql/pull/5374#discussion_r426837163", "createdAt": "2020-05-18T19:08:18Z", "author": {"login": "rodesai"}, "path": "config/ksql-server.properties", "diffHunk": "@@ -56,7 +56,7 @@ ksql.logging.processing.stream.auto.create=true\n #------ External service config -------\n \n # The set of Kafka brokers to bootstrap Kafka cluster information from:\n-bootstrap.servers=localhost:9092\n+bootstrap.servers=localhost:29092", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cfff4b631356caeb279b88567c8aab71a93d332"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2MDU4OQ==", "bodyText": "oops I thought I removed that! thanks", "url": "https://github.com/confluentinc/ksql/pull/5374#discussion_r426860589", "createdAt": "2020-05-18T19:56:09Z", "author": {"login": "agavra"}, "path": "config/ksql-server.properties", "diffHunk": "@@ -56,7 +56,7 @@ ksql.logging.processing.stream.auto.create=true\n #------ External service config -------\n \n # The set of Kafka brokers to bootstrap Kafka cluster information from:\n-bootstrap.servers=localhost:9092\n+bootstrap.servers=localhost:29092", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjgzNzE2Mw=="}, "originalCommit": {"oid": "3cfff4b631356caeb279b88567c8aab71a93d332"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQyNDc0OnYy", "diffSide": "RIGHT", "path": "ksqldb-common/src/main/java/io/confluent/ksql/query/QueryErrorClassifier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTozNTowOVrOGXE4Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo1ODo0MlrOGXFk1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1MDM2Ng==", "bodyText": "this is currently not used right?", "url": "https://github.com/confluentinc/ksql/pull/5374#discussion_r426850366", "createdAt": "2020-05-18T19:35:09Z", "author": {"login": "rodesai"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/query/QueryErrorClassifier.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.query;\n+\n+import io.confluent.ksql.query.QueryError.Type;\n+\n+public interface QueryErrorClassifier {\n+\n+  QueryErrorClassifier DEFAULT_CLASSIFIER = e -> Type.UNKNOWN;\n+\n+  /**\n+   * Classifies this error with a specific type\n+   *\n+   * @param e the error\n+   * @return the classification\n+   */\n+  Type classify(Throwable e);\n+\n+  /**\n+   * Chains two classifiers so that:\n+   * <ol>\n+   *   <li>If they classify the error in the same way, return that classification</li>\n+   *   <li>If they classify the error differently and exactly one is classified as\n+   *       {@link Type#UNKNOWN}, return the other classification.</li>\n+   *   <li>If they classify the error differently and neither is classified as\n+   *       {@link Type#UNKNOWN}, return {@link Type#UNKNOWN}</li>\n+   * </ol>\n+   *\n+   * @param other the other classifier to chain\n+   * @return a {@code QueryErrorClassifier} that chains both\n+   */\n+  default QueryErrorClassifier and(QueryErrorClassifier other) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cfff4b631356caeb279b88567c8aab71a93d332"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg2MTc4MQ==", "bodyText": "yeah it's not used yet - I'm planning on introducing a regex classifier so that you can chain them (e.g. use MissingTopic.and(SomeRegexClassifier).and(AnotherRegexClassifier)) this isn't really a boolean \"and\" but rather a \"andThen\" - I can rename it", "url": "https://github.com/confluentinc/ksql/pull/5374#discussion_r426861781", "createdAt": "2020-05-18T19:58:42Z", "author": {"login": "agavra"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/query/QueryErrorClassifier.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.query;\n+\n+import io.confluent.ksql.query.QueryError.Type;\n+\n+public interface QueryErrorClassifier {\n+\n+  QueryErrorClassifier DEFAULT_CLASSIFIER = e -> Type.UNKNOWN;\n+\n+  /**\n+   * Classifies this error with a specific type\n+   *\n+   * @param e the error\n+   * @return the classification\n+   */\n+  Type classify(Throwable e);\n+\n+  /**\n+   * Chains two classifiers so that:\n+   * <ol>\n+   *   <li>If they classify the error in the same way, return that classification</li>\n+   *   <li>If they classify the error differently and exactly one is classified as\n+   *       {@link Type#UNKNOWN}, return the other classification.</li>\n+   *   <li>If they classify the error differently and neither is classified as\n+   *       {@link Type#UNKNOWN}, return {@link Type#UNKNOWN}</li>\n+   * </ol>\n+   *\n+   * @param other the other classifier to chain\n+   * @return a {@code QueryErrorClassifier} that chains both\n+   */\n+  default QueryErrorClassifier and(QueryErrorClassifier other) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1MDM2Ng=="}, "originalCommit": {"oid": "3cfff4b631356caeb279b88567c8aab71a93d332"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3444, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}