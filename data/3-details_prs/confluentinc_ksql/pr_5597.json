{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyNzI2MTg1", "number": 5597, "title": "fix: fail AVRO/Protobuf/JSON Schema statements if SR is missing", "bodyText": "fixes #5587\nDescription\nThis change will throw if a topic is configured to use a format that requires schema registry, but schema registry is not present.\nTesting done\nUpdated unit tests and manual testing\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-06-10T22:04:22Z", "url": "https://github.com/confluentinc/ksql/pull/5597", "merged": true, "mergeCommit": {"oid": "618e333735f358a14eca9934e062021f267cc886"}, "closed": true, "closedAt": "2020-06-11T00:00:20Z", "author": {"login": "agavra"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqBBRqAH2gAyNDMyNzI2MTg1OjM2NzYzODM4ZDliNTc4OTU4Yjg5NzI4YzhlYjI1OWI0MGYyOTQwYzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqGM2XAFqTQyODU3NzY3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "36763838d9b578958b89728c8eb259b40f2940c7", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/36763838d9b578958b89728c8eb259b40f2940c7", "committedDate": "2020-06-10T22:02:12Z", "message": "fix: fail statement eagerly if it creates a schema inference topic without schema registry"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NDY2MDQ1", "url": "https://github.com/confluentinc/ksql/pull/5597#pullrequestreview-428466045", "createdAt": "2020-06-10T22:16:25Z", "commit": {"oid": "36763838d9b578958b89728c8eb259b40f2940c7"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMjoxNjoyNVrOGiIIXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQyMjoxNjoyNVrOGiIIXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQzNzk4MQ==", "bodyText": "Whoa, this is so useful! I've been using all sorts of crazy workarounds since I didn't know about this. Thanks for the tip \ud83d\ude05", "url": "https://github.com/confluentinc/ksql/pull/5597#discussion_r438437981", "createdAt": "2020-06-10T22:16:25Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/StandaloneExecutorFunctionalTest.java", "diffHunk": "@@ -51,15 +51,20 @@\n import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.ClassRule;\n+import org.junit.FixMethodOrder;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n import org.junit.rules.TemporaryFolder;\n import org.junit.runner.RunWith;\n+import org.junit.runners.MethodSorters;\n import org.mockito.Mock;\n import org.mockito.junit.MockitoJUnitRunner;\n \n @Category({IntegrationTest.class})\n @RunWith(MockitoJUnitRunner.class)\n+// shouldFailOnAvroWithoutSchemasIfSchemaNotEvolvable fails if run after shouldHandleJsonWithSchemas\n+@FixMethodOrder(MethodSorters.NAME_ASCENDING)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36763838d9b578958b89728c8eb259b40f2940c7"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTc3Njc4", "url": "https://github.com/confluentinc/ksql/pull/5597#pullrequestreview-428577678", "createdAt": "2020-06-11T04:04:21Z", "commit": {"oid": "36763838d9b578958b89728c8eb259b40f2940c7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowNDoyMlrOGiNxrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDowNDoyMlrOGiNxrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMDQ3Nw==", "bodyText": "@agavra would it actually be possible for you to throw a nested KsqlSchemaRegistryNotConfiguredException here? In cloud, we want to throw a very specific error message related to this and we're passing in a cloud specific error message module in the cloud image.\nhttps://github.com/confluentinc/ksql/blob/master/ksqldb-rest-model/src/main/java/io/confluent/ksql/rest/Errors.java#L236\nhttps://github.com/confluentinc/ksql/blob/master/ksqldb-rest-model/src/main/java/io/confluent/ksql/rest/Errors.java#L218", "url": "https://github.com/confluentinc/ksql/pull/5597#discussion_r438530477", "createdAt": "2020-06-11T04:04:22Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/schema/ksql/inference/SchemaRegisterInjector.java", "diffHunk": "@@ -118,6 +121,12 @@ private void registerSchema(\n       } catch (IOException | RestClientException e) {\n         throw new KsqlStatementException(\"Could not register schema for topic.\", statementText, e);\n       }\n+    } else {\n+      throw new KsqlStatementException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36763838d9b578958b89728c8eb259b40f2940c7"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4727, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}