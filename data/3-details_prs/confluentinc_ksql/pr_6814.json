{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ0Mjk3MjI4", "number": 6814, "title": "feat: Move WHERE clause handling for pull queries into logical plan", "bodyText": "Description\nMove all functionality of WhereInfo into PullFilterNode. Moreover, the Select operator performs now actual selections using the compiled byte code.\nTesting done\nAdded unit tests\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-12-22T18:39:43Z", "url": "https://github.com/confluentinc/ksql/pull/6814", "merged": true, "mergeCommit": {"oid": "fa6758af2f46594bfdf8f18a6d59a9b40e62e1d0"}, "closed": true, "closedAt": "2021-01-12T06:01:06Z", "author": {"login": "vpapavas"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABds6dxdgFqTU2MTE5MTM2NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdvTLNdgH2gAyNTQ0Mjk3MjI4OjgzODI2MTBkZTc1ZDc5MjgyOGUxZjA2ZDQ2Y2NjZjRkMWFjNWQzMmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxMTkxMzY0", "url": "https://github.com/confluentinc/ksql/pull/6814#pullrequestreview-561191364", "createdAt": "2021-01-04T17:06:41Z", "commit": {"oid": "6f2567921c98122f89e8651df08ec125648e74d1"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxNzowNjo0MVrOIN5qLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODoxMjowNFrOIN7vXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NzA4Ng==", "bodyText": "Why catch everything here?  There's already a catch all above in HARouting:\ntry {\n  future.get();\n} catch (ExecutionException e) {\n  LOG.warn(\"Error routing query {} to host {} at timestamp {} with exception {}\",\n     statement.getStatementText(), node, System.currentTimeMillis(), e.getCause());\n nextRoundRemaining.addAll(groupedByHost.get(node));\n}", "url": "https://github.com/confluentinc/ksql/pull/6814#discussion_r551447086", "createdAt": "2021-01-04T17:06:41Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/physical/pull/HARouting.java", "diffHunk": "@@ -246,17 +246,37 @@ static PullQueryResult executeOrRouteQuery(\n   ) {\n     List<List<?>> rows = null;\n     if (node.isLocal()) {\n-      LOG.debug(\"Query {} executed locally at host {} at timestamp {}.\",\n-                statement.getStatementText(), node.location(), System.currentTimeMillis());\n-      pullQueryMetrics\n-          .ifPresent(queryExecutorMetrics -> queryExecutorMetrics.recordLocalRequests(1));\n-      rows = pullPhysicalPlan.execute(locations);\n+      try {\n+        LOG.debug(\"Query {} executed locally at host {} at timestamp {}.\",\n+                  statement.getStatementText(), node.location(), System.currentTimeMillis());\n+        pullQueryMetrics\n+            .ifPresent(queryExecutorMetrics -> queryExecutorMetrics.recordLocalRequests(1));\n+        rows = pullPhysicalPlan.execute(locations);\n+      } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2567921c98122f89e8651df08ec125648e74d1"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ0NzY4MQ==", "bodyText": "Is this a check for Row.EMPTY_ROW?  Why not check equality with that object if it's a special value?", "url": "https://github.com/confluentinc/ksql/pull/6814#discussion_r551447681", "createdAt": "2021-01-04T17:07:49Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/physical/pull/PullPhysicalPlan.java", "diffHunk": "@@ -68,7 +68,9 @@ public PullPhysicalPlan(\n     final List<List<?>> localResult = new ArrayList<>();\n     List<?> row = null;\n     while ((row = (List<?>)next()) != null) {\n-      localResult.add(row);\n+      if (!row.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2567921c98122f89e8651df08ec125648e74d1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1MDAyMQ==", "bodyText": "I personally find it a little confusing that in some areas, we use DB language (e.g. select) and in others we use functional programming language (e.g. filter).  Can we try to be consistent?", "url": "https://github.com/confluentinc/ksql/pull/6814#discussion_r551450021", "createdAt": "2021-01-04T17:11:56Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/physical/pull/PullPhysicalPlanBuilder.java", "diffHunk": "@@ -179,30 +161,27 @@ private ProjectOperator translateProjectNode(final PullProjectNode logicalNode)\n     );\n   }\n \n-  private SelectOperator translateFilterNode(final FilterNode logicalNode) {\n-    final boolean windowed = persistentQueryMetadata.getResultTopic().getKeyFormat().isWindowed();\n-    whereInfo = WhereInfo.extractWhereInfo(\n-        analysis.getWhereExpression().orElseThrow(\n-            () -> WhereInfo.invalidWhereClauseException(\"Missing WHERE clause\", windowed)),\n-        persistentQueryMetadata.getLogicalSchema(),\n-        windowed,\n-        metaStore,\n-        config);\n-    return new SelectOperator(logicalNode);\n+  private SelectOperator translateFilterNode(final PullFilterNode logicalNode) {\n+    isWindowed = logicalNode.isWindowed();\n+    keys = logicalNode.getKeyValues();\n+    windowBounds = logicalNode.getWindowBounds();\n+\n+    final ProcessingLogger logger = processingLogContext\n+        .getLoggerFactory()\n+        .getLogger(\n+            QueryLoggerUtil.queryLoggerName(\n+                QueryType.PULL_QUERY, contextStacker.push(\"SELECT\").getQueryContext())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2567921c98122f89e8651df08ec125648e74d1"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1MTQ1OQ==", "bodyText": "nit: space after cast?", "url": "https://github.com/confluentinc/ksql/pull/6814#discussion_r551451459", "createdAt": "2021-01-04T17:14:32Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/physical/pull/operators/SelectOperator.java", "diffHunk": "@@ -15,28 +15,82 @@\n \n package io.confluent.ksql.physical.pull.operators;\n \n-import io.confluent.ksql.planner.plan.FilterNode;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.streams.SqlPredicateFactory;\n+import io.confluent.ksql.execution.streams.materialization.PullProcessingContext;\n+import io.confluent.ksql.execution.streams.materialization.Row;\n+import io.confluent.ksql.execution.streams.materialization.TableRow;\n+import io.confluent.ksql.execution.streams.materialization.WindowedRow;\n+import io.confluent.ksql.execution.transform.KsqlTransformer;\n+import io.confluent.ksql.execution.transform.sqlpredicate.SqlPredicate;\n+import io.confluent.ksql.logging.processing.ProcessingLogger;\n import io.confluent.ksql.planner.plan.PlanNode;\n+import io.confluent.ksql.planner.plan.PullFilterNode;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n \n public class SelectOperator extends AbstractPhysicalOperator implements UnaryPhysicalOperator {\n \n-  private final FilterNode logicalNode;\n+  private final PullFilterNode logicalNode;\n+  private final ProcessingLogger logger;\n+  private final SqlPredicate predicate;\n+\n   private AbstractPhysicalOperator child;\n+  private KsqlTransformer<Object, Optional<GenericRow>> transformer;\n+  private TableRow row;\n+\n+  public SelectOperator(final PullFilterNode logicalNode, final ProcessingLogger logger) {\n+    this(logicalNode, logger, SqlPredicate::new);\n+  }\n \n-  public SelectOperator(final FilterNode logicalNode) {\n-    this.logicalNode = Objects.requireNonNull(logicalNode);\n+  @VisibleForTesting\n+  SelectOperator(\n+      final PullFilterNode logicalNode,\n+      final ProcessingLogger logger,\n+      final SqlPredicateFactory predicateFactory\n+  ) {\n+    this.logicalNode = Objects.requireNonNull(logicalNode, \"logicalNode\");\n+    this.logger = Objects.requireNonNull(logger, \"logger\");\n+    this.predicate = predicateFactory.create(\n+        logicalNode.getRewrittenPredicate(),\n+        logicalNode.getCompiledWhereClause()\n+    );\n   }\n \n+\n   @Override\n   public void open() {\n+    transformer = predicate.getTransformer(logger);\n     child.open();\n   }\n \n   @Override\n   public Object next() {\n-    return child.next();\n+    row = (TableRow)child.next();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2567921c98122f89e8651df08ec125648e74d1"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ1MzgxNg==", "bodyText": "Why not return null if we're at the end, or child.next if not.  That way you don't have to introduce another \"special\" value to check for.  You can put the whole block in a while (row != null) and return null otherwise.  We already do this in the other operators.\nOtherwise, you're exposing internal state that isn't meaningful to the caller.", "url": "https://github.com/confluentinc/ksql/pull/6814#discussion_r551453816", "createdAt": "2021-01-04T17:18:34Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/physical/pull/operators/SelectOperator.java", "diffHunk": "@@ -15,28 +15,82 @@\n \n package io.confluent.ksql.physical.pull.operators;\n \n-import io.confluent.ksql.planner.plan.FilterNode;\n+import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.streams.SqlPredicateFactory;\n+import io.confluent.ksql.execution.streams.materialization.PullProcessingContext;\n+import io.confluent.ksql.execution.streams.materialization.Row;\n+import io.confluent.ksql.execution.streams.materialization.TableRow;\n+import io.confluent.ksql.execution.streams.materialization.WindowedRow;\n+import io.confluent.ksql.execution.transform.KsqlTransformer;\n+import io.confluent.ksql.execution.transform.sqlpredicate.SqlPredicate;\n+import io.confluent.ksql.logging.processing.ProcessingLogger;\n import io.confluent.ksql.planner.plan.PlanNode;\n+import io.confluent.ksql.planner.plan.PullFilterNode;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n \n public class SelectOperator extends AbstractPhysicalOperator implements UnaryPhysicalOperator {\n \n-  private final FilterNode logicalNode;\n+  private final PullFilterNode logicalNode;\n+  private final ProcessingLogger logger;\n+  private final SqlPredicate predicate;\n+\n   private AbstractPhysicalOperator child;\n+  private KsqlTransformer<Object, Optional<GenericRow>> transformer;\n+  private TableRow row;\n+\n+  public SelectOperator(final PullFilterNode logicalNode, final ProcessingLogger logger) {\n+    this(logicalNode, logger, SqlPredicate::new);\n+  }\n \n-  public SelectOperator(final FilterNode logicalNode) {\n-    this.logicalNode = Objects.requireNonNull(logicalNode);\n+  @VisibleForTesting\n+  SelectOperator(\n+      final PullFilterNode logicalNode,\n+      final ProcessingLogger logger,\n+      final SqlPredicateFactory predicateFactory\n+  ) {\n+    this.logicalNode = Objects.requireNonNull(logicalNode, \"logicalNode\");\n+    this.logger = Objects.requireNonNull(logger, \"logger\");\n+    this.predicate = predicateFactory.create(\n+        logicalNode.getRewrittenPredicate(),\n+        logicalNode.getCompiledWhereClause()\n+    );\n   }\n \n+\n   @Override\n   public void open() {\n+    transformer = predicate.getTransformer(logger);\n     child.open();\n   }\n \n   @Override\n   public Object next() {\n-    return child.next();\n+    row = (TableRow)child.next();\n+    if (row == null) {\n+      return null;\n+    }\n+\n+    final GenericRow intermediate = PullPhysicalOperatorUtil.getIntermediateRow(\n+        row, logicalNode.getAddAdditionalColumnsToIntermediateSchema());\n+\n+    return transformer.transform(\n+        row.key(),\n+        intermediate,\n+        new PullProcessingContext(row.rowTime()))\n+        .map(r -> {\n+          if (logicalNode.isWindowed()) {\n+            return WindowedRow.of(\n+                logicalNode.getIntermediateSchema(),\n+                ((WindowedRow) row).windowedKey(),\n+                r,\n+                row.rowTime());\n+          }\n+          return Row.of(logicalNode.getIntermediateSchema(), row.key(), r, row.rowTime());\n+        })\n+        .orElse(Row.EMPTY_ROW);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2567921c98122f89e8651df08ec125648e74d1"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2MDE0Ng==", "bodyText": "I don't think you need to add this.", "url": "https://github.com/confluentinc/ksql/pull/6814#discussion_r551460146", "createdAt": "2021-01-04T17:30:39Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/materialization/Row.java", "diffHunk": "@@ -27,6 +27,8 @@\n \n public final class Row implements TableRow {\n \n+  public static final Row EMPTY_ROW = new Row();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2567921c98122f89e8651df08ec125648e74d1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ2NTIwOA==", "bodyText": "nit: unnecessary parens?", "url": "https://github.com/confluentinc/ksql/pull/6814#discussion_r551465208", "createdAt": "2021-01-04T17:40:43Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/PullFilterNode.java", "diffHunk": "@@ -0,0 +1,823 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.planner.plan;\n+\n+import com.google.common.collect.BoundType;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Range;\n+import io.confluent.ksql.GenericKey;\n+import io.confluent.ksql.analyzer.PullQueryValidator;\n+import io.confluent.ksql.engine.generic.GenericExpressionResolver;\n+import io.confluent.ksql.engine.rewrite.StatementRewriteForMagicPseudoTimestamp;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.codegen.CodeGenRunner;\n+import io.confluent.ksql.execution.codegen.ExpressionMetadata;\n+import io.confluent.ksql.execution.expression.tree.ComparisonExpression;\n+import io.confluent.ksql.execution.expression.tree.ComparisonExpression.Type;\n+import io.confluent.ksql.execution.expression.tree.Expression;\n+import io.confluent.ksql.execution.expression.tree.InPredicate;\n+import io.confluent.ksql.execution.expression.tree.IntegerLiteral;\n+import io.confluent.ksql.execution.expression.tree.Literal;\n+import io.confluent.ksql.execution.expression.tree.LogicalBinaryExpression;\n+import io.confluent.ksql.execution.expression.tree.LongLiteral;\n+import io.confluent.ksql.execution.expression.tree.NullLiteral;\n+import io.confluent.ksql.execution.expression.tree.StringLiteral;\n+import io.confluent.ksql.execution.expression.tree.TraversalExpressionVisitor;\n+import io.confluent.ksql.execution.expression.tree.UnqualifiedColumnReferenceExp;\n+import io.confluent.ksql.metastore.MetaStore;\n+import io.confluent.ksql.name.ColumnName;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.Column.Namespace;\n+import io.confluent.ksql.schema.ksql.DefaultSqlValueCoercer;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.SystemColumns;\n+import io.confluent.ksql.schema.utils.FormatOptions;\n+import io.confluent.ksql.structured.SchemaKStream;\n+import io.confluent.ksql.util.KsqlConfig;\n+import io.confluent.ksql.util.KsqlException;\n+import io.confluent.ksql.util.timestamp.PartialStringToTimestampParser;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.BitSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class PullFilterNode extends SingleSourcePlanNode {\n+\n+  private static final Set<Type> VALID_WINDOW_BOUND_COMPARISONS = ImmutableSet.of(\n+      Type.EQUAL,\n+      Type.GREATER_THAN,\n+      Type.GREATER_THAN_OR_EQUAL,\n+      Type.LESS_THAN,\n+      Type.LESS_THAN_OR_EQUAL\n+  );\n+\n+  private final boolean isWindowed;\n+  private final ExpressionMetadata compiledWhereClause;\n+  private final boolean addAdditionalColumnsToIntermediateSchema;\n+  private final LogicalSchema intermediateSchema;\n+  private final MetaStore metaStore;\n+  private final KsqlConfig ksqlConfig;\n+  private final LogicalSchema schema = getSource().getSchema();\n+\n+  private Expression rewrittenPredicate;\n+  private boolean isKeyedQuery = false;\n+  private Optional<WindowBounds> windowBounds;\n+  private List<GenericKey> keyValues;\n+  private Set<UnqualifiedColumnReferenceExp> keyColumns;\n+  private Set<UnqualifiedColumnReferenceExp> systemColumns;\n+  private List<GenericKey> inKeys;\n+  private BitSet seenKeys;\n+  private Object[] keyContents;\n+  private boolean containsINkeys;\n+\n+  public PullFilterNode(\n+      final PlanNodeId id,\n+      final PlanNode source,\n+      final Expression predicate,\n+      final MetaStore metaStore,\n+      final KsqlConfig ksqlConfig,\n+      final boolean isWindowed\n+  ) {\n+    super(id, source.getNodeOutputType(), source.getSourceName(), source);\n+\n+    Objects.requireNonNull(predicate, \"predicate\");\n+    this.metaStore = Objects.requireNonNull(metaStore, \"metaStore\");\n+    this.ksqlConfig = Objects.requireNonNull(ksqlConfig, \"ksqlConfig\");\n+    this.rewrittenPredicate = new StatementRewriteForMagicPseudoTimestamp().rewrite(predicate);\n+    this.isWindowed = isWindowed;\n+\n+    // Basic validation of WHERE clause\n+    validateWhereClause();\n+\n+    // Validation and extractions of window bounds\n+    windowBounds = isWindowed ? Optional.of(extractWindowBounds()) : Optional.empty();\n+\n+    // Extraction of key and system columns\n+    extractKeysAndSystemCols();\n+\n+    // Extraction of key values\n+    keyValues = extractKeyValues();\n+\n+    // Compiling expression into byte code\n+    this.addAdditionalColumnsToIntermediateSchema = shouldAddAdditionalColumnsInSchema();\n+    this.intermediateSchema = PullLogicalPlanUtil.buildIntermediateSchema(\n+        source.getSchema(), addAdditionalColumnsToIntermediateSchema, isWindowed);\n+    compiledWhereClause = CodeGenRunner.compileExpression(\n+        rewrittenPredicate,\n+        \"Predicate\",\n+        intermediateSchema,\n+        ksqlConfig,\n+        metaStore\n+    );\n+\n+  }\n+\n+  public Expression getRewrittenPredicate() {\n+    return rewrittenPredicate;\n+  }\n+\n+  @Override\n+  public LogicalSchema getSchema() {\n+    return getSource().getSchema();\n+  }\n+\n+  @Override\n+  public SchemaKStream<?> buildStream(final KsqlQueryBuilder builder) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  public ExpressionMetadata getCompiledWhereClause() {\n+    return compiledWhereClause;\n+  }\n+\n+  public boolean isKeyedQuery() {\n+    return isKeyedQuery;\n+  }\n+\n+  public boolean isWindowed() {\n+    return isWindowed;\n+  }\n+\n+  public List<GenericKey> getKeyValues() {\n+    return keyValues;\n+  }\n+\n+  public Set<UnqualifiedColumnReferenceExp> getKeyColumns() {\n+    return keyColumns;\n+  }\n+\n+  public Optional<WindowBounds> getWindowBounds() {\n+    return windowBounds;\n+  }\n+\n+  public boolean getAddAdditionalColumnsToIntermediateSchema() {\n+    return addAdditionalColumnsToIntermediateSchema;\n+  }\n+\n+  public LogicalSchema getIntermediateSchema() {\n+    return intermediateSchema;\n+  }\n+\n+  private void validateWhereClause() {\n+    seenKeys = new BitSet(schema.key().size());\n+    final Validator validator = new Validator();\n+    validator.process(rewrittenPredicate, null);\n+    if (!isKeyedQuery) {\n+      throw invalidWhereClauseException(\"WHERE clause missing key column\", isWindowed);\n+    }\n+\n+    if (!seenKeys.isEmpty() && seenKeys.cardinality() != schema.key().size()) {\n+      final List<ColumnName> seenKeyNames = seenKeys\n+          .stream()\n+          .boxed()\n+          .map(i -> schema.key().get(i))\n+          .map(Column::name)\n+          .collect(Collectors.toList());\n+      throw invalidWhereClauseException(\n+          \"Multi-column sources must specify every key in the WHERE clause. Specified: \"\n+              + seenKeyNames + \" Expected: \" + schema.key(), isWindowed);\n+    }\n+  }\n+\n+  private void extractKeysAndSystemCols() {\n+    keyColumns = new HashSet<>();\n+    systemColumns = new HashSet<>();\n+    new KeyAndSystemColsExtractor().process(rewrittenPredicate, null);\n+  }\n+\n+  private List<GenericKey> extractKeyValues() {\n+    inKeys = new ArrayList<>();\n+    keyContents = new Object[schema.key().size()];\n+    seenKeys = new BitSet(schema.key().size());\n+\n+    new KeyValueExtractor().process(rewrittenPredicate, null);\n+    if (!inKeys.isEmpty()) {\n+      return (inKeys);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2567921c98122f89e8651df08ec125648e74d1"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ3MDUwNw==", "bodyText": "From my understanding of reading the code, this is the list of possible in predicate values since just one in predicate is allowed whereas keyContents and seenKeys are solely set for comparisons, right?\nAlso, presumably, as before this change, multi column lookups are still only supported with comparisons, right?\nIt would be good to get a bit more comments that state these things because it's getting a bit hard to follow.", "url": "https://github.com/confluentinc/ksql/pull/6814#discussion_r551470507", "createdAt": "2021-01-04T17:50:58Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/PullFilterNode.java", "diffHunk": "@@ -0,0 +1,823 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.planner.plan;\n+\n+import com.google.common.collect.BoundType;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Range;\n+import io.confluent.ksql.GenericKey;\n+import io.confluent.ksql.analyzer.PullQueryValidator;\n+import io.confluent.ksql.engine.generic.GenericExpressionResolver;\n+import io.confluent.ksql.engine.rewrite.StatementRewriteForMagicPseudoTimestamp;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.codegen.CodeGenRunner;\n+import io.confluent.ksql.execution.codegen.ExpressionMetadata;\n+import io.confluent.ksql.execution.expression.tree.ComparisonExpression;\n+import io.confluent.ksql.execution.expression.tree.ComparisonExpression.Type;\n+import io.confluent.ksql.execution.expression.tree.Expression;\n+import io.confluent.ksql.execution.expression.tree.InPredicate;\n+import io.confluent.ksql.execution.expression.tree.IntegerLiteral;\n+import io.confluent.ksql.execution.expression.tree.Literal;\n+import io.confluent.ksql.execution.expression.tree.LogicalBinaryExpression;\n+import io.confluent.ksql.execution.expression.tree.LongLiteral;\n+import io.confluent.ksql.execution.expression.tree.NullLiteral;\n+import io.confluent.ksql.execution.expression.tree.StringLiteral;\n+import io.confluent.ksql.execution.expression.tree.TraversalExpressionVisitor;\n+import io.confluent.ksql.execution.expression.tree.UnqualifiedColumnReferenceExp;\n+import io.confluent.ksql.metastore.MetaStore;\n+import io.confluent.ksql.name.ColumnName;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.Column.Namespace;\n+import io.confluent.ksql.schema.ksql.DefaultSqlValueCoercer;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.SystemColumns;\n+import io.confluent.ksql.schema.utils.FormatOptions;\n+import io.confluent.ksql.structured.SchemaKStream;\n+import io.confluent.ksql.util.KsqlConfig;\n+import io.confluent.ksql.util.KsqlException;\n+import io.confluent.ksql.util.timestamp.PartialStringToTimestampParser;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.BitSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class PullFilterNode extends SingleSourcePlanNode {\n+\n+  private static final Set<Type> VALID_WINDOW_BOUND_COMPARISONS = ImmutableSet.of(\n+      Type.EQUAL,\n+      Type.GREATER_THAN,\n+      Type.GREATER_THAN_OR_EQUAL,\n+      Type.LESS_THAN,\n+      Type.LESS_THAN_OR_EQUAL\n+  );\n+\n+  private final boolean isWindowed;\n+  private final ExpressionMetadata compiledWhereClause;\n+  private final boolean addAdditionalColumnsToIntermediateSchema;\n+  private final LogicalSchema intermediateSchema;\n+  private final MetaStore metaStore;\n+  private final KsqlConfig ksqlConfig;\n+  private final LogicalSchema schema = getSource().getSchema();\n+\n+  private Expression rewrittenPredicate;\n+  private boolean isKeyedQuery = false;\n+  private Optional<WindowBounds> windowBounds;\n+  private List<GenericKey> keyValues;\n+  private Set<UnqualifiedColumnReferenceExp> keyColumns;\n+  private Set<UnqualifiedColumnReferenceExp> systemColumns;\n+  private List<GenericKey> inKeys;\n+  private BitSet seenKeys;\n+  private Object[] keyContents;\n+  private boolean containsINkeys;\n+\n+  public PullFilterNode(\n+      final PlanNodeId id,\n+      final PlanNode source,\n+      final Expression predicate,\n+      final MetaStore metaStore,\n+      final KsqlConfig ksqlConfig,\n+      final boolean isWindowed\n+  ) {\n+    super(id, source.getNodeOutputType(), source.getSourceName(), source);\n+\n+    Objects.requireNonNull(predicate, \"predicate\");\n+    this.metaStore = Objects.requireNonNull(metaStore, \"metaStore\");\n+    this.ksqlConfig = Objects.requireNonNull(ksqlConfig, \"ksqlConfig\");\n+    this.rewrittenPredicate = new StatementRewriteForMagicPseudoTimestamp().rewrite(predicate);\n+    this.isWindowed = isWindowed;\n+\n+    // Basic validation of WHERE clause\n+    validateWhereClause();\n+\n+    // Validation and extractions of window bounds\n+    windowBounds = isWindowed ? Optional.of(extractWindowBounds()) : Optional.empty();\n+\n+    // Extraction of key and system columns\n+    extractKeysAndSystemCols();\n+\n+    // Extraction of key values\n+    keyValues = extractKeyValues();\n+\n+    // Compiling expression into byte code\n+    this.addAdditionalColumnsToIntermediateSchema = shouldAddAdditionalColumnsInSchema();\n+    this.intermediateSchema = PullLogicalPlanUtil.buildIntermediateSchema(\n+        source.getSchema(), addAdditionalColumnsToIntermediateSchema, isWindowed);\n+    compiledWhereClause = CodeGenRunner.compileExpression(\n+        rewrittenPredicate,\n+        \"Predicate\",\n+        intermediateSchema,\n+        ksqlConfig,\n+        metaStore\n+    );\n+\n+  }\n+\n+  public Expression getRewrittenPredicate() {\n+    return rewrittenPredicate;\n+  }\n+\n+  @Override\n+  public LogicalSchema getSchema() {\n+    return getSource().getSchema();\n+  }\n+\n+  @Override\n+  public SchemaKStream<?> buildStream(final KsqlQueryBuilder builder) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  public ExpressionMetadata getCompiledWhereClause() {\n+    return compiledWhereClause;\n+  }\n+\n+  public boolean isKeyedQuery() {\n+    return isKeyedQuery;\n+  }\n+\n+  public boolean isWindowed() {\n+    return isWindowed;\n+  }\n+\n+  public List<GenericKey> getKeyValues() {\n+    return keyValues;\n+  }\n+\n+  public Set<UnqualifiedColumnReferenceExp> getKeyColumns() {\n+    return keyColumns;\n+  }\n+\n+  public Optional<WindowBounds> getWindowBounds() {\n+    return windowBounds;\n+  }\n+\n+  public boolean getAddAdditionalColumnsToIntermediateSchema() {\n+    return addAdditionalColumnsToIntermediateSchema;\n+  }\n+\n+  public LogicalSchema getIntermediateSchema() {\n+    return intermediateSchema;\n+  }\n+\n+  private void validateWhereClause() {\n+    seenKeys = new BitSet(schema.key().size());\n+    final Validator validator = new Validator();\n+    validator.process(rewrittenPredicate, null);\n+    if (!isKeyedQuery) {\n+      throw invalidWhereClauseException(\"WHERE clause missing key column\", isWindowed);\n+    }\n+\n+    if (!seenKeys.isEmpty() && seenKeys.cardinality() != schema.key().size()) {\n+      final List<ColumnName> seenKeyNames = seenKeys\n+          .stream()\n+          .boxed()\n+          .map(i -> schema.key().get(i))\n+          .map(Column::name)\n+          .collect(Collectors.toList());\n+      throw invalidWhereClauseException(\n+          \"Multi-column sources must specify every key in the WHERE clause. Specified: \"\n+              + seenKeyNames + \" Expected: \" + schema.key(), isWindowed);\n+    }\n+  }\n+\n+  private void extractKeysAndSystemCols() {\n+    keyColumns = new HashSet<>();\n+    systemColumns = new HashSet<>();\n+    new KeyAndSystemColsExtractor().process(rewrittenPredicate, null);\n+  }\n+\n+  private List<GenericKey> extractKeyValues() {\n+    inKeys = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2567921c98122f89e8651df08ec125648e74d1"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ3MTIxMQ==", "bodyText": "If this is only used in the validator, why not make it a field there?", "url": "https://github.com/confluentinc/ksql/pull/6814#discussion_r551471211", "createdAt": "2021-01-04T17:52:24Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/PullFilterNode.java", "diffHunk": "@@ -0,0 +1,823 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.planner.plan;\n+\n+import com.google.common.collect.BoundType;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Range;\n+import io.confluent.ksql.GenericKey;\n+import io.confluent.ksql.analyzer.PullQueryValidator;\n+import io.confluent.ksql.engine.generic.GenericExpressionResolver;\n+import io.confluent.ksql.engine.rewrite.StatementRewriteForMagicPseudoTimestamp;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.codegen.CodeGenRunner;\n+import io.confluent.ksql.execution.codegen.ExpressionMetadata;\n+import io.confluent.ksql.execution.expression.tree.ComparisonExpression;\n+import io.confluent.ksql.execution.expression.tree.ComparisonExpression.Type;\n+import io.confluent.ksql.execution.expression.tree.Expression;\n+import io.confluent.ksql.execution.expression.tree.InPredicate;\n+import io.confluent.ksql.execution.expression.tree.IntegerLiteral;\n+import io.confluent.ksql.execution.expression.tree.Literal;\n+import io.confluent.ksql.execution.expression.tree.LogicalBinaryExpression;\n+import io.confluent.ksql.execution.expression.tree.LongLiteral;\n+import io.confluent.ksql.execution.expression.tree.NullLiteral;\n+import io.confluent.ksql.execution.expression.tree.StringLiteral;\n+import io.confluent.ksql.execution.expression.tree.TraversalExpressionVisitor;\n+import io.confluent.ksql.execution.expression.tree.UnqualifiedColumnReferenceExp;\n+import io.confluent.ksql.metastore.MetaStore;\n+import io.confluent.ksql.name.ColumnName;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.Column.Namespace;\n+import io.confluent.ksql.schema.ksql.DefaultSqlValueCoercer;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.SystemColumns;\n+import io.confluent.ksql.schema.utils.FormatOptions;\n+import io.confluent.ksql.structured.SchemaKStream;\n+import io.confluent.ksql.util.KsqlConfig;\n+import io.confluent.ksql.util.KsqlException;\n+import io.confluent.ksql.util.timestamp.PartialStringToTimestampParser;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.BitSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class PullFilterNode extends SingleSourcePlanNode {\n+\n+  private static final Set<Type> VALID_WINDOW_BOUND_COMPARISONS = ImmutableSet.of(\n+      Type.EQUAL,\n+      Type.GREATER_THAN,\n+      Type.GREATER_THAN_OR_EQUAL,\n+      Type.LESS_THAN,\n+      Type.LESS_THAN_OR_EQUAL\n+  );\n+\n+  private final boolean isWindowed;\n+  private final ExpressionMetadata compiledWhereClause;\n+  private final boolean addAdditionalColumnsToIntermediateSchema;\n+  private final LogicalSchema intermediateSchema;\n+  private final MetaStore metaStore;\n+  private final KsqlConfig ksqlConfig;\n+  private final LogicalSchema schema = getSource().getSchema();\n+\n+  private Expression rewrittenPredicate;\n+  private boolean isKeyedQuery = false;\n+  private Optional<WindowBounds> windowBounds;\n+  private List<GenericKey> keyValues;\n+  private Set<UnqualifiedColumnReferenceExp> keyColumns;\n+  private Set<UnqualifiedColumnReferenceExp> systemColumns;\n+  private List<GenericKey> inKeys;\n+  private BitSet seenKeys;\n+  private Object[] keyContents;\n+  private boolean containsINkeys;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2567921c98122f89e8651df08ec125648e74d1"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ3MTgxMg==", "bodyText": "This is primarily used in the validator.  Move to that class?", "url": "https://github.com/confluentinc/ksql/pull/6814#discussion_r551471812", "createdAt": "2021-01-04T17:53:33Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/PullFilterNode.java", "diffHunk": "@@ -0,0 +1,823 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.planner.plan;\n+\n+import com.google.common.collect.BoundType;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Range;\n+import io.confluent.ksql.GenericKey;\n+import io.confluent.ksql.analyzer.PullQueryValidator;\n+import io.confluent.ksql.engine.generic.GenericExpressionResolver;\n+import io.confluent.ksql.engine.rewrite.StatementRewriteForMagicPseudoTimestamp;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.codegen.CodeGenRunner;\n+import io.confluent.ksql.execution.codegen.ExpressionMetadata;\n+import io.confluent.ksql.execution.expression.tree.ComparisonExpression;\n+import io.confluent.ksql.execution.expression.tree.ComparisonExpression.Type;\n+import io.confluent.ksql.execution.expression.tree.Expression;\n+import io.confluent.ksql.execution.expression.tree.InPredicate;\n+import io.confluent.ksql.execution.expression.tree.IntegerLiteral;\n+import io.confluent.ksql.execution.expression.tree.Literal;\n+import io.confluent.ksql.execution.expression.tree.LogicalBinaryExpression;\n+import io.confluent.ksql.execution.expression.tree.LongLiteral;\n+import io.confluent.ksql.execution.expression.tree.NullLiteral;\n+import io.confluent.ksql.execution.expression.tree.StringLiteral;\n+import io.confluent.ksql.execution.expression.tree.TraversalExpressionVisitor;\n+import io.confluent.ksql.execution.expression.tree.UnqualifiedColumnReferenceExp;\n+import io.confluent.ksql.metastore.MetaStore;\n+import io.confluent.ksql.name.ColumnName;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.Column.Namespace;\n+import io.confluent.ksql.schema.ksql.DefaultSqlValueCoercer;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.SystemColumns;\n+import io.confluent.ksql.schema.utils.FormatOptions;\n+import io.confluent.ksql.structured.SchemaKStream;\n+import io.confluent.ksql.util.KsqlConfig;\n+import io.confluent.ksql.util.KsqlException;\n+import io.confluent.ksql.util.timestamp.PartialStringToTimestampParser;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.BitSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class PullFilterNode extends SingleSourcePlanNode {\n+\n+  private static final Set<Type> VALID_WINDOW_BOUND_COMPARISONS = ImmutableSet.of(\n+      Type.EQUAL,\n+      Type.GREATER_THAN,\n+      Type.GREATER_THAN_OR_EQUAL,\n+      Type.LESS_THAN,\n+      Type.LESS_THAN_OR_EQUAL\n+  );\n+\n+  private final boolean isWindowed;\n+  private final ExpressionMetadata compiledWhereClause;\n+  private final boolean addAdditionalColumnsToIntermediateSchema;\n+  private final LogicalSchema intermediateSchema;\n+  private final MetaStore metaStore;\n+  private final KsqlConfig ksqlConfig;\n+  private final LogicalSchema schema = getSource().getSchema();\n+\n+  private Expression rewrittenPredicate;\n+  private boolean isKeyedQuery = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2567921c98122f89e8651df08ec125648e74d1"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ3MjYyMA==", "bodyText": "You can also add as getter to validator to get this field as well.", "url": "https://github.com/confluentinc/ksql/pull/6814#discussion_r551472620", "createdAt": "2021-01-04T17:55:03Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/PullFilterNode.java", "diffHunk": "@@ -0,0 +1,823 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.planner.plan;\n+\n+import com.google.common.collect.BoundType;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Range;\n+import io.confluent.ksql.GenericKey;\n+import io.confluent.ksql.analyzer.PullQueryValidator;\n+import io.confluent.ksql.engine.generic.GenericExpressionResolver;\n+import io.confluent.ksql.engine.rewrite.StatementRewriteForMagicPseudoTimestamp;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.codegen.CodeGenRunner;\n+import io.confluent.ksql.execution.codegen.ExpressionMetadata;\n+import io.confluent.ksql.execution.expression.tree.ComparisonExpression;\n+import io.confluent.ksql.execution.expression.tree.ComparisonExpression.Type;\n+import io.confluent.ksql.execution.expression.tree.Expression;\n+import io.confluent.ksql.execution.expression.tree.InPredicate;\n+import io.confluent.ksql.execution.expression.tree.IntegerLiteral;\n+import io.confluent.ksql.execution.expression.tree.Literal;\n+import io.confluent.ksql.execution.expression.tree.LogicalBinaryExpression;\n+import io.confluent.ksql.execution.expression.tree.LongLiteral;\n+import io.confluent.ksql.execution.expression.tree.NullLiteral;\n+import io.confluent.ksql.execution.expression.tree.StringLiteral;\n+import io.confluent.ksql.execution.expression.tree.TraversalExpressionVisitor;\n+import io.confluent.ksql.execution.expression.tree.UnqualifiedColumnReferenceExp;\n+import io.confluent.ksql.metastore.MetaStore;\n+import io.confluent.ksql.name.ColumnName;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.Column.Namespace;\n+import io.confluent.ksql.schema.ksql.DefaultSqlValueCoercer;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.SystemColumns;\n+import io.confluent.ksql.schema.utils.FormatOptions;\n+import io.confluent.ksql.structured.SchemaKStream;\n+import io.confluent.ksql.util.KsqlConfig;\n+import io.confluent.ksql.util.KsqlException;\n+import io.confluent.ksql.util.timestamp.PartialStringToTimestampParser;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.BitSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class PullFilterNode extends SingleSourcePlanNode {\n+\n+  private static final Set<Type> VALID_WINDOW_BOUND_COMPARISONS = ImmutableSet.of(\n+      Type.EQUAL,\n+      Type.GREATER_THAN,\n+      Type.GREATER_THAN_OR_EQUAL,\n+      Type.LESS_THAN,\n+      Type.LESS_THAN_OR_EQUAL\n+  );\n+\n+  private final boolean isWindowed;\n+  private final ExpressionMetadata compiledWhereClause;\n+  private final boolean addAdditionalColumnsToIntermediateSchema;\n+  private final LogicalSchema intermediateSchema;\n+  private final MetaStore metaStore;\n+  private final KsqlConfig ksqlConfig;\n+  private final LogicalSchema schema = getSource().getSchema();\n+\n+  private Expression rewrittenPredicate;\n+  private boolean isKeyedQuery = false;\n+  private Optional<WindowBounds> windowBounds;\n+  private List<GenericKey> keyValues;\n+  private Set<UnqualifiedColumnReferenceExp> keyColumns;\n+  private Set<UnqualifiedColumnReferenceExp> systemColumns;\n+  private List<GenericKey> inKeys;\n+  private BitSet seenKeys;\n+  private Object[] keyContents;\n+  private boolean containsINkeys;\n+\n+  public PullFilterNode(\n+      final PlanNodeId id,\n+      final PlanNode source,\n+      final Expression predicate,\n+      final MetaStore metaStore,\n+      final KsqlConfig ksqlConfig,\n+      final boolean isWindowed\n+  ) {\n+    super(id, source.getNodeOutputType(), source.getSourceName(), source);\n+\n+    Objects.requireNonNull(predicate, \"predicate\");\n+    this.metaStore = Objects.requireNonNull(metaStore, \"metaStore\");\n+    this.ksqlConfig = Objects.requireNonNull(ksqlConfig, \"ksqlConfig\");\n+    this.rewrittenPredicate = new StatementRewriteForMagicPseudoTimestamp().rewrite(predicate);\n+    this.isWindowed = isWindowed;\n+\n+    // Basic validation of WHERE clause\n+    validateWhereClause();\n+\n+    // Validation and extractions of window bounds\n+    windowBounds = isWindowed ? Optional.of(extractWindowBounds()) : Optional.empty();\n+\n+    // Extraction of key and system columns\n+    extractKeysAndSystemCols();\n+\n+    // Extraction of key values\n+    keyValues = extractKeyValues();\n+\n+    // Compiling expression into byte code\n+    this.addAdditionalColumnsToIntermediateSchema = shouldAddAdditionalColumnsInSchema();\n+    this.intermediateSchema = PullLogicalPlanUtil.buildIntermediateSchema(\n+        source.getSchema(), addAdditionalColumnsToIntermediateSchema, isWindowed);\n+    compiledWhereClause = CodeGenRunner.compileExpression(\n+        rewrittenPredicate,\n+        \"Predicate\",\n+        intermediateSchema,\n+        ksqlConfig,\n+        metaStore\n+    );\n+\n+  }\n+\n+  public Expression getRewrittenPredicate() {\n+    return rewrittenPredicate;\n+  }\n+\n+  @Override\n+  public LogicalSchema getSchema() {\n+    return getSource().getSchema();\n+  }\n+\n+  @Override\n+  public SchemaKStream<?> buildStream(final KsqlQueryBuilder builder) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  public ExpressionMetadata getCompiledWhereClause() {\n+    return compiledWhereClause;\n+  }\n+\n+  public boolean isKeyedQuery() {\n+    return isKeyedQuery;\n+  }\n+\n+  public boolean isWindowed() {\n+    return isWindowed;\n+  }\n+\n+  public List<GenericKey> getKeyValues() {\n+    return keyValues;\n+  }\n+\n+  public Set<UnqualifiedColumnReferenceExp> getKeyColumns() {\n+    return keyColumns;\n+  }\n+\n+  public Optional<WindowBounds> getWindowBounds() {\n+    return windowBounds;\n+  }\n+\n+  public boolean getAddAdditionalColumnsToIntermediateSchema() {\n+    return addAdditionalColumnsToIntermediateSchema;\n+  }\n+\n+  public LogicalSchema getIntermediateSchema() {\n+    return intermediateSchema;\n+  }\n+\n+  private void validateWhereClause() {\n+    seenKeys = new BitSet(schema.key().size());\n+    final Validator validator = new Validator();\n+    validator.process(rewrittenPredicate, null);\n+    if (!isKeyedQuery) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2567921c98122f89e8651df08ec125648e74d1"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ3NTM0Nw==", "bodyText": "You're effectively using this version of seenKeys to check that they're not attempting to use a key twice, right?  If you changed this to a counter rather than a bit set, you could initialize it once in ExtractKeyValues and then just do the check in a single place without traversing the expression again.", "url": "https://github.com/confluentinc/ksql/pull/6814#discussion_r551475347", "createdAt": "2021-01-04T17:59:57Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/PullFilterNode.java", "diffHunk": "@@ -0,0 +1,823 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.planner.plan;\n+\n+import com.google.common.collect.BoundType;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Range;\n+import io.confluent.ksql.GenericKey;\n+import io.confluent.ksql.analyzer.PullQueryValidator;\n+import io.confluent.ksql.engine.generic.GenericExpressionResolver;\n+import io.confluent.ksql.engine.rewrite.StatementRewriteForMagicPseudoTimestamp;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.codegen.CodeGenRunner;\n+import io.confluent.ksql.execution.codegen.ExpressionMetadata;\n+import io.confluent.ksql.execution.expression.tree.ComparisonExpression;\n+import io.confluent.ksql.execution.expression.tree.ComparisonExpression.Type;\n+import io.confluent.ksql.execution.expression.tree.Expression;\n+import io.confluent.ksql.execution.expression.tree.InPredicate;\n+import io.confluent.ksql.execution.expression.tree.IntegerLiteral;\n+import io.confluent.ksql.execution.expression.tree.Literal;\n+import io.confluent.ksql.execution.expression.tree.LogicalBinaryExpression;\n+import io.confluent.ksql.execution.expression.tree.LongLiteral;\n+import io.confluent.ksql.execution.expression.tree.NullLiteral;\n+import io.confluent.ksql.execution.expression.tree.StringLiteral;\n+import io.confluent.ksql.execution.expression.tree.TraversalExpressionVisitor;\n+import io.confluent.ksql.execution.expression.tree.UnqualifiedColumnReferenceExp;\n+import io.confluent.ksql.metastore.MetaStore;\n+import io.confluent.ksql.name.ColumnName;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.Column.Namespace;\n+import io.confluent.ksql.schema.ksql.DefaultSqlValueCoercer;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.SystemColumns;\n+import io.confluent.ksql.schema.utils.FormatOptions;\n+import io.confluent.ksql.structured.SchemaKStream;\n+import io.confluent.ksql.util.KsqlConfig;\n+import io.confluent.ksql.util.KsqlException;\n+import io.confluent.ksql.util.timestamp.PartialStringToTimestampParser;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.BitSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class PullFilterNode extends SingleSourcePlanNode {\n+\n+  private static final Set<Type> VALID_WINDOW_BOUND_COMPARISONS = ImmutableSet.of(\n+      Type.EQUAL,\n+      Type.GREATER_THAN,\n+      Type.GREATER_THAN_OR_EQUAL,\n+      Type.LESS_THAN,\n+      Type.LESS_THAN_OR_EQUAL\n+  );\n+\n+  private final boolean isWindowed;\n+  private final ExpressionMetadata compiledWhereClause;\n+  private final boolean addAdditionalColumnsToIntermediateSchema;\n+  private final LogicalSchema intermediateSchema;\n+  private final MetaStore metaStore;\n+  private final KsqlConfig ksqlConfig;\n+  private final LogicalSchema schema = getSource().getSchema();\n+\n+  private Expression rewrittenPredicate;\n+  private boolean isKeyedQuery = false;\n+  private Optional<WindowBounds> windowBounds;\n+  private List<GenericKey> keyValues;\n+  private Set<UnqualifiedColumnReferenceExp> keyColumns;\n+  private Set<UnqualifiedColumnReferenceExp> systemColumns;\n+  private List<GenericKey> inKeys;\n+  private BitSet seenKeys;\n+  private Object[] keyContents;\n+  private boolean containsINkeys;\n+\n+  public PullFilterNode(\n+      final PlanNodeId id,\n+      final PlanNode source,\n+      final Expression predicate,\n+      final MetaStore metaStore,\n+      final KsqlConfig ksqlConfig,\n+      final boolean isWindowed\n+  ) {\n+    super(id, source.getNodeOutputType(), source.getSourceName(), source);\n+\n+    Objects.requireNonNull(predicate, \"predicate\");\n+    this.metaStore = Objects.requireNonNull(metaStore, \"metaStore\");\n+    this.ksqlConfig = Objects.requireNonNull(ksqlConfig, \"ksqlConfig\");\n+    this.rewrittenPredicate = new StatementRewriteForMagicPseudoTimestamp().rewrite(predicate);\n+    this.isWindowed = isWindowed;\n+\n+    // Basic validation of WHERE clause\n+    validateWhereClause();\n+\n+    // Validation and extractions of window bounds\n+    windowBounds = isWindowed ? Optional.of(extractWindowBounds()) : Optional.empty();\n+\n+    // Extraction of key and system columns\n+    extractKeysAndSystemCols();\n+\n+    // Extraction of key values\n+    keyValues = extractKeyValues();\n+\n+    // Compiling expression into byte code\n+    this.addAdditionalColumnsToIntermediateSchema = shouldAddAdditionalColumnsInSchema();\n+    this.intermediateSchema = PullLogicalPlanUtil.buildIntermediateSchema(\n+        source.getSchema(), addAdditionalColumnsToIntermediateSchema, isWindowed);\n+    compiledWhereClause = CodeGenRunner.compileExpression(\n+        rewrittenPredicate,\n+        \"Predicate\",\n+        intermediateSchema,\n+        ksqlConfig,\n+        metaStore\n+    );\n+\n+  }\n+\n+  public Expression getRewrittenPredicate() {\n+    return rewrittenPredicate;\n+  }\n+\n+  @Override\n+  public LogicalSchema getSchema() {\n+    return getSource().getSchema();\n+  }\n+\n+  @Override\n+  public SchemaKStream<?> buildStream(final KsqlQueryBuilder builder) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  public ExpressionMetadata getCompiledWhereClause() {\n+    return compiledWhereClause;\n+  }\n+\n+  public boolean isKeyedQuery() {\n+    return isKeyedQuery;\n+  }\n+\n+  public boolean isWindowed() {\n+    return isWindowed;\n+  }\n+\n+  public List<GenericKey> getKeyValues() {\n+    return keyValues;\n+  }\n+\n+  public Set<UnqualifiedColumnReferenceExp> getKeyColumns() {\n+    return keyColumns;\n+  }\n+\n+  public Optional<WindowBounds> getWindowBounds() {\n+    return windowBounds;\n+  }\n+\n+  public boolean getAddAdditionalColumnsToIntermediateSchema() {\n+    return addAdditionalColumnsToIntermediateSchema;\n+  }\n+\n+  public LogicalSchema getIntermediateSchema() {\n+    return intermediateSchema;\n+  }\n+\n+  private void validateWhereClause() {\n+    seenKeys = new BitSet(schema.key().size());\n+    final Validator validator = new Validator();\n+    validator.process(rewrittenPredicate, null);\n+    if (!isKeyedQuery) {\n+      throw invalidWhereClauseException(\"WHERE clause missing key column\", isWindowed);\n+    }\n+\n+    if (!seenKeys.isEmpty() && seenKeys.cardinality() != schema.key().size()) {\n+      final List<ColumnName> seenKeyNames = seenKeys\n+          .stream()\n+          .boxed()\n+          .map(i -> schema.key().get(i))\n+          .map(Column::name)\n+          .collect(Collectors.toList());\n+      throw invalidWhereClauseException(\n+          \"Multi-column sources must specify every key in the WHERE clause. Specified: \"\n+              + seenKeyNames + \" Expected: \" + schema.key(), isWindowed);\n+    }\n+  }\n+\n+  private void extractKeysAndSystemCols() {\n+    keyColumns = new HashSet<>();\n+    systemColumns = new HashSet<>();\n+    new KeyAndSystemColsExtractor().process(rewrittenPredicate, null);\n+  }\n+\n+  private List<GenericKey> extractKeyValues() {\n+    inKeys = new ArrayList<>();\n+    keyContents = new Object[schema.key().size()];\n+    seenKeys = new BitSet(schema.key().size());\n+\n+    new KeyValueExtractor().process(rewrittenPredicate, null);\n+    if (!inKeys.isEmpty()) {\n+      return (inKeys);\n+    }\n+\n+    return ImmutableList.of(GenericKey.fromList(Arrays.asList(keyContents)));\n+  }\n+\n+  private WindowBounds extractWindowBounds() {\n+    final WindowBounds windowBounds = new WindowBounds();\n+\n+    new WindowBoundsExtractor().process(rewrittenPredicate, windowBounds);\n+    return windowBounds;\n+  }\n+\n+  /**\n+   * Validate the WHERE clause for pull queries.\n+   * 1. There must be exactly one equality condition per key\n+   * or one IN predicate that involves a key.\n+   * 2. An IN predicate can refer to a single key.\n+   * 3. The IN predicate cannot be combined with other conditions.\n+   * 4. Only AND is allowed.\n+   * 5. If there is a multi-key, conditions on all keys must be specified.\n+   * 6. The IN predicate cannot use multi-keys.\n+   */\n+  private final class Validator extends TraversalExpressionVisitor<Object> {\n+\n+    @Override\n+    public Void process(final Expression node, final Object context) {\n+      if (!(node instanceof  LogicalBinaryExpression)\n+          && !(node instanceof  ComparisonExpression)\n+          && !(node instanceof  InPredicate)) {\n+        throw invalidWhereClauseException(\"Unsupported expression in WHERE clause: \" + node, false);\n+      }\n+      super.process(node, context);\n+      return null;\n+    }\n+\n+    @Override\n+    public Void visitLogicalBinaryExpression(\n+        final LogicalBinaryExpression node,\n+        final Object context\n+    ) {\n+      if (node.getType() != LogicalBinaryExpression.Type.AND) {\n+        throw invalidWhereClauseException(\"Only AND expressions are supported: \" + node, false);\n+      }\n+      process(node.getLeft(), context);\n+      process(node.getRight(), context);\n+      return null;\n+    }\n+\n+    @Override\n+    public Void visitComparisonExpression(\n+        final ComparisonExpression node,\n+        final Object context\n+    ) {\n+      final UnqualifiedColumnReferenceExp column = getColumnRefSide(node);\n+\n+      final ColumnName columnName = column.getColumnName();\n+      if (columnName.equals(SystemColumns.WINDOWSTART_NAME)\n+          || columnName.equals(SystemColumns.WINDOWEND_NAME)) {\n+        final Type type = node.getType();\n+        if (!VALID_WINDOW_BOUND_COMPARISONS.contains(type)) {\n+          throw invalidWhereClauseException(\n+              \"Unsupported \" + columnName + \" bounds: \" + type, true);\n+        }\n+        if (!isWindowed) {\n+          throw invalidWhereClauseException(\n+              \"Cannot use WINDOWSTART/WINDOWEND on non-windowed source\",\n+              false);\n+        }\n+        return null;\n+      } else {\n+        final Column col = schema.findColumn(columnName)\n+            .orElseThrow(() -> invalidWhereClauseException(\n+                \"Bound on non-key column \" + columnName, isWindowed));\n+\n+        if (col.namespace() == Namespace.KEY) {\n+          if (node.getType() != Type.EQUAL) {\n+            throw invalidWhereClauseException(\n+                \"Bound on key columns '\" + getSource().getSchema().key()\n+                    + \"' must currently be '='\",\n+                isWindowed);\n+          }\n+          if (containsINkeys || seenKeys.get(col.index())) {\n+            throw invalidWhereClauseException(\n+                \"An equality condition on the key column cannot be combined with other comparisons\"\n+                    + \" such as an IN predicate\",\n+                isWindowed);\n+          }\n+          seenKeys.set(col.index());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2567921c98122f89e8651df08ec125648e74d1"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ3Nzg5MQ==", "bodyText": "I find the reuse, multiple times, of the field seenKeys to be confusing.  Why not just make this a field of Validator and add a getter for it to be checked below?", "url": "https://github.com/confluentinc/ksql/pull/6814#discussion_r551477891", "createdAt": "2021-01-04T18:05:04Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/PullFilterNode.java", "diffHunk": "@@ -0,0 +1,823 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.planner.plan;\n+\n+import com.google.common.collect.BoundType;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Range;\n+import io.confluent.ksql.GenericKey;\n+import io.confluent.ksql.analyzer.PullQueryValidator;\n+import io.confluent.ksql.engine.generic.GenericExpressionResolver;\n+import io.confluent.ksql.engine.rewrite.StatementRewriteForMagicPseudoTimestamp;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.codegen.CodeGenRunner;\n+import io.confluent.ksql.execution.codegen.ExpressionMetadata;\n+import io.confluent.ksql.execution.expression.tree.ComparisonExpression;\n+import io.confluent.ksql.execution.expression.tree.ComparisonExpression.Type;\n+import io.confluent.ksql.execution.expression.tree.Expression;\n+import io.confluent.ksql.execution.expression.tree.InPredicate;\n+import io.confluent.ksql.execution.expression.tree.IntegerLiteral;\n+import io.confluent.ksql.execution.expression.tree.Literal;\n+import io.confluent.ksql.execution.expression.tree.LogicalBinaryExpression;\n+import io.confluent.ksql.execution.expression.tree.LongLiteral;\n+import io.confluent.ksql.execution.expression.tree.NullLiteral;\n+import io.confluent.ksql.execution.expression.tree.StringLiteral;\n+import io.confluent.ksql.execution.expression.tree.TraversalExpressionVisitor;\n+import io.confluent.ksql.execution.expression.tree.UnqualifiedColumnReferenceExp;\n+import io.confluent.ksql.metastore.MetaStore;\n+import io.confluent.ksql.name.ColumnName;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.Column.Namespace;\n+import io.confluent.ksql.schema.ksql.DefaultSqlValueCoercer;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.SystemColumns;\n+import io.confluent.ksql.schema.utils.FormatOptions;\n+import io.confluent.ksql.structured.SchemaKStream;\n+import io.confluent.ksql.util.KsqlConfig;\n+import io.confluent.ksql.util.KsqlException;\n+import io.confluent.ksql.util.timestamp.PartialStringToTimestampParser;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.BitSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class PullFilterNode extends SingleSourcePlanNode {\n+\n+  private static final Set<Type> VALID_WINDOW_BOUND_COMPARISONS = ImmutableSet.of(\n+      Type.EQUAL,\n+      Type.GREATER_THAN,\n+      Type.GREATER_THAN_OR_EQUAL,\n+      Type.LESS_THAN,\n+      Type.LESS_THAN_OR_EQUAL\n+  );\n+\n+  private final boolean isWindowed;\n+  private final ExpressionMetadata compiledWhereClause;\n+  private final boolean addAdditionalColumnsToIntermediateSchema;\n+  private final LogicalSchema intermediateSchema;\n+  private final MetaStore metaStore;\n+  private final KsqlConfig ksqlConfig;\n+  private final LogicalSchema schema = getSource().getSchema();\n+\n+  private Expression rewrittenPredicate;\n+  private boolean isKeyedQuery = false;\n+  private Optional<WindowBounds> windowBounds;\n+  private List<GenericKey> keyValues;\n+  private Set<UnqualifiedColumnReferenceExp> keyColumns;\n+  private Set<UnqualifiedColumnReferenceExp> systemColumns;\n+  private List<GenericKey> inKeys;\n+  private BitSet seenKeys;\n+  private Object[] keyContents;\n+  private boolean containsINkeys;\n+\n+  public PullFilterNode(\n+      final PlanNodeId id,\n+      final PlanNode source,\n+      final Expression predicate,\n+      final MetaStore metaStore,\n+      final KsqlConfig ksqlConfig,\n+      final boolean isWindowed\n+  ) {\n+    super(id, source.getNodeOutputType(), source.getSourceName(), source);\n+\n+    Objects.requireNonNull(predicate, \"predicate\");\n+    this.metaStore = Objects.requireNonNull(metaStore, \"metaStore\");\n+    this.ksqlConfig = Objects.requireNonNull(ksqlConfig, \"ksqlConfig\");\n+    this.rewrittenPredicate = new StatementRewriteForMagicPseudoTimestamp().rewrite(predicate);\n+    this.isWindowed = isWindowed;\n+\n+    // Basic validation of WHERE clause\n+    validateWhereClause();\n+\n+    // Validation and extractions of window bounds\n+    windowBounds = isWindowed ? Optional.of(extractWindowBounds()) : Optional.empty();\n+\n+    // Extraction of key and system columns\n+    extractKeysAndSystemCols();\n+\n+    // Extraction of key values\n+    keyValues = extractKeyValues();\n+\n+    // Compiling expression into byte code\n+    this.addAdditionalColumnsToIntermediateSchema = shouldAddAdditionalColumnsInSchema();\n+    this.intermediateSchema = PullLogicalPlanUtil.buildIntermediateSchema(\n+        source.getSchema(), addAdditionalColumnsToIntermediateSchema, isWindowed);\n+    compiledWhereClause = CodeGenRunner.compileExpression(\n+        rewrittenPredicate,\n+        \"Predicate\",\n+        intermediateSchema,\n+        ksqlConfig,\n+        metaStore\n+    );\n+\n+  }\n+\n+  public Expression getRewrittenPredicate() {\n+    return rewrittenPredicate;\n+  }\n+\n+  @Override\n+  public LogicalSchema getSchema() {\n+    return getSource().getSchema();\n+  }\n+\n+  @Override\n+  public SchemaKStream<?> buildStream(final KsqlQueryBuilder builder) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  public ExpressionMetadata getCompiledWhereClause() {\n+    return compiledWhereClause;\n+  }\n+\n+  public boolean isKeyedQuery() {\n+    return isKeyedQuery;\n+  }\n+\n+  public boolean isWindowed() {\n+    return isWindowed;\n+  }\n+\n+  public List<GenericKey> getKeyValues() {\n+    return keyValues;\n+  }\n+\n+  public Set<UnqualifiedColumnReferenceExp> getKeyColumns() {\n+    return keyColumns;\n+  }\n+\n+  public Optional<WindowBounds> getWindowBounds() {\n+    return windowBounds;\n+  }\n+\n+  public boolean getAddAdditionalColumnsToIntermediateSchema() {\n+    return addAdditionalColumnsToIntermediateSchema;\n+  }\n+\n+  public LogicalSchema getIntermediateSchema() {\n+    return intermediateSchema;\n+  }\n+\n+  private void validateWhereClause() {\n+    seenKeys = new BitSet(schema.key().size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2567921c98122f89e8651df08ec125648e74d1"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MTE4MQ==", "bodyText": "Currently, you have to check for this case in both visitComparisonExpression and  visitInPredicate since you don't know whether you're going to hit a comparison or in predicate first.\nIf you set containsINkeys and seenKeys in ExtractKeyValues, then you can do the check just once in one spot.", "url": "https://github.com/confluentinc/ksql/pull/6814#discussion_r551481181", "createdAt": "2021-01-04T18:12:04Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/PullFilterNode.java", "diffHunk": "@@ -0,0 +1,823 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.planner.plan;\n+\n+import com.google.common.collect.BoundType;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Range;\n+import io.confluent.ksql.GenericKey;\n+import io.confluent.ksql.analyzer.PullQueryValidator;\n+import io.confluent.ksql.engine.generic.GenericExpressionResolver;\n+import io.confluent.ksql.engine.rewrite.StatementRewriteForMagicPseudoTimestamp;\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.codegen.CodeGenRunner;\n+import io.confluent.ksql.execution.codegen.ExpressionMetadata;\n+import io.confluent.ksql.execution.expression.tree.ComparisonExpression;\n+import io.confluent.ksql.execution.expression.tree.ComparisonExpression.Type;\n+import io.confluent.ksql.execution.expression.tree.Expression;\n+import io.confluent.ksql.execution.expression.tree.InPredicate;\n+import io.confluent.ksql.execution.expression.tree.IntegerLiteral;\n+import io.confluent.ksql.execution.expression.tree.Literal;\n+import io.confluent.ksql.execution.expression.tree.LogicalBinaryExpression;\n+import io.confluent.ksql.execution.expression.tree.LongLiteral;\n+import io.confluent.ksql.execution.expression.tree.NullLiteral;\n+import io.confluent.ksql.execution.expression.tree.StringLiteral;\n+import io.confluent.ksql.execution.expression.tree.TraversalExpressionVisitor;\n+import io.confluent.ksql.execution.expression.tree.UnqualifiedColumnReferenceExp;\n+import io.confluent.ksql.metastore.MetaStore;\n+import io.confluent.ksql.name.ColumnName;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.Column.Namespace;\n+import io.confluent.ksql.schema.ksql.DefaultSqlValueCoercer;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.SystemColumns;\n+import io.confluent.ksql.schema.utils.FormatOptions;\n+import io.confluent.ksql.structured.SchemaKStream;\n+import io.confluent.ksql.util.KsqlConfig;\n+import io.confluent.ksql.util.KsqlException;\n+import io.confluent.ksql.util.timestamp.PartialStringToTimestampParser;\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.BitSet;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+public class PullFilterNode extends SingleSourcePlanNode {\n+\n+  private static final Set<Type> VALID_WINDOW_BOUND_COMPARISONS = ImmutableSet.of(\n+      Type.EQUAL,\n+      Type.GREATER_THAN,\n+      Type.GREATER_THAN_OR_EQUAL,\n+      Type.LESS_THAN,\n+      Type.LESS_THAN_OR_EQUAL\n+  );\n+\n+  private final boolean isWindowed;\n+  private final ExpressionMetadata compiledWhereClause;\n+  private final boolean addAdditionalColumnsToIntermediateSchema;\n+  private final LogicalSchema intermediateSchema;\n+  private final MetaStore metaStore;\n+  private final KsqlConfig ksqlConfig;\n+  private final LogicalSchema schema = getSource().getSchema();\n+\n+  private Expression rewrittenPredicate;\n+  private boolean isKeyedQuery = false;\n+  private Optional<WindowBounds> windowBounds;\n+  private List<GenericKey> keyValues;\n+  private Set<UnqualifiedColumnReferenceExp> keyColumns;\n+  private Set<UnqualifiedColumnReferenceExp> systemColumns;\n+  private List<GenericKey> inKeys;\n+  private BitSet seenKeys;\n+  private Object[] keyContents;\n+  private boolean containsINkeys;\n+\n+  public PullFilterNode(\n+      final PlanNodeId id,\n+      final PlanNode source,\n+      final Expression predicate,\n+      final MetaStore metaStore,\n+      final KsqlConfig ksqlConfig,\n+      final boolean isWindowed\n+  ) {\n+    super(id, source.getNodeOutputType(), source.getSourceName(), source);\n+\n+    Objects.requireNonNull(predicate, \"predicate\");\n+    this.metaStore = Objects.requireNonNull(metaStore, \"metaStore\");\n+    this.ksqlConfig = Objects.requireNonNull(ksqlConfig, \"ksqlConfig\");\n+    this.rewrittenPredicate = new StatementRewriteForMagicPseudoTimestamp().rewrite(predicate);\n+    this.isWindowed = isWindowed;\n+\n+    // Basic validation of WHERE clause\n+    validateWhereClause();\n+\n+    // Validation and extractions of window bounds\n+    windowBounds = isWindowed ? Optional.of(extractWindowBounds()) : Optional.empty();\n+\n+    // Extraction of key and system columns\n+    extractKeysAndSystemCols();\n+\n+    // Extraction of key values\n+    keyValues = extractKeyValues();\n+\n+    // Compiling expression into byte code\n+    this.addAdditionalColumnsToIntermediateSchema = shouldAddAdditionalColumnsInSchema();\n+    this.intermediateSchema = PullLogicalPlanUtil.buildIntermediateSchema(\n+        source.getSchema(), addAdditionalColumnsToIntermediateSchema, isWindowed);\n+    compiledWhereClause = CodeGenRunner.compileExpression(\n+        rewrittenPredicate,\n+        \"Predicate\",\n+        intermediateSchema,\n+        ksqlConfig,\n+        metaStore\n+    );\n+\n+  }\n+\n+  public Expression getRewrittenPredicate() {\n+    return rewrittenPredicate;\n+  }\n+\n+  @Override\n+  public LogicalSchema getSchema() {\n+    return getSource().getSchema();\n+  }\n+\n+  @Override\n+  public SchemaKStream<?> buildStream(final KsqlQueryBuilder builder) {\n+    throw new UnsupportedOperationException();\n+  }\n+\n+  public ExpressionMetadata getCompiledWhereClause() {\n+    return compiledWhereClause;\n+  }\n+\n+  public boolean isKeyedQuery() {\n+    return isKeyedQuery;\n+  }\n+\n+  public boolean isWindowed() {\n+    return isWindowed;\n+  }\n+\n+  public List<GenericKey> getKeyValues() {\n+    return keyValues;\n+  }\n+\n+  public Set<UnqualifiedColumnReferenceExp> getKeyColumns() {\n+    return keyColumns;\n+  }\n+\n+  public Optional<WindowBounds> getWindowBounds() {\n+    return windowBounds;\n+  }\n+\n+  public boolean getAddAdditionalColumnsToIntermediateSchema() {\n+    return addAdditionalColumnsToIntermediateSchema;\n+  }\n+\n+  public LogicalSchema getIntermediateSchema() {\n+    return intermediateSchema;\n+  }\n+\n+  private void validateWhereClause() {\n+    seenKeys = new BitSet(schema.key().size());\n+    final Validator validator = new Validator();\n+    validator.process(rewrittenPredicate, null);\n+    if (!isKeyedQuery) {\n+      throw invalidWhereClauseException(\"WHERE clause missing key column\", isWindowed);\n+    }\n+\n+    if (!seenKeys.isEmpty() && seenKeys.cardinality() != schema.key().size()) {\n+      final List<ColumnName> seenKeyNames = seenKeys\n+          .stream()\n+          .boxed()\n+          .map(i -> schema.key().get(i))\n+          .map(Column::name)\n+          .collect(Collectors.toList());\n+      throw invalidWhereClauseException(\n+          \"Multi-column sources must specify every key in the WHERE clause. Specified: \"\n+              + seenKeyNames + \" Expected: \" + schema.key(), isWindowed);\n+    }\n+  }\n+\n+  private void extractKeysAndSystemCols() {\n+    keyColumns = new HashSet<>();\n+    systemColumns = new HashSet<>();\n+    new KeyAndSystemColsExtractor().process(rewrittenPredicate, null);\n+  }\n+\n+  private List<GenericKey> extractKeyValues() {\n+    inKeys = new ArrayList<>();\n+    keyContents = new Object[schema.key().size()];\n+    seenKeys = new BitSet(schema.key().size());\n+\n+    new KeyValueExtractor().process(rewrittenPredicate, null);\n+    if (!inKeys.isEmpty()) {\n+      return (inKeys);\n+    }\n+\n+    return ImmutableList.of(GenericKey.fromList(Arrays.asList(keyContents)));\n+  }\n+\n+  private WindowBounds extractWindowBounds() {\n+    final WindowBounds windowBounds = new WindowBounds();\n+\n+    new WindowBoundsExtractor().process(rewrittenPredicate, windowBounds);\n+    return windowBounds;\n+  }\n+\n+  /**\n+   * Validate the WHERE clause for pull queries.\n+   * 1. There must be exactly one equality condition per key\n+   * or one IN predicate that involves a key.\n+   * 2. An IN predicate can refer to a single key.\n+   * 3. The IN predicate cannot be combined with other conditions.\n+   * 4. Only AND is allowed.\n+   * 5. If there is a multi-key, conditions on all keys must be specified.\n+   * 6. The IN predicate cannot use multi-keys.\n+   */\n+  private final class Validator extends TraversalExpressionVisitor<Object> {\n+\n+    @Override\n+    public Void process(final Expression node, final Object context) {\n+      if (!(node instanceof  LogicalBinaryExpression)\n+          && !(node instanceof  ComparisonExpression)\n+          && !(node instanceof  InPredicate)) {\n+        throw invalidWhereClauseException(\"Unsupported expression in WHERE clause: \" + node, false);\n+      }\n+      super.process(node, context);\n+      return null;\n+    }\n+\n+    @Override\n+    public Void visitLogicalBinaryExpression(\n+        final LogicalBinaryExpression node,\n+        final Object context\n+    ) {\n+      if (node.getType() != LogicalBinaryExpression.Type.AND) {\n+        throw invalidWhereClauseException(\"Only AND expressions are supported: \" + node, false);\n+      }\n+      process(node.getLeft(), context);\n+      process(node.getRight(), context);\n+      return null;\n+    }\n+\n+    @Override\n+    public Void visitComparisonExpression(\n+        final ComparisonExpression node,\n+        final Object context\n+    ) {\n+      final UnqualifiedColumnReferenceExp column = getColumnRefSide(node);\n+\n+      final ColumnName columnName = column.getColumnName();\n+      if (columnName.equals(SystemColumns.WINDOWSTART_NAME)\n+          || columnName.equals(SystemColumns.WINDOWEND_NAME)) {\n+        final Type type = node.getType();\n+        if (!VALID_WINDOW_BOUND_COMPARISONS.contains(type)) {\n+          throw invalidWhereClauseException(\n+              \"Unsupported \" + columnName + \" bounds: \" + type, true);\n+        }\n+        if (!isWindowed) {\n+          throw invalidWhereClauseException(\n+              \"Cannot use WINDOWSTART/WINDOWEND on non-windowed source\",\n+              false);\n+        }\n+        return null;\n+      } else {\n+        final Column col = schema.findColumn(columnName)\n+            .orElseThrow(() -> invalidWhereClauseException(\n+                \"Bound on non-key column \" + columnName, isWindowed));\n+\n+        if (col.namespace() == Namespace.KEY) {\n+          if (node.getType() != Type.EQUAL) {\n+            throw invalidWhereClauseException(\n+                \"Bound on key columns '\" + getSource().getSchema().key()\n+                    + \"' must currently be '='\",\n+                isWindowed);\n+          }\n+          if (containsINkeys || seenKeys.get(col.index())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2567921c98122f89e8651df08ec125648e74d1"}, "originalPosition": 297}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNjg5NjA0", "url": "https://github.com/confluentinc/ksql/pull/6814#pullrequestreview-563689604", "createdAt": "2021-01-07T17:40:51Z", "commit": {"oid": "caacd5d88686d48e36aaf8fe06d0c2c4f9076f7b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd9e77708ab88e957fe92a48462cde8bb0f98c9a", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/cd9e77708ab88e957fe92a48462cde8bb0f98c9a", "committedDate": "2021-01-08T02:49:52Z", "message": "initial logical node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99d84ce46c520aed905cc1417a2eec21f047cb23", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/99d84ce46c520aed905cc1417a2eec21f047cb23", "committedDate": "2021-01-08T02:49:52Z", "message": "work in progress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54034b4e70d677c9249b2ad441ec18e6a9964a25", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/54034b4e70d677c9249b2ad441ec18e6a9964a25", "committedDate": "2021-01-08T02:49:52Z", "message": "filter node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c9adf3fcc40d9240014b6c028dce75c1d261d33", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/4c9adf3fcc40d9240014b6c028dce75c1d261d33", "committedDate": "2021-01-08T02:49:52Z", "message": "temp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d7e0d92bf6c622ba6741af1ee14f6c8e66c0072", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/8d7e0d92bf6c622ba6741af1ee14f6c8e66c0072", "committedDate": "2021-01-08T02:49:52Z", "message": "working on tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22d0c5c13e43a2e962563881f5daec46da772023", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/22d0c5c13e43a2e962563881f5daec46da772023", "committedDate": "2021-01-08T02:51:30Z", "message": "added tests and fixed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb70640c85769279f71ececd550861edb312b3d6", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/eb70640c85769279f71ececd550861edb312b3d6", "committedDate": "2021-01-08T02:51:33Z", "message": "rebase master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b91e48607afb9130b68d4f052515c99c79ed0d87", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/b91e48607afb9130b68d4f052515c99c79ed0d87", "committedDate": "2021-01-08T02:51:33Z", "message": "address alan's comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6f623d8b1e9e5442500b1021ae194d8e7460912", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/f6f623d8b1e9e5442500b1021ae194d8e7460912", "committedDate": "2021-01-08T02:51:33Z", "message": "compilation error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acb2a3bbb10309e45ca721021836234f4976b7a9", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/acb2a3bbb10309e45ca721021836234f4976b7a9", "committedDate": "2021-01-11T06:33:26Z", "message": "rebase"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "caacd5d88686d48e36aaf8fe06d0c2c4f9076f7b", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/caacd5d88686d48e36aaf8fe06d0c2c4f9076f7b", "committedDate": "2021-01-07T05:11:19Z", "message": "address alan's comments"}, "afterCommit": {"oid": "acb2a3bbb10309e45ca721021836234f4976b7a9", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/acb2a3bbb10309e45ca721021836234f4976b7a9", "committedDate": "2021-01-11T06:33:26Z", "message": "rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8382610de75d792828e1f06d46cccf4d1ac5d32c", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/8382610de75d792828e1f06d46cccf4d1ac5d32c", "committedDate": "2021-01-12T04:12:07Z", "message": "fixed rqtt"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4538, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}