{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NTExNzky", "number": 4581, "title": "feat: Provide upper limit on number of push queries", "bodyText": "Description\nProvides an upper limit on the number of push queries that can be running in the server at any one time.\nPush queries are expensive as they own their own Kafka streams topology and associated threads. We can't have too many in the server at once.\nTesting done\nAdded new test\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-02-18T09:40:30Z", "url": "https://github.com/confluentinc/ksql/pull/4581", "merged": true, "mergeCommit": {"oid": "2cd66c7d4da5e2147821998e8f0827fc28b2df07"}, "closed": true, "closedAt": "2020-02-19T21:40:50Z", "author": {"login": "purplefox"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFmSIZAFqTM2MDU1NzM2Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcF802YABqjMwNTMzNDk0MjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNTU3MzY2", "url": "https://github.com/confluentinc/ksql/pull/4581#pullrequestreview-360557366", "createdAt": "2020-02-18T18:06:54Z", "commit": {"oid": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODowNjo1NVrOFrM3iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODoyOToyNVrOFrNk2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MzkxNQ==", "bodyText": "I'd say 100 is way too high!  Though, of course, it depends on what queries they're running.\n@rodesai did some work investigating this, so he may have some more thoughts on what's a good limit.\nPersonally, I'd be starting with more like 10.", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380843915", "createdAt": "2020-02-18T18:06:55Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java", "diffHunk": "@@ -38,28 +37,51 @@\n           + \" as there are cores you want to use, as each instance is single threaded.\";\n \n   public static final String LISTEN_HOST = propertyName(\"listen.host\");\n-  public static final String DEFAULT_LISTEN_HOST = \"0.0.0.0\";\n+  public static final String DEFAULT_LISTEN_HOST = \"localhost\";\n   public static final String LISTEN_HOST_DOC =\n       \"The hostname to listen on\";\n \n   public static final String LISTEN_PORT = propertyName(\"listen.port\");\n-  public static final int DEFAULT_LISTEN_PORT = 8089;\n+  public static final int DEFAULT_LISTEN_PORT = 8088;\n   public static final String LISTEN_PORT_DOC =\n       \"The port to listen on\";\n \n-  public static final String KEY_PATH = propertyName(\"key.path\");\n-  public static final String KEY_PATH_DOC =\n-      \"Path to key file\";\n+  public static final String TLS_ENABLED = propertyName(\"tls.enabled\");\n+  public static final boolean DEFAULT_TLS_ENABLED = false;\n+  public static final String TLS_ENABLED_DOC =\n+      \"Is TLS enabled?\";\n \n-  public static final String CERT_PATH = propertyName(\"cert.path\");\n-  public static final String CERT_PATH_DOC =\n-      \"Path to cert file\";\n+  public static final String TLS_KEY_STORE_PATH = propertyName(\"tls.keystore.path\");\n+  public static final String TLS_KEY_STORE_PATH_DOC =\n+      \"Path to server key store\";\n+\n+  public static final String TLS_KEY_STORE_PASSWORD = propertyName(\"tls.keystore.password\");\n+  public static final String TLS_KEY_STORE_PASSWORD_DOC =\n+      \"Password for server key store\";\n+\n+  public static final String TLS_TRUST_STORE_PATH = propertyName(\"tls.truststore.path\");\n+  public static final String TLS_TRUST_STORE_PATH_DOC =\n+      \"Path to client trust store\";\n+\n+  public static final String TLS_TRUST_STORE_PASSWORD = propertyName(\"tls.truststore.password\");\n+  public static final String TLS_TRUST_STORE_PASSWORD_DOC =\n+      \"Password for client trust store\";\n+\n+  public static final String TLS_CLIENT_AUTH_REQUIRED = propertyName(\"tls.client.auth.required\");\n+  public static final boolean DEFAULT_TLS_CLIENT_AUTH_REQUIRED = false;\n+  public static final String TLS_CLIENT_AUTH_REQUIRED_DOC =\n+      \"Is client auth required?\";\n \n   public static final String WORKER_POOL_SIZE = propertyName(\"worker.pool.size\");\n   public static final String WORKER_POOL_DOC =\n       \"Max number of worker threads for executing blocking code\";\n   public static final int DEFAULT_WORKER_POOL_SIZE = 100;\n \n+  public static final String MAX_PUSH_QUERIES = propertyName(\"max.push.queries\");\n+  public static final int DEFAULT_MAX_PUSH_QUERIES = 100;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NTU5Mg==", "bodyText": "Add validator to ensure its not set to zero / negative.\nSame for WORKER_POOL_SIZE", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380845592", "createdAt": "2020-02-18T18:10:07Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java", "diffHunk": "@@ -84,34 +106,56 @@ private static String propertyName(final String name) {\n           Importance.MEDIUM,\n           LISTEN_PORT_DOC)\n       .define(\n-          KEY_PATH,\n+          TLS_ENABLED,\n+          Type.BOOLEAN,\n+          DEFAULT_TLS_ENABLED,\n+          Importance.MEDIUM,\n+          TLS_ENABLED_DOC)\n+      .define(\n+          TLS_KEY_STORE_PATH,\n+          Type.STRING,\n+          \"\",\n+          Importance.MEDIUM,\n+          TLS_KEY_STORE_PATH_DOC)\n+      .define(\n+          TLS_KEY_STORE_PASSWORD,\n           Type.STRING,\n-          null,\n+          \"\",\n           Importance.MEDIUM,\n-          KEY_PATH_DOC)\n+          TLS_KEY_STORE_PASSWORD_DOC)\n       .define(\n-          CERT_PATH,\n+          TLS_TRUST_STORE_PATH,\n           Type.STRING,\n-          null,\n+          \"\",\n           Importance.MEDIUM,\n-          CERT_PATH_DOC)\n+          TLS_TRUST_STORE_PATH_DOC)\n+      .define(\n+          TLS_TRUST_STORE_PASSWORD,\n+          Type.STRING,\n+          \"\",\n+          Importance.MEDIUM,\n+          TLS_TRUST_STORE_PASSWORD_DOC)\n+      .define(\n+          TLS_CLIENT_AUTH_REQUIRED,\n+          Type.BOOLEAN,\n+          DEFAULT_TLS_CLIENT_AUTH_REQUIRED,\n+          Importance.MEDIUM,\n+          TLS_CLIENT_AUTH_REQUIRED_DOC)\n       .define(\n           WORKER_POOL_SIZE,\n           Type.INT,\n           DEFAULT_WORKER_POOL_SIZE,\n           Importance.MEDIUM,\n-          WORKER_POOL_DOC);\n+          WORKER_POOL_DOC)\n+      .define(\n+          MAX_PUSH_QUERIES,\n+          Type.INT,\n+          DEFAULT_MAX_PUSH_QUERIES,\n+          Importance.MEDIUM,\n+          MAX_PUSH_QUERIES_DOC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NzI2OQ==", "bodyText": "Can we please not have methods taking and returning null. If it's optional, make it Optional!  Jackson knows how to deal with Optional.\nOr just use an empty string for pull query ids and mark QueryResponseMetadata  with @JsonInclude(NON_EMPTY), which will mean it doesn't include a queryId field in the response if the id is empty.", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380847269", "createdAt": "2020-02-18T18:13:14Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java", "diffHunk": "@@ -80,10 +79,11 @@ public void handle(final RoutingContext routingContext) {\n     createQueryPublisherAsync(queryStreamArgs.get().sql, queryStreamArgs.get().properties, context)\n         .thenAccept(queryPublisher -> {\n \n-          final PushQueryHolder query = connectionQueryManager\n-              .createApiQuery(queryPublisher, routingContext.request());\n+          final PushQueryHolder query = queryPublisher.isPullQuery() ? null :\n+              connectionQueryManager.createApiQuery(queryPublisher, routingContext.request());\n \n-          final QueryResponseMetadata metadata = new QueryResponseMetadata(query.getId().toString(),\n+          final QueryResponseMetadata metadata = new QueryResponseMetadata(\n+              query == null ? null : query.getId().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0OTQyMw==", "bodyText": "Rather than having null here, why not introduce a QueryHolder interface with the getId and close methods. Then connectionQueryManager.createApiQuery can return a PushQueryHolder for push queries and a PullQueryHolder for pull. The Pull version would have a no-op close method.\nThis uses the power of polymorphism to avoids all the null checking and ifs.", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380849423", "createdAt": "2020-02-18T18:17:34Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java", "diffHunk": "@@ -80,10 +79,11 @@ public void handle(final RoutingContext routingContext) {\n     createQueryPublisherAsync(queryStreamArgs.get().sql, queryStreamArgs.get().properties, context)\n         .thenAccept(queryPublisher -> {\n \n-          final PushQueryHolder query = connectionQueryManager\n-              .createApiQuery(queryPublisher, routingContext.request());\n+          final PushQueryHolder query = queryPublisher.isPullQuery() ? null :\n+              connectionQueryManager.createApiQuery(queryPublisher, routingContext.request());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MDc3Mw==", "bodyText": "Isn't client auth normally off, requested or required rather than simply on-off?", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380850773", "createdAt": "2020-02-18T18:20:18Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java", "diffHunk": "@@ -38,28 +37,51 @@\n           + \" as there are cores you want to use, as each instance is single threaded.\";\n \n   public static final String LISTEN_HOST = propertyName(\"listen.host\");\n-  public static final String DEFAULT_LISTEN_HOST = \"0.0.0.0\";\n+  public static final String DEFAULT_LISTEN_HOST = \"localhost\";\n   public static final String LISTEN_HOST_DOC =\n       \"The hostname to listen on\";\n \n   public static final String LISTEN_PORT = propertyName(\"listen.port\");\n-  public static final int DEFAULT_LISTEN_PORT = 8089;\n+  public static final int DEFAULT_LISTEN_PORT = 8088;\n   public static final String LISTEN_PORT_DOC =\n       \"The port to listen on\";\n \n-  public static final String KEY_PATH = propertyName(\"key.path\");\n-  public static final String KEY_PATH_DOC =\n-      \"Path to key file\";\n+  public static final String TLS_ENABLED = propertyName(\"tls.enabled\");\n+  public static final boolean DEFAULT_TLS_ENABLED = false;\n+  public static final String TLS_ENABLED_DOC =\n+      \"Is TLS enabled?\";\n \n-  public static final String CERT_PATH = propertyName(\"cert.path\");\n-  public static final String CERT_PATH_DOC =\n-      \"Path to cert file\";\n+  public static final String TLS_KEY_STORE_PATH = propertyName(\"tls.keystore.path\");\n+  public static final String TLS_KEY_STORE_PATH_DOC =\n+      \"Path to server key store\";\n+\n+  public static final String TLS_KEY_STORE_PASSWORD = propertyName(\"tls.keystore.password\");\n+  public static final String TLS_KEY_STORE_PASSWORD_DOC =\n+      \"Password for server key store\";\n+\n+  public static final String TLS_TRUST_STORE_PATH = propertyName(\"tls.truststore.path\");\n+  public static final String TLS_TRUST_STORE_PATH_DOC =\n+      \"Path to client trust store\";\n+\n+  public static final String TLS_TRUST_STORE_PASSWORD = propertyName(\"tls.truststore.password\");\n+  public static final String TLS_TRUST_STORE_PASSWORD_DOC =\n+      \"Password for client trust store\";\n+\n+  public static final String TLS_CLIENT_AUTH_REQUIRED = propertyName(\"tls.client.auth.required\");\n+  public static final boolean DEFAULT_TLS_CLIENT_AUTH_REQUIRED = false;\n+  public static final String TLS_CLIENT_AUTH_REQUIRED_DOC =\n+      \"Is client auth required?\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MTE2Nw==", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380851167", "createdAt": "2020-02-18T18:21:01Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -40,16 +39,14 @@\n   private final Endpoints endpoints;\n   private final HttpServerOptions httpServerOptions;\n   private final Server server;\n-  private final WorkerExecutor workerExecutor;\n   private ConnectionQueryManager connectionQueryManager;\n   private HttpServer httpServer;\n \n   public ServerVerticle(final Endpoints endpoints, final HttpServerOptions httpServerOptions,\n-      final Server server, final WorkerExecutor workerExecutor) {\n+      final Server server) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MjEzMQ==", "bodyText": "Maybe:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Map<String, Object> origs = config.originalsWithPrefix(\"\");\n          \n          \n            \n                Map<String, Object> origs = config.originals();", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380852131", "createdAt": "2020-02-18T18:22:55Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/test/java/io/confluent/ksql/api/MaxQueriesTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api;\n+\n+import static io.confluent.ksql.api.server.ErrorCodes.ERROR_MAX_PUSH_QUERIES_EXCEEDED;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import io.confluent.ksql.api.server.ApiServerConfig;\n+import io.confluent.ksql.api.server.PushQueryId;\n+import io.confluent.ksql.api.utils.QueryResponse;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.ext.web.client.HttpResponse;\n+import java.util.Map;\n+import org.junit.Test;\n+\n+public class MaxQueriesTest extends BaseApiTest {\n+\n+  private static final int MAX_QUERIES = 10;\n+\n+  @Test\n+  public void shouldNotCreateMoreThanMaxQueries() throws Exception {\n+\n+    for (int i = 0; i < MAX_QUERIES + 4; i++) {\n+\n+      if (i >= MAX_QUERIES) {\n+        HttpResponse<Buffer> response = sendRequest(\"/query-stream\",\n+            DEFAULT_PUSH_QUERY_REQUEST_BODY.toBuffer());\n+        assertThat(response.statusCode(), is(400));\n+        QueryResponse queryResponse = new QueryResponse(response.bodyAsString());\n+        validateError(ERROR_MAX_PUSH_QUERIES_EXCEEDED, \"Maximum number of push queries exceeded\",\n+            queryResponse.responseObject);\n+      } else {\n+        // When:\n+        QueryResponse queryResponse = executePushQueryAndWaitForRows(\n+            DEFAULT_PUSH_QUERY_REQUEST_BODY);\n+        String queryId = queryResponse.responseObject.getString(\"queryId\");\n+\n+        // Then:\n+        assertThat(queryId, is(notNullValue()));\n+        assertThat(server.getQueryIDs().contains(new PushQueryId(queryId)), is(true));\n+      }\n+    }\n+\n+    assertThat(server.getQueryIDs(), hasSize(MAX_QUERIES));\n+  }\n+\n+  @Override\n+  protected ApiServerConfig createServerConfig() {\n+    ApiServerConfig config = super.createServerConfig();\n+    Map<String, Object> origs = config.originalsWithPrefix(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MzMyOA==", "bodyText": "It's preferable to create a test fixture, rather than use base classes in tests.  You can have any number of test fixtures in a class, but you can only have one base classs!\nTake a look at TestKsqlRestApp or EmbeddedSingleNodeKafkaCluster for examples.", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380853328", "createdAt": "2020-02-18T18:25:15Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/test/java/io/confluent/ksql/api/BaseApiTest.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api;\n+\n+import static io.confluent.ksql.test.util.AssertEventually.assertThatEventually;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.api.impl.VertxCompletableFuture;\n+import io.confluent.ksql.api.server.ApiServerConfig;\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.api.utils.ListRowGenerator;\n+import io.confluent.ksql.api.utils.QueryResponse;\n+import io.confluent.ksql.api.utils.ReceiveStream;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpVersion;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import io.vertx.ext.web.codec.BodyCodec;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class BaseApiTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NTM2Ng==", "bodyText": "Not sure how this change is related to the subject of this PR.  Should this be in this PR?", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380855366", "createdAt": "2020-02-18T18:29:04Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/main/java/io/confluent/ksql/api/impl/Utils.java", "diffHunk": "@@ -49,53 +48,19 @@ private Utils() {\n   }\n \n   public static void checkIsWorker() {\n-    checkThread(true);\n-  }\n-\n-  public static void checkIsNotWorker() {\n-    checkThread(false);\n-  }\n-\n-  public static boolean isEventLoopThread() {\n-    return isWorkerThread(false);\n-  }\n-\n-  public static boolean isWorkerThread() {\n-    return isWorkerThread(true);\n-  }\n-\n-  private static boolean isWorkerThread(final boolean worker) {\n-    final Thread thread = Thread.currentThread();\n-    if (!(thread instanceof VertxThread)) {\n-      throw new IllegalStateException(\"Not a Vert.x thread \" + thread);\n-    }\n-    final VertxThread vertxThread = (VertxThread) thread;\n-    return vertxThread.isWorker() == worker;\n-  }\n-\n-  private static void checkThread(final boolean worker) {\n-    if (!isWorkerThread(worker)) {\n-      throw new IllegalStateException(\"Not a \" + (worker ? \"worker\" : \"event loop\") + \" thread\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NTUxNA==", "bodyText": "Not sure how this change is related to the subject of this PR.  Should this be in this PR?", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380855514", "createdAt": "2020-02-18T18:29:25Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java", "diffHunk": "@@ -38,28 +37,51 @@\n           + \" as there are cores you want to use, as each instance is single threaded.\";\n \n   public static final String LISTEN_HOST = propertyName(\"listen.host\");\n-  public static final String DEFAULT_LISTEN_HOST = \"0.0.0.0\";\n+  public static final String DEFAULT_LISTEN_HOST = \"localhost\";\n   public static final String LISTEN_HOST_DOC =\n       \"The hostname to listen on\";\n \n   public static final String LISTEN_PORT = propertyName(\"listen.port\");\n-  public static final int DEFAULT_LISTEN_PORT = 8089;\n+  public static final int DEFAULT_LISTEN_PORT = 8088;\n   public static final String LISTEN_PORT_DOC =\n       \"The port to listen on\";\n \n-  public static final String KEY_PATH = propertyName(\"key.path\");\n-  public static final String KEY_PATH_DOC =\n-      \"Path to key file\";\n+  public static final String TLS_ENABLED = propertyName(\"tls.enabled\");\n+  public static final boolean DEFAULT_TLS_ENABLED = false;\n+  public static final String TLS_ENABLED_DOC =\n+      \"Is TLS enabled?\";\n \n-  public static final String CERT_PATH = propertyName(\"cert.path\");\n-  public static final String CERT_PATH_DOC =\n-      \"Path to cert file\";\n+  public static final String TLS_KEY_STORE_PATH = propertyName(\"tls.keystore.path\");\n+  public static final String TLS_KEY_STORE_PATH_DOC =\n+      \"Path to server key store\";\n+\n+  public static final String TLS_KEY_STORE_PASSWORD = propertyName(\"tls.keystore.password\");\n+  public static final String TLS_KEY_STORE_PASSWORD_DOC =\n+      \"Password for server key store\";\n+\n+  public static final String TLS_TRUST_STORE_PATH = propertyName(\"tls.truststore.path\");\n+  public static final String TLS_TRUST_STORE_PATH_DOC =\n+      \"Path to client trust store\";\n+\n+  public static final String TLS_TRUST_STORE_PASSWORD = propertyName(\"tls.truststore.password\");\n+  public static final String TLS_TRUST_STORE_PASSWORD_DOC =\n+      \"Password for client trust store\";\n+\n+  public static final String TLS_CLIENT_AUTH_REQUIRED = propertyName(\"tls.client.auth.required\");\n+  public static final boolean DEFAULT_TLS_CLIENT_AUTH_REQUIRED = false;\n+  public static final String TLS_CLIENT_AUTH_REQUIRED_DOC =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNjA0ODgy", "url": "https://github.com/confluentinc/ksql/pull/4581#pullrequestreview-360604882", "createdAt": "2020-02-18T19:18:46Z", "commit": {"oid": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOToxODo0NlrOFrPJSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOToxODo0NlrOFrPJSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4MTIyNA==", "bodyText": "We have a similar config for limiting the number of persistent push queries: \n  \n    \n      ksql/ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n    \n    \n         Line 118\n      in\n      f21823f\n    \n    \n    \n    \n\n        \n          \n           \"ksql.query.persistent.active.limit\"; \n        \n    \n  \n\n\nIf this limit is for transient push queries, we should look to use consistent naming. If its for all push queries, we should try to consolidate the configs.", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r380881224", "createdAt": "2020-02-18T19:18:46Z", "author": {"login": "rodesai"}, "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java", "diffHunk": "@@ -38,28 +37,51 @@\n           + \" as there are cores you want to use, as each instance is single threaded.\";\n \n   public static final String LISTEN_HOST = propertyName(\"listen.host\");\n-  public static final String DEFAULT_LISTEN_HOST = \"0.0.0.0\";\n+  public static final String DEFAULT_LISTEN_HOST = \"localhost\";\n   public static final String LISTEN_HOST_DOC =\n       \"The hostname to listen on\";\n \n   public static final String LISTEN_PORT = propertyName(\"listen.port\");\n-  public static final int DEFAULT_LISTEN_PORT = 8089;\n+  public static final int DEFAULT_LISTEN_PORT = 8088;\n   public static final String LISTEN_PORT_DOC =\n       \"The port to listen on\";\n \n-  public static final String KEY_PATH = propertyName(\"key.path\");\n-  public static final String KEY_PATH_DOC =\n-      \"Path to key file\";\n+  public static final String TLS_ENABLED = propertyName(\"tls.enabled\");\n+  public static final boolean DEFAULT_TLS_ENABLED = false;\n+  public static final String TLS_ENABLED_DOC =\n+      \"Is TLS enabled?\";\n \n-  public static final String CERT_PATH = propertyName(\"cert.path\");\n-  public static final String CERT_PATH_DOC =\n-      \"Path to cert file\";\n+  public static final String TLS_KEY_STORE_PATH = propertyName(\"tls.keystore.path\");\n+  public static final String TLS_KEY_STORE_PATH_DOC =\n+      \"Path to server key store\";\n+\n+  public static final String TLS_KEY_STORE_PASSWORD = propertyName(\"tls.keystore.password\");\n+  public static final String TLS_KEY_STORE_PASSWORD_DOC =\n+      \"Password for server key store\";\n+\n+  public static final String TLS_TRUST_STORE_PATH = propertyName(\"tls.truststore.path\");\n+  public static final String TLS_TRUST_STORE_PATH_DOC =\n+      \"Path to client trust store\";\n+\n+  public static final String TLS_TRUST_STORE_PASSWORD = propertyName(\"tls.truststore.password\");\n+  public static final String TLS_TRUST_STORE_PASSWORD_DOC =\n+      \"Password for client trust store\";\n+\n+  public static final String TLS_CLIENT_AUTH_REQUIRED = propertyName(\"tls.client.auth.required\");\n+  public static final boolean DEFAULT_TLS_CLIENT_AUTH_REQUIRED = false;\n+  public static final String TLS_CLIENT_AUTH_REQUIRED_DOC =\n+      \"Is client auth required?\";\n \n   public static final String WORKER_POOL_SIZE = propertyName(\"worker.pool.size\");\n   public static final String WORKER_POOL_DOC =\n       \"Max number of worker threads for executing blocking code\";\n   public static final int DEFAULT_WORKER_POOL_SIZE = 100;\n \n+  public static final String MAX_PUSH_QUERIES = propertyName(\"max.push.queries\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161", "committedDate": "2020-02-18T10:16:50Z", "message": "tweaks"}, "afterCommit": {"oid": "6064c1b1a6d56091e09a0b495d5beca73a366b08", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/6064c1b1a6d56091e09a0b495d5beca73a366b08", "committedDate": "2020-02-18T20:39:42Z", "message": "query limits"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db521aa6c65c5ed2b5065d86c1d1b27114ab6144", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/db521aa6c65c5ed2b5065d86c1d1b27114ab6144", "committedDate": "2020-02-18T22:09:17Z", "message": "Added some config validators"}, "afterCommit": {"oid": "66f15357dc3365803c1ad3d0e44a13bdfe7bdf8d", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/66f15357dc3365803c1ad3d0e44a13bdfe7bdf8d", "committedDate": "2020-02-18T22:40:58Z", "message": "Added some config validators"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjg1MTE4", "url": "https://github.com/confluentinc/ksql/pull/4581#pullrequestreview-361285118", "createdAt": "2020-02-19T17:22:50Z", "commit": {"oid": "66f15357dc3365803c1ad3d0e44a13bdfe7bdf8d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzoyMjo1MFrOFrwWkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzoyNzozMFrOFrwhBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyNTI5OQ==", "bodyText": "Can .you move this to ConfigValidators please?\nEven better,  change the existing zeroOrPositive to be more flexible, e.g. to become equalToOrGreaterThan(0),  equalToOrGreaterThan(1), etc.", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r381425299", "createdAt": "2020-02-19T17:22:50Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java", "diffHunk": "@@ -140,11 +151,35 @@ private static String propertyName(final String name) {\n           WORKER_POOL_SIZE,\n           Type.INT,\n           DEFAULT_WORKER_POOL_SIZE,\n+          zeroOrPositive(),\n           Importance.MEDIUM,\n-          WORKER_POOL_DOC);\n+          WORKER_POOL_DOC)\n+      .define(\n+          MAX_PUSH_QUERIES,\n+          Type.INT,\n+          DEFAULT_MAX_PUSH_QUERIES,\n+          zeroOrPositive(),\n+          Importance.MEDIUM,\n+          MAX_PUSH_QUERIES_DOC);\n \n   public ApiServerConfig(final Map<?, ?> map) {\n     super(CONFIG_DEF, map);\n   }\n \n+  private static Validator oneOrMore() {\n+    return (name, val) -> {\n+      if (val instanceof Long) {\n+        if (((Long) val) < 1) {\n+          throw new ConfigException(name, val, \"Not >= 1\");\n+        }\n+      } else if (val instanceof Integer) {\n+        if (((Integer) val) < 1) {\n+          throw new ConfigException(name, val, \"Not >= 1\");\n+        }\n+      } else {\n+        throw new IllegalArgumentException(\"validator should only be used with int, long\");\n+      }\n+    };\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66f15357dc3365803c1ad3d0e44a13bdfe7bdf8d"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQyNzk3Mg==", "bodyText": "There aren't any tests that I can see in BaseApiTest, so this doesn't seem to be about running a common set of tests with multiple configs.\nBaseApiTest looks to be more a setUp method, a overrideaable set of config and some helper methods.  The pattern we use for such is a unit TestResource as this allows composition of different test resources, where as a base class only allows one.\nPlease take a look at TestKsqlRestApp as a good example of how to knock up a simple junit TestResouce.  It really is a better pattern than a base class.", "url": "https://github.com/confluentinc/ksql/pull/4581#discussion_r381427972", "createdAt": "2020-02-19T17:27:30Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/test/java/io/confluent/ksql/api/BaseApiTest.java", "diffHunk": "@@ -0,0 +1,196 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api;\n+\n+import static io.confluent.ksql.test.util.AssertEventually.assertThatEventually;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.api.impl.VertxCompletableFuture;\n+import io.confluent.ksql.api.server.ApiServerConfig;\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.api.utils.ListRowGenerator;\n+import io.confluent.ksql.api.utils.QueryResponse;\n+import io.confluent.ksql.api.utils.ReceiveStream;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpVersion;\n+import io.vertx.core.json.JsonArray;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import io.vertx.ext.web.codec.BodyCodec;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class BaseApiTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MzMyOA=="}, "originalCommit": {"oid": "8f8d242b59dea5592d1d6e6a40e9e2b7f0b41161"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjg5NDU2", "url": "https://github.com/confluentinc/ksql/pull/4581#pullrequestreview-361289456", "createdAt": "2020-02-19T17:28:43Z", "commit": {"oid": "66f15357dc3365803c1ad3d0e44a13bdfe7bdf8d"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjkxMjI2", "url": "https://github.com/confluentinc/ksql/pull/4581#pullrequestreview-361291226", "createdAt": "2020-02-19T17:31:08Z", "commit": {"oid": "66f15357dc3365803c1ad3d0e44a13bdfe7bdf8d"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMzg3MTQ0", "url": "https://github.com/confluentinc/ksql/pull/4581#pullrequestreview-361387144", "createdAt": "2020-02-19T19:47:26Z", "commit": {"oid": "66f15357dc3365803c1ad3d0e44a13bdfe7bdf8d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "635b4b41661710d03b40d44412a50910ff8f2cfe", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/635b4b41661710d03b40d44412a50910ff8f2cfe", "committedDate": "2020-02-19T20:44:31Z", "message": "query limits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "581a7d5f8edfd98adbdfaac01df76e6a37e6cf88", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/581a7d5f8edfd98adbdfaac01df76e6a37e6cf88", "committedDate": "2020-02-19T20:44:31Z", "message": "review tweak"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63fd5bca9e8c42f09d8326c7163ac2d64d3a21e4", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/63fd5bca9e8c42f09d8326c7163ac2d64d3a21e4", "committedDate": "2020-02-19T20:44:31Z", "message": "tweak"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "143debbb855230596db0adb3ee5c9228643e28c2", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/143debbb855230596db0adb3ee5c9228643e28c2", "committedDate": "2020-02-19T20:44:31Z", "message": "Added some config validators"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0283690b3b20d929266c4671f827d4c3bcbe566b", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/0283690b3b20d929266c4671f827d4c3bcbe566b", "committedDate": "2020-02-19T20:44:32Z", "message": "review changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66f15357dc3365803c1ad3d0e44a13bdfe7bdf8d", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/66f15357dc3365803c1ad3d0e44a13bdfe7bdf8d", "committedDate": "2020-02-18T22:40:58Z", "message": "Added some config validators"}, "afterCommit": {"oid": "0283690b3b20d929266c4671f827d4c3bcbe566b", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/0283690b3b20d929266c4671f827d4c3bcbe566b", "committedDate": "2020-02-19T20:44:32Z", "message": "review changes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 43, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}