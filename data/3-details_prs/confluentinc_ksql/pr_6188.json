{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1NDEwNTE0", "number": 6188, "title": "fix: register correct unwrapped schema", "bodyText": "Description\nThis commit fixes several issues and refactors a lot of the serde code around wrapping and unwrapping single values. This needs to be done before we can support key formats that use wrapping / unwrapping.\nThe main issues being fixed are:\n\nallow each format to define if it supported wrapping and/or unwrapping. (Not possible with current design)\npass the correct wrapping / unwrapping flags are passed to key vs value formats when creating serde. (bug in code passes same SerdeOptions to key and value).\nregister the correct wrapped / unwrapped schema with the SR. (bug in existing code meant registered format is always wrapped).\n\nAt the same time, the way wrapping / unwrapping was handled in the code wasn't great. Formats like JSON needed to be able to handle both wrapped and unwrapped schemas and values, depending on whether the user explicitly set wrapping or unwrapping, vs the default behaviour of the format. This commit refactors the code such that the format will always be passed the a consistent schema and the set of serde features the format should use when creating the serde. This simplifies things and paves the way to user-define-serde.\nReviewing notes:\nThere's some refactoring of how physical and persistence schemas are created and used:\n\nSerdeOptions can now split the global options into key and value specific EnabledSerdeFeatures where,\nEnabledSerdeFeatures is a set of SerdeFeatures that have been validated to ensure there are no clashing features (currently checking wrap and unwrap are not both set).\nPhysicalSchema is now really just a combination LogicalSchema and SerdeOptions.\nPersistenceSchema is still using the Connect schema internally for now, but that schema will always be a STRUCT containing the key/value columns. The instance also tracks the key/value serde features.\n\nHow serde are created has been refactored:\n\nThe KsqlSerdeFactory is no more. Instead,\neverything is hidden behind the Format interface, which now has a createSerde method, rather than one that returns a KSqlSerdeFactory.  This is much cleaner and simple.\nThe old implementations of KsqlSerdeFactory  are now just implementation details of specific formats, and are free to be changed as needed.\nFormat deals in terms of SerdeFeatures, not SerdeOptions.\nGenericRowSerde and GenericKeySerde are no longer responsible for handling wrapping and unwrapping, they just pass down and expect Struct.   (Common code has moved to GenericSerdeFactory).\nThis means Format.createSerde can return correctly typed Serde<Struct>, rather than some unknown maybe Struct maybe some primitive.\nEach format is responsible for dealing with the features it supports.\nKafkaFormat and DelimitedFormat can now support unwrapping and don't need to do anything to support it.\nOnly Connect formats support both wrapping and unwrapping, so the ConnectFormat handles this by extracting the single field's schema and wrapping the serde created by the sub-class with serde that handle the unwrapping.\n\nTesting done\nusual\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-09-11T19:58:49Z", "url": "https://github.com/confluentinc/ksql/pull/6188", "merged": true, "mergeCommit": {"oid": "cb25f9c53f32997190f58ddfa6585f565b05ca67"}, "closed": true, "closedAt": "2020-09-15T00:17:58Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdH69wNgH2gAyNDg1NDEwNTE0OmE3ZjIzZmY1NWZkM2ViYTk1NDNiZDQzN2ZmZDU5NGM3ZDA0YjhhYjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdI7LfpgH2gAyNDg1NDEwNTE0OjdjNzY0YzdhMjllYTA5NjA4MGQyMzc2ZDRjM2UyZDg0NjM1MzJkMzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a7f23ff55fd3eba9543bd437ffd594c7d04b8ab5", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/a7f23ff55fd3eba9543bd437ffd594c7d04b8ab5", "committedDate": "2020-09-11T19:56:39Z", "message": "fix: register correct unwrapped schema\n\nThis commit fixes several issues and refactors a lot of the serde code around wrapping and unwrapping single values.\n\nThe main issues being fixed are:\n  1. allow each format to define if it supported wrapping and/or unwrapping. (Not possible with current design)\n  2. pass the correct wrapping / unwrapping flags are passed to key vs value formats when creating serde. (bug in code passes same SerdeOptions to key and value).\n  3. register the correct wrapped / unwrapped schema with the SR. (bug in existing code meant registered format is always wrapped).\n\nAt the same time, the way wrapping / unwrapping was handled in the code wasn't great. Formats like `JSON` needed to be able to handle both wrapped and unwrapped schemas and values, depending on whether the user _explicitly_ set wrapping or unwrapping, vs the default behaviour of the format. This commit refactors the code such that the format will always be passed the a consistent schema and the set of serde features the format should use when creating the serde. This simplifies things and paves the way to user-define-serde."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cf7cf11e94cb14801bfc6ba02d040eb5835ded6", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/8cf7cf11e94cb14801bfc6ba02d040eb5835ded6", "committedDate": "2020-09-11T22:10:00Z", "message": "test: historic plans"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3OTgxODk5", "url": "https://github.com/confluentinc/ksql/pull/6188#pullrequestreview-487981899", "createdAt": "2020-09-14T17:13:37Z", "commit": {"oid": "a7f23ff55fd3eba9543bd437ffd594c7d04b8ab5"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNzoxMzozN1rOHRe6yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODowNzozOFrOHRg0JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA5NDQxMQ==", "bodyText": "nit: did you mean Java type?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Convert the supplied Connect {@code schema} to its corresponding SQL type.\n          \n          \n            \n                 * Convert the supplied Connect {@code schema} to its corresponding Java type.\n          \n      \n    \n    \n  \n\n(same below in @return)", "url": "https://github.com/confluentinc/ksql/pull/6188#discussion_r488094411", "createdAt": "2020-09-14T17:13:37Z", "author": {"login": "agavra"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/schema/ksql/SchemaConverters.java", "diffHunk": "@@ -123,6 +123,16 @@ private SchemaConverters() {\n     Schema toConnectSchema(SqlType sqlType, String name, String doc);\n   }\n \n+  public interface ConnectToJavaTypeConverter {\n+    /**\n+     * Convert the supplied Connect {@code schema} to its corresponding SQL type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7f23ff55fd3eba9543bd437ffd594c7d04b8ab5"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEwMTUwNw==", "bodyText": "not really part of your change, but I'm wondering why we have both SerdeFeature and SerdeOption? what's the difference between them? can we javadoc it for the future?", "url": "https://github.com/confluentinc/ksql/pull/6188#discussion_r488101507", "createdAt": "2020-09-14T17:24:44Z", "author": {"login": "agavra"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/serde/EnabledSerdeFeatures.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.serde;\n+\n+import static io.confluent.ksql.serde.SerdeFeature.UNWRAP_SINGLES;\n+import static io.confluent.ksql.serde.SerdeFeature.WRAP_SINGLES;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.errorprone.annotations.Immutable;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+\n+/**\n+ * Validated set of enabled features\n+ *\n+ * <p>Known to not have conflicting features enabled\n+ */\n+@Immutable\n+public final class EnabledSerdeFeatures {\n+\n+  private final ImmutableSet<SerdeFeature> features;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cf7cf11e94cb14801bfc6ba02d040eb5835ded6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEwMjY3MA==", "bodyText": "why not just EnabledSerdeFeatures.of(supported)?", "url": "https://github.com/confluentinc/ksql/pull/6188#discussion_r488102670", "createdAt": "2020-09-14T17:26:43Z", "author": {"login": "agavra"}, "path": "ksqldb-examples/src/main/java/io/confluent/ksql/datagen/DataGenProducer.java", "diffHunk": "@@ -160,18 +162,16 @@ private static void produceOne(\n   private Serializer<Struct> getKeySerializer(\n       final ConnectSchema keySchema\n   ) {\n-    final PersistenceSchema schema = PersistenceSchema.from(\n-        keySchema,\n-        keySerializerFactory.format().supportedFeatures().contains(SerdeFeature.UNWRAP_SINGLES)\n-    );\n-\n+    final Set<SerdeFeature> supported = keySerializerFactory.format().supportedFeatures();\n+    final EnabledSerdeFeatures features = supported.contains(SerdeFeature.UNWRAP_SINGLES)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cf7cf11e94cb14801bfc6ba02d040eb5835ded6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEwNTM5OQ==", "bodyText": "Any reason not to just always add these? it's unlikely that they exist for STRUCT, ARRAY and MAP but technically not impossible (I think)", "url": "https://github.com/confluentinc/ksql/pull/6188#discussion_r488105399", "createdAt": "2020-09-14T17:31:35Z", "author": {"login": "agavra"}, "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/avro/AvroSchemas.java", "diffHunk": "@@ -86,7 +86,12 @@ private static Schema buildAvroCompatibleSchema(\n           return schema;\n         }\n \n-        schemaBuilder = new SchemaBuilder(schema.type());\n+        schemaBuilder = new SchemaBuilder(schema.type())\n+            .name(schema.name());\n+\n+        if (schema.parameters() != null) {\n+          schemaBuilder.parameters(schema.parameters());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cf7cf11e94cb14801bfc6ba02d040eb5835ded6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyMTQ5NQ==", "bodyText": "it seems a little weird to encapsulate this above (applySinglesUnwrapping) but then check for it explicitly here", "url": "https://github.com/confluentinc/ksql/pull/6188#discussion_r488121495", "createdAt": "2020-09-14T18:00:18Z", "author": {"login": "agavra"}, "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/connect/ConnectFormat.java", "diffHunk": "@@ -65,52 +74,100 @@ public boolean supportsSchemaInference() {\n \n   @Override\n   public List<SimpleColumn> toColumns(final ParsedSchema schema) {\n-    final Schema connectSchema = toKsqlTransformer.apply(toConnectSchema(schema));\n+    Schema connectSchema = toConnectSchema(schema);\n \n-    return connectSchema.fields().stream()\n+    if (connectSchema.type() != Type.STRUCT) {\n+      if (!supportsFeature(SerdeFeature.UNWRAP_SINGLES)) {\n+        throw new KsqlException(\"Schema returned from schema registry is anonymous type, \"\n+            + \"but format \" + name() + \" does not support anonymous types. \"\n+            + \"schema: \" + schema);\n+      }\n+\n+      connectSchema = SerdeUtils.wrapSingle(connectSchema);\n+    }\n+\n+    final Schema rowSchema = toKsqlTransformer.apply(connectSchema);\n+\n+    return rowSchema.fields().stream()\n         .map(ConnectFormat::toColumn)\n         .collect(Collectors.toList());\n   }\n \n   public ParsedSchema toParsedSchema(\n       final List<? extends SimpleColumn> columns,\n-      final SerdeOptions serdeOptions,\n+      final EnabledSerdeFeatures serdeFeatures,\n       final FormatInfo formatInfo\n   ) {\n+    SerdeUtils.throwOnUnsupportedFeatures(serdeFeatures, supportedFeatures());\n+\n     final SchemaBuilder schemaBuilder = SchemaBuilder.struct();\n     columns.forEach(col -> schemaBuilder.field(\n         col.name().text(),\n         SchemaConverters.sqlToConnectConverter().toConnectSchema(col.type()))\n     );\n \n-    final PersistenceSchema persistenceSchema =\n-        buildValuePhysical(schemaBuilder.build(), serdeOptions);\n+    final Schema schema = SerdeUtils.applySinglesUnwrapping(schemaBuilder.build(), serdeFeatures);\n \n-    return fromConnectSchema(persistenceSchema.serializedSchema(), formatInfo);\n+    return fromConnectSchema(schema, formatInfo);\n   }\n \n-  protected abstract Schema toConnectSchema(ParsedSchema schema);\n+  @Override\n+  public Serde<Struct> getSerde(\n+      final PersistenceSchema schema,\n+      final Map<String, String> formatProps,\n+      final KsqlConfig config,\n+      final Supplier<SchemaRegistryClient> srFactory\n+  ) {\n+    SerdeUtils.throwOnUnsupportedFeatures(schema.features(), supportedFeatures());\n \n-  protected abstract ParsedSchema fromConnectSchema(Schema schema, FormatInfo formatInfo);\n+    final ConnectSchema outerSchema = schema.connectSchema();\n+    final ConnectSchema innerSchema = SerdeUtils\n+        .applySinglesUnwrapping(outerSchema, schema.features());\n \n-  private static PersistenceSchema buildValuePhysical(\n-      final Schema valueConnectSchema,\n-      final SerdeOptions serdeOptions\n-  ) {\n-    final boolean singleField = valueConnectSchema.fields().size() == 1;\n+    final Class<?> targetType = SchemaConverters.connectToJavaTypeConverter()\n+        .toJavaType(innerSchema);\n \n-    final boolean unwrapSingle = serdeOptions.valueWrapping()\n-        .map(option -> option == SerdeOption.UNWRAP_SINGLE_VALUES)\n-        .orElse(false);\n+    if (schema.features().enabled(SerdeFeature.UNWRAP_SINGLES)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cf7cf11e94cb14801bfc6ba02d040eb5835ded6"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyNTQ3Ng==", "bodyText": "does the output intentionally not keep the serde options from the input? I would expect it to be not wrapped here as well", "url": "https://github.com/confluentinc/ksql/pull/6188#discussion_r488125476", "createdAt": "2020-09-14T18:07:38Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/elements.json", "diffHunk": "@@ -39,6 +39,19 @@\n       \"inputs\": [{\"topic\": \"input\", \"value\": {\"c1\": 4}}],\n       \"outputs\": [{\"topic\": \"OUTPUT\", \"value\": {\"C1\": 4}}]\n     },\n+    {\n+      \"name\": \"validate unwrapped value without elements OK - AVRO\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT WITH (kafka_topic='input', value_format='AvRo', wrap_single_value=false);\",\n+        \"CREATE STREAM OUTPUT as SELECT * FROM input;\"\n+      ],\n+      \"topics\": [\n+        {\"name\": \"input\", \"format\": \"AVRO\", \"schema\": \"int\"},\n+        {\"name\": \"OUTPUT\", \"format\": \"AVRO\", \"schema\": {\"name\": \"blah\", \"type\": \"record\", \"fields\": [{\"name\": \"ROWVAL\", \"type\": \"int\"}]}}\n+      ],\n+      \"inputs\": [{\"topic\": \"input\", \"value\": 4}],\n+      \"outputs\": [{\"topic\": \"OUTPUT\", \"value\": {\"ROWVAL\": 4}}]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8cf7cf11e94cb14801bfc6ba02d040eb5835ded6"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c764c7a29ea096080d2376d4c3e2d8463532d39", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/7c764c7a29ea096080d2376d4c3e2d8463532d39", "committedDate": "2020-09-14T22:45:35Z", "message": "chore: almog's requested changes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4649, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}