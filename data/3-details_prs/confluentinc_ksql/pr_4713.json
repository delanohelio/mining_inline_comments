{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MzcxNjk5", "number": 4713, "title": "feat: Integrate new API with existing security framework", "bodyText": "Description\nIn the old REST server, Jetty would inject a KsqlSecurityContext into endpoint methods. With the new API this no longer occurs, so endpoints which call existing endpoint code need some way of getting one of these.\nNow, all endpoint methods are passed an ApiSecurityContext instance. This class wraps an optional auth tokens and the user principal. Currently a dummy instance is created but once the basic auth integration work has been merged we can create instances based on the authenticated user and optional auth token.\nThe endpoints implementation converts the ApiSecurityContext into a KsqlSecurityContext using an instance of KsqlSecurityContextProvider - one of these is created by the rest app on startup and passed into the constructor of the endpoints.\nIn this PR we also integrate with KsqlSecurityExtension authorization - if present we check authorization on each request with this plugin.\nThis PR also cleans up some of the proxy code moving it into ProxyHandler.\nTesting done\nAdded/amended new test cases for the new functionality.\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-03-05T16:19:33Z", "url": "https://github.com/confluentinc/ksql/pull/4713", "merged": true, "mergeCommit": {"oid": "0f7de31a84d18d22a578df9078522b9a2baaad5c"}, "closed": true, "closedAt": "2020-03-07T11:37:43Z", "author": {"login": "purplefox"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKuHTUABqjMxMDE5NDk2NDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcLSdcXAH2gAyMzg0MzcxNjk5OjVjNWRkZTU0ZGNiYTA2ZGQxM2FkYWRmYjI0MzI3NzdiMzEwMGFiZDI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d8f5204da5f9f919a31e96fcc0551e07e54ad936", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/d8f5204da5f9f919a31e96fcc0551e07e54ad936", "committedDate": "2020-03-05T16:25:46Z", "message": "integrate security"}, "afterCommit": {"oid": "43fcb0b5c8c64a56d7233c1ac98d4682c2b9d36c", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/43fcb0b5c8c64a56d7233c1ac98d4682c2b9d36c", "committedDate": "2020-03-05T16:28:43Z", "message": "integrate security"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5918afe08a95504f057f028d50f97e5c453d6d4f", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/5918afe08a95504f057f028d50f97e5c453d6d4f", "committedDate": "2020-03-06T06:29:04Z", "message": "integrate security"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2360124cfa7f68d8b008f32a57d1ebb8dd689696", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/2360124cfa7f68d8b008f32a57d1ebb8dd689696", "committedDate": "2020-03-06T06:29:04Z", "message": "integrate security"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "981f3181da09eba3d75e08684076b5d073aa3baa", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/981f3181da09eba3d75e08684076b5d073aa3baa", "committedDate": "2020-03-06T11:13:25Z", "message": "integrate security"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "43fcb0b5c8c64a56d7233c1ac98d4682c2b9d36c", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/43fcb0b5c8c64a56d7233c1ac98d4682c2b9d36c", "committedDate": "2020-03-05T16:28:43Z", "message": "integrate security"}, "afterCommit": {"oid": "981f3181da09eba3d75e08684076b5d073aa3baa", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/981f3181da09eba3d75e08684076b5d073aa3baa", "committedDate": "2020-03-06T11:13:25Z", "message": "integrate security"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e574c5832423bf1759174f4dff29bd22c0785511", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/e574c5832423bf1759174f4dff29bd22c0785511", "committedDate": "2020-03-06T12:52:55Z", "message": "auth tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzAzMjY4", "url": "https://github.com/confluentinc/ksql/pull/4713#pullrequestreview-370703268", "createdAt": "2020-03-07T00:46:25Z", "commit": {"oid": "e574c5832423bf1759174f4dff29bd22c0785511"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDo0NjoyNVrOFzLV7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wN1QwMDo1MTowOVrOFzLYuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNzUzMg==", "bodyText": "Why does the filter complete successfully if the user is null? That seems like reason to fail since it means no user was authenticated.", "url": "https://github.com/confluentinc/ksql/pull/4713#discussion_r389207532", "createdAt": "2020-03-07T00:46:25Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/auth/KsqlAuthorizationFilter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;\n+\n+import io.confluent.ksql.security.KsqlAuthorizationProvider;\n+import io.vertx.core.Handler;\n+import io.vertx.core.WorkerExecutor;\n+import io.vertx.ext.auth.User;\n+import io.vertx.ext.web.RoutingContext;\n+import java.security.Principal;\n+\n+public class KsqlAuthorizationFilter implements Handler<RoutingContext> {\n+\n+  private final WorkerExecutor workerExecutor;\n+  private final KsqlAuthorizationProvider ksqlAuthorizationProvider;\n+\n+  public KsqlAuthorizationFilter(final WorkerExecutor workerExecutor,\n+      final KsqlAuthorizationProvider ksqlAuthorizationProvider) {\n+    this.workerExecutor = workerExecutor;\n+    this.ksqlAuthorizationProvider = ksqlAuthorizationProvider;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+\n+    workerExecutor.executeBlocking(\n+        promise -> {\n+          final User user = routingContext.user();\n+          if (user == null) {\n+            promise.complete();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e574c5832423bf1759174f4dff29bd22c0785511"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNzU3MA==", "bodyText": "Should this return 403 instead?", "url": "https://github.com/confluentinc/ksql/pull/4713#discussion_r389207570", "createdAt": "2020-03-07T00:46:38Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/auth/KsqlAuthorizationFilter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;\n+\n+import io.confluent.ksql.security.KsqlAuthorizationProvider;\n+import io.vertx.core.Handler;\n+import io.vertx.core.WorkerExecutor;\n+import io.vertx.ext.auth.User;\n+import io.vertx.ext.web.RoutingContext;\n+import java.security.Principal;\n+\n+public class KsqlAuthorizationFilter implements Handler<RoutingContext> {\n+\n+  private final WorkerExecutor workerExecutor;\n+  private final KsqlAuthorizationProvider ksqlAuthorizationProvider;\n+\n+  public KsqlAuthorizationFilter(final WorkerExecutor workerExecutor,\n+      final KsqlAuthorizationProvider ksqlAuthorizationProvider) {\n+    this.workerExecutor = workerExecutor;\n+    this.ksqlAuthorizationProvider = ksqlAuthorizationProvider;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+\n+    workerExecutor.executeBlocking(\n+        promise -> {\n+          final User user = routingContext.user();\n+          if (user == null) {\n+            promise.complete();\n+            return;\n+          }\n+          final Principal principal = new ApiPrincipal(user.principal().getString(\"username\"));\n+          try {\n+            ksqlAuthorizationProvider\n+                .checkEndpointAccess(principal, routingContext.request().method().toString(),\n+                    routingContext.normalisedPath());\n+          } catch (Exception e) {\n+            promise.fail(e);\n+            return;\n+          }\n+          promise.complete();\n+        },\n+        ar -> {\n+          if (ar.succeeded()) {\n+            routingContext.next();\n+          } else {\n+            routingContext.fail(401, ar.cause());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e574c5832423bf1759174f4dff29bd22c0785511"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNzk3OA==", "bodyText": "Love the refactor of proxy client and target handling from this file into ProxyHandler -- much cleaner! Thanks :)", "url": "https://github.com/confluentinc/ksql/pull/4713#discussion_r389207978", "createdAt": "2020-03-07T00:49:16Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -49,26 +46,25 @@\n   private final Endpoints endpoints;\n   private final HttpServerOptions httpServerOptions;\n   private final Server server;\n-  private final boolean proxyEnabled;\n+  private final ProxyHandler proxyHandler;\n   private ConnectionQueryManager connectionQueryManager;\n   private volatile HttpServer httpServer;\n \n-  private HttpClient proxyClient;\n-  private SocketAddress proxyTarget;\n-\n   public ServerVerticle(final Endpoints endpoints, final HttpServerOptions httpServerOptions,\n       final Server server, final boolean proxyEnabled) {\n     this.endpoints = Objects.requireNonNull(endpoints);\n     this.httpServerOptions = Objects.requireNonNull(httpServerOptions);\n     this.server = Objects.requireNonNull(server);\n-    this.proxyEnabled = proxyEnabled;\n+    if (proxyEnabled) {\n+      this.proxyHandler = new ProxyHandler(server);\n+    } else {\n+      this.proxyHandler = null;\n+    }\n   }\n \n   @Override\n   public void start(final Promise<Void> startPromise) {\n-    this.proxyClient = proxyEnabled ? vertx", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e574c5832423bf1759174f4dff29bd22c0785511"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwNzk5NQ==", "bodyText": "Interesting that these three tests are essentially duplicates of super.shouldExecutePullQuery(); (and similar) but I can't think of an easy way to get the last assertion in there without the duplication.\nHappy to leave this as is, just thinking -out loud- on a screen.", "url": "https://github.com/confluentinc/ksql/pull/4713#discussion_r389207995", "createdAt": "2020-03-07T00:49:22Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java", "diffHunk": "@@ -137,6 +175,60 @@ public void shouldFailInsertRequestWithIncorrectRole() throws Exception {\n     shouldFailInsertRequest(USER_WITH_INCORRECT_ROLE, USER_WITH_INCORRECT_ROLE_PWD);\n   }\n \n+  @Test\n+  public void shouldExecutePullQueryWithApiSecurityContext() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e574c5832423bf1759174f4dff29bd22c0785511"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwODA1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private void shouldNotAllowAccessifPermissionCheckThrowsException(\n          \n          \n            \n              private void shouldNotAllowAccessIfPermissionCheckThrowsException(\n          \n      \n    \n    \n  \n\nsuper nit: typo", "url": "https://github.com/confluentinc/ksql/pull/4713#discussion_r389208050", "createdAt": "2020-03-07T00:49:47Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java", "diffHunk": "@@ -215,4 +307,50 @@ private void shouldFailInsertRequest(final String username, final String passwor\n     request.sendBuffer(requestBody, requestFuture);\n     return requestFuture.get();\n   }\n+\n+  private void assertAuthorisedSecurityContext(String username) {\n+    assertThat(testEndpoints.getLastApiSecurityContext(), is(notNullValue()));\n+    assertThat(testEndpoints.getLastApiSecurityContext().getPrincipal().isPresent(), is(true));\n+    assertThat(testEndpoints.getLastApiSecurityContext().getPrincipal().get().getName(),\n+        is(username));\n+  }\n+\n+  private void shouldAllowAccessWithPermissionCheck(final String expectedUser,\n+      final String expectedMethod, final String expectedPath,\n+      final ExceptionThrowingRunnable action) throws Exception {\n+    stopServer();\n+    stopClient();\n+    AtomicReference<Principal> principalAtomicReference = new AtomicReference<>();\n+    AtomicReference<String> methodAtomicReference = new AtomicReference<>();\n+    AtomicReference<String> pathAtomicReference = new AtomicReference<>();\n+    this.authorizationProvider = (user, method, path) -> {\n+      principalAtomicReference.set(user);\n+      methodAtomicReference.set(method);\n+      pathAtomicReference.set(path);\n+    };\n+    createServer(createServerConfig());\n+    client = createClient();\n+    action.run();\n+    assertThat(principalAtomicReference.get().getName(), is(expectedUser));\n+    assertThat(methodAtomicReference.get(), is(expectedMethod));\n+    assertThat(pathAtomicReference.get(), is(expectedPath));\n+  }\n+\n+  private void shouldNotAllowAccessifPermissionCheckThrowsException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e574c5832423bf1759174f4dff29bd22c0785511"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTIwODI1MQ==", "bodyText": "Having a single AuthTest file rather than separate test files for basic auth and the authorization filter seems fine for now but I wonder how this file will scale as we add other auth mechanisms. Don't see a great way to split them apart so I'm inclined to leave this for now, though I am curious if you have thoughts on how to scale these auth tests going forward.", "url": "https://github.com/confluentinc/ksql/pull/4713#discussion_r389208251", "createdAt": "2020-03-07T00:51:09Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java", "diffHunk": "@@ -35,9 +45,9 @@\n import org.slf4j.LoggerFactory;\n \n @RunWith(CoreApiTestRunner.class)\n-public class BasicAuthTest extends ApiTest {\n+public class AuthTest extends ApiTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e574c5832423bf1759174f4dff29bd22c0785511"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89e9b40de6333a76b5b7c7be445bf633ed126ac0", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/89e9b40de6333a76b5b7c7be445bf633ed126ac0", "committedDate": "2020-03-07T10:07:14Z", "message": "fixed typo in test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c5dde54dcba06dd13adadfb2432777b3100abd2", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/5c5dde54dcba06dd13adadfb2432777b3100abd2", "committedDate": "2020-03-07T10:49:42Z", "message": "fixed flaky test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4914, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}