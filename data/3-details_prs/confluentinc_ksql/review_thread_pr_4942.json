{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1ODg1Mzg5", "number": 4942, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMTowMDoxN1rODs6Euw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzo1Nzo1N1rODs_VQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDE1NDE5OnYy", "diffSide": "LEFT", "path": "ksqldb-parser/src/main/antlr4/io/confluent/ksql/parser/SqlBase.g4", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMTowMDoxN1rOF-Blew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNjowMTo1N1rOF-dB8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4MjAxMQ==", "bodyText": "instead of removing this from our grammar, why not throw in the analyzing phase that \"KSQL does not support multiple grouping elements\" or whatever. That way the error message is much more understandable", "url": "https://github.com/confluentinc/ksql/pull/4942#discussion_r400582011", "createdAt": "2020-03-31T01:00:17Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/antlr4/io/confluent/ksql/parser/SqlBase.g4", "diffHunk": "@@ -153,26 +153,14 @@ windowUnit\n     ;\n \n groupBy\n-    : groupingElement (',' groupingElement)*\n-    ;\n-\n-groupingElement\n-    : groupingExpressions                                               #singleGroupingSet\n-    ;\n-\n-groupingExpressions\n-    : '(' (valueExpression (',' valueExpression)*)? ')'\n-    | valueExpression", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17833d2da49e320c29a97819fd34c4c0d153483c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc3MDk0MQ==", "bodyText": "Taking your approach to its logical conclusion our grammar should support the full SQL spec and all the validation should be done in the analyzer.\nSurely our grammar should reflect our capability?\nAlso, I don't even think the syntax I've removed for grouping sets in standard sql.  Standard sequel would look like:\nSELECT\n    c1,\n    c2,\n    aggregate (c3)\nFROM\n    table\nGROUP BY\n    GROUPING SETS (\n        (c1, c2),\n        (c1),\n        (c2),\n        ()\n);\nWhere as the syntax I've removed is:\nSELECT\n    c1,\n    c2,\n    aggregate (c3)\nFROM\n    table\nGROUP BY\n    (\n        (c1, c2),\n        (c1),\n        (c2),\n        ()\n    );\nThe GROUPING SETS syntax looks to be common across all SQL variants that I've looked at: postgres, snowflake, oracle, mysql, etc\nHence my view would be we should remove this from our grammar.   If/when we implement grouping sets we can decide what the correct grammar should be.", "url": "https://github.com/confluentinc/ksql/pull/4942#discussion_r400770941", "createdAt": "2020-03-31T09:30:51Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-parser/src/main/antlr4/io/confluent/ksql/parser/SqlBase.g4", "diffHunk": "@@ -153,26 +153,14 @@ windowUnit\n     ;\n \n groupBy\n-    : groupingElement (',' groupingElement)*\n-    ;\n-\n-groupingElement\n-    : groupingExpressions                                               #singleGroupingSet\n-    ;\n-\n-groupingExpressions\n-    : '(' (valueExpression (',' valueExpression)*)? ')'\n-    | valueExpression", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4MjAxMQ=="}, "originalCommit": {"oid": "17833d2da49e320c29a97819fd34c4c0d153483c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk4OTEzNA==", "bodyText": "Taking your approach to its logical conclusion our grammar should support the full SQL spec and all the validation should be done in the analyzer.\n\nTo be honest, I think I would prefer that but it's obviously not a practical amount of work to do now. I get very confused whenever I see a parsing error and I've been wondering how to make those errors better.\n\nThe GROUPING SETS syntax looks to be common across all SQL variants that I've looked at: postgres, snowflake, oracle, mysql, etc\n\nWell that settles it then. LGTM", "url": "https://github.com/confluentinc/ksql/pull/4942#discussion_r400989134", "createdAt": "2020-03-31T15:06:44Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/antlr4/io/confluent/ksql/parser/SqlBase.g4", "diffHunk": "@@ -153,26 +153,14 @@ windowUnit\n     ;\n \n groupBy\n-    : groupingElement (',' groupingElement)*\n-    ;\n-\n-groupingElement\n-    : groupingExpressions                                               #singleGroupingSet\n-    ;\n-\n-groupingExpressions\n-    : '(' (valueExpression (',' valueExpression)*)? ')'\n-    | valueExpression", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4MjAxMQ=="}, "originalCommit": {"oid": "17833d2da49e320c29a97819fd34c4c0d153483c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTAzMTY2Ng==", "bodyText": "To be honest, I think I would prefer that but it's obviously not a practical amount of work to do now. I get very confused whenever I see a parsing error and I've been wondering how to make those errors better\n\nI'm actually in agreement here: the antlr parsing errors aren't great.  But, as you say, it's not practical to handle all errors in the engine.", "url": "https://github.com/confluentinc/ksql/pull/4942#discussion_r401031666", "createdAt": "2020-03-31T16:01:57Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-parser/src/main/antlr4/io/confluent/ksql/parser/SqlBase.g4", "diffHunk": "@@ -153,26 +153,14 @@ windowUnit\n     ;\n \n groupBy\n-    : groupingElement (',' groupingElement)*\n-    ;\n-\n-groupingElement\n-    : groupingExpressions                                               #singleGroupingSet\n-    ;\n-\n-groupingExpressions\n-    : '(' (valueExpression (',' valueExpression)*)? ')'\n-    | valueExpression", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU4MjAxMQ=="}, "originalCommit": {"oid": "17833d2da49e320c29a97819fd34c4c0d153483c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTAxNTcwOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/Analysis.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzo1Nzo1N1rOF-JoZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNToxMjozOVrOF-atNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxMzgzMA==", "bodyText": "shouldn't grouping expressions be a unique set though ? what does it mean to group by a,a,b,a ?  it's possible i'm entirely misunderstanding what this piece of code does though, rusty on this stuff ;)   Comment applies regardless of whether the groupingExpression is retained (per Almog's suggestion) or not - i think....", "url": "https://github.com/confluentinc/ksql/pull/4942#discussion_r400713830", "createdAt": "2020-03-31T07:57:57Z", "author": {"login": "blueedgenick"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/Analysis.java", "diffHunk": "@@ -129,7 +129,7 @@ void setWhereExpression(final Expression whereExpression) {\n     return ImmutableList.copyOf(groupByExpressions);\n   }\n \n-  void addGroupByExpressions(final Set<Expression> expressions) {\n+  void addGroupByExpressions(final Collection<Expression> expressions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27ca851e19c656ea8906e7b2aee398b3968cb15c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc4NjM0NA==", "bodyText": "That's a good point Nick. The old code didn't actually enforce this as addGroupByExpressions was called multiple times.\nI've corrected the code and added tests to cover this.  Now:\nCREATE TABLE OUTPUT AS SELECT COUNT(*) FROM TEST GROUP BY DATA, DATA;\nResults in an error:\nDuplicate GROUP BY expression: TEST.DATA\n\nThe old code was also not maintaining the order of the GROUP BY expressions. This has also been fixed in this PR.", "url": "https://github.com/confluentinc/ksql/pull/4942#discussion_r400786344", "createdAt": "2020-03-31T09:55:23Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/Analysis.java", "diffHunk": "@@ -129,7 +129,7 @@ void setWhereExpression(final Expression whereExpression) {\n     return ImmutableList.copyOf(groupByExpressions);\n   }\n \n-  void addGroupByExpressions(final Set<Expression> expressions) {\n+  void addGroupByExpressions(final Collection<Expression> expressions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxMzgzMA=="}, "originalCommit": {"oid": "27ca851e19c656ea8906e7b2aee398b3968cb15c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk5MzU5MA==", "bodyText": "nice!", "url": "https://github.com/confluentinc/ksql/pull/4942#discussion_r400993590", "createdAt": "2020-03-31T15:12:39Z", "author": {"login": "blueedgenick"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/Analysis.java", "diffHunk": "@@ -129,7 +129,7 @@ void setWhereExpression(final Expression whereExpression) {\n     return ImmutableList.copyOf(groupByExpressions);\n   }\n \n-  void addGroupByExpressions(final Set<Expression> expressions) {\n+  void addGroupByExpressions(final Collection<Expression> expressions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDcxMzgzMA=="}, "originalCommit": {"oid": "27ca851e19c656ea8906e7b2aee398b3968cb15c"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3702, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}