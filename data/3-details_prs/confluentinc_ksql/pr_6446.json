{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NTgxNTM5", "number": 6446, "title": "fix: support unwrapped struct value inference", "bodyText": "Description\nFixes #6444\nThe cause of the bug is that the DefaultSchemaInjector always unwraps struct schemas (assuming that they're wrapped), ignoring any serde features that should cause it to not do so (specifically, wrap_single_value=false). This PR fixes the bug by passing serde features into the schema translator, which is admittedly hacky and ugly but I couldn't think of a way around this.\nTesting done\nQTT\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-10-16T04:42:32Z", "url": "https://github.com/confluentinc/ksql/pull/6446", "merged": true, "mergeCommit": {"oid": "ed3ca5e28de7ce703bd357a3cf0f65dc722fe502"}, "closed": true, "closedAt": "2020-10-16T17:43:41Z", "author": {"login": "vcrfxia"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdS-4iAAH2gAyNTA0NTgxNTM5OmNlMGVkNzkxNjYzYWY5OGQ3NjNhNDkwYzkzN2QyMTBkM2E1N2UxMGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTIIX7gH2gAyNTA0NTgxNTM5OjJiYmZiZTk4OTI4ODNjMTE3ZTFjYjMxZTZlNjc0ZDIxYTRhODJmYzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ce0ed791663af98d763a490c937d210d3a57e10c", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/ce0ed791663af98d763a490c937d210d3a57e10c", "committedDate": "2020-10-16T04:43:44Z", "message": "fix: support unwrapped struct value inference"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3a3ffc818374c0301aaa7bcd13735fc927c7ec5", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/d3a3ffc818374c0301aaa7bcd13735fc927c7ec5", "committedDate": "2020-10-16T04:43:49Z", "message": "chore: historic plans"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57780f479ef8efba05979aa254c832026f4e47a4", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/57780f479ef8efba05979aa254c832026f4e47a4", "committedDate": "2020-10-16T04:35:00Z", "message": "chore: historic plans"}, "afterCommit": {"oid": "d3a3ffc818374c0301aaa7bcd13735fc927c7ec5", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/d3a3ffc818374c0301aaa7bcd13735fc927c7ec5", "committedDate": "2020-10-16T04:43:49Z", "message": "chore: historic plans"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMDU4NTcw", "url": "https://github.com/confluentinc/ksql/pull/6446#pullrequestreview-510058570", "createdAt": "2020-10-16T04:46:22Z", "commit": {"oid": "d3a3ffc818374c0301aaa7bcd13735fc927c7ec5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNDo0NjoyM1rOHimyIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNDo0NjoyM1rOHimyIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0OTA1Nw==", "bodyText": "I don't like that this is hard-coded here. If it's to be hard-coded somewhere, I'd prefer it to be further down in the call stack, e.g., in the schema supplier or even in the schema translator. The drawback to that would be that we'd no longer be able to share code between the key and value inference pathways as easily.", "url": "https://github.com/confluentinc/ksql/pull/6446#discussion_r506049057", "createdAt": "2020-10-16T04:46:23Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/schema/ksql/inference/DefaultSchemaInjector.java", "diffHunk": "@@ -122,6 +123,7 @@ public DefaultSchemaInjector(final TopicSchemaSupplier schemaSupplier) {\n         props.getKafkaTopic(),\n         props.getKeySchemaId(),\n         keyFormat,\n+        SerdeFeatures.of(SerdeFeature.UNWRAP_SINGLES),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a3ffc818374c0301aaa7bcd13735fc927c7ec5"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNDQ4Nzkw", "url": "https://github.com/confluentinc/ksql/pull/6446#pullrequestreview-510448790", "createdAt": "2020-10-16T13:05:24Z", "commit": {"oid": "d3a3ffc818374c0301aaa7bcd13735fc927c7ec5"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzowNToyNVrOHi7t5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoyOTowNFrOHi9iFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM5MjAzNg==", "bodyText": "I'd probably just pass all the features down.  There could be other features later that also affect the schema.", "url": "https://github.com/confluentinc/ksql/pull/6446#discussion_r506392036", "createdAt": "2020-10-16T13:05:25Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/schema/ksql/inference/SchemaRegistryTopicSchemaSupplier.java", "diffHunk": "@@ -127,7 +133,11 @@ private SchemaResult fromParsedSchema(\n \n     final List<SimpleColumn> columns;\n     try {\n-      columns = translator.toColumns(parsedSchema, isKey);\n+      columns = translator.toColumns(\n+          parsedSchema,\n+          isKey,\n+          serdeFeatures.enabled(SerdeFeature.UNWRAP_SINGLES)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a3ffc818374c0301aaa7bcd13735fc927c7ec5"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQwMTQ1NQ==", "bodyText": "I don't think we need to check both.   Just checking the serde features is enough.  So I think this should become:\n @Override\n  public List<SimpleColumn> toColumns(\n      final ParsedSchema schema,\n      final SerdeFeatures serdeFeatures,\n      final boolean isKey\n  ) {\n    SerdeUtils.throwOnUnsupportedFeatures(serdeFeatures, format.supportedFeatures());\n\n    Schema connectSchema = connectSrTranslator.toConnectSchema(schema);\n\n    if (serdeFeatures.enabled(SerdeFeature.UNWRAP_SINGLES)) {\n      connectSchema = SerdeUtils.wrapSingle(connectSchema, isKey);\n    }\n\n    if (connectSchema.type() != Type.STRUCT) {\n      if (isKey) {\n        throw new IllegalStateException(\"Key schemas are always unwrapped.\");\n      }\n      \n      throw new KsqlException(\"Schema returned from schema registry is anonymous type. \"\n          + \"To use this schema with ksqlDB, set '\" + CommonCreateConfigs.WRAP_SINGLE_VALUE\n          + \"=false' in the WITH clause properties.\");\n    }\n\n    final Schema rowSchema = connectKsqlTranslator.apply(connectSchema);\n\n    return rowSchema.fields().stream()\n        .map(ConnectFormatSchemaTranslator::toColumn)\n        .collect(Collectors.toList());\n  }", "url": "https://github.com/confluentinc/ksql/pull/6446#discussion_r506401455", "createdAt": "2020-10-16T13:13:37Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/connect/ConnectFormatSchemaTranslator.java", "diffHunk": "@@ -59,16 +59,29 @@ public String name() {\n   }\n \n   @Override\n-  public List<SimpleColumn> toColumns(final ParsedSchema schema, final boolean isKey) {\n+  public List<SimpleColumn> toColumns(\n+      final ParsedSchema schema,\n+      final boolean isKey,\n+      final boolean unwrapSingle) {\n     Schema connectSchema = connectSrTranslator.toConnectSchema(schema);\n \n-    if (connectSchema.type() != Type.STRUCT) {\n+    if (connectSchema.type() != Type.STRUCT || unwrapSingle) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3a3ffc818374c0301aaa7bcd13735fc927c7ec5"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQyMTc4Mw==", "bodyText": "First off, you should only be setting this flag if the format supports unwrapping!  Or more correctly, if the format supports both unwrapping and wrapping.\nAs to hard coding it... humm, yes, so far it's been hard-coded in one place: SerdeFeaturesFactory.\nWe could do something like:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    SerdeFeatures.of(SerdeFeature.UNWRAP_SINGLES),\n          \n          \n            \n                    SerdeFeaturesFactory.buildInternal(FormatFactory.of(keyFormat),\n          \n      \n    \n    \n  \n\nBut, to be honest, this is only a temporary thing.  At the moment, we only support unwrapped keys. Once we support something else we'll wire it up and this hardcoding will go.", "url": "https://github.com/confluentinc/ksql/pull/6446#discussion_r506421783", "createdAt": "2020-10-16T13:29:04Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/schema/ksql/inference/DefaultSchemaInjector.java", "diffHunk": "@@ -122,6 +123,7 @@ public DefaultSchemaInjector(final TopicSchemaSupplier schemaSupplier) {\n         props.getKafkaTopic(),\n         props.getKeySchemaId(),\n         keyFormat,\n+        SerdeFeatures.of(SerdeFeature.UNWRAP_SINGLES),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjA0OTA1Nw=="}, "originalCommit": {"oid": "d3a3ffc818374c0301aaa7bcd13735fc927c7ec5"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bbfbe9892883c117e1cb31e6e674d21a4a82fc0", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/2bbfbe9892883c117e1cb31e6e674d21a4a82fc0", "committedDate": "2020-10-16T15:30:11Z", "message": "chore: feedback"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4633, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}