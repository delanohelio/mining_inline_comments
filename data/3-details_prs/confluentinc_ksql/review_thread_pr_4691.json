{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyOTM4MzY5", "number": 4691, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODozNjowOFrODlVLkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo1Mjo1MlrODlVgFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDcwOTMxOnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODozNjowOFrOFyKZjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozMzoxNlrOFyORxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MzUwMQ==", "bodyText": "This property is unused now and may be removed, right?", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388143501", "createdAt": "2020-03-05T08:36:08Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java", "diffHunk": "@@ -38,18 +38,13 @@\n   public static final int DEFAULT_VERTICLE_INSTANCES =\n       2 * Runtime.getRuntime().availableProcessors();\n   public static final String VERTICLE_INSTANCES_DOC =\n-      \"The number of server verticle instances to start. Usually you want at least many instances\"\n-          + \" as there are cores you want to use, as each instance is single threaded.\";\n+      \"The number of server verticle instances to start per listener. Usually you want at least \"\n+          + \"many instances as there are cores you want to use, as each instance is single \"\n+          + \"threaded.\";\n \n-  public static final String LISTEN_HOST = propertyName(\"listen.host\");\n-  public static final String DEFAULT_LISTEN_HOST = \"localhost\";\n-  public static final String LISTEN_HOST_DOC =\n-      \"The hostname to listen on\";\n-\n-  public static final String LISTEN_PORT = propertyName(\"listen.port\");\n-  public static final int DEFAULT_LISTEN_PORT = 8088;\n-  public static final String LISTEN_PORT_DOC =\n-      \"The port to listen on\";\n+  public static final String LISTENERS = propertyName(\"listeners\");\n+  public static final String DEFAULT_LISTENERS = \"http://0.0.0.0:8088\";\n+  public static final String LISTENERS_DOC = \"List of listeners to listen for connections on\";\n \n   public static final String TLS_ENABLED = propertyName(\"tls.enabled\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwNzA0NQ==", "bodyText": "ack", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388207045", "createdAt": "2020-03-05T10:33:16Z", "author": {"login": "purplefox"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java", "diffHunk": "@@ -38,18 +38,13 @@\n   public static final int DEFAULT_VERTICLE_INSTANCES =\n       2 * Runtime.getRuntime().availableProcessors();\n   public static final String VERTICLE_INSTANCES_DOC =\n-      \"The number of server verticle instances to start. Usually you want at least many instances\"\n-          + \" as there are cores you want to use, as each instance is single threaded.\";\n+      \"The number of server verticle instances to start per listener. Usually you want at least \"\n+          + \"many instances as there are cores you want to use, as each instance is single \"\n+          + \"threaded.\";\n \n-  public static final String LISTEN_HOST = propertyName(\"listen.host\");\n-  public static final String DEFAULT_LISTEN_HOST = \"localhost\";\n-  public static final String LISTEN_HOST_DOC =\n-      \"The hostname to listen on\";\n-\n-  public static final String LISTEN_PORT = propertyName(\"listen.port\");\n-  public static final int DEFAULT_LISTEN_PORT = 8088;\n-  public static final String LISTEN_PORT_DOC =\n-      \"The port to listen on\";\n+  public static final String LISTENERS = propertyName(\"listeners\");\n+  public static final String DEFAULT_LISTENERS = \"http://0.0.0.0:8088\";\n+  public static final String LISTENERS_DOC = \"List of listeners to listen for connections on\";\n \n   public static final String TLS_ENABLED = propertyName(\"tls.enabled\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0MzUwMQ=="}, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDcxMjYzOnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODozNzoxNVrOFyKbhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozOToxNFrOFyOe6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NDAwNg==", "bodyText": "How come we only log on 500 errors?", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388144006", "createdAt": "2020-03-05T08:37:15Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -86,6 +109,107 @@ private Router setupRouter() {\n         .handler(new InsertsStreamHandler(context, endpoints, server.getWorkerExecutor()));\n     router.route(HttpMethod.POST, \"/close-query\").handler(BodyHandler.create())\n         .handler(new CloseQueryHandler(server));\n+    router.route(HttpMethod.GET, \"/ws/*\").handler(this::websocketHandler);\n+\n+    if (proxyEnabled) {\n+      // Everything else is proxied\n+      // The proxying is temporary and will go away once all the Jetty endpoints have been\n+      // migrated to Vert.x\n+      router.route().handler(new ProxyHandler(proxyTarget, proxyClient, server));\n+    }\n+    router.route().failureHandler(this::handleFailure);\n     return router;\n   }\n+\n+  private void handleFailure(final RoutingContext routingContext) {\n+    if (routingContext.statusCode() == 500) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxMDQwOA==", "bodyText": "ack, this can be improved", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388210408", "createdAt": "2020-03-05T10:39:14Z", "author": {"login": "purplefox"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -86,6 +109,107 @@ private Router setupRouter() {\n         .handler(new InsertsStreamHandler(context, endpoints, server.getWorkerExecutor()));\n     router.route(HttpMethod.POST, \"/close-query\").handler(BodyHandler.create())\n         .handler(new CloseQueryHandler(server));\n+    router.route(HttpMethod.GET, \"/ws/*\").handler(this::websocketHandler);\n+\n+    if (proxyEnabled) {\n+      // Everything else is proxied\n+      // The proxying is temporary and will go away once all the Jetty endpoints have been\n+      // migrated to Vert.x\n+      router.route().handler(new ProxyHandler(proxyTarget, proxyClient, server));\n+    }\n+    router.route().failureHandler(this::handleFailure);\n     return router;\n   }\n+\n+  private void handleFailure(final RoutingContext routingContext) {\n+    if (routingContext.statusCode() == 500) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NDAwNg=="}, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDcyNDIwOnYy", "diffSide": "LEFT", "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/server/TestKsqlRestApp.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo0MDo0NlrOFyKiaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo0MDo1MVrOFyOiUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NTc2OA==", "bodyText": "How come the HTTPS listener was removed from here?", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388145768", "createdAt": "2020-03-05T08:40:46Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/server/TestKsqlRestApp.java", "diffHunk": "@@ -403,7 +408,8 @@ private static KsqlRestConfig buildConfig(\n     final HashMap<String, Object> config = new HashMap<>(baseConfig);\n \n     config.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers.get());\n-    config.putIfAbsent(KsqlRestConfig.LISTENERS_CONFIG, \"http://localhost:0,https://localhost:0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxMTI4MQ==", "bodyText": "It doesn't appear to be used (the SSL tests override this config), and also the new server doesn't support having an https listener if you haven't configured a key store. The old server did seem to support this, which seems a bit weird (how can you server https without having a server certificate?)", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388211281", "createdAt": "2020-03-05T10:40:51Z", "author": {"login": "purplefox"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/server/TestKsqlRestApp.java", "diffHunk": "@@ -403,7 +408,8 @@ private static KsqlRestConfig buildConfig(\n     final HashMap<String, Object> config = new HashMap<>(baseConfig);\n \n     config.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers.get());\n-    config.putIfAbsent(KsqlRestConfig.LISTENERS_CONFIG, \"http://localhost:0,https://localhost:0\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NTc2OA=="}, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDcyOTMzOnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo0MjoyN1rOFyKlmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo0MzoyNFrOFyOn5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NjU4Nw==", "bodyText": "Out of curiosity, how come we chose \"request\" instead of \"requested\"? Seems to break parallelism with \"required\" which was preserved.", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388146587", "createdAt": "2020-03-05T08:42:27Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java", "diffHunk": "@@ -168,6 +156,9 @@ public ApiServerConfig(final Map<?, ?> map) {\n     super(CONFIG_DEF, map);\n   }\n \n+  // Note that this expects config value that is not standard Confluent as defined in BaseConfig.\n+  // For \"request\" client auth, confluent value is \"REQUESTED\" where value expected here is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxMjcxMA==", "bodyText": "This is because of the Vert.x ClientAuth enum:\nhttps://github.com/eclipse-vertx/vert.x/blob/master/src/main/java/io/vertx/core/http/ClientAuth.java\nwhich uses \"REQUIRE\" and we map directly from strings to the enum.\nWe should probably make this consistent with the standard Confluent config (i.e. do a manual mapping from string to Vert.x enum)", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388212710", "createdAt": "2020-03-05T10:43:24Z", "author": {"login": "purplefox"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ApiServerConfig.java", "diffHunk": "@@ -168,6 +156,9 @@ public ApiServerConfig(final Map<?, ?> map) {\n     super(CONFIG_DEF, map);\n   }\n \n+  // Note that this expects config value that is not standard Confluent as defined in BaseConfig.\n+  // For \"request\" client auth, confluent value is \"REQUESTED\" where value expected here is", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NjU4Nw=="}, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDczMDMwOnYy", "diffSide": "LEFT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo0Mjo0N1rOFyKmOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo0OToyNFrOFyO0lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0Njc0Nw==", "bodyText": "Out of curiosity, how come this was removed?", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388146747", "createdAt": "2020-03-05T08:42:47Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "diffHunk": "@@ -125,14 +125,19 @@ public void makeAsyncLagReportRequest(\n     getTarget(target, authHeader).postAsyncLagReportingRequest(lagReportingMessage);\n   }\n \n+  @Override\n+  public void close() {\n+    sharedClient.close();\n+  }\n+\n   private KsqlTarget getTarget(final KsqlTarget target, final Optional<String> authHeader) {\n     return authHeader\n         .map(target::authorizationHeader)\n         .orElse(target);\n   }\n \n   private static HttpClientOptions createClientOptions() {\n-    return new HttpClientOptions().setMaxPoolSize(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxNTk1OA==", "bodyText": "My reasoning was, if the client is being created for each request, then no point in having a large pool size.", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388215958", "createdAt": "2020-03-05T10:49:24Z", "author": {"login": "purplefox"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "diffHunk": "@@ -125,14 +125,19 @@ public void makeAsyncLagReportRequest(\n     getTarget(target, authHeader).postAsyncLagReportingRequest(lagReportingMessage);\n   }\n \n+  @Override\n+  public void close() {\n+    sharedClient.close();\n+  }\n+\n   private KsqlTarget getTarget(final KsqlTarget target, final Optional<String> authHeader) {\n     return authHeader\n         .map(target::authorizationHeader)\n         .orElse(target);\n   }\n \n   private static HttpClientOptions createClientOptions() {\n-    return new HttpClientOptions().setMaxPoolSize(100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0Njc0Nw=="}, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDczMjY4OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/services/RestServiceContextFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo0MzozMVrOFyKnqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo1MjowNFrOFyO6aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NzExMw==", "bodyText": "The client suppliers are memoized: \n  \n    \n      ksql/ksql-engine/src/main/java/io/confluent/ksql/services/DefaultServiceContext.java\n    \n    \n         Line 96\n      in\n      9bc2220\n    \n    \n    \n    \n\n        \n          \n           this.ksqlClientSupplier = new MemoizedSupplier<>(ksqlClientSupplier); \n        \n    \n  \n\n\nDoes that address the concern?", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388147113", "createdAt": "2020-03-05T08:43:31Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/services/RestServiceContextFactory.java", "diffHunk": "@@ -74,6 +74,7 @@ public static ServiceContext create(\n         srClientFactory,\n         () -> new DefaultConnectClient(ksqlConfig.getString(KsqlConfig.CONNECT_URL_PROPERTY),\n                                        authHeader),\n+        // We should be re-using this not creating one each time!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxNzQ0OA==", "bodyText": "Ah I see, so we are reusing :) In which case I can retain the larger pool size.", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388217448", "createdAt": "2020-03-05T10:52:04Z", "author": {"login": "purplefox"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/services/RestServiceContextFactory.java", "diffHunk": "@@ -74,6 +74,7 @@ public static ServiceContext create(\n         srClientFactory,\n         () -> new DefaultConnectClient(ksqlConfig.getString(KsqlConfig.CONNECT_URL_PROPERTY),\n                                        authHeader),\n+        // We should be re-using this not creating one each time!", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NzExMw=="}, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDczNDA2OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo0Mzo1NVrOFyKogQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo1NDoyNFrOFyO-6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NzMyOQ==", "bodyText": "What's the purpose of setMaxInitialLineLength() here?", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388147329", "createdAt": "2020-03-05T08:43:55Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -38,24 +49,31 @@\n   private final Endpoints endpoints;\n   private final HttpServerOptions httpServerOptions;\n   private final Server server;\n+  private final boolean proxyEnabled;\n   private ConnectionQueryManager connectionQueryManager;\n-  private HttpServer httpServer;\n+  private volatile HttpServer httpServer;\n+\n+  private HttpClient proxyClient;\n+  private SocketAddress proxyTarget;\n \n   public ServerVerticle(final Endpoints endpoints, final HttpServerOptions httpServerOptions,\n-      final Server server) {\n+      final Server server, final boolean proxyEnabled) {\n     this.endpoints = Objects.requireNonNull(endpoints);\n     this.httpServerOptions = Objects.requireNonNull(httpServerOptions);\n     this.server = Objects.requireNonNull(server);\n+    this.proxyEnabled = proxyEnabled;\n   }\n \n   @Override\n   public void start(final Promise<Void> startPromise) {\n+    this.proxyClient = proxyEnabled ? vertx\n+        .createHttpClient(\n+            new HttpClientOptions().setMaxPoolSize(10).setMaxInitialLineLength(65536)) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIxODYwMA==", "bodyText": "It shouldn't be needed. Will remove.", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388218600", "createdAt": "2020-03-05T10:54:24Z", "author": {"login": "purplefox"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -38,24 +49,31 @@\n   private final Endpoints endpoints;\n   private final HttpServerOptions httpServerOptions;\n   private final Server server;\n+  private final boolean proxyEnabled;\n   private ConnectionQueryManager connectionQueryManager;\n-  private HttpServer httpServer;\n+  private volatile HttpServer httpServer;\n+\n+  private HttpClient proxyClient;\n+  private SocketAddress proxyTarget;\n \n   public ServerVerticle(final Endpoints endpoints, final HttpServerOptions httpServerOptions,\n-      final Server server) {\n+      final Server server, final boolean proxyEnabled) {\n     this.endpoints = Objects.requireNonNull(endpoints);\n     this.httpServerOptions = Objects.requireNonNull(httpServerOptions);\n     this.server = Objects.requireNonNull(server);\n+    this.proxyEnabled = proxyEnabled;\n   }\n \n   @Override\n   public void start(final Promise<Void> startPromise) {\n+    this.proxyClient = proxyEnabled ? vertx\n+        .createHttpClient(\n+            new HttpClientOptions().setMaxPoolSize(10).setMaxInitialLineLength(65536)) : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NzMyOQ=="}, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDczNTQxOnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ProxyHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo0NDoyOVrOFyKpYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo1NzoxN1rOFyPEog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NzU1Mg==", "bodyText": "Out of curiosity, what goes wrong if the \"host\" header is not removed from the proxy request?", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388147552", "createdAt": "2020-03-05T08:44:29Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ProxyHandler.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import io.vertx.core.Handler;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpClient;\n+import io.vertx.core.http.HttpClientRequest;\n+import io.vertx.core.http.HttpClientResponse;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.net.SocketAddress;\n+import io.vertx.core.streams.ReadStream;\n+import io.vertx.core.streams.WriteStream;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ProxyHandler implements Handler<RoutingContext> {\n+\n+  private static final Logger log = LoggerFactory.getLogger(ProxyHandler.class);\n+\n+  private final HttpClient proxyClient;\n+  private final Server server;\n+  private SocketAddress proxyTarget;\n+\n+  public ProxyHandler(final SocketAddress proxyTarget, final HttpClient proxyClient,\n+      final Server server) {\n+    this.proxyTarget = proxyTarget;\n+    this.proxyClient = proxyClient;\n+    this.server = server;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    if (proxyTarget == null) {\n+      proxyTarget = server.getProxyTarget();\n+    }\n+    final HttpServerRequest serverRequest = routingContext.request();\n+    final HttpClientRequest clientRequest = proxyClient.request(serverRequest.method(),\n+        proxyTarget, proxyTarget.port(), proxyTarget.host(),\n+        serverRequest.path(),\n+        resp -> responseHandler(resp, serverRequest))\n+        .exceptionHandler(ProxyHandler::exceptionHandler);\n+\n+    final MultiMap headers = MultiMap.caseInsensitiveMultiMap();\n+    for (Map.Entry<String, String> header : serverRequest.headers()) {\n+      if (!header.getKey().equalsIgnoreCase(\"host\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyMDA2Ng==", "bodyText": "It's probably not necessary, will try and remove", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388220066", "createdAt": "2020-03-05T10:57:17Z", "author": {"login": "purplefox"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ProxyHandler.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import io.vertx.core.Handler;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpClient;\n+import io.vertx.core.http.HttpClientRequest;\n+import io.vertx.core.http.HttpClientResponse;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.net.SocketAddress;\n+import io.vertx.core.streams.ReadStream;\n+import io.vertx.core.streams.WriteStream;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Map;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+\n+public class ProxyHandler implements Handler<RoutingContext> {\n+\n+  private static final Logger log = LoggerFactory.getLogger(ProxyHandler.class);\n+\n+  private final HttpClient proxyClient;\n+  private final Server server;\n+  private SocketAddress proxyTarget;\n+\n+  public ProxyHandler(final SocketAddress proxyTarget, final HttpClient proxyClient,\n+      final Server server) {\n+    this.proxyTarget = proxyTarget;\n+    this.proxyClient = proxyClient;\n+    this.server = server;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    if (proxyTarget == null) {\n+      proxyTarget = server.getProxyTarget();\n+    }\n+    final HttpServerRequest serverRequest = routingContext.request();\n+    final HttpClientRequest clientRequest = proxyClient.request(serverRequest.method(),\n+        proxyTarget, proxyTarget.port(), proxyTarget.host(),\n+        serverRequest.path(),\n+        resp -> responseHandler(resp, serverRequest))\n+        .exceptionHandler(ProxyHandler::exceptionHandler);\n+\n+    final MultiMap headers = MultiMap.caseInsensitiveMultiMap();\n+    for (Map.Entry<String, String> header : serverRequest.headers()) {\n+      if (!header.getKey().equalsIgnoreCase(\"host\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NzU1Mg=="}, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDczOTAxOnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo0NTo0MVrOFyKroA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDo1ODozNVrOFyPHXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0ODEyOA==", "bodyText": "nit: should we add a log message here?", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388148128", "createdAt": "2020-03-05T08:45:41Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -86,6 +109,107 @@ private Router setupRouter() {\n         .handler(new InsertsStreamHandler(context, endpoints, server.getWorkerExecutor()));\n     router.route(HttpMethod.POST, \"/close-query\").handler(BodyHandler.create())\n         .handler(new CloseQueryHandler(server));\n+    router.route(HttpMethod.GET, \"/ws/*\").handler(this::websocketHandler);\n+\n+    if (proxyEnabled) {\n+      // Everything else is proxied\n+      // The proxying is temporary and will go away once all the Jetty endpoints have been\n+      // migrated to Vert.x\n+      router.route().handler(new ProxyHandler(proxyTarget, proxyClient, server));\n+    }\n+    router.route().failureHandler(this::handleFailure);\n     return router;\n   }\n+\n+  private void handleFailure(final RoutingContext routingContext) {\n+    if (routingContext.statusCode() == 500) {\n+      log.error(\"Unexpected exception in router\", routingContext.failure());\n+    }\n+    routingContext.response().setStatusCode(routingContext.statusCode()).end();\n+  }\n+\n+  private void websocketHandler(final RoutingContext routingContext) {\n+    if (proxyTarget == null) {\n+      proxyTarget = server.getProxyTarget();\n+    }\n+    final HttpServerRequest request = routingContext.request();\n+    final WebSocketConnectOptions options = new WebSocketConnectOptions()\n+        .setHost(proxyTarget.host())\n+        .setPort(proxyTarget.port())\n+        .setHeaders(request.headers())\n+        .setURI(request.uri());\n+    request.pause();\n+    proxyClient.webSocket(options, ar -> {\n+      request.resume();\n+      if (ar.succeeded()) {\n+        final WebSocket webSocket = ar.result();\n+        final ServerWebSocket serverWebSocket = request.upgrade();\n+        WebsocketPipe.pipe(serverWebSocket, webSocket);\n+        WebsocketPipe.pipe(webSocket, serverWebSocket);\n+      } else {\n+        if (ar.cause() instanceof UpgradeRejectedException) {\n+          final UpgradeRejectedException uge = (UpgradeRejectedException) ar.cause();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyMDc2Ng==", "bodyText": "This will occur for things like authorization failure, in which case presumably the old Jetty server already logs this.", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388220766", "createdAt": "2020-03-05T10:58:35Z", "author": {"login": "purplefox"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -86,6 +109,107 @@ private Router setupRouter() {\n         .handler(new InsertsStreamHandler(context, endpoints, server.getWorkerExecutor()));\n     router.route(HttpMethod.POST, \"/close-query\").handler(BodyHandler.create())\n         .handler(new CloseQueryHandler(server));\n+    router.route(HttpMethod.GET, \"/ws/*\").handler(this::websocketHandler);\n+\n+    if (proxyEnabled) {\n+      // Everything else is proxied\n+      // The proxying is temporary and will go away once all the Jetty endpoints have been\n+      // migrated to Vert.x\n+      router.route().handler(new ProxyHandler(proxyTarget, proxyClient, server));\n+    }\n+    router.route().failureHandler(this::handleFailure);\n     return router;\n   }\n+\n+  private void handleFailure(final RoutingContext routingContext) {\n+    if (routingContext.statusCode() == 500) {\n+      log.error(\"Unexpected exception in router\", routingContext.failure());\n+    }\n+    routingContext.response().setStatusCode(routingContext.statusCode()).end();\n+  }\n+\n+  private void websocketHandler(final RoutingContext routingContext) {\n+    if (proxyTarget == null) {\n+      proxyTarget = server.getProxyTarget();\n+    }\n+    final HttpServerRequest request = routingContext.request();\n+    final WebSocketConnectOptions options = new WebSocketConnectOptions()\n+        .setHost(proxyTarget.host())\n+        .setPort(proxyTarget.port())\n+        .setHeaders(request.headers())\n+        .setURI(request.uri());\n+    request.pause();\n+    proxyClient.webSocket(options, ar -> {\n+      request.resume();\n+      if (ar.succeeded()) {\n+        final WebSocket webSocket = ar.result();\n+        final ServerWebSocket serverWebSocket = request.upgrade();\n+        WebsocketPipe.pipe(serverWebSocket, webSocket);\n+        WebsocketPipe.pipe(webSocket, serverWebSocket);\n+      } else {\n+        if (ar.cause() instanceof UpgradeRejectedException) {\n+          final UpgradeRejectedException uge = (UpgradeRejectedException) ar.cause();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0ODEyOA=="}, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDc0ODg0OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo0ODo1MFrOFyKxkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTowMDo0MFrOFyPLwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0OTY0OQ==", "bodyText": "Is it important that this call is made before the REST server is started? (Wondering if there's a reason this call was moved to the top.)", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388149649", "createdAt": "2020-03-05T08:48:50Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -261,7 +300,8 @@ public void setupResources(final Configurable<?> config, final KsqlRestConfig ap\n \n   @Override\n   public void startAsync() {\n-    log.info(\"KSQL RESTful API listening on {}\", StringUtils.join(getListeners(), \", \"));\n+    startApiServer(ksqlConfigNoPort);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyMTg4OA==", "bodyText": "Yep, the apiServer now serves al traffic and has the real listeners, so don't know the listeners until it's started.", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388221888", "createdAt": "2020-03-05T11:00:40Z", "author": {"login": "purplefox"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -261,7 +300,8 @@ public void setupResources(final Configurable<?> config, final KsqlRestConfig ap\n \n   @Override\n   public void startAsync() {\n-    log.info(\"KSQL RESTful API listening on {}\", StringUtils.join(getListeners(), \", \"));\n+    startApiServer(ksqlConfigNoPort);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0OTY0OQ=="}, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDc1NjE5OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/server/TestKsqlRestApp.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo1MTowOFrOFyK2DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODowODoxM1rOFyeSvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MDc5Nw==", "bodyText": "Having trouble understanding what this property means... how come it needs to be increased here?", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388150797", "createdAt": "2020-03-05T08:51:08Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/server/TestKsqlRestApp.java", "diffHunk": "@@ -108,6 +111,10 @@\n   private KsqlExecutionContext ksqlEngine;\n   private KsqlRestApplication ksqlRestApplication;\n \n+  static {\n+    // Increase the default - it's low (100)\n+    System.setProperty(\"sun.net.maxDatagramSockets\", \"1024\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyMzA0NA==", "bodyText": "When doing DNS lookups, Netty uses it's own resolver that uses UDP, and it caches resolvers per event loop. When we start the api server we create 2 * number of cores * number of listeners event loops. Also in some tests we start multiple api servers. This means the number of udp sockets required can be > the OS default, which is 100, which will cause tests to fail.", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388223044", "createdAt": "2020-03-05T11:02:56Z", "author": {"login": "purplefox"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/server/TestKsqlRestApp.java", "diffHunk": "@@ -108,6 +111,10 @@\n   private KsqlExecutionContext ksqlEngine;\n   private KsqlRestApplication ksqlRestApplication;\n \n+  static {\n+    // Increase the default - it's low (100)\n+    System.setProperty(\"sun.net.maxDatagramSockets\", \"1024\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MDc5Nw=="}, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2OTQzNg==", "bodyText": "Thanks for the context! Very helpful.", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388469436", "createdAt": "2020-03-05T18:08:13Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/server/TestKsqlRestApp.java", "diffHunk": "@@ -108,6 +111,10 @@\n   private KsqlExecutionContext ksqlEngine;\n   private KsqlRestApplication ksqlRestApplication;\n \n+  static {\n+    // Increase the default - it's low (100)\n+    System.setProperty(\"sun.net.maxDatagramSockets\", \"1024\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MDc5Nw=="}, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDc1ODY4OnYy", "diffSide": "RIGHT", "path": "ksql-cli/src/test/java/io/confluent/ksql/cli/SslClientAuthFunctionalTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo1MTo1NVrOFyK3kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODoyMToyMFrOFyetLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MTE4NQ==", "bodyText": "nit: de-dup these helper methods between this file and SslFunctionalTest.java?", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388151185", "createdAt": "2020-03-05T08:51:55Z", "author": {"login": "vcrfxia"}, "path": "ksql-cli/src/test/java/io/confluent/ksql/cli/SslClientAuthFunctionalTest.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.cli;\n+\n+import static io.confluent.ksql.serde.FormatFactory.JSON;\n+import static java.util.Collections.emptyMap;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.internal.matchers.ThrowableCauseMatcher.hasCause;\n+\n+import com.google.common.net.UrlEscapers;\n+import io.confluent.common.utils.IntegrationTest;\n+import io.confluent.ksql.integration.IntegrationTestHarness;\n+import io.confluent.ksql.integration.Retry;\n+import io.confluent.ksql.rest.client.KsqlClient;\n+import io.confluent.ksql.rest.client.KsqlRestClient;\n+import io.confluent.ksql.rest.client.KsqlRestClientException;\n+import io.confluent.ksql.rest.client.RestResponse;\n+import io.confluent.ksql.rest.server.TestKsqlRestApp;\n+import io.confluent.ksql.test.util.secure.ClientTrustStore;\n+import io.confluent.ksql.test.util.secure.ServerKeyStore;\n+import io.confluent.ksql.util.OrderDataProvider;\n+import io.confluent.rest.RestConfig;\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.net.ssl.SSLHandshakeException;\n+import kafka.zookeeper.ZooKeeperClientException;\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.eclipse.jetty.http.HttpStatus.Code;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.eclipse.jetty.util.ssl.SslContextFactory.Server;\n+import org.eclipse.jetty.websocket.api.Session;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketConnect;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketError;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketMessage;\n+import org.eclipse.jetty.websocket.api.annotations.WebSocket;\n+import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;\n+import org.eclipse.jetty.websocket.client.WebSocketClient;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.ExpectedException;\n+import org.junit.rules.RuleChain;\n+\n+@Category({IntegrationTest.class})\n+public class SslClientAuthFunctionalTest {\n+\n+  private static final String TOPIC_NAME = new OrderDataProvider().topicName();\n+\n+  private static final String JSON_KSQL_REQUEST = UrlEscapers.urlFormParameterEscaper()\n+      .escape(\"{\"\n+          + \" \\\"ksql\\\": \\\"PRINT \" + TOPIC_NAME + \" FROM BEGINNING;\\\"\"\n+          + \"}\");\n+\n+  public static final IntegrationTestHarness TEST_HARNESS = IntegrationTestHarness.build();\n+\n+  @SuppressWarnings(\"deprecation\")\n+  private static final TestKsqlRestApp REST_APP = TestKsqlRestApp\n+      .builder(TEST_HARNESS::kafkaBootstrapServers)\n+      .withProperties(ServerKeyStore.keyStoreProps())\n+      .withProperty(SslConfigs.SSL_CLIENT_AUTH_CONFIG, true)\n+      .withProperty(RestConfig.LISTENERS_CONFIG, \"https://localhost:0\")\n+      .build();\n+\n+  @ClassRule\n+  public static final RuleChain CHAIN = RuleChain\n+      .outerRule(Retry.of(3, ZooKeeperClientException.class, 3, TimeUnit.SECONDS))\n+      .around(TEST_HARNESS)\n+      .around(REST_APP);\n+\n+  @Rule\n+  public final ExpectedException expectedException = ExpectedException.none();\n+\n+  private Map<String, String> clientProps;\n+  private SslContextFactory sslContextFactory;\n+\n+  @BeforeClass\n+  public static void classSetUp() {\n+    final OrderDataProvider dataProvider = new OrderDataProvider();\n+    TEST_HARNESS.getKafkaCluster().createTopics(TOPIC_NAME);\n+    TEST_HARNESS.produceRows(dataProvider.topicName(), dataProvider, JSON);\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    clientProps = new HashMap<>();\n+    clientProps.put(KsqlClient.DISABLE_HOSTNAME_VERIFICATION_PROP_NAME, \"true\");\n+    sslContextFactory = new Server();\n+  }\n+\n+  @Test\n+  public void shouldNotBeAbleToUseCliIfClientDoesNotProvideCertificate() {\n+\n+    // Given:\n+    givenClientConfiguredWithoutCertificate();\n+\n+    // Then:\n+    expectedException.expect(KsqlRestClientException.class);\n+    expectedException.expectCause(is(instanceOf(ExecutionException.class)));\n+    expectedException.expectCause(hasCause(is(instanceOf(SSLHandshakeException.class))));\n+\n+    // When:\n+    canMakeCliRequest();\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToUseCliOverHttps() {\n+    // Given:\n+    givenClientConfiguredWithCertificate();\n+\n+    // When:\n+    final Code result = canMakeCliRequest();\n+\n+    // Then:\n+    assertThat(result, is(Code.OK));\n+  }\n+\n+  @Test\n+  public void shouldNotBeAbleToUseWssIfClientDoesNotTrustServerCert() throws Exception {\n+    // Given:\n+    givenClientConfiguredWithoutCertificate();\n+\n+    // Then:\n+    expectedException.expect(SSLHandshakeException.class);\n+    expectedException.expectMessage(\"Received fatal alert: handshake_failure\");\n+\n+    // When:\n+    makeWsRequest();\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToUseWss() throws Exception {\n+    // Given:\n+    givenClientConfiguredWithCertificate();\n+\n+    // When:\n+    makeWsRequest();\n+\n+    // Then: did not throw.\n+  }\n+\n+  private void givenClientConfiguredWithCertificate() {\n+\n+    String clientCertPath = ServerKeyStore.keyStoreProps()\n+        .get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n+    String clientCertPassword = ServerKeyStore.keyStoreProps()\n+        .get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n+\n+    // HTTP:\n+    clientProps = new HashMap<>();\n+    clientProps.putAll(ClientTrustStore.trustStoreProps());\n+\n+    clientProps.put(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, clientCertPath);\n+    clientProps.put(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, clientCertPassword);\n+\n+    clientProps.put(KsqlClient.DISABLE_HOSTNAME_VERIFICATION_PROP_NAME, \"true\");\n+    clientProps.put(KsqlClient.TLS_ENABLED_PROP_NAME, \"true\");\n+\n+    // WS:\n+    sslContextFactory.setTrustStorePath(ClientTrustStore.trustStorePath());\n+    sslContextFactory.setTrustStorePassword(ClientTrustStore.trustStorePassword());\n+    sslContextFactory.setKeyStorePath(clientCertPath);\n+    sslContextFactory.setKeyStorePassword(clientCertPassword);\n+    sslContextFactory.setEndpointIdentificationAlgorithm(\"\");\n+  }\n+\n+  private void givenClientConfiguredWithoutCertificate() {\n+\n+    // HTTP:\n+    clientProps = new HashMap<>();\n+    clientProps.putAll(ClientTrustStore.trustStoreProps());\n+\n+    clientProps.put(KsqlClient.DISABLE_HOSTNAME_VERIFICATION_PROP_NAME, \"true\");\n+    clientProps.put(KsqlClient.TLS_ENABLED_PROP_NAME, \"true\");\n+\n+    // WS:\n+    sslContextFactory.setTrustStorePath(ClientTrustStore.trustStorePath());\n+    sslContextFactory.setTrustStorePassword(ClientTrustStore.trustStorePassword());\n+    sslContextFactory.setEndpointIdentificationAlgorithm(\"\");\n+  }\n+\n+  private Code canMakeCliRequest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyMzg0Mg==", "bodyText": "I tried to do this originally. But unfortunately SslFunctionalTest uses static test fixtures so I can't push things up into a common base class as I would like to :(", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388223842", "createdAt": "2020-03-05T11:04:33Z", "author": {"login": "purplefox"}, "path": "ksql-cli/src/test/java/io/confluent/ksql/cli/SslClientAuthFunctionalTest.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.cli;\n+\n+import static io.confluent.ksql.serde.FormatFactory.JSON;\n+import static java.util.Collections.emptyMap;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.internal.matchers.ThrowableCauseMatcher.hasCause;\n+\n+import com.google.common.net.UrlEscapers;\n+import io.confluent.common.utils.IntegrationTest;\n+import io.confluent.ksql.integration.IntegrationTestHarness;\n+import io.confluent.ksql.integration.Retry;\n+import io.confluent.ksql.rest.client.KsqlClient;\n+import io.confluent.ksql.rest.client.KsqlRestClient;\n+import io.confluent.ksql.rest.client.KsqlRestClientException;\n+import io.confluent.ksql.rest.client.RestResponse;\n+import io.confluent.ksql.rest.server.TestKsqlRestApp;\n+import io.confluent.ksql.test.util.secure.ClientTrustStore;\n+import io.confluent.ksql.test.util.secure.ServerKeyStore;\n+import io.confluent.ksql.util.OrderDataProvider;\n+import io.confluent.rest.RestConfig;\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.net.ssl.SSLHandshakeException;\n+import kafka.zookeeper.ZooKeeperClientException;\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.eclipse.jetty.http.HttpStatus.Code;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.eclipse.jetty.util.ssl.SslContextFactory.Server;\n+import org.eclipse.jetty.websocket.api.Session;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketConnect;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketError;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketMessage;\n+import org.eclipse.jetty.websocket.api.annotations.WebSocket;\n+import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;\n+import org.eclipse.jetty.websocket.client.WebSocketClient;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.ExpectedException;\n+import org.junit.rules.RuleChain;\n+\n+@Category({IntegrationTest.class})\n+public class SslClientAuthFunctionalTest {\n+\n+  private static final String TOPIC_NAME = new OrderDataProvider().topicName();\n+\n+  private static final String JSON_KSQL_REQUEST = UrlEscapers.urlFormParameterEscaper()\n+      .escape(\"{\"\n+          + \" \\\"ksql\\\": \\\"PRINT \" + TOPIC_NAME + \" FROM BEGINNING;\\\"\"\n+          + \"}\");\n+\n+  public static final IntegrationTestHarness TEST_HARNESS = IntegrationTestHarness.build();\n+\n+  @SuppressWarnings(\"deprecation\")\n+  private static final TestKsqlRestApp REST_APP = TestKsqlRestApp\n+      .builder(TEST_HARNESS::kafkaBootstrapServers)\n+      .withProperties(ServerKeyStore.keyStoreProps())\n+      .withProperty(SslConfigs.SSL_CLIENT_AUTH_CONFIG, true)\n+      .withProperty(RestConfig.LISTENERS_CONFIG, \"https://localhost:0\")\n+      .build();\n+\n+  @ClassRule\n+  public static final RuleChain CHAIN = RuleChain\n+      .outerRule(Retry.of(3, ZooKeeperClientException.class, 3, TimeUnit.SECONDS))\n+      .around(TEST_HARNESS)\n+      .around(REST_APP);\n+\n+  @Rule\n+  public final ExpectedException expectedException = ExpectedException.none();\n+\n+  private Map<String, String> clientProps;\n+  private SslContextFactory sslContextFactory;\n+\n+  @BeforeClass\n+  public static void classSetUp() {\n+    final OrderDataProvider dataProvider = new OrderDataProvider();\n+    TEST_HARNESS.getKafkaCluster().createTopics(TOPIC_NAME);\n+    TEST_HARNESS.produceRows(dataProvider.topicName(), dataProvider, JSON);\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    clientProps = new HashMap<>();\n+    clientProps.put(KsqlClient.DISABLE_HOSTNAME_VERIFICATION_PROP_NAME, \"true\");\n+    sslContextFactory = new Server();\n+  }\n+\n+  @Test\n+  public void shouldNotBeAbleToUseCliIfClientDoesNotProvideCertificate() {\n+\n+    // Given:\n+    givenClientConfiguredWithoutCertificate();\n+\n+    // Then:\n+    expectedException.expect(KsqlRestClientException.class);\n+    expectedException.expectCause(is(instanceOf(ExecutionException.class)));\n+    expectedException.expectCause(hasCause(is(instanceOf(SSLHandshakeException.class))));\n+\n+    // When:\n+    canMakeCliRequest();\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToUseCliOverHttps() {\n+    // Given:\n+    givenClientConfiguredWithCertificate();\n+\n+    // When:\n+    final Code result = canMakeCliRequest();\n+\n+    // Then:\n+    assertThat(result, is(Code.OK));\n+  }\n+\n+  @Test\n+  public void shouldNotBeAbleToUseWssIfClientDoesNotTrustServerCert() throws Exception {\n+    // Given:\n+    givenClientConfiguredWithoutCertificate();\n+\n+    // Then:\n+    expectedException.expect(SSLHandshakeException.class);\n+    expectedException.expectMessage(\"Received fatal alert: handshake_failure\");\n+\n+    // When:\n+    makeWsRequest();\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToUseWss() throws Exception {\n+    // Given:\n+    givenClientConfiguredWithCertificate();\n+\n+    // When:\n+    makeWsRequest();\n+\n+    // Then: did not throw.\n+  }\n+\n+  private void givenClientConfiguredWithCertificate() {\n+\n+    String clientCertPath = ServerKeyStore.keyStoreProps()\n+        .get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n+    String clientCertPassword = ServerKeyStore.keyStoreProps()\n+        .get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n+\n+    // HTTP:\n+    clientProps = new HashMap<>();\n+    clientProps.putAll(ClientTrustStore.trustStoreProps());\n+\n+    clientProps.put(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, clientCertPath);\n+    clientProps.put(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, clientCertPassword);\n+\n+    clientProps.put(KsqlClient.DISABLE_HOSTNAME_VERIFICATION_PROP_NAME, \"true\");\n+    clientProps.put(KsqlClient.TLS_ENABLED_PROP_NAME, \"true\");\n+\n+    // WS:\n+    sslContextFactory.setTrustStorePath(ClientTrustStore.trustStorePath());\n+    sslContextFactory.setTrustStorePassword(ClientTrustStore.trustStorePassword());\n+    sslContextFactory.setKeyStorePath(clientCertPath);\n+    sslContextFactory.setKeyStorePassword(clientCertPassword);\n+    sslContextFactory.setEndpointIdentificationAlgorithm(\"\");\n+  }\n+\n+  private void givenClientConfiguredWithoutCertificate() {\n+\n+    // HTTP:\n+    clientProps = new HashMap<>();\n+    clientProps.putAll(ClientTrustStore.trustStoreProps());\n+\n+    clientProps.put(KsqlClient.DISABLE_HOSTNAME_VERIFICATION_PROP_NAME, \"true\");\n+    clientProps.put(KsqlClient.TLS_ENABLED_PROP_NAME, \"true\");\n+\n+    // WS:\n+    sslContextFactory.setTrustStorePath(ClientTrustStore.trustStorePath());\n+    sslContextFactory.setTrustStorePassword(ClientTrustStore.trustStorePassword());\n+    sslContextFactory.setEndpointIdentificationAlgorithm(\"\");\n+  }\n+\n+  private Code canMakeCliRequest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MTE4NQ=="}, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2ODk2NQ==", "bodyText": "Not sure I follow. Can we not de-dup the methods by making them static, e.g.,\nprivate Code canMakeCliRequest() { ... }\n\nbecomes\nstatic Code canMakeCliRequest(final TestKsqlRestApp restApp, final Map<String, String> clientProps) { ... }\n\n(and similarly for the others)?", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388468965", "createdAt": "2020-03-05T18:07:10Z", "author": {"login": "vcrfxia"}, "path": "ksql-cli/src/test/java/io/confluent/ksql/cli/SslClientAuthFunctionalTest.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.cli;\n+\n+import static io.confluent.ksql.serde.FormatFactory.JSON;\n+import static java.util.Collections.emptyMap;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.internal.matchers.ThrowableCauseMatcher.hasCause;\n+\n+import com.google.common.net.UrlEscapers;\n+import io.confluent.common.utils.IntegrationTest;\n+import io.confluent.ksql.integration.IntegrationTestHarness;\n+import io.confluent.ksql.integration.Retry;\n+import io.confluent.ksql.rest.client.KsqlClient;\n+import io.confluent.ksql.rest.client.KsqlRestClient;\n+import io.confluent.ksql.rest.client.KsqlRestClientException;\n+import io.confluent.ksql.rest.client.RestResponse;\n+import io.confluent.ksql.rest.server.TestKsqlRestApp;\n+import io.confluent.ksql.test.util.secure.ClientTrustStore;\n+import io.confluent.ksql.test.util.secure.ServerKeyStore;\n+import io.confluent.ksql.util.OrderDataProvider;\n+import io.confluent.rest.RestConfig;\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.net.ssl.SSLHandshakeException;\n+import kafka.zookeeper.ZooKeeperClientException;\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.eclipse.jetty.http.HttpStatus.Code;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.eclipse.jetty.util.ssl.SslContextFactory.Server;\n+import org.eclipse.jetty.websocket.api.Session;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketConnect;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketError;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketMessage;\n+import org.eclipse.jetty.websocket.api.annotations.WebSocket;\n+import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;\n+import org.eclipse.jetty.websocket.client.WebSocketClient;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.ExpectedException;\n+import org.junit.rules.RuleChain;\n+\n+@Category({IntegrationTest.class})\n+public class SslClientAuthFunctionalTest {\n+\n+  private static final String TOPIC_NAME = new OrderDataProvider().topicName();\n+\n+  private static final String JSON_KSQL_REQUEST = UrlEscapers.urlFormParameterEscaper()\n+      .escape(\"{\"\n+          + \" \\\"ksql\\\": \\\"PRINT \" + TOPIC_NAME + \" FROM BEGINNING;\\\"\"\n+          + \"}\");\n+\n+  public static final IntegrationTestHarness TEST_HARNESS = IntegrationTestHarness.build();\n+\n+  @SuppressWarnings(\"deprecation\")\n+  private static final TestKsqlRestApp REST_APP = TestKsqlRestApp\n+      .builder(TEST_HARNESS::kafkaBootstrapServers)\n+      .withProperties(ServerKeyStore.keyStoreProps())\n+      .withProperty(SslConfigs.SSL_CLIENT_AUTH_CONFIG, true)\n+      .withProperty(RestConfig.LISTENERS_CONFIG, \"https://localhost:0\")\n+      .build();\n+\n+  @ClassRule\n+  public static final RuleChain CHAIN = RuleChain\n+      .outerRule(Retry.of(3, ZooKeeperClientException.class, 3, TimeUnit.SECONDS))\n+      .around(TEST_HARNESS)\n+      .around(REST_APP);\n+\n+  @Rule\n+  public final ExpectedException expectedException = ExpectedException.none();\n+\n+  private Map<String, String> clientProps;\n+  private SslContextFactory sslContextFactory;\n+\n+  @BeforeClass\n+  public static void classSetUp() {\n+    final OrderDataProvider dataProvider = new OrderDataProvider();\n+    TEST_HARNESS.getKafkaCluster().createTopics(TOPIC_NAME);\n+    TEST_HARNESS.produceRows(dataProvider.topicName(), dataProvider, JSON);\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    clientProps = new HashMap<>();\n+    clientProps.put(KsqlClient.DISABLE_HOSTNAME_VERIFICATION_PROP_NAME, \"true\");\n+    sslContextFactory = new Server();\n+  }\n+\n+  @Test\n+  public void shouldNotBeAbleToUseCliIfClientDoesNotProvideCertificate() {\n+\n+    // Given:\n+    givenClientConfiguredWithoutCertificate();\n+\n+    // Then:\n+    expectedException.expect(KsqlRestClientException.class);\n+    expectedException.expectCause(is(instanceOf(ExecutionException.class)));\n+    expectedException.expectCause(hasCause(is(instanceOf(SSLHandshakeException.class))));\n+\n+    // When:\n+    canMakeCliRequest();\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToUseCliOverHttps() {\n+    // Given:\n+    givenClientConfiguredWithCertificate();\n+\n+    // When:\n+    final Code result = canMakeCliRequest();\n+\n+    // Then:\n+    assertThat(result, is(Code.OK));\n+  }\n+\n+  @Test\n+  public void shouldNotBeAbleToUseWssIfClientDoesNotTrustServerCert() throws Exception {\n+    // Given:\n+    givenClientConfiguredWithoutCertificate();\n+\n+    // Then:\n+    expectedException.expect(SSLHandshakeException.class);\n+    expectedException.expectMessage(\"Received fatal alert: handshake_failure\");\n+\n+    // When:\n+    makeWsRequest();\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToUseWss() throws Exception {\n+    // Given:\n+    givenClientConfiguredWithCertificate();\n+\n+    // When:\n+    makeWsRequest();\n+\n+    // Then: did not throw.\n+  }\n+\n+  private void givenClientConfiguredWithCertificate() {\n+\n+    String clientCertPath = ServerKeyStore.keyStoreProps()\n+        .get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n+    String clientCertPassword = ServerKeyStore.keyStoreProps()\n+        .get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n+\n+    // HTTP:\n+    clientProps = new HashMap<>();\n+    clientProps.putAll(ClientTrustStore.trustStoreProps());\n+\n+    clientProps.put(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, clientCertPath);\n+    clientProps.put(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, clientCertPassword);\n+\n+    clientProps.put(KsqlClient.DISABLE_HOSTNAME_VERIFICATION_PROP_NAME, \"true\");\n+    clientProps.put(KsqlClient.TLS_ENABLED_PROP_NAME, \"true\");\n+\n+    // WS:\n+    sslContextFactory.setTrustStorePath(ClientTrustStore.trustStorePath());\n+    sslContextFactory.setTrustStorePassword(ClientTrustStore.trustStorePassword());\n+    sslContextFactory.setKeyStorePath(clientCertPath);\n+    sslContextFactory.setKeyStorePassword(clientCertPassword);\n+    sslContextFactory.setEndpointIdentificationAlgorithm(\"\");\n+  }\n+\n+  private void givenClientConfiguredWithoutCertificate() {\n+\n+    // HTTP:\n+    clientProps = new HashMap<>();\n+    clientProps.putAll(ClientTrustStore.trustStoreProps());\n+\n+    clientProps.put(KsqlClient.DISABLE_HOSTNAME_VERIFICATION_PROP_NAME, \"true\");\n+    clientProps.put(KsqlClient.TLS_ENABLED_PROP_NAME, \"true\");\n+\n+    // WS:\n+    sslContextFactory.setTrustStorePath(ClientTrustStore.trustStorePath());\n+    sslContextFactory.setTrustStorePassword(ClientTrustStore.trustStorePassword());\n+    sslContextFactory.setEndpointIdentificationAlgorithm(\"\");\n+  }\n+\n+  private Code canMakeCliRequest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MTE4NQ=="}, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ3NjIwNw==", "bodyText": "Then to keep the individual tests cleaner each can have:\nprivate Code canMakeCliRequest() {\n    return canMakeCliRequest(REST_APP, clientProps);\n}\n\n(and similar).\nThese methods would still have to be duplicated between the two tests but they seem tiny enough and the actual implementation of the helper methods would only appear in one place. WDYT?", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388476207", "createdAt": "2020-03-05T18:21:20Z", "author": {"login": "vcrfxia"}, "path": "ksql-cli/src/test/java/io/confluent/ksql/cli/SslClientAuthFunctionalTest.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.cli;\n+\n+import static io.confluent.ksql.serde.FormatFactory.JSON;\n+import static java.util.Collections.emptyMap;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.internal.matchers.ThrowableCauseMatcher.hasCause;\n+\n+import com.google.common.net.UrlEscapers;\n+import io.confluent.common.utils.IntegrationTest;\n+import io.confluent.ksql.integration.IntegrationTestHarness;\n+import io.confluent.ksql.integration.Retry;\n+import io.confluent.ksql.rest.client.KsqlClient;\n+import io.confluent.ksql.rest.client.KsqlRestClient;\n+import io.confluent.ksql.rest.client.KsqlRestClientException;\n+import io.confluent.ksql.rest.client.RestResponse;\n+import io.confluent.ksql.rest.server.TestKsqlRestApp;\n+import io.confluent.ksql.test.util.secure.ClientTrustStore;\n+import io.confluent.ksql.test.util.secure.ServerKeyStore;\n+import io.confluent.ksql.util.OrderDataProvider;\n+import io.confluent.rest.RestConfig;\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+import javax.net.ssl.SSLHandshakeException;\n+import kafka.zookeeper.ZooKeeperClientException;\n+import org.apache.kafka.common.config.SslConfigs;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.http.HttpStatus;\n+import org.eclipse.jetty.http.HttpStatus.Code;\n+import org.eclipse.jetty.util.ssl.SslContextFactory;\n+import org.eclipse.jetty.util.ssl.SslContextFactory.Server;\n+import org.eclipse.jetty.websocket.api.Session;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketConnect;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketError;\n+import org.eclipse.jetty.websocket.api.annotations.OnWebSocketMessage;\n+import org.eclipse.jetty.websocket.api.annotations.WebSocket;\n+import org.eclipse.jetty.websocket.client.ClientUpgradeRequest;\n+import org.eclipse.jetty.websocket.client.WebSocketClient;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.ExpectedException;\n+import org.junit.rules.RuleChain;\n+\n+@Category({IntegrationTest.class})\n+public class SslClientAuthFunctionalTest {\n+\n+  private static final String TOPIC_NAME = new OrderDataProvider().topicName();\n+\n+  private static final String JSON_KSQL_REQUEST = UrlEscapers.urlFormParameterEscaper()\n+      .escape(\"{\"\n+          + \" \\\"ksql\\\": \\\"PRINT \" + TOPIC_NAME + \" FROM BEGINNING;\\\"\"\n+          + \"}\");\n+\n+  public static final IntegrationTestHarness TEST_HARNESS = IntegrationTestHarness.build();\n+\n+  @SuppressWarnings(\"deprecation\")\n+  private static final TestKsqlRestApp REST_APP = TestKsqlRestApp\n+      .builder(TEST_HARNESS::kafkaBootstrapServers)\n+      .withProperties(ServerKeyStore.keyStoreProps())\n+      .withProperty(SslConfigs.SSL_CLIENT_AUTH_CONFIG, true)\n+      .withProperty(RestConfig.LISTENERS_CONFIG, \"https://localhost:0\")\n+      .build();\n+\n+  @ClassRule\n+  public static final RuleChain CHAIN = RuleChain\n+      .outerRule(Retry.of(3, ZooKeeperClientException.class, 3, TimeUnit.SECONDS))\n+      .around(TEST_HARNESS)\n+      .around(REST_APP);\n+\n+  @Rule\n+  public final ExpectedException expectedException = ExpectedException.none();\n+\n+  private Map<String, String> clientProps;\n+  private SslContextFactory sslContextFactory;\n+\n+  @BeforeClass\n+  public static void classSetUp() {\n+    final OrderDataProvider dataProvider = new OrderDataProvider();\n+    TEST_HARNESS.getKafkaCluster().createTopics(TOPIC_NAME);\n+    TEST_HARNESS.produceRows(dataProvider.topicName(), dataProvider, JSON);\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    clientProps = new HashMap<>();\n+    clientProps.put(KsqlClient.DISABLE_HOSTNAME_VERIFICATION_PROP_NAME, \"true\");\n+    sslContextFactory = new Server();\n+  }\n+\n+  @Test\n+  public void shouldNotBeAbleToUseCliIfClientDoesNotProvideCertificate() {\n+\n+    // Given:\n+    givenClientConfiguredWithoutCertificate();\n+\n+    // Then:\n+    expectedException.expect(KsqlRestClientException.class);\n+    expectedException.expectCause(is(instanceOf(ExecutionException.class)));\n+    expectedException.expectCause(hasCause(is(instanceOf(SSLHandshakeException.class))));\n+\n+    // When:\n+    canMakeCliRequest();\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToUseCliOverHttps() {\n+    // Given:\n+    givenClientConfiguredWithCertificate();\n+\n+    // When:\n+    final Code result = canMakeCliRequest();\n+\n+    // Then:\n+    assertThat(result, is(Code.OK));\n+  }\n+\n+  @Test\n+  public void shouldNotBeAbleToUseWssIfClientDoesNotTrustServerCert() throws Exception {\n+    // Given:\n+    givenClientConfiguredWithoutCertificate();\n+\n+    // Then:\n+    expectedException.expect(SSLHandshakeException.class);\n+    expectedException.expectMessage(\"Received fatal alert: handshake_failure\");\n+\n+    // When:\n+    makeWsRequest();\n+  }\n+\n+  @Test\n+  public void shouldBeAbleToUseWss() throws Exception {\n+    // Given:\n+    givenClientConfiguredWithCertificate();\n+\n+    // When:\n+    makeWsRequest();\n+\n+    // Then: did not throw.\n+  }\n+\n+  private void givenClientConfiguredWithCertificate() {\n+\n+    String clientCertPath = ServerKeyStore.keyStoreProps()\n+        .get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n+    String clientCertPassword = ServerKeyStore.keyStoreProps()\n+        .get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n+\n+    // HTTP:\n+    clientProps = new HashMap<>();\n+    clientProps.putAll(ClientTrustStore.trustStoreProps());\n+\n+    clientProps.put(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG, clientCertPath);\n+    clientProps.put(SslConfigs.SSL_KEYSTORE_PASSWORD_CONFIG, clientCertPassword);\n+\n+    clientProps.put(KsqlClient.DISABLE_HOSTNAME_VERIFICATION_PROP_NAME, \"true\");\n+    clientProps.put(KsqlClient.TLS_ENABLED_PROP_NAME, \"true\");\n+\n+    // WS:\n+    sslContextFactory.setTrustStorePath(ClientTrustStore.trustStorePath());\n+    sslContextFactory.setTrustStorePassword(ClientTrustStore.trustStorePassword());\n+    sslContextFactory.setKeyStorePath(clientCertPath);\n+    sslContextFactory.setKeyStorePassword(clientCertPassword);\n+    sslContextFactory.setEndpointIdentificationAlgorithm(\"\");\n+  }\n+\n+  private void givenClientConfiguredWithoutCertificate() {\n+\n+    // HTTP:\n+    clientProps = new HashMap<>();\n+    clientProps.putAll(ClientTrustStore.trustStoreProps());\n+\n+    clientProps.put(KsqlClient.DISABLE_HOSTNAME_VERIFICATION_PROP_NAME, \"true\");\n+    clientProps.put(KsqlClient.TLS_ENABLED_PROP_NAME, \"true\");\n+\n+    // WS:\n+    sslContextFactory.setTrustStorePath(ClientTrustStore.trustStorePath());\n+    sslContextFactory.setTrustStorePassword(ClientTrustStore.trustStorePassword());\n+    sslContextFactory.setEndpointIdentificationAlgorithm(\"\");\n+  }\n+\n+  private Code canMakeCliRequest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MTE4NQ=="}, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDc2MTgxOnYy", "diffSide": "RIGHT", "path": "ksql-execution/src/main/java/io/confluent/ksql/services/SimpleKsqlClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo1Mjo1MlrOFyK5eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODowNzo1NFrOFyeSIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MTY3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Send a request to remote Ksql server to inquire to inquire about which state stores the remote\n          \n          \n            \n               * Send a request to remote Ksql server to inquire about which state stores the remote\n          \n      \n    \n    \n  \n\nsuper nit (not your code): typo.", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388151672", "createdAt": "2020-03-05T08:52:52Z", "author": {"login": "vcrfxia"}, "path": "ksql-execution/src/main/java/io/confluent/ksql/services/SimpleKsqlClient.java", "diffHunk": "@@ -69,13 +69,19 @@ void makeAsyncHeartbeatRequest(\n   RestResponse<ClusterStatusResponse> makeClusterStatusRequest(URI serverEndPoint);\n \n   /**\n-   * Send a request to remote Ksql server to inquire to inquire about which state stores the\n-   * remote server maintains as an active and standby.\n-   * @param serverEndPoint the remote destination.\n+   * Send a request to remote Ksql server to inquire to inquire about which state stores the remote", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIyNDUyMA==", "bodyText": "ack... also shouldn't it be \"enquire\" ? (Or maybe that's a US vs UK thing, but inquire seems wrong to me)", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388224520", "createdAt": "2020-03-05T11:05:52Z", "author": {"login": "purplefox"}, "path": "ksql-execution/src/main/java/io/confluent/ksql/services/SimpleKsqlClient.java", "diffHunk": "@@ -69,13 +69,19 @@ void makeAsyncHeartbeatRequest(\n   RestResponse<ClusterStatusResponse> makeClusterStatusRequest(URI serverEndPoint);\n \n   /**\n-   * Send a request to remote Ksql server to inquire to inquire about which state stores the\n-   * remote server maintains as an active and standby.\n-   * @param serverEndPoint the remote destination.\n+   * Send a request to remote Ksql server to inquire to inquire about which state stores the remote", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MTY3Mg=="}, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ2OTI4MQ==", "bodyText": "Yup, US vs. UK (though this blog suggests both versions are used in the UK) -- haha!", "url": "https://github.com/confluentinc/ksql/pull/4691#discussion_r388469281", "createdAt": "2020-03-05T18:07:54Z", "author": {"login": "vcrfxia"}, "path": "ksql-execution/src/main/java/io/confluent/ksql/services/SimpleKsqlClient.java", "diffHunk": "@@ -69,13 +69,19 @@ void makeAsyncHeartbeatRequest(\n   RestResponse<ClusterStatusResponse> makeClusterStatusRequest(URI serverEndPoint);\n \n   /**\n-   * Send a request to remote Ksql server to inquire to inquire about which state stores the\n-   * remote server maintains as an active and standby.\n-   * @param serverEndPoint the remote destination.\n+   * Send a request to remote Ksql server to inquire to inquire about which state stores the remote", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE1MTY3Mg=="}, "originalCommit": {"oid": "e93bb2f5edab0c94c24b0e691c538d74e4161a27"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2036, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}