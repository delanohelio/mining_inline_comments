{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMzcxMDY5", "number": 5611, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjo0Mjo1MVrOEF623Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNToxNTo1NVrOEIaZXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjQyNjUzOnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-28-create-or-replace", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjo0Mjo1MVrOGkZc_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNjozODozMVrOGmbBEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxODk0Mg==", "bodyText": "Does this include removing columns from the output schema, as well as adding columns?\nWhat about changing the type of a column?\nRemoving and changing the type of existing columns has implications for downstream queries. The simplest solution would be to not allow either of these in this first pass, but not sure of the intent of the KLIP from this statement.  Can we make sure the doc is clearer on this please?\nIMHO it's crucial that we ensure dumping the full database schema and running it on a fresh instance would succeed and result in all the same output schemas and data.", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r440818942", "createdAt": "2020-06-16T12:42:51Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-28-create-or-replace", "diffHunk": "@@ -0,0 +1,156 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+**environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed31a2478e49956e469d11e11bccf74ef5c472c"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MDUzMQ==", "bodyText": "For example,\nLet's say we have:\nCREATE STREAM S1 AS \n   SELECT ID, NAME, COST FROM BLAH;\n\nCREATE STREAM S2 AS\n   SELECT ID, NAME FROM S1;\nBut then we run:\n-- drops the `NAME` column from the projection:\nCREATE OR REPLACE S1 AS\n   SELECT ID, COST FROM BLAH;\nNow S2 references a column in S1 that doesn't exist in the DB schema!  While this would work with formats that can support evolution and optional fields etc... it leaves the DB schema inconsistent, i.e. we lose referential integrity of the db schema.", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r440950531", "createdAt": "2020-06-16T15:39:24Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-28-create-or-replace", "diffHunk": "@@ -0,0 +1,156 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+**environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxODk0Mg=="}, "originalCommit": {"oid": "aed31a2478e49956e469d11e11bccf74ef5c472c"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MzAwMA==", "bodyText": "Personally, I'd go with not allowing rename / removing initially.\nLater we can build up system tables that track what columns are actually used in downstream queries and only allows you to remove / rename columns that aren't in use.", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r440953000", "createdAt": "2020-06-16T15:42:47Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-28-create-or-replace", "diffHunk": "@@ -0,0 +1,156 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+**environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxODk0Mg=="}, "originalCommit": {"oid": "aed31a2478e49956e469d11e11bccf74ef5c472c"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MzY3NQ==", "bodyText": "Would be interesting to see what a trad db does if you try and rename/remove a column in DB if its used in a materialized view?", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r440953675", "createdAt": "2020-06-16T15:43:39Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-28-create-or-replace", "diffHunk": "@@ -0,0 +1,156 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+**environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxODk0Mg=="}, "originalCommit": {"oid": "aed31a2478e49956e469d11e11bccf74ef5c472c"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2MTgxMQ==", "bodyText": "@big-andy-coates I feel like this should follow the schema compatibility rules defined in schema registry, shouldn't it?\nIf schema registry isn't configured, maybe fall back to FORWARD, then one can only remove nullable fields, but I don't have a strong opinion on that", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r440961811", "createdAt": "2020-06-16T15:54:48Z", "author": {"login": "PeterLindner"}, "path": "design-proposals/klip-28-create-or-replace", "diffHunk": "@@ -0,0 +1,156 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+**environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxODk0Mg=="}, "originalCommit": {"oid": "aed31a2478e49956e469d11e11bccf74ef5c472c"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4NDMyMA==", "bodyText": "@PeterLinder originally I was thinking along the same lines as you, but I think Andy has me convinced. While removing fields would be acceptable from a data schema evolution perspective, the table schema evolution would be broken by removing fields that are used in downstream queries.", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r440984320", "createdAt": "2020-06-16T16:28:47Z", "author": {"login": "agavra"}, "path": "design-proposals/klip-28-create-or-replace", "diffHunk": "@@ -0,0 +1,156 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+**environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxODk0Mg=="}, "originalCommit": {"oid": "aed31a2478e49956e469d11e11bccf74ef5c472c"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk5NDQyMg==", "bodyText": "Added:\nNote that _Schema Evolution_ compatibility is defined by the limitations of the serialization\nformat that is used with the added restrictions against removing fields and changing types to ensure\nreferential integrity of ksqlDB tables. This way, downstream query output schemas willn not be affected\nby upstream schema evolution.", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r440994422", "createdAt": "2020-06-16T16:43:20Z", "author": {"login": "agavra"}, "path": "design-proposals/klip-28-create-or-replace", "diffHunk": "@@ -0,0 +1,156 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+**environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxODk0Mg=="}, "originalCommit": {"oid": "aed31a2478e49956e469d11e11bccf74ef5c472c"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjI0NTc4Ng==", "bodyText": "Great! Though note its not just removing columns, but also renaming columns!", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r442245786", "createdAt": "2020-06-18T13:56:43Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-28-create-or-replace", "diffHunk": "@@ -0,0 +1,156 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+**environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxODk0Mg=="}, "originalCommit": {"oid": "aed31a2478e49956e469d11e11bccf74ef5c472c"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk0MTcxNQ==", "bodyText": "From my perspective, there isn't be a difference between removing and renaming (renaming=removing and adding). If I'm checking that all columns from the previous schema exist in the new one, if one was renamed that check would fail!", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r442941715", "createdAt": "2020-06-19T16:38:31Z", "author": {"login": "agavra"}, "path": "design-proposals/klip-28-create-or-replace", "diffHunk": "@@ -0,0 +1,156 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+**environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgxODk0Mg=="}, "originalCommit": {"oid": "aed31a2478e49956e469d11e11bccf74ef5c472c"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjQzNDk2OnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-28-create-or-replace", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjo0NDo1MFrOGkZh8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoyODo0M1rOGkl0Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyMDIwOA==", "bodyText": "Missing details...", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r440820208", "createdAt": "2020-06-16T12:44:50Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-28-create-or-replace", "diffHunk": "@@ -0,0 +1,156 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+**environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be\n+    communicated that the users will not get `backfill` or `ordered` properties for stateful.\n+- _Source modifying_ upgrades will not be supported\n+- _Topology changes_ will not be supported\n+\n+There are currently discussions that discuss how to expand the support of some of these upgrades,\n+but we believe there is value in supporting the limitted set described above.\n+\n+For step 4, we need to be able to generate queryIDs differently for `CREATE OR REPLACE` statements\n+than for others (i.e. it shouldn't just be the offset of the command, but rather the same queryID \n+as the original query.) One simple way to implement this is to allow the queryID to be specified\n+in the command topic. Since the engine receiving the request has a complete view of the engine\n+metadata, it can determine the queryID to enqueue onto the command topic.\n+\n+### On \"INSERT INTO\"\n+\n+Insert into can eventually be replaced with `UNION` as proposed in [KLIP-17](https://github.com/confluentinc/ksql/pull/4125),\n+but that must happen in lock-step with this proposal. At first, we will support `CREATE OR REPLACE`\n+and `INSERT INTO`. Then, we will add support for `UNION`, allowing us to model consecutive `INSERT INTO`\n+statements as replacing unions with larger unions (essentially adding an extra source to the union).\n+The approach for that will require a slight modification to the four steps outlined in the design\n+section above.\n+\n+## Test plan\n+\n+_What are the failure scenarios you are going to cover in your testing? What scale testing do you plan to run? What about peformance and load testing? It goes ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed31a2478e49956e469d11e11bccf74ef5c472c"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyMTUyNw==", "bodyText": "added a section", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r441021527", "createdAt": "2020-06-16T17:28:43Z", "author": {"login": "agavra"}, "path": "design-proposals/klip-28-create-or-replace", "diffHunk": "@@ -0,0 +1,156 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+**environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be\n+    communicated that the users will not get `backfill` or `ordered` properties for stateful.\n+- _Source modifying_ upgrades will not be supported\n+- _Topology changes_ will not be supported\n+\n+There are currently discussions that discuss how to expand the support of some of these upgrades,\n+but we believe there is value in supporting the limitted set described above.\n+\n+For step 4, we need to be able to generate queryIDs differently for `CREATE OR REPLACE` statements\n+than for others (i.e. it shouldn't just be the offset of the command, but rather the same queryID \n+as the original query.) One simple way to implement this is to allow the queryID to be specified\n+in the command topic. Since the engine receiving the request has a complete view of the engine\n+metadata, it can determine the queryID to enqueue onto the command topic.\n+\n+### On \"INSERT INTO\"\n+\n+Insert into can eventually be replaced with `UNION` as proposed in [KLIP-17](https://github.com/confluentinc/ksql/pull/4125),\n+but that must happen in lock-step with this proposal. At first, we will support `CREATE OR REPLACE`\n+and `INSERT INTO`. Then, we will add support for `UNION`, allowing us to model consecutive `INSERT INTO`\n+statements as replacing unions with larger unions (essentially adding an extra source to the union).\n+The approach for that will require a slight modification to the four steps outlined in the design\n+section above.\n+\n+## Test plan\n+\n+_What are the failure scenarios you are going to cover in your testing? What scale testing do you plan to run? What about peformance and load testing? It goes ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyMDIwOA=="}, "originalCommit": {"oid": "aed31a2478e49956e469d11e11bccf74ef5c472c"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjQ0MDc5OnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-28-create-or-replace", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjo0NjoyMVrOGkZljQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToyMDo1MFrOGkgoDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyMTEzMw==", "bodyText": "Rather than add a new file, can we not just add the OR REPLACE bit to the current CREATE TABLE AS and CREATE STREAM AS documentation?", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r440821133", "createdAt": "2020-06-16T12:46:21Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-28-create-or-replace", "diffHunk": "@@ -0,0 +1,156 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+**environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be\n+    communicated that the users will not get `backfill` or `ordered` properties for stateful.\n+- _Source modifying_ upgrades will not be supported\n+- _Topology changes_ will not be supported\n+\n+There are currently discussions that discuss how to expand the support of some of these upgrades,\n+but we believe there is value in supporting the limitted set described above.\n+\n+For step 4, we need to be able to generate queryIDs differently for `CREATE OR REPLACE` statements\n+than for others (i.e. it shouldn't just be the offset of the command, but rather the same queryID \n+as the original query.) One simple way to implement this is to allow the queryID to be specified\n+in the command topic. Since the engine receiving the request has a complete view of the engine\n+metadata, it can determine the queryID to enqueue onto the command topic.\n+\n+### On \"INSERT INTO\"\n+\n+Insert into can eventually be replaced with `UNION` as proposed in [KLIP-17](https://github.com/confluentinc/ksql/pull/4125),\n+but that must happen in lock-step with this proposal. At first, we will support `CREATE OR REPLACE`\n+and `INSERT INTO`. Then, we will add support for `UNION`, allowing us to model consecutive `INSERT INTO`\n+statements as replacing unions with larger unions (essentially adding an extra source to the union).\n+The approach for that will require a slight modification to the four steps outlined in the design\n+section above.\n+\n+## Test plan\n+\n+_What are the failure scenarios you are going to cover in your testing? What scale testing do you plan to run? What about peformance and load testing? It goes \n+without saying that most classes should have unit tests._\n+\n+## Documentation Updates\n+\n+We will add the following `md` file:\n+\n+### Synopsis:\n+\n+```sql\n+CREATE OR REPLACE (STREAM | TABLE) source_name \n+    [WITH ( property_name = expression [, ...] )]\n+    AS query;\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed31a2478e49956e469d11e11bccf74ef5c472c"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzNjQ2Mw==", "bodyText": "+1", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r440936463", "createdAt": "2020-06-16T15:20:50Z", "author": {"login": "rmoff"}, "path": "design-proposals/klip-28-create-or-replace", "diffHunk": "@@ -0,0 +1,156 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+**environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be\n+    communicated that the users will not get `backfill` or `ordered` properties for stateful.\n+- _Source modifying_ upgrades will not be supported\n+- _Topology changes_ will not be supported\n+\n+There are currently discussions that discuss how to expand the support of some of these upgrades,\n+but we believe there is value in supporting the limitted set described above.\n+\n+For step 4, we need to be able to generate queryIDs differently for `CREATE OR REPLACE` statements\n+than for others (i.e. it shouldn't just be the offset of the command, but rather the same queryID \n+as the original query.) One simple way to implement this is to allow the queryID to be specified\n+in the command topic. Since the engine receiving the request has a complete view of the engine\n+metadata, it can determine the queryID to enqueue onto the command topic.\n+\n+### On \"INSERT INTO\"\n+\n+Insert into can eventually be replaced with `UNION` as proposed in [KLIP-17](https://github.com/confluentinc/ksql/pull/4125),\n+but that must happen in lock-step with this proposal. At first, we will support `CREATE OR REPLACE`\n+and `INSERT INTO`. Then, we will add support for `UNION`, allowing us to model consecutive `INSERT INTO`\n+statements as replacing unions with larger unions (essentially adding an extra source to the union).\n+The approach for that will require a slight modification to the four steps outlined in the design\n+section above.\n+\n+## Test plan\n+\n+_What are the failure scenarios you are going to cover in your testing? What scale testing do you plan to run? What about peformance and load testing? It goes \n+without saying that most classes should have unit tests._\n+\n+## Documentation Updates\n+\n+We will add the following `md` file:\n+\n+### Synopsis:\n+\n+```sql\n+CREATE OR REPLACE (STREAM | TABLE) source_name \n+    [WITH ( property_name = expression [, ...] )]\n+    AS query;\n+```", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyMTEzMw=="}, "originalCommit": {"oid": "aed31a2478e49956e469d11e11bccf74ef5c472c"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjQ3MjUyOnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-28-create-or-replace", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjo1NDozM1rOGkZ5fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjo1NDozM1rOGkZ5fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgyNjIzOA==", "bodyText": "One simple way to implement this is to allow the queryID to be specified in the command topic.\n\nFYI, the query plan already includes the query id.", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r440826238", "createdAt": "2020-06-16T12:54:33Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-28-create-or-replace", "diffHunk": "@@ -0,0 +1,156 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+**environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be\n+    communicated that the users will not get `backfill` or `ordered` properties for stateful.\n+- _Source modifying_ upgrades will not be supported\n+- _Topology changes_ will not be supported\n+\n+There are currently discussions that discuss how to expand the support of some of these upgrades,\n+but we believe there is value in supporting the limitted set described above.\n+\n+For step 4, we need to be able to generate queryIDs differently for `CREATE OR REPLACE` statements\n+than for others (i.e. it shouldn't just be the offset of the command, but rather the same queryID \n+as the original query.) One simple way to implement this is to allow the queryID to be specified", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed31a2478e49956e469d11e11bccf74ef5c472c"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzEwMzU0OnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-28-create-or-replace", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxMTo0OFrOGkgJfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjozMDoxMFrOGkjmqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyODYzOA==", "bodyText": "Instead of\n\nbut these methods burden users with extra complexity and lack guardrails\n\nhow about\n\nbut to directly expose these methods to users through ksqlDB would burden them with extra complexity and lack guardrails\n\nOr, perhaps I'm misunderstanding the intention here?", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r440928638", "createdAt": "2020-06-16T15:11:48Z", "author": {"login": "rmoff"}, "path": "design-proposals/klip-28-create-or-replace", "diffHunk": "@@ -0,0 +1,156 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed31a2478e49956e469d11e11bccf74ef5c472c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk4NTI1OQ==", "bodyText": "I think both statements are true - the intention in this KLIP is also to call out that there are improvements that need to be made in Kafka Streams to ensure that an upgrade is valid. Some of that burden will be on KSQL in the short term, but the intention is to address some of these concerns inside Kafka Streams as well", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r440985259", "createdAt": "2020-06-16T16:30:10Z", "author": {"login": "agavra"}, "path": "design-proposals/klip-28-create-or-replace", "diffHunk": "@@ -0,0 +1,156 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkyODYzOA=="}, "originalCommit": {"oid": "aed31a2478e49956e469d11e11bccf74ef5c472c"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzEzNjE1OnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-28-create-or-replace", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNToxODoxOFrOGkgdnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozODoxOVrOGkhb1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzMzc4OA==", "bodyText": "Which Environment would be for a Simple query that didn't require backfill? For example, a query with a predicate that needed to be changed but only future-processed records needed to reflect it (an example would be changing the alert threshold for a monitor)", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r440933788", "createdAt": "2020-06-16T15:18:18Z", "author": {"login": "rmoff"}, "path": "design-proposals/klip-28-create-or-replace", "diffHunk": "@@ -0,0 +1,156 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+**environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed31a2478e49956e469d11e11bccf74ef5c472c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0OTcxOQ==", "bodyText": "I haven't specified this, but the intention is that none of the environments need to apply (so in your example it would be simply a \"Simple\" query). I will clarify the KLIP", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r440949719", "createdAt": "2020-06-16T15:38:19Z", "author": {"login": "agavra"}, "path": "design-proposals/klip-28-create-or-replace", "diffHunk": "@@ -0,0 +1,156 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+**environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkzMzc4OA=="}, "originalCommit": {"oid": "aed31a2478e49956e469d11e11bccf74ef5c472c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODg2NDU3OnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-28-create-or-replace.md", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzoxMDo1NlrOGnywwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDo0MjoyNlrOGn5ysQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM3OTMyOQ==", "bodyText": "What's an example of this? Changing the number of streams threads, and other streams properties?\nWhat about changing parameters such as the number of output partitions -- and other properties from the \"WITH\" clause, such as output format? Will that be supported?", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r444379329", "createdAt": "2020-06-23T17:10:56Z", "author": {"login": "vcrfxia"}, "path": "design-proposals/klip-28-create-or-replace.md", "diffHunk": "@@ -0,0 +1,200 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+(optionally) **environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99494da8845c64262edd974d1032f86dc7bb7e6e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM5NTc5OQ==", "bodyText": "What's an example of this?\n\nI don't have a good example as available in the language today, but things like scaling out partitions or streams threads would such \"scaling\" operations. We could imagine changing number of stream threads might be one such thing (e.g. CREATE OR REPLACE ... WITH(num_threads=1000))\nThe scope of what this KLIP will implement doesn't really address any scaling changes (such as changing number of output partitions) but that could be some advanced upgrades that we want to support in the future. I felt it was important to include this in the table though for completeness", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r444395799", "createdAt": "2020-06-23T17:39:30Z", "author": {"login": "agavra"}, "path": "design-proposals/klip-28-create-or-replace.md", "diffHunk": "@@ -0,0 +1,200 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+(optionally) **environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM3OTMyOQ=="}, "originalCommit": {"oid": "99494da8845c64262edd974d1032f86dc7bb7e6e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ3NzAxOQ==", "bodyText": "When a CREATE OR REPLACE statement is issued, does the new query use the query properties (e.g., number of streams threads) set at the time of the CREATE OR REPLACE statement or does it maintain properties from the original query (if present)? I assume the latter but think this is worth calling out explicitly. If this is the case, then changing the number of streams threads is already supported under this proposal.", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r444477019", "createdAt": "2020-06-23T20:07:50Z", "author": {"login": "vcrfxia"}, "path": "design-proposals/klip-28-create-or-replace.md", "diffHunk": "@@ -0,0 +1,200 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+(optionally) **environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM3OTMyOQ=="}, "originalCommit": {"oid": "99494da8845c64262edd974d1032f86dc7bb7e6e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4MDYyMg==", "bodyText": "It would indeed use the most recent one - so I suppose it is already supported \ud83d\ude02 I can update the KLIP if you'd like, though perhaps just seeing this discussion is sufficient documentation", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r444480622", "createdAt": "2020-06-23T20:14:56Z", "author": {"login": "agavra"}, "path": "design-proposals/klip-28-create-or-replace.md", "diffHunk": "@@ -0,0 +1,200 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+(optionally) **environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM3OTMyOQ=="}, "originalCommit": {"oid": "99494da8845c64262edd974d1032f86dc7bb7e6e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ4NTk2Ng==", "bodyText": "Are we planning to do any validation on the new query properties, in terms of checking for compatibility? For example, I'm not entirely clear on what happens if a Streams app is restarted with a different value for replication.factor (assuming the internal topics are already created with the old value) but I suspect there are combinations of values where this might fail?", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r444485966", "createdAt": "2020-06-23T20:25:26Z", "author": {"login": "vcrfxia"}, "path": "design-proposals/klip-28-create-or-replace.md", "diffHunk": "@@ -0,0 +1,200 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+(optionally) **environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM3OTMyOQ=="}, "originalCommit": {"oid": "99494da8845c64262edd974d1032f86dc7bb7e6e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5MTU1NQ==", "bodyText": "Are we planning to do any validation on the new query properties, in terms of checking for compatibility?\n\nThe intention for compatibility was to setup a whitelist of items that can change, and if anything else changes we consider the upgrade incompatible. Honestly, I hadn't considered the query properties until now, but they definitely seem something important to put into the compatibility calculus.\nAs for your specific question, I think upping the replication factor is supported but reducing it is not (though I might be wrong on that one).", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r444491555", "createdAt": "2020-06-23T20:36:36Z", "author": {"login": "agavra"}, "path": "design-proposals/klip-28-create-or-replace.md", "diffHunk": "@@ -0,0 +1,200 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+(optionally) **environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM3OTMyOQ=="}, "originalCommit": {"oid": "99494da8845c64262edd974d1032f86dc7bb7e6e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5MjM5Mw==", "bodyText": "Sounds good. Just wanted to check we had a plan :)", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r444492393", "createdAt": "2020-06-23T20:38:15Z", "author": {"login": "vcrfxia"}, "path": "design-proposals/klip-28-create-or-replace.md", "diffHunk": "@@ -0,0 +1,200 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+(optionally) **environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM3OTMyOQ=="}, "originalCommit": {"oid": "99494da8845c64262edd974d1032f86dc7bb7e6e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5NDUxMw==", "bodyText": "I appreciate the thorough review \ud83d\ude04", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r444494513", "createdAt": "2020-06-23T20:42:26Z", "author": {"login": "agavra"}, "path": "design-proposals/klip-28-create-or-replace.md", "diffHunk": "@@ -0,0 +1,200 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+(optionally) **environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM3OTMyOQ=="}, "originalCommit": {"oid": "99494da8845c64262edd974d1032f86dc7bb7e6e"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODg2NTczOnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-28-create-or-replace.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzoxMToxNlrOGnyxfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzoyNjoxNVrOGnzUBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM3OTUxOQ==", "bodyText": "\"No plans to implement these migrations\" at this time, or ever?", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r444379519", "createdAt": "2020-06-23T17:11:16Z", "author": {"login": "vcrfxia"}, "path": "design-proposals/klip-28-create-or-replace.md", "diffHunk": "@@ -0,0 +1,200 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+(optionally) **environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99494da8845c64262edd974d1032f86dc7bb7e6e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4ODM1OQ==", "bodyText": "Ever - these are things like changing a stream to table, or a table to a stream. Things that just don't make sense in our mental model.", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r444388359", "createdAt": "2020-06-23T17:26:15Z", "author": {"login": "agavra"}, "path": "design-proposals/klip-28-create-or-replace.md", "diffHunk": "@@ -0,0 +1,200 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+(optionally) **environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM3OTUxOQ=="}, "originalCommit": {"oid": "99494da8845c64262edd974d1032f86dc7bb7e6e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODg2NzYzOnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-28-create-or-replace.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzoxMTo0OVrOGnyytA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo1NDo1NVrOGoYmZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM3OTgyOA==", "bodyText": "Does this mean the only thing that's supported is adding fields? What about reordering fields? Reordering fields would be breaking in the case of DELIMITED.", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r444379828", "createdAt": "2020-06-23T17:11:49Z", "author": {"login": "vcrfxia"}, "path": "design-proposals/klip-28-create-or-replace.md", "diffHunk": "@@ -0,0 +1,200 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+(optionally) **environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be\n+    communicated that the users will not get `backfill` or `ordered` properties for stateful.\n+- _Source modifying_ upgrades will not be supported\n+- _Topology changes_ will not be supported\n+\n+Note that _Schema Evolution_ compatibility is defined by the limitations of the serialization\n+format that is used with the added restrictions against removing fields and changing types to ensure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99494da8845c64262edd974d1032f86dc7bb7e6e"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4ODAzOA==", "bodyText": "see my note below - that would be a limitation of the serialization format. Reordering would be OK in JSON for example, but not in delimited (and I don't think in AVRO or PROTOBUF either). But essentially the only \"useful\" query upgrade for schema evolution is adding fields - which I suspect is a vast majority of the use cases for schema evolution.", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r444388038", "createdAt": "2020-06-23T17:25:41Z", "author": {"login": "agavra"}, "path": "design-proposals/klip-28-create-or-replace.md", "diffHunk": "@@ -0,0 +1,200 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+(optionally) **environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be\n+    communicated that the users will not get `backfill` or `ordered` properties for stateful.\n+- _Source modifying_ upgrades will not be supported\n+- _Topology changes_ will not be supported\n+\n+Note that _Schema Evolution_ compatibility is defined by the limitations of the serialization\n+format that is used with the added restrictions against removing fields and changing types to ensure", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM3OTgyOA=="}, "originalCommit": {"oid": "99494da8845c64262edd974d1032f86dc7bb7e6e"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk3MDcwNQ==", "bodyText": "We've even got to be careful when reordering JSON columns.  Once we support multiple key columns, changing the order of key columns would break the binary compatibility of keys.\nIMHO, best just to no allow column re-ordering. I can't see it being a much asked for thing anyway.", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r444970705", "createdAt": "2020-06-24T15:14:08Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-28-create-or-replace.md", "diffHunk": "@@ -0,0 +1,200 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+(optionally) **environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be\n+    communicated that the users will not get `backfill` or `ordered` properties for stateful.\n+- _Source modifying_ upgrades will not be supported\n+- _Topology changes_ will not be supported\n+\n+Note that _Schema Evolution_ compatibility is defined by the limitations of the serialization\n+format that is used with the added restrictions against removing fields and changing types to ensure", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM3OTgyOA=="}, "originalCommit": {"oid": "99494da8845c64262edd974d1032f86dc7bb7e6e"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5OTI2OA==", "bodyText": "Fair, the ethos of this project is to be extra restrictive and lift restrictions later so we may as well be extra cautious up front.", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r444999268", "createdAt": "2020-06-24T15:54:55Z", "author": {"login": "agavra"}, "path": "design-proposals/klip-28-create-or-replace.md", "diffHunk": "@@ -0,0 +1,200 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+(optionally) **environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be\n+    communicated that the users will not get `backfill` or `ordered` properties for stateful.\n+- _Source modifying_ upgrades will not be supported\n+- _Topology changes_ will not be supported\n+\n+Note that _Schema Evolution_ compatibility is defined by the limitations of the serialization\n+format that is used with the added restrictions against removing fields and changing types to ensure", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM3OTgyOA=="}, "originalCommit": {"oid": "99494da8845c64262edd974d1032f86dc7bb7e6e"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODg2OTQ3OnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-28-create-or-replace.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzoxMjoyMVrOGnyz0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzoyMzo0NFrOGnzOPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4MDExNA==", "bodyText": "Is this true? Wouldn't adding a field would break downstream queries in the case of DELIMITED?", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r444380114", "createdAt": "2020-06-23T17:12:21Z", "author": {"login": "vcrfxia"}, "path": "design-proposals/klip-28-create-or-replace.md", "diffHunk": "@@ -0,0 +1,200 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+(optionally) **environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be\n+    communicated that the users will not get `backfill` or `ordered` properties for stateful.\n+- _Source modifying_ upgrades will not be supported\n+- _Topology changes_ will not be supported\n+\n+Note that _Schema Evolution_ compatibility is defined by the limitations of the serialization\n+format that is used with the added restrictions against removing fields and changing types to ensure\n+referential integrity of ksqlDB tables. This way, downstream query output schemas willn not be affected", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99494da8845c64262edd974d1032f86dc7bb7e6e"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4Njg3OQ==", "bodyText": "Yeah - that's why I mention \"defined by the limitations of the serialization format that is used\" and then there's added restrictions against removing fields and changing types, even if the format supports that. Changing a type, for example, would be supported by delimited and JSON - but I plan on explicitly restricting that.", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r444386879", "createdAt": "2020-06-23T17:23:44Z", "author": {"login": "agavra"}, "path": "design-proposals/klip-28-create-or-replace.md", "diffHunk": "@@ -0,0 +1,200 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+(optionally) **environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be\n+    communicated that the users will not get `backfill` or `ordered` properties for stateful.\n+- _Source modifying_ upgrades will not be supported\n+- _Topology changes_ will not be supported\n+\n+Note that _Schema Evolution_ compatibility is defined by the limitations of the serialization\n+format that is used with the added restrictions against removing fields and changing types to ensure\n+referential integrity of ksqlDB tables. This way, downstream query output schemas willn not be affected", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4MDExNA=="}, "originalCommit": {"oid": "99494da8845c64262edd974d1032f86dc7bb7e6e"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODg2OTY1OnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-28-create-or-replace.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzoxMjoyNVrOGnyz_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzoxMjoyNVrOGnyz_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4MDE1Nw==", "bodyText": "Cool!", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r444380157", "createdAt": "2020-06-23T17:12:25Z", "author": {"login": "vcrfxia"}, "path": "design-proposals/klip-28-create-or-replace.md", "diffHunk": "@@ -0,0 +1,200 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+(optionally) **environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be\n+    communicated that the users will not get `backfill` or `ordered` properties for stateful.\n+- _Source modifying_ upgrades will not be supported\n+- _Topology changes_ will not be supported\n+\n+Note that _Schema Evolution_ compatibility is defined by the limitations of the serialization\n+format that is used with the added restrictions against removing fields and changing types to ensure\n+referential integrity of ksqlDB tables. This way, downstream query output schemas willn not be affected\n+by upstream schema evolution.\n+\n+There are currently discussions that discuss how to expand the support of some of these upgrades,\n+but we believe there is value in supporting the limitted set described above.\n+\n+For step 4, we need to be able to generate queryIDs differently for `CREATE OR REPLACE` statements\n+than for others (i.e. it shouldn't just be the offset of the command, but rather the same queryID \n+as the original query.) One simple way to implement this is to allow the queryID to be specified\n+in the command topic. Since the engine receiving the request has a complete view of the engine\n+metadata, it can determine the queryID to enqueue onto the command topic.\n+\n+### On \"INSERT INTO\"\n+\n+Insert into can eventually be replaced with `UNION` as proposed in [KLIP-17](https://github.com/confluentinc/ksql/pull/4125),\n+but that must happen in lock-step with this proposal. At first, we will support `CREATE OR REPLACE`\n+and `INSERT INTO`. Then, we will add support for `UNION`, allowing us to model consecutive `INSERT INTO`\n+statements as replacing unions with larger unions (essentially adding an extra source to the union).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99494da8845c64262edd974d1032f86dc7bb7e6e"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODg3MDc5OnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-28-create-or-replace.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzoxMjo0MlrOGny0sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzoxMjo0MlrOGny0sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4MDMzNg==", "bodyText": "super nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)\n          \n          \n            \n            | Upgrade | Transparent | Transparent upgrades change the way something is computed (e.g. improving a UDF performance)", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r444380336", "createdAt": "2020-06-23T17:12:42Z", "author": {"login": "vcrfxia"}, "path": "design-proposals/klip-28-create-or-replace.md", "diffHunk": "@@ -0,0 +1,200 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _In Discussion_ | \n+**Discussion**: _link to the design discussion PR_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+(optionally) **environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computer (e.g. improving a UDF performance)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99494da8845c64262edd974d1032f86dc7bb7e6e"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjU2NTQwOnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-28-create-or-replace.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNToxNTo1NVrOGoW7qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo1NDoxM1rOGoYkbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk3MTk0NQ==", "bodyText": "Not just removing fields, but also renaming fields.", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r444971945", "createdAt": "2020-06-24T15:15:55Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-28-create-or-replace.md", "diffHunk": "@@ -0,0 +1,200 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _Approved_ | \n+**Discussion**: _https://github.com/confluentinc/ksql/pull/5611_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+(optionally) **environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computed (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be\n+    communicated that the users will not get `backfill` or `ordered` properties for stateful.\n+- _Source modifying_ upgrades will not be supported\n+- _Topology changes_ will not be supported\n+\n+Note that _Schema Evolution_ compatibility is defined by the limitations of the serialization\n+format that is used with the added restrictions against removing fields and changing types to ensure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1816f3333083c41e8c7146118a4ae26e06bd4ac"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5ODc2NQ==", "bodyText": "Copying from above:\n\nFrom my perspective, there isn't be a difference between removing and renaming (renaming=removing and adding). If I'm checking that all columns from the previous schema exist in the new one, if one was renamed that check would fail!\n\nThe reason I'm pedantic about this is that figuring out whether a field is \"renamed\" is actually pretty darn tough!", "url": "https://github.com/confluentinc/ksql/pull/5611#discussion_r444998765", "createdAt": "2020-06-24T15:54:13Z", "author": {"login": "agavra"}, "path": "design-proposals/klip-28-create-or-replace.md", "diffHunk": "@@ -0,0 +1,200 @@\n+# KLIP 28 - Introduce CREATE OR REPLACE\n+\n+**Author**: agavra | \n+**Release Target**: 0.11 | \n+**Status**: _Approved_ | \n+**Discussion**: _https://github.com/confluentinc/ksql/pull/5611_\n+\n+**tl;dr:** _CREATE OR REPLACE is a mechanism geared toward enabling in-place ksqlDB query evolution._\n+           \n+## Motivation and background\n+\n+Production deployments of databases are never static; they evolve as application and business \n+requirements change. To that end, all popular data stores have ways of managing and manipulating \n+existing data. For stream processing applications, a user may want to modify their application as \n+a result of:\n+\n+- Business Requirements: requirements simply change over time\n+- Schema Evolution: the incoming data or required output has been modified\n+- Optimizations: the same application can be executed more efficiently (either by user or engine)\n+\n+At time of writing, ksqlDB provides a crude mechanism for altering its application behavior: dropping \n+a query and restarting it at the earliest or latest offset. While this often works well in development \n+environments, there are limitations to its applicability in production:\n+\n+- Data Retention: the earliest available offset may not correspond with the beginning of time\n+- Downtime: the delta between terminating and catch-up may be out of the application\u2019s SLO\n+- Output Routing: populating to the old output topic will produce duplicates while using a new output topic will require cascading migrations\n+- Compute: recomputing the complete history for a query may not be feasible\n+\n+Kafka Streams provides more granular mechanisms (e.g. restarting queries with different behaviors \n+but identical consumer groups), but these methods burden users with extra complexity and lack guardrails.\n+\n+## Scope\n+\n+To better understand the scope of this KLIP and any future improvements, we define a taxonomy on \n+query upgrades as any combination of three types of characteristics: **source query, upgrade** and\n+(optionally) **environment**:\n+\n+| **Category** | **Characteristic** | **Description** |\n+|----------|----------------|-------------|\n+| Query | Stateful | Stateful queries maintain local storage |\n+| | Windowed | Windowed queries maintain a limited amount of state specified by a window in time\n+| | Joined | Joined queries read from multiple sources\n+| | Multistage | Multistage queries contain intermediate, non-user visible topics in Kafka\n+| | Nondeterministic | Nondeterministic queries may produce different results when executing identical input\n+| | Simple | Queries with none of the above characteristics\n+| Upgrade | Transparent | Transparent upgrades change the way something is computed (e.g. improving a UDF performance)\n+| | Data Selection | Data selecting query upgrades change which/how many events are emitted\n+| | Schema Evolution | Schema evolving query upgrades change the output type of the data |\n+| | Source Modifying | These upgrades change the source data, whether by means of modifying a JOIN or swapping out a source |\n+| | Topology | These upgrades are invisible to the user, but change the topology, such as the number of sub-topologies or the ordering of operations (e.g. filter push down) |\n+| | Scaling | Scaling upgrades change the physical properties of the query in order to enable better performance characteristics. |\n+| | Unsupported | Unsupported upgrades are ones that will semantically change the query in an unsupported way. There are no plans to implement these migrations. |\n+| Environment | Backfill | Backfill requires the output data to be accurate not just from a point in time, but from the earliest point of retained history |\n+| | Cascading | Cascading environments contain queries that are not terminal, but rather feed into downstream stream processing tasks |\n+| | Exactly Once | Exactly Once environments do not allow for data duplication or missed events |\n+| | Ordered | Ordered environments require that a single offset delineates pre- and post-migration (no events are interleaved) |\n+| | Live | Live environments describe queries that cannot afford downtime, either by means of acting as live storage (e.g. responding to pull queries) or feeding into high availability systems (powering important functionality) |\n+\n+### What is in scope\n+\n+- Specify a syntax that can support arbitrary upgrades\n+- Design a validator to fail unsupported upgrades\n+- Design a mechanism for upgrading queries under limited scope\n+\n+### What is not in scope\n+\n+The Design section below enumerates which upgrades are out of scope\n+\n+## Value/Return\n+\n+This KLIP will represent a significant step forward in the operability of ksqlDB in production, as\n+noted in the background and motivation section.\n+\n+## Public APIS\n+\n+The syntax `CREATE OR REPLACE (STREAM | TABLE) source_name WITH (key=value, ...) AS query;` will be\n+introduced to allow users to specify an existing stream or table to replace with a new query that\n+will resume from the same processing point as any previously existing query.\n+\n+## Design\n+\n+If the `source_name` does not yet exist, a `CREATE OR REPLACE` statement functions identically to\n+a normal `CREATE` statement. Otherwise, ksqlDB executes the following:\n+\n+1. Identify the original `queryID` that populates the source (`INSERT INTO` discussed later)\n+2. Ensure the upgrade is valid\n+3. Terminate `queryID`\n+4. Start the new query under the same `queryID`\n+\n+A few changes need to happen in order to make this work. For 1, we need to maintain a mapping from\n+source to queryID(s). If the source has multiple associated ids (in the case of `INSERT INTO`) then\n+the upgrade will fail and not terminate any queries.\n+\n+For step 2, there will be a component to determine whether two topologies are \"upgrade\n+compatible\"; the first iterations, which will be delivered as part of this KLIP, will only allow\n+for the most basic upgrades: \n+\n+- Any _transparent_ upgrade will be supported\n+- Any _data selection_ upgrade will be supported\n+- _Schema evolution_ upgrades will be supported on simple and stateful queries, but it will be\n+    communicated that the users will not get `backfill` or `ordered` properties for stateful.\n+- _Source modifying_ upgrades will not be supported\n+- _Topology changes_ will not be supported\n+\n+Note that _Schema Evolution_ compatibility is defined by the limitations of the serialization\n+format that is used with the added restrictions against removing fields and changing types to ensure", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk3MTk0NQ=="}, "originalCommit": {"oid": "e1816f3333083c41e8c7146118a4ae26e06bd4ac"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3151, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}