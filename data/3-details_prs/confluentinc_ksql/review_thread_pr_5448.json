{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMDc2NTMw", "number": 5448, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMzo1ODowNVrOD-bjNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzozNDoxMlrOD-2zkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Nzg5Njg0OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/InsertsStreamEndpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMzo1ODowNVrOGYhzvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzozMDoxM1rOGZNa6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3MjkyNA==", "bodyText": "Should this be ERROR_CODE_NOT_FOUND instead?", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r428372924", "createdAt": "2020-05-20T23:58:05Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/InsertsStreamEndpoint.java", "diffHunk": "@@ -66,17 +68,20 @@ private DataSource getDataSource(\n   ) {\n     final DataSource dataSource = metaStore.getSource(sourceName);\n     if (dataSource == null) {\n-      throw new KsqlException(\"Cannot insert values into an unknown stream: \"\n-          + sourceName);\n+      throw new KsqlApiException(\n+          \"Cannot insert values into an unknown stream: \" + sourceName, ERROR_CODE_BAD_STATEMENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38accc45ebf2b14874bffa5e903141ecd3e0c86c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4NzQ2Ng==", "bodyText": "I think BAD_STATEMENT is ok. NOT _FOUND is more if the uri doesn't exist.", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r429087466", "createdAt": "2020-05-22T07:30:13Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/InsertsStreamEndpoint.java", "diffHunk": "@@ -66,17 +68,20 @@ private DataSource getDataSource(\n   ) {\n     final DataSource dataSource = metaStore.getSource(sourceName);\n     if (dataSource == null) {\n-      throw new KsqlException(\"Cannot insert values into an unknown stream: \"\n-          + sourceName);\n+      throw new KsqlApiException(\n+          \"Cannot insert values into an unknown stream: \" + sourceName, ERROR_CODE_BAD_STATEMENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3MjkyNA=="}, "originalCommit": {"oid": "38accc45ebf2b14874bffa5e903141ecd3e0c86c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTcxNTUxOnYy", "diffSide": "RIGHT", "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzo0OTozMFrOGYzf-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMzozODo0M1rOGZl-5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2Mjc3OA==", "bodyText": "Why are we converting to double here? Surely this will lose precision in some cases?", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r428662778", "createdAt": "2020-05-21T13:49:30Z", "author": {"login": "purplefox"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java", "diffHunk": "@@ -282,7 +282,7 @@ public KsqlArray add(final Boolean value) {\n    * @return a reference to this\n    */\n   public KsqlArray add(final BigDecimal value) {\n-    delegate.add(value);\n+    delegate.add(value.doubleValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b244de077369605fe07cbe03dbab312c2eb9f10"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNTA4OA==", "bodyText": "The Vert.x JSON types don't accept BigDecimal. For example,\nnew JsonArray().add(new BigDecimal(11.1));\n\nresults in\njava.lang.IllegalStateException: Illegal type in JsonObject: class java.math.BigDecimal\n\n\tat io.vertx.core.json.JsonObject.checkAndCopy(JsonObject.java:1072)\n\tat io.vertx.core.json.JsonArray.add(JsonArray.java:446)", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r429235088", "createdAt": "2020-05-22T13:07:46Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java", "diffHunk": "@@ -282,7 +282,7 @@ public KsqlArray add(final Boolean value) {\n    * @return a reference to this\n    */\n   public KsqlArray add(final BigDecimal value) {\n-    delegate.add(value);\n+    delegate.add(value.doubleValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2Mjc3OA=="}, "originalCommit": {"oid": "3b244de077369605fe07cbe03dbab312c2eb9f10"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNDA3Mg==", "bodyText": "What if the BigDecimal is added as a String? Will the row get properly deserialized on the server before inserting?", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r429314072", "createdAt": "2020-05-22T15:28:29Z", "author": {"login": "purplefox"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java", "diffHunk": "@@ -282,7 +282,7 @@ public KsqlArray add(final Boolean value) {\n    * @return a reference to this\n    */\n   public KsqlArray add(final BigDecimal value) {\n-    delegate.add(value);\n+    delegate.add(value.doubleValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2Mjc3OA=="}, "originalCommit": {"oid": "3b244de077369605fe07cbe03dbab312c2eb9f10"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM2Mjk5MA==", "bodyText": "Pretty sure the answer is no but I'll answer more definitely in a follow-up PR -- I've got one in the works to add server and client integration tests for inserting types such as decimal, array, map, etc (and fix a bug the new tests exposed) :)\nGoing to merge this and #5456 first to avoid merge hell with myself.", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r429362990", "createdAt": "2020-05-22T17:12:44Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java", "diffHunk": "@@ -282,7 +282,7 @@ public KsqlArray add(final Boolean value) {\n    * @return a reference to this\n    */\n   public KsqlArray add(final BigDecimal value) {\n-    delegate.add(value);\n+    delegate.add(value.doubleValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2Mjc3OA=="}, "originalCommit": {"oid": "3b244de077369605fe07cbe03dbab312c2eb9f10"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4OTg5Mw==", "bodyText": "Hey @purplefox I stand corrected! This PR adds integration test coverage for inserting decimals (and also arrays and maps) and works fine if we serialize BigDecimal as a string instead of a double: #5469\nAs mentioned in the PR description, the drawback is that we now have an inconsistency where the decimal type is treated differently in terms of allowable casts, compared to the other numeric types. For example:\nfinal KsqlObject obj = new KsqlObject().put(\"f1\", new BigDecimal(\"1.13\")).put(\"f2\", 12.23);\nSystem.out.println(obj.getString(\"f1\")); // This succeeds\nSystem.out.println(obj.getString(\"f2\")); // This fails with \"java.lang.ClassCastException: java.lang.Double cannot be cast to java.lang.CharSequence\"\n\nI think the drawback is acceptable so I've made the change.", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r429489893", "createdAt": "2020-05-22T23:38:43Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java", "diffHunk": "@@ -282,7 +282,7 @@ public KsqlArray add(final Boolean value) {\n    * @return a reference to this\n    */\n   public KsqlArray add(final BigDecimal value) {\n-    delegate.add(value);\n+    delegate.add(value.doubleValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2Mjc3OA=="}, "originalCommit": {"oid": "3b244de077369605fe07cbe03dbab312c2eb9f10"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTcxODk4OnYy", "diffSide": "RIGHT", "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/ClientImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzo1MDoyMFrOGYziMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzo1MDoyMFrOGYziMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2MzM0Ng==", "bodyText": "Slight optimisation: Use Collections.singletonList", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r428663346", "createdAt": "2020-05-21T13:50:20Z", "author": {"login": "purplefox"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/ClientImpl.java", "diffHunk": "@@ -118,20 +121,55 @@ public BatchedQueryResult executeQuery(\n   }\n \n   @Override\n-  public CompletableFuture<Void> insertInto(\n-      final String streamName, final Map<String, Object> row) {\n-    return null; // not yet implemented\n+  public CompletableFuture<Void> insertInto(final String streamName, final KsqlObject row) {\n+    final List<KsqlObject> rows = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b244de077369605fe07cbe03dbab312c2eb9f10"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjMyMjQ0OnYy", "diffSide": "RIGHT", "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/ClientImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzoxODo1N1rOGZNI0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDo1NjoyOVrOGZaMzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4MjgzNQ==", "bodyText": "I see that you're waiting for the whole body and parsing it manually here.\nWhen you come to do the streaming insert response this technique won't work and you'll need to use RecordParser - and then you'll end up with two ways of parsing the response.\nI think it would be simpler and easier to just use RecordParser for all cases - this will just spit out the response lines so you don't have to do any manual parsing.", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r429082835", "createdAt": "2020-05-22T07:18:57Z", "author": {"login": "purplefox"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/ClientImpl.java", "diffHunk": "@@ -213,6 +246,48 @@ private HttpClientRequest configureBasicAuth(final HttpClientRequest request) {\n     }\n   }\n \n+  private static void handleInsertIntoResponse(\n+      final HttpClientResponse response,\n+      final CompletableFuture<Void> cf,\n+      final int numRows\n+  ) {\n+    if (response.statusCode() == OK.code()) {\n+      response.bodyHandler(buffer -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1af46b9f60de725db827aca21fd44c1ed9799bb9"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4NjQ3NA==", "bodyText": "If we don't support batch inserts, then this becomes a lot simpler too :)", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r429086474", "createdAt": "2020-05-22T07:27:49Z", "author": {"login": "purplefox"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/ClientImpl.java", "diffHunk": "@@ -213,6 +246,48 @@ private HttpClientRequest configureBasicAuth(final HttpClientRequest request) {\n     }\n   }\n \n+  private static void handleInsertIntoResponse(\n+      final HttpClientResponse response,\n+      final CompletableFuture<Void> cf,\n+      final int numRows\n+  ) {\n+    if (response.statusCode() == OK.code()) {\n+      response.bodyHandler(buffer -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4MjgzNQ=="}, "originalCommit": {"oid": "1af46b9f60de725db827aca21fd44c1ed9799bb9"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5Njg0Nw==", "bodyText": "Switched to RecordParser. Might have to refactor this again when we support streaming inserts, though. We'll see.", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r429296847", "createdAt": "2020-05-22T14:56:29Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/ClientImpl.java", "diffHunk": "@@ -213,6 +246,48 @@ private HttpClientRequest configureBasicAuth(final HttpClientRequest request) {\n     }\n   }\n \n+  private static void handleInsertIntoResponse(\n+      final HttpClientResponse response,\n+      final CompletableFuture<Void> cf,\n+      final int numRows\n+  ) {\n+    if (response.statusCode() == OK.code()) {\n+      response.bodyHandler(buffer -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4MjgzNQ=="}, "originalCommit": {"oid": "1af46b9f60de725db827aca21fd44c1ed9799bb9"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjM0MTk0OnYy", "diffSide": "RIGHT", "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/Client.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzoyNjoyOFrOGZNUzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo1NDoyOFrOGZX9MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4NTkwMw==", "bodyText": "I don't think it's useful to have an insertInto method that takes a List of Rows. When inserting rows, the actual inserts can occur our of order, and it's possible that some inserts could succeed and some could fail. Returning a single CompletableFuture means that we couldn't tell the user about individual success or failure of inserts. So on failure, it might be that some of the inserts actually succeeded, leaving the system in an inconsistent state and the user not being able to do anything useful to correct it.\nAt some point I hope we will support transactions on the client. At that point I think it would make sense to support batch inserts like this, but not until then. With transactions we can guarantee that all the inserts succeed or none.", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r429085903", "createdAt": "2020-05-22T07:26:28Z", "author": {"login": "purplefox"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/Client.java", "diffHunk": "@@ -71,9 +71,32 @@\n    */\n   BatchedQueryResult executeQuery(String sql, Map<String, Object> properties);\n \n-  CompletableFuture<Void> insertInto(String streamName, Map<String, Object> row);\n+  /**\n+   * Inserts a row into a ksqlDB stream.\n+   *\n+   * <p>The {@code CompletableFuture} will be failed if a non-200 response is received from the\n+   * server, or if the server encounters an error while processing the insertion.\n+   *\n+   * @param streamName name of the target stream\n+   * @param row the row to insert. Keys are column names and values are column values.\n+   * @return a future that completes once the server response is received\n+   */\n+  CompletableFuture<Void> insertInto(String streamName, KsqlObject row);\n+\n+  /**\n+   * Inserts the specified row(s) into a ksqlDB stream.\n+   *\n+   * <p>The {@code CompletableFuture} will be failed if a non-200 response is received from the\n+   * server, or if the server encounters an error while processing the insertion(s).\n+   *\n+   * @param streamName name of the target stream\n+   * @param rows the rows to insert. For each row, the keys are column names and values are\n+   *        column values.\n+   * @return a future that completes once the server response is received\n+   */\n+  CompletableFuture<Void> insertInto(String streamName, List<KsqlObject> rows);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1af46b9f60de725db827aca21fd44c1ed9799bb9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4NjE0OQ==", "bodyText": "This is the reason I didn't include a batch insert method like this on the original prototype.", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r429086149", "createdAt": "2020-05-22T07:27:04Z", "author": {"login": "purplefox"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/Client.java", "diffHunk": "@@ -71,9 +71,32 @@\n    */\n   BatchedQueryResult executeQuery(String sql, Map<String, Object> properties);\n \n-  CompletableFuture<Void> insertInto(String streamName, Map<String, Object> row);\n+  /**\n+   * Inserts a row into a ksqlDB stream.\n+   *\n+   * <p>The {@code CompletableFuture} will be failed if a non-200 response is received from the\n+   * server, or if the server encounters an error while processing the insertion.\n+   *\n+   * @param streamName name of the target stream\n+   * @param row the row to insert. Keys are column names and values are column values.\n+   * @return a future that completes once the server response is received\n+   */\n+  CompletableFuture<Void> insertInto(String streamName, KsqlObject row);\n+\n+  /**\n+   * Inserts the specified row(s) into a ksqlDB stream.\n+   *\n+   * <p>The {@code CompletableFuture} will be failed if a non-200 response is received from the\n+   * server, or if the server encounters an error while processing the insertion(s).\n+   *\n+   * @param streamName name of the target stream\n+   * @param rows the rows to insert. For each row, the keys are column names and values are\n+   *        column values.\n+   * @return a future that completes once the server response is received\n+   */\n+  CompletableFuture<Void> insertInto(String streamName, List<KsqlObject> rows);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4NTkwMw=="}, "originalCommit": {"oid": "1af46b9f60de725db827aca21fd44c1ed9799bb9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzOTgzNQ==", "bodyText": "Hmm OK. My reasoning for adding the batch insert was that it seems inefficient to require the users to open a separate HTTP connection for each insert, but I guess once we implement the streaming insert we can encourage them to use that instead. I'll remove the batch insert method in light of your concern that the non-transactional nature will be confusing.", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r429239835", "createdAt": "2020-05-22T13:17:30Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/Client.java", "diffHunk": "@@ -71,9 +71,32 @@\n    */\n   BatchedQueryResult executeQuery(String sql, Map<String, Object> properties);\n \n-  CompletableFuture<Void> insertInto(String streamName, Map<String, Object> row);\n+  /**\n+   * Inserts a row into a ksqlDB stream.\n+   *\n+   * <p>The {@code CompletableFuture} will be failed if a non-200 response is received from the\n+   * server, or if the server encounters an error while processing the insertion.\n+   *\n+   * @param streamName name of the target stream\n+   * @param row the row to insert. Keys are column names and values are column values.\n+   * @return a future that completes once the server response is received\n+   */\n+  CompletableFuture<Void> insertInto(String streamName, KsqlObject row);\n+\n+  /**\n+   * Inserts the specified row(s) into a ksqlDB stream.\n+   *\n+   * <p>The {@code CompletableFuture} will be failed if a non-200 response is received from the\n+   * server, or if the server encounters an error while processing the insertion(s).\n+   *\n+   * @param streamName name of the target stream\n+   * @param rows the rows to insert. For each row, the keys are column names and values are\n+   *        column values.\n+   * @return a future that completes once the server response is received\n+   */\n+  CompletableFuture<Void> insertInto(String streamName, List<KsqlObject> rows);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4NTkwMw=="}, "originalCommit": {"oid": "1af46b9f60de725db827aca21fd44c1ed9799bb9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2MDA4MQ==", "bodyText": "a separate HTTP connection for each insert\n\nThe client pools connections so it won't use a new one for each insert.", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r429260081", "createdAt": "2020-05-22T13:54:28Z", "author": {"login": "purplefox"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/Client.java", "diffHunk": "@@ -71,9 +71,32 @@\n    */\n   BatchedQueryResult executeQuery(String sql, Map<String, Object> properties);\n \n-  CompletableFuture<Void> insertInto(String streamName, Map<String, Object> row);\n+  /**\n+   * Inserts a row into a ksqlDB stream.\n+   *\n+   * <p>The {@code CompletableFuture} will be failed if a non-200 response is received from the\n+   * server, or if the server encounters an error while processing the insertion.\n+   *\n+   * @param streamName name of the target stream\n+   * @param row the row to insert. Keys are column names and values are column values.\n+   * @return a future that completes once the server response is received\n+   */\n+  CompletableFuture<Void> insertInto(String streamName, KsqlObject row);\n+\n+  /**\n+   * Inserts the specified row(s) into a ksqlDB stream.\n+   *\n+   * <p>The {@code CompletableFuture} will be failed if a non-200 response is received from the\n+   * server, or if the server encounters an error while processing the insertion(s).\n+   *\n+   * @param streamName name of the target stream\n+   * @param rows the rows to insert. For each row, the keys are column names and values are\n+   *        column values.\n+   * @return a future that completes once the server response is received\n+   */\n+  CompletableFuture<Void> insertInto(String streamName, List<KsqlObject> rows);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4NTkwMw=="}, "originalCommit": {"oid": "1af46b9f60de725db827aca21fd44c1ed9799bb9"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjM2MjQyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/InsertsStreamHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzozNDoxMlrOGZNhHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDo1NzoxOVrOGZaOpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4OTA1Mg==", "bodyText": "The logic here is similar to the failure handler in QueryStreamHandler, perhaps could consider combining it?", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r429089052", "createdAt": "2020-05-22T07:34:12Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/InsertsStreamHandler.java", "diffHunk": "@@ -159,11 +160,17 @@ private void handleArgs(final Buffer buff) {\n \n     private Void handleInsertSubscriberException(final Throwable t,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1af46b9f60de725db827aca21fd44c1ed9799bb9"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5NzMxNw==", "bodyText": "Done -- refactored into ServerUtils.", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r429297317", "createdAt": "2020-05-22T14:57:19Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/InsertsStreamHandler.java", "diffHunk": "@@ -159,11 +160,17 @@ private void handleArgs(final Buffer buff) {\n \n     private Void handleInsertSubscriberException(final Throwable t,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4OTA1Mg=="}, "originalCommit": {"oid": "1af46b9f60de725db827aca21fd44c1ed9799bb9"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3269, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}