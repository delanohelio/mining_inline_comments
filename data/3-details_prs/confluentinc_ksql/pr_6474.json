{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2OTkzMTMy", "number": 6474, "title": "feat: new syntax to interact with session variables (define/undefine/show variables)", "bodyText": "Description\nThis is part of KLIP-38 - Variable Substitution\nVariable substitution will have a follow-up PR.\nIt adds a syntax to interact with session variables:\n\nDEFINE  = '';\nUNDEFINE ;\n(LIST | SHOW) VARIABLES\n^ The KLIP proposed the use of DEFINE to list values. But I saw the SHOW more appropriate as we have SHOW and LIST syntax for other entities. I will change the KLIP after variable substitution is merged.\n\nThe syntax is added on the server-side and CLI-side.\nFor the server-side, the variable scope is seen per-request. i.e.\nRequest 1 will return the variables `x` and `y`.\n{ \n  statement: \"\n    DEFINE x = '1';\n    DEFINE y = '2';\n    SHOW VARIABLES;\n  \"\n}\n\nRequest 2 will return the variables `z`.\n{ \n  statement: \"\n    DEFINE z = '3';\n    SHOW VARIABLES;\n  \"\n}\n\nFor the CLI-side, the variable scope is during the session of the CLI. i.e.\nksql> DEFINE x = '1';\nksql> DEFINE y = '2';\nksql> SHOW VARIABLES;\n Variable Name | Value \n-----------------------\n x             | 1     \n y             | 2     \n-----------------------\nksql> DEFINE z = '3';\nksql> SHOW VARIABLES;\n Variable Name | Value \n-----------------------\n x             | 1     \n y             | 2     \n z             | 3     \n-----------------------\n\nTesting done\nAdded unit tests\nVerified manually (see above examples)\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-10-20T17:59:37Z", "url": "https://github.com/confluentinc/ksql/pull/6474", "merged": true, "mergeCommit": {"oid": "df98ef4f26451656c051125383137a969d2292ee"}, "closed": true, "closedAt": "2020-10-22T19:46:29Z", "author": {"login": "spena"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdU3g5hAFqTUxNDI5MzY5MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVF3qTABqjM5MTA0MzIzNzg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MjkzNjkx", "url": "https://github.com/confluentinc/ksql/pull/6474#pullrequestreview-514293691", "createdAt": "2020-10-22T01:11:51Z", "commit": {"oid": "177563a9c7f591deae8678f1ade747f59a3e2b62"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMToxMTo1MVrOHmNE-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQwMToxNTo1OFrOHmNJJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgyMjIwMQ==", "bodyText": "is this used anywhere for this PR?", "url": "https://github.com/confluentinc/ksql/pull/6474#discussion_r509822201", "createdAt": "2020-10-22T01:11:51Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/antlr4/io/confluent/ksql/parser/SqlBase.g4", "diffHunk": "@@ -566,6 +581,10 @@ TIMESTAMP_WITH_TIME_ZONE\n     : 'TIMESTAMP' WS 'WITH' WS 'TIME' WS 'ZONE'\n     ;\n \n+VARIABLE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "177563a9c7f591deae8678f1ade747f59a3e2b62"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgyMjkzOA==", "bodyText": "do you need to actually run through configure etc... or can you mock out the configured statements?", "url": "https://github.com/confluentinc/ksql/pull/6474#discussion_r509822938", "createdAt": "2020-10-22T01:14:48Z", "author": {"login": "agavra"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/ListVariablesExecutorTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server.execution;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.mock;\n+\n+import io.confluent.ksql.rest.SessionProperties;\n+import io.confluent.ksql.rest.entity.KsqlEntity;\n+import io.confluent.ksql.rest.entity.VariablesList;\n+import io.confluent.ksql.rest.server.TemporaryEngine;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.net.URL;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Optional;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class ListVariablesExecutorTest {\n+  @Rule\n+  public final TemporaryEngine engine = new TemporaryEngine();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "177563a9c7f591deae8678f1ade747f59a3e2b62"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTgyMzI2OQ==", "bodyText": "should we add a test on adding duplicates? we should also check to make sure that case insensitive duplicates are stilled rejected", "url": "https://github.com/confluentinc/ksql/pull/6474#discussion_r509823269", "createdAt": "2020-10-22T01:15:58Z", "author": {"login": "agavra"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/VariableExecutorTest.java", "diffHunk": "@@ -0,0 +1,168 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server.execution;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.hamcrest.Matchers.hasEntry;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThrows;\n+import static org.mockito.Mockito.mock;\n+\n+import io.confluent.ksql.parser.exception.ParseFailedException;\n+import io.confluent.ksql.rest.SessionProperties;\n+import io.confluent.ksql.rest.entity.KsqlEntity;\n+import io.confluent.ksql.rest.entity.WarningEntity;\n+import io.confluent.ksql.rest.server.TemporaryEngine;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.net.URL;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class VariableExecutorTest {\n+  @Rule\n+  public final TemporaryEngine engine = new TemporaryEngine();\n+\n+  private SessionProperties sessionProperties;\n+\n+  @Before\n+  public void setup() {\n+    sessionProperties = new SessionProperties(\n+        new HashMap<>(), mock(KsqlHostInfo.class), mock(URL.class), false);\n+  }\n+\n+  private void executeDefineVariable(final String sql) {\n+    final Optional<KsqlEntity> response = CustomExecutors.DEFINE_VARIABLE.execute(\n+        engine.configure(sql),\n+        sessionProperties,\n+        engine.getEngine(),\n+        engine.getServiceContext()\n+    );\n+    assertThat(response, is(Optional.empty()));\n+  }\n+\n+  private Optional<KsqlEntity> executeUndefineVariable(final String sql) {\n+    return CustomExecutors.UNDEFINE_VARIABLE.execute(\n+        engine.configure(sql),\n+        sessionProperties,\n+        engine.getEngine(),\n+        engine.getServiceContext()\n+    );\n+  }\n+\n+  @Test\n+  public void shouldSetVariables() {\n+    // When:\n+    executeDefineVariable(\"DEFINE var1 = 'John Peter';\");\n+    executeDefineVariable(\"DEFINE var2 = '''John Peter''';\");\n+\n+    // Then:\n+    final Map<String, String> variablesMap = sessionProperties.getSessionVariables();\n+    assertThat(variablesMap.size(), is(2));\n+    assertThat(variablesMap, hasEntry(\"var1\", \"John Peter\"));\n+    assertThat(variablesMap, hasEntry(\"var2\", \"'John Peter'\"));\n+  }\n+\n+  @Test\n+  public void shouldSetCaseInsensitiveVariables() {\n+    // When:\n+    executeDefineVariable(\"DEFINE A = 'val1';\");\n+    executeDefineVariable(\"DEFINE b = 'val2';\");\n+\n+    // Then:\n+    final Map<String, String> variablesMap = sessionProperties.getSessionVariables();\n+    assertThat(variablesMap.containsKey(\"a\"), is(true));\n+    assertThat(variablesMap.get(\"a\"), is(\"val1\"));\n+    assertThat(variablesMap.containsKey(\"A\"), is(true));\n+    assertThat(variablesMap.get(\"A\"), is(\"val1\"));\n+    assertThat(variablesMap.containsKey(\"b\"), is(true));\n+    assertThat(variablesMap.get(\"b\"), is(\"val2\"));\n+    assertThat(variablesMap.containsKey(\"B\"), is(true));\n+    assertThat(variablesMap.get(\"B\"), is(\"val2\"));\n+  }\n+\n+  @Test\n+  public void shouldUnsetVariables() {\n+    // Given:\n+    sessionProperties.setVariable(\"var1\", \"1\");\n+    sessionProperties.setVariable(\"var2\", \"2\");\n+\n+    // When:\n+    final Optional<KsqlEntity> response = executeUndefineVariable(\"UNDEFINE var1;\");\n+    assertThat(response, is(Optional.empty()));\n+\n+    // Then:\n+    final Map<String, String> variablesMap = sessionProperties.getSessionVariables();\n+    assertThat(variablesMap.size(), is(1));\n+    assertThat(variablesMap, hasEntry(\"var2\", \"2\"));\n+  }\n+\n+  @Test\n+  public void shouldUnsetCaseInsensitiveVariables() {\n+    // Given:\n+    sessionProperties.setVariable(\"VAR1\", \"1\");\n+\n+    // When:\n+    final Optional<KsqlEntity> response = executeUndefineVariable(\"UNDEFINE var1;\");\n+    assertThat(response, is(Optional.empty()));\n+\n+    // Then:\n+    final Map<String, String> variablesMap = sessionProperties.getSessionVariables();\n+    assertThat(variablesMap.size(), is(0));\n+  }\n+\n+  @Test\n+  public void shouldReturnWarningWhenUndefineAnUnknownVariable() {\n+    // When:\n+    final KsqlEntity response = executeUndefineVariable(\"UNDEFINE var1;\").get();\n+\n+    // Then:\n+    assertThat(((WarningEntity)response).getMessage(),\n+        containsString(\"Cannot undefine variable 'var1' which was never defined\"));\n+  }\n+\n+  @Test\n+  public void shouldThrowOnInvalidValues() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "177563a9c7f591deae8678f1ade747f59a3e2b62"}, "originalPosition": 148}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ac1b0df8d8fdee9ec902bcab5505b0d3f6268d9d", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/ac1b0df8d8fdee9ec902bcab5505b0d3f6268d9d", "committedDate": "2020-10-22T02:08:10Z", "message": "fix: address Almog's feedback"}, "afterCommit": {"oid": "ec1c89dd0dc1542bdd722027b70436b0ef7a0c39", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/ec1c89dd0dc1542bdd722027b70436b0ef7a0c39", "committedDate": "2020-10-22T11:26:12Z", "message": "fix: address Almog's feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57a35932131adc526633d68256bc3c8235aa01e2", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/57a35932131adc526633d68256bc3c8235aa01e2", "committedDate": "2020-10-22T17:59:50Z", "message": "feat: add syntax to DEFINE/UNDEFINE session variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19433b185281d4c6e4fb7826a17103dbe4c5a45c", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/19433b185281d4c6e4fb7826a17103dbe4c5a45c", "committedDate": "2020-10-22T17:59:50Z", "message": "feat: syntax SHOW VARIABLES to print session variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9a9ba8f618e004c58e3512a6a0f06d2865bc7aa", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/a9a9ba8f618e004c58e3512a6a0f06d2865bc7aa", "committedDate": "2020-10-22T17:59:50Z", "message": "fix: address Almog's feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec1c89dd0dc1542bdd722027b70436b0ef7a0c39", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/ec1c89dd0dc1542bdd722027b70436b0ef7a0c39", "committedDate": "2020-10-22T11:26:12Z", "message": "fix: address Almog's feedback"}, "afterCommit": {"oid": "a9a9ba8f618e004c58e3512a6a0f06d2865bc7aa", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/a9a9ba8f618e004c58e3512a6a0f06d2865bc7aa", "committedDate": "2020-10-22T17:59:50Z", "message": "fix: address Almog's feedback"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4583, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}