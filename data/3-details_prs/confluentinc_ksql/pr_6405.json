{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNTMxNTQx", "number": 6405, "title": "feat: avoid spurious tombstones in table output", "bodyText": "Description\nfixes: #3558\nAK commit apache/kafka#9156 enhances Kafka Streams so that filters on tables now avoid emitting spurious tombstones. ksqlDB now benefits from this.  Tombstones are no longer emitted to the sink topic when a HAVING clause excludes a row from the result that has never been in the result table.\nBREAKING CHANGE: This change fixes a bug where unnecessary tombstones where being emitted when a HAVING clause filtered out a row from the source that is not in the output table\nFor example, given:\n-- source stream:\nCREATE STREAM FOO (ID INT KEY, VAL INT) WITH (...);\n\n-- aggregate into a table:\nCREATE TABLE BAR AS\n    SELECT ID, SUM(VAL) AS SUM\n    FROM FOO\n    GROUP BY ID\n    HAVING SUM(VAL) > 0;\n\n\n-- insert some values into the stream:\nINSERT INTO FOO VALUES(1, -5); \nINSERT INTO FOO VALUES(1, 6); \nINSERT INTO FOO VALUES(1, -2); \nINSERT INTO FOO VALUES(1, -1); \nWhere previously the contents of the sink topic BAR would have contained records:\n\n\n\nKey\nValue\nNotes\n\n\n\n\n1.\nnull.\nSpurious tombstone: the table does not contain a row with key 1, so no tombstone is required.\n\n\n1.\n{sum=1}\nRow added as HAVING criteria now met\n\n\n1.\nnull.\nRow deleted as HAVING criteria now not met\n\n\n1.\nnull.\nSpurious tombstone: the table does not contain a row with key 1, so no tombstone is required.\n\n\n\nNote: the first record in the tom\nThe topic will now contain:\n\n\n\nKey\nValue\n\n\n\n\n1.\n{sum=1}\n\n\n1.\nnull.\n\n\n\nNote: two historical tests are currently disabled. These need an upstream fix. See #6406 for details.\nTesting done\nusual\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-10-12T12:02:44Z", "url": "https://github.com/confluentinc/ksql/pull/6405", "merged": true, "mergeCommit": {"oid": "4c7c9b51c49bf7157c28aa45f59f783139fe04dd"}, "closed": true, "closedAt": "2020-10-12T19:54:19Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdRywdgAH2gAyNTAxNTMxNTQxOmExMGU1ZWIyZDgzNjU1NDY1NjA4ZDAxMWU1MjkwMjE4ODg2YjE4Y2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdR4llYgH2gAyNTAxNTMxNTQxOjY0NDgwYmZlN2Y3NjE1ZTMxMjI3ZmJmOWM5NjNiNDg4NzkwYzliZTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a10e5eb2d83655465608d011e5290218886b18cc", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/a10e5eb2d83655465608d011e5290218886b18cc", "committedDate": "2020-10-12T12:02:08Z", "message": "chore: fix master build\n\nAK commit https://github.com/apache/kafka/pull/9156 avoids filters emitting spurious tombstones. This means the sink topic now only receives the records for the two rows that pass the filter, not the other three rows. Hence the `waitForUniqueUserRows` call now only waits for the two records to be produced before running the test.\n\nAdditionally, the name of the test was actually misleading as the logic in `KsqlMaterialization` to filter any records not passing the HAVING clause is actually installed as part of running the SQL in the test case, so those records are filtered from any pull request anyway."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NTk2OTgw", "url": "https://github.com/confluentinc/ksql/pull/6405#pullrequestreview-506596980", "createdAt": "2020-10-12T12:59:47Z", "commit": {"oid": "a10e5eb2d83655465608d011e5290218886b18cc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc7f1daf712e364ce52310acfda761049ebf62d4", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/cc7f1daf712e364ce52310acfda761049ebf62d4", "committedDate": "2020-10-12T13:31:15Z", "message": "feat: avoid supurious tombstones\n\nfixes: fixes: https://github.com/confluentinc/ksql/issues/3558"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcee2d41efacf01a7816a96cb05e074190fcd143", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/fcee2d41efacf01a7816a96cb05e074190fcd143", "committedDate": "2020-10-12T13:31:32Z", "message": "test: updated test & historical plans"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NjI5ODYw", "url": "https://github.com/confluentinc/ksql/pull/6405#pullrequestreview-506629860", "createdAt": "2020-10-12T13:41:28Z", "commit": {"oid": "a10e5eb2d83655465608d011e5290218886b18cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0MToyOFrOHf_QPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0MToyOFrOHf_QPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNDI1NA==", "bodyText": "Note: test name and comments were misleading as the extra steps KsqlMaterialization adds to handle the HAVING clause are installed as part of this test.", "url": "https://github.com/confluentinc/ksql/pull/6405#discussion_r503304254", "createdAt": "2020-10-12T13:41:28Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/materialization/ks/KsMaterializationFunctionalTest.java", "diffHunk": "@@ -619,8 +619,9 @@ public void shouldQueryMaterializedTableWithMultipleAggregationColumns() {\n   }\n \n   @Test\n-  public void shouldIgnoreHavingClause() {\n-    // Note: HAVING clause are handled centrally by KsqlMaterialization\n+  public void shouldHandleHavingClause() {\n+    // Note: HAVING clause are handled centrally by KsqlMaterialization. This logic will have been\n+    // installed as part of building the below statement:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10e5eb2d83655465608d011e5290218886b18cc"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NjMwMzI1", "url": "https://github.com/confluentinc/ksql/pull/6405#pullrequestreview-506630325", "createdAt": "2020-10-12T13:42:01Z", "commit": {"oid": "a10e5eb2d83655465608d011e5290218886b18cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0MjowMVrOHf_Rhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0MjowMVrOHf_Rhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNDU4Mw==", "bodyText": "The number of expected rows is now reduced as we no longer produce spurious tombstones.", "url": "https://github.com/confluentinc/ksql/pull/6405#discussion_r503304583", "createdAt": "2020-10-12T13:42:01Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/materialization/ks/KsMaterializationFunctionalTest.java", "diffHunk": "@@ -632,7 +633,11 @@ public void shouldIgnoreHavingClause() {\n \n     final LogicalSchema schema = schema(\"COUNT\", SqlTypes.BIGINT);\n \n-    final Map<String, GenericRow> rows = waitForUniqueUserRows(STRING_DESERIALIZER, schema);\n+    final int matches = (int) USER_DATA_PROVIDER.data().values().stream()\n+        .filter(row -> ((Long) row.get(0)) > 2)\n+        .count();\n+\n+    final Map<String, GenericRow> rows = waitForUniqueUserRows(matches, STRING_DESERIALIZER, schema);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10e5eb2d83655465608d011e5290218886b18cc"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NjMwODY0", "url": "https://github.com/confluentinc/ksql/pull/6405#pullrequestreview-506630864", "createdAt": "2020-10-12T13:42:38Z", "commit": {"oid": "a10e5eb2d83655465608d011e5290218886b18cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0MjozOVrOHf_TQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0MjozOVrOHf_TQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNTAyNw==", "bodyText": "Get's against the table for filtered out rows should return nothing.", "url": "https://github.com/confluentinc/ksql/pull/6405#discussion_r503305027", "createdAt": "2020-10-12T13:42:39Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/materialization/ks/KsMaterializationFunctionalTest.java", "diffHunk": "@@ -641,16 +646,22 @@ public void shouldIgnoreHavingClause() {\n     final MaterializedTable table = materialization.nonWindowed();\n \n     rows.forEach((rowKey, value) -> {\n+      // Rows passing the HAVING clause:\n       final Struct key = asKeyStruct(rowKey, query.getPhysicalSchema());\n \n-      final Optional<Row> expected = Optional.ofNullable(value)\n-          .map(v -> Row.of(schema, key, v, -1L));\n-\n       final Optional<Row> row = withRetry(() -> table.get(key));\n-      assertThat(row.map(Row::schema), is(expected.map(Row::schema)));\n-      assertThat(row.map(Row::key), is(expected.map(Row::key)));\n-      assertThat(row.map(Row::value), is(expected.map(Row::value)));\n+      assertThat(row.map(Row::schema), is(Optional.of(schema)));\n+      assertThat(row.map(Row::key), is(Optional.of(key)));\n+      assertThat(row.map(Row::value), is(Optional.of(value)));\n     });\n+\n+    USER_DATA_PROVIDER.data().entries().stream()\n+        .filter(e -> !rows.containsKey(e.getKey().getString(\"USERID\")))\n+        .forEach(e -> {\n+          // Rows filtered by the HAVING clause:\n+          final Optional<Row> row = withRetry(() -> table.get(e.getKey()));\n+          assertThat(row, is(Optional.empty()));\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10e5eb2d83655465608d011e5290218886b18cc"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NjMyODA2", "url": "https://github.com/confluentinc/ksql/pull/6405#pullrequestreview-506632806", "createdAt": "2020-10-12T13:44:56Z", "commit": {"oid": "cc7f1daf712e364ce52310acfda761049ebf62d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0NDo1NlrOHf_ZIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0NDo1NlrOHf_ZIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNjUyOA==", "bodyText": "Kafka Streams does not expect the aggregator to mutate its parameters. The streams code is passing in the \"old value\", which ksqlDB was then mutating and returning as the \"new value\". This meant, when then function returned, the old and new values matched.  This is obviously bad!\nCode now takes a copy and mutates that.  There is a perf hit, obviously, but it's unavoidable.", "url": "https://github.com/confluentinc/ksql/pull/6405#discussion_r503306528", "createdAt": "2020-10-12T13:44:56Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/function/udaf/KudafAggregator.java", "diffHunk": "@@ -52,9 +52,11 @@ public KudafAggregator(\n \n   @Override\n   public GenericRow apply(final K k, final GenericRow rowValue, final GenericRow aggRowValue) {\n+    final GenericRow result = GenericRow.fromList(aggRowValue.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc7f1daf712e364ce52310acfda761049ebf62d4"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NjMyOTA5", "url": "https://github.com/confluentinc/ksql/pull/6405#pullrequestreview-506632909", "createdAt": "2020-10-12T13:45:03Z", "commit": {"oid": "cc7f1daf712e364ce52310acfda761049ebf62d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0NTowM1rOHf_ZeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0NTowM1rOHf_ZeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNjYxNw==", "bodyText": "As above.", "url": "https://github.com/confluentinc/ksql/pull/6405#discussion_r503306617", "createdAt": "2020-10-12T13:45:03Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/function/udaf/KudafUndoAggregator.java", "diffHunk": "@@ -51,17 +51,19 @@ public KudafUndoAggregator(\n   @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n   @Override\n   public GenericRow apply(final Struct k, final GenericRow rowValue, final GenericRow aggRowValue) {\n+    final GenericRow result = GenericRow.fromList(aggRowValue.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc7f1daf712e364ce52310acfda761049ebf62d4"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NzQ4MTk1", "url": "https://github.com/confluentinc/ksql/pull/6405#pullrequestreview-506748195", "createdAt": "2020-10-12T16:06:33Z", "commit": {"oid": "fcee2d41efacf01a7816a96cb05e074190fcd143"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjowNjozM1rOHgEyXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNjowNjozM1rOHgEyXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5NDkwOA==", "bodyText": "Not sure I understand -- why did the old code work, in that case? Or did something change on the Streams side recently?", "url": "https://github.com/confluentinc/ksql/pull/6405#discussion_r503394908", "createdAt": "2020-10-12T16:06:33Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/function/udaf/KudafAggregator.java", "diffHunk": "@@ -52,9 +52,11 @@ public KudafAggregator(\n \n   @Override\n   public GenericRow apply(final K k, final GenericRow rowValue, final GenericRow aggRowValue) {\n+    final GenericRow result = GenericRow.fromList(aggRowValue.values());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNjUyOA=="}, "originalCommit": {"oid": "cc7f1daf712e364ce52310acfda761049ebf62d4"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bc96c1a5a40aa633d407290c3170f10109f5c84", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/8bc96c1a5a40aa633d407290c3170f10109f5c84", "committedDate": "2020-10-12T16:25:52Z", "message": "test: temp disable historical plans that fail"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64480bfe7f7615e31227fbf9c963b488790c9be1", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/64480bfe7f7615e31227fbf9c963b488790c9be1", "committedDate": "2020-10-12T18:49:41Z", "message": "test: disable _correct_ tests ;)"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4628, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}