{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwOTEwOTAy", "number": 4821, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMDoxMzo0N1rODpce6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNjoxMjozOVrODpwl1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Nzg0ODczOnYy", "diffSide": "LEFT", "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/LoggingTimestampExtractor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMDoxMzo0N1rOF4n6lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMDoxMzo0N1rOF4n6lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDkxODU0OQ==", "bodyText": "bug: note how error is never set in the returned message!", "url": "https://github.com/confluentinc/ksql/pull/4821#discussion_r394918549", "createdAt": "2020-03-19T10:13:47Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/LoggingTimestampExtractor.java", "diffHunk": "@@ -82,26 +78,4 @@ public long extract(final GenericRow row) {\n   TimestampExtractor getDelegate() {\n     return delegate;\n   }\n-\n-  public Function<ProcessingLogConfig, SchemaAndValue> timestampExtractErroMsg(\n-      final Exception e,\n-      final String row\n-  ) {\n-    return config -> {\n-      final Struct message = new Struct(ProcessingLogMessageSchema.PROCESSING_LOG_SCHEMA);\n-      final Struct error = new Struct(MessageType.RECORD_PROCESSING_ERROR.getSchema());\n-\n-      error.put(ProcessingLogMessageSchema.RECORD_PROCESSING_ERROR_FIELD_MESSAGE, e.getMessage());\n-\n-      if (config.getBoolean(ProcessingLogConfig.INCLUDE_ROWS)) {\n-        error.put(ProcessingLogMessageSchema.RECORD_PROCESSING_ERROR_FIELD_RECORD, row.toString());\n-      }\n-\n-      final List<String> cause = ErrorMessageUtil.getErrorMessages(e);\n-      cause.remove(0);\n-      error.put(ProcessingLogMessageSchema.RECORD_PROCESSING_ERROR_FIELD_CAUSE, cause);\n-\n-      return new SchemaAndValue(ProcessingLogMessageSchema.PROCESSING_LOG_SCHEMA, message);\n-    };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9515d06b874f073f94cf2f7a9276c8f88382be43"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTEyMzY3OnYy", "diffSide": "RIGHT", "path": "ksqldb-common/src/main/java/io/confluent/ksql/errors/ProductionExceptionHandlerUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNTo1NjozNlrOF5IVVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNTo1NjozNlrOF5IVVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ0OTY4NA==", "bodyText": "nit: I think you can just chain the put:\nreturn new Struct(MessageType.PRODUCTION_ERROR.getSchema())\n    .put(ProcessingLogMessageSchema.PRODUCTION_ERROR_FIELD_MESSAGE, errorMsg);", "url": "https://github.com/confluentinc/ksql/pull/4821#discussion_r395449684", "createdAt": "2020-03-20T05:56:36Z", "author": {"login": "rodesai"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/errors/ProductionExceptionHandlerUtil.java", "diffHunk": "@@ -61,19 +61,44 @@ public void configure(final Map<String, ?> configs) {\n     abstract ProductionExceptionHandlerResponse getResponse();\n   }\n \n-  private static Function<ProcessingLogConfig, SchemaAndValue> productionError(\n-      final String errorMsg) {\n-    return (config) -> {\n+  public static final class ProductionError implements ProcessingLogger.ErrorMessage {\n+\n+    private final String errorMsg;\n+\n+    public ProductionError(final String errorMsg) {\n+      this.errorMsg = errorMsg == null ? \"\" : errorMsg;\n+    }\n+\n+    @Override\n+    public SchemaAndValue get(final ProcessingLogConfig config) {\n       final Struct struct = new Struct(ProcessingLogMessageSchema.PROCESSING_LOG_SCHEMA);\n       struct.put(ProcessingLogMessageSchema.TYPE, MessageType.PRODUCTION_ERROR.getTypeId());\n-      final Struct productionError =\n-          new Struct(MessageType.PRODUCTION_ERROR.getSchema());\n-      struct.put(ProcessingLogMessageSchema.PRODUCTION_ERROR, productionError);\n-      productionError.put(\n-          ProcessingLogMessageSchema.PRODUCTION_ERROR_FIELD_MESSAGE,\n-          errorMsg);\n+      struct.put(ProcessingLogMessageSchema.PRODUCTION_ERROR, productionError());\n       return new SchemaAndValue(ProcessingLogMessageSchema.PROCESSING_LOG_SCHEMA, struct);\n-    };\n+    }\n+\n+    @Override\n+    public boolean equals(final Object o) {\n+      if (this == o) {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass()) {\n+        return false;\n+      }\n+      final ProductionError that = (ProductionError) o;\n+      return Objects.equals(errorMsg, that.errorMsg);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+      return Objects.hash(errorMsg);\n+    }\n+\n+    private Struct productionError() {\n+      final Struct productionError = new Struct(MessageType.PRODUCTION_ERROR.getSchema());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9515d06b874f073f94cf2f7a9276c8f88382be43"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTEyNzA0OnYy", "diffSide": "RIGHT", "path": "ksqldb-common/src/main/java/io/confluent/ksql/logging/processing/ProcessingLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNTo1OToyMlrOF5IXWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMTozNzo0MVrOF5QWeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1MDIwMA==", "bodyText": "nit: consider adding a recommendation that the implementer should lazy-initialize the error message, particularly if the message is being logged on a performance-critical path on which logging would typically be disabled.", "url": "https://github.com/confluentinc/ksql/pull/4821#discussion_r395450200", "createdAt": "2020-03-20T05:59:22Z", "author": {"login": "rodesai"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/logging/processing/ProcessingLogger.java", "diffHunk": "@@ -15,14 +15,30 @@\n \n package io.confluent.ksql.logging.processing;\n \n-import java.util.function.Function;\n import org.apache.kafka.connect.data.SchemaAndValue;\n \n public interface ProcessingLogger {\n+\n+  /**\n+   * The interface all error message types must implement.\n+   */\n+  interface ErrorMessage {\n+\n+    /**\n+     * Called to convert the error message into a structured message.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9515d06b874f073f94cf2f7a9276c8f88382be43"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU4MTA0OA==", "bodyText": "done.", "url": "https://github.com/confluentinc/ksql/pull/4821#discussion_r395581048", "createdAt": "2020-03-20T11:37:41Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/logging/processing/ProcessingLogger.java", "diffHunk": "@@ -15,14 +15,30 @@\n \n package io.confluent.ksql.logging.processing;\n \n-import java.util.function.Function;\n import org.apache.kafka.connect.data.SchemaAndValue;\n \n public interface ProcessingLogger {\n+\n+  /**\n+   * The interface all error message types must implement.\n+   */\n+  interface ErrorMessage {\n+\n+    /**\n+     * Called to convert the error message into a structured message.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1MDIwMA=="}, "originalCommit": {"oid": "9515d06b874f073f94cf2f7a9276c8f88382be43"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTE0MzI0OnYy", "diffSide": "RIGHT", "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/LoggingTimestampExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNjoxMjozOVrOF5Ig4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMTo1OTo1MlrOF5Q8Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1MjY0Mg==", "bodyText": "can we add a test case to LoggingTimestampExtractorTest?", "url": "https://github.com/confluentinc/ksql/pull/4821#discussion_r395452642", "createdAt": "2020-03-20T06:12:39Z", "author": {"login": "rodesai"}, "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/LoggingTimestampExtractor.java", "diffHunk": "@@ -70,7 +65,8 @@ public long extract(final GenericRow row) {\n     try {\n       return delegate.extract(row);\n     } catch (final Exception e) {\n-      logger.error(timestampExtractErroMsg(e, row.toString()));\n+      logger.error(RecordProcessingError.recordProcessingError(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9515d06b874f073f94cf2f7a9276c8f88382be43"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU5MDY3NA==", "bodyText": "Certainly can - as it's now easy now with this change!", "url": "https://github.com/confluentinc/ksql/pull/4821#discussion_r395590674", "createdAt": "2020-03-20T11:59:52Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/LoggingTimestampExtractor.java", "diffHunk": "@@ -70,7 +65,8 @@ public long extract(final GenericRow row) {\n     try {\n       return delegate.extract(row);\n     } catch (final Exception e) {\n-      logger.error(timestampExtractErroMsg(e, row.toString()));\n+      logger.error(RecordProcessingError.recordProcessingError(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1MjY0Mg=="}, "originalCommit": {"oid": "9515d06b874f073f94cf2f7a9276c8f88382be43"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3790, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}