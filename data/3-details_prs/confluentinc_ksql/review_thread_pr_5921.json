{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwMzI3MzI5", "number": 5921, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzoxMjo1M1rOEUIVlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzoxMjo1M1rOEUIVlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTQzNTczOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/services/KafkaTopicClientImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzoxMjo1M1rOG6P3fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODoyODowOFrOG7EQNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzczMDU1Nw==", "bodyText": "I originally had the code like this, but @rodesai convinced me that it shouldn't. If we know that we can't access it then we know that it exists. I feel like we should propagate this exception. Is there any issue you found that made you submit this PR?", "url": "https://github.com/confluentinc/ksql/pull/5921#discussion_r463730557", "createdAt": "2020-07-31T17:12:53Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/services/KafkaTopicClientImpl.java", "diffHunk": "@@ -173,6 +173,9 @@ public boolean isTopicExists(final String topic) {\n           RetryBehaviour.ON_RETRYABLE.and(e -> !(e instanceof UnknownTopicOrPartitionException))\n       );\n       return true;\n+    } catch (final TopicAuthorizationException e) {\n+      LOG.debug(\"Topic {} has denied authorization. Marking topic as not existing.\", topic);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1bad64a55835ac84675f396f4c60de845b930f99"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc2MDQ3Mg==", "bodyText": "There is an RBAC muckracke test that is failing because it expects a user cannot see the topic when attempting to create a stream. But it fails now with an authorization exception on the topic.\nI'm not sure what is the good solution, though, if letting fail with you don't have access to that topic, or as the old behavior which tell the user that topic does not exist. Perhaps we should do what Kafka does? If descripeTopics fails, then we should fail?", "url": "https://github.com/confluentinc/ksql/pull/5921#discussion_r463760472", "createdAt": "2020-07-31T18:16:33Z", "author": {"login": "spena"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/services/KafkaTopicClientImpl.java", "diffHunk": "@@ -173,6 +173,9 @@ public boolean isTopicExists(final String topic) {\n           RetryBehaviour.ON_RETRYABLE.and(e -> !(e instanceof UnknownTopicOrPartitionException))\n       );\n       return true;\n+    } catch (final TopicAuthorizationException e) {\n+      LOG.debug(\"Topic {} has denied authorization. Marking topic as not existing.\", topic);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzczMDU1Nw=="}, "originalCommit": {"oid": "1bad64a55835ac84675f396f4c60de845b930f99"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc2NjgwOA==", "bodyText": "that makes sense to me, though we should defer to security experts \ud83d\ude02", "url": "https://github.com/confluentinc/ksql/pull/5921#discussion_r463766808", "createdAt": "2020-07-31T18:30:38Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/services/KafkaTopicClientImpl.java", "diffHunk": "@@ -173,6 +173,9 @@ public boolean isTopicExists(final String topic) {\n           RetryBehaviour.ON_RETRYABLE.and(e -> !(e instanceof UnknownTopicOrPartitionException))\n       );\n       return true;\n+    } catch (final TopicAuthorizationException e) {\n+      LOG.debug(\"Topic {} has denied authorization. Marking topic as not existing.\", topic);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzczMDU1Nw=="}, "originalCommit": {"oid": "1bad64a55835ac84675f396f4c60de845b930f99"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4ODg1Mw==", "bodyText": "@agavra I updated the method. It will throw a KsqlTopicAuthorizationException instead so the error message matches all the current authorization errors. i.e. Authorization denied to Describe on topic(s): [foobar]\nI think this is better to do to avoid the below conflict:\n> show topics;\nt1\n\n> create stream t2 with (kafka_topic='t2');\nTopic 't2' not found.\n\n> create stream t2 with (kafka_topic='t2', partitions=1, replicas=1);\nAuthorization denied to Create on topic(s): [foobar]\n\nIf the user has CREATE permissions on the cluster, then the above authorization message will still be displayed because the KSQL code assumes that the thrown TopicAuthorizationException from KafkaTopicClientImpl.createTopic method is due to lack of CREATE permissions.\nIf we fix the previous issue, and add the real reason, like Authorization denied to Describe on topic(s): [foobar], then what's the reason of using Topic t2 not found. when not using the partitions/replicas properties if users can get the real reason with it?\nI am leaving your fix but returning the right exception instead.", "url": "https://github.com/confluentinc/ksql/pull/5921#discussion_r464588853", "createdAt": "2020-08-03T18:28:08Z", "author": {"login": "spena"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/services/KafkaTopicClientImpl.java", "diffHunk": "@@ -173,6 +173,9 @@ public boolean isTopicExists(final String topic) {\n           RetryBehaviour.ON_RETRYABLE.and(e -> !(e instanceof UnknownTopicOrPartitionException))\n       );\n       return true;\n+    } catch (final TopicAuthorizationException e) {\n+      LOG.debug(\"Topic {} has denied authorization. Marking topic as not existing.\", topic);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzczMDU1Nw=="}, "originalCommit": {"oid": "1bad64a55835ac84675f396f4c60de845b930f99"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3016, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}