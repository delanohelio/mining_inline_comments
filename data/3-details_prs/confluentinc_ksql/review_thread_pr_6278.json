{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMjI3Mzcz", "number": 6278, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTo0MDo0OFrOEmqcaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjo1MTowNlrOEmzx0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTc2NzQ3OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/RestoreCommandsCompactor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTo0MDo0OFrOHW0ylw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTo0MDo0OFrOHW0ylw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY5NTYzOQ==", "bodyText": "making this static is a design smell. if we need to access information from within this class we have two options (1) we can make compact return an object that is a pair of greatestQueryId and the List<QueuedCommand> (2) we can make RestoreCommandsCompactor non-static, and create the instance where we need it\nyou can read along https://stackoverflow.com/questions/7026507/why-are-static-variables-considered-evil for more reasons why", "url": "https://github.com/confluentinc/ksql/pull/6278#discussion_r493695639", "createdAt": "2020-09-23T15:40:48Z", "author": {"login": "agavra"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/RestoreCommandsCompactor.java", "diffHunk": "@@ -24,12 +24,17 @@\n import java.util.Map;\n import java.util.Optional;\n import javax.annotation.Nullable;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Util for compacting the restore commands\n  */\n public final class RestoreCommandsCompactor {\n \n+  static QueryId greatestQueryId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b6b3ddb8ad738e14c1a093b768e94fc3ecebc98"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTc2ODY4OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/RestoreCommandsCompactor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTo0MTowNVrOHW0zVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTo0MTowNVrOHW0zVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY5NTgyOA==", "bodyText": "nit: not used", "url": "https://github.com/confluentinc/ksql/pull/6278#discussion_r493695828", "createdAt": "2020-09-23T15:41:05Z", "author": {"login": "agavra"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/RestoreCommandsCompactor.java", "diffHunk": "@@ -86,6 +91,8 @@ public static CompactedNode maybeAppend(\n       if (queued.getAndDeserializeCommandId().getType() == Type.TERMINATE) {\n         final QueryId queryId = new QueryId(queued.getAndDeserializeCommandId().getEntity());\n         markShouldSkip(queryId, latestNodeWithId);\n+        //keep track of the last terminate command\n+        //lastTerminateQueryId = queryId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b6b3ddb8ad738e14c1a093b768e94fc3ecebc98"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTc4MjEyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/InteractiveStatementExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTo0NDowMFrOHW07kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNTo0NDowMFrOHW07kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzY5NzkzOQ==", "bodyText": "this is breaking an abstraction barrier - we're relying on internal implementations of the string representation of the QueryId which doesn't guarantee that it will match the format that you assume here", "url": "https://github.com/confluentinc/ksql/pull/6278#discussion_r493697939", "createdAt": "2020-09-23T15:44:00Z", "author": {"login": "agavra"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/InteractiveStatementExecutor.java", "diffHunk": "@@ -241,6 +254,13 @@ private void executePlan(\n         new CommandStatus(CommandStatus.Status.EXECUTING, \"Executing statement\")\n     );\n     final ExecuteResult result = ksqlEngine.execute(serviceContext, configured);\n+    long queryID = Long.MIN_VALUE;\n+    if (greatestQueryId.isPresent() && mode == Mode.RESTORE) {\n+      final String ltq = greatestQueryId.get().toString();\n+      final int lastIndex = ltq.lastIndexOf(\"_\");\n+      queryID = Long.parseLong(ltq.substring(lastIndex + 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b6b3ddb8ad738e14c1a093b768e94fc3ecebc98"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTI5NTM2OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/computation/CommandRunnerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjo1MDoyMlrOHXDlIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjo1MDoyMlrOHXDlIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzNzk1Mw==", "bodyText": "I'm guessing you didn't mean to keep all of these? This PR doesn't change the handleRestore syntax anymore (same throughout the PR)", "url": "https://github.com/confluentinc/ksql/pull/6278#discussion_r493937953", "createdAt": "2020-09-23T22:50:22Z", "author": {"login": "agavra"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/computation/CommandRunnerTest.java", "diffHunk": "@@ -160,9 +159,9 @@ public void shouldRunThePriorCommandsCorrectly() {\n \n     // Then:\n     final InOrder inOrder = inOrder(statementExecutor);\n-    inOrder.verify(statementExecutor).handleRestore(eq(queuedCommand1));\n-    inOrder.verify(statementExecutor).handleRestore(eq(queuedCommand2));\n-    inOrder.verify(statementExecutor).handleRestore(eq(queuedCommand3));\n+    inOrder.verify(statementExecutor).handleRestore(eq(queuedCommand1), any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90366a1a21769727398268f42a89d2d390cec238"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTI5NjgyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/computation/RecoveryTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjo1MTowNlrOHXDl_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMzoxNDo0MlrOHXENPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzODE3NA==", "bodyText": "I feel like I'm blind, what's the difference between these two tests?", "url": "https://github.com/confluentinc/ksql/pull/6278#discussion_r493938174", "createdAt": "2020-09-23T22:51:06Z", "author": {"login": "agavra"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/computation/RecoveryTest.java", "diffHunk": "@@ -707,9 +704,42 @@ public void shouldRecoverQueryIDs() {\n     final Set<QueryId> queryIdNames = queriesById(server.ksqlEngine.getPersistentQueries())\n         .keySet();\n \n-    assertThat(queryIdNames, contains(new QueryId(\"CSAS_C_0\")));\n+    assertThat(queryIdNames, contains(new QueryId(\"CSAS_C_1\")));\n   }\n \n+  @Test\n+  public void shouldIncrementQueryIDsNoPlans() {\n+    server1.submitCommands(\n+        \"CREATE STREAM A (COLUMN STRING) WITH (KAFKA_TOPIC='A', VALUE_FORMAT='JSON');\",\n+        \"CREATE STREAM B AS SELECT * FROM A;\",\n+        \"TERMINATE CSAS_B_1;\");\n+\n+    final KsqlServer server = new KsqlServer(commands);\n+    server.recover();\n+    server.submitCommands(\"CREATE STREAM C AS SELECT * FROM A;\");\n+    final Set<QueryId> queryIdNames = queriesById(server.ksqlEngine.getPersistentQueries())\n+        .keySet();\n+\n+    assertThat(queryIdNames, contains(new QueryId(\"CSAS_C_2\")));\n+  }\n+\n+  @Test\n+  public void shouldIncrementQueryIDsWithPlan() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90366a1a21769727398268f42a89d2d390cec238"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0ODIyMA==", "bodyText": "No you are not blind, I messes it up somehow. Fixed it though", "url": "https://github.com/confluentinc/ksql/pull/6278#discussion_r493948220", "createdAt": "2020-09-23T23:14:42Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/computation/RecoveryTest.java", "diffHunk": "@@ -707,9 +704,42 @@ public void shouldRecoverQueryIDs() {\n     final Set<QueryId> queryIdNames = queriesById(server.ksqlEngine.getPersistentQueries())\n         .keySet();\n \n-    assertThat(queryIdNames, contains(new QueryId(\"CSAS_C_0\")));\n+    assertThat(queryIdNames, contains(new QueryId(\"CSAS_C_1\")));\n   }\n \n+  @Test\n+  public void shouldIncrementQueryIDsNoPlans() {\n+    server1.submitCommands(\n+        \"CREATE STREAM A (COLUMN STRING) WITH (KAFKA_TOPIC='A', VALUE_FORMAT='JSON');\",\n+        \"CREATE STREAM B AS SELECT * FROM A;\",\n+        \"TERMINATE CSAS_B_1;\");\n+\n+    final KsqlServer server = new KsqlServer(commands);\n+    server.recover();\n+    server.submitCommands(\"CREATE STREAM C AS SELECT * FROM A;\");\n+    final Set<QueryId> queryIdNames = queriesById(server.ksqlEngine.getPersistentQueries())\n+        .keySet();\n+\n+    assertThat(queryIdNames, contains(new QueryId(\"CSAS_C_2\")));\n+  }\n+\n+  @Test\n+  public void shouldIncrementQueryIDsWithPlan() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzODE3NA=="}, "originalCommit": {"oid": "90366a1a21769727398268f42a89d2d390cec238"}, "originalPosition": 105}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2831, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}