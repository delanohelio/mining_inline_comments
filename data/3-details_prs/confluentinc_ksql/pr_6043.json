{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MjA2NzM3", "number": 6043, "title": "test: capture key schemas in QTT historic plans", "bodyText": "Description\nFixes #4752\nThis PR updates the \"schemas\" field of QTT historic plan specs so that instead of storing the persistence schema of the value for each source, the field now stores the logical schema and any serde options for the source. In doing so, the physical schema for both keys and values are captured.\nThis PR also moves PhysicalSchema from ksqldb-serde into ksqldb-common, and fixes some inconsistencies with existing historic plan specs.\nReview commits one at a time:\n\n\"refactor: move PhysicalSchema to common module\": straightforward move\n\"chore: update QuerySchemas to contain physical schema\": the bulk of this PR\n\"chore: fix spec files with malformed names\": fixes some historic plan specs with test case names that are inconsistent with the file paths\n\"chore: correct directory naming for historic plans\": fixes some historic plan specs with test case versions that are inconsistent with the file paths (ref: 0aed8b9)\n\"chore: regenerate specs with new format\": regenerate spec files to use the new \"schemas\" field format. There are also a few changes in post condition sources: changes to the affected files from the previous two commits are expected, as those specs were not updated as part of #5989. There are also some no-op re-ordering changes which are surprising since the order of sources should be fixed. This is worth looking into in a follow-up but does not affect this PR in terms of correctness.\n\nTesting done\nTest-only change. The changes in the engine are only to classes and methods used exclusively for QTT.\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-08-18T05:12:31Z", "url": "https://github.com/confluentinc/ksql/pull/6043", "merged": true, "mergeCommit": {"oid": "994c90263b0402ad7976c6d6710d5fc0816e0c8b"}, "closed": true, "closedAt": "2020-08-19T15:51:44Z", "author": {"login": "vcrfxia"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc_9QEIAH2gAyNDY5MjA2NzM3OmVkNTQwNTYzZDIzNWU3NTM4OGJmY2VjYmMyZWQ1ZWJiN2RmYzkxYjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAcwFhABqjM2NzExNTAzODg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ed540563d235e75388bfcecbc2ed5ebb7dfc91b9", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/ed540563d235e75388bfcecbc2ed5ebb7dfc91b9", "committedDate": "2020-08-18T02:05:04Z", "message": "refactor: move PhysicalSchema to common module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09a77824466dbca8a17ef6c95d2b884b9913646d", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/09a77824466dbca8a17ef6c95d2b884b9913646d", "committedDate": "2020-08-18T05:01:56Z", "message": "chore: update QuerySchemas to contain physical schema"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59aecf53ca2c4236464f8872a49c5973222c469d", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/59aecf53ca2c4236464f8872a49c5973222c469d", "committedDate": "2020-08-18T05:01:59Z", "message": "chore: fix spec files with malformed names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef945bb2ea96dac7a945311ef04d185437ec5b6c", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/ef945bb2ea96dac7a945311ef04d185437ec5b6c", "committedDate": "2020-08-18T05:01:59Z", "message": "chore: correct directory naming for historic plans"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82f162405acbe4210cf407ace11245935b73e239", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/82f162405acbe4210cf407ace11245935b73e239", "committedDate": "2020-08-18T05:01:59Z", "message": "chore: regenerate specs with new format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MTI2NzMy", "url": "https://github.com/confluentinc/ksql/pull/6043#pullrequestreview-469126732", "createdAt": "2020-08-18T08:56:22Z", "commit": {"oid": "09a77824466dbca8a17ef6c95d2b884b9913646d"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwODo1NjoyMlrOHCKGPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTowMDozMFrOHCKQLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAyNDYzNw==", "bodyText": "NON_EMPTY would be better, so it's only included in the plan if something is set.  You'll need to change the constructor to take:\n@JsonProperty(\"serdeOptions\") final Optional<Set<SerdeOption>> serdeOptions\nand then default it to an empty set if nothing provided.", "url": "https://github.com/confluentinc/ksql/pull/6043#discussion_r472024637", "createdAt": "2020-08-18T08:56:22Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/model/SchemaNode.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.test.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.confluent.ksql.serde.PhysicalSchema;\n+import io.confluent.ksql.serde.SerdeOption;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public class SchemaNode {\n+\n+  private String logicalSchema;\n+  private Set<SerdeOption> serdeOptions;\n+\n+  public SchemaNode(\n+      @JsonProperty(\"schema\") final String logicalSchema,\n+      @JsonProperty(\"serdeOptions\") final Set<SerdeOption> serdeOptions\n+  ) {\n+    this.logicalSchema = Objects.requireNonNull(logicalSchema, \"logicalSchema\");\n+    this.serdeOptions = Objects.requireNonNull(serdeOptions, \"serdeOptions\");\n+  }\n+\n+  @JsonProperty(\"schema\")\n+  public String getLogicalSchema() {\n+    return logicalSchema;\n+  }\n+\n+  @JsonInclude(JsonInclude.Include.NON_NULL)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09a77824466dbca8a17ef6c95d2b884b9913646d"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAyNTQ1Ng==", "bodyText": "There's already a Jackson  serializer and deserializer for LogicalSchema, so you can probably just use LogicalSchema rather than toString it.", "url": "https://github.com/confluentinc/ksql/pull/6043#discussion_r472025456", "createdAt": "2020-08-18T08:57:42Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/model/SchemaNode.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.test.model;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.confluent.ksql.serde.PhysicalSchema;\n+import io.confluent.ksql.serde.SerdeOption;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+public class SchemaNode {\n+\n+  private String logicalSchema;\n+  private Set<SerdeOption> serdeOptions;\n+\n+  public SchemaNode(\n+      @JsonProperty(\"schema\") final String logicalSchema,\n+      @JsonProperty(\"serdeOptions\") final Set<SerdeOption> serdeOptions\n+  ) {\n+    this.logicalSchema = Objects.requireNonNull(logicalSchema, \"logicalSchema\");\n+    this.serdeOptions = Objects.requireNonNull(serdeOptions, \"serdeOptions\");\n+  }\n+\n+  @JsonProperty(\"schema\")\n+  public String getLogicalSchema() {\n+    return logicalSchema;\n+  }\n+\n+  @JsonInclude(JsonInclude.Include.NON_NULL)\n+  public Set<SerdeOption> getSerdeOptions() {\n+    return serdeOptions;\n+  }\n+\n+  @Override\n+  public boolean equals(final Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+    final SchemaNode that = (SchemaNode) o;\n+    return logicalSchema.equals(that.logicalSchema)\n+        && serdeOptions.equals(that.serdeOptions);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(logicalSchema, serdeOptions);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"SchemaNode{\"\n+            + \"logicalSchema='\" + logicalSchema + '\\''\n+            + \", serdeOptions=\" + serdeOptions\n+            + '}';\n+  }\n+\n+  public static SchemaNode fromPhysicalSchema(final PhysicalSchema physicalSchema) {\n+    return new SchemaNode(\n+        physicalSchema.logicalSchema().toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09a77824466dbca8a17ef6c95d2b884b9913646d"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAyNzE4MQ==", "bodyText": "Rather than converting the the PhysicalSchema into a SchemaNode, would it not be better to convert the SchemaNode into the PhysicalSchema and then compare?  I guess it doesn't make much difference, just feels more type safe...\ne.g. if someone came along and added a new field to PhysicalSchema, then the comparison would still pass if comparing strings, but would fail if comparing PhysicalSchemas.\nSchemaNode is basically only there to serialize the parts of PhysicalSchema.  So, I'd suggest writing a Jackson serializer and deserializer for PhysicalSchema, and dropping SchemaNode.  Worth thinking about anyway.  Take a look at LogicalSchemaSerializer and LogicalSchemaDeserializer for examples of how this is done if you've not done it before.", "url": "https://github.com/confluentinc/ksql/pull/6043#discussion_r472027181", "createdAt": "2020-08-18T09:00:30Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/tools/TestExecutor.java", "diffHunk": "@@ -302,15 +305,23 @@ private static void verifyTopology(final TestCase testCase) {\n               + \"THIS IS BAD!\",\n           actualTopology, is(expectedTopology));\n \n-      final Map<String, String> generated = testCase.getGeneratedSchemas();\n-      for (final Map.Entry<String, String> e : expected.getSchemas().entrySet()) {\n+      final Map<String, SchemaNode> generatedSchemas =\n+          testCase.getGeneratedSchemas().entrySet().stream()\n+              .collect(Collectors.toMap(\n+                  Entry::getKey,\n+                  e -> SchemaNode.fromPhysicalSchema(e.getValue())));\n+      for (final Map.Entry<String, SchemaNode> e : expected.getSchemas().entrySet()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09a77824466dbca8a17ef6c95d2b884b9913646d"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MTM0NzI5", "url": "https://github.com/confluentinc/ksql/pull/6043#pullrequestreview-469134729", "createdAt": "2020-08-18T09:06:24Z", "commit": {"oid": "82f162405acbe4210cf407ace11245935b73e239"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTowNjoyNFrOHCKeWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTowNjoyNFrOHCKeWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjAzMDgwOQ==", "bodyText": "Can you move this back to the io.confluent.ksql.schema.ksql package please?", "url": "https://github.com/confluentinc/ksql/pull/6043#discussion_r472030809", "createdAt": "2020-08-18T09:06:24Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-api-client/src/test/java/io/confluent/ksql/api/client/integration/ClientIntegrationTest.java", "diffHunk": "@@ -64,7 +64,7 @@\n import io.confluent.ksql.rest.integration.RestIntegrationTestUtil;\n import io.confluent.ksql.rest.server.TestKsqlRestApp;\n import io.confluent.ksql.schema.ksql.LogicalSchema;\n-import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+import io.confluent.ksql.serde.PhysicalSchema;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f162405acbe4210cf407ace11245935b73e239"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2dea35209b25de93b18b58a7dfbd9069d6ab1bc", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/a2dea35209b25de93b18b58a7dfbd9069d6ab1bc", "committedDate": "2020-08-18T16:23:22Z", "message": "refactor: update PhysicalSchema package"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "147c16e03465f01ef39413ac1bd80335297947e8", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/147c16e03465f01ef39413ac1bd80335297947e8", "committedDate": "2020-08-18T19:11:42Z", "message": "test: update test specs to new format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce78d49bfef129c51f31d0d89a779cc2b281ca6d", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/ce78d49bfef129c51f31d0d89a779cc2b281ca6d", "committedDate": "2020-08-19T14:19:00Z", "message": "Merge branch 'master' into qtt-key-schema-2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ead537bc3e8f4e584677d88354db9aed367d0abf", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/ead537bc3e8f4e584677d88354db9aed367d0abf", "committedDate": "2020-08-19T14:45:30Z", "message": "chore: update another QTT to new format"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "baec3cb97ee1645e5ea2e3787a05d6644abf3b85", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/baec3cb97ee1645e5ea2e3787a05d6644abf3b85", "committedDate": "2020-08-19T14:36:38Z", "message": "chore: pin rocksdbjni dependency version"}, "afterCommit": {"oid": "ead537bc3e8f4e584677d88354db9aed367d0abf", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/ead537bc3e8f4e584677d88354db9aed367d0abf", "committedDate": "2020-08-19T14:45:30Z", "message": "chore: update another QTT to new format"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4705, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}