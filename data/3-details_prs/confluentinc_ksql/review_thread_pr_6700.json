{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNjc0NDg1", "number": 6700, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMzoyNzowM1rOE_b0SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjozODoyMVrOE_tRIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTUxNDk2OnYy", "diffSide": "RIGHT", "path": "docs/concepts/schemas.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMzoyNzowM1rOH9I-BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzoyMDo1MlrOH_aWng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3MjEzMw==", "bodyText": "should we also mention FORMAT='AVRO'? I suspect this might be somewhat common", "url": "https://github.com/confluentinc/ksql/pull/6700#discussion_r533872133", "createdAt": "2020-12-02T03:27:03Z", "author": {"login": "agavra"}, "path": "docs/concepts/schemas.md", "diffHunk": "@@ -141,6 +136,27 @@ time the statement is first executed.\n \r\n #### With a key column\r\n \r\n+The following statement shows how to create a new `pageviews` stream by reading\r\n+from a {{ site.ak }} topic that has Avro-formatted key and message values.\r\n+\r\n+```sql\r\n+CREATE STREAM pageviews WITH (\r\n+    KAFKA_TOPIC='pageviews-avro-topic',\r\n+    KEY_FORMAT='AVRO',\r\n+    VALUE_FORMAT='AVRO'\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39931a1a6cc425eb38429e198ea82b07c4672e53"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM4ODg5OA==", "bodyText": "Were you imagining a tip saying that this is equivalent to simply specifying FORMAT, updating these examples to use FORMAT, or something else? The FORMAT property is documented in https://github.com/confluentinc/ksql/blob/master/docs/developer-guide/ksqldb-reference/create-stream.md (and similar for CT, CSAS, and CTAS) which feels like the more appropriate place to formally introduce it, but I can certainly slip in a mention of it here as well.", "url": "https://github.com/confluentinc/ksql/pull/6700#discussion_r534388898", "createdAt": "2020-12-02T18:28:08Z", "author": {"login": "vcrfxia"}, "path": "docs/concepts/schemas.md", "diffHunk": "@@ -141,6 +136,27 @@ time the statement is first executed.\n \r\n #### With a key column\r\n \r\n+The following statement shows how to create a new `pageviews` stream by reading\r\n+from a {{ site.ak }} topic that has Avro-formatted key and message values.\r\n+\r\n+```sql\r\n+CREATE STREAM pageviews WITH (\r\n+    KAFKA_TOPIC='pageviews-avro-topic',\r\n+    KEY_FORMAT='AVRO',\r\n+    VALUE_FORMAT='AVRO'\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3MjEzMw=="}, "originalCommit": {"oid": "39931a1a6cc425eb38429e198ea82b07c4672e53"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI1NDExMA==", "bodyText": "Discussed offline -- leaving this as is for now. Will see if we can consolidate information about keys into a natural place in a subsequent PR.", "url": "https://github.com/confluentinc/ksql/pull/6700#discussion_r536254110", "createdAt": "2020-12-04T17:20:52Z", "author": {"login": "vcrfxia"}, "path": "docs/concepts/schemas.md", "diffHunk": "@@ -141,6 +136,27 @@ time the statement is first executed.\n \r\n #### With a key column\r\n \r\n+The following statement shows how to create a new `pageviews` stream by reading\r\n+from a {{ site.ak }} topic that has Avro-formatted key and message values.\r\n+\r\n+```sql\r\n+CREATE STREAM pageviews WITH (\r\n+    KAFKA_TOPIC='pageviews-avro-topic',\r\n+    KEY_FORMAT='AVRO',\r\n+    VALUE_FORMAT='AVRO'\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzg3MjEzMw=="}, "originalCommit": {"oid": "39931a1a6cc425eb38429e198ea82b07c4672e53"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjM3MTQ4OnYy", "diffSide": "RIGHT", "path": "docs/concepts/schemas.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjozNzo0NVrOH9j23A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjozNzo0NVrOH9j23A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMxMjY2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If declaring a stream or table with a key format that is different from its\n          \n          \n            \n            If you're declaring a stream or table with a key format that's different from its", "url": "https://github.com/confluentinc/ksql/pull/6700#discussion_r534312668", "createdAt": "2020-12-02T16:37:45Z", "author": {"login": "JimGalasyn"}, "path": "docs/concepts/schemas.md", "diffHunk": "@@ -77,30 +77,25 @@ ksqlDB is [configured to use it](../operate-and-deploy/installation/server-confi\n \r\n Here's what you can do with schema inference in ksqlDB:\r\n \r\n--   Declare streams and tables on {{ site.ak }} topics with supported value formats by using \r\n-    `CREATE STREAM` and `CREATE TABLE` statements, without needing to declare the value columns.\r\n+-   Declare streams and tables on {{ site.ak }} topics with supported key and value formats by using \r\n+    `CREATE STREAM` and `CREATE TABLE` statements, without needing to declare the key and/or value columns.\r\n -   Declare derived views with `CREATE STREAM AS SELECT` and `CREATE TABLE AS SELECT` statements.\r\n     The schema of the view is registered in {{ site.sr }} automatically.\r\n -   Convert data to different formats with `CREATE STREAM AS SELECT` and\r\n     `CREATE TABLE AS SELECT` statements, by declaring the required output\r\n     format in the `WITH` clause. For example, you can convert a stream from\r\n     Avro to JSON.\r\n \r\n-Only the schema of the message *value* can be retrieved from {{ site.sr }}. Message\r\n-*keys* must be compatible with the [`KAFKA` format](../developer-guide/serialization.md#kafka)\r\n-to be accessible within ksqlDB. ksqlDB ignores schemas that have been registered\r\n-for message keys. \r\n-\r\n !!! note\r\n-    Message *keys* in Avro and Protobuf are not supported. If your message keys\r\n+    Message *keys* in Protobuf are not supported. If your message keys\r\n     are in an unsupported format, see [What to do if your key is not set or is in a different format](../developer-guide/syntax-reference.md#what-to-do-if-your-key-is-not-set-or-is-in-a-different-format). \r\n-    JSON message keys can be accessed by defining the key as a single `STRING` value, which will \r\n-    contain the JSON document.\r\n     \r\n-Although ksqlDB doesn't support loading the message key's schema from {{ site.sr }},\r\n-you can provide the key column definition within the `CREATE TABLE` or `CREATE STREAM`\r\n-statement, if the data records are compatible with ksqlDB. This is known as\r\n-_partial schema inference_, because the key schema is provided explicitly.\r\n+If declaring a stream or table with a key format that is different from its\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39931a1a6cc425eb38429e198ea82b07c4672e53"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjM3NDA4OnYy", "diffSide": "RIGHT", "path": "docs/concepts/schemas.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjozODoyMVrOH9j4fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjozODoyMVrOH9j4fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMxMzA4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            from m {{ site.sr }}. This is known as _partial schema inference_. To infer value columns\n          \n          \n            \n            from {{ site.sr }}. This is known as _partial schema inference_. To infer value columns", "url": "https://github.com/confluentinc/ksql/pull/6700#discussion_r534313085", "createdAt": "2020-12-02T16:38:21Z", "author": {"login": "JimGalasyn"}, "path": "docs/concepts/schemas.md", "diffHunk": "@@ -77,30 +77,25 @@ ksqlDB is [configured to use it](../operate-and-deploy/installation/server-confi\n \r\n Here's what you can do with schema inference in ksqlDB:\r\n \r\n--   Declare streams and tables on {{ site.ak }} topics with supported value formats by using \r\n-    `CREATE STREAM` and `CREATE TABLE` statements, without needing to declare the value columns.\r\n+-   Declare streams and tables on {{ site.ak }} topics with supported key and value formats by using \r\n+    `CREATE STREAM` and `CREATE TABLE` statements, without needing to declare the key and/or value columns.\r\n -   Declare derived views with `CREATE STREAM AS SELECT` and `CREATE TABLE AS SELECT` statements.\r\n     The schema of the view is registered in {{ site.sr }} automatically.\r\n -   Convert data to different formats with `CREATE STREAM AS SELECT` and\r\n     `CREATE TABLE AS SELECT` statements, by declaring the required output\r\n     format in the `WITH` clause. For example, you can convert a stream from\r\n     Avro to JSON.\r\n \r\n-Only the schema of the message *value* can be retrieved from {{ site.sr }}. Message\r\n-*keys* must be compatible with the [`KAFKA` format](../developer-guide/serialization.md#kafka)\r\n-to be accessible within ksqlDB. ksqlDB ignores schemas that have been registered\r\n-for message keys. \r\n-\r\n !!! note\r\n-    Message *keys* in Avro and Protobuf are not supported. If your message keys\r\n+    Message *keys* in Protobuf are not supported. If your message keys\r\n     are in an unsupported format, see [What to do if your key is not set or is in a different format](../developer-guide/syntax-reference.md#what-to-do-if-your-key-is-not-set-or-is-in-a-different-format). \r\n-    JSON message keys can be accessed by defining the key as a single `STRING` value, which will \r\n-    contain the JSON document.\r\n     \r\n-Although ksqlDB doesn't support loading the message key's schema from {{ site.sr }},\r\n-you can provide the key column definition within the `CREATE TABLE` or `CREATE STREAM`\r\n-statement, if the data records are compatible with ksqlDB. This is known as\r\n-_partial schema inference_, because the key schema is provided explicitly.\r\n+If declaring a stream or table with a key format that is different from its\r\n+value format, and only one of the two formats supports schema inference,\r\n+you can explicitly provide the columns for the format that does not support schema inference\r\n+while still having ksqlDB load columns for the format that does support schema inference\r\n+from m {{ site.sr }}. This is known as _partial schema inference_. To infer value columns\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39931a1a6cc425eb38429e198ea82b07c4672e53"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2478, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}