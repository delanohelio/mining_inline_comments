{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5OTQzNzgw", "number": 5013, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODozMToxNVrODvsGaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTowMjozNFrODwcb1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzMyMjAxOnYy", "diffSide": "RIGHT", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODozMToxNVrOGCQxJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODo1NzowOVrOGCRukQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNTA2MQ==", "bodyText": "missing issue link?", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r405025061", "createdAt": "2020-04-07T18:31:15Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluator.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.codegen.helpers;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.util.KsqlException;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Used in the code generation to evaluate SQL 'LIKE' expressions.\n+ *\n+ * @see io.confluent.ksql.execution.expression.tree.LikePredicate\n+ */\n+public final class LikeEvaluator {\n+\n+  // characters that need to be escaped within regex [] - all other\n+  // characters are escaped using \\Q \\E (see Pattern#quote)\n+  private static final Set<Character> ESCAPED_CHARS = ImmutableSet.of(\n+      '[', ']', '^', '\\\\'\n+  );\n+\n+  private LikeEvaluator() {\n+  }\n+\n+  /**\n+   * @param val       the value to match\n+   * @param pattern   the pattern to match against\n+   *\n+   * @return  whether or not {@code val} matches {@code pattern} given the SQL\n+   *          LIKE definition of matching\n+   */\n+  public static boolean matches(final String val, final String pattern) {\n+    // note that we do not yet support escape characters in the pattern\n+    // see issue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8754fe5ed05dd3d0860adc40210d17c8bdbfd25"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0MDc4NQ==", "bodyText": "#5021 will add it", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r405040785", "createdAt": "2020-04-07T18:57:09Z", "author": {"login": "agavra"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluator.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.codegen.helpers;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.util.KsqlException;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Used in the code generation to evaluate SQL 'LIKE' expressions.\n+ *\n+ * @see io.confluent.ksql.execution.expression.tree.LikePredicate\n+ */\n+public final class LikeEvaluator {\n+\n+  // characters that need to be escaped within regex [] - all other\n+  // characters are escaped using \\Q \\E (see Pattern#quote)\n+  private static final Set<Character> ESCAPED_CHARS = ImmutableSet.of(\n+      '[', ']', '^', '\\\\'\n+  );\n+\n+  private LikeEvaluator() {\n+  }\n+\n+  /**\n+   * @param val       the value to match\n+   * @param pattern   the pattern to match against\n+   *\n+   * @return  whether or not {@code val} matches {@code pattern} given the SQL\n+   *          LIKE definition of matching\n+   */\n+  public static boolean matches(final String val, final String pattern) {\n+    // note that we do not yet support escape characters in the pattern\n+    // see issue", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNTA2MQ=="}, "originalCommit": {"oid": "f8754fe5ed05dd3d0860adc40210d17c8bdbfd25"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzMzMjMzOnYy", "diffSide": "RIGHT", "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluatorTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODozNDowMlrOGCQ3jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODo1NTozN1rOGCRrGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNjcwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    {\"percents one side [X]\",         \"barbarbar\", \"%foo\"},\n          \n          \n            \n                    {\"percents one side [X]\",         \"barfoobar\", \"%foo\"},", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r405026700", "createdAt": "2020-04-07T18:34:02Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluatorTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.codegen.helpers;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.*;\n+\n+import java.util.Objects;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class LikeEvaluatorTest {\n+\n+  private final String name;\n+  private final String val;\n+  private final String pattern;\n+\n+  @Parameters(name = \"{0}\")\n+  public static Object[][] data() {\n+    // name | val | pattern\n+    return new Object[][]{\n+        {\"nothing special\",               \"foo\", \"foo\"},\n+        {\"nothing special [X]\",           \"bar\", \"foo\"},\n+        {\"empty percents\",                \"foo\", \"%foo%\"},\n+        {\"empty percents [X]\",            \"bar\", \"%foo%\"},\n+        {\"percents\",                      \"barfoobaz\", \"%foo%\"},\n+        {\"percents [X]\",                  \"barbarbar\", \"%foo%\"},\n+        {\"percents one side\",             \"barfoo\", \"%foo\"},\n+        {\"percents one side [X]\",         \"barbarbar\", \"%foo\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8754fe5ed05dd3d0860adc40210d17c8bdbfd25"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNzQ0Mw==", "bodyText": "also, worth adding case for:\n\n% other side and\n% in middle and\nmultiple %s\nescaped %s???? Or do we not support them yet.. (hard to add?)", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r405027443", "createdAt": "2020-04-07T18:35:14Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluatorTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.codegen.helpers;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.*;\n+\n+import java.util.Objects;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class LikeEvaluatorTest {\n+\n+  private final String name;\n+  private final String val;\n+  private final String pattern;\n+\n+  @Parameters(name = \"{0}\")\n+  public static Object[][] data() {\n+    // name | val | pattern\n+    return new Object[][]{\n+        {\"nothing special\",               \"foo\", \"foo\"},\n+        {\"nothing special [X]\",           \"bar\", \"foo\"},\n+        {\"empty percents\",                \"foo\", \"%foo%\"},\n+        {\"empty percents [X]\",            \"bar\", \"%foo%\"},\n+        {\"percents\",                      \"barfoobaz\", \"%foo%\"},\n+        {\"percents [X]\",                  \"barbarbar\", \"%foo%\"},\n+        {\"percents one side\",             \"barfoo\", \"%foo\"},\n+        {\"percents one side [X]\",         \"barbarbar\", \"%foo\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNjcwMA=="}, "originalCommit": {"oid": "f8754fe5ed05dd3d0860adc40210d17c8bdbfd25"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzOTg5Ng==", "bodyText": "the middle two are covered by c[a-c]t%[a-e][^abc]%m__w - i'll add tests for the first and last (escaping is done by [%] in MSFT-sql at least and should be supported here as well)", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r405039896", "createdAt": "2020-04-07T18:55:37Z", "author": {"login": "agavra"}, "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluatorTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.codegen.helpers;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.*;\n+\n+import java.util.Objects;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class LikeEvaluatorTest {\n+\n+  private final String name;\n+  private final String val;\n+  private final String pattern;\n+\n+  @Parameters(name = \"{0}\")\n+  public static Object[][] data() {\n+    // name | val | pattern\n+    return new Object[][]{\n+        {\"nothing special\",               \"foo\", \"foo\"},\n+        {\"nothing special [X]\",           \"bar\", \"foo\"},\n+        {\"empty percents\",                \"foo\", \"%foo%\"},\n+        {\"empty percents [X]\",            \"bar\", \"%foo%\"},\n+        {\"percents\",                      \"barfoobaz\", \"%foo%\"},\n+        {\"percents [X]\",                  \"barbarbar\", \"%foo%\"},\n+        {\"percents one side\",             \"barfoo\", \"%foo\"},\n+        {\"percents one side [X]\",         \"barbarbar\", \"%foo\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNjcwMA=="}, "originalCommit": {"oid": "f8754fe5ed05dd3d0860adc40210d17c8bdbfd25"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTE5OTcxOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/rewrite/ExpressionTreeRewriterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo1MzoxN1rOGDcXmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo1MzoxN1rOGDcXmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2MzcwNA==", "bodyText": "nit: test should really ensure escape char is not lost...", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r406263704", "createdAt": "2020-04-09T14:53:17Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/rewrite/ExpressionTreeRewriterTest.java", "diffHunk": "@@ -467,7 +467,7 @@ public void shouldRewriteLikePredicate() {\n     final Expression rewritten = expressionRewriter.rewrite(parsed, context);\n \n     // Then:\n-    assertThat(rewritten, equalTo(new LikePredicate(parsed.getLocation(), expr1, expr2)));\n+    assertThat(rewritten, equalTo(new LikePredicate(parsed.getLocation(), expr1, expr2, Optional.empty())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72e60e3c2f78f540016d961a55e36bb0dd545a4a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTIwODYyOnYy", "diffSide": "RIGHT", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/SqlToJavaVisitor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo1NDo1MVrOGDcc4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTo0OToyMFrOGDeviA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2NTA1Ng==", "bodyText": "nit: can we not remove this if/else by having LikeEval.matches() take Optional<Char> for last param?", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r406265056", "createdAt": "2020-04-09T14:54:51Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/SqlToJavaVisitor.java", "diffHunk": "@@ -724,46 +726,23 @@ private String buildSupplierCode(final String typeString, final String code) {\n     @Override\n     public Pair<String, SqlType> visitLikePredicate(final LikePredicate node, final Void context) {\n \n-      // For now we just support simple prefix/suffix cases only.\n-      final String patternString = trimQuotes(process(node.getPattern(), context).getLeft());\n+      final String patternString = process(node.getPattern(), context).getLeft();\n       final String valueString = process(node.getValue(), context).getLeft();\n-      if (patternString.startsWith(\"%\")) {\n-        if (patternString.endsWith(\"%\")) {\n-          return new Pair<>(\n-              \"(\" + valueString + \").contains(\\\"\"\n-                  + patternString.substring(1, patternString.length() - 1)\n-                  + \"\\\")\",\n-              SqlTypes.STRING\n-          );\n-        } else {\n-          return new Pair<>(\n-              \"(\" + valueString + \").endsWith(\\\"\" + patternString.substring(1) + \"\\\")\",\n-              SqlTypes.STRING\n-          );\n-        }\n-      }\n \n-      if (patternString.endsWith(\"%\")) {\n+      if (node.getEscape().isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72e60e3c2f78f540016d961a55e36bb0dd545a4a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMwMjYwMA==", "bodyText": "somewhat - I'd still need to do:\nLikeEvaluator.matches(... + \"Optional.ofNullable(\" + escape.map(escape -> \"'\" + escape + \"'\").getOrElse(null))\nAnd to be honest I don't think that's any cleaner.\n(this needs to be generated code, I can't pass the optional itself as a string)", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r406302600", "createdAt": "2020-04-09T15:49:20Z", "author": {"login": "agavra"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/SqlToJavaVisitor.java", "diffHunk": "@@ -724,46 +726,23 @@ private String buildSupplierCode(final String typeString, final String code) {\n     @Override\n     public Pair<String, SqlType> visitLikePredicate(final LikePredicate node, final Void context) {\n \n-      // For now we just support simple prefix/suffix cases only.\n-      final String patternString = trimQuotes(process(node.getPattern(), context).getLeft());\n+      final String patternString = process(node.getPattern(), context).getLeft();\n       final String valueString = process(node.getValue(), context).getLeft();\n-      if (patternString.startsWith(\"%\")) {\n-        if (patternString.endsWith(\"%\")) {\n-          return new Pair<>(\n-              \"(\" + valueString + \").contains(\\\"\"\n-                  + patternString.substring(1, patternString.length() - 1)\n-                  + \"\\\")\",\n-              SqlTypes.STRING\n-          );\n-        } else {\n-          return new Pair<>(\n-              \"(\" + valueString + \").endsWith(\\\"\" + patternString.substring(1) + \"\\\")\",\n-              SqlTypes.STRING\n-          );\n-        }\n-      }\n \n-      if (patternString.endsWith(\"%\")) {\n+      if (node.getEscape().isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2NTA1Ng=="}, "originalCommit": {"oid": "72e60e3c2f78f540016d961a55e36bb0dd545a4a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTI0MTE5OnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/AstBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTowMjozNFrOGDcyYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToxNzo1MVrOGDdbEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI3MDU2MQ==", "bodyText": "IllegalStateException?\nThe syntax allows the escape to be a multi-char string, so this is the error the users going to see if they enter one, right?\nI'd of thought this should be :\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      throw new IllegalStateException(\"Expected single character escape but got: \" + s);\n          \n          \n            \n                      throw new KsqlException(loc.asPrefix() + \"Expected single character escape but got: \" + s);\n          \n      \n    \n    \n  \n\nWhere loc is the NodeLocation.", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r406270561", "createdAt": "2020-04-09T15:02:34Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/AstBuilder.java", "diffHunk": "@@ -889,10 +889,21 @@ public Node visitNullPredicate(final SqlBaseParser.NullPredicateContext context)\n \n     @Override\n     public Node visitLike(final SqlBaseParser.LikeContext context) {\n+\n+      final Optional<String> escape = Optional.ofNullable(context.escape)\n+          .map(Token::getText)\n+          .map(s -> ParserUtil.unquote(s, \"'\"));\n+      escape.ifPresent(s -> {\n+        if (s.length() != 1) {\n+          throw new IllegalStateException(\"Expected single character escape but got: \" + s);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72e60e3c2f78f540016d961a55e36bb0dd545a4a"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4MDk3OA==", "bodyText": "ah good catch, originally I had it in the syntax as just a single char (.) but then i changed it to STRING to include the quotes and forgot to change this!", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r406280978", "createdAt": "2020-04-09T15:17:51Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/AstBuilder.java", "diffHunk": "@@ -889,10 +889,21 @@ public Node visitNullPredicate(final SqlBaseParser.NullPredicateContext context)\n \n     @Override\n     public Node visitLike(final SqlBaseParser.LikeContext context) {\n+\n+      final Optional<String> escape = Optional.ofNullable(context.escape)\n+          .map(Token::getText)\n+          .map(s -> ParserUtil.unquote(s, \"'\"));\n+      escape.ifPresent(s -> {\n+        if (s.length() != 1) {\n+          throw new IllegalStateException(\"Expected single character escape but got: \" + s);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI3MDU2MQ=="}, "originalCommit": {"oid": "72e60e3c2f78f540016d961a55e36bb0dd545a4a"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3751, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}