{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NTQwMzY5", "number": 4608, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjo0NTowOFrODjRUNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjo0MDo1OFrODt0Mtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzEwNDU1OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjo0NTowOFrOFu_KOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QyMDoyMjozOFrOFvf93Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxMzYyNA==", "bodyText": "can you please file an issue for refactoring this method if one does not exist..", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r384813624", "createdAt": "2020-02-26T22:45:08Z", "author": {"login": "vinothchandar"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -579,6 +580,7 @@ static KsqlRestApplication buildApplication(\n             new KsqlSecurityContextBinder(config, securityExtension, schemaRegistryClientFactory));\n   }\n \n+  @SuppressWarnings(\"checkstyle:MethodLength\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9fe9d995084f91affa01bf80ee26baa11e599a3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTM1MTEzMw==", "bodyText": "Tracked here #4660", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r385351133", "createdAt": "2020-02-27T20:22:38Z", "author": {"login": "vpapavas"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -579,6 +580,7 @@ static KsqlRestApplication buildApplication(\n             new KsqlSecurityContextBinder(config, securityExtension, schemaRegistryClientFactory));\n   }\n \n+  @SuppressWarnings(\"checkstyle:MethodLength\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxMzYyNA=="}, "originalCommit": {"oid": "a9fe9d995084f91affa01bf80ee26baa11e599a3"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzEwNjEzOnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjo0NTo0OFrOFu_LTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjo0NjoyMFrOFu_MMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxMzkwMQ==", "bodyText": "naming: ksql.pull.query.metrics.enabled?", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r384813901", "createdAt": "2020-02-26T22:45:48Z", "author": {"login": "vinothchandar"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -158,6 +158,11 @@\n   private static final String KSQL_LAG_REPORTING_SEND_INTERVAL_MS_DOC =\n       \"Interval at which lag reports are broadcasted to servers.\";\n \n+  public static final String KSQL_COLLECT_PULL_QUERY_METRICS_CONFIG =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9fe9d995084f91affa01bf80ee26baa11e599a3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxNDEyOQ==", "bodyText": "Also would n't this be a server level config? i.e place in KsqlConfig?", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r384814129", "createdAt": "2020-02-26T22:46:20Z", "author": {"login": "vinothchandar"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -158,6 +158,11 @@\n   private static final String KSQL_LAG_REPORTING_SEND_INTERVAL_MS_DOC =\n       \"Interval at which lag reports are broadcasted to servers.\";\n \n+  public static final String KSQL_COLLECT_PULL_QUERY_METRICS_CONFIG =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgxMzkwMQ=="}, "originalCommit": {"oid": "a9fe9d995084f91affa01bf80ee26baa11e599a3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzIzMzExOnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzo0MDo0MVrOFvAYQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzo0MDo0MVrOFvAYQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMzYwMw==", "bodyText": "so, I think we should construct this internally within PullQueryExecutor and not pass this from outside.. The goal is to keep the metrics contained to this part of the code, the rest should not have to know about this?", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r384833603", "createdAt": "2020-02-26T23:40:41Z", "author": {"login": "vinothchandar"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -126,18 +126,21 @@\n       VALID_WINDOW_BOUNDS_TYPES.toString();\n \n   private final KsqlExecutionContext executionContext;\n-  private final Optional<HeartbeatAgent> heartbeatAgent;\n   private final RoutingFilterFactory routingFilterFactory;\n+  private final Optional<PullQueryExecutorMetrics> pullQueryExecutorMetrics;\n+  private final Time time;\n \n   public PullQueryExecutor(\n       final KsqlExecutionContext executionContext,\n-      final Optional<HeartbeatAgent> heartbeatAgent,\n-      final RoutingFilterFactory routingFilterFactory\n+      final RoutingFilterFactory routingFilterFactory,\n+      final Optional<PullQueryExecutorMetrics> pullQueryExecutorMetrics", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9fe9d995084f91affa01bf80ee26baa11e599a3"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzIzNTE0OnYy", "diffSide": "LEFT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzo0MToxOFrOFvAZXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMzo0MToxOFrOFvAZXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgzMzg4NQ==", "bodyText": "we don't need this anymore?", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r384833885", "createdAt": "2020-02-26T23:41:18Z", "author": {"login": "vinothchandar"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -126,18 +126,21 @@\n       VALID_WINDOW_BOUNDS_TYPES.toString();\n \n   private final KsqlExecutionContext executionContext;\n-  private final Optional<HeartbeatAgent> heartbeatAgent;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9fe9d995084f91affa01bf80ee26baa11e599a3"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjg0MTI5OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMzo0OToxMVrOF2WLSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMzo0OToxMVrOF2WLSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMDc2Mw==", "bodyText": "I think it'd be good to add the KSQL service ID into these metrics, in case someone is running multiple KSQL deployments so they can distinguish which deployment the metric refers to. For engine metrics we pre-prend the service ID to the group name (\n  \n    \n      ksql/ksqldb-engine/src/main/java/io/confluent/ksql/internal/KsqlEngineMetrics.java\n    \n    \n         Line 307\n      in\n      7bf5c12\n    \n    \n    \n    \n\n        \n          \n           ksqlServiceId + metricGroupName, \n        \n    \n  \n\n) though later discussion agreed it makes more sense as a metric tag (#1941 (comment)).", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r392530763", "createdAt": "2020-03-13T23:49:11Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server.execution;\n+\n+import io.confluent.ksql.metrics.MetricCollectors;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.Avg;\n+import org.apache.kafka.common.metrics.stats.Max;\n+import org.apache.kafka.common.metrics.stats.Min;\n+import org.apache.kafka.common.metrics.stats.Percentile;\n+import org.apache.kafka.common.metrics.stats.Percentiles;\n+import org.apache.kafka.common.metrics.stats.Percentiles.BucketSizing;\n+import org.apache.kafka.common.metrics.stats.Rate;\n+import org.apache.kafka.common.metrics.stats.WindowedCount;\n+\n+public class PullQueryExecutorMetrics implements Closeable {\n+\n+  private static final String PULL_QUERY_METRIC_GROUP = \"pull-query\";\n+  private static final String PULL_REQUESTS = \"pull-query-requests\";\n+\n+  private final List<Sensor> sensors;\n+  private final Sensor localRequestsSensor;\n+  private final Sensor remoteRequestsSensor;\n+  private final Sensor latencySensor;\n+  private final Sensor requestRateSensor;\n+  private final Sensor errorRateSensor;\n+  private final Metrics metrics;\n+\n+  public PullQueryExecutorMetrics() {\n+    this.metrics = MetricCollectors.getMetrics();\n+    this.sensors = new ArrayList<>();\n+    this.localRequestsSensor = configureLocalRequestsSensor();\n+    this.remoteRequestsSensor = configureRemoteRequestsSensor();\n+    this.latencySensor = configureRequestSensor();\n+    this.requestRateSensor = configureRateSensor();\n+    this.errorRateSensor = configureErrorRateSensor();\n+  }\n+\n+  @Override\n+  public void close() {\n+    sensors.forEach(sensor -> metrics.removeSensor(sensor.name()));\n+  }\n+\n+  public void recordLocalRequests(final double value) {\n+    this.localRequestsSensor.record(value);\n+  }\n+\n+  public void recordRemoteRequests(final double value) {\n+    this.remoteRequestsSensor.record(value);\n+  }\n+\n+  public void recordRate(final double value) {\n+    this.requestRateSensor.record(value);\n+  }\n+\n+  public void recordLatency(final double value) {\n+    this.latencySensor.record(value);\n+  }\n+\n+  public void recordErrorRate(final double value) {\n+    this.errorRateSensor.record(value);\n+  }\n+\n+  private Sensor configureLocalRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-local\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-local-count\",\n+            PULL_QUERY_METRIC_GROUP,\n+            \"Count of local pull query requests\"\n+        ),\n+        new WindowedCount()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureRemoteRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-remote\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-remote-count\",\n+            PULL_QUERY_METRIC_GROUP,\n+            \"Count of remote pull query requests\"\n+        ),\n+        new WindowedCount()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureRateSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-rate\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-rate\",\n+            PULL_QUERY_METRIC_GROUP,\n+            \"Rate of pull query requests\"\n+        ),\n+        new Rate()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureErrorRateSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-error-rate\");\n+    sensor.add(\n+        metrics.metricName(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0cdea59ae460b47201f7ce2229cb9ccf452ca3"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjg0NDcyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMzo1MTo0NVrOF2WNQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMzo1MTo0NVrOF2WNQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUzMTI2NA==", "bodyText": "It'd be great if we can also add the user-specified custom metric tags (\n  \n    \n      ksql/ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java\n    \n    \n         Line 128\n      in\n      7bf5c12\n    \n    \n    \n    \n\n        \n          \n           public static final String KSQL_CUSTOM_METRICS_TAGS = \"ksql.metrics.tags.custom\"; \n        \n    \n  \n\n) to these metrics, similar to how we do for engine metrics (\n  \n    \n      ksql/ksqldb-engine/src/main/java/io/confluent/ksql/internal/KsqlEngineMetrics.java\n    \n    \n         Line 309\n      in\n      7bf5c12\n    \n    \n    \n    \n\n        \n          \n           customMetricsTags), \n        \n    \n  \n\n)", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r392531264", "createdAt": "2020-03-13T23:51:45Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server.execution;\n+\n+import io.confluent.ksql.metrics.MetricCollectors;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.Avg;\n+import org.apache.kafka.common.metrics.stats.Max;\n+import org.apache.kafka.common.metrics.stats.Min;\n+import org.apache.kafka.common.metrics.stats.Percentile;\n+import org.apache.kafka.common.metrics.stats.Percentiles;\n+import org.apache.kafka.common.metrics.stats.Percentiles.BucketSizing;\n+import org.apache.kafka.common.metrics.stats.Rate;\n+import org.apache.kafka.common.metrics.stats.WindowedCount;\n+\n+public class PullQueryExecutorMetrics implements Closeable {\n+\n+  private static final String PULL_QUERY_METRIC_GROUP = \"pull-query\";\n+  private static final String PULL_REQUESTS = \"pull-query-requests\";\n+\n+  private final List<Sensor> sensors;\n+  private final Sensor localRequestsSensor;\n+  private final Sensor remoteRequestsSensor;\n+  private final Sensor latencySensor;\n+  private final Sensor requestRateSensor;\n+  private final Sensor errorRateSensor;\n+  private final Metrics metrics;\n+\n+  public PullQueryExecutorMetrics() {\n+    this.metrics = MetricCollectors.getMetrics();\n+    this.sensors = new ArrayList<>();\n+    this.localRequestsSensor = configureLocalRequestsSensor();\n+    this.remoteRequestsSensor = configureRemoteRequestsSensor();\n+    this.latencySensor = configureRequestSensor();\n+    this.requestRateSensor = configureRateSensor();\n+    this.errorRateSensor = configureErrorRateSensor();\n+  }\n+\n+  @Override\n+  public void close() {\n+    sensors.forEach(sensor -> metrics.removeSensor(sensor.name()));\n+  }\n+\n+  public void recordLocalRequests(final double value) {\n+    this.localRequestsSensor.record(value);\n+  }\n+\n+  public void recordRemoteRequests(final double value) {\n+    this.remoteRequestsSensor.record(value);\n+  }\n+\n+  public void recordRate(final double value) {\n+    this.requestRateSensor.record(value);\n+  }\n+\n+  public void recordLatency(final double value) {\n+    this.latencySensor.record(value);\n+  }\n+\n+  public void recordErrorRate(final double value) {\n+    this.errorRateSensor.record(value);\n+  }\n+\n+  private Sensor configureLocalRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-local\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-local-count\",\n+            PULL_QUERY_METRIC_GROUP,\n+            \"Count of local pull query requests\"\n+        ),\n+        new WindowedCount()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureRemoteRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-remote\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-remote-count\",\n+            PULL_QUERY_METRIC_GROUP,\n+            \"Count of remote pull query requests\"\n+        ),\n+        new WindowedCount()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureRateSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-rate\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-rate\",\n+            PULL_QUERY_METRIC_GROUP,\n+            \"Rate of pull query requests\"\n+        ),\n+        new Rate()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureErrorRateSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-error-rate\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-error-rate\",\n+            PULL_QUERY_METRIC_GROUP,\n+            \"Rate of erroneous pull query requests\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb0cdea59ae460b47201f7ce2229cb9ccf452ca3"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjkwNzAxOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMDo1MToxNFrOF2WyHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQwMDo1MToxNFrOF2WyHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU0MDcwMg==", "bodyText": "Since only the custom metrics tags are needed, here we can replace this with simply\nksqlConfig.getStringAsMap(KsqlConfig.KSQL_CUSTOM_METRICS_TAGS)\n\nrather than worrying about creating ServiceInfo in order to get the metrics tags.", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r392540702", "createdAt": "2020-03-14T00:51:14Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java", "diffHunk": "@@ -152,7 +153,9 @@ public void configure(final KsqlConfig config) {\n     final Boolean collectMetrics = ksqlConfig.getBoolean(\n         KsqlConfig.KSQL_QUERY_PULL_METRICS_ENABLED);\n     this.pullQueryExecutorMetrics = collectMetrics\n-        ? Optional.of(new PullQueryExecutorMetrics())\n+        ? Optional.of(new PullQueryExecutorMetrics(\n+            ksqlEngine.getServiceId(),\n+            ServiceInfo.create(ksqlConfig, \"\").customMetricsTags()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecf3f722660b2f3b702a695c02dae14c03704dfa"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjkxNTkyOnYy", "diffSide": "RIGHT", "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoxMzowMVrOF27cZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoxMzowMVrOF27cZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0MTM0OQ==", "bodyText": "can we place this with the other pull query metrics", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393141349", "createdAt": "2020-03-16T16:13:01Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -260,6 +260,11 @@\n \n   public static final String KSQL_ANY_KEY_NAME_ENABLED = \"ksql.any.key.name.enabled\";\n \n+  public static final String KSQL_QUERY_PULL_METRICS_ENABLED =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ce409341ee2452ef312318686d34f7b8a74dfb"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjkzNDc0OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoxNzo0NVrOF27oww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoxNzo0NVrOF27oww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0NDUxNQ==", "bodyText": "nit: pull query metrics", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393144515", "createdAt": "2020-03-16T16:17:45Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -417,8 +417,14 @@ private void initialize(final KsqlConfig configWithApplicationServer) {\n     serverState.setReady();\n   }\n \n+  @SuppressWarnings(\"checkstyle:NPathComplexity\")\n   @Override\n   public void triggerShutdown() {\n+    try {\n+      streamedQueryResource.closeMetrics();\n+    } catch (final Exception e) {\n+      log.error(\"Exception while waiting for Pull queries metrics to close\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ce409341ee2452ef312318686d34f7b8a74dfb"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjkzNjcxOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoxODoxMlrOF27p-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToxNDo1MlrOF3CdcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0NDgyNg==", "bodyText": "can we do something about these warnings in this same PR?", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393144826", "createdAt": "2020-03-16T16:18:12Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -606,6 +612,7 @@ static KsqlRestApplication buildApplication(\n     );\n   }\n \n+  @SuppressWarnings(\"checkstyle:MethodLength\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ce409341ee2452ef312318686d34f7b8a74dfb"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1NjMwNQ==", "bodyText": "This needs a separate PR and there is an issue tracking it", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393256305", "createdAt": "2020-03-16T19:14:52Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -606,6 +612,7 @@ static KsqlRestApplication buildApplication(\n     );\n   }\n \n+  @SuppressWarnings(\"checkstyle:MethodLength\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0NDgyNg=="}, "originalCommit": {"oid": "21ce409341ee2452ef312318686d34f7b8a74dfb"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzE5NTMwOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzoxNzo1MVrOF2-PvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToxNTo1NFrOF3Cfng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NzI2MQ==", "bodyText": "how are the other executors created? are we departing from any pattern..", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393187261", "createdAt": "2020-03-16T17:17:51Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -273,12 +274,11 @@ public static KsqlRestConfig convertToApiServerConfig(final KsqlRestConfig confi\n     this.configurables = requireNonNull(configurables, \"configurables\");\n     this.rocksDBConfigSetterHandler =\n         requireNonNull(rocksDBConfigSetterHandler, \"rocksDBConfigSetterHandler\");\n+    this.pullQueryExecutor = requireNonNull(pullQueryExecutor, \"pullQueryExecutor\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ce409341ee2452ef312318686d34f7b8a74dfb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1Njg2Mg==", "bodyText": "Other executors follow a different pattern since they don't have constructors", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393256862", "createdAt": "2020-03-16T19:15:54Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -273,12 +274,11 @@ public static KsqlRestConfig convertToApiServerConfig(final KsqlRestConfig confi\n     this.configurables = requireNonNull(configurables, \"configurables\");\n     this.rocksDBConfigSetterHandler =\n         requireNonNull(rocksDBConfigSetterHandler, \"rocksDBConfigSetterHandler\");\n+    this.pullQueryExecutor = requireNonNull(pullQueryExecutor, \"pullQueryExecutor\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NzI2MQ=="}, "originalCommit": {"oid": "21ce409341ee2452ef312318686d34f7b8a74dfb"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzE5Njg0OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzoxODoyMFrOF2-Q0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzoxODoyMFrOF2-Q0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE4NzUzNg==", "bodyText": "just metrics?", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393187536", "createdAt": "2020-03-16T17:18:20Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -152,7 +153,8 @@ public static void validate(\n \n   public TableRowsEntity execute(\n       final ConfiguredStatement<Query> statement,\n-      final ServiceContext serviceContext\n+      final ServiceContext serviceContext,\n+      final Optional<PullQueryExecutorMetrics> pullQueryExecutorMetrics", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ce409341ee2452ef312318686d34f7b8a74dfb"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzIxNTkyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzoyMzozNlrOF2-cvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToyMDowMVrOF3CnIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MDU5MQ==", "bodyText": "do we need a count and a rate? is n't rate sufficient?  (same question for request rate and request count?)..", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393190591", "createdAt": "2020-03-16T17:23:36Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server.execution;\n+\n+import io.confluent.ksql.metrics.MetricCollectors;\n+import io.confluent.ksql.util.ReservedInternalTopics;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.Avg;\n+import org.apache.kafka.common.metrics.stats.Max;\n+import org.apache.kafka.common.metrics.stats.Min;\n+import org.apache.kafka.common.metrics.stats.Percentile;\n+import org.apache.kafka.common.metrics.stats.Percentiles;\n+import org.apache.kafka.common.metrics.stats.Percentiles.BucketSizing;\n+import org.apache.kafka.common.metrics.stats.Rate;\n+import org.apache.kafka.common.metrics.stats.WindowedCount;\n+\n+public class PullQueryExecutorMetrics implements Closeable {\n+\n+  private static final String PULL_QUERY_METRIC_GROUP = \"pull-query\";\n+  private static final String PULL_REQUESTS = \"pull-query-requests\";\n+\n+  private final List<Sensor> sensors;\n+  private final Sensor localRequestsSensor;\n+  private final Sensor remoteRequestsSensor;\n+  private final Sensor latencySensor;\n+  private final Sensor requestRateSensor;\n+  private final Sensor errorRateSensor;\n+  private final Metrics metrics;\n+  private final Map<String, String> customMetricsTags;\n+  private final String ksqlServiceId;\n+\n+  public PullQueryExecutorMetrics(\n+      final String ksqlServiceId,\n+      final Map<String, String> customMetricsTags\n+  ) {\n+\n+    this.metrics = MetricCollectors.getMetrics();\n+    this.sensors = new ArrayList<>();\n+    this.localRequestsSensor = configureLocalRequestsSensor();\n+    this.remoteRequestsSensor = configureRemoteRequestsSensor();\n+    this.latencySensor = configureRequestSensor();\n+    this.requestRateSensor = configureRateSensor();\n+    this.errorRateSensor = configureErrorRateSensor();\n+    this.customMetricsTags = Objects.requireNonNull(customMetricsTags, \"customMetricsTags\");\n+    this.ksqlServiceId = ReservedInternalTopics.KSQL_INTERNAL_TOPIC_PREFIX\n+        + ksqlServiceId;\n+  }\n+\n+  @Override\n+  public void close() {\n+    sensors.forEach(sensor -> metrics.removeSensor(sensor.name()));\n+  }\n+\n+  public void recordLocalRequests(final double value) {\n+    this.localRequestsSensor.record(value);\n+  }\n+\n+  public void recordRemoteRequests(final double value) {\n+    this.remoteRequestsSensor.record(value);\n+  }\n+\n+  public void recordRate(final double value) {\n+    this.requestRateSensor.record(value);\n+  }\n+\n+  public void recordLatency(final double value) {\n+    this.latencySensor.record(value);\n+  }\n+\n+  public void recordErrorRate(final double value) {\n+    this.errorRateSensor.record(value);\n+  }\n+\n+  private Sensor configureLocalRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-local\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-local-count\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Count of local pull query requests\",\n+            customMetricsTags\n+        ),\n+        new WindowedCount()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureRemoteRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-remote\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-remote-count\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Count of remote pull query requests\",\n+            customMetricsTags\n+        ),\n+        new WindowedCount()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureRateSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-rate\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-rate\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Rate of pull query requests\",\n+            customMetricsTags\n+        ),\n+        new Rate()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureErrorRateSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-error-rate\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-error-rate\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Rate of erroneous pull query requests\",\n+            customMetricsTags\n+        ),\n+        new Rate()\n+    );\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-error-total\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Total number of erroneous pull query requests\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ce409341ee2452ef312318686d34f7b8a74dfb"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI1ODc4Ng==", "bodyText": "I think its more informative to have a total count and rate. wrk reports both as well", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393258786", "createdAt": "2020-03-16T19:20:01Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server.execution;\n+\n+import io.confluent.ksql.metrics.MetricCollectors;\n+import io.confluent.ksql.util.ReservedInternalTopics;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.Avg;\n+import org.apache.kafka.common.metrics.stats.Max;\n+import org.apache.kafka.common.metrics.stats.Min;\n+import org.apache.kafka.common.metrics.stats.Percentile;\n+import org.apache.kafka.common.metrics.stats.Percentiles;\n+import org.apache.kafka.common.metrics.stats.Percentiles.BucketSizing;\n+import org.apache.kafka.common.metrics.stats.Rate;\n+import org.apache.kafka.common.metrics.stats.WindowedCount;\n+\n+public class PullQueryExecutorMetrics implements Closeable {\n+\n+  private static final String PULL_QUERY_METRIC_GROUP = \"pull-query\";\n+  private static final String PULL_REQUESTS = \"pull-query-requests\";\n+\n+  private final List<Sensor> sensors;\n+  private final Sensor localRequestsSensor;\n+  private final Sensor remoteRequestsSensor;\n+  private final Sensor latencySensor;\n+  private final Sensor requestRateSensor;\n+  private final Sensor errorRateSensor;\n+  private final Metrics metrics;\n+  private final Map<String, String> customMetricsTags;\n+  private final String ksqlServiceId;\n+\n+  public PullQueryExecutorMetrics(\n+      final String ksqlServiceId,\n+      final Map<String, String> customMetricsTags\n+  ) {\n+\n+    this.metrics = MetricCollectors.getMetrics();\n+    this.sensors = new ArrayList<>();\n+    this.localRequestsSensor = configureLocalRequestsSensor();\n+    this.remoteRequestsSensor = configureRemoteRequestsSensor();\n+    this.latencySensor = configureRequestSensor();\n+    this.requestRateSensor = configureRateSensor();\n+    this.errorRateSensor = configureErrorRateSensor();\n+    this.customMetricsTags = Objects.requireNonNull(customMetricsTags, \"customMetricsTags\");\n+    this.ksqlServiceId = ReservedInternalTopics.KSQL_INTERNAL_TOPIC_PREFIX\n+        + ksqlServiceId;\n+  }\n+\n+  @Override\n+  public void close() {\n+    sensors.forEach(sensor -> metrics.removeSensor(sensor.name()));\n+  }\n+\n+  public void recordLocalRequests(final double value) {\n+    this.localRequestsSensor.record(value);\n+  }\n+\n+  public void recordRemoteRequests(final double value) {\n+    this.remoteRequestsSensor.record(value);\n+  }\n+\n+  public void recordRate(final double value) {\n+    this.requestRateSensor.record(value);\n+  }\n+\n+  public void recordLatency(final double value) {\n+    this.latencySensor.record(value);\n+  }\n+\n+  public void recordErrorRate(final double value) {\n+    this.errorRateSensor.record(value);\n+  }\n+\n+  private Sensor configureLocalRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-local\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-local-count\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Count of local pull query requests\",\n+            customMetricsTags\n+        ),\n+        new WindowedCount()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureRemoteRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-remote\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-remote-count\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Count of remote pull query requests\",\n+            customMetricsTags\n+        ),\n+        new WindowedCount()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureRateSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-rate\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-rate\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Rate of pull query requests\",\n+            customMetricsTags\n+        ),\n+        new Rate()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureErrorRateSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-error-rate\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-error-rate\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Rate of erroneous pull query requests\",\n+            customMetricsTags\n+        ),\n+        new Rate()\n+    );\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-error-total\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Total number of erroneous pull query requests\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MDU5MQ=="}, "originalCommit": {"oid": "21ce409341ee2452ef312318686d34f7b8a74dfb"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzIyMDQ2OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzoyNDo0OVrOF2-fiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzoyNDo0OVrOF2-fiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MTMwNw==", "bodyText": "just pullQueryMetrics?", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393191307", "createdAt": "2020-03-16T17:24:49Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java", "diffHunk": "@@ -82,6 +86,8 @@\n   private final Errors errorHandler;\n   private KsqlConfig ksqlConfig;\n   private final PullQueryExecutor pullQueryExecutor;\n+  private Optional<PullQueryExecutorMetrics> pullQueryExecutorMetrics;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ce409341ee2452ef312318686d34f7b8a74dfb"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzIyNzY5OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzoyNjo1MFrOF2-kNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzoyNjo1MFrOF2-kNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MjUwMg==", "bodyText": "this will include latency for errored requests as well.. which is fine..  We can to know whether or not we are quickly failing", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393192502", "createdAt": "2020-03-16T17:26:50Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java", "diffHunk": "@@ -198,12 +218,19 @@ private Response handleStatement(\n         final PreparedStatement<Query> queryStmt = (PreparedStatement<Query>) statement;\n \n         if (queryStmt.getStatement().isPullQuery()) {\n-          return handlePullQuery(\n+          final Response response =  handlePullQuery(\n               securityContext.getServiceContext(),\n               queryStmt,\n               request.getConfigOverrides(),\n               request.getRequestProperties()\n           );\n+          if (pullQueryExecutorMetrics.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ce409341ee2452ef312318686d34f7b8a74dfb"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzIzNjM1OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzoyOToyMVrOF2-pyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToyMzo1M1rOF3CuPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MzkyOQ==", "bodyText": "should this be a rate?", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393193929", "createdAt": "2020-03-16T17:29:21Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server.execution;\n+\n+import io.confluent.ksql.metrics.MetricCollectors;\n+import io.confluent.ksql.util.ReservedInternalTopics;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.Avg;\n+import org.apache.kafka.common.metrics.stats.Max;\n+import org.apache.kafka.common.metrics.stats.Min;\n+import org.apache.kafka.common.metrics.stats.Percentile;\n+import org.apache.kafka.common.metrics.stats.Percentiles;\n+import org.apache.kafka.common.metrics.stats.Percentiles.BucketSizing;\n+import org.apache.kafka.common.metrics.stats.Rate;\n+import org.apache.kafka.common.metrics.stats.WindowedCount;\n+\n+public class PullQueryExecutorMetrics implements Closeable {\n+\n+  private static final String PULL_QUERY_METRIC_GROUP = \"pull-query\";\n+  private static final String PULL_REQUESTS = \"pull-query-requests\";\n+\n+  private final List<Sensor> sensors;\n+  private final Sensor localRequestsSensor;\n+  private final Sensor remoteRequestsSensor;\n+  private final Sensor latencySensor;\n+  private final Sensor requestRateSensor;\n+  private final Sensor errorRateSensor;\n+  private final Metrics metrics;\n+  private final Map<String, String> customMetricsTags;\n+  private final String ksqlServiceId;\n+\n+  public PullQueryExecutorMetrics(\n+      final String ksqlServiceId,\n+      final Map<String, String> customMetricsTags\n+  ) {\n+\n+    this.metrics = MetricCollectors.getMetrics();\n+    this.sensors = new ArrayList<>();\n+    this.localRequestsSensor = configureLocalRequestsSensor();\n+    this.remoteRequestsSensor = configureRemoteRequestsSensor();\n+    this.latencySensor = configureRequestSensor();\n+    this.requestRateSensor = configureRateSensor();\n+    this.errorRateSensor = configureErrorRateSensor();\n+    this.customMetricsTags = Objects.requireNonNull(customMetricsTags, \"customMetricsTags\");\n+    this.ksqlServiceId = ReservedInternalTopics.KSQL_INTERNAL_TOPIC_PREFIX\n+        + ksqlServiceId;\n+  }\n+\n+  @Override\n+  public void close() {\n+    sensors.forEach(sensor -> metrics.removeSensor(sensor.name()));\n+  }\n+\n+  public void recordLocalRequests(final double value) {\n+    this.localRequestsSensor.record(value);\n+  }\n+\n+  public void recordRemoteRequests(final double value) {\n+    this.remoteRequestsSensor.record(value);\n+  }\n+\n+  public void recordRate(final double value) {\n+    this.requestRateSensor.record(value);\n+  }\n+\n+  public void recordLatency(final double value) {\n+    this.latencySensor.record(value);\n+  }\n+\n+  public void recordErrorRate(final double value) {\n+    this.errorRateSensor.record(value);\n+  }\n+\n+  private Sensor configureLocalRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-local\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-local-count\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Count of local pull query requests\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ce409341ee2452ef312318686d34f7b8a74dfb"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI2MDYwNA==", "bodyText": "Added rate in addition to total", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393260604", "createdAt": "2020-03-16T19:23:53Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server.execution;\n+\n+import io.confluent.ksql.metrics.MetricCollectors;\n+import io.confluent.ksql.util.ReservedInternalTopics;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.Avg;\n+import org.apache.kafka.common.metrics.stats.Max;\n+import org.apache.kafka.common.metrics.stats.Min;\n+import org.apache.kafka.common.metrics.stats.Percentile;\n+import org.apache.kafka.common.metrics.stats.Percentiles;\n+import org.apache.kafka.common.metrics.stats.Percentiles.BucketSizing;\n+import org.apache.kafka.common.metrics.stats.Rate;\n+import org.apache.kafka.common.metrics.stats.WindowedCount;\n+\n+public class PullQueryExecutorMetrics implements Closeable {\n+\n+  private static final String PULL_QUERY_METRIC_GROUP = \"pull-query\";\n+  private static final String PULL_REQUESTS = \"pull-query-requests\";\n+\n+  private final List<Sensor> sensors;\n+  private final Sensor localRequestsSensor;\n+  private final Sensor remoteRequestsSensor;\n+  private final Sensor latencySensor;\n+  private final Sensor requestRateSensor;\n+  private final Sensor errorRateSensor;\n+  private final Metrics metrics;\n+  private final Map<String, String> customMetricsTags;\n+  private final String ksqlServiceId;\n+\n+  public PullQueryExecutorMetrics(\n+      final String ksqlServiceId,\n+      final Map<String, String> customMetricsTags\n+  ) {\n+\n+    this.metrics = MetricCollectors.getMetrics();\n+    this.sensors = new ArrayList<>();\n+    this.localRequestsSensor = configureLocalRequestsSensor();\n+    this.remoteRequestsSensor = configureRemoteRequestsSensor();\n+    this.latencySensor = configureRequestSensor();\n+    this.requestRateSensor = configureRateSensor();\n+    this.errorRateSensor = configureErrorRateSensor();\n+    this.customMetricsTags = Objects.requireNonNull(customMetricsTags, \"customMetricsTags\");\n+    this.ksqlServiceId = ReservedInternalTopics.KSQL_INTERNAL_TOPIC_PREFIX\n+        + ksqlServiceId;\n+  }\n+\n+  @Override\n+  public void close() {\n+    sensors.forEach(sensor -> metrics.removeSensor(sensor.name()));\n+  }\n+\n+  public void recordLocalRequests(final double value) {\n+    this.localRequestsSensor.record(value);\n+  }\n+\n+  public void recordRemoteRequests(final double value) {\n+    this.remoteRequestsSensor.record(value);\n+  }\n+\n+  public void recordRate(final double value) {\n+    this.requestRateSensor.record(value);\n+  }\n+\n+  public void recordLatency(final double value) {\n+    this.latencySensor.record(value);\n+  }\n+\n+  public void recordErrorRate(final double value) {\n+    this.errorRateSensor.record(value);\n+  }\n+\n+  private Sensor configureLocalRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-local\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-local-count\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Count of local pull query requests\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5MzkyOQ=="}, "originalCommit": {"oid": "21ce409341ee2452ef312318686d34f7b8a74dfb"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzIzNzE1OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzoyOTozM1rOF2-qQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxOToyMzo1OFrOF3CuXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NDA1MA==", "bodyText": "same here.. rate instead?", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393194050", "createdAt": "2020-03-16T17:29:33Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server.execution;\n+\n+import io.confluent.ksql.metrics.MetricCollectors;\n+import io.confluent.ksql.util.ReservedInternalTopics;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.Avg;\n+import org.apache.kafka.common.metrics.stats.Max;\n+import org.apache.kafka.common.metrics.stats.Min;\n+import org.apache.kafka.common.metrics.stats.Percentile;\n+import org.apache.kafka.common.metrics.stats.Percentiles;\n+import org.apache.kafka.common.metrics.stats.Percentiles.BucketSizing;\n+import org.apache.kafka.common.metrics.stats.Rate;\n+import org.apache.kafka.common.metrics.stats.WindowedCount;\n+\n+public class PullQueryExecutorMetrics implements Closeable {\n+\n+  private static final String PULL_QUERY_METRIC_GROUP = \"pull-query\";\n+  private static final String PULL_REQUESTS = \"pull-query-requests\";\n+\n+  private final List<Sensor> sensors;\n+  private final Sensor localRequestsSensor;\n+  private final Sensor remoteRequestsSensor;\n+  private final Sensor latencySensor;\n+  private final Sensor requestRateSensor;\n+  private final Sensor errorRateSensor;\n+  private final Metrics metrics;\n+  private final Map<String, String> customMetricsTags;\n+  private final String ksqlServiceId;\n+\n+  public PullQueryExecutorMetrics(\n+      final String ksqlServiceId,\n+      final Map<String, String> customMetricsTags\n+  ) {\n+\n+    this.metrics = MetricCollectors.getMetrics();\n+    this.sensors = new ArrayList<>();\n+    this.localRequestsSensor = configureLocalRequestsSensor();\n+    this.remoteRequestsSensor = configureRemoteRequestsSensor();\n+    this.latencySensor = configureRequestSensor();\n+    this.requestRateSensor = configureRateSensor();\n+    this.errorRateSensor = configureErrorRateSensor();\n+    this.customMetricsTags = Objects.requireNonNull(customMetricsTags, \"customMetricsTags\");\n+    this.ksqlServiceId = ReservedInternalTopics.KSQL_INTERNAL_TOPIC_PREFIX\n+        + ksqlServiceId;\n+  }\n+\n+  @Override\n+  public void close() {\n+    sensors.forEach(sensor -> metrics.removeSensor(sensor.name()));\n+  }\n+\n+  public void recordLocalRequests(final double value) {\n+    this.localRequestsSensor.record(value);\n+  }\n+\n+  public void recordRemoteRequests(final double value) {\n+    this.remoteRequestsSensor.record(value);\n+  }\n+\n+  public void recordRate(final double value) {\n+    this.requestRateSensor.record(value);\n+  }\n+\n+  public void recordLatency(final double value) {\n+    this.latencySensor.record(value);\n+  }\n+\n+  public void recordErrorRate(final double value) {\n+    this.errorRateSensor.record(value);\n+  }\n+\n+  private Sensor configureLocalRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-local\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-local-count\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Count of local pull query requests\",\n+            customMetricsTags\n+        ),\n+        new WindowedCount()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureRemoteRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-remote\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-remote-count\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Count of remote pull query requests\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ce409341ee2452ef312318686d34f7b8a74dfb"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzI2MDYzNg==", "bodyText": "Added rate in addition to total", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r393260636", "createdAt": "2020-03-16T19:23:58Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server.execution;\n+\n+import io.confluent.ksql.metrics.MetricCollectors;\n+import io.confluent.ksql.util.ReservedInternalTopics;\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.apache.kafka.common.metrics.Metrics;\n+import org.apache.kafka.common.metrics.Sensor;\n+import org.apache.kafka.common.metrics.stats.Avg;\n+import org.apache.kafka.common.metrics.stats.Max;\n+import org.apache.kafka.common.metrics.stats.Min;\n+import org.apache.kafka.common.metrics.stats.Percentile;\n+import org.apache.kafka.common.metrics.stats.Percentiles;\n+import org.apache.kafka.common.metrics.stats.Percentiles.BucketSizing;\n+import org.apache.kafka.common.metrics.stats.Rate;\n+import org.apache.kafka.common.metrics.stats.WindowedCount;\n+\n+public class PullQueryExecutorMetrics implements Closeable {\n+\n+  private static final String PULL_QUERY_METRIC_GROUP = \"pull-query\";\n+  private static final String PULL_REQUESTS = \"pull-query-requests\";\n+\n+  private final List<Sensor> sensors;\n+  private final Sensor localRequestsSensor;\n+  private final Sensor remoteRequestsSensor;\n+  private final Sensor latencySensor;\n+  private final Sensor requestRateSensor;\n+  private final Sensor errorRateSensor;\n+  private final Metrics metrics;\n+  private final Map<String, String> customMetricsTags;\n+  private final String ksqlServiceId;\n+\n+  public PullQueryExecutorMetrics(\n+      final String ksqlServiceId,\n+      final Map<String, String> customMetricsTags\n+  ) {\n+\n+    this.metrics = MetricCollectors.getMetrics();\n+    this.sensors = new ArrayList<>();\n+    this.localRequestsSensor = configureLocalRequestsSensor();\n+    this.remoteRequestsSensor = configureRemoteRequestsSensor();\n+    this.latencySensor = configureRequestSensor();\n+    this.requestRateSensor = configureRateSensor();\n+    this.errorRateSensor = configureErrorRateSensor();\n+    this.customMetricsTags = Objects.requireNonNull(customMetricsTags, \"customMetricsTags\");\n+    this.ksqlServiceId = ReservedInternalTopics.KSQL_INTERNAL_TOPIC_PREFIX\n+        + ksqlServiceId;\n+  }\n+\n+  @Override\n+  public void close() {\n+    sensors.forEach(sensor -> metrics.removeSensor(sensor.name()));\n+  }\n+\n+  public void recordLocalRequests(final double value) {\n+    this.localRequestsSensor.record(value);\n+  }\n+\n+  public void recordRemoteRequests(final double value) {\n+    this.remoteRequestsSensor.record(value);\n+  }\n+\n+  public void recordRate(final double value) {\n+    this.requestRateSensor.record(value);\n+  }\n+\n+  public void recordLatency(final double value) {\n+    this.latencySensor.record(value);\n+  }\n+\n+  public void recordErrorRate(final double value) {\n+    this.errorRateSensor.record(value);\n+  }\n+\n+  private Sensor configureLocalRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-local\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-local-count\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Count of local pull query requests\",\n+            customMetricsTags\n+        ),\n+        new WindowedCount()\n+    );\n+    sensors.add(sensor);\n+    return sensor;\n+  }\n+\n+  private Sensor configureRemoteRequestsSensor() {\n+    final Sensor sensor = metrics.sensor(\n+        PULL_QUERY_METRIC_GROUP + \"-\" + PULL_REQUESTS + \"-remote\");\n+    sensor.add(\n+        metrics.metricName(\n+            PULL_REQUESTS + \"-remote-count\",\n+            ksqlServiceId + PULL_QUERY_METRIC_GROUP,\n+            \"Count of remote pull query requests\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE5NDA1MA=="}, "originalCommit": {"oid": "21ce409341ee2452ef312318686d34f7b8a74dfb"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzY2MTMyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjozNDozMVrOF_dEqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjozNDozMVrOF_dEqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4MDkzNg==", "bodyText": "There needs to be a null check here as pulQueryMetrics can be null and this will cause a NPE on shutdown if it wasn't configured. (I have seen this NPE in real life)", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r402080936", "createdAt": "2020-04-02T06:34:31Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java", "diffHunk": "@@ -158,7 +173,11 @@ public Response streamQuery(\n     CommandStoreUtil.httpWaitForCommandSequenceNumber(\n         commandQueue, request, commandQueueCatchupTimeout);\n \n-    return handleStatement(securityContext, request, statement);\n+    return handleStatement(securityContext, request, statement, startTime);\n+  }\n+\n+  public void closeMetrics() {\n+    pullQueryMetrics.ifPresent(PullQueryExecutorMetrics::close);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64a2a4ee88ce9b62c3fd78c2169ad49076ffbf7e"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MzY3NzM0OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjo0MDo1OFrOF_dOWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwNjo0MDo1OFrOF_dOWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjA4MzQxNg==", "bodyText": "pullQueryMetrics is a non final field - can we be sure that the configure method is called on the same thread that created the resource, and nothing else has seen the resource by that point, or is there some existing memory barrier being created?\nIf not, this is not thread safe, and another thread might see a null value of pullQueryMetrics after it has been set in wall clock time.\nA solution would be to get/set pullQueryMetrics via a synchronized getter/setter or make it volatile.\nIf the same pattern is being used elsewhere would also need to be addressed.", "url": "https://github.com/confluentinc/ksql/pull/4608#discussion_r402083416", "createdAt": "2020-04-02T06:40:58Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java", "diffHunk": "@@ -142,13 +149,21 @@ public void configure(final KsqlConfig config) {\n     }\n \n     ksqlConfig = config;\n+    final Boolean collectMetrics = ksqlConfig.getBoolean(\n+        KsqlConfig.KSQL_QUERY_PULL_METRICS_ENABLED);\n+    this.pullQueryMetrics = collectMetrics", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64a2a4ee88ce9b62c3fd78c2169ad49076ffbf7e"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1986, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}