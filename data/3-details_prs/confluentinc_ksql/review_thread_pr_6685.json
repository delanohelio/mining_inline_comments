{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NDg3MzUy", "number": 6685, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjowODo0MlrOE-uZhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzozNDo1M1rOE-w2jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjA3MzY3OnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/null.json", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjowODo0MlrOH8CM0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjo0NjoxNVrOIBJg4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxMjY1OQ==", "bodyText": "Could you add tests for the  NULLIF(COL0, 10) AS A, NULLIF(COL1, 'x') AS B cases?", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r532712659", "createdAt": "2020-11-30T16:08:42Z", "author": {"login": "spena"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/null.json", "diffHunk": "@@ -259,6 +259,29 @@\n         \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n         \"message\": \"Invalid comparison expression 'null' in join '(L.A = null)'. Each side of the join comparision must contain references from exactly one source.\"\n       }\n+    },\n+    {\n+      \"name\": \"null if\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (COL0 INT KEY, COL1 STRING, COL2 ARRAY<INT>) WITH (kafka_topic='test_topic', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT AS SELECT COL0, NULLIF(COL0, 10) AS A, NULLIF(COL1, 'x') AS B, NULLIF(COL2, ARRAY[1, 2, 3]) AS C FROM INPUT;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"key\": 1, \"value\": {\"COL1\": \"not null\", \"COL2\": [1, 2, 3]}},\n+        {\"topic\": \"test_topic\", \"key\": null, \"value\": {}},\n+        {\"topic\": \"test_topic\", \"key\": null, \"value\": null},\n+        {\"topic\": \"test_topic\", \"key\": 2, \"value\": {\"COL1\": \"not null\", \"COL2\": [4, 5, 6]}},\n+        {\"topic\": \"test_topic\", \"key\": 3, \"value\": {\"COL1\": \"not null\", \"COL2\": []}},\n+        {\"topic\": \"test_topic\", \"key\": 4, \"value\": {\"COL1\": null, \"COL2\": [7,8]}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 1, \"value\": {\"A\": 1, \"B\": \"not null\", \"C\": null}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"A\": null, \"B\": null, \"C\": null}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": null},\n+        {\"topic\": \"OUTPUT\", \"key\": 2, \"value\": {\"A\": 2, \"B\": \"not null\", \"C\": [4, 5, 6]}},\n+        {\"topic\": \"OUTPUT\", \"key\": 3, \"value\": {\"A\": 3, \"B\": \"not null\", \"C\": []}},\n+        {\"topic\": \"OUTPUT\", \"key\": 4, \"value\": {\"A\": 4, \"B\": null, \"C\": [7,8]}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8429d40f3f68e3b14d7692547cd7f4215541440a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzEzNTgxOQ==", "bodyText": "ok. will do it.", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r533135819", "createdAt": "2020-12-01T07:58:36Z", "author": {"login": "fjbecerra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/null.json", "diffHunk": "@@ -259,6 +259,29 @@\n         \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n         \"message\": \"Invalid comparison expression 'null' in join '(L.A = null)'. Each side of the join comparision must contain references from exactly one source.\"\n       }\n+    },\n+    {\n+      \"name\": \"null if\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (COL0 INT KEY, COL1 STRING, COL2 ARRAY<INT>) WITH (kafka_topic='test_topic', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT AS SELECT COL0, NULLIF(COL0, 10) AS A, NULLIF(COL1, 'x') AS B, NULLIF(COL2, ARRAY[1, 2, 3]) AS C FROM INPUT;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"key\": 1, \"value\": {\"COL1\": \"not null\", \"COL2\": [1, 2, 3]}},\n+        {\"topic\": \"test_topic\", \"key\": null, \"value\": {}},\n+        {\"topic\": \"test_topic\", \"key\": null, \"value\": null},\n+        {\"topic\": \"test_topic\", \"key\": 2, \"value\": {\"COL1\": \"not null\", \"COL2\": [4, 5, 6]}},\n+        {\"topic\": \"test_topic\", \"key\": 3, \"value\": {\"COL1\": \"not null\", \"COL2\": []}},\n+        {\"topic\": \"test_topic\", \"key\": 4, \"value\": {\"COL1\": null, \"COL2\": [7,8]}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 1, \"value\": {\"A\": 1, \"B\": \"not null\", \"C\": null}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"A\": null, \"B\": null, \"C\": null}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": null},\n+        {\"topic\": \"OUTPUT\", \"key\": 2, \"value\": {\"A\": 2, \"B\": \"not null\", \"C\": [4, 5, 6]}},\n+        {\"topic\": \"OUTPUT\", \"key\": 3, \"value\": {\"A\": 3, \"B\": \"not null\", \"C\": []}},\n+        {\"topic\": \"OUTPUT\", \"key\": 4, \"value\": {\"A\": 4, \"B\": null, \"C\": [7,8]}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxMjY1OQ=="}, "originalCommit": {"oid": "8429d40f3f68e3b14d7692547cd7f4215541440a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3NTM2Mw==", "bodyText": "@spena, added more tests", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r538075363", "createdAt": "2020-12-08T06:46:15Z", "author": {"login": "fjbecerra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/null.json", "diffHunk": "@@ -259,6 +259,29 @@\n         \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n         \"message\": \"Invalid comparison expression 'null' in join '(L.A = null)'. Each side of the join comparision must contain references from exactly one source.\"\n       }\n+    },\n+    {\n+      \"name\": \"null if\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (COL0 INT KEY, COL1 STRING, COL2 ARRAY<INT>) WITH (kafka_topic='test_topic', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT AS SELECT COL0, NULLIF(COL0, 10) AS A, NULLIF(COL1, 'x') AS B, NULLIF(COL2, ARRAY[1, 2, 3]) AS C FROM INPUT;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"key\": 1, \"value\": {\"COL1\": \"not null\", \"COL2\": [1, 2, 3]}},\n+        {\"topic\": \"test_topic\", \"key\": null, \"value\": {}},\n+        {\"topic\": \"test_topic\", \"key\": null, \"value\": null},\n+        {\"topic\": \"test_topic\", \"key\": 2, \"value\": {\"COL1\": \"not null\", \"COL2\": [4, 5, 6]}},\n+        {\"topic\": \"test_topic\", \"key\": 3, \"value\": {\"COL1\": \"not null\", \"COL2\": []}},\n+        {\"topic\": \"test_topic\", \"key\": 4, \"value\": {\"COL1\": null, \"COL2\": [7,8]}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 1, \"value\": {\"A\": 1, \"B\": \"not null\", \"C\": null}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"A\": null, \"B\": null, \"C\": null}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": null},\n+        {\"topic\": \"OUTPUT\", \"key\": 2, \"value\": {\"A\": 2, \"B\": \"not null\", \"C\": [4, 5, 6]}},\n+        {\"topic\": \"OUTPUT\", \"key\": 3, \"value\": {\"A\": 3, \"B\": \"not null\", \"C\": []}},\n+        {\"topic\": \"OUTPUT\", \"key\": 4, \"value\": {\"A\": 4, \"B\": null, \"C\": [7,8]}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxMjY1OQ=="}, "originalCommit": {"oid": "8429d40f3f68e3b14d7692547cd7f4215541440a"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjA4NzUwOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjoxMToxOVrOH8CVCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjo0NzoyNFrOIBJixA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxNDc2MA==", "bodyText": "Do these parameters support any expression like IFNULL? If so, is it better to use NULLIF(expr1, expr2) instead?", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r532714760", "createdAt": "2020-11-30T16:11:19Z", "author": {"login": "spena"}, "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -1003,6 +1003,19 @@ If the provided `expression` is NULL, returns `altValue`, otherwise, returns `ex\n Where the parameter type is a complex type, for example `ARRAY` or `STRUCT`, the contents of the\n complex type are not inspected.\n \n+### `NULLIF`\n+\n+Since: -\n+\n+```sql\n+NULLIF(parameter1, parameter2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8429d40f3f68e3b14d7692547cd7f4215541440a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzExODUyNg==", "bodyText": "Yes it does, will do it.", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r533118526", "createdAt": "2020-12-01T07:19:36Z", "author": {"login": "fjbecerra"}, "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -1003,6 +1003,19 @@ If the provided `expression` is NULL, returns `altValue`, otherwise, returns `ex\n Where the parameter type is a complex type, for example `ARRAY` or `STRUCT`, the contents of the\n complex type are not inspected.\n \n+### `NULLIF`\n+\n+Since: -\n+\n+```sql\n+NULLIF(parameter1, parameter2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxNDc2MA=="}, "originalCommit": {"oid": "8429d40f3f68e3b14d7692547cd7f4215541440a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3NTg0NA==", "bodyText": "Changed arguments name as suggested", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r538075844", "createdAt": "2020-12-08T06:47:24Z", "author": {"login": "fjbecerra"}, "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -1003,6 +1003,19 @@ If the provided `expression` is NULL, returns `altValue`, otherwise, returns `ex\n Where the parameter type is a complex type, for example `ARRAY` or `STRUCT`, the contents of the\n complex type are not inspected.\n \n+### `NULLIF`\n+\n+Since: -\n+\n+```sql\n+NULLIF(parameter1, parameter2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxNDc2MA=="}, "originalCommit": {"oid": "8429d40f3f68e3b14d7692547cd7f4215541440a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjEyNjYwOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/function/udf/nulls/NullIfTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjoxOToyNlrOH8CtEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwNjo0ODowOVrOIBJj4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyMDkxNQ==", "bodyText": "Could you add a test when value2 is null and value1 is not null?\nCould you add a test to verify case-sensitive comparison? nullif(\"a\", \"A\")", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r532720915", "createdAt": "2020-11-30T16:19:26Z", "author": {"login": "spena"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/function/udf/nulls/NullIfTest.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package io.confluent.ksql.function.udf.nulls;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+public class NullIfTest {\n+\n+  private NullIf udf;\n+\n+  @Before\n+  public void setUp() {\n+    udf = new NullIf();\n+  }\n+\n+  @Test\n+  public void shouldReturnNullIfBothValuesAreNulls() {\n+    assertThat(udf.nullIf(null, null), is(nullValue()));\n+  }\n+\n+  @Test\n+  public void shouldReturnNullIfValue1IsNull() {\n+    assertThat(udf.nullIf(null, \"a\"), is(nullValue()));\n+  }\n+\n+  @Test\n+  public void shouldReturnNullIfBothValuesAreEqual() {\n+    assertThat(udf.nullIf(\"a\", \"a\"), is(nullValue()));\n+  }\n+\n+  @Test\n+  public void shouldReturnValue1IfBothValuesAreNonEqual() {\n+    assertThat(udf.nullIf(\"a\", \"b\"), is(\"a\"));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8429d40f3f68e3b14d7692547cd7f4215541440a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODA3NjEzMQ==", "bodyText": "Added more tests", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r538076131", "createdAt": "2020-12-08T06:48:09Z", "author": {"login": "fjbecerra"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/function/udf/nulls/NullIfTest.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package io.confluent.ksql.function.udf.nulls;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+public class NullIfTest {\n+\n+  private NullIf udf;\n+\n+  @Before\n+  public void setUp() {\n+    udf = new NullIf();\n+  }\n+\n+  @Test\n+  public void shouldReturnNullIfBothValuesAreNulls() {\n+    assertThat(udf.nullIf(null, null), is(nullValue()));\n+  }\n+\n+  @Test\n+  public void shouldReturnNullIfValue1IsNull() {\n+    assertThat(udf.nullIf(null, \"a\"), is(nullValue()));\n+  }\n+\n+  @Test\n+  public void shouldReturnNullIfBothValuesAreEqual() {\n+    assertThat(udf.nullIf(\"a\", \"a\"), is(nullValue()));\n+  }\n+\n+  @Test\n+  public void shouldReturnValue1IfBothValuesAreNonEqual() {\n+    assertThat(udf.nullIf(\"a\", \"b\"), is(\"a\"));\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyMDkxNQ=="}, "originalCommit": {"oid": "8429d40f3f68e3b14d7692547cd7f4215541440a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjQ3MjUxOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzozNDoxNlrOH8GBKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzozNDoxNlrOH8GBKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3NTIwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the provided `parameter1` is equal to `parameter2`, returns NULL, otherwise, returns `parameter1`.\n          \n          \n            \n            Returns NULL if `parameter1` is equal to `parameter2`; otherwise, returns `parameter1`.", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r532775209", "createdAt": "2020-11-30T17:34:16Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -1003,6 +1003,19 @@ If the provided `expression` is NULL, returns `altValue`, otherwise, returns `ex\n Where the parameter type is a complex type, for example `ARRAY` or `STRUCT`, the contents of the\n complex type are not inspected.\n \n+### `NULLIF`\n+\n+Since: -\n+\n+```sql\n+NULLIF(parameter1, parameter2)\n+```\n+\n+If the provided `parameter1` is equal to `parameter2`, returns NULL, otherwise, returns `parameter1`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8429d40f3f68e3b14d7692547cd7f4215541440a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjQ3NTY1OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzozNDo1M1rOH8GC7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzozNDo1M1rOH8GC7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3NTY2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Where the parameter type is a complex type, for example `ARRAY` or `STRUCT`, the contents of the\n          \n          \n            \n            If the parameter type is a complex type, for example, `ARRAY` or `STRUCT`, the contents of the", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r532775662", "createdAt": "2020-11-30T17:34:53Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -1003,6 +1003,19 @@ If the provided `expression` is NULL, returns `altValue`, otherwise, returns `ex\n Where the parameter type is a complex type, for example `ARRAY` or `STRUCT`, the contents of the\n complex type are not inspected.\n \n+### `NULLIF`\n+\n+Since: -\n+\n+```sql\n+NULLIF(parameter1, parameter2)\n+```\n+\n+If the provided `parameter1` is equal to `parameter2`, returns NULL, otherwise, returns `parameter1`.\n+\n+Where the parameter type is a complex type, for example `ARRAY` or `STRUCT`, the contents of the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8429d40f3f68e3b14d7692547cd7f4215541440a"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2461, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}