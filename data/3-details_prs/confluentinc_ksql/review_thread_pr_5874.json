{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1OTg2OTkz", "number": 5874, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMzoxMToyNVrOERpYhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMzoyNzowNlrOERplSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTM5MjcxOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/RewrittenAnalysis.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMzoxMToyNVrOG2elhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMTo0NjowNVrOG2-mXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NzQxMg==", "bodyText": "nit: I think this code would be easier to read if we had:\nif (!original.getRefinementInfo().isPresent || !original.getWindowExpression().isPresent()) {\n  return original.getWindowExpression();\n}\n\nRefinementInfo refinement = optional.get();\nWindowExpression window = optional.get();\n...", "url": "https://github.com/confluentinc/ksql/pull/5874#discussion_r459777412", "createdAt": "2020-07-23T23:11:25Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/RewrittenAnalysis.java", "diffHunk": "@@ -113,7 +123,49 @@ public ImmutableAnalysis original() {\n \n   @Override\n   public Optional<WindowExpression> getWindowExpression() {\n-    return original.getWindowExpression();\n+    if (original.getRefinementInfo().isPresent()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe6b04e410b34f2f291ab50d3fc6a30c48487016"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI5NTY5Mw==", "bodyText": "We should still check if there is a grace period though right, because if there is we also just return the original window expression", "url": "https://github.com/confluentinc/ksql/pull/5874#discussion_r460295693", "createdAt": "2020-07-24T21:27:31Z", "author": {"login": "nae701"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/RewrittenAnalysis.java", "diffHunk": "@@ -113,7 +123,49 @@ public ImmutableAnalysis original() {\n \n   @Override\n   public Optional<WindowExpression> getWindowExpression() {\n-    return original.getWindowExpression();\n+    if (original.getRefinementInfo().isPresent()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NzQxMg=="}, "originalCommit": {"oid": "fe6b04e410b34f2f291ab50d3fc6a30c48487016"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMwMTkxOA==", "bodyText": "yes we do need to check that", "url": "https://github.com/confluentinc/ksql/pull/5874#discussion_r460301918", "createdAt": "2020-07-24T21:46:05Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/RewrittenAnalysis.java", "diffHunk": "@@ -113,7 +123,49 @@ public ImmutableAnalysis original() {\n \n   @Override\n   public Optional<WindowExpression> getWindowExpression() {\n-    return original.getWindowExpression();\n+    if (original.getRefinementInfo().isPresent()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NzQxMg=="}, "originalCommit": {"oid": "fe6b04e410b34f2f291ab50d3fc6a30c48487016"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTM5NDU0OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/RewrittenAnalysis.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMzoxMjoxOFrOG2emlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMzoxMjoxOFrOG2emlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc3NzY4Nw==", "bodyText": "nit: can be static final", "url": "https://github.com/confluentinc/ksql/pull/5874#discussion_r459777687", "createdAt": "2020-07-23T23:12:18Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/RewrittenAnalysis.java", "diffHunk": "@@ -113,7 +123,49 @@ public ImmutableAnalysis original() {\n \n   @Override\n   public Optional<WindowExpression> getWindowExpression() {\n-    return original.getWindowExpression();\n+    if (original.getRefinementInfo().isPresent()\n+        && original.getRefinementInfo().get().getOutputRefinement() == OutputRefinement.FINAL\n+        && !original.getWindowExpression().get()\n+        .getKsqlWindowExpression().getGracePeriod().isPresent()) {\n+      final KsqlWindowExpression ksqlWindowNew;\n+      final KsqlWindowExpression ksqlWindowOld =\n+          original.getWindowExpression().get().getKsqlWindowExpression();\n+      final WindowTimeClause zeroGracePeriod = new WindowTimeClause(0L, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe6b04e410b34f2f291ab50d3fc6a30c48487016"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTQyNTM3OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/RewrittenAnalysis.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMzoyNzowNlrOG2e4Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMzoyNzowNlrOG2e4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc4MjE5OQ==", "bodyText": "nit: we're not checking isPresent here, which I think is causing https://jenkins.confluent.io/job/confluentinc-pr/job/ksql/job/PR-5874/1/testReport/junit/io.confluent.ksql.planner/LogicalPlannerTest/shouldThrowOnNonWindowedAggregationSuppressions/ to fail", "url": "https://github.com/confluentinc/ksql/pull/5874#discussion_r459782199", "createdAt": "2020-07-23T23:27:06Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/RewrittenAnalysis.java", "diffHunk": "@@ -113,7 +123,49 @@ public ImmutableAnalysis original() {\n \n   @Override\n   public Optional<WindowExpression> getWindowExpression() {\n-    return original.getWindowExpression();\n+    if (original.getRefinementInfo().isPresent()\n+        && original.getRefinementInfo().get().getOutputRefinement() == OutputRefinement.FINAL\n+        && !original.getWindowExpression().get()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe6b04e410b34f2f291ab50d3fc6a30c48487016"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2974, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}