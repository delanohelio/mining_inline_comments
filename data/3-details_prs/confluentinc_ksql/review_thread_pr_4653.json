{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNTY5NDI1", "number": 4653, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDo1MDozM1rODjS-NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOToyMDowNVrODkyHjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MzM3NTg5OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/CommandRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwMDo1MDozM1rOFvBslg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODozNDoxOFrOFvchqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1NTE5MA==", "bodyText": "Can we just get rid of this and set the status to ERROR if we haven't polled in a while?", "url": "https://github.com/confluentinc/ksql/pull/4653#discussion_r384855190", "createdAt": "2020-02-27T00:50:33Z", "author": {"login": "rodesai"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/CommandRunner.java", "diffHunk": "@@ -262,12 +266,15 @@ private void terminateCluster(final Command command) {\n   CommandRunnerStatus checkCommandRunnerStatus() {\n     final Pair<QueuedCommand, Instant> currentCommand = currentCommandRef.get();\n     if (currentCommand == null) {\n-      return CommandRunnerStatus.RUNNING;\n+      return lastPollTime.get() == null ||\n+          Duration.between(lastPollTime.get(), clock.instant()).toMillis()\n+              < NEW_CMDS_TIMEOUT.toMillis() * 3\n+              ? CommandRunnerStatus.RUNNING : CommandRunnerStatus.ERROR;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d5be45a44999d20fa56bedbae547ab21cd5ef2f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI5NDc2MQ==", "bodyText": "We only start polling after we processPriorCommands so this could still be useful in the case of the CommandRunner getting stuck on start up.", "url": "https://github.com/confluentinc/ksql/pull/4653#discussion_r385294761", "createdAt": "2020-02-27T18:34:18Z", "author": {"login": "stevenpyzhang"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/CommandRunner.java", "diffHunk": "@@ -262,12 +266,15 @@ private void terminateCluster(final Command command) {\n   CommandRunnerStatus checkCommandRunnerStatus() {\n     final Pair<QueuedCommand, Instant> currentCommand = currentCommandRef.get();\n     if (currentCommand == null) {\n-      return CommandRunnerStatus.RUNNING;\n+      return lastPollTime.get() == null ||\n+          Duration.between(lastPollTime.get(), clock.instant()).toMillis()\n+              < NEW_CMDS_TIMEOUT.toMillis() * 3\n+              ? CommandRunnerStatus.RUNNING : CommandRunnerStatus.ERROR;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDg1NTE5MA=="}, "originalCommit": {"oid": "6d5be45a44999d20fa56bedbae547ab21cd5ef2f"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODk2NDYyOnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/CommandRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOToyMDowNVrOFxTMIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTo0MDo0MVrOFx7BZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzODk0NQ==", "bodyText": "why do we need this additional status? Once it's here we have to support it forever. Why is it not enough to know that the runner is up or down?", "url": "https://github.com/confluentinc/ksql/pull/4653#discussion_r387238945", "createdAt": "2020-03-03T19:20:05Z", "author": {"login": "rodesai"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/CommandRunner.java", "diffHunk": "@@ -64,11 +64,13 @@\n \n   private final CommandRunnerStatusMetric commandRunnerStatusMetric;\n   private final AtomicReference<Pair<QueuedCommand, Instant>> currentCommandRef;\n+  private final AtomicReference<Instant> lastPollTime;\n   private final Duration commandRunnerHealthTimeout;\n   private final Clock clock;\n \n   public enum CommandRunnerStatus {\n     RUNNING,\n+    STUCK,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "310350de5286cbfea06c125e649fab82cabf575d"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg5MTU1OA==", "bodyText": "I thought it would be helpful to be able to tell the difference between if the CommandRunner thread is stuck on a particular Command or the thread itself has died.\nIf we do force the server to shut down whenever the CommandRunner thread dies, then this additional status won't be needed.", "url": "https://github.com/confluentinc/ksql/pull/4653#discussion_r387891558", "createdAt": "2020-03-04T19:40:41Z", "author": {"login": "stevenpyzhang"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/CommandRunner.java", "diffHunk": "@@ -64,11 +64,13 @@\n \n   private final CommandRunnerStatusMetric commandRunnerStatusMetric;\n   private final AtomicReference<Pair<QueuedCommand, Instant>> currentCommandRef;\n+  private final AtomicReference<Instant> lastPollTime;\n   private final Duration commandRunnerHealthTimeout;\n   private final Clock clock;\n \n   public enum CommandRunnerStatus {\n     RUNNING,\n+    STUCK,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzODk0NQ=="}, "originalCommit": {"oid": "310350de5286cbfea06c125e649fab82cabf575d"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2015, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}