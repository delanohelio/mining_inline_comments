{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNTEzMzQy", "number": 4427, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo1MTo0NlrODdDTVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo1NToxOFrODdDYLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzg5Mzk2OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/LagReportingAgent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo1MTo0N1rOFlbm3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODozMzo1MFrOFle6Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5Mzk0OQ==", "bodyText": "nit: if you invert this if you could move it before the construction of the lagInfo var.\ne.g.\n  if (!aliveHosts.contains(host)) {\n     return Optional.empty();\n   }\n\n   final Optional<LagInfoEntity> lagInfo = ...\n   return lagInfo;", "url": "https://github.com/confluentinc/ksql/pull/4427#discussion_r374793949", "createdAt": "2020-02-04T16:51:47Z", "author": {"login": "big-andy-coates"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/LagReportingAgent.java", "diffHunk": "@@ -171,12 +167,11 @@ public void receiveHostLag(final LagReportingMessage lagReportingMessage) {\n   public Optional<LagInfoEntity> getHostsPartitionLagInfo(\n       final KsqlHost host, final QueryStateStoreId queryStateStoreId, final int partition) {\n     final Set<KsqlHost> aliveHosts = aliveHostsRef.get();\n-    final LagInfoEntity lagInfo = receivedLagInfo\n-        .getOrDefault(host, EMPTY_HOST_STORE_LAGS)\n-        .getStateStoreLagsOrDefault(queryStateStoreId, EMPTY_STATE_STORE_LAGS)\n-        .getLagByPartition(partition);\n-    if (aliveHosts.contains(host) && lagInfo != null) {\n-      return Optional.of(lagInfo);\n+    final Optional<LagInfoEntity> lagInfo = Optional.ofNullable(receivedLagInfo.get(host))\n+        .flatMap(hostStoreLags -> hostStoreLags.getStateStoreLags(queryStateStoreId))\n+        .flatMap(stateStoreLags -> stateStoreLags.getLagByPartition(partition));\n+    if (aliveHosts.contains(host)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdce4832ad55855c4edb06b67f9a397e11513418"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0ODA1OQ==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/4427#discussion_r374848059", "createdAt": "2020-02-04T18:33:50Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/LagReportingAgent.java", "diffHunk": "@@ -171,12 +167,11 @@ public void receiveHostLag(final LagReportingMessage lagReportingMessage) {\n   public Optional<LagInfoEntity> getHostsPartitionLagInfo(\n       final KsqlHost host, final QueryStateStoreId queryStateStoreId, final int partition) {\n     final Set<KsqlHost> aliveHosts = aliveHostsRef.get();\n-    final LagInfoEntity lagInfo = receivedLagInfo\n-        .getOrDefault(host, EMPTY_HOST_STORE_LAGS)\n-        .getStateStoreLagsOrDefault(queryStateStoreId, EMPTY_STATE_STORE_LAGS)\n-        .getLagByPartition(partition);\n-    if (aliveHosts.contains(host) && lagInfo != null) {\n-      return Optional.of(lagInfo);\n+    final Optional<LagInfoEntity> lagInfo = Optional.ofNullable(receivedLagInfo.get(host))\n+        .flatMap(hostStoreLags -> hostStoreLags.getStateStoreLags(queryStateStoreId))\n+        .flatMap(stateStoreLags -> stateStoreLags.getLagByPartition(partition));\n+    if (aliveHosts.contains(host)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5Mzk0OQ=="}, "originalCommit": {"oid": "bdce4832ad55855c4edb06b67f9a397e11513418"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzkwMDg2OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/LagReportingAgent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo1Mzo0NVrOFlbrVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODozMjo0OFrOFle4SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NTA5Mg==", "bodyText": "Can't this be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final Optional<LagInfoEntity> lagInfo = Optional.ofNullable(receivedLagInfo.get(host))\n          \n          \n            \n                final Optional<LagInfoEntity> lagInfo = getLagPerHost(host)\n          \n      \n    \n    \n  \n\n??", "url": "https://github.com/confluentinc/ksql/pull/4427#discussion_r374795092", "createdAt": "2020-02-04T16:53:45Z", "author": {"login": "big-andy-coates"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/LagReportingAgent.java", "diffHunk": "@@ -171,12 +167,11 @@ public void receiveHostLag(final LagReportingMessage lagReportingMessage) {\n   public Optional<LagInfoEntity> getHostsPartitionLagInfo(\n       final KsqlHost host, final QueryStateStoreId queryStateStoreId, final int partition) {\n     final Set<KsqlHost> aliveHosts = aliveHostsRef.get();\n-    final LagInfoEntity lagInfo = receivedLagInfo\n-        .getOrDefault(host, EMPTY_HOST_STORE_LAGS)\n-        .getStateStoreLagsOrDefault(queryStateStoreId, EMPTY_STATE_STORE_LAGS)\n-        .getLagByPartition(partition);\n-    if (aliveHosts.contains(host) && lagInfo != null) {\n-      return Optional.of(lagInfo);\n+    final Optional<LagInfoEntity> lagInfo = Optional.ofNullable(receivedLagInfo.get(host))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdce4832ad55855c4edb06b67f9a397e11513418"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0NzU2MQ==", "bodyText": "Yep, changed.", "url": "https://github.com/confluentinc/ksql/pull/4427#discussion_r374847561", "createdAt": "2020-02-04T18:32:48Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/LagReportingAgent.java", "diffHunk": "@@ -171,12 +167,11 @@ public void receiveHostLag(final LagReportingMessage lagReportingMessage) {\n   public Optional<LagInfoEntity> getHostsPartitionLagInfo(\n       final KsqlHost host, final QueryStateStoreId queryStateStoreId, final int partition) {\n     final Set<KsqlHost> aliveHosts = aliveHostsRef.get();\n-    final LagInfoEntity lagInfo = receivedLagInfo\n-        .getOrDefault(host, EMPTY_HOST_STORE_LAGS)\n-        .getStateStoreLagsOrDefault(queryStateStoreId, EMPTY_STATE_STORE_LAGS)\n-        .getLagByPartition(partition);\n-    if (aliveHosts.contains(host) && lagInfo != null) {\n-      return Optional.of(lagInfo);\n+    final Optional<LagInfoEntity> lagInfo = Optional.ofNullable(receivedLagInfo.get(host))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NTA5Mg=="}, "originalCommit": {"oid": "bdce4832ad55855c4edb06b67f9a397e11513418"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzkwNjM3OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/ClusterStatusResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo1NToxOFrOFlbu3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODozODoyNVrOFlfDBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NTk5Nw==", "bodyText": "Think this can just be:\nprivate HostStoreLags getHostStoreLags(final KsqlHost ksqlHost) {\n    return lagReportingAgent\n        .map(agent -> agent.getLagPerHost(ksqlHost))\n        .orElse(EMPTY_HOST_STORE_LAGS);\n  }", "url": "https://github.com/confluentinc/ksql/pull/4427#discussion_r374795997", "createdAt": "2020-02-04T16:55:18Z", "author": {"login": "big-andy-coates"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/ClusterStatusResource.java", "diffHunk": "@@ -71,12 +71,17 @@ private ClusterStatusResponse getResponse() {\n             entry -> new KsqlHostEntity(entry.getKey().host(), entry.getKey().port()) ,\n             entry -> new HostStatusEntity(entry.getValue().isHostAlive(),\n                                           entry.getValue().getLastStatusUpdateMs(),\n-                                          lagReportingAgent.isPresent()\n-                                              ? lagReportingAgent.get().getLagPerHost(\n-                                                  entry.getKey())\n-                                              : EMPTY_HOST_STORE_LAGS)\n+                                          getHostStoreLags(entry.getKey()))\n         ));\n \n     return new ClusterStatusResponse(response);\n   }\n+\n+  private HostStoreLags getHostStoreLags(final KsqlHost ksqlHost) {\n+    if (!lagReportingAgent.isPresent()) {\n+      return EMPTY_HOST_STORE_LAGS;\n+    }\n+    final Optional<HostStoreLags> lags = lagReportingAgent.get().getLagPerHost(ksqlHost);\n+    return lags.orElse(EMPTY_HOST_STORE_LAGS);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdce4832ad55855c4edb06b67f9a397e11513418"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1MDMwOQ==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/4427#discussion_r374850309", "createdAt": "2020-02-04T18:38:25Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/ClusterStatusResource.java", "diffHunk": "@@ -71,12 +71,17 @@ private ClusterStatusResponse getResponse() {\n             entry -> new KsqlHostEntity(entry.getKey().host(), entry.getKey().port()) ,\n             entry -> new HostStatusEntity(entry.getValue().isHostAlive(),\n                                           entry.getValue().getLastStatusUpdateMs(),\n-                                          lagReportingAgent.isPresent()\n-                                              ? lagReportingAgent.get().getLagPerHost(\n-                                                  entry.getKey())\n-                                              : EMPTY_HOST_STORE_LAGS)\n+                                          getHostStoreLags(entry.getKey()))\n         ));\n \n     return new ClusterStatusResponse(response);\n   }\n+\n+  private HostStoreLags getHostStoreLags(final KsqlHost ksqlHost) {\n+    if (!lagReportingAgent.isPresent()) {\n+      return EMPTY_HOST_STORE_LAGS;\n+    }\n+    final Optional<HostStoreLags> lags = lagReportingAgent.get().getLagPerHost(ksqlHost);\n+    return lags.orElse(EMPTY_HOST_STORE_LAGS);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5NTk5Nw=="}, "originalCommit": {"oid": "bdce4832ad55855c4edb06b67f9a397e11513418"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2069, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}