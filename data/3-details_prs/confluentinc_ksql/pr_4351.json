{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NTU0MTMw", "number": 4351, "title": "fix: Make null key serialization/deserialization symmetrical", "bodyText": "Description\nFixes #4109\nThis fix makes sure that null keys are preserved during serialization followed by deserialization. I.e. the serialization/deserialization for null is now symmetrical.\nPreviously if a null key was serialized then deserialized it would end up as Struct{} with one null element, not the value null.\nThis meant that Streams graceful null key checking didn't work as the key wasn't null (it was Struct{}) as it was passed through the streams topology. When an attempt to extract the actual key before inserting into RocksDB occurred it gave an NPE.\nNow we actually pass null as the key for the ConsumerRecord that is passed through the topology. This allows the streams null key checking to do it's job and for the null key record to be handled gracefully.\nTesting done\nAdded new QTT test\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-01-19T16:47:18Z", "url": "https://github.com/confluentinc/ksql/pull/4351", "merged": true, "mergeCommit": {"oid": "2a61acb1acfd58b54a27a0f5fc8ebfb7d6cecaa7"}, "closed": true, "closedAt": "2020-01-20T19:59:54Z", "author": {"login": "purplefox"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb77GoPAH2gAyMzY0NTU0MTMwOjJjNzM4YzUwZWNmYzVkNmZlZWNjNTU2N2I4MWY5YWE0NmQ0NDdjMzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8RKT5AH2gAyMzY0NTU0MTMwOmFmZjc0YjA5ODY3ZDBmZWRmYzRiYjFhZjRkZDY4NzI5ODQ0MTEzZWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2c738c50ecfc5d6feecc5567b81f9aa46d447c38", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/2c738c50ecfc5d6feecc5567b81f9aa46d447c38", "committedDate": "2020-01-19T17:08:06Z", "message": "added test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82f23495bae88897c19d38de03d4c39343988e5c", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/82f23495bae88897c19d38de03d4c39343988e5c", "committedDate": "2020-01-19T17:08:06Z", "message": "fix: Make sure null key is preserved during serialization/deserialization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf9a3a516ab6613c4f7e8538bc699f26f033c4fe", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/cf9a3a516ab6613c4f7e8538bc699f26f033c4fe", "committedDate": "2020-01-19T17:12:29Z", "message": "fixed merge conflict"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1fc4778c904d7e5e17aa84d7cc2fef34355205dd", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/1fc4778c904d7e5e17aa84d7cc2fef34355205dd", "committedDate": "2020-01-19T16:53:31Z", "message": "Add QTT test"}, "afterCommit": {"oid": "cf9a3a516ab6613c4f7e8538bc699f26f033c4fe", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/cf9a3a516ab6613c4f7e8538bc699f26f033c4fe", "committedDate": "2020-01-19T17:12:29Z", "message": "fixed merge conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8c591b2386a8d9aa7569140f7f690b71c42b8bd", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/a8c591b2386a8d9aa7569140f7f690b71c42b8bd", "committedDate": "2020-01-19T19:56:44Z", "message": "updated test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ1NDUzMjM3", "url": "https://github.com/confluentinc/ksql/pull/4351#pullrequestreview-345453237", "createdAt": "2020-01-20T17:26:21Z", "commit": {"oid": "a8c591b2386a8d9aa7569140f7f690b71c42b8bd"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNzoyNjoyMlrOFflRHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNzozMzo1NlrOFflcGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY2MDc2NA==", "bodyText": "nit: if primitive is null, then could return after line 142.", "url": "https://github.com/confluentinc/ksql/pull/4351#discussion_r368660764", "createdAt": "2020-01-20T17:26:22Z", "author": {"login": "big-andy-coates"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/kafka/KafkaSerdeFactory.java", "diffHunk": "@@ -142,7 +142,7 @@ public Struct deserialize(final String topic, final byte[] bytes) {\n         final Object primitive = delegate.deserialize(topic, bytes);\n         final Struct struct = new Struct(schema);\n         struct.put(field, primitive);\n-        return struct;\n+        return primitive == null ? null : struct;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8c591b2386a8d9aa7569140f7f690b71c42b8bd"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODY2MzU3Nw==", "bodyText": "if its null, then assert its null... weird asserting! ;)\nAlso, this means all of the tests will pass if deserialize always returns null.\nI think it would be more explicit if we revert this change and instead have explicit tests that test we:\na) serialize null as null , and\nb) deserialize null as null.\nJust played around with this, so may as well share the code.\ni.e. we revert this to:\n  assertThat(result, is(struct));\nAnd replace shouldHandleNulls with:\n@Test\n  public void shouldSerializeNullAsNull() {\n    // Given:\n    final PersistenceSchema schema = schemaWithFieldOfType(SqlTypes.INTEGER);\n\n    final Serde<Object> serde = factory.createSerde(schema, ksqlConfig, srClientFactory);\n\n    // When:\n    final byte[] result = serde.serializer().serialize(\"topic\", null);\n\n    // Then:\n    assertThat(result, is(nullValue()));\n  }\n\n  @Test\n  public void shouldDeserializeNullAsNull() {\n    // Given:\n    final PersistenceSchema schema = schemaWithFieldOfType(SqlTypes.INTEGER);\n\n    final Serde<Object> serde = factory.createSerde(schema, ksqlConfig, srClientFactory);\n\n    // When:\n    final Object result = serde.deserializer().deserialize(\"topic\", null);\n\n    // Then:\n    assertThat(result, is(nullValue()));\n  }", "url": "https://github.com/confluentinc/ksql/pull/4351#discussion_r368663577", "createdAt": "2020-01-20T17:33:56Z", "author": {"login": "big-andy-coates"}, "path": "ksql-serde/src/test/java/io/confluent/ksql/serde/kafka/KafkaSerdeFactoryTest.java", "diffHunk": "@@ -192,7 +194,11 @@ private void shouldHandle(final SqlType fieldSchema, final Object value) {\n     final Object result = serde.deserializer().deserialize(\"topic\", bytes);\n \n     // Then:\n-    assertThat(result, is(struct));\n+    if (value == null) {\n+      assertThat(result, is(nullValue()));\n+    } else {\n+      assertThat(result, is(struct));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8c591b2386a8d9aa7569140f7f690b71c42b8bd"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aff74b09867d0fedfc4bb1af4dd68729844113ef", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/aff74b09867d0fedfc4bb1af4dd68729844113ef", "committedDate": "2020-01-20T18:50:02Z", "message": "Review updates"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 113, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}