{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MzA5MTY1", "number": 5104, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjo1NTozNFrOD03KYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzowMDo0OFrOD03UIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzU2MzIxOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/Command.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjo1NTozNFrOGKAzLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjoxMzowOFrOGKwbEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE1MjA0Nw==", "bodyText": "Consider just a simple monotonically incrementing version, rather than this.\ne.g. we start at version 1. (anything without a version is version 0.).  When the server starts it checks each command version is the current version, otherwise fails.\nAs we release a new version of ksql with an incompatibilities we bump the verison.  The new version will then reject all older (and newer!) commands.", "url": "https://github.com/confluentinc/ksql/pull/5104#discussion_r413152047", "createdAt": "2020-04-22T16:55:34Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/Command.java", "diffHunk": "@@ -119,6 +160,73 @@ public String toString() {\n     return \"Command{\"\n         + \"statement='\" + statement + '\\''\n         + \", overwriteProperties=\" + overwriteProperties\n+        + \", version=\" + version\n         + '}';\n   }\n+\n+  @VisibleForTesting\n+  static class VersionChecker {\n+\n+    private static final RangeMap<ArtifactVersion, Range<ArtifactVersion>> DB_COMPAT_MATRIX =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd8e1601c0c63114be8a2921921adc86f04d743"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkzMjMwNw==", "bodyText": "that is indeed much simpler - I will go down this path, but I think we need to start with version 0 so that this isn't backwards incompatible unnecessarily", "url": "https://github.com/confluentinc/ksql/pull/5104#discussion_r413932307", "createdAt": "2020-04-23T16:13:08Z", "author": {"login": "agavra"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/Command.java", "diffHunk": "@@ -119,6 +160,73 @@ public String toString() {\n     return \"Command{\"\n         + \"statement='\" + statement + '\\''\n         + \", overwriteProperties=\" + overwriteProperties\n+        + \", version=\" + version\n         + '}';\n   }\n+\n+  @VisibleForTesting\n+  static class VersionChecker {\n+\n+    private static final RangeMap<ArtifactVersion, Range<ArtifactVersion>> DB_COMPAT_MATRIX =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE1MjA0Nw=="}, "originalCommit": {"oid": "2cd8e1601c0c63114be8a2921921adc86f04d743"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzU3MzAyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/Command.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjo1NzozNVrOGKA5Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjo1NzozNVrOGKA5Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE1MzU3OQ==", "bodyText": "move the separate class?", "url": "https://github.com/confluentinc/ksql/pull/5104#discussion_r413153579", "createdAt": "2020-04-22T16:57:35Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/Command.java", "diffHunk": "@@ -119,6 +160,73 @@ public String toString() {\n     return \"Command{\"\n         + \"statement='\" + statement + '\\''\n         + \", overwriteProperties=\" + overwriteProperties\n+        + \", version=\" + version\n         + '}';\n   }\n+\n+  @VisibleForTesting\n+  static class VersionChecker {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd8e1601c0c63114be8a2921921adc86f04d743"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzU4ODE3OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/computation/CommandTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzowMDo0OFrOGKBCTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjoxNDoxN1rOGKwegw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE1NTkxNg==", "bodyText": "Add test to ensure old json, without version, can be deserialized?", "url": "https://github.com/confluentinc/ksql/pull/5104#discussion_r413155916", "createdAt": "2020-04-22T17:00:48Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/computation/CommandTest.java", "diffHunk": "@@ -61,6 +62,7 @@ public void shouldSerializeDeserializeCorrectly() throws IOException {\n     grep(serialized, \".*\\\"streamsProperties\\\" *: *\\\\{ *\\\"foo\\\" *: *\\\"bar\\\" *\\\\}.*\");\n     grep(serialized, \".*\\\"statement\\\" *: *\\\"test statement;\\\".*\");\n     grep(serialized, \".*\\\"originalProperties\\\" *: *\\\\{ *\\\"biz\\\" *: *\\\"baz\\\" *\\\\}.*\");\n+    grep(serialized, \".*\\\"version\\\" *: *\\\"\" + Version.getVersion() + \"\\\".*\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd8e1601c0c63114be8a2921921adc86f04d743"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkzMzE4Nw==", "bodyText": "That's what the first test does - I suppose what we need is to make sure that the new json can be deserialized properly \ud83d\ude02", "url": "https://github.com/confluentinc/ksql/pull/5104#discussion_r413933187", "createdAt": "2020-04-23T16:14:17Z", "author": {"login": "agavra"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/computation/CommandTest.java", "diffHunk": "@@ -61,6 +62,7 @@ public void shouldSerializeDeserializeCorrectly() throws IOException {\n     grep(serialized, \".*\\\"streamsProperties\\\" *: *\\\\{ *\\\"foo\\\" *: *\\\"bar\\\" *\\\\}.*\");\n     grep(serialized, \".*\\\"statement\\\" *: *\\\"test statement;\\\".*\");\n     grep(serialized, \".*\\\"originalProperties\\\" *: *\\\\{ *\\\"biz\\\" *: *\\\"baz\\\" *\\\\}.*\");\n+    grep(serialized, \".*\\\"version\\\" *: *\\\"\" + Version.getVersion() + \"\\\".*\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE1NTkxNg=="}, "originalCommit": {"oid": "2cd8e1601c0c63114be8a2921921adc86f04d743"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3582, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}