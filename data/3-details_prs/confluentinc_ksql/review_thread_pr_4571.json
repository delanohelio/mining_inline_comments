{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NjEyMDUw", "number": 4571, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo0MjoyM1rODgxQEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzo0MDoxMVrODhQx4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Njg3OTU1OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjo0MjoyM1rOFrJ61A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDoyMjo0MVrOFrRKDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5NTYwNA==", "bodyText": "Is HashedMap a real class? Isn't HashMap?\nBtw, being the requirement that the passed parameter is mutable, it is better to create the HashMap in the SessionProperties class. The reason is that I could pass a Collections.singletonMap here, which will break the contract of the getMutableScopedProperties() method later.", "url": "https://github.com/confluentinc/ksql/pull/4571#discussion_r380795604", "createdAt": "2020-02-18T16:42:23Z", "author": {"login": "spena"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java", "diffHunk": "@@ -195,7 +216,11 @@ public Response terminateCluster(\n       final KsqlEntityList entities = handler.execute(\n           securityContext,\n           TERMINATE_CLUSTER,\n-          request.getStreamsProperties()\n+              new SessionProperties(\n+                  new HashedMap<>(request.getStreamsProperties()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f4b005dedf4074fc97792796bc75f5996ca0f17"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxNDE5MQ==", "bodyText": "Yeah...not sure how HashedMap got in here. I moved the creation of the new HashMap in the SessionProperties class", "url": "https://github.com/confluentinc/ksql/pull/4571#discussion_r380914191", "createdAt": "2020-02-18T20:22:41Z", "author": {"login": "stevenpyzhang"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java", "diffHunk": "@@ -195,7 +216,11 @@ public Response terminateCluster(\n       final KsqlEntityList entities = handler.execute(\n           securityContext,\n           TERMINATE_CLUSTER,\n-          request.getStreamsProperties()\n+              new SessionProperties(\n+                  new HashedMap<>(request.getStreamsProperties()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc5NTYwNA=="}, "originalCommit": {"oid": "4f4b005dedf4074fc97792796bc75f5996ca0f17"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzAyMDMzOnYy", "diffSide": "RIGHT", "path": "ksql-rest-model/src/main/java/io/confluent/ksql/rest/SessionProperties.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzoxODozOVrOFrLRhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxOToyNToxMVrOFrPWXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxNzc5OQ==", "bodyText": "Is this example accurate on the mutable properties? If expect the returned value can be mutable and affect the values of the wrapped scope properties, then is fine.\nSessionProperties sm1 = new SessionProperties(...);\n\nMap<String, String> sm1 = s1.getMutableScopedProperties();\nsm1.put(\"k1\", \"v1\");\n\n// This will print \"v1\"\nSystem.out.println(sm1.get(\"k1\"));\n\n// This will print \"v1\"\nSystem.out.println(s1.getScopeProperties().get(\"k1\"));", "url": "https://github.com/confluentinc/ksql/pull/4571#discussion_r380817799", "createdAt": "2020-02-18T17:18:39Z", "author": {"login": "spena"}, "path": "ksql-rest-model/src/main/java/io/confluent/ksql/rest/SessionProperties.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest;\n+\n+import io.confluent.ksql.util.KsqlHostInfo;\n+\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class SessionProperties {\n+  \n+  private final Map<String, Object> mutableScopedProperties;\n+  private final KsqlHostInfo ksqlHostInfo;\n+  private final URL localUrl;\n+\n+  public SessionProperties(\n+          final Map<String, Object> mutableScopedProperties,\n+          final KsqlHostInfo ksqlHostInfo,\n+          final URL localUrl) {\n+    this.mutableScopedProperties = \n+        Objects.requireNonNull(mutableScopedProperties, \"mutableScopedProperties\");\n+    this.ksqlHostInfo = Objects.requireNonNull(ksqlHostInfo, \"ksqlHostInfo\");\n+    this.localUrl = Objects.requireNonNull(localUrl, \"localUrl\");\n+  }\n+\n+  public Map<String, Object> getMutableScopedProperties() {\n+    return mutableScopedProperties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f4b005dedf4074fc97792796bc75f5996ca0f17"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg4NDU3Mg==", "bodyText": "That's right. The properties can be changed in PropertyExecutor.java so you're example is essentially what happens in that executor.", "url": "https://github.com/confluentinc/ksql/pull/4571#discussion_r380884572", "createdAt": "2020-02-18T19:25:11Z", "author": {"login": "stevenpyzhang"}, "path": "ksql-rest-model/src/main/java/io/confluent/ksql/rest/SessionProperties.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest;\n+\n+import io.confluent.ksql.util.KsqlHostInfo;\n+\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class SessionProperties {\n+  \n+  private final Map<String, Object> mutableScopedProperties;\n+  private final KsqlHostInfo ksqlHostInfo;\n+  private final URL localUrl;\n+\n+  public SessionProperties(\n+          final Map<String, Object> mutableScopedProperties,\n+          final KsqlHostInfo ksqlHostInfo,\n+          final URL localUrl) {\n+    this.mutableScopedProperties = \n+        Objects.requireNonNull(mutableScopedProperties, \"mutableScopedProperties\");\n+    this.ksqlHostInfo = Objects.requireNonNull(ksqlHostInfo, \"ksqlHostInfo\");\n+    this.localUrl = Objects.requireNonNull(localUrl, \"localUrl\");\n+  }\n+\n+  public Map<String, Object> getMutableScopedProperties() {\n+    return mutableScopedProperties;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxNzc5OQ=="}, "originalCommit": {"oid": "4f4b005dedf4074fc97792796bc75f5996ca0f17"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzAzMDg0OnYy", "diffSide": "RIGHT", "path": "ksql-rest-model/src/main/java/io/confluent/ksql/rest/SessionProperties.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzoyMTozMFrOFrLYIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzoyMTozMFrOFrLYIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxOTQ5MA==", "bodyText": "Tip: If we expect this class to grow in the future when passing more parameters to the executor, then we could create it as a Builder pattern. Not necessary to do it in this PR, feel free to do it here or later.", "url": "https://github.com/confluentinc/ksql/pull/4571#discussion_r380819490", "createdAt": "2020-02-18T17:21:30Z", "author": {"login": "spena"}, "path": "ksql-rest-model/src/main/java/io/confluent/ksql/rest/SessionProperties.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest;\n+\n+import io.confluent.ksql.util.KsqlHostInfo;\n+\n+import java.net.URL;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class SessionProperties {\n+  \n+  private final Map<String, Object> mutableScopedProperties;\n+  private final KsqlHostInfo ksqlHostInfo;\n+  private final URL localUrl;\n+\n+  public SessionProperties(\n+          final Map<String, Object> mutableScopedProperties,\n+          final KsqlHostInfo ksqlHostInfo,\n+          final URL localUrl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f4b005dedf4074fc97792796bc75f5996ca0f17"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzA0NTA4OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/util/DiscoverRemoteHostsUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzoyNTo0NFrOFrLhAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzozMTowM1rOFrLtAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyMTc2Mg==", "bodyText": "Doesn't hostInfo.equals(localHost) work? I see KsqlHostInfo has the equals() implemented.", "url": "https://github.com/confluentinc/ksql/pull/4571#discussion_r380821762", "createdAt": "2020-02-18T17:25:44Z", "author": {"login": "spena"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/util/DiscoverRemoteHostsUtil.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.util;\n+\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import io.confluent.ksql.util.PersistentQueryMetadata;\n+import io.confluent.ksql.util.QueryMetadata;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.kafka.streams.state.HostInfo;\n+import org.apache.kafka.streams.state.StreamsMetadata;\n+\n+public final class DiscoverRemoteHostsUtil {\n+\n+  private DiscoverRemoteHostsUtil() {}\n+\n+  public static Set<HostInfo> getRemoteHosts(\n+      final List<PersistentQueryMetadata> currentQueries, \n+      final KsqlHostInfo localHost\n+  ) {\n+    return currentQueries.stream()\n+        .map(QueryMetadata::getAllMetadata)\n+        .filter(Objects::nonNull)\n+        .flatMap(Collection::stream)\n+        .filter(streamsMetadata -> streamsMetadata != StreamsMetadata.NOT_AVAILABLE)\n+        .map(StreamsMetadata::hostInfo)\n+        .filter(hostInfo -> !(hostInfo.host().equals(localHost.host())\n+            && hostInfo.port() == (localHost.port())))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f4b005dedf4074fc97792796bc75f5996ca0f17"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyNDgzMg==", "bodyText": "hostInfo is of type HostInfo which is a different class than KsqlHostInfo. The former is from Streams", "url": "https://github.com/confluentinc/ksql/pull/4571#discussion_r380824832", "createdAt": "2020-02-18T17:31:03Z", "author": {"login": "vpapavas"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/util/DiscoverRemoteHostsUtil.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.util;\n+\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import io.confluent.ksql.util.PersistentQueryMetadata;\n+import io.confluent.ksql.util.QueryMetadata;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import org.apache.kafka.streams.state.HostInfo;\n+import org.apache.kafka.streams.state.StreamsMetadata;\n+\n+public final class DiscoverRemoteHostsUtil {\n+\n+  private DiscoverRemoteHostsUtil() {}\n+\n+  public static Set<HostInfo> getRemoteHosts(\n+      final List<PersistentQueryMetadata> currentQueries, \n+      final KsqlHostInfo localHost\n+  ) {\n+    return currentQueries.stream()\n+        .map(QueryMetadata::getAllMetadata)\n+        .filter(Objects::nonNull)\n+        .flatMap(Collection::stream)\n+        .filter(streamsMetadata -> streamsMetadata != StreamsMetadata.NOT_AVAILABLE)\n+        .map(StreamsMetadata::hostInfo)\n+        .filter(hostInfo -> !(hostInfo.host().equals(localHost.host())\n+            && hostInfo.port() == (localHost.port())))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyMTc2Mg=="}, "originalCommit": {"oid": "4f4b005dedf4074fc97792796bc75f5996ca0f17"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MjA0NTEyOnYy", "diffSide": "RIGHT", "path": "ksql-rest-model/src/main/java/io/confluent/ksql/rest/SessionProperties.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzo0MDoxMVrOFr7rWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOToyNTo0NlrOFsgLtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxMDg0Mw==", "bodyText": "javadoc please :) what belongs in this? when is it refreshed? where should it be used?  also make sure to javadoc the parameters, whats the ksqlHostInfo - is that me? is that the caller?", "url": "https://github.com/confluentinc/ksql/pull/4571#discussion_r381610843", "createdAt": "2020-02-19T23:40:11Z", "author": {"login": "agavra"}, "path": "ksql-rest-model/src/main/java/io/confluent/ksql/rest/SessionProperties.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest;\n+\n+import io.confluent.ksql.util.KsqlHostInfo;\n+\n+import java.net.URL;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class SessionProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da71c464ab9bf9625bdc28cffb087bfbe7922e34"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIwODk0OQ==", "bodyText": "added", "url": "https://github.com/confluentinc/ksql/pull/4571#discussion_r382208949", "createdAt": "2020-02-20T19:25:46Z", "author": {"login": "stevenpyzhang"}, "path": "ksql-rest-model/src/main/java/io/confluent/ksql/rest/SessionProperties.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest;\n+\n+import io.confluent.ksql.util.KsqlHostInfo;\n+\n+import java.net.URL;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class SessionProperties {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxMDg0Mw=="}, "originalCommit": {"oid": "da71c464ab9bf9625bdc28cffb087bfbe7922e34"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2172, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}