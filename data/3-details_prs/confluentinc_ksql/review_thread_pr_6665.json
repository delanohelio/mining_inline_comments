{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MTQ0OTcy", "number": 6665, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo1Njo0NlrOE84PtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTowMDo1MlrOE84V-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjcxNTQwOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo1Njo0NlrOH5Q5mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMTowNTo0NlrOH-8M0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwNzc2OA==", "bodyText": "If someone has interrupted this thread, you can just skip awaiting termination of the executorService and log the exception.  I don't think there's any point in resetting the interrupt flag.  That's kind of the reverse of the pattern:\nhttps://docs.oracle.com/javase/tutorial/essential/concurrency/interrupt.html", "url": "https://github.com/confluentinc/ksql/pull/6665#discussion_r529807768", "createdAt": "2020-11-24T18:56:46Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -486,6 +492,14 @@ public void shutdown() {\n       log.error(\"Exception while waiting for pull query metrics to close\", e);\n     }\n \n+    try {\n+      pullExecutorService.shutdown();\n+      pullExecutorService.awaitTermination(\n+          Duration.ofSeconds(10).toMillis(), TimeUnit.MILLISECONDS);\n+    } catch (final InterruptedException e) {\n+      Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2ed9cb2da134a3f2c6f8393eeffc7969e0401a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMjg4Ng==", "bodyText": "This is actually discussed in good detail here: https://stackoverflow.com/questions/3976344/handling-interruptedexception-in-java\nI think if there's a notion that the caller of this method may want to check the status of the flag, then there's a pattern for catch InterruptedException and reset the flag via Thread.currentThread().interrupt(); as you're doing.  If there were other things further along that might block and throw InterruptedException, it might make sense to do what you're doing to effectively pass on the flag so the next thing doesn't block either.  I'll leave it to you to assess that.  You should probably still log the exception.", "url": "https://github.com/confluentinc/ksql/pull/6665#discussion_r529812886", "createdAt": "2020-11-24T19:05:24Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -486,6 +492,14 @@ public void shutdown() {\n       log.error(\"Exception while waiting for pull query metrics to close\", e);\n     }\n \n+    try {\n+      pullExecutorService.shutdown();\n+      pullExecutorService.awaitTermination(\n+          Duration.ofSeconds(10).toMillis(), TimeUnit.MILLISECONDS);\n+    } catch (final InterruptedException e) {\n+      Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwNzc2OA=="}, "originalCommit": {"oid": "8d2ed9cb2da134a3f2c6f8393eeffc7969e0401a"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTc2MDA4Mw==", "bodyText": "It's closed in the Autoclosable of HARouting now, basically how Andy had fixed it", "url": "https://github.com/confluentinc/ksql/pull/6665#discussion_r535760083", "createdAt": "2020-12-04T01:05:46Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -486,6 +492,14 @@ public void shutdown() {\n       log.error(\"Exception while waiting for pull query metrics to close\", e);\n     }\n \n+    try {\n+      pullExecutorService.shutdown();\n+      pullExecutorService.awaitTermination(\n+          Duration.ofSeconds(10).toMillis(), TimeUnit.MILLISECONDS);\n+    } catch (final InterruptedException e) {\n+      Thread.currentThread().interrupt();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwNzc2OA=="}, "originalCommit": {"oid": "8d2ed9cb2da134a3f2c6f8393eeffc7969e0401a"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjczMTQ2OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/KsqlExecutionContext.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTowMDo1MlrOH5RDbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMzowMjoxMVrOH5bQSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMDI4NQ==", "bodyText": "Can we avoid passing down a general-purpose ExecutorService? It seems very easy to \"abuse\" if down the line someone needs a thread pool they'll think \"oh look, I can just use this one that's already here!\" and \"steal\" threads from the pull queries.\nI'm about to hop on a meeting but I'll take a deeper look in a bit. I think it might be worth refactoring HARouting so that we can pass one instance down (or create on when we create the engine).", "url": "https://github.com/confluentinc/ksql/pull/6665#discussion_r529810285", "createdAt": "2020-11-24T19:00:52Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/KsqlExecutionContext.java", "diffHunk": "@@ -154,6 +155,7 @@ PullQueryResult executePullQuery(\n       ConfiguredStatement<Query> statement,\n       RoutingFilterFactory routingFilterFactory,\n       RoutingOptions routingOptions,\n+      ExecutorService executorService,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d2ed9cb2da134a3f2c6f8393eeffc7969e0401a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk1OTgyOA==", "bodyText": "Yes, I agree and I thought about it as well. The current problem is that the HARouting takes as argument the pull physical plan so that it can execute it when the query is served locally. I haven't come up with an idea on how to refactor this.", "url": "https://github.com/confluentinc/ksql/pull/6665#discussion_r529959828", "createdAt": "2020-11-24T22:45:00Z", "author": {"login": "vpapavas"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/KsqlExecutionContext.java", "diffHunk": "@@ -154,6 +155,7 @@ PullQueryResult executePullQuery(\n       ConfiguredStatement<Query> statement,\n       RoutingFilterFactory routingFilterFactory,\n       RoutingOptions routingOptions,\n+      ExecutorService executorService,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMDI4NQ=="}, "originalCommit": {"oid": "8d2ed9cb2da134a3f2c6f8393eeffc7969e0401a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTk3NzQxNw==", "bodyText": "You can pass the PullPhysicalPlan as an argument of HARouting.handlePullQuery rather than injecting into the constructor.  I think you would have to do the same with ConfiguredStatement<Query> statement, LogicalSchema outputSchema,  and QueryId queryId.  That should allow HARouting to be a singleton.", "url": "https://github.com/confluentinc/ksql/pull/6665#discussion_r529977417", "createdAt": "2020-11-24T23:02:11Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/KsqlExecutionContext.java", "diffHunk": "@@ -154,6 +155,7 @@ PullQueryResult executePullQuery(\n       ConfiguredStatement<Query> statement,\n       RoutingFilterFactory routingFilterFactory,\n       RoutingOptions routingOptions,\n+      ExecutorService executorService,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMDI4NQ=="}, "originalCommit": {"oid": "8d2ed9cb2da134a3f2c6f8393eeffc7969e0401a"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2454, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}