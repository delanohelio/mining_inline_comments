{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NDkzODYw", "number": 6752, "title": "chore: ungate multi-column keys from the feature flag", "bodyText": "Description\nlets gooooo (docs + minor changes to remove the feature flag)\nTesting done\nAdded corresponding historical tests and updated some of the other tests\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-12-09T22:06:19Z", "url": "https://github.com/confluentinc/ksql/pull/6752", "merged": true, "mergeCommit": {"oid": "aa7391d49b927ce1ee6a89f112d3642ed77f3353"}, "closed": true, "closedAt": "2020-12-10T16:54:37Z", "author": {"login": "agavra"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdknIbqgH2gAyNTM1NDkzODYwOmRlM2UyZTI0NzkxMWM5MDgwNTJlYTBiM2QwNjk0NDI5NzkzOGI2YzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdk2THsAH2gAyNTM1NDkzODYwOmQ5Nzg4OTVlMTE2ZTUwZThiYzNjNjAzYTc4ZTNjODM4NzlhODhmYTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "de3e2e247911c908052ea0b3d06944297938b6c4", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/de3e2e247911c908052ea0b3d06944297938b6c4", "committedDate": "2020-12-09T23:14:01Z", "message": "chore: ungate multi-col keys + some docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0a16bcf3e71175ce725551c3cd0bb39c9a0c24a", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/e0a16bcf3e71175ce725551c3cd0bb39c9a0c24a", "committedDate": "2020-12-09T23:14:02Z", "message": "chore: historical tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d57cff816ce5ef643ed62dee410f6c4d7b3f7c9", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/3d57cff816ce5ef643ed62dee410f6c4d7b3f7c9", "committedDate": "2020-12-09T23:14:02Z", "message": "chore: fix up some tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4Njk0MjMy", "url": "https://github.com/confluentinc/ksql/pull/6752#pullrequestreview-548694232", "createdAt": "2020-12-09T23:17:45Z", "commit": {"oid": "853f649e73259591ac92f12c86b64a086bdca969"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzoxNzo0NVrOICt7MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzoxNzo0NVrOICt7MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyMDQ5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Key columns have a `KEY` or `PRIMARY KEY` suffix for streams and tables, respectively while value \n          \n          \n            \n            Key columns for a stream have a `KEY` suffix. Key columns for a table have a `PRIMARY KEY` suffix. Value", "url": "https://github.com/confluentinc/ksql/pull/6752#discussion_r539720497", "createdAt": "2020-12-09T23:17:45Z", "author": {"login": "JimGalasyn"}, "path": "docs/concepts/schemas.md", "diffHunk": "@@ -17,17 +17,17 @@ key and value of the underlying {{ site.ak }} topic message.\n A column is defined by a combination of its [name](#valid-identifiers), its [SQL data type](#sql-data-types),\r\n and possibly a namespace.\r\n \r\n-Key columns have a `KEY` or `PRIMARY KEY` suffix for streams and tables, respectively.\r\n-ksqlDB supports a single key column only.\r\n+Key columns have a `KEY` or `PRIMARY KEY` suffix for streams and tables, respectively while value \r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "853f649e73259591ac92f12c86b64a086bdca969"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc6496754b860b163338199a8df302573b322195", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/bc6496754b860b163338199a8df302573b322195", "committedDate": "2020-12-09T23:18:10Z", "message": "chore: more historical tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "853f649e73259591ac92f12c86b64a086bdca969", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/853f649e73259591ac92f12c86b64a086bdca969", "committedDate": "2020-12-09T22:04:24Z", "message": "chore: fix up some tests"}, "afterCommit": {"oid": "bc6496754b860b163338199a8df302573b322195", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/bc6496754b860b163338199a8df302573b322195", "committedDate": "2020-12-09T23:18:10Z", "message": "chore: more historical tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4Njk0NTk4", "url": "https://github.com/confluentinc/ksql/pull/6752#pullrequestreview-548694598", "createdAt": "2020-12-09T23:18:29Z", "commit": {"oid": "853f649e73259591ac92f12c86b64a086bdca969"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzoxOTozOFrOICt-ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzoyOToyNVrOICuPsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyMTMzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            columns have no namespace suffix. There can be multiple columns in either namespace, given that\n          \n          \n            \n            columns have no namespace suffix. There can be multiple columns in either namespace, if", "url": "https://github.com/confluentinc/ksql/pull/6752#discussion_r539721339", "createdAt": "2020-12-09T23:19:38Z", "author": {"login": "JimGalasyn"}, "path": "docs/concepts/schemas.md", "diffHunk": "@@ -17,17 +17,17 @@ key and value of the underlying {{ site.ak }} topic message.\n A column is defined by a combination of its [name](#valid-identifiers), its [SQL data type](#sql-data-types),\r\n and possibly a namespace.\r\n \r\n-Key columns have a `KEY` or `PRIMARY KEY` suffix for streams and tables, respectively.\r\n-ksqlDB supports a single key column only.\r\n+Key columns have a `KEY` or `PRIMARY KEY` suffix for streams and tables, respectively while value \r\n+columns have no namespace suffix. There can be multiple columns in either namespace, given that\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6496754b860b163338199a8df302573b322195"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyMjY1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            the underlying serialization format supports it (the `KAFKA` format, for example, does not).\n          \n          \n            \n            the underlying serialization format supports it.\n          \n          \n            \n            \n          \n          \n            \n            !!! note \n          \n          \n            \n                The `KAFKA` format doesn't support multi-column keys.", "url": "https://github.com/confluentinc/ksql/pull/6752#discussion_r539722654", "createdAt": "2020-12-09T23:22:23Z", "author": {"login": "JimGalasyn"}, "path": "docs/concepts/schemas.md", "diffHunk": "@@ -17,17 +17,17 @@ key and value of the underlying {{ site.ak }} topic message.\n A column is defined by a combination of its [name](#valid-identifiers), its [SQL data type](#sql-data-types),\r\n and possibly a namespace.\r\n \r\n-Key columns have a `KEY` or `PRIMARY KEY` suffix for streams and tables, respectively.\r\n-ksqlDB supports a single key column only.\r\n+Key columns have a `KEY` or `PRIMARY KEY` suffix for streams and tables, respectively while value \r\n+columns have no namespace suffix. There can be multiple columns in either namespace, given that\r\n+the underlying serialization format supports it (the `KAFKA` format, for example, does not).\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6496754b860b163338199a8df302573b322195"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyMzA2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For example, the following example statement declares a stream with several\n          \n          \n            \n            For example, the following statement declares a stream with multiple", "url": "https://github.com/confluentinc/ksql/pull/6752#discussion_r539723065", "createdAt": "2020-12-09T23:23:14Z", "author": {"login": "JimGalasyn"}, "path": "docs/concepts/schemas.md", "diffHunk": "@@ -17,17 +17,17 @@ key and value of the underlying {{ site.ak }} topic message.\n A column is defined by a combination of its [name](#valid-identifiers), its [SQL data type](#sql-data-types),\r\n and possibly a namespace.\r\n \r\n-Key columns have a `KEY` or `PRIMARY KEY` suffix for streams and tables, respectively.\r\n-ksqlDB supports a single key column only.\r\n+Key columns have a `KEY` or `PRIMARY KEY` suffix for streams and tables, respectively while value \r\n+columns have no namespace suffix. There can be multiple columns in either namespace, given that\r\n+the underlying serialization format supports it (the `KAFKA` format, for example, does not).\r\n \r\n-Value columns have no namespace suffix. There can be one or more value columns.\r\n-\r\n-For example, the following example statement declares a stream with a single\r\n-key column and several value columns:\r\n+For example, the following example statement declares a stream with several\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6496754b860b163338199a8df302573b322195"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNDQxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ksqlDB assumes that any single key is unwrapped, i.e. not contained within an outer\n          \n          \n            \n            ksqlDB assumes that any single key is unwrapped, which mean that it's not contained in an outer", "url": "https://github.com/confluentinc/ksql/pull/6752#discussion_r539724414", "createdAt": "2020-12-09T23:26:27Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/serialization.md", "diffHunk": "@@ -429,10 +439,14 @@ Single field (un)wrapping\n \n ### (de)serialization of single keys\n \n-At this time, ksqlDB supports only a single key column and that key columns\n-must be unwrapped, i.e. not contained within a outer record or object. See\n-the next two sections on single values for more information about wrapped\n-and unwrapped data.\n+ksqlDB assumes that any single key is unwrapped, i.e. not contained within an outer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6496754b860b163338199a8df302573b322195"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNTA1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            (e.g. `CREATE STREAM K1 INT KEY, K2 INT KEY, C1 INT`) is wrapped, i.e is a record\n          \n          \n            \n            (for example, `CREATE STREAM K1 INT KEY, K2 INT KEY, C1 INT`) _is_ wrapped, which means that it is a record", "url": "https://github.com/confluentinc/ksql/pull/6752#discussion_r539725059", "createdAt": "2020-12-09T23:27:45Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/serialization.md", "diffHunk": "@@ -429,10 +439,14 @@ Single field (un)wrapping\n \n ### (de)serialization of single keys\n \n-At this time, ksqlDB supports only a single key column and that key columns\n-must be unwrapped, i.e. not contained within a outer record or object. See\n-the next two sections on single values for more information about wrapped\n-and unwrapped data.\n+ksqlDB assumes that any single key is unwrapped, i.e. not contained within an outer\n+record or object. Conversely, ksqlDB assumes that any key with multiple columns\n+(e.g. `CREATE STREAM K1 INT KEY, K2 INT KEY, C1 INT`) is wrapped, i.e is a record", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6496754b860b163338199a8df302573b322195"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNTMwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To declare a single column key that is wrapped, you may specify a `STRUCT` type\n          \n          \n            \n            To declare a single-column key that's wrapped, specify a `STRUCT` type", "url": "https://github.com/confluentinc/ksql/pull/6752#discussion_r539725303", "createdAt": "2020-12-09T23:28:24Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/serialization.md", "diffHunk": "@@ -429,10 +439,14 @@ Single field (un)wrapping\n \n ### (de)serialization of single keys\n \n-At this time, ksqlDB supports only a single key column and that key columns\n-must be unwrapped, i.e. not contained within a outer record or object. See\n-the next two sections on single values for more information about wrapped\n-and unwrapped data.\n+ksqlDB assumes that any single key is unwrapped, i.e. not contained within an outer\n+record or object. Conversely, ksqlDB assumes that any key with multiple columns\n+(e.g. `CREATE STREAM K1 INT KEY, K2 INT KEY, C1 INT`) is wrapped, i.e is a record\n+with each column as a field within the key. \n+\n+To declare a single column key that is wrapped, you may specify a `STRUCT` type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6496754b860b163338199a8df302573b322195"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyNTc0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            with a single column (e.g. `K STRUCT<F1 INT> KEY`). See the next two sections \n          \n          \n            \n            with a single column. for example, `K STRUCT<F1 INT> KEY`. See the next two sections", "url": "https://github.com/confluentinc/ksql/pull/6752#discussion_r539725746", "createdAt": "2020-12-09T23:29:25Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/serialization.md", "diffHunk": "@@ -429,10 +439,14 @@ Single field (un)wrapping\n \n ### (de)serialization of single keys\n \n-At this time, ksqlDB supports only a single key column and that key columns\n-must be unwrapped, i.e. not contained within a outer record or object. See\n-the next two sections on single values for more information about wrapped\n-and unwrapped data.\n+ksqlDB assumes that any single key is unwrapped, i.e. not contained within an outer\n+record or object. Conversely, ksqlDB assumes that any key with multiple columns\n+(e.g. `CREATE STREAM K1 INT KEY, K2 INT KEY, C1 INT`) is wrapped, i.e is a record\n+with each column as a field within the key. \n+\n+To declare a single column key that is wrapped, you may specify a `STRUCT` type\n+with a single column (e.g. `K STRUCT<F1 INT> KEY`). See the next two sections ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6496754b860b163338199a8df302573b322195"}, "originalPosition": 109}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7d5e9d4834a6401dd93f45b3b70e8db7ba512e3", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/e7d5e9d4834a6401dd93f45b3b70e8db7ba512e3", "committedDate": "2020-12-09T23:32:35Z", "message": "Apply Jim's Suggestions\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c60f6cbdd4a687b7b015307cd50b45334d04610f", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/c60f6cbdd4a687b7b015307cd50b45334d04610f", "committedDate": "2020-12-09T23:33:36Z", "message": "Fix weird spacing GitHub added"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MjM0MzYz", "url": "https://github.com/confluentinc/ksql/pull/6752#pullrequestreview-549234363", "createdAt": "2020-12-10T14:12:31Z", "commit": {"oid": "c60f6cbdd4a687b7b015307cd50b45334d04610f"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDoxMjozMVrOIDLLRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDoxMzowOVrOIDLNGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5OTc1MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                registers new schemas with {{ site.sr }}, as necessary while `JSON` requires you\n          \n          \n            \n                registers new schemas with {{ site.sr }} as necessary, while `JSON` requires you", "url": "https://github.com/confluentinc/ksql/pull/6752#discussion_r540199751", "createdAt": "2020-12-10T14:12:31Z", "author": {"login": "vcrfxia"}, "path": "docs/concepts/schemas.md", "diffHunk": "@@ -106,9 +111,10 @@ Avro-formatted data. If you want to use Protobuf- or JSON-formatted data,\n substitute `PROTOBUF`, `JSON` or `JSON_SR` for `AVRO` in each statement.\r\n \r\n !!! note\r\n-    ksqlDB handles the `JSON` and `JSON_SR` formats differently. While the\r\n-    `JSON` format is capable of _reading_ the schema from {{ site.sr }},\r\n-    `JSON_SR` both reads and registers new schemas, as necessary.\r\n+    ksqlDB handles the `JSON` and `JSON_SR` formats differently. `JSON_SR` reads and \r\n+    registers new schemas with {{ site.sr }}, as necessary while `JSON` requires you\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c60f6cbdd4a687b7b015307cd50b45334d04610f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIwMDIxNg==", "bodyText": "Is it valid to have spaces here? I thought the default delimiter was a comma (with no space)?", "url": "https://github.com/confluentinc/ksql/pull/6752#discussion_r540200216", "createdAt": "2020-12-10T14:13:09Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/serialization.md", "diffHunk": "@@ -127,11 +129,11 @@ split into columns.\n For example, given a SQL statement such as:\n \n ```sql\n-CREATE STREAM x (ID BIGINT, NAME STRING, AGE INT) WITH (VALUE_FORMAT='DELIMITED', ...);\n+CREATE STREAM x (ORGID BIGINT KEY, ID BIGINT KEY, NAME STRING, AGE INT) WITH (FORMAT='DELIMITED', ...);\n ```\n \n-ksqlDB splits a value of `120, bob, 49` into the three fields with `ID` of\n-`120`, `NAME` of `bob` and `AGE` of `49`.\n+ksqlDB splits a key of `120, 21` and a value of `bob, 49` into the four fields (two keys and two values) ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c60f6cbdd4a687b7b015307cd50b45334d04610f"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d978895e116e50e8bc3c603a78e3c83879a88fa1", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/d978895e116e50e8bc3c603a78e3c83879a88fa1", "committedDate": "2020-12-10T16:54:16Z", "message": "chore: minor changes to docs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4518, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}