{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MjA3NzUx", "number": 5653, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoxOTo0MFrOEHM54g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODozMzowOFrOEHNGyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTg2OTE0OnYy", "diffSide": "RIGHT", "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoxOTo0MFrOGmdojw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMTozOToxOFrOGmh2Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NDU5MQ==", "bodyText": "I feel like it would be better to add a keyword to the query itself, like DEBUG instead of using a server config. This way, we have a control know per pull query and we can add more debug information in the future, like amount of lag, or routing information, etc.", "url": "https://github.com/confluentinc/ksql/pull/5653#discussion_r442984591", "createdAt": "2020-06-19T18:19:40Z", "author": {"login": "vpapavas"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -215,6 +215,13 @@\n   public static final String KSQL_QUERY_PULL_MAX_QPS_DOC = \"The maximum qps allowed for pull \"\n       + \"queries. Once the limit is hit, queries will fail immediately\";\n \n+  public static final String KSQL_QUERY_PULL_SET_REPLYING_HOST_CONFIG =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "017b125d99683436858e8bdd873b0b3f71a855f7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1MzU5NA==", "bodyText": "Alright.  I was considering whether we wanted to expose this per request, but I guess that seems reasonable.  It's possible we might want to still allow this to have a server config, in case the server doesn't want to expose debug info, but that can be a followup", "url": "https://github.com/confluentinc/ksql/pull/5653#discussion_r443053594", "createdAt": "2020-06-19T21:39:18Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -215,6 +215,13 @@\n   public static final String KSQL_QUERY_PULL_MAX_QPS_DOC = \"The maximum qps allowed for pull \"\n       + \"queries. Once the limit is hit, queries will fail immediately\";\n \n+  public static final String KSQL_QUERY_PULL_SET_REPLYING_HOST_CONFIG =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NDU5MQ=="}, "originalCommit": {"oid": "017b125d99683436858e8bdd873b0b3f71a855f7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTg4MDEyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODoyMzo0NlrOGmdvPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQyMzo1Njo1NFrOGnUseg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NjMwMQ==", "bodyText": "I think it makes sense to have a new type of response, that consists of the debug information and the list of rows. Basically, make it a class so that we can add more debug info in the future", "url": "https://github.com/confluentinc/ksql/pull/5653#discussion_r442986301", "createdAt": "2020-06-19T18:23:46Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "diffHunk": "@@ -102,14 +103,14 @@\n         .target(serverEndPoint)\n         .properties(configOverrides);\n \n-    final RestResponse<List<StreamedRow>> resp = getTarget(target, authHeader)\n+    final RestResponse<Pair<Optional<URI>, List<StreamedRow>>> resp = getTarget(target, authHeader)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "017b125d99683436858e8bdd873b0b3f71a855f7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA1NDQzOA==", "bodyText": "I was debating whether to try to try to introduce a whole different response, which would be a backwards incompatible change.  I'm still up for doing that if you don't like my solution.  I ended up adding a new optional field to StreamedRow called sourceHost.  I think this actually makes sense when we introduce scatter-gather requests for non-key pull queries since each row can have a different sourceHost.  Tell me what you think.", "url": "https://github.com/confluentinc/ksql/pull/5653#discussion_r443054438", "createdAt": "2020-06-19T21:42:21Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "diffHunk": "@@ -102,14 +103,14 @@\n         .target(serverEndPoint)\n         .properties(configOverrides);\n \n-    final RestResponse<List<StreamedRow>> resp = getTarget(target, authHeader)\n+    final RestResponse<Pair<Optional<URI>, List<StreamedRow>>> resp = getTarget(target, authHeader)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NjMwMQ=="}, "originalCommit": {"oid": "017b125d99683436858e8bdd873b0b3f71a855f7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA3ODI1Mg==", "bodyText": "It shouldn't be backwards incompatible as we introduce a new feature, no? We won't change the response for regular pull queries, especially if we introduce a per request flag.", "url": "https://github.com/confluentinc/ksql/pull/5653#discussion_r443078252", "createdAt": "2020-06-19T23:38:31Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "diffHunk": "@@ -102,14 +103,14 @@\n         .target(serverEndPoint)\n         .properties(configOverrides);\n \n-    final RestResponse<List<StreamedRow>> resp = getTarget(target, authHeader)\n+    final RestResponse<Pair<Optional<URI>, List<StreamedRow>>> resp = getTarget(target, authHeader)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NjMwMQ=="}, "originalCommit": {"oid": "017b125d99683436858e8bdd873b0b3f71a855f7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA4MDkxNQ==", "bodyText": "If we introduce a whole new endpoint (e.g. /query_debug), then we could change the request type and response, adding whatever new fields we want.  That seems not great since it would unnecessarily duplicate a lot of code.  And what if we introduce another mode?  We can't create the cross-product of flags, each as a new endpoint.  I would rather just have optional fields on json, where some are not set if not in debug mode, which is effectively what I did above.  The only issue is that /query returns an array of rows and it's not wrapped in anything.  If we wanted, we could wrap that in a response object where we could add fields, but I've held off on doing that now since I didn't require any non row-based fields.", "url": "https://github.com/confluentinc/ksql/pull/5653#discussion_r443080915", "createdAt": "2020-06-19T23:58:51Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "diffHunk": "@@ -102,14 +103,14 @@\n         .target(serverEndPoint)\n         .properties(configOverrides);\n \n-    final RestResponse<List<StreamedRow>> resp = getTarget(target, authHeader)\n+    final RestResponse<Pair<Optional<URI>, List<StreamedRow>>> resp = getTarget(target, authHeader)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NjMwMQ=="}, "originalCommit": {"oid": "017b125d99683436858e8bdd873b0b3f71a855f7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzg4NjcxNA==", "bodyText": "The only issue is that /query returns an array of rows and it's not wrapped in anything. If we wanted, we could wrap that in a response object where we could add fields, but I've held off on doing that now since I didn't require any non row-based fields.\n\nThat's what I meant with my comment. It's fine if you want to leave it for another PR", "url": "https://github.com/confluentinc/ksql/pull/5653#discussion_r443886714", "createdAt": "2020-06-22T23:56:54Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "diffHunk": "@@ -102,14 +103,14 @@\n         .target(serverEndPoint)\n         .properties(configOverrides);\n \n-    final RestResponse<List<StreamedRow>> resp = getTarget(target, authHeader)\n+    final RestResponse<Pair<Optional<URI>, List<StreamedRow>>> resp = getTarget(target, authHeader)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4NjMwMQ=="}, "originalCommit": {"oid": "017b125d99683436858e8bdd873b0b3f71a855f7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTkwMjE3OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/PullQueryRoutingFunctionalTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxODozMzowOFrOGmd9ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQyMzo0ODozMlrOGmjbmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4OTk4Nw==", "bodyText": "This stops all incoming/outgoing traffic to simulate that a node is dead? Does it actually cause rebalancing?", "url": "https://github.com/confluentinc/ksql/pull/5653#discussion_r442989987", "createdAt": "2020-06-19T18:33:08Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/PullQueryRoutingFunctionalTest.java", "diffHunk": "@@ -480,5 +553,94 @@ private String extractQueryId(final String outputString) {\n     assertThat(\"Could not find query id in: \" + outputString, matcher.find());\n     return matcher.group(1);\n   }\n+\n+  public static class TestApp {\n+\n+    private final KsqlHostInfoEntity host;\n+    private final TestKsqlRestApp app;\n+    private final Shutoffs shutoffs;\n+\n+    public TestApp(KsqlHostInfoEntity host, TestKsqlRestApp app, Shutoffs shutoffs) {\n+      this.host = host;\n+      this.app = app;\n+      this.shutoffs = shutoffs;\n+    }\n+\n+    public KsqlHostInfoEntity getHost() {\n+      return host;\n+    }\n+\n+    public TestKsqlRestApp getApp() {\n+      return app;\n+    }\n+\n+    public Shutoffs getShutoffs() {\n+      return shutoffs;\n+    }\n+  }\n+\n+  public static class Shutoffs {\n+    private final AtomicBoolean ksqlOutgoing = new AtomicBoolean(false);\n+    private final AtomicBoolean kafkaIncoming = new AtomicBoolean(false);\n+\n+    public void shutOffAll() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "017b125d99683436858e8bdd873b0b3f71a855f7"}, "originalPosition": 580}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA2NDkxMQ==", "bodyText": "No, it doesn't technically stop all traffic to kafka.  I couldn't figure out a very simple way to do that.  My understanding given https://www.confluent.io/blog/cooperative-rebalancing-in-kafka-streams-consumer-ksqldb/ is that JoinGroup is another request type used to coordinate groups, which is different from consumption.\nWhile this test isn't 100% true to a production environment, I also didn't want a pause in the test to result in rebalancing and weird, unpredictable results.  Also, it's hard to both kill off a server, and know that it will take effect immediately.  You can call stop, which will potentially block a bit or you can run it in a background thread, in which case you don't know when it will take effect.\nFor that reason, I chose to simulate things in this way, but tell me if you disagree.", "url": "https://github.com/confluentinc/ksql/pull/5653#discussion_r443064911", "createdAt": "2020-06-19T22:25:13Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/PullQueryRoutingFunctionalTest.java", "diffHunk": "@@ -480,5 +553,94 @@ private String extractQueryId(final String outputString) {\n     assertThat(\"Could not find query id in: \" + outputString, matcher.find());\n     return matcher.group(1);\n   }\n+\n+  public static class TestApp {\n+\n+    private final KsqlHostInfoEntity host;\n+    private final TestKsqlRestApp app;\n+    private final Shutoffs shutoffs;\n+\n+    public TestApp(KsqlHostInfoEntity host, TestKsqlRestApp app, Shutoffs shutoffs) {\n+      this.host = host;\n+      this.app = app;\n+      this.shutoffs = shutoffs;\n+    }\n+\n+    public KsqlHostInfoEntity getHost() {\n+      return host;\n+    }\n+\n+    public TestKsqlRestApp getApp() {\n+      return app;\n+    }\n+\n+    public Shutoffs getShutoffs() {\n+      return shutoffs;\n+    }\n+  }\n+\n+  public static class Shutoffs {\n+    private final AtomicBoolean ksqlOutgoing = new AtomicBoolean(false);\n+    private final AtomicBoolean kafkaIncoming = new AtomicBoolean(false);\n+\n+    public void shutOffAll() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4OTk4Nw=="}, "originalCommit": {"oid": "017b125d99683436858e8bdd873b0b3f71a855f7"}, "originalPosition": 580}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA3OTU3Ng==", "bodyText": "Yes, that makes sense.\nI was trying to see if we can test everything using these functional tests and avoid creating cloud tests. But it seems, that if we cannot test the actual rebalancing and measure for example how long it takes for the heartbeat to find a host is down, how long it takes for pull queries to succeed at standby, find that routing correctly works after rebalancing completes (first go to standby, then go to new active) etc, we may still need to perform cloud tests.", "url": "https://github.com/confluentinc/ksql/pull/5653#discussion_r443079576", "createdAt": "2020-06-19T23:48:32Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/PullQueryRoutingFunctionalTest.java", "diffHunk": "@@ -480,5 +553,94 @@ private String extractQueryId(final String outputString) {\n     assertThat(\"Could not find query id in: \" + outputString, matcher.find());\n     return matcher.group(1);\n   }\n+\n+  public static class TestApp {\n+\n+    private final KsqlHostInfoEntity host;\n+    private final TestKsqlRestApp app;\n+    private final Shutoffs shutoffs;\n+\n+    public TestApp(KsqlHostInfoEntity host, TestKsqlRestApp app, Shutoffs shutoffs) {\n+      this.host = host;\n+      this.app = app;\n+      this.shutoffs = shutoffs;\n+    }\n+\n+    public KsqlHostInfoEntity getHost() {\n+      return host;\n+    }\n+\n+    public TestKsqlRestApp getApp() {\n+      return app;\n+    }\n+\n+    public Shutoffs getShutoffs() {\n+      return shutoffs;\n+    }\n+  }\n+\n+  public static class Shutoffs {\n+    private final AtomicBoolean ksqlOutgoing = new AtomicBoolean(false);\n+    private final AtomicBoolean kafkaIncoming = new AtomicBoolean(false);\n+\n+    public void shutOffAll() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk4OTk4Nw=="}, "originalCommit": {"oid": "017b125d99683436858e8bdd873b0b3f71a855f7"}, "originalPosition": 580}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3190, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}