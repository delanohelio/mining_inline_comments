{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNjAyODg0", "number": 6393, "title": "Join format mismatch", "bodyText": "Description\nfixes: #6213\nprovides most of the functionality for: #6229\nWhere the left and right source's key formats differ, a joins prefer the format of the left source and will force a repartition of the right source if needed, unless:\n\nthe right source is a table\nthe right source is not already being repartitioned to facilitate the join and the left source is being repartitioned already.\n... in which case it will force a repartition of the left source, unless:\nthe left source is a table\n...in which case the query will be rejected.\n\nTwo way joins:\nThe general design is to leverage the logical plan to determine what needs to be repartitioned.  A two way join results in a logical plan with nodes:\n       DataSourceNode                  DateSourceNode\n             |                                |\n    PreJoinRepartitionNode         PreJoinRepartitionNode\n             |                                |\n      PreJoinProjectNode             PreJoinProjectNode\n             |                                |\n             ----------------------------------\n                               |\n                            JoinNode\n                               |\n\nDetermining the key format is done in three stages:\n\nThe JoinNode asks each side if they have a required key format.  Only tables require a specific key format.  This request if forward by the PreJoinProjectNode to the PreJoinRepartitionNode, which looks to see if the DataSource above it is a table or not.  The Join node compares any required formats from its two sides and fails if they differ. If the there is a required format, this is used for the join key format.\nIf there is not a required key format then the JoinNode asks each side if they have a preferred key format. Any side that is not already being repartitioned will return the key format of its DataSource.  If only one side has a preferred key format, this format is used. If both have a preferred key format, the left is used.\nIf neither side has a preferred key format, i.e. if both sides are already being repartitioned, then the JoinNode selects the leftmost DataSource, that has a non-NONE key format, as the key format of the join. If all sources have a NONE key format, the key format is loaded from ksql.persistence.default.format.key.\n\nOnce the key format is determined, the JoinNode informs each side of the required key format. If necessary, the PreJoinRepartitionNode will then force a repartition.\nMulti-way joins\nA 3-way join would have the following logical nodes:\n       DataSourceNode                  DateSourceNode                  DateSourceNode\n             |                                |                                |\n    PreJoinRepartitionNode         PreJoinRepartitionNode         PreJoinRepartitionNode\n             |                                |                                |\n      PreJoinProjectNode             PreJoinProjectNode             PreJoinProjectNode\n             |                                |                                |\n             ----------------------------------                                |\n                               |                                               |\n                            JoinNode(1)                                        |\n                               |                                               |\n                    PreJoinRepartitionNode                                     |\n                               |                                               |\n                       PreJoinProjectNode                                      |\n                               |                                               |\n                               -------------------------------------------------\n                                                        |\n                                                     JoinNode(2)\n                                                        |\n\nThe process of determining the join key format is the same, except now the repartitioning node after JoinNode(1) needs to be a bit smarter and take into account that its parent node is a JoinNode.  It must:\n\nForward requests for the required key format to the JoinNode.\nHandle any requests for preferred key format by:\n\nIf the node is already repartitioning, respond with 'no preferred format', as this node can already handle any change in key format required.\nOtherwise forward the request to the JoinNode.\n\n\nHandle any requests to set the key format by:\n\nIf the node is already repartitioning, set the key format.\nelse, if the JoinNode reports a preferred key format different to the one being set, then force a repartition with the key format\notherwise, forward to the JoinNode\n\n\n\nIn essence, the JoinNode and the PreJoinRepartitionNode work together to determine the key format, with PreJoinProjectNode just forwarding requests.  Hence all three nodes now implement a new JoiningNode interface.\nI'm not 100% happy with this design. But it should do for now.\nTesting done\nusual\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-10-09T13:49:51Z", "url": "https://github.com/confluentinc/ksql/pull/6393", "merged": true, "mergeCommit": {"oid": "5bde97b0e3075cff5d47d2619a42e3f748f11d04"}, "closed": true, "closedAt": "2020-10-13T12:01:54Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQ18MCAH2gAyNTAwNjAyODg0Ojg1Y2YzZWEwMTk3ZmNmOWY3MGZmZjU2MzdjYzlkYWU5YTQ4NzIyMTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSFj88AH2gAyNTAwNjAyODg0OjE3ZDIxYzRjOWNiMzliMGZkOWVlZGUyMjNkMmJhYTE4OGQyYTk4Y2E=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "85cf3ea0197fcf9f70fff5637cc9dae9a4872216", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/85cf3ea0197fcf9f70fff5637cc9dae9a4872216", "committedDate": "2020-10-09T13:10:44Z", "message": "chore: joins on sources with different key formats\n\nfixes: https://github.com/confluentinc/ksql/issues/6213\n\nJoins prefer the format of the left source and will repartition the right source if needed, unless:\n* the right source is a table\n* the right source is not already being repartitioned to facilitate the join and the left source is being repartitioned already."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d31bd8a0661485f35916627de22274514ff7b1d", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/0d31bd8a0661485f35916627de22274514ff7b1d", "committedDate": "2020-10-09T13:10:55Z", "message": "test: historical plans"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1ODE4MDI0", "url": "https://github.com/confluentinc/ksql/pull/6393#pullrequestreview-505818024", "createdAt": "2020-10-09T16:18:20Z", "commit": {"oid": "85cf3ea0197fcf9f70fff5637cc9dae9a4872216"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjoxODoyMFrOHfQhOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNjoxODoyMFrOHfQhOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUzODU1NA==", "bodyText": "\ud83d\ude22 why not have JoiningNode implement copyWithFormat() instead of setFormat?", "url": "https://github.com/confluentinc/ksql/pull/6393#discussion_r502538554", "createdAt": "2020-10-09T16:18:20Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/plan/PlanNode.java", "diffHunk": "@@ -42,7 +41,6 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n \n-@Immutable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85cf3ea0197fcf9f70fff5637cc9dae9a4872216"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e1396b71adf972230d314c749d11a22676dde02", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/3e1396b71adf972230d314c749d11a22676dde02", "committedDate": "2020-10-12T11:24:23Z", "message": "Merge branch 'master' into join_format_mismatch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "258d0afe7292df40cef6a624b0cb00825ea52d7b", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/258d0afe7292df40cef6a624b0cb00825ea52d7b", "committedDate": "2020-10-12T20:21:36Z", "message": "Merge branch 'master' into join_format_mismatch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17d21c4c9cb39b0fd9eede223d2baa188d2a98ca", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/17d21c4c9cb39b0fd9eede223d2baa188d2a98ca", "committedDate": "2020-10-13T09:56:40Z", "message": "Merge branch 'master' into join_format_mismatch"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4626, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}