{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NTU3NjU5", "number": 5386, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNToxOToyM1rOD9o-NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNToyMjowOVrOD9pAFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTYxMDEyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ResponseOutputStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNToxOToyM1rOGXQNGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODowMzowN1rOGXUe8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAzNTkzMA==", "bodyText": "Should we add a more informative error message?", "url": "https://github.com/confluentinc/ksql/pull/5386#discussion_r427035930", "createdAt": "2020-05-19T05:19:23Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ResponseOutputStream.java", "diffHunk": "@@ -55,13 +59,29 @@ public void write(final @NotNull byte[] bytes, final int offset, final int lengt\n     final byte[] bytesToWrite = new byte[length];\n     System.arraycopy(bytes, offset, bytesToWrite, 0, length);\n     final Buffer buffer = Buffer.buffer(bytesToWrite);\n+    blockIfWriteQueueFull();\n     response.write(buffer);\n   }\n \n   @Override\n   public void close() {\n     response.end();\n   }\n+\n+  private void blockIfWriteQueueFull() {\n+    VertxUtils.checkIsWorker();\n+    if (response.writeQueueFull()) {\n+      final CompletableFuture<Void> cf = new CompletableFuture<>();\n+      response.drainHandler(v -> cf.complete(null));\n+      try {\n+        cf.get(60, TimeUnit.SECONDS);\n+      } catch (Exception e) {\n+        // Very slow consumers will result in a timeout, this will cause the push query to be closed\n+        throw new KsqlException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b06549f9407fe13e7a1428a99dd6e02441995a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwNjAzNQ==", "bodyText": "The wrapped exception should contain the important error messages. I don't usually like adding new messages on rethrows unless you're doing something extra.", "url": "https://github.com/confluentinc/ksql/pull/5386#discussion_r427106035", "createdAt": "2020-05-19T08:03:07Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ResponseOutputStream.java", "diffHunk": "@@ -55,13 +59,29 @@ public void write(final @NotNull byte[] bytes, final int offset, final int lengt\n     final byte[] bytesToWrite = new byte[length];\n     System.arraycopy(bytes, offset, bytesToWrite, 0, length);\n     final Buffer buffer = Buffer.buffer(bytesToWrite);\n+    blockIfWriteQueueFull();\n     response.write(buffer);\n   }\n \n   @Override\n   public void close() {\n     response.end();\n   }\n+\n+  private void blockIfWriteQueueFull() {\n+    VertxUtils.checkIsWorker();\n+    if (response.writeQueueFull()) {\n+      final CompletableFuture<Void> cf = new CompletableFuture<>();\n+      response.drainHandler(v -> cf.complete(null));\n+      try {\n+        cf.get(60, TimeUnit.SECONDS);\n+      } catch (Exception e) {\n+        // Very slow consumers will result in a timeout, this will cause the push query to be closed\n+        throw new KsqlException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAzNTkzMA=="}, "originalCommit": {"oid": "c0b06549f9407fe13e7a1428a99dd6e02441995a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTYxMTUyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ResponseOutputStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNToyMDowOVrOGXQN8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODowNzoxNFrOGXUoUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAzNjE0NQ==", "bodyText": "Should we check explicitly for TimeoutException? Since we don't expect ExecutionException to be thrown here.", "url": "https://github.com/confluentinc/ksql/pull/5386#discussion_r427036145", "createdAt": "2020-05-19T05:20:09Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ResponseOutputStream.java", "diffHunk": "@@ -55,13 +59,29 @@ public void write(final @NotNull byte[] bytes, final int offset, final int lengt\n     final byte[] bytesToWrite = new byte[length];\n     System.arraycopy(bytes, offset, bytesToWrite, 0, length);\n     final Buffer buffer = Buffer.buffer(bytesToWrite);\n+    blockIfWriteQueueFull();\n     response.write(buffer);\n   }\n \n   @Override\n   public void close() {\n     response.end();\n   }\n+\n+  private void blockIfWriteQueueFull() {\n+    VertxUtils.checkIsWorker();\n+    if (response.writeQueueFull()) {\n+      final CompletableFuture<Void> cf = new CompletableFuture<>();\n+      response.drainHandler(v -> cf.complete(null));\n+      try {\n+        cf.get(60, TimeUnit.SECONDS);\n+      } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b06549f9407fe13e7a1428a99dd6e02441995a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwODQzNQ==", "bodyText": "We could, but I don't think it adds much as we want to rethrow on any exception we receive.", "url": "https://github.com/confluentinc/ksql/pull/5386#discussion_r427108435", "createdAt": "2020-05-19T08:07:14Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ResponseOutputStream.java", "diffHunk": "@@ -55,13 +59,29 @@ public void write(final @NotNull byte[] bytes, final int offset, final int lengt\n     final byte[] bytesToWrite = new byte[length];\n     System.arraycopy(bytes, offset, bytesToWrite, 0, length);\n     final Buffer buffer = Buffer.buffer(bytesToWrite);\n+    blockIfWriteQueueFull();\n     response.write(buffer);\n   }\n \n   @Override\n   public void close() {\n     response.end();\n   }\n+\n+  private void blockIfWriteQueueFull() {\n+    VertxUtils.checkIsWorker();\n+    if (response.writeQueueFull()) {\n+      final CompletableFuture<Void> cf = new CompletableFuture<>();\n+      response.drainHandler(v -> cf.complete(null));\n+      try {\n+        cf.get(60, TimeUnit.SECONDS);\n+      } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAzNjE0NQ=="}, "originalCommit": {"oid": "c0b06549f9407fe13e7a1428a99dd6e02441995a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1OTYxNDk0OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ResponseOutputStream.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwNToyMjowOVrOGXQQDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwODowMjowOFrOGXUcog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAzNjY4NQ==", "bodyText": "ResponseOutputStream is only written to by a single thread anyway, right? (Trying to check my understanding.)", "url": "https://github.com/confluentinc/ksql/pull/5386#discussion_r427036685", "createdAt": "2020-05-19T05:22:09Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ResponseOutputStream.java", "diffHunk": "@@ -41,7 +45,7 @@ public void write(final int b) {\n   }\n \n   @Override\n-  public void write(final @NotNull byte[] bytes, final int offset, final int length) {\n+  public synchronized void write(final @NotNull byte[] bytes, final int offset, final int length) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0b06549f9407fe13e7a1428a99dd6e02441995a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzEwNTQ0Mg==", "bodyText": "Yes, but it's a sanity check.", "url": "https://github.com/confluentinc/ksql/pull/5386#discussion_r427105442", "createdAt": "2020-05-19T08:02:08Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ResponseOutputStream.java", "diffHunk": "@@ -41,7 +45,7 @@ public void write(final int b) {\n   }\n \n   @Override\n-  public void write(final @NotNull byte[] bytes, final int offset, final int length) {\n+  public synchronized void write(final @NotNull byte[] bytes, final int offset, final int length) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzAzNjY4NQ=="}, "originalCommit": {"oid": "c0b06549f9407fe13e7a1428a99dd6e02441995a"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3462, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}