{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMDE4MTI0", "number": 4499, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzozNjoxNlrODe5Zqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMDo0Mzo1MFrODfvwnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzI0MzMxOnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-15-new-api-and-client.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzozNjoxNlrOFoSc6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDoyMTo0MVrOFpOS-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc4OTY3Mg==", "bodyText": "Not part of the review changes, but above:\n\n(newlines have been added here for the sake of clarity but the real JSON must not contain newlines)\n\nwe might want to clarify \"real JSON must not contain unescaped newlines\"", "url": "https://github.com/confluentinc/ksql/pull/4499#discussion_r377789672", "createdAt": "2020-02-11T17:36:16Z", "author": {"login": "colinhicks"}, "path": "design-proposals/klip-15-new-api-and-client.md", "diffHunk": "@@ -89,8 +93,6 @@ operation (newlines have been added here for the sake of clarity but the real JS\n ````", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e3b4b954aaa94f70b12b7d617f064508d23ae51"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3MDE3MQ==", "bodyText": "ack", "url": "https://github.com/confluentinc/ksql/pull/4499#discussion_r378770171", "createdAt": "2020-02-13T10:21:41Z", "author": {"login": "purplefox"}, "path": "design-proposals/klip-15-new-api-and-client.md", "diffHunk": "@@ -89,8 +93,6 @@ operation (newlines have been added here for the sake of clarity but the real JS\n ````", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc4OTY3Mg=="}, "originalCommit": {"oid": "7e3b4b954aaa94f70b12b7d617f064508d23ae51"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjE0NDc1OnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-15-new-api-and-client.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMDo0MTowNlrOFpoXow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMDo0MTowNlrOFpoXow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE5NzM0Nw==", "bodyText": "It's close-query and not query-close, right?\nAlso, what does \"(this can be configurable)\" mean?", "url": "https://github.com/confluentinc/ksql/pull/4499#discussion_r379197347", "createdAt": "2020-02-14T00:41:06Z", "author": {"login": "vcrfxia"}, "path": "design-proposals/klip-15-new-api-and-client.md", "diffHunk": "@@ -133,14 +132,14 @@ Push queries can be explicitly terminated by the client by making a request to t\n \n The request method will be a POST.\n \n-Requests will be made to a specific URL, e.g. \"/query-terminate\" (this can be configurable)\n+Requests will be made to a specific URL, e.g. \"/query-close\" (this can be configurable)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e322a396270e1523faf6edfcaef22a9868cb3b"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjE0NzE1OnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-15-new-api-and-client.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMDo0MjoyOVrOFpoZLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMDo0MjoyOVrOFpoZLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE5Nzc0MQ==", "bodyText": "Should this be \"the third 2\" instead of \"the third 3\", because of the 0-indexing?", "url": "https://github.com/confluentinc/ksql/pull/4499#discussion_r379197741", "createdAt": "2020-02-14T00:42:29Z", "author": {"login": "vcrfxia"}, "path": "design-proposals/klip-15-new-api-and-client.md", "diffHunk": "@@ -176,23 +174,35 @@ Each JSON object will be separated by a new line.\n \n To terminate the insert stream the client should end the request.\n \n-If acks are requested then the response will be written to the response when each row has been\n+Acks will be written to the response when each row has been\n successfully committed to the underlying topic. Rows are committed in the order they are provided.\n-Each ack in the response is just an empty JSON object, separated by newlines:\n+Each ack in the response is a JSON object, separated by newlines:\n \n ````\n-{}\n-{}\n-{}\n-{}\n+{\"status\":\"ok\",\"seq\":0}\n+{\"status\":\"ok\",\"seq\":2}\n+{\"status\":\"ok\",\"seq\":1}\n+{\"status\":\"ok\",\"seq\":3}\n ````\n \n+A successful ack will contain a field `status` with value `ok`.\n+\n+All ack responses also contain a field `seq` with a 64 bit signed integer value. This number\n+corresponds to the sequence of the insert on the request. The first send has sequence `0`, the second\n+`1`, the third `3`, etc. It allows the client to correlate the ack to the corresponding send.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e322a396270e1523faf6edfcaef22a9868cb3b"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjE0OTQxOnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-15-new-api-and-client.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMDo0Mzo1MFrOFpoamg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwMDo0ODozNVrOFpofig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE5ODEwNg==", "bodyText": "Do we guarantee the order of the inserts, even if the order of the acks are not guaranteed, or is the order of the inserts not guaranteed either? Is this because of a limitation of the streaming protocol or something else?", "url": "https://github.com/confluentinc/ksql/pull/4499#discussion_r379198106", "createdAt": "2020-02-14T00:43:50Z", "author": {"login": "vcrfxia"}, "path": "design-proposals/klip-15-new-api-and-client.md", "diffHunk": "@@ -176,23 +174,35 @@ Each JSON object will be separated by a new line.\n \n To terminate the insert stream the client should end the request.\n \n-If acks are requested then the response will be written to the response when each row has been\n+Acks will be written to the response when each row has been\n successfully committed to the underlying topic. Rows are committed in the order they are provided.\n-Each ack in the response is just an empty JSON object, separated by newlines:\n+Each ack in the response is a JSON object, separated by newlines:\n \n ````\n-{}\n-{}\n-{}\n-{}\n+{\"status\":\"ok\",\"seq\":0}\n+{\"status\":\"ok\",\"seq\":2}\n+{\"status\":\"ok\",\"seq\":1}\n+{\"status\":\"ok\",\"seq\":3}\n ````\n \n+A successful ack will contain a field `status` with value `ok`.\n+\n+All ack responses also contain a field `seq` with a 64 bit signed integer value. This number\n+corresponds to the sequence of the insert on the request. The first send has sequence `0`, the second\n+`1`, the third `3`, etc. It allows the client to correlate the ack to the corresponding send.\n+\n+In case of error, an error response (see below) will be sent. For an error response for a send, the\n+`seq` field will also be included. \n+\n+Please note that acks can be returned in a different sequence to which the inserts were submitted. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88e322a396270e1523faf6edfcaef22a9868cb3b"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE5OTM3MA==", "bodyText": "Nvm, found the answer in discussion on the original PR: #4069 (comment)", "url": "https://github.com/confluentinc/ksql/pull/4499#discussion_r379199370", "createdAt": "2020-02-14T00:48:35Z", "author": {"login": "vcrfxia"}, "path": "design-proposals/klip-15-new-api-and-client.md", "diffHunk": "@@ -176,23 +174,35 @@ Each JSON object will be separated by a new line.\n \n To terminate the insert stream the client should end the request.\n \n-If acks are requested then the response will be written to the response when each row has been\n+Acks will be written to the response when each row has been\n successfully committed to the underlying topic. Rows are committed in the order they are provided.\n-Each ack in the response is just an empty JSON object, separated by newlines:\n+Each ack in the response is a JSON object, separated by newlines:\n \n ````\n-{}\n-{}\n-{}\n-{}\n+{\"status\":\"ok\",\"seq\":0}\n+{\"status\":\"ok\",\"seq\":2}\n+{\"status\":\"ok\",\"seq\":1}\n+{\"status\":\"ok\",\"seq\":3}\n ````\n \n+A successful ack will contain a field `status` with value `ok`.\n+\n+All ack responses also contain a field `seq` with a 64 bit signed integer value. This number\n+corresponds to the sequence of the insert on the request. The first send has sequence `0`, the second\n+`1`, the third `3`, etc. It allows the client to correlate the ack to the corresponding send.\n+\n+In case of error, an error response (see below) will be sent. For an error response for a send, the\n+`seq` field will also be included. \n+\n+Please note that acks can be returned in a different sequence to which the inserts were submitted. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE5ODEwNg=="}, "originalCommit": {"oid": "88e322a396270e1523faf6edfcaef22a9868cb3b"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2139, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}