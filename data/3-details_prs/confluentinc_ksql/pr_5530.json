{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2ODI5NzM5", "number": 5530, "title": "Klip 29 explicit keys", "bodyText": "KLIP proposing removal of explicitly adding ROWKEY STRING key columns where CREATE TABLE/STREAM statements don't define one and instead:\n\nrequiring primary key columns in tables\nallowing streams to not have a key column.", "createdAt": "2020-06-02T21:06:02Z", "url": "https://github.com/confluentinc/ksql/pull/5530", "merged": true, "mergeCommit": {"oid": "55399b11eba24ef690e3e66a6b497281d2907cab"}, "closed": true, "closedAt": "2020-06-03T08:41:52Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnay8JAH2gAyNDI2ODI5NzM5OjhkY2JiMjUxYjJiNDA1YzA2YTY0ZmU5ZmU5MTA0OGM4YTdjNzY0YTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcneQQNAH2gAyNDI2ODI5NzM5OmQ1MjYyZGY1YmZjNWJlMDc1OGE4ZWExMjZjZjQ1ZmVmYmNhN2MwOWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8dcbb251b2b405c06a64fe9fe91048c8a7c764a0", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/8dcbb251b2b405c06a64fe9fe91048c8a7c764a0", "committedDate": "2020-06-02T20:22:18Z", "message": "chore: reserve KLIP-29"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f87f40e0313a9f10b35d0d0a810061e50c444fb", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/3f87f40e0313a9f10b35d0d0a810061e50c444fb", "committedDate": "2020-06-02T21:04:32Z", "message": "docs: raise KLIP-29"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b00858426851e2a819f7b06ff66775db41fc0e5", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/4b00858426851e2a819f7b06ff66775db41fc0e5", "committedDate": "2020-06-02T21:07:15Z", "message": "docs: add discussion links"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e26b0ce8449e8e8ba30d1e4b80136e9c0152149", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/9e26b0ce8449e8e8ba30d1e4b80136e9c0152149", "committedDate": "2020-06-02T21:16:12Z", "message": "chore: add example of confusion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e74f9a621e5d1fcad0f44a7d6635fa9ef56e94c", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/5e74f9a621e5d1fcad0f44a7d6635fa9ef56e94c", "committedDate": "2020-06-02T21:17:54Z", "message": "chore: correct file name"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMTAxMDQy", "url": "https://github.com/confluentinc/ksql/pull/5530#pullrequestreview-423101042", "createdAt": "2020-06-02T22:30:41Z", "commit": {"oid": "9e26b0ce8449e8e8ba30d1e4b80136e9c0152149"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjozMDo0MVrOGeGHFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjo0MDo0NVrOGeGUjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMDU4Mg==", "bodyText": "typo? not -> none", "url": "https://github.com/confluentinc/ksql/pull/5530#discussion_r434210582", "createdAt": "2020-06-02T22:30:41Z", "author": {"login": "mjsax"}, "path": "design-proposals/kliup-29-explicit-keys.md", "diffHunk": "@@ -0,0 +1,154 @@\n+# KLIP-29: Explicit Keys\n+\n+**Author**: @big-andy-coates | \n+**Release Target**: 0.10.0 | \n+**Status**: In Discussion | \n+**Discussion**: [Github PR](https://github.com/confluentinc/ksql/pull/5530)\n+\n+**tl;dr:** Up until now ksqlDB has added an implicit `ROWKEY STRING (PRIMARY) KEY` to a `CREATE TABLE`\n+or `CREATE STREAM` statement that does not itself explicitly define a key column. This KLIP proposes\n+removing this implicit column creation and instead requiring tables to define their PRIMARY KEY, and\n+changing `CREATE STREAM` to create a stream without a KEY column, should not be defined.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e26b0ce8449e8e8ba30d1e4b80136e9c0152149"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMTU2MA==", "bodyText": "nit: sql (seems some code snippets above don't define sql as language? -- not sure if you want to add it?)", "url": "https://github.com/confluentinc/ksql/pull/5530#discussion_r434211560", "createdAt": "2020-06-02T22:33:35Z", "author": {"login": "mjsax"}, "path": "design-proposals/kliup-29-explicit-keys.md", "diffHunk": "@@ -0,0 +1,154 @@\n+# KLIP-29: Explicit Keys\n+\n+**Author**: @big-andy-coates | \n+**Release Target**: 0.10.0 | \n+**Status**: In Discussion | \n+**Discussion**: [Github PR](https://github.com/confluentinc/ksql/pull/5530)\n+\n+**tl;dr:** Up until now ksqlDB has added an implicit `ROWKEY STRING (PRIMARY) KEY` to a `CREATE TABLE`\n+or `CREATE STREAM` statement that does not itself explicitly define a key column. This KLIP proposes\n+removing this implicit column creation and instead requiring tables to define their PRIMARY KEY, and\n+changing `CREATE STREAM` to create a stream without a KEY column, should not be defined.\n+\n+## Motivation and background\n+\n+Implicitly adding columns is confusing for users. They are left wondering where did this column come from? \n+For example:\n+\n+```\n+ksal> CREATE STREAM S (ID INT, NAME STRING) WITH (...);\n+Stream S Created.\n+ksal> CREATE STREAM S2 AS SELECT ID, NAME FROM S;\n+Key missing from projection. See https://cnfl.io/2LV7ouS.\n+The query used to build `S2` must include the key column ROWKEY in its projection.\n+```\n+\n+Understandably, the user may be left wondering where this `ROWKEY` column came from and why they need to\n+add it to the projection.\n+\n+Now that ksqlDB supports more than just `STRING` key columns, it no longer makes sense to add an\n+implicit `STRING` key column by default.  Better to let the user define _if_ there is a key column, and if\n+so, what it's name and type are.\n+\n+There is no semantic need for a STREAM to have data in the key, and hence there should be no need for \n+there to be a KEY column defined.  This can also be useful when the data in the key is not in a format \n+ksqlDB can work with, e.g. an Avro, JSON or Protobuf key, or any other format.  It seems unwieldy and \n+confusing to add an implicit `STRING` key column if the actual key is empty or is not something ksqlDB \n+can read.\n+\n+Unlike STREAMs, TABLEs require a PRIMARY KEY column. Therefore, we should require the user to provide one.  \n+\n+## What is in scope\n+\n+* `CREATE TABLE` statements will require a `PRIMARY KEY` column to be defined.\n+* `CREATE STREAM` statements without a `KEY` column defined will define a stream without a key column. \n+\n+## What is not in scope\n+\n+* Everything else.\n+\n+## Value/Return\n+\n+Removal of implicitly added columns makes statements more declarative. They make it possible to describe \n+a stream with no data, or incompatible data, in the key. They make users _think_ about the name and type\n+of the PRIMARY KEY column of their tables.\n+\n+Combined, these changes make the language easier to use and richer.\n+\n+## Public APIS\n+\n+### CREATE TABLE changes\n+\n+A `CREATE TABLE` statement that does not define a `PRIMARY KEY` column will now result in an error:\n+\n+```\n+ksql> CREATE TABLE INPUT (A INT, B STRING) WITH (...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+```\n+\n+Statements with a `PRIMARY KEY` column will continue to work as before.\n+\n+Where schema inference is used, the error message will include an example of how to define a partial\n+schema to add the primary key:\n+\n+```ql", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e26b0ce8449e8e8ba30d1e4b80136e9c0152149"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMjUzNA==", "bodyText": "typo? with out -> without", "url": "https://github.com/confluentinc/ksql/pull/5530#discussion_r434212534", "createdAt": "2020-06-02T22:36:21Z", "author": {"login": "mjsax"}, "path": "design-proposals/kliup-29-explicit-keys.md", "diffHunk": "@@ -0,0 +1,154 @@\n+# KLIP-29: Explicit Keys\n+\n+**Author**: @big-andy-coates | \n+**Release Target**: 0.10.0 | \n+**Status**: In Discussion | \n+**Discussion**: [Github PR](https://github.com/confluentinc/ksql/pull/5530)\n+\n+**tl;dr:** Up until now ksqlDB has added an implicit `ROWKEY STRING (PRIMARY) KEY` to a `CREATE TABLE`\n+or `CREATE STREAM` statement that does not itself explicitly define a key column. This KLIP proposes\n+removing this implicit column creation and instead requiring tables to define their PRIMARY KEY, and\n+changing `CREATE STREAM` to create a stream without a KEY column, should not be defined.\n+\n+## Motivation and background\n+\n+Implicitly adding columns is confusing for users. They are left wondering where did this column come from? \n+For example:\n+\n+```\n+ksal> CREATE STREAM S (ID INT, NAME STRING) WITH (...);\n+Stream S Created.\n+ksal> CREATE STREAM S2 AS SELECT ID, NAME FROM S;\n+Key missing from projection. See https://cnfl.io/2LV7ouS.\n+The query used to build `S2` must include the key column ROWKEY in its projection.\n+```\n+\n+Understandably, the user may be left wondering where this `ROWKEY` column came from and why they need to\n+add it to the projection.\n+\n+Now that ksqlDB supports more than just `STRING` key columns, it no longer makes sense to add an\n+implicit `STRING` key column by default.  Better to let the user define _if_ there is a key column, and if\n+so, what it's name and type are.\n+\n+There is no semantic need for a STREAM to have data in the key, and hence there should be no need for \n+there to be a KEY column defined.  This can also be useful when the data in the key is not in a format \n+ksqlDB can work with, e.g. an Avro, JSON or Protobuf key, or any other format.  It seems unwieldy and \n+confusing to add an implicit `STRING` key column if the actual key is empty or is not something ksqlDB \n+can read.\n+\n+Unlike STREAMs, TABLEs require a PRIMARY KEY column. Therefore, we should require the user to provide one.  \n+\n+## What is in scope\n+\n+* `CREATE TABLE` statements will require a `PRIMARY KEY` column to be defined.\n+* `CREATE STREAM` statements without a `KEY` column defined will define a stream without a key column. \n+\n+## What is not in scope\n+\n+* Everything else.\n+\n+## Value/Return\n+\n+Removal of implicitly added columns makes statements more declarative. They make it possible to describe \n+a stream with no data, or incompatible data, in the key. They make users _think_ about the name and type\n+of the PRIMARY KEY column of their tables.\n+\n+Combined, these changes make the language easier to use and richer.\n+\n+## Public APIS\n+\n+### CREATE TABLE changes\n+\n+A `CREATE TABLE` statement that does not define a `PRIMARY KEY` column will now result in an error:\n+\n+```\n+ksql> CREATE TABLE INPUT (A INT, B STRING) WITH (...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+```\n+\n+Statements with a `PRIMARY KEY` column will continue to work as before.\n+\n+Where schema inference is used, the error message will include an example of how to define a partial\n+schema to add the primary key:\n+\n+```ql\n+ksql> CREATE TABLE INPUT WITH (value_foramt='Avro', ...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+You can define just the primary key and still load the value columns from the Schema registry, for example:\n+  CREATE TABLE INPUT (ID INT PRIMARY KEY) WITH (value_foramt='Avro', ...);\n+```\n+\n+### CREATE STREAM changes\n+\n+A `CREATE STREAM` statement that does not define a `KEY` column will now result in a stream with no\n+data being read from the Kafka message's key.\n+\n+```sql\n+CREATE STREAM INPUT (A INT, B STRING) WITH (...);\n+-- Results in INPUT with schema: A INT, B STRING, i.e. no key column.\n+```\n+\n+Statements with a `KEY` column will continue to work as before.\n+\n+## Design\n+\n+This is mainly a syntax only change, as detailed about. \n+\n+Streams with out a key column will work just like any other stream. However, `GROUP BY`, `PARTITION BY`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e26b0ce8449e8e8ba30d1e4b80136e9c0152149"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMjkxMA==", "bodyText": "typo? [s]tatements", "url": "https://github.com/confluentinc/ksql/pull/5530#discussion_r434212910", "createdAt": "2020-06-02T22:37:28Z", "author": {"login": "mjsax"}, "path": "design-proposals/kliup-29-explicit-keys.md", "diffHunk": "@@ -0,0 +1,154 @@\n+# KLIP-29: Explicit Keys\n+\n+**Author**: @big-andy-coates | \n+**Release Target**: 0.10.0 | \n+**Status**: In Discussion | \n+**Discussion**: [Github PR](https://github.com/confluentinc/ksql/pull/5530)\n+\n+**tl;dr:** Up until now ksqlDB has added an implicit `ROWKEY STRING (PRIMARY) KEY` to a `CREATE TABLE`\n+or `CREATE STREAM` statement that does not itself explicitly define a key column. This KLIP proposes\n+removing this implicit column creation and instead requiring tables to define their PRIMARY KEY, and\n+changing `CREATE STREAM` to create a stream without a KEY column, should not be defined.\n+\n+## Motivation and background\n+\n+Implicitly adding columns is confusing for users. They are left wondering where did this column come from? \n+For example:\n+\n+```\n+ksal> CREATE STREAM S (ID INT, NAME STRING) WITH (...);\n+Stream S Created.\n+ksal> CREATE STREAM S2 AS SELECT ID, NAME FROM S;\n+Key missing from projection. See https://cnfl.io/2LV7ouS.\n+The query used to build `S2` must include the key column ROWKEY in its projection.\n+```\n+\n+Understandably, the user may be left wondering where this `ROWKEY` column came from and why they need to\n+add it to the projection.\n+\n+Now that ksqlDB supports more than just `STRING` key columns, it no longer makes sense to add an\n+implicit `STRING` key column by default.  Better to let the user define _if_ there is a key column, and if\n+so, what it's name and type are.\n+\n+There is no semantic need for a STREAM to have data in the key, and hence there should be no need for \n+there to be a KEY column defined.  This can also be useful when the data in the key is not in a format \n+ksqlDB can work with, e.g. an Avro, JSON or Protobuf key, or any other format.  It seems unwieldy and \n+confusing to add an implicit `STRING` key column if the actual key is empty or is not something ksqlDB \n+can read.\n+\n+Unlike STREAMs, TABLEs require a PRIMARY KEY column. Therefore, we should require the user to provide one.  \n+\n+## What is in scope\n+\n+* `CREATE TABLE` statements will require a `PRIMARY KEY` column to be defined.\n+* `CREATE STREAM` statements without a `KEY` column defined will define a stream without a key column. \n+\n+## What is not in scope\n+\n+* Everything else.\n+\n+## Value/Return\n+\n+Removal of implicitly added columns makes statements more declarative. They make it possible to describe \n+a stream with no data, or incompatible data, in the key. They make users _think_ about the name and type\n+of the PRIMARY KEY column of their tables.\n+\n+Combined, these changes make the language easier to use and richer.\n+\n+## Public APIS\n+\n+### CREATE TABLE changes\n+\n+A `CREATE TABLE` statement that does not define a `PRIMARY KEY` column will now result in an error:\n+\n+```\n+ksql> CREATE TABLE INPUT (A INT, B STRING) WITH (...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+```\n+\n+Statements with a `PRIMARY KEY` column will continue to work as before.\n+\n+Where schema inference is used, the error message will include an example of how to define a partial\n+schema to add the primary key:\n+\n+```ql\n+ksql> CREATE TABLE INPUT WITH (value_foramt='Avro', ...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+You can define just the primary key and still load the value columns from the Schema registry, for example:\n+  CREATE TABLE INPUT (ID INT PRIMARY KEY) WITH (value_foramt='Avro', ...);\n+```\n+\n+### CREATE STREAM changes\n+\n+A `CREATE STREAM` statement that does not define a `KEY` column will now result in a stream with no\n+data being read from the Kafka message's key.\n+\n+```sql\n+CREATE STREAM INPUT (A INT, B STRING) WITH (...);\n+-- Results in INPUT with schema: A INT, B STRING, i.e. no key column.\n+```\n+\n+Statements with a `KEY` column will continue to work as before.\n+\n+## Design\n+\n+This is mainly a syntax only change, as detailed about. \n+\n+Streams with out a key column will work just like any other stream. However, `GROUP BY`, `PARTITION BY`\n+and `JOIN`s will _always_ result in a repartition, as the grouping, partitioning or joining expression\n+can never be the key column.\n+\n+## Test plan\n+\n+Ensure coverage of key-less streams in QTT tests, especially for `GROUP BY`, `PARTITION BY`, and `JOIN`s.\n+\n+## LOEs and Delivery Milestones\n+\n+Single deliverable, with low loe (prototype already working).\n+\n+## Documentation Updates\n+\n+Suitable doc updates for the `CREATE TABLE` and `CREATE STREAM` statements will be done as part of the KLIP.\n+\n+Plus updates to the rests of the ksqlDB docs, Kafka tutorials microsite and the Examples repo will be done\n+in tandem with other syntax changes.\n+\n+Release notes to call out this change in behaviour.\n+\n+## Compatibility Implications\n+\n+CREATE Statements submitted on previous versions of ksqlDB will continue to work as expected.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e26b0ce8449e8e8ba30d1e4b80136e9c0152149"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxMzA2Ng==", "bodyText": "typo: RO[W]KEY", "url": "https://github.com/confluentinc/ksql/pull/5530#discussion_r434213066", "createdAt": "2020-06-02T22:37:56Z", "author": {"login": "mjsax"}, "path": "design-proposals/kliup-29-explicit-keys.md", "diffHunk": "@@ -0,0 +1,154 @@\n+# KLIP-29: Explicit Keys\n+\n+**Author**: @big-andy-coates | \n+**Release Target**: 0.10.0 | \n+**Status**: In Discussion | \n+**Discussion**: [Github PR](https://github.com/confluentinc/ksql/pull/5530)\n+\n+**tl;dr:** Up until now ksqlDB has added an implicit `ROWKEY STRING (PRIMARY) KEY` to a `CREATE TABLE`\n+or `CREATE STREAM` statement that does not itself explicitly define a key column. This KLIP proposes\n+removing this implicit column creation and instead requiring tables to define their PRIMARY KEY, and\n+changing `CREATE STREAM` to create a stream without a KEY column, should not be defined.\n+\n+## Motivation and background\n+\n+Implicitly adding columns is confusing for users. They are left wondering where did this column come from? \n+For example:\n+\n+```\n+ksal> CREATE STREAM S (ID INT, NAME STRING) WITH (...);\n+Stream S Created.\n+ksal> CREATE STREAM S2 AS SELECT ID, NAME FROM S;\n+Key missing from projection. See https://cnfl.io/2LV7ouS.\n+The query used to build `S2` must include the key column ROWKEY in its projection.\n+```\n+\n+Understandably, the user may be left wondering where this `ROWKEY` column came from and why they need to\n+add it to the projection.\n+\n+Now that ksqlDB supports more than just `STRING` key columns, it no longer makes sense to add an\n+implicit `STRING` key column by default.  Better to let the user define _if_ there is a key column, and if\n+so, what it's name and type are.\n+\n+There is no semantic need for a STREAM to have data in the key, and hence there should be no need for \n+there to be a KEY column defined.  This can also be useful when the data in the key is not in a format \n+ksqlDB can work with, e.g. an Avro, JSON or Protobuf key, or any other format.  It seems unwieldy and \n+confusing to add an implicit `STRING` key column if the actual key is empty or is not something ksqlDB \n+can read.\n+\n+Unlike STREAMs, TABLEs require a PRIMARY KEY column. Therefore, we should require the user to provide one.  \n+\n+## What is in scope\n+\n+* `CREATE TABLE` statements will require a `PRIMARY KEY` column to be defined.\n+* `CREATE STREAM` statements without a `KEY` column defined will define a stream without a key column. \n+\n+## What is not in scope\n+\n+* Everything else.\n+\n+## Value/Return\n+\n+Removal of implicitly added columns makes statements more declarative. They make it possible to describe \n+a stream with no data, or incompatible data, in the key. They make users _think_ about the name and type\n+of the PRIMARY KEY column of their tables.\n+\n+Combined, these changes make the language easier to use and richer.\n+\n+## Public APIS\n+\n+### CREATE TABLE changes\n+\n+A `CREATE TABLE` statement that does not define a `PRIMARY KEY` column will now result in an error:\n+\n+```\n+ksql> CREATE TABLE INPUT (A INT, B STRING) WITH (...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+```\n+\n+Statements with a `PRIMARY KEY` column will continue to work as before.\n+\n+Where schema inference is used, the error message will include an example of how to define a partial\n+schema to add the primary key:\n+\n+```ql\n+ksql> CREATE TABLE INPUT WITH (value_foramt='Avro', ...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+You can define just the primary key and still load the value columns from the Schema registry, for example:\n+  CREATE TABLE INPUT (ID INT PRIMARY KEY) WITH (value_foramt='Avro', ...);\n+```\n+\n+### CREATE STREAM changes\n+\n+A `CREATE STREAM` statement that does not define a `KEY` column will now result in a stream with no\n+data being read from the Kafka message's key.\n+\n+```sql\n+CREATE STREAM INPUT (A INT, B STRING) WITH (...);\n+-- Results in INPUT with schema: A INT, B STRING, i.e. no key column.\n+```\n+\n+Statements with a `KEY` column will continue to work as before.\n+\n+## Design\n+\n+This is mainly a syntax only change, as detailed about. \n+\n+Streams with out a key column will work just like any other stream. However, `GROUP BY`, `PARTITION BY`\n+and `JOIN`s will _always_ result in a repartition, as the grouping, partitioning or joining expression\n+can never be the key column.\n+\n+## Test plan\n+\n+Ensure coverage of key-less streams in QTT tests, especially for `GROUP BY`, `PARTITION BY`, and `JOIN`s.\n+\n+## LOEs and Delivery Milestones\n+\n+Single deliverable, with low loe (prototype already working).\n+\n+## Documentation Updates\n+\n+Suitable doc updates for the `CREATE TABLE` and `CREATE STREAM` statements will be done as part of the KLIP.\n+\n+Plus updates to the rests of the ksqlDB docs, Kafka tutorials microsite and the Examples repo will be done\n+in tandem with other syntax changes.\n+\n+Release notes to call out this change in behaviour.\n+\n+## Compatibility Implications\n+\n+CREATE Statements submitted on previous versions of ksqlDB will continue to work as expected.\n+\n+Users submitting previously written statements may see `CREATE TABLE` statements that previously ran,\n+now fail, and see `CREATE STREAM` statements create streams without a `ROwKEY STRING KEY` column. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e26b0ce8449e8e8ba30d1e4b80136e9c0152149"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIxNDAyOA==", "bodyText": "Just to clarify: After key schemas are integrated with SR (and after we fully support structured keys), a user will be able to do\nCREATE TABLE myTable WITH (key_format='Avro', value_format='Avro', kafka_topic='input');\n\nAnd the all columns from the key-avro-schema will be the PK automatically?", "url": "https://github.com/confluentinc/ksql/pull/5530#discussion_r434214028", "createdAt": "2020-06-02T22:40:45Z", "author": {"login": "mjsax"}, "path": "design-proposals/kliup-29-explicit-keys.md", "diffHunk": "@@ -0,0 +1,154 @@\n+# KLIP-29: Explicit Keys\n+\n+**Author**: @big-andy-coates | \n+**Release Target**: 0.10.0 | \n+**Status**: In Discussion | \n+**Discussion**: [Github PR](https://github.com/confluentinc/ksql/pull/5530)\n+\n+**tl;dr:** Up until now ksqlDB has added an implicit `ROWKEY STRING (PRIMARY) KEY` to a `CREATE TABLE`\n+or `CREATE STREAM` statement that does not itself explicitly define a key column. This KLIP proposes\n+removing this implicit column creation and instead requiring tables to define their PRIMARY KEY, and\n+changing `CREATE STREAM` to create a stream without a KEY column, should not be defined.\n+\n+## Motivation and background\n+\n+Implicitly adding columns is confusing for users. They are left wondering where did this column come from? \n+For example:\n+\n+```\n+ksal> CREATE STREAM S (ID INT, NAME STRING) WITH (...);\n+Stream S Created.\n+ksal> CREATE STREAM S2 AS SELECT ID, NAME FROM S;\n+Key missing from projection. See https://cnfl.io/2LV7ouS.\n+The query used to build `S2` must include the key column ROWKEY in its projection.\n+```\n+\n+Understandably, the user may be left wondering where this `ROWKEY` column came from and why they need to\n+add it to the projection.\n+\n+Now that ksqlDB supports more than just `STRING` key columns, it no longer makes sense to add an\n+implicit `STRING` key column by default.  Better to let the user define _if_ there is a key column, and if\n+so, what it's name and type are.\n+\n+There is no semantic need for a STREAM to have data in the key, and hence there should be no need for \n+there to be a KEY column defined.  This can also be useful when the data in the key is not in a format \n+ksqlDB can work with, e.g. an Avro, JSON or Protobuf key, or any other format.  It seems unwieldy and \n+confusing to add an implicit `STRING` key column if the actual key is empty or is not something ksqlDB \n+can read.\n+\n+Unlike STREAMs, TABLEs require a PRIMARY KEY column. Therefore, we should require the user to provide one.  \n+\n+## What is in scope\n+\n+* `CREATE TABLE` statements will require a `PRIMARY KEY` column to be defined.\n+* `CREATE STREAM` statements without a `KEY` column defined will define a stream without a key column. \n+\n+## What is not in scope\n+\n+* Everything else.\n+\n+## Value/Return\n+\n+Removal of implicitly added columns makes statements more declarative. They make it possible to describe \n+a stream with no data, or incompatible data, in the key. They make users _think_ about the name and type\n+of the PRIMARY KEY column of their tables.\n+\n+Combined, these changes make the language easier to use and richer.\n+\n+## Public APIS\n+\n+### CREATE TABLE changes\n+\n+A `CREATE TABLE` statement that does not define a `PRIMARY KEY` column will now result in an error:\n+\n+```\n+ksql> CREATE TABLE INPUT (A INT, B STRING) WITH (...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+```\n+\n+Statements with a `PRIMARY KEY` column will continue to work as before.\n+\n+Where schema inference is used, the error message will include an example of how to define a partial\n+schema to add the primary key:\n+\n+```ql\n+ksql> CREATE TABLE INPUT WITH (value_foramt='Avro', ...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+You can define just the primary key and still load the value columns from the Schema registry, for example:\n+  CREATE TABLE INPUT (ID INT PRIMARY KEY) WITH (value_foramt='Avro', ...);\n+```\n+\n+### CREATE STREAM changes\n+\n+A `CREATE STREAM` statement that does not define a `KEY` column will now result in a stream with no\n+data being read from the Kafka message's key.\n+\n+```sql\n+CREATE STREAM INPUT (A INT, B STRING) WITH (...);\n+-- Results in INPUT with schema: A INT, B STRING, i.e. no key column.\n+```\n+\n+Statements with a `KEY` column will continue to work as before.\n+\n+## Design\n+\n+This is mainly a syntax only change, as detailed about. \n+\n+Streams with out a key column will work just like any other stream. However, `GROUP BY`, `PARTITION BY`\n+and `JOIN`s will _always_ result in a repartition, as the grouping, partitioning or joining expression\n+can never be the key column.\n+\n+## Test plan\n+\n+Ensure coverage of key-less streams in QTT tests, especially for `GROUP BY`, `PARTITION BY`, and `JOIN`s.\n+\n+## LOEs and Delivery Milestones\n+\n+Single deliverable, with low loe (prototype already working).\n+\n+## Documentation Updates\n+\n+Suitable doc updates for the `CREATE TABLE` and `CREATE STREAM` statements will be done as part of the KLIP.\n+\n+Plus updates to the rests of the ksqlDB docs, Kafka tutorials microsite and the Examples repo will be done\n+in tandem with other syntax changes.\n+\n+Release notes to call out this change in behaviour.\n+\n+## Compatibility Implications\n+\n+CREATE Statements submitted on previous versions of ksqlDB will continue to work as expected.\n+\n+Users submitting previously written statements may see `CREATE TABLE` statements that previously ran,\n+now fail, and see `CREATE STREAM` statements create streams without a `ROwKEY STRING KEY` column. \n+\n+Users receiving an error when their `CREATE TABLE` statements fail will need to update their statements\n+to include a suitable `PRIMARY KEY` column.  Where the statement already contains the column set, the \n+addition of the `PRIMARY KEY` column should be simple.  However, users may be more confused when the \n+statement is making use of schema inference, i.e. loading the value columns from the Schema Registry,\n+for example:\n+\n+```sql\n+-- existing create statement that loads the value columns from the Schema Registry: \n+CREATE TABLE OUTPUT WITH (value_format='Avro', kafka_topic='input');\n+```\n+\n+As ksqlDB does not _yet_ support loading the key schema from the Schema Registry the user must now\n+supply the `PRIMARY KEY` in a _partial schema_. (_Partial schema_ support was added in v0.9):", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e26b0ce8449e8e8ba30d1e4b80136e9c0152149"}, "originalPosition": 137}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78f818aff5e8819d28a2a74b427232ceaa3bab04", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/78f818aff5e8819d28a2a74b427232ceaa3bab04", "committedDate": "2020-06-03T00:03:31Z", "message": "chore: requested changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMTM1Mzg2", "url": "https://github.com/confluentinc/ksql/pull/5530#pullrequestreview-423135386", "createdAt": "2020-06-03T00:05:02Z", "commit": {"oid": "9e26b0ce8449e8e8ba30d1e4b80136e9c0152149"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDowNTowMlrOGeH3IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDowNjo0M1rOGeH4yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzOTI2NQ==", "bodyText": "nice!", "url": "https://github.com/confluentinc/ksql/pull/5530#discussion_r434239265", "createdAt": "2020-06-03T00:05:02Z", "author": {"login": "agavra"}, "path": "design-proposals/kliup-29-explicit-keys.md", "diffHunk": "@@ -0,0 +1,154 @@\n+# KLIP-29: Explicit Keys\n+\n+**Author**: @big-andy-coates | \n+**Release Target**: 0.10.0 | \n+**Status**: In Discussion | \n+**Discussion**: [Github PR](https://github.com/confluentinc/ksql/pull/5530)\n+\n+**tl;dr:** Up until now ksqlDB has added an implicit `ROWKEY STRING (PRIMARY) KEY` to a `CREATE TABLE`\n+or `CREATE STREAM` statement that does not itself explicitly define a key column. This KLIP proposes\n+removing this implicit column creation and instead requiring tables to define their PRIMARY KEY, and\n+changing `CREATE STREAM` to create a stream without a KEY column, should not be defined.\n+\n+## Motivation and background\n+\n+Implicitly adding columns is confusing for users. They are left wondering where did this column come from? \n+For example:\n+\n+```\n+ksal> CREATE STREAM S (ID INT, NAME STRING) WITH (...);\n+Stream S Created.\n+ksal> CREATE STREAM S2 AS SELECT ID, NAME FROM S;\n+Key missing from projection. See https://cnfl.io/2LV7ouS.\n+The query used to build `S2` must include the key column ROWKEY in its projection.\n+```\n+\n+Understandably, the user may be left wondering where this `ROWKEY` column came from and why they need to\n+add it to the projection.\n+\n+Now that ksqlDB supports more than just `STRING` key columns, it no longer makes sense to add an\n+implicit `STRING` key column by default.  Better to let the user define _if_ there is a key column, and if\n+so, what it's name and type are.\n+\n+There is no semantic need for a STREAM to have data in the key, and hence there should be no need for \n+there to be a KEY column defined.  This can also be useful when the data in the key is not in a format \n+ksqlDB can work with, e.g. an Avro, JSON or Protobuf key, or any other format.  It seems unwieldy and \n+confusing to add an implicit `STRING` key column if the actual key is empty or is not something ksqlDB \n+can read.\n+\n+Unlike STREAMs, TABLEs require a PRIMARY KEY column. Therefore, we should require the user to provide one.  \n+\n+## What is in scope\n+\n+* `CREATE TABLE` statements will require a `PRIMARY KEY` column to be defined.\n+* `CREATE STREAM` statements without a `KEY` column defined will define a stream without a key column. \n+\n+## What is not in scope\n+\n+* Everything else.\n+\n+## Value/Return\n+\n+Removal of implicitly added columns makes statements more declarative. They make it possible to describe \n+a stream with no data, or incompatible data, in the key. They make users _think_ about the name and type\n+of the PRIMARY KEY column of their tables.\n+\n+Combined, these changes make the language easier to use and richer.\n+\n+## Public APIS\n+\n+### CREATE TABLE changes\n+\n+A `CREATE TABLE` statement that does not define a `PRIMARY KEY` column will now result in an error:\n+\n+```\n+ksql> CREATE TABLE INPUT (A INT, B STRING) WITH (...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+```\n+\n+Statements with a `PRIMARY KEY` column will continue to work as before.\n+\n+Where schema inference is used, the error message will include an example of how to define a partial\n+schema to add the primary key:\n+\n+```ql\n+ksql> CREATE TABLE INPUT WITH (value_foramt='Avro', ...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+You can define just the primary key and still load the value columns from the Schema registry, for example:\n+  CREATE TABLE INPUT (ID INT PRIMARY KEY) WITH (value_foramt='Avro', ...);\n+```\n+\n+### CREATE STREAM changes\n+\n+A `CREATE STREAM` statement that does not define a `KEY` column will now result in a stream with no\n+data being read from the Kafka message's key.\n+\n+```sql\n+CREATE STREAM INPUT (A INT, B STRING) WITH (...);\n+-- Results in INPUT with schema: A INT, B STRING, i.e. no key column.\n+```\n+\n+Statements with a `KEY` column will continue to work as before.\n+\n+## Design\n+\n+This is mainly a syntax only change, as detailed about. \n+\n+Streams with out a key column will work just like any other stream. However, `GROUP BY`, `PARTITION BY`\n+and `JOIN`s will _always_ result in a repartition, as the grouping, partitioning or joining expression\n+can never be the key column.\n+\n+## Test plan\n+\n+Ensure coverage of key-less streams in QTT tests, especially for `GROUP BY`, `PARTITION BY`, and `JOIN`s.\n+\n+## LOEs and Delivery Milestones\n+\n+Single deliverable, with low loe (prototype already working).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e26b0ce8449e8e8ba30d1e4b80136e9c0152149"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzOTY5MQ==", "bodyText": "would be nice to explicitly state in this KLIP what the binary value of the key will be in subsequent queries. e.g.\nCREATE STREAM foo (col VARCHAR) WITH (...); --- there is no declared key, but there is a key in the kafka message\nCREATE STREAM bar AS SELECT * FROM foo; --- what is in the binary key of the kafka message?\nIf I understand correctly, the key will still be the same as the key from foo, not null", "url": "https://github.com/confluentinc/ksql/pull/5530#discussion_r434239691", "createdAt": "2020-06-03T00:06:43Z", "author": {"login": "agavra"}, "path": "design-proposals/kliup-29-explicit-keys.md", "diffHunk": "@@ -0,0 +1,154 @@\n+# KLIP-29: Explicit Keys\n+\n+**Author**: @big-andy-coates | \n+**Release Target**: 0.10.0 | \n+**Status**: In Discussion | \n+**Discussion**: [Github PR](https://github.com/confluentinc/ksql/pull/5530)\n+\n+**tl;dr:** Up until now ksqlDB has added an implicit `ROWKEY STRING (PRIMARY) KEY` to a `CREATE TABLE`\n+or `CREATE STREAM` statement that does not itself explicitly define a key column. This KLIP proposes\n+removing this implicit column creation and instead requiring tables to define their PRIMARY KEY, and\n+changing `CREATE STREAM` to create a stream without a KEY column, should not be defined.\n+\n+## Motivation and background\n+\n+Implicitly adding columns is confusing for users. They are left wondering where did this column come from? \n+For example:\n+\n+```\n+ksal> CREATE STREAM S (ID INT, NAME STRING) WITH (...);\n+Stream S Created.\n+ksal> CREATE STREAM S2 AS SELECT ID, NAME FROM S;\n+Key missing from projection. See https://cnfl.io/2LV7ouS.\n+The query used to build `S2` must include the key column ROWKEY in its projection.\n+```\n+\n+Understandably, the user may be left wondering where this `ROWKEY` column came from and why they need to\n+add it to the projection.\n+\n+Now that ksqlDB supports more than just `STRING` key columns, it no longer makes sense to add an\n+implicit `STRING` key column by default.  Better to let the user define _if_ there is a key column, and if\n+so, what it's name and type are.\n+\n+There is no semantic need for a STREAM to have data in the key, and hence there should be no need for \n+there to be a KEY column defined.  This can also be useful when the data in the key is not in a format \n+ksqlDB can work with, e.g. an Avro, JSON or Protobuf key, or any other format.  It seems unwieldy and \n+confusing to add an implicit `STRING` key column if the actual key is empty or is not something ksqlDB \n+can read.\n+\n+Unlike STREAMs, TABLEs require a PRIMARY KEY column. Therefore, we should require the user to provide one.  \n+\n+## What is in scope\n+\n+* `CREATE TABLE` statements will require a `PRIMARY KEY` column to be defined.\n+* `CREATE STREAM` statements without a `KEY` column defined will define a stream without a key column. \n+\n+## What is not in scope\n+\n+* Everything else.\n+\n+## Value/Return\n+\n+Removal of implicitly added columns makes statements more declarative. They make it possible to describe \n+a stream with no data, or incompatible data, in the key. They make users _think_ about the name and type\n+of the PRIMARY KEY column of their tables.\n+\n+Combined, these changes make the language easier to use and richer.\n+\n+## Public APIS\n+\n+### CREATE TABLE changes\n+\n+A `CREATE TABLE` statement that does not define a `PRIMARY KEY` column will now result in an error:\n+\n+```\n+ksql> CREATE TABLE INPUT (A INT, B STRING) WITH (...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+```\n+\n+Statements with a `PRIMARY KEY` column will continue to work as before.\n+\n+Where schema inference is used, the error message will include an example of how to define a partial\n+schema to add the primary key:\n+\n+```ql\n+ksql> CREATE TABLE INPUT WITH (value_foramt='Avro', ...);\n+Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\n+You can define just the primary key and still load the value columns from the Schema registry, for example:\n+  CREATE TABLE INPUT (ID INT PRIMARY KEY) WITH (value_foramt='Avro', ...);\n+```\n+\n+### CREATE STREAM changes\n+\n+A `CREATE STREAM` statement that does not define a `KEY` column will now result in a stream with no\n+data being read from the Kafka message's key.\n+\n+```sql\n+CREATE STREAM INPUT (A INT, B STRING) WITH (...);\n+-- Results in INPUT with schema: A INT, B STRING, i.e. no key column.\n+```\n+\n+Statements with a `KEY` column will continue to work as before.\n+\n+## Design", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e26b0ce8449e8e8ba30d1e4b80136e9c0152149"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5262df5bfc5be0758a8ea126cf45fefbca7c09a", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/d5262df5bfc5be0758a8ea126cf45fefbca7c09a", "committedDate": "2020-06-03T00:24:02Z", "message": "chore: requested changes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4703, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}