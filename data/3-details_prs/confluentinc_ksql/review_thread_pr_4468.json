{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMTQzNzM5", "number": 4468, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzoxOTo1N1rODd3TKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDo0Mjo1MlrODeJTiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjQxMzIxOnYy", "diffSide": "RIGHT", "path": "ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzoxOTo1N1rOFmtl-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDoyMjowN1rOFmuttA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzNzIxMA==", "bodyText": "since this is applied to both active and standbys, should we name this differently?  ksql.query.pull.max.tolerable.offset.lag ?", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376137210", "createdAt": "2020-02-06T23:19:57Z", "author": {"login": "vinothchandar"}, "path": "ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -182,6 +182,13 @@\n           + \"to ksql.streams.num.standby.replicas >= 1\";\n   public static final boolean KSQL_QUERY_PULL_ENABLE_STANDBY_READS_DEFAULT = false;\n \n+  public static final String KSQL_QUERY_PULL_STANDBY_READS_MAX_OFFSET_LAG_CONFIG =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1NTU3Mg==", "bodyText": "Sure, changed to ksql.query.pull.max.allowed.offset.lag.  Tolerable is a bit of a funny word. :-)", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376155572", "createdAt": "2020-02-07T00:22:07Z", "author": {"login": "AlanConfluent"}, "path": "ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -182,6 +182,13 @@\n           + \"to ksql.streams.num.standby.replicas >= 1\";\n   public static final boolean KSQL_QUERY_PULL_ENABLE_STANDBY_READS_DEFAULT = false;\n \n+  public static final String KSQL_QUERY_PULL_STANDBY_READS_MAX_OFFSET_LAG_CONFIG =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzNzIxMA=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjQzNjA5OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzozMToyNFrOFmtz3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDo1ODoxNlrOFnKGYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MDc2NQ==", "bodyText": "at some point, to handle some corner cases with network partitions, we probably need to expire lag information reported. (we discussed this a while ago if you recall).. Can we file a follow up to explore that?>", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376140765", "createdAt": "2020-02-06T23:31:24Z", "author": {"login": "vinothchandar"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.execution.streams.RoutingFilter;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+/**\n+ * A RoutingFilter that filters hosts based upon changelog processing lag.\n+ */\n+public final class MaximumLagFilter implements RoutingFilter {\n+\n+  private final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost;\n+  private final RoutingOptions routingOptions;\n+  private final OptionalLong maxEndOffset;\n+\n+  private MaximumLagFilter(\n+      final RoutingOptions routingOptions,\n+      final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost,\n+      final OptionalLong maxEndOffset\n+  ) {\n+    this.lagByHost = requireNonNull(lagByHost, \"lagByHost\");\n+    this.routingOptions = requireNonNull(routingOptions, \"requireNonNull\");\n+    this.maxEndOffset = requireNonNull(maxEndOffset, \"maxEndOffset\");\n+  }\n+\n+  @Override\n+  public boolean filter(final KsqlHostInfo hostInfo) {\n+    final long allowedOffsetLag = routingOptions.getOffsetLagAllowed();\n+    if (allowedOffsetLag >= 0) {\n+      return lagByHost.getOrDefault(hostInfo, Optional.empty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1MTc4MA==", "bodyText": "LivenessFilter should prevent doing pull queries to those servers within Xms.  Also, this will prevent hosts that have been cut off for too long.  Do we really need additional expiration?\nI can do that in a followup change.  I had originally had that, but (at least given how I had originally written things) it was more complex than seemed necessary.  Given the current architecture, it's quite easy to introduce.", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376151780", "createdAt": "2020-02-07T00:08:26Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.execution.streams.RoutingFilter;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+/**\n+ * A RoutingFilter that filters hosts based upon changelog processing lag.\n+ */\n+public final class MaximumLagFilter implements RoutingFilter {\n+\n+  private final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost;\n+  private final RoutingOptions routingOptions;\n+  private final OptionalLong maxEndOffset;\n+\n+  private MaximumLagFilter(\n+      final RoutingOptions routingOptions,\n+      final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost,\n+      final OptionalLong maxEndOffset\n+  ) {\n+    this.lagByHost = requireNonNull(lagByHost, \"lagByHost\");\n+    this.routingOptions = requireNonNull(routingOptions, \"requireNonNull\");\n+    this.maxEndOffset = requireNonNull(maxEndOffset, \"maxEndOffset\");\n+  }\n+\n+  @Override\n+  public boolean filter(final KsqlHostInfo hostInfo) {\n+    final long allowedOffsetLag = routingOptions.getOffsetLagAllowed();\n+    if (allowedOffsetLag >= 0) {\n+      return lagByHost.getOrDefault(hostInfo, Optional.empty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MDc2NQ=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2NDkwMg==", "bodyText": "#4487", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376564902", "createdAt": "2020-02-07T19:24:27Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.execution.streams.RoutingFilter;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+/**\n+ * A RoutingFilter that filters hosts based upon changelog processing lag.\n+ */\n+public final class MaximumLagFilter implements RoutingFilter {\n+\n+  private final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost;\n+  private final RoutingOptions routingOptions;\n+  private final OptionalLong maxEndOffset;\n+\n+  private MaximumLagFilter(\n+      final RoutingOptions routingOptions,\n+      final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost,\n+      final OptionalLong maxEndOffset\n+  ) {\n+    this.lagByHost = requireNonNull(lagByHost, \"lagByHost\");\n+    this.routingOptions = requireNonNull(routingOptions, \"requireNonNull\");\n+    this.maxEndOffset = requireNonNull(maxEndOffset, \"maxEndOffset\");\n+  }\n+\n+  @Override\n+  public boolean filter(final KsqlHostInfo hostInfo) {\n+    final long allowedOffsetLag = routingOptions.getOffsetLagAllowed();\n+    if (allowedOffsetLag >= 0) {\n+      return lagByHost.getOrDefault(hostInfo, Optional.empty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MDc2NQ=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU5NDU5Mw==", "bodyText": "yes.. lets file a follow up issue so we don't lose track?", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376594593", "createdAt": "2020-02-07T20:35:15Z", "author": {"login": "vinothchandar"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.execution.streams.RoutingFilter;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+/**\n+ * A RoutingFilter that filters hosts based upon changelog processing lag.\n+ */\n+public final class MaximumLagFilter implements RoutingFilter {\n+\n+  private final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost;\n+  private final RoutingOptions routingOptions;\n+  private final OptionalLong maxEndOffset;\n+\n+  private MaximumLagFilter(\n+      final RoutingOptions routingOptions,\n+      final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost,\n+      final OptionalLong maxEndOffset\n+  ) {\n+    this.lagByHost = requireNonNull(lagByHost, \"lagByHost\");\n+    this.routingOptions = requireNonNull(routingOptions, \"requireNonNull\");\n+    this.maxEndOffset = requireNonNull(maxEndOffset, \"maxEndOffset\");\n+  }\n+\n+  @Override\n+  public boolean filter(final KsqlHostInfo hostInfo) {\n+    final long allowedOffsetLag = routingOptions.getOffsetLagAllowed();\n+    if (allowedOffsetLag >= 0) {\n+      return lagByHost.getOrDefault(hostInfo, Optional.empty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MDc2NQ=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYwNDI1Nw==", "bodyText": "I posted the issue above #4487", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376604257", "createdAt": "2020-02-07T20:58:16Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.execution.streams.RoutingFilter;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+/**\n+ * A RoutingFilter that filters hosts based upon changelog processing lag.\n+ */\n+public final class MaximumLagFilter implements RoutingFilter {\n+\n+  private final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost;\n+  private final RoutingOptions routingOptions;\n+  private final OptionalLong maxEndOffset;\n+\n+  private MaximumLagFilter(\n+      final RoutingOptions routingOptions,\n+      final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost,\n+      final OptionalLong maxEndOffset\n+  ) {\n+    this.lagByHost = requireNonNull(lagByHost, \"lagByHost\");\n+    this.routingOptions = requireNonNull(routingOptions, \"requireNonNull\");\n+    this.maxEndOffset = requireNonNull(maxEndOffset, \"maxEndOffset\");\n+  }\n+\n+  @Override\n+  public boolean filter(final KsqlHostInfo hostInfo) {\n+    final long allowedOffsetLag = routingOptions.getOffsetLagAllowed();\n+    if (allowedOffsetLag >= 0) {\n+      return lagByHost.getOrDefault(hostInfo, Optional.empty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MDc2NQ=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjQzODg2OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzozMjo1NFrOFmt1uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDozODoxNFrOFnJl4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MTI0Mw==", "bodyText": "optional: this is the queryId of the persistent query that materialized the table right? can we name/doc this more clearly?", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376141243", "createdAt": "2020-02-06T23:32:54Z", "author": {"login": "vinothchandar"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.execution.streams.RoutingFilter;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+/**\n+ * A RoutingFilter that filters hosts based upon changelog processing lag.\n+ */\n+public final class MaximumLagFilter implements RoutingFilter {\n+\n+  private final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost;\n+  private final RoutingOptions routingOptions;\n+  private final OptionalLong maxEndOffset;\n+\n+  private MaximumLagFilter(\n+      final RoutingOptions routingOptions,\n+      final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost,\n+      final OptionalLong maxEndOffset\n+  ) {\n+    this.lagByHost = requireNonNull(lagByHost, \"lagByHost\");\n+    this.routingOptions = requireNonNull(routingOptions, \"requireNonNull\");\n+    this.maxEndOffset = requireNonNull(maxEndOffset, \"maxEndOffset\");\n+  }\n+\n+  @Override\n+  public boolean filter(final KsqlHostInfo hostInfo) {\n+    final long allowedOffsetLag = routingOptions.getOffsetLagAllowed();\n+    if (allowedOffsetLag >= 0) {\n+      return lagByHost.getOrDefault(hostInfo, Optional.empty())\n+          .map(hostLag -> {\n+            // Compute the lag from the maximum end offset we've seen\n+            final long endOffset = maxEndOffset.orElse(hostLag.getEndOffsetPosition());\n+            final long offsetLag = Math.max(endOffset - hostLag.getCurrentOffsetPosition(), 0);\n+            return offsetLag <= allowedOffsetLag;\n+          })\n+          // If we don't have lag info, we'll be conservative and include the host\n+          .orElse(true);\n+    }\n+    return true;\n+  }\n+\n+  /**\n+   * Creates a FreshnessFilter\n+   * @param lagReportingAgent The optional lag reporting agent.\n+   * @param routingOptions The routing options\n+   * @param hosts The set of all hosts that have the store, including actives and standbys\n+   * @param applicationQueryId The application query id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1MjMwMQ==", "bodyText": "I took this name from elsewhere, I believe.  I'll make the documentation clearer.  Feel free to give me another name if you have one.", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376152301", "createdAt": "2020-02-07T00:10:25Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.execution.streams.RoutingFilter;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+/**\n+ * A RoutingFilter that filters hosts based upon changelog processing lag.\n+ */\n+public final class MaximumLagFilter implements RoutingFilter {\n+\n+  private final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost;\n+  private final RoutingOptions routingOptions;\n+  private final OptionalLong maxEndOffset;\n+\n+  private MaximumLagFilter(\n+      final RoutingOptions routingOptions,\n+      final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost,\n+      final OptionalLong maxEndOffset\n+  ) {\n+    this.lagByHost = requireNonNull(lagByHost, \"lagByHost\");\n+    this.routingOptions = requireNonNull(routingOptions, \"requireNonNull\");\n+    this.maxEndOffset = requireNonNull(maxEndOffset, \"maxEndOffset\");\n+  }\n+\n+  @Override\n+  public boolean filter(final KsqlHostInfo hostInfo) {\n+    final long allowedOffsetLag = routingOptions.getOffsetLagAllowed();\n+    if (allowedOffsetLag >= 0) {\n+      return lagByHost.getOrDefault(hostInfo, Optional.empty())\n+          .map(hostLag -> {\n+            // Compute the lag from the maximum end offset we've seen\n+            final long endOffset = maxEndOffset.orElse(hostLag.getEndOffsetPosition());\n+            final long offsetLag = Math.max(endOffset - hostLag.getCurrentOffsetPosition(), 0);\n+            return offsetLag <= allowedOffsetLag;\n+          })\n+          // If we don't have lag info, we'll be conservative and include the host\n+          .orElse(true);\n+    }\n+    return true;\n+  }\n+\n+  /**\n+   * Creates a FreshnessFilter\n+   * @param lagReportingAgent The optional lag reporting agent.\n+   * @param routingOptions The routing options\n+   * @param hosts The set of all hosts that have the store, including actives and standbys\n+   * @param applicationQueryId The application query id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MTI0Mw=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU5NTkzNw==", "bodyText": "tableQueryId ? I am not sure if thats an improvement. In applicationQueryId , application refers to a KafkaStreams application, which we understand.. but to anyone else looking at it with just ksql lens, applicationQueryId seems to indicate something global for that ksql server. I ll leave it you. :) Just wanted to clarify what triggered my comment", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376595937", "createdAt": "2020-02-07T20:38:14Z", "author": {"login": "vinothchandar"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.execution.streams.RoutingFilter;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+/**\n+ * A RoutingFilter that filters hosts based upon changelog processing lag.\n+ */\n+public final class MaximumLagFilter implements RoutingFilter {\n+\n+  private final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost;\n+  private final RoutingOptions routingOptions;\n+  private final OptionalLong maxEndOffset;\n+\n+  private MaximumLagFilter(\n+      final RoutingOptions routingOptions,\n+      final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost,\n+      final OptionalLong maxEndOffset\n+  ) {\n+    this.lagByHost = requireNonNull(lagByHost, \"lagByHost\");\n+    this.routingOptions = requireNonNull(routingOptions, \"requireNonNull\");\n+    this.maxEndOffset = requireNonNull(maxEndOffset, \"maxEndOffset\");\n+  }\n+\n+  @Override\n+  public boolean filter(final KsqlHostInfo hostInfo) {\n+    final long allowedOffsetLag = routingOptions.getOffsetLagAllowed();\n+    if (allowedOffsetLag >= 0) {\n+      return lagByHost.getOrDefault(hostInfo, Optional.empty())\n+          .map(hostLag -> {\n+            // Compute the lag from the maximum end offset we've seen\n+            final long endOffset = maxEndOffset.orElse(hostLag.getEndOffsetPosition());\n+            final long offsetLag = Math.max(endOffset - hostLag.getCurrentOffsetPosition(), 0);\n+            return offsetLag <= allowedOffsetLag;\n+          })\n+          // If we don't have lag info, we'll be conservative and include the host\n+          .orElse(true);\n+    }\n+    return true;\n+  }\n+\n+  /**\n+   * Creates a FreshnessFilter\n+   * @param lagReportingAgent The optional lag reporting agent.\n+   * @param routingOptions The routing options\n+   * @param hosts The set of all hosts that have the store, including actives and standbys\n+   * @param applicationQueryId The application query id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0MTI0Mw=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjQ4MTQ5OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzo1NTowMFrOFmuP3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDozODo1N1rOFnJnPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0NzkzNQ==", "bodyText": "Confirming my understanding: I see that LagInfoEntity just holds data for a given store partition and this lagByHost map is a filtered version of the data we track in the lag agent, getHostsPartitionLagInfo() effectively filter the data for the store/partition we are interested in?\nnit: rename to lagInfoByHost ?", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376147935", "createdAt": "2020-02-06T23:55:00Z", "author": {"login": "vinothchandar"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.execution.streams.RoutingFilter;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+/**\n+ * A RoutingFilter that filters hosts based upon changelog processing lag.\n+ */\n+public final class MaximumLagFilter implements RoutingFilter {\n+\n+  private final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost;\n+  private final RoutingOptions routingOptions;\n+  private final OptionalLong maxEndOffset;\n+\n+  private MaximumLagFilter(\n+      final RoutingOptions routingOptions,\n+      final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost,\n+      final OptionalLong maxEndOffset\n+  ) {\n+    this.lagByHost = requireNonNull(lagByHost, \"lagByHost\");\n+    this.routingOptions = requireNonNull(routingOptions, \"requireNonNull\");\n+    this.maxEndOffset = requireNonNull(maxEndOffset, \"maxEndOffset\");\n+  }\n+\n+  @Override\n+  public boolean filter(final KsqlHostInfo hostInfo) {\n+    final long allowedOffsetLag = routingOptions.getOffsetLagAllowed();\n+    if (allowedOffsetLag >= 0) {\n+      return lagByHost.getOrDefault(hostInfo, Optional.empty())\n+          .map(hostLag -> {\n+            // Compute the lag from the maximum end offset we've seen\n+            final long endOffset = maxEndOffset.orElse(hostLag.getEndOffsetPosition());\n+            final long offsetLag = Math.max(endOffset - hostLag.getCurrentOffsetPosition(), 0);\n+            return offsetLag <= allowedOffsetLag;\n+          })\n+          // If we don't have lag info, we'll be conservative and include the host\n+          .orElse(true);\n+    }\n+    return true;\n+  }\n+\n+  /**\n+   * Creates a FreshnessFilter\n+   * @param lagReportingAgent The optional lag reporting agent.\n+   * @param routingOptions The routing options\n+   * @param hosts The set of all hosts that have the store, including actives and standbys\n+   * @param applicationQueryId The application query id\n+   * @param storeName The state store name\n+   * @param partition The partition of the topic\n+   * @return a new FreshnessFilter, unless lag reporting is disabled.\n+   */\n+  public static Optional<MaximumLagFilter> create(\n+      final Optional<LagReportingAgent> lagReportingAgent,\n+      final RoutingOptions routingOptions,\n+      final List<KsqlHostInfo> hosts,\n+      final String applicationQueryId,\n+      final String storeName,\n+      final int partition\n+  ) {\n+    if (!lagReportingAgent.isPresent()) {\n+      return Optional.empty();\n+    }\n+    final QueryStateStoreId queryStateStoreId = QueryStateStoreId.of(applicationQueryId, storeName);\n+    final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost = hosts.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1MzI5NA==", "bodyText": "That's all right.\nSure, I'll change the name.  I think getHostsPartitionLagInfo reflected previous versions of the method that are gone, so I like your name better.\n\"by host\" implies it will return a map of all hosts, so maybe lagInfoForHost?", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376153294", "createdAt": "2020-02-07T00:13:53Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.execution.streams.RoutingFilter;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+/**\n+ * A RoutingFilter that filters hosts based upon changelog processing lag.\n+ */\n+public final class MaximumLagFilter implements RoutingFilter {\n+\n+  private final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost;\n+  private final RoutingOptions routingOptions;\n+  private final OptionalLong maxEndOffset;\n+\n+  private MaximumLagFilter(\n+      final RoutingOptions routingOptions,\n+      final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost,\n+      final OptionalLong maxEndOffset\n+  ) {\n+    this.lagByHost = requireNonNull(lagByHost, \"lagByHost\");\n+    this.routingOptions = requireNonNull(routingOptions, \"requireNonNull\");\n+    this.maxEndOffset = requireNonNull(maxEndOffset, \"maxEndOffset\");\n+  }\n+\n+  @Override\n+  public boolean filter(final KsqlHostInfo hostInfo) {\n+    final long allowedOffsetLag = routingOptions.getOffsetLagAllowed();\n+    if (allowedOffsetLag >= 0) {\n+      return lagByHost.getOrDefault(hostInfo, Optional.empty())\n+          .map(hostLag -> {\n+            // Compute the lag from the maximum end offset we've seen\n+            final long endOffset = maxEndOffset.orElse(hostLag.getEndOffsetPosition());\n+            final long offsetLag = Math.max(endOffset - hostLag.getCurrentOffsetPosition(), 0);\n+            return offsetLag <= allowedOffsetLag;\n+          })\n+          // If we don't have lag info, we'll be conservative and include the host\n+          .orElse(true);\n+    }\n+    return true;\n+  }\n+\n+  /**\n+   * Creates a FreshnessFilter\n+   * @param lagReportingAgent The optional lag reporting agent.\n+   * @param routingOptions The routing options\n+   * @param hosts The set of all hosts that have the store, including actives and standbys\n+   * @param applicationQueryId The application query id\n+   * @param storeName The state store name\n+   * @param partition The partition of the topic\n+   * @return a new FreshnessFilter, unless lag reporting is disabled.\n+   */\n+  public static Optional<MaximumLagFilter> create(\n+      final Optional<LagReportingAgent> lagReportingAgent,\n+      final RoutingOptions routingOptions,\n+      final List<KsqlHostInfo> hosts,\n+      final String applicationQueryId,\n+      final String storeName,\n+      final int partition\n+  ) {\n+    if (!lagReportingAgent.isPresent()) {\n+      return Optional.empty();\n+    }\n+    final QueryStateStoreId queryStateStoreId = QueryStateStoreId.of(applicationQueryId, storeName);\n+    final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost = hosts.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0NzkzNQ=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU5NjI4NQ==", "bodyText": "lagInfoForHost +1 as well", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376596285", "createdAt": "2020-02-07T20:38:57Z", "author": {"login": "vinothchandar"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.execution.streams.RoutingFilter;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+/**\n+ * A RoutingFilter that filters hosts based upon changelog processing lag.\n+ */\n+public final class MaximumLagFilter implements RoutingFilter {\n+\n+  private final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost;\n+  private final RoutingOptions routingOptions;\n+  private final OptionalLong maxEndOffset;\n+\n+  private MaximumLagFilter(\n+      final RoutingOptions routingOptions,\n+      final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost,\n+      final OptionalLong maxEndOffset\n+  ) {\n+    this.lagByHost = requireNonNull(lagByHost, \"lagByHost\");\n+    this.routingOptions = requireNonNull(routingOptions, \"requireNonNull\");\n+    this.maxEndOffset = requireNonNull(maxEndOffset, \"maxEndOffset\");\n+  }\n+\n+  @Override\n+  public boolean filter(final KsqlHostInfo hostInfo) {\n+    final long allowedOffsetLag = routingOptions.getOffsetLagAllowed();\n+    if (allowedOffsetLag >= 0) {\n+      return lagByHost.getOrDefault(hostInfo, Optional.empty())\n+          .map(hostLag -> {\n+            // Compute the lag from the maximum end offset we've seen\n+            final long endOffset = maxEndOffset.orElse(hostLag.getEndOffsetPosition());\n+            final long offsetLag = Math.max(endOffset - hostLag.getCurrentOffsetPosition(), 0);\n+            return offsetLag <= allowedOffsetLag;\n+          })\n+          // If we don't have lag info, we'll be conservative and include the host\n+          .orElse(true);\n+    }\n+    return true;\n+  }\n+\n+  /**\n+   * Creates a FreshnessFilter\n+   * @param lagReportingAgent The optional lag reporting agent.\n+   * @param routingOptions The routing options\n+   * @param hosts The set of all hosts that have the store, including actives and standbys\n+   * @param applicationQueryId The application query id\n+   * @param storeName The state store name\n+   * @param partition The partition of the topic\n+   * @return a new FreshnessFilter, unless lag reporting is disabled.\n+   */\n+  public static Optional<MaximumLagFilter> create(\n+      final Optional<LagReportingAgent> lagReportingAgent,\n+      final RoutingOptions routingOptions,\n+      final List<KsqlHostInfo> hosts,\n+      final String applicationQueryId,\n+      final String storeName,\n+      final int partition\n+  ) {\n+    if (!lagReportingAgent.isPresent()) {\n+      return Optional.empty();\n+    }\n+    final QueryStateStoreId queryStateStoreId = QueryStateStoreId.of(applicationQueryId, storeName);\n+    final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost = hosts.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0NzkzNQ=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjQ4NDcwOnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzo1Njo0NFrOFmuR3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDoyODo0M1rOFmuz9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0ODQ0NQ==", "bodyText": "getHostsPartitionLagInfo() also checks for live hosts. given how we are wiring the filters now, do we still need to special handling  below\nif (!aliveHosts.contains(host)) {\n      return Optional.empty();\n    }", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376148445", "createdAt": "2020-02-06T23:56:44Z", "author": {"login": "vinothchandar"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.execution.streams.RoutingFilter;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+/**\n+ * A RoutingFilter that filters hosts based upon changelog processing lag.\n+ */\n+public final class MaximumLagFilter implements RoutingFilter {\n+\n+  private final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost;\n+  private final RoutingOptions routingOptions;\n+  private final OptionalLong maxEndOffset;\n+\n+  private MaximumLagFilter(\n+      final RoutingOptions routingOptions,\n+      final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost,\n+      final OptionalLong maxEndOffset\n+  ) {\n+    this.lagByHost = requireNonNull(lagByHost, \"lagByHost\");\n+    this.routingOptions = requireNonNull(routingOptions, \"requireNonNull\");\n+    this.maxEndOffset = requireNonNull(maxEndOffset, \"maxEndOffset\");\n+  }\n+\n+  @Override\n+  public boolean filter(final KsqlHostInfo hostInfo) {\n+    final long allowedOffsetLag = routingOptions.getOffsetLagAllowed();\n+    if (allowedOffsetLag >= 0) {\n+      return lagByHost.getOrDefault(hostInfo, Optional.empty())\n+          .map(hostLag -> {\n+            // Compute the lag from the maximum end offset we've seen\n+            final long endOffset = maxEndOffset.orElse(hostLag.getEndOffsetPosition());\n+            final long offsetLag = Math.max(endOffset - hostLag.getCurrentOffsetPosition(), 0);\n+            return offsetLag <= allowedOffsetLag;\n+          })\n+          // If we don't have lag info, we'll be conservative and include the host\n+          .orElse(true);\n+    }\n+    return true;\n+  }\n+\n+  /**\n+   * Creates a FreshnessFilter\n+   * @param lagReportingAgent The optional lag reporting agent.\n+   * @param routingOptions The routing options\n+   * @param hosts The set of all hosts that have the store, including actives and standbys\n+   * @param applicationQueryId The application query id\n+   * @param storeName The state store name\n+   * @param partition The partition of the topic\n+   * @return a new FreshnessFilter, unless lag reporting is disabled.\n+   */\n+  public static Optional<MaximumLagFilter> create(\n+      final Optional<LagReportingAgent> lagReportingAgent,\n+      final RoutingOptions routingOptions,\n+      final List<KsqlHostInfo> hosts,\n+      final String applicationQueryId,\n+      final String storeName,\n+      final int partition\n+  ) {\n+    if (!lagReportingAgent.isPresent()) {\n+      return Optional.empty();\n+    }\n+    final QueryStateStoreId queryStateStoreId = QueryStateStoreId.of(applicationQueryId, storeName);\n+    final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost = hosts.stream()\n+        .collect(ImmutableMap.toImmutableMap(\n+            Function.identity(),\n+            host -> lagReportingAgent.get().getHostsPartitionLagInfo(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1NzE3Mw==", "bodyText": "No, we don't.  Removed.", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376157173", "createdAt": "2020-02-07T00:28:43Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.execution.streams.RoutingFilter;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+/**\n+ * A RoutingFilter that filters hosts based upon changelog processing lag.\n+ */\n+public final class MaximumLagFilter implements RoutingFilter {\n+\n+  private final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost;\n+  private final RoutingOptions routingOptions;\n+  private final OptionalLong maxEndOffset;\n+\n+  private MaximumLagFilter(\n+      final RoutingOptions routingOptions,\n+      final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost,\n+      final OptionalLong maxEndOffset\n+  ) {\n+    this.lagByHost = requireNonNull(lagByHost, \"lagByHost\");\n+    this.routingOptions = requireNonNull(routingOptions, \"requireNonNull\");\n+    this.maxEndOffset = requireNonNull(maxEndOffset, \"maxEndOffset\");\n+  }\n+\n+  @Override\n+  public boolean filter(final KsqlHostInfo hostInfo) {\n+    final long allowedOffsetLag = routingOptions.getOffsetLagAllowed();\n+    if (allowedOffsetLag >= 0) {\n+      return lagByHost.getOrDefault(hostInfo, Optional.empty())\n+          .map(hostLag -> {\n+            // Compute the lag from the maximum end offset we've seen\n+            final long endOffset = maxEndOffset.orElse(hostLag.getEndOffsetPosition());\n+            final long offsetLag = Math.max(endOffset - hostLag.getCurrentOffsetPosition(), 0);\n+            return offsetLag <= allowedOffsetLag;\n+          })\n+          // If we don't have lag info, we'll be conservative and include the host\n+          .orElse(true);\n+    }\n+    return true;\n+  }\n+\n+  /**\n+   * Creates a FreshnessFilter\n+   * @param lagReportingAgent The optional lag reporting agent.\n+   * @param routingOptions The routing options\n+   * @param hosts The set of all hosts that have the store, including actives and standbys\n+   * @param applicationQueryId The application query id\n+   * @param storeName The state store name\n+   * @param partition The partition of the topic\n+   * @return a new FreshnessFilter, unless lag reporting is disabled.\n+   */\n+  public static Optional<MaximumLagFilter> create(\n+      final Optional<LagReportingAgent> lagReportingAgent,\n+      final RoutingOptions routingOptions,\n+      final List<KsqlHostInfo> hosts,\n+      final String applicationQueryId,\n+      final String storeName,\n+      final int partition\n+  ) {\n+    if (!lagReportingAgent.isPresent()) {\n+      return Optional.empty();\n+    }\n+    final QueryStateStoreId queryStateStoreId = QueryStateStoreId.of(applicationQueryId, storeName);\n+    final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost = hosts.stream()\n+        .collect(ImmutableMap.toImmutableMap(\n+            Function.identity(),\n+            host -> lagReportingAgent.get().getHostsPartitionLagInfo(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0ODQ0NQ=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjQ4OTM1OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMzo1OToyMVrOFmuUqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDo0OTo0OVrOFmvKbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0OTE2MA==", "bodyText": "I am concerned about this cloning done on every call. does this create a new copy of the config map each call? Should we better way to build a composite objects out of these two configs?", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376149160", "createdAt": "2020-02-06T23:59:21Z", "author": {"login": "vinothchandar"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -213,11 +215,16 @@ private TableRowsEntity handlePullQuery(\n       final ServiceContext serviceContext,\n       final PullQueryContext pullQueryContext\n   ) {\n+    final KsqlConfig ksqlConfigWithOverrides = statement.getConfig()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MjkyNA==", "bodyText": "Ok, removed this.  Now I just do the simple check for it in overrides myself.", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376162924", "createdAt": "2020-02-07T00:49:49Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -213,11 +215,16 @@ private TableRowsEntity handlePullQuery(\n       final ServiceContext serviceContext,\n       final PullQueryContext pullQueryContext\n   ) {\n+    final KsqlConfig ksqlConfigWithOverrides = statement.getConfig()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0OTE2MA=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjQ5MDc0OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDowMDowMFrOFmuVeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDo1NDozMFrOFmvPkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0OTM3MA==", "bodyText": "add a note in the configs doc, that this can be overridden per query?", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376149370", "createdAt": "2020-02-07T00:00:00Z", "author": {"login": "vinothchandar"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -957,4 +967,19 @@ private ColumnReferenceRewriter() {\n       return Optional.of(new UnqualifiedColumnReferenceExp(node.getReference()));\n     }\n   }\n+\n+  private static final class ConfigRoutingOptions implements RoutingOptions {\n+\n+    private final KsqlConfig ksqlConfig;\n+\n+    ConfigRoutingOptions(final KsqlConfig ksqlConfig) {\n+      this.ksqlConfig = ksqlConfig;\n+    }\n+\n+    @Override\n+    public long getOffsetLagAllowed() {\n+      return ksqlConfig.getLong(\n+          KsqlConfig.KSQL_QUERY_PULL_STANDBY_READS_MAX_OFFSET_LAG_CONFIG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2NDI0Mw==", "bodyText": "Added.", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376164243", "createdAt": "2020-02-07T00:54:30Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -957,4 +967,19 @@ private ColumnReferenceRewriter() {\n       return Optional.of(new UnqualifiedColumnReferenceExp(node.getReference()));\n     }\n   }\n+\n+  private static final class ConfigRoutingOptions implements RoutingOptions {\n+\n+    private final KsqlConfig ksqlConfig;\n+\n+    ConfigRoutingOptions(final KsqlConfig ksqlConfig) {\n+      this.ksqlConfig = ksqlConfig;\n+    }\n+\n+    @Override\n+    public long getOffsetLagAllowed() {\n+      return ksqlConfig.getLong(\n+          KsqlConfig.KSQL_QUERY_PULL_STANDBY_READS_MAX_OFFSET_LAG_CONFIG);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0OTM3MA=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjQ5MTMwOnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDowMDoxOFrOFmuVxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoxMjoyM1rOFnFsQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0OTQ0Ng==", "bodyText": "for my understanding, if standby reads are disabled why do we bother adding the other filters?", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376149446", "createdAt": "2020-02-07T00:00:18Z", "author": {"login": "agavra"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -740,16 +742,21 @@ static KsqlRestApplication buildApplication(\n     return Optional.empty();\n   }\n \n-  private static RoutingFilters initializeRoutingFilters(\n+  private static RoutingFilterFactory initializeRoutingFilterFactory(\n       final KsqlConfig ksqlConfig,\n-      final Optional<HeartbeatAgent> heartbeatAgent) {\n-    final ImmutableList.Builder<RoutingFilter> filterBuilder = ImmutableList.builder();\n-    if (!ksqlConfig.getBoolean(KsqlConfig.KSQL_QUERY_PULL_ENABLE_STANDBY_READS)) {\n-      filterBuilder.add(new ActiveHostFilter());\n-    }\n-    filterBuilder.add(new LivenessFilter(heartbeatAgent));\n-    final RoutingFilters routingFilters = new RoutingFilters(filterBuilder.build());\n-    return routingFilters;\n+      final Optional<HeartbeatAgent> heartbeatAgent,\n+      final Optional<LagReportingAgent> lagReportingAgent) {\n+    return (routingOptions, hosts, active, applicationQueryId, storeName, partition) -> {\n+      final ImmutableList.Builder<RoutingFilter> filterBuilder = ImmutableList.builder();\n+      if (!ksqlConfig.getBoolean(KsqlConfig.KSQL_QUERY_PULL_ENABLE_STANDBY_READS)) {\n+        filterBuilder.add(new ActiveHostFilter(active));\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2ODcyNA==", "bodyText": "You could argue that there's value in allowing for these filters, even if standby reads are disabled. They would allow for failing the request immediately due to an active failing the LivenessFilter (as opposed to attempting the request anyway) or if a rebalance occurs, the active could be very behind and fail the MaximumLagFilter because even the active is very stale.  Of course these only happen if you enable heartbeats and lag reporting.  Otherwise they're noops.\nBut you're right that the primary use is to read from standbys.  If you don't think there's value in the above, I'll put them in an else clause.", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376168724", "createdAt": "2020-02-07T01:11:44Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -740,16 +742,21 @@ static KsqlRestApplication buildApplication(\n     return Optional.empty();\n   }\n \n-  private static RoutingFilters initializeRoutingFilters(\n+  private static RoutingFilterFactory initializeRoutingFilterFactory(\n       final KsqlConfig ksqlConfig,\n-      final Optional<HeartbeatAgent> heartbeatAgent) {\n-    final ImmutableList.Builder<RoutingFilter> filterBuilder = ImmutableList.builder();\n-    if (!ksqlConfig.getBoolean(KsqlConfig.KSQL_QUERY_PULL_ENABLE_STANDBY_READS)) {\n-      filterBuilder.add(new ActiveHostFilter());\n-    }\n-    filterBuilder.add(new LivenessFilter(heartbeatAgent));\n-    final RoutingFilters routingFilters = new RoutingFilters(filterBuilder.build());\n-    return routingFilters;\n+      final Optional<HeartbeatAgent> heartbeatAgent,\n+      final Optional<LagReportingAgent> lagReportingAgent) {\n+    return (routingOptions, hosts, active, applicationQueryId, storeName, partition) -> {\n+      final ImmutableList.Builder<RoutingFilter> filterBuilder = ImmutableList.builder();\n+      if (!ksqlConfig.getBoolean(KsqlConfig.KSQL_QUERY_PULL_ENABLE_STANDBY_READS)) {\n+        filterBuilder.add(new ActiveHostFilter(active));\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0OTQ0Ng=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE4MTk4NQ==", "bodyText": "We should have the liveness filter enabled regardless..  for the same reason you cite.\n\nThey would allow for failing the request immediately due to an active failing the LivenessFilter\n\nRepeatedly trying to open a tcp socket in a fast loop will kill latency. and also server CPU.\nthe ActiveHostFilter can be turned off ofc if standbys are not enabled.", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376181985", "createdAt": "2020-02-07T02:07:30Z", "author": {"login": "vinothchandar"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -740,16 +742,21 @@ static KsqlRestApplication buildApplication(\n     return Optional.empty();\n   }\n \n-  private static RoutingFilters initializeRoutingFilters(\n+  private static RoutingFilterFactory initializeRoutingFilterFactory(\n       final KsqlConfig ksqlConfig,\n-      final Optional<HeartbeatAgent> heartbeatAgent) {\n-    final ImmutableList.Builder<RoutingFilter> filterBuilder = ImmutableList.builder();\n-    if (!ksqlConfig.getBoolean(KsqlConfig.KSQL_QUERY_PULL_ENABLE_STANDBY_READS)) {\n-      filterBuilder.add(new ActiveHostFilter());\n-    }\n-    filterBuilder.add(new LivenessFilter(heartbeatAgent));\n-    final RoutingFilters routingFilters = new RoutingFilters(filterBuilder.build());\n-    return routingFilters;\n+      final Optional<HeartbeatAgent> heartbeatAgent,\n+      final Optional<LagReportingAgent> lagReportingAgent) {\n+    return (routingOptions, hosts, active, applicationQueryId, storeName, partition) -> {\n+      final ImmutableList.Builder<RoutingFilter> filterBuilder = ImmutableList.builder();\n+      if (!ksqlConfig.getBoolean(KsqlConfig.KSQL_QUERY_PULL_ENABLE_STANDBY_READS)) {\n+        filterBuilder.add(new ActiveHostFilter(active));\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0OTQ0Ng=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwMTI0NA==", "bodyText": "sounds good :)", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376501244", "createdAt": "2020-02-07T17:01:07Z", "author": {"login": "agavra"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -740,16 +742,21 @@ static KsqlRestApplication buildApplication(\n     return Optional.empty();\n   }\n \n-  private static RoutingFilters initializeRoutingFilters(\n+  private static RoutingFilterFactory initializeRoutingFilterFactory(\n       final KsqlConfig ksqlConfig,\n-      final Optional<HeartbeatAgent> heartbeatAgent) {\n-    final ImmutableList.Builder<RoutingFilter> filterBuilder = ImmutableList.builder();\n-    if (!ksqlConfig.getBoolean(KsqlConfig.KSQL_QUERY_PULL_ENABLE_STANDBY_READS)) {\n-      filterBuilder.add(new ActiveHostFilter());\n-    }\n-    filterBuilder.add(new LivenessFilter(heartbeatAgent));\n-    final RoutingFilters routingFilters = new RoutingFilters(filterBuilder.build());\n-    return routingFilters;\n+      final Optional<HeartbeatAgent> heartbeatAgent,\n+      final Optional<LagReportingAgent> lagReportingAgent) {\n+    return (routingOptions, hosts, active, applicationQueryId, storeName, partition) -> {\n+      final ImmutableList.Builder<RoutingFilter> filterBuilder = ImmutableList.builder();\n+      if (!ksqlConfig.getBoolean(KsqlConfig.KSQL_QUERY_PULL_ENABLE_STANDBY_READS)) {\n+        filterBuilder.add(new ActiveHostFilter(active));\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0OTQ0Ng=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzMjAzMg==", "bodyText": "@vinothchandar Not sure what you mean by turning off the ActiveHostFilter. We need that to keep only the active (in the list of hosts to try) when routing to standbys is not enabled.", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376532032", "createdAt": "2020-02-07T18:12:23Z", "author": {"login": "vpapavas"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -740,16 +742,21 @@ static KsqlRestApplication buildApplication(\n     return Optional.empty();\n   }\n \n-  private static RoutingFilters initializeRoutingFilters(\n+  private static RoutingFilterFactory initializeRoutingFilterFactory(\n       final KsqlConfig ksqlConfig,\n-      final Optional<HeartbeatAgent> heartbeatAgent) {\n-    final ImmutableList.Builder<RoutingFilter> filterBuilder = ImmutableList.builder();\n-    if (!ksqlConfig.getBoolean(KsqlConfig.KSQL_QUERY_PULL_ENABLE_STANDBY_READS)) {\n-      filterBuilder.add(new ActiveHostFilter());\n-    }\n-    filterBuilder.add(new LivenessFilter(heartbeatAgent));\n-    final RoutingFilters routingFilters = new RoutingFilters(filterBuilder.build());\n-    return routingFilters;\n+      final Optional<HeartbeatAgent> heartbeatAgent,\n+      final Optional<LagReportingAgent> lagReportingAgent) {\n+    return (routingOptions, hosts, active, applicationQueryId, storeName, partition) -> {\n+      final ImmutableList.Builder<RoutingFilter> filterBuilder = ImmutableList.builder();\n+      if (!ksqlConfig.getBoolean(KsqlConfig.KSQL_QUERY_PULL_ENABLE_STANDBY_READS)) {\n+        filterBuilder.add(new ActiveHostFilter(active));\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE0OTQ0Ng=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjQ5Njk3OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDowMzoxMlrOFmuZNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMTozMjowOFrOFmv0ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1MDMyNg==", "bodyText": "should we allow values less than 0? feels like a misconfiguration", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376150326", "createdAt": "2020-02-07T00:03:12Z", "author": {"login": "agavra"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.execution.streams.RoutingFilter;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+/**\n+ * A RoutingFilter that filters hosts based upon changelog processing lag.\n+ */\n+public final class MaximumLagFilter implements RoutingFilter {\n+\n+  private final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost;\n+  private final RoutingOptions routingOptions;\n+  private final OptionalLong maxEndOffset;\n+\n+  private MaximumLagFilter(\n+      final RoutingOptions routingOptions,\n+      final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost,\n+      final OptionalLong maxEndOffset\n+  ) {\n+    this.lagByHost = requireNonNull(lagByHost, \"lagByHost\");\n+    this.routingOptions = requireNonNull(routingOptions, \"requireNonNull\");\n+    this.maxEndOffset = requireNonNull(maxEndOffset, \"maxEndOffset\");\n+  }\n+\n+  @Override\n+  public boolean filter(final KsqlHostInfo hostInfo) {\n+    final long allowedOffsetLag = routingOptions.getOffsetLagAllowed();\n+    if (allowedOffsetLag >= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE3MzcyNg==", "bodyText": "Good point.  Added a validator for the config that ensures it's zero or positive.", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376173726", "createdAt": "2020-02-07T01:32:08Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.execution.streams.RoutingFilter;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+/**\n+ * A RoutingFilter that filters hosts based upon changelog processing lag.\n+ */\n+public final class MaximumLagFilter implements RoutingFilter {\n+\n+  private final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost;\n+  private final RoutingOptions routingOptions;\n+  private final OptionalLong maxEndOffset;\n+\n+  private MaximumLagFilter(\n+      final RoutingOptions routingOptions,\n+      final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost,\n+      final OptionalLong maxEndOffset\n+  ) {\n+    this.lagByHost = requireNonNull(lagByHost, \"lagByHost\");\n+    this.routingOptions = requireNonNull(routingOptions, \"requireNonNull\");\n+    this.maxEndOffset = requireNonNull(maxEndOffset, \"maxEndOffset\");\n+  }\n+\n+  @Override\n+  public boolean filter(final KsqlHostInfo hostInfo) {\n+    final long allowedOffsetLag = routingOptions.getOffsetLagAllowed();\n+    if (allowedOffsetLag >= 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1MDMyNg=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjQ5OTA1OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDowNDoxOFrOFmuabA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMjowNjo0OFrOFmwUXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1MDYzNg==", "bodyText": "wouldn't the conservative thing be to exclude the host? if I asked for an offset lag of 0 and I get a host that just came online (so I don't have lag info yet) I'd be surprised by this!", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376150636", "createdAt": "2020-02-07T00:04:18Z", "author": {"login": "agavra"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.execution.streams.RoutingFilter;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+/**\n+ * A RoutingFilter that filters hosts based upon changelog processing lag.\n+ */\n+public final class MaximumLagFilter implements RoutingFilter {\n+\n+  private final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost;\n+  private final RoutingOptions routingOptions;\n+  private final OptionalLong maxEndOffset;\n+\n+  private MaximumLagFilter(\n+      final RoutingOptions routingOptions,\n+      final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost,\n+      final OptionalLong maxEndOffset\n+  ) {\n+    this.lagByHost = requireNonNull(lagByHost, \"lagByHost\");\n+    this.routingOptions = requireNonNull(routingOptions, \"requireNonNull\");\n+    this.maxEndOffset = requireNonNull(maxEndOffset, \"maxEndOffset\");\n+  }\n+\n+  @Override\n+  public boolean filter(final KsqlHostInfo hostInfo) {\n+    final long allowedOffsetLag = routingOptions.getOffsetLagAllowed();\n+    if (allowedOffsetLag >= 0) {\n+      return lagByHost.getOrDefault(hostInfo, Optional.empty())\n+          .map(hostLag -> {\n+            // Compute the lag from the maximum end offset we've seen\n+            final long endOffset = maxEndOffset.orElse(hostLag.getEndOffsetPosition());\n+            final long offsetLag = Math.max(endOffset - hostLag.getCurrentOffsetPosition(), 0);\n+            return offsetLag <= allowedOffsetLag;\n+          })\n+          // If we don't have lag info, we'll be conservative and include the host\n+          .orElse(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE4MTg1Mw==", "bodyText": "Vinoth and I were chatting about this a bit.  I think falling back on either value has its drawbacks.  If we defaulted to false, then we might start failing requests because we have no lags when we could have at least made an attempt to get some value they have.  On the other hand, it might be behind and could return overly stale data and we have no way of knowing.\nI'm inclined to do false as you say.  I think the real solution is mitigating not having the data with these issues: #4471 #4472", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376181853", "createdAt": "2020-02-07T02:06:48Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.execution.streams.RoutingFilter;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+/**\n+ * A RoutingFilter that filters hosts based upon changelog processing lag.\n+ */\n+public final class MaximumLagFilter implements RoutingFilter {\n+\n+  private final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost;\n+  private final RoutingOptions routingOptions;\n+  private final OptionalLong maxEndOffset;\n+\n+  private MaximumLagFilter(\n+      final RoutingOptions routingOptions,\n+      final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost,\n+      final OptionalLong maxEndOffset\n+  ) {\n+    this.lagByHost = requireNonNull(lagByHost, \"lagByHost\");\n+    this.routingOptions = requireNonNull(routingOptions, \"requireNonNull\");\n+    this.maxEndOffset = requireNonNull(maxEndOffset, \"maxEndOffset\");\n+  }\n+\n+  @Override\n+  public boolean filter(final KsqlHostInfo hostInfo) {\n+    final long allowedOffsetLag = routingOptions.getOffsetLagAllowed();\n+    if (allowedOffsetLag >= 0) {\n+      return lagByHost.getOrDefault(hostInfo, Optional.empty())\n+          .map(hostLag -> {\n+            // Compute the lag from the maximum end offset we've seen\n+            final long endOffset = maxEndOffset.orElse(hostLag.getEndOffsetPosition());\n+            final long offsetLag = Math.max(endOffset - hostLag.getCurrentOffsetPosition(), 0);\n+            return offsetLag <= allowedOffsetLag;\n+          })\n+          // If we don't have lag info, we'll be conservative and include the host\n+          .orElse(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1MDYzNg=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjUwMDI1OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDowNTowM1rOFmubKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMjoxOToxNVrOFmwelA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1MDgyNg==", "bodyText": "can we document this parameter? it's a little unclear what it means to me (i.e. why would I prefer this over whats in the map - maxEndOffset.orElse(hostLag.getEndOffsetPosition()))\nEDIT: after reading more of the code this makes sense to me - it's the latest end offset that any of the replicas has seen (so it's independent of how caught up any of them actually are).", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376150826", "createdAt": "2020-02-07T00:05:03Z", "author": {"login": "agavra"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.execution.streams.RoutingFilter;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+/**\n+ * A RoutingFilter that filters hosts based upon changelog processing lag.\n+ */\n+public final class MaximumLagFilter implements RoutingFilter {\n+\n+  private final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost;\n+  private final RoutingOptions routingOptions;\n+  private final OptionalLong maxEndOffset;\n+\n+  private MaximumLagFilter(\n+      final RoutingOptions routingOptions,\n+      final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost,\n+      final OptionalLong maxEndOffset", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE4NDQ2OA==", "bodyText": "Yep, you got it.\nI added more documentation to this constructor as well as the filtering itself.", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376184468", "createdAt": "2020-02-07T02:19:15Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.execution.streams.RoutingFilter;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+/**\n+ * A RoutingFilter that filters hosts based upon changelog processing lag.\n+ */\n+public final class MaximumLagFilter implements RoutingFilter {\n+\n+  private final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost;\n+  private final RoutingOptions routingOptions;\n+  private final OptionalLong maxEndOffset;\n+\n+  private MaximumLagFilter(\n+      final RoutingOptions routingOptions,\n+      final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost,\n+      final OptionalLong maxEndOffset", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1MDgyNg=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjUxNjY0OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDoxNDowN1rOFmulIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMjoyMjowM1rOFmwhLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1MzM3OA==", "bodyText": "if the maxEndOffset is not present it seems like something bad happened (nobody knows where the real end of the kafka topic is)... is it safe to ignore that?", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376153378", "createdAt": "2020-02-07T00:14:07Z", "author": {"login": "agavra"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.execution.streams.RoutingFilter;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+/**\n+ * A RoutingFilter that filters hosts based upon changelog processing lag.\n+ */\n+public final class MaximumLagFilter implements RoutingFilter {\n+\n+  private final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost;\n+  private final RoutingOptions routingOptions;\n+  private final OptionalLong maxEndOffset;\n+\n+  private MaximumLagFilter(\n+      final RoutingOptions routingOptions,\n+      final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost,\n+      final OptionalLong maxEndOffset\n+  ) {\n+    this.lagByHost = requireNonNull(lagByHost, \"lagByHost\");\n+    this.routingOptions = requireNonNull(routingOptions, \"requireNonNull\");\n+    this.maxEndOffset = requireNonNull(maxEndOffset, \"maxEndOffset\");\n+  }\n+\n+  @Override\n+  public boolean filter(final KsqlHostInfo hostInfo) {\n+    final long allowedOffsetLag = routingOptions.getOffsetLagAllowed();\n+    if (allowedOffsetLag >= 0) {\n+      return lagByHost.getOrDefault(hostInfo, Optional.empty())\n+          .map(hostLag -> {\n+            // Compute the lag from the maximum end offset we've seen\n+            final long endOffset = maxEndOffset.orElse(hostLag.getEndOffsetPosition());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE4NTEzNA==", "bodyText": "It shouldn't be possible because the value should be the greatest end offset seen in the map and this code shouldn't be called at all if there are no lags reported.\nI'll assert that the value exists and get rid of the optional here.", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376185134", "createdAt": "2020-02-07T02:22:03Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.server;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.execution.streams.RoutingFilter;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.OptionalLong;\n+import java.util.function.Function;\n+\n+/**\n+ * A RoutingFilter that filters hosts based upon changelog processing lag.\n+ */\n+public final class MaximumLagFilter implements RoutingFilter {\n+\n+  private final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost;\n+  private final RoutingOptions routingOptions;\n+  private final OptionalLong maxEndOffset;\n+\n+  private MaximumLagFilter(\n+      final RoutingOptions routingOptions,\n+      final ImmutableMap<KsqlHostInfo, Optional<LagInfoEntity>> lagByHost,\n+      final OptionalLong maxEndOffset\n+  ) {\n+    this.lagByHost = requireNonNull(lagByHost, \"lagByHost\");\n+    this.routingOptions = requireNonNull(routingOptions, \"requireNonNull\");\n+    this.maxEndOffset = requireNonNull(maxEndOffset, \"maxEndOffset\");\n+  }\n+\n+  @Override\n+  public boolean filter(final KsqlHostInfo hostInfo) {\n+    final long allowedOffsetLag = routingOptions.getOffsetLagAllowed();\n+    if (allowedOffsetLag >= 0) {\n+      return lagByHost.getOrDefault(hostInfo, Optional.empty())\n+          .map(hostLag -> {\n+            // Compute the lag from the maximum end offset we've seen\n+            final long endOffset = maxEndOffset.orElse(hostLag.getEndOffsetPosition());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE1MzM3OA=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjU3MDY2OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/server/MaximumLagFilterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDo0NDo1MlrOFmvFMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMjozOTo0M1rOFmwwsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MTU4NA==", "bodyText": "13?", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376161584", "createdAt": "2020-02-07T00:44:52Z", "author": {"login": "vinothchandar"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/server/MaximumLagFilterTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package io.confluent.ksql.rest.server;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class MaximumLagFilterTest {\n+\n+  private static KsqlHostInfo HOST = new KsqlHostInfo(\"host\", 8088);\n+  private static KsqlHostInfo HOST2 = new KsqlHostInfo(\"host2\", 8088);\n+  private static List<KsqlHostInfo> HOSTS = ImmutableList.of(HOST, HOST2);\n+  private static String APPLICATION_ID = \"app_id\";\n+  private static String STATE_STORE = \"state_store\";\n+  private static int PARTITION = 3;\n+  private static LagInfoEntity LAG = new LagInfoEntity(3, 12, 9);\n+  private static LagInfoEntity LAG2 = new LagInfoEntity(7, 15, 8);\n+\n+  @Mock\n+  private LagReportingAgent lagReportingAgent;\n+  @Mock\n+  private RoutingOptions routingOptions;\n+\n+  private MaximumLagFilter filter;\n+\n+  @Before\n+  public void setUp() {\n+    when(lagReportingAgent.getHostsPartitionLagInfo(eq(HOST),\n+        eq(QueryStateStoreId.of(APPLICATION_ID, STATE_STORE)), eq(PARTITION)))\n+        .thenReturn(Optional.of(LAG));\n+    when(lagReportingAgent.getHostsPartitionLagInfo(eq(HOST2),\n+        eq(QueryStateStoreId.of(APPLICATION_ID, STATE_STORE)), eq(PARTITION)))\n+        .thenReturn(Optional.of(LAG2));\n+  }\n+\n+\n+  @Test\n+  public void filter_shouldIncludeBelowThreshold() {\n+    // The max end offset is 15, so the lag for HOST is 12", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE4OTEwNw==", "bodyText": "For HOST with LAG = new LagInfoEntity(3, 12, 9); the current offset is 3, but rather than use 12 as the end offset to compute lag, it uses 15, the end offset of LAG2, so 15 - 3 is the lag for HOST.", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376189107", "createdAt": "2020-02-07T02:39:43Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/server/MaximumLagFilterTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package io.confluent.ksql.rest.server;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class MaximumLagFilterTest {\n+\n+  private static KsqlHostInfo HOST = new KsqlHostInfo(\"host\", 8088);\n+  private static KsqlHostInfo HOST2 = new KsqlHostInfo(\"host2\", 8088);\n+  private static List<KsqlHostInfo> HOSTS = ImmutableList.of(HOST, HOST2);\n+  private static String APPLICATION_ID = \"app_id\";\n+  private static String STATE_STORE = \"state_store\";\n+  private static int PARTITION = 3;\n+  private static LagInfoEntity LAG = new LagInfoEntity(3, 12, 9);\n+  private static LagInfoEntity LAG2 = new LagInfoEntity(7, 15, 8);\n+\n+  @Mock\n+  private LagReportingAgent lagReportingAgent;\n+  @Mock\n+  private RoutingOptions routingOptions;\n+\n+  private MaximumLagFilter filter;\n+\n+  @Before\n+  public void setUp() {\n+    when(lagReportingAgent.getHostsPartitionLagInfo(eq(HOST),\n+        eq(QueryStateStoreId.of(APPLICATION_ID, STATE_STORE)), eq(PARTITION)))\n+        .thenReturn(Optional.of(LAG));\n+    when(lagReportingAgent.getHostsPartitionLagInfo(eq(HOST2),\n+        eq(QueryStateStoreId.of(APPLICATION_ID, STATE_STORE)), eq(PARTITION)))\n+        .thenReturn(Optional.of(LAG2));\n+  }\n+\n+\n+  @Test\n+  public void filter_shouldIncludeBelowThreshold() {\n+    // The max end offset is 15, so the lag for HOST is 12", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MTU4NA=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjU3MTA2OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/server/MaximumLagFilterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDo0NTowOFrOFmvFcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMjo0MDoyMFrOFmwxDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MTY0OQ==", "bodyText": "nit: HOST1?", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376161649", "createdAt": "2020-02-07T00:45:08Z", "author": {"login": "vinothchandar"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/server/MaximumLagFilterTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package io.confluent.ksql.rest.server;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class MaximumLagFilterTest {\n+\n+  private static KsqlHostInfo HOST = new KsqlHostInfo(\"host\", 8088);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE4OTE5OA==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376189198", "createdAt": "2020-02-07T02:40:20Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/server/MaximumLagFilterTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package io.confluent.ksql.rest.server;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class MaximumLagFilterTest {\n+\n+  private static KsqlHostInfo HOST = new KsqlHostInfo(\"host\", 8088);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MTY0OQ=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjU3MTU5OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/server/MaximumLagFilterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDo0NToyOFrOFmvFxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMjo0MDo0MVrOFmwxVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MTczNQ==", "bodyText": "lol :) .. bear with me. LAG1?", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376161735", "createdAt": "2020-02-07T00:45:28Z", "author": {"login": "vinothchandar"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/server/MaximumLagFilterTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package io.confluent.ksql.rest.server;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class MaximumLagFilterTest {\n+\n+  private static KsqlHostInfo HOST = new KsqlHostInfo(\"host\", 8088);\n+  private static KsqlHostInfo HOST2 = new KsqlHostInfo(\"host2\", 8088);\n+  private static List<KsqlHostInfo> HOSTS = ImmutableList.of(HOST, HOST2);\n+  private static String APPLICATION_ID = \"app_id\";\n+  private static String STATE_STORE = \"state_store\";\n+  private static int PARTITION = 3;\n+  private static LagInfoEntity LAG = new LagInfoEntity(3, 12, 9);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE4OTI2OQ==", "bodyText": "Done!", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376189269", "createdAt": "2020-02-07T02:40:41Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/server/MaximumLagFilterTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package io.confluent.ksql.rest.server;\n+\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.confluent.ksql.execution.streams.RoutingOptions;\n+import io.confluent.ksql.rest.entity.LagInfoEntity;\n+import io.confluent.ksql.rest.entity.QueryStateStoreId;\n+import io.confluent.ksql.util.KsqlHostInfo;\n+import java.util.List;\n+import java.util.Optional;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class MaximumLagFilterTest {\n+\n+  private static KsqlHostInfo HOST = new KsqlHostInfo(\"host\", 8088);\n+  private static KsqlHostInfo HOST2 = new KsqlHostInfo(\"host2\", 8088);\n+  private static List<KsqlHostInfo> HOSTS = ImmutableList.of(HOST, HOST2);\n+  private static String APPLICATION_ID = \"app_id\";\n+  private static String STATE_STORE = \"state_store\";\n+  private static int PARTITION = 3;\n+  private static LagInfoEntity LAG = new LagInfoEntity(3, 12, 9);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MTczNQ=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjU4MDE1OnYy", "diffSide": "RIGHT", "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/RoutingOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDo1MDoxN1rOFmvK5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDo1MDoxN1rOFmvK5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2MzA0Nw==", "bodyText": "This object is useful for query time options more than server options. Maybe I can change the name?\n\nresponding here.. Good with this for now. API looks much cleaner with an interface", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376163047", "createdAt": "2020-02-07T00:50:17Z", "author": {"login": "vinothchandar"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/RoutingOptions.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams;\n+\n+/**\n+ * These are options used for locating the host to retrieve data from.\n+ */\n+public interface RoutingOptions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjU4OTg2OnYy", "diffSide": "RIGHT", "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/materialization/ks/KsLocator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMDo1NToyMVrOFmvQiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwMjo0Mzo1MVrOFmwz_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2NDQ4OQ==", "bodyText": "Even without a ranking interface.. given we place the activeHost first.. I think we are guaranteed to send to active if its alive and not restoring (i.e laggy)", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376164489", "createdAt": "2020-02-07T00:55:21Z", "author": {"login": "vinothchandar"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/materialization/ks/KsLocator.java", "diffHunk": "@@ -81,18 +87,17 @@\n     final Set<HostInfo> standByHosts = metadata.getStandbyHosts();\n     LOG.debug(\"Before filtering: Active host {} , standby hosts {}\", activeHost, standByHosts);\n \n-    final Stream<KsqlHostInfo> active = Stream.of(asKsqlHost(activeHost));\n-    final Stream<KsqlHostInfo> standby = standByHosts\n-        .stream()\n-        .map(this::asKsqlHost);\n-    final Stream<KsqlHostInfo> hostStream = Stream.concat(active, standby);\n+    final List<KsqlHostInfo> allHosts = Stream.concat(Stream.of(activeHost), standByHosts.stream())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE4OTk1MA==", "bodyText": "Yep, I think that's true.  Given our discussion earlier about always ranking active first, even during restore, ranking is solely for the benefit of multiple standbys.  Maybe this is low value given that there are likely to be 1 or at most 2 standbys in practice.  What do you think?", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376189950", "createdAt": "2020-02-07T02:43:51Z", "author": {"login": "AlanConfluent"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/materialization/ks/KsLocator.java", "diffHunk": "@@ -81,18 +87,17 @@\n     final Set<HostInfo> standByHosts = metadata.getStandbyHosts();\n     LOG.debug(\"Before filtering: Active host {} , standby hosts {}\", activeHost, standByHosts);\n \n-    final Stream<KsqlHostInfo> active = Stream.of(asKsqlHost(activeHost));\n-    final Stream<KsqlHostInfo> standby = standByHosts\n-        .stream()\n-        .map(this::asKsqlHost);\n-    final Stream<KsqlHostInfo> hostStream = Stream.concat(active, standby);\n+    final List<KsqlHostInfo> allHosts = Stream.concat(Stream.of(activeHost), standByHosts.stream())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjE2NDQ4OQ=="}, "originalCommit": {"oid": "3f29c37b083521f11ec3896b0df116f171b6e847"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTM2MzMxOnYy", "diffSide": "RIGHT", "path": "ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDo0Mjo1MlrOFnJuDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMDo1NToyNFrOFnKBhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU5ODAyOA==", "bodyText": "Should this be LONG.MAX_VALUE?", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376598028", "createdAt": "2020-02-07T20:42:52Z", "author": {"login": "vinothchandar"}, "path": "ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -182,6 +184,14 @@\n           + \"to ksql.streams.num.standby.replicas >= 1\";\n   public static final boolean KSQL_QUERY_PULL_ENABLE_STANDBY_READS_DEFAULT = false;\n \n+  public static final String KSQL_QUERY_PULL_MAX_ALLOWED_OFFSET_LAG_CONFIG =\n+      \"ksql.query.pull.max.allowed.offset.lag\";\n+  public static final Long KSQL_QUERY_PULL_MAX_ALLOWED_OFFSET_LAG_DEFAULT = 0L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c31cd20dc40c0fc9149967bb00f7d11e15d472cc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU5OTAyNQ==", "bodyText": "0 means, we don't query standbys at all (they will always have non-zero lag right).. So someone enabling standby.reads will be forced to also set this, to issue those queries.. I can imagine a lot of tickets we get where users complain standby routing is not working etc..\nmight be better to err on the other side? and as users become concerned about stale values, they will reach out and we point at this config.. wdyt", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376599025", "createdAt": "2020-02-07T20:45:27Z", "author": {"login": "vinothchandar"}, "path": "ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -182,6 +184,14 @@\n           + \"to ksql.streams.num.standby.replicas >= 1\";\n   public static final boolean KSQL_QUERY_PULL_ENABLE_STANDBY_READS_DEFAULT = false;\n \n+  public static final String KSQL_QUERY_PULL_MAX_ALLOWED_OFFSET_LAG_CONFIG =\n+      \"ksql.query.pull.max.allowed.offset.lag\";\n+  public static final Long KSQL_QUERY_PULL_MAX_ALLOWED_OFFSET_LAG_DEFAULT = 0L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU5ODAyOA=="}, "originalCommit": {"oid": "c31cd20dc40c0fc9149967bb00f7d11e15d472cc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYwMzAxNQ==", "bodyText": "Sure, I didn't really know if the default should be super low, super high, or some actual target in the middle.  I'm fine to do Long.MAX_VALUE as a default.", "url": "https://github.com/confluentinc/ksql/pull/4468#discussion_r376603015", "createdAt": "2020-02-07T20:55:24Z", "author": {"login": "AlanConfluent"}, "path": "ksql-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -182,6 +184,14 @@\n           + \"to ksql.streams.num.standby.replicas >= 1\";\n   public static final boolean KSQL_QUERY_PULL_ENABLE_STANDBY_READS_DEFAULT = false;\n \n+  public static final String KSQL_QUERY_PULL_MAX_ALLOWED_OFFSET_LAG_CONFIG =\n+      \"ksql.query.pull.max.allowed.offset.lag\";\n+  public static final Long KSQL_QUERY_PULL_MAX_ALLOWED_OFFSET_LAG_DEFAULT = 0L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU5ODAyOA=="}, "originalCommit": {"oid": "c31cd20dc40c0fc9149967bb00f7d11e15d472cc"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2089, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}