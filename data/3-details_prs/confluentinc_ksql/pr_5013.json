{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5OTQzNzgw", "number": 5013, "title": "feat: support more advanced suite of LIKE expressions", "bodyText": "fixes #2054\nDescription\nAdds support for more advanced LIKE functionality by turning a LIKE predicate into a regex statement and evaluating that. I looked for existing java implementations but none seemed much better than implementing it myself and avoiding a third-party (heavyweight) dependency.\nThis change also allows you to reference a column now in the LIKE predicate.\nTesting done\n\nExtensive Unit test\nQTT test\n\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-04-06T22:46:04Z", "url": "https://github.com/confluentinc/ksql/pull/5013", "merged": true, "mergeCommit": {"oid": "67cd9d91690039cc01f43438db1fbcd3fe4924ff"}, "closed": true, "closedAt": "2020-04-09T17:50:22Z", "author": {"login": "agavra"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVXwozAFqTM4OTM4Mzc4Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcV-ohaABqjMyMTg5Mjc0NDI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MzgzNzgz", "url": "https://github.com/confluentinc/ksql/pull/5013#pullrequestreview-389383783", "createdAt": "2020-04-07T18:31:15Z", "commit": {"oid": "f8754fe5ed05dd3d0860adc40210d17c8bdbfd25"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODozMToxNVrOGCQxJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODozNToxNFrOGCQ6cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNTA2MQ==", "bodyText": "missing issue link?", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r405025061", "createdAt": "2020-04-07T18:31:15Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluator.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.codegen.helpers;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.util.KsqlException;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+\n+/**\n+ * Used in the code generation to evaluate SQL 'LIKE' expressions.\n+ *\n+ * @see io.confluent.ksql.execution.expression.tree.LikePredicate\n+ */\n+public final class LikeEvaluator {\n+\n+  // characters that need to be escaped within regex [] - all other\n+  // characters are escaped using \\Q \\E (see Pattern#quote)\n+  private static final Set<Character> ESCAPED_CHARS = ImmutableSet.of(\n+      '[', ']', '^', '\\\\'\n+  );\n+\n+  private LikeEvaluator() {\n+  }\n+\n+  /**\n+   * @param val       the value to match\n+   * @param pattern   the pattern to match against\n+   *\n+   * @return  whether or not {@code val} matches {@code pattern} given the SQL\n+   *          LIKE definition of matching\n+   */\n+  public static boolean matches(final String val, final String pattern) {\n+    // note that we do not yet support escape characters in the pattern\n+    // see issue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8754fe5ed05dd3d0860adc40210d17c8bdbfd25"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNjcwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    {\"percents one side [X]\",         \"barbarbar\", \"%foo\"},\n          \n          \n            \n                    {\"percents one side [X]\",         \"barfoobar\", \"%foo\"},", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r405026700", "createdAt": "2020-04-07T18:34:02Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluatorTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.codegen.helpers;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.*;\n+\n+import java.util.Objects;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class LikeEvaluatorTest {\n+\n+  private final String name;\n+  private final String val;\n+  private final String pattern;\n+\n+  @Parameters(name = \"{0}\")\n+  public static Object[][] data() {\n+    // name | val | pattern\n+    return new Object[][]{\n+        {\"nothing special\",               \"foo\", \"foo\"},\n+        {\"nothing special [X]\",           \"bar\", \"foo\"},\n+        {\"empty percents\",                \"foo\", \"%foo%\"},\n+        {\"empty percents [X]\",            \"bar\", \"%foo%\"},\n+        {\"percents\",                      \"barfoobaz\", \"%foo%\"},\n+        {\"percents [X]\",                  \"barbarbar\", \"%foo%\"},\n+        {\"percents one side\",             \"barfoo\", \"%foo\"},\n+        {\"percents one side [X]\",         \"barbarbar\", \"%foo\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8754fe5ed05dd3d0860adc40210d17c8bdbfd25"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNzQ0Mw==", "bodyText": "also, worth adding case for:\n\n% other side and\n% in middle and\nmultiple %s\nescaped %s???? Or do we not support them yet.. (hard to add?)", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r405027443", "createdAt": "2020-04-07T18:35:14Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/codegen/helpers/LikeEvaluatorTest.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.codegen.helpers;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.*;\n+\n+import java.util.Objects;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+@RunWith(Parameterized.class)\n+public class LikeEvaluatorTest {\n+\n+  private final String name;\n+  private final String val;\n+  private final String pattern;\n+\n+  @Parameters(name = \"{0}\")\n+  public static Object[][] data() {\n+    // name | val | pattern\n+    return new Object[][]{\n+        {\"nothing special\",               \"foo\", \"foo\"},\n+        {\"nothing special [X]\",           \"bar\", \"foo\"},\n+        {\"empty percents\",                \"foo\", \"%foo%\"},\n+        {\"empty percents [X]\",            \"bar\", \"%foo%\"},\n+        {\"percents\",                      \"barfoobaz\", \"%foo%\"},\n+        {\"percents [X]\",                  \"barbarbar\", \"%foo%\"},\n+        {\"percents one side\",             \"barfoo\", \"%foo\"},\n+        {\"percents one side [X]\",         \"barbarbar\", \"%foo\"},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNjcwMA=="}, "originalCommit": {"oid": "f8754fe5ed05dd3d0860adc40210d17c8bdbfd25"}, "originalPosition": 45}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "146922376995c9cf62ad2abeb09dbb57f4d67ddb", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/146922376995c9cf62ad2abeb09dbb57f4d67ddb", "committedDate": "2020-04-08T17:06:34Z", "message": "chore: remove [] functionality"}, "afterCommit": {"oid": "ac9ad7a5819250f5bf6ec624568e85db4a3d752a", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/ac9ad7a5819250f5bf6ec624568e85db4a3d752a", "committedDate": "2020-04-08T18:47:20Z", "message": "chore: add historical test plans"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ac9ad7a5819250f5bf6ec624568e85db4a3d752a", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/ac9ad7a5819250f5bf6ec624568e85db4a3d752a", "committedDate": "2020-04-08T18:47:20Z", "message": "chore: add historical test plans"}, "afterCommit": {"oid": "923c37c7277f136a7dc17f4290d1f98c76092307", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/923c37c7277f136a7dc17f4290d1f98c76092307", "committedDate": "2020-04-08T18:53:56Z", "message": "feat: support more complex LIKE expressions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "923c37c7277f136a7dc17f4290d1f98c76092307", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/923c37c7277f136a7dc17f4290d1f98c76092307", "committedDate": "2020-04-08T18:53:56Z", "message": "feat: support more complex LIKE expressions"}, "afterCommit": {"oid": "2a89d7b59f04da82db781241ca870aff5a7915e6", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/2a89d7b59f04da82db781241ca870aff5a7915e6", "committedDate": "2020-04-08T18:57:20Z", "message": "feat: support more complex LIKE expressions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a89d7b59f04da82db781241ca870aff5a7915e6", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/2a89d7b59f04da82db781241ca870aff5a7915e6", "committedDate": "2020-04-08T18:57:20Z", "message": "feat: support more complex LIKE expressions"}, "afterCommit": {"oid": "72e60e3c2f78f540016d961a55e36bb0dd545a4a", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/72e60e3c2f78f540016d961a55e36bb0dd545a4a", "committedDate": "2020-04-08T20:10:15Z", "message": "chore: functional-tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODY3NjM5", "url": "https://github.com/confluentinc/ksql/pull/5013#pullrequestreview-390867639", "createdAt": "2020-04-09T14:53:17Z", "commit": {"oid": "72e60e3c2f78f540016d961a55e36bb0dd545a4a"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDo1MzoxN1rOGDcXmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTowMjozNFrOGDcyYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2MzcwNA==", "bodyText": "nit: test should really ensure escape char is not lost...", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r406263704", "createdAt": "2020-04-09T14:53:17Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/rewrite/ExpressionTreeRewriterTest.java", "diffHunk": "@@ -467,7 +467,7 @@ public void shouldRewriteLikePredicate() {\n     final Expression rewritten = expressionRewriter.rewrite(parsed, context);\n \n     // Then:\n-    assertThat(rewritten, equalTo(new LikePredicate(parsed.getLocation(), expr1, expr2)));\n+    assertThat(rewritten, equalTo(new LikePredicate(parsed.getLocation(), expr1, expr2, Optional.empty())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72e60e3c2f78f540016d961a55e36bb0dd545a4a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI2NTA1Ng==", "bodyText": "nit: can we not remove this if/else by having LikeEval.matches() take Optional<Char> for last param?", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r406265056", "createdAt": "2020-04-09T14:54:51Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/SqlToJavaVisitor.java", "diffHunk": "@@ -724,46 +726,23 @@ private String buildSupplierCode(final String typeString, final String code) {\n     @Override\n     public Pair<String, SqlType> visitLikePredicate(final LikePredicate node, final Void context) {\n \n-      // For now we just support simple prefix/suffix cases only.\n-      final String patternString = trimQuotes(process(node.getPattern(), context).getLeft());\n+      final String patternString = process(node.getPattern(), context).getLeft();\n       final String valueString = process(node.getValue(), context).getLeft();\n-      if (patternString.startsWith(\"%\")) {\n-        if (patternString.endsWith(\"%\")) {\n-          return new Pair<>(\n-              \"(\" + valueString + \").contains(\\\"\"\n-                  + patternString.substring(1, patternString.length() - 1)\n-                  + \"\\\")\",\n-              SqlTypes.STRING\n-          );\n-        } else {\n-          return new Pair<>(\n-              \"(\" + valueString + \").endsWith(\\\"\" + patternString.substring(1) + \"\\\")\",\n-              SqlTypes.STRING\n-          );\n-        }\n-      }\n \n-      if (patternString.endsWith(\"%\")) {\n+      if (node.getEscape().isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72e60e3c2f78f540016d961a55e36bb0dd545a4a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI3MDU2MQ==", "bodyText": "IllegalStateException?\nThe syntax allows the escape to be a multi-char string, so this is the error the users going to see if they enter one, right?\nI'd of thought this should be :\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      throw new IllegalStateException(\"Expected single character escape but got: \" + s);\n          \n          \n            \n                      throw new KsqlException(loc.asPrefix() + \"Expected single character escape but got: \" + s);\n          \n      \n    \n    \n  \n\nWhere loc is the NodeLocation.", "url": "https://github.com/confluentinc/ksql/pull/5013#discussion_r406270561", "createdAt": "2020-04-09T15:02:34Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/AstBuilder.java", "diffHunk": "@@ -889,10 +889,21 @@ public Node visitNullPredicate(final SqlBaseParser.NullPredicateContext context)\n \n     @Override\n     public Node visitLike(final SqlBaseParser.LikeContext context) {\n+\n+      final Optional<String> escape = Optional.ofNullable(context.escape)\n+          .map(Token::getText)\n+          .map(s -> ParserUtil.unquote(s, \"'\"));\n+      escape.ifPresent(s -> {\n+        if (s.length() != 1) {\n+          throw new IllegalStateException(\"Expected single character escape but got: \" + s);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72e60e3c2f78f540016d961a55e36bb0dd545a4a"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf4fc7f5f855b4d9f7d95a243fa153c82c419221", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/cf4fc7f5f855b4d9f7d95a243fa153c82c419221", "committedDate": "2020-04-09T15:54:31Z", "message": "feat: support more advanced LIKE expressions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2185b27e6518a49fe83e745fd4921c34a165e69", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/b2185b27e6518a49fe83e745fd4921c34a165e69", "committedDate": "2020-04-09T15:54:31Z", "message": "chore: functional-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5334289ab6169ce58c045bcadbd95c9e3f36e3f2", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/5334289ab6169ce58c045bcadbd95c9e3f36e3f2", "committedDate": "2020-04-09T15:55:19Z", "message": "chore: andys comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "72e60e3c2f78f540016d961a55e36bb0dd545a4a", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/72e60e3c2f78f540016d961a55e36bb0dd545a4a", "committedDate": "2020-04-08T20:10:15Z", "message": "chore: functional-tests"}, "afterCommit": {"oid": "5334289ab6169ce58c045bcadbd95c9e3f36e3f2", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/5334289ab6169ce58c045bcadbd95c9e3f36e3f2", "committedDate": "2020-04-09T15:55:19Z", "message": "chore: andys comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4995, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}