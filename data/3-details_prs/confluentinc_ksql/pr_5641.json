{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NjE0MzI2", "number": 5641, "title": "feat(client): support streaming inserts in Java client", "bodyText": "Description\nFixes #5583\nDocs will come in a follow-up PR. Javadocs on the new methods/interfaces/user-facing classes are included in this one.\nTesting done\nAdded unit and integration tests.\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-06-18T16:39:44Z", "url": "https://github.com/confluentinc/ksql/pull/5641", "merged": true, "mergeCommit": {"oid": "1e109bf64adc503aa773be47537e3a1307f4f84f"}, "closed": true, "closedAt": "2020-06-25T22:45:30Z", "author": {"login": "vcrfxia"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsMiAIgH2gAyNDM2NjE0MzI2OjIzOTU1ZjZiNGMwN2M4ZmIxNjZlZTc4OGI4NjQ4YzMwM2YzOGI2ODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcu1NoDgH2gAyNDM2NjE0MzI2OjY4NWQ0ZTljYzA3ZjI5N2I5MTM0YjYxZDA0MGI3ZTAzMjNlNmVjNDA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "23955f6b4c07c8fb166ee788b8648c303f38b686", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/23955f6b4c07c8fb166ee788b8648c303f38b686", "committedDate": "2020-06-17T16:34:45Z", "message": "feat(client): support streaming inserts (wip)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec060cb236925ec23c8b81bc94fd056114aab98e", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/ec060cb236925ec23c8b81bc94fd056114aab98e", "committedDate": "2020-06-17T20:26:11Z", "message": "chore: add example publisher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "309e874c5c1328b81dc30eea67a68d0d7a5a20ae", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/309e874c5c1328b81dc30eea67a68d0d7a5a20ae", "committedDate": "2020-06-17T20:26:14Z", "message": "chore: clean up isFailed() from example publisher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f56d070064651256681ab855f1c7f9d6613cf640", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/f56d070064651256681ab855f1c7f9d6613cf640", "committedDate": "2020-06-17T22:24:04Z", "message": "test: add unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a61ed042b86ea3aa0c2cbca8377d4ce353d496b", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/1a61ed042b86ea3aa0c2cbca8377d4ce353d496b", "committedDate": "2020-06-17T22:37:57Z", "message": "fix: switch to writing HTTP/2 frames"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fb75c27cb8b6606c89a7b3bcb406a5f0a505168", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/4fb75c27cb8b6606c89a7b3bcb406a5f0a505168", "committedDate": "2020-06-17T22:53:42Z", "message": "fix: fix failing test by disabling http2 cleartext upgrade"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7189c4065abc5c7b3f9c63f60ad7d2544eb85f1a", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/7189c4065abc5c7b3f9c63f60ad7d2544eb85f1a", "committedDate": "2020-06-17T23:33:42Z", "message": "test: more unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5de76cf9c8fea67519e9e3cb4741a0c4e2ff404f", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/5de76cf9c8fea67519e9e3cb4741a0c4e2ff404f", "committedDate": "2020-06-18T00:00:18Z", "message": "test: add integration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62004d9e104e5682659133ff5a427dd174793101", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/62004d9e104e5682659133ff5a427dd174793101", "committedDate": "2020-06-18T00:06:20Z", "message": "Merge branch '6.0.x' into java-client-stream-inserts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "627e0f442d67f63040ea2a5a6d74fbc1e92c4342", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/627e0f442d67f63040ea2a5a6d74fbc1e92c4342", "committedDate": "2020-06-18T16:28:41Z", "message": "chore: checkstyle and javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d85b2a09aea0bbad5f839e3ff25faeb22eadbfe", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/1d85b2a09aea0bbad5f839e3ff25faeb22eadbfe", "committedDate": "2020-06-18T16:34:35Z", "message": "Merge branch 'master' into java-client-stream-inserts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNDY0NzE0", "url": "https://github.com/confluentinc/ksql/pull/5641#pullrequestreview-433464714", "createdAt": "2020-06-18T16:43:16Z", "commit": {"oid": "1d85b2a09aea0bbad5f839e3ff25faeb22eadbfe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0MzoxN1rOGl3q9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0MzoxN1rOGl3q9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MjYxMw==", "bodyText": "Hey @purplefox I had to set this since otherwise the new tests were failing with\njava.lang.IllegalStateException: Cannot write an HTTP/2 frame over an HTTP/1.x connection\n\nbut I don't understand why that is. How come the cleartext upgrade prevents writing of HTTP/2 frames? Is the issue a race condition where the upgrade hasn't taken place by the time I try writing an HTTP/2 frame?", "url": "https://github.com/confluentinc/ksql/pull/5641#discussion_r442362613", "createdAt": "2020-06-18T16:43:17Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/ClientImpl.java", "diffHunk": "@@ -254,6 +299,7 @@ private static HttpClient createHttpClient(final Vertx vertx, final ClientOption\n         .setSsl(clientOptions.isUseTls())\n         .setUseAlpn(clientOptions.isUseAlpn())\n         .setProtocolVersion(HttpVersion.HTTP_2)\n+        .setHttp2ClearTextUpgrade(false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d85b2a09aea0bbad5f839e3ff25faeb22eadbfe"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNDY1ODQw", "url": "https://github.com/confluentinc/ksql/pull/5641#pullrequestreview-433465840", "createdAt": "2020-06-18T16:44:47Z", "commit": {"oid": "1d85b2a09aea0bbad5f839e3ff25faeb22eadbfe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0NDo0N1rOGl3udQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0NDo0N1rOGl3udQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MzUwOQ==", "bodyText": "Couldn't think of a way to make the methods in this class thread-safe without synchronizing all the public methods, but that doesn't feel right. Hopefully someone else has better ideas?", "url": "https://github.com/confluentinc/ksql/pull/5641#discussion_r442363509", "createdAt": "2020-06-18T16:44:47Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/InsertsPublisher.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.client;\n+\n+import java.util.ArrayDeque;\n+import java.util.Objects;\n+import java.util.Queue;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * A {@code org.reactivestreams.Publisher} suitable for use with the\n+ * {@link Client#streamInserts(String, Publisher)} method. Rows for insertion are passed to the\n+ * publisher via the {@link #accept(KsqlObject)} method, and buffered for delivery once the\n+ * {@link Client#streamInserts} request is made and the server-side subscriber has been subscribed.\n+ */\n+public class InsertsPublisher implements Publisher<KsqlObject> {\n+\n+  /**\n+   * The buffer max size indicator value used by the default constructor. See\n+   * {@link #InsertsPublisher(int)} for how this value is used.\n+   */\n+  public static final int DEFAULT_BUFFER_MAX_SIZE = 200;\n+\n+  private Subscriber<? super KsqlObject> subscriber;\n+  private final Queue<KsqlObject> buffer = new ArrayDeque<>();\n+  private final int bufferMaxSize;\n+  private long demand;\n+  private Runnable drainHandler;\n+  private volatile boolean cancelled;\n+  private boolean complete;\n+  private boolean shouldSendComplete;\n+  private boolean sentComplete;\n+\n+  /**\n+   * Creates an {@code InsertsPublisher}.\n+   */\n+  public InsertsPublisher() {\n+    this(DEFAULT_BUFFER_MAX_SIZE);\n+  }\n+\n+  /**\n+   * Creates an {@code InsertsPublisher}.\n+   *\n+   * @param bufferMaxSize Indicative max number of elements to store in the buffer. Note that this\n+   *                      value is not enforced, but it used to determine what to return from the\n+   *                      {@link #accept(KsqlObject)} method so the caller can stop sending more\n+   *                      rows and set a drainHandler to be notified when the buffer is cleared\n+   */\n+  public InsertsPublisher(final int bufferMaxSize) {\n+    this.bufferMaxSize = bufferMaxSize;\n+  }\n+\n+  /**\n+   * Provides a new row for insertion. The publisher will attempt to deliver it to server endpoint,\n+   * once the {@link Client#streamInserts} request has been made. The publisher will buffer the row\n+   * internally if it can't deliver it immediately. Note that the row will be buffered even if the\n+   * buffer is 'full', i.e., if number of elements is at least {@code bufferMaxSize}, as the\n+   * {@code bufferMaxSize} value is not a hard limit. See {@link #InsertsPublisher(int)} for more.\n+   *\n+   * @param row the row to insert\n+   * @return whether the internal buffer is 'full', i.e., if number of elements is at least\n+   *         {@code bufferMaxSize}.\n+   */\n+  public synchronized boolean accept(final KsqlObject row) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d85b2a09aea0bbad5f839e3ff25faeb22eadbfe"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNDcxNzI2", "url": "https://github.com/confluentinc/ksql/pull/5641#pullrequestreview-433471726", "createdAt": "2020-06-18T16:52:29Z", "commit": {"oid": "1d85b2a09aea0bbad5f839e3ff25faeb22eadbfe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo1MjoyOVrOGl4AmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo1MjoyOVrOGl4AmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2ODE1Mw==", "bodyText": "Because AcksPublisherImpl is a buffered publisher, if a user that is not interested in acks and does not subscribe a subscriber to the AcksPublisher, then the record parser will be paused and any errors later written to the response will not be read. On the one hand this seems bad, but OTOH if the user isn't consuming acks then they're likely not interested? An alternative would be to switch the AcksPublisher to not be buffered, which means we can continue to consume messages from the response and log any potential errors even if no subscriber is subscribed.", "url": "https://github.com/confluentinc/ksql/pull/5641#discussion_r442368153", "createdAt": "2020-06-18T16:52:29Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/StreamInsertsResponseHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.client.impl;\n+\n+import io.confluent.ksql.api.client.AcksPublisher;\n+import io.confluent.ksql.api.client.InsertAck;\n+import io.confluent.ksql.api.client.KsqlClientException;\n+import io.confluent.ksql.api.client.KsqlObject;\n+import io.vertx.core.Context;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpClientRequest;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.core.logging.Logger;\n+import io.vertx.core.logging.LoggerFactory;\n+import io.vertx.core.parsetools.RecordParser;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import org.reactivestreams.Publisher;\n+\n+public class StreamInsertsResponseHandler\n+    extends ResponseHandler<CompletableFuture<AcksPublisher>> {\n+\n+  private static final Logger log = LoggerFactory.getLogger(StreamInsertsResponseHandler.class);\n+\n+  private final AcksPublisherImpl acksPublisher;\n+  private boolean paused;\n+\n+  StreamInsertsResponseHandler(\n+      final Context context,\n+      final RecordParser recordParser,\n+      final CompletableFuture<AcksPublisher> cf,\n+      final HttpClientRequest request,\n+      final Publisher<KsqlObject> insertsPublisher\n+  ) {\n+    super(context, recordParser, cf);\n+\n+    Objects.requireNonNull(request);\n+    insertsPublisher.subscribe(new StreamInsertsSubscriber(context, request));\n+\n+    this.acksPublisher = new AcksPublisherImpl(context);\n+    cf.complete(acksPublisher);\n+  }\n+\n+  @Override\n+  protected void doHandleBodyBuffer(final Buffer buff) {\n+    final JsonObject jsonObject = new JsonObject(buff);\n+    final long seqNum = jsonObject.getLong(\"seq\");\n+    final String status = jsonObject.getString(\"status\");\n+    if (\"ok\".equals(status)) {\n+      final InsertAck ack = new InsertAckImpl(seqNum);\n+      final boolean full = acksPublisher.accept(ack);\n+      if (full && !paused) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d85b2a09aea0bbad5f839e3ff25faeb22eadbfe"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "059a8be9843413044052fbc14d33c8ca5e26d730", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/059a8be9843413044052fbc14d33c8ca5e26d730", "committedDate": "2020-06-24T15:50:19Z", "message": "Merge branch 'master' into java-client-stream-inserts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89ae5936441e3b8a5963c96d8e10ac8f9f0bd8da", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/89ae5936441e3b8a5963c96d8e10ac8f9f0bd8da", "committedDate": "2020-06-24T15:50:49Z", "message": "Merge branch 'master' into java-client-stream-inserts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2ec8e47f0804457548b3610f3313b0717b9de50", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/b2ec8e47f0804457548b3610f3313b0717b9de50", "committedDate": "2020-06-24T18:54:23Z", "message": "chore: fix merge from master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "559aec60035ed60da3dc4f8b0715752351299994", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/559aec60035ed60da3dc4f8b0715752351299994", "committedDate": "2020-06-24T23:50:01Z", "message": "Merge branch 'master' into java-client-stream-inserts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3cb408736d9374b42163e8ce991d7518181739a", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/e3cb408736d9374b42163e8ce991d7518181739a", "committedDate": "2020-06-24T23:51:21Z", "message": "chore: add equals/hashCode/toString methods to InsertAckImpl"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MjQ0ODYy", "url": "https://github.com/confluentinc/ksql/pull/5641#pullrequestreview-437244862", "createdAt": "2020-06-25T07:44:30Z", "commit": {"oid": "e3cb408736d9374b42163e8ce991d7518181739a"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNzo0NDozMFrOGovHQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMDozMToxNVrOGo04AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM2ODEzMQ==", "bodyText": "Why not extend BufferedPublisher? Then you get most of this for free.", "url": "https://github.com/confluentinc/ksql/pull/5641#discussion_r445368131", "createdAt": "2020-06-25T07:44:30Z", "author": {"login": "purplefox"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/InsertsPublisher.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.client;\n+\n+import java.util.ArrayDeque;\n+import java.util.Objects;\n+import java.util.Queue;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * A {@code org.reactivestreams.Publisher} suitable for use with the\n+ * {@link Client#streamInserts(String, Publisher)} method. Rows for insertion are passed to the\n+ * publisher via the {@link #accept(KsqlObject)} method, and buffered for delivery once the\n+ * {@link Client#streamInserts} request is made and the server-side subscriber has been subscribed.\n+ */\n+public class InsertsPublisher implements Publisher<KsqlObject> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3cb408736d9374b42163e8ce991d7518181739a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM3Mjc0NQ==", "bodyText": "What's the purpose of this block? Is it to write some data without ending the request? If so, request.write() should do that.", "url": "https://github.com/confluentinc/ksql/pull/5641#discussion_r445372745", "createdAt": "2020-06-25T07:52:47Z", "author": {"login": "purplefox"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/ClientImpl.java", "diffHunk": "@@ -259,7 +297,14 @@ public void close() {\n     if (clientOptions.isUseBasicAuth()) {\n       request = configureBasicAuth(request);\n     }\n-    request.end(requestBody);\n+    if (endRequest) {\n+      request.end(requestBody);\n+    } else {\n+      final HttpClientRequest finalRequest = request;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3cb408736d9374b42163e8ce991d7518181739a"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ2MTIwNQ==", "bodyText": "Tbh I am not an expert on the http2 stuff here. I'd recommend posting on the vert.x google group.", "url": "https://github.com/confluentinc/ksql/pull/5641#discussion_r445461205", "createdAt": "2020-06-25T10:28:44Z", "author": {"login": "purplefox"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/ClientImpl.java", "diffHunk": "@@ -254,6 +299,7 @@ private static HttpClient createHttpClient(final Vertx vertx, final ClientOption\n         .setSsl(clientOptions.isUseTls())\n         .setUseAlpn(clientOptions.isUseAlpn())\n         .setProtocolVersion(HttpVersion.HTTP_2)\n+        .setHttp2ClearTextUpgrade(false)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2MjYxMw=="}, "originalCommit": {"oid": "1d85b2a09aea0bbad5f839e3ff25faeb22eadbfe"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ2MjUyOQ==", "bodyText": "I think it's ok. If they don't subscribe they can't expect to get errors.", "url": "https://github.com/confluentinc/ksql/pull/5641#discussion_r445462529", "createdAt": "2020-06-25T10:31:15Z", "author": {"login": "purplefox"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/StreamInsertsResponseHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.client.impl;\n+\n+import io.confluent.ksql.api.client.AcksPublisher;\n+import io.confluent.ksql.api.client.InsertAck;\n+import io.confluent.ksql.api.client.KsqlClientException;\n+import io.confluent.ksql.api.client.KsqlObject;\n+import io.vertx.core.Context;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpClientRequest;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.core.logging.Logger;\n+import io.vertx.core.logging.LoggerFactory;\n+import io.vertx.core.parsetools.RecordParser;\n+import java.util.Objects;\n+import java.util.concurrent.CompletableFuture;\n+import org.reactivestreams.Publisher;\n+\n+public class StreamInsertsResponseHandler\n+    extends ResponseHandler<CompletableFuture<AcksPublisher>> {\n+\n+  private static final Logger log = LoggerFactory.getLogger(StreamInsertsResponseHandler.class);\n+\n+  private final AcksPublisherImpl acksPublisher;\n+  private boolean paused;\n+\n+  StreamInsertsResponseHandler(\n+      final Context context,\n+      final RecordParser recordParser,\n+      final CompletableFuture<AcksPublisher> cf,\n+      final HttpClientRequest request,\n+      final Publisher<KsqlObject> insertsPublisher\n+  ) {\n+    super(context, recordParser, cf);\n+\n+    Objects.requireNonNull(request);\n+    insertsPublisher.subscribe(new StreamInsertsSubscriber(context, request));\n+\n+    this.acksPublisher = new AcksPublisherImpl(context);\n+    cf.complete(acksPublisher);\n+  }\n+\n+  @Override\n+  protected void doHandleBodyBuffer(final Buffer buff) {\n+    final JsonObject jsonObject = new JsonObject(buff);\n+    final long seqNum = jsonObject.getLong(\"seq\");\n+    final String status = jsonObject.getString(\"status\");\n+    if (\"ok\".equals(status)) {\n+      final InsertAck ack = new InsertAckImpl(seqNum);\n+      final boolean full = acksPublisher.accept(ack);\n+      if (full && !paused) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2ODE1Mw=="}, "originalCommit": {"oid": "1d85b2a09aea0bbad5f839e3ff25faeb22eadbfe"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "685d4e9cc07f297b9134b61d040b7e0323e6ec40", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/685d4e9cc07f297b9134b61d040b7e0323e6ec40", "committedDate": "2020-06-25T21:06:27Z", "message": "test: add EqualsTester test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 228, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}