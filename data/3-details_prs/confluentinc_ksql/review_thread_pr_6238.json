{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MTc4MzQ4", "number": 6238, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOToxOTozMVrOEkNLjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDozNDo0N1rOEk_xtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDAwMTQyOnYy", "diffSide": "RIGHT", "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/delimited/KsqlDelimitedSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOToxOTozMVrOHTAvUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOToxOTozMVrOHTAvUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTY5NzEwNA==", "bodyText": "Kids distracted me - on it...", "url": "https://github.com/confluentinc/ksql/pull/6238#discussion_r489697104", "createdAt": "2020-09-16T19:19:31Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/delimited/KsqlDelimitedSerializer.java", "diffHunk": "@@ -95,7 +95,8 @@ private String getDecimal(final Field field) {\n       final int precision = DecimalUtil.precision(field.schema());\n       final int scale = DecimalUtil.scale(field.schema());\n \n-      return DecimalUtil.format(precision, scale, value);\n+      return value.toString();\n+//      return DecimalUtil.format(precision, scale, value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c6b1895b7b3f895dc13bd399a82004dad46c2b2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjI5MTA4OnYy", "diffSide": "LEFT", "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/delimited/KsqlDelimitedSerializer.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDozNDo0N1rOHUP0vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDoxOTo1N1rOHVg_QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5MjgyOQ==", "bodyText": "Isn't this format used to add trailing zeros to decimals? Without this, we loose those zeros.\nCan the DecimalFormat be configured to avoid adding commas?", "url": "https://github.com/confluentinc/ksql/pull/6238#discussion_r490992829", "createdAt": "2020-09-18T14:34:47Z", "author": {"login": "spena"}, "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/delimited/KsqlDelimitedSerializer.java", "diffHunk": "@@ -84,20 +82,9 @@ public boolean hasNext() {\n     public Object next() {\n       final Field field = fieldIt.next();\n       throwOnUnsupportedType(field.schema());\n-      if (DecimalUtil.isDecimal(field.schema())) {\n-        return getDecimal(field);\n-      }\n       return data.get(field);\n     }\n \n-    private String getDecimal(final Field field) {\n-      final BigDecimal value = (BigDecimal) data.get(field);\n-      final int precision = DecimalUtil.precision(field.schema());\n-      final int scale = DecimalUtil.scale(field.schema());\n-\n-      return DecimalUtil.format(precision, scale, value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d94a5e9447287fa47fab9076a5dc659a77bd70b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE4MjEwMg==", "bodyText": "I'll take a look - thanks!", "url": "https://github.com/confluentinc/ksql/pull/6238#discussion_r491182102", "createdAt": "2020-09-18T20:45:23Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/delimited/KsqlDelimitedSerializer.java", "diffHunk": "@@ -84,20 +82,9 @@ public boolean hasNext() {\n     public Object next() {\n       final Field field = fieldIt.next();\n       throwOnUnsupportedType(field.schema());\n-      if (DecimalUtil.isDecimal(field.schema())) {\n-        return getDecimal(field);\n-      }\n       return data.get(field);\n     }\n \n-    private String getDecimal(final Field field) {\n-      final BigDecimal value = (BigDecimal) data.get(field);\n-      final int precision = DecimalUtil.precision(field.schema());\n-      final int scale = DecimalUtil.scale(field.schema());\n-\n-      return DecimalUtil.format(precision, scale, value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5MjgyOQ=="}, "originalCommit": {"oid": "2d94a5e9447287fa47fab9076a5dc659a77bd70b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk1MTg2Mg==", "bodyText": "Looked into this and the trailing zeros are correctly formatted. However, we do need to call toPlanString(), rather than toString() if we want to avoid scientific notation.", "url": "https://github.com/confluentinc/ksql/pull/6238#discussion_r491951862", "createdAt": "2020-09-21T10:54:12Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/delimited/KsqlDelimitedSerializer.java", "diffHunk": "@@ -84,20 +82,9 @@ public boolean hasNext() {\n     public Object next() {\n       final Field field = fieldIt.next();\n       throwOnUnsupportedType(field.schema());\n-      if (DecimalUtil.isDecimal(field.schema())) {\n-        return getDecimal(field);\n-      }\n       return data.get(field);\n     }\n \n-    private String getDecimal(final Field field) {\n-      final BigDecimal value = (BigDecimal) data.get(field);\n-      final int precision = DecimalUtil.precision(field.schema());\n-      final int scale = DecimalUtil.scale(field.schema());\n-\n-      return DecimalUtil.format(precision, scale, value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5MjgyOQ=="}, "originalCommit": {"oid": "2d94a5e9447287fa47fab9076a5dc659a77bd70b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI4Mjk2NA==", "bodyText": "Looking at this, is there any reason to prefer plain notation over scientific notation? the plan notation is lossy while scientific notation conserves the precision/scale exactly (docs about toPlainString):\nNote that if the result of this method is passed to the string constructor, only the numerical \nvalue of this BigDecimal will necessarily be recovered; the representation of the new BigDecimal \nmay have a different scale.\n\nCompare with toString:\nThere is a one-to-one mapping between the distinguishable BigDecimal values and the \nresult of this conversion.", "url": "https://github.com/confluentinc/ksql/pull/6238#discussion_r492282964", "createdAt": "2020-09-21T19:05:19Z", "author": {"login": "agavra"}, "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/delimited/KsqlDelimitedSerializer.java", "diffHunk": "@@ -84,20 +82,9 @@ public boolean hasNext() {\n     public Object next() {\n       final Field field = fieldIt.next();\n       throwOnUnsupportedType(field.schema());\n-      if (DecimalUtil.isDecimal(field.schema())) {\n-        return getDecimal(field);\n-      }\n       return data.get(field);\n     }\n \n-    private String getDecimal(final Field field) {\n-      final BigDecimal value = (BigDecimal) data.get(field);\n-      final int precision = DecimalUtil.precision(field.schema());\n-      final int scale = DecimalUtil.scale(field.schema());\n-\n-      return DecimalUtil.format(precision, scale, value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5MjgyOQ=="}, "originalCommit": {"oid": "2d94a5e9447287fa47fab9076a5dc659a77bd70b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMxODU3Mw==", "bodyText": "The thought process behind this is that:\na) The serializer previously didn't use scientific notation, so this would be a change in behaviour beyond the bug fix to allow it to read its own decimals.\nb)  We've had users be confused about decimals in scientific notation before, in JSON I think it was, and switched that serializer to non-scientific.\nI agree that 1.23e+3 more accurately represent the scale of the value than 1230. However, our delimited deserializer will correct deserialize the latter correctly, given the correct schema.\nErgo, I think this is the best default behaviour from a useability and minimising support perspective. However, I can see the benefit of supporting scientific notation, (maybe through a config setting), for those that want it. Though I'd say this is out of scope of this bug fix.", "url": "https://github.com/confluentinc/ksql/pull/6238#discussion_r492318573", "createdAt": "2020-09-21T20:12:06Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/delimited/KsqlDelimitedSerializer.java", "diffHunk": "@@ -84,20 +82,9 @@ public boolean hasNext() {\n     public Object next() {\n       final Field field = fieldIt.next();\n       throwOnUnsupportedType(field.schema());\n-      if (DecimalUtil.isDecimal(field.schema())) {\n-        return getDecimal(field);\n-      }\n       return data.get(field);\n     }\n \n-    private String getDecimal(final Field field) {\n-      final BigDecimal value = (BigDecimal) data.get(field);\n-      final int precision = DecimalUtil.precision(field.schema());\n-      final int scale = DecimalUtil.scale(field.schema());\n-\n-      return DecimalUtil.format(precision, scale, value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5MjgyOQ=="}, "originalCommit": {"oid": "2d94a5e9447287fa47fab9076a5dc659a77bd70b"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyMjYyNA==", "bodyText": "Sounds good, I don't feel to strongly about it either way so as long as we've given it thought I'm happy here", "url": "https://github.com/confluentinc/ksql/pull/6238#discussion_r492322624", "createdAt": "2020-09-21T20:19:57Z", "author": {"login": "agavra"}, "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/delimited/KsqlDelimitedSerializer.java", "diffHunk": "@@ -84,20 +82,9 @@ public boolean hasNext() {\n     public Object next() {\n       final Field field = fieldIt.next();\n       throwOnUnsupportedType(field.schema());\n-      if (DecimalUtil.isDecimal(field.schema())) {\n-        return getDecimal(field);\n-      }\n       return data.get(field);\n     }\n \n-    private String getDecimal(final Field field) {\n-      final BigDecimal value = (BigDecimal) data.get(field);\n-      final int precision = DecimalUtil.precision(field.schema());\n-      final int scale = DecimalUtil.scale(field.schema());\n-\n-      return DecimalUtil.format(precision, scale, value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5MjgyOQ=="}, "originalCommit": {"oid": "2d94a5e9447287fa47fab9076a5dc659a77bd70b"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2792, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}