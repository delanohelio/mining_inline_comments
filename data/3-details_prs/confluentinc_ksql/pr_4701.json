{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzNTY0NTA0", "number": 4701, "title": "Partial support for arbitrary key column names.", "bodyText": "Description\nPartial fix for: #3536\nFirst part of supporting key column names other than ROWKEY.\nWith this initial pass you can now name your key columns anything you want in your CREATE TABLE and CREATE STREAM statements, e.g.\nCREATE STREAM S (ID INT KEY, NAME STRING) WITH (...);\nAny GROUP BY, PARTITION BY or JOIN on the key column results any created data source having a key column with a matching name, e.g.\n-- schema of T: ID INT KEY, COUNT BIGINT\nCREATE TABLE T AS SELECT COUNT() AS COUNT FROM S GROUP BY ID;\nPull and push queries work as expected and quoted identifiers work too.\nHowever, this functionality is not complete yet. Hence it is guarded by the ksql.any.key.name.enabled feature flag, which defaults to off. The following big ticket items are remaining:\n\nPARTITION BY a single value column should result in a stream with the key column that matches the value column name.\nGROUP BY a single value column should result in a table with the key column that matches the value column name.\nJOIN on a single value column should  result in a stream/table with the key column that matches the value column name.\n\nThis additional work will be tracked under the same ticket, e.g. #3536\nReviewing notes:\nDocumentation changes will be done in a separate PR: #4686 (WIP)\nSome changes are just renaming vars/funcs so that they no longer contain 'rowkey' in their names. This may seem unnecessary. However, use of ROWKEY is deeply ingrained in the code base. I'm having to search for 'rowkey' as part of this work. So these renames are mainly just so that they don't show up in my next search.\nPR is broken down into the following commits to help with reviewing:\n\nProduction code changes.\nTest code, including JSON based tests, changes.\n\nNote: some of the QTT / RQTT tests now have duplicate versions: 1 version using ROWKEY and a new version using a custom key column name.  The old ROWKEY version will be removed once this feature is complete.\n\n\nHistorical test plans committed.\n\nTesting done\nExtensive (R)QTT testing\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-03-04T13:44:29Z", "url": "https://github.com/confluentinc/ksql/pull/4701", "merged": true, "mergeCommit": {"oid": "eaa8f23ae0e8d171b56aa7c1f5b95ef0398efde9"}, "closed": true, "closedAt": "2020-03-05T11:23:41Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcKXGT1AH2gAyMzgzNTY0NTA0OjYzNWFhZDc1MDM2ZjQyZDdhNjQwMDc2NDFhYTUxNDk4MGFmNDM3MmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKa4hyAFqTM2ODk4ODM3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "635aad75036f42d7a64007641aa514980af4372a", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/635aad75036f42d7a64007641aa514980af4372a", "committedDate": "2020-03-04T13:40:02Z", "message": "chore: partial support for arbitrarily named key columns\n\nPartial fix for: #3536\n\nFirst part of supporting key column names other than `ROWKEY`.\n\nWith this initial pass you can now name your key columns anything you want in your `CREATE TABLE` and `CREATE STREAM` statements, e.g.\n\n```sql\nCREATE STREAM S (ID INT KEY, NAME STRING) WITH (...);\n```\n\nAny GROUP BY, PARTITION BY or JOIN on the key column results any created data source having a key column with a matching name, e.g.\n\n```sql\n-- schema of T: ID INT KEY, COUNT BIGINT\nCREATE TABLE T AS SELECT COUNT() AS COUNT FROM S GROUP BY ID;\n```\n\nPull and push queries work as expected and quoted identifiers work too.\n\nHowever, this functionality is not complete yet.\nHence it is guarded by the `ksql.any.key.name.enabled` feature flag, which defaults to off.\nThe following big ticket items are remaining:\n\n* PARTITION BY a single value column should result in a stream with the key column that matches the value column name.\n* GROUP BY a single value column should result in a table with the key column that matches the value column name.\n* JOIN on a single value column should  result in a stream/table with the key column that matches the value column name.\n\nThis additional work will be tracked under the same ticket, e.g. #3536"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c6b03af5e7792f9890256e71ed15b52fdcdf224", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/6c6b03af5e7792f9890256e71ed15b52fdcdf224", "committedDate": "2020-03-04T13:41:11Z", "message": "chore: commit test files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3cae9c406742390c00e253dc0921d5f9f076ab3", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/e3cae9c406742390c00e253dc0921d5f9f076ab3", "committedDate": "2020-03-04T13:42:02Z", "message": "chore: commit historical plans"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4OTMwNjcw", "url": "https://github.com/confluentinc/ksql/pull/4701#pullrequestreview-368930670", "createdAt": "2020-03-04T16:29:38Z", "commit": {"oid": "e3cae9c406742390c00e253dc0921d5f9f076ab3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4OTg4Mzc4", "url": "https://github.com/confluentinc/ksql/pull/4701#pullrequestreview-368988378", "createdAt": "2020-03-04T17:45:00Z", "commit": {"oid": "635aad75036f42d7a64007641aa514980af4372a"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzo0NTowMFrOFx3MwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODowMDozN1rOFx3uGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyODkyOQ==", "bodyText": "making sure that I understand correctly, this is partially implemented? shouldn't be able to set the rowkey name here to the column name either way?", "url": "https://github.com/confluentinc/ksql/pull/4701#discussion_r387828929", "createdAt": "2020-03-04T17:45:00Z", "author": {"login": "agavra"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "diffHunk": "@@ -409,26 +411,36 @@ private LogicalSchema buildAggregateSchema(\n       final PlanNode sourcePlanNode,\n       final List<Expression> groupByExps\n   ) {\n+    final LogicalSchema sourceSchema = sourcePlanNode.getSchema();\n+\n+    final ColumnName keyName;\n     final SqlType keyType;\n     if (groupByExps.size() != 1) {\n+      keyName = SchemaUtil.ROWKEY_NAME;\n       keyType = SqlTypes.STRING;\n     } else {\n+      final Expression expression = groupByExps.get(0);\n+\n+      keyName = exactlyMatchesKeyColumns(expression, sourceSchema)\n+          ? ((ColumnReferenceExp) expression).getColumnName()\n+          : SchemaUtil.ROWKEY_NAME;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "635aad75036f42d7a64007641aa514980af4372a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzMjU2MQ==", "bodyText": "if we have this, do we need #4697?", "url": "https://github.com/confluentinc/ksql/pull/4701#discussion_r387832561", "createdAt": "2020-03-04T17:51:31Z", "author": {"login": "agavra"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/plan/KsqlStructuredDataOutputNode.java", "diffHunk": "@@ -123,4 +129,19 @@ public KeyField getKeyField() {\n         getTimestampColumn()\n     );\n   }\n+\n+  private void validate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "635aad75036f42d7a64007641aa514980af4372a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzNzQ2Nw==", "bodyText": "I think as part of this error message we should explain the semantics (that K will be available in the key schema)", "url": "https://github.com/confluentinc/ksql/pull/4701#discussion_r387837467", "createdAt": "2020-03-04T18:00:37Z", "author": {"login": "agavra"}, "path": "ksql-functional-tests/src/test/resources/query-validation-tests/elements.json", "diffHunk": "@@ -574,10 +602,30 @@\n         \"CREATE STREAM OUTPUT AS SELECT ROWKEY FROM INPUT;\"\n       ],\n       \"expectedException\": {\n-        \"type\": \"io.confluent.ksql.util.KsqlException\",\n+        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n         \"message\": \"Reserved column name in select: `ROWKEY`. Please remove or alias the column.\"\n       }\n     },\n+    {\n+      \"name\": \"non-join should reject KEY column name in projection\",\n+      \"comments\": [\n+        \"changes to the ksql query semantics are required to allow this.\",\n+        \"At the moment, the key schema passes through the select un-changed.\",\n+        \"which means the key column in the projection is added to the value schema\",\n+        \"but the name of the column clashes with the key column, resulting in an error\"\n+      ],\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K INT KEY, F0 INT) WITH (kafka_topic='input', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT AS SELECT K FROM INPUT;\"\n+      ],\n+      \"properties\": {\n+        \"ksql.any.key.name.enabled\": true\n+      },\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n+        \"message\": \"Value column name(s) `K` clashes with key column name(s).\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c6b03af5e7792f9890256e71ed15b52fdcdf224"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4911, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}