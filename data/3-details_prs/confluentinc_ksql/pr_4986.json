{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MTIyMTk5", "number": 4986, "title": "Primary keys", "bodyText": "Description\nKLIP for this (which needs approving first): #5008\nfixes: #3681\nThe commit introduces PRIMARY KEY columns into the ksqlDB syntax for tables. Streams will continue to have KEY columns. For example,\nCREATE TABLE ORDERS (ID BIGINT PRIMARY KEY, USER_ID BIGINT, ...\n--vs\nCREATE STREAM ORDER_UPDATES (ID BIGINT KEY, USER_ID BIGINT, ...\nNote: this change only introduces the PRIMARY KEY syntax. It does not change how data is processed by ksqlDB.\nThis change in syntax differentiates the key handling semantics for tables vs streams:\nA ksqlDB TABLE works much like tables in other SQL systems: Each row is identified by its PRIMARY KEY. PRIMARY KEY column(s) can not be NULL.\nA message in the underlying Kafka topic with the same key as an existing row will replaces the earlier row in the table,\nor deletes the row if the message's value is NULL, as long as the earlier row does not have a later timestamp / ROWTIME.\nA ksqlDB STREAM is a stream of facts. Each fact is immutable and is unique. A stream can store its data in either KEY or VALUE columns.  Columns stored in the key of the Kafka message are not PRIMARY KEY columns. They are just non-primary-key columns that happen to be stored in the key of the Kafka message.\nBoth KEY and VALUE columns can be NULL. No special processing is done if two rows have the same key.\nThe table below contrasts key handling for streams and tables:\n\n\n\n\nSTREAM\nTABLE\n\n\n\n\nKey column type\nKEY\nPRIMARY KEY\n\n\nNON NULL key constraint\nNo\nYes   Messages in the Kafka topic with a NULL PRIMARY KEY are ignored\n\n\nUnique key constraint\nNo\nYes                                                                Messages with the same key as another have no special meaning : Later messages with the same key replace earlier\n\n\nTombstones\nNo   Messages with NULL values are ignored\nYes   NULL message values are treated as a tombstone  Any existing row with a matching key is deleted\n\n\n\nTesting done\nusual\nReviewing notes:\nCommits broken down into:\n\nFirst commit:  Prod code changes and associated tests.\nSecond commit: doc updates\nThird commit: Updates to other tests, i.e. adding the PRIMARY to other tests that use tables.\nFourth commit: New historical query plans (The change is just the addition of the PRIMARY key word in the SQL).\nFifth commit: doc update to fix table layout. Turns out github does support multi-line tables :(\n\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-04-03T11:36:47Z", "url": "https://github.com/confluentinc/ksql/pull/4986", "merged": true, "mergeCommit": {"oid": "428977dc5740e6415e398b7bd0ae6721b5c63d04"}, "closed": true, "closedAt": "2020-04-08T17:13:12Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcT_NuLgH2gAyMzk4MTIyMTk5OmY4YTg2OWE2NGEwNzA3YThkZWFmMmY4MzU3ZTQwNGVkMjc0YzQ0Njk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVQuA9AH2gAyMzk4MTIyMTk5OmQzOGNmM2U4Mzc1MjYxOGEwNGQ3YzdhZmM5MmI5YjQ5OGU0M2JhNmY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f8a869a64a0707a8deaf2f8357e404ed274c4469", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/f8a869a64a0707a8deaf2f8357e404ed274c4469", "committedDate": "2020-04-03T11:29:39Z", "message": "feat: support `PRIMARY KEY` on table vs `KEY` on streams\n\nfixes: https://github.com/confluentinc/ksql/issues/3681\n\nThe commit introduces `PRIMARY KEY` columns into the ksqlDB syntax for tables. Streams will continue to have `KEY` columns. For example,\n\n```sql\nCREATE TABLE ORDERS (ID BIGINT PRIMARY KEY, USER_ID BIGINT, ...\n--vs\nCREATE STREAM ORDER_UPDATES (ID BIGINT KEY, USER_ID BIGINT, ...\n```\n\nThis change in syntax differentiates the key handling semantics for tables vs streams:\n\nA ksqlDB TABLE works much like tables in other SQL systems. Each row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL.\nA message in the underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the table,\nor _delete_ the row if the message's value is NULL, as long as the earlier row does not have a later timestamp / `ROWTIME`.\n\nA ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique. A stream can store its data in either `KEY` or `VALUE` columns.\nBoth `KEY` and `VALUE` columns can be NULL. No special processing is done if two rows have the same key.\n\nThe table below contrasts key handling for streams and tables:\n\n|                          |  STREAM                                                       | TABLE                                                             |\n| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\n| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\n| NON NULL key constraint  | No                                                            | Yes                                                               |\n:                          :                                                               : Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored :\n| Unique key constraint    | No                                                            | Yes                                                               |\n:                          : Messages with the same key as another have no special meaning : Later messages with the same key _replace_ earlier                :\n| Tombstones               | No                                                            | Yes                                                               |\n:                          : Messages with NULL values are ignored                         : NULL message values are treated as a _tombstone_                  :\n:                          :                                                               : Any existing row with a matching key is deleted                   :\n| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81d7b4923e4ee3effd0477068169ad395e5bae41", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/81d7b4923e4ee3effd0477068169ad395e5bae41", "committedDate": "2020-04-03T11:30:15Z", "message": "docs: doc updates for PRIMITIVE KEYS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9f9abbbbe238b508d8c2f12cdd1fc14f3376a04", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/a9f9abbbbe238b508d8c2f12cdd1fc14f3376a04", "committedDate": "2020-04-03T11:31:41Z", "message": "test: test updates for primitive keys"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c740468d4efe6e07e50ec670f6ecf323c045e67c", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/c740468d4efe6e07e50ec670f6ecf323c045e67c", "committedDate": "2020-04-03T11:32:10Z", "message": "chore: updated historical query plans"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/ce5e8f0b1033ce1ed0b34809101b57da87407d05", "committedDate": "2020-04-03T11:38:51Z", "message": "docs: fix table layout"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3Mzk2NjUx", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387396651", "createdAt": "2020-04-03T16:14:57Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoxNDo1OFrOGAcVog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoxNDo1OFrOGAcVog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzExNzQ3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\n          \n          \n            \n            A ksqlDB STREAM is a stream of _facts_. Each fact is immutable and unique.", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403117474", "createdAt": "2020-04-03T16:14:58Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -13,16 +13,37 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE STREAM stream_name ( { column_name data_type } [, ...] )\r\n+CREATE STREAM stream_name ( { column_name data_type (KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new stream with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new stream with the specified columns and properties.\r\n+\r\n+A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3Mzk4NzA1", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387398705", "createdAt": "2020-04-03T16:17:43Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoxNzo0NFrOGAcfnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoxNzo0NFrOGAcfnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyMDAzMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\n          \n          \n            \n            | Tombstones               | No <br> Messages with NULL values are ignored.                | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted.|", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403120031", "createdAt": "2020-04-03T16:17:44Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -13,16 +13,37 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE STREAM stream_name ( { column_name data_type } [, ...] )\r\n+CREATE STREAM stream_name ( { column_name data_type (KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new stream with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new stream with the specified columns and properties.\r\n+\r\n+A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\r\n+A stream can store its data in either `KEY` or `VALUE` columns.\r\n+Both `KEY` and `VALUE` columns can be NULL. No special processing is done if two rows have the same\r\n+key. The table below contrasts this to a [ksqlDB TABLE](./create-table):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3Mzk5MzYw", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387399360", "createdAt": "2020-04-03T16:18:37Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoxODozOFrOGAciiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoxODozOFrOGAciiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyMDc3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\n          \n          \n            \n            | NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored.|", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403120777", "createdAt": "2020-04-03T16:18:38Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -13,16 +13,37 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE STREAM stream_name ( { column_name data_type } [, ...] )\r\n+CREATE STREAM stream_name ( { column_name data_type (KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new stream with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new stream with the specified columns and properties.\r\n+\r\n+A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\r\n+A stream can store its data in either `KEY` or `VALUE` columns.\r\n+Both `KEY` and `VALUE` columns can be NULL. No special processing is done if two rows have the same\r\n+key. The table below contrasts this to a [ksqlDB TABLE](./create-table):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3Mzk5Njg1", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387399685", "createdAt": "2020-04-03T16:19:06Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoxOTowNlrOGAckMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoxOTowNlrOGAckMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyMTIwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\n          \n          \n            \n            | NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored.|", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403121201", "createdAt": "2020-04-03T16:19:06Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -13,16 +13,37 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE STREAM stream_name ( { column_name data_type } [, ...] )\r\n+CREATE STREAM stream_name ( { column_name data_type (KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new stream with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new stream with the specified columns and properties.\r\n+\r\n+A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\r\n+A stream can store its data in either `KEY` or `VALUE` columns.\r\n+Both `KEY` and `VALUE` columns can be NULL. No special processing is done if two rows have the same\r\n+key. The table below contrasts this to a [ksqlDB TABLE](./create-table):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NDAxMzUy", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387401352", "createdAt": "2020-04-03T16:21:24Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoyMToyNFrOGAcrlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoyMToyNFrOGAcrlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyMzA5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            key. The table below contrasts this to a [ksqlDB TABLE](./create-table):\n          \n          \n            \n            key. This situation is handled differently by a [ksqlDB TABLE](./create-table), as shown in the following table.", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403123095", "createdAt": "2020-04-03T16:21:24Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -13,16 +13,37 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE STREAM stream_name ( { column_name data_type } [, ...] )\r\n+CREATE STREAM stream_name ( { column_name data_type (KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new stream with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new stream with the specified columns and properties.\r\n+\r\n+A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\r\n+A stream can store its data in either `KEY` or `VALUE` columns.\r\n+Both `KEY` and `VALUE` columns can be NULL. No special processing is done if two rows have the same\r\n+key. The table below contrasts this to a [ksqlDB TABLE](./create-table):\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NDAxNzU0", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387401754", "createdAt": "2020-04-03T16:21:57Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoyMTo1N1rOGActiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoyMTo1N1rOGActiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyMzU5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * `column_name`: the name of the column. If unquoted the name must be a valid\n          \n          \n            \n             * `column_name`: the name of the column. If unquoted, the name must be a valid", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403123593", "createdAt": "2020-04-03T16:21:57Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -13,16 +13,37 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE STREAM stream_name ( { column_name data_type } [, ...] )\r\n+CREATE STREAM stream_name ( { column_name data_type (KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new stream with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new stream with the specified columns and properties.\r\n+\r\n+A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\r\n+A stream can store its data in either `KEY` or `VALUE` columns.\r\n+Both `KEY` and `VALUE` columns can be NULL. No special processing is done if two rows have the same\r\n+key. The table below contrasts this to a [ksqlDB TABLE](./create-table):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r\n+\r\n+Each column is defined by:\r\n+ * `column_name`: the name of the column. If unquoted the name must be a valid\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NDAzMTc0", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387403174", "createdAt": "2020-04-03T16:23:56Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoyMzo1N1rOGAczwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoyMzo1N1rOGAczwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyNTE4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               [SQL identifier](../../concepts/schemas#valid-identifiers) and will be converted to uppercase.\n          \n          \n            \n               [SQL identifier](../../concepts/schemas#valid-identifiers) and ksqlDB converts it to uppercase.", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403125184", "createdAt": "2020-04-03T16:23:57Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -13,16 +13,37 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE STREAM stream_name ( { column_name data_type } [, ...] )\r\n+CREATE STREAM stream_name ( { column_name data_type (KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new stream with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new stream with the specified columns and properties.\r\n+\r\n+A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\r\n+A stream can store its data in either `KEY` or `VALUE` columns.\r\n+Both `KEY` and `VALUE` columns can be NULL. No special processing is done if two rows have the same\r\n+key. The table below contrasts this to a [ksqlDB TABLE](./create-table):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r\n+\r\n+Each column is defined by:\r\n+ * `column_name`: the name of the column. If unquoted the name must be a valid\r\n+   [SQL identifier](../../concepts/schemas#valid-identifiers) and will be converted to uppercase.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTAzMDg2", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387503086", "createdAt": "2020-04-03T18:52:28Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo1MjoyOFrOGAj_Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo1MjoyOFrOGAj_Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0Mjg1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               identifier, for example ``` `mixedCaseId` ``` or ``` `$with@invalid!chars`.\n          \n          \n            \n               identifier, for example ``` `mixedCaseId` ``` or ``` `$with@invalid!chars` ```.", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403242855", "createdAt": "2020-04-03T18:52:28Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -13,16 +13,37 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE STREAM stream_name ( { column_name data_type } [, ...] )\r\n+CREATE STREAM stream_name ( { column_name data_type (KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new stream with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new stream with the specified columns and properties.\r\n+\r\n+A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\r\n+A stream can store its data in either `KEY` or `VALUE` columns.\r\n+Both `KEY` and `VALUE` columns can be NULL. No special processing is done if two rows have the same\r\n+key. The table below contrasts this to a [ksqlDB TABLE](./create-table):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r\n+\r\n+Each column is defined by:\r\n+ * `column_name`: the name of the column. If unquoted the name must be a valid\r\n+   [SQL identifier](../../concepts/schemas#valid-identifiers) and will be converted to uppercase.\r\n+   The name can be quoted if case needs to be preserved or if the name is not a valid SQL\r\n+   identifier, for example ``` `mixedCaseId` ``` or ``` `$with@invalid!chars`.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTAzNjI2", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387503626", "createdAt": "2020-04-03T18:53:14Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo1MzoxNVrOGAkBHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo1MzoxNVrOGAkBHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0MzI5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               If a column is not marked as a `KEY` column ksqlDB will load it from the Kafka message's value.\n          \n          \n            \n               If a column is not marked as a `KEY` column, ksqlDB loads it from the Kafka message's value.", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403243292", "createdAt": "2020-04-03T18:53:15Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -13,16 +13,37 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE STREAM stream_name ( { column_name data_type } [, ...] )\r\n+CREATE STREAM stream_name ( { column_name data_type (KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new stream with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new stream with the specified columns and properties.\r\n+\r\n+A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\r\n+A stream can store its data in either `KEY` or `VALUE` columns.\r\n+Both `KEY` and `VALUE` columns can be NULL. No special processing is done if two rows have the same\r\n+key. The table below contrasts this to a [ksqlDB TABLE](./create-table):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r\n+\r\n+Each column is defined by:\r\n+ * `column_name`: the name of the column. If unquoted the name must be a valid\r\n+   [SQL identifier](../../concepts/schemas#valid-identifiers) and will be converted to uppercase.\r\n+   The name can be quoted if case needs to be preserved or if the name is not a valid SQL\r\n+   identifier, for example ``` `mixedCaseId` ``` or ``` `$with@invalid!chars`.\r\n+ * `data_type`: the SQL type of the column. Columns can be any of the\r\n+   [data types](../syntax-reference.md#ksqldb-data-types) supported by ksqlDB.\r\n+ * `KEY`: columns that are stored in the Kafka message's key should be marked as `KEY` columns.\r\n+   If a column is not marked as a `KEY` column ksqlDB will load it from the Kafka message's value.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTA2OTM3", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387506937", "createdAt": "2020-04-03T18:58:33Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo1ODozM1rOGAkPYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo1ODozM1rOGAkPYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0Njk0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\n          \n          \n            \n            underlying Kafka topic that has the same key as an existing row will _replace_ the earlier row in the", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403246947", "createdAt": "2020-04-03T18:58:33Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -10,25 +10,44 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE TABLE table_name ( { column_name data_type } [, ...] )\r\n+CREATE TABLE table_name ( { column_name data_type (PRIMARY KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new table with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new table with the specified columns and properties.\r\n+\r\n+A ksqlDB TABLE works much like tables in other SQL systems. A table has zero or more rows. Each\r\n+row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL. A message in the\r\n+underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTA3ODU0", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387507854", "createdAt": "2020-04-03T19:00:00Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMDowMVrOGAkUYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMDowMVrOGAkUYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0ODIyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            a later timestamp / `ROWTIME`. The table below contrasts this to a [ksqlDB STREAM](./create-stream):\n          \n          \n            \n            a later timestamp / `ROWTIME`. This situation is handled differently by a [ksqlDB STREAM](./create-stream), as shown in the following table.", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403248227", "createdAt": "2020-04-03T19:00:01Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -10,25 +10,44 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE TABLE table_name ( { column_name data_type } [, ...] )\r\n+CREATE TABLE table_name ( { column_name data_type (PRIMARY KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new table with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new table with the specified columns and properties.\r\n+\r\n+A ksqlDB TABLE works much like tables in other SQL systems. A table has zero or more rows. Each\r\n+row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL. A message in the\r\n+underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\r\n+table, or _delete_ the row if the message's value is NULL, as long as the earlier row does not have\r\n+a later timestamp / `ROWTIME`. The table below contrasts this to a [ksqlDB STREAM](./create-stream):\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTA4MTMw", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387508130", "createdAt": "2020-04-03T19:00:26Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMDoyNlrOGAkVnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMDoyNlrOGAkVnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0ODU0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\n          \n          \n            \n            | NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored.|", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403248543", "createdAt": "2020-04-03T19:00:26Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -10,25 +10,44 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE TABLE table_name ( { column_name data_type } [, ...] )\r\n+CREATE TABLE table_name ( { column_name data_type (PRIMARY KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new table with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new table with the specified columns and properties.\r\n+\r\n+A ksqlDB TABLE works much like tables in other SQL systems. A table has zero or more rows. Each\r\n+row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL. A message in the\r\n+underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\r\n+table, or _delete_ the row if the message's value is NULL, as long as the earlier row does not have\r\n+a later timestamp / `ROWTIME`. The table below contrasts this to a [ksqlDB STREAM](./create-stream):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTA4NDIw", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387508420", "createdAt": "2020-04-03T19:00:53Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMDo1M1rOGAkW-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMDo1M1rOGAkW-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0ODg4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\n          \n          \n            \n            | Unique key constraint    | No <br> Messages with the same key as another have no special meaning.| Yes <br> Later messages with the same key _replace_ earlier.|", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403248888", "createdAt": "2020-04-03T19:00:53Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -10,25 +10,44 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE TABLE table_name ( { column_name data_type } [, ...] )\r\n+CREATE TABLE table_name ( { column_name data_type (PRIMARY KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new table with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new table with the specified columns and properties.\r\n+\r\n+A ksqlDB TABLE works much like tables in other SQL systems. A table has zero or more rows. Each\r\n+row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL. A message in the\r\n+underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\r\n+table, or _delete_ the row if the message's value is NULL, as long as the earlier row does not have\r\n+a later timestamp / `ROWTIME`. The table below contrasts this to a [ksqlDB STREAM](./create-stream):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTA5MTQy", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387509142", "createdAt": "2020-04-03T19:02:07Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMjowN1rOGAkang==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMjowN1rOGAkang==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0OTgyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\n          \n          \n            \n            | Tombstones               | No <br> Messages with NULL values are ignored.                | Yes <br> NULL message values are treated as a _tombstone_. <br> Any existing row with a matching key is deleted. |", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403249822", "createdAt": "2020-04-03T19:02:07Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -10,25 +10,44 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE TABLE table_name ( { column_name data_type } [, ...] )\r\n+CREATE TABLE table_name ( { column_name data_type (PRIMARY KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new table with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new table with the specified columns and properties.\r\n+\r\n+A ksqlDB TABLE works much like tables in other SQL systems. A table has zero or more rows. Each\r\n+row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL. A message in the\r\n+underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\r\n+table, or _delete_ the row if the message's value is NULL, as long as the earlier row does not have\r\n+a later timestamp / `ROWTIME`. The table below contrasts this to a [ksqlDB STREAM](./create-stream):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTA5Mzcw", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387509370", "createdAt": "2020-04-03T19:02:29Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMjoyOVrOGAkbYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMjoyOVrOGAkbYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MDAxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * `column_name`: the name of the column. If unquoted the name must be a valid\n          \n          \n            \n             * `column_name`: the name of the column. If unquoted, the name must be a valid", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403250018", "createdAt": "2020-04-03T19:02:29Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -10,25 +10,44 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE TABLE table_name ( { column_name data_type } [, ...] )\r\n+CREATE TABLE table_name ( { column_name data_type (PRIMARY KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new table with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new table with the specified columns and properties.\r\n+\r\n+A ksqlDB TABLE works much like tables in other SQL systems. A table has zero or more rows. Each\r\n+row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL. A message in the\r\n+underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\r\n+table, or _delete_ the row if the message's value is NULL, as long as the earlier row does not have\r\n+a later timestamp / `ROWTIME`. The table below contrasts this to a [ksqlDB STREAM](./create-stream):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r\n+\r\n+Each column is defined by:\r\n+ * `column_name`: the name of the column. If unquoted the name must be a valid\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTA5OTM3", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387509937", "createdAt": "2020-04-03T19:03:23Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMzoyM1rOGAkeRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMzoyM1rOGAkeRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MDc1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               [SQL identifier](../../concepts/schemas#valid-identifiers) and will be converted to uppercase.\n          \n          \n            \n               [SQL identifier](../../concepts/schemas#valid-identifiers) and and ksqlDB converts it to uppercase.", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403250757", "createdAt": "2020-04-03T19:03:23Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -10,25 +10,44 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE TABLE table_name ( { column_name data_type } [, ...] )\r\n+CREATE TABLE table_name ( { column_name data_type (PRIMARY KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new table with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new table with the specified columns and properties.\r\n+\r\n+A ksqlDB TABLE works much like tables in other SQL systems. A table has zero or more rows. Each\r\n+row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL. A message in the\r\n+underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\r\n+table, or _delete_ the row if the message's value is NULL, as long as the earlier row does not have\r\n+a later timestamp / `ROWTIME`. The table below contrasts this to a [ksqlDB STREAM](./create-stream):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r\n+\r\n+Each column is defined by:\r\n+ * `column_name`: the name of the column. If unquoted the name must be a valid\r\n+   [SQL identifier](../../concepts/schemas#valid-identifiers) and will be converted to uppercase.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTEwNDU5", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387510459", "createdAt": "2020-04-03T19:04:13Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowNDoxM1rOGAkg3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowNDoxM1rOGAkg3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MTQyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               identifier, for example ``` `mixedCaseId` ``` or ``` `$with@invalid!chars`.\n          \n          \n            \n               identifier, for example ``` `mixedCaseId` ``` or ``` `$with@invalid!chars` ```.", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403251423", "createdAt": "2020-04-03T19:04:13Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -10,25 +10,44 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE TABLE table_name ( { column_name data_type } [, ...] )\r\n+CREATE TABLE table_name ( { column_name data_type (PRIMARY KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new table with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new table with the specified columns and properties.\r\n+\r\n+A ksqlDB TABLE works much like tables in other SQL systems. A table has zero or more rows. Each\r\n+row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL. A message in the\r\n+underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\r\n+table, or _delete_ the row if the message's value is NULL, as long as the earlier row does not have\r\n+a later timestamp / `ROWTIME`. The table below contrasts this to a [ksqlDB STREAM](./create-stream):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r\n+\r\n+Each column is defined by:\r\n+ * `column_name`: the name of the column. If unquoted the name must be a valid\r\n+   [SQL identifier](../../concepts/schemas#valid-identifiers) and will be converted to uppercase.\r\n+   The name can be quoted if case needs to be preserved or if the name is not a valid SQL\r\n+   identifier, for example ``` `mixedCaseId` ``` or ``` `$with@invalid!chars`.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTEwNzg5", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387510789", "createdAt": "2020-04-03T19:04:43Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowNDo0M1rOGAkiCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowNDo0M1rOGAkiCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MTcyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               `PRIMARY KEY` columns. If a column is not marked as a `PRIMARY KEY` column ksqlDB will load it\n          \n          \n            \n               `PRIMARY KEY` columns. If a column is not marked as a `PRIMARY KEY` column, ksqlDB loads it", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403251720", "createdAt": "2020-04-03T19:04:43Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -10,25 +10,44 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE TABLE table_name ( { column_name data_type } [, ...] )\r\n+CREATE TABLE table_name ( { column_name data_type (PRIMARY KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new table with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new table with the specified columns and properties.\r\n+\r\n+A ksqlDB TABLE works much like tables in other SQL systems. A table has zero or more rows. Each\r\n+row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL. A message in the\r\n+underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\r\n+table, or _delete_ the row if the message's value is NULL, as long as the earlier row does not have\r\n+a later timestamp / `ROWTIME`. The table below contrasts this to a [ksqlDB STREAM](./create-stream):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r\n+\r\n+Each column is defined by:\r\n+ * `column_name`: the name of the column. If unquoted the name must be a valid\r\n+   [SQL identifier](../../concepts/schemas#valid-identifiers) and will be converted to uppercase.\r\n+   The name can be quoted if case needs to be preserved or if the name is not a valid SQL\r\n+   identifier, for example ``` `mixedCaseId` ``` or ``` `$with@invalid!chars`.\r\n+ * `data_type`: the SQL type of the column. Columns can be any of the\r\n+   [data types](../syntax-reference.md#ksqldb-data-types) supported by ksqlDB.\r\n+ * `PRIMARY KEY`: columns that are stored in the Kafka message's key should be marked as\r\n+   `PRIMARY KEY` columns. If a column is not marked as a `PRIMARY KEY` column ksqlDB will load it\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTExMzQ2", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387511346", "createdAt": "2020-04-03T19:05:42Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowNTo0MlrOGAkjzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowNTo0MlrOGAkjzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MjE3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               are NON NULL. Any records in the Kafka topic with NULL key columns will be dropped.\n          \n          \n            \n               is NON NULL. Any records in the Kafka topic with NULL key columns are dropped.", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403252173", "createdAt": "2020-04-03T19:05:42Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -10,25 +10,44 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE TABLE table_name ( { column_name data_type } [, ...] )\r\n+CREATE TABLE table_name ( { column_name data_type (PRIMARY KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new table with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new table with the specified columns and properties.\r\n+\r\n+A ksqlDB TABLE works much like tables in other SQL systems. A table has zero or more rows. Each\r\n+row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL. A message in the\r\n+underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\r\n+table, or _delete_ the row if the message's value is NULL, as long as the earlier row does not have\r\n+a later timestamp / `ROWTIME`. The table below contrasts this to a [ksqlDB STREAM](./create-stream):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r\n+\r\n+Each column is defined by:\r\n+ * `column_name`: the name of the column. If unquoted the name must be a valid\r\n+   [SQL identifier](../../concepts/schemas#valid-identifiers) and will be converted to uppercase.\r\n+   The name can be quoted if case needs to be preserved or if the name is not a valid SQL\r\n+   identifier, for example ``` `mixedCaseId` ``` or ``` `$with@invalid!chars`.\r\n+ * `data_type`: the SQL type of the column. Columns can be any of the\r\n+   [data types](../syntax-reference.md#ksqldb-data-types) supported by ksqlDB.\r\n+ * `PRIMARY KEY`: columns that are stored in the Kafka message's key should be marked as\r\n+   `PRIMARY KEY` columns. If a column is not marked as a `PRIMARY KEY` column ksqlDB will load it\r\n+   from the Kafka message's value. Unlike a stream's `KEY` column, a table's `PRIMARY KEY` column\r\n+   are NON NULL. Any records in the Kafka topic with NULL key columns will be dropped.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NTEyMDc4", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387512078", "createdAt": "2020-04-03T19:06:55Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3OTc3NTcw", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387977570", "createdAt": "2020-04-06T07:01:12Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3OTc4MTY5", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-387978169", "createdAt": "2020-04-06T07:02:23Z", "commit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzowMjoyNFrOGBKMCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzowMjoyNFrOGBKMCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2ODY4MQ==", "bodyText": "This is true for now (since we only support unwrapped primitive keys), but it won't be true in the future if we support single-element wrapped keys right?", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403868681", "createdAt": "2020-04-06T07:02:24Z", "author": {"login": "rodesai"}, "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -13,16 +13,37 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE STREAM stream_name ( { column_name data_type } [, ...] )\r\n+CREATE STREAM stream_name ( { column_name data_type (KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new stream with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new stream with the specified columns and properties.\r\n+\r\n+A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\r\n+A stream can store its data in either `KEY` or `VALUE` columns.\r\n+Both `KEY` and `VALUE` columns can be NULL. No special processing is done if two rows have the same\r\n+key. The table below contrasts this to a [ksqlDB TABLE](./create-table):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42ad42f7a7328ebeebff1caa94cc513af980d9ff", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/42ad42f7a7328ebeebff1caa94cc513af980d9ff", "committedDate": "2020-04-06T13:13:00Z", "message": "chore: use 'primary key' when output schemas in CLI"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fa7128a490c8ae76fccce719a89e92fa385654e", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/8fa7128a490c8ae76fccce719a89e92fa385654e", "committedDate": "2020-04-06T13:21:32Z", "message": "docs: jim's requested changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NjkzMjY1", "url": "https://github.com/confluentinc/ksql/pull/4986#pullrequestreview-388693265", "createdAt": "2020-04-06T23:45:06Z", "commit": {"oid": "f8a869a64a0707a8deaf2f8357e404ed274c4469"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzo0NTowNlrOGBt55Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzo0NToyN1rOGBt6Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1Mzg2MQ==", "bodyText": "nit: we should start with the error message (Streams do not support ...) and then give what failed (thinking about cases where only number of chars are returned)", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r404453861", "createdAt": "2020-04-06T23:45:06Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateStream.java", "diffHunk": "@@ -83,4 +88,25 @@ public String toString() {\n         .add(\"properties\", getProperties())\n         .toString();\n   }\n+\n+  private static void throwOnPrimaryKeys(final TableElements elements) {\n+    final String badEs = elements.stream()\n+        .filter(e -> e.getNamespace().isKey() && e.getNamespace() != Namespace.KEY)\n+        .map(badE ->\n+            badE.getLocation().map(NodeLocation::asPrefix).orElse(\"\") + badE.getName())\n+        .collect(Collectors.joining(System.lineSeparator()));\n+\n+    if (!badEs.isEmpty()) {\n+      throw new KsqlException(\"The following columns are defined as PRIMARY KEY columns. \"\n+          + \"Streams do not support PRIMARY KEY columns, only KEY columns.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8a869a64a0707a8deaf2f8357e404ed274c4469"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1Mzk5MQ==", "bodyText": "ditto", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r404453991", "createdAt": "2020-04-06T23:45:27Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateTable.java", "diffHunk": "@@ -83,4 +88,25 @@ public String toString() {\n         .add(\"properties\", getProperties())\n         .toString();\n   }\n+\n+  private static void throwOnNonPrimaryKeys(final TableElements elements) {\n+    final String badEs = elements.stream()\n+        .filter(e -> e.getNamespace().isKey() && e.getNamespace() != Namespace.PRIMARY_KEY)\n+        .map(badE ->\n+            badE.getLocation().map(NodeLocation::asPrefix).orElse(\"\") + badE.getName())\n+        .collect(Collectors.joining(System.lineSeparator()));\n+\n+    if (!badEs.isEmpty()) {\n+      throw new KsqlException(\"The following columns are defined as KEY columns. \"\n+          + \"Tables do not support KEY columns, only PRIMARY KEY columns.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8a869a64a0707a8deaf2f8357e404ed274c4469"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18f44b67d5b7b25aa10a9ecfddaf2d3d9ed80d9f", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/18f44b67d5b7b25aa10a9ecfddaf2d3d9ed80d9f", "committedDate": "2020-04-07T09:41:44Z", "message": "chore: updated error message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebfc67d4077af9999cdd8e382b5cf5f9f5532164", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/ebfc67d4077af9999cdd8e382b5cf5f9f5532164", "committedDate": "2020-04-07T09:46:26Z", "message": "chore: updated error message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d38cf3e83752618a04d7c7afc92b9b498e43ba6f", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/d38cf3e83752618a04d7c7afc92b9b498e43ba6f", "committedDate": "2020-04-07T10:27:14Z", "message": "chore: fix findbugs in test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4978, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}