{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMjc5NTYx", "number": 6175, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjozMToyNFrOEiUInw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjo0NDoyOFrOEmELug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDE2OTI3OnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjozMToyNFrOHQH82w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDozNToyNFrOHVheOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2OTUzMQ==", "bodyText": "Are there plans to remove the old syntax eventually?\nFor my own education: my understanding was that GRACE PERIOD is optional in aggregations? Is this correct? Would it be optional for stream-stream joins, too?\nFor Kafka Streams, we had a discussions about making it a mandatory parameter.", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r486669531", "createdAt": "2020-09-10T22:31:24Z", "author": {"login": "mjsax"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NDA2Mg==", "bodyText": "Are there plans to remove the old syntax eventually?\n\nI think it would make sense to remove the old syntax for 1.0.\n\nWould it be optional for stream-stream joins, too?\n\nYes (this is necessary to allow the old syntax as well)", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r486674062", "createdAt": "2020-09-10T22:43:52Z", "author": {"login": "agavra"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2OTUzMQ=="}, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4MzgyMg==", "bodyText": "Well, even if we make it required, we could still set 24h if the old syntax is used, when translating the old to the new internally?", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r486683822", "createdAt": "2020-09-10T23:14:26Z", "author": {"login": "mjsax"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2OTUzMQ=="}, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMzMDU1NA==", "bodyText": "With reference to recent discussions around supporting older versions of the syntax for longer...  we'd likely want to support the old syntax for a while.", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r492330554", "createdAt": "2020-09-21T20:35:24Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2OTUzMQ=="}, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDE3MTAyOnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjozMjowOFrOHQH92A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNTo0NjoyMVrOHWA1HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2OTc4NA==", "bodyText": "Ah, so it should be optionally?", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r486669784", "createdAt": "2020-09-10T22:32:08Z", "author": {"login": "mjsax"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.\n+\n+## LOEs and Delivery Milestones\n+\n+Small LOE - under 2 weeks of engineering time to deliver the syntax and implementation.\n+\n+## Documentation Updates\n+\n+The entry in `join-streams-and-tables.md` will be updated to include the following:\n+\n+```md\n+When you join two streams, you must specify a WITHIN clause for matching\n+records that both occur within a specified time interval and optionally a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwNjk2NQ==", "bodyText": "Curious to hear what other people think? Should GRACE PERIOD be optional? The current default of 24h is rather \"random\" and using a default of zero implies bad out-of-the-box behavior with regard to out-of-order data -- we would discard out-of-order records very aggressively as later records.", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r486706965", "createdAt": "2020-09-11T00:36:12Z", "author": {"login": "mjsax"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.\n+\n+## LOEs and Delivery Milestones\n+\n+Small LOE - under 2 weeks of engineering time to deliver the syntax and implementation.\n+\n+## Documentation Updates\n+\n+The entry in `join-streams-and-tables.md` will be updated to include the following:\n+\n+```md\n+When you join two streams, you must specify a WITHIN clause for matching\n+records that both occur within a specified time interval and optionally a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2OTc4NA=="}, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODY3MjU0MA==", "bodyText": "Making it optional would follow the current pattern when you specify the grace period on a windowed aggregation.  As to the default of 24h, I'm not sure what the right answer here is.  For my specific use case of KSQL it's way too big, although for someone else it could be too small.  Ideally I'd like a init parameter I could set to have better control over the default behavior.  Then a 24h value  as a default is probably a good starting point.", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r488672540", "createdAt": "2020-09-15T13:36:05Z", "author": {"login": "thomas-tomlinson"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.\n+\n+## LOEs and Delivery Milestones\n+\n+Small LOE - under 2 weeks of engineering time to deliver the syntax and implementation.\n+\n+## Documentation Updates\n+\n+The entry in `join-streams-and-tables.md` will be updated to include the following:\n+\n+```md\n+When you join two streams, you must specify a WITHIN clause for matching\n+records that both occur within a specified time interval and optionally a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2OTc4NA=="}, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzMDc5Mw==", "bodyText": "Making it optional would follow the current pattern when you specify the grace period on a windowed aggregation.\n\nYes, but I am wondering if it should be mandatory for windowed aggregations, too? (Might be it's own KLIP thought.)\n\nAs to the default of 24h, I'm not sure what the right answer here is.\n\nI guess there is no right answer. This is exactly my point: if there is no reasonable default, it seems to imply that there shouldn't be any default but it should be mandatory?", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r491230793", "createdAt": "2020-09-18T23:11:23Z", "author": {"login": "mjsax"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.\n+\n+## LOEs and Delivery Milestones\n+\n+Small LOE - under 2 weeks of engineering time to deliver the syntax and implementation.\n+\n+## Documentation Updates\n+\n+The entry in `join-streams-and-tables.md` will be updated to include the following:\n+\n+```md\n+When you join two streams, you must specify a WITHIN clause for matching\n+records that both occur within a specified time interval and optionally a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2OTc4NA=="}, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMzMjk0Nw==", "bodyText": "I think long term if should be required. However, we need to be backwards compatible, which means in the medium term it needs to be optional.\nPersonally, I would change the wording from and optionally `` to and it is recommended to supply a`.\nIn the docs I'd also detail what the default it and explain what the trade of is here, i.e. longer grace period means more storage, shorter grace period means less storage required.", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r492332947", "createdAt": "2020-09-21T20:40:14Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.\n+\n+## LOEs and Delivery Milestones\n+\n+Small LOE - under 2 weeks of engineering time to deliver the syntax and implementation.\n+\n+## Documentation Updates\n+\n+The entry in `join-streams-and-tables.md` will be updated to include the following:\n+\n+```md\n+When you join two streams, you must specify a WITHIN clause for matching\n+records that both occur within a specified time interval and optionally a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2OTc4NA=="}, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg0NDMxNw==", "bodyText": "I agree with @big-andy-coates, considering backward compatibility. We should recommend setting the grace period, but not require it for now.", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r492844317", "createdAt": "2020-09-22T15:46:21Z", "author": {"login": "colinhicks"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.\n+\n+## LOEs and Delivery Milestones\n+\n+Small LOE - under 2 weeks of engineering time to deliver the syntax and implementation.\n+\n+## Documentation Updates\n+\n+The entry in `join-streams-and-tables.md` will be updated to include the following:\n+\n+```md\n+When you join two streams, you must specify a WITHIN clause for matching\n+records that both occur within a specified time interval and optionally a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2OTc4NA=="}, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDE3MjYxOnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjozMjo0OFrOHQH-yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjozMjo0OFrOHQH-yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MDAyNQ==", "bodyText": "late -> out-of-order\nor better will define for how long out-of-order records will be accepted.", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r486670025", "createdAt": "2020-09-10T22:32:48Z", "author": {"login": "mjsax"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.\n+\n+## LOEs and Delivery Milestones\n+\n+Small LOE - under 2 weeks of engineering time to deliver the syntax and implementation.\n+\n+## Documentation Updates\n+\n+The entry in `join-streams-and-tables.md` will be updated to include the following:\n+\n+```md\n+When you join two streams, you must specify a WITHIN clause for matching\n+records that both occur within a specified time interval and optionally a\n+grace period. The WITHIN clause will specify the \"look back\" period on \n+the non-triggering stream while the grace period will define how late a record", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDE3OTIwOnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjozNToyMlrOHQICmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMzowNjo0MlrOHUeSfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MTAwMg==", "bodyText": "This seems like some optimization potential? If one joins specifies a grace-period, we could auto-set it for the other join, too, saving storage but not losing any results?", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r486671002", "createdAt": "2020-09-10T22:35:22Z", "author": {"login": "mjsax"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.\n+\n+## LOEs and Delivery Milestones\n+\n+Small LOE - under 2 weeks of engineering time to deliver the syntax and implementation.\n+\n+## Documentation Updates\n+\n+The entry in `join-streams-and-tables.md` will be updated to include the following:\n+\n+```md\n+When you join two streams, you must specify a WITHIN clause for matching\n+records that both occur within a specified time interval and optionally a\n+grace period. The WITHIN clause will specify the \"look back\" period on \n+the non-triggering stream while the grace period will define how late a record\n+may arrive before being processed.\n+\n+For valid time units, see [Time Units](../syntax-reference.md#time-units).\n+\n+Here's an example stream-stream-stream join that combines `orders`, `payments` and `shipments` \n+streams. The resulting ``shipped_orders`` stream contains all orders paid within 1 hour of when\n+the order was placed, and shipped within 2 hours of the payment being received. \n+\n+   CREATE STREAM shipped_orders AS\n+     SELECT \n+        o.id as orderId \n+        o.itemid as itemId,\n+        s.id as shipmentId,\n+        p.id as paymentId\n+     FROM orders o\n+        INNER JOIN payments p WITHIN 1 HOURS ON p.id = o.id\n+        INNER JOIN shipments s WITHIN (SIZE 2 HOURS, GRACE PERIOD 30 MINUTES) ON s.id = o.id;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NTUwNg==", "bodyText": "Shouldn't it be valid to have different grace periods on different windows? Why would we want to auto-set it for the other window? I think you understand something I don't \ud83d\ude02", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r486675506", "createdAt": "2020-09-10T22:48:13Z", "author": {"login": "agavra"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.\n+\n+## LOEs and Delivery Milestones\n+\n+Small LOE - under 2 weeks of engineering time to deliver the syntax and implementation.\n+\n+## Documentation Updates\n+\n+The entry in `join-streams-and-tables.md` will be updated to include the following:\n+\n+```md\n+When you join two streams, you must specify a WITHIN clause for matching\n+records that both occur within a specified time interval and optionally a\n+grace period. The WITHIN clause will specify the \"look back\" period on \n+the non-triggering stream while the grace period will define how late a record\n+may arrive before being processed.\n+\n+For valid time units, see [Time Units](../syntax-reference.md#time-units).\n+\n+Here's an example stream-stream-stream join that combines `orders`, `payments` and `shipments` \n+streams. The resulting ``shipped_orders`` stream contains all orders paid within 1 hour of when\n+the order was placed, and shipped within 2 hours of the payment being received. \n+\n+   CREATE STREAM shipped_orders AS\n+     SELECT \n+        o.id as orderId \n+        o.itemid as itemId,\n+        s.id as shipmentId,\n+        p.id as paymentId\n+     FROM orders o\n+        INNER JOIN payments p WITHIN 1 HOURS ON p.id = o.id\n+        INNER JOIN shipments s WITHIN (SIZE 2 HOURS, GRACE PERIOD 30 MINUTES) ON s.id = o.id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MTAwMg=="}, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4NTI3Mg==", "bodyText": "Well, you can of course allow this, but it won't buy the user anything (depending on the order of the joins). It seems the lower grace period of the second join limits what you get in your result anyway? If the first join allows to join two records that are 20h old, the result timestamp of the intermediate record would be 20h, too, and thus the second join would drop it.\nThere would be some details to figure out, ie, maybe think hard (or formally prove) that it's safe to reduce the grace period (but this might not necessarily be part of the KLIP I guess -- was just a thought and we might want to track it at least with a ticket).", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r486685272", "createdAt": "2020-09-10T23:19:21Z", "author": {"login": "mjsax"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.\n+\n+## LOEs and Delivery Milestones\n+\n+Small LOE - under 2 weeks of engineering time to deliver the syntax and implementation.\n+\n+## Documentation Updates\n+\n+The entry in `join-streams-and-tables.md` will be updated to include the following:\n+\n+```md\n+When you join two streams, you must specify a WITHIN clause for matching\n+records that both occur within a specified time interval and optionally a\n+grace period. The WITHIN clause will specify the \"look back\" period on \n+the non-triggering stream while the grace period will define how late a record\n+may arrive before being processed.\n+\n+For valid time units, see [Time Units](../syntax-reference.md#time-units).\n+\n+Here's an example stream-stream-stream join that combines `orders`, `payments` and `shipments` \n+streams. The resulting ``shipped_orders`` stream contains all orders paid within 1 hour of when\n+the order was placed, and shipped within 2 hours of the payment being received. \n+\n+   CREATE STREAM shipped_orders AS\n+     SELECT \n+        o.id as orderId \n+        o.itemid as itemId,\n+        s.id as shipmentId,\n+        p.id as paymentId\n+     FROM orders o\n+        INNER JOIN payments p WITHIN 1 HOURS ON p.id = o.id\n+        INNER JOIN shipments s WITHIN (SIZE 2 HOURS, GRACE PERIOD 30 MINUTES) ON s.id = o.id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MTAwMg=="}, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwNDkxMA==", "bodyText": "I figured your reasoning would be something along those lines, but I wasn't sure that that hold for all window size/grace period combinations. I need to wrap my head around it a little more (I'll try to get back with a more concrete example), but I'm not convinced that that's always safe to drop - e.g. what would happen if the second window size was much larger than the first window size in your example?", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r486704910", "createdAt": "2020-09-11T00:28:25Z", "author": {"login": "agavra"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.\n+\n+## LOEs and Delivery Milestones\n+\n+Small LOE - under 2 weeks of engineering time to deliver the syntax and implementation.\n+\n+## Documentation Updates\n+\n+The entry in `join-streams-and-tables.md` will be updated to include the following:\n+\n+```md\n+When you join two streams, you must specify a WITHIN clause for matching\n+records that both occur within a specified time interval and optionally a\n+grace period. The WITHIN clause will specify the \"look back\" period on \n+the non-triggering stream while the grace period will define how late a record\n+may arrive before being processed.\n+\n+For valid time units, see [Time Units](../syntax-reference.md#time-units).\n+\n+Here's an example stream-stream-stream join that combines `orders`, `payments` and `shipments` \n+streams. The resulting ``shipped_orders`` stream contains all orders paid within 1 hour of when\n+the order was placed, and shipped within 2 hours of the payment being received. \n+\n+   CREATE STREAM shipped_orders AS\n+     SELECT \n+        o.id as orderId \n+        o.itemid as itemId,\n+        s.id as shipmentId,\n+        p.id as paymentId\n+     FROM orders o\n+        INNER JOIN payments p WITHIN 1 HOURS ON p.id = o.id\n+        INNER JOIN shipments s WITHIN (SIZE 2 HOURS, GRACE PERIOD 30 MINUTES) ON s.id = o.id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MTAwMg=="}, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwNTk5NQ==", "bodyText": "Agreed. It's not totally straightforward when we can do what... And as I said, we don't need to make it part of the KLIP. But we should have a ticket \"Optimize grace periods for chained stream-stream joins\" (maybe with one or two illustrating examples) -- just to make sure we get to it at some point. We also don't need to implement it as part of the KLIP.", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r486705995", "createdAt": "2020-09-11T00:32:36Z", "author": {"login": "mjsax"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.\n+\n+## LOEs and Delivery Milestones\n+\n+Small LOE - under 2 weeks of engineering time to deliver the syntax and implementation.\n+\n+## Documentation Updates\n+\n+The entry in `join-streams-and-tables.md` will be updated to include the following:\n+\n+```md\n+When you join two streams, you must specify a WITHIN clause for matching\n+records that both occur within a specified time interval and optionally a\n+grace period. The WITHIN clause will specify the \"look back\" period on \n+the non-triggering stream while the grace period will define how late a record\n+may arrive before being processed.\n+\n+For valid time units, see [Time Units](../syntax-reference.md#time-units).\n+\n+Here's an example stream-stream-stream join that combines `orders`, `payments` and `shipments` \n+streams. The resulting ``shipped_orders`` stream contains all orders paid within 1 hour of when\n+the order was placed, and shipped within 2 hours of the payment being received. \n+\n+   CREATE STREAM shipped_orders AS\n+     SELECT \n+        o.id as orderId \n+        o.itemid as itemId,\n+        s.id as shipmentId,\n+        p.id as paymentId\n+     FROM orders o\n+        INNER JOIN payments p WITHIN 1 HOURS ON p.id = o.id\n+        INNER JOIN shipments s WITHIN (SIZE 2 HOURS, GRACE PERIOD 30 MINUTES) ON s.id = o.id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MTAwMg=="}, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3MDgwMA==", "bodyText": "I am a bit confused here by terminology. The WITHIN clause applies to the non-triggering join argument/to the join argument on which it is specified? This means, in this example that we check the timestamp of the record of payments? And the GRACE clause applies as well to the join argument on which it is specified? In this example, shipments? So, to accept out-of-order records we just check the timestamp of shipment records?", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r490470800", "createdAt": "2020-09-17T18:30:59Z", "author": {"login": "vpapavas"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.\n+\n+## LOEs and Delivery Milestones\n+\n+Small LOE - under 2 weeks of engineering time to deliver the syntax and implementation.\n+\n+## Documentation Updates\n+\n+The entry in `join-streams-and-tables.md` will be updated to include the following:\n+\n+```md\n+When you join two streams, you must specify a WITHIN clause for matching\n+records that both occur within a specified time interval and optionally a\n+grace period. The WITHIN clause will specify the \"look back\" period on \n+the non-triggering stream while the grace period will define how late a record\n+may arrive before being processed.\n+\n+For valid time units, see [Time Units](../syntax-reference.md#time-units).\n+\n+Here's an example stream-stream-stream join that combines `orders`, `payments` and `shipments` \n+streams. The resulting ``shipped_orders`` stream contains all orders paid within 1 hour of when\n+the order was placed, and shipped within 2 hours of the payment being received. \n+\n+   CREATE STREAM shipped_orders AS\n+     SELECT \n+        o.id as orderId \n+        o.itemid as itemId,\n+        s.id as shipmentId,\n+        p.id as paymentId\n+     FROM orders o\n+        INNER JOIN payments p WITHIN 1 HOURS ON p.id = o.id\n+        INNER JOIN shipments s WITHIN (SIZE 2 HOURS, GRACE PERIOD 30 MINUTES) ON s.id = o.id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MTAwMg=="}, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIyOTgyMQ==", "bodyText": "The grace period is base on \"stream-time\" progress. Ie, if an out-of-order record comes in, with ts < stream-time - grace-period the record is dropped. So records from either input may be dropped as late. Note that \"stream-time\" is advanced based on records of both input streams.\nDoes this answer your question?", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r491229821", "createdAt": "2020-09-18T23:06:42Z", "author": {"login": "mjsax"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.\n+\n+## LOEs and Delivery Milestones\n+\n+Small LOE - under 2 weeks of engineering time to deliver the syntax and implementation.\n+\n+## Documentation Updates\n+\n+The entry in `join-streams-and-tables.md` will be updated to include the following:\n+\n+```md\n+When you join two streams, you must specify a WITHIN clause for matching\n+records that both occur within a specified time interval and optionally a\n+grace period. The WITHIN clause will specify the \"look back\" period on \n+the non-triggering stream while the grace period will define how late a record\n+may arrive before being processed.\n+\n+For valid time units, see [Time Units](../syntax-reference.md#time-units).\n+\n+Here's an example stream-stream-stream join that combines `orders`, `payments` and `shipments` \n+streams. The resulting ``shipped_orders`` stream contains all orders paid within 1 hour of when\n+the order was placed, and shipped within 2 hours of the payment being received. \n+\n+   CREATE STREAM shipped_orders AS\n+     SELECT \n+        o.id as orderId \n+        o.itemid as itemId,\n+        s.id as shipmentId,\n+        p.id as paymentId\n+     FROM orders o\n+        INNER JOIN payments p WITHIN 1 HOURS ON p.id = o.id\n+        INNER JOIN shipments s WITHIN (SIZE 2 HOURS, GRACE PERIOD 30 MINUTES) ON s.id = o.id;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3MTAwMg=="}, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTA1NzE3OnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDo0NDo0MFrOHVhwgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMDo0NDo0MFrOHVhwgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMzNTIzMw==", "bodyText": "We should probably avoid breaking changes in the syntax until we have a mechanism for dealing with them and supporting multiple language versions.  That said, I guess the KLIP can still detail what the final outcome should be, even if we delay implementing the breaking change for a bit.", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r492335233", "createdAt": "2020-09-21T20:44:40Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.\n+\n+## LOEs and Delivery Milestones\n+\n+Small LOE - under 2 weeks of engineering time to deliver the syntax and implementation.\n+\n+## Documentation Updates\n+\n+The entry in `join-streams-and-tables.md` will be updated to include the following:\n+\n+```md\n+When you join two streams, you must specify a WITHIN clause for matching\n+records that both occur within a specified time interval and optionally a\n+grace period. The WITHIN clause will specify the \"look back\" period on \n+the non-triggering stream while the grace period will define how late a record\n+may arrive before being processed.\n+\n+For valid time units, see [Time Units](../syntax-reference.md#time-units).\n+\n+Here's an example stream-stream-stream join that combines `orders`, `payments` and `shipments` \n+streams. The resulting ``shipped_orders`` stream contains all orders paid within 1 hour of when\n+the order was placed, and shipped within 2 hours of the payment being received. \n+\n+   CREATE STREAM shipped_orders AS\n+     SELECT \n+        o.id as orderId \n+        o.itemid as itemId,\n+        s.id as shipmentId,\n+        p.id as paymentId\n+     FROM orders o\n+        INNER JOIN payments p WITHIN 1 HOURS ON p.id = o.id\n+        INNER JOIN shipments s WITHIN (SIZE 2 HOURS, GRACE PERIOD 30 MINUTES) ON s.id = o.id;\n+```\n+\n+## Compatibility Implications\n+\n+- We should consider whether we want to support the older syntax or require all new joins\n+    to use the `(SIZE <size>, GRACE PERIOD <size>)` syntax (noting that `GRACE PERIOD` will\n+    be optional).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MzQ5ODgyOnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjo0NDoyOFrOHV4LMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTo1NjozMVrOHW-tqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcwMjUxMg==", "bodyText": "It's too bad there's no easy way to automate this. I was wondering if we could do something similar to KsMaterializationFunctionalTest which verifies retention for windowed aggregates (link) but we'd have to expose the state stores for that which feels like overkill for purposes of testing.", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r492702512", "createdAt": "2020-09-22T12:44:28Z", "author": {"login": "vcrfxia"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1ODIxOQ==", "bodyText": "I think the saving grace here is that we can test that we properly set the grace period, and then trust that Kafka Streams tests their public APIs (we can't test everything in Kafka Streams - but that's OK)", "url": "https://github.com/confluentinc/ksql/pull/6175#discussion_r493858219", "createdAt": "2020-09-23T19:56:31Z", "author": {"login": "agavra"}, "path": "design-proposals/klip-36-grace-stream-stream-joins.md", "diffHunk": "@@ -0,0 +1,102 @@\n+# KLIP 36 - GRACE period for stream-stream joins\n+\n+**Author**: agavra | \n+**Release Target**: 0.14 | \n+**Status**: In Discussion | \n+**Discussion**: TBD\n+\n+**tl;dr:** _Support controlling the GRACE period for a stream-stream join to improve disk space\n+utilization for small windows_\n+           \n+## Motivation and background\n+\n+As described in https://github.com/confluentinc/ksql/issues/6152, the ability to specify\n+the grace period for stream-stream joins allows more control over the disk space utilization.\n+This is because a window needs to stay on disk until the grace period has elapsed in order to\n+ensure that any events that come in timestamped during an old window can be processed as long\n+as the grace period is active. This means that for windows dramatically smaller than the grace\n+period (e.g. a minute) we need to keep that level of granularity for the default 24 hour window.\n+\n+## What is in scope\n+\n+- Syntax for specifying grace period within stream-stream joins\n+\n+## What is not in scope\n+\n+- N/A\n+\n+## Value/Return\n+\n+Enables onboarding use cases that perform stream-stream joins on high cardinality, high throughput\n+datasets with small windows without exhausting too much disk space.\n+\n+## Public APIS\n+\n+Stream-stream joins require use of `WITHIN` clauses:\n+\n+```\n+JOIN <stream> WITHIN <time unit> ON <condition>\n+```\n+\n+This will be expanded to support a more complex `withinExpression` that leverages the same\n+syntax as aggregation windows:\n+\n+```\n+JOIN <stream> WITHIN (SIZE <time unit>, GRACE PERIOD <time unit>) ON <condition>\n+```\n+\n+The old syntax will still be supported for backwards compatibility.\n+\n+## Design\n+\n+The `WITHIN` clause will be converted into a `KsqlWindowExpression`, and then converted into\n+a `JoinWindows grace(final Duration afterWindowEnd)` call on the `JoinWindows` in the \n+`StreamStreamJoinBuilder`.\n+\n+## Test plan\n+\n+We will add the usual QTT tests to ensure that the system respects the new retention limits\n+and manually test to ensure that we clean up the RocksDB state for expired windows.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcwMjUxMg=="}, "originalCommit": {"oid": "bc8c0fb147df1c95a87ca2610c1f89a6ccf98e18"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2753, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}