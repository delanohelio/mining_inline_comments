{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MjQ1NTY3", "number": 5962, "title": "feat: Support [IF EXISTS] on DROP TYPE command", "bodyText": "Description\nAdd support for IF EXISTS on the DROP TYPE command.\nNew syntax:\nDROP TYPE [IF EXISTS] <type_name>;\n\nIf the IF EXISTS is specified, then the command should not throw any error if the type does not exist.\nTesting done\nAdded unit tests\nVerified manually\nksql> drop type address;\nType ADDRESS does not exist.\n\nksql> drop type if exists address;\n\n Message                       \n-------------------------------\n Type 'ADDRESS' does not exist \n-------------------------------\n\nThe above works similar to DROP STREAM [IF EXISTS]\nksql> drop stream a;\nSource A does not exist.\n\nksql> drop stream if exists a;\n\n Message                    \n----------------------------\n Source `A` does not exist. \n----------------------------\n\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-08-06T20:24:11Z", "url": "https://github.com/confluentinc/ksql/pull/5962", "merged": true, "mergeCommit": {"oid": "431c2ff651a455d1c327616fa7f8bd005ffe79f4"}, "closed": true, "closedAt": "2020-08-07T17:44:00Z", "author": {"login": "spena"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8lu2gAFqTQ2MzM3NTQ2OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8muLPABqjM2MzM4NDkyOTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMzc1NDY4", "url": "https://github.com/confluentinc/ksql/pull/5962#pullrequestreview-463375468", "createdAt": "2020-08-07T14:49:43Z", "commit": {"oid": "ad5961d5dfe6477421e6c3f796273720bc131cfe"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo0OTo0M1rOG9c3lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo1NzowMFrOG9dJFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4OTMwMQ==", "bodyText": "nit: not visible for testing only. Used by production code,, right?", "url": "https://github.com/confluentinc/ksql/pull/5962#discussion_r467089301", "createdAt": "2020-08-07T14:49:43Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DropTypeFactory.java", "diffHunk": "@@ -15,14 +15,32 @@\n \n package io.confluent.ksql.ddl.commands;\n \n+import com.google.common.annotations.VisibleForTesting;\n import io.confluent.ksql.execution.ddl.commands.DropTypeCommand;\n+import io.confluent.ksql.metastore.MetaStore;\n import io.confluent.ksql.parser.DropType;\n+import io.confluent.ksql.util.KsqlException;\n+\n+import java.util.Objects;\n \n public class DropTypeFactory {\n-  DropTypeFactory() {\n+  private final MetaStore metaStore;\n+\n+  @VisibleForTesting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad5961d5dfe6477421e6c3f796273720bc131cfe"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5MDc4NA==", "bodyText": "No need to search the metastore when ifExists is true.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!metaStore.resolveType(typeName).isPresent()) {\n          \n          \n            \n                  if (!ifExists) {\n          \n          \n            \n                    throw new KsqlException(\"Type \" + typeName + \" does not exist.\");\n          \n          \n            \n                  }\n          \n          \n            \n                }\n          \n          \n            \n                if (!ifExists && !metaStore.resolveType(typeName).isPresent()) {\n          \n          \n            \n                  throw new KsqlException(\"Type \" + typeName + \" does not exist.\");\n          \n          \n            \n                }", "url": "https://github.com/confluentinc/ksql/pull/5962#discussion_r467090784", "createdAt": "2020-08-07T14:51:59Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DropTypeFactory.java", "diffHunk": "@@ -15,14 +15,32 @@\n \n package io.confluent.ksql.ddl.commands;\n \n+import com.google.common.annotations.VisibleForTesting;\n import io.confluent.ksql.execution.ddl.commands.DropTypeCommand;\n+import io.confluent.ksql.metastore.MetaStore;\n import io.confluent.ksql.parser.DropType;\n+import io.confluent.ksql.util.KsqlException;\n+\n+import java.util.Objects;\n \n public class DropTypeFactory {\n-  DropTypeFactory() {\n+  private final MetaStore metaStore;\n+\n+  @VisibleForTesting\n+  DropTypeFactory(final MetaStore metaStore) {\n+    this.metaStore = Objects.requireNonNull(metaStore, \"metaStore\");\n   }\n \n   public DropTypeCommand create(final DropType statement) {\n-    return new DropTypeCommand(statement.getTypeName());\n+    final String typeName = statement.getTypeName();\n+    final boolean ifExists = statement.getIfExists();\n+\n+    if (!metaStore.resolveType(typeName).isPresent()) {\n+      if (!ifExists) {\n+        throw new KsqlException(\"Type \" + typeName + \" does not exist.\");\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad5961d5dfe6477421e6c3f796273720bc131cfe"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5MzE5Ng==", "bodyText": "I'm a little confused by the name of this test.   What's the OnMissingName mean?\nIt looks to test that the function returns a cmd when ifExists is true and the type does exist.  That being the case, maybe call it shouldCreateDropTypeForExistingTypeAndIfExistsSet or similar?", "url": "https://github.com/confluentinc/ksql/pull/5962#discussion_r467093196", "createdAt": "2020-08-07T14:56:03Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/DropTypeFactoryTest.java", "diffHunk": "@@ -16,27 +16,79 @@\n package io.confluent.ksql.ddl.commands;\n \n import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertThrows;\n+import static org.mockito.Mockito.when;\n \n import io.confluent.ksql.execution.ddl.commands.DropTypeCommand;\n+import io.confluent.ksql.metastore.MetaStore;\n+import io.confluent.ksql.metastore.TypeRegistry;\n import io.confluent.ksql.parser.DropType;\n import java.util.Optional;\n+\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.util.KsqlException;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+@RunWith(MockitoJUnitRunner.class)\n public class DropTypeFactoryTest {\n   private static final String SOME_TYPE_NAME = \"some_type\";\n \n-  private final DropTypeFactory factory = new DropTypeFactory();\n+  private DropTypeFactory factory;\n+\n+  @Mock\n+  private MetaStore metaStore;\n+  @Mock\n+  private SqlType customType;\n+\n+  @Before\n+  public void setUp() {\n+    when(metaStore.resolveType(SOME_TYPE_NAME)).thenReturn(Optional.of(customType));\n+\n+    factory = new DropTypeFactory(metaStore);\n+  }\n \n   @Test\n   public void shouldCreateDropType() {\n     // Given:\n-    final DropType dropType = new DropType(Optional.empty(), SOME_TYPE_NAME);\n+    final DropType dropType = new DropType(Optional.empty(), SOME_TYPE_NAME, false);\n \n     // When:\n     final DropTypeCommand cmd = factory.create(dropType);\n \n     // Then:\n     assertThat(cmd.getTypeName(), equalTo(SOME_TYPE_NAME));\n   }\n+\n+  @Test\n+  public void shouldCreateTypeOnMissingNameWithIfExists() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad5961d5dfe6477421e6c3f796273720bc131cfe"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5MzQxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldFailCreateTypeOnMissingName() {\n          \n          \n            \n              public void shouldFailCreateTypeIfTypeDoesNotExist) {", "url": "https://github.com/confluentinc/ksql/pull/5962#discussion_r467093416", "createdAt": "2020-08-07T14:56:26Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/DropTypeFactoryTest.java", "diffHunk": "@@ -16,27 +16,79 @@\n package io.confluent.ksql.ddl.commands;\n \n import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertThrows;\n+import static org.mockito.Mockito.when;\n \n import io.confluent.ksql.execution.ddl.commands.DropTypeCommand;\n+import io.confluent.ksql.metastore.MetaStore;\n+import io.confluent.ksql.metastore.TypeRegistry;\n import io.confluent.ksql.parser.DropType;\n import java.util.Optional;\n+\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.util.KsqlException;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+@RunWith(MockitoJUnitRunner.class)\n public class DropTypeFactoryTest {\n   private static final String SOME_TYPE_NAME = \"some_type\";\n \n-  private final DropTypeFactory factory = new DropTypeFactory();\n+  private DropTypeFactory factory;\n+\n+  @Mock\n+  private MetaStore metaStore;\n+  @Mock\n+  private SqlType customType;\n+\n+  @Before\n+  public void setUp() {\n+    when(metaStore.resolveType(SOME_TYPE_NAME)).thenReturn(Optional.of(customType));\n+\n+    factory = new DropTypeFactory(metaStore);\n+  }\n \n   @Test\n   public void shouldCreateDropType() {\n     // Given:\n-    final DropType dropType = new DropType(Optional.empty(), SOME_TYPE_NAME);\n+    final DropType dropType = new DropType(Optional.empty(), SOME_TYPE_NAME, false);\n \n     // When:\n     final DropTypeCommand cmd = factory.create(dropType);\n \n     // Then:\n     assertThat(cmd.getTypeName(), equalTo(SOME_TYPE_NAME));\n   }\n+\n+  @Test\n+  public void shouldCreateTypeOnMissingNameWithIfExists() {\n+    // Given:\n+    final DropType dropType = new DropType(Optional.empty(), SOME_TYPE_NAME, true);\n+\n+    // When:\n+    final DropTypeCommand cmd = factory.create(dropType);\n+\n+    // Then:\n+    assertThat(cmd.getTypeName(), equalTo(SOME_TYPE_NAME));\n+  }\n+\n+  @Test\n+  public void shouldFailCreateTypeOnMissingName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad5961d5dfe6477421e6c3f796273720bc131cfe"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5Mzc4Mg==", "bodyText": "You're missing a test to ensure it doesn't throw when the type doesn't exist and ifExists is false.", "url": "https://github.com/confluentinc/ksql/pull/5962#discussion_r467093782", "createdAt": "2020-08-07T14:57:00Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/DropTypeFactoryTest.java", "diffHunk": "@@ -16,27 +16,79 @@\n package io.confluent.ksql.ddl.commands;\n \n import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.Assert.assertThrows;\n+import static org.mockito.Mockito.when;\n \n import io.confluent.ksql.execution.ddl.commands.DropTypeCommand;\n+import io.confluent.ksql.metastore.MetaStore;\n+import io.confluent.ksql.metastore.TypeRegistry;\n import io.confluent.ksql.parser.DropType;\n import java.util.Optional;\n+\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.util.KsqlException;\n+import org.junit.Before;\n import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n \n+@RunWith(MockitoJUnitRunner.class)\n public class DropTypeFactoryTest {\n   private static final String SOME_TYPE_NAME = \"some_type\";\n \n-  private final DropTypeFactory factory = new DropTypeFactory();\n+  private DropTypeFactory factory;\n+\n+  @Mock\n+  private MetaStore metaStore;\n+  @Mock\n+  private SqlType customType;\n+\n+  @Before\n+  public void setUp() {\n+    when(metaStore.resolveType(SOME_TYPE_NAME)).thenReturn(Optional.of(customType));\n+\n+    factory = new DropTypeFactory(metaStore);\n+  }\n \n   @Test\n   public void shouldCreateDropType() {\n     // Given:\n-    final DropType dropType = new DropType(Optional.empty(), SOME_TYPE_NAME);\n+    final DropType dropType = new DropType(Optional.empty(), SOME_TYPE_NAME, false);\n \n     // When:\n     final DropTypeCommand cmd = factory.create(dropType);\n \n     // Then:\n     assertThat(cmd.getTypeName(), equalTo(SOME_TYPE_NAME));\n   }\n+\n+  @Test\n+  public void shouldCreateTypeOnMissingNameWithIfExists() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad5961d5dfe6477421e6c3f796273720bc131cfe"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0ae0eb5eafd9b8b5da180717d084294abbfc938", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/e0ae0eb5eafd9b8b5da180717d084294abbfc938", "committedDate": "2020-08-07T16:08:13Z", "message": "feat: Support [IF EXISTS] on DROP TYPE command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f388903782754e7f3b3418f6c50326adc9226c57", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/f388903782754e7f3b3418f6c50326adc9226c57", "committedDate": "2020-08-07T16:08:13Z", "message": "test: add and update unit tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ad5961d5dfe6477421e6c3f796273720bc131cfe", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/ad5961d5dfe6477421e6c3f796273720bc131cfe", "committedDate": "2020-08-06T20:20:24Z", "message": "feat: Support [IF EXISTS] on DROP TYPE command"}, "afterCommit": {"oid": "f388903782754e7f3b3418f6c50326adc9226c57", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/f388903782754e7f3b3418f6c50326adc9226c57", "committedDate": "2020-08-07T16:08:13Z", "message": "test: add and update unit tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4792, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}