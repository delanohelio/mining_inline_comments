{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMjAwMjQz", "number": 6164, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMzo1Njo0M1rOElJcjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODo0MTozOFrOEmN7Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Mzg3NTMyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMzo1Njo0M1rOHUe2-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMzo1OToxNFrOHUe4jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzOTE2Mg==", "bodyText": "I think it's best to just early exit if we see that there's corruption, instead of calling backupRecord again. I know it's safe to keep calling backupRecord, but generally when we see that the current state isn't what we expect it's best to just bail. So I'd rewrite this as:\nfor (ConsumerRecord<byte[], []> r : iterable) {\n    backupRecord(r);\n    if (commandTopicBackup.commandTopicCorruption()) {\n        return records;\n    }\n    records.add(record);\n}\nreturn records;", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r491239162", "createdAt": "2020-09-18T23:56:43Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "diffHunk": "@@ -79,12 +80,18 @@ public void start() {\n \n   public Iterable<ConsumerRecord<byte[], byte[]>> getNewCommands(final Duration timeout) {\n     final Iterable<ConsumerRecord<byte[], byte[]>> iterable = commandConsumer.poll(timeout);\n+    final List<ConsumerRecord<byte[], byte[]>> records = new ArrayList<>();\n \n     if (iterable != null) {\n-      iterable.forEach(this::backupRecord);\n+      iterable.forEach(record -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51e6e1c1b74502411dc3442890f55fe192ff347"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzOTU2Nw==", "bodyText": "you could also have backupRecord return a boolean rather than calling commandTopicCorruption() to simplify this a bit.", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r491239567", "createdAt": "2020-09-18T23:59:14Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "diffHunk": "@@ -79,12 +80,18 @@ public void start() {\n \n   public Iterable<ConsumerRecord<byte[], byte[]>> getNewCommands(final Duration timeout) {\n     final Iterable<ConsumerRecord<byte[], byte[]>> iterable = commandConsumer.poll(timeout);\n+    final List<ConsumerRecord<byte[], byte[]>> records = new ArrayList<>();\n \n     if (iterable != null) {\n-      iterable.forEach(this::backupRecord);\n+      iterable.forEach(record -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzOTE2Mg=="}, "originalCommit": {"oid": "d51e6e1c1b74502411dc3442890f55fe192ff347"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Mzg4MDI5OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMDowMDo1M1rOHUe5oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODoxNTo0M1rOHVc6IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzOTg0MQ==", "bodyText": "can we condense these 2 into 1 config? if the backup location is set then just enable backups. Also why do we ever want to disable backups?", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r491239841", "createdAt": "2020-09-19T00:00:53Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -656,14 +656,30 @@ static KsqlRestApplication buildApplication(\n \n     final String commandTopicName = ReservedInternalTopics.commandTopic(ksqlConfig);\n \n+    CommandTopicBackup commandTopicBackup = new CommandTopicBackupNoOp();\n+    if (ksqlConfig.getBoolean(KsqlConfig.KSQL_ENABLE_METASTORE_BACKUP)) {\n+      if (ksqlConfig.getString(KsqlConfig.KSQL_METASTORE_BACKUP_LOCATION).isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51e6e1c1b74502411dc3442890f55fe192ff347"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1NTc3Ng==", "bodyText": "I've combined the configs now. @spena do you know the scenario for turning off backups?", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r492255776", "createdAt": "2020-09-21T18:15:43Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -656,14 +656,30 @@ static KsqlRestApplication buildApplication(\n \n     final String commandTopicName = ReservedInternalTopics.commandTopic(ksqlConfig);\n \n+    CommandTopicBackup commandTopicBackup = new CommandTopicBackupNoOp();\n+    if (ksqlConfig.getBoolean(KsqlConfig.KSQL_ENABLE_METASTORE_BACKUP)) {\n+      if (ksqlConfig.getString(KsqlConfig.KSQL_METASTORE_BACKUP_LOCATION).isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIzOTg0MQ=="}, "originalCommit": {"oid": "d51e6e1c1b74502411dc3442890f55fe192ff347"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzkwMDE1OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/CommandRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMDoxOTowMFrOHUfEIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMjozNzozMFrOHVkyHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0MjUzMQ==", "bodyText": "I think all our state tracking logic in this class can be simplified. The current pattern is to set a bunch of booleans and compute status from every request. This logic is getting pretty complex, and we're polluting the interface here with a bunch of status-getting methods (e.g. getStatus, getDegradedReason, getDegradedMsg, etc). I think it would be simpler to just have the command runner explicitly set the status:\npublic static enum CommandRunnerDegradedReason {\n    Function<Errors, String> msgFactory;\n\n    public String getMsg(final Errors errors) {\n        return msgFactory(errors);\n    }\n\n    CommandRunnerDegradedReason(Function<Errors, String> msgFactory) {\n        this.msgFactory = msgFactory;\n    }\n\n    NONE(errors -> \"\"),\n    CORRUPTED(Errors:: commandRunnerDegradedBackupCorruptedErrorMessage),\n    INCOMPATIBLE_COMMAND(Errrors:: commandRunnerDegradedIncompatibleCommandsErrorMessage)\n}\n\npublic static class Status {\n    CommandRunnerStatus state;\n    Optional<CommandRunnerDegradedReason> degradedReason;\n\n    public CommandRunnerStatus getState() {\n        return state;\n    }\n    public CommandRunnerDegradedReason getDegradedReason() {\n        return degradedReason;\n    }\n}\n\nprivate Status state = new Status(RUNNING, Optional.empty());\n\npublic Status getState() {\n    return State; \n} \n\npublic void run() {\n    try {\n        while (!closed) {\n            if (incompatibleCommandDetected) {\n                state = new Status(DEGRADED, Optional.of(INCOMPATIBLE_COMMAND))\n                closeEarly(); \n            }  else if (backup.corrupted()) {\n                state = new Status(DEGRADED, Optional.of(CORRUPTED))\n                closeEarly(); \n            } else {\n                 \u2026\n\u2026", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r491242531", "createdAt": "2020-09-19T00:19:00Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/CommandRunner.java", "diffHunk": "@@ -16,7 +16,9 @@\n package io.confluent.ksql.rest.server.computation;\n \n import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.ksql.rest.Errors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51e6e1c1b74502411dc3442890f55fe192ff347"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM4NDc5Ng==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r492384796", "createdAt": "2020-09-21T22:37:30Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/CommandRunner.java", "diffHunk": "@@ -16,7 +16,9 @@\n package io.confluent.ksql.rest.server.computation;\n \n import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.ksql.rest.Errors;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0MjUzMQ=="}, "originalCommit": {"oid": "d51e6e1c1b74502411dc3442890f55fe192ff347"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzkwMjA1OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMDoyMDozNlrOHUfFIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMDoyMDozNlrOHUfFIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0Mjc4Ng==", "bodyText": "going to remove this?", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r491242786", "createdAt": "2020-09-19T00:20:36Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java", "diffHunk": "@@ -280,23 +284,25 @@ public EndpointResponse handleKsqlStatements(\n       );\n \n       LOG.info(\"Processed successfully: \" + request);\n-      addCommandRunnerDegradedWarning(\n+      addCommandRunnerWarning(\n           entities,\n-          errorHandler,\n-          () -> commandRunner.checkCommandRunnerStatus()\n-              == CommandRunner.CommandRunnerStatus.DEGRADED);\n+          commandRunnerWarning);\n       return EndpointResponse.ok(entities);\n     } catch (final KsqlRestException e) {\n       LOG.info(\"Processed unsuccessfully: \" + request + \", reason: \" + e.getMessage());\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51e6e1c1b74502411dc3442890f55fe192ff347"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzkwMzIzOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/computation/CommandRunnerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMDoyMTo0NVrOHUfFww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODowNDoyOFrOHVch3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0Mjk0Nw==", "bodyText": "Can we add test cases that ensure that within a batch, we process everything that is valid (so all commands for which the version is valid, and all commands up to the backup corruption point)?", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r491242947", "createdAt": "2020-09-19T00:21:45Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/computation/CommandRunnerTest.java", "diffHunk": "@@ -286,9 +300,32 @@ public void shouldProcessPartialListOfCommandsOnIncomaptibleCommandInFetch() {\n     inOrder.verify(statementExecutor).handleRestore(eq(queuedCommand2));\n \n     assertThat(commandRunner.checkCommandRunnerStatus(), is(CommandRunner.CommandRunnerStatus.DEGRADED));\n+    assertThat(commandRunner.getCommandRunnerDegradedWarning(), is(INCOMPATIBLE_COMMANDS_ERROR_MESSAGE));\n+    assertThat(commandRunner.getCommandRunnerDegradedReason(), is(CommandRunner.CommandRunnerDegradedReason.INCOMPATIBLE_COMMAND));\n     verify(statementExecutor, never()).handleRestore(queuedCommand3);\n   }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51e6e1c1b74502411dc3442890f55fe192ff347"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI0OTU2Ng==", "bodyText": "We're implicitly assuming that commands returned from the CommandStore aren't corrupted.\nI also don't think we're able to have fine tuned corruption detection in CommandRunner. Assuming we did have corrupted commands returned from the CommandStore in the batch, the function to check for corruption doesn't indicate which command is corrupted so all we'd know is that corruption was detected after the batch was fetched.\nThere should be existing tests testing when the incompatibleCommandChecker throws an exception while checking a batch and everything up to the incompatible command is processed by the InteractiveStatementExecutor", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r492249566", "createdAt": "2020-09-21T18:04:28Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/computation/CommandRunnerTest.java", "diffHunk": "@@ -286,9 +300,32 @@ public void shouldProcessPartialListOfCommandsOnIncomaptibleCommandInFetch() {\n     inOrder.verify(statementExecutor).handleRestore(eq(queuedCommand2));\n \n     assertThat(commandRunner.checkCommandRunnerStatus(), is(CommandRunner.CommandRunnerStatus.DEGRADED));\n+    assertThat(commandRunner.getCommandRunnerDegradedWarning(), is(INCOMPATIBLE_COMMANDS_ERROR_MESSAGE));\n+    assertThat(commandRunner.getCommandRunnerDegradedReason(), is(CommandRunner.CommandRunnerDegradedReason.INCOMPATIBLE_COMMAND));\n     verify(statementExecutor, never()).handleRestore(queuedCommand3);\n   }\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0Mjk0Nw=="}, "originalCommit": {"oid": "d51e6e1c1b74502411dc3442890f55fe192ff347"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzkyMDM3OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/CommandRunner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQwMDozNzo1NlrOHUfOog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODoxNTo1NlrOHVc6kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0NTIxOA==", "bodyText": "passing the backup here leaks an implementation detail of the command topic (that we're using a backup to detect corruption/deletion). Instead, let's extend the CommandStore interface to include a corruptionDetected method that returns a boolean that we use here.", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r491245218", "createdAt": "2020-09-19T00:37:56Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/CommandRunner.java", "diffHunk": "@@ -94,7 +107,9 @@ public CommandRunner(\n       final String ksqlServiceId,\n       final Duration commandRunnerHealthTimeout,\n       final String metricsGroupPrefix,\n-      final Deserializer<Command> commandDeserializer\n+      final Deserializer<Command> commandDeserializer,\n+      final CommandTopicBackup commandTopicBackup,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d51e6e1c1b74502411dc3442890f55fe192ff347"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI1NTg5MA==", "bodyText": "done", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r492255890", "createdAt": "2020-09-21T18:15:56Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/CommandRunner.java", "diffHunk": "@@ -94,7 +107,9 @@ public CommandRunner(\n       final String ksqlServiceId,\n       final Duration commandRunnerHealthTimeout,\n       final String metricsGroupPrefix,\n-      final Deserializer<Command> commandDeserializer\n+      final Deserializer<Command> commandDeserializer,\n+      final CommandTopicBackup commandTopicBackup,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTI0NTIxOA=="}, "originalCommit": {"oid": "d51e6e1c1b74502411dc3442890f55fe192ff347"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjA4OTQ1OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/CommandRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNTo0ODoyM1rOHVq_tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNTo0ODoyM1rOHVq_tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ4NjU4Mg==", "bodyText": "I'd drop these methods and just have 1 get CommandRunnerStatus() method that callers can call to get the current status, and then the caller can pull out the info that is of interest.", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r492486582", "createdAt": "2020-09-22T05:48:23Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/CommandRunner.java", "diffHunk": "@@ -346,14 +354,77 @@ public CommandQueue getCommandQueue() {\n     return commandStore;\n   }\n \n+  public CommandRunnerStatus checkCommandRunnerStatus() {\n+    if (state.getStatus() == CommandRunnerStatus.DEGRADED) {\n+      return CommandRunnerStatus.DEGRADED;\n+    }\n+\n+    final Pair<QueuedCommand, Instant> currentCommand = currentCommandRef.get();\n+    if (currentCommand == null) {\n+      state = lastPollTime.get() == null\n+          || Duration.between(lastPollTime.get(), clock.instant()).toMillis()\n+              < NEW_CMDS_TIMEOUT.toMillis() * 3\n+              ? new Status(CommandRunnerStatus.RUNNING, CommandRunnerDegradedReason.NONE)\n+                  : new Status(CommandRunnerStatus.ERROR, CommandRunnerDegradedReason.NONE);\n+      \n+    } else {\n+      state = Duration.between(currentCommand.right, clock.instant()).toMillis()\n+        < commandRunnerHealthTimeout.toMillis()\n+        ? new Status(CommandRunnerStatus.RUNNING, CommandRunnerDegradedReason.NONE)\n+              : new Status(CommandRunnerStatus.ERROR, CommandRunnerDegradedReason.NONE);\n+    }\n+\n+    return state.getStatus();\n+  }\n+\n+  public CommandRunnerDegradedReason getCommandRunnerDegradedReason() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3733265fac28c09f8c13515f42d419dadec4a0cb"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MjA5MjE3OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/CommandRunner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNTo0OTo1NFrOHVrBLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNTo0OTo1NFrOHVrBLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ4Njk1Ng==", "bodyText": "nit: move all inner classes to the same place (beginning of the class)", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r492486956", "createdAt": "2020-09-22T05:49:54Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/CommandRunner.java", "diffHunk": "@@ -346,14 +354,77 @@ public CommandQueue getCommandQueue() {\n     return commandStore;\n   }\n \n+  public CommandRunnerStatus checkCommandRunnerStatus() {\n+    if (state.getStatus() == CommandRunnerStatus.DEGRADED) {\n+      return CommandRunnerStatus.DEGRADED;\n+    }\n+\n+    final Pair<QueuedCommand, Instant> currentCommand = currentCommandRef.get();\n+    if (currentCommand == null) {\n+      state = lastPollTime.get() == null\n+          || Duration.between(lastPollTime.get(), clock.instant()).toMillis()\n+              < NEW_CMDS_TIMEOUT.toMillis() * 3\n+              ? new Status(CommandRunnerStatus.RUNNING, CommandRunnerDegradedReason.NONE)\n+                  : new Status(CommandRunnerStatus.ERROR, CommandRunnerDegradedReason.NONE);\n+      \n+    } else {\n+      state = Duration.between(currentCommand.right, clock.instant()).toMillis()\n+        < commandRunnerHealthTimeout.toMillis()\n+        ? new Status(CommandRunnerStatus.RUNNING, CommandRunnerDegradedReason.NONE)\n+              : new Status(CommandRunnerStatus.ERROR, CommandRunnerDegradedReason.NONE);\n+    }\n+\n+    return state.getStatus();\n+  }\n+\n+  public CommandRunnerDegradedReason getCommandRunnerDegradedReason() {\n+    return state.getDegradedReason();\n+  }\n+\n+  public String getCommandRunnerDegradedWarning() {\n+    return getCommandRunnerDegradedReason().getMsg(errorHandler);\n+  }\n+\n+  public static class Status {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3733265fac28c09f8c13515f42d419dadec4a0cb"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTAwNDkwOnYy", "diffSide": "LEFT", "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODoxODoyOVrOHWGvhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODo1MToyMFrOHWH9OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0MTE5MA==", "bodyText": "I'm not sure if we should remove this config. The idea behind having two configs, one to enable/disable and one to specify the location, was to allow users to disable backups temporary without removing the location. This to ensure users won't incorrectly type the location. KSQL creates the directory if the location doesn't exist.\nAlso, initially I thought of specifying a default backup location, so users would only enable/disable. If we can do this by setting the default to the streams directory, then having the on/off config would be very beneficial.", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r492941190", "createdAt": "2020-09-22T18:18:29Z", "author": {"login": "spena"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -309,12 +309,6 @@\n   public static final String KSQL_CREATE_OR_REPLACE_ENABLED_DOC =\n       \"Feature flag for CREATE OR REPLACE\";\n \n-  public static final String KSQL_ENABLE_METASTORE_BACKUP = \"ksql.enable.metastore.backup\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a72b6db4a2c29c10d33ab4f18d0dc7067b43f90e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2MTA4MA==", "bodyText": "They could just comment out the the backup location config to disable temporarily though right?", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r492961080", "createdAt": "2020-09-22T18:51:20Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -309,12 +309,6 @@\n   public static final String KSQL_CREATE_OR_REPLACE_ENABLED_DOC =\n       \"Feature flag for CREATE OR REPLACE\";\n \n-  public static final String KSQL_ENABLE_METASTORE_BACKUP = \"ksql.enable.metastore.backup\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0MTE5MA=="}, "originalCommit": {"oid": "a72b6db4a2c29c10d33ab4f18d0dc7067b43f90e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTAxMDg1OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODoyMDoxNVrOHWGzZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODo1MToyNFrOHWH9Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0MjE4MQ==", "bodyText": "Is this finalCommandTopicBackup necessary? Seems you can use the same commandTopicBackup variable. It will have either the NoOp or the Impl instances.", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r492942181", "createdAt": "2020-09-22T18:20:15Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -657,14 +657,24 @@ static KsqlRestApplication buildApplication(\n \n     final String commandTopicName = ReservedInternalTopics.commandTopic(ksqlConfig);\n \n+    CommandTopicBackup commandTopicBackup = new CommandTopicBackupNoOp();\n+    if (!ksqlConfig.getString(KsqlConfig.KSQL_METASTORE_BACKUP_LOCATION).isEmpty()) {\n+      commandTopicBackup = new CommandTopicBackupImpl(\n+          ksqlConfig.getString(KsqlConfig.KSQL_METASTORE_BACKUP_LOCATION),\n+          commandTopicName\n+      );\n+    }\n+    final CommandTopicBackup finalCommandTopicBackup = commandTopicBackup;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a72b6db4a2c29c10d33ab4f18d0dc7067b43f90e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk2MTExMA==", "bodyText": "I think that was leftover from when I was passing the backup to the CommandRunner, which was later changed so that CommandRunner checks corruption from the CommandStore instead.\nI'll move this entire chunk of creating the backup back into the CommandStore again", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r492961110", "createdAt": "2020-09-22T18:51:24Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -657,14 +657,24 @@ static KsqlRestApplication buildApplication(\n \n     final String commandTopicName = ReservedInternalTopics.commandTopic(ksqlConfig);\n \n+    CommandTopicBackup commandTopicBackup = new CommandTopicBackupNoOp();\n+    if (!ksqlConfig.getString(KsqlConfig.KSQL_METASTORE_BACKUP_LOCATION).isEmpty()) {\n+      commandTopicBackup = new CommandTopicBackupImpl(\n+          ksqlConfig.getString(KsqlConfig.KSQL_METASTORE_BACKUP_LOCATION),\n+          commandTopicName\n+      );\n+    }\n+    final CommandTopicBackup finalCommandTopicBackup = commandTopicBackup;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0MjE4MQ=="}, "originalCommit": {"oid": "a72b6db4a2c29c10d33ab4f18d0dc7067b43f90e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTA0MDkzOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/CommandStore.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODoyNzoxNlrOHWHFQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODoyNzoxNlrOHWHFQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0Njc1Mw==", "bodyText": "Suggestion (up to you to change it):\nShouldn't we use a different term instead of corruption? For me, corruption means something happened in the backup file that cannot be read or deserialized (perhaps due to a file or line corrupted, missing byte or something). But in this case it's just the command topic is missing or the command topic is out of sync with the backup file. Perhaps syncErrorDetected ?\nSame comment about the commandTopicBackup.commandTopicCorruption()", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r492946753", "createdAt": "2020-09-22T18:27:16Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/computation/CommandStore.java", "diffHunk": "@@ -338,6 +328,11 @@ private long getCommandTopicOffset() {\n     }\n   }\n \n+  @Override\n+  public boolean corruptionDetected() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a72b6db4a2c29c10d33ab4f18d0dc7067b43f90e"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTA1OTM2OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODozMTo1NVrOHWHQUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODozMTo1NVrOHWHQUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0OTU4NQ==", "bodyText": "Should we log a WARN message here?", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r492949585", "createdAt": "2020-09-22T18:31:55Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "diffHunk": "@@ -79,12 +80,19 @@ public void start() {\n \n   public Iterable<ConsumerRecord<byte[], byte[]>> getNewCommands(final Duration timeout) {\n     final Iterable<ConsumerRecord<byte[], byte[]>> iterable = commandConsumer.poll(timeout);\n+    final List<ConsumerRecord<byte[], byte[]>> records = new ArrayList<>();\n \n     if (iterable != null) {\n-      iterable.forEach(this::backupRecord);\n+      for (ConsumerRecord<byte[], byte[]> record : iterable) {\n+        backupRecord(record);\n+        if (commandTopicBackup.commandTopicCorruption()) {\n+          return records;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a72b6db4a2c29c10d33ab4f18d0dc7067b43f90e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTA1OTg2OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODozMjowNFrOHWHQnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODozMjowNFrOHWHQnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk0OTY2MA==", "bodyText": "Should we log a WARN message here?", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r492949660", "createdAt": "2020-09-22T18:32:04Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "diffHunk": "@@ -100,6 +108,10 @@ public void start() {\n       log.debug(\"Received {} records from poll\", records.count());\n       for (final ConsumerRecord<byte[], byte[]> record : records) {\n         backupRecord(record);\n+        \n+        if (commandTopicBackup.commandTopicCorruption()) {\n+          return restoreCommands;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a72b6db4a2c29c10d33ab4f18d0dc7067b43f90e"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTA2NjA5OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopicBackupImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODozMzo1NVrOHWHUpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODozMzo1NVrOHWHUpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk1MDY5Mw==", "bodyText": "Can we throw an exception instead of logging this message? We should probably catch the error in the CommandTopic class instead of checking for the sync error. Whoever calls the writeCommandToBackup will know that the issue is not recoverable, so the exception is good to have. A log message is just informative, but the old method was actually doing something with that (i.e. creating a new backup file).", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r492950693", "createdAt": "2020-09-22T18:33:55Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopicBackupImpl.java", "diffHunk": "@@ -147,16 +151,20 @@ public void writeRecord(final ConsumerRecord<byte[], byte[]> record) {\n   }\n \n   void writeCommandToBackup(final ConsumerRecord<CommandId, Command> record) {\n+    if (corruptionDetected) {\n+      LOG.warn(\"Failure to write command topic data to backup. \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a72b6db4a2c29c10d33ab4f18d0dc7067b43f90e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTA2OTA2OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODozNDozMFrOHWHWRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODozNDozMFrOHWHWRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk1MTEwOA==", "bodyText": "Should't backupRecord throw an exception instead?", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r492951108", "createdAt": "2020-09-22T18:34:30Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopic.java", "diffHunk": "@@ -79,12 +80,19 @@ public void start() {\n \n   public Iterable<ConsumerRecord<byte[], byte[]>> getNewCommands(final Duration timeout) {\n     final Iterable<ConsumerRecord<byte[], byte[]>> iterable = commandConsumer.poll(timeout);\n+    final List<ConsumerRecord<byte[], byte[]>> records = new ArrayList<>();\n \n     if (iterable != null) {\n-      iterable.forEach(this::backupRecord);\n+      for (ConsumerRecord<byte[], byte[]> record : iterable) {\n+        backupRecord(record);\n+        if (commandTopicBackup.commandTopicCorruption()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a72b6db4a2c29c10d33ab4f18d0dc7067b43f90e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTA4NjY4OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopicBackupImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODozOToyOVrOHWHhuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODozOToyOVrOHWHhuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk1NDA0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOG.info(\"Previous command topic backup does not match the new command topic data.\");\n          \n          \n            \n                    LOG.warn(\"Backup is out of sync with the current command topic. Backups will not work until the previous command topic is restored or all backup files are deleted (fresh start).\");", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r492954041", "createdAt": "2020-09-22T18:39:29Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopicBackupImpl.java", "diffHunk": "@@ -147,16 +151,20 @@ public void writeRecord(final ConsumerRecord<byte[], byte[]> record) {\n   }\n \n   void writeCommandToBackup(final ConsumerRecord<CommandId, Command> record) {\n+    if (corruptionDetected) {\n+      LOG.warn(\"Failure to write command topic data to backup. \"\n+          + \"Corruption detected in command topic.\");\n+      return;\n+    }\n+\n     if (isRestoring()) {\n       if (isRecordInLatestReplay(record)) {\n         // Ignore backup because record was already replayed\n         return;\n       } else {\n-        LOG.info(\"Previous command topic backup does not match the new command topic data. \"\n-            + \"A new backup file will be created.\");\n-        createNewBackupFile();\n-        latestReplay.clear();\n-        LOG.info(\"New backup file created: {}\", replayFile.getPath());\n+        LOG.info(\"Previous command topic backup does not match the new command topic data.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a72b6db4a2c29c10d33ab4f18d0dc7067b43f90e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTA5NDUxOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-model/src/main/java/io/confluent/ksql/rest/DefaultErrorMessages.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODo0MTozOFrOHWHmqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxODo0MTozOFrOHWHmqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk1NTMwNA==", "bodyText": "All backups must be deleted, otherwise ksql won't start because another backup will be out of sync with the command topic.", "url": "https://github.com/confluentinc/ksql/pull/6164#discussion_r492955304", "createdAt": "2020-09-22T18:41:38Z", "author": {"login": "spena"}, "path": "ksqldb-rest-model/src/main/java/io/confluent/ksql/rest/DefaultErrorMessages.java", "diffHunk": "@@ -19,12 +19,27 @@\n \n public class DefaultErrorMessages implements ErrorMessages {\n \n-  public static final String COMMAND_RUNNER_DEGRADED_ERROR_MESSAGE =\n+  public static final String COMMAND_RUNNER_DEGRADED_INCOMPATIBLE_COMMANDS_ERROR_MESSAGE =\n       \"The server has encountered an incompatible entry in its log \"\n           + \"and cannot process further DDL statements.\"\n           + System.lineSeparator()\n           + \"This is most likely due to the service being rolled back to an earlier version.\";\n \n+  public static final String COMMAND_RUNNER_DEGRADED_BACKUP_CORRUPTED_ERROR_MESSAGE =\n+      \"The server has detected that the command topic may be corrupted. The backup of the \"\n+          + \"command topic does not match the current contents of command topic.\"\n+          + System.lineSeparator()\n+          + \"DDL statements will not be processed until either:\"\n+          + System.lineSeparator()\n+          + \"1. The current command topic is deleted and the backup file is used \"\n+          + \"to restore the command topic.\"\n+          + System.lineSeparator()\n+          + \"2. The current backup file is deleted.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a72b6db4a2c29c10d33ab4f18d0dc7067b43f90e"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2738, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}