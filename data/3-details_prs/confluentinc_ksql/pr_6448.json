{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0OTU2NjAy", "number": 6448, "title": "feat: support non-primitive types as keys", "bodyText": "Description\nFixes #6447. This feature is currently hidden behind the ksql.key.format.enabled feature flag. I'm amazed this \"just worked\"... huge props to @big-andy-coates for setting up the codebase well!\nTesting done\nLots of QTT.\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-10-16T16:18:36Z", "url": "https://github.com/confluentinc/ksql/pull/6448", "merged": true, "mergeCommit": {"oid": "b47d1f109adff51645c82fafa84fdd6071ba8489"}, "closed": true, "closedAt": "2020-10-16T19:43:49Z", "author": {"login": "vcrfxia"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdTIwqDgH2gAyNTA0OTU2NjAyOjlmZjcxYTlhNzBhYzU1ZGJmMzk5NDNkOWU0MzUwNDczNDBkNTY2ZTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTJWe9AFqTUxMDY0MzU0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9ff71a9a70ac55dbf39943d9e435047340d566e7", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/9ff71a9a70ac55dbf39943d9e435047340d566e7", "committedDate": "2020-10-16T16:14:11Z", "message": "feat: support non-primitive types as keys"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNjE4NTAx", "url": "https://github.com/confluentinc/ksql/pull/6448#pullrequestreview-510618501", "createdAt": "2020-10-16T16:19:33Z", "commit": {"oid": "9ff71a9a70ac55dbf39943d9e435047340d566e7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNjoxOTozM1rOHjHVEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNjoxOTozM1rOHjHVEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU4MjI4OA==", "bodyText": "This test will not pass until the fix in #6446 is merged.", "url": "https://github.com/confluentinc/ksql/pull/6448#discussion_r506582288", "createdAt": "2020-10-16T16:19:33Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/avro.json", "diffHunk": "@@ -925,38 +925,190 @@\n         \"ksql.key.format.enabled\": true\n       },\n       \"statements\": [\n-        \"CREATE STREAM INPUT (K ARRAY<VARCHAR> KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\"\n+        \"CREATE STREAM INPUT (K ARRAY<VARCHAR> KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n       ],\n-      \"expectedException\": {\n-        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n-        \"message\": \"Unsupported key schema: [`K` ARRAY<STRING> KEY]\"\n-      }\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": [\"foo\"], \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": [null], \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": [\"foo\"], \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": [null], \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n     },\n     {\n       \"name\": \"ARRAY - key - inference\",\n       \"properties\": {\n         \"ksql.key.format.enabled\": true\n       },\n       \"statements\": [\n-        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\"\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n       ],\n       \"topics\": [\n         {\n           \"name\": \"input_topic\",\n-          \"keySchema\": {\n-            \"type\": \"array\",\n-            \"items\": \"string\"\n-          },\n+          \"keySchema\": {\"type\": \"array\", \"items\": [\"null\", \"string\"]},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": [\"foo\"], \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": [null], \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": [\"foo\"], \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": [null], \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"MAP - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K MAP<STRING, INT> KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": {\"a\": 1, \"b\": 2, \"c\": 3}, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": {\"a\": 1, \"b\": 2, \"c\": null}, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": {\"a\": 1, \"b\": 2, \"c\": 3}, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": {\"a\": 1, \"b\": 2, \"c\": null}, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"MAP - key - no inference - with coercion\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K MAP<STRING, STRING> KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": {\"a\": 1, \"b\": 2, \"c\": 3}, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": {\"a\": \"1\", \"b\": \"2\", \"c\": \"3\"}, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"MAP - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"map\", \"values\": [\"null\", \"int\"]},\n           \"keyFormat\": \"AVRO\",\n           \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n           \"valueFormat\": \"AVRO\"\n         }\n       ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": {\"a\": 1, \"b\": 2, \"c\": 3}, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": {\"a\": 1, \"b\": 2, \"c\": null}, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": {\"a\": 1, \"b\": 2, \"c\": 3}, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": {\"a\": 1, \"b\": 2, \"c\": null}, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"map with non-string keys fails - key - C*\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K MAP<INT, DOUBLE> KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\"\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n+        \"message\": \"Avro only supports MAPs with STRING keys\"\n+      }\n+    },\n+    {\n+      \"name\": \"map with non-string keys fails - key - C*AS\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (k INT, v DOUBLE) WITH (kafka_topic='input_topic', value_format='AVRO');\",\n+        \"CREATE STREAM OUTPUT WITH (key_format='AVRO') AS SELECT * FROM INPUT PARTITION BY MAP(k:=v);\"\n+      ],\n       \"expectedException\": {\n         \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n-        \"message\": \"Unsupported key schema: [`ROWKEY` ARRAY<STRING> KEY]\"\n+        \"message\": \"Avro only supports MAPs with STRING keys\"\n       }\n     },\n+    {\n+      \"name\": \"STRUCT - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K STRUCT<F1 VARCHAR> KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": {\"F1\": \"foo\"}, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": {\"F1\": null}, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": {\"F1\": \"foo\"}, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": {\"F1\": null}, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"STRUCT - key - inference\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff71a9a70ac55dbf39943d9e435047340d566e7"}, "originalPosition": 171}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNjQzNTQ2", "url": "https://github.com/confluentinc/ksql/pull/6448#pullrequestreview-510643546", "createdAt": "2020-10-16T16:54:58Z", "commit": {"oid": "9ff71a9a70ac55dbf39943d9e435047340d566e7"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNjo1NDo1OFrOHjIgnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNjo1NDo1OFrOHjIgnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjYwMTYzMQ==", "bodyText": "I was scratching my head trying to figure out why in the world we would return true if we had more than one column, then I realized it was named unsupportedSchema haha...", "url": "https://github.com/confluentinc/ksql/pull/6448#discussion_r506601631", "createdAt": "2020-10-16T16:54:58Z", "author": {"login": "agavra"}, "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/GenericKeySerDe.java", "diffHunk": "@@ -139,17 +139,24 @@ public GenericKeySerDe() {\n     return serde;\n   }\n \n-  private static boolean unsupportedSchema(final List<SimpleColumn> columns) {\n-    if (columns.isEmpty()) {\n-      return false;\n-    }\n+  private static boolean unsupportedSchema(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ff71a9a70ac55dbf39943d9e435047340d566e7"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4634, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}