{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMzMyMjI5", "number": 6051, "title": "feat: introduce the sql-based testing tool (YATT)", "bodyText": "Description\nFirst draft at the fully implemented KsqlTester (see #5965). Review guide:\n\nStart by looking at test.sql to see how the testing tool works end-to-end\nThen look at KsqlTesterTest to see the full test in action. I'm planning on refactoring this further when I make it a standalone tool, but given that I want this to test query upgrades I'm leaving this in a little bit of a rougher state for now\nLook at SqlTestLoader to see how we load tests\nLook at AssertExecutor to look at asserting mechanism. I'm planning on improving the assertion mechanism to leverage the SELECT formatting of rows when I make this tool public, but for now it just compares the Generic representation of rows directy\nThe rest is piping/formatting exceptions/etc...\n\nTesting done\n\ntest.sql tests this end to end\n\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-08-19T18:15:39Z", "url": "https://github.com/confluentinc/ksql/pull/6051", "merged": true, "mergeCommit": {"oid": "33e71c30a1eea305f2a98d855346275859fd0325"}, "closed": true, "closedAt": "2020-08-19T21:07:21Z", "author": {"login": "agavra"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAfqcRgH2gAyNDcwMzMyMjI5OmZhYzNlNDhhZjlmMTY1MmM0Zjg4ZDRkMzgyY2IzY2FkZDljOWVmZGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAhGe5gH2gAyNDcwMzMyMjI5OjFhMTYwODE0NjhmYWM4NmFkMzY4OTFmZmQyNTNiNjA4OGNjNjkwZWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fac3e48af9f1652c4f88d4d382cb3cadd9c9efdc", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/fac3e48af9f1652c4f88d4d382cb3cadd9c9efdc", "committedDate": "2020-08-19T18:10:39Z", "message": "feat: introduce yet-another-testing-tool (YATT)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNzIzNDc0", "url": "https://github.com/confluentinc/ksql/pull/6051#pullrequestreview-470723474", "createdAt": "2020-08-19T18:17:09Z", "commit": {"oid": "fac3e48af9f1652c4f88d4d382cb3cadd9c9efdc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODoxNzoxMFrOHDTvpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODoxNzoxMFrOHDTvpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzMTI3MQ==", "bodyText": "removed this because it's not super easy to implement cleanly given the iterative nature of the tests. since the sql file supports multiline comments, it's easy enough to disable a test like this:\n/* (disabled)\n--@test: foo bar\nCREATE STREAM foo...;\nINSERT INTO ...;\nASSERT VALUES ...;\n*/", "url": "https://github.com/confluentinc/ksql/pull/6051#discussion_r473231271", "createdAt": "2020-08-19T18:17:10Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/parser/TestDirective.java", "diffHunk": "@@ -79,21 +83,13 @@ public int hashCode() {\n \n   @Override\n   public String toString() {\n-    return \"TestDirective{\"\n-        + \"type=\" + type\n-        + \", contents='\" + contents + '\\''\n-        + '}';\n-  }\n-\n-  public NodeLocation getLocation() {\n-    return location;\n+    return \"--@\" + type.getTypeName() + \": \" + contents;\n   }\n \n   public enum Type {\n     TEST(\"test\"),\n     EXPECTED_ERROR(\"expected.error\"),\n     EXPECTED_MESSAGE(\"expected.message\"),\n-    ENABLED(\"enabled\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fac3e48af9f1652c4f88d4d382cb3cadd9c9efdc"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNzIzOTgz", "url": "https://github.com/confluentinc/ksql/pull/6051#pullrequestreview-470723983", "createdAt": "2020-08-19T18:17:57Z", "commit": {"oid": "fac3e48af9f1652c4f88d4d382cb3cadd9c9efdc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODoxNzo1N1rOHDTxMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODoxNzo1N1rOHDTxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzMTY2NA==", "bodyText": "I'll implement these in a future PR since to do it \"right\" involves some engine refactoring to leverage what we already have in production code", "url": "https://github.com/confluentinc/ksql/pull/6051#discussion_r473231664", "createdAt": "2020-08-19T18:17:57Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/driver/AssertExecutor.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.test.driver;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.KsqlExecutionContext;\n+import io.confluent.ksql.engine.generic.GenericRecordFactory;\n+import io.confluent.ksql.engine.generic.KsqlGenericRecord;\n+import io.confluent.ksql.metastore.model.DataSource;\n+import io.confluent.ksql.parser.AssertTable;\n+import io.confluent.ksql.parser.tree.AssertStream;\n+import io.confluent.ksql.parser.tree.AssertValues;\n+import io.confluent.ksql.parser.tree.InsertValues;\n+import io.confluent.ksql.schema.ksql.SystemColumns;\n+import io.confluent.ksql.util.KsqlConfig;\n+import io.confluent.ksql.util.KsqlException;\n+import java.util.Iterator;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.streams.test.TestRecord;\n+\n+/**\n+ * {@code AssertExecutor} handles the assertion statements for the Sql-based\n+ * testing tool.\n+ */\n+public final class AssertExecutor {\n+\n+  private AssertExecutor() {\n+  }\n+\n+  public static void assertValues(\n+      final KsqlExecutionContext engine,\n+      final KsqlConfig config,\n+      final AssertValues assertValues,\n+      final TestDriverPipeline driverPipeline\n+  ) {\n+    final InsertValues values = assertValues.getStatement();\n+    final boolean compareTimestamp = values\n+        .getColumns()\n+        .stream()\n+        .anyMatch(SystemColumns.ROWTIME_NAME::equals);\n+\n+    final DataSource dataSource = engine.getMetaStore().getSource(values.getTarget());\n+    final KsqlGenericRecord expected = new GenericRecordFactory(\n+        config, engine.getMetaStore(), System::currentTimeMillis\n+    ).build(\n+        values.getColumns(),\n+        values.getValues(),\n+        dataSource.getSchema(),\n+        dataSource.getDataSourceType()\n+    );\n+\n+    final Iterator<TestRecord<Struct, GenericRow>> records = driverPipeline\n+        .getRecordsForTopic(dataSource.getKafkaTopicName());\n+    if (!records.hasNext()) {\n+      throw new KsqlException(\n+          String.format(\n+              \"Expected another record (%s) for %s but already read all records: %s\",\n+              expected,\n+              dataSource.getName(),\n+              driverPipeline.getAllRecordsForTopic(dataSource.getKafkaTopicName())\n+          )\n+      );\n+    }\n+\n+    final TestRecord<Struct, GenericRow> actualTestRecord = records.next();\n+    final KsqlGenericRecord actual = KsqlGenericRecord.of(\n+        actualTestRecord.key(),\n+        actualTestRecord.value(),\n+        compareTimestamp ? actualTestRecord.timestamp() : expected.ts\n+    );\n+\n+    if (!actual.equals(expected)) {\n+      throw new KsqlException(\n+          String.format(\n+              \"Expected record does not match actual. Expected: %s vs. Actual: %s\",\n+              expected,\n+              actual\n+          )\n+      );\n+    }\n+  }\n+\n+  public static void assertStream(final AssertStream assertStatement) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fac3e48af9f1652c4f88d4d382cb3cadd9c9efdc"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNzI5NTAz", "url": "https://github.com/confluentinc/ksql/pull/6051#pullrequestreview-470729503", "createdAt": "2020-08-19T18:26:12Z", "commit": {"oid": "fac3e48af9f1652c4f88d4d382cb3cadd9c9efdc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODoyNjoxMlrOHDUCQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODoyNjoxMlrOHDUCQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzNjAzNQ==", "bodyText": "I'm currently refactoring this to use TestLoader", "url": "https://github.com/confluentinc/ksql/pull/6051#discussion_r473236035", "createdAt": "2020-08-19T18:26:12Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/parser/SqlTestLoader.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.test.parser;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.confluent.ksql.test.KsqlTestException;\n+import io.confluent.ksql.test.parser.TestDirective.Type;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * The {@code SqlTestLoader} loads the test files that should be run\n+ * by the Ksql testing tool based on a path and optional filters.\n+ */\n+public class SqlTestLoader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fac3e48af9f1652c4f88d4d382cb3cadd9c9efdc"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "216d8640707cf0ed3e2c08881531730f4507d8c8", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/216d8640707cf0ed3e2c08881531730f4507d8c8", "committedDate": "2020-08-19T18:36:35Z", "message": "refactor: use TestLoader"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNzQ3MjM4", "url": "https://github.com/confluentinc/ksql/pull/6051#pullrequestreview-470747238", "createdAt": "2020-08-19T18:52:14Z", "commit": {"oid": "216d8640707cf0ed3e2c08881531730f4507d8c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODo1MjoxNFrOHDU4Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODo1MjoxNFrOHDU4Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0OTgxOQ==", "bodyText": "I see anything related to windowing is missing. Is this because it is not supported in this PR yet?", "url": "https://github.com/confluentinc/ksql/pull/6051#discussion_r473249819", "createdAt": "2020-08-19T18:52:14Z", "author": {"login": "vpapavas"}, "path": "ksqldb-functional-tests/src/test/resources/sql-tests/test.sql", "diffHunk": "@@ -0,0 +1,119 @@\n+-- this test file is a \"meta-test\" that tests the basic functionality of the KsqlTester\n+-- eventually, we plan to remove this test in favor of migrating the QTTs over to use this format\n+-- directly\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216d8640707cf0ed3e2c08881531730f4507d8c8"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNzUxNTU0", "url": "https://github.com/confluentinc/ksql/pull/6051#pullrequestreview-470751554", "createdAt": "2020-08-19T18:58:38Z", "commit": {"oid": "216d8640707cf0ed3e2c08881531730f4507d8c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODo1ODozOFrOHDVFIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODo1ODozOFrOHDVFIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1MzE1NQ==", "bodyText": "Also, Assert stream and Assert table are missing", "url": "https://github.com/confluentinc/ksql/pull/6051#discussion_r473253155", "createdAt": "2020-08-19T18:58:38Z", "author": {"login": "vpapavas"}, "path": "ksqldb-functional-tests/src/test/resources/sql-tests/test.sql", "diffHunk": "@@ -0,0 +1,119 @@\n+-- this test file is a \"meta-test\" that tests the basic functionality of the KsqlTester\n+-- eventually, we plan to remove this test in favor of migrating the QTTs over to use this format\n+-- directly\n+\n+----------------------------------------------------------------------------------------------------\n+--@test: basic test\n+----------------------------------------------------------------------------------------------------\n+CREATE STREAM foo (id INT KEY, col1 INT) WITH (kafka_topic='foo', value_format='JSON');\n+CREATE STREAM bar AS SELECT * FROM foo;\n+\n+INSERT INTO foo (rowtime, id, col1) VALUES (1, 1, 1);\n+ASSERT VALUES bar (rowtime, id, col1) VALUES (1, 1, 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216d8640707cf0ed3e2c08881531730f4507d8c8"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNzU1OTM4", "url": "https://github.com/confluentinc/ksql/pull/6051#pullrequestreview-470755938", "createdAt": "2020-08-19T19:04:58Z", "commit": {"oid": "216d8640707cf0ed3e2c08881531730f4507d8c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTowNDo1OVrOHDVSFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOTowNDo1OVrOHDVSFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI1NjQ2OA==", "bodyText": "How would the shouldRun be used? Will there be tests in a test file that one can indicate that they should be skipped? If so, should we add an example to test.sql?", "url": "https://github.com/confluentinc/ksql/pull/6051#discussion_r473256468", "createdAt": "2020-08-19T19:04:59Z", "author": {"login": "vpapavas"}, "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/parser/SqlTestLoader.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.test.parser;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.confluent.ksql.test.KsqlTestException;\n+import io.confluent.ksql.test.loader.TestLoader;\n+import io.confluent.ksql.test.model.TestLocation;\n+import io.confluent.ksql.test.parser.SqlTestLoader.SqlTest;\n+import io.confluent.ksql.test.parser.TestDirective.Type;\n+import io.confluent.ksql.test.tools.Test;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+/**\n+ * The {@code SqlTestLoader} loads the test files that should be run\n+ * by the Ksql testing tool based on a path and optional filters.\n+ */\n+public class SqlTestLoader implements TestLoader<SqlTest> {\n+\n+  private final Predicate<SqlTest> shouldRun;\n+  private final Path path;\n+\n+  public SqlTestLoader(final Path path) {\n+    this(t -> true, path);\n+  }\n+\n+  /**\n+   * @param testFilter filters out which tests to run\n+   * @param path       the top-level dir to load\n+   */\n+  public SqlTestLoader(final Predicate<SqlTest> testFilter, final Path path) {\n+    this.shouldRun = Objects.requireNonNull(testFilter, \"testFilter\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "216d8640707cf0ed3e2c08881531730f4507d8c8"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwODAxNzA1", "url": "https://github.com/confluentinc/ksql/pull/6051#pullrequestreview-470801705", "createdAt": "2020-08-19T19:49:26Z", "commit": {"oid": "216d8640707cf0ed3e2c08881531730f4507d8c8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96abb8c59f8f9a4d6c8f208659f783bc2d2afd97", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/96abb8c59f8f9a4d6c8f208659f783bc2d2afd97", "committedDate": "2020-08-19T19:50:28Z", "message": "chore: fix findbugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a16081468fac86ad36891ffd253b6088cc690ea", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/1a16081468fac86ad36891ffd253b6088cc690ea", "committedDate": "2020-08-19T19:51:11Z", "message": "chore: actually fix findbugs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4706, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}