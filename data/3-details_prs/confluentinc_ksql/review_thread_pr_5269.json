{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNTkwNDU0", "number": 5269, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMToxNDo0N1rOEBU_Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzowNTo0NVrOEIdC6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5ODI3ODUwOnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxMToxNDo0N1rOGdG-hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzowMTowNVrOGobHdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE3NjE5Nw==", "bodyText": "Will the scope cover UDAFs and UDTFs too?", "url": "https://github.com/confluentinc/ksql/pull/5269#discussion_r433176197", "createdAt": "2020-06-01T11:14:47Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "diffHunk": "@@ -0,0 +1,80 @@\n+# KLIP 27 - Enhanced UDF Configuration Options\n+\n+**Author**: Hans-Peter Grahsl (@hpgrahsl) | \n+**Release Target**: ??? | \n+**Status**: _Approved_ | \n+**Discussion**: [GitHub PR](https://github.com/confluentinc/ksql/pull/5269)\n+\n+**tl;dr:** This KLIP suggests to introduce a new configuration option in order to externally define UDF properties, that can be shared among a group / family of (custom) UDFs which logically belong together. At the same time, support for the `_global_` scope of configuration settings should get dropped.\n+\n+## Motivation and background\n+\n+Currently, ksqlDB supports two different ways to configure UDFs based on entries defined in `ksql-server.properties`:\n+\n+* either the configuration properties are directly bound to a single, specific UDF class and applicable to potentially existing overloaded methods - e.g. `ksql.functions.<myudfname>.<mysetting>=foo`\n+\n+* or we can have properties defined in a special scope, making them globally accessible - e.g. `ksql.functions._global_.<mysetting>=1234`\n+\n+The latter approach means that properties are readable by any(!) other UDF that gets loaded during bootstrap. While this may or may not be an issue depending on the type of properties, in general, it can be considered less than ideal. For instance, this leads to security concerns for sensitive configuration properties such as secrets / tokens / passwords, which is why the `_global_` scope should get dropped.\n+\n+## What is in scope\n+\n+This KLIP aims to allow for multiple, yet specifically defined UDFs, to share configuration properties other than \"misusing\" the global properties scope.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d9f6bbc1801a8b56d4e6252aa6eb761887017fd"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzcyMzUzNw==", "bodyText": "I would say yes of course, at least I don't see any reasonable argument why this configuration options change should only affect UDFs. Will adapt the text to make that clear.", "url": "https://github.com/confluentinc/ksql/pull/5269#discussion_r433723537", "createdAt": "2020-06-02T08:55:36Z", "author": {"login": "hpgrahsl"}, "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "diffHunk": "@@ -0,0 +1,80 @@\n+# KLIP 27 - Enhanced UDF Configuration Options\n+\n+**Author**: Hans-Peter Grahsl (@hpgrahsl) | \n+**Release Target**: ??? | \n+**Status**: _Approved_ | \n+**Discussion**: [GitHub PR](https://github.com/confluentinc/ksql/pull/5269)\n+\n+**tl;dr:** This KLIP suggests to introduce a new configuration option in order to externally define UDF properties, that can be shared among a group / family of (custom) UDFs which logically belong together. At the same time, support for the `_global_` scope of configuration settings should get dropped.\n+\n+## Motivation and background\n+\n+Currently, ksqlDB supports two different ways to configure UDFs based on entries defined in `ksql-server.properties`:\n+\n+* either the configuration properties are directly bound to a single, specific UDF class and applicable to potentially existing overloaded methods - e.g. `ksql.functions.<myudfname>.<mysetting>=foo`\n+\n+* or we can have properties defined in a special scope, making them globally accessible - e.g. `ksql.functions._global_.<mysetting>=1234`\n+\n+The latter approach means that properties are readable by any(!) other UDF that gets loaded during bootstrap. While this may or may not be an issue depending on the type of properties, in general, it can be considered less than ideal. For instance, this leads to security concerns for sensitive configuration properties such as secrets / tokens / passwords, which is why the `_global_` scope should get dropped.\n+\n+## What is in scope\n+\n+This KLIP aims to allow for multiple, yet specifically defined UDFs, to share configuration properties other than \"misusing\" the global properties scope.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE3NjE5Nw=="}, "originalCommit": {"oid": "9d9f6bbc1801a8b56d4e6252aa6eb761887017fd"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0MDUwMA==", "bodyText": "Can we call out UDTFs and UDAFs in the scope to be clear please?", "url": "https://github.com/confluentinc/ksql/pull/5269#discussion_r445040500", "createdAt": "2020-06-24T17:01:05Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "diffHunk": "@@ -0,0 +1,80 @@\n+# KLIP 27 - Enhanced UDF Configuration Options\n+\n+**Author**: Hans-Peter Grahsl (@hpgrahsl) | \n+**Release Target**: ??? | \n+**Status**: _Approved_ | \n+**Discussion**: [GitHub PR](https://github.com/confluentinc/ksql/pull/5269)\n+\n+**tl;dr:** This KLIP suggests to introduce a new configuration option in order to externally define UDF properties, that can be shared among a group / family of (custom) UDFs which logically belong together. At the same time, support for the `_global_` scope of configuration settings should get dropped.\n+\n+## Motivation and background\n+\n+Currently, ksqlDB supports two different ways to configure UDFs based on entries defined in `ksql-server.properties`:\n+\n+* either the configuration properties are directly bound to a single, specific UDF class and applicable to potentially existing overloaded methods - e.g. `ksql.functions.<myudfname>.<mysetting>=foo`\n+\n+* or we can have properties defined in a special scope, making them globally accessible - e.g. `ksql.functions._global_.<mysetting>=1234`\n+\n+The latter approach means that properties are readable by any(!) other UDF that gets loaded during bootstrap. While this may or may not be an issue depending on the type of properties, in general, it can be considered less than ideal. For instance, this leads to security concerns for sensitive configuration properties such as secrets / tokens / passwords, which is why the `_global_` scope should get dropped.\n+\n+## What is in scope\n+\n+This KLIP aims to allow for multiple, yet specifically defined UDFs, to share configuration properties other than \"misusing\" the global properties scope.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzE3NjE5Nw=="}, "originalCommit": {"oid": "9d9f6bbc1801a8b56d4e6252aa6eb761887017fd"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDEwNzgxOnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMDozMjoxNlrOGn_A3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo0ODowMFrOGpA2Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU4MDA2MQ==", "bodyText": "this seems no longer accurate either (* is not being introduced). With this newer approach, can we just make it backwards compatible and keep the _global_ scope?", "url": "https://github.com/confluentinc/ksql/pull/5269#discussion_r444580061", "createdAt": "2020-06-24T00:32:16Z", "author": {"login": "agavra"}, "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "diffHunk": "@@ -0,0 +1,111 @@\n+# KLIP 27 - Enhanced UDF Configuration Options\n+\n+**Author**: Hans-Peter Grahsl (@hpgrahsl) | \n+**Release Target**: ??? | \n+**Status**: _Approved_ | \n+**Discussion**: [GitHub PR](https://github.com/confluentinc/ksql/pull/5269)\n+\n+**tl;dr:** This KLIP suggests to introduce a new configuration option in order to define UDF properties, that can be shared among a group / family of (custom) UDFs which logically belong together. At the same time, support for the `_global_` scope of configuration settings should get dropped.\n+\n+## Motivation and background\n+\n+Currently, ksqlDB supports two different ways to configure UDFs based on entries defined in `ksql-server.properties`:\n+\n+* either the configuration properties are directly bound to a single, specific UDF class and applicable to potentially existing overloaded methods - e.g. `ksql.functions.<myudfname>.<mysetting>=foo`\n+\n+* or we can have properties defined in a special scope, making them globally accessible - e.g. `ksql.functions._global_.<mysetting>=1234`\n+\n+The latter approach means that properties are readable by any(!) other UDF that gets loaded during bootstrap. While this may or may not be an issue depending on the type of properties, in general, it can be considered less than ideal. For instance, this leads to security concerns for sensitive configuration properties such as secrets / tokens / passwords, which is why the `_global_` scope should get dropped.\n+\n+## What is in scope\n+\n+This KLIP aims to allow for multiple, yet specifically defined UDFs, to share configuration properties other than \"misusing\" the global properties scope.\n+\n+## What is not in scope\n+\n+The scope of this KLIP is not a complete rewrite of the current configuration mechanisms, but a modified implementation that suppports the sharing of configuration properties between specific (custom) UDFs.\n+\n+## Value/Return\n+\n+The main value of this KLIP lies in the fact that users can easily define certain configuration properties that are shared by N >= 2 UDFs. This can be done without specifying such properties multiple times, once for each UDF in need, or without \"misusing the global scope\", both of which can be considered workarounds at best.\n+\n+## Public APIS\n+\n+There should neither be public API changes nor any KSQL query language modifications necessary. Ideally, the chosen implementation allows for existing configurations to be upgraded / migrated to newer ksqlDB versions without changes for configurations tied to specific UDFs.\n+\n+**Note however, that for workloads which make use of the `_global_` scope it will lead to a breaking change since support for this  gets dropped.**\n+\n+## Design\n+\n+A simple approach is to extend the function meta-data and add a _groups_ option to the `@UdfDecription` annotation, which takes a list of strings. Each string entry in _groups_ explicitly defines a name used to logically group functions for which to share configuration properties.\n+\n+Given the following example:\n+\n+```java\n+@UdfDescription(\n+    name = \"someudf\",\n+    description = \"...\",\n+    author = \"...\",\n+    version = \"...\",\n+    groups = {\"shareit\"/*,\"...\"*/})\n+public class SomeUdf implements Configurable {\n+    //...\n+}\n+```\n+\n+allows to configure the function _someudf_ using `ksql.functions.someudf.my.value.x=foo` (basic, single-UDF config) or `ksql.groups.functions.shareit.my.value.x=foo` (grouped config across several functions declaring the same group name(s)). This distinction also makes it obvious, whether configuration properties are set for single functions or several grouped functions respectively.\n+\n+A drawback of the meta-data driven approach is that the group information must be declared in the code. If this restriction turns out to be an issue, a future enhancement could allow to explicitly define the group information in the configuration properties like so:  ?`ksql.groups.define.group_name=...,...` which for the particular example above would read `ksql.groups.define.shareit=someudf`.\n+\n+The benefits of this design are:\n+\n+* full backwards compatibility because groups config meta-data is a new option\n+* the default and most common case is to configure a single function which means that it stays simple for users\n+* it is easy to add new configurations\n+* the grouping is neither derived from the name itself (e.g. prefix matching) nor is it tied to java package naming convention\n+\n+## Test plan\n+\n+Test and failure scenarios are rather straight-foward, focusing only on different ways to set and read configuration properties for UDFs. There shouldn't be a need for scale/load/performance testing because this KLIP doesn't affect any criticial areas in that regard.\n+\n+## LOEs and Delivery Milestones\n+\n+To be defined by product manager and team.\n+\n+## Documentation Updates\n+\n+The current documentation regarding configuration options for custom UDFs isn't overly specific but of course needs to be updated accordingly. **It's important to be very clear and call out the dropped support of the `_global_` configuration scope which leads to a breaking change for upgrading/migrating workloads.**\n+\n+## Compatibility Implications\n+\n+As the design proposal suggests to remove support of the `_global_` scope, this means that upgrading the ksqlDB version will lead to a breaking change in that regard. However, the implementation of the `*` wildcard prefix matching of UDFs' names should be carried out in a backwards compatible way such that it can reasonably support the \"old\" (i.e. current) and the \"new\" (i.e. what's proposed here) configuration options in parallel.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0637c823eebcc8278c25a667bdf64ba95349466e"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1ODcwNw==", "bodyText": "thx. turns out I'm a bit blind when reading this for the ... time ;-)", "url": "https://github.com/confluentinc/ksql/pull/5269#discussion_r445658707", "createdAt": "2020-06-25T15:48:00Z", "author": {"login": "hpgrahsl"}, "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "diffHunk": "@@ -0,0 +1,111 @@\n+# KLIP 27 - Enhanced UDF Configuration Options\n+\n+**Author**: Hans-Peter Grahsl (@hpgrahsl) | \n+**Release Target**: ??? | \n+**Status**: _Approved_ | \n+**Discussion**: [GitHub PR](https://github.com/confluentinc/ksql/pull/5269)\n+\n+**tl;dr:** This KLIP suggests to introduce a new configuration option in order to define UDF properties, that can be shared among a group / family of (custom) UDFs which logically belong together. At the same time, support for the `_global_` scope of configuration settings should get dropped.\n+\n+## Motivation and background\n+\n+Currently, ksqlDB supports two different ways to configure UDFs based on entries defined in `ksql-server.properties`:\n+\n+* either the configuration properties are directly bound to a single, specific UDF class and applicable to potentially existing overloaded methods - e.g. `ksql.functions.<myudfname>.<mysetting>=foo`\n+\n+* or we can have properties defined in a special scope, making them globally accessible - e.g. `ksql.functions._global_.<mysetting>=1234`\n+\n+The latter approach means that properties are readable by any(!) other UDF that gets loaded during bootstrap. While this may or may not be an issue depending on the type of properties, in general, it can be considered less than ideal. For instance, this leads to security concerns for sensitive configuration properties such as secrets / tokens / passwords, which is why the `_global_` scope should get dropped.\n+\n+## What is in scope\n+\n+This KLIP aims to allow for multiple, yet specifically defined UDFs, to share configuration properties other than \"misusing\" the global properties scope.\n+\n+## What is not in scope\n+\n+The scope of this KLIP is not a complete rewrite of the current configuration mechanisms, but a modified implementation that suppports the sharing of configuration properties between specific (custom) UDFs.\n+\n+## Value/Return\n+\n+The main value of this KLIP lies in the fact that users can easily define certain configuration properties that are shared by N >= 2 UDFs. This can be done without specifying such properties multiple times, once for each UDF in need, or without \"misusing the global scope\", both of which can be considered workarounds at best.\n+\n+## Public APIS\n+\n+There should neither be public API changes nor any KSQL query language modifications necessary. Ideally, the chosen implementation allows for existing configurations to be upgraded / migrated to newer ksqlDB versions without changes for configurations tied to specific UDFs.\n+\n+**Note however, that for workloads which make use of the `_global_` scope it will lead to a breaking change since support for this  gets dropped.**\n+\n+## Design\n+\n+A simple approach is to extend the function meta-data and add a _groups_ option to the `@UdfDecription` annotation, which takes a list of strings. Each string entry in _groups_ explicitly defines a name used to logically group functions for which to share configuration properties.\n+\n+Given the following example:\n+\n+```java\n+@UdfDescription(\n+    name = \"someudf\",\n+    description = \"...\",\n+    author = \"...\",\n+    version = \"...\",\n+    groups = {\"shareit\"/*,\"...\"*/})\n+public class SomeUdf implements Configurable {\n+    //...\n+}\n+```\n+\n+allows to configure the function _someudf_ using `ksql.functions.someudf.my.value.x=foo` (basic, single-UDF config) or `ksql.groups.functions.shareit.my.value.x=foo` (grouped config across several functions declaring the same group name(s)). This distinction also makes it obvious, whether configuration properties are set for single functions or several grouped functions respectively.\n+\n+A drawback of the meta-data driven approach is that the group information must be declared in the code. If this restriction turns out to be an issue, a future enhancement could allow to explicitly define the group information in the configuration properties like so:  ?`ksql.groups.define.group_name=...,...` which for the particular example above would read `ksql.groups.define.shareit=someudf`.\n+\n+The benefits of this design are:\n+\n+* full backwards compatibility because groups config meta-data is a new option\n+* the default and most common case is to configure a single function which means that it stays simple for users\n+* it is easy to add new configurations\n+* the grouping is neither derived from the name itself (e.g. prefix matching) nor is it tied to java package naming convention\n+\n+## Test plan\n+\n+Test and failure scenarios are rather straight-foward, focusing only on different ways to set and read configuration properties for UDFs. There shouldn't be a need for scale/load/performance testing because this KLIP doesn't affect any criticial areas in that regard.\n+\n+## LOEs and Delivery Milestones\n+\n+To be defined by product manager and team.\n+\n+## Documentation Updates\n+\n+The current documentation regarding configuration options for custom UDFs isn't overly specific but of course needs to be updated accordingly. **It's important to be very clear and call out the dropped support of the `_global_` configuration scope which leads to a breaking change for upgrading/migrating workloads.**\n+\n+## Compatibility Implications\n+\n+As the design proposal suggests to remove support of the `_global_` scope, this means that upgrading the ksqlDB version will lead to a breaking change in that regard. However, the implementation of the `*` wildcard prefix matching of UDFs' names should be carried out in a backwards compatible way such that it can reasonably support the \"old\" (i.e. current) and the \"new\" (i.e. what's proposed here) configuration options in parallel.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU4MDA2MQ=="}, "originalCommit": {"oid": "0637c823eebcc8278c25a667bdf64ba95349466e"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjU3NTYxOnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNToxODoxM1rOGoXCHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNToxODoxM1rOGoXCHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk3MzU5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            **tl;dr:** This KLIP suggests to introduce a new configuration option in order to define UDF properties, that can be shared among a group / family of (custom) UDFs which logically belong together. At the same time, support for the `_global_` scope of configuration settings should get dropped.\n          \n          \n            \n            **tl;dr:** This KLIP suggests to introduce a new configuration option in order to define UDF properties, that can be shared among a group / family of (custom) UDFs which logically belong together. \n          \n      \n    \n    \n  \n\nI'm with @agavra here - I think this new functionality is complimentary to the existing functionality. I don't think we lose anything by keeping the existing _global_ scope, do we?  But we do gain backwards compatibility.", "url": "https://github.com/confluentinc/ksql/pull/5269#discussion_r444973599", "createdAt": "2020-06-24T15:18:13Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "diffHunk": "@@ -0,0 +1,111 @@\n+# KLIP 27 - Enhanced UDF Configuration Options\n+\n+**Author**: Hans-Peter Grahsl (@hpgrahsl) | \n+**Release Target**: ??? | \n+**Status**: _Approved_ | \n+**Discussion**: [GitHub PR](https://github.com/confluentinc/ksql/pull/5269)\n+\n+**tl;dr:** This KLIP suggests to introduce a new configuration option in order to define UDF properties, that can be shared among a group / family of (custom) UDFs which logically belong together. At the same time, support for the `_global_` scope of configuration settings should get dropped.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0637c823eebcc8278c25a667bdf64ba95349466e"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mjk4OTg4OnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzowMjo1OFrOGobL3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo0MjozNVrOGpAn4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0MTYyOQ==", "bodyText": "Can you mention adding group to @UdtfDescription and @UdafDescription too please.", "url": "https://github.com/confluentinc/ksql/pull/5269#discussion_r445041629", "createdAt": "2020-06-24T17:02:58Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "diffHunk": "@@ -0,0 +1,111 @@\n+# KLIP 27 - Enhanced UDF Configuration Options\n+\n+**Author**: Hans-Peter Grahsl (@hpgrahsl) | \n+**Release Target**: ??? | \n+**Status**: _Approved_ | \n+**Discussion**: [GitHub PR](https://github.com/confluentinc/ksql/pull/5269)\n+\n+**tl;dr:** This KLIP suggests to introduce a new configuration option in order to define UDF properties, that can be shared among a group / family of (custom) UDFs which logically belong together. At the same time, support for the `_global_` scope of configuration settings should get dropped.\n+\n+## Motivation and background\n+\n+Currently, ksqlDB supports two different ways to configure UDFs based on entries defined in `ksql-server.properties`:\n+\n+* either the configuration properties are directly bound to a single, specific UDF class and applicable to potentially existing overloaded methods - e.g. `ksql.functions.<myudfname>.<mysetting>=foo`\n+\n+* or we can have properties defined in a special scope, making them globally accessible - e.g. `ksql.functions._global_.<mysetting>=1234`\n+\n+The latter approach means that properties are readable by any(!) other UDF that gets loaded during bootstrap. While this may or may not be an issue depending on the type of properties, in general, it can be considered less than ideal. For instance, this leads to security concerns for sensitive configuration properties such as secrets / tokens / passwords, which is why the `_global_` scope should get dropped.\n+\n+## What is in scope\n+\n+This KLIP aims to allow for multiple, yet specifically defined UDFs, to share configuration properties other than \"misusing\" the global properties scope.\n+\n+## What is not in scope\n+\n+The scope of this KLIP is not a complete rewrite of the current configuration mechanisms, but a modified implementation that suppports the sharing of configuration properties between specific (custom) UDFs.\n+\n+## Value/Return\n+\n+The main value of this KLIP lies in the fact that users can easily define certain configuration properties that are shared by N >= 2 UDFs. This can be done without specifying such properties multiple times, once for each UDF in need, or without \"misusing the global scope\", both of which can be considered workarounds at best.\n+\n+## Public APIS\n+\n+There should neither be public API changes nor any KSQL query language modifications necessary. Ideally, the chosen implementation allows for existing configurations to be upgraded / migrated to newer ksqlDB versions without changes for configurations tied to specific UDFs.\n+\n+**Note however, that for workloads which make use of the `_global_` scope it will lead to a breaking change since support for this  gets dropped.**\n+\n+## Design\n+\n+A simple approach is to extend the function meta-data and add a _groups_ option to the `@UdfDecription` annotation, which takes a list of strings. Each string entry in _groups_ explicitly defines a name used to logically group functions for which to share configuration properties.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0637c823eebcc8278c25a667bdf64ba95349466e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1NTAxMA==", "bodyText": "sure.", "url": "https://github.com/confluentinc/ksql/pull/5269#discussion_r445655010", "createdAt": "2020-06-25T15:42:35Z", "author": {"login": "hpgrahsl"}, "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "diffHunk": "@@ -0,0 +1,111 @@\n+# KLIP 27 - Enhanced UDF Configuration Options\n+\n+**Author**: Hans-Peter Grahsl (@hpgrahsl) | \n+**Release Target**: ??? | \n+**Status**: _Approved_ | \n+**Discussion**: [GitHub PR](https://github.com/confluentinc/ksql/pull/5269)\n+\n+**tl;dr:** This KLIP suggests to introduce a new configuration option in order to define UDF properties, that can be shared among a group / family of (custom) UDFs which logically belong together. At the same time, support for the `_global_` scope of configuration settings should get dropped.\n+\n+## Motivation and background\n+\n+Currently, ksqlDB supports two different ways to configure UDFs based on entries defined in `ksql-server.properties`:\n+\n+* either the configuration properties are directly bound to a single, specific UDF class and applicable to potentially existing overloaded methods - e.g. `ksql.functions.<myudfname>.<mysetting>=foo`\n+\n+* or we can have properties defined in a special scope, making them globally accessible - e.g. `ksql.functions._global_.<mysetting>=1234`\n+\n+The latter approach means that properties are readable by any(!) other UDF that gets loaded during bootstrap. While this may or may not be an issue depending on the type of properties, in general, it can be considered less than ideal. For instance, this leads to security concerns for sensitive configuration properties such as secrets / tokens / passwords, which is why the `_global_` scope should get dropped.\n+\n+## What is in scope\n+\n+This KLIP aims to allow for multiple, yet specifically defined UDFs, to share configuration properties other than \"misusing\" the global properties scope.\n+\n+## What is not in scope\n+\n+The scope of this KLIP is not a complete rewrite of the current configuration mechanisms, but a modified implementation that suppports the sharing of configuration properties between specific (custom) UDFs.\n+\n+## Value/Return\n+\n+The main value of this KLIP lies in the fact that users can easily define certain configuration properties that are shared by N >= 2 UDFs. This can be done without specifying such properties multiple times, once for each UDF in need, or without \"misusing the global scope\", both of which can be considered workarounds at best.\n+\n+## Public APIS\n+\n+There should neither be public API changes nor any KSQL query language modifications necessary. Ideally, the chosen implementation allows for existing configurations to be upgraded / migrated to newer ksqlDB versions without changes for configurations tied to specific UDFs.\n+\n+**Note however, that for workloads which make use of the `_global_` scope it will lead to a breaking change since support for this  gets dropped.**\n+\n+## Design\n+\n+A simple approach is to extend the function meta-data and add a _groups_ option to the `@UdfDecription` annotation, which takes a list of strings. Each string entry in _groups_ explicitly defines a name used to logically group functions for which to share configuration properties.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0MTYyOQ=="}, "originalCommit": {"oid": "0637c823eebcc8278c25a667bdf64ba95349466e"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mjk5NDk0OnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzowNDoyMlrOGobPMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo0ODo0OFrOGpA4XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0MjQ4MA==", "bodyText": "Do we feel there is benefit from allowing a Udf to be a member of multiple groups?  Can we think of usecases where this would be useful.  I guess we could have a company group, and a department group...", "url": "https://github.com/confluentinc/ksql/pull/5269#discussion_r445042480", "createdAt": "2020-06-24T17:04:22Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "diffHunk": "@@ -0,0 +1,111 @@\n+# KLIP 27 - Enhanced UDF Configuration Options\n+\n+**Author**: Hans-Peter Grahsl (@hpgrahsl) | \n+**Release Target**: ??? | \n+**Status**: _Approved_ | \n+**Discussion**: [GitHub PR](https://github.com/confluentinc/ksql/pull/5269)\n+\n+**tl;dr:** This KLIP suggests to introduce a new configuration option in order to define UDF properties, that can be shared among a group / family of (custom) UDFs which logically belong together. At the same time, support for the `_global_` scope of configuration settings should get dropped.\n+\n+## Motivation and background\n+\n+Currently, ksqlDB supports two different ways to configure UDFs based on entries defined in `ksql-server.properties`:\n+\n+* either the configuration properties are directly bound to a single, specific UDF class and applicable to potentially existing overloaded methods - e.g. `ksql.functions.<myudfname>.<mysetting>=foo`\n+\n+* or we can have properties defined in a special scope, making them globally accessible - e.g. `ksql.functions._global_.<mysetting>=1234`\n+\n+The latter approach means that properties are readable by any(!) other UDF that gets loaded during bootstrap. While this may or may not be an issue depending on the type of properties, in general, it can be considered less than ideal. For instance, this leads to security concerns for sensitive configuration properties such as secrets / tokens / passwords, which is why the `_global_` scope should get dropped.\n+\n+## What is in scope\n+\n+This KLIP aims to allow for multiple, yet specifically defined UDFs, to share configuration properties other than \"misusing\" the global properties scope.\n+\n+## What is not in scope\n+\n+The scope of this KLIP is not a complete rewrite of the current configuration mechanisms, but a modified implementation that suppports the sharing of configuration properties between specific (custom) UDFs.\n+\n+## Value/Return\n+\n+The main value of this KLIP lies in the fact that users can easily define certain configuration properties that are shared by N >= 2 UDFs. This can be done without specifying such properties multiple times, once for each UDF in need, or without \"misusing the global scope\", both of which can be considered workarounds at best.\n+\n+## Public APIS\n+\n+There should neither be public API changes nor any KSQL query language modifications necessary. Ideally, the chosen implementation allows for existing configurations to be upgraded / migrated to newer ksqlDB versions without changes for configurations tied to specific UDFs.\n+\n+**Note however, that for workloads which make use of the `_global_` scope it will lead to a breaking change since support for this  gets dropped.**\n+\n+## Design\n+\n+A simple approach is to extend the function meta-data and add a _groups_ option to the `@UdfDecription` annotation, which takes a list of strings. Each string entry in _groups_ explicitly defines a name used to logically group functions for which to share configuration properties.\n+\n+Given the following example:\n+\n+```java\n+@UdfDescription(\n+    name = \"someudf\",\n+    description = \"...\",\n+    author = \"...\",\n+    version = \"...\",\n+    groups = {\"shareit\"/*,\"...\"*/})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0637c823eebcc8278c25a667bdf64ba95349466e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY0NjU0OQ==", "bodyText": "I'm fine to go with a single group string.", "url": "https://github.com/confluentinc/ksql/pull/5269#discussion_r445646549", "createdAt": "2020-06-25T15:29:42Z", "author": {"login": "hpgrahsl"}, "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "diffHunk": "@@ -0,0 +1,111 @@\n+# KLIP 27 - Enhanced UDF Configuration Options\n+\n+**Author**: Hans-Peter Grahsl (@hpgrahsl) | \n+**Release Target**: ??? | \n+**Status**: _Approved_ | \n+**Discussion**: [GitHub PR](https://github.com/confluentinc/ksql/pull/5269)\n+\n+**tl;dr:** This KLIP suggests to introduce a new configuration option in order to define UDF properties, that can be shared among a group / family of (custom) UDFs which logically belong together. At the same time, support for the `_global_` scope of configuration settings should get dropped.\n+\n+## Motivation and background\n+\n+Currently, ksqlDB supports two different ways to configure UDFs based on entries defined in `ksql-server.properties`:\n+\n+* either the configuration properties are directly bound to a single, specific UDF class and applicable to potentially existing overloaded methods - e.g. `ksql.functions.<myudfname>.<mysetting>=foo`\n+\n+* or we can have properties defined in a special scope, making them globally accessible - e.g. `ksql.functions._global_.<mysetting>=1234`\n+\n+The latter approach means that properties are readable by any(!) other UDF that gets loaded during bootstrap. While this may or may not be an issue depending on the type of properties, in general, it can be considered less than ideal. For instance, this leads to security concerns for sensitive configuration properties such as secrets / tokens / passwords, which is why the `_global_` scope should get dropped.\n+\n+## What is in scope\n+\n+This KLIP aims to allow for multiple, yet specifically defined UDFs, to share configuration properties other than \"misusing\" the global properties scope.\n+\n+## What is not in scope\n+\n+The scope of this KLIP is not a complete rewrite of the current configuration mechanisms, but a modified implementation that suppports the sharing of configuration properties between specific (custom) UDFs.\n+\n+## Value/Return\n+\n+The main value of this KLIP lies in the fact that users can easily define certain configuration properties that are shared by N >= 2 UDFs. This can be done without specifying such properties multiple times, once for each UDF in need, or without \"misusing the global scope\", both of which can be considered workarounds at best.\n+\n+## Public APIS\n+\n+There should neither be public API changes nor any KSQL query language modifications necessary. Ideally, the chosen implementation allows for existing configurations to be upgraded / migrated to newer ksqlDB versions without changes for configurations tied to specific UDFs.\n+\n+**Note however, that for workloads which make use of the `_global_` scope it will lead to a breaking change since support for this  gets dropped.**\n+\n+## Design\n+\n+A simple approach is to extend the function meta-data and add a _groups_ option to the `@UdfDecription` annotation, which takes a list of strings. Each string entry in _groups_ explicitly defines a name used to logically group functions for which to share configuration properties.\n+\n+Given the following example:\n+\n+```java\n+@UdfDescription(\n+    name = \"someudf\",\n+    description = \"...\",\n+    author = \"...\",\n+    version = \"...\",\n+    groups = {\"shareit\"/*,\"...\"*/})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0MjQ4MA=="}, "originalCommit": {"oid": "0637c823eebcc8278c25a667bdf64ba95349466e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1Mjg2MA==", "bodyText": "@hpgrahsl I should have really deleted this comment. It was more me thinking it through. I think there could be a use for multiple groups.  If it doesn't complicate the code that much, why not.\n@agavra what do you reckon?", "url": "https://github.com/confluentinc/ksql/pull/5269#discussion_r445652860", "createdAt": "2020-06-25T15:39:18Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "diffHunk": "@@ -0,0 +1,111 @@\n+# KLIP 27 - Enhanced UDF Configuration Options\n+\n+**Author**: Hans-Peter Grahsl (@hpgrahsl) | \n+**Release Target**: ??? | \n+**Status**: _Approved_ | \n+**Discussion**: [GitHub PR](https://github.com/confluentinc/ksql/pull/5269)\n+\n+**tl;dr:** This KLIP suggests to introduce a new configuration option in order to define UDF properties, that can be shared among a group / family of (custom) UDFs which logically belong together. At the same time, support for the `_global_` scope of configuration settings should get dropped.\n+\n+## Motivation and background\n+\n+Currently, ksqlDB supports two different ways to configure UDFs based on entries defined in `ksql-server.properties`:\n+\n+* either the configuration properties are directly bound to a single, specific UDF class and applicable to potentially existing overloaded methods - e.g. `ksql.functions.<myudfname>.<mysetting>=foo`\n+\n+* or we can have properties defined in a special scope, making them globally accessible - e.g. `ksql.functions._global_.<mysetting>=1234`\n+\n+The latter approach means that properties are readable by any(!) other UDF that gets loaded during bootstrap. While this may or may not be an issue depending on the type of properties, in general, it can be considered less than ideal. For instance, this leads to security concerns for sensitive configuration properties such as secrets / tokens / passwords, which is why the `_global_` scope should get dropped.\n+\n+## What is in scope\n+\n+This KLIP aims to allow for multiple, yet specifically defined UDFs, to share configuration properties other than \"misusing\" the global properties scope.\n+\n+## What is not in scope\n+\n+The scope of this KLIP is not a complete rewrite of the current configuration mechanisms, but a modified implementation that suppports the sharing of configuration properties between specific (custom) UDFs.\n+\n+## Value/Return\n+\n+The main value of this KLIP lies in the fact that users can easily define certain configuration properties that are shared by N >= 2 UDFs. This can be done without specifying such properties multiple times, once for each UDF in need, or without \"misusing the global scope\", both of which can be considered workarounds at best.\n+\n+## Public APIS\n+\n+There should neither be public API changes nor any KSQL query language modifications necessary. Ideally, the chosen implementation allows for existing configurations to be upgraded / migrated to newer ksqlDB versions without changes for configurations tied to specific UDFs.\n+\n+**Note however, that for workloads which make use of the `_global_` scope it will lead to a breaking change since support for this  gets dropped.**\n+\n+## Design\n+\n+A simple approach is to extend the function meta-data and add a _groups_ option to the `@UdfDecription` annotation, which takes a list of strings. Each string entry in _groups_ explicitly defines a name used to logically group functions for which to share configuration properties.\n+\n+Given the following example:\n+\n+```java\n+@UdfDescription(\n+    name = \"someudf\",\n+    description = \"...\",\n+    author = \"...\",\n+    version = \"...\",\n+    groups = {\"shareit\"/*,\"...\"*/})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0MjQ4MA=="}, "originalCommit": {"oid": "0637c823eebcc8278c25a667bdf64ba95349466e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1MzkyMw==", "bodyText": "Yeah, I think it makes sense to keep it as an array, very little overhead and it might be hard to change it later if we decide there is a use case for a multiple groups", "url": "https://github.com/confluentinc/ksql/pull/5269#discussion_r445653923", "createdAt": "2020-06-25T15:40:56Z", "author": {"login": "agavra"}, "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "diffHunk": "@@ -0,0 +1,111 @@\n+# KLIP 27 - Enhanced UDF Configuration Options\n+\n+**Author**: Hans-Peter Grahsl (@hpgrahsl) | \n+**Release Target**: ??? | \n+**Status**: _Approved_ | \n+**Discussion**: [GitHub PR](https://github.com/confluentinc/ksql/pull/5269)\n+\n+**tl;dr:** This KLIP suggests to introduce a new configuration option in order to define UDF properties, that can be shared among a group / family of (custom) UDFs which logically belong together. At the same time, support for the `_global_` scope of configuration settings should get dropped.\n+\n+## Motivation and background\n+\n+Currently, ksqlDB supports two different ways to configure UDFs based on entries defined in `ksql-server.properties`:\n+\n+* either the configuration properties are directly bound to a single, specific UDF class and applicable to potentially existing overloaded methods - e.g. `ksql.functions.<myudfname>.<mysetting>=foo`\n+\n+* or we can have properties defined in a special scope, making them globally accessible - e.g. `ksql.functions._global_.<mysetting>=1234`\n+\n+The latter approach means that properties are readable by any(!) other UDF that gets loaded during bootstrap. While this may or may not be an issue depending on the type of properties, in general, it can be considered less than ideal. For instance, this leads to security concerns for sensitive configuration properties such as secrets / tokens / passwords, which is why the `_global_` scope should get dropped.\n+\n+## What is in scope\n+\n+This KLIP aims to allow for multiple, yet specifically defined UDFs, to share configuration properties other than \"misusing\" the global properties scope.\n+\n+## What is not in scope\n+\n+The scope of this KLIP is not a complete rewrite of the current configuration mechanisms, but a modified implementation that suppports the sharing of configuration properties between specific (custom) UDFs.\n+\n+## Value/Return\n+\n+The main value of this KLIP lies in the fact that users can easily define certain configuration properties that are shared by N >= 2 UDFs. This can be done without specifying such properties multiple times, once for each UDF in need, or without \"misusing the global scope\", both of which can be considered workarounds at best.\n+\n+## Public APIS\n+\n+There should neither be public API changes nor any KSQL query language modifications necessary. Ideally, the chosen implementation allows for existing configurations to be upgraded / migrated to newer ksqlDB versions without changes for configurations tied to specific UDFs.\n+\n+**Note however, that for workloads which make use of the `_global_` scope it will lead to a breaking change since support for this  gets dropped.**\n+\n+## Design\n+\n+A simple approach is to extend the function meta-data and add a _groups_ option to the `@UdfDecription` annotation, which takes a list of strings. Each string entry in _groups_ explicitly defines a name used to logically group functions for which to share configuration properties.\n+\n+Given the following example:\n+\n+```java\n+@UdfDescription(\n+    name = \"someudf\",\n+    description = \"...\",\n+    author = \"...\",\n+    version = \"...\",\n+    groups = {\"shareit\"/*,\"...\"*/})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0MjQ4MA=="}, "originalCommit": {"oid": "0637c823eebcc8278c25a667bdf64ba95349466e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1OTIyOA==", "bodyText": "thx. for your quick answer!", "url": "https://github.com/confluentinc/ksql/pull/5269#discussion_r445659228", "createdAt": "2020-06-25T15:48:48Z", "author": {"login": "hpgrahsl"}, "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "diffHunk": "@@ -0,0 +1,111 @@\n+# KLIP 27 - Enhanced UDF Configuration Options\n+\n+**Author**: Hans-Peter Grahsl (@hpgrahsl) | \n+**Release Target**: ??? | \n+**Status**: _Approved_ | \n+**Discussion**: [GitHub PR](https://github.com/confluentinc/ksql/pull/5269)\n+\n+**tl;dr:** This KLIP suggests to introduce a new configuration option in order to define UDF properties, that can be shared among a group / family of (custom) UDFs which logically belong together. At the same time, support for the `_global_` scope of configuration settings should get dropped.\n+\n+## Motivation and background\n+\n+Currently, ksqlDB supports two different ways to configure UDFs based on entries defined in `ksql-server.properties`:\n+\n+* either the configuration properties are directly bound to a single, specific UDF class and applicable to potentially existing overloaded methods - e.g. `ksql.functions.<myudfname>.<mysetting>=foo`\n+\n+* or we can have properties defined in a special scope, making them globally accessible - e.g. `ksql.functions._global_.<mysetting>=1234`\n+\n+The latter approach means that properties are readable by any(!) other UDF that gets loaded during bootstrap. While this may or may not be an issue depending on the type of properties, in general, it can be considered less than ideal. For instance, this leads to security concerns for sensitive configuration properties such as secrets / tokens / passwords, which is why the `_global_` scope should get dropped.\n+\n+## What is in scope\n+\n+This KLIP aims to allow for multiple, yet specifically defined UDFs, to share configuration properties other than \"misusing\" the global properties scope.\n+\n+## What is not in scope\n+\n+The scope of this KLIP is not a complete rewrite of the current configuration mechanisms, but a modified implementation that suppports the sharing of configuration properties between specific (custom) UDFs.\n+\n+## Value/Return\n+\n+The main value of this KLIP lies in the fact that users can easily define certain configuration properties that are shared by N >= 2 UDFs. This can be done without specifying such properties multiple times, once for each UDF in need, or without \"misusing the global scope\", both of which can be considered workarounds at best.\n+\n+## Public APIS\n+\n+There should neither be public API changes nor any KSQL query language modifications necessary. Ideally, the chosen implementation allows for existing configurations to be upgraded / migrated to newer ksqlDB versions without changes for configurations tied to specific UDFs.\n+\n+**Note however, that for workloads which make use of the `_global_` scope it will lead to a breaking change since support for this  gets dropped.**\n+\n+## Design\n+\n+A simple approach is to extend the function meta-data and add a _groups_ option to the `@UdfDecription` annotation, which takes a list of strings. Each string entry in _groups_ explicitly defines a name used to logically group functions for which to share configuration properties.\n+\n+Given the following example:\n+\n+```java\n+@UdfDescription(\n+    name = \"someudf\",\n+    description = \"...\",\n+    author = \"...\",\n+    version = \"...\",\n+    groups = {\"shareit\"/*,\"...\"*/})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0MjQ4MA=="}, "originalCommit": {"oid": "0637c823eebcc8278c25a667bdf64ba95349466e"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mjk5OTQ2OnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzowNTo0NVrOGobSMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo0MDoyOFrOGpAieg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0MzI0OA==", "bodyText": "ksql.groups.functions.shareit.my.value.x=foo would more normally be ksql.functions.groups.shareit.my.value.x=foo.  I guess there is a risk this would clash with a groups udf...", "url": "https://github.com/confluentinc/ksql/pull/5269#discussion_r445043248", "createdAt": "2020-06-24T17:05:45Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "diffHunk": "@@ -0,0 +1,111 @@\n+# KLIP 27 - Enhanced UDF Configuration Options\n+\n+**Author**: Hans-Peter Grahsl (@hpgrahsl) | \n+**Release Target**: ??? | \n+**Status**: _Approved_ | \n+**Discussion**: [GitHub PR](https://github.com/confluentinc/ksql/pull/5269)\n+\n+**tl;dr:** This KLIP suggests to introduce a new configuration option in order to define UDF properties, that can be shared among a group / family of (custom) UDFs which logically belong together. At the same time, support for the `_global_` scope of configuration settings should get dropped.\n+\n+## Motivation and background\n+\n+Currently, ksqlDB supports two different ways to configure UDFs based on entries defined in `ksql-server.properties`:\n+\n+* either the configuration properties are directly bound to a single, specific UDF class and applicable to potentially existing overloaded methods - e.g. `ksql.functions.<myudfname>.<mysetting>=foo`\n+\n+* or we can have properties defined in a special scope, making them globally accessible - e.g. `ksql.functions._global_.<mysetting>=1234`\n+\n+The latter approach means that properties are readable by any(!) other UDF that gets loaded during bootstrap. While this may or may not be an issue depending on the type of properties, in general, it can be considered less than ideal. For instance, this leads to security concerns for sensitive configuration properties such as secrets / tokens / passwords, which is why the `_global_` scope should get dropped.\n+\n+## What is in scope\n+\n+This KLIP aims to allow for multiple, yet specifically defined UDFs, to share configuration properties other than \"misusing\" the global properties scope.\n+\n+## What is not in scope\n+\n+The scope of this KLIP is not a complete rewrite of the current configuration mechanisms, but a modified implementation that suppports the sharing of configuration properties between specific (custom) UDFs.\n+\n+## Value/Return\n+\n+The main value of this KLIP lies in the fact that users can easily define certain configuration properties that are shared by N >= 2 UDFs. This can be done without specifying such properties multiple times, once for each UDF in need, or without \"misusing the global scope\", both of which can be considered workarounds at best.\n+\n+## Public APIS\n+\n+There should neither be public API changes nor any KSQL query language modifications necessary. Ideally, the chosen implementation allows for existing configurations to be upgraded / migrated to newer ksqlDB versions without changes for configurations tied to specific UDFs.\n+\n+**Note however, that for workloads which make use of the `_global_` scope it will lead to a breaking change since support for this  gets dropped.**\n+\n+## Design\n+\n+A simple approach is to extend the function meta-data and add a _groups_ option to the `@UdfDecription` annotation, which takes a list of strings. Each string entry in _groups_ explicitly defines a name used to logically group functions for which to share configuration properties.\n+\n+Given the following example:\n+\n+```java\n+@UdfDescription(\n+    name = \"someudf\",\n+    description = \"...\",\n+    author = \"...\",\n+    version = \"...\",\n+    groups = {\"shareit\"/*,\"...\"*/})\n+public class SomeUdf implements Configurable {\n+    //...\n+}\n+```\n+\n+allows to configure the function _someudf_ using `ksql.functions.someudf.my.value.x=foo` (basic, single-UDF config) or `ksql.groups.functions.shareit.my.value.x=foo` (grouped config across several functions declaring the same group name(s)). This distinction also makes it obvious, whether configuration properties are set for single functions or several grouped functions respectively.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0637c823eebcc8278c25a667bdf64ba95349466e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1MDk5Mw==", "bodyText": "Not sure if I get your point on this one. I think putting groups in front should be clear since what follows .functions is already the function name except for the _global_ convention. So putting it after .functions would clash with a function named groups. This means it should stay as is right?", "url": "https://github.com/confluentinc/ksql/pull/5269#discussion_r445650993", "createdAt": "2020-06-25T15:36:20Z", "author": {"login": "hpgrahsl"}, "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "diffHunk": "@@ -0,0 +1,111 @@\n+# KLIP 27 - Enhanced UDF Configuration Options\n+\n+**Author**: Hans-Peter Grahsl (@hpgrahsl) | \n+**Release Target**: ??? | \n+**Status**: _Approved_ | \n+**Discussion**: [GitHub PR](https://github.com/confluentinc/ksql/pull/5269)\n+\n+**tl;dr:** This KLIP suggests to introduce a new configuration option in order to define UDF properties, that can be shared among a group / family of (custom) UDFs which logically belong together. At the same time, support for the `_global_` scope of configuration settings should get dropped.\n+\n+## Motivation and background\n+\n+Currently, ksqlDB supports two different ways to configure UDFs based on entries defined in `ksql-server.properties`:\n+\n+* either the configuration properties are directly bound to a single, specific UDF class and applicable to potentially existing overloaded methods - e.g. `ksql.functions.<myudfname>.<mysetting>=foo`\n+\n+* or we can have properties defined in a special scope, making them globally accessible - e.g. `ksql.functions._global_.<mysetting>=1234`\n+\n+The latter approach means that properties are readable by any(!) other UDF that gets loaded during bootstrap. While this may or may not be an issue depending on the type of properties, in general, it can be considered less than ideal. For instance, this leads to security concerns for sensitive configuration properties such as secrets / tokens / passwords, which is why the `_global_` scope should get dropped.\n+\n+## What is in scope\n+\n+This KLIP aims to allow for multiple, yet specifically defined UDFs, to share configuration properties other than \"misusing\" the global properties scope.\n+\n+## What is not in scope\n+\n+The scope of this KLIP is not a complete rewrite of the current configuration mechanisms, but a modified implementation that suppports the sharing of configuration properties between specific (custom) UDFs.\n+\n+## Value/Return\n+\n+The main value of this KLIP lies in the fact that users can easily define certain configuration properties that are shared by N >= 2 UDFs. This can be done without specifying such properties multiple times, once for each UDF in need, or without \"misusing the global scope\", both of which can be considered workarounds at best.\n+\n+## Public APIS\n+\n+There should neither be public API changes nor any KSQL query language modifications necessary. Ideally, the chosen implementation allows for existing configurations to be upgraded / migrated to newer ksqlDB versions without changes for configurations tied to specific UDFs.\n+\n+**Note however, that for workloads which make use of the `_global_` scope it will lead to a breaking change since support for this  gets dropped.**\n+\n+## Design\n+\n+A simple approach is to extend the function meta-data and add a _groups_ option to the `@UdfDecription` annotation, which takes a list of strings. Each string entry in _groups_ explicitly defines a name used to logically group functions for which to share configuration properties.\n+\n+Given the following example:\n+\n+```java\n+@UdfDescription(\n+    name = \"someudf\",\n+    description = \"...\",\n+    author = \"...\",\n+    version = \"...\",\n+    groups = {\"shareit\"/*,\"...\"*/})\n+public class SomeUdf implements Configurable {\n+    //...\n+}\n+```\n+\n+allows to configure the function _someudf_ using `ksql.functions.someudf.my.value.x=foo` (basic, single-UDF config) or `ksql.groups.functions.shareit.my.value.x=foo` (grouped config across several functions declaring the same group name(s)). This distinction also makes it obvious, whether configuration properties are set for single functions or several grouped functions respectively.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0MzI0OA=="}, "originalCommit": {"oid": "0637c823eebcc8278c25a667bdf64ba95349466e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1MzE2Nw==", "bodyText": "I think it has to.", "url": "https://github.com/confluentinc/ksql/pull/5269#discussion_r445653167", "createdAt": "2020-06-25T15:39:46Z", "author": {"login": "big-andy-coates"}, "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "diffHunk": "@@ -0,0 +1,111 @@\n+# KLIP 27 - Enhanced UDF Configuration Options\n+\n+**Author**: Hans-Peter Grahsl (@hpgrahsl) | \n+**Release Target**: ??? | \n+**Status**: _Approved_ | \n+**Discussion**: [GitHub PR](https://github.com/confluentinc/ksql/pull/5269)\n+\n+**tl;dr:** This KLIP suggests to introduce a new configuration option in order to define UDF properties, that can be shared among a group / family of (custom) UDFs which logically belong together. At the same time, support for the `_global_` scope of configuration settings should get dropped.\n+\n+## Motivation and background\n+\n+Currently, ksqlDB supports two different ways to configure UDFs based on entries defined in `ksql-server.properties`:\n+\n+* either the configuration properties are directly bound to a single, specific UDF class and applicable to potentially existing overloaded methods - e.g. `ksql.functions.<myudfname>.<mysetting>=foo`\n+\n+* or we can have properties defined in a special scope, making them globally accessible - e.g. `ksql.functions._global_.<mysetting>=1234`\n+\n+The latter approach means that properties are readable by any(!) other UDF that gets loaded during bootstrap. While this may or may not be an issue depending on the type of properties, in general, it can be considered less than ideal. For instance, this leads to security concerns for sensitive configuration properties such as secrets / tokens / passwords, which is why the `_global_` scope should get dropped.\n+\n+## What is in scope\n+\n+This KLIP aims to allow for multiple, yet specifically defined UDFs, to share configuration properties other than \"misusing\" the global properties scope.\n+\n+## What is not in scope\n+\n+The scope of this KLIP is not a complete rewrite of the current configuration mechanisms, but a modified implementation that suppports the sharing of configuration properties between specific (custom) UDFs.\n+\n+## Value/Return\n+\n+The main value of this KLIP lies in the fact that users can easily define certain configuration properties that are shared by N >= 2 UDFs. This can be done without specifying such properties multiple times, once for each UDF in need, or without \"misusing the global scope\", both of which can be considered workarounds at best.\n+\n+## Public APIS\n+\n+There should neither be public API changes nor any KSQL query language modifications necessary. Ideally, the chosen implementation allows for existing configurations to be upgraded / migrated to newer ksqlDB versions without changes for configurations tied to specific UDFs.\n+\n+**Note however, that for workloads which make use of the `_global_` scope it will lead to a breaking change since support for this  gets dropped.**\n+\n+## Design\n+\n+A simple approach is to extend the function meta-data and add a _groups_ option to the `@UdfDecription` annotation, which takes a list of strings. Each string entry in _groups_ explicitly defines a name used to logically group functions for which to share configuration properties.\n+\n+Given the following example:\n+\n+```java\n+@UdfDescription(\n+    name = \"someudf\",\n+    description = \"...\",\n+    author = \"...\",\n+    version = \"...\",\n+    groups = {\"shareit\"/*,\"...\"*/})\n+public class SomeUdf implements Configurable {\n+    //...\n+}\n+```\n+\n+allows to configure the function _someudf_ using `ksql.functions.someudf.my.value.x=foo` (basic, single-UDF config) or `ksql.groups.functions.shareit.my.value.x=foo` (grouped config across several functions declaring the same group name(s)). This distinction also makes it obvious, whether configuration properties are set for single functions or several grouped functions respectively.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0MzI0OA=="}, "originalCommit": {"oid": "0637c823eebcc8278c25a667bdf64ba95349466e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1MzYyNg==", "bodyText": "ok clear now. this stays as is. thx.", "url": "https://github.com/confluentinc/ksql/pull/5269#discussion_r445653626", "createdAt": "2020-06-25T15:40:28Z", "author": {"login": "hpgrahsl"}, "path": "design-proposals/klip-27-enhanced-udf-configuration-options.md", "diffHunk": "@@ -0,0 +1,111 @@\n+# KLIP 27 - Enhanced UDF Configuration Options\n+\n+**Author**: Hans-Peter Grahsl (@hpgrahsl) | \n+**Release Target**: ??? | \n+**Status**: _Approved_ | \n+**Discussion**: [GitHub PR](https://github.com/confluentinc/ksql/pull/5269)\n+\n+**tl;dr:** This KLIP suggests to introduce a new configuration option in order to define UDF properties, that can be shared among a group / family of (custom) UDFs which logically belong together. At the same time, support for the `_global_` scope of configuration settings should get dropped.\n+\n+## Motivation and background\n+\n+Currently, ksqlDB supports two different ways to configure UDFs based on entries defined in `ksql-server.properties`:\n+\n+* either the configuration properties are directly bound to a single, specific UDF class and applicable to potentially existing overloaded methods - e.g. `ksql.functions.<myudfname>.<mysetting>=foo`\n+\n+* or we can have properties defined in a special scope, making them globally accessible - e.g. `ksql.functions._global_.<mysetting>=1234`\n+\n+The latter approach means that properties are readable by any(!) other UDF that gets loaded during bootstrap. While this may or may not be an issue depending on the type of properties, in general, it can be considered less than ideal. For instance, this leads to security concerns for sensitive configuration properties such as secrets / tokens / passwords, which is why the `_global_` scope should get dropped.\n+\n+## What is in scope\n+\n+This KLIP aims to allow for multiple, yet specifically defined UDFs, to share configuration properties other than \"misusing\" the global properties scope.\n+\n+## What is not in scope\n+\n+The scope of this KLIP is not a complete rewrite of the current configuration mechanisms, but a modified implementation that suppports the sharing of configuration properties between specific (custom) UDFs.\n+\n+## Value/Return\n+\n+The main value of this KLIP lies in the fact that users can easily define certain configuration properties that are shared by N >= 2 UDFs. This can be done without specifying such properties multiple times, once for each UDF in need, or without \"misusing the global scope\", both of which can be considered workarounds at best.\n+\n+## Public APIS\n+\n+There should neither be public API changes nor any KSQL query language modifications necessary. Ideally, the chosen implementation allows for existing configurations to be upgraded / migrated to newer ksqlDB versions without changes for configurations tied to specific UDFs.\n+\n+**Note however, that for workloads which make use of the `_global_` scope it will lead to a breaking change since support for this  gets dropped.**\n+\n+## Design\n+\n+A simple approach is to extend the function meta-data and add a _groups_ option to the `@UdfDecription` annotation, which takes a list of strings. Each string entry in _groups_ explicitly defines a name used to logically group functions for which to share configuration properties.\n+\n+Given the following example:\n+\n+```java\n+@UdfDescription(\n+    name = \"someudf\",\n+    description = \"...\",\n+    author = \"...\",\n+    version = \"...\",\n+    groups = {\"shareit\"/*,\"...\"*/})\n+public class SomeUdf implements Configurable {\n+    //...\n+}\n+```\n+\n+allows to configure the function _someudf_ using `ksql.functions.someudf.my.value.x=foo` (basic, single-UDF config) or `ksql.groups.functions.shareit.my.value.x=foo` (grouped config across several functions declaring the same group name(s)). This distinction also makes it obvious, whether configuration properties are set for single functions or several grouped functions respectively.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA0MzI0OA=="}, "originalCommit": {"oid": "0637c823eebcc8278c25a667bdf64ba95349466e"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3524, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}