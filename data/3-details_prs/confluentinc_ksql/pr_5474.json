{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNDA2Nzc0", "number": 5474, "title": "feat: implements ARRAY_JOIN as requested in (#5028)", "bodyText": "Description\nThis PR implements the UDF / scalar function ARRAY_JOIN as requested in (#5028). It creates a flat string representation of all the elements contained in the given array.\nTesting done\nThere are unit tests with several applications of the UDF to verify that it follows the expected behaviour as discussed in the linked issue.", "createdAt": "2020-05-24T12:34:21Z", "url": "https://github.com/confluentinc/ksql/pull/5474", "merged": true, "mergeCommit": {"oid": "06e1df6f10814693739d4f0c0235cff82e065089"}, "closed": true, "closedAt": "2020-06-12T16:16:41Z", "author": {"login": "hpgrahsl"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclHLVqAFqTQxODQ1MTE1MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqlRjtAFqTQyOTg3MjI2NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NDUxMTUw", "url": "https://github.com/confluentinc/ksql/pull/5474#pullrequestreview-418451150", "createdAt": "2020-05-26T16:04:40Z", "commit": {"oid": "a71c4d63726c45759e637906b05220fead58998f"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjowNDo0MFrOGaldbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjoxNzoyOFrOGamATg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUyOTkwMA==", "bodyText": "nit: let's use ImmutableSet.of", "url": "https://github.com/confluentinc/ksql/pull/5474#discussion_r430529900", "createdAt": "2020-05-26T16:04:40Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/array/ArrayJoin.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.array;\n+\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import io.confluent.ksql.util.KsqlConstants;\n+import java.math.BigInteger;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.StringJoiner;\n+import org.apache.kafka.connect.data.Struct;\n+\n+@SuppressWarnings(\"MethodMayBeStatic\") // UDF methods can not be static.\n+@UdfDescription(\n+    name = \"ARRAY_JOIN\",\n+    description = \"joins the array elements into a flat string representation\",\n+    author = KsqlConstants.CONFLUENT_AUTHOR\n+)\n+public class ArrayJoin {\n+\n+  private static final String DEFAULT_DELIMITER = \",\";\n+  private static final Set<Class> KSQL_PRIMITIVES = new HashSet<>(\n+      Arrays.asList(Boolean.class,Integer.class,BigInteger.class,Double.class,String.class)\n+  );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71c4d63726c45759e637906b05220fead58998f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzMTIxOQ==", "bodyText": "why BigInteger? I think ksqlDB only uses BigDecimal internally - there is also Long.class if you are referring to the sql BIGINT type", "url": "https://github.com/confluentinc/ksql/pull/5474#discussion_r430531219", "createdAt": "2020-05-26T16:06:27Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/array/ArrayJoin.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.array;\n+\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import io.confluent.ksql.util.KsqlConstants;\n+import java.math.BigInteger;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.StringJoiner;\n+import org.apache.kafka.connect.data.Struct;\n+\n+@SuppressWarnings(\"MethodMayBeStatic\") // UDF methods can not be static.\n+@UdfDescription(\n+    name = \"ARRAY_JOIN\",\n+    description = \"joins the array elements into a flat string representation\",\n+    author = KsqlConstants.CONFLUENT_AUTHOR\n+)\n+public class ArrayJoin {\n+\n+  private static final String DEFAULT_DELIMITER = \",\";\n+  private static final Set<Class> KSQL_PRIMITIVES = new HashSet<>(\n+      Arrays.asList(Boolean.class,Integer.class,BigInteger.class,Double.class,String.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71c4d63726c45759e637906b05220fead58998f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzMTczOA==", "bodyText": "what should the behavior be on a null delimiter? should we default to empty string delimiter or just return null? cc @derekjn", "url": "https://github.com/confluentinc/ksql/pull/5474#discussion_r430531738", "createdAt": "2020-05-26T16:07:11Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/array/ArrayJoin.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.array;\n+\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import io.confluent.ksql.util.KsqlConstants;\n+import java.math.BigInteger;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.StringJoiner;\n+import org.apache.kafka.connect.data.Struct;\n+\n+@SuppressWarnings(\"MethodMayBeStatic\") // UDF methods can not be static.\n+@UdfDescription(\n+    name = \"ARRAY_JOIN\",\n+    description = \"joins the array elements into a flat string representation\",\n+    author = KsqlConstants.CONFLUENT_AUTHOR\n+)\n+public class ArrayJoin {\n+\n+  private static final String DEFAULT_DELIMITER = \",\";\n+  private static final Set<Class> KSQL_PRIMITIVES = new HashSet<>(\n+      Arrays.asList(Boolean.class,Integer.class,BigInteger.class,Double.class,String.class)\n+  );\n+\n+  @Udf\n+  public <T> String join(\n+      @UdfParameter(description = \"the array to join using the default delimiter '\"\n+          + DEFAULT_DELIMITER + \"'\") final List<T> array\n+  ) {\n+    return join(array, DEFAULT_DELIMITER);\n+  }\n+\n+  @Udf\n+  public <T> String join(\n+      @UdfParameter(description = \"the array to join using the specified delimiter\")\n+      final List<T> array,\n+      @UdfParameter(description = \"the string to be used as element delimiter\")\n+      final String delimiter\n+  ) {\n+\n+    if (array == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71c4d63726c45759e637906b05220fead58998f"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzNjI0NA==", "bodyText": "if we have a list of list, should it flatten the nested types or just return a string representation of the element? it seems odd to me that ARRAY[ARRAY[1, 2], ARRAY[3]] would flatten to the same result as ARRAY[1, 2, 3]\nsame concern for map and struct - I think my preference would be to support only primitives in the first implementation. Other languages have similar restrictions, e.g. python (which is even more restrictive):\n>>> '.'.join([['1', '2']])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: sequence item 0: expected string, list found", "url": "https://github.com/confluentinc/ksql/pull/5474#discussion_r430536244", "createdAt": "2020-05-26T16:13:40Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/array/ArrayJoin.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.array;\n+\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import io.confluent.ksql.util.KsqlConstants;\n+import java.math.BigInteger;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.StringJoiner;\n+import org.apache.kafka.connect.data.Struct;\n+\n+@SuppressWarnings(\"MethodMayBeStatic\") // UDF methods can not be static.\n+@UdfDescription(\n+    name = \"ARRAY_JOIN\",\n+    description = \"joins the array elements into a flat string representation\",\n+    author = KsqlConstants.CONFLUENT_AUTHOR\n+)\n+public class ArrayJoin {\n+\n+  private static final String DEFAULT_DELIMITER = \",\";\n+  private static final Set<Class> KSQL_PRIMITIVES = new HashSet<>(\n+      Arrays.asList(Boolean.class,Integer.class,BigInteger.class,Double.class,String.class)\n+  );\n+\n+  @Udf\n+  public <T> String join(\n+      @UdfParameter(description = \"the array to join using the default delimiter '\"\n+          + DEFAULT_DELIMITER + \"'\") final List<T> array\n+  ) {\n+    return join(array, DEFAULT_DELIMITER);\n+  }\n+\n+  @Udf\n+  public <T> String join(\n+      @UdfParameter(description = \"the array to join using the specified delimiter\")\n+      final List<T> array,\n+      @UdfParameter(description = \"the string to be used as element delimiter\")\n+      final String delimiter\n+  ) {\n+\n+    if (array == null) {\n+      return null;\n+    }\n+\n+    final StringJoiner sj = new StringJoiner(delimiter);\n+    array.forEach(e -> processElement(e, sj));\n+    return sj.toString();\n+\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private static <T> void processElement(final T element, final StringJoiner joiner) {\n+\n+    if (element == null || KSQL_PRIMITIVES.contains(element.getClass())) {\n+      handlePrimitiveType(element, joiner);\n+    } else if (element instanceof List) {\n+      handleListType((List)element,joiner);\n+    } else if (element instanceof Map) {\n+      handleMapType((Map) element, joiner);\n+    } else if (element instanceof Struct) {\n+      handleStructType((Struct)element, joiner);\n+    } else {\n+      throw new KsqlFunctionException(\"error: hit element of type \"\n+          + element.getClass().getTypeName() + \" which is currently not supported\");\n+    }\n+\n+  }\n+\n+  private static void handlePrimitiveType(final Object element, final StringJoiner joiner) {\n+    joiner.add(element != null ? element.toString() : null);\n+  }\n+\n+  private static void handleListType(final List<?> element, final StringJoiner joiner) {\n+    element.forEach(e -> processElement(e, joiner));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71c4d63726c45759e637906b05220fead58998f"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzNzQxMw==", "bodyText": "nit: we prefer hamcrest asserts in our tests, you can look at other tests for examples of assertThat(value, matches(matcher))", "url": "https://github.com/confluentinc/ksql/pull/5474#discussion_r430537413", "createdAt": "2020-05-26T16:15:22Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/function/udf/array/ArrayJoinTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.array;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71c4d63726c45759e637906b05220fead58998f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDUzODgzMA==", "bodyText": "can you add decimal and long types into this? (see not above that BigInteger and Long are not the same in java)", "url": "https://github.com/confluentinc/ksql/pull/5474#discussion_r430538830", "createdAt": "2020-05-26T16:17:28Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/function/udf/array/ArrayJoinTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.array;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.SchemaBuilder;\n+import org.apache.kafka.connect.data.Struct;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class ArrayJoinTest {\n+\n+  private static final String CUSTOM_DELIMITER = \"|\";\n+  private static Struct STRUCT_DATA;\n+\n+  private final ArrayJoin arrayJoinUDF = new ArrayJoin();\n+\n+  @BeforeClass\n+  public static void initializeComplexStructTypeSampleData() {\n+\n+    Schema structSchema = SchemaBuilder.struct()\n+        .field(\"f1\", Schema.STRING_SCHEMA)\n+        .field(\"f2\", Schema.INT32_SCHEMA)\n+        .field(\"f3\", Schema.BOOLEAN_SCHEMA)\n+        .field(\"f4\", SchemaBuilder.struct()\n+            .field(\"f4-1\", Schema.STRING_SCHEMA)\n+            .build()\n+        )\n+        .field(\"f5\", SchemaBuilder.array(Schema.STRING_SCHEMA).build())\n+        .field(\"f6\", SchemaBuilder.array(SchemaBuilder.struct()\n+            .field(\"k\", Schema.STRING_SCHEMA)\n+            .field(\"v\", Schema.INT32_SCHEMA)\n+            .build())\n+        )\n+        .field(\"f7\",\n+            SchemaBuilder.array(SchemaBuilder.array(SchemaBuilder.array(Schema.INT32_SCHEMA))))\n+        .field(\"f8\", SchemaBuilder.map(Schema.STRING_SCHEMA, Schema.INT32_SCHEMA).build())\n+        .field(\"f9\", SchemaBuilder\n+            .map(Schema.STRING_SCHEMA, SchemaBuilder.array(Schema.STRING_SCHEMA).build()).build())\n+        .field(\"f10\", SchemaBuilder\n+            .map(Schema.STRING_SCHEMA, SchemaBuilder.array(Schema.INT32_SCHEMA).build()).build())\n+        .build();\n+\n+    STRUCT_DATA = new Struct(structSchema)\n+        .put(\"f1\", \"ksqldb UDF sample data\")\n+        .put(\"f2\", 42)\n+        .put(\"f3\", true)\n+        .put(\"f4\", new Struct(structSchema.field(\"f4\").schema())\n+            .put(\"f4-1\", \"hello ksqldb\")\n+        )\n+        .put(\"f5\", Arrays.asList(\"str_1\", \"str_2\", \"...\", \"str_N\"))\n+        .put(\"f6\", Arrays.asList(\n+            new Struct(structSchema.field(\"f6\").schema().valueSchema())\n+                .put(\"k\", \"a\").put(\"v\", 1),\n+            new Struct(structSchema.field(\"f6\").schema().valueSchema())\n+                .put(\"k\", \"b\").put(\"v\", 2),\n+            new Struct(structSchema.field(\"f6\").schema().valueSchema())\n+                .put(\"k\", \"c\").put(\"v\", 3)\n+            )\n+        )\n+        .put(\"f7\", Arrays.asList(\n+            Arrays.asList(Arrays.asList(0,1), Arrays.asList(2,3,4), Arrays.asList(5, 6),\n+                Arrays.asList(7,8,9)),\n+            Arrays.asList(Arrays.asList(9,8,7),Arrays.asList(6,5), Arrays.asList(4,3,2),\n+                Arrays.asList(1,0)\n+            )\n+        ))\n+        .put(\"f8\", new LinkedHashMap<String, Integer>() {{\n+          put(\"k1\", 6);\n+          put(\"k2\", 5);\n+          put(\"k3\", 4);\n+        }})\n+        .put(\"f9\", new LinkedHashMap<String, List<String>>() {{\n+          put(\"k1\", Arrays.asList(\"v1-a\", \"v1-b\"));\n+          put(\"k2\", Arrays.asList(\"v2-a\",\"v2-b\", \"v2-c\", \"v2-d\"));\n+          put(\"k3\", Arrays.asList(\"v3-a\",\"v3-b\",\"v3-c\"));\n+        }})\n+        .put(\"f10\", new LinkedHashMap<String, List<Integer>>() {{\n+          put(\"k1\", Arrays.asList(12, 21));\n+          put(\"k2\", Arrays.asList(23, 32));\n+          put(\"k3\", Arrays.asList(24, 42));\n+        }});\n+  }\n+\n+  @Test\n+  public void shouldReturnNullForNullInput() {\n+    assertNull(arrayJoinUDF.join(null));\n+    assertNull(arrayJoinUDF.join(null,CUSTOM_DELIMITER));\n+  }\n+\n+  @Test\n+  public void shouldReturnEmptyStringForEmptyArrays() {\n+    assertTrue(arrayJoinUDF.join(Collections.emptyList()).isEmpty());\n+    assertTrue(arrayJoinUDF.join(Collections.emptyList(),CUSTOM_DELIMITER).isEmpty());\n+  }\n+\n+  @Test\n+  public void shouldReturnCorrectStringForFlatArraysWithPrimitiveTypes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71c4d63726c45759e637906b05220fead58998f"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NjMzMDI0", "url": "https://github.com/confluentinc/ksql/pull/5474#pullrequestreview-418633024", "createdAt": "2020-05-26T19:55:46Z", "commit": {"oid": "a71c4d63726c45759e637906b05220fead58998f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo1NTo0NlrOGauHXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo1NTo0NlrOGauHXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3MTcxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Creates a flat String representation of all the elements contained in the given array.\n          \n          \n            \n            Creates a flat string representation of all the elements contained in the given array.", "url": "https://github.com/confluentinc/ksql/pull/5474#discussion_r430671711", "createdAt": "2020-05-26T19:55:46Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -221,6 +221,18 @@ SLICE(col1, from, to)\n Slices a list based on the supplied indices. The indices start at 1 and\n include both endpoints.\n \n+### `ARRAY_JOIN`\n+\n+```sql\n+ARRAY_JOIN(col1, delimiter)\n+```\n+\n+Creates a flat String representation of all the elements contained in the given array.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71c4d63726c45759e637906b05220fead58998f"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NjMzMTc0", "url": "https://github.com/confluentinc/ksql/pull/5474#pullrequestreview-418633174", "createdAt": "2020-05-26T19:55:59Z", "commit": {"oid": "a71c4d63726c45759e637906b05220fead58998f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo1NjowMFrOGauIBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo1NjowMFrOGauIBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3MTg3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The elements in the resulting String are separated by the chosen `delimiter`, \n          \n          \n            \n            The elements in the resulting string are separated by the chosen `delimiter`,", "url": "https://github.com/confluentinc/ksql/pull/5474#discussion_r430671878", "createdAt": "2020-05-26T19:56:00Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -221,6 +221,18 @@ SLICE(col1, from, to)\n Slices a list based on the supplied indices. The indices start at 1 and\n include both endpoints.\n \n+### `ARRAY_JOIN`\n+\n+```sql\n+ARRAY_JOIN(col1, delimiter)\n+```\n+\n+Creates a flat String representation of all the elements contained in the given array.\n+The elements in the resulting String are separated by the chosen `delimiter`, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71c4d63726c45759e637906b05220fead58998f"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NjM0Njg1", "url": "https://github.com/confluentinc/ksql/pull/5474#pullrequestreview-418634685", "createdAt": "2020-05-26T19:58:08Z", "commit": {"oid": "a71c4d63726c45759e637906b05220fead58998f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo1ODowOVrOGauM1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxOTo1ODowOVrOGauM1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3MzEwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            all valid ksql types and supports nested and complex data structures as well, \n          \n          \n            \n            all valid ksqlDB types and supports nested and complex data structures as well,", "url": "https://github.com/confluentinc/ksql/pull/5474#discussion_r430673109", "createdAt": "2020-05-26T19:58:09Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -221,6 +221,18 @@ SLICE(col1, from, to)\n Slices a list based on the supplied indices. The indices start at 1 and\n include both endpoints.\n \n+### `ARRAY_JOIN`\n+\n+```sql\n+ARRAY_JOIN(col1, delimiter)\n+```\n+\n+Creates a flat String representation of all the elements contained in the given array.\n+The elements in the resulting String are separated by the chosen `delimiter`, \n+which is an optional parameter that falls back to a comma `,`. The array may contain\n+all valid ksql types and supports nested and complex data structures as well, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a71c4d63726c45759e637906b05220fead58998f"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NjM1MDQz", "url": "https://github.com/confluentinc/ksql/pull/5474#pullrequestreview-418635043", "createdAt": "2020-05-26T19:58:41Z", "commit": {"oid": "a71c4d63726c45759e637906b05220fead58998f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTU1MzAz", "url": "https://github.com/confluentinc/ksql/pull/5474#pullrequestreview-420555303", "createdAt": "2020-05-28T23:18:25Z", "commit": {"oid": "a71c4d63726c45759e637906b05220fead58998f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86542b0022d43863d633638c7d5c9f8e9a4325c4", "author": {"user": {"login": "hpgrahsl", "name": "Hans-Peter Grahsl"}}, "url": "https://github.com/confluentinc/ksql/commit/86542b0022d43863d633638c7d5c9f8e9a4325c4", "committedDate": "2020-06-12T12:59:13Z", "message": "feat: implements ARRAY_JOIN as requested in (#5028)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bb913680388971b9bc90fc07ce69fc3b76f5221", "author": {"user": {"login": "hpgrahsl", "name": "Hans-Peter Grahsl"}}, "url": "https://github.com/confluentinc/ksql/commit/2bb913680388971b9bc90fc07ce69fc3b76f5221", "committedDate": "2020-06-12T12:59:13Z", "message": "feat: modifications for ARRAY_JOIN as discussed in #5474\n\nas requested by reviewers:\n\n- removed BigInteger from primitive types\n- added Long and BigDecimal to supported primitive types\n- dropped support for complex nested types\n- switched to hamcrest matchers in unit tests\n- added QueryTranslationTest for via PlannedTestGeneratorTest\n- adapted docs accordingly"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66fdd541415a828068d71d78de567c1abb7b2f04", "author": {"user": {"login": "hpgrahsl", "name": "Hans-Peter Grahsl"}}, "url": "https://github.com/confluentinc/ksql/commit/66fdd541415a828068d71d78de567c1abb7b2f04", "committedDate": "2020-06-12T12:54:35Z", "message": "feat: modifications for ARRAY_JOIN as discussed in #5474\n\nas requested by reviewers:\n\n- removed BigInteger from primitive types\n- added Long and BigDecimal to supported primitive types\n- dropped support for complex nested types\n- switched to hamcrest matchers in unit tests\n- added QueryTranslationTest for via PlannedTestGeneratorTest\n- adapted docs accordingly"}, "afterCommit": {"oid": "2bb913680388971b9bc90fc07ce69fc3b76f5221", "author": {"user": {"login": "hpgrahsl", "name": "Hans-Peter Grahsl"}}, "url": "https://github.com/confluentinc/ksql/commit/2bb913680388971b9bc90fc07ce69fc3b76f5221", "committedDate": "2020-06-12T12:59:13Z", "message": "feat: modifications for ARRAY_JOIN as discussed in #5474\n\nas requested by reviewers:\n\n- removed BigInteger from primitive types\n- added Long and BigDecimal to supported primitive types\n- dropped support for complex nested types\n- switched to hamcrest matchers in unit tests\n- added QueryTranslationTest for via PlannedTestGeneratorTest\n- adapted docs accordingly"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5ODcyMjY0", "url": "https://github.com/confluentinc/ksql/pull/5474#pullrequestreview-429872264", "createdAt": "2020-06-12T16:16:34Z", "commit": {"oid": "2bb913680388971b9bc90fc07ce69fc3b76f5221"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4674, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}