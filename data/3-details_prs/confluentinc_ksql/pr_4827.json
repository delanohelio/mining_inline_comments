{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMDg1NDc2", "number": 4827, "title": "fix: avoid duplicate column name errors from auto-generated aliases", "bodyText": "Description\nIf a source has column names in the form KSQL_COL_x, e.g. like those created is a select expression isn't a column reference and isn't aliased, then the existing code can result in an error about duplicate column names if a downstream query also relies on auto-generated column names. For example,\n-- schema: ID -> NAME\nCREATE STREAM S1 (ID INT KEY, NAME STRING) WITH (kafka_topic='input', value_format='JSON');\n\n-- schema: ID -> KSQL_COL_0, NAME\nCREATE STREAM S2 AS SELECT LEN(STRING), NAME FROM S1;\n\n-- both of the following result in a duplicate column error as two columns end up being called KSQL_COL_0:\nSELECT UCASE(NAME), * FROM S2;\nSELECT UCASE(NAME), KSQL_COL_0 FROM S2;\nThe issue is that the generation of aliases does not take into account any existing columns in the source(s).\nThis commit resolves this issue. Queries now start their generated alias index as one-more-than the maximum of any generated alias in any of the sources.\nWith this change the above queries work:\n-- schema: KSQL_COL_1, KSQL_COL_0, NAME\nSELECT UCASE(NAME), * FROM S2;\n\n-- schema: KSQL_COL_1, KSQL_COL_1\nSELECT UCASE(NAME), KSQL_COL_0 FROM S2;\nBREAKING CHANGE:\nPotential breaking change for any query started before version 0.8:\n\nAny existing persistent queries, e.g. those created with CREATE STREAM AS SELECT, CREATE TABLE AS SELECT or INSERT INTO\n\nstarting on version 8.0 or later: will be unaffected and their column names will not change.\nstarted on a version before 0.8 and using auto-generated column names: may see there column names change, leading to undefined behaviour.\n\n\nPull queries will be unaffected.\nPush queries, which rely on auto-generated column names, may see a change in column names.\n\nTesting done\nUsual\nReviewing notes:\n\nFirst commit has the main code changes.\nSecond commit has the updates to the tests due to the change in column naming.\n\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-03-19T15:52:48Z", "url": "https://github.com/confluentinc/ksql/pull/4827", "merged": true, "mergeCommit": {"oid": "258d0b06d81954af2c4e2c17fd7f26c74f315368"}, "closed": true, "closedAt": "2020-03-24T15:00:42Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPN8K3AH2gAyMzkxMDg1NDc2OjkyOGFmYTFkMmNjYjQyMTUxNjdmZjI0ZjFhN2U5NDAyODFmNmEzYTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQxnHygH2gAyMzkxMDg1NDc2OjE4MTIxNTM3M2U3MjRjMjM5ZTgwNmQ3YmUwMTk1OGYwODdlYWY1MmY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "928afa1d2ccb4215167ff24f1a7e940281f6a3a4", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/928afa1d2ccb4215167ff24f1a7e940281f6a3a4", "committedDate": "2020-03-19T15:49:26Z", "message": "fix: avoid duplicate column name errors from auto-generated aliases\n\nIf a source has column names in the form `KSQL_COL_x`, e.g. like those created is a select expression isn't a column reference and isn't aliased, then the existing code can result in an error about duplicate column names if a downstream query also relies on auto-generated column names. For example,\n\n```sql\n-- schema: ID -> NAME\nCREATE STREAM S1 (ID INT KEY, NAME STRING) WITH (kafka_topic='input', value_format='JSON');\n\n-- schema: ID -> KSQL_COL_0, NAME\nCREATE STREAM S2 AS SELECT LEN(STRING), NAME FROM S1;\n\n-- both of the following result in a duplicate column error as two columns end up being called KSQL_COL_0:\nSELECT UCASE(NAME), * FROM S2;\nSELECT UCASE(NAME), KSQL_COL_0 FROM S2;\n```\n\nThe issue is that the generation of aliases does not take into account any existing columns in the source(s).\n\nThis commit resolves this issue. Queries now start their generated alias index as one-more-than the maximum of any generated alias in any of the sources.\n\nWith this change the above queries work:\n\n```sql\n-- schema: KSQL_COL_1, KSQL_COL_0, NAME\nSELECT UCASE(NAME), * FROM S2;\n\n-- schema: KSQL_COL_1, KSQL_COL_1\nSELECT UCASE(NAME), KSQL_COL_0 FROM S2;\n```\n\nBREAKING CHANGE:\n* Any existing persistent queries, e.g. those created with `CREATE STREAM AS SELECT`, `CREATE TABLE AS SELECT` or `INSERT INTO`, will be unaffected: their column names will not change.\n* Pull queries will be unaffected.\n* Push queries, which rely on auto-generated column names, may see a change in column names."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fadc4d423c3a600858598fc4ec733c748ae51a91", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/fadc4d423c3a600858598fc4ec733c748ae51a91", "committedDate": "2020-03-19T15:50:16Z", "message": "chore: test updates\n\nTests that needed updating to pass with the new column names."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8624110338c40d17cd102be2649290f39cce7d6c", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/8624110338c40d17cd102be2649290f39cce7d6c", "committedDate": "2020-03-19T17:39:37Z", "message": "chore: historic plans"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d11810336b9b6aa30f0ad16898bdd4442186a8de", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/d11810336b9b6aa30f0ad16898bdd4442186a8de", "committedDate": "2020-03-20T18:09:24Z", "message": "chore: merge from master\n\nConflicting files\nksqldb-common/src/main/java/io/confluent/ksql/name/ColumnNames.java\nksqldb-common/src/test/java/io/confluent/ksql/name/ColumnNamesTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de871ea01d4adfc2275633e8ae2c5e86636fdac6", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/de871ea01d4adfc2275633e8ae2c5e86636fdac6", "committedDate": "2020-03-23T18:31:53Z", "message": "Merge branch 'master' into ksql_col_clashes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53de5fe06f63c08776acc110fcb00ddaa5d3f6f2", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/53de5fe06f63c08776acc110fcb00ddaa5d3f6f2", "committedDate": "2020-03-23T18:51:04Z", "message": "chore: merge from master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b72da696c7408a077af3648873402f6d5b832131", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/b72da696c7408a077af3648873402f6d5b832131", "committedDate": "2020-03-23T18:51:24Z", "message": "Merge branch 'master' into ksql_col_clashes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5ODQyNjYz", "url": "https://github.com/confluentinc/ksql/pull/4827#pullrequestreview-379842663", "createdAt": "2020-03-23T21:39:38Z", "commit": {"oid": "b72da696c7408a077af3648873402f6d5b832131"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTozOTozOVrOF6ZGkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTozOTozOVrOF6ZGkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc3MzAwOQ==", "bodyText": "Is this a Stream here to handle joins where we will have multiple source schemas?", "url": "https://github.com/confluentinc/ksql/pull/4827#discussion_r396773009", "createdAt": "2020-03-23T21:39:39Z", "author": {"login": "vpapavas"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/name/ColumnNames.java", "diffHunk": "@@ -71,41 +93,52 @@ public static boolean isAggregate(final ColumnName name) {\n     return name.text().startsWith(AGGREGATE_COLUMN_PREFIX);\n   }\n \n-  /**\n-   * Determines the next unique column alias.\n-   *\n-   * <p>Finds any existing {@code KSQL_COL_x} column names in the supplied {@code sourceSchema} to\n-   * ensure the returned generated column name is unique.\n-   *\n-   * @param sourceSchema the source schema.\n-   * @return a column name in the form {@code KSQL_COL_x} which does not clash with source schema.\n-   */\n-  public static ColumnName nextGeneratedColumnAlias(final LogicalSchema sourceSchema) {\n-    final int maxExistingIdx = maxGeneratedAliasIndex(sourceSchema);\n-    return generatedColumnAlias(maxExistingIdx + 1);\n+  private static OptionalInt extractGeneratedAliasIndex(final ColumnName columnName) {\n+    final Matcher matcher = GENERATED_ALIAS_PATTERN.matcher(columnName.text());\n+    return matcher.matches()\n+        ? OptionalInt.of(Integer.parseInt(matcher.group(1)))\n+        : OptionalInt.empty();\n   }\n \n-  /**\n-   * Determines the highest index of generated column names like {@code KSQL_COL_x} in the supplied\n-   * {@code sourceSchema}.\n-   *\n-   * @param sourceSchema the schema.\n-   * @return the highest index or {@code -1}\n-   */\n-  private static int maxGeneratedAliasIndex(final LogicalSchema sourceSchema) {\n-    return sourceSchema.columns().stream()\n+  private static IntStream generatedAliasIndexes(final Stream<LogicalSchema> sourceSchema) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b72da696c7408a077af3648873402f6d5b832131"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMDIwODM4", "url": "https://github.com/confluentinc/ksql/pull/4827#pullrequestreview-380020838", "createdAt": "2020-03-24T06:07:45Z", "commit": {"oid": "b72da696c7408a077af3648873402f6d5b832131"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNjowNzo0NVrOF6iELg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNjowNzo0NVrOF6iELg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkxOTg1NA==", "bodyText": "nit: if we pass 1 here we should get names more consistent with what we had before (start at offset 1), and a smaller test diff.", "url": "https://github.com/confluentinc/ksql/pull/4827#discussion_r396919854", "createdAt": "2020-03-24T06:07:45Z", "author": {"login": "rodesai"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/name/ColumnNames.java", "diffHunk": "@@ -41,11 +50,24 @@ public static ColumnName aggregateColumn(final int idx) {\n   }\n \n   /**\n-   * Where the user hasn't specified an alias for an expression in a SELECT we generate them using\n-   * this method. This value is exposed to the user in the output schema\n+   * Create a generator that will build column aliases in the form {@code KSQL_COL_x}.\n+   *\n+   * <p>Names are guaranteed not to clash with any existing columns in the {@code sourceSchemas}.\n+   *\n+   * <p>Used where the user hasn't specified an alias for an expression in a SELECT. This generated\n+   * column names are exposed to the user in the output schema.\n+   *\n+   * @param sourceSchemas the stream of source schemas.\n+   * @return a generator of unique column names.\n    */\n-  public static ColumnName generatedColumnAlias(final int idx) {\n-    return ColumnName.of(GENERATED_ALIAS_PREFIX + idx);\n+  public static Supplier<ColumnName> columnAliasGenerator(\n+      final Stream<LogicalSchema> sourceSchemas\n+  ) {\n+    final Set<Integer> used = generatedAliasIndexes(sourceSchemas)\n+        .boxed()\n+        .collect(Collectors.toSet());\n+\n+    return new AliasGenerator(0, used)::next;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b72da696c7408a077af3648873402f6d5b832131"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMDIwOTAw", "url": "https://github.com/confluentinc/ksql/pull/4827#pullrequestreview-380020900", "createdAt": "2020-03-24T06:07:56Z", "commit": {"oid": "b72da696c7408a077af3648873402f6d5b832131"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMDIwOTk0", "url": "https://github.com/confluentinc/ksql/pull/4827#pullrequestreview-380020994", "createdAt": "2020-03-24T06:08:12Z", "commit": {"oid": "b72da696c7408a077af3648873402f6d5b832131"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d987a77a3a50a1043fc4652ba695f933625900f", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/4d987a77a3a50a1043fc4652ba695f933625900f", "committedDate": "2020-03-24T10:35:35Z", "message": "chore: fix pull query tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9aa4e58b17b9ddf7705eb73291eee71f81860fb7", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/9aa4e58b17b9ddf7705eb73291eee71f81860fb7", "committedDate": "2020-03-24T11:47:50Z", "message": "Merge branch 'master' into ksql_col_clashes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "181215373e724c239e806d7be01958f087eaf52f", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/181215373e724c239e806d7be01958f087eaf52f", "committedDate": "2020-03-24T11:56:57Z", "message": "chore: historical plans"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 48, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}