{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNzg5NDEx", "number": 4859, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjowMjoxMlrODqcYtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjozMTowOFrODqdL7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODMxODYyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjowMjoxMlrOF6MXlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODowNzo1NlrOF6R0iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU2NDM3NQ==", "bodyText": "lol - which one's conservative: including or excluding? ;)", "url": "https://github.com/confluentinc/ksql/pull/4859#discussion_r396564375", "createdAt": "2020-03-23T16:02:12Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -66,8 +66,8 @@ public boolean filter(final KsqlHostInfo hostInfo) {\n           final long offsetLag = Math.max(endOffset - hostLag.getCurrentOffsetPosition(), 0);\n           return offsetLag <= allowedOffsetLag;\n         })\n-        // If we don't have lag info, we'll be conservative and include the host\n-        .orElse(true);\n+        // If we don't have lag info, we'll be conservative and not include the host", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0358eb9db66bc0483cc031e5c87b3f4ef5ca8004"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU3OTIzOQ==", "bodyText": ":).In addition would be good to capture the intent here.", "url": "https://github.com/confluentinc/ksql/pull/4859#discussion_r396579239", "createdAt": "2020-03-23T16:21:47Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -66,8 +66,8 @@ public boolean filter(final KsqlHostInfo hostInfo) {\n           final long offsetLag = Math.max(endOffset - hostLag.getCurrentOffsetPosition(), 0);\n           return offsetLag <= allowedOffsetLag;\n         })\n-        // If we don't have lag info, we'll be conservative and include the host\n-        .orElse(true);\n+        // If we don't have lag info, we'll be conservative and not include the host", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU2NDM3NQ=="}, "originalCommit": {"oid": "0358eb9db66bc0483cc031e5c87b3f4ef5ca8004"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY1MzcwNQ==", "bodyText": "I'll update the comments a bit.  The question as to what's more conservative has to do with whether we're favoring HA or some crude notion of consistency (enforced by lag filtering) and what additional changes might be made in light of this behavior.\nIn short, we were previously going to forward the lag checking to the active/standby host if the router host didn't have lag info.  In this sense, it was honoring HA to let it pass through and hope the other host could make a lag decision.  Unfortunately, after discussing, it turns out that doing this properly under various scenarios is more complex than it seems.  So, to honor the lag filtering, the simplest approach is to wait until lags exist at the router, and to maximize HA by minimizing this missing lag window.\nHopefully that summary sheds a little light on the comment changes!  :-)", "url": "https://github.com/confluentinc/ksql/pull/4859#discussion_r396653705", "createdAt": "2020-03-23T18:07:56Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/MaximumLagFilter.java", "diffHunk": "@@ -66,8 +66,8 @@ public boolean filter(final KsqlHostInfo hostInfo) {\n           final long offsetLag = Math.max(endOffset - hostLag.getCurrentOffsetPosition(), 0);\n           return offsetLag <= allowedOffsetLag;\n         })\n-        // If we don't have lag info, we'll be conservative and include the host\n-        .orElse(true);\n+        // If we don't have lag info, we'll be conservative and not include the host", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU2NDM3NQ=="}, "originalCommit": {"oid": "0358eb9db66bc0483cc031e5c87b3f4ef5ca8004"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODMyMjgzOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/HighAvailabilityTestUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjowMzowNFrOF6MaWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODowOToyMFrOF6R36Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU2NTA4MQ==", "bodyText": "Catching and swallowing in a test util...  are we sure this is the right approach?", "url": "https://github.com/confluentinc/ksql/pull/4859#discussion_r396565081", "createdAt": "2020-03-23T16:03:04Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/HighAvailabilityTestUtil.java", "diffHunk": "@@ -181,7 +182,10 @@ public static void sendLagReportingRequest(\n           .exceptionally(t -> {\n             LOG.error(\"Unexpected exception in async request\", t);\n             return null;\n-          });\n+          })\n+      .get();\n+    } catch (Exception e) {\n+      LOG.error(\"Error waiting on lag report\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0358eb9db66bc0483cc031e5c87b3f4ef5ca8004"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY1NDU2OQ==", "bodyText": "You're right, I should let it bubble up and fail immediately (as opposed to letting a following assertion fail).  The important part was calling get since the async aspect was causing tests to have some flakiness.", "url": "https://github.com/confluentinc/ksql/pull/4859#discussion_r396654569", "createdAt": "2020-03-23T18:09:20Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/HighAvailabilityTestUtil.java", "diffHunk": "@@ -181,7 +182,10 @@ public static void sendLagReportingRequest(\n           .exceptionally(t -> {\n             LOG.error(\"Unexpected exception in async request\", t);\n             return null;\n-          });\n+          })\n+      .get();\n+    } catch (Exception e) {\n+      LOG.error(\"Error waiting on lag report\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU2NTA4MQ=="}, "originalCommit": {"oid": "0358eb9db66bc0483cc031e5c87b3f4ef5ca8004"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODQyODI1OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/MaximumLagFilterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjoyNjoyM1rOF6NfYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODoxNTozNFrOF6SGgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU4Mjc1NQ==", "bodyText": "should the test name change given the semantics are inverted now? might be good to rename in the same shouldXXX form", "url": "https://github.com/confluentinc/ksql/pull/4859#discussion_r396582755", "createdAt": "2020-03-23T16:26:23Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/MaximumLagFilterTest.java", "diffHunk": "@@ -94,7 +94,7 @@ public void filter_hostNoLag() {\n         PARTITION).get();\n \n     // Then:\n-    assertTrue(filter.filter(HOST1));\n+    assertFalse(filter.filter(HOST1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0358eb9db66bc0483cc031e5c87b3f4ef5ca8004"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY1ODMwNg==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/4859#discussion_r396658306", "createdAt": "2020-03-23T18:15:34Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/MaximumLagFilterTest.java", "diffHunk": "@@ -94,7 +94,7 @@ public void filter_hostNoLag() {\n         PARTITION).get();\n \n     // Then:\n-    assertTrue(filter.filter(HOST1));\n+    assertFalse(filter.filter(HOST1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU4Mjc1NQ=="}, "originalCommit": {"oid": "0358eb9db66bc0483cc031e5c87b3f4ef5ca8004"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODQ0OTcyOnYy", "diffSide": "LEFT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/PullQueryRoutingFunctionalTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjozMTowOFrOF6NtMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODoyMDoxMFrOF6SUAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU4NjI5MA==", "bodyText": "whats the new error? could we assert on that still", "url": "https://github.com/confluentinc/ksql/pull/4859#discussion_r396586290", "createdAt": "2020-03-23T16:31:08Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/PullQueryRoutingFunctionalTest.java", "diffHunk": "@@ -336,8 +336,6 @@ public void shouldFilterLaggyServers() {\n     KsqlErrorMessage errorMessage = makePullQueryRequestWithError(clusterFormation.router.right,\n         sql, LAG_FILTER_25);\n     Assert.assertEquals(40001, errorMessage.getErrorCode());\n-    Assert.assertTrue(errorMessage.getMessage()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0358eb9db66bc0483cc031e5c87b3f4ef5ca8004"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY2MTc2Mg==", "bodyText": "I added this back.  I was originally trying to mitigate some periodic flakiness, but I fixed that elsewhere.", "url": "https://github.com/confluentinc/ksql/pull/4859#discussion_r396661762", "createdAt": "2020-03-23T18:20:10Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/PullQueryRoutingFunctionalTest.java", "diffHunk": "@@ -336,8 +336,6 @@ public void shouldFilterLaggyServers() {\n     KsqlErrorMessage errorMessage = makePullQueryRequestWithError(clusterFormation.router.right,\n         sql, LAG_FILTER_25);\n     Assert.assertEquals(40001, errorMessage.getErrorCode());\n-    Assert.assertTrue(errorMessage.getMessage()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU4NjI5MA=="}, "originalCommit": {"oid": "0358eb9db66bc0483cc031e5c87b3f4ef5ca8004"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3635, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}