{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4NTU0MTMw", "number": 6149, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMTozODozMlrOEiWVbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjowNjoxOFrOEmzJGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDUyOTczOnYy", "diffSide": "RIGHT", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/SqlToJavaVisitor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMTozODozMlrOHQLOWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDoyODoyN1rOHQZd8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyMzE2Mg==", "bodyText": "is there any reason to convert to an array? I believe we could just use List#equals", "url": "https://github.com/confluentinc/ksql/pull/6149#discussion_r486723162", "createdAt": "2020-09-11T01:38:32Z", "author": {"login": "agavra"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/SqlToJavaVisitor.java", "diffHunk": "@@ -478,6 +478,42 @@ private String visitStringComparisonExpression(final ComparisonExpression.Type t\n       }\n     }\n \n+    private String visitArrayComparisonExpression(final ComparisonExpression.Type type) {\n+      switch (type) {\n+        case EQUAL:\n+          return \"java.util.Arrays.deepEquals(%1$s.toArray(), %2$s.toArray())\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fc9c11851106ba7ffb2c6d56951777e9180b4dd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1NjUzMQ==", "bodyText": "+1", "url": "https://github.com/confluentinc/ksql/pull/6149#discussion_r486956531", "createdAt": "2020-09-11T10:28:27Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/SqlToJavaVisitor.java", "diffHunk": "@@ -478,6 +478,42 @@ private String visitStringComparisonExpression(final ComparisonExpression.Type t\n       }\n     }\n \n+    private String visitArrayComparisonExpression(final ComparisonExpression.Type type) {\n+      switch (type) {\n+        case EQUAL:\n+          return \"java.util.Arrays.deepEquals(%1$s.toArray(), %2$s.toArray())\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyMzE2Mg=="}, "originalCommit": {"oid": "5fc9c11851106ba7ffb2c6d56951777e9180b4dd"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDUzMzI2OnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/binary-comparison.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMTo0MDoyNVrOHQLQbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDozNzoyNlrOHQZuSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyMzY5Mg==", "bodyText": "can you add tests for nested data types? I'm not entirely sure what happens in that case (e.g. an array of structs, or a struct with a nested struct/array)", "url": "https://github.com/confluentinc/ksql/pull/6149#discussion_r486723692", "createdAt": "2020-09-11T01:40:25Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/binary-comparison.json", "diffHunk": "@@ -182,37 +181,53 @@\n       ]\n     },\n     {\n-      \"name\": \"comparison array fails\",\n+      \"name\": \"array comparison\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fc9c11851106ba7ffb2c6d56951777e9180b4dd"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MDcxMw==", "bodyText": "Likewise, add similar style tests covering IS DISTINCT FROM and IS NOT DISTINCT FROM.\nSee https://modern-sql.com/feature/is-distinct-from for how they should work with nulls.", "url": "https://github.com/confluentinc/ksql/pull/6149#discussion_r486960713", "createdAt": "2020-09-11T10:37:26Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/binary-comparison.json", "diffHunk": "@@ -182,37 +181,53 @@\n       ]\n     },\n     {\n-      \"name\": \"comparison array fails\",\n+      \"name\": \"array comparison\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyMzY5Mg=="}, "originalCommit": {"oid": "5fc9c11851106ba7ffb2c6d56951777e9180b4dd"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjAxNTcxOnYy", "diffSide": "RIGHT", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/util/ComparisonUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDozMjo1N1rOHQZmjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDozMjo1N1rOHQZmjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk1ODczMg==", "bodyText": "These all need to handle Type.IS_DISTINCT_FROM as well.\nThis also suggests you're missing QTT test cases covering IS NOT DISTINCT FROM and IS DISTINCT FROM for these three complex types.", "url": "https://github.com/confluentinc/ksql/pull/6149#discussion_r486958732", "createdAt": "2020-09-11T10:32:57Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/util/ComparisonUtil.java", "diffHunk": "@@ -81,6 +84,21 @@ private static boolean handleBoolean(final Type operator, final SqlType right) {\n         && (operator == Type.EQUAL || operator == Type.NOT_EQUAL);\n   }\n \n+  private static boolean handleArray(final Type operator, final SqlType right) {\n+    return right.baseType() == SqlBaseType.ARRAY\n+        && (operator == Type.EQUAL || operator == Type.NOT_EQUAL);\n+  }\n+\n+  private static boolean handleMap(final Type operator, final SqlType right) {\n+    return right.baseType() == SqlBaseType.MAP\n+        && (operator == Type.EQUAL || operator == Type.NOT_EQUAL);\n+  }\n+\n+  private static boolean handleStruct(final Type operator, final SqlType right) {\n+    return right.baseType() == SqlBaseType.STRUCT\n+        && (operator == Type.EQUAL || operator == Type.NOT_EQUAL);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fc9c11851106ba7ffb2c6d56951777e9180b4dd"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTE4NDYwOnYy", "diffSide": "RIGHT", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/util/ComparisonUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjowMzoyNFrOHXCjhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTo1ODoxNVrOHY6Xtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkyMTE1OA==", "bodyText": "nit: can we put all of these into a method so that we can repeat it below? (e.g. isEqualityOperator(operator)) if we do that we might even be able to dismiss the checkstyle suppressions", "url": "https://github.com/confluentinc/ksql/pull/6149#discussion_r493921158", "createdAt": "2020-09-23T22:03:24Z", "author": {"login": "agavra"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/util/ComparisonUtil.java", "diffHunk": "@@ -76,9 +79,32 @@ private static boolean handleString(final Type operator, final SqlType right) {\n     return right.baseType() == SqlBaseType.STRING;\n   }\n \n+  @SuppressWarnings({\"checkstyle:BooleanExpressionComplexity\", \"checkstyle:LineLength\"})\n   private static boolean handleBoolean(final Type operator, final SqlType right) {\n     return right.baseType() == SqlBaseType.BOOLEAN\n-        && (operator == Type.EQUAL || operator == Type.NOT_EQUAL);\n+        && (operator == Type.EQUAL || operator == Type.NOT_EQUAL\n+            || operator == Type.IS_DISTINCT_FROM || operator == Type.IS_NOT_DISTINCT_FROM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "208c481a3b936185c418f720da336efc19cf21c4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg4NDIxNA==", "bodyText": "Refactored", "url": "https://github.com/confluentinc/ksql/pull/6149#discussion_r495884214", "createdAt": "2020-09-28T11:58:15Z", "author": {"login": "uurl"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/util/ComparisonUtil.java", "diffHunk": "@@ -76,9 +79,32 @@ private static boolean handleString(final Type operator, final SqlType right) {\n     return right.baseType() == SqlBaseType.STRING;\n   }\n \n+  @SuppressWarnings({\"checkstyle:BooleanExpressionComplexity\", \"checkstyle:LineLength\"})\n   private static boolean handleBoolean(final Type operator, final SqlType right) {\n     return right.baseType() == SqlBaseType.BOOLEAN\n-        && (operator == Type.EQUAL || operator == Type.NOT_EQUAL);\n+        && (operator == Type.EQUAL || operator == Type.NOT_EQUAL\n+            || operator == Type.IS_DISTINCT_FROM || operator == Type.IS_NOT_DISTINCT_FROM);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkyMTE1OA=="}, "originalCommit": {"oid": "208c481a3b936185c418f720da336efc19cf21c4"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTE5MDg0OnYy", "diffSide": "LEFT", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/binary-comparison.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjowNTo0M1rOHXCnQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTo1Mzo0M1rOHY6PAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkyMjExMg==", "bodyText": "we should still check that comparisons fail that should fail (e.g. > and <)", "url": "https://github.com/confluentinc/ksql/pull/6149#discussion_r493922112", "createdAt": "2020-09-23T22:05:43Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/binary-comparison.json", "diffHunk": "@@ -182,37 +197,83 @@\n       ]\n     },\n     {\n-      \"name\": \"comparison array fails\",\n+      \"name\": \"is not distinct from (2)\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (A INT KEY, B BOOLEAN, C BIGINT, D DOUBLE, E DECIMAL(4,3), F STRING, G ARRAY<INT>, H MAP<STRING, INT>, I STRUCT<ID INT>) WITH (kafka_topic='test_topic', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT AS SELECT A, A IS NOT DISTINCT FROM 1, B IS NOT DISTINCT FROM true, C IS NOT DISTINCT FROM 11, D IS NOT DISTINCT FROM 1.1, E IS NOT DISTINCT FROM 1.20, F IS NOT DISTINCT FROM 'foo', G IS NOT DISTINCT FROM ARRAY[1,2], H IS NOT DISTINCT FROM MAP('a':=1), I IS NOT DISTINCT FROM STRUCT(ID:=2) FROM INPUT;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"key\": 1, \"value\": {\"B\": true, \"C\": 11, \"D\": 1.1, \"E\": 1.20, \"F\": \"foo\", \"G\": [1,2], \"H\": {\"a\":  1}, \"I\": {\"id\": 2}}},\n+        {\"topic\": \"test_topic\", \"key\": 2, \"value\": {\"B\": false, \"C\": 10, \"D\": 1.0, \"E\": 1.21, \"F\": \"Foo\", \"G\": [1], \"H\": {\"b\":  1}, \"I\": {\"id\": 3}}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 1, \"value\": {\"KSQL_COL_0\": true, \"KSQL_COL_1\": true, \"KSQL_COL_2\": true, \"KSQL_COL_3\": true, \"KSQL_COL_4\": true, \"KSQL_COL_5\": true, \"KSQL_COL_6\": true, \"KSQL_COL_7\": true, \"KSQL_COL_8\": true}},\n+        {\"topic\": \"OUTPUT\", \"key\": 2, \"value\": {\"KSQL_COL_0\": false, \"KSQL_COL_1\": false, \"KSQL_COL_2\": false, \"KSQL_COL_3\": false, \"KSQL_COL_4\": false, \"KSQL_COL_5\": false, \"KSQL_COL_6\": false, \"KSQL_COL_7\": false, \"KSQL_COL_8\": false}}\n+      ]\n+    },\n+    {\n+      \"name\": \"array comparison\",\n       \"statements\": [\n         \"CREATE STREAM INPUT (A INT KEY, B ARRAY<INT>, C ARRAY<INT>) WITH (kafka_topic='test_topic', value_format='JSON');\",\n-        \"CREATE STREAM OUTPUT AS SELECT A, B = C FROM INPUT;\"\n+        \"CREATE STREAM OUTPUT AS SELECT A, B = C, B <> C, B IS NOT DISTINCT FROM C, B IS DISTINCT FROM C FROM INPUT;\"\n       ],\n-      \"expectedException\": {\n-        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n-        \"message\": \"Cannot compare B (ARRAY<INTEGER>) to C (ARRAY<INTEGER>) with EQUAL.\"\n-      }\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"key\": 1, \"value\": {\"B\": [1,2], \"C\": [1,2.0]}},\n+        {\"topic\": \"test_topic\", \"key\": 2, \"value\": {\"B\": [1,2], \"C\": [1]}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 1, \"value\": {\"KSQL_COL_0\": true, \"KSQL_COL_1\": false, \"KSQL_COL_2\": true, \"KSQL_COL_3\": false}},\n+        {\"topic\": \"OUTPUT\", \"key\": 2, \"value\": {\"KSQL_COL_0\": false, \"KSQL_COL_1\": true, \"KSQL_COL_2\": false, \"KSQL_COL_3\": true}}\n+      ]\n     },\n     {\n-      \"name\": \"comparison map fails\",\n+      \"name\": \"map comparison\",\n       \"statements\": [\n         \"CREATE STREAM INPUT (A INT KEY, B MAP<STRING, INT>, C MAP<STRING, INT>) WITH (kafka_topic='test_topic', value_format='JSON');\",\n-        \"CREATE STREAM OUTPUT AS SELECT A, B = C FROM INPUT;\"\n+        \"CREATE STREAM OUTPUT AS SELECT A, B = C, B <> C, B IS NOT DISTINCT FROM C, B IS DISTINCT FROM C FROM INPUT;\"\n       ],\n-      \"expectedException\": {\n-        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n-        \"message\": \"Cannot compare B (MAP<STRING, INTEGER>) to C (MAP<STRING, INTEGER>) with EQUAL.\"\n-      }\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"key\": 1, \"value\": {\"B\": {\"a\": 1}, \"C\": {\"a\": 1.0}}},\n+        {\"topic\": \"test_topic\", \"key\": 2, \"value\": {\"B\": {\"a\": 1}, \"C\": {\"a\": 2}}},\n+        {\"topic\": \"test_topic\", \"key\": 3, \"value\": {\"B\": {\"a\": 1}, \"C\": {\"b\": 1}}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 1, \"value\": {\"KSQL_COL_0\": true, \"KSQL_COL_1\": false, \"KSQL_COL_2\": true, \"KSQL_COL_3\": false}},\n+        {\"topic\": \"OUTPUT\", \"key\": 2, \"value\": {\"KSQL_COL_0\": false, \"KSQL_COL_1\": true, \"KSQL_COL_2\": false, \"KSQL_COL_3\": true}},\n+        {\"topic\": \"OUTPUT\", \"key\": 3, \"value\": {\"KSQL_COL_0\": false, \"KSQL_COL_1\": true, \"KSQL_COL_2\": false, \"KSQL_COL_3\": true}}\n+      ]\n     },\n     {\n-      \"name\": \"comparison struct fails\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "208c481a3b936185c418f720da336efc19cf21c4"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg4MTk4Nw==", "bodyText": "Restored", "url": "https://github.com/confluentinc/ksql/pull/6149#discussion_r495881987", "createdAt": "2020-09-28T11:53:43Z", "author": {"login": "uurl"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/binary-comparison.json", "diffHunk": "@@ -182,37 +197,83 @@\n       ]\n     },\n     {\n-      \"name\": \"comparison array fails\",\n+      \"name\": \"is not distinct from (2)\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (A INT KEY, B BOOLEAN, C BIGINT, D DOUBLE, E DECIMAL(4,3), F STRING, G ARRAY<INT>, H MAP<STRING, INT>, I STRUCT<ID INT>) WITH (kafka_topic='test_topic', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT AS SELECT A, A IS NOT DISTINCT FROM 1, B IS NOT DISTINCT FROM true, C IS NOT DISTINCT FROM 11, D IS NOT DISTINCT FROM 1.1, E IS NOT DISTINCT FROM 1.20, F IS NOT DISTINCT FROM 'foo', G IS NOT DISTINCT FROM ARRAY[1,2], H IS NOT DISTINCT FROM MAP('a':=1), I IS NOT DISTINCT FROM STRUCT(ID:=2) FROM INPUT;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"key\": 1, \"value\": {\"B\": true, \"C\": 11, \"D\": 1.1, \"E\": 1.20, \"F\": \"foo\", \"G\": [1,2], \"H\": {\"a\":  1}, \"I\": {\"id\": 2}}},\n+        {\"topic\": \"test_topic\", \"key\": 2, \"value\": {\"B\": false, \"C\": 10, \"D\": 1.0, \"E\": 1.21, \"F\": \"Foo\", \"G\": [1], \"H\": {\"b\":  1}, \"I\": {\"id\": 3}}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 1, \"value\": {\"KSQL_COL_0\": true, \"KSQL_COL_1\": true, \"KSQL_COL_2\": true, \"KSQL_COL_3\": true, \"KSQL_COL_4\": true, \"KSQL_COL_5\": true, \"KSQL_COL_6\": true, \"KSQL_COL_7\": true, \"KSQL_COL_8\": true}},\n+        {\"topic\": \"OUTPUT\", \"key\": 2, \"value\": {\"KSQL_COL_0\": false, \"KSQL_COL_1\": false, \"KSQL_COL_2\": false, \"KSQL_COL_3\": false, \"KSQL_COL_4\": false, \"KSQL_COL_5\": false, \"KSQL_COL_6\": false, \"KSQL_COL_7\": false, \"KSQL_COL_8\": false}}\n+      ]\n+    },\n+    {\n+      \"name\": \"array comparison\",\n       \"statements\": [\n         \"CREATE STREAM INPUT (A INT KEY, B ARRAY<INT>, C ARRAY<INT>) WITH (kafka_topic='test_topic', value_format='JSON');\",\n-        \"CREATE STREAM OUTPUT AS SELECT A, B = C FROM INPUT;\"\n+        \"CREATE STREAM OUTPUT AS SELECT A, B = C, B <> C, B IS NOT DISTINCT FROM C, B IS DISTINCT FROM C FROM INPUT;\"\n       ],\n-      \"expectedException\": {\n-        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n-        \"message\": \"Cannot compare B (ARRAY<INTEGER>) to C (ARRAY<INTEGER>) with EQUAL.\"\n-      }\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"key\": 1, \"value\": {\"B\": [1,2], \"C\": [1,2.0]}},\n+        {\"topic\": \"test_topic\", \"key\": 2, \"value\": {\"B\": [1,2], \"C\": [1]}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 1, \"value\": {\"KSQL_COL_0\": true, \"KSQL_COL_1\": false, \"KSQL_COL_2\": true, \"KSQL_COL_3\": false}},\n+        {\"topic\": \"OUTPUT\", \"key\": 2, \"value\": {\"KSQL_COL_0\": false, \"KSQL_COL_1\": true, \"KSQL_COL_2\": false, \"KSQL_COL_3\": true}}\n+      ]\n     },\n     {\n-      \"name\": \"comparison map fails\",\n+      \"name\": \"map comparison\",\n       \"statements\": [\n         \"CREATE STREAM INPUT (A INT KEY, B MAP<STRING, INT>, C MAP<STRING, INT>) WITH (kafka_topic='test_topic', value_format='JSON');\",\n-        \"CREATE STREAM OUTPUT AS SELECT A, B = C FROM INPUT;\"\n+        \"CREATE STREAM OUTPUT AS SELECT A, B = C, B <> C, B IS NOT DISTINCT FROM C, B IS DISTINCT FROM C FROM INPUT;\"\n       ],\n-      \"expectedException\": {\n-        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n-        \"message\": \"Cannot compare B (MAP<STRING, INTEGER>) to C (MAP<STRING, INTEGER>) with EQUAL.\"\n-      }\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"key\": 1, \"value\": {\"B\": {\"a\": 1}, \"C\": {\"a\": 1.0}}},\n+        {\"topic\": \"test_topic\", \"key\": 2, \"value\": {\"B\": {\"a\": 1}, \"C\": {\"a\": 2}}},\n+        {\"topic\": \"test_topic\", \"key\": 3, \"value\": {\"B\": {\"a\": 1}, \"C\": {\"b\": 1}}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 1, \"value\": {\"KSQL_COL_0\": true, \"KSQL_COL_1\": false, \"KSQL_COL_2\": true, \"KSQL_COL_3\": false}},\n+        {\"topic\": \"OUTPUT\", \"key\": 2, \"value\": {\"KSQL_COL_0\": false, \"KSQL_COL_1\": true, \"KSQL_COL_2\": false, \"KSQL_COL_3\": true}},\n+        {\"topic\": \"OUTPUT\", \"key\": 3, \"value\": {\"KSQL_COL_0\": false, \"KSQL_COL_1\": true, \"KSQL_COL_2\": false, \"KSQL_COL_3\": true}}\n+      ]\n     },\n     {\n-      \"name\": \"comparison struct fails\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkyMjExMg=="}, "originalCommit": {"oid": "208c481a3b936185c418f720da336efc19cf21c4"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTE5MjU3OnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/binary-comparison.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjowNjoxOFrOHXCoQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTo1MzoxOVrOHY6OSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkyMjM2OA==", "bodyText": "thanks for updating these tests too! we'll need to regenerate the historical plans. you can do this by running PlannedTestGeneratorTest (and uncomment @Ignore)", "url": "https://github.com/confluentinc/ksql/pull/6149#discussion_r493922368", "createdAt": "2020-09-23T22:06:18Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/binary-comparison.json", "diffHunk": "@@ -6,31 +6,31 @@\n     {\n       \"name\": \"equals\",\n       \"statements\": [\n-        \"CREATE STREAM INPUT (A INT KEY, B BOOLEAN, C BIGINT, D DOUBLE, E DECIMAL(4,3), F STRING) WITH (kafka_topic='test_topic', value_format='JSON');\",\n-        \"CREATE STREAM OUTPUT AS SELECT A, A = 1, B = true, C = 11, D = 1.1, E = 1.20, F = 'foo' FROM INPUT;\"\n+        \"CREATE STREAM INPUT (A INT KEY, B BOOLEAN, C BIGINT, D DOUBLE, E DECIMAL(4,3), F STRING, G ARRAY<INT>, H MAP<STRING, INT>, I STRUCT<ID INT>) WITH (kafka_topic='test_topic', value_format='JSON');\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "208c481a3b936185c418f720da336efc19cf21c4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg4MTgwMA==", "bodyText": "Ready @agavra", "url": "https://github.com/confluentinc/ksql/pull/6149#discussion_r495881800", "createdAt": "2020-09-28T11:53:19Z", "author": {"login": "uurl"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/binary-comparison.json", "diffHunk": "@@ -6,31 +6,31 @@\n     {\n       \"name\": \"equals\",\n       \"statements\": [\n-        \"CREATE STREAM INPUT (A INT KEY, B BOOLEAN, C BIGINT, D DOUBLE, E DECIMAL(4,3), F STRING) WITH (kafka_topic='test_topic', value_format='JSON');\",\n-        \"CREATE STREAM OUTPUT AS SELECT A, A = 1, B = true, C = 11, D = 1.1, E = 1.20, F = 'foo' FROM INPUT;\"\n+        \"CREATE STREAM INPUT (A INT KEY, B BOOLEAN, C BIGINT, D DOUBLE, E DECIMAL(4,3), F STRING, G ARRAY<INT>, H MAP<STRING, INT>, I STRUCT<ID INT>) WITH (kafka_topic='test_topic', value_format='JSON');\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkyMjM2OA=="}, "originalCommit": {"oid": "208c481a3b936185c418f720da336efc19cf21c4"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2731, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}