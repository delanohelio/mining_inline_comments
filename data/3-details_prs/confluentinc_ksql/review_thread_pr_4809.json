{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMTI2MDY0", "number": 4809, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoyNToyN1rODo7AFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxNjowNFrODpQ4BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjM2MzA5OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlTarget.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoyNToyN1rOF3xgSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOToxNDo1N1rOF4TXZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNzA4Mg==", "bodyText": "This precedes even this change, but I feel we should throw an exception instead of returning null? and let the caller decide whether to log or not.. I am wondering if we should pass a flag down into a common class like KsqlTarget", "url": "https://github.com/confluentinc/ksql/pull/4809#discussion_r394027082", "createdAt": "2020-03-17T23:25:27Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlTarget.java", "diffHunk": "@@ -195,11 +199,16 @@ private KsqlRequest createKsqlRequest(\n \n   private void executeRequestAsync(\n       final String path,\n-      final Object jsonEntity\n+      final Object jsonEntity,\n+      final boolean expectFailures\n   ) {\n     execute(HttpMethod.POST, path, jsonEntity, (resp, vcf) -> {\n     }).exceptionally(t -> {\n-      log.error(\"Unexpected exception in async request\", t);\n+      if (expectFailures) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499275066520770c98e25551edfc033227d2caed"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNzcwOA==", "bodyText": "On second thought, guess the class itself is aware of different endpoints.. more about this method.. can it throw the exception and let the caller decide", "url": "https://github.com/confluentinc/ksql/pull/4809#discussion_r394027708", "createdAt": "2020-03-17T23:27:42Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlTarget.java", "diffHunk": "@@ -195,11 +199,16 @@ private KsqlRequest createKsqlRequest(\n \n   private void executeRequestAsync(\n       final String path,\n-      final Object jsonEntity\n+      final Object jsonEntity,\n+      final boolean expectFailures\n   ) {\n     execute(HttpMethod.POST, path, jsonEntity, (resp, vcf) -> {\n     }).exceptionally(t -> {\n-      log.error(\"Unexpected exception in async request\", t);\n+      if (expectFailures) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNzA4Mg=="}, "originalCommit": {"oid": "499275066520770c98e25551edfc033227d2caed"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ2NDQ5NQ==", "bodyText": "I'd agree with Vinoth here - methods like postAsyncHeartbeatRequest and postAsyncLagReportingRequest should return a CompletableFuture, which allows the caller to decide if the care about the response and if they do, what to do with it.", "url": "https://github.com/confluentinc/ksql/pull/4809#discussion_r394464495", "createdAt": "2020-03-18T16:06:48Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlTarget.java", "diffHunk": "@@ -195,11 +199,16 @@ private KsqlRequest createKsqlRequest(\n \n   private void executeRequestAsync(\n       final String path,\n-      final Object jsonEntity\n+      final Object jsonEntity,\n+      final boolean expectFailures\n   ) {\n     execute(HttpMethod.POST, path, jsonEntity, (resp, vcf) -> {\n     }).exceptionally(t -> {\n-      log.error(\"Unexpected exception in async request\", t);\n+      if (expectFailures) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNzA4Mg=="}, "originalCommit": {"oid": "499275066520770c98e25551edfc033227d2caed"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4MTg2MA==", "bodyText": "I was originally just keeping with an internal implementation that might be reusable for \"fire and forget\" type methods, but I'm also fine with making this a bit more general and letting callers handle the response/exception.\nChanged to return CompletableFuture<RestResponse<HeartbeatResponse>> which can now be handled by the caller, including handling the exceptional case.", "url": "https://github.com/confluentinc/ksql/pull/4809#discussion_r394581860", "createdAt": "2020-03-18T19:14:57Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlTarget.java", "diffHunk": "@@ -195,11 +199,16 @@ private KsqlRequest createKsqlRequest(\n \n   private void executeRequestAsync(\n       final String path,\n-      final Object jsonEntity\n+      final Object jsonEntity,\n+      final boolean expectFailures\n   ) {\n     execute(HttpMethod.POST, path, jsonEntity, (resp, vcf) -> {\n     }).exceptionally(t -> {\n-      log.error(\"Unexpected exception in async request\", t);\n+      if (expectFailures) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNzA4Mg=="}, "originalCommit": {"oid": "499275066520770c98e25551edfc033227d2caed"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjM2NTMyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlTarget.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMzoyNjo0N1rOF3xhwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOToxNTowNlrOF4TXrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNzQ1Ng==", "bodyText": "We can rely on the IDE to annotate the argument instead of comment? :)", "url": "https://github.com/confluentinc/ksql/pull/4809#discussion_r394027456", "createdAt": "2020-03-17T23:26:47Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlTarget.java", "diffHunk": "@@ -118,7 +121,8 @@ public void postAsyncLagReportingRequest(\n   ) {\n     executeRequestAsync(\n         LAG_REPORT_PATH,\n-        lagReportingMessage\n+        lagReportingMessage,\n+        false /* expectFailures */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "499275066520770c98e25551edfc033227d2caed"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU4MTkzNQ==", "bodyText": "Removed.", "url": "https://github.com/confluentinc/ksql/pull/4809#discussion_r394581935", "createdAt": "2020-03-18T19:15:06Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlTarget.java", "diffHunk": "@@ -118,7 +121,8 @@ public void postAsyncLagReportingRequest(\n   ) {\n     executeRequestAsync(\n         LAG_REPORT_PATH,\n-        lagReportingMessage\n+        lagReportingMessage,\n+        false /* expectFailures */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAyNzQ1Ng=="}, "originalCommit": {"oid": "499275066520770c98e25551edfc033227d2caed"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTg3MzQwOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlTarget.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOTo1MjoxOFrOF4UjmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxNzoxOFrOF4VVKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwMTM2OA==", "bodyText": "Is thenApply asynchronous? We don't want to block for the response. In fact, HeartbeatAgent doesn't even care about the response.", "url": "https://github.com/confluentinc/ksql/pull/4809#discussion_r394601368", "createdAt": "2020-03-18T19:52:18Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlTarget.java", "diffHunk": "@@ -255,6 +261,18 @@ private void executeRequestAsync(\n     return KsqlClientUtil.toRestResponse(response, path, mapper);\n   }\n \n+  private <T> CompletableFuture<RestResponse<T>> executeAsync(\n+      final HttpMethod httpMethod,\n+      final String path,\n+      final Object requestBody,\n+      final Function<ResponseWithBody, T> mapper,\n+      final BiConsumer<HttpClientResponse, CompletableFuture<ResponseWithBody>> responseHandler\n+  ) {\n+    final CompletableFuture<ResponseWithBody> vcf =\n+        execute(httpMethod, path, requestBody, responseHandler);\n+    return vcf.thenApply(response -> KsqlClientUtil.toRestResponse(response, path, mapper));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef6fd65934a3559e71dfed35955f11a2dc97a403"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxNDA1Nw==", "bodyText": "Discussed offline, as long as we don't call get on the future , all other callbacks are non-blocking so we are good", "url": "https://github.com/confluentinc/ksql/pull/4809#discussion_r394614057", "createdAt": "2020-03-18T20:17:18Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlTarget.java", "diffHunk": "@@ -255,6 +261,18 @@ private void executeRequestAsync(\n     return KsqlClientUtil.toRestResponse(response, path, mapper);\n   }\n \n+  private <T> CompletableFuture<RestResponse<T>> executeAsync(\n+      final HttpMethod httpMethod,\n+      final String path,\n+      final Object requestBody,\n+      final Function<ResponseWithBody, T> mapper,\n+      final BiConsumer<HttpClientResponse, CompletableFuture<ResponseWithBody>> responseHandler\n+  ) {\n+    final CompletableFuture<ResponseWithBody> vcf =\n+        execute(httpMethod, path, requestBody, responseHandler);\n+    return vcf.thenApply(response -> KsqlClientUtil.toRestResponse(response, path, mapper));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwMTM2OA=="}, "originalCommit": {"oid": "ef6fd65934a3559e71dfed35955f11a2dc97a403"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTg4NjQ0OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOTo1NjozMlrOF4UsEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMTo1NzozMlrOF4YUCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwMzUzNw==", "bodyText": "nit: async heartbeat request?", "url": "https://github.com/confluentinc/ksql/pull/4809#discussion_r394603537", "createdAt": "2020-03-18T19:56:32Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "diffHunk": "@@ -103,7 +107,13 @@ public void makeAsyncHeartbeatRequest(\n         .target(serverEndPoint);\n \n     getTarget(target, authHeader)\n-        .postAsyncHeartbeatRequest(new KsqlHostInfoEntity(host.host(), host.port()), timestamp);\n+        .postAsyncHeartbeatRequest(new KsqlHostInfoEntity(host.host(), host.port()), timestamp)\n+        .exceptionally(t -> {\n+          // We send heartbeat requests quite frequently and to nodes that might be down.  We don't\n+          // want to fill the logs with spam, so we debug log exceptions.\n+          LOG.debug(\"Exception in async request\", t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef6fd65934a3559e71dfed35955f11a2dc97a403"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDY2MjkyMA==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/4809#discussion_r394662920", "createdAt": "2020-03-18T21:57:32Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "diffHunk": "@@ -103,7 +107,13 @@ public void makeAsyncHeartbeatRequest(\n         .target(serverEndPoint);\n \n     getTarget(target, authHeader)\n-        .postAsyncHeartbeatRequest(new KsqlHostInfoEntity(host.host(), host.port()), timestamp);\n+        .postAsyncHeartbeatRequest(new KsqlHostInfoEntity(host.host(), host.port()), timestamp)\n+        .exceptionally(t -> {\n+          // We send heartbeat requests quite frequently and to nodes that might be down.  We don't\n+          // want to fill the logs with spam, so we debug log exceptions.\n+          LOG.debug(\"Exception in async request\", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYwMzUzNw=="}, "originalCommit": {"oid": "ef6fd65934a3559e71dfed35955f11a2dc97a403"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTk0NjkzOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxNjowNFrOF4VStA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDo0MzoxMlrOF4WKbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMzQyOA==", "bodyText": "Don't we want to debug log this as well?", "url": "https://github.com/confluentinc/ksql/pull/4809#discussion_r394613428", "createdAt": "2020-03-18T20:16:04Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "diffHunk": "@@ -122,7 +132,11 @@ public void makeAsyncLagReportRequest(\n     final KsqlTarget target = sharedClient\n         .target(serverEndPoint);\n \n-    getTarget(target, authHeader).postAsyncLagReportingRequest(lagReportingMessage);\n+    getTarget(target, authHeader).postAsyncLagReportingRequest(lagReportingMessage)\n+        .exceptionally(t -> {\n+          LOG.error(\"Unexpected exception in async request\", t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef6fd65934a3559e71dfed35955f11a2dc97a403"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYyNzY5NA==", "bodyText": "Looking at the code, it seems like all of the hosts start off in a non-alive state and if the hoststatus callback happens at the wrong time, I think lag reporting could hit the same issue as well.\nMaking it debug logging as well.", "url": "https://github.com/confluentinc/ksql/pull/4809#discussion_r394627694", "createdAt": "2020-03-18T20:43:12Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/services/DefaultKsqlClient.java", "diffHunk": "@@ -122,7 +132,11 @@ public void makeAsyncLagReportRequest(\n     final KsqlTarget target = sharedClient\n         .target(serverEndPoint);\n \n-    getTarget(target, authHeader).postAsyncLagReportingRequest(lagReportingMessage);\n+    getTarget(target, authHeader).postAsyncLagReportingRequest(lagReportingMessage)\n+        .exceptionally(t -> {\n+          LOG.error(\"Unexpected exception in async request\", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMzQyOA=="}, "originalCommit": {"oid": "ef6fd65934a3559e71dfed35955f11a2dc97a403"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3782, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}