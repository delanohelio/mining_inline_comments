{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3NzIzODE5", "number": 6482, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjoxODo0NlrOExAgfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNDo1MToxOVrOExv-vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODIzOTk4OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjoxODo0NlrOHm58cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjoxMjoyMFrOHnUfPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NzI5OQ==", "bodyText": "Why can't this still be private?", "url": "https://github.com/confluentinc/ksql/pull/6482#discussion_r510557299", "createdAt": "2020-10-23T02:18:46Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java", "diffHunk": "@@ -539,7 +612,7 @@ private void shouldNotAllowAccessIfPermissionCheckThrowsException(\n     void run() throws Exception;\n   }\n \n-  private static class StringPrincipal implements Principal {\n+  public static class StringPrincipal implements Principal {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "807260d12172929e67f270ed33768f3902309c72"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5MjE5MA==", "bodyText": "Left from another approach I was taking. Fixed.", "url": "https://github.com/confluentinc/ksql/pull/6482#discussion_r510992190", "createdAt": "2020-10-23T16:12:20Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java", "diffHunk": "@@ -539,7 +612,7 @@ private void shouldNotAllowAccessIfPermissionCheckThrowsException(\n     void run() throws Exception;\n   }\n \n-  private static class StringPrincipal implements Principal {\n+  public static class StringPrincipal implements Principal {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NzI5OQ=="}, "originalCommit": {"oid": "807260d12172929e67f270ed33768f3902309c72"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODI0MTYwOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/KsqlAuthorizationProviderHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjoxOTozM1rOHm59Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjoxMjowN1rOHnUe2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NzUxNQ==", "bodyText": "Can we move this into AuthenticationPluginHandler if we're going to rename it? It looks out of place here.", "url": "https://github.com/confluentinc/ksql/pull/6482#discussion_r510557515", "createdAt": "2020-10-23T02:19:33Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/KsqlAuthorizationProviderHandler.java", "diffHunk": "@@ -32,7 +32,7 @@\n  */\n public class KsqlAuthorizationProviderHandler implements Handler<RoutingContext> {\n \n-  public static final Set<String> PATHS_WITHOUT_AUTHORIZATION = ImmutableSet\n+  public static final Set<String> KSQL_AUTHENTICATION_SKIP_PATHS = ImmutableSet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "807260d12172929e67f270ed33768f3902309c72"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5MjA4OA==", "bodyText": "done", "url": "https://github.com/confluentinc/ksql/pull/6482#discussion_r510992088", "createdAt": "2020-10-23T16:12:07Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/KsqlAuthorizationProviderHandler.java", "diffHunk": "@@ -32,7 +32,7 @@\n  */\n public class KsqlAuthorizationProviderHandler implements Handler<RoutingContext> {\n \n-  public static final Set<String> PATHS_WITHOUT_AUTHORIZATION = ImmutableSet\n+  public static final Set<String> KSQL_AUTHENTICATION_SKIP_PATHS = ImmutableSet", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NzUxNQ=="}, "originalCommit": {"oid": "807260d12172929e67f270ed33768f3902309c72"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODI0MjM4OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjoxOTo1NFrOHm59rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjoxMjowMlrOHnUerQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NzYxNQ==", "bodyText": "nit: can we rename this to sendPostRequest() in light of the new method above?", "url": "https://github.com/confluentinc/ksql/pull/6482#discussion_r510557615", "createdAt": "2020-10-23T02:19:54Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java", "diffHunk": "@@ -137,6 +142,11 @@ public void close() {\n     server.start();\n   }\n \n+  @Override\n+  protected HttpResponse<Buffer> sendGetRequest(final String uri) throws Exception {\n+    return sendGetRequestWithCreds(client, uri, USER_WITH_ACCESS, USER_WITH_ACCESS_PWD);\n+  }\n+\n   @Override\n   protected HttpResponse<Buffer> sendRequest(final WebClient client, final String uri,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "807260d12172929e67f270ed33768f3902309c72"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5MjA0NQ==", "bodyText": "done", "url": "https://github.com/confluentinc/ksql/pull/6482#discussion_r510992045", "createdAt": "2020-10-23T16:12:02Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java", "diffHunk": "@@ -137,6 +142,11 @@ public void close() {\n     server.start();\n   }\n \n+  @Override\n+  protected HttpResponse<Buffer> sendGetRequest(final String uri) throws Exception {\n+    return sendGetRequestWithCreds(client, uri, USER_WITH_ACCESS, USER_WITH_ACCESS_PWD);\n+  }\n+\n   @Override\n   protected HttpResponse<Buffer> sendRequest(final WebClient client, final String uri,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NzYxNQ=="}, "originalCommit": {"oid": "807260d12172929e67f270ed33768f3902309c72"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODI0Mjc4OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwMjoyMDowNVrOHm592w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjoxMTo1OFrOHnUehQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NzY1OQ==", "bodyText": "nit: can we rename this to sendPostRequestWithCreds() in light of the new method above?", "url": "https://github.com/confluentinc/ksql/pull/6482#discussion_r510557659", "createdAt": "2020-10-23T02:20:05Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java", "diffHunk": "@@ -415,6 +436,22 @@ private void shouldFailInsertRequest(final String username, final String passwor\n     validateError(expectedErrorCode, expectedMessage, insertsResponse.error);\n   }\n \n+  // auth header is omitted if username and password are null\n+  private static HttpResponse<Buffer> sendGetRequestWithCreds(\n+      final WebClient client,\n+      final String uri,\n+      final String username,\n+      final String password\n+  ) throws Exception {\n+    VertxCompletableFuture<HttpResponse<Buffer>> requestFuture = new VertxCompletableFuture<>();\n+    HttpRequest<Buffer> request = client.get(uri);\n+    if (username != null || password != null) {\n+      request = request.basicAuthentication(username, password);\n+    }\n+    request.send(requestFuture);\n+    return requestFuture.get();\n+  }\n+\n   private HttpResponse<Buffer> sendRequestWithCreds(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "807260d12172929e67f270ed33768f3902309c72"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5MjAwNQ==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/6482#discussion_r510992005", "createdAt": "2020-10-23T16:11:58Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/AuthTest.java", "diffHunk": "@@ -415,6 +436,22 @@ private void shouldFailInsertRequest(final String username, final String passwor\n     validateError(expectedErrorCode, expectedMessage, insertsResponse.error);\n   }\n \n+  // auth header is omitted if username and password are null\n+  private static HttpResponse<Buffer> sendGetRequestWithCreds(\n+      final WebClient client,\n+      final String uri,\n+      final String username,\n+      final String password\n+  ) throws Exception {\n+    VertxCompletableFuture<HttpResponse<Buffer>> requestFuture = new VertxCompletableFuture<>();\n+    HttpRequest<Buffer> request = client.get(uri);\n+    if (username != null || password != null) {\n+      request = request.basicAuthentication(username, password);\n+    }\n+    request.send(requestFuture);\n+    return requestFuture.get();\n+  }\n+\n   private HttpResponse<Buffer> sendRequestWithCreds(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDU1NzY1OQ=="}, "originalCommit": {"oid": "807260d12172929e67f270ed33768f3902309c72"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNjAxNzkwOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/DefaultKsqlSecurityContextProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNDo1MToxOVrOHoA1KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNDo1MToxOVrOHoA1KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTcxODY5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // A user context is not necessary if a user context provider is not present or\n          \n          \n            \n                // the user principal is missing. The missing principal was already validated by the\n          \n          \n            \n                // Authentication and Authorization plugins before calling this method, which means the\n          \n          \n            \n                // missing principal is a valid connection. For those cases, we create a default service\n          \n          \n            \n                // context that the missing user can use.\n          \n          \n            \n                // A user context is not necessary if a user context provider is not present or\n          \n          \n            \n                // the user principal is missing. If a failed authentication attempt results in a missing principle,\n          \n          \n            \n                // then the authentication plugin will have already failed the connection before calling this method.\n          \n          \n            \n                // Therefore, if we've reached this method with a missing principle, then this must be a valid connection that does not require authentication. \n          \n          \n            \n                // For these cases, we create a default service\n          \n          \n            \n                // context that the missing user can use.", "url": "https://github.com/confluentinc/ksql/pull/6482#discussion_r511718697", "createdAt": "2020-10-26T04:51:19Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/DefaultKsqlSecurityContextProvider.java", "diffHunk": "@@ -57,7 +57,17 @@ public KsqlSecurityContext provide(final ApiSecurityContext apiSecurityContext)\n     final Optional<Principal> principal = apiSecurityContext.getPrincipal();\n     final Optional<String> authHeader = apiSecurityContext.getAuthToken();\n \n-    if (securityExtension == null || !securityExtension.getUserContextProvider().isPresent()) {\n+    // A user context is not necessary if a user context provider is not present or\n+    // the user principal is missing. The missing principal was already validated by the\n+    // Authentication and Authorization plugins before calling this method, which means the\n+    // missing principal is a valid connection. For those cases, we create a default service\n+    // context that the missing user can use.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "553fc189802891fd3138b824c5f2804102dfcd97"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2555, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}