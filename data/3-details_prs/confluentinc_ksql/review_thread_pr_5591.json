{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMjc0MDQ0", "number": 5591, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo1OTo1NVrOEELzng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOToxMzozOFrOEENgGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODIzMTk4OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo1OTo1NVrOGhpXSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzo1OTo1NVrOGhpXSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkzMzg5Nw==", "bodyText": "It's not great that this logic is repeated here and also in the method of the same name in ParserUtil.java. I couldn't think of a way to combine them, though, since the ParserUtil method is specific to the AST.", "url": "https://github.com/confluentinc/ksql/pull/5591#discussion_r437933897", "createdAt": "2020-06-10T07:59:55Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java", "diffHunk": "@@ -97,6 +97,20 @@ public static String convertCommaSeparatedWilcardsToRegex(final String csv) {\n     return out.toString();\n   }\n \n+  // See ParserUtil#getIdentifierText()\n+  public static String getIdentifierText(final String text) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "905359f44a9378a30d45623453e56c93c431c468"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODUwMTE1OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/KeyValueExtractor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOToxMTowNFrOGhsDSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODowNjoyNlrOGiAnEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk3NzkzMA==", "bodyText": "Instead of iterating through the entries again in here and having an extra method, it would be simpler to call ServerUtils.getIdentifierText in the existing extractValues method.", "url": "https://github.com/confluentinc/ksql/pull/5591#discussion_r437977930", "createdAt": "2020-06-10T09:11:04Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/KeyValueExtractor.java", "diffHunk": "@@ -69,6 +71,28 @@ public static GenericRow extractValues(final JsonObject values, final LogicalSch\n     return GenericRow.fromList(vals);\n   }\n \n+  static JsonObject convertColumnNameCase(final JsonObject jsonObjectWithCaseInsensitiveFields) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "905359f44a9378a30d45623453e56c93c431c468"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNDc3MA==", "bodyText": "Then we'd also have to do the conversion in extractKey() too, right? I think it's better to do it once upfront, rather than making both extractValues() and extractKey() responsible for converting.\nI'm going to merge this for now; can open a follow-up with the requested changes if I've misunderstood.", "url": "https://github.com/confluentinc/ksql/pull/5591#discussion_r438314770", "createdAt": "2020-06-10T18:06:26Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/KeyValueExtractor.java", "diffHunk": "@@ -69,6 +71,28 @@ public static GenericRow extractValues(final JsonObject values, final LogicalSch\n     return GenericRow.fromList(vals);\n   }\n \n+  static JsonObject convertColumnNameCase(final JsonObject jsonObjectWithCaseInsensitiveFields) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk3NzkzMA=="}, "originalCommit": {"oid": "905359f44a9378a30d45623453e56c93c431c468"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODUwMjk4OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOToxMTozNlrOGhsEeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODowNjoyMVrOGiAm5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk3ODIzNA==", "bodyText": "Do we really also support double quotes for escaping? Thought it was just backtick.", "url": "https://github.com/confluentinc/ksql/pull/5591#discussion_r437978234", "createdAt": "2020-06-10T09:11:36Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java", "diffHunk": "@@ -97,6 +97,20 @@ public static String convertCommaSeparatedWilcardsToRegex(final String csv) {\n     return out.toString();\n   }\n \n+  // See ParserUtil#getIdentifierText()\n+  public static String getIdentifierText(final String text) {\n+    if (text.isEmpty()) {\n+      return \"\";\n+    }\n+\n+    final char firstChar = text.charAt(0);\n+    if (firstChar == '`' || firstChar == '\"') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "905359f44a9378a30d45623453e56c93c431c468"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNDcyNA==", "bodyText": "We also support double quotes. Here's the relevant code: \n  \n    \n      ksql/ksqldb-parser/src/main/java/io/confluent/ksql/util/ParserUtil.java\n    \n    \n        Lines 74 to 77\n      in\n      8427426\n    \n    \n    \n    \n\n        \n          \n           if (context instanceof SqlBaseParser.QuotedIdentifierAlternativeContext) { \n        \n\n        \n          \n             return unquote(context.getText(), \"\\\"\"); \n        \n\n        \n          \n           } else if (context instanceof SqlBaseParser.BackQuotedIdentifierContext) { \n        \n\n        \n          \n             return unquote(context.getText(), \"`\"); \n        \n    \n  \n\n\nI also sanity checked manually.", "url": "https://github.com/confluentinc/ksql/pull/5591#discussion_r438314724", "createdAt": "2020-06-10T18:06:21Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java", "diffHunk": "@@ -97,6 +97,20 @@ public static String convertCommaSeparatedWilcardsToRegex(final String csv) {\n     return out.toString();\n   }\n \n+  // See ParserUtil#getIdentifierText()\n+  public static String getIdentifierText(final String text) {\n+    if (text.isEmpty()) {\n+      return \"\";\n+    }\n+\n+    final char firstChar = text.charAt(0);\n+    if (firstChar == '`' || firstChar == '\"') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk3ODIzNA=="}, "originalCommit": {"oid": "905359f44a9378a30d45623453e56c93c431c468"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODUwOTcwOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/integration/ApiIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwOToxMzozOFrOGhsI_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODowNjoyM1rOGiAm-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk3OTM4OQ==", "bodyText": "What about backtick?", "url": "https://github.com/confluentinc/ksql/pull/5591#discussion_r437979389", "createdAt": "2020-06-10T09:13:38Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/integration/ApiIntegrationTest.java", "diffHunk": "@@ -416,6 +417,50 @@ public void shouldInsertWithMissingValueField() {\n     shouldInsert(row);\n   }\n \n+  @Test\n+  public void shouldInsertWithCaseInsensitivity() {\n+\n+    // Given: lowercase fields names and stream name\n+    String target = TEST_STREAM.toLowerCase();\n+    JsonObject row = new JsonObject()\n+        .put(\"str\", \"HELLO\")\n+        .put(\"dec\", 12.21) // JsonObject does not accept BigDecimal\n+        .put(\"array\", new JsonArray().add(\"a\").add(\"b\"))\n+        .put(\"map\", new JsonObject().put(\"k1\", \"v1\").put(\"k2\", \"v2\"));\n+\n+    // Then:\n+    shouldInsert(target, row);\n+  }\n+\n+  @Test\n+  public void shouldTreatInsertTargetAsCaseSensitiveIfQuoted() {\n+    // Given:\n+    String target = \"`\" + TEST_STREAM.toLowerCase() + \"`\";\n+    JsonObject row = new JsonObject()\n+        .put(\"STR\", \"HELLO\")\n+        .put(\"LONG\", 1000L)\n+        .put(\"DEC\", 12.21) // JsonObject does not accept BigDecimal\n+        .put(\"ARRAY\", new JsonArray().add(\"a\").add(\"b\"))\n+        .put(\"MAP\", new JsonObject().put(\"k1\", \"v1\").put(\"k2\", \"v2\"));\n+\n+    // Then: request fails because stream name is invalid\n+    shouldRejectInsertRequest(target, row, \"Cannot insert values into an unknown stream: \" + target);\n+  }\n+\n+  @Test\n+  public void shouldTreatInsertColumnNamesAsCaseSensitiveIfQuoted() {\n+    // Given:\n+    JsonObject row = new JsonObject()\n+        .put(\"\\\"str\\\"\", \"HELLO\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "905359f44a9378a30d45623453e56c93c431c468"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMxNDc0Nw==", "bodyText": "Added.", "url": "https://github.com/confluentinc/ksql/pull/5591#discussion_r438314747", "createdAt": "2020-06-10T18:06:23Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/integration/ApiIntegrationTest.java", "diffHunk": "@@ -416,6 +417,50 @@ public void shouldInsertWithMissingValueField() {\n     shouldInsert(row);\n   }\n \n+  @Test\n+  public void shouldInsertWithCaseInsensitivity() {\n+\n+    // Given: lowercase fields names and stream name\n+    String target = TEST_STREAM.toLowerCase();\n+    JsonObject row = new JsonObject()\n+        .put(\"str\", \"HELLO\")\n+        .put(\"dec\", 12.21) // JsonObject does not accept BigDecimal\n+        .put(\"array\", new JsonArray().add(\"a\").add(\"b\"))\n+        .put(\"map\", new JsonObject().put(\"k1\", \"v1\").put(\"k2\", \"v2\"));\n+\n+    // Then:\n+    shouldInsert(target, row);\n+  }\n+\n+  @Test\n+  public void shouldTreatInsertTargetAsCaseSensitiveIfQuoted() {\n+    // Given:\n+    String target = \"`\" + TEST_STREAM.toLowerCase() + \"`\";\n+    JsonObject row = new JsonObject()\n+        .put(\"STR\", \"HELLO\")\n+        .put(\"LONG\", 1000L)\n+        .put(\"DEC\", 12.21) // JsonObject does not accept BigDecimal\n+        .put(\"ARRAY\", new JsonArray().add(\"a\").add(\"b\"))\n+        .put(\"MAP\", new JsonObject().put(\"k1\", \"v1\").put(\"k2\", \"v2\"));\n+\n+    // Then: request fails because stream name is invalid\n+    shouldRejectInsertRequest(target, row, \"Cannot insert values into an unknown stream: \" + target);\n+  }\n+\n+  @Test\n+  public void shouldTreatInsertColumnNamesAsCaseSensitiveIfQuoted() {\n+    // Given:\n+    JsonObject row = new JsonObject()\n+        .put(\"\\\"str\\\"\", \"HELLO\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzk3OTM4OQ=="}, "originalCommit": {"oid": "905359f44a9378a30d45623453e56c93c431c468"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3371, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}