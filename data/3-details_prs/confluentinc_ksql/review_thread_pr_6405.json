{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxNTMxNTQx", "number": 6405, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0MToyOFrOEsoy1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0NTowM1rOEso4mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjQxMTc0OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/materialization/ks/KsMaterializationFunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0MToyOFrOHf_QPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0MToyOFrOHf_QPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNDI1NA==", "bodyText": "Note: test name and comments were misleading as the extra steps KsqlMaterialization adds to handle the HAVING clause are installed as part of this test.", "url": "https://github.com/confluentinc/ksql/pull/6405#discussion_r503304254", "createdAt": "2020-10-12T13:41:28Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/materialization/ks/KsMaterializationFunctionalTest.java", "diffHunk": "@@ -619,8 +619,9 @@ public void shouldQueryMaterializedTableWithMultipleAggregationColumns() {\n   }\n \n   @Test\n-  public void shouldIgnoreHavingClause() {\n-    // Note: HAVING clause are handled centrally by KsqlMaterialization\n+  public void shouldHandleHavingClause() {\n+    // Note: HAVING clause are handled centrally by KsqlMaterialization. This logic will have been\n+    // installed as part of building the below statement:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10e5eb2d83655465608d011e5290218886b18cc"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjQxMzgwOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/materialization/ks/KsMaterializationFunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0MjowMVrOHf_Rhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0MjowMVrOHf_Rhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNDU4Mw==", "bodyText": "The number of expected rows is now reduced as we no longer produce spurious tombstones.", "url": "https://github.com/confluentinc/ksql/pull/6405#discussion_r503304583", "createdAt": "2020-10-12T13:42:01Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/materialization/ks/KsMaterializationFunctionalTest.java", "diffHunk": "@@ -632,7 +633,11 @@ public void shouldIgnoreHavingClause() {\n \n     final LogicalSchema schema = schema(\"COUNT\", SqlTypes.BIGINT);\n \n-    final Map<String, GenericRow> rows = waitForUniqueUserRows(STRING_DESERIALIZER, schema);\n+    final int matches = (int) USER_DATA_PROVIDER.data().values().stream()\n+        .filter(row -> ((Long) row.get(0)) > 2)\n+        .count();\n+\n+    final Map<String, GenericRow> rows = waitForUniqueUserRows(matches, STRING_DESERIALIZER, schema);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10e5eb2d83655465608d011e5290218886b18cc"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjQxNjYyOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/materialization/ks/KsMaterializationFunctionalTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0MjozOVrOHf_TQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0MjozOVrOHf_TQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNTAyNw==", "bodyText": "Get's against the table for filtered out rows should return nothing.", "url": "https://github.com/confluentinc/ksql/pull/6405#discussion_r503305027", "createdAt": "2020-10-12T13:42:39Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/materialization/ks/KsMaterializationFunctionalTest.java", "diffHunk": "@@ -641,16 +646,22 @@ public void shouldIgnoreHavingClause() {\n     final MaterializedTable table = materialization.nonWindowed();\n \n     rows.forEach((rowKey, value) -> {\n+      // Rows passing the HAVING clause:\n       final Struct key = asKeyStruct(rowKey, query.getPhysicalSchema());\n \n-      final Optional<Row> expected = Optional.ofNullable(value)\n-          .map(v -> Row.of(schema, key, v, -1L));\n-\n       final Optional<Row> row = withRetry(() -> table.get(key));\n-      assertThat(row.map(Row::schema), is(expected.map(Row::schema)));\n-      assertThat(row.map(Row::key), is(expected.map(Row::key)));\n-      assertThat(row.map(Row::value), is(expected.map(Row::value)));\n+      assertThat(row.map(Row::schema), is(Optional.of(schema)));\n+      assertThat(row.map(Row::key), is(Optional.of(key)));\n+      assertThat(row.map(Row::value), is(Optional.of(value)));\n     });\n+\n+    USER_DATA_PROVIDER.data().entries().stream()\n+        .filter(e -> !rows.containsKey(e.getKey().getString(\"USERID\")))\n+        .forEach(e -> {\n+          // Rows filtered by the HAVING clause:\n+          final Optional<Row> row = withRetry(() -> table.get(e.getKey()));\n+          assertThat(row, is(Optional.empty()));\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a10e5eb2d83655465608d011e5290218886b18cc"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjQyNTg5OnYy", "diffSide": "RIGHT", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/function/udaf/KudafAggregator.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0NDo1NlrOHf_ZIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMDowNzo0N1rOHgLtpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNjUyOA==", "bodyText": "Kafka Streams does not expect the aggregator to mutate its parameters. The streams code is passing in the \"old value\", which ksqlDB was then mutating and returning as the \"new value\". This meant, when then function returned, the old and new values matched.  This is obviously bad!\nCode now takes a copy and mutates that.  There is a perf hit, obviously, but it's unavoidable.", "url": "https://github.com/confluentinc/ksql/pull/6405#discussion_r503306528", "createdAt": "2020-10-12T13:44:56Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/function/udaf/KudafAggregator.java", "diffHunk": "@@ -52,9 +52,11 @@ public KudafAggregator(\n \n   @Override\n   public GenericRow apply(final K k, final GenericRow rowValue, final GenericRow aggRowValue) {\n+    final GenericRow result = GenericRow.fromList(aggRowValue.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc7f1daf712e364ce52310acfda761049ebf62d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM5NDkwOA==", "bodyText": "Not sure I understand -- why did the old code work, in that case? Or did something change on the Streams side recently?", "url": "https://github.com/confluentinc/ksql/pull/6405#discussion_r503394908", "createdAt": "2020-10-12T16:06:33Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/function/udaf/KudafAggregator.java", "diffHunk": "@@ -52,9 +52,11 @@ public KudafAggregator(\n \n   @Override\n   public GenericRow apply(final K k, final GenericRow rowValue, final GenericRow aggRowValue) {\n+    final GenericRow result = GenericRow.fromList(aggRowValue.values());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNjUyOA=="}, "originalCommit": {"oid": "cc7f1daf712e364ce52310acfda761049ebf62d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQwNjM3Ng==", "bodyText": "The old code works because we were never enabling the sending of old values. We now do, to avoid the spurious tombstones.", "url": "https://github.com/confluentinc/ksql/pull/6405#discussion_r503406376", "createdAt": "2020-10-12T16:28:09Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/function/udaf/KudafAggregator.java", "diffHunk": "@@ -52,9 +52,11 @@ public KudafAggregator(\n \n   @Override\n   public GenericRow apply(final K k, final GenericRow rowValue, final GenericRow aggRowValue) {\n+    final GenericRow result = GenericRow.fromList(aggRowValue.values());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNjUyOA=="}, "originalCommit": {"oid": "cc7f1daf712e364ce52310acfda761049ebf62d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ2Mjc1NQ==", "bodyText": "Sorry, still not understanding. What was being sent before, if not the old values? Was this method even being called, previously?", "url": "https://github.com/confluentinc/ksql/pull/6405#discussion_r503462755", "createdAt": "2020-10-12T18:22:01Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/function/udaf/KudafAggregator.java", "diffHunk": "@@ -52,9 +52,11 @@ public KudafAggregator(\n \n   @Override\n   public GenericRow apply(final K k, final GenericRow rowValue, final GenericRow aggRowValue) {\n+    final GenericRow result = GenericRow.fromList(aggRowValue.values());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNjUyOA=="}, "originalCommit": {"oid": "cc7f1daf712e364ce52310acfda761049ebf62d4"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzUwODM4OA==", "bodyText": "The processing nodes in the streams topology can optionally include the old/previous value, as well as the new/current value, to child nodes.  This is not on by default.  An upstream change to how table filters is handled means this is now turned on.\nThe streams code for aggregation looks something like:\nV process(K key, Change<V> change) {\n   // Get old value from store:\n   final V oldAgg = store.get(key);\n\n   // Undo any previous value:\n  final T intermediateAgg = value.oldValue != null && oldAgg != null\n    ? remove.apply(key, value.oldValue, oldAgg)\n    : oldAgg;\n\n   // Then add the new value\n   final T newAgg;\n   if (value.newValue != null) {\n       final T initializedAgg = intermediateAgg == null\n         ?  initializer.apply();\n          : intermediateAgg;\n\n       newAgg = add.apply(key, value.newValue, initializedAgg);\n   } else {\n       newAgg = intermediateAgg;\n   }\n\n   // update the store with the new value. & forard\n   store.put(key, newAgg);\n   tupleForwarder.maybeForward(key, newAgg, sendOldValues ? oldAgg : null);\n}\n\nThe two calls: remove.apply(key, value.oldValue, oldAgg) and add.apply(key, value.newValue, initializedAgg) are calling out to ksqlDB code.  If these calls directly mutate the oldAgg or initializedAgg parameters passed, rather than creating copies, then the old and new values forwarded to child nodes will match. i.e. in    tupleForwarder.maybeForward(key, newAgg, sendOldValues ? oldAgg : null), the parameters newAgg and oldAgg will have the same updated value, rather than oldAgg holding the previous value.  This breaks downstream processes, which expect the old and new value.\nPreviously the nodes weren't configured to send old values, so where just sending null for the old value and downstream could handle this correctly.", "url": "https://github.com/confluentinc/ksql/pull/6405#discussion_r503508388", "createdAt": "2020-10-12T20:07:47Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/function/udaf/KudafAggregator.java", "diffHunk": "@@ -52,9 +52,11 @@ public KudafAggregator(\n \n   @Override\n   public GenericRow apply(final K k, final GenericRow rowValue, final GenericRow aggRowValue) {\n+    final GenericRow result = GenericRow.fromList(aggRowValue.values());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNjUyOA=="}, "originalCommit": {"oid": "cc7f1daf712e364ce52310acfda761049ebf62d4"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjQyNjUxOnYy", "diffSide": "RIGHT", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/function/udaf/KudafUndoAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0NTowM1rOHf_ZeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMzo0NTowM1rOHf_ZeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMwNjYxNw==", "bodyText": "As above.", "url": "https://github.com/confluentinc/ksql/pull/6405#discussion_r503306617", "createdAt": "2020-10-12T13:45:03Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/function/udaf/KudafUndoAggregator.java", "diffHunk": "@@ -51,17 +51,19 @@ public KudafUndoAggregator(\n   @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n   @Override\n   public GenericRow apply(final Struct k, final GenericRow rowValue, final GenericRow aggRowValue) {\n+    final GenericRow result = GenericRow.fromList(aggRowValue.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc7f1daf712e364ce52310acfda761049ebf62d4"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2693, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}