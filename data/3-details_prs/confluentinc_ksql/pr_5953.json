{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNzAwNTE0", "number": 5953, "title": "docs: add operators section to lexical structure topic (DOCS-5067)", "bodyText": "I cribbed and edited the content from the existing operators topic, then picked up some details from the ANTLR grammar.", "createdAt": "2020-08-05T23:46:47Z", "url": "https://github.com/confluentinc/ksql/pull/5953", "merged": true, "mergeCommit": {"oid": "fb2932e748ea188a21dfba2e4641927151755979"}, "closed": true, "closedAt": "2020-08-06T18:32:56Z", "author": {"login": "JimGalasyn"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8EC4FAH2gAyNDYzNzAwNTE0OjBhMTQ1OTA3MzJkNjI5OGI2MTlmNDQ1MjZmMGMyMjAwZTI3NjJmZTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8UI4AAH2gAyNDYzNzAwNTE0OmU4ZWM0MjQ5ZGI5YTY3NjJjZTIyMjg4N2QwOGNiYTVjZDI0ODE1NzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0a14590732d6298b619f44526f0c2200e2762fe4", "author": {"user": {"login": "JimGalasyn", "name": "Jim Galasyn"}}, "url": "https://github.com/confluentinc/ksql/commit/0a14590732d6298b619f44526f0c2200e2762fe4", "committedDate": "2020-08-05T23:44:18Z", "message": "docs: add operators section to lexical structure topic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNTA0NTMz", "url": "https://github.com/confluentinc/ksql/pull/5953#pullrequestreview-462504533", "createdAt": "2020-08-06T13:13:23Z", "commit": {"oid": "0a14590732d6298b619f44526f0c2200e2762fe4"}, "state": "APPROVED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzoxMzoyM1rOG8y55A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDoyMjo1MlrOG810pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwMTc2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | `<`          | is less than                   | numeric         \n          \n          \n            \n            | `<`          | is less than                   | string, numeric", "url": "https://github.com/confluentinc/ksql/pull/5953#discussion_r466401764", "createdAt": "2020-08-06T13:13:23Z", "author": {"login": "big-andy-coates"}, "path": "docs/reference2/sql-syntax/lexical-structure.md", "diffHunk": "@@ -53,9 +55,121 @@ TODO: what makes a valid identifier?\n \n ## Operators\n \n-- Infix functions like +, -, *, /.\n+The following table lists all of the operators that are supported by ksqlDB SQL.\n+\n+| operator     | meaning                        | applies to      \n+|--------------|--------------------------------|-----------------\n+| `=`          | is equal to                    | string, numeric \n+| `!=` or `<>` | is not equal to                | string, numeric \n+| `<`          | is less than                   | numeric         ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a14590732d6298b619f44526f0c2200e2762fe4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwMTg2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | `<=`         | is less than or equal to       | numeric         \n          \n          \n            \n            | `<=`         | is less than or equal to       | string, numeric", "url": "https://github.com/confluentinc/ksql/pull/5953#discussion_r466401869", "createdAt": "2020-08-06T13:13:35Z", "author": {"login": "big-andy-coates"}, "path": "docs/reference2/sql-syntax/lexical-structure.md", "diffHunk": "@@ -53,9 +55,121 @@ TODO: what makes a valid identifier?\n \n ## Operators\n \n-- Infix functions like +, -, *, /.\n+The following table lists all of the operators that are supported by ksqlDB SQL.\n+\n+| operator     | meaning                        | applies to      \n+|--------------|--------------------------------|-----------------\n+| `=`          | is equal to                    | string, numeric \n+| `!=` or `<>` | is not equal to                | string, numeric \n+| `<`          | is less than                   | numeric         \n+| `<=`         | is less than or equal to       | numeric         ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a14590732d6298b619f44526f0c2200e2762fe4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwMTk2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | `>`          | is greater than                | numeric         \n          \n          \n            \n            | `>`          | is greater than                | string, numeric", "url": "https://github.com/confluentinc/ksql/pull/5953#discussion_r466401961", "createdAt": "2020-08-06T13:13:44Z", "author": {"login": "big-andy-coates"}, "path": "docs/reference2/sql-syntax/lexical-structure.md", "diffHunk": "@@ -53,9 +55,121 @@ TODO: what makes a valid identifier?\n \n ## Operators\n \n-- Infix functions like +, -, *, /.\n+The following table lists all of the operators that are supported by ksqlDB SQL.\n+\n+| operator     | meaning                        | applies to      \n+|--------------|--------------------------------|-----------------\n+| `=`          | is equal to                    | string, numeric \n+| `!=` or `<>` | is not equal to                | string, numeric \n+| `<`          | is less than                   | numeric         \n+| `<=`         | is less than or equal to       | numeric         \n+| `>`          | is greater than                | numeric         ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a14590732d6298b619f44526f0c2200e2762fe4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwMjA2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | `>=`         | is greater than or equal to    | numeric         \n          \n          \n            \n            | `>=`         | is greater than or equal to    | string, numeric", "url": "https://github.com/confluentinc/ksql/pull/5953#discussion_r466402068", "createdAt": "2020-08-06T13:13:54Z", "author": {"login": "big-andy-coates"}, "path": "docs/reference2/sql-syntax/lexical-structure.md", "diffHunk": "@@ -53,9 +55,121 @@ TODO: what makes a valid identifier?\n \n ## Operators\n \n-- Infix functions like +, -, *, /.\n+The following table lists all of the operators that are supported by ksqlDB SQL.\n+\n+| operator     | meaning                        | applies to      \n+|--------------|--------------------------------|-----------------\n+| `=`          | is equal to                    | string, numeric \n+| `!=` or `<>` | is not equal to                | string, numeric \n+| `<`          | is less than                   | numeric         \n+| `<=`         | is less than or equal to       | numeric         \n+| `>`          | is greater than                | numeric         \n+| `>=`         | is greater than or equal to    | numeric         ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a14590732d6298b619f44526f0c2200e2762fe4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwMjU0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | `+`          | addition and concatenation     | numeric         \n          \n          \n            \n            | `+`          | addition for numerics and concatenation for strings    | string, numeric", "url": "https://github.com/confluentinc/ksql/pull/5953#discussion_r466402542", "createdAt": "2020-08-06T13:14:38Z", "author": {"login": "big-andy-coates"}, "path": "docs/reference2/sql-syntax/lexical-structure.md", "diffHunk": "@@ -53,9 +55,121 @@ TODO: what makes a valid identifier?\n \n ## Operators\n \n-- Infix functions like +, -, *, /.\n+The following table lists all of the operators that are supported by ksqlDB SQL.\n+\n+| operator     | meaning                        | applies to      \n+|--------------|--------------------------------|-----------------\n+| `=`          | is equal to                    | string, numeric \n+| `!=` or `<>` | is not equal to                | string, numeric \n+| `<`          | is less than                   | numeric         \n+| `<=`         | is less than or equal to       | numeric         \n+| `>`          | is greater than                | numeric         \n+| `>=`         | is greater than or equal to    | numeric         \n+| `+`          | addition and concatenation     | numeric         ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a14590732d6298b619f44526f0c2200e2762fe4"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwMzY0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | `%`          | wildcard and modulus           | string, numeric \n          \n          \n            \n            | `%`          | modulus           | numeric \n          \n      \n    \n    \n  \n\nThough % can be used in a string to indicate a wildcard, it's not acting as an operator. You can't do:\nSELECT 'a' % 'b', ...", "url": "https://github.com/confluentinc/ksql/pull/5953#discussion_r466403641", "createdAt": "2020-08-06T13:16:12Z", "author": {"login": "big-andy-coates"}, "path": "docs/reference2/sql-syntax/lexical-structure.md", "diffHunk": "@@ -53,9 +55,121 @@ TODO: what makes a valid identifier?\n \n ## Operators\n \n-- Infix functions like +, -, *, /.\n+The following table lists all of the operators that are supported by ksqlDB SQL.\n+\n+| operator     | meaning                        | applies to      \n+|--------------|--------------------------------|-----------------\n+| `=`          | is equal to                    | string, numeric \n+| `!=` or `<>` | is not equal to                | string, numeric \n+| `<`          | is less than                   | numeric         \n+| `<=`         | is less than or equal to       | numeric         \n+| `>`          | is greater than                | numeric         \n+| `>=`         | is greater than or equal to    | numeric         \n+| `+`          | addition and concatenation     | numeric         \n+| `-`          | subtraction                    | numeric         \n+| `*`          | multiplication                 | numeric         \n+| `/`          | division                       | numeric         \n+| `%`          | wildcard and modulus           | string, numeric ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a14590732d6298b619f44526f0c2200e2762fe4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwNDkwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | `||` or `+`  | concatenation                  | string          \n          \n          \n            \n            | `||`   | concatenation                  | string          \n          \n      \n    \n    \n  \n\nYou've already covered + above for strings.", "url": "https://github.com/confluentinc/ksql/pull/5953#discussion_r466404902", "createdAt": "2020-08-06T13:18:19Z", "author": {"login": "big-andy-coates"}, "path": "docs/reference2/sql-syntax/lexical-structure.md", "diffHunk": "@@ -53,9 +55,121 @@ TODO: what makes a valid identifier?\n \n ## Operators\n \n-- Infix functions like +, -, *, /.\n+The following table lists all of the operators that are supported by ksqlDB SQL.\n+\n+| operator     | meaning                        | applies to      \n+|--------------|--------------------------------|-----------------\n+| `=`          | is equal to                    | string, numeric \n+| `!=` or `<>` | is not equal to                | string, numeric \n+| `<`          | is less than                   | numeric         \n+| `<=`         | is less than or equal to       | numeric         \n+| `>`          | is greater than                | numeric         \n+| `>=`         | is greater than or equal to    | numeric         \n+| `+`          | addition and concatenation     | numeric         \n+| `-`          | subtraction                    | numeric         \n+| `*`          | multiplication                 | numeric         \n+| `/`          | division                       | numeric         \n+| `%`          | wildcard and modulus           | string, numeric \n+| `||` or `+`  | concatenation                  | string          ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a14590732d6298b619f44526f0c2200e2762fe4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwNTk4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | `E`          | exponent                       | numeric         \n          \n          \n            \n            | `E` or `e`         | exponent                       | numeric", "url": "https://github.com/confluentinc/ksql/pull/5953#discussion_r466405980", "createdAt": "2020-08-06T13:20:05Z", "author": {"login": "big-andy-coates"}, "path": "docs/reference2/sql-syntax/lexical-structure.md", "diffHunk": "@@ -53,9 +55,121 @@ TODO: what makes a valid identifier?\n \n ## Operators\n \n-- Infix functions like +, -, *, /.\n+The following table lists all of the operators that are supported by ksqlDB SQL.\n+\n+| operator     | meaning                        | applies to      \n+|--------------|--------------------------------|-----------------\n+| `=`          | is equal to                    | string, numeric \n+| `!=` or `<>` | is not equal to                | string, numeric \n+| `<`          | is less than                   | numeric         \n+| `<=`         | is less than or equal to       | numeric         \n+| `>`          | is greater than                | numeric         \n+| `>=`         | is greater than or equal to    | numeric         \n+| `+`          | addition and concatenation     | numeric         \n+| `-`          | subtraction                    | numeric         \n+| `*`          | multiplication                 | numeric         \n+| `/`          | division                       | numeric         \n+| `%`          | wildcard and modulus           | string, numeric \n+| `||` or `+`  | concatenation                  | string          \n+| `:=`         | assignment                     | all             \n+| `->`         | struct field dereference       | struct     \n+| `.`          | source dereference             | table, stream\n+| `E`          | exponent                       | numeric         ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a14590732d6298b619f44526f0c2200e2762fe4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQwNjMzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [numeric types](data-types/numeric.md), like INT, BIGINT, and DOUBLE.\n          \n          \n            \n            [numeric types](data-types/numeric.md), like INT, BIGINT, DOUBLE and DECIMAL.", "url": "https://github.com/confluentinc/ksql/pull/5953#discussion_r466406332", "createdAt": "2020-08-06T13:20:35Z", "author": {"login": "big-andy-coates"}, "path": "docs/reference2/sql-syntax/lexical-structure.md", "diffHunk": "@@ -53,9 +55,121 @@ TODO: what makes a valid identifier?\n \n ## Operators\n \n-- Infix functions like +, -, *, /.\n+The following table lists all of the operators that are supported by ksqlDB SQL.\n+\n+| operator     | meaning                        | applies to      \n+|--------------|--------------------------------|-----------------\n+| `=`          | is equal to                    | string, numeric \n+| `!=` or `<>` | is not equal to                | string, numeric \n+| `<`          | is less than                   | numeric         \n+| `<=`         | is less than or equal to       | numeric         \n+| `>`          | is greater than                | numeric         \n+| `>=`         | is greater than or equal to    | numeric         \n+| `+`          | addition and concatenation     | numeric         \n+| `-`          | subtraction                    | numeric         \n+| `*`          | multiplication                 | numeric         \n+| `/`          | division                       | numeric         \n+| `%`          | wildcard and modulus           | string, numeric \n+| `||` or `+`  | concatenation                  | string          \n+| `:=`         | assignment                     | all             \n+| `->`         | struct field dereference       | struct     \n+| `.`          | source dereference             | table, stream\n+| `E`          | exponent                       | numeric         \n+\n+The explanation for each operator includes a supporting example based on\n+the following table:\n+\n+```sql\n+CREATE TABLE USERS (\n+    USERID BIGINT PRIMARY KEY,\n+    FIRST_NAME STRING,\n+    LAST_NAME STRING,\n+    NICKNAMES ARRAY<STRING>,\n+    ADDRESS STRUCT<STREET_NAME STRING, HOUSE_NUM INTEGER>\n+) WITH (KAFKA_TOPIC='users', VALUE_FORMAT='AVRO');\n+```\n+\n+### Arithmetic\n+\n+You can apply the familiar arithmetic operators, like `+` and `%`, to\n+[numeric types](data-types/numeric.md), like INT, BIGINT, and DOUBLE.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a14590732d6298b619f44526f0c2200e2762fe4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQxMjIzNA==", "bodyText": "It's a bug that you can't use || for multi-part, so we should probably fix the bug: #5956 and keep the docs inline with expected functionality.\n(Figure this documentation won't be updated when the above bug is fixed).", "url": "https://github.com/confluentinc/ksql/pull/5953#discussion_r466412234", "createdAt": "2020-08-06T13:29:04Z", "author": {"login": "big-andy-coates"}, "path": "docs/reference2/sql-syntax/lexical-structure.md", "diffHunk": "@@ -53,9 +55,121 @@ TODO: what makes a valid identifier?\n \n ## Operators\n \n-- Infix functions like +, -, *, /.\n+The following table lists all of the operators that are supported by ksqlDB SQL.\n+\n+| operator     | meaning                        | applies to      \n+|--------------|--------------------------------|-----------------\n+| `=`          | is equal to                    | string, numeric \n+| `!=` or `<>` | is not equal to                | string, numeric \n+| `<`          | is less than                   | numeric         \n+| `<=`         | is less than or equal to       | numeric         \n+| `>`          | is greater than                | numeric         \n+| `>=`         | is greater than or equal to    | numeric         \n+| `+`          | addition and concatenation     | numeric         \n+| `-`          | subtraction                    | numeric         \n+| `*`          | multiplication                 | numeric         \n+| `/`          | division                       | numeric         \n+| `%`          | wildcard and modulus           | string, numeric \n+| `||` or `+`  | concatenation                  | string          \n+| `:=`         | assignment                     | all             \n+| `->`         | struct field dereference       | struct     \n+| `.`          | source dereference             | table, stream\n+| `E`          | exponent                       | numeric         \n+\n+The explanation for each operator includes a supporting example based on\n+the following table:\n+\n+```sql\n+CREATE TABLE USERS (\n+    USERID BIGINT PRIMARY KEY,\n+    FIRST_NAME STRING,\n+    LAST_NAME STRING,\n+    NICKNAMES ARRAY<STRING>,\n+    ADDRESS STRUCT<STREET_NAME STRING, HOUSE_NUM INTEGER>\n+) WITH (KAFKA_TOPIC='users', VALUE_FORMAT='AVRO');\n+```\n+\n+### Arithmetic\n+\n+You can apply the familiar arithmetic operators, like `+` and `%`, to\n+[numeric types](data-types/numeric.md), like INT, BIGINT, and DOUBLE.\n+\n+The following example statement uses the addition operator (`+`) to compute\n+the sum of the lengths of two strings:\n+\n+```sql\n+SELECT USERID, LEN(FIRST_NAME) + LEN(LAST_NAME) AS NAME_LENGTH FROM USERS EMIT CHANGES;\n+```\n+\n+### Concatenation\n+\n+Use the concatenation operator (`+` or `||`) to concatenate\n+[STRING](data-types/character.md) values.\n+\n+```sql\n+SELECT USERID, FIRST_NAME + LAST_NAME AS FULL_NAME FROM USERS EMIT CHANGES;\n+```\n+\n+You can use the `+` operator for multi-part concatenation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a14590732d6298b619f44526f0c2200e2762fe4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQxMzYxNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n            \n          \n          \n            \n            Providing the fully qualified column name is optional unless the column name is ambiguous. For example, if a two sides of a join both contained a `foo` column, then any reference to `foo` in the query would need to be fully qualified.", "url": "https://github.com/confluentinc/ksql/pull/5953#discussion_r466413615", "createdAt": "2020-08-06T13:31:06Z", "author": {"login": "big-andy-coates"}, "path": "docs/reference2/sql-syntax/lexical-structure.md", "diffHunk": "@@ -53,9 +55,121 @@ TODO: what makes a valid identifier?\n \n ## Operators\n \n-- Infix functions like +, -, *, /.\n+The following table lists all of the operators that are supported by ksqlDB SQL.\n+\n+| operator     | meaning                        | applies to      \n+|--------------|--------------------------------|-----------------\n+| `=`          | is equal to                    | string, numeric \n+| `!=` or `<>` | is not equal to                | string, numeric \n+| `<`          | is less than                   | numeric         \n+| `<=`         | is less than or equal to       | numeric         \n+| `>`          | is greater than                | numeric         \n+| `>=`         | is greater than or equal to    | numeric         \n+| `+`          | addition and concatenation     | numeric         \n+| `-`          | subtraction                    | numeric         \n+| `*`          | multiplication                 | numeric         \n+| `/`          | division                       | numeric         \n+| `%`          | wildcard and modulus           | string, numeric \n+| `||` or `+`  | concatenation                  | string          \n+| `:=`         | assignment                     | all             \n+| `->`         | struct field dereference       | struct     \n+| `.`          | source dereference             | table, stream\n+| `E`          | exponent                       | numeric         \n+\n+The explanation for each operator includes a supporting example based on\n+the following table:\n+\n+```sql\n+CREATE TABLE USERS (\n+    USERID BIGINT PRIMARY KEY,\n+    FIRST_NAME STRING,\n+    LAST_NAME STRING,\n+    NICKNAMES ARRAY<STRING>,\n+    ADDRESS STRUCT<STREET_NAME STRING, HOUSE_NUM INTEGER>\n+) WITH (KAFKA_TOPIC='users', VALUE_FORMAT='AVRO');\n+```\n+\n+### Arithmetic\n+\n+You can apply the familiar arithmetic operators, like `+` and `%`, to\n+[numeric types](data-types/numeric.md), like INT, BIGINT, and DOUBLE.\n+\n+The following example statement uses the addition operator (`+`) to compute\n+the sum of the lengths of two strings:\n+\n+```sql\n+SELECT USERID, LEN(FIRST_NAME) + LEN(LAST_NAME) AS NAME_LENGTH FROM USERS EMIT CHANGES;\n+```\n+\n+### Concatenation\n+\n+Use the concatenation operator (`+` or `||`) to concatenate\n+[STRING](data-types/character.md) values.\n+\n+```sql\n+SELECT USERID, FIRST_NAME + LAST_NAME AS FULL_NAME FROM USERS EMIT CHANGES;\n+```\n+\n+You can use the `+` operator for multi-part concatenation.\n+\n+The following example statement uses the concatenation operator (`+`) to create\n+an error message:\n+\n+```sql\n+SELECT USERID,\n+    TIMESTAMPTOSTRING(ROWTIME, 'yyyy-MM-dd HH:mm:ss') +\n+        ': :heavy_exclamation_mark: On ' +\n+        HOST +\n+        ' there were ' +\n+        CAST(INVALID_LOGIN_COUNT AS VARCHAR) +\n+        ' attempts in the last minute (threshold is >=4)'\n+  FROM INVALID_USERS_LOGINS_PER_HOST\n+  WHERE INVALID_LOGIN_COUNT>=4\n+  EMIT CHANGES;\n+```\n+\n+### Source dereference\n+\n+Use the source dereference operator (`.`) to specify columns by dereferencing\n+the source stream or table.\n+\n+The following example statement selects the value of the FIRST_NAME column in\n+the USERS table:\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a14590732d6298b619f44526f0c2200e2762fe4"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQxMzc1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            SELECT USERID, USERS.FIRST_NAME FROM USERS EMIT CHANGES;\n          \n          \n            \n            SELECT USERS.USERID, USERS.FIRST_NAME FROM USERS EMIT CHANGES;", "url": "https://github.com/confluentinc/ksql/pull/5953#discussion_r466413758", "createdAt": "2020-08-06T13:31:19Z", "author": {"login": "big-andy-coates"}, "path": "docs/reference2/sql-syntax/lexical-structure.md", "diffHunk": "@@ -53,9 +55,121 @@ TODO: what makes a valid identifier?\n \n ## Operators\n \n-- Infix functions like +, -, *, /.\n+The following table lists all of the operators that are supported by ksqlDB SQL.\n+\n+| operator     | meaning                        | applies to      \n+|--------------|--------------------------------|-----------------\n+| `=`          | is equal to                    | string, numeric \n+| `!=` or `<>` | is not equal to                | string, numeric \n+| `<`          | is less than                   | numeric         \n+| `<=`         | is less than or equal to       | numeric         \n+| `>`          | is greater than                | numeric         \n+| `>=`         | is greater than or equal to    | numeric         \n+| `+`          | addition and concatenation     | numeric         \n+| `-`          | subtraction                    | numeric         \n+| `*`          | multiplication                 | numeric         \n+| `/`          | division                       | numeric         \n+| `%`          | wildcard and modulus           | string, numeric \n+| `||` or `+`  | concatenation                  | string          \n+| `:=`         | assignment                     | all             \n+| `->`         | struct field dereference       | struct     \n+| `.`          | source dereference             | table, stream\n+| `E`          | exponent                       | numeric         \n+\n+The explanation for each operator includes a supporting example based on\n+the following table:\n+\n+```sql\n+CREATE TABLE USERS (\n+    USERID BIGINT PRIMARY KEY,\n+    FIRST_NAME STRING,\n+    LAST_NAME STRING,\n+    NICKNAMES ARRAY<STRING>,\n+    ADDRESS STRUCT<STREET_NAME STRING, HOUSE_NUM INTEGER>\n+) WITH (KAFKA_TOPIC='users', VALUE_FORMAT='AVRO');\n+```\n+\n+### Arithmetic\n+\n+You can apply the familiar arithmetic operators, like `+` and `%`, to\n+[numeric types](data-types/numeric.md), like INT, BIGINT, and DOUBLE.\n+\n+The following example statement uses the addition operator (`+`) to compute\n+the sum of the lengths of two strings:\n+\n+```sql\n+SELECT USERID, LEN(FIRST_NAME) + LEN(LAST_NAME) AS NAME_LENGTH FROM USERS EMIT CHANGES;\n+```\n+\n+### Concatenation\n+\n+Use the concatenation operator (`+` or `||`) to concatenate\n+[STRING](data-types/character.md) values.\n+\n+```sql\n+SELECT USERID, FIRST_NAME + LAST_NAME AS FULL_NAME FROM USERS EMIT CHANGES;\n+```\n+\n+You can use the `+` operator for multi-part concatenation.\n+\n+The following example statement uses the concatenation operator (`+`) to create\n+an error message:\n+\n+```sql\n+SELECT USERID,\n+    TIMESTAMPTOSTRING(ROWTIME, 'yyyy-MM-dd HH:mm:ss') +\n+        ': :heavy_exclamation_mark: On ' +\n+        HOST +\n+        ' there were ' +\n+        CAST(INVALID_LOGIN_COUNT AS VARCHAR) +\n+        ' attempts in the last minute (threshold is >=4)'\n+  FROM INVALID_USERS_LOGINS_PER_HOST\n+  WHERE INVALID_LOGIN_COUNT>=4\n+  EMIT CHANGES;\n+```\n+\n+### Source dereference\n+\n+Use the source dereference operator (`.`) to specify columns by dereferencing\n+the source stream or table.\n+\n+The following example statement selects the value of the FIRST_NAME column in\n+the USERS table:\n+\n+```sql\n+SELECT USERID, USERS.FIRST_NAME FROM USERS EMIT CHANGES;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a14590732d6298b619f44526f0c2200e2762fe4"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQxNjk4OQ==", "bodyText": "Bad links?\nCan't find data-types/compund.md. Not sure what compund is anyway ;)\nAlso second link incorrectly references array twice, not map.\nschemas.md is the file that currently contains details of our different data types. Did you mean to link to that?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [array](data-types/compund.md#array) index or a [array](data-types/compund.md#array) map key. Arrays indexes are one-based.\n          \n          \n            \n            [array](data-types/compund.md#array) index or a [map](data-types/compund.md#map) key. Arrays indexes are one-based.", "url": "https://github.com/confluentinc/ksql/pull/5953#discussion_r466416989", "createdAt": "2020-08-06T13:36:09Z", "author": {"login": "big-andy-coates"}, "path": "docs/reference2/sql-syntax/lexical-structure.md", "diffHunk": "@@ -53,9 +55,121 @@ TODO: what makes a valid identifier?\n \n ## Operators\n \n-- Infix functions like +, -, *, /.\n+The following table lists all of the operators that are supported by ksqlDB SQL.\n+\n+| operator     | meaning                        | applies to      \n+|--------------|--------------------------------|-----------------\n+| `=`          | is equal to                    | string, numeric \n+| `!=` or `<>` | is not equal to                | string, numeric \n+| `<`          | is less than                   | numeric         \n+| `<=`         | is less than or equal to       | numeric         \n+| `>`          | is greater than                | numeric         \n+| `>=`         | is greater than or equal to    | numeric         \n+| `+`          | addition and concatenation     | numeric         \n+| `-`          | subtraction                    | numeric         \n+| `*`          | multiplication                 | numeric         \n+| `/`          | division                       | numeric         \n+| `%`          | wildcard and modulus           | string, numeric \n+| `||` or `+`  | concatenation                  | string          \n+| `:=`         | assignment                     | all             \n+| `->`         | struct field dereference       | struct     \n+| `.`          | source dereference             | table, stream\n+| `E`          | exponent                       | numeric         \n+\n+The explanation for each operator includes a supporting example based on\n+the following table:\n+\n+```sql\n+CREATE TABLE USERS (\n+    USERID BIGINT PRIMARY KEY,\n+    FIRST_NAME STRING,\n+    LAST_NAME STRING,\n+    NICKNAMES ARRAY<STRING>,\n+    ADDRESS STRUCT<STREET_NAME STRING, HOUSE_NUM INTEGER>\n+) WITH (KAFKA_TOPIC='users', VALUE_FORMAT='AVRO');\n+```\n+\n+### Arithmetic\n+\n+You can apply the familiar arithmetic operators, like `+` and `%`, to\n+[numeric types](data-types/numeric.md), like INT, BIGINT, and DOUBLE.\n+\n+The following example statement uses the addition operator (`+`) to compute\n+the sum of the lengths of two strings:\n+\n+```sql\n+SELECT USERID, LEN(FIRST_NAME) + LEN(LAST_NAME) AS NAME_LENGTH FROM USERS EMIT CHANGES;\n+```\n+\n+### Concatenation\n+\n+Use the concatenation operator (`+` or `||`) to concatenate\n+[STRING](data-types/character.md) values.\n+\n+```sql\n+SELECT USERID, FIRST_NAME + LAST_NAME AS FULL_NAME FROM USERS EMIT CHANGES;\n+```\n+\n+You can use the `+` operator for multi-part concatenation.\n+\n+The following example statement uses the concatenation operator (`+`) to create\n+an error message:\n+\n+```sql\n+SELECT USERID,\n+    TIMESTAMPTOSTRING(ROWTIME, 'yyyy-MM-dd HH:mm:ss') +\n+        ': :heavy_exclamation_mark: On ' +\n+        HOST +\n+        ' there were ' +\n+        CAST(INVALID_LOGIN_COUNT AS VARCHAR) +\n+        ' attempts in the last minute (threshold is >=4)'\n+  FROM INVALID_USERS_LOGINS_PER_HOST\n+  WHERE INVALID_LOGIN_COUNT>=4\n+  EMIT CHANGES;\n+```\n+\n+### Source dereference\n+\n+Use the source dereference operator (`.`) to specify columns by dereferencing\n+the source stream or table.\n+\n+The following example statement selects the value of the FIRST_NAME column in\n+the USERS table:\n+\n+```sql\n+SELECT USERID, USERS.FIRST_NAME FROM USERS EMIT CHANGES;\n+```\n+\n+### Subscript\n+\n+Use the subscript operator (`[subscript_expr]`) to reference the value at an\n+[array](data-types/compund.md#array) index or a [array](data-types/compund.md#array) map key. Arrays indexes are one-based.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a14590732d6298b619f44526f0c2200e2762fe4"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQxODA0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Combine `->` with `.` when using aliases:\n          \n          \n            \n            Combine `->` with `.` to provide fully qualified names.\n          \n      \n    \n    \n  \n\nIt's not about aliases.", "url": "https://github.com/confluentinc/ksql/pull/5953#discussion_r466418043", "createdAt": "2020-08-06T13:37:49Z", "author": {"login": "big-andy-coates"}, "path": "docs/reference2/sql-syntax/lexical-structure.md", "diffHunk": "@@ -53,9 +55,121 @@ TODO: what makes a valid identifier?\n \n ## Operators\n \n-- Infix functions like +, -, *, /.\n+The following table lists all of the operators that are supported by ksqlDB SQL.\n+\n+| operator     | meaning                        | applies to      \n+|--------------|--------------------------------|-----------------\n+| `=`          | is equal to                    | string, numeric \n+| `!=` or `<>` | is not equal to                | string, numeric \n+| `<`          | is less than                   | numeric         \n+| `<=`         | is less than or equal to       | numeric         \n+| `>`          | is greater than                | numeric         \n+| `>=`         | is greater than or equal to    | numeric         \n+| `+`          | addition and concatenation     | numeric         \n+| `-`          | subtraction                    | numeric         \n+| `*`          | multiplication                 | numeric         \n+| `/`          | division                       | numeric         \n+| `%`          | wildcard and modulus           | string, numeric \n+| `||` or `+`  | concatenation                  | string          \n+| `:=`         | assignment                     | all             \n+| `->`         | struct field dereference       | struct     \n+| `.`          | source dereference             | table, stream\n+| `E`          | exponent                       | numeric         \n+\n+The explanation for each operator includes a supporting example based on\n+the following table:\n+\n+```sql\n+CREATE TABLE USERS (\n+    USERID BIGINT PRIMARY KEY,\n+    FIRST_NAME STRING,\n+    LAST_NAME STRING,\n+    NICKNAMES ARRAY<STRING>,\n+    ADDRESS STRUCT<STREET_NAME STRING, HOUSE_NUM INTEGER>\n+) WITH (KAFKA_TOPIC='users', VALUE_FORMAT='AVRO');\n+```\n+\n+### Arithmetic\n+\n+You can apply the familiar arithmetic operators, like `+` and `%`, to\n+[numeric types](data-types/numeric.md), like INT, BIGINT, and DOUBLE.\n+\n+The following example statement uses the addition operator (`+`) to compute\n+the sum of the lengths of two strings:\n+\n+```sql\n+SELECT USERID, LEN(FIRST_NAME) + LEN(LAST_NAME) AS NAME_LENGTH FROM USERS EMIT CHANGES;\n+```\n+\n+### Concatenation\n+\n+Use the concatenation operator (`+` or `||`) to concatenate\n+[STRING](data-types/character.md) values.\n+\n+```sql\n+SELECT USERID, FIRST_NAME + LAST_NAME AS FULL_NAME FROM USERS EMIT CHANGES;\n+```\n+\n+You can use the `+` operator for multi-part concatenation.\n+\n+The following example statement uses the concatenation operator (`+`) to create\n+an error message:\n+\n+```sql\n+SELECT USERID,\n+    TIMESTAMPTOSTRING(ROWTIME, 'yyyy-MM-dd HH:mm:ss') +\n+        ': :heavy_exclamation_mark: On ' +\n+        HOST +\n+        ' there were ' +\n+        CAST(INVALID_LOGIN_COUNT AS VARCHAR) +\n+        ' attempts in the last minute (threshold is >=4)'\n+  FROM INVALID_USERS_LOGINS_PER_HOST\n+  WHERE INVALID_LOGIN_COUNT>=4\n+  EMIT CHANGES;\n+```\n+\n+### Source dereference\n+\n+Use the source dereference operator (`.`) to specify columns by dereferencing\n+the source stream or table.\n+\n+The following example statement selects the value of the FIRST_NAME column in\n+the USERS table:\n+\n+```sql\n+SELECT USERID, USERS.FIRST_NAME FROM USERS EMIT CHANGES;\n+```\n+\n+### Subscript\n+\n+Use the subscript operator (`[subscript_expr]`) to reference the value at an\n+[array](data-types/compund.md#array) index or a [array](data-types/compund.md#array) map key. Arrays indexes are one-based.\n+\n+The following example statement selects the first string in the NICKNAMES array:\n+\n+```sql\n+SELECT USERID, NICKNAMES[1] FROM USERS EMIT CHANGES;\n+```\n+\n+### STRUCT dereference\n+\n+Access nested data by declaring a STRUCT and using the dereference operator\n+(`->`) to access its fields.\n+\n+The following example statement selects the values of the STREET and HOUSE_NUM\n+fields in the ADDRESS struct: \n+\n+```sql\n+SELECT USERID, ADDRESS->STREET, ADDRESS->HOUSE_NUM FROM USERS EMIT CHANGES;\n+```\n+\n+Combine `->` with `.` when using aliases:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a14590732d6298b619f44526f0c2200e2762fe4"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQyMDIzOA==", "bodyText": "What's this bit?\nThe parser understands single line comments:\n-- This is a single line and multiline comments.\n\n/* \n    This is a \n    Multiline comment\n*/\n\nSELECT \n   ID INT,                -- single line comments\n   NAME STRING  -- can be at end of SQL\n FROM FOO\n EMIT CHANGES;", "url": "https://github.com/confluentinc/ksql/pull/5953#discussion_r466420238", "createdAt": "2020-08-06T13:41:07Z", "author": {"login": "big-andy-coates"}, "path": "docs/reference2/sql-syntax/lexical-structure.md", "diffHunk": "@@ -75,6 +189,8 @@ Not a function/operator/identifier, have meta-meaning for the commands.\n \n TODO: does ksqlDB have multi-line comments?\n \n+bracketed comments\n+'/*' .*? '*/' ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a14590732d6298b619f44526f0c2200e2762fe4"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0NzEyNA==", "bodyText": "For bit below on operator precedence...\nPrecedence in order:\n\n\n\n(Multiplication), / (Division), % (Modulus)\n\n\n\n\n(Positive), - (Negative), + (Addition), + (Concatenation), - (Subtraction)\n\n\n=, >, <, >=, <=, <>, != (Comparison operators)\nNOT\nAND\nBETWEEN, LIKE, OR\n\nWhen two operators in an expression have the same precedence level, they're evaluated left to right based on their position in the expression.\nAnd of course you can use brackets to force or make precedence clear, e.g. (5 + 2) * 3", "url": "https://github.com/confluentinc/ksql/pull/5953#discussion_r466447124", "createdAt": "2020-08-06T14:19:29Z", "author": {"login": "big-andy-coates"}, "path": "docs/reference2/sql-syntax/lexical-structure.md", "diffHunk": "@@ -75,6 +189,8 @@ Not a function/operator/identifier, have meta-meaning for the commands.\n \n TODO: does ksqlDB have multi-line comments?\n \n+bracketed comments\n+'/*' .*? '*/' ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a14590732d6298b619f44526f0c2200e2762fe4"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0OTU3NQ==", "bodyText": "Missing operators:\n| `NOT` | Logical NOT | boolean\n| `AND` | Logical AND | boolean\n| `OR` | Logical OR | boolean\n| `BETWEEN` | tests if value within range | numeric, string\n| `LIKE` | pattern matching | string", "url": "https://github.com/confluentinc/ksql/pull/5953#discussion_r466449575", "createdAt": "2020-08-06T14:22:52Z", "author": {"login": "big-andy-coates"}, "path": "docs/reference2/sql-syntax/lexical-structure.md", "diffHunk": "@@ -53,9 +55,121 @@ TODO: what makes a valid identifier?\n \n ## Operators\n \n-- Infix functions like +, -, *, /.\n+The following table lists all of the operators that are supported by ksqlDB SQL.\n+\n+| operator     | meaning                        | applies to      \n+|--------------|--------------------------------|-----------------\n+| `=`          | is equal to                    | string, numeric \n+| `!=` or `<>` | is not equal to                | string, numeric \n+| `<`          | is less than                   | numeric         \n+| `<=`         | is less than or equal to       | numeric         \n+| `>`          | is greater than                | numeric         \n+| `>=`         | is greater than or equal to    | numeric         \n+| `+`          | addition and concatenation     | numeric         \n+| `-`          | subtraction                    | numeric         \n+| `*`          | multiplication                 | numeric         \n+| `/`          | division                       | numeric         \n+| `%`          | wildcard and modulus           | string, numeric \n+| `||` or `+`  | concatenation                  | string          \n+| `:=`         | assignment                     | all             \n+| `->`         | struct field dereference       | struct     \n+| `.`          | source dereference             | table, stream\n+| `E`          | exponent                       | numeric         \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a14590732d6298b619f44526f0c2200e2762fe4"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNjMwMDEx", "url": "https://github.com/confluentinc/ksql/pull/5953#pullrequestreview-462630011", "createdAt": "2020-08-06T15:28:11Z", "commit": {"oid": "0a14590732d6298b619f44526f0c2200e2762fe4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8ec4249db9a6762ce222887d08cba5cd2481570", "author": {"user": {"login": "JimGalasyn", "name": "Jim Galasyn"}}, "url": "https://github.com/confluentinc/ksql/commit/e8ec4249db9a6762ce222887d08cba5cd2481570", "committedDate": "2020-08-06T18:29:20Z", "message": "docs: incorporate feedback"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4786, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}