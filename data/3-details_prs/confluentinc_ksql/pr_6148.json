{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4Mjg0NTcw", "number": 6148, "title": "feat: Add metrics for pull query request/response size in bytes", "bodyText": "Description\nAdd metrics for pull query request/response size in bytes. I added it only to the StreamedQueryResource and not the WSQueryEndpoint since in the latter I don't have access to the vertx objects to measure their size. Also, it's not important to measure the size for queries issued from the UI editor.\nTesting done\nLocal testing with issuing pull queries and checking the value of the metrics\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-09-03T01:35:27Z", "url": "https://github.com/confluentinc/ksql/pull/6148", "merged": true, "mergeCommit": {"oid": "946d2d3e34746900235d3395ab4148d571b908e2"}, "closed": true, "closedAt": "2020-09-28T18:20:33Z", "author": {"login": "vpapavas"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFGctrgFqTQ4MTQyNDM1NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNXxXJgFqTQ5Nzc4NDgwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNDI0MzU1", "url": "https://github.com/confluentinc/ksql/pull/6148#pullrequestreview-481424355", "createdAt": "2020-09-03T01:37:39Z", "commit": {"oid": "8ab531cb8aa37c0727d533131f2aec5918cc57eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMTozNzozOVrOHMSGAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMTozNzozOVrOHMSGAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY0MTQxMQ==", "bodyText": "This is the only place where we have access to the response sent over the wire. That's why I had to pass the pullQueryMetrics object in here", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r482641411", "createdAt": "2020-09-03T01:37:39Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java", "diffHunk": "@@ -112,6 +118,9 @@ static void handleOldApiResponse(final Server server, final RoutingContext routi\n         response.end(responseBody);\n       }\n     }\n+    pullQueryMetrics", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab531cb8aa37c0727d533131f2aec5918cc57eb"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNDI0Nzk0", "url": "https://github.com/confluentinc/ksql/pull/6148#pullrequestreview-481424794", "createdAt": "2020-09-03T01:39:02Z", "commit": {"oid": "8ab531cb8aa37c0727d533131f2aec5918cc57eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMTozOTowMlrOHMSHYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMTozOTowMlrOHMSHYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY0MTc2Mw==", "bodyText": "Instead of passing the things we want to measure, like the startTime or the requestSize, I figured it's cleaner to pass the pullQueryMetrics. Also, the response cannot be measured from in here", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r482641763", "createdAt": "2020-09-03T01:39:02Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -139,24 +138,19 @@\n   private final KsqlExecutionContext executionContext;\n   private final RoutingFilterFactory routingFilterFactory;\n   private final RateLimiter rateLimiter;\n-  private final Optional<PullQueryExecutorMetrics> pullQueryMetrics;\n \n   public PullQueryExecutor(\n       final KsqlExecutionContext executionContext,\n       final RoutingFilterFactory routingFilterFactory,\n       final KsqlConfig ksqlConfig,\n-      final String serviceId,\n-      final Time time\n+      final String serviceId", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab531cb8aa37c0727d533131f2aec5918cc57eb"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNDI1MTUx", "url": "https://github.com/confluentinc/ksql/pull/6148#pullrequestreview-481425151", "createdAt": "2020-09-03T01:40:16Z", "commit": {"oid": "8ab531cb8aa37c0727d533131f2aec5918cc57eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMTo0MDoxNlrOHMSIyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMTo0MDoxNlrOHMSIyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY0MjEyMg==", "bodyText": "I am not measuring the request/response here since I don't have access to the HttpServerRequest/HttpServerResponse objects here", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r482642122", "createdAt": "2020-09-03T01:40:16Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/PullQueryPublisher.java", "diffHunk": "@@ -34,33 +35,48 @@\n import java.util.List;\n import java.util.Optional;\n import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n import java.util.stream.Collectors;\n+import org.apache.kafka.common.utils.Time;\n \n class PullQueryPublisher implements Flow.Publisher<Collection<StreamedRow>> {\n \n   private final ServiceContext serviceContext;\n   private final ConfiguredStatement<Query> query;\n   private final PullQueryExecutor pullQueryExecutor;\n+  private final Optional<PullQueryExecutorMetrics> pullQueryMetrics;\n   private final long startTimeNanos;\n \n   @VisibleForTesting\n   PullQueryPublisher(\n       final ServiceContext serviceContext,\n       final ConfiguredStatement<Query> query,\n       final PullQueryExecutor pullQueryExecutor,\n+      final Optional<PullQueryExecutorMetrics> pullQueryMetrics,\n       final long startTimeNanos\n   ) {\n     this.serviceContext = requireNonNull(serviceContext, \"serviceContext\");\n     this.query = requireNonNull(query, \"query\");\n     this.pullQueryExecutor = requireNonNull(pullQueryExecutor, \"pullQueryExecutor\");\n+    this.pullQueryMetrics = pullQueryMetrics;\n     this.startTimeNanos = startTimeNanos;\n   }\n \n   @Override\n   public synchronized void subscribe(final Subscriber<Collection<StreamedRow>> subscriber) {\n     final PullQuerySubscription subscription = new PullQuerySubscription(\n         subscriber,\n-        () -> pullQueryExecutor.execute(query, serviceContext, Optional.of(false), startTimeNanos)\n+        () -> {\n+          final PullQueryResult result = pullQueryExecutor.execute(\n+              query, serviceContext, Optional.of(false), pullQueryMetrics);\n+          if (pullQueryMetrics.isPresent()) {\n+            //Record latency at microsecond scale\n+            final long nowNanos = Time.SYSTEM.nanoseconds();\n+            final double latency = TimeUnit.NANOSECONDS.toMicros(nowNanos - startTimeNanos);\n+            pullQueryMetrics.get().recordLatency(latency);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ab531cb8aa37c0727d533131f2aec5918cc57eb"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMjY5NTQ5", "url": "https://github.com/confluentinc/ksql/pull/6148#pullrequestreview-482269549", "createdAt": "2020-09-03T23:39:53Z", "commit": {"oid": "ff845b203112c7e49537219acb1856dca75dc0f3"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMzozOTo1M1rOHM6zXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMzo1NzoxMFrOHM7GQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwODM4MA==", "bodyText": "Noop line?", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r483308380", "createdAt": "2020-09-03T23:39:53Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -227,32 +231,34 @@ private void handleQueryRequest(final RoutingContext routingContext) {\n \n     final CompletableFuture<Void> connectionClosedFuture = new CompletableFuture<>();\n     routingContext.request().connection().closeHandler(v -> connectionClosedFuture.complete(null));\n-\n-    handleOldApiRequest(server, routingContext, KsqlRequest.class,\n+    routingContext.request().bytesRead();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff845b203112c7e49537219acb1856dca75dc0f3"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwOTAwMQ==", "bodyText": "Nit: Unnecessary whitespace changes make it harder to use blame.", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r483309001", "createdAt": "2020-09-03T23:41:56Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlServerEndpoints.java", "diffHunk": "@@ -151,17 +156,20 @@ public KsqlServerEndpoints(\n   }\n \n   @Override\n-  public CompletableFuture<EndpointResponse> executeQueryRequest(final KsqlRequest request,\n+  public CompletableFuture<EndpointResponse> executeQueryRequest(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff845b203112c7e49537219acb1856dca75dc0f3"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMwOTkzNQ==", "bodyText": "Why did you remove how this was being done by encapsulating the nowNanos?  It prevented you from having to do that all over.", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r483309935", "createdAt": "2020-09-03T23:45:14Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -83,18 +84,24 @@ public void recordRemoteRequests(final double value) {\n     this.remoteRequestsSensor.record(value);\n   }\n \n-  public void recordLatency(final long startTimeNanos) {\n+  public void recordLatency(final double value) {\n     // Record latency at microsecond scale\n-    final long nowNanos = time.nanoseconds();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff845b203112c7e49537219acb1856dca75dc0f3"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMDUzMQ==", "bodyText": "Why not do recordLatency here too?  You can even record the start time here as well.  That way, they don't have to be sprinkled everywhere.  You would still have to handle the web socket since I don't believe it uses this path.", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r483310531", "createdAt": "2020-09-03T23:47:25Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java", "diffHunk": "@@ -112,6 +120,9 @@ static void handleOldApiResponse(final Server server, final RoutingContext routi\n         response.end(responseBody);\n       }\n     }\n+    pullQueryMetrics\n+        .ifPresent(pullQueryExecutorMetrics -> pullQueryExecutorMetrics.recordResponseSize(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff845b203112c7e49537219acb1856dca75dc0f3"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMTMxMA==", "bodyText": "This no longer measures the latency for this endpoint.  Why did you remove it?", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r483311310", "createdAt": "2020-09-03T23:50:17Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/QueryEndpoint.java", "diffHunk": "@@ -43,34 +44,38 @@\n import java.util.Objects;\n import java.util.Optional;\n import java.util.stream.Collectors;\n-import org.apache.kafka.common.utils.Time;\n \n public class QueryEndpoint {\n \n   private final KsqlEngine ksqlEngine;\n   private final KsqlConfig ksqlConfig;\n   private final PullQueryExecutor pullQueryExecutor;\n+  private final Optional<PullQueryExecutorMetrics> pullQueryMetrics;\n \n-  public QueryEndpoint(final KsqlEngine ksqlEngine, final KsqlConfig ksqlConfig,\n-      final PullQueryExecutor pullQueryExecutor) {\n+  public QueryEndpoint(\n+      final KsqlEngine ksqlEngine,\n+      final KsqlConfig ksqlConfig,\n+      final PullQueryExecutor pullQueryExecutor,\n+      final Optional<PullQueryExecutorMetrics> pullQueryMetrics\n+  ) {\n     this.ksqlEngine = ksqlEngine;\n     this.ksqlConfig = ksqlConfig;\n     this.pullQueryExecutor = pullQueryExecutor;\n+    this.pullQueryMetrics = pullQueryMetrics;\n   }\n \n   public QueryPublisher createQueryPublisher(\n       final String sql, final JsonObject properties,\n       final Context context,\n       final WorkerExecutor workerExecutor,\n       final ServiceContext serviceContext) {\n-    final long startTimeNanos = Time.SYSTEM.nanoseconds();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff845b203112c7e49537219acb1856dca75dc0f3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMTU3MA==", "bodyText": "Ideally we should measure every one of these endpoints in a generic fashion rather than having this special thing for pull queries, but maybe that is for a followup.", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r483311570", "createdAt": "2020-09-03T23:51:11Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java", "diffHunk": "@@ -112,6 +120,9 @@ static void handleOldApiResponse(final Server server, final RoutingContext routi\n         response.end(responseBody);\n       }\n     }\n+    pullQueryMetrics\n+        .ifPresent(pullQueryExecutorMetrics -> pullQueryExecutorMetrics.recordResponseSize(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMDUzMQ=="}, "originalCommit": {"oid": "ff845b203112c7e49537219acb1856dca75dc0f3"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMzIxNg==", "bodyText": "I think the idea was that PullQueryExecutorMetrics was encapsulated here, but I agree that you can't do everything that way.  Similarly, we cut corners in measuring time by putting that in here to maintain encapsulation.  Andy felt strongly about this, so I made it that way, but I agree that if we want to measure size, it should be moved out.  I think we should measure time in exactly the same manner since we're already pulling PullQueryExecutorMetrics out.", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r483313216", "createdAt": "2020-09-03T23:57:10Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -139,24 +138,19 @@\n   private final KsqlExecutionContext executionContext;\n   private final RoutingFilterFactory routingFilterFactory;\n   private final RateLimiter rateLimiter;\n-  private final Optional<PullQueryExecutorMetrics> pullQueryMetrics;\n \n   public PullQueryExecutor(\n       final KsqlExecutionContext executionContext,\n       final RoutingFilterFactory routingFilterFactory,\n       final KsqlConfig ksqlConfig,\n-      final String serviceId,\n-      final Time time\n+      final String serviceId", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjY0MTc2Mw=="}, "originalCommit": {"oid": "8ab531cb8aa37c0727d533131f2aec5918cc57eb"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MDM5MTc5", "url": "https://github.com/confluentinc/ksql/pull/6148#pullrequestreview-496039179", "createdAt": "2020-09-25T00:40:03Z", "commit": {"oid": "55cd6d70516e20302ebca12d11c0a316784acb9f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDo0MDowM1rOHXxKcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDo0ODoxN1rOHXxSag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4NDc4Ng==", "bodyText": "nit: Remove commented lines.", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r494684786", "createdAt": "2020-09-25T00:40:03Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -85,6 +89,8 @@ public void recordRemoteRequests(final double value) {\n \n   public void recordLatency(final long startTimeNanos) {\n     // Record latency at microsecond scale\n+    //this.latencySensor.record(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55cd6d70516e20302ebca12d11c0a316784acb9f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4NTUxOA==", "bodyText": "How is this time used if it's not injected in?  I suspect the test won't pass.", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r494685518", "createdAt": "2020-09-25T00:43:00Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetricsTest.java", "diffHunk": "@@ -56,7 +56,7 @@ public void setUp() {\n     when(ksqlEngine.getServiceId()).thenReturn(KSQL_SERVICE_ID);\n     when(time.nanoseconds()).thenReturn(6000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55cd6d70516e20302ebca12d11c0a316784acb9f"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4NTg4Mw==", "bodyText": "If you leave time injected in, it'll make it easier to test this class.  In fact, I would imagine it would be hard to test if it's using a wall clock.", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r494685883", "createdAt": "2020-09-25T00:44:32Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -46,19 +48,19 @@\n   private final Sensor latencySensor;\n   private final Sensor requestRateSensor;\n   private final Sensor errorRateSensor;\n+  private final Sensor requestSizeSensor;\n+  private final Sensor responseSizeSensor;\n   private final Metrics metrics;\n   private final Map<String, String> customMetricsTags;\n-  private final Time time;\n   private final String ksqlServiceId;\n+  private final Time time = Time.SYSTEM;\n \n   public PullQueryExecutorMetrics(\n       final String ksqlServiceId,\n-      final Map<String, String> customMetricsTags,\n-      final Time time\n+      final Map<String, String> customMetricsTags\n   ) {\n \n     this.customMetricsTags = Objects.requireNonNull(customMetricsTags, \"customMetricsTags\");\n-    this.time = Objects.requireNonNull(time, \"time\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55cd6d70516e20302ebca12d11c0a316784acb9f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4NjgyNg==", "bodyText": "You want to record this when the response is complete in handleOldApiResponse, right?", "url": "https://github.com/confluentinc/ksql/pull/6148#discussion_r494686826", "createdAt": "2020-09-25T00:48:17Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/OldApiUtils.java", "diffHunk": "@@ -64,22 +69,30 @@ private OldApiUtils() {\n     } else {\n       requestObject = null;\n     }\n-\n+    pullQueryMetrics\n+        .ifPresent(pullQueryExecutorMetrics -> pullQueryExecutorMetrics.recordRequestSize(\n+            routingContext.request().bytesRead()));\n+    //Record latency at microsecond scale\n+    pullQueryMetrics.ifPresent(pullQueryExecutorMetrics -> pullQueryExecutorMetrics", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55cd6d70516e20302ebca12d11c0a316784acb9f"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dba86ff04e3a8a794b5b68f60546b89e7082bfa", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/4dba86ff04e3a8a794b5b68f60546b89e7082bfa", "committedDate": "2020-09-25T19:36:51Z", "message": "adding metrics for request/response size"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fc84367683bc837113db73b5ca4149183382efe", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/7fc84367683bc837113db73b5ca4149183382efe", "committedDate": "2020-09-25T19:39:34Z", "message": "measure size via vertx methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "339ffe22267898b14600735fdcb4167afcefce71", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/339ffe22267898b14600735fdcb4167afcefce71", "committedDate": "2020-09-25T19:39:36Z", "message": "remove jol dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea24f23838991e3f210ba0af6569c91b542b5604", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/ea24f23838991e3f210ba0af6569c91b542b5604", "committedDate": "2020-09-25T19:39:36Z", "message": "removed routingContext from streamedqueryresource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c91764cdbf7d9aaec93bafa2daf04390eb14bf1", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/7c91764cdbf7d9aaec93bafa2daf04390eb14bf1", "committedDate": "2020-09-25T19:39:36Z", "message": "Addressed alan's comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b635f18486f5f03d31c09ad6a95c952895ddf9e8", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/b635f18486f5f03d31c09ad6a95c952895ddf9e8", "committedDate": "2020-09-25T19:39:37Z", "message": "address alan's comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db7409073c6e089358ce4eeb62ac90217f3e3da6", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/db7409073c6e089358ce4eeb62ac90217f3e3da6", "committedDate": "2020-09-25T21:50:39Z", "message": "rebase"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "55cd6d70516e20302ebca12d11c0a316784acb9f", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/55cd6d70516e20302ebca12d11c0a316784acb9f", "committedDate": "2020-09-11T18:11:42Z", "message": "Addressed alan's comments"}, "afterCommit": {"oid": "db7409073c6e089358ce4eeb62ac90217f3e3da6", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/db7409073c6e089358ce4eeb62ac90217f3e3da6", "committedDate": "2020-09-25T21:50:39Z", "message": "rebase"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3Nzg0ODAy", "url": "https://github.com/confluentinc/ksql/pull/6148#pullrequestreview-497784802", "createdAt": "2020-09-28T18:19:59Z", "commit": {"oid": "db7409073c6e089358ce4eeb62ac90217f3e3da6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4638, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}