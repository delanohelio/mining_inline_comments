{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNTMxNDY5", "number": 4814, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzo0NToyMFrODpN0uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzo1NjoxOFrODpUW5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTQ0Njk5OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/healthcheck/HealthCheckAgent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzo0NToyMFrOF4QO3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzo0NToyMFrOF4QO3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUzMDUyNA==", "bodyText": "@spena somehow I accidentally deleted your comment: \"I marked authorization errors as healthy, but I am unsure if that is a desired result in this situation for healthcheck.\"\nI think this is fine - it makes sense to be defensive against a user misconfiguring acls.", "url": "https://github.com/confluentinc/ksql/pull/4814#discussion_r394530524", "createdAt": "2020-03-18T17:45:20Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/healthcheck/HealthCheckAgent.java", "diffHunk": "@@ -82,13 +94,46 @@ public String getName() {\n     }\n \n     @Override\n-    public HealthCheckResponseDetail check(\n-        final SimpleKsqlClient ksqlClient,\n-        final URI serverEndpoint\n-    ) {\n+    public HealthCheckResponseDetail check(final HealthCheckAgent healthCheckAgent) {\n       final RestResponse<KsqlEntityList> response =\n-          ksqlClient.makeKsqlRequest(serverEndpoint, ksqlStatement);\n+          healthCheckAgent.ksqlClient\n+              .makeKsqlRequest(healthCheckAgent.serverEndpoint, ksqlStatement);\n       return new HealthCheckResponseDetail(response.isSuccessful());\n     }\n   }\n+\n+  private static class KafkaBrokerCheck implements Check {\n+    private final String name;\n+\n+    KafkaBrokerCheck(final String name) {\n+      this.name = Objects.requireNonNull(name, \"name\");\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return name;\n+    }\n+\n+    @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT\")\n+    @Override\n+    public HealthCheckResponseDetail check(final HealthCheckAgent healthCheckAgent) {\n+      final String commandTopic = ReservedInternalTopics.commandTopic(healthCheckAgent.ksqlConfig);\n+      boolean isHealthy;\n+\n+      try {\n+        healthCheckAgent.serviceContext\n+            .getAdminClient()\n+            .describeTopics(Collections.singletonList(commandTopic))\n+            .values();\n+\n+        isHealthy = true;\n+      } catch (final KsqlTopicAuthorizationException e) {\n+        isHealthy = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fe896fded87d1b4165e642b061d5a9847a7fea1"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjUxNzUxOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/healthcheck/HealthCheckAgent.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzo1NjoxOFrOF4a54g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDo0NTo1NFrOF5Wrxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNTM3OA==", "bodyText": "@rodesai @vcrfxia If Kafka is not available, this get() will wait for a couple of minutes. Do you think we should have a lower timeout? configurable timeout for healthchecks? or the default 2-3 mins is good?", "url": "https://github.com/confluentinc/ksql/pull/4814#discussion_r394705378", "createdAt": "2020-03-18T23:56:18Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/healthcheck/HealthCheckAgent.java", "diffHunk": "@@ -82,13 +94,47 @@ public String getName() {\n     }\n \n     @Override\n-    public HealthCheckResponseDetail check(\n-        final SimpleKsqlClient ksqlClient,\n-        final URI serverEndpoint\n-    ) {\n+    public HealthCheckResponseDetail check(final HealthCheckAgent healthCheckAgent) {\n       final RestResponse<KsqlEntityList> response =\n-          ksqlClient.makeKsqlRequest(serverEndpoint, ksqlStatement);\n+          healthCheckAgent.ksqlClient\n+              .makeKsqlRequest(healthCheckAgent.serverEndpoint, ksqlStatement);\n       return new HealthCheckResponseDetail(response.isSuccessful());\n     }\n   }\n+\n+  private static class KafkaBrokerCheck implements Check {\n+    private final String name;\n+\n+    KafkaBrokerCheck(final String name) {\n+      this.name = Objects.requireNonNull(name, \"name\");\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return name;\n+    }\n+\n+    @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT\")\n+    @Override\n+    public HealthCheckResponseDetail check(final HealthCheckAgent healthCheckAgent) {\n+      final String commandTopic = ReservedInternalTopics.commandTopic(healthCheckAgent.ksqlConfig);\n+      boolean isHealthy;\n+\n+      try {\n+        healthCheckAgent.serviceContext\n+            .getAdminClient()\n+            .describeTopics(Collections.singletonList(commandTopic))\n+            .all()\n+            .get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76d8381e3b66ca8786849eaaf4fff6830ab1cb7b"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDgzMTkzMA==", "bodyText": "I think that we should use a shorter timeout here. The healthcheck runs every 30 seconds, so that seems appropriate as a timeout value.", "url": "https://github.com/confluentinc/ksql/pull/4814#discussion_r394831930", "createdAt": "2020-03-19T07:25:33Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/healthcheck/HealthCheckAgent.java", "diffHunk": "@@ -82,13 +94,47 @@ public String getName() {\n     }\n \n     @Override\n-    public HealthCheckResponseDetail check(\n-        final SimpleKsqlClient ksqlClient,\n-        final URI serverEndpoint\n-    ) {\n+    public HealthCheckResponseDetail check(final HealthCheckAgent healthCheckAgent) {\n       final RestResponse<KsqlEntityList> response =\n-          ksqlClient.makeKsqlRequest(serverEndpoint, ksqlStatement);\n+          healthCheckAgent.ksqlClient\n+              .makeKsqlRequest(healthCheckAgent.serverEndpoint, ksqlStatement);\n       return new HealthCheckResponseDetail(response.isSuccessful());\n     }\n   }\n+\n+  private static class KafkaBrokerCheck implements Check {\n+    private final String name;\n+\n+    KafkaBrokerCheck(final String name) {\n+      this.name = Objects.requireNonNull(name, \"name\");\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return name;\n+    }\n+\n+    @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT\")\n+    @Override\n+    public HealthCheckResponseDetail check(final HealthCheckAgent healthCheckAgent) {\n+      final String commandTopic = ReservedInternalTopics.commandTopic(healthCheckAgent.ksqlConfig);\n+      boolean isHealthy;\n+\n+      try {\n+        healthCheckAgent.serviceContext\n+            .getAdminClient()\n+            .describeTopics(Collections.singletonList(commandTopic))\n+            .all()\n+            .get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNTM3OA=="}, "originalCommit": {"oid": "76d8381e3b66ca8786849eaaf4fff6830ab1cb7b"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY4NDgwNg==", "bodyText": "Done. I set a timeout to 30s", "url": "https://github.com/confluentinc/ksql/pull/4814#discussion_r395684806", "createdAt": "2020-03-20T14:45:54Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/healthcheck/HealthCheckAgent.java", "diffHunk": "@@ -82,13 +94,47 @@ public String getName() {\n     }\n \n     @Override\n-    public HealthCheckResponseDetail check(\n-        final SimpleKsqlClient ksqlClient,\n-        final URI serverEndpoint\n-    ) {\n+    public HealthCheckResponseDetail check(final HealthCheckAgent healthCheckAgent) {\n       final RestResponse<KsqlEntityList> response =\n-          ksqlClient.makeKsqlRequest(serverEndpoint, ksqlStatement);\n+          healthCheckAgent.ksqlClient\n+              .makeKsqlRequest(healthCheckAgent.serverEndpoint, ksqlStatement);\n       return new HealthCheckResponseDetail(response.isSuccessful());\n     }\n   }\n+\n+  private static class KafkaBrokerCheck implements Check {\n+    private final String name;\n+\n+    KafkaBrokerCheck(final String name) {\n+      this.name = Objects.requireNonNull(name, \"name\");\n+    }\n+\n+    @Override\n+    public String getName() {\n+      return name;\n+    }\n+\n+    @SuppressFBWarnings(\"RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT\")\n+    @Override\n+    public HealthCheckResponseDetail check(final HealthCheckAgent healthCheckAgent) {\n+      final String commandTopic = ReservedInternalTopics.commandTopic(healthCheckAgent.ksqlConfig);\n+      boolean isHealthy;\n+\n+      try {\n+        healthCheckAgent.serviceContext\n+            .getAdminClient()\n+            .describeTopics(Collections.singletonList(commandTopic))\n+            .all()\n+            .get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNTM3OA=="}, "originalCommit": {"oid": "76d8381e3b66ca8786849eaaf4fff6830ab1cb7b"}, "originalPosition": 105}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3785, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}