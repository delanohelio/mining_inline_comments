{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMjU0MjQz", "number": 4637, "title": "chore: remove Connect schema from Format interface", "bodyText": "Description\nAs this interface is moving towards being a pluggable public interface.\nNow, the Format interface deals with converting SchemaRegistry ParsedSchemas into the list of SimpleColumn ksql should use. Each SimpleColumn defines the name and type of the column.\nConversion between connect and ksql types is now handled by the ConnectFormat base class.  This base class currently converts all field names to uppercase. However, it is now possible for a format to return any-case names and those names will be respected.\nTesting done\nusual\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-02-26T13:22:35Z", "url": "https://github.com/confluentinc/ksql/pull/4637", "merged": true, "mergeCommit": {"oid": "766ffe1072687aaf9380345d592f0ce8ab90e839"}, "closed": true, "closedAt": "2020-02-27T15:52:37Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIGpVHgH2gAyMzgwMjU0MjQzOjZjYmQ4YzU1NzMxNWIyMDY5NGVmYmNjNTFmNmRiMTJjYjQyYzIyZmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIbEG6AH2gAyMzgwMjU0MjQzOmQ3NDc5Mjg0MDBlOWUyOWEyYWRhN2E4ZmFhZDhhMzViZmY2NGRhYmY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6cbd8c557315b20694efbcc51f6db12cb42c22fa", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/6cbd8c557315b20694efbcc51f6db12cb42c22fa", "committedDate": "2020-02-26T13:22:03Z", "message": "chore: remove Connect schema from Format interface\n\nAs this interface is moving towards being a pluggable public interface.\n\nNow, the `Format` interface deals with converting SchemaRegistry `ParsedSchema`s into the list of `SimpleColumn` ksql should use. Each `SimpleColumn` defines the name and type of the column.\n\nConversion between connect and ksql types is now handled by the `ConnectFormat` base class.  This base class currently converts all field names to uppercase. However, it is now possible for a format to return any-case names and those names will be respected."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjQ1MTAx", "url": "https://github.com/confluentinc/ksql/pull/4637#pullrequestreview-365245101", "createdAt": "2020-02-26T21:11:49Z", "commit": {"oid": "6cbd8c557315b20694efbcc51f6db12cb42c22fa"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToxMTo1MFrOFu8XoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMToxNjo1MFrOFu8ifA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2NzkwNQ==", "bodyText": "let's javadoc this? hypothetically it could be useful in the future for pluggable schemas to leverage this class", "url": "https://github.com/confluentinc/ksql/pull/4637#discussion_r384767905", "createdAt": "2020-02-26T21:11:50Z", "author": {"login": "agavra"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/connect/ConnectFormat.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.serde.connect;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.kafka.schemaregistry.ParsedSchema;\n+import io.confluent.ksql.name.ColumnName;\n+import io.confluent.ksql.schema.ksql.SchemaConverters;\n+import io.confluent.ksql.schema.ksql.SimpleColumn;\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.serde.Format;\n+import io.confluent.ksql.util.DecimalUtil;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.apache.kafka.connect.data.Field;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.SchemaBuilder;\n+\n+public abstract class ConnectFormat implements Format {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cbd8c557315b20694efbcc51f6db12cb42c22fa"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2OTAyNw==", "bodyText": "nit: @Override here and below", "url": "https://github.com/confluentinc/ksql/pull/4637#discussion_r384769027", "createdAt": "2020-02-26T21:14:15Z", "author": {"login": "agavra"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/json/JsonFormat.java", "diffHunk": "@@ -18,43 +18,32 @@\n import io.confluent.connect.json.JsonSchemaData;\n import io.confluent.kafka.schemaregistry.ParsedSchema;\n import io.confluent.kafka.schemaregistry.json.JsonSchema;\n-import io.confluent.ksql.serde.Format;\n import io.confluent.ksql.serde.FormatInfo;\n import io.confluent.ksql.serde.KsqlSerdeFactory;\n+import io.confluent.ksql.serde.connect.ConnectFormat;\n import org.apache.kafka.connect.data.Schema;\n \n-public class JsonFormat implements Format {\n+public class JsonFormat extends ConnectFormat {\n \n   public static final String NAME = JsonSchema.TYPE;\n \n-  private JsonSchemaData jsonData;\n-\n-  public JsonFormat() {\n-    this.jsonData = new JsonSchemaData();\n-  }\n+  private final JsonSchemaData jsonData = new JsonSchemaData();\n \n   @Override\n   public String name() {\n     return NAME;\n   }\n \n   @Override\n-  public boolean supportsSchemaInference() {\n-    return true;\n+  public KsqlSerdeFactory getSerdeFactory(final FormatInfo info) {\n+    return new KsqlJsonSerdeFactory();\n   }\n \n-  @Override\n-  public Schema toConnectSchema(final ParsedSchema schema) {\n+  protected Schema toConnectSchema(final ParsedSchema schema) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cbd8c557315b20694efbcc51f6db12cb42c22fa"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2OTY3OA==", "bodyText": "this seems like it doesn't belong in prod code?", "url": "https://github.com/confluentinc/ksql/pull/4637#discussion_r384769678", "createdAt": "2020-02-26T21:15:15Z", "author": {"login": "agavra"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/connect/ConnectFormat.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.serde.connect;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.kafka.schemaregistry.ParsedSchema;\n+import io.confluent.ksql.name.ColumnName;\n+import io.confluent.ksql.schema.ksql.SchemaConverters;\n+import io.confluent.ksql.schema.ksql.SimpleColumn;\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.serde.Format;\n+import io.confluent.ksql.util.DecimalUtil;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.apache.kafka.connect.data.Field;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.SchemaBuilder;\n+\n+public abstract class ConnectFormat implements Format {\n+\n+  private final Function<Schema, Schema> toKsqlTransformer;\n+\n+  public ConnectFormat() {\n+    this(new ConnectSchemaTranslator()::toKsqlSchema);\n+  }\n+\n+  @VisibleForTesting\n+  ConnectFormat(final Function<Schema, Schema> toKsqlTransformer) {\n+    this.toKsqlTransformer = Objects.requireNonNull(toKsqlTransformer, \"toKsqlTransformer\");\n+  }\n+\n+  @Override\n+  public boolean supportsSchemaInference() {\n+    return true;\n+  }\n+\n+  @Override\n+  public List<SimpleColumn> toColumns(final ParsedSchema schema) {\n+    final Schema connectSchema = toKsqlTransformer.apply(toConnectSchema(schema));\n+\n+    return connectSchema.fields().stream()\n+        .map(ConnectFormat::toColumn)\n+        .collect(Collectors.toList());\n+  }\n+\n+  public ParsedSchema toParsedSchema(final List<SimpleColumn> columns) {\n+    final SchemaBuilder schemaBuilder = SchemaBuilder.struct();\n+    columns.forEach(col -> schemaBuilder.field(\n+        col.ref().name(),\n+        SchemaConverters.sqlToConnectConverter().toConnectSchema(col.type()))\n+    );\n+\n+    final Schema connectSchema = ensureNamed(schemaBuilder.build());\n+    return fromConnectSchema(connectSchema);\n+  }\n+\n+  protected abstract Schema toConnectSchema(ParsedSchema schema);\n+\n+  protected abstract ParsedSchema fromConnectSchema(Schema schema);\n+\n+  private static SimpleColumn toColumn(final Field field) {\n+    final ColumnName name = ColumnName.of(field.name());\n+    final SqlType type = SchemaConverters.connectToSqlConverter().toSqlType(field.schema());\n+    return new ConnectColumn(name, type);\n+  }\n+\n+  private static Schema ensureNamed(final Schema schema) {\n+    final SchemaBuilder builder;\n+    switch (schema.type()) {\n+      case BYTES:\n+        DecimalUtil.requireDecimal(schema);\n+        builder = DecimalUtil.builder(schema);\n+        break;\n+      case ARRAY:\n+        builder = SchemaBuilder.array(ensureNamed(schema.valueSchema()));\n+        break;\n+      case MAP:\n+        builder = SchemaBuilder.map(\n+            Schema.STRING_SCHEMA,\n+            ensureNamed(schema.valueSchema())\n+        );\n+        break;\n+      case STRUCT:\n+        builder = SchemaBuilder.struct();\n+        if (schema.name() == null) {\n+          builder.name(\"TestSchema\" + UUID.randomUUID().toString().replace(\"-\", \"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cbd8c557315b20694efbcc51f6db12cb42c22fa"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc3MDY4NA==", "bodyText": "previously we weren't doing this, why do we need to do it here?", "url": "https://github.com/confluentinc/ksql/pull/4637#discussion_r384770684", "createdAt": "2020-02-26T21:16:50Z", "author": {"login": "agavra"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/connect/ConnectFormat.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.serde.connect;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.kafka.schemaregistry.ParsedSchema;\n+import io.confluent.ksql.name.ColumnName;\n+import io.confluent.ksql.schema.ksql.SchemaConverters;\n+import io.confluent.ksql.schema.ksql.SimpleColumn;\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.serde.Format;\n+import io.confluent.ksql.util.DecimalUtil;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import org.apache.kafka.connect.data.Field;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.SchemaBuilder;\n+\n+public abstract class ConnectFormat implements Format {\n+\n+  private final Function<Schema, Schema> toKsqlTransformer;\n+\n+  public ConnectFormat() {\n+    this(new ConnectSchemaTranslator()::toKsqlSchema);\n+  }\n+\n+  @VisibleForTesting\n+  ConnectFormat(final Function<Schema, Schema> toKsqlTransformer) {\n+    this.toKsqlTransformer = Objects.requireNonNull(toKsqlTransformer, \"toKsqlTransformer\");\n+  }\n+\n+  @Override\n+  public boolean supportsSchemaInference() {\n+    return true;\n+  }\n+\n+  @Override\n+  public List<SimpleColumn> toColumns(final ParsedSchema schema) {\n+    final Schema connectSchema = toKsqlTransformer.apply(toConnectSchema(schema));\n+\n+    return connectSchema.fields().stream()\n+        .map(ConnectFormat::toColumn)\n+        .collect(Collectors.toList());\n+  }\n+\n+  public ParsedSchema toParsedSchema(final List<SimpleColumn> columns) {\n+    final SchemaBuilder schemaBuilder = SchemaBuilder.struct();\n+    columns.forEach(col -> schemaBuilder.field(\n+        col.ref().name(),\n+        SchemaConverters.sqlToConnectConverter().toConnectSchema(col.type()))\n+    );\n+\n+    final Schema connectSchema = ensureNamed(schemaBuilder.build());\n+    return fromConnectSchema(connectSchema);\n+  }\n+\n+  protected abstract Schema toConnectSchema(ParsedSchema schema);\n+\n+  protected abstract ParsedSchema fromConnectSchema(Schema schema);\n+\n+  private static SimpleColumn toColumn(final Field field) {\n+    final ColumnName name = ColumnName.of(field.name());\n+    final SqlType type = SchemaConverters.connectToSqlConverter().toSqlType(field.schema());\n+    return new ConnectColumn(name, type);\n+  }\n+\n+  private static Schema ensureNamed(final Schema schema) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cbd8c557315b20694efbcc51f6db12cb42c22fa"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c27ff1d443c1ba3ff58f7e22c475acf937513464", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/c27ff1d443c1ba3ff58f7e22c475acf937513464", "committedDate": "2020-02-27T11:07:37Z", "message": "chore: merge from master\n\nConflicting files\nksql-functional-tests/src/main/java/io/confluent/ksql/test/tools/TestCaseBuilderUtil.java\nksql-functional-tests/src/main/java/io/confluent/ksql/test/utils/SerdeUtil.java\nksql-serde/src/main/java/io/confluent/ksql/serde/json/JsonFormat.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d747928400e9e29a2ada7a8faad8a35bff64dabf", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/d747928400e9e29a2ada7a8faad8a35bff64dabf", "committedDate": "2020-02-27T13:09:24Z", "message": "chore: requested changes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4878, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}