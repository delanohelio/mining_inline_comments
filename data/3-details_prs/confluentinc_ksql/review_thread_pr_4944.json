{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MTUxNTY5", "number": 4944, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTozMDo1MVrODtQbFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDoyNDozNVrODtVWCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzgxNTg5OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/KSqlCorsHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTozMDo1MVrOF-lACQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo0MDo0NVrOF--s8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2MjI0OQ==", "bodyText": "nit: KsqlCorsHandler", "url": "https://github.com/confluentinc/ksql/pull/4944#discussion_r401162249", "createdAt": "2020-03-31T19:30:51Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/KSqlCorsHandler.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.CorsHandler;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class KSqlCorsHandler implements Handler<RoutingContext> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "940a2e3aa3de49f584a2c1b68a7fac89dac8d878"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4MzM0NA==", "bodyText": "ack", "url": "https://github.com/confluentinc/ksql/pull/4944#discussion_r401583344", "createdAt": "2020-04-01T12:40:45Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/KSqlCorsHandler.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.CorsHandler;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class KSqlCorsHandler implements Handler<RoutingContext> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2MjI0OQ=="}, "originalCommit": {"oid": "940a2e3aa3de49f584a2c1b68a7fac89dac8d878"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzgzOTU5OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/CorsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTozODowNVrOF-lO7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjo0MjozOVrOF--xLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2NjA2MQ==", "bodyText": "nit: put \"wibble.com\" and \"/query-stream\" in constants?", "url": "https://github.com/confluentinc/ksql/pull/4944#discussion_r401166061", "createdAt": "2020-03-31T19:38:05Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/CorsTest.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+import io.confluent.ksql.api.server.ApiServerConfig;\n+import io.confluent.ksql.api.server.KSqlCorsHandler;\n+import io.confluent.ksql.util.VertxCompletableFuture;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class CorsTest extends BaseApiTest {\n+\n+  private Map<String, Object> config = new HashMap<>();\n+\n+  private static final String ACCESS_CONTROL_ALLOW_ORIGIN_HEADER = \"Access-Control-Allow-Origin\";\n+  private static final String ACCESS_CONTROL_ALLOW_METHODS_HEADER = \"Access-Control-Allow-Methods\";\n+  private static final String ACCESS_CONTROL_ALLOW_HEADERS_HEADER = \"Access-Control-Allow-Headers\";\n+  private static final String ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER = \"Access-Control-Allow-Credentials\";\n+\n+  private static final String ACCESS_CONTROL_REQUEST_METHOD_HEADER = \"Access-Control-Request-Method\";\n+\n+  private static final String DEFAULT_ACCESS_CONTROL_ALLOW_HEADERS = \"X-Requested-With,Content-Type,Accept,Origin\";\n+  private static final String DEFAULT_ACCESS_CONTROL_ALLOW_METHODS = \"GET,POST,HEAD\";\n+\n+  @Before\n+  public void setUp() {\n+\n+    vertx = Vertx.vertx();\n+    vertx.exceptionHandler(t -> log.error(\"Unhandled exception in Vert.x\", t));\n+\n+    testEndpoints = new TestEndpoints();\n+    setDefaultRowGenerator();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    stopClient();\n+    stopServer();\n+    if (vertx != null) {\n+      vertx.close();\n+    }\n+  }\n+\n+  @Test\n+  public void shouldNotBeCorsResponseIfNoCorsConfigured() throws Exception {\n+\n+    // Given:\n+    init();\n+\n+    // When\n+    HttpResponse<Buffer> response = sendCorsRequest(HttpMethod.POST, \"wibble.com\");\n+\n+    // Then:\n+    assertThat(response.statusCode(), is(200));\n+    assertThat(response.getHeader(ACCESS_CONTROL_ALLOW_ORIGIN_HEADER), is(nullValue()));\n+    assertThat(response.getHeader(ACCESS_CONTROL_ALLOW_METHODS_HEADER), is(nullValue()));\n+    assertThat(response.getHeader(ACCESS_CONTROL_ALLOW_HEADERS_HEADER), is(nullValue()));\n+  }\n+\n+  @Test\n+  public void shouldExcludePath() throws Exception {\n+\n+    // Given:\n+    init();\n+    config.put(ApiServerConfig.CORS_ALLOWED_ORIGINS, \"wibble.com\");\n+    KSqlCorsHandler.EXCLUDED_PATH_PREFIXES.add(\"/query-stream\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "940a2e3aa3de49f584a2c1b68a7fac89dac8d878"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4NDQzMQ==", "bodyText": "ack", "url": "https://github.com/confluentinc/ksql/pull/4944#discussion_r401584431", "createdAt": "2020-04-01T12:42:39Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/CorsTest.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+import io.confluent.ksql.api.server.ApiServerConfig;\n+import io.confluent.ksql.api.server.KSqlCorsHandler;\n+import io.confluent.ksql.util.VertxCompletableFuture;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class CorsTest extends BaseApiTest {\n+\n+  private Map<String, Object> config = new HashMap<>();\n+\n+  private static final String ACCESS_CONTROL_ALLOW_ORIGIN_HEADER = \"Access-Control-Allow-Origin\";\n+  private static final String ACCESS_CONTROL_ALLOW_METHODS_HEADER = \"Access-Control-Allow-Methods\";\n+  private static final String ACCESS_CONTROL_ALLOW_HEADERS_HEADER = \"Access-Control-Allow-Headers\";\n+  private static final String ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER = \"Access-Control-Allow-Credentials\";\n+\n+  private static final String ACCESS_CONTROL_REQUEST_METHOD_HEADER = \"Access-Control-Request-Method\";\n+\n+  private static final String DEFAULT_ACCESS_CONTROL_ALLOW_HEADERS = \"X-Requested-With,Content-Type,Accept,Origin\";\n+  private static final String DEFAULT_ACCESS_CONTROL_ALLOW_METHODS = \"GET,POST,HEAD\";\n+\n+  @Before\n+  public void setUp() {\n+\n+    vertx = Vertx.vertx();\n+    vertx.exceptionHandler(t -> log.error(\"Unhandled exception in Vert.x\", t));\n+\n+    testEndpoints = new TestEndpoints();\n+    setDefaultRowGenerator();\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    stopClient();\n+    stopServer();\n+    if (vertx != null) {\n+      vertx.close();\n+    }\n+  }\n+\n+  @Test\n+  public void shouldNotBeCorsResponseIfNoCorsConfigured() throws Exception {\n+\n+    // Given:\n+    init();\n+\n+    // When\n+    HttpResponse<Buffer> response = sendCorsRequest(HttpMethod.POST, \"wibble.com\");\n+\n+    // Then:\n+    assertThat(response.statusCode(), is(200));\n+    assertThat(response.getHeader(ACCESS_CONTROL_ALLOW_ORIGIN_HEADER), is(nullValue()));\n+    assertThat(response.getHeader(ACCESS_CONTROL_ALLOW_METHODS_HEADER), is(nullValue()));\n+    assertThat(response.getHeader(ACCESS_CONTROL_ALLOW_HEADERS_HEADER), is(nullValue()));\n+  }\n+\n+  @Test\n+  public void shouldExcludePath() throws Exception {\n+\n+    // Given:\n+    init();\n+    config.put(ApiServerConfig.CORS_ALLOWED_ORIGINS, \"wibble.com\");\n+    KSqlCorsHandler.EXCLUDED_PATH_PREFIXES.add(\"/query-stream\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2NjA2MQ=="}, "originalCommit": {"oid": "940a2e3aa3de49f584a2c1b68a7fac89dac8d878"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODYxNjc5OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/KSqlCorsHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDoyMTo0NFrOF-ssbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozNzoyNlrOF--k2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4ODMwMA==", "bodyText": "These defaults are coming from the Jetty defaults, right? Are they really additive like this? My interpretation of the docs was that these default values are used if the methods or headers are not explicitly supplied, but if something explicit is supplied then the defaults are ignored.\nOtherwise the default of * for the allowed origins doesn't make sense.", "url": "https://github.com/confluentinc/ksql/pull/4944#discussion_r401288300", "createdAt": "2020-04-01T00:21:44Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/KSqlCorsHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.CorsHandler;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class KSqlCorsHandler implements Handler<RoutingContext> {\n+\n+  private static final List<String> DEFAULT_ALLOWED_METHODS = Arrays.asList(\"GET\", \"POST\", \"HEAD\");\n+  private static final List<String> DEFAULT_ALLOWED_HEADERS = Arrays\n+      .asList(\"X-Requested-With\", \"Content-Type\", \"Accept\", \"Origin\");\n+  private static final List<String> EXCLUDED_PATH_PREFIXES = Collections.singletonList(\"/ws/\");\n+\n+  static void setupCorsHandler(final Server server, final Router router) {\n+    final ApiServerConfig apiServerConfig = server.getConfig();\n+    final String allowedOrigins = apiServerConfig\n+        .getString(ApiServerConfig.CORS_ALLOWED_ORIGINS);\n+    if (allowedOrigins.trim().isEmpty()) {\n+      return;\n+    }\n+    final String convertedPattern = convertAllowedOrigin(allowedOrigins);\n+    final CorsHandler corsHandler = CorsHandler.create(convertedPattern);\n+    final List<String> allowedMethods = apiServerConfig\n+        .getList(ApiServerConfig.CORS_ALLOWED_METHODS);\n+    final Set<String> allowedMethodsSet = new LinkedHashSet<>(allowedMethods);\n+    allowedMethodsSet.addAll(DEFAULT_ALLOWED_METHODS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5861a6b2b04399a2e716805dce227aca489b4e1d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4MTI3Mg==", "bodyText": "Ack", "url": "https://github.com/confluentinc/ksql/pull/4944#discussion_r401581272", "createdAt": "2020-04-01T12:37:26Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/KSqlCorsHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.CorsHandler;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class KSqlCorsHandler implements Handler<RoutingContext> {\n+\n+  private static final List<String> DEFAULT_ALLOWED_METHODS = Arrays.asList(\"GET\", \"POST\", \"HEAD\");\n+  private static final List<String> DEFAULT_ALLOWED_HEADERS = Arrays\n+      .asList(\"X-Requested-With\", \"Content-Type\", \"Accept\", \"Origin\");\n+  private static final List<String> EXCLUDED_PATH_PREFIXES = Collections.singletonList(\"/ws/\");\n+\n+  static void setupCorsHandler(final Server server, final Router router) {\n+    final ApiServerConfig apiServerConfig = server.getConfig();\n+    final String allowedOrigins = apiServerConfig\n+        .getString(ApiServerConfig.CORS_ALLOWED_ORIGINS);\n+    if (allowedOrigins.trim().isEmpty()) {\n+      return;\n+    }\n+    final String convertedPattern = convertAllowedOrigin(allowedOrigins);\n+    final CorsHandler corsHandler = CorsHandler.create(convertedPattern);\n+    final List<String> allowedMethods = apiServerConfig\n+        .getList(ApiServerConfig.CORS_ALLOWED_METHODS);\n+    final Set<String> allowedMethodsSet = new LinkedHashSet<>(allowedMethods);\n+    allowedMethodsSet.addAll(DEFAULT_ALLOWED_METHODS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4ODMwMA=="}, "originalCommit": {"oid": "5861a6b2b04399a2e716805dce227aca489b4e1d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODYxOTI4OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/KSqlCorsHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDoyMzowOVrOF-st7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxNToyNToyMVrOF_F9wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4ODY4NA==", "bodyText": "Was the intention behind this to implement the Jetty default of * for allowed origins? I don't think returning early is valid because even if the allowed origins check succeeds, we should still perform the method and header checks.", "url": "https://github.com/confluentinc/ksql/pull/4944#discussion_r401288684", "createdAt": "2020-04-01T00:23:09Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/KSqlCorsHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.CorsHandler;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class KSqlCorsHandler implements Handler<RoutingContext> {\n+\n+  private static final List<String> DEFAULT_ALLOWED_METHODS = Arrays.asList(\"GET\", \"POST\", \"HEAD\");\n+  private static final List<String> DEFAULT_ALLOWED_HEADERS = Arrays\n+      .asList(\"X-Requested-With\", \"Content-Type\", \"Accept\", \"Origin\");\n+  private static final List<String> EXCLUDED_PATH_PREFIXES = Collections.singletonList(\"/ws/\");\n+\n+  static void setupCorsHandler(final Server server, final Router router) {\n+    final ApiServerConfig apiServerConfig = server.getConfig();\n+    final String allowedOrigins = apiServerConfig\n+        .getString(ApiServerConfig.CORS_ALLOWED_ORIGINS);\n+    if (allowedOrigins.trim().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5861a6b2b04399a2e716805dce227aca489b4e1d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4MjE3OA==", "bodyText": "No, this means no cors handler is configured (the default).", "url": "https://github.com/confluentinc/ksql/pull/4944#discussion_r401582178", "createdAt": "2020-04-01T12:38:56Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/KSqlCorsHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.CorsHandler;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class KSqlCorsHandler implements Handler<RoutingContext> {\n+\n+  private static final List<String> DEFAULT_ALLOWED_METHODS = Arrays.asList(\"GET\", \"POST\", \"HEAD\");\n+  private static final List<String> DEFAULT_ALLOWED_HEADERS = Arrays\n+      .asList(\"X-Requested-With\", \"Content-Type\", \"Accept\", \"Origin\");\n+  private static final List<String> EXCLUDED_PATH_PREFIXES = Collections.singletonList(\"/ws/\");\n+\n+  static void setupCorsHandler(final Server server, final Router router) {\n+    final ApiServerConfig apiServerConfig = server.getConfig();\n+    final String allowedOrigins = apiServerConfig\n+        .getString(ApiServerConfig.CORS_ALLOWED_ORIGINS);\n+    if (allowedOrigins.trim().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4ODY4NA=="}, "originalCommit": {"oid": "5861a6b2b04399a2e716805dce227aca489b4e1d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTcwMjMzNw==", "bodyText": "Ah I see, the way rest-utils determines if CORS should be enabled or not is based on whether this config is empty or not. This behavior makes sense then.", "url": "https://github.com/confluentinc/ksql/pull/4944#discussion_r401702337", "createdAt": "2020-04-01T15:25:21Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/KSqlCorsHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.CorsHandler;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class KSqlCorsHandler implements Handler<RoutingContext> {\n+\n+  private static final List<String> DEFAULT_ALLOWED_METHODS = Arrays.asList(\"GET\", \"POST\", \"HEAD\");\n+  private static final List<String> DEFAULT_ALLOWED_HEADERS = Arrays\n+      .asList(\"X-Requested-With\", \"Content-Type\", \"Accept\", \"Origin\");\n+  private static final List<String> EXCLUDED_PATH_PREFIXES = Collections.singletonList(\"/ws/\");\n+\n+  static void setupCorsHandler(final Server server, final Router router) {\n+    final ApiServerConfig apiServerConfig = server.getConfig();\n+    final String allowedOrigins = apiServerConfig\n+        .getString(ApiServerConfig.CORS_ALLOWED_ORIGINS);\n+    if (allowedOrigins.trim().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4ODY4NA=="}, "originalCommit": {"oid": "5861a6b2b04399a2e716805dce227aca489b4e1d"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODYyMDk5OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/KSqlCorsHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDoyNDowMVrOF-su6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozOTowNVrOF--o3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4ODkzNw==", "bodyText": "nit:\ncorsHandler.allowedHeaders(allowedHeadersSet);\n\nrather than iterating through the set and adding each individually?", "url": "https://github.com/confluentinc/ksql/pull/4944#discussion_r401288937", "createdAt": "2020-04-01T00:24:01Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/KSqlCorsHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.CorsHandler;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class KSqlCorsHandler implements Handler<RoutingContext> {\n+\n+  private static final List<String> DEFAULT_ALLOWED_METHODS = Arrays.asList(\"GET\", \"POST\", \"HEAD\");\n+  private static final List<String> DEFAULT_ALLOWED_HEADERS = Arrays\n+      .asList(\"X-Requested-With\", \"Content-Type\", \"Accept\", \"Origin\");\n+  private static final List<String> EXCLUDED_PATH_PREFIXES = Collections.singletonList(\"/ws/\");\n+\n+  static void setupCorsHandler(final Server server, final Router router) {\n+    final ApiServerConfig apiServerConfig = server.getConfig();\n+    final String allowedOrigins = apiServerConfig\n+        .getString(ApiServerConfig.CORS_ALLOWED_ORIGINS);\n+    if (allowedOrigins.trim().isEmpty()) {\n+      return;\n+    }\n+    final String convertedPattern = convertAllowedOrigin(allowedOrigins);\n+    final CorsHandler corsHandler = CorsHandler.create(convertedPattern);\n+    final List<String> allowedMethods = apiServerConfig\n+        .getList(ApiServerConfig.CORS_ALLOWED_METHODS);\n+    final Set<String> allowedMethodsSet = new LinkedHashSet<>(allowedMethods);\n+    allowedMethodsSet.addAll(DEFAULT_ALLOWED_METHODS);\n+    for (String allowedMethod : allowedMethodsSet) {\n+      corsHandler.allowedMethod(HttpMethod.valueOf(allowedMethod.toUpperCase()));\n+    }\n+\n+    final List<String> allowedHeaders = apiServerConfig\n+        .getList(ApiServerConfig.CORS_ALLOWED_HEADERS);\n+    final Set<String> allowedHeadersSet = new LinkedHashSet<>(allowedHeaders);\n+    allowedHeadersSet.addAll(DEFAULT_ALLOWED_HEADERS);\n+    for (String allowedHeader : allowedHeadersSet) {\n+      corsHandler.allowedHeader(allowedHeader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5861a6b2b04399a2e716805dce227aca489b4e1d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4MjMwMA==", "bodyText": "ack", "url": "https://github.com/confluentinc/ksql/pull/4944#discussion_r401582300", "createdAt": "2020-04-01T12:39:05Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/KSqlCorsHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.CorsHandler;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+public class KSqlCorsHandler implements Handler<RoutingContext> {\n+\n+  private static final List<String> DEFAULT_ALLOWED_METHODS = Arrays.asList(\"GET\", \"POST\", \"HEAD\");\n+  private static final List<String> DEFAULT_ALLOWED_HEADERS = Arrays\n+      .asList(\"X-Requested-With\", \"Content-Type\", \"Accept\", \"Origin\");\n+  private static final List<String> EXCLUDED_PATH_PREFIXES = Collections.singletonList(\"/ws/\");\n+\n+  static void setupCorsHandler(final Server server, final Router router) {\n+    final ApiServerConfig apiServerConfig = server.getConfig();\n+    final String allowedOrigins = apiServerConfig\n+        .getString(ApiServerConfig.CORS_ALLOWED_ORIGINS);\n+    if (allowedOrigins.trim().isEmpty()) {\n+      return;\n+    }\n+    final String convertedPattern = convertAllowedOrigin(allowedOrigins);\n+    final CorsHandler corsHandler = CorsHandler.create(convertedPattern);\n+    final List<String> allowedMethods = apiServerConfig\n+        .getList(ApiServerConfig.CORS_ALLOWED_METHODS);\n+    final Set<String> allowedMethodsSet = new LinkedHashSet<>(allowedMethods);\n+    allowedMethodsSet.addAll(DEFAULT_ALLOWED_METHODS);\n+    for (String allowedMethod : allowedMethodsSet) {\n+      corsHandler.allowedMethod(HttpMethod.valueOf(allowedMethod.toUpperCase()));\n+    }\n+\n+    final List<String> allowedHeaders = apiServerConfig\n+        .getList(ApiServerConfig.CORS_ALLOWED_HEADERS);\n+    final Set<String> allowedHeadersSet = new LinkedHashSet<>(allowedHeaders);\n+    allowedHeadersSet.addAll(DEFAULT_ALLOWED_HEADERS);\n+    for (String allowedHeader : allowedHeadersSet) {\n+      corsHandler.allowedHeader(allowedHeader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4ODkzNw=="}, "originalCommit": {"oid": "5861a6b2b04399a2e716805dce227aca489b4e1d"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODYyMjE5OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/CorsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDoyNDozNVrOF-svmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozOTo1MFrOF--qqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4OTExNA==", "bodyText": "Do we need to override this method? The implementation looks the same as that of the superclass.", "url": "https://github.com/confluentinc/ksql/pull/4944#discussion_r401289114", "createdAt": "2020-04-01T00:24:35Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/CorsTest.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+import io.confluent.ksql.api.server.ApiServerConfig;\n+import io.confluent.ksql.util.VertxCompletableFuture;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class CorsTest extends BaseApiTest {\n+\n+  private Map<String, Object> config = new HashMap<>();\n+\n+  private static final String ACCESS_CONTROL_ALLOW_ORIGIN_HEADER = \"Access-Control-Allow-Origin\";\n+  private static final String ACCESS_CONTROL_ALLOW_METHODS_HEADER = \"Access-Control-Allow-Methods\";\n+  private static final String ACCESS_CONTROL_ALLOW_HEADERS_HEADER = \"Access-Control-Allow-Headers\";\n+  private static final String ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER = \"Access-Control-Allow-Credentials\";\n+\n+  private static final String ACCESS_CONTROL_REQUEST_METHOD_HEADER = \"Access-Control-Request-Method\";\n+\n+  private static final String DEFAULT_ACCESS_CONTROL_ALLOW_HEADERS = \"X-Requested-With,Content-Type,Accept,Origin\";\n+  private static final String DEFAULT_ACCESS_CONTROL_ALLOW_METHODS = \"GET,POST,HEAD\";\n+\n+  @Before\n+  public void setUp() {\n+\n+    vertx = Vertx.vertx();\n+    vertx.exceptionHandler(t -> log.error(\"Unhandled exception in Vert.x\", t));\n+\n+    testEndpoints = new TestEndpoints();\n+    setDefaultRowGenerator();\n+  }\n+\n+  @After\n+  public void tearDown() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5861a6b2b04399a2e716805dce227aca489b4e1d"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4Mjc2Mg==", "bodyText": "ack", "url": "https://github.com/confluentinc/ksql/pull/4944#discussion_r401582762", "createdAt": "2020-04-01T12:39:50Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/CorsTest.java", "diffHunk": "@@ -0,0 +1,300 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+import io.confluent.ksql.api.server.ApiServerConfig;\n+import io.confluent.ksql.util.VertxCompletableFuture;\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class CorsTest extends BaseApiTest {\n+\n+  private Map<String, Object> config = new HashMap<>();\n+\n+  private static final String ACCESS_CONTROL_ALLOW_ORIGIN_HEADER = \"Access-Control-Allow-Origin\";\n+  private static final String ACCESS_CONTROL_ALLOW_METHODS_HEADER = \"Access-Control-Allow-Methods\";\n+  private static final String ACCESS_CONTROL_ALLOW_HEADERS_HEADER = \"Access-Control-Allow-Headers\";\n+  private static final String ACCESS_CONTROL_ALLOW_CREDENTIALS_HEADER = \"Access-Control-Allow-Credentials\";\n+\n+  private static final String ACCESS_CONTROL_REQUEST_METHOD_HEADER = \"Access-Control-Request-Method\";\n+\n+  private static final String DEFAULT_ACCESS_CONTROL_ALLOW_HEADERS = \"X-Requested-With,Content-Type,Accept,Origin\";\n+  private static final String DEFAULT_ACCESS_CONTROL_ALLOW_METHODS = \"GET,POST,HEAD\";\n+\n+  @Before\n+  public void setUp() {\n+\n+    vertx = Vertx.vertx();\n+    vertx.exceptionHandler(t -> log.error(\"Unhandled exception in Vert.x\", t));\n+\n+    testEndpoints = new TestEndpoints();\n+    setDefaultRowGenerator();\n+  }\n+\n+  @After\n+  public void tearDown() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI4OTExNA=="}, "originalCommit": {"oid": "5861a6b2b04399a2e716805dce227aca489b4e1d"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3705, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}