{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNDgwMzYw", "number": 4450, "title": "chore: support window bound columns in selection of windowed group by", "bodyText": "Description\nFixes bits of #4397\nKSQL currently lets you take a non-windowed stream and perform a windowed group by:\nCREATE TABLE T as SELECT stuff FROM S WINDOW TUMBLING (SIZE 1 SECOND) group by something;\nWhich is essentially grouping by not just something, but also implicitly by the window bounds.\nThis might be more correctly written with a Tumbling table function:\nCREATE TABLE T as SELECT stuff FROM Tumbling(S, SIZE 1 SECOND) group by something, windowstart, windowend;\nWhere the Tumbling table function returns one row for each row in S, with the addition of the windowstart and windowend columns.   (Note: Hopping and session table functions are also possible, though in the case of the latter the table function would also emit retractions).\nIn a correct SQL model windowstart and windowend would therefore be available as fields within the selection, e.g.\nCREATE TABLE T as SELECT windowstart, windowend, something, count() FROM Tumbling(S, SIZE 1 SECOND) group by something, windowstart, windowend;\n\nThis change makes such awesomeness possible.\nHow to review.\nThe changes, TBH, feel a little hacky.  They're too spread around the code base. However, without some restructuring there's little choice but to hack the window bounds in. The planned structured keys work will improve things, and we probably need to rethink windowing at some point.   That said, reviewing notes are:\n\nQueryAnalyser has been enhanced to also pass WHERE expressions to the aggregate analyser, so that it can throw on any window bounds columns.\nAggregateAnalyzer has been enhanced to throw if the window bound columns are used anywhere but in the select of windowed group by statements. (We'll need a Streams change to support anything else).\nAnalysis.getFromSourceSchemas now takes a boolean flag to indicate if the returned schemas should, for windowed group bys, include the window bounds columns.  Basically, the window bound columns are only available post the aggregation.  A lot of the code passes true to get the schema with the window bounds in it, and relying on the fact that the AggregateAnalyzer has already rejected anything invalid.\nAggregateNode and LogicalPlanner have some magic to handle the special window bounds columns, where appropriate.\nAggregateParamsFactory now takes a flag to indicate a windowed group by, and adds appropriate window bounds columns to the result schema.\nStreamAggregateBuilder adds a new transformValues step to populate the window bounds values from the windowed key.\n\nNote: there are some expected topology changes, but these will mostly be reverted by a follow on PR and are also backwards compatible.  The topologies also include a dubiously named Aggregate-Aggregate-WindowSelect2 node. This will also go in the follow up PR.\nTesting done\nSuitable tests added for pull, push and persistent queries.\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-02-05T16:53:15Z", "url": "https://github.com/confluentinc/ksql/pull/4450", "merged": true, "mergeCommit": {"oid": "3c1114ce5fca783d4c5403d5537909716b472516"}, "closed": true, "closedAt": "2020-02-06T16:10:52Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBY482AH2gAyMzcxNDgwMzYwOmIwY2ViMDVhYzU2MjU5YjFkNjg5YmVhNDdjMGVhNDdhZGNmZDc5YTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBtDqUAFqTM1NDU3NTYyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b0ceb05ac56259b1d689bea47c0ea47adcfd79a1", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/b0ceb05ac56259b1d689bea47c0ea47adcfd79a1", "committedDate": "2020-02-05T16:39:56Z", "message": "chore: support window bound columns in selection of windowed group by\n\nKSQL currently lets you take a non-windowed stream and perform a windowed group by:\n\n```sql\nCREATE TABLE T as SELECT stuff FROM S WINDOW TUMBLING (SIZE 1 SECOND) group by something;\n```\n\nWhich is essentially grouping by not just `something`, but also implicitly by the window bounds.\n\nThis might be more correctly written with a Tumbling table function:\n\n```sql\nCREATE TABLE T as SELECT stuff FROM Tumbling(S, SIZE 1 SECOND) group by something, windowstart, windowend;\n```\n\nWhere the Tumbling table function returns one row for each row in `S`, with the addition of the `windowstart` and `windowend` columns.   (Note: Hopping and session table functions are also possible, though in the case of the latter the table function would also emit retractions).\n\nIn a correct SQL model `windowstart` and `windowend` would therefore be available as fields within the selection, e.g.\n\n```\nCREATE TABLE T as SELECT windowstart, windowend, something, count() FROM Tumbling(S, SIZE 1 SECOND) group by something, windowstart, windowend;\n```\n\nThis change makes such awesomeness possible."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzODg0ODk0", "url": "https://github.com/confluentinc/ksql/pull/4450#pullrequestreview-353884894", "createdAt": "2020-02-05T17:02:28Z", "commit": {"oid": "b0ceb05ac56259b1d689bea47c0ea47adcfd79a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzowMjoyOVrOFl_tNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNzowMjoyOVrOFl_tNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTM4NTM5Ng==", "bodyText": "Note: the dodgily named Aggregate-Aggregate-WindowSelect2 node here will go with the next PR.  It's temporary only.", "url": "https://github.com/confluentinc/ksql/pull/4450#discussion_r375385396", "createdAt": "2020-02-05T17:02:29Z", "author": {"login": "big-andy-coates"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/StreamAggregateBuilder.java", "diffHunk": "@@ -187,6 +191,19 @@ private StreamAggregateBuilder() {\n             resultSchema\n         );\n \n+    reduced = reduced.transformValues(\n+        () -> new KsTransformer<>(new WindowBoundsPopulator()),\n+        Named.as(StreamsUtil.buildOpName(\n+            AggregateBuilderUtils.windowSelectContext(aggregate)\n+        ) + \"2\")\n+    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ceb05ac56259b1d689bea47c0ea47adcfd79a1"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzOTc4MjYz", "url": "https://github.com/confluentinc/ksql/pull/4450#pullrequestreview-353978263", "createdAt": "2020-02-05T19:23:44Z", "commit": {"oid": "b0ceb05ac56259b1d689bea47c0ea47adcfd79a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOToyMzo0NFrOFmEMEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOToyMzo0NFrOFmEMEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1ODgzNQ==", "bodyText": "this is not really the right error message right? in this case the column is used in the select, but it's not supported because it's a parameter to an aggregate function.", "url": "https://github.com/confluentinc/ksql/pull/4450#discussion_r375458835", "createdAt": "2020-02-05T19:23:44Z", "author": {"login": "rodesai"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/AggregateAnalyzer.java", "diffHunk": "@@ -36,21 +37,26 @@\n   private final MutableAggregateAnalysis aggregateAnalysis;\n   private final QualifiedColumnReferenceExp defaultArgument;\n   private final FunctionRegistry functionRegistry;\n+  private final boolean hasWindowExpression;\n \n   AggregateAnalyzer(\n       final MutableAggregateAnalysis aggregateAnalysis,\n       final QualifiedColumnReferenceExp defaultArgument,\n+      final boolean hasWindowExpression,\n       final FunctionRegistry functionRegistry\n   ) {\n     this.aggregateAnalysis = Objects.requireNonNull(aggregateAnalysis, \"aggregateAnalysis\");\n     this.defaultArgument = Objects.requireNonNull(defaultArgument, \"defaultArgument\");\n     this.functionRegistry = Objects.requireNonNull(functionRegistry, \"functionRegistry\");\n+    this.hasWindowExpression = hasWindowExpression;\n   }\n \n   void processSelect(final Expression expression) {\n     final Set<ColumnReferenceExp> nonAggParams = new HashSet<>();\n     final AggregateVisitor visitor = new AggregateVisitor((aggFuncName, node) -> {\n-      if (!aggFuncName.isPresent()) {\n+      if (aggFuncName.isPresent()) {\n+        throwOnWindowBoundColumnIfWindowedAggregate(node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ceb05ac56259b1d689bea47c0ea47adcfd79a1"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzOTgwODUz", "url": "https://github.com/confluentinc/ksql/pull/4450#pullrequestreview-353980853", "createdAt": "2020-02-05T19:27:42Z", "commit": {"oid": "b0ceb05ac56259b1d689bea47c0ea47adcfd79a1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOToyNzo0MlrOFmEUag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDowMTozN1rOFmFXwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ2MDk3MA==", "bodyText": "Should we drop unaliased column references to windowstart/windowend from the list of select expressions? That way a user can project windowstart/windowend without an alias.", "url": "https://github.com/confluentinc/ksql/pull/4450#discussion_r375460970", "createdAt": "2020-02-05T19:27:42Z", "author": {"login": "rodesai"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "diffHunk": "@@ -418,7 +418,8 @@ private LogicalSchema buildAggregateSchema(\n     }\n \n     final LogicalSchema sourceSchema = buildProjectionSchema(\n-        sourcePlanNode.getSchema(),\n+        sourcePlanNode.getSchema()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ceb05ac56259b1d689bea47c0ea47adcfd79a1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ3ODIwOQ==", "bodyText": "Should we do this in a separate step? Once we support using key columns directly we won't need to project these into the value anymore right?", "url": "https://github.com/confluentinc/ksql/pull/4450#discussion_r375478209", "createdAt": "2020-02-05T20:01:37Z", "author": {"login": "rodesai"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/StreamAggregateBuilder.java", "diffHunk": "@@ -187,6 +191,19 @@ private StreamAggregateBuilder() {\n             resultSchema\n         );\n \n+    reduced = reduced.transformValues(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ceb05ac56259b1d689bea47c0ea47adcfd79a1"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0NTc1NjI1", "url": "https://github.com/confluentinc/ksql/pull/4450#pullrequestreview-354575625", "createdAt": "2020-02-06T16:09:44Z", "commit": {"oid": "b0ceb05ac56259b1d689bea47c0ea47adcfd79a1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4948, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}