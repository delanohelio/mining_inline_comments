{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2MjI3ODE3", "number": 4946, "title": "chore: Make sure basic auth handler is called when plugin is configured", "bodyText": "Description\nIf basic auth handler is configured along with auth plugin, then make sure the basic auth handler is used if auth type = basic.\nThis is a stacked PR, please review top commit(s).\nTesting done\nAdded/updated tests\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-03-31T10:23:39Z", "url": "https://github.com/confluentinc/ksql/pull/4946", "merged": true, "mergeCommit": {"oid": "9da9adc3e55e80c1068241388e5ae52ea1d02066"}, "closed": true, "closedAt": "2020-04-15T07:37:11Z", "author": {"login": "purplefox"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTCAvqABqjMxODI5OTIwNTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXzEA6gBqjMyMzQyMTMxNDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "771d267a5b742c98ded88be056b292c3859f35f2", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/771d267a5b742c98ded88be056b292c3859f35f2", "committedDate": "2020-03-31T10:21:46Z", "message": "Make sure basic auth handler if configured is called when auth plugin is configured"}, "afterCommit": {"oid": "66c23f1766189ccd98ae630104e9d65be3297e50", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/66c23f1766189ccd98ae630104e9d65be3297e50", "committedDate": "2020-03-31T12:11:01Z", "message": "Make sure basic auth handler if configured is called when auth plugin is configured"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MTk4Mjc2", "url": "https://github.com/confluentinc/ksql/pull/4946#pullrequestreview-385198276", "createdAt": "2020-04-01T00:46:50Z", "commit": {"oid": "66c23f1766189ccd98ae630104e9d65be3297e50"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDo0Njo1MFrOF-tG8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwMDo0ODoxNFrOF-tIcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5NTA5MQ==", "bodyText": "What happens if neither of these handlers is called (i.e., the jaasAuthHandler is present but an invalid auth header was provided, and no pluginHandler is present)? Do we appropriately fail the request in this case?", "url": "https://github.com/confluentinc/ksql/pull/4946#discussion_r401295091", "createdAt": "2020-04-01T00:46:50Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -221,7 +196,46 @@ private static void unhandledExceptionHandler(final Throwable t) {\n     log.error(\"Unhandled exception\", t);\n   }\n \n-  private static Optional<AuthHandler> getAuthHandler(final Server server) {\n+  private void setupAuthHandlers(final Router router) {\n+    final Optional<Handler<RoutingContext>> jaasAuthHandler = getJaasAuthHandler(server);\n+    final KsqlSecurityExtension securityExtension = server.getSecurityExtension();\n+    final Optional<AuthenticationPlugin> authenticationPlugin = server.getAuthenticationPlugin();\n+    final Optional<Handler<RoutingContext>> pluginHandler =\n+        authenticationPlugin.map(plugin -> new AuthenticationPluginHandler(server, plugin));\n+\n+    if (jaasAuthHandler.isPresent() || authenticationPlugin.isPresent()) {\n+      routeToNonProxiedEndpoints(router, ServerVerticle::pauseHandler);\n+\n+      routeToNonProxiedEndpoints(router,\n+          rc -> wrappedAuthHandler(rc, jaasAuthHandler, pluginHandler));\n+\n+      // For authorization use auth provider configured via security extension (if any)\n+      securityExtension.getAuthorizationProvider()\n+          .ifPresent(ksqlAuthorizationProvider -> routeToNonProxiedEndpoints(router,\n+              new KsqlAuthorizationProviderHandler(server.getWorkerExecutor(),\n+                  ksqlAuthorizationProvider)));\n+\n+      routeToNonProxiedEndpoints(router, ServerVerticle::resumeHandler);\n+    }\n+  }\n+\n+  // If we have a Jaas handler configured and we have Basic credentials then we should auth\n+  // with that\n+  private static void wrappedAuthHandler(final RoutingContext routingContext,\n+      final Optional<Handler<RoutingContext>> jaasAuthHandler,\n+      final Optional<Handler<RoutingContext>> pluginHandler) {\n+    if (jaasAuthHandler.isPresent()) {\n+      final String authHeader = routingContext.request().getHeader(\"Authorization\");\n+      if (authHeader == null || authHeader.toLowerCase().startsWith(\"basic \")) {\n+        jaasAuthHandler.get().handle(routingContext);\n+        return;\n+      }\n+    }\n+    pluginHandler\n+        .ifPresent(routingContextHandler -> routingContextHandler.handle(routingContext));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66c23f1766189ccd98ae630104e9d65be3297e50"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5NTI4Nw==", "bodyText": "Why do we always route to the jaasAuthHandler if no auth header is provided? Is it true that all pluginHandlers require the auth header to be set?", "url": "https://github.com/confluentinc/ksql/pull/4946#discussion_r401295287", "createdAt": "2020-04-01T00:47:35Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -221,7 +196,46 @@ private static void unhandledExceptionHandler(final Throwable t) {\n     log.error(\"Unhandled exception\", t);\n   }\n \n-  private static Optional<AuthHandler> getAuthHandler(final Server server) {\n+  private void setupAuthHandlers(final Router router) {\n+    final Optional<Handler<RoutingContext>> jaasAuthHandler = getJaasAuthHandler(server);\n+    final KsqlSecurityExtension securityExtension = server.getSecurityExtension();\n+    final Optional<AuthenticationPlugin> authenticationPlugin = server.getAuthenticationPlugin();\n+    final Optional<Handler<RoutingContext>> pluginHandler =\n+        authenticationPlugin.map(plugin -> new AuthenticationPluginHandler(server, plugin));\n+\n+    if (jaasAuthHandler.isPresent() || authenticationPlugin.isPresent()) {\n+      routeToNonProxiedEndpoints(router, ServerVerticle::pauseHandler);\n+\n+      routeToNonProxiedEndpoints(router,\n+          rc -> wrappedAuthHandler(rc, jaasAuthHandler, pluginHandler));\n+\n+      // For authorization use auth provider configured via security extension (if any)\n+      securityExtension.getAuthorizationProvider()\n+          .ifPresent(ksqlAuthorizationProvider -> routeToNonProxiedEndpoints(router,\n+              new KsqlAuthorizationProviderHandler(server.getWorkerExecutor(),\n+                  ksqlAuthorizationProvider)));\n+\n+      routeToNonProxiedEndpoints(router, ServerVerticle::resumeHandler);\n+    }\n+  }\n+\n+  // If we have a Jaas handler configured and we have Basic credentials then we should auth\n+  // with that\n+  private static void wrappedAuthHandler(final RoutingContext routingContext,\n+      final Optional<Handler<RoutingContext>> jaasAuthHandler,\n+      final Optional<Handler<RoutingContext>> pluginHandler) {\n+    if (jaasAuthHandler.isPresent()) {\n+      final String authHeader = routingContext.request().getHeader(\"Authorization\");\n+      if (authHeader == null || authHeader.toLowerCase().startsWith(\"basic \")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66c23f1766189ccd98ae630104e9d65be3297e50"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI5NTQ3Mw==", "bodyText": "Should we change this to a more specific type, since the method only works if this first auth handler is for basic authentication?", "url": "https://github.com/confluentinc/ksql/pull/4946#discussion_r401295473", "createdAt": "2020-04-01T00:48:14Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -221,7 +196,46 @@ private static void unhandledExceptionHandler(final Throwable t) {\n     log.error(\"Unhandled exception\", t);\n   }\n \n-  private static Optional<AuthHandler> getAuthHandler(final Server server) {\n+  private void setupAuthHandlers(final Router router) {\n+    final Optional<Handler<RoutingContext>> jaasAuthHandler = getJaasAuthHandler(server);\n+    final KsqlSecurityExtension securityExtension = server.getSecurityExtension();\n+    final Optional<AuthenticationPlugin> authenticationPlugin = server.getAuthenticationPlugin();\n+    final Optional<Handler<RoutingContext>> pluginHandler =\n+        authenticationPlugin.map(plugin -> new AuthenticationPluginHandler(server, plugin));\n+\n+    if (jaasAuthHandler.isPresent() || authenticationPlugin.isPresent()) {\n+      routeToNonProxiedEndpoints(router, ServerVerticle::pauseHandler);\n+\n+      routeToNonProxiedEndpoints(router,\n+          rc -> wrappedAuthHandler(rc, jaasAuthHandler, pluginHandler));\n+\n+      // For authorization use auth provider configured via security extension (if any)\n+      securityExtension.getAuthorizationProvider()\n+          .ifPresent(ksqlAuthorizationProvider -> routeToNonProxiedEndpoints(router,\n+              new KsqlAuthorizationProviderHandler(server.getWorkerExecutor(),\n+                  ksqlAuthorizationProvider)));\n+\n+      routeToNonProxiedEndpoints(router, ServerVerticle::resumeHandler);\n+    }\n+  }\n+\n+  // If we have a Jaas handler configured and we have Basic credentials then we should auth\n+  // with that\n+  private static void wrappedAuthHandler(final RoutingContext routingContext,\n+      final Optional<Handler<RoutingContext>> jaasAuthHandler,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66c23f1766189ccd98ae630104e9d65be3297e50"}, "originalPosition": 63}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66c23f1766189ccd98ae630104e9d65be3297e50", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/66c23f1766189ccd98ae630104e9d65be3297e50", "committedDate": "2020-03-31T12:11:01Z", "message": "Make sure basic auth handler if configured is called when auth plugin is configured"}, "afterCommit": {"oid": "5ceb7d77948680302532b0ff09c3f808e0392de0", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/5ceb7d77948680302532b0ff09c3f808e0392de0", "committedDate": "2020-04-01T13:27:38Z", "message": "Review updates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5ceb7d77948680302532b0ff09c3f808e0392de0", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/5ceb7d77948680302532b0ff09c3f808e0392de0", "committedDate": "2020-04-01T13:27:38Z", "message": "Review updates"}, "afterCommit": {"oid": "0da577786dfa3e5bf5b7e5306d3c1eb750d1022a", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/0da577786dfa3e5bf5b7e5306d3c1eb750d1022a", "committedDate": "2020-04-08T13:50:05Z", "message": "Review updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMjYzNDMy", "url": "https://github.com/confluentinc/ksql/pull/4946#pullrequestreview-391263432", "createdAt": "2020-04-10T04:42:27Z", "commit": {"oid": "0da577786dfa3e5bf5b7e5306d3c1eb750d1022a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNDo0MjoyOFrOGDw3BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNDo0MjoyOFrOGDw3BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU5OTQyOQ==", "bodyText": "To confirm my understanding - this is what would handle authenticating/authorizing alternative credentials? (e.g. a bearer token like ccloud supports)", "url": "https://github.com/confluentinc/ksql/pull/4946#discussion_r406599429", "createdAt": "2020-04-10T04:42:28Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -219,23 +219,31 @@ private void setupAuthHandlers(final Router router) {\n     }\n   }\n \n-  // If we have a Jaas handler configured and we have Basic credentials then we should auth\n-  // with that\n   private static void wrappedAuthHandler(final RoutingContext routingContext,\n-      final Optional<Handler<RoutingContext>> jaasAuthHandler,\n+      final Optional<AuthHandler> jaasAuthHandler,\n       final Optional<Handler<RoutingContext>> pluginHandler) {\n     if (jaasAuthHandler.isPresent()) {\n+      // If we have a Jaas handler configured and we have Basic credentials then we should auth\n+      // with that\n       final String authHeader = routingContext.request().getHeader(\"Authorization\");\n-      if (authHeader == null || authHeader.toLowerCase().startsWith(\"basic \")) {\n+      if (authHeader != null && authHeader.toLowerCase().startsWith(\"basic \")) {\n         jaasAuthHandler.get().handle(routingContext);\n         return;\n       }\n     }\n-    pluginHandler\n-        .ifPresent(routingContextHandler -> routingContextHandler.handle(routingContext));\n+    // Fall through to authing with any authentication plugin\n+    if (pluginHandler.isPresent()) {\n+      pluginHandler.get().handle(routingContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0da577786dfa3e5bf5b7e5306d3c1eb750d1022a"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMjYzNTEx", "url": "https://github.com/confluentinc/ksql/pull/4946#pullrequestreview-391263511", "createdAt": "2020-04-10T04:42:47Z", "commit": {"oid": "0da577786dfa3e5bf5b7e5306d3c1eb750d1022a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb4098c7fafac9ab7e1ad1e630eb59b074baaca2", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/eb4098c7fafac9ab7e1ad1e630eb59b074baaca2", "committedDate": "2020-04-15T07:35:27Z", "message": "Make sure basic auth handler if configured is called when auth plugin is configured"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8acc340cf8edeb50a73e54aa4fe933eeb0bc06e7", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/8acc340cf8edeb50a73e54aa4fe933eeb0bc06e7", "committedDate": "2020-04-15T07:35:27Z", "message": "Review updates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0da577786dfa3e5bf5b7e5306d3c1eb750d1022a", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/0da577786dfa3e5bf5b7e5306d3c1eb750d1022a", "committedDate": "2020-04-08T13:50:05Z", "message": "Review updates"}, "afterCommit": {"oid": "8acc340cf8edeb50a73e54aa4fe933eeb0bc06e7", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/8acc340cf8edeb50a73e54aa4fe933eeb0bc06e7", "committedDate": "2020-04-15T07:35:27Z", "message": "Review updates"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4967, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}