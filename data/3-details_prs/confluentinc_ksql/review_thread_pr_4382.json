{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MTc0NTEx", "number": 4382, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTo0NDoxMFrODbADLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTo0Njo0OFrODbAGag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjM4OTU3OnYy", "diffSide": "RIGHT", "path": "ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTo0NDoxMFrOFiPMIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTo0NDoxMFrOFiPMIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0NDc3MQ==", "bodyText": "FYI, can be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  assertThat(server.getQueryIDs().contains(new PushQueryId(queryId)), is(true));\n          \n          \n            \n                  assertThat(server.getQueryIDs(), hasItem(new PushQueryId(queryId)));\n          \n      \n    \n    \n  \n\nhasItem() asserts that a collection has at least one item that matches that supplied.\nThere is also hasItems() which will look for multiple.\nThen there is contains and containsInAnyOrder: both of these look to assert the exact content of the collection, i.e. all entries in the collection must be matched.", "url": "https://github.com/confluentinc/ksql/pull/4382#discussion_r371444771", "createdAt": "2020-01-27T19:44:10Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java", "diffHunk": "@@ -108,61 +110,66 @@ public void tearDown() {\n   @Test\n   public void shouldExecutePullQuery() throws Exception {\n \n+    // Given\n     JsonObject requestBody = new JsonObject().put(\"sql\", \"select * from foo\").put(\"push\", false);\n     JsonObject properties = new JsonObject().put(\"prop1\", \"val1\").put(\"prop2\", 23);\n     requestBody.put(\"properties\", properties);\n \n+    // When\n     HttpResponse<Buffer> response = sendRequest(\"/query-stream\", requestBody.toBuffer());\n \n-    assertEquals(200, response.statusCode());\n-    assertEquals(\"OK\", response.statusMessage());\n-    assertEquals(\"select * from foo\", testEndpoints.getLastSql());\n-    assertFalse(testEndpoints.getLastPush());\n-    assertEquals(properties, testEndpoints.getLastProperties());\n-\n+    // Then\n+    assertThat(response.statusCode(), is(200));\n+    assertThat(response.statusMessage(), is(\"OK\"));\n+    assertThat(testEndpoints.getLastSql(), is(\"select * from foo\"));\n+    assertThat(testEndpoints.getLastPush(), is(false));\n+    assertThat(testEndpoints.getLastProperties(), is(properties));\n     QueryResponse queryResponse = new QueryResponse(response.bodyAsString());\n-    assertEquals(DEFAULT_COLUMN_NAMES, queryResponse.responseObject.getJsonArray(\"columnNames\"));\n-    assertEquals(DEFAULT_COLUMN_TYPES, queryResponse.responseObject.getJsonArray(\"columnTypes\"));\n-    assertEquals(DEFAULT_ROWS, queryResponse.rows);\n-    assertEquals(0, server.getQueryIDs().size());\n+    assertThat(queryResponse.responseObject.getJsonArray(\"columnNames\"), is(DEFAULT_COLUMN_NAMES));\n+    assertThat(queryResponse.responseObject.getJsonArray(\"columnTypes\"), is(DEFAULT_COLUMN_TYPES));\n+    assertThat(queryResponse.rows, is(DEFAULT_ROWS));\n+    assertThat(server.getQueryIDs(), hasSize(0));\n     String queryId = queryResponse.responseObject.getString(\"queryId\");\n-    assertNotNull(queryId);\n-    assertFalse(server.getQueryIDs().contains(new PushQueryId(queryId)));\n+    assertThat(queryId, is(notNullValue()));\n+    assertThat(server.getQueryIDs().contains(new PushQueryId(queryId)), is(false));\n     Integer rowCount = queryResponse.responseObject.getInteger(\"rowCount\");\n-    assertNotNull(rowCount);\n-    assertEquals(DEFAULT_ROWS.size(), rowCount.intValue());\n+    assertThat(rowCount, is(notNullValue()));\n+    assertThat(rowCount, is(DEFAULT_ROWS.size()));\n   }\n \n   @Test\n   public void shouldExecutePushQuery() throws Exception {\n \n+    // When\n     QueryResponse queryResponse = executePushQueryAndWaitForRows(DEFAULT_PUSH_QUERY_REQUEST_BODY);\n \n-    assertEquals(\"select * from foo\", testEndpoints.getLastSql());\n-    assertTrue(testEndpoints.getLastPush());\n-    assertEquals(DEFAULT_PUSH_QUERY_REQUEST_PROPERTIES, testEndpoints.getLastProperties());\n-\n-    assertEquals(DEFAULT_COLUMN_NAMES, queryResponse.responseObject.getJsonArray(\"columnNames\"));\n-    assertEquals(DEFAULT_COLUMN_TYPES, queryResponse.responseObject.getJsonArray(\"columnTypes\"));\n-    assertEquals(DEFAULT_ROWS, queryResponse.rows);\n-    assertEquals(1, server.getQueryIDs().size());\n-\n+    // Then\n+    assertThat(testEndpoints.getLastSql(), is(\"select * from foo\"));\n+    assertThat(testEndpoints.getLastPush(), is(true));\n+    assertThat(testEndpoints.getLastProperties(), is(DEFAULT_PUSH_QUERY_REQUEST_PROPERTIES));\n+    assertThat(queryResponse.responseObject.getJsonArray(\"columnNames\"), is(DEFAULT_COLUMN_NAMES));\n+    assertThat(queryResponse.responseObject.getJsonArray(\"columnTypes\"), is(DEFAULT_COLUMN_TYPES));\n+    assertThat(queryResponse.rows, is(DEFAULT_ROWS));\n+    assertThat(server.getQueryIDs(), hasSize(1));\n     String queryId = queryResponse.responseObject.getString(\"queryId\");\n-    assertNotNull(queryId);\n-    assertTrue(server.getQueryIDs().contains(new PushQueryId(queryId)));\n-    assertNull(queryResponse.responseObject.getInteger(\"rowCount\"));\n+    assertThat(queryId, is(notNullValue()));\n+    assertThat(server.getQueryIDs().contains(new PushQueryId(queryId)), is(true));\n+    assertThat(queryResponse.responseObject.getInteger(\"rowCount\"), is(nullValue()));\n   }\n \n   @Test\n   public void shouldExecuteMultiplePushQueries() throws Exception {\n \n     int numQueries = 10;\n     for (int i = 0; i < numQueries; i++) {\n+      // When\n       QueryResponse queryResponse = executePushQueryAndWaitForRows(DEFAULT_PUSH_QUERY_REQUEST_BODY);\n-      assertEquals(i + 1, server.getQueryIDs().size());\n+\n+      // Then\n+      assertThat(server.getQueryIDs(), hasSize(i + 1));\n       String queryId = queryResponse.responseObject.getString(\"queryId\");\n-      assertNotNull(queryId);\n-      assertTrue(server.getQueryIDs().contains(new PushQueryId(queryId)));\n+      assertThat(queryId, is(notNullValue()));\n+      assertThat(server.getQueryIDs().contains(new PushQueryId(queryId)), is(true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a67efde51c9421c70b7b43aebea326a1e6acf70"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjM5MzY3OnYy", "diffSide": "RIGHT", "path": "ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTo0NTozMFrOFiPOxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTo0NTozMFrOFiPOxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0NTQ0Ng==", "bodyText": "FYI, can be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(server.getQueryIDs().contains(new PushQueryId(queryId)), is(false));\n          \n          \n            \n                assertThat(server.getQueryIDs(), not(hasItem(new PushQueryId(queryId))));\n          \n      \n    \n    \n  \n\nUses not() to invert the matcher.", "url": "https://github.com/confluentinc/ksql/pull/4382#discussion_r371445446", "createdAt": "2020-01-27T19:45:30Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java", "diffHunk": "@@ -319,70 +371,96 @@ public void shouldCloseQuery() throws Exception {\n         .sendJsonObject(DEFAULT_PUSH_QUERY_REQUEST_BODY, responseFuture);\n \n     // Wait for all rows in the response to arrive\n-    assertTrue(waitUntil(() -> {\n-      Buffer buff = writeStream.getBody();\n+    assertThatEventually(() -> {\n       try {\n+        Buffer buff = writeStream.getBody();\n         QueryResponse queryResponse = new QueryResponse(buff.toString());\n-        return queryResponse.rows.size() == DEFAULT_ROWS.size();\n+        return queryResponse.rows.size();\n       } catch (Throwable t) {\n-        return false;\n+        return Integer.MAX_VALUE;\n       }\n-    }));\n+    }, is(DEFAULT_ROWS.size()));\n \n     // The response shouldn't have ended yet\n-    assertFalse(writeStream.isEnded());\n+    assertThat(writeStream.isEnded(), is(false));\n \n     // Assert the query is still live on the server\n     QueryResponse queryResponse = new QueryResponse(writeStream.getBody().toString());\n     String queryId = queryResponse.responseObject.getString(\"queryId\");\n-    assertTrue(server.getQueryIDs().contains(new PushQueryId(queryId)));\n-    assertEquals(1, server.getQueryIDs().size());\n-    assertEquals(1, testEndpoints.getQueryPublishers().size());\n+    assertThat(server.getQueryIDs().contains(new PushQueryId(queryId)), is(true));\n+    assertThat(server.getQueryIDs(), hasSize(1));\n+    assertThat(testEndpoints.getQueryPublishers(), hasSize(1));\n \n     // Now send another request to close the query\n     JsonObject closeQueryRequestBody = new JsonObject().put(\"queryId\", queryId);\n     HttpResponse<Buffer> closeQueryResponse = sendRequest(client, \"/close-query\",\n         closeQueryRequestBody.toBuffer());\n-    assertEquals(200, closeQueryResponse.statusCode());\n+    assertThat(closeQueryResponse.statusCode(), is(200));\n \n     // Assert the query no longer exists on the server\n-    assertFalse(server.getQueryIDs().contains(new PushQueryId(queryId)));\n-    assertEquals(0, server.getQueryIDs().size());\n-    assertEquals(1, testEndpoints.getQueryPublishers().size());\n-    assertFalse(testEndpoints.getQueryPublishers().iterator().next().hasSubscriber());\n+    assertThat(server.getQueryIDs().contains(new PushQueryId(queryId)), is(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a67efde51c9421c70b7b43aebea326a1e6acf70"}, "originalPosition": 358}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjM5NjYzOnYy", "diffSide": "RIGHT", "path": "ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTo0NjoyOVrOFiPQpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTo0NjoyOVrOFiPQpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0NTkyNQ==", "bodyText": "Did you mean to remove the waitUtil row above? It looks to test the same as this new line...", "url": "https://github.com/confluentinc/ksql/pull/4382#discussion_r371445925", "createdAt": "2020-01-27T19:46:29Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java", "diffHunk": "@@ -391,52 +469,57 @@ public void shouldHandleUnknownQueryIDInCloseQuery() throws Exception {\n   @Test\n   public void shouldInsertWithNoAcksStream() throws Exception {\n \n+    // Given\n     JsonObject params = new JsonObject().put(\"target\", \"test-stream\").put(\"requiresAcks\", false);\n-\n     List<JsonObject> rows = generateInsertRows();\n     Buffer requestBody = Buffer.buffer();\n     requestBody.appendBuffer(params.toBuffer()).appendString(\"\\n\");\n     for (JsonObject row : rows) {\n       requestBody.appendBuffer(row.toBuffer()).appendString(\"\\n\");\n     }\n \n+    //When\n     HttpResponse<Buffer> response = sendRequest(\"/inserts-stream\", requestBody);\n-    assertEquals(200, response.statusCode());\n-    assertEquals(\"OK\", response.statusMessage());\n \n+    // Then\n+    assertThat(response.statusCode(), is(200));\n+    assertThat(response.statusMessage(), is(\"OK\"));\n     waitUntil(() -> rows.equals(testEndpoints.getInsertsSubscriber().getRowsInserted()));\n-    assertTrue(testEndpoints.getInsertsSubscriber().isCompleted());\n-    assertEquals(\"test-stream\", testEndpoints.getLastTarget());\n+    assertThatEventually(() -> testEndpoints.getInsertsSubscriber().getRowsInserted(), is(rows));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a67efde51c9421c70b7b43aebea326a1e6acf70"}, "originalPosition": 457}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjM5Nzg2OnYy", "diffSide": "RIGHT", "path": "ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTo0Njo0OFrOFiPRYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTo0Njo0OFrOFiPRYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0NjExNQ==", "bodyText": "Thank you :D", "url": "https://github.com/confluentinc/ksql/pull/4382#discussion_r371446115", "createdAt": "2020-01-27T19:46:48Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/test/java/io/confluent/ksql/api/ApiTest.java", "diffHunk": "@@ -467,32 +552,38 @@ public void shouldStreamInserts() throws Exception {\n \n     // Wait for the response to complete\n     HttpResponse<Void> response = fut.get();\n-    assertEquals(200, response.statusCode());\n-    assertEquals(\"OK\", response.statusMessage());\n+\n+    // Then\n+\n+    assertThat(response.statusCode(), is(200));\n+    assertThat(response.statusMessage(), is(\"OK\"));\n \n     // Verify we got acks for all our inserts\n     InsertsResponse insertsResponse = new InsertsResponse(writeStream.getBody().toString());\n-    assertEquals(rows.size(), insertsResponse.acks.size());\n+    assertThat(insertsResponse.acks, hasSize(rows.size()));\n \n     // Make sure all inserts made it to the server\n-    assertEquals(rows, testEndpoints.getInsertsSubscriber().getRowsInserted());\n-    assertTrue(testEndpoints.getInsertsSubscriber().isCompleted());\n+    assertThat(testEndpoints.getInsertsSubscriber().getRowsInserted(), is(rows));\n+    assertThat(testEndpoints.getInsertsSubscriber().isCompleted(), is(true));\n \n     // Ensure we received at least some of the response before all the request body was written\n     // Yay HTTP2!\n-    assertTrue(readStream.getLastSentTime() > writeStream.getFirstReceivedTime());\n+    assertThat(readStream.getLastSentTime() > writeStream.getFirstReceivedTime(), is(true));\n   }\n \n   @Test\n   public void shouldHandleMissingTargetInInserts() throws Exception {\n \n+    // Given", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a67efde51c9421c70b7b43aebea326a1e6acf70"}, "originalPosition": 544}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2291, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}