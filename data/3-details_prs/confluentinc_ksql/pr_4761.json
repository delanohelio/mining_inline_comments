{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NDk4MDQw", "number": 4761, "title": "docs: add new topic on processing guarantees (KSQL-3721)", "bodyText": "", "createdAt": "2020-03-12T22:07:44Z", "url": "https://github.com/confluentinc/ksql/pull/4761", "merged": true, "mergeCommit": {"oid": "8711006a3e04cc83e62fcb636b779cfac178b782"}, "closed": true, "closedAt": "2020-03-13T00:08:06Z", "author": {"login": "JimGalasyn"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNDIIvAH2gAyMzg3NDk4MDQwOjlhNDEwZTEwZjQwMzdkNTA5MTQyNjkyMDk3NTEzNjZmZTMyZDFkOGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNEkg2AH2gAyMzg3NDk4MDQwOmJhNTc4M2YwMzE3YTliMGM2NWM3ZTJiNWUxMDczYWRlNjA0YWI3ZmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9a410e10f4037d50914269209751366fe32d1d8e", "author": {"user": {"login": "JimGalasyn", "name": "Jim Galasyn"}}, "url": "https://github.com/confluentinc/ksql/commit/9a410e10f4037d50914269209751366fe32d1d8e", "committedDate": "2020-03-12T22:05:42Z", "message": "docs: add new topic on processing guarantees (KSQL-3721)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTM2MjI3", "url": "https://github.com/confluentinc/ksql/pull/4761#pullrequestreview-373936227", "createdAt": "2020-03-12T22:12:36Z", "commit": {"oid": "9a410e10f4037d50914269209751366fe32d1d8e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTUyMTI5", "url": "https://github.com/confluentinc/ksql/pull/4761#pullrequestreview-373952129", "createdAt": "2020-03-12T22:55:07Z", "commit": {"oid": "9a410e10f4037d50914269209751366fe32d1d8e"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjo1NTowN1rOF1yl5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMjo1NToxMlrOF1ymBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk0Nzc1MQ==", "bodyText": "Was there an effort to remove references to CP from the community docs?", "url": "https://github.com/confluentinc/ksql/pull/4761#discussion_r391947751", "createdAt": "2020-03-12T22:55:07Z", "author": {"login": "vcrfxia"}, "path": "docs-md/concepts/processing-guarantees.md", "diffHunk": "@@ -1,11 +1,93 @@\n ---\r\n layout: page\r\n title: Processing Guarantees\r\n-tagline: Processing in ksqlDB\r\n-description: Learn about processing in ksqlDB\r\n-keywords: ksqldb, processing\r\n+tagline: Processing guarantees in ksqlDB\r\n+description: Learn about at-least-once, exactly-once semantics in ksqlDB\r\n+keywords: ksqldb, processing, eos, at-least-once, exactly-once\r\n ---\r\n \r\n-TODO: EOS, etc.\r\n+ksqlDB supports *at-least-once* and *exactly-once* processing guarantees.\r\n \r\n-Page last revised on: {{ git_revision_date }}\n\\ No newline at end of file\n+At-least-once semantics\r\n+-----------------------\r\n+\r\n+Records are never lost but may be redelivered. If your stream processing\r\n+application fails, no data records are lost and fail to be processed, but some\r\n+data records may be re-read and therefore re-processed. At-least-once semantics\r\n+is enabled by default in your ksqlDB configuration, with\r\n+`processing.guarantee=\"at_least_once\"`.\r\n+\r\n+Exactly-once semantics\r\n+----------------------\r\n+\r\n+Records are processed once. Even if a producer sends a duplicate record, it's\r\n+written to the broker exactly once.\r\n+\r\n+Exactly-once stream processing is the ability to execute a read-process-write\r\n+operation exactly one time. All of the processing happens exactly once,\r\n+including the processing and the materialized state created by the processing\r\n+job that is written back to {{ site.ak }}.\r\n+\r\n+To enable exactly-once semantics, set `processing.guarantee=\"exactly_once\"` in\r\n+your ksqlDB configuration.\r\n+\r\n+For more information, see\r\n+[Processing Guarantees](https://docs.confluent.io/current/streams/concepts.html#processing-guarantees).\r\n+\r\n+### Enable exactly-once semantics\r\n+\r\n+Exactly-once isn't enabled by default in ksqlDB, but you can enable it on a\r\n+query-by-query basis by passing the `processing.guarantee` configuration setting\r\n+to ksqlDB.\r\n+\r\n+How you pass the configuration setting to ksqlDB depends on how you\r\n+run ksqlDB Server and on how you send requests to start queries.\r\n+\r\n+#### ksqlDB CLI\r\n+\r\n+Use the SET command to enable exactly-once for the subsequent\r\n+query:\r\n+\r\n+```sql\r\n+SET 'processing.guarantee' = 'exactly_once';\r\n+```\r\n+\r\n+For more information, see\r\n+[Configure ksqlDB CLI](../operate-and-deploy/installation/cli-config.md).\r\n+\r\n+#### REST API\r\n+\r\n+Pass the config as a property along with the request:\r\n+\r\n+```http\r\n+POST /query HTTP/1.1\r\n+Accept: application/vnd.ksql.v1+json\r\n+Content-Type: application/vnd.ksql.v1+json\r\n+\r\n+{\r\n+\"ksql\": \"SELECT * FROM pageviews EMIT CHANGES;\",\r\n+\"streamsProperties\": {\r\n+    \"processing.guarantee\": \"exactly_once\"\r\n+}\r\n+}\r\n+```\r\n+\r\n+For more information, see\r\n+[Run a query and stream back the output](../developer-guide/ksqldb-rest-api/query-endpoint.md).\r\n+\r\n+#### Default for all queries and non-interactive (headless) mode\r\n+\r\n+To enable exactly-once by default for all queries, and for non-interactive\r\n+(headless) mode, set the configuration in the ksqlDB Server properties file,\r\n+which by default is located at\r\n+`${CONFLUENT_HOME}/etc/ksql/ksql-server.properties` in a {{ site.cp }}\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a410e10f4037d50914269209751366fe32d1d8e"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk0Nzc4MA==", "bodyText": "I realize this is just cut-and-paste but I found this confusing the first time I read it: \"producer\" here doesn't refer to the application producer (the initial producer before the stream processing takes place, the analogous producer to the \"end consumer\"), but rather only producers within KSQL / Streams apps.\nAs a more general comment along the same lines, I wonder if we should clarify somewhere that exactly-once only refers to the stream processing guarantees and needs to be used with care (end consumers and producers that are also exactly-once) in order to achieve a truly exactly-once system?", "url": "https://github.com/confluentinc/ksql/pull/4761#discussion_r391947780", "createdAt": "2020-03-12T22:55:12Z", "author": {"login": "vcrfxia"}, "path": "docs-md/concepts/processing-guarantees.md", "diffHunk": "@@ -1,11 +1,93 @@\n ---\r\n layout: page\r\n title: Processing Guarantees\r\n-tagline: Processing in ksqlDB\r\n-description: Learn about processing in ksqlDB\r\n-keywords: ksqldb, processing\r\n+tagline: Processing guarantees in ksqlDB\r\n+description: Learn about at-least-once, exactly-once semantics in ksqlDB\r\n+keywords: ksqldb, processing, eos, at-least-once, exactly-once\r\n ---\r\n \r\n-TODO: EOS, etc.\r\n+ksqlDB supports *at-least-once* and *exactly-once* processing guarantees.\r\n \r\n-Page last revised on: {{ git_revision_date }}\n\\ No newline at end of file\n+At-least-once semantics\r\n+-----------------------\r\n+\r\n+Records are never lost but may be redelivered. If your stream processing\r\n+application fails, no data records are lost and fail to be processed, but some\r\n+data records may be re-read and therefore re-processed. At-least-once semantics\r\n+is enabled by default in your ksqlDB configuration, with\r\n+`processing.guarantee=\"at_least_once\"`.\r\n+\r\n+Exactly-once semantics\r\n+----------------------\r\n+\r\n+Records are processed once. Even if a producer sends a duplicate record, it's\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a410e10f4037d50914269209751366fe32d1d8e"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba5783f0317a9b0c65c7e2b5e1073ade604ab7fa", "author": {"user": {"login": "JimGalasyn", "name": "Jim Galasyn"}}, "url": "https://github.com/confluentinc/ksql/commit/ba5783f0317a9b0c65c7e2b5e1073ade604ab7fa", "committedDate": "2020-03-12T23:46:36Z", "message": "docs: add example Docker env for EOS setting"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}