{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNjgwMDcz", "number": 6434, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjoxOToxOVrOEtsBqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjo1MzoxMFrOEts6MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MzQyNjk3OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/syntax-reference.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjoxOToxOVrOHhnyGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjoxOToxOVrOHhnyGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAxNjg1OQ==", "bodyText": "I think VARCHAR KEY should be removed here. Type and key specification are only for CT/CS statements. Also, single quotes instead of double quotes around 'fixed_key'", "url": "https://github.com/confluentinc/ksql/pull/6434#discussion_r505016859", "createdAt": "2020-10-14T22:19:19Z", "author": {"login": "mikebin"}, "path": "docs/developer-guide/syntax-reference.md", "diffHunk": "@@ -99,6 +99,31 @@ You can create your own aggregation logic by implementing a User Defined\n Aggregation Function (UDAF). For more information, see\n [UDAFs](../concepts/functions.md#udafs).\n \n+Aggregations return results per partition. To get results across all partitions,\n+you can use PARTITION BY with a fixed key, for example:\n+\n+```sql\n+CREATE STREAM allplaycounts AS\n+  SELECT \"fixed_key\" VARCHAR KEY, COUNT(*) FROM", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d2ac03c0248e6cd74fdbfc7b4448098b65baa7e"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MzU0OTQzOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/syntax-reference.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjo0NzozNlrOHhpDlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjo0NzozNlrOHhpDlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAzNzcxOA==", "bodyText": "Instead of \"big bucket (partition)\", maybe just \"partition\"", "url": "https://github.com/confluentinc/ksql/pull/6434#discussion_r505037718", "createdAt": "2020-10-14T22:47:36Z", "author": {"login": "mikebin"}, "path": "docs/developer-guide/syntax-reference.md", "diffHunk": "@@ -99,6 +99,31 @@ You can create your own aggregation logic by implementing a User Defined\n Aggregation Function (UDAF). For more information, see\n [UDAFs](../concepts/functions.md#udafs).\n \n+Aggregations return results per partition. To get results across all partitions,\n+you can use PARTITION BY with a fixed key, for example:\n+\n+```sql\n+CREATE STREAM allplaycounts AS\n+  SELECT \"fixed_key\" VARCHAR KEY, COUNT(*) FROM\n+    playcountsstream PARTITION BY \"fixed_key\";\n+```\n+\n+Also, you can get results across all partitions as part of the aggregate query,\n+instead of requiring a separate step to partition by a fixed key. In the\n+following example, GROUP BY causes COUNT to aggregate over all records.\n+\n+```sql\n+SELECT 'totalCount', COUNT(*) FROM\n+  ksql_processing_log GROUP BY 'totalCount';\n+```\n+\n+Grouping by a single constant indicates that ksqlDB uses one big bucket", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d2ac03c0248e6cd74fdbfc7b4448098b65baa7e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MzU2MTI1OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/syntax-reference.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjo1MDoyNFrOHhpLmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjo1MDoyNFrOHhpLmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAzOTc2OA==", "bodyText": "Maybe this whole example with PARTITION BY is no longer needed? Instead, could say\n\nTo get results across all partitions, you can use GROUP BY with a fixed key\n\nand just show the group by example below. Probably best to get input from the ksqlDB team on whether that's reasonable or not.", "url": "https://github.com/confluentinc/ksql/pull/6434#discussion_r505039768", "createdAt": "2020-10-14T22:50:24Z", "author": {"login": "mikebin"}, "path": "docs/developer-guide/syntax-reference.md", "diffHunk": "@@ -99,6 +99,31 @@ You can create your own aggregation logic by implementing a User Defined\n Aggregation Function (UDAF). For more information, see\n [UDAFs](../concepts/functions.md#udafs).\n \n+Aggregations return results per partition. To get results across all partitions,\n+you can use PARTITION BY with a fixed key, for example:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d2ac03c0248e6cd74fdbfc7b4448098b65baa7e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MzU3MTY4OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/syntax-reference.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjo1MzoxMFrOHhpS0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjo1MzoxMFrOHhpS0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTA0MTYxNw==", "bodyText": "Maybe instead of\n\nWe recommend this approach even if you're using GROUP BY because otherwise ...\n\nIt could say:\n\nWe recommend this if you're grouping by a fixed key because otherwise ....", "url": "https://github.com/confluentinc/ksql/pull/6434#discussion_r505041617", "createdAt": "2020-10-14T22:53:10Z", "author": {"login": "mikebin"}, "path": "docs/developer-guide/syntax-reference.md", "diffHunk": "@@ -99,6 +99,31 @@ You can create your own aggregation logic by implementing a User Defined\n Aggregation Function (UDAF). For more information, see\n [UDAFs](../concepts/functions.md#udafs).\n \n+Aggregations return results per partition. To get results across all partitions,\n+you can use PARTITION BY with a fixed key, for example:\n+\n+```sql\n+CREATE STREAM allplaycounts AS\n+  SELECT \"fixed_key\" VARCHAR KEY, COUNT(*) FROM\n+    playcountsstream PARTITION BY \"fixed_key\";\n+```\n+\n+Also, you can get results across all partitions as part of the aggregate query,\n+instead of requiring a separate step to partition by a fixed key. In the\n+following example, GROUP BY causes COUNT to aggregate over all records.\n+\n+```sql\n+SELECT 'totalCount', COUNT(*) FROM\n+  ksql_processing_log GROUP BY 'totalCount';\n+```\n+\n+Grouping by a single constant indicates that ksqlDB uses one big bucket\n+(partition) containing all of the records for the aggregation. If you're\n+creating a persistent query, you can set the partition count of the sink\n+topic to 1 by using WITH(PARTITIONS=1). We recommend this approach even", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d2ac03c0248e6cd74fdbfc7b4448098b65baa7e"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2704, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}