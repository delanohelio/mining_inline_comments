{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNzA3NzU3", "number": 5703, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1Mzo0MVrOEJN5_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1Mzo0MVrOEJN5_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTAwNDc2OnYy", "diffSide": "RIGHT", "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/codegen/helpers/SearchedCaseFunctionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNzo1Mzo0MVrOGppuCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODoyMzoyN1rOGpqjtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyODMzMQ==", "bodyText": "I think you probably meant to keep the previous test and add one here?", "url": "https://github.com/confluentinc/ksql/pull/5703#discussion_r446328331", "createdAt": "2020-06-26T17:53:41Z", "author": {"login": "agavra"}, "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/codegen/helpers/SearchedCaseFunctionTest.java", "diffHunk": "@@ -185,20 +187,23 @@ public void shouldWorkForStructValues() {\n   public void shouldReturnDefaultIfNoMatch() {\n     // Given:\n     final List<SearchedCaseFunction.LazyWhenClause<Integer>> lazyWhenClauses = ImmutableList.of(\n-        SearchedCaseFunction.whenClause(() -> false, () -> 1),\n-        SearchedCaseFunction.whenClause(() -> false, () -> 2),\n-        SearchedCaseFunction.whenClause(() -> false, () -> 3),\n-        SearchedCaseFunction.whenClause(() -> false, () -> 4)\n+        SearchedCaseFunction.whenClause(() -> true, () -> null)\n     );\n \n     // When:\n     final Integer result = SearchedCaseFunction.searchedCaseFunction(\n         lazyWhenClauses,\n-        () -> 10\n+        () -> {\n+          throw new AssertionError(\"Should not be called\");\n+        }\n     );\n \n     // Then:\n-    assertThat(result, equalTo(10));\n+    assertThat(result, is(nullValue()));\n+  }\n+\n+  @Test\n+  public void shouldHandleNullReturnValues() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7f600c088375cc01b4bdad74b7e88c65f62c315"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM0MjA3MA==", "bodyText": "OOps", "url": "https://github.com/confluentinc/ksql/pull/5703#discussion_r446342070", "createdAt": "2020-06-26T18:23:27Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/codegen/helpers/SearchedCaseFunctionTest.java", "diffHunk": "@@ -185,20 +187,23 @@ public void shouldWorkForStructValues() {\n   public void shouldReturnDefaultIfNoMatch() {\n     // Given:\n     final List<SearchedCaseFunction.LazyWhenClause<Integer>> lazyWhenClauses = ImmutableList.of(\n-        SearchedCaseFunction.whenClause(() -> false, () -> 1),\n-        SearchedCaseFunction.whenClause(() -> false, () -> 2),\n-        SearchedCaseFunction.whenClause(() -> false, () -> 3),\n-        SearchedCaseFunction.whenClause(() -> false, () -> 4)\n+        SearchedCaseFunction.whenClause(() -> true, () -> null)\n     );\n \n     // When:\n     final Integer result = SearchedCaseFunction.searchedCaseFunction(\n         lazyWhenClauses,\n-        () -> 10\n+        () -> {\n+          throw new AssertionError(\"Should not be called\");\n+        }\n     );\n \n     // Then:\n-    assertThat(result, equalTo(10));\n+    assertThat(result, is(nullValue()));\n+  }\n+\n+  @Test\n+  public void shouldHandleNullReturnValues() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMyODMzMQ=="}, "originalCommit": {"oid": "f7f600c088375cc01b4bdad74b7e88c65f62c315"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3223, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}