{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIzNTk0NTM4", "number": 6642, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMToxMDowOFrOE7tlUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoyOTozNlrOE8UnNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDQ4Mjc1OnYy", "diffSide": "RIGHT", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/ExecutionKeyFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMToxMDowOFrOH3gzvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNToyOToxN1rOH4SljQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3MTI2Mg==", "bodyText": "For my own edification, what's the purpose of marking this EffectivelyImmutable? Is it just as a clue to the reader, or is it necessary since KStreamHolder is marked as Immutable?", "url": "https://github.com/confluentinc/ksql/pull/6642#discussion_r527971262", "createdAt": "2020-11-20T21:10:08Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/ExecutionKeyFactory.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License; you may not use this file\n+ * except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.plan;\n+\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+import io.confluent.ksql.serde.FormatInfo;\n+import io.confluent.ksql.serde.WindowInfo;\n+import io.confluent.ksql.testing.EffectivelyImmutable;\n+import java.util.Objects;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.streams.kstream.Windowed;\n+\n+/**\n+ * The {@code ExecutionKeyFactory} is in charge of creating the keys\n+ * and the Serdes for the keys of any particular execution step.\n+ *\n+ * @param <K> the type of the key, usually either {@code Struct}\n+ *            or {@code Windowed<Struct>}\n+ */\n+@EffectivelyImmutable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "156027493a902e576d65572d68c8ce69a8009c39"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc4NjgyOQ==", "bodyText": "The latter (also I just copied it over from KeySerdeFactory, GH couldn't keep track that it's actually the same file because I made so many changes", "url": "https://github.com/confluentinc/ksql/pull/6642#discussion_r528786829", "createdAt": "2020-11-23T15:29:17Z", "author": {"login": "agavra"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/ExecutionKeyFactory.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License; you may not use this file\n+ * except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.plan;\n+\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+import io.confluent.ksql.serde.FormatInfo;\n+import io.confluent.ksql.serde.WindowInfo;\n+import io.confluent.ksql.testing.EffectivelyImmutable;\n+import java.util.Objects;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.streams.kstream.Windowed;\n+\n+/**\n+ * The {@code ExecutionKeyFactory} is in charge of creating the keys\n+ * and the Serdes for the keys of any particular execution step.\n+ *\n+ * @param <K> the type of the key, usually either {@code Struct}\n+ *            or {@code Windowed<Struct>}\n+ */\n+@EffectivelyImmutable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3MTI2Mg=="}, "originalCommit": {"oid": "156027493a902e576d65572d68c8ce69a8009c39"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDQ4ODUxOnYy", "diffSide": "RIGHT", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/ExecutionKeyFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMToxMjoxN1rOH3g3Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMToxMjoxN1rOH3g3Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3MjE0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return a new key of type {@code K} given the struct conents of the key\n          \n          \n            \n               * @return a new key of type {@code K} given the struct contents of the new key and the old key being updated\n          \n      \n    \n    \n  \n\nWould it make more sense to rename this to something like updateKey? I was surprised to see the old key required in a method called constructKey, but maybe updateKey is even more confusing. getNewKey? constructNewKey?", "url": "https://github.com/confluentinc/ksql/pull/6642#discussion_r527972143", "createdAt": "2020-11-20T21:12:17Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/ExecutionKeyFactory.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License; you may not use this file\n+ * except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.plan;\n+\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+import io.confluent.ksql.serde.FormatInfo;\n+import io.confluent.ksql.serde.WindowInfo;\n+import io.confluent.ksql.testing.EffectivelyImmutable;\n+import java.util.Objects;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.streams.kstream.Windowed;\n+\n+/**\n+ * The {@code ExecutionKeyFactory} is in charge of creating the keys\n+ * and the Serdes for the keys of any particular execution step.\n+ *\n+ * @param <K> the type of the key, usually either {@code Struct}\n+ *            or {@code Windowed<Struct>}\n+ */\n+@EffectivelyImmutable\n+public interface ExecutionKeyFactory<K> {\n+\n+  Serde<K> buildKeySerde(\n+      FormatInfo format,\n+      PhysicalSchema physicalSchema,\n+      QueryContext queryContext\n+  );\n+\n+  /**\n+   * @return a new {@code ExecutionKeyFactory}\n+   */\n+  ExecutionKeyFactory<K> withQueryBuilder(KsqlQueryBuilder builder);\n+\n+  /**\n+   * @return a new key of type {@code K} given the struct conents of the key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "156027493a902e576d65572d68c8ce69a8009c39"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDQ4OTYwOnYy", "diffSide": "RIGHT", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/KStreamHolder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMToxMjo0MlrOH3g30g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODo0Nzo1OFrOH4a2Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3MjMwNg==", "bodyText": "Rename to getKeyFactory() or getExecutionKeyFactory()?", "url": "https://github.com/confluentinc/ksql/pull/6642#discussion_r527972306", "createdAt": "2020-11-20T21:12:42Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/KStreamHolder.java", "diffHunk": "@@ -25,21 +25,21 @@\n public final class KStreamHolder<K> {\n \n   private final KStream<K, GenericRow> stream;\n-  private final KeySerdeFactory<K> keySerdeFactory;\n+  private final ExecutionKeyFactory<K> executionKeyFactory;\n   private final LogicalSchema schema;\n \n   public KStreamHolder(\n       final KStream<K, GenericRow> stream,\n       final LogicalSchema schema,\n-      final KeySerdeFactory<K> keySerdeFactory\n+      final ExecutionKeyFactory<K> executionKeyFactory\n   ) {\n     this.stream = Objects.requireNonNull(stream, \"stream\");\n-    this.keySerdeFactory = Objects.requireNonNull(keySerdeFactory, \"keySerdeFactory\");\n+    this.executionKeyFactory = Objects.requireNonNull(executionKeyFactory, \"keySerdeFactory\");\n     this.schema = Objects.requireNonNull(schema, \"schema\");\n   }\n \n-  public KeySerdeFactory<K> getKeySerdeFactory() {\n-    return keySerdeFactory;\n+  public ExecutionKeyFactory<K> getKeySerdeFactory() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "156027493a902e576d65572d68c8ce69a8009c39"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg3NjY3NA==", "bodyText": "It doesn't look like changes were made even though this comment was resolved?", "url": "https://github.com/confluentinc/ksql/pull/6642#discussion_r528876674", "createdAt": "2020-11-23T17:29:25Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/KStreamHolder.java", "diffHunk": "@@ -25,21 +25,21 @@\n public final class KStreamHolder<K> {\n \n   private final KStream<K, GenericRow> stream;\n-  private final KeySerdeFactory<K> keySerdeFactory;\n+  private final ExecutionKeyFactory<K> executionKeyFactory;\n   private final LogicalSchema schema;\n \n   public KStreamHolder(\n       final KStream<K, GenericRow> stream,\n       final LogicalSchema schema,\n-      final KeySerdeFactory<K> keySerdeFactory\n+      final ExecutionKeyFactory<K> executionKeyFactory\n   ) {\n     this.stream = Objects.requireNonNull(stream, \"stream\");\n-    this.keySerdeFactory = Objects.requireNonNull(keySerdeFactory, \"keySerdeFactory\");\n+    this.executionKeyFactory = Objects.requireNonNull(executionKeyFactory, \"keySerdeFactory\");\n     this.schema = Objects.requireNonNull(schema, \"schema\");\n   }\n \n-  public KeySerdeFactory<K> getKeySerdeFactory() {\n-    return keySerdeFactory;\n+  public ExecutionKeyFactory<K> getKeySerdeFactory() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3MjMwNg=="}, "originalCommit": {"oid": "156027493a902e576d65572d68c8ce69a8009c39"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkyMjE1NQ==", "bodyText": "ah oops! I had made this change somewhere else and just assumed that was the place this was pointing at. I'll update it", "url": "https://github.com/confluentinc/ksql/pull/6642#discussion_r528922155", "createdAt": "2020-11-23T18:47:58Z", "author": {"login": "agavra"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/KStreamHolder.java", "diffHunk": "@@ -25,21 +25,21 @@\n public final class KStreamHolder<K> {\n \n   private final KStream<K, GenericRow> stream;\n-  private final KeySerdeFactory<K> keySerdeFactory;\n+  private final ExecutionKeyFactory<K> executionKeyFactory;\n   private final LogicalSchema schema;\n \n   public KStreamHolder(\n       final KStream<K, GenericRow> stream,\n       final LogicalSchema schema,\n-      final KeySerdeFactory<K> keySerdeFactory\n+      final ExecutionKeyFactory<K> executionKeyFactory\n   ) {\n     this.stream = Objects.requireNonNull(stream, \"stream\");\n-    this.keySerdeFactory = Objects.requireNonNull(keySerdeFactory, \"keySerdeFactory\");\n+    this.executionKeyFactory = Objects.requireNonNull(executionKeyFactory, \"keySerdeFactory\");\n     this.schema = Objects.requireNonNull(schema, \"schema\");\n   }\n \n-  public KeySerdeFactory<K> getKeySerdeFactory() {\n-    return keySerdeFactory;\n+  public ExecutionKeyFactory<K> getKeySerdeFactory() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzk3MjMwNg=="}, "originalCommit": {"oid": "156027493a902e576d65572d68c8ce69a8009c39"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjg2MTc2OnYy", "diffSide": "LEFT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/structured/SchemaKTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoyNTo0MlrOH4X7Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODo1MjoxN1rOH4a_yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg3NDMwNw==", "bodyText": "Out of curiosity, what's the thinking for removing this conditional? Even though it's currently the case that this block can only be entered if forceRepartition is true, that may not be the case in the future.\nIf you're going to remove this, you should be able to remove the UC_USELESS_CONDITION suppression at the top of the method as well.", "url": "https://github.com/confluentinc/ksql/pull/6642#discussion_r528874307", "createdAt": "2020-11-23T17:25:42Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/structured/SchemaKTable.java", "diffHunk": "@@ -175,12 +173,11 @@ public SchemaKTable(\n     if (keyFormat.isWindowed()) {\n       final String errorMsg = \"Implicit repartitioning of windowed sources is not supported. \"\n           + \"See https://github.com/confluentinc/ksql/issues/4385.\";\n-      final String additionalMsg = forceRepartition", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f39267b18df0c3bc7c4de9d94ff20458ce956a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkyNDYxOQ==", "bodyText": "I just blindly followed IntelliJ's recommendations. I'll change it back", "url": "https://github.com/confluentinc/ksql/pull/6642#discussion_r528924619", "createdAt": "2020-11-23T18:52:17Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/structured/SchemaKTable.java", "diffHunk": "@@ -175,12 +173,11 @@ public SchemaKTable(\n     if (keyFormat.isWindowed()) {\n       final String errorMsg = \"Implicit repartitioning of windowed sources is not supported. \"\n           + \"See https://github.com/confluentinc/ksql/issues/4385.\";\n-      final String additionalMsg = forceRepartition", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg3NDMwNw=="}, "originalCommit": {"oid": "d5f39267b18df0c3bc7c4de9d94ff20458ce956a"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjg3NjQzOnYy", "diffSide": "RIGHT", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/ExecutionKeyFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoyOToxOVrOH4YEVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoyOToxOVrOH4YEVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg3NjYzMQ==", "bodyText": "Hm, the word \"representation\" is confusing to me. I don't think I'd understand this comment without the context in this PR. This makes more sense to me:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * This method can construct a new key given the contents of the old key and the\n          \n          \n            \n               * desired Struct representation of the new key. This is helpful if we intended\n          \n          \n            \n               * This method can construct a new key given the old key and the\n          \n          \n            \n               * desired contents of the new key. This is helpful if we intended\n          \n      \n    \n    \n  \n\nbut I guess \"contents\" means different things to different people. The number of calls to this method are relatively few so it's probably fine if the comment isn't crystal clear.", "url": "https://github.com/confluentinc/ksql/pull/6642#discussion_r528876631", "createdAt": "2020-11-23T17:29:19Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/ExecutionKeyFactory.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License; you may not use this file\n+ * except in compliance with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.plan;\n+\n+import io.confluent.ksql.execution.builder.KsqlQueryBuilder;\n+import io.confluent.ksql.execution.context.QueryContext;\n+import io.confluent.ksql.schema.ksql.PhysicalSchema;\n+import io.confluent.ksql.serde.FormatInfo;\n+import io.confluent.ksql.serde.WindowInfo;\n+import io.confluent.ksql.testing.EffectivelyImmutable;\n+import java.util.Objects;\n+import org.apache.kafka.common.serialization.Serde;\n+import org.apache.kafka.connect.data.Struct;\n+import org.apache.kafka.streams.kstream.Windowed;\n+\n+/**\n+ * The {@code ExecutionKeyFactory} is in charge of creating the keys\n+ * and the Serdes for the keys of any particular execution step.\n+ *\n+ * @param <K> the type of the key, usually either {@code Struct}\n+ *            or {@code Windowed<Struct>}\n+ */\n+@EffectivelyImmutable\n+public interface ExecutionKeyFactory<K> {\n+\n+  Serde<K> buildKeySerde(\n+      FormatInfo format,\n+      PhysicalSchema physicalSchema,\n+      QueryContext queryContext\n+  );\n+\n+  /**\n+   * @return a new {@code ExecutionKeyFactory}\n+   */\n+  ExecutionKeyFactory<K> withQueryBuilder(KsqlQueryBuilder builder);\n+\n+  /**\n+   * This method can construct a new key given the contents of the old key and the\n+   * desired Struct representation of the new key. This is helpful if we intended", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f39267b18df0c3bc7c4de9d94ff20458ce956a"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjg3NjkyOnYy", "diffSide": "RIGHT", "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/PartitionByParamsFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoyOToyOFrOH4YErA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoyOToyOFrOH4YErA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg3NjcxNg==", "bodyText": "nit: spacing", "url": "https://github.com/confluentinc/ksql/pull/6642#discussion_r528876716", "createdAt": "2020-11-23T17:29:28Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/PartitionByParamsFactory.java", "diffHunk": "@@ -181,15 +183,15 @@ private static LogicalSchema buildSchema(\n \n     final KeyBuilder keyBuilder = StructKeyUtil.keyBuilder(resultSchema);\n \n-    return (k, v) -> {\n-      final Object newKey = evaluator.evaluate(k, v);\n-      final Struct structKey = keyBuilder.build(newKey, 0);\n+    return (oldK, row) -> {\n+      final Object newKey = evaluator.evaluate(oldK, row);\n+      final K key = executionKeyFactory.constructNewKey(oldK ,keyBuilder.build(newKey, 0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f39267b18df0c3bc7c4de9d94ff20458ce956a"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjg3NzExOnYy", "diffSide": "RIGHT", "path": "ksqldb-streams/src/test/java/io/confluent/ksql/execution/streams/PartitionByParamsFactoryTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoyOTozM1rOH4YEyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODo1NjoxMlrOH4bIUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg3Njc0NQ==", "bodyText": "How come we create a new ExecutionKeyFactory implementation here rather than using ExecutionKeyFactory.unwindowed() with a mock query builder?", "url": "https://github.com/confluentinc/ksql/pull/6642#discussion_r528876745", "createdAt": "2020-11-23T17:29:33Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-streams/src/test/java/io/confluent/ksql/execution/streams/PartitionByParamsFactoryTest.java", "diffHunk": "@@ -396,9 +400,35 @@ public void shouldNotChangeValueIfPartitioningByNull() {\n     assertThat(result.value, is(GenericRow.fromList(originals)));\n   }\n \n-  private PartitionByParams partitionBy(final Expression expression) {\n+  private PartitionByParams<Struct> partitionBy(final Expression expression) {\n+    final ExecutionKeyFactory<Struct> factory = new ExecutionKeyFactory<Struct>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f39267b18df0c3bc7c4de9d94ff20458ce956a"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkyNjgwMA==", "bodyText": "No good reason, I've changed it to do this.", "url": "https://github.com/confluentinc/ksql/pull/6642#discussion_r528926800", "createdAt": "2020-11-23T18:56:12Z", "author": {"login": "agavra"}, "path": "ksqldb-streams/src/test/java/io/confluent/ksql/execution/streams/PartitionByParamsFactoryTest.java", "diffHunk": "@@ -396,9 +400,35 @@ public void shouldNotChangeValueIfPartitioningByNull() {\n     assertThat(result.value, is(GenericRow.fromList(originals)));\n   }\n \n-  private PartitionByParams partitionBy(final Expression expression) {\n+  private PartitionByParams<Struct> partitionBy(final Expression expression) {\n+    final ExecutionKeyFactory<Struct> factory = new ExecutionKeyFactory<Struct>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg3Njc0NQ=="}, "originalCommit": {"oid": "d5f39267b18df0c3bc7c4de9d94ff20458ce956a"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjg3NzMzOnYy", "diffSide": "RIGHT", "path": "ksqldb-streams/src/test/java/io/confluent/ksql/execution/streams/StreamSelectKeyBuilderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNzoyOTozNlrOH4YE6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODo1Njo0M1rOH4bJfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg3Njc3OA==", "bodyText": "nit: spacing", "url": "https://github.com/confluentinc/ksql/pull/6642#discussion_r528876778", "createdAt": "2020-11-23T17:29:36Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-streams/src/test/java/io/confluent/ksql/execution/streams/StreamSelectKeyBuilderTest.java", "diffHunk": "@@ -148,7 +157,7 @@ public void shouldPassCorrectArgsToParamBuilder() {\n     // Then:\n     verify(paramBuilder).build(\n         SOURCE_SCHEMA,\n-        KEY,\n+        stream.getKeySerdeFactory(), KEY,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f39267b18df0c3bc7c4de9d94ff20458ce956a"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODkyNzEwMg==", "bodyText": ":) auto-refactoring - thanks for catching", "url": "https://github.com/confluentinc/ksql/pull/6642#discussion_r528927102", "createdAt": "2020-11-23T18:56:43Z", "author": {"login": "agavra"}, "path": "ksqldb-streams/src/test/java/io/confluent/ksql/execution/streams/StreamSelectKeyBuilderTest.java", "diffHunk": "@@ -148,7 +157,7 @@ public void shouldPassCorrectArgsToParamBuilder() {\n     // Then:\n     verify(paramBuilder).build(\n         SOURCE_SCHEMA,\n-        KEY,\n+        stream.getKeySerdeFactory(), KEY,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg3Njc3OA=="}, "originalCommit": {"oid": "d5f39267b18df0c3bc7c4de9d94ff20458ce956a"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2432, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}