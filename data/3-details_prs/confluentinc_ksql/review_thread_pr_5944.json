{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNDMxNzYz", "number": 5944, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDo1Njo0MlrOEVc11g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDozNToyNlrOEVkVZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTI4MDg2OnYy", "diffSide": "RIGHT", "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/FieldInfo.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDo1Njo0MlrOG8Nhgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDo1Njo0MlrOG8Nhgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc4OTMxNA==", "bodyText": "The server endpoint actually returns nested field type information in a structured way, so describeSource could easily return nested field types, i.e., show the fields and types within arrays, maps, and structs, rather than simply showing \"ARRAY\", \"MAP\", and \"STRUCT\". However, by sharing this ColumnType interface that's also used by in the streamQuery() and executeQuery() methods, we've coupled the two together -- we either have to:\n\nExpose nested type information for describeSource() and also streamQuery()/executeQuery(), the latter of which is not as easy to do since the server endpoint used there returns type information as a string rather than in structured format.\nDo not expose nested type information for either describeSource() or streamQuery()/executeQuery(), as is currently the case in this PR\nDo not share the ColumnType interface between these different client methods.\n\nI don't have a sense of how important it is for users to receive nested type information from describeSource(). Unless we think it's important, my vote is option (2) for now.", "url": "https://github.com/confluentinc/ksql/pull/5944#discussion_r465789314", "createdAt": "2020-08-05T14:56:42Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/FieldInfo.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.client;\n+\n+/**\n+ * Represents a field/column of a ksqlDB stream/table.\n+ */\n+public interface FieldInfo {\n+\n+  /**\n+   * @return name of this field\n+   */\n+  String name();\n+\n+  /**\n+   * @return type of this field\n+   */\n+  ColumnType type();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc4d02e6d14d8ab03fa3d8618b53b03e563633bf"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTI4OTQ4OnYy", "diffSide": "RIGHT", "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/SourceDescription.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDo1ODozOVrOG8NnFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDo1ODozOVrOG8NnFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc5MDc0MA==", "bodyText": "These method names (name(), type(), etc.) are a departure from the method names in other Java client interfaces (e.g., https://github.com/confluentinc/ksql/blob/master/ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/QueryInfo.java) in that they aren't prefixed with get (getName(), getType(), etc.). I think it's cleaner to not have the get but if we value consistency I can rename these.", "url": "https://github.com/confluentinc/ksql/pull/5944#discussion_r465790740", "createdAt": "2020-08-05T14:58:39Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/SourceDescription.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.client;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+/**\n+ * Metadata for a ksqlDB stream or table.\n+ */\n+public interface SourceDescription {\n+\n+  /**\n+   * @return name of this stream/table\n+   */\n+  String name();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc4d02e6d14d8ab03fa3d8618b53b03e563633bf"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDQ3Mjk3OnYy", "diffSide": "RIGHT", "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/FieldInfoImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDoyNDowM1rOG8ZTsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzo0NTozMFrOHBzofw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4MjM4Ng==", "bodyText": "Add the 2nd parameter here. i.e. requireNonNul(name, \"name\"). It helps troubleshoot the NPE errors. I had a problem in the past when I was getting NPE and only a line number appeared. Having the NPE print the String helps easily identify the error instead of a line number.", "url": "https://github.com/confluentinc/ksql/pull/5944#discussion_r465982386", "createdAt": "2020-08-05T20:24:03Z", "author": {"login": "spena"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/FieldInfoImpl.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.client.impl;\n+\n+import io.confluent.ksql.api.client.ColumnType;\n+import io.confluent.ksql.api.client.FieldInfo;\n+import java.util.Objects;\n+\n+public final class FieldInfoImpl implements FieldInfo {\n+\n+  private final String name;\n+  private final ColumnType type;\n+  private final boolean isKey;\n+\n+  FieldInfoImpl(final String name, final ColumnType type, final boolean isKey) {\n+    this.name = Objects.requireNonNull(name);\n+    this.type = Objects.requireNonNull(type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "759245ee419360e0cf1f81469d183289219f799c"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1NjU3NQ==", "bodyText": "Done.", "url": "https://github.com/confluentinc/ksql/pull/5944#discussion_r471656575", "createdAt": "2020-08-17T17:45:30Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/FieldInfoImpl.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.client.impl;\n+\n+import io.confluent.ksql.api.client.ColumnType;\n+import io.confluent.ksql.api.client.FieldInfo;\n+import java.util.Objects;\n+\n+public final class FieldInfoImpl implements FieldInfo {\n+\n+  private final String name;\n+  private final ColumnType type;\n+  private final boolean isKey;\n+\n+  FieldInfoImpl(final String name, final ColumnType type, final boolean isKey) {\n+    this.name = Objects.requireNonNull(name);\n+    this.type = Objects.requireNonNull(type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4MjM4Ng=="}, "originalCommit": {"oid": "759245ee419360e0cf1f81469d183289219f799c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDUwODUyOnYy", "diffSide": "RIGHT", "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/SourceDescriptionImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDozNToyNlrOG8ZqNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzo0NTozM1rOHBzonA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4ODE0OA==", "bodyText": "Same comment about using the 2nd parameter to display the variable name on NPE for better troubleshooting. Another reason? say keyFormat is null, it will throw a NPE with line 58. Turns out you saw that exception in ksqlDB 0.12, but master has one new line here, so you'll have to look at 0.12 code to know the right null variable. With the 2nd parameter string will be quickly to find.", "url": "https://github.com/confluentinc/ksql/pull/5944#discussion_r465988148", "createdAt": "2020-08-05T20:35:26Z", "author": {"login": "spena"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/SourceDescriptionImpl.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.client.impl;\n+\n+import io.confluent.ksql.api.client.FieldInfo;\n+import io.confluent.ksql.api.client.QueryInfo;\n+import io.confluent.ksql.api.client.SourceDescription;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+public final class SourceDescriptionImpl implements SourceDescription {\n+\n+  private final String name;\n+  private final String type;\n+  private final List<FieldInfo> fields;\n+  private final String topic;\n+  private final String keyFormat;\n+  private final String valueFormat;\n+  private final List<QueryInfo> readQueries;\n+  private final List<QueryInfo> writeQueries;\n+  private final Optional<String> timestampColumn;\n+  private final Optional<String> windowType;\n+  private final String sqlStatement;\n+\n+  // CHECKSTYLE_RULES.OFF: ParameterNumberCheck\n+  SourceDescriptionImpl(\n+      final String name,\n+      final String type,\n+      final List<FieldInfo> fields,\n+      final String topic,\n+      final String keyFormat,\n+      final String valueFormat,\n+      final List<QueryInfo> readQueries,\n+      final List<QueryInfo> writeQueries,\n+      final Optional<String> timestampColumn,\n+      final Optional<String> windowType,\n+      final String sqlStatement\n+  ) {\n+    // CHECKSTYLE_RULES.ON: ParameterNumberCheck\n+    this.name = Objects.requireNonNull(name);\n+    this.type = Objects.requireNonNull(type);\n+    this.fields = Objects.requireNonNull(fields);\n+    this.topic = Objects.requireNonNull(topic);\n+    this.keyFormat = Objects.requireNonNull(keyFormat);\n+    this.valueFormat = Objects.requireNonNull(valueFormat);\n+    this.readQueries = Objects.requireNonNull(readQueries);\n+    this.writeQueries = Objects.requireNonNull(writeQueries);\n+    this.timestampColumn = Objects.requireNonNull(timestampColumn);\n+    this.windowType = Objects.requireNonNull(windowType);\n+    this.sqlStatement = Objects.requireNonNull(sqlStatement);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "759245ee419360e0cf1f81469d183289219f799c"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1NjYwNA==", "bodyText": "Done.", "url": "https://github.com/confluentinc/ksql/pull/5944#discussion_r471656604", "createdAt": "2020-08-17T17:45:33Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/SourceDescriptionImpl.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.client.impl;\n+\n+import io.confluent.ksql.api.client.FieldInfo;\n+import io.confluent.ksql.api.client.QueryInfo;\n+import io.confluent.ksql.api.client.SourceDescription;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+public final class SourceDescriptionImpl implements SourceDescription {\n+\n+  private final String name;\n+  private final String type;\n+  private final List<FieldInfo> fields;\n+  private final String topic;\n+  private final String keyFormat;\n+  private final String valueFormat;\n+  private final List<QueryInfo> readQueries;\n+  private final List<QueryInfo> writeQueries;\n+  private final Optional<String> timestampColumn;\n+  private final Optional<String> windowType;\n+  private final String sqlStatement;\n+\n+  // CHECKSTYLE_RULES.OFF: ParameterNumberCheck\n+  SourceDescriptionImpl(\n+      final String name,\n+      final String type,\n+      final List<FieldInfo> fields,\n+      final String topic,\n+      final String keyFormat,\n+      final String valueFormat,\n+      final List<QueryInfo> readQueries,\n+      final List<QueryInfo> writeQueries,\n+      final Optional<String> timestampColumn,\n+      final Optional<String> windowType,\n+      final String sqlStatement\n+  ) {\n+    // CHECKSTYLE_RULES.ON: ParameterNumberCheck\n+    this.name = Objects.requireNonNull(name);\n+    this.type = Objects.requireNonNull(type);\n+    this.fields = Objects.requireNonNull(fields);\n+    this.topic = Objects.requireNonNull(topic);\n+    this.keyFormat = Objects.requireNonNull(keyFormat);\n+    this.valueFormat = Objects.requireNonNull(valueFormat);\n+    this.readQueries = Objects.requireNonNull(readQueries);\n+    this.writeQueries = Objects.requireNonNull(writeQueries);\n+    this.timestampColumn = Objects.requireNonNull(timestampColumn);\n+    this.windowType = Objects.requireNonNull(windowType);\n+    this.sqlStatement = Objects.requireNonNull(sqlStatement);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk4ODE0OA=="}, "originalCommit": {"oid": "759245ee419360e0cf1f81469d183289219f799c"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3029, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}