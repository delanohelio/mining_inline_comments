{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMDQ4NTc0", "number": 5941, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMzowMTowM1rOEVMnNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMzowNDo1MFrOEVMqUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjYyMTk4OnYy", "diffSide": "RIGHT", "path": "docs/reference2/sql-syntax/data-types/compound.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMzowMTowM1rOG70WjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMzowNTo1NFrOG70c4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3NjkwOA==", "bodyText": "I had to find the code to prove to myself this is true: https://github.com/confluentinc/ksql/blob/master/ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/helpers/ArrayAccess.java.", "url": "https://github.com/confluentinc/ksql/pull/5941#discussion_r465376908", "createdAt": "2020-08-04T23:01:03Z", "author": {"login": "JimGalasyn"}, "path": "docs/reference2/sql-syntax/data-types/compound.md", "diffHunk": "@@ -21,8 +21,8 @@ ksqlDB supports fields that are arrays of another type. All of the elements\n in the array must be of the same type. The element type can be any valid\n SQL type.\n \n-The elements of an array are zero-indexed and can be accessed by using\n-the `[]` operator passing in the index. For example, `SOME_ARRAY[0]`\n+The elements of an array are one-indexed and can be accessed by using", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ff66601ee88fb049b8b400e0b3c8e5abff09fe3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3ODUzMQ==", "bodyText": "Yes, 1 is right. I copied in some older docs here.", "url": "https://github.com/confluentinc/ksql/pull/5941#discussion_r465378531", "createdAt": "2020-08-04T23:05:54Z", "author": {"login": "MichaelDrogalis"}, "path": "docs/reference2/sql-syntax/data-types/compound.md", "diffHunk": "@@ -21,8 +21,8 @@ ksqlDB supports fields that are arrays of another type. All of the elements\n in the array must be of the same type. The element type can be any valid\n SQL type.\n \n-The elements of an array are zero-indexed and can be accessed by using\n-the `[]` operator passing in the index. For example, `SOME_ARRAY[0]`\n+The elements of an array are one-indexed and can be accessed by using", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3NjkwOA=="}, "originalCommit": {"oid": "2ff66601ee88fb049b8b400e0b3c8e5abff09fe3"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjYyODg2OnYy", "diffSide": "RIGHT", "path": "docs/reference2/sql-syntax/data-types/numeric.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMzowNDoyMVrOG70apQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxOTo1Mzo0OFrOG8YVTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3Nzk1Nw==", "bodyText": "Can we move these to the top table to keep them in one place?", "url": "https://github.com/confluentinc/ksql/pull/5941#discussion_r465377957", "createdAt": "2020-08-04T23:04:21Z", "author": {"login": "MichaelDrogalis"}, "path": "docs/reference2/sql-syntax/data-types/numeric.md", "diffHunk": "@@ -30,6 +28,18 @@ The `double` data type is an inexact, variable-precision numeric type. The term\n \"inexact\" means an approximate value is stored. Storing values outside of its\n bounds of capacity will result in an error.\n \n+## Valid ranges\n+\n+Numeric data types have the same valid minimum and maximum values as their\n+corresponding Java types. The following table shows valid ranges for the\n+integer and floating-point types. \n+\n+| type     | minimum value | maximum value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ff66601ee88fb049b8b400e0b3c8e5abff09fe3"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk2NTU4Mg==", "bodyText": "I moved this into the main table and tried different arrangements, but still it renders a bit awkwardly:\n.\nColumns get a bit cramped and line breaks happen in weird places. Probably okay for now, but we might want to revisit.", "url": "https://github.com/confluentinc/ksql/pull/5941#discussion_r465965582", "createdAt": "2020-08-05T19:52:06Z", "author": {"login": "JimGalasyn"}, "path": "docs/reference2/sql-syntax/data-types/numeric.md", "diffHunk": "@@ -30,6 +28,18 @@ The `double` data type is an inexact, variable-precision numeric type. The term\n \"inexact\" means an approximate value is stored. Storing values outside of its\n bounds of capacity will result in an error.\n \n+## Valid ranges\n+\n+Numeric data types have the same valid minimum and maximum values as their\n+corresponding Java types. The following table shows valid ranges for the\n+integer and floating-point types. \n+\n+| type     | minimum value | maximum value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3Nzk1Nw=="}, "originalCommit": {"oid": "2ff66601ee88fb049b8b400e0b3c8e5abff09fe3"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk2NjQxNQ==", "bodyText": "Np, we can figure out column widths before final merge.", "url": "https://github.com/confluentinc/ksql/pull/5941#discussion_r465966415", "createdAt": "2020-08-05T19:53:48Z", "author": {"login": "MichaelDrogalis"}, "path": "docs/reference2/sql-syntax/data-types/numeric.md", "diffHunk": "@@ -30,6 +28,18 @@ The `double` data type is an inexact, variable-precision numeric type. The term\n \"inexact\" means an approximate value is stored. Storing values outside of its\n bounds of capacity will result in an error.\n \n+## Valid ranges\n+\n+Numeric data types have the same valid minimum and maximum values as their\n+corresponding Java types. The following table shows valid ranges for the\n+integer and floating-point types. \n+\n+| type     | minimum value | maximum value", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3Nzk1Nw=="}, "originalCommit": {"oid": "2ff66601ee88fb049b8b400e0b3c8e5abff09fe3"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjYyOTkyOnYy", "diffSide": "RIGHT", "path": "docs/reference2/sql-syntax/data-types/numeric.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMzowNDo1MFrOG70bVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToxOTowMlrOG8Og4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3ODEzNQ==", "bodyText": "I don't believe bigint has a min/max range. It's only bounded by resources.", "url": "https://github.com/confluentinc/ksql/pull/5941#discussion_r465378135", "createdAt": "2020-08-04T23:04:50Z", "author": {"login": "MichaelDrogalis"}, "path": "docs/reference2/sql-syntax/data-types/numeric.md", "diffHunk": "@@ -30,6 +28,18 @@ The `double` data type is an inexact, variable-precision numeric type. The term\n \"inexact\" means an approximate value is stored. Storing values outside of its\n bounds of capacity will result in an error.\n \n+## Valid ranges\n+\n+Numeric data types have the same valid minimum and maximum values as their\n+corresponding Java types. The following table shows valid ranges for the\n+integer and floating-point types. \n+\n+| type     | minimum value | maximum value\n+|----------|---------------|--------------\n+| `int`    | [Integer.MIN_VALUE](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Integer.html#MIN_VALUE) = -2<sup>31</sup> | [Integer.MAX_VALUE](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Integer.html#MAX_VALUE) = 2<sup>31</sup>-1\n+| `bigint` | -2<sup>Integer.MAX_VALUE</sup> (exclusive) | 2<sup>Integer.MAX_VALUE</sup> (exclusive)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ff66601ee88fb049b8b400e0b3c8e5abff09fe3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM5MzU2OA==", "bodyText": "it maps to a Java Long internally - a signed 64-bit integer. So almost unlimited, has a lot of digits!", "url": "https://github.com/confluentinc/ksql/pull/5941#discussion_r465393568", "createdAt": "2020-08-04T23:54:56Z", "author": {"login": "blueedgenick"}, "path": "docs/reference2/sql-syntax/data-types/numeric.md", "diffHunk": "@@ -30,6 +28,18 @@ The `double` data type is an inexact, variable-precision numeric type. The term\n \"inexact\" means an approximate value is stored. Storing values outside of its\n bounds of capacity will result in an error.\n \n+## Valid ranges\n+\n+Numeric data types have the same valid minimum and maximum values as their\n+corresponding Java types. The following table shows valid ranges for the\n+integer and floating-point types. \n+\n+| type     | minimum value | maximum value\n+|----------|---------------|--------------\n+| `int`    | [Integer.MIN_VALUE](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Integer.html#MIN_VALUE) = -2<sup>31</sup> | [Integer.MAX_VALUE](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Integer.html#MAX_VALUE) = 2<sup>31</sup>-1\n+| `bigint` | -2<sup>Integer.MAX_VALUE</sup> (exclusive) | 2<sup>Integer.MAX_VALUE</sup> (exclusive)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3ODEzNQ=="}, "originalCommit": {"oid": "2ff66601ee88fb049b8b400e0b3c8e5abff09fe3"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwNTUzNw==", "bodyText": "Oh wow, today I learned. I thought we used java.math.BigInt under the hood. Looks like you're right:\nksql> insert into s1 (x) values (9223372036854775807);\nksql> select * from s1 emit changes;\n+---------------------------------------------------------------------------------------------------------------------------+\n|X                                                                                                                          |\n+---------------------------------------------------------------------------------------------------------------------------+\n|9223372036854775807                                                                                                        |\n^CQuery terminated\nksql> insert into s1 (x) values (9223372036854775808);\nFailed to prepare statement: line 1:29: Invalid numeric literal: 9223372036854775808\n\nThanks Nick!", "url": "https://github.com/confluentinc/ksql/pull/5941#discussion_r465805537", "createdAt": "2020-08-05T15:19:02Z", "author": {"login": "MichaelDrogalis"}, "path": "docs/reference2/sql-syntax/data-types/numeric.md", "diffHunk": "@@ -30,6 +28,18 @@ The `double` data type is an inexact, variable-precision numeric type. The term\n \"inexact\" means an approximate value is stored. Storing values outside of its\n bounds of capacity will result in an error.\n \n+## Valid ranges\n+\n+Numeric data types have the same valid minimum and maximum values as their\n+corresponding Java types. The following table shows valid ranges for the\n+integer and floating-point types. \n+\n+| type     | minimum value | maximum value\n+|----------|---------------|--------------\n+| `int`    | [Integer.MIN_VALUE](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Integer.html#MIN_VALUE) = -2<sup>31</sup> | [Integer.MAX_VALUE](https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Integer.html#MAX_VALUE) = 2<sup>31</sup>-1\n+| `bigint` | -2<sup>Integer.MAX_VALUE</sup> (exclusive) | 2<sup>Integer.MAX_VALUE</sup> (exclusive)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM3ODEzNQ=="}, "originalCommit": {"oid": "2ff66601ee88fb049b8b400e0b3c8e5abff09fe3"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3026, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}