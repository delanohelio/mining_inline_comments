{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1OTIwMDEx", "number": 5112, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1NzoyNFrOD0l8Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1OToyOVrOD0l_Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDc0MTQzOnYy", "diffSide": "LEFT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/RestApiTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1NzoyNFrOGJmaJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODoyNzoyOVrOGJqB5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxOTY1Mg==", "bodyText": "Why are these tests being removed?", "url": "https://github.com/confluentinc/ksql/pull/5112#discussion_r412719652", "createdAt": "2020-04-22T06:57:24Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/RestApiTest.java", "diffHunk": "@@ -470,68 +488,6 @@ public void shouldFailToExecuteQueryUsingRestWithHttp2() throws Exception {\n     }\n   }\n \n-  @Test\n-  public void shouldExecuteStatementWithConnectionCloseHeaderHTTP1_1() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "826e8301ef1688d766a8c7172505107b93f19183"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc3ODk4MQ==", "bodyText": "Because now there are no proxied http requests, and this tested proxy behaviour", "url": "https://github.com/confluentinc/ksql/pull/5112#discussion_r412778981", "createdAt": "2020-04-22T08:27:29Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/RestApiTest.java", "diffHunk": "@@ -470,68 +488,6 @@ public void shouldFailToExecuteQueryUsingRestWithHttp2() throws Exception {\n     }\n   }\n \n-  @Test\n-  public void shouldExecuteStatementWithConnectionCloseHeaderHTTP1_1() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxOTY1Mg=="}, "originalCommit": {"oid": "826e8301ef1688d766a8c7172505107b93f19183"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDc0MzMyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/KsqlServerEndpoints.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1Nzo1NVrOGJmbTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODozMDoxMVrOGJqJ7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxOTk1MA==", "bodyText": "nit: rename to executeServerClusterId()", "url": "https://github.com/confluentinc/ksql/pull/5112#discussion_r412719950", "createdAt": "2020-04-22T06:57:55Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/KsqlServerEndpoints.java", "diffHunk": "@@ -219,6 +223,20 @@ public KsqlServerEndpoints(\n         .completedFuture(EndpointResponse.create(healthCheckResource.checkHealth()));\n   }\n \n+  @Override\n+  public CompletableFuture<EndpointResponse> executeServerMetadata(\n+      final ApiSecurityContext apiSecurityContext) {\n+    return CompletableFuture\n+        .completedFuture(EndpointResponse.create(serverMetadataResource.getServerMetadata()));\n+  }\n+\n+  @Override\n+  public CompletableFuture<EndpointResponse> executeServerMetadataClusterId(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "826e8301ef1688d766a8c7172505107b93f19183"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc4MTAzOQ==", "bodyText": "I kind of like the current naming as it's clear it's from the metadata", "url": "https://github.com/confluentinc/ksql/pull/5112#discussion_r412781039", "createdAt": "2020-04-22T08:30:11Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/KsqlServerEndpoints.java", "diffHunk": "@@ -219,6 +223,20 @@ public KsqlServerEndpoints(\n         .completedFuture(EndpointResponse.create(healthCheckResource.checkHealth()));\n   }\n \n+  @Override\n+  public CompletableFuture<EndpointResponse> executeServerMetadata(\n+      final ApiSecurityContext apiSecurityContext) {\n+    return CompletableFuture\n+        .completedFuture(EndpointResponse.create(serverMetadataResource.getServerMetadata()));\n+  }\n+\n+  @Override\n+  public CompletableFuture<EndpointResponse> executeServerMetadataClusterId(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxOTk1MA=="}, "originalCommit": {"oid": "826e8301ef1688d766a8c7172505107b93f19183"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDc0OTc5OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/RestIntegrationTestUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1OToyOVrOGJme7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1OToyOVrOGJme7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyMDg3OA==", "bodyText": "nit: let's keep naming consistent throughout? If we go with the suggestion of executeServerClusterId() in the previous comment, then should be makeServerClusterIdRequest(), and RestApiTest, KsqlRestClient, and KsqlTarget should also be updated accordingly.", "url": "https://github.com/confluentinc/ksql/pull/5112#discussion_r412720878", "createdAt": "2020-04-22T06:59:29Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/integration/RestIntegrationTestUtil.java", "diffHunk": "@@ -123,6 +125,28 @@ static CommandStatuses makeStatusesRequest(final TestKsqlRestApp restApp) {\n     }\n   }\n \n+  static ServerMetadata makeServerMetadataRequest(final TestKsqlRestApp restApp) {\n+    try (final KsqlRestClient restClient = restApp.buildKsqlClient(Optional.empty())) {\n+\n+      final RestResponse<ServerMetadata> res = restClient.getServerMetadata();\n+\n+      throwOnError(res);\n+\n+      return res.getResponse();\n+    }\n+  }\n+\n+  static ServerClusterId makeServerMetadataIdRequest(final TestKsqlRestApp restApp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "826e8301ef1688d766a8c7172505107b93f19183"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3589, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}