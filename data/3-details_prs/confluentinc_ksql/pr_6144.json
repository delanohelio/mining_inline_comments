{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4MTg3MDcw", "number": 6144, "title": "test: stabilise TlsTest", "bodyText": "Description\nfixes an issue where the TlsTest was failing because the file watcher wasn't detecting the change of the Tls cert from valid to invalid.  This was because of a limitation of JDK 8, which has only second resolution for FileTime, meaning the WatchService can miss updated made to files that existed before the watch was registered, if the update happened after the watch was started and the updated didn't change the last modified time, i.e. the last modified time both before and after the update was in the second second.\nThe fix is to insert a sleep to ensure at least one whole second has elapsed.\nIn production code, this one second window of bad behaviour is highly unlikely to be hit, and there's no real way to solve it, except upgrading to JDK 9.\nTesting done\nUsual\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-09-02T21:40:35Z", "url": "https://github.com/confluentinc/ksql/pull/6144", "merged": true, "mergeCommit": {"oid": "bc2a2e25e58250a40210b8a6d84c28a9f04c0710"}, "closed": true, "closedAt": "2020-09-10T19:36:41Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFDCjxAH2gAyNDc4MTg3MDcwOjQyNWJlNGY4MDAyMmEzNmZmNDEwMjdkZGZmYTdmZDdmMjcwOGM4ZTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHl-M6AH2gAyNDc4MTg3MDcwOmVhYWNjZjc5ZDFlNDE4NGFlNGEzMzIyNTBlN2RkYzc0NjNiNDg0NWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "425be4f80022a36ff41027ddffa7fd7f2708c8e2", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/425be4f80022a36ff41027ddffa7fd7f2708c8e2", "committedDate": "2020-09-02T21:39:22Z", "message": "test: stabilise TlsTest\n\nfixes an issue where the TlsTest was failing because the file watcher wasn't detecting the change of the Tls cert from valid to invalid.  This was because of a limitation of JDK 8, which has only second resolution for `FileTime`, meaning the `WatchService` can miss updated made to files that existed before the watch was registered, if the update happened after the watch was started and the updated didn't change the last modified time, i.e. the last modified time both before and after the update was in the second second.\n\nThe fix is to insert a sleep to ensure at least one whole second has elapsed.\n\nIn production code, this one second window of bad behaviour is highly unlikely to be hit, and there's no real way to solve it, except upgrading to JDK 9."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzk1NTQ1", "url": "https://github.com/confluentinc/ksql/pull/6144#pullrequestreview-481395545", "createdAt": "2020-09-03T00:13:55Z", "commit": {"oid": "425be4f80022a36ff41027ddffa7fd7f2708c8e2"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMDoxMzo1NVrOHMQRMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwMDoxNToyNlrOHMQTQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYxMTUwNw==", "bodyText": "why did we change this to swallow interrupted exceptions? seems like an atni-pattern", "url": "https://github.com/confluentinc/ksql/pull/6144#discussion_r482611507", "createdAt": "2020-09-03T00:13:55Z", "author": {"login": "agavra"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/FileWatcher.java", "diffHunk": "@@ -45,45 +46,45 @@\n   private volatile boolean shutdown;\n   private final WatchService watchService;\n   private final Path file;\n+  private final Path dir;\n   private final Callback callback;\n+  private final WatchKey key;\n \n   @SuppressFBWarnings(\n       value = \"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\",\n       justification = \"Null check on file.getParent() is present\"\n   )\n   public FileWatcher(final Path file, final Callback callback) throws IOException {\n     this.file = Objects.requireNonNull(file);\n-    Objects.requireNonNull(file.getParent(), \"Watch location must have parent\");\n+    this.dir = Objects.requireNonNull(file.getParent(), \"Watch location must have parent\");\n     this.watchService = FileSystems.getDefault().newWatchService();\n+    this.callback = Objects.requireNonNull(callback);\n+\n     // Listen to both CREATE and MODIFY to reload, which handles delete then create.\n-    file.getParent().register(watchService,\n+    this.key = dir.register(watchService,\n         StandardWatchEventKinds.ENTRY_CREATE,\n         StandardWatchEventKinds.ENTRY_MODIFY);\n-    this.callback = Objects.requireNonNull(callback);\n   }\n \n   /**\n    * Closes the file watcher\n    */\n   public void shutdown() {\n+    log.info(\"Stopping file watcher from watching for changes: \" + file);\n     shutdown = true;\n   }\n \n   @Override\n   public void run() {\n     log.info(\"Starting file watcher to watch for changes: \" + file);\n     try {\n-      while (!shutdown) {\n+      while (!shutdown && key.isValid()) {\n         try {\n           handleNextWatchNotification();\n-        } catch (InterruptedException e) {\n-          throw e;\n         } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "425be4f80022a36ff41027ddffa7fd7f2708c8e2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYxMjAzNQ==", "bodyText": "should we backoff or something here? I feel like polling every second is going to make this thread take up way more resources that it needs to (how often do certs change? monthly?)\nI'm also not entirely sure why this poll is necessary (why not just use take)?", "url": "https://github.com/confluentinc/ksql/pull/6144#discussion_r482612035", "createdAt": "2020-09-03T00:15:26Z", "author": {"login": "agavra"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/FileWatcher.java", "diffHunk": "@@ -95,23 +96,23 @@ public void run() {\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  @SuppressFBWarnings(\n-      value = \"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\",\n-      justification = \"Null check on file.getParent() is present above\"\n-  )\n   private void handleNextWatchNotification() throws InterruptedException {\n-    // wait for key to be signalled\n-    final WatchKey key = watchService.take();\n-    log.info(\"Watch Key notified\");\n+    final WatchKey key = watchService.poll(1, TimeUnit.SECONDS);\n+    if (key == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "425be4f80022a36ff41027ddffa7fd7f2708c8e2"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxOTMwMjg0", "url": "https://github.com/confluentinc/ksql/pull/6144#pullrequestreview-481930284", "createdAt": "2020-09-03T15:01:18Z", "commit": {"oid": "425be4f80022a36ff41027ddffa7fd7f2708c8e2"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTowMToxOVrOHMq11w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTowMTo1MlrOHMq3hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0Njg3MQ==", "bodyText": "I've seen it take a number of seconds for the server to restart with the new cert after it's loaded. Even if the test fails, we should wait for the new cert to be loaded, which is why there's an assertThatEventually here, otherwise the next test that runs will likely fail.", "url": "https://github.com/confluentinc/ksql/pull/6144#discussion_r483046871", "createdAt": "2020-09-03T15:01:19Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/TlsTest.java", "diffHunk": "@@ -117,27 +122,47 @@ public void shouldReloadCert() throws Exception {\n           TimeUnit.SECONDS.toMillis(1),\n           TimeUnit.SECONDS.toMillis(1)\n       );\n+    } catch (final Throwable e) {\n+      failed = true;\n+      throw e;\n     } finally {\n       // restore cert regardless of failure above so as to not affect other tests\n       // When: load valid store\n-      SERVER_KEY_STORE.loadValidServerKeyStore();\n-\n-      assertThatEventually(\n-          \"Should successfully execute query with valid key store\",\n-          () -> {\n-            // re-create client since server port changes on restart\n-            this.client = createClient();\n-\n-            try {\n-              return sendRequest(\"/query-stream\", requestBody.toBuffer()).statusCode();\n-            } catch (Exception e) {\n-              return 0;\n-            }\n-          },\n-          is(200),\n-          TimeUnit.SECONDS.toMillis(1),\n-          TimeUnit.SECONDS.toMillis(1)\n-      );\n+      SERVER_KEY_STORE.writeValidServerKeyStore();\n+\n+      if (!failed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "425be4f80022a36ff41027ddffa7fd7f2708c8e2"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0NzA5MA==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void willStopIfDirectoryDeleted() throws Exception {\n          \n          \n            \n              public void shouldStopIfDirectoryDeleted() throws Exception {\n          \n      \n    \n    \n  \n\nSame for the test below.", "url": "https://github.com/confluentinc/ksql/pull/6144#discussion_r483047090", "createdAt": "2020-09-03T15:01:35Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/server/FileWatcherTest.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.test.util.AssertEventually.assertThatEventually;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.timeout;\n+import static org.mockito.Mockito.verify;\n+\n+import io.confluent.ksql.api.server.FileWatcher.Callback;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardOpenOption;\n+import java.nio.file.attribute.FileTime;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class FileWatcherTest {\n+\n+  @ClassRule\n+  public static final TemporaryFolder TMP = new TemporaryFolder();\n+\n+  @Mock\n+  private Callback callback;\n+  public Path filePath;\n+  private FileWatcher watcher;\n+  private byte[] someBytes;\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    filePath = TMP.newFolder().toPath().resolve(UUID.randomUUID().toString());\n+    someBytes = \"data\".getBytes(UTF_8);\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    watcher.shutdown();\n+  }\n+\n+  @Test\n+  public void shouldDetectFileCreated() throws Exception {\n+    // Given:\n+    watcher = new FileWatcher(filePath, callback);\n+    watcher.start();\n+\n+    // When:\n+    Files.write(filePath, someBytes, StandardOpenOption.CREATE_NEW);\n+\n+    // Then:\n+    verify(callback, timeout(TimeUnit.MINUTES.toMillis(1))).run();\n+  }\n+\n+  @Test\n+  public void shouldDetectFileUpdated() throws Exception {\n+    // Given:\n+    Files.write(filePath, someBytes, StandardOpenOption.CREATE_NEW);\n+\n+    waitForLastModifiedTick();\n+\n+    watcher = new FileWatcher(filePath, callback);\n+    watcher.start();\n+\n+    // When:\n+    Files.write(filePath, someBytes);\n+\n+    // Then:\n+    verify(callback, timeout(TimeUnit.MINUTES.toMillis(1))).run();\n+  }\n+\n+  @Test\n+  public void shouldShutdownAsync() throws Exception {\n+    watcher = new FileWatcher(filePath, callback);\n+    watcher.start();\n+\n+    // When:\n+    watcher.shutdown();\n+\n+    // Then:\n+    assertThatEventually(watcher::isAlive, is(false));\n+  }\n+\n+  @Test\n+  public void willStopIfDirectoryDeleted() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "425be4f80022a36ff41027ddffa7fd7f2708c8e2"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0NzMwMQ==", "bodyText": "+1 I'm confused why this change was made.", "url": "https://github.com/confluentinc/ksql/pull/6144#discussion_r483047301", "createdAt": "2020-09-03T15:01:52Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/FileWatcher.java", "diffHunk": "@@ -95,23 +96,23 @@ public void run() {\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  @SuppressFBWarnings(\n-      value = \"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\",\n-      justification = \"Null check on file.getParent() is present above\"\n-  )\n   private void handleNextWatchNotification() throws InterruptedException {\n-    // wait for key to be signalled\n-    final WatchKey key = watchService.take();\n-    log.info(\"Watch Key notified\");\n+    final WatchKey key = watchService.poll(1, TimeUnit.SECONDS);\n+    if (key == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjYxMjAzNQ=="}, "originalCommit": {"oid": "425be4f80022a36ff41027ddffa7fd7f2708c8e2"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ecd7de537bc107ebad71a8a80b7cc9e838458ca", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/8ecd7de537bc107ebad71a8a80b7cc9e838458ca", "committedDate": "2020-09-09T15:37:11Z", "message": "chore: requested changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaaccf79d1e4184ae4a332250e7ddc7463b4845c", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/eaaccf79d1e4184ae4a332250e7ddc7463b4845c", "committedDate": "2020-09-10T19:29:08Z", "message": "test: remove flaky test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4637, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}