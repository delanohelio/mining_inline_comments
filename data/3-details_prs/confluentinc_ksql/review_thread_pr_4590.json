{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MDYyMjcy", "number": 4590, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOTo1OToxMFrODhM7vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDowNToxNlrODhNDHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTQxNTAzOnYy", "diffSide": "RIGHT", "path": "ksql-api/src/test/java/io/confluent/ksql/api/perf/BasePerfRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOTo1OToxMFrOFr1nKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOTo1OToxMFrOFr1nKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxMTQ2NQ==", "bodyText": "nit: private? There's a protected setter method...", "url": "https://github.com/confluentinc/ksql/pull/4590#discussion_r381511465", "createdAt": "2020-02-19T19:59:10Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/test/java/io/confluent/ksql/api/perf/BasePerfRunner.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.perf;\n+\n+import io.confluent.ksql.api.server.ApiServerConfig;\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.api.spi.Endpoints;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpVersion;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * A simple tool for measuring performance of our API.\n+ * <p>\n+ * Implement the actual test in a subclass by overriding the abstract methods.\n+ * <p>\n+ * This tool is a simple rough and ready tool that does not pretend to be a fully fledged\n+ * performance testing tool. It's really useful for quickly running perf tests in your IDE to get a\n+ * rough idea of performance and do a first pass of performance tuning parameters - e.g. reactive\n+ * streams buffer sizes.\n+ */\n+public abstract class BasePerfRunner {\n+\n+  private Endpoints endpoints;\n+  private final AtomicInteger counter = new AtomicInteger();\n+  private long totalTime;\n+  private int totalCount;\n+  private int numWarmupRuns;\n+  private int numRuns;\n+  private long runMs;\n+\n+  protected Vertx vertx;\n+  protected WebClient client;\n+  protected Server server;\n+\n+  protected volatile Throwable throwable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "873117cf2fdbd956bbcbf3b024c21b7dfe612b6d"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTQzMzA5OnYy", "diffSide": "RIGHT", "path": "ksql-api/src/test/java/io/confluent/ksql/api/perf/InsertsStreamRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDowNTowMVrOFr1ySg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDowNTowMVrOFr1ySg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxNDMxNA==", "bodyText": "Why the sleep with a magic number of ms?  Such sleeps in tests are a code smell and often result in intermittent failures.", "url": "https://github.com/confluentinc/ksql/pull/4590#discussion_r381514314", "createdAt": "2020-02-19T20:05:01Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/test/java/io/confluent/ksql/api/perf/InsertsStreamRunner.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.perf;\n+\n+import io.confluent.ksql.api.server.BaseSubscriber;\n+import io.confluent.ksql.api.server.BufferedPublisher;\n+import io.confluent.ksql.api.server.InsertResult;\n+import io.confluent.ksql.api.server.InsertsStreamSubscriber;\n+import io.confluent.ksql.api.spi.Endpoints;\n+import io.confluent.ksql.api.spi.QueryPublisher;\n+import io.vertx.codegen.annotations.Nullable;\n+import io.vertx.core.Context;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.WorkerExecutor;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.core.parsetools.RecordParser;\n+import io.vertx.core.streams.ReadStream;\n+import io.vertx.ext.web.codec.BodyCodec;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+public class InsertsStreamRunner extends BasePerfRunner {\n+\n+  public static void main(String[] args) {\n+    new InsertsStreamRunner().go();\n+  }\n+\n+  private SendStream sendStream;\n+\n+  @Override\n+  public void configure() {\n+    setNumWarmupRuns(5).setNumRuns(5).setRunMs(10000).setEndpoints(new InsertsStreamEndpoints());\n+  }\n+\n+  @Override\n+  public void run(long ms) throws Exception {\n+\n+    RecordParser parser = RecordParser.newDelimited(\"\\n\").handler(row -> {\n+      count();\n+    });\n+\n+    sendStream = new SendStream(vertx);\n+\n+    client.post(8089, \"localhost\", \"/inserts-stream\")\n+        .as(BodyCodec.pipe(new RunnerUtils.ReceiveStream(parser)))\n+        .sendStream(sendStream, ar -> {\n+        });\n+\n+    Thread.sleep(ms);\n+\n+  }\n+\n+  @Override\n+  protected void endRun() throws Exception {\n+    sendStream.pause();\n+\n+    Thread.sleep(500);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "873117cf2fdbd956bbcbf3b024c21b7dfe612b6d"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTQzMzg4OnYy", "diffSide": "RIGHT", "path": "ksql-api/src/test/java/io/confluent/ksql/api/perf/PullQueryRunner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDowNToxNlrOFr1ywA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDowNToxNlrOFr1ywA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxNDQzMg==", "bodyText": "As above, why the sleep with a magic number of ms?  Such sleeps in tests are a code smell and often result in intermittent failures.", "url": "https://github.com/confluentinc/ksql/pull/4590#discussion_r381514432", "createdAt": "2020-02-19T20:05:16Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/test/java/io/confluent/ksql/api/perf/PullQueryRunner.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.perf;\n+\n+import static io.confluent.ksql.api.perf.RunnerUtils.DEFAULT_COLUMN_NAMES;\n+import static io.confluent.ksql.api.perf.RunnerUtils.DEFAULT_COLUMN_TYPES;\n+import static io.confluent.ksql.api.perf.RunnerUtils.DEFAULT_ROW;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.api.impl.VertxCompletableFuture;\n+import io.confluent.ksql.api.server.BufferedPublisher;\n+import io.confluent.ksql.api.server.InsertResult;\n+import io.confluent.ksql.api.server.InsertsStreamSubscriber;\n+import io.confluent.ksql.api.spi.Endpoints;\n+import io.confluent.ksql.api.spi.QueryPublisher;\n+import io.vertx.core.Context;\n+import io.vertx.core.WorkerExecutor;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Semaphore;\n+import org.reactivestreams.Subscriber;\n+\n+public class PullQueryRunner extends BasePerfRunner {\n+\n+  public static void main(String[] args) {\n+    new PullQueryRunner().go();\n+  }\n+\n+  private static final String DEFAULT_PULL_QUERY = \"select * from foo where rowkey=123;\";\n+  private static final JsonObject DEFAULT_PULL_QUERY_REQUEST_BODY = new JsonObject()\n+      .put(\"sql\", DEFAULT_PULL_QUERY)\n+      .put(\"properties\", new JsonObject());\n+  private static final List<GenericRow> DEFAULT_ROWS = generateResults();\n+  private static final int MAX_CONCURRENT_REQUESTS = 100;\n+\n+  private PullQueryEndpoints pullQueryEndpoints;\n+\n+  @Override\n+  protected void configure() {\n+    this.pullQueryEndpoints = new PullQueryEndpoints();\n+    setNumWarmupRuns(5).setNumRuns(5).setRunMs(10000).setEndpoints(pullQueryEndpoints);\n+  }\n+\n+  @Override\n+  protected void run(long runMs) throws Exception {\n+    Semaphore sem = new Semaphore(MAX_CONCURRENT_REQUESTS);\n+\n+    long start = System.currentTimeMillis();\n+\n+    do {\n+\n+      sem.acquire();\n+\n+      VertxCompletableFuture<HttpResponse<Buffer>> vcf = new VertxCompletableFuture<>();\n+\n+      client.post(8089, \"localhost\", \"/query-stream\")\n+          .sendJsonObject(DEFAULT_PULL_QUERY_REQUEST_BODY, vcf);\n+\n+      vcf.thenAccept(resp -> {\n+        count();\n+        sem.release();\n+      });\n+\n+    } while (System.currentTimeMillis() - start < runMs);\n+  }\n+\n+  @Override\n+  protected void endRun() throws Exception {\n+    pullQueryEndpoints.closePublishers();\n+\n+    Thread.sleep(500);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "873117cf2fdbd956bbcbf3b024c21b7dfe612b6d"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2190, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}