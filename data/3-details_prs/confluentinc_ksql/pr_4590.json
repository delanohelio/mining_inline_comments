{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MDYyMjcy", "number": 4590, "title": "feat: Simple perf tool for new API", "bodyText": "Description\nImplements #4279\nThis is a stacked PR so please just review commits from \"perf runner\" and later\nThis PR introduces a simple perf tool for rough perf testing of our new API.\nIt's a simple tool that does not pretend to be perfect or a general purpose performance tool, but it's really useful for quickly running some tests in your IDE to get a rough idea of the overhead of the new API machinery. This can be used as first pass for tuning the server.\nThere's a base class called PerfRunner where all the magic happens. Then you subclass this for your particular test.\nThe PR also contains some changes to various buffer sizes and the like, tuned by running this perf tool.\nTesting done\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-02-19T09:41:26Z", "url": "https://github.com/confluentinc/ksql/pull/4590", "merged": true, "mergeCommit": {"oid": "ee7ca8ac95a22a045cd0519447cba1d0a2ab6937"}, "closed": true, "closedAt": "2020-02-19T22:47:48Z", "author": {"login": "purplefox"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFzViNgBqjMwNTA5Njg5OTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcF9qaHABqjMwNTM1MzM2ODc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "96536bf37c6d6d69451e93622e8f0e54e3d64a57", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/96536bf37c6d6d69451e93622e8f0e54e3d64a57", "committedDate": "2020-02-19T09:37:30Z", "message": "perf runner"}, "afterCommit": {"oid": "5f24f27bfbf98758d80a232d24f2eeb8595d9526", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/5f24f27bfbf98758d80a232d24f2eeb8595d9526", "committedDate": "2020-02-19T09:43:32Z", "message": "perf runner"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f24f27bfbf98758d80a232d24f2eeb8595d9526", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/5f24f27bfbf98758d80a232d24f2eeb8595d9526", "committedDate": "2020-02-19T09:43:32Z", "message": "perf runner"}, "afterCommit": {"oid": "873117cf2fdbd956bbcbf3b024c21b7dfe612b6d", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/873117cf2fdbd956bbcbf3b024c21b7dfe612b6d", "committedDate": "2020-02-19T09:45:46Z", "message": "perf runner"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMzk1MDE4", "url": "https://github.com/confluentinc/ksql/pull/4590#pullrequestreview-361395018", "createdAt": "2020-02-19T19:59:09Z", "commit": {"oid": "873117cf2fdbd956bbcbf3b024c21b7dfe612b6d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxOTo1OToxMFrOFr1nKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDowNToxNlrOFr1ywA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxMTQ2NQ==", "bodyText": "nit: private? There's a protected setter method...", "url": "https://github.com/confluentinc/ksql/pull/4590#discussion_r381511465", "createdAt": "2020-02-19T19:59:10Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/test/java/io/confluent/ksql/api/perf/BasePerfRunner.java", "diffHunk": "@@ -0,0 +1,188 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.perf;\n+\n+import io.confluent.ksql.api.server.ApiServerConfig;\n+import io.confluent.ksql.api.server.Server;\n+import io.confluent.ksql.api.spi.Endpoints;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.http.HttpVersion;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * A simple tool for measuring performance of our API.\n+ * <p>\n+ * Implement the actual test in a subclass by overriding the abstract methods.\n+ * <p>\n+ * This tool is a simple rough and ready tool that does not pretend to be a fully fledged\n+ * performance testing tool. It's really useful for quickly running perf tests in your IDE to get a\n+ * rough idea of performance and do a first pass of performance tuning parameters - e.g. reactive\n+ * streams buffer sizes.\n+ */\n+public abstract class BasePerfRunner {\n+\n+  private Endpoints endpoints;\n+  private final AtomicInteger counter = new AtomicInteger();\n+  private long totalTime;\n+  private int totalCount;\n+  private int numWarmupRuns;\n+  private int numRuns;\n+  private long runMs;\n+\n+  protected Vertx vertx;\n+  protected WebClient client;\n+  protected Server server;\n+\n+  protected volatile Throwable throwable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "873117cf2fdbd956bbcbf3b024c21b7dfe612b6d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxNDMxNA==", "bodyText": "Why the sleep with a magic number of ms?  Such sleeps in tests are a code smell and often result in intermittent failures.", "url": "https://github.com/confluentinc/ksql/pull/4590#discussion_r381514314", "createdAt": "2020-02-19T20:05:01Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/test/java/io/confluent/ksql/api/perf/InsertsStreamRunner.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.perf;\n+\n+import io.confluent.ksql.api.server.BaseSubscriber;\n+import io.confluent.ksql.api.server.BufferedPublisher;\n+import io.confluent.ksql.api.server.InsertResult;\n+import io.confluent.ksql.api.server.InsertsStreamSubscriber;\n+import io.confluent.ksql.api.spi.Endpoints;\n+import io.confluent.ksql.api.spi.QueryPublisher;\n+import io.vertx.codegen.annotations.Nullable;\n+import io.vertx.core.Context;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.WorkerExecutor;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.core.parsetools.RecordParser;\n+import io.vertx.core.streams.ReadStream;\n+import io.vertx.ext.web.codec.BodyCodec;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+public class InsertsStreamRunner extends BasePerfRunner {\n+\n+  public static void main(String[] args) {\n+    new InsertsStreamRunner().go();\n+  }\n+\n+  private SendStream sendStream;\n+\n+  @Override\n+  public void configure() {\n+    setNumWarmupRuns(5).setNumRuns(5).setRunMs(10000).setEndpoints(new InsertsStreamEndpoints());\n+  }\n+\n+  @Override\n+  public void run(long ms) throws Exception {\n+\n+    RecordParser parser = RecordParser.newDelimited(\"\\n\").handler(row -> {\n+      count();\n+    });\n+\n+    sendStream = new SendStream(vertx);\n+\n+    client.post(8089, \"localhost\", \"/inserts-stream\")\n+        .as(BodyCodec.pipe(new RunnerUtils.ReceiveStream(parser)))\n+        .sendStream(sendStream, ar -> {\n+        });\n+\n+    Thread.sleep(ms);\n+\n+  }\n+\n+  @Override\n+  protected void endRun() throws Exception {\n+    sendStream.pause();\n+\n+    Thread.sleep(500);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "873117cf2fdbd956bbcbf3b024c21b7dfe612b6d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUxNDQzMg==", "bodyText": "As above, why the sleep with a magic number of ms?  Such sleeps in tests are a code smell and often result in intermittent failures.", "url": "https://github.com/confluentinc/ksql/pull/4590#discussion_r381514432", "createdAt": "2020-02-19T20:05:16Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/test/java/io/confluent/ksql/api/perf/PullQueryRunner.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.perf;\n+\n+import static io.confluent.ksql.api.perf.RunnerUtils.DEFAULT_COLUMN_NAMES;\n+import static io.confluent.ksql.api.perf.RunnerUtils.DEFAULT_COLUMN_TYPES;\n+import static io.confluent.ksql.api.perf.RunnerUtils.DEFAULT_ROW;\n+\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.api.impl.VertxCompletableFuture;\n+import io.confluent.ksql.api.server.BufferedPublisher;\n+import io.confluent.ksql.api.server.InsertResult;\n+import io.confluent.ksql.api.server.InsertsStreamSubscriber;\n+import io.confluent.ksql.api.spi.Endpoints;\n+import io.confluent.ksql.api.spi.QueryPublisher;\n+import io.vertx.core.Context;\n+import io.vertx.core.WorkerExecutor;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpResponse;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.Semaphore;\n+import org.reactivestreams.Subscriber;\n+\n+public class PullQueryRunner extends BasePerfRunner {\n+\n+  public static void main(String[] args) {\n+    new PullQueryRunner().go();\n+  }\n+\n+  private static final String DEFAULT_PULL_QUERY = \"select * from foo where rowkey=123;\";\n+  private static final JsonObject DEFAULT_PULL_QUERY_REQUEST_BODY = new JsonObject()\n+      .put(\"sql\", DEFAULT_PULL_QUERY)\n+      .put(\"properties\", new JsonObject());\n+  private static final List<GenericRow> DEFAULT_ROWS = generateResults();\n+  private static final int MAX_CONCURRENT_REQUESTS = 100;\n+\n+  private PullQueryEndpoints pullQueryEndpoints;\n+\n+  @Override\n+  protected void configure() {\n+    this.pullQueryEndpoints = new PullQueryEndpoints();\n+    setNumWarmupRuns(5).setNumRuns(5).setRunMs(10000).setEndpoints(pullQueryEndpoints);\n+  }\n+\n+  @Override\n+  protected void run(long runMs) throws Exception {\n+    Semaphore sem = new Semaphore(MAX_CONCURRENT_REQUESTS);\n+\n+    long start = System.currentTimeMillis();\n+\n+    do {\n+\n+      sem.acquire();\n+\n+      VertxCompletableFuture<HttpResponse<Buffer>> vcf = new VertxCompletableFuture<>();\n+\n+      client.post(8089, \"localhost\", \"/query-stream\")\n+          .sendJsonObject(DEFAULT_PULL_QUERY_REQUEST_BODY, vcf);\n+\n+      vcf.thenAccept(resp -> {\n+        count();\n+        sem.release();\n+      });\n+\n+    } while (System.currentTimeMillis() - start < runMs);\n+  }\n+\n+  @Override\n+  protected void endRun() throws Exception {\n+    pullQueryEndpoints.closePublishers();\n+\n+    Thread.sleep(500);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "873117cf2fdbd956bbcbf3b024c21b7dfe612b6d"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNDAyNDMy", "url": "https://github.com/confluentinc/ksql/pull/4590#pullrequestreview-361402432", "createdAt": "2020-02-19T20:11:04Z", "commit": {"oid": "fa549204152d97c9a4d9f30868c18d0504549c46"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05dc154c5d5977106395424ec72c04dceeca78af", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/05dc154c5d5977106395424ec72c04dceeca78af", "committedDate": "2020-02-19T21:42:04Z", "message": "perf runner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0a636fc1eb3d6e9dd895d59ece8b502532de7db", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/b0a636fc1eb3d6e9dd895d59ece8b502532de7db", "committedDate": "2020-02-19T21:42:04Z", "message": "use ImmmutableList"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa549204152d97c9a4d9f30868c18d0504549c46", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/fa549204152d97c9a4d9f30868c18d0504549c46", "committedDate": "2020-02-19T10:25:33Z", "message": "reuse port"}, "afterCommit": {"oid": "b0a636fc1eb3d6e9dd895d59ece8b502532de7db", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/b0a636fc1eb3d6e9dd895d59ece8b502532de7db", "committedDate": "2020-02-19T21:42:04Z", "message": "use ImmmutableList"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 52, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}