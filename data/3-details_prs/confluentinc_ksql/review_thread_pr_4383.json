{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MjI2NTY1", "number": 4383, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTo1MjoyN1rODbANMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTo1Nzo1OFrODbATxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjQxNTIwOnYy", "diffSide": "RIGHT", "path": "ksql-api/src/test/java/io/confluent/ksql/api/TestUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTo1MjoyN1rOFiPcQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTo1MjoyN1rOFiPcQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0ODg5Nw==", "bodyText": "Might be worth moving to ksql-test-util module.", "url": "https://github.com/confluentinc/ksql/pull/4383#discussion_r371448897", "createdAt": "2020-01-27T19:52:27Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/test/java/io/confluent/ksql/api/TestUtils.java", "diffHunk": "@@ -33,10 +32,10 @@ public static void awaitLatch(CountDownLatch latch) throws Exception {\n \n     private AssertionError error;\n \n-    public synchronized <T> void assertAsync(Supplier<? extends T> actualSupplier,\n+    public synchronized <T> void assertAsync(T t,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65e19f7a4c6db4aecdf118945ed733c0da7f9263"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NjQzMjA0OnYy", "diffSide": "RIGHT", "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/BufferedPublisher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTo1Nzo1OVrOFiPnPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTo1Nzo1OVrOFiPnPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1MTcxMQ==", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state, i.e. null check handler.", "url": "https://github.com/confluentinc/ksql/pull/4383#discussion_r371451711", "createdAt": "2020-01-27T19:57:59Z", "author": {"login": "big-andy-coates"}, "path": "ksql-api/src/main/java/io/confluent/ksql/api/server/BufferedPublisher.java", "diffHunk": "@@ -125,12 +125,15 @@ public boolean accept(final T t) {\n   /**\n    * If you set a drain handler. It will be called if, after delivery is attempted there are zero\n    * elements buffered internally and there is demand from the subscriber for more elements. Drain\n-   * handlers are one shot handlers, after being it will never be called more than once.\n+   * handlers are one shot handlers, after being called it will never be called more than once.\n    *\n    * @param handler The handler\n    */\n   public void drainHandler(final Runnable handler) {\n     checkContext();\n+    if (drainHandler != null) {\n+      throw new IllegalStateException(\"drainHandler already set\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65e19f7a4c6db4aecdf118945ed733c0da7f9263"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2293, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}