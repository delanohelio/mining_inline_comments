{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMDc2NTMw", "number": 5448, "title": "feat(client): support (non-streaming) insert into in Java client", "bodyText": "Description\nThis PR adds support for non-streaming inserts to the Java client.\nAlso a couple miscellaneous fixes:\n\nKsqlArray and KsqlObject now properly handle insertion of BigDecimal and structured types\nInsertsStreamHandler now returns 400 on bad statements, rather than 500\n\nTesting done\nAdded unit and integration tests.\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-05-20T23:54:57Z", "url": "https://github.com/confluentinc/ksql/pull/5448", "merged": true, "mergeCommit": {"oid": "9e8234ad93745f73dc8e0d7463e44f33bb0739a9"}, "closed": true, "closedAt": "2020-05-22T17:13:05Z", "author": {"login": "vcrfxia"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjRqZ0AH2gAyNDIxMDc2NTMwOjhmNjcyOTM0ZWE0NDA1NWEyZjdiOGE3ZDkzNzFiOGNhNjAyMzg3ZDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjzb8rgH2gAyNDIxMDc2NTMwOmM3Y2RkOTVjNGEwMzE2M2Y0YzA2NDRiNDRlYTliZDdhMGUzNjhkODI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8f672934ea44055a2f7b8a7d9371b8ca602387d0", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/8f672934ea44055a2f7b8a7d9371b8ca602387d0", "committedDate": "2020-05-20T23:28:08Z", "message": "feat(client): support (non-streaming) insert into in Java client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ea812c506f4eba80f866f0a912a33944689d04f", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/1ea812c506f4eba80f866f0a912a33944689d04f", "committedDate": "2020-05-20T23:39:38Z", "message": "feat(client): support inserting multiple rows at once"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38accc45ebf2b14874bffa5e903141ecd3e0c86c", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/38accc45ebf2b14874bffa5e903141ecd3e0c86c", "committedDate": "2020-05-20T23:51:35Z", "message": "chore: checkstyle and javadocs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NzkyODg1", "url": "https://github.com/confluentinc/ksql/pull/5448#pullrequestreview-415792885", "createdAt": "2020-05-20T23:58:05Z", "commit": {"oid": "38accc45ebf2b14874bffa5e903141ecd3e0c86c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMzo1ODowNVrOGYhzvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMzo1ODowNVrOGYhzvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3MjkyNA==", "bodyText": "Should this be ERROR_CODE_NOT_FOUND instead?", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r428372924", "createdAt": "2020-05-20T23:58:05Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/InsertsStreamEndpoint.java", "diffHunk": "@@ -66,17 +68,20 @@ private DataSource getDataSource(\n   ) {\n     final DataSource dataSource = metaStore.getSource(sourceName);\n     if (dataSource == null) {\n-      throw new KsqlException(\"Cannot insert values into an unknown stream: \"\n-          + sourceName);\n+      throw new KsqlApiException(\n+          \"Cannot insert values into an unknown stream: \" + sourceName, ERROR_CODE_BAD_STATEMENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38accc45ebf2b14874bffa5e903141ecd3e0c86c"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b244de077369605fe07cbe03dbab312c2eb9f10", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/3b244de077369605fe07cbe03dbab312c2eb9f10", "committedDate": "2020-05-21T00:03:51Z", "message": "Merge branch 'master' into java-client-insert-stream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1af46b9f60de725db827aca21fd44c1ed9799bb9", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/1af46b9f60de725db827aca21fd44c1ed9799bb9", "committedDate": "2020-05-21T16:10:56Z", "message": "test: fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MTYwMTEy", "url": "https://github.com/confluentinc/ksql/pull/5448#pullrequestreview-416160112", "createdAt": "2020-05-21T13:49:30Z", "commit": {"oid": "3b244de077369605fe07cbe03dbab312c2eb9f10"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzo0OTozMFrOGYzf-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNzozNDoxMlrOGZNhHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2Mjc3OA==", "bodyText": "Why are we converting to double here? Surely this will lose precision in some cases?", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r428662778", "createdAt": "2020-05-21T13:49:30Z", "author": {"login": "purplefox"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/KsqlArray.java", "diffHunk": "@@ -282,7 +282,7 @@ public KsqlArray add(final Boolean value) {\n    * @return a reference to this\n    */\n   public KsqlArray add(final BigDecimal value) {\n-    delegate.add(value);\n+    delegate.add(value.doubleValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b244de077369605fe07cbe03dbab312c2eb9f10"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY2MzM0Ng==", "bodyText": "Slight optimisation: Use Collections.singletonList", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r428663346", "createdAt": "2020-05-21T13:50:20Z", "author": {"login": "purplefox"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/ClientImpl.java", "diffHunk": "@@ -118,20 +121,55 @@ public BatchedQueryResult executeQuery(\n   }\n \n   @Override\n-  public CompletableFuture<Void> insertInto(\n-      final String streamName, final Map<String, Object> row) {\n-    return null; // not yet implemented\n+  public CompletableFuture<Void> insertInto(final String streamName, final KsqlObject row) {\n+    final List<KsqlObject> rows = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b244de077369605fe07cbe03dbab312c2eb9f10"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4MjgzNQ==", "bodyText": "I see that you're waiting for the whole body and parsing it manually here.\nWhen you come to do the streaming insert response this technique won't work and you'll need to use RecordParser - and then you'll end up with two ways of parsing the response.\nI think it would be simpler and easier to just use RecordParser for all cases - this will just spit out the response lines so you don't have to do any manual parsing.", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r429082835", "createdAt": "2020-05-22T07:18:57Z", "author": {"login": "purplefox"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/ClientImpl.java", "diffHunk": "@@ -213,6 +246,48 @@ private HttpClientRequest configureBasicAuth(final HttpClientRequest request) {\n     }\n   }\n \n+  private static void handleInsertIntoResponse(\n+      final HttpClientResponse response,\n+      final CompletableFuture<Void> cf,\n+      final int numRows\n+  ) {\n+    if (response.statusCode() == OK.code()) {\n+      response.bodyHandler(buffer -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1af46b9f60de725db827aca21fd44c1ed9799bb9"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4NTkwMw==", "bodyText": "I don't think it's useful to have an insertInto method that takes a List of Rows. When inserting rows, the actual inserts can occur our of order, and it's possible that some inserts could succeed and some could fail. Returning a single CompletableFuture means that we couldn't tell the user about individual success or failure of inserts. So on failure, it might be that some of the inserts actually succeeded, leaving the system in an inconsistent state and the user not being able to do anything useful to correct it.\nAt some point I hope we will support transactions on the client. At that point I think it would make sense to support batch inserts like this, but not until then. With transactions we can guarantee that all the inserts succeed or none.", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r429085903", "createdAt": "2020-05-22T07:26:28Z", "author": {"login": "purplefox"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/Client.java", "diffHunk": "@@ -71,9 +71,32 @@\n    */\n   BatchedQueryResult executeQuery(String sql, Map<String, Object> properties);\n \n-  CompletableFuture<Void> insertInto(String streamName, Map<String, Object> row);\n+  /**\n+   * Inserts a row into a ksqlDB stream.\n+   *\n+   * <p>The {@code CompletableFuture} will be failed if a non-200 response is received from the\n+   * server, or if the server encounters an error while processing the insertion.\n+   *\n+   * @param streamName name of the target stream\n+   * @param row the row to insert. Keys are column names and values are column values.\n+   * @return a future that completes once the server response is received\n+   */\n+  CompletableFuture<Void> insertInto(String streamName, KsqlObject row);\n+\n+  /**\n+   * Inserts the specified row(s) into a ksqlDB stream.\n+   *\n+   * <p>The {@code CompletableFuture} will be failed if a non-200 response is received from the\n+   * server, or if the server encounters an error while processing the insertion(s).\n+   *\n+   * @param streamName name of the target stream\n+   * @param rows the rows to insert. For each row, the keys are column names and values are\n+   *        column values.\n+   * @return a future that completes once the server response is received\n+   */\n+  CompletableFuture<Void> insertInto(String streamName, List<KsqlObject> rows);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1af46b9f60de725db827aca21fd44c1ed9799bb9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4NjE0OQ==", "bodyText": "This is the reason I didn't include a batch insert method like this on the original prototype.", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r429086149", "createdAt": "2020-05-22T07:27:04Z", "author": {"login": "purplefox"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/Client.java", "diffHunk": "@@ -71,9 +71,32 @@\n    */\n   BatchedQueryResult executeQuery(String sql, Map<String, Object> properties);\n \n-  CompletableFuture<Void> insertInto(String streamName, Map<String, Object> row);\n+  /**\n+   * Inserts a row into a ksqlDB stream.\n+   *\n+   * <p>The {@code CompletableFuture} will be failed if a non-200 response is received from the\n+   * server, or if the server encounters an error while processing the insertion.\n+   *\n+   * @param streamName name of the target stream\n+   * @param row the row to insert. Keys are column names and values are column values.\n+   * @return a future that completes once the server response is received\n+   */\n+  CompletableFuture<Void> insertInto(String streamName, KsqlObject row);\n+\n+  /**\n+   * Inserts the specified row(s) into a ksqlDB stream.\n+   *\n+   * <p>The {@code CompletableFuture} will be failed if a non-200 response is received from the\n+   * server, or if the server encounters an error while processing the insertion(s).\n+   *\n+   * @param streamName name of the target stream\n+   * @param rows the rows to insert. For each row, the keys are column names and values are\n+   *        column values.\n+   * @return a future that completes once the server response is received\n+   */\n+  CompletableFuture<Void> insertInto(String streamName, List<KsqlObject> rows);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4NTkwMw=="}, "originalCommit": {"oid": "1af46b9f60de725db827aca21fd44c1ed9799bb9"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4NjQ3NA==", "bodyText": "If we don't support batch inserts, then this becomes a lot simpler too :)", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r429086474", "createdAt": "2020-05-22T07:27:49Z", "author": {"login": "purplefox"}, "path": "ksqldb-api-client/src/main/java/io/confluent/ksql/api/client/impl/ClientImpl.java", "diffHunk": "@@ -213,6 +246,48 @@ private HttpClientRequest configureBasicAuth(final HttpClientRequest request) {\n     }\n   }\n \n+  private static void handleInsertIntoResponse(\n+      final HttpClientResponse response,\n+      final CompletableFuture<Void> cf,\n+      final int numRows\n+  ) {\n+    if (response.statusCode() == OK.code()) {\n+      response.bodyHandler(buffer -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4MjgzNQ=="}, "originalCommit": {"oid": "1af46b9f60de725db827aca21fd44c1ed9799bb9"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4NzQ2Ng==", "bodyText": "I think BAD_STATEMENT is ok. NOT _FOUND is more if the uri doesn't exist.", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r429087466", "createdAt": "2020-05-22T07:30:13Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/InsertsStreamEndpoint.java", "diffHunk": "@@ -66,17 +68,20 @@ private DataSource getDataSource(\n   ) {\n     final DataSource dataSource = metaStore.getSource(sourceName);\n     if (dataSource == null) {\n-      throw new KsqlException(\"Cannot insert values into an unknown stream: \"\n-          + sourceName);\n+      throw new KsqlApiException(\n+          \"Cannot insert values into an unknown stream: \" + sourceName, ERROR_CODE_BAD_STATEMENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODM3MjkyNA=="}, "originalCommit": {"oid": "38accc45ebf2b14874bffa5e903141ecd3e0c86c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4OTA1Mg==", "bodyText": "The logic here is similar to the failure handler in QueryStreamHandler, perhaps could consider combining it?", "url": "https://github.com/confluentinc/ksql/pull/5448#discussion_r429089052", "createdAt": "2020-05-22T07:34:12Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/InsertsStreamHandler.java", "diffHunk": "@@ -159,11 +160,17 @@ private void handleArgs(final Buffer buff) {\n \n     private Void handleInsertSubscriberException(final Throwable t,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1af46b9f60de725db827aca21fd44c1ed9799bb9"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0b9efc9a3d8ce94e26c856533fad4bd3359fa58", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/a0b9efc9a3d8ce94e26c856533fad4bd3359fa58", "committedDate": "2020-05-22T13:26:54Z", "message": "chore: remove batch insert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "670642adb46e0b1446c9e27502d77c05a2f50251", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/670642adb46e0b1446c9e27502d77c05a2f50251", "committedDate": "2020-05-22T13:35:45Z", "message": "refactor: de-dup server endpoint exception handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc724f00a025e46204703faea01751ca509e8006", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/fc724f00a025e46204703faea01751ca509e8006", "committedDate": "2020-05-22T13:56:57Z", "message": "refactor: switch to using RecordParser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7cdd95c4a03163f4c0644b44ea9bd7a0e368d82", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/c7cdd95c4a03163f4c0644b44ea9bd7a0e368d82", "committedDate": "2020-05-22T14:49:07Z", "message": "refactor: de-dup response handling logic"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 309, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}