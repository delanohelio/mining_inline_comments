{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMjk0NTk1", "number": 6535, "title": "feat: CASE expressions can now handle 12+ conditions in docker + cloud", "bodyText": "Description\nFixes #5707\nReplaces ImmutableList.of() with ImmutableList.copyOf(Arrays.asList())\nTesting done\nManual: Generated docker image and ran a manual test with 17 CASE conditions\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-10-28T05:43:08Z", "url": "https://github.com/confluentinc/ksql/pull/6535", "merged": true, "mergeCommit": {"oid": "327170dafc0c0794d51136b71657881b4988c80d"}, "closed": true, "closedAt": "2020-10-28T21:27:53Z", "author": {"login": "cprasad1"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdW2xvDAH2gAyNTExMjk0NTk1OmU5ZTNmM2VmZjZkMTVmNTkwNTYyMjEyMTJmOTA2YWEyOTMyYWJkNjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXET-gAFqTUxOTA5MjMyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e9e3f3eff6d15f59056221212f906aa2932abd62", "author": {"user": {"login": "cprasad1", "name": null}}, "url": "https://github.com/confluentinc/ksql/commit/e9e3f3eff6d15f59056221212f906aa2932abd62", "committedDate": "2020-10-28T05:32:46Z", "message": "replaced ImmutableList.of() with ImmutableList.copyOf(Arrays.asList())"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45e4e12c036a59ccbf06c98f6ac6f729e58ccf7c", "author": {"user": {"login": "cprasad1", "name": null}}, "url": "https://github.com/confluentinc/ksql/commit/45e4e12c036a59ccbf06c98f6ac6f729e58ccf7c", "committedDate": "2020-10-28T05:37:47Z", "message": "semantic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4ODg0NTY4", "url": "https://github.com/confluentinc/ksql/pull/6535#pullrequestreview-518884568", "createdAt": "2020-10-28T16:55:35Z", "commit": {"oid": "45e4e12c036a59ccbf06c98f6ac6f729e58ccf7c"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo1NTozNVrOHp0IIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjo1NjoxNlrOHp0KXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYwNzcxMg==", "bodyText": "I believe every time this is evaluated for a given row, it creates this list and iterates through.  It would be good to avoid additional copies if possible.  I read through the documentation for Arrays.asList and it actually seems to just wrap the array and not copy it, so I think this does just one copy, which is what the original code did.  You might want to verify that, but I think you're good.\nI would make sure to add comments here documenting why this combination is necessary!  Otherwise someone will simplify it again and rebreak it.\nConsider making a separate static method in CodeGenUtil that's documented well so that it's use stands out.  If all variadic args works fine, it could be something like:\npublic static <T> List<T> listOf(final T... a) {\n    return ImmutableList.copyOf(a);\n  }", "url": "https://github.com/confluentinc/ksql/pull/6535#discussion_r513607712", "createdAt": "2020-10-28T16:55:35Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/SqlToJavaVisitor.java", "diffHunk": "@@ -765,10 +766,11 @@ private String visitBooleanComparisonExpression(final ComparisonExpression.Type\n           : \"null\";\n \n       final String codeString = \"((\" + resultSchemaString + \")\"\n-          + functionClassName + \".searchedCaseFunction(ImmutableList.of( \"\n-          + StringUtils.join(lazyWhenClause, \", \") + \"),\"\n+          + functionClassName + \".searchedCaseFunction(ImmutableList.copyOf(Arrays.asList( \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45e4e12c036a59ccbf06c98f6ac6f729e58ccf7c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzYwODI4NQ==", "bodyText": "Add a new test case with 13 case statements to ensure that we don't regress on this bug.", "url": "https://github.com/confluentinc/ksql/pull/6535#discussion_r513608285", "createdAt": "2020-10-28T16:56:16Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/codegen/SqlToJavaVisitorTest.java", "diffHunk": "@@ -486,7 +486,7 @@ public void shouldGenerateCorrectCodeForCaseStatement() {\n     // ThenL\n     assertThat(\n         javaExpression, equalTo(\n-            \"((java.lang.String)SearchedCaseFunction.searchedCaseFunction(ImmutableList.of( SearchedCaseFunction.whenClause( new Supplier<Boolean>() { @Override public Boolean get() { return ((((Object)(COL7)) == null || ((Object)(10)) == null) ? false : (COL7 < 10)); }},  new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"small\\\"; }}), SearchedCaseFunction.whenClause( new Supplier<Boolean>() { @Override public Boolean get() { return ((((Object)(COL7)) == null || ((Object)(100)) == null) ? false : (COL7 < 100)); }},  new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"medium\\\"; }})), new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"large\\\"; }}))\"));\n+            \"((java.lang.String)SearchedCaseFunction.searchedCaseFunction(ImmutableList.copyOf(Arrays.asList( SearchedCaseFunction.whenClause( new Supplier<Boolean>() { @Override public Boolean get() { return ((((Object)(COL7)) == null || ((Object)(10)) == null) ? false : (COL7 < 10)); }},  new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"small\\\"; }}), SearchedCaseFunction.whenClause( new Supplier<Boolean>() { @Override public Boolean get() { return ((((Object)(COL7)) == null || ((Object)(100)) == null) ? false : (COL7 < 100)); }},  new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"medium\\\"; }}))), new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"large\\\"; }}))\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45e4e12c036a59ccbf06c98f6ac6f729e58ccf7c"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51b3dead6233fc7dbb82fce3af6e0040e06c8f99", "author": {"user": {"login": "cprasad1", "name": null}}, "url": "https://github.com/confluentinc/ksql/commit/51b3dead6233fc7dbb82fce3af6e0040e06c8f99", "committedDate": "2020-10-28T20:17:12Z", "message": "added test with 13 cases and comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MDUyMDU0", "url": "https://github.com/confluentinc/ksql/pull/6535#pullrequestreview-519052054", "createdAt": "2020-10-28T20:22:04Z", "commit": {"oid": "51b3dead6233fc7dbb82fce3af6e0040e06c8f99"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDoyMjowNFrOHp78-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDoyNzo0MFrOHp8JEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczNTkzMA==", "bodyText": "You might want to mention that it's the janino compiler that chokes on the combination of normal and variadic args (assuming we verified that as the cause).  This avoids that.", "url": "https://github.com/confluentinc/ksql/pull/6535#discussion_r513735930", "createdAt": "2020-10-28T20:22:04Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/SqlToJavaVisitor.java", "diffHunk": "@@ -764,11 +765,15 @@ private String visitBooleanComparisonExpression(final ComparisonExpression.Type\n           ? process(node.getDefaultValue().get(), context).getLeft()\n           : \"null\";\n \n+      // ImmutableList.copyOf(Arrays.asList()) replaced ImmutableList.of() to avoid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b3dead6233fc7dbb82fce3af6e0040e06c8f99"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzczOTAyNg==", "bodyText": "This part always worked, producing the java.  Is there a place where we can actually cook and evaluate this code to verify that it does't cause an exception?  I think there used to be a CodeGenRunnerTest.    It would be great to have a test there.", "url": "https://github.com/confluentinc/ksql/pull/6535#discussion_r513739026", "createdAt": "2020-10-28T20:27:40Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/codegen/SqlToJavaVisitorTest.java", "diffHunk": "@@ -486,7 +488,37 @@ public void shouldGenerateCorrectCodeForCaseStatement() {\n     // ThenL\n     assertThat(\n         javaExpression, equalTo(\n-            \"((java.lang.String)SearchedCaseFunction.searchedCaseFunction(ImmutableList.of( SearchedCaseFunction.whenClause( new Supplier<Boolean>() { @Override public Boolean get() { return ((((Object)(COL7)) == null || ((Object)(10)) == null) ? false : (COL7 < 10)); }},  new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"small\\\"; }}), SearchedCaseFunction.whenClause( new Supplier<Boolean>() { @Override public Boolean get() { return ((((Object)(COL7)) == null || ((Object)(100)) == null) ? false : (COL7 < 100)); }},  new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"medium\\\"; }})), new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"large\\\"; }}))\"));\n+            \"((java.lang.String)SearchedCaseFunction.searchedCaseFunction(ImmutableList.copyOf(Arrays.asList( SearchedCaseFunction.whenClause( new Supplier<Boolean>() { @Override public Boolean get() { return ((((Object)(COL7)) == null || ((Object)(10)) == null) ? false : (COL7 < 10)); }},  new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"small\\\"; }}), SearchedCaseFunction.whenClause( new Supplier<Boolean>() { @Override public Boolean get() { return ((((Object)(COL7)) == null || ((Object)(100)) == null) ? false : (COL7 < 100)); }},  new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"medium\\\"; }}))), new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"large\\\"; }}))\"));\n+  }\n+\n+  @Test\n+  public void shouldGenerateCorrectCodeForCaseStatementWith13Conditions() {\n+    // Given:\n+    final ImmutableList<Integer> numbers = ImmutableList.of(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12);\n+    final ImmutableList<String> numberNames = ImmutableList.of(\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\",\n+                                                       \"six\", \"seven\", \"eight\", \"nine\", \"ten\",\n+                                                       \"eleven\", \"twelve\");\n+\n+    final ImmutableList arg = numbers\n+            .stream()\n+            .map(n -> new WhenClause(\n+            new ComparisonExpression(\n+                    ComparisonExpression.Type.EQUAL, COL7, new IntegerLiteral(n)),\n+            new StringLiteral(numberNames.get(n))\n+    )).collect(ImmutableList.toImmutableList());\n+\n+    final Expression expression = new SearchedCaseExpression(\n+            arg,\n+            Optional.empty()\n+    );\n+\n+    // When:\n+    final String javaExpression = sqlToJavaVisitor.process(expression);\n+\n+    // ThenL\n+    assertThat(\n+            javaExpression, equalTo(\n+                    \"((java.lang.String)SearchedCaseFunction.searchedCaseFunction(ImmutableList.copyOf(Arrays.asList( SearchedCaseFunction.whenClause( new Supplier<Boolean>() { @Override public Boolean get() { return ((((Object)(COL7)) == null || ((Object)(0)) == null) ? false : ((COL7 <= 0) && (COL7 >= 0))); }},  new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"zero\\\"; }}), SearchedCaseFunction.whenClause( new Supplier<Boolean>() { @Override public Boolean get() { return ((((Object)(COL7)) == null || ((Object)(1)) == null) ? false : ((COL7 <= 1) && (COL7 >= 1))); }},  new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"one\\\"; }}), SearchedCaseFunction.whenClause( new Supplier<Boolean>() { @Override public Boolean get() { return ((((Object)(COL7)) == null || ((Object)(2)) == null) ? false : ((COL7 <= 2) && (COL7 >= 2))); }},  new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"two\\\"; }}), SearchedCaseFunction.whenClause( new Supplier<Boolean>() { @Override public Boolean get() { return ((((Object)(COL7)) == null || ((Object)(3)) == null) ? false : ((COL7 <= 3) && (COL7 >= 3))); }},  new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"three\\\"; }}), SearchedCaseFunction.whenClause( new Supplier<Boolean>() { @Override public Boolean get() { return ((((Object)(COL7)) == null || ((Object)(4)) == null) ? false : ((COL7 <= 4) && (COL7 >= 4))); }},  new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"four\\\"; }}), SearchedCaseFunction.whenClause( new Supplier<Boolean>() { @Override public Boolean get() { return ((((Object)(COL7)) == null || ((Object)(5)) == null) ? false : ((COL7 <= 5) && (COL7 >= 5))); }},  new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"five\\\"; }}), SearchedCaseFunction.whenClause( new Supplier<Boolean>() { @Override public Boolean get() { return ((((Object)(COL7)) == null || ((Object)(6)) == null) ? false : ((COL7 <= 6) && (COL7 >= 6))); }},  new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"six\\\"; }}), SearchedCaseFunction.whenClause( new Supplier<Boolean>() { @Override public Boolean get() { return ((((Object)(COL7)) == null || ((Object)(7)) == null) ? false : ((COL7 <= 7) && (COL7 >= 7))); }},  new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"seven\\\"; }}), SearchedCaseFunction.whenClause( new Supplier<Boolean>() { @Override public Boolean get() { return ((((Object)(COL7)) == null || ((Object)(8)) == null) ? false : ((COL7 <= 8) && (COL7 >= 8))); }},  new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"eight\\\"; }}), SearchedCaseFunction.whenClause( new Supplier<Boolean>() { @Override public Boolean get() { return ((((Object)(COL7)) == null || ((Object)(9)) == null) ? false : ((COL7 <= 9) && (COL7 >= 9))); }},  new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"nine\\\"; }}), SearchedCaseFunction.whenClause( new Supplier<Boolean>() { @Override public Boolean get() { return ((((Object)(COL7)) == null || ((Object)(10)) == null) ? false : ((COL7 <= 10) && (COL7 >= 10))); }},  new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"ten\\\"; }}), SearchedCaseFunction.whenClause( new Supplier<Boolean>() { @Override public Boolean get() { return ((((Object)(COL7)) == null || ((Object)(11)) == null) ? false : ((COL7 <= 11) && (COL7 >= 11))); }},  new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"eleven\\\"; }}), SearchedCaseFunction.whenClause( new Supplier<Boolean>() { @Override public Boolean get() { return ((((Object)(COL7)) == null || ((Object)(12)) == null) ? false : ((COL7 <= 12) && (COL7 >= 12))); }},  new Supplier<java.lang.String>() { @Override public java.lang.String get() { return \\\"twelve\\\"; }}))), new Supplier<java.lang.String>() { @Override public java.lang.String get() { return null; }}))\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b3dead6233fc7dbb82fce3af6e0040e06c8f99"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MDkyMzI4", "url": "https://github.com/confluentinc/ksql/pull/6535#pullrequestreview-519092328", "createdAt": "2020-10-28T21:18:56Z", "commit": {"oid": "51b3dead6233fc7dbb82fce3af6e0040e06c8f99"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4593, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}