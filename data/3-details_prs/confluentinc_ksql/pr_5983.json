{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MjkwNDYw", "number": 5983, "title": "fix: Uses pull query metrics for all paths, not just /query", "bodyText": "Description\nFixes issue with pull query metrics not being used in every pull query codepath. Now it should be used not only on /query by also the web socket code path.\nTesting done\nRan normal tests.  Also, verified locally that it's now in use.\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-08-11T18:49:54Z", "url": "https://github.com/confluentinc/ksql/pull/5983", "merged": true, "mergeCommit": {"oid": "143849c89aa2cd69f6aee813cca660540b4675d4"}, "closed": true, "closedAt": "2020-08-21T21:59:14Z", "author": {"login": "AlanConfluent"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc97JjpAH2gAyNDY2MjkwNDYwOjMzZjdiNWMwZWRjOTE3ODBiNWM4OGJmOTE5YmVjYTJlMDBiZDJjYzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBLIXPgH2gAyNDY2MjkwNDYwOmFlZDg5OGRhNzJjNTFlY2IwMWU5Njc5NTJjZThmYTFkNThmMDgyN2M=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "33f7b5c0edc91780b5c88bf919beca2e00bd2cc3", "author": {"user": {"login": "AlanConfluent", "name": "Alan Sheinberg"}}, "url": "https://github.com/confluentinc/ksql/commit/33f7b5c0edc91780b5c88bf919beca2e00bd2cc3", "committedDate": "2020-08-11T18:30:18Z", "message": "fix: Uses pull query metrics for all paths, not just /query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0538fd6e1ca329a326d8d968897317a7c7551d9", "author": {"user": {"login": "AlanConfluent", "name": "Alan Sheinberg"}}, "url": "https://github.com/confluentinc/ksql/commit/b0538fd6e1ca329a326d8d968897317a7c7551d9", "committedDate": "2020-08-11T23:04:31Z", "message": "Style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDkzODc2", "url": "https://github.com/confluentinc/ksql/pull/5983#pullrequestreview-465493876", "createdAt": "2020-08-11T23:26:25Z", "commit": {"oid": "b0538fd6e1ca329a326d8d968897317a7c7551d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMzoyNjoyNVrOG_Mk6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMzoyNjoyNVrOG_Mk6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkxOTUyOQ==", "bodyText": "What about the existing streamedQueryResource.closeMetrics() call?", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r468919529", "createdAt": "2020-08-11T23:26:25Z", "author": {"login": "apurvam"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -466,7 +468,7 @@ public void notifyTerminated() {\n   public void shutdown() {\n     log.info(\"ksqlDB shutdown called\");\n     try {\n-      streamedQueryResource.closeMetrics();\n+      pullQueryExecutor.closeMetrics();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0538fd6e1ca329a326d8d968897317a7c7551d9"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NTI2Njc5", "url": "https://github.com/confluentinc/ksql/pull/5983#pullrequestreview-465526679", "createdAt": "2020-08-12T01:10:09Z", "commit": {"oid": "b0538fd6e1ca329a326d8d968897317a7c7551d9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMToxMDoxMFrOG_OWpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwMToxMDoxMFrOG_OWpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0ODY0NQ==", "bodyText": "There was a reason for these measurements to be in the StreamedQueryResource. They measure a more realistic latency that accounts also for query parsing etc. , basically all that happens before the request reaches the PullQueryExecutor.", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r468948645", "createdAt": "2020-08-12T01:10:10Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -223,13 +229,21 @@ public PullQueryResult execute(\n           contextStacker,\n           pullQueryMetrics);\n \n-      return handlePullQuery(\n+      final PullQueryResult result = handlePullQuery(\n           statement,\n           executionContext,\n           serviceContext,\n           pullQueryContext,\n           routingOptions\n       );\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0538fd6e1ca329a326d8d968897317a7c7551d9"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NzY5NzY5", "url": "https://github.com/confluentinc/ksql/pull/5983#pullrequestreview-465769769", "createdAt": "2020-08-12T10:02:07Z", "commit": {"oid": "b0538fd6e1ca329a326d8d968897317a7c7551d9"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDowMjowOFrOG_ajFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMDoxMToxMVrOG_a1Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0ODQzNg==", "bodyText": "nit: can't be null, so:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                final Boolean collectMetrics = ksqlConfig.getBoolean(\n          \n          \n            \n                final boolean collectMetrics = ksqlConfig.getBoolean(", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469148436", "createdAt": "2020-08-12T10:02:08Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -698,8 +700,16 @@ static KsqlRestApplication buildApplication(\n     final RoutingFilterFactory routingFilterFactory = initializeRoutingFilterFactory(ksqlConfig,\n         heartbeatAgent, lagReportingAgent);\n \n+    final Boolean collectMetrics = ksqlConfig.getBoolean(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0538fd6e1ca329a326d8d968897317a7c7551d9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0ODk3MA==", "bodyText": "Can we move this into the PullQueryExecutor constructor please, given its already being passed the ksqlConfig as a parameter?", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469148970", "createdAt": "2020-08-12T10:03:11Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -698,8 +700,16 @@ static KsqlRestApplication buildApplication(\n     final RoutingFilterFactory routingFilterFactory = initializeRoutingFilterFactory(ksqlConfig,\n         heartbeatAgent, lagReportingAgent);\n \n+    final Boolean collectMetrics = ksqlConfig.getBoolean(\n+        KsqlConfig.KSQL_QUERY_PULL_METRICS_ENABLED);\n+    final Optional<PullQueryExecutorMetrics> pullQueryMetrics = collectMetrics\n+        ? Optional.of(new PullQueryExecutorMetrics(\n+        ksqlEngine.getServiceId(),\n+        ksqlConfig.getStringAsMap(KsqlConfig.KSQL_CUSTOM_METRICS_TAGS)))\n+        : empty();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0538fd6e1ca329a326d8d968897317a7c7551d9"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0OTA4MQ==", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469149081", "createdAt": "2020-08-12T10:03:27Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -139,17 +140,22 @@\n   private final KsqlExecutionContext executionContext;\n   private final RoutingFilterFactory routingFilterFactory;\n   private final RateLimiter rateLimiter;\n+  private final Optional<PullQueryExecutorMetrics> pullQueryMetrics;\n+  private final Time time;\n \n   public PullQueryExecutor(\n       final KsqlExecutionContext executionContext,\n       final RoutingFilterFactory routingFilterFactory,\n-      final KsqlConfig ksqlConfig\n+      final KsqlConfig ksqlConfig,\n+      final Optional<PullQueryExecutorMetrics> pullQueryMetrics\n   ) {\n     this.executionContext = Objects.requireNonNull(executionContext, \"executionContext\");\n     this.routingFilterFactory =\n         Objects.requireNonNull(routingFilterFactory, \"routingFilterFactory\");\n     this.rateLimiter = RateLimiter.create(ksqlConfig.getInt(\n         KsqlConfig.KSQL_QUERY_PULL_MAX_QPS_CONFIG));\n+    this.pullQueryMetrics = pullQueryMetrics;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0538fd6e1ca329a326d8d968897317a7c7551d9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0OTQ1OA==", "bodyText": "+1", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469149458", "createdAt": "2020-08-12T10:04:13Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -223,13 +229,21 @@ public PullQueryResult execute(\n           contextStacker,\n           pullQueryMetrics);\n \n-      return handlePullQuery(\n+      final PullQueryResult result = handlePullQuery(\n           statement,\n           executionContext,\n           serviceContext,\n           pullQueryContext,\n           routingOptions\n       );\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk0ODY0NQ=="}, "originalCommit": {"oid": "b0538fd6e1ca329a326d8d968897317a7c7551d9"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1Mjc5MA==", "bodyText": "Any reason this can't be pulled into PullQueryExecutorMetrics?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (pullQueryMetrics.isPresent()) {\n          \n          \n            \n                    //Record latency at microsecond scale\n          \n          \n            \n                    final double latency = (time.nanoseconds() - startTime) / 1000f;\n          \n          \n            \n                    pullQueryMetrics.get().recordLatency(latency);\n          \n          \n            \n                    pullQueryMetrics.get().recordRate(1);\n          \n          \n            \n                  }\n          \n          \n            \n                  pullQueryMetrics\n          \n          \n            \n                          .ifPresent(collector -> collector.recordLatency(time.nanoseconds() - startTime));\n          \n      \n    \n    \n  \n\nWhere recordLatency becomes:\npublic void recordLatency(final long nanoSeconds) {\n    //Record latency at microsecond scale\n    final double latency = TimeUnit.NANOSECONDS.toMillis(nanoSeconds);\n    latencySensor.record(latency);\n    requestRateSensor.record(1);\n  }\nAnd recordRate can be deleted.", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469152790", "createdAt": "2020-08-12T10:10:33Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -223,13 +229,21 @@ public PullQueryResult execute(\n           contextStacker,\n           pullQueryMetrics);\n \n-      return handlePullQuery(\n+      final PullQueryResult result = handlePullQuery(\n           statement,\n           executionContext,\n           serviceContext,\n           pullQueryContext,\n           routingOptions\n       );\n+\n+      if (pullQueryMetrics.isPresent()) {\n+        //Record latency at microsecond scale\n+        final double latency = (time.nanoseconds() - startTime) / 1000f;\n+        pullQueryMetrics.get().recordLatency(latency);\n+        pullQueryMetrics.get().recordRate(1);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0538fd6e1ca329a326d8d968897317a7c7551d9"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE1MzExMA==", "bodyText": "pullQueryMetrics is Optional. It should never be null`.", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r469153110", "createdAt": "2020-08-12T10:11:11Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -248,6 +262,12 @@ void checkRateLimit() {\n     }\n   }\n \n+  public void closeMetrics() {\n+    if (pullQueryMetrics != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0538fd6e1ca329a326d8d968897317a7c7551d9"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8720613ef8602449040b9a40aa9013f702a60a52", "author": {"user": {"login": "AlanConfluent", "name": "Alan Sheinberg"}}, "url": "https://github.com/confluentinc/ksql/commit/8720613ef8602449040b9a40aa9013f702a60a52", "committedDate": "2020-08-13T02:39:24Z", "message": "Feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35adefbc98e002d2016eed1609e2c8f8661bfe99", "author": {"user": {"login": "AlanConfluent", "name": "Alan Sheinberg"}}, "url": "https://github.com/confluentinc/ksql/commit/35adefbc98e002d2016eed1609e2c8f8661bfe99", "committedDate": "2020-08-13T16:54:54Z", "message": "Fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4OTQ0NzU3", "url": "https://github.com/confluentinc/ksql/pull/5983#pullrequestreview-468944757", "createdAt": "2020-08-18T02:13:36Z", "commit": {"oid": "35adefbc98e002d2016eed1609e2c8f8661bfe99"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MTY0NTQx", "url": "https://github.com/confluentinc/ksql/pull/5983#pullrequestreview-469164541", "createdAt": "2020-08-18T09:45:35Z", "commit": {"oid": "35adefbc98e002d2016eed1609e2c8f8661bfe99"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTo0NTo1M1rOHCL5FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTo1NDo0OFrOHCMNOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NDAzNw==", "bodyText": "nit: inline queryPublisher again.", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472054037", "createdAt": "2020-08-18T09:45:53Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/impl/QueryEndpoint.java", "diffHunk": "@@ -93,18 +94,20 @@ private QueryPublisher createPushQueryPublisher(\n   private QueryPublisher createPullQueryPublisher(\n       final Context context,\n       final ServiceContext serviceContext,\n-      final ConfiguredStatement<Query> statement\n+      final ConfiguredStatement<Query> statement,\n+      final long startTimeNanos\n   ) {\n     final PullQueryResult result = pullQueryExecutor.execute(\n-        statement, serviceContext, Optional.empty(), Optional.of(false));\n+        statement, serviceContext, Optional.of(false), startTimeNanos);\n     final TableRows tableRows = result.getTableRows();\n \n-    return new PullQueryPublisher(\n+    final QueryPublisher queryPublisher = new PullQueryPublisher(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35adefbc98e002d2016eed1609e2c8f8661bfe99"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NDkxOA==", "bodyText": "Probably better to keep this as KsqlExecutionContext and pass in the service Id... less coupling.", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472054918", "createdAt": "2020-08-18T09:47:21Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -136,20 +138,25 @@\n   private static final String VALID_WINDOW_BOUNDS_TYPES_STRING =\n       GrammaticalJoiner.and().join(VALID_WINDOW_BOUNDS_TYPES);\n \n-  private final KsqlExecutionContext executionContext;\n+  private final KsqlEngine ksqlEngine;\n   private final RoutingFilterFactory routingFilterFactory;\n   private final RateLimiter rateLimiter;\n+  private final Optional<PullQueryExecutorMetrics> pullQueryMetrics;\n \n   public PullQueryExecutor(\n-      final KsqlExecutionContext executionContext,\n+      final KsqlEngine ksqlEngine,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35adefbc98e002d2016eed1609e2c8f8661bfe99"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NTk5Mw==", "bodyText": "Why not just have:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  pullQueryMetrics.ifPresent(metrics ->\n          \n          \n            \n                      metrics.recordLatency(Time.SYSTEM.nanoseconds() - startTimeNanos));\n          \n          \n            \n                  pullQueryMetrics.ifPresent(metrics ->\n          \n          \n            \n                      metrics.recordLatency(startTimeNanos));\n          \n      \n    \n    \n  \n\nAnd change recordLatency to take the end time in ns, encapsulating the Time.SYSTEM.nanoseconds() into a single place...?", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472055993", "createdAt": "2020-08-18T09:49:15Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -223,13 +230,17 @@ public PullQueryResult execute(\n           contextStacker,\n           pullQueryMetrics);\n \n-      return handlePullQuery(\n+      final PullQueryResult result = handlePullQuery(\n           statement,\n-          executionContext,\n+          ksqlEngine,\n           serviceContext,\n           pullQueryContext,\n           routingOptions\n       );\n+\n+      pullQueryMetrics.ifPresent(metrics ->\n+          metrics.recordLatency(Time.SYSTEM.nanoseconds() - startTimeNanos));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35adefbc98e002d2016eed1609e2c8f8661bfe99"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NjU5MA==", "bodyText": "As suggested above, change to taking the end time, rather than the elapsed time?", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472056590", "createdAt": "2020-08-18T09:50:12Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetrics.java", "diffHunk": "@@ -78,12 +77,10 @@ public void recordRemoteRequests(final double value) {\n     this.remoteRequestsSensor.record(value);\n   }\n \n-  public void recordRate(final double value) {\n-    this.requestRateSensor.record(value);\n-  }\n-\n-  public void recordLatency(final double value) {\n-    this.latencySensor.record(value);\n+  public void recordLatency(final long nanoSeconds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35adefbc98e002d2016eed1609e2c8f8661bfe99"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1NzYzMA==", "bodyText": "Can we go with a non-zero start time please?  Stick it in a constant, e.g. START_TIME = 1234L. Update tests to use START_TIME.", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472057630", "createdAt": "2020-08-18T09:52:06Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/resources/streaming/PullQueryPublisherTest.java", "diffHunk": "@@ -80,10 +81,11 @@ public void setUp() {\n     publisher = new PullQueryPublisher(\n         serviceContext,\n         statement,\n-        pullQueryExecutor);\n+        pullQueryExecutor,\n+        0L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35adefbc98e002d2016eed1609e2c8f8661bfe99"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1Nzk5OQ==", "bodyText": "Would be good to test its passing an appropriate start time here. Can we inject a clock?", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472057999", "createdAt": "2020-08-18T09:52:42Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorTest.java", "diffHunk": "@@ -75,8 +74,7 @@ public void shouldThrowExceptionIfConfigDisabled() {\n       // When:\n       final Exception e = assertThrows(\n           KsqlException.class,\n-          () -> pullQueryExecutor.execute(query, engine.getServiceContext(), Optional.empty(),\n-              Optional.empty())\n+          () -> pullQueryExecutor.execute(query, engine.getServiceContext(), Optional.empty(), 0L)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35adefbc98e002d2016eed1609e2c8f8661bfe99"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA1OTE5NA==", "bodyText": "Rather than deleting this test, change it to:\n@Test\t\n  public void shouldRecordRequestRate() {\t\n    // Given:\t\n    pullMetrics. recordLatency(3000);\t\n   \n    // When:\t\n    final double rate = getMetricValue(\"-rate\");\t\n\n    // Then:\t\n    assertThat(rate, closeTo(0.03, 0.001));\t// <-- numbers need changing. \n  }\nOtherwise there's no test testing that the rate is updated when recordLatency is called!", "url": "https://github.com/confluentinc/ksql/pull/5983#discussion_r472059194", "createdAt": "2020-08-18T09:54:48Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/execution/PullQueryExecutorMetricsTest.java", "diffHunk": "@@ -112,22 +112,10 @@ public void shouldRecordErrorRate() {\n     assertThat(rate, closeTo(0.03, 0.001));\n   }\n \n-  @Test\n-  public void shouldRecordRequestRate() {\n-    // Given:\n-    pullMetrics.recordRate(3);\n-\n-    // When:\n-    final double rate = getMetricValue(\"-rate\");\n-\n-    // Then:\n-    assertThat(rate, closeTo(0.03, 0.001));\n-  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35adefbc98e002d2016eed1609e2c8f8661bfe99"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06834930c8dd703aeb12bf3ae3f181ba17cb15f9", "author": {"user": {"login": "AlanConfluent", "name": "Alan Sheinberg"}}, "url": "https://github.com/confluentinc/ksql/commit/06834930c8dd703aeb12bf3ae3f181ba17cb15f9", "committedDate": "2020-08-21T20:22:47Z", "message": "Feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aed898da72c51ecb01e967952ce8fa1d58f0827c", "author": {"user": {"login": "AlanConfluent", "name": "Alan Sheinberg"}}, "url": "https://github.com/confluentinc/ksql/commit/aed898da72c51ecb01e967952ce8fa1d58f0827c", "committedDate": "2020-08-21T20:49:15Z", "message": "Style"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4805, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}