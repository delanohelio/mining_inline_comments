{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NjYyMjYx", "number": 4390, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjoyMTo1NFrODbZJAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMDoyNTozOVrODbatjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDUwMDQ4OnYy", "diffSide": "RIGHT", "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/Analyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQyMjoyMTo1NFrOFi2sRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMToxMDoxMVrOFjEsKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MTk3Mw==", "bodyText": "This checks if the left and right alias are the same? Might want to consolidate it under the self join check. The current name is a bit misleading", "url": "https://github.com/confluentinc/ksql/pull/4390#discussion_r372091973", "createdAt": "2020-01-28T22:21:54Z", "author": {"login": "vpapavas"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/Analyzer.java", "diffHunk": "@@ -397,14 +387,95 @@ protected AstNode visitJoin(final Join node, final Void context) {\n       return null;\n     }\n \n-    private boolean validJoin(\n-        final SourceName leftName,\n-        final SourceName rightName,\n+    private void throwOnSelfJoin(final AliasedDataSource left, final AliasedDataSource right) {\n+      if (left.getDataSource().getName().equals(right.getDataSource().getName())) {\n+        throw new KsqlException(\n+            \"Can not join '\" + left.getDataSource().getName().toString(FormatOptions.noEscape())\n+                + \"' to '\" + right.getDataSource().getName().toString(FormatOptions.noEscape())\n+                + \"': self joins are not yet supported.\"\n+        );\n+      }\n+    }\n+\n+    private void throwOnIncompleteJoinCriteria(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb129a6e54f599bb000ea71dfb75feb93207c49f"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjMyMTMyMA==", "bodyText": "No, this checks the the two sides of the join criteria reference both sources, e.g. it rejects a join like:\n... FROM A JOIN B ON B.COL1 = B.COL2;\n\nNote: source A is not included in the join criteria.", "url": "https://github.com/confluentinc/ksql/pull/4390#discussion_r372321320", "createdAt": "2020-01-29T11:10:11Z", "author": {"login": "big-andy-coates"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/Analyzer.java", "diffHunk": "@@ -397,14 +387,95 @@ protected AstNode visitJoin(final Join node, final Void context) {\n       return null;\n     }\n \n-    private boolean validJoin(\n-        final SourceName leftName,\n-        final SourceName rightName,\n+    private void throwOnSelfJoin(final AliasedDataSource left, final AliasedDataSource right) {\n+      if (left.getDataSource().getName().equals(right.getDataSource().getName())) {\n+        throw new KsqlException(\n+            \"Can not join '\" + left.getDataSource().getName().toString(FormatOptions.noEscape())\n+                + \"' to '\" + right.getDataSource().getName().toString(FormatOptions.noEscape())\n+                + \"': self joins are not yet supported.\"\n+        );\n+      }\n+    }\n+\n+    private void throwOnIncompleteJoinCriteria(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjA5MTk3Mw=="}, "originalCommit": {"oid": "fb129a6e54f599bb000ea71dfb75feb93207c49f"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMDc1NzkxOnYy", "diffSide": "RIGHT", "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/Analyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMDoyNTozOVrOFi5LLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwMDoyOToyOFrOFi5O9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzMjY1NQ==", "bodyText": "Just to make sure: Session can only join with session whereas hopping and tumbling can join with each other interchangeably?", "url": "https://github.com/confluentinc/ksql/pull/4390#discussion_r372132655", "createdAt": "2020-01-29T00:25:39Z", "author": {"login": "vpapavas"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/Analyzer.java", "diffHunk": "@@ -397,14 +387,95 @@ protected AstNode visitJoin(final Join node, final Void context) {\n       return null;\n     }\n \n-    private boolean validJoin(\n-        final SourceName leftName,\n-        final SourceName rightName,\n+    private void throwOnSelfJoin(final AliasedDataSource left, final AliasedDataSource right) {\n+      if (left.getDataSource().getName().equals(right.getDataSource().getName())) {\n+        throw new KsqlException(\n+            \"Can not join '\" + left.getDataSource().getName().toString(FormatOptions.noEscape())\n+                + \"' to '\" + right.getDataSource().getName().toString(FormatOptions.noEscape())\n+                + \"': self joins are not yet supported.\"\n+        );\n+      }\n+    }\n+\n+    private void throwOnIncompleteJoinCriteria(\n+        final AliasedDataSource left,\n+        final AliasedDataSource right,\n         final SourceName leftExpressionSource,\n         final SourceName rightExpressionSource\n     ) {\n-      return ImmutableSet.of(leftExpressionSource, rightExpressionSource)\n-          .containsAll(ImmutableList.of(leftName, rightName));\n+      final boolean valid = ImmutableSet.of(leftExpressionSource, rightExpressionSource)\n+          .containsAll(ImmutableList.of(left.getAlias(), right.getAlias()));\n+\n+      if (!valid) {\n+        throw new KsqlException(\n+            \"Each side of the join must reference exactly one source and not the same source. \"\n+                + \"Left side references \" + leftExpressionSource\n+                + \" and right references \" + rightExpressionSource\n+        );\n+      }\n+    }\n+\n+    private void throwOnIncompatibleSourceWindowing(\n+        final AliasedDataSource left,\n+        final AliasedDataSource right\n+    ) {\n+      final Optional<WindowType> leftWindowType = left.getDataSource()\n+          .getKsqlTopic()\n+          .getKeyFormat()\n+          .getWindowInfo()\n+          .map(WindowInfo::getType);\n+\n+      final Optional<WindowType> rightWindowType = right.getDataSource()\n+          .getKsqlTopic()\n+          .getKeyFormat()\n+          .getWindowInfo()\n+          .map(WindowInfo::getType);\n+\n+      if (leftWindowType.isPresent() != rightWindowType.isPresent()) {\n+        throw windowedNonWindowedJoinException(left, right, leftWindowType, rightWindowType);\n+      }\n+\n+      if (!leftWindowType.isPresent()) {\n+        return;\n+      }\n+\n+      final WindowType leftWt = leftWindowType.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb129a6e54f599bb000ea71dfb75feb93207c49f"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzMzYyMw==", "bodyText": "Nevermind, tests are self-explanatory :)", "url": "https://github.com/confluentinc/ksql/pull/4390#discussion_r372133623", "createdAt": "2020-01-29T00:29:28Z", "author": {"login": "vpapavas"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/Analyzer.java", "diffHunk": "@@ -397,14 +387,95 @@ protected AstNode visitJoin(final Join node, final Void context) {\n       return null;\n     }\n \n-    private boolean validJoin(\n-        final SourceName leftName,\n-        final SourceName rightName,\n+    private void throwOnSelfJoin(final AliasedDataSource left, final AliasedDataSource right) {\n+      if (left.getDataSource().getName().equals(right.getDataSource().getName())) {\n+        throw new KsqlException(\n+            \"Can not join '\" + left.getDataSource().getName().toString(FormatOptions.noEscape())\n+                + \"' to '\" + right.getDataSource().getName().toString(FormatOptions.noEscape())\n+                + \"': self joins are not yet supported.\"\n+        );\n+      }\n+    }\n+\n+    private void throwOnIncompleteJoinCriteria(\n+        final AliasedDataSource left,\n+        final AliasedDataSource right,\n         final SourceName leftExpressionSource,\n         final SourceName rightExpressionSource\n     ) {\n-      return ImmutableSet.of(leftExpressionSource, rightExpressionSource)\n-          .containsAll(ImmutableList.of(leftName, rightName));\n+      final boolean valid = ImmutableSet.of(leftExpressionSource, rightExpressionSource)\n+          .containsAll(ImmutableList.of(left.getAlias(), right.getAlias()));\n+\n+      if (!valid) {\n+        throw new KsqlException(\n+            \"Each side of the join must reference exactly one source and not the same source. \"\n+                + \"Left side references \" + leftExpressionSource\n+                + \" and right references \" + rightExpressionSource\n+        );\n+      }\n+    }\n+\n+    private void throwOnIncompatibleSourceWindowing(\n+        final AliasedDataSource left,\n+        final AliasedDataSource right\n+    ) {\n+      final Optional<WindowType> leftWindowType = left.getDataSource()\n+          .getKsqlTopic()\n+          .getKeyFormat()\n+          .getWindowInfo()\n+          .map(WindowInfo::getType);\n+\n+      final Optional<WindowType> rightWindowType = right.getDataSource()\n+          .getKsqlTopic()\n+          .getKeyFormat()\n+          .getWindowInfo()\n+          .map(WindowInfo::getType);\n+\n+      if (leftWindowType.isPresent() != rightWindowType.isPresent()) {\n+        throw windowedNonWindowedJoinException(left, right, leftWindowType, rightWindowType);\n+      }\n+\n+      if (!leftWindowType.isPresent()) {\n+        return;\n+      }\n+\n+      final WindowType leftWt = leftWindowType.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjEzMjY1NQ=="}, "originalCommit": {"oid": "fb129a6e54f599bb000ea71dfb75feb93207c49f"}, "originalPosition": 109}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2295, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}