{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNjcyOTky", "number": 4278, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDoyNTo1M1rODXsx4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDo0NzoyN1rODXs-7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTc3NTA2OnYy", "diffSide": "RIGHT", "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDoyNTo1M1rOFdI6yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDoyNTo1M1rOFdI6yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA5OTE0Nw==", "bodyText": "Each step in the logical plan should have a unique node id, so we should pass in some prefix for that here and use it in buildRepartitionNode.", "url": "https://github.com/confluentinc/ksql/pull/4278#discussion_r366099147", "createdAt": "2020-01-14T00:25:53Z", "author": {"login": "rodesai"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "diffHunk": "@@ -286,10 +286,11 @@ private PlanNode buildSourceNode() {\n         new PlanNodeId(\"Join\"),\n         analysis.getSelectExpressions(),\n         joinInfo.get().getType(),\n-        leftSourceNode,\n-        rightSourceNode,\n-        joinInfo.get().getLeftJoinField(),\n-        joinInfo.get().getRightJoinField(),\n+        // it is always safe to build the repartition node - this operation will be\n+        // a no-op if a repartition is not required. if the source is a table, and\n+        // a repartition is needed, then an exception will be thrown\n+        buildRepartitionNode(leftSourceNode, joinInfo.get().getLeftJoinExpression()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68496bfb6b51c601bf1889393ffcb1b60388a45b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTc4Mzc1OnYy", "diffSide": "RIGHT", "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDozMDo1NVrOFdI_2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzoyMDo0NlrOFdfgfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMDQ0MA==", "bodyText": "I'm not sure adding repartition nodes in the logical plan is the right way to go here. IMO the transformation performed by the nodes in the logical plan should correspond closely to the semantics of the corresponding transformation in the query, e.g.\nRepartitionNode implements PARTITION BY\nProjectNode implements SELECT <ITEMS>\nFilterNode implements WHERE <expr>\nI see two problems in this particular case:\n\n\nThe semantics of the repartition for the join might be different from the semantics of the repartition needed to perform a PARTITION BY. A PARTITION BY transforms the schema in a very specific way that may not make sense here. It's kind of hard to give a concrete example since we're still deciding on PARTITION BY semantics. But one example might be adding default column names for the new key columns (depending on the semantics we choose for it). If PARTITION BY semantics support adding columns in the PARTITION BY, those columns should get some generated name. But it wouldn't make sense to add those columns for the repartition done here.\n\n\nThe repartition here is really an implementation detail of the join. One place that comes to mind where this might come up down the line: we've discussed changing the join semantics to preserve the original key of the left side. The current behavior is really exposing implementation details in our query semantics. If we did that it would be awkward to have the original rekey in these repartition nodes and the post-join rekey in JoinNode", "url": "https://github.com/confluentinc/ksql/pull/4278#discussion_r366100440", "createdAt": "2020-01-14T00:30:55Z", "author": {"login": "rodesai"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "diffHunk": "@@ -286,10 +286,11 @@ private PlanNode buildSourceNode() {\n         new PlanNodeId(\"Join\"),\n         analysis.getSelectExpressions(),\n         joinInfo.get().getType(),\n-        leftSourceNode,\n-        rightSourceNode,\n-        joinInfo.get().getLeftJoinField(),\n-        joinInfo.get().getRightJoinField(),\n+        // it is always safe to build the repartition node - this operation will be\n+        // a no-op if a repartition is not required. if the source is a table, and\n+        // a repartition is needed, then an exception will be thrown\n+        buildRepartitionNode(leftSourceNode, joinInfo.get().getLeftJoinExpression()),\n+        buildRepartitionNode(rightSourceNode, joinInfo.get().getRightJoinExpression()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68496bfb6b51c601bf1889393ffcb1b60388a45b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ2OTI0Ng==", "bodyText": "IMO the transformation performed by the nodes in the logical plan should correspond closely to the semantics of the corresponding transformation in the query\n\nMy knowledge on SQL theory and relational algebra is pretty minimal, but I feel that the fact that the nodes mirror the SQL statements is coincidental (a reflection of how new our codebase is) not characteristic. Most databases have a step that optimizes the logical plan independent of the physical plan so the output of the logical planner may only loosely resemble the original SQL query. Otherwise, why have the extra step to translate between the query nodes and the logical plan nodes?\nInstead, I think the logical nodes should define steps that describe the logical transformation and they should constitute the smallest reusable unit of logical work - otherwise reusing (composing) them and optimizing complex queries becomes unmanageable. The LogicalPlanner's job is to turn a SQL query into a logical plan.\n\nThe semantics of the repartition for the join might be different from the semantics of the repartition needed to perform a PARTITION BY ... If PARTITION BY semantics support adding columns in the PARTITION BY, those columns should get some generated name. But it wouldn't make sense to add those columns for the repartition done here.\n\nThis falls pretty well into my view of logical plan. In my view, if PARTITION BY supports adding columns then a single PARTITION BY should map to two logical nodes - a projection node (or a rename) and a partition node.\n\nThe repartition here is really an implementation detail of the join.\n\nI think things get a little tricky with PARTITION BY because it's the only step that spans the logical and the physical world. Really, we don't have a \"RekeyNode\" (which is perhaps a better name for the RepartitionNode) - but we have defined our Joins as only working on streams with the same key (and this a logical, not a physical, requirement).\n\nIf we did that it would be awkward to have the original rekey in these repartition nodes and the post-join rekey in JoinNode\n\nIt wouldn't be in the JoinNode - it would be yet another RepartitionNode (which, again, should probably be named RekeyNode).", "url": "https://github.com/confluentinc/ksql/pull/4278#discussion_r366469246", "createdAt": "2020-01-14T17:20:46Z", "author": {"login": "agavra"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "diffHunk": "@@ -286,10 +286,11 @@ private PlanNode buildSourceNode() {\n         new PlanNodeId(\"Join\"),\n         analysis.getSelectExpressions(),\n         joinInfo.get().getType(),\n-        leftSourceNode,\n-        rightSourceNode,\n-        joinInfo.get().getLeftJoinField(),\n-        joinInfo.get().getRightJoinField(),\n+        // it is always safe to build the repartition node - this operation will be\n+        // a no-op if a repartition is not required. if the source is a table, and\n+        // a repartition is needed, then an exception will be thrown\n+        buildRepartitionNode(leftSourceNode, joinInfo.get().getLeftJoinExpression()),\n+        buildRepartitionNode(rightSourceNode, joinInfo.get().getRightJoinExpression()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMDQ0MA=="}, "originalCommit": {"oid": "68496bfb6b51c601bf1889393ffcb1b60388a45b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTc4Njk2OnYy", "diffSide": "RIGHT", "path": "ksql-engine/src/main/java/io/confluent/ksql/structured/SchemaKStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDozMzoxMFrOFdJB5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDozMzoxMFrOFdJB5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMDk2Ng==", "bodyText": "We should just do this in SchemaKTable rather than checking the type here.", "url": "https://github.com/confluentinc/ksql/pull/4278#discussion_r366100966", "createdAt": "2020-01-14T00:33:10Z", "author": {"login": "rodesai"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/structured/SchemaKStream.java", "diffHunk": "@@ -334,6 +334,13 @@ KeyField findKeyField(final List<SelectExpression> selectExpressions) {\n       return (SchemaKStream<Struct>) this;\n     }\n \n+    if (this instanceof SchemaKTable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68496bfb6b51c601bf1889393ffcb1b60388a45b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTc4OTgyOnYy", "diffSide": "RIGHT", "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/ExpressionAnalyzer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDozNTowMlrOFdJDog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDozNTowMlrOFdJDog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMTQxMA==", "bodyText": "nit: we should rename this type to something more specific (maybe ColumnReferenceResolver?)", "url": "https://github.com/confluentinc/ksql/pull/4278#discussion_r366101410", "createdAt": "2020-01-14T00:35:02Z", "author": {"login": "rodesai"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -48,17 +55,27 @@\n     this.sourceSchemas = Objects.requireNonNull(sourceSchemas, \"sourceSchemas\");\n   }\n \n-  void analyzeExpression(final Expression expression, final boolean allowWindowMetaFields) {\n-    final Visitor visitor = new Visitor(allowWindowMetaFields);\n+  Set<ColumnRef> analyzeExpression(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68496bfb6b51c601bf1889393ffcb1b60388a45b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTc5MzUzOnYy", "diffSide": "RIGHT", "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/ExpressionAnalyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDozNzoyNVrOFdJF0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDo1MjoyNFrOFdlbkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMTk2OQ==", "bodyText": "You can use a TraversalExpressionVisitor here, which implements most of the traversal stuff for you", "url": "https://github.com/confluentinc/ksql/pull/4278#discussion_r366101969", "createdAt": "2020-01-14T00:37:25Z", "author": {"login": "rodesai"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -48,17 +55,27 @@\n     this.sourceSchemas = Objects.requireNonNull(sourceSchemas, \"sourceSchemas\");\n   }\n \n-  void analyzeExpression(final Expression expression, final boolean allowWindowMetaFields) {\n-    final Visitor visitor = new Visitor(allowWindowMetaFields);\n+  Set<ColumnRef> analyzeExpression(\n+      final Expression expression,\n+      final boolean allowWindowMetaFields\n+  ) {\n+    final Set<ColumnRef> referencedColumns = new HashSet<>();\n+    final Visitor visitor = new Visitor(allowWindowMetaFields, referencedColumns);\n     visitor.process(expression, null);\n+    return referencedColumns;\n   }\n \n   private final class Visitor extends VisitParentExpressionVisitor<Object, Object> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68496bfb6b51c601bf1889393ffcb1b60388a45b"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2NjI5MQ==", "bodyText": "nice!", "url": "https://github.com/confluentinc/ksql/pull/4278#discussion_r366566291", "createdAt": "2020-01-14T20:52:24Z", "author": {"login": "agavra"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/ExpressionAnalyzer.java", "diffHunk": "@@ -48,17 +55,27 @@\n     this.sourceSchemas = Objects.requireNonNull(sourceSchemas, \"sourceSchemas\");\n   }\n \n-  void analyzeExpression(final Expression expression, final boolean allowWindowMetaFields) {\n-    final Visitor visitor = new Visitor(allowWindowMetaFields);\n+  Set<ColumnRef> analyzeExpression(\n+      final Expression expression,\n+      final boolean allowWindowMetaFields\n+  ) {\n+    final Set<ColumnRef> referencedColumns = new HashSet<>();\n+    final Visitor visitor = new Visitor(allowWindowMetaFields, referencedColumns);\n     visitor.process(expression, null);\n+    return referencedColumns;\n   }\n \n   private final class Visitor extends VisitParentExpressionVisitor<Object, Object> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMTk2OQ=="}, "originalCommit": {"oid": "68496bfb6b51c601bf1889393ffcb1b60388a45b"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTc5Njg3OnYy", "diffSide": "RIGHT", "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/Analyzer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDozOToyMlrOFdJHzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTowNjoyN1rOFdlyVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMjQ3OA==", "bodyText": "If the column is not qualified, don't you need to check that it belongs to exactly one source, and include that source in the stream? If we are assuming all the columns are qualified then we should throw if the source is empty.", "url": "https://github.com/confluentinc/ksql/pull/4278#discussion_r366102478", "createdAt": "2020-01-14T00:39:22Z", "author": {"login": "rodesai"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/Analyzer.java", "diffHunk": "@@ -349,28 +349,66 @@ protected AstNode visitJoin(final Join node, final Void context) {\n         );\n       }\n \n-      final ColumnRef leftJoinField = getJoinFieldName(\n-          comparisonExpression,\n-          left.getAlias(),\n-          left.getDataSource().getSchema()\n-      );\n+      final Set<ColumnRef> colsUsedInLeft = new ExpressionAnalyzer(analysis.getFromSourceSchemas())\n+          .analyzeExpression(comparisonExpression.getLeft(), false);\n+      final Set<ColumnRef> colsUsedInRight = new ExpressionAnalyzer(analysis.getFromSourceSchemas())\n+          .analyzeExpression(comparisonExpression.getRight(), false);\n \n-      final ColumnRef rightJoinField = getJoinFieldName(\n-          comparisonExpression,\n-          right.getAlias(),\n-          right.getDataSource().getSchema()\n-      );\n+      final SourceName leftSourceName = getOnlySourceForJoin(\n+          comparisonExpression.getLeft(), comparisonExpression, colsUsedInLeft);\n+      final SourceName rightSourceName = getOnlySourceForJoin(\n+          comparisonExpression.getRight(), comparisonExpression, colsUsedInRight);\n+\n+      final boolean flipped = leftSourceName.equals(right.getAlias());\n+      if (!validJoin(flipped, left.getAlias(), right.getAlias(), leftSourceName, rightSourceName)) {\n+        throw new KsqlException(\n+            \"Each side of the join must reference exactly one source and not the same source. \"\n+                + \"Left side references \" + leftSourceName\n+                + \" and right references \" + rightSourceName\n+        );\n+      }\n \n       analysis.setJoin(new JoinInfo(\n-          leftJoinField,\n-          rightJoinField,\n+          flipped ? comparisonExpression.getRight() : comparisonExpression.getLeft(),\n+          flipped ? comparisonExpression.getLeft() : comparisonExpression.getRight(),\n           joinType,\n           node.getWithinExpression()\n       ));\n \n       return null;\n     }\n \n+    private boolean validJoin(\n+        final boolean flipped,\n+        final SourceName leftName,\n+        final SourceName rightName,\n+        final SourceName leftExpressionSource,\n+        final SourceName rightExpressionSource\n+    ) {\n+      final boolean validLeft = flipped || leftExpressionSource.equals(leftName);\n+      final boolean validRight = (flipped && rightExpressionSource.equals(leftName))\n+              || (!flipped && rightExpressionSource.equals(rightName));\n+      return validLeft && validRight;\n+    }\n+\n+    private SourceName getOnlySourceForJoin(\n+        final Expression exp,\n+        final ComparisonExpression join,\n+        final Set<ColumnRef> columnRefs\n+    ) {\n+      try {\n+        return columnRefs.stream()\n+            .map(ColumnRef::source)\n+            .filter(Optional::isPresent)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68496bfb6b51c601bf1889393ffcb1b60388a45b"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU3MjExOA==", "bodyText": "it is checked earlier that it belongs to only one source (in ExpressionAnalyzer#throwOnUnknownOrAmbiguousColumn) - I'll add a comment explaining this\nEDIT: actually, there's a possibility that they're all unambiguous but also not qualified. I'll make the ExpressionAnalyzer add the qualifier.", "url": "https://github.com/confluentinc/ksql/pull/4278#discussion_r366572118", "createdAt": "2020-01-14T21:06:27Z", "author": {"login": "agavra"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/Analyzer.java", "diffHunk": "@@ -349,28 +349,66 @@ protected AstNode visitJoin(final Join node, final Void context) {\n         );\n       }\n \n-      final ColumnRef leftJoinField = getJoinFieldName(\n-          comparisonExpression,\n-          left.getAlias(),\n-          left.getDataSource().getSchema()\n-      );\n+      final Set<ColumnRef> colsUsedInLeft = new ExpressionAnalyzer(analysis.getFromSourceSchemas())\n+          .analyzeExpression(comparisonExpression.getLeft(), false);\n+      final Set<ColumnRef> colsUsedInRight = new ExpressionAnalyzer(analysis.getFromSourceSchemas())\n+          .analyzeExpression(comparisonExpression.getRight(), false);\n \n-      final ColumnRef rightJoinField = getJoinFieldName(\n-          comparisonExpression,\n-          right.getAlias(),\n-          right.getDataSource().getSchema()\n-      );\n+      final SourceName leftSourceName = getOnlySourceForJoin(\n+          comparisonExpression.getLeft(), comparisonExpression, colsUsedInLeft);\n+      final SourceName rightSourceName = getOnlySourceForJoin(\n+          comparisonExpression.getRight(), comparisonExpression, colsUsedInRight);\n+\n+      final boolean flipped = leftSourceName.equals(right.getAlias());\n+      if (!validJoin(flipped, left.getAlias(), right.getAlias(), leftSourceName, rightSourceName)) {\n+        throw new KsqlException(\n+            \"Each side of the join must reference exactly one source and not the same source. \"\n+                + \"Left side references \" + leftSourceName\n+                + \" and right references \" + rightSourceName\n+        );\n+      }\n \n       analysis.setJoin(new JoinInfo(\n-          leftJoinField,\n-          rightJoinField,\n+          flipped ? comparisonExpression.getRight() : comparisonExpression.getLeft(),\n+          flipped ? comparisonExpression.getLeft() : comparisonExpression.getRight(),\n           joinType,\n           node.getWithinExpression()\n       ));\n \n       return null;\n     }\n \n+    private boolean validJoin(\n+        final boolean flipped,\n+        final SourceName leftName,\n+        final SourceName rightName,\n+        final SourceName leftExpressionSource,\n+        final SourceName rightExpressionSource\n+    ) {\n+      final boolean validLeft = flipped || leftExpressionSource.equals(leftName);\n+      final boolean validRight = (flipped && rightExpressionSource.equals(leftName))\n+              || (!flipped && rightExpressionSource.equals(rightName));\n+      return validLeft && validRight;\n+    }\n+\n+    private SourceName getOnlySourceForJoin(\n+        final Expression exp,\n+        final ComparisonExpression join,\n+        final Set<ColumnRef> columnRefs\n+    ) {\n+      try {\n+        return columnRefs.stream()\n+            .map(ColumnRef::source)\n+            .filter(Optional::isPresent)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwMjQ3OA=="}, "originalCommit": {"oid": "68496bfb6b51c601bf1889393ffcb1b60388a45b"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTgwODQ2OnYy", "diffSide": "RIGHT", "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/Analyzer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQwMDo0NzoyN1rOFdJO-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMTowMDoyOVrOFdlpAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwNDMxNA==", "bodyText": "if flipped is true, this doesn't check that the left expression source is the right data source. Maybe would be simpler to write as:\nfinal Set<SourceName> sourcesInCondition = ImmutableSet.of(leftExpressionSource, rightExpressionSource);\nreturn sourcesInCondition.contains(leftName) && sourcesInCondition.contains(rightName);", "url": "https://github.com/confluentinc/ksql/pull/4278#discussion_r366104314", "createdAt": "2020-01-14T00:47:27Z", "author": {"login": "rodesai"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/Analyzer.java", "diffHunk": "@@ -349,28 +349,66 @@ protected AstNode visitJoin(final Join node, final Void context) {\n         );\n       }\n \n-      final ColumnRef leftJoinField = getJoinFieldName(\n-          comparisonExpression,\n-          left.getAlias(),\n-          left.getDataSource().getSchema()\n-      );\n+      final Set<ColumnRef> colsUsedInLeft = new ExpressionAnalyzer(analysis.getFromSourceSchemas())\n+          .analyzeExpression(comparisonExpression.getLeft(), false);\n+      final Set<ColumnRef> colsUsedInRight = new ExpressionAnalyzer(analysis.getFromSourceSchemas())\n+          .analyzeExpression(comparisonExpression.getRight(), false);\n \n-      final ColumnRef rightJoinField = getJoinFieldName(\n-          comparisonExpression,\n-          right.getAlias(),\n-          right.getDataSource().getSchema()\n-      );\n+      final SourceName leftSourceName = getOnlySourceForJoin(\n+          comparisonExpression.getLeft(), comparisonExpression, colsUsedInLeft);\n+      final SourceName rightSourceName = getOnlySourceForJoin(\n+          comparisonExpression.getRight(), comparisonExpression, colsUsedInRight);\n+\n+      final boolean flipped = leftSourceName.equals(right.getAlias());\n+      if (!validJoin(flipped, left.getAlias(), right.getAlias(), leftSourceName, rightSourceName)) {\n+        throw new KsqlException(\n+            \"Each side of the join must reference exactly one source and not the same source. \"\n+                + \"Left side references \" + leftSourceName\n+                + \" and right references \" + rightSourceName\n+        );\n+      }\n \n       analysis.setJoin(new JoinInfo(\n-          leftJoinField,\n-          rightJoinField,\n+          flipped ? comparisonExpression.getRight() : comparisonExpression.getLeft(),\n+          flipped ? comparisonExpression.getLeft() : comparisonExpression.getRight(),\n           joinType,\n           node.getWithinExpression()\n       ));\n \n       return null;\n     }\n \n+    private boolean validJoin(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68496bfb6b51c601bf1889393ffcb1b60388a45b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU2OTcyOQ==", "bodyText": "it does check because flipped is represents exactly this (flipped is true only if the left expression is the right data source) but I agree your logic is much cleaner :)", "url": "https://github.com/confluentinc/ksql/pull/4278#discussion_r366569729", "createdAt": "2020-01-14T21:00:29Z", "author": {"login": "agavra"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/analyzer/Analyzer.java", "diffHunk": "@@ -349,28 +349,66 @@ protected AstNode visitJoin(final Join node, final Void context) {\n         );\n       }\n \n-      final ColumnRef leftJoinField = getJoinFieldName(\n-          comparisonExpression,\n-          left.getAlias(),\n-          left.getDataSource().getSchema()\n-      );\n+      final Set<ColumnRef> colsUsedInLeft = new ExpressionAnalyzer(analysis.getFromSourceSchemas())\n+          .analyzeExpression(comparisonExpression.getLeft(), false);\n+      final Set<ColumnRef> colsUsedInRight = new ExpressionAnalyzer(analysis.getFromSourceSchemas())\n+          .analyzeExpression(comparisonExpression.getRight(), false);\n \n-      final ColumnRef rightJoinField = getJoinFieldName(\n-          comparisonExpression,\n-          right.getAlias(),\n-          right.getDataSource().getSchema()\n-      );\n+      final SourceName leftSourceName = getOnlySourceForJoin(\n+          comparisonExpression.getLeft(), comparisonExpression, colsUsedInLeft);\n+      final SourceName rightSourceName = getOnlySourceForJoin(\n+          comparisonExpression.getRight(), comparisonExpression, colsUsedInRight);\n+\n+      final boolean flipped = leftSourceName.equals(right.getAlias());\n+      if (!validJoin(flipped, left.getAlias(), right.getAlias(), leftSourceName, rightSourceName)) {\n+        throw new KsqlException(\n+            \"Each side of the join must reference exactly one source and not the same source. \"\n+                + \"Left side references \" + leftSourceName\n+                + \" and right references \" + rightSourceName\n+        );\n+      }\n \n       analysis.setJoin(new JoinInfo(\n-          leftJoinField,\n-          rightJoinField,\n+          flipped ? comparisonExpression.getRight() : comparisonExpression.getLeft(),\n+          flipped ? comparisonExpression.getLeft() : comparisonExpression.getRight(),\n           joinType,\n           node.getWithinExpression()\n       ));\n \n       return null;\n     }\n \n+    private boolean validJoin(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjEwNDMxNA=="}, "originalCommit": {"oid": "68496bfb6b51c601bf1889393ffcb1b60388a45b"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2209, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}