{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMTQ0MzQw", "number": 6271, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMTo0MToxNlrOEmRlSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMTo0NDozN1rOEmRpDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTY5NDE3OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopicBackupImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMTo0MToxNlrOHWNYRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjo1NzowM1rOHXDtaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0OTkyNg==", "bodyText": "Would be good to use the same message here as the one in the LOG.warn().", "url": "https://github.com/confluentinc/ksql/pull/6271#discussion_r493049926", "createdAt": "2020-09-22T21:41:16Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopicBackupImpl.java", "diffHunk": "@@ -152,17 +152,18 @@ public void writeRecord(final ConsumerRecord<byte[], byte[]> record) {\n \n   void writeCommandToBackup(final ConsumerRecord<CommandId, Command> record) {\n     if (corruptionDetected) {\n-      LOG.warn(\"Failure to write command topic data to backup. \"\n-          + \"Corruption detected in command topic.\");\n-      return;\n+      throw new KsqlServerException(\n+          \"Failed to write record due to out of sync command topic and backup file: \" + record);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "466d479a095a4f34079bae927bd79ae6aa6e14d6"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0MDA3NQ==", "bodyText": "done", "url": "https://github.com/confluentinc/ksql/pull/6271#discussion_r493940075", "createdAt": "2020-09-23T22:57:03Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopicBackupImpl.java", "diffHunk": "@@ -152,17 +152,18 @@ public void writeRecord(final ConsumerRecord<byte[], byte[]> record) {\n \n   void writeCommandToBackup(final ConsumerRecord<CommandId, Command> record) {\n     if (corruptionDetected) {\n-      LOG.warn(\"Failure to write command topic data to backup. \"\n-          + \"Corruption detected in command topic.\");\n-      return;\n+      throw new KsqlServerException(\n+          \"Failed to write record due to out of sync command topic and backup file: \" + record);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0OTkyNg=="}, "originalCommit": {"oid": "466d479a095a4f34079bae927bd79ae6aa6e14d6"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTcwMzgzOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopicBackupImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMTo0NDozN1rOHWNeHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjo1Njo1OVrOHXDtTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1MTQyMw==", "bodyText": "Throw the exception here, otherwise the first time it will only log.", "url": "https://github.com/confluentinc/ksql/pull/6271#discussion_r493051423", "createdAt": "2020-09-22T21:44:37Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopicBackupImpl.java", "diffHunk": "@@ -152,17 +152,18 @@ public void writeRecord(final ConsumerRecord<byte[], byte[]> record) {\n \n   void writeCommandToBackup(final ConsumerRecord<CommandId, Command> record) {\n     if (corruptionDetected) {\n-      LOG.warn(\"Failure to write command topic data to backup. \"\n-          + \"Corruption detected in command topic.\");\n-      return;\n+      throw new KsqlServerException(\n+          \"Failed to write record due to out of sync command topic and backup file: \" + record);\n     }\n \n     if (isRestoring()) {\n       if (isRecordInLatestReplay(record)) {\n         // Ignore backup because record was already replayed\n         return;\n       } else {\n-        LOG.info(\"Previous command topic backup does not match the new command topic data.\");\n+        LOG.warn(\"Backup is out of sync with the current command topic. \"\n+            + \"Backups will not work until the previous command topic is \"\n+            + \"restored or all backup files are deleted.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "466d479a095a4f34079bae927bd79ae6aa6e14d6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1MTkwOA==", "bodyText": "Btw, do not log this message once you throw the exception. The log should be done by the method who catches the exception.", "url": "https://github.com/confluentinc/ksql/pull/6271#discussion_r493051908", "createdAt": "2020-09-22T21:45:43Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopicBackupImpl.java", "diffHunk": "@@ -152,17 +152,18 @@ public void writeRecord(final ConsumerRecord<byte[], byte[]> record) {\n \n   void writeCommandToBackup(final ConsumerRecord<CommandId, Command> record) {\n     if (corruptionDetected) {\n-      LOG.warn(\"Failure to write command topic data to backup. \"\n-          + \"Corruption detected in command topic.\");\n-      return;\n+      throw new KsqlServerException(\n+          \"Failed to write record due to out of sync command topic and backup file: \" + record);\n     }\n \n     if (isRestoring()) {\n       if (isRecordInLatestReplay(record)) {\n         // Ignore backup because record was already replayed\n         return;\n       } else {\n-        LOG.info(\"Previous command topic backup does not match the new command topic data.\");\n+        LOG.warn(\"Backup is out of sync with the current command topic. \"\n+            + \"Backups will not work until the previous command topic is \"\n+            + \"restored or all backup files are deleted.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1MTQyMw=="}, "originalCommit": {"oid": "466d479a095a4f34079bae927bd79ae6aa6e14d6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzk0MDA0NQ==", "bodyText": "done", "url": "https://github.com/confluentinc/ksql/pull/6271#discussion_r493940045", "createdAt": "2020-09-23T22:56:59Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/CommandTopicBackupImpl.java", "diffHunk": "@@ -152,17 +152,18 @@ public void writeRecord(final ConsumerRecord<byte[], byte[]> record) {\n \n   void writeCommandToBackup(final ConsumerRecord<CommandId, Command> record) {\n     if (corruptionDetected) {\n-      LOG.warn(\"Failure to write command topic data to backup. \"\n-          + \"Corruption detected in command topic.\");\n-      return;\n+      throw new KsqlServerException(\n+          \"Failed to write record due to out of sync command topic and backup file: \" + record);\n     }\n \n     if (isRestoring()) {\n       if (isRecordInLatestReplay(record)) {\n         // Ignore backup because record was already replayed\n         return;\n       } else {\n-        LOG.info(\"Previous command topic backup does not match the new command topic data.\");\n+        LOG.warn(\"Backup is out of sync with the current command topic. \"\n+            + \"Backups will not work until the previous command topic is \"\n+            + \"restored or all backup files are deleted.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA1MTQyMw=="}, "originalCommit": {"oid": "466d479a095a4f34079bae927bd79ae6aa6e14d6"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2823, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}