{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5Nzc1ODkw", "number": 5198, "title": "fix: use schema in annotation as schema provider if present", "bodyText": "fixes #5164\nreplaces #5190\nDescription\nThis change (1) eagerly resolves the return type if possible to fail early if a function cannot be loaded and (2) skips resolving the java type to a sql type if the udf annotation contains the schema field.\nThanks @stevenpyzhang for exploring the issue!\nTesting done\nLots of new unit tests and end-to-end testing with the UDF linked in the ticket.\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-04-27T22:13:57Z", "url": "https://github.com/confluentinc/ksql/pull/5198", "merged": true, "mergeCommit": {"oid": "812f8a7e0319d0c809ba3b15ffc6ea594c3541ca"}, "closed": true, "closedAt": "2020-04-28T17:09:11Z", "author": {"login": "agavra"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcb3AzzABqjMyNzc4NDcyNjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccGbjKgH2gAyNDA5Nzc1ODkwOjYzNmU3ZDBhYTRhOWU0MzBiNTBkNTM3NTY5MTUwMmZmZmVhZmVmZGU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e96483685362fbcc2cd514c40fd19f96a85ba1e", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/8e96483685362fbcc2cd514c40fd19f96a85ba1e", "committedDate": "2020-04-27T22:12:55Z", "message": "fix: use schema in annotation as schema provider if present"}, "afterCommit": {"oid": "ddf502a26a0bda52406409195a5f0df03011ec60", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/ddf502a26a0bda52406409195a5f0df03011ec60", "committedDate": "2020-04-27T22:27:32Z", "message": "fix: use schema in annotation as schema provider if present"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b155ebb8c4c23a4d4cf285bc9dda9a5b9321660", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/8b155ebb8c4c23a4d4cf285bc9dda9a5b9321660", "committedDate": "2020-04-27T23:16:46Z", "message": "fix: use schema in annotation as schema provider if present"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ddf502a26a0bda52406409195a5f0df03011ec60", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/ddf502a26a0bda52406409195a5f0df03011ec60", "committedDate": "2020-04-27T22:27:32Z", "message": "fix: use schema in annotation as schema provider if present"}, "afterCommit": {"oid": "8b155ebb8c4c23a4d4cf285bc9dda9a5b9321660", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/8b155ebb8c4c23a4d4cf285bc9dda9a5b9321660", "committedDate": "2020-04-27T23:16:46Z", "message": "fix: use schema in annotation as schema provider if present"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNjc0NzYy", "url": "https://github.com/confluentinc/ksql/pull/5198#pullrequestreview-401674762", "createdAt": "2020-04-28T09:49:32Z", "commit": {"oid": "8b155ebb8c4c23a4d4cf285bc9dda9a5b9321660"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTo0OTozMlrOGNL-bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwOTo1MjozN1rOGNMFgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4MDg3Ng==", "bodyText": "Is it worth parsing once, and failing early, rather than on each call?  Or is this not really an issue?", "url": "https://github.com/confluentinc/ksql/pull/5198#discussion_r416480876", "createdAt": "2020-04-28T09:49:32Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/FunctionLoaderUtils.java", "diffHunk": "@@ -180,17 +180,27 @@ static ParamType getReturnType(\n   static SchemaProvider handleUdfReturnSchema(\n       final Class theClass,\n       final ParamType javaReturnSchema,\n+      final String annotationSchema,\n+      final SqlTypeParser parser,\n       final String schemaProviderFunctionName,\n       final String functionName,\n       final boolean isVariadic\n   ) {\n     final Function<List<SqlType>, SqlType> schemaProvider;\n-    if (!schemaProviderFunctionName.equals(\"\")) {\n+    if (!Udf.NO_SCHEMA_PROVIDER.equals(schemaProviderFunctionName)) {\n       schemaProvider = handleUdfSchemaProviderAnnotation(\n           schemaProviderFunctionName, theClass, functionName);\n-    } else if (javaReturnSchema instanceof DecimalType) {\n-      throw new KsqlException(String.format(\"Cannot load UDF %s. BigDecimal return type \"\n-          + \"is not supported without a schema provider method.\", functionName));\n+    } else if (!Udf.NO_SCHEMA.equals(annotationSchema)) {\n+      schemaProvider = args -> parser.parse(annotationSchema).getSqlType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b155ebb8c4c23a4d4cf285bc9dda9a5b9321660"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4MTI0OQ==", "bodyText": "This method is getting large - consider moving this code into its own function?", "url": "https://github.com/confluentinc/ksql/pull/5198#discussion_r416481249", "createdAt": "2020-04-28T09:50:13Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/FunctionLoaderUtils.java", "diffHunk": "@@ -180,17 +180,27 @@ static ParamType getReturnType(\n   static SchemaProvider handleUdfReturnSchema(\n       final Class theClass,\n       final ParamType javaReturnSchema,\n+      final String annotationSchema,\n+      final SqlTypeParser parser,\n       final String schemaProviderFunctionName,\n       final String functionName,\n       final boolean isVariadic\n   ) {\n     final Function<List<SqlType>, SqlType> schemaProvider;\n-    if (!schemaProviderFunctionName.equals(\"\")) {\n+    if (!Udf.NO_SCHEMA_PROVIDER.equals(schemaProviderFunctionName)) {\n       schemaProvider = handleUdfSchemaProviderAnnotation(\n           schemaProviderFunctionName, theClass, functionName);\n-    } else if (javaReturnSchema instanceof DecimalType) {\n-      throw new KsqlException(String.format(\"Cannot load UDF %s. BigDecimal return type \"\n-          + \"is not supported without a schema provider method.\", functionName));\n+    } else if (!Udf.NO_SCHEMA.equals(annotationSchema)) {\n+      schemaProvider = args -> parser.parse(annotationSchema).getSqlType();\n+    } else if (!GenericsUtil.hasGenerics(javaReturnSchema)) {\n+      final SqlType sqlType;\n+      try {\n+        sqlType = SchemaConverters.functionToSqlConverter().toSqlType(javaReturnSchema);\n+      } catch (final Exception e) {\n+        throw new KsqlException(\"Cannot load UDF \" + functionName + \". \"\n+            + javaReturnSchema + \" return type is not supported without a schema annotation.\");\n+      }\n+      schemaProvider = args -> sqlType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b155ebb8c4c23a4d4cf285bc9dda9a5b9321660"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQ4MjY4OA==", "bodyText": "Either a schema or schemaProvider is required, right?\n... and users may find 'schema annotation;' confusing, given the 'schema' is the name of a property of the annotation, not the name of the annotation.\nMaybe:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    throw new KsqlException(\"Cannot load UDF \" + functionName + \". \"\n          \n          \n            \n                        + javaReturnSchema + \" return type is not supported without a schema annotation.\");\n          \n          \n            \n                    throw new KsqlException(\"Cannot load UDF \" + functionName + \". \"\n          \n          \n            \n                        + javaReturnSchema + \" return type is not supported without either a schema or schemaProvider set in the annotation.\");\n          \n      \n    \n    \n  \n\nThough even better would be to pass down the type of the annotation so that the error could be explicit and say set in the @Udf annotation, or in the @Udtf annotation etc.", "url": "https://github.com/confluentinc/ksql/pull/5198#discussion_r416482688", "createdAt": "2020-04-28T09:52:37Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/FunctionLoaderUtils.java", "diffHunk": "@@ -180,17 +180,27 @@ static ParamType getReturnType(\n   static SchemaProvider handleUdfReturnSchema(\n       final Class theClass,\n       final ParamType javaReturnSchema,\n+      final String annotationSchema,\n+      final SqlTypeParser parser,\n       final String schemaProviderFunctionName,\n       final String functionName,\n       final boolean isVariadic\n   ) {\n     final Function<List<SqlType>, SqlType> schemaProvider;\n-    if (!schemaProviderFunctionName.equals(\"\")) {\n+    if (!Udf.NO_SCHEMA_PROVIDER.equals(schemaProviderFunctionName)) {\n       schemaProvider = handleUdfSchemaProviderAnnotation(\n           schemaProviderFunctionName, theClass, functionName);\n-    } else if (javaReturnSchema instanceof DecimalType) {\n-      throw new KsqlException(String.format(\"Cannot load UDF %s. BigDecimal return type \"\n-          + \"is not supported without a schema provider method.\", functionName));\n+    } else if (!Udf.NO_SCHEMA.equals(annotationSchema)) {\n+      schemaProvider = args -> parser.parse(annotationSchema).getSqlType();\n+    } else if (!GenericsUtil.hasGenerics(javaReturnSchema)) {\n+      final SqlType sqlType;\n+      try {\n+        sqlType = SchemaConverters.functionToSqlConverter().toSqlType(javaReturnSchema);\n+      } catch (final Exception e) {\n+        throw new KsqlException(\"Cannot load UDF \" + functionName + \". \"\n+            + javaReturnSchema + \" return type is not supported without a schema annotation.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b155ebb8c4c23a4d4cf285bc9dda9a5b9321660"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "636e7d0aa4a9e430b50d5375691502fffeafefde", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/636e7d0aa4a9e430b50d5375691502fffeafefde", "committedDate": "2020-04-28T16:25:29Z", "message": "chore: address andy's comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4799, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}