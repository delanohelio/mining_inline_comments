{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MTQ5MzQ1", "number": 6013, "title": "refactor: break up InsertValuesExecutor for easier reuse in testing tool", "bodyText": "Description\nThis PR breaks up the InsertValuesExecutor into separate classes and adds more unit testing. The motivation is because I plan to reuse GenericRecordFactory for YATT (see #5965).\nTesting done\nNo functional changes, all copy-pasta - but I added unit tests anyway.\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-08-13T05:07:15Z", "url": "https://github.com/confluentinc/ksql/pull/6013", "merged": true, "mergeCommit": {"oid": "ee5701a93f0d5d8acded39b5ff5326f78f52466c"}, "closed": true, "closedAt": "2020-08-13T16:59:10Z", "author": {"login": "agavra"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-Y1RrAH2gAyNDY3MTQ5MzQ1OmY0MjgzOWIyNjllZDljYzQ5ZjgyNjkxODRlMWIwNjhlNzgyYjM3NDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-iEN_AH2gAyNDY3MTQ5MzQ1OjAyM2M3MWI5MmJhYmNjMjk5OGFkOWI4MjRiZmQ3NmM2NDUzNDU4NjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f42839b269ed9cc49f8269184e1b068e782b3742", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/f42839b269ed9cc49f8269184e1b068e782b3742", "committedDate": "2020-08-13T05:05:18Z", "message": "refactor: break up InsertValuesExecutor for easier reuse in testing tool"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2Nzg0NTA2", "url": "https://github.com/confluentinc/ksql/pull/6013#pullrequestreview-466784506", "createdAt": "2020-08-13T13:55:05Z", "commit": {"oid": "f42839b269ed9cc49f8269184e1b068e782b3742"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzo1NTowNVrOHAMpfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNDowMToxOVrOHAM7kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk2OTI3Ng==", "bodyText": "API of this class could be cleaner.  Currently its exposing implementation detail on its API, i.e. it's extending VisitParentExpressionVisitor.\nBetter / cleaner to instead have the visitor as an internal implementation detail and clean, documented, API for this class:\nclass GenericExpressionResolver {\n   \n  .... \n\n   public Object resolve(final Expression expression) {\n      return new Visitor().process(expression, null);\n   }\n\n   private static class Visitor extends VisitParentExpressionVisitor<Object, Void> {\n      ...\n   }\n}", "url": "https://github.com/confluentinc/ksql/pull/6013#discussion_r469969276", "createdAt": "2020-08-13T13:55:05Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/generic/GenericExpressionResolver.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.engine.generic;\n+\n+import com.google.common.collect.Iterables;\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.codegen.CodeGenRunner;\n+import io.confluent.ksql.execution.codegen.ExpressionMetadata;\n+import io.confluent.ksql.execution.expression.tree.Expression;\n+import io.confluent.ksql.execution.expression.tree.NullLiteral;\n+import io.confluent.ksql.execution.expression.tree.VisitParentExpressionVisitor;\n+import io.confluent.ksql.function.FunctionRegistry;\n+import io.confluent.ksql.logging.processing.ProcessingLogger;\n+import io.confluent.ksql.logging.processing.RecordProcessingError;\n+import io.confluent.ksql.name.ColumnName;\n+import io.confluent.ksql.schema.ksql.DefaultSqlValueCoercer;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.SchemaConverters;\n+import io.confluent.ksql.schema.ksql.SqlValueCoercer;\n+import io.confluent.ksql.schema.ksql.types.SqlBaseType;\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.util.KsqlConfig;\n+import io.confluent.ksql.util.KsqlException;\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Builds a Java object, coerced to the desired type, from an arbitrary SQL\n+ * expression that does not reference any source data.\n+ */\n+class GenericExpressionResolver extends VisitParentExpressionVisitor<Object, Void> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42839b269ed9cc49f8269184e1b068e782b3742"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk3MDE1MA==", "bodyText": "wonder if this is a common enough pattern to warrant a singular CodeGenRunner.compileExpression helper method...", "url": "https://github.com/confluentinc/ksql/pull/6013#discussion_r469970150", "createdAt": "2020-08-13T13:56:09Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/generic/GenericExpressionResolver.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.engine.generic;\n+\n+import com.google.common.collect.Iterables;\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.codegen.CodeGenRunner;\n+import io.confluent.ksql.execution.codegen.ExpressionMetadata;\n+import io.confluent.ksql.execution.expression.tree.Expression;\n+import io.confluent.ksql.execution.expression.tree.NullLiteral;\n+import io.confluent.ksql.execution.expression.tree.VisitParentExpressionVisitor;\n+import io.confluent.ksql.function.FunctionRegistry;\n+import io.confluent.ksql.logging.processing.ProcessingLogger;\n+import io.confluent.ksql.logging.processing.RecordProcessingError;\n+import io.confluent.ksql.name.ColumnName;\n+import io.confluent.ksql.schema.ksql.DefaultSqlValueCoercer;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.SchemaConverters;\n+import io.confluent.ksql.schema.ksql.SqlValueCoercer;\n+import io.confluent.ksql.schema.ksql.types.SqlBaseType;\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.util.KsqlConfig;\n+import io.confluent.ksql.util.KsqlException;\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Builds a Java object, coerced to the desired type, from an arbitrary SQL\n+ * expression that does not reference any source data.\n+ */\n+class GenericExpressionResolver extends VisitParentExpressionVisitor<Object, Void> {\n+\n+  private static final Supplier<String> IGNORED_MSG = () -> \"\";\n+  private static final ProcessingLogger THROWING_LOGGER = errorMessage -> {\n+    throw new KsqlException(((RecordProcessingError) errorMessage).getMessage());\n+  };\n+\n+  private final SqlType fieldType;\n+  private final ColumnName fieldName;\n+  private final LogicalSchema schema;\n+  private final SqlValueCoercer sqlValueCoercer = DefaultSqlValueCoercer.INSTANCE;\n+  private final FunctionRegistry functionRegistry;\n+  private final KsqlConfig config;\n+\n+  GenericExpressionResolver(\n+      final SqlType fieldType,\n+      final ColumnName fieldName,\n+      final LogicalSchema schema,\n+      final FunctionRegistry functionRegistry,\n+      final KsqlConfig config\n+  ) {\n+    this.fieldType = Objects.requireNonNull(fieldType, \"fieldType\");\n+    this.fieldName = Objects.requireNonNull(fieldName, \"fieldName\");\n+    this.schema = Objects.requireNonNull(schema, \"schema\");\n+    this.functionRegistry = Objects.requireNonNull(functionRegistry, \"functionRegistry\");\n+    this.config = Objects.requireNonNull(config, \"config\");\n+  }\n+\n+  @Override\n+  protected Object visitExpression(final Expression expression, final Void context) {\n+    final ExpressionMetadata metadata =\n+        Iterables.getOnlyElement(\n+            CodeGenRunner.compileExpressions(\n+                Stream.of(expression),\n+                \"insert value\",\n+                schema,\n+                config,\n+                functionRegistry)\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42839b269ed9cc49f8269184e1b068e782b3742"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk3MDUxNw==", "bodyText": "Can the code be enhanced to throw on a column reference? Or does it already?", "url": "https://github.com/confluentinc/ksql/pull/6013#discussion_r469970517", "createdAt": "2020-08-13T13:56:38Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/generic/GenericExpressionResolver.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.engine.generic;\n+\n+import com.google.common.collect.Iterables;\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.codegen.CodeGenRunner;\n+import io.confluent.ksql.execution.codegen.ExpressionMetadata;\n+import io.confluent.ksql.execution.expression.tree.Expression;\n+import io.confluent.ksql.execution.expression.tree.NullLiteral;\n+import io.confluent.ksql.execution.expression.tree.VisitParentExpressionVisitor;\n+import io.confluent.ksql.function.FunctionRegistry;\n+import io.confluent.ksql.logging.processing.ProcessingLogger;\n+import io.confluent.ksql.logging.processing.RecordProcessingError;\n+import io.confluent.ksql.name.ColumnName;\n+import io.confluent.ksql.schema.ksql.DefaultSqlValueCoercer;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.SchemaConverters;\n+import io.confluent.ksql.schema.ksql.SqlValueCoercer;\n+import io.confluent.ksql.schema.ksql.types.SqlBaseType;\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.util.KsqlConfig;\n+import io.confluent.ksql.util.KsqlException;\n+import java.util.Objects;\n+import java.util.function.Supplier;\n+import java.util.stream.Stream;\n+\n+/**\n+ * Builds a Java object, coerced to the desired type, from an arbitrary SQL\n+ * expression that does not reference any source data.\n+ */\n+class GenericExpressionResolver extends VisitParentExpressionVisitor<Object, Void> {\n+\n+  private static final Supplier<String> IGNORED_MSG = () -> \"\";\n+  private static final ProcessingLogger THROWING_LOGGER = errorMessage -> {\n+    throw new KsqlException(((RecordProcessingError) errorMessage).getMessage());\n+  };\n+\n+  private final SqlType fieldType;\n+  private final ColumnName fieldName;\n+  private final LogicalSchema schema;\n+  private final SqlValueCoercer sqlValueCoercer = DefaultSqlValueCoercer.INSTANCE;\n+  private final FunctionRegistry functionRegistry;\n+  private final KsqlConfig config;\n+\n+  GenericExpressionResolver(\n+      final SqlType fieldType,\n+      final ColumnName fieldName,\n+      final LogicalSchema schema,\n+      final FunctionRegistry functionRegistry,\n+      final KsqlConfig config\n+  ) {\n+    this.fieldType = Objects.requireNonNull(fieldType, \"fieldType\");\n+    this.fieldName = Objects.requireNonNull(fieldName, \"fieldName\");\n+    this.schema = Objects.requireNonNull(schema, \"schema\");\n+    this.functionRegistry = Objects.requireNonNull(functionRegistry, \"functionRegistry\");\n+    this.config = Objects.requireNonNull(config, \"config\");\n+  }\n+\n+  @Override\n+  protected Object visitExpression(final Expression expression, final Void context) {\n+    final ExpressionMetadata metadata =\n+        Iterables.getOnlyElement(\n+            CodeGenRunner.compileExpressions(\n+                Stream.of(expression),\n+                \"insert value\",\n+                schema,\n+                config,\n+                functionRegistry)\n+        );\n+\n+    // we expect no column references, so we can pass in an empty generic row", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42839b269ed9cc49f8269184e1b068e782b3742"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk3MzkwNQ==", "bodyText": "nit: never used.", "url": "https://github.com/confluentinc/ksql/pull/6013#discussion_r469973905", "createdAt": "2020-08-13T14:01:19Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/generic/GenericRecordFactory.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.engine.generic;\n+\n+import com.google.common.collect.Streams;\n+import io.confluent.ksql.GenericRow;\n+import io.confluent.ksql.execution.expression.tree.Expression;\n+import io.confluent.ksql.function.FunctionRegistry;\n+import io.confluent.ksql.metastore.model.DataSource;\n+import io.confluent.ksql.metastore.model.DataSource.DataSourceType;\n+import io.confluent.ksql.name.ColumnName;\n+import io.confluent.ksql.schema.ksql.Column;\n+import io.confluent.ksql.schema.ksql.LogicalSchema;\n+import io.confluent.ksql.schema.ksql.SystemColumns;\n+import io.confluent.ksql.schema.ksql.types.SqlType;\n+import io.confluent.ksql.util.KsqlConfig;\n+import io.confluent.ksql.util.KsqlException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.function.LongSupplier;\n+import java.util.stream.Collectors;\n+import org.apache.kafka.connect.data.Struct;\n+\n+/**\n+ * Builds {@link KsqlGenericRecord} from lists of expressions/column names,\n+ * coercing any values to the correct java type using the schema of the supplied\n+ * {@link DataSource}.\n+ */\n+public class GenericRecordFactory {\n+\n+  private final KsqlConfig config;\n+  private final FunctionRegistry functionRegistry;\n+  private final LongSupplier clock;\n+\n+  public GenericRecordFactory(\n+      final KsqlConfig config,\n+      final FunctionRegistry functionRegistry\n+  ) {\n+    this(config, functionRegistry, System::currentTimeMillis);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f42839b269ed9cc49f8269184e1b068e782b3742"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "023c71b92babcc2998ad9b824bfd76c645345862", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/023c71b92babcc2998ad9b824bfd76c645345862", "committedDate": "2020-08-13T15:50:46Z", "message": "chore: address minor comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4683, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}