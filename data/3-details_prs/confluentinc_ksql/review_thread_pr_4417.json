{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NzU1NTY5", "number": 4417, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMToyMDowNlrODcXGRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDo0ODo1MFrODclyHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMDY1MTU3OnYy", "diffSide": "RIGHT", "path": "ksql-rest-model/src/main/java/io/confluent/ksql/rest/entity/StateStoreLags.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMToyMDowNlrOFkYQeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQyMTo0MTo0OVrOFkYvSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY5MDQ4OQ==", "bodyText": "nit: remove a", "url": "https://github.com/confluentinc/ksql/pull/4417#discussion_r373690489", "createdAt": "2020-01-31T21:20:06Z", "author": {"login": "vpapavas"}, "path": "ksql-rest-model/src/main/java/io/confluent/ksql/rest/entity/StateStoreLags.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.entity;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.errorprone.annotations.Immutable;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a the lags associated with a particular state store on a particular host.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f2ef0fb2cb752d796e1cf5c7e36f0f5b4b98278"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY5ODM3Ng==", "bodyText": "Removed!", "url": "https://github.com/confluentinc/ksql/pull/4417#discussion_r373698376", "createdAt": "2020-01-31T21:41:49Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-model/src/main/java/io/confluent/ksql/rest/entity/StateStoreLags.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.entity;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.errorprone.annotations.Immutable;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a the lags associated with a particular state store on a particular host.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY5MDQ4OQ=="}, "originalCommit": {"oid": "6f2ef0fb2cb752d796e1cf5c7e36f0f5b4b98278"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzA0MjQ2OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/LagReportingAgent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDo0MzozOFrOFktINw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDowMTowNFrOFk-IRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzMjQzOQ==", "bodyText": "why not more EMPTY_STATE_STORE_LAGS into getStateStoreLags?", "url": "https://github.com/confluentinc/ksql/pull/4417#discussion_r374032439", "createdAt": "2020-02-03T10:43:38Z", "author": {"login": "big-andy-coates"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/LagReportingAgent.java", "diffHunk": "@@ -174,9 +172,9 @@ public void receiveHostLag(final LagReportingMessage lagReportingMessage) {\n       final HostInfo host, final QueryStateStoreId queryStateStoreId, final int partition) {\n     final Set<HostInfo> aliveHosts = aliveHostsRef.get();\n     final LagInfoEntity lagInfo = receivedLagInfo\n-        .getOrDefault(host, EMPTY_HOST_LAG_INFO).getLagInfo()\n-        .getOrDefault(queryStateStoreId, Collections.emptyMap())\n-        .getOrDefault(partition, null);\n+        .getOrDefault(host, EMPTY_HOST_STORE_LAGS)\n+        .getStateStoreLagsOrDefault(queryStateStoreId, EMPTY_STATE_STORE_LAGS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d24a74b9c8f9758b82fed420c98a352b42d6b89"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMDk4MQ==", "bodyText": "I'll change it to return an optional, as suggested below.", "url": "https://github.com/confluentinc/ksql/pull/4417#discussion_r374310981", "createdAt": "2020-02-03T20:01:04Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/LagReportingAgent.java", "diffHunk": "@@ -174,9 +172,9 @@ public void receiveHostLag(final LagReportingMessage lagReportingMessage) {\n       final HostInfo host, final QueryStateStoreId queryStateStoreId, final int partition) {\n     final Set<HostInfo> aliveHosts = aliveHostsRef.get();\n     final LagInfoEntity lagInfo = receivedLagInfo\n-        .getOrDefault(host, EMPTY_HOST_LAG_INFO).getLagInfo()\n-        .getOrDefault(queryStateStoreId, Collections.emptyMap())\n-        .getOrDefault(partition, null);\n+        .getOrDefault(host, EMPTY_HOST_STORE_LAGS)\n+        .getStateStoreLagsOrDefault(queryStateStoreId, EMPTY_STATE_STORE_LAGS)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzMjQzOQ=="}, "originalCommit": {"oid": "3d24a74b9c8f9758b82fed420c98a352b42d6b89"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzA1MzA2OnYy", "diffSide": "RIGHT", "path": "ksql-rest-model/src/main/java/io/confluent/ksql/rest/entity/StateStoreLags.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDo0NzoxN1rOFktOwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDowMTozMFrOFk-JFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzNDExMw==", "bodyText": "don't return null for unknown partition.\nEither:\n\nreturn some kind of empty lag info\nor else encode the fact that the method might not return a value by returning Optional<LagInfoEntity>,\nor throw an exception if this is not expected.", "url": "https://github.com/confluentinc/ksql/pull/4417#discussion_r374034113", "createdAt": "2020-02-03T10:47:17Z", "author": {"login": "big-andy-coates"}, "path": "ksql-rest-model/src/main/java/io/confluent/ksql/rest/entity/StateStoreLags.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.entity;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.errorprone.annotations.Immutable;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents the lags associated with a particular state store on a particular host.\n+ */\n+@Immutable\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class StateStoreLags {\n+\n+  private final ImmutableMap<Integer, LagInfoEntity> lagByPartition;\n+\n+  @JsonCreator\n+  public StateStoreLags(\n+      @JsonProperty(\"lagByPartition\") final Map<Integer, LagInfoEntity> lagByPartition) {\n+    this.lagByPartition = ImmutableMap.copyOf(requireNonNull(lagByPartition, \"lagByPartition\"));\n+  }\n+\n+  public LagInfoEntity getLagByPartition(final int partition) {\n+    return lagByPartition.get(partition);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d24a74b9c8f9758b82fed420c98a352b42d6b89"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMxMTE4OA==", "bodyText": "I changed it to return Optional", "url": "https://github.com/confluentinc/ksql/pull/4417#discussion_r374311188", "createdAt": "2020-02-03T20:01:30Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-model/src/main/java/io/confluent/ksql/rest/entity/StateStoreLags.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.entity;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.errorprone.annotations.Immutable;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents the lags associated with a particular state store on a particular host.\n+ */\n+@Immutable\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class StateStoreLags {\n+\n+  private final ImmutableMap<Integer, LagInfoEntity> lagByPartition;\n+\n+  @JsonCreator\n+  public StateStoreLags(\n+      @JsonProperty(\"lagByPartition\") final Map<Integer, LagInfoEntity> lagByPartition) {\n+    this.lagByPartition = ImmutableMap.copyOf(requireNonNull(lagByPartition, \"lagByPartition\"));\n+  }\n+\n+  public LagInfoEntity getLagByPartition(final int partition) {\n+    return lagByPartition.get(partition);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzNDExMw=="}, "originalCommit": {"oid": "3d24a74b9c8f9758b82fed420c98a352b42d6b89"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzA1NzU4OnYy", "diffSide": "RIGHT", "path": "ksql-rest-model/src/main/java/io/confluent/ksql/rest/entity/HostStoreLags.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDo0ODo1MFrOFktReQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QyMDozMzo1MlrOFk_C8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzNDgwOQ==", "bodyText": "As with the other get method - avoid returning nulls.", "url": "https://github.com/confluentinc/ksql/pull/4417#discussion_r374034809", "createdAt": "2020-02-03T10:48:50Z", "author": {"login": "big-andy-coates"}, "path": "ksql-rest-model/src/main/java/io/confluent/ksql/rest/entity/HostStoreLags.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.entity;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.errorprone.annotations.Immutable;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a host's lag information, and when the lag information was collected.\n+ */\n+@Immutable\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class HostStoreLags {\n+\n+  private final ImmutableMap<QueryStateStoreId, StateStoreLags> stateStoreLags;\n+  private final long updateTimeMs;\n+\n+  @JsonCreator\n+  public HostStoreLags(\n+      @JsonProperty(\"stateStoreLags\") final Map<QueryStateStoreId, StateStoreLags> stateStoreLags,\n+      @JsonProperty(\"updateTimeMs\") final long updateTimeMs) {\n+    this.stateStoreLags = ImmutableMap.copyOf(requireNonNull(stateStoreLags, \"stateStoreLags\"));\n+    this.updateTimeMs = updateTimeMs;\n+  }\n+\n+  public StateStoreLags getStateStoreLags(final QueryStateStoreId queryStateStoreId) {\n+    return stateStoreLags.get(queryStateStoreId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d24a74b9c8f9758b82fed420c98a352b42d6b89"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDMyNjAwMA==", "bodyText": "I changed it to return Optional", "url": "https://github.com/confluentinc/ksql/pull/4417#discussion_r374326000", "createdAt": "2020-02-03T20:33:52Z", "author": {"login": "AlanConfluent"}, "path": "ksql-rest-model/src/main/java/io/confluent/ksql/rest/entity/HostStoreLags.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.rest.entity;\n+\n+import static com.google.common.base.MoreObjects.toStringHelper;\n+import static java.util.Objects.requireNonNull;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.errorprone.annotations.Immutable;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Represents a host's lag information, and when the lag information was collected.\n+ */\n+@Immutable\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class HostStoreLags {\n+\n+  private final ImmutableMap<QueryStateStoreId, StateStoreLags> stateStoreLags;\n+  private final long updateTimeMs;\n+\n+  @JsonCreator\n+  public HostStoreLags(\n+      @JsonProperty(\"stateStoreLags\") final Map<QueryStateStoreId, StateStoreLags> stateStoreLags,\n+      @JsonProperty(\"updateTimeMs\") final long updateTimeMs) {\n+    this.stateStoreLags = ImmutableMap.copyOf(requireNonNull(stateStoreLags, \"stateStoreLags\"));\n+    this.updateTimeMs = updateTimeMs;\n+  }\n+\n+  public StateStoreLags getStateStoreLags(final QueryStateStoreId queryStateStoreId) {\n+    return stateStoreLags.get(queryStateStoreId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAzNDgwOQ=="}, "originalCommit": {"oid": "3d24a74b9c8f9758b82fed420c98a352b42d6b89"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2318, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}