{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NDE4MjA5", "number": 5628, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOToyMDowNlrOEGE4Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDoxMToyM1rOEVBGuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODA2ODM0OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOToyMDowNlrOGkp0Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo0OToxNVrOGkuYog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4NzAxMA==", "bodyText": "Hey @MichaelDrogalis we'll have to think about how to make the addition of integration tests in other languages easier. It's not clear to me how to do this right now. Is there an established way to run code from multiple languages (the ksqlDB server in Java + the client in a non-Java language) for integration tests?", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441087010", "createdAt": "2020-06-16T19:20:06Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Requests to terminate push queries should be sent to the [`/close-query` server endpoint](TODO).\n+The client should expose an interface that allows users to pass in a push query ID to be passed to this endpoint.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](TODO).\n+If the server successfully validates the target stream name from a request made to the `/inserts-stream` endpoint,\n+the client may then write JSON-serialized rows of data to the connection, and the server will insert each\n+asynchronously and write an ack containing the relevant sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](TODO) is one example, though details will likely vary by language.\n+\n+### Creation of new streams, tables, and persistent queries ###\n+\n+These DDL/DML requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Terminating persistent queries ###\n+\n+These requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+These admin operation requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+Configurations\n+--------------\n+\n+The client of course needs to expose options for specifying the address of the ksqlDB server to connect to.\n+Additional options important to expose include: \n+- Support for TLS-enabled ksqlDB servers\n+- Support for mutual-TLS-enabled ksqlDB servers\n+- Support for ksqlDB servers with HTTP basic authentication enabled\n+\n+It may also be nice to support configuring multiple ksqlDB server addresses, so the client may route requests\n+to a different server if one is down.\n+\n+Process\n+-------\n+\n+Thanks for your interest in contributing a client!\n+\n+To get started:\n+- Open [KLIP](../../../design-proposals/README.md) to propose the client you'd like to implement. The KLIP should include a high-level design and example interfaces.\n+- Contribute code to [ksql repo](https://github.com/confluentinc/ksql)\n+- Testing: Besides unit tests in the relevant language, there should also be integration tests to spin up a ksqlDB server and validate client behavior. TODO how to make this easier?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2MTg5MA==", "bodyText": "I'm really not sure. Might be a good thing to bring up at the next team meeting, I'm sure we can brainstorm ideas.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441161890", "createdAt": "2020-06-16T21:49:15Z", "author": {"login": "MichaelDrogalis"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Requests to terminate push queries should be sent to the [`/close-query` server endpoint](TODO).\n+The client should expose an interface that allows users to pass in a push query ID to be passed to this endpoint.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](TODO).\n+If the server successfully validates the target stream name from a request made to the `/inserts-stream` endpoint,\n+the client may then write JSON-serialized rows of data to the connection, and the server will insert each\n+asynchronously and write an ack containing the relevant sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](TODO) is one example, though details will likely vary by language.\n+\n+### Creation of new streams, tables, and persistent queries ###\n+\n+These DDL/DML requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Terminating persistent queries ###\n+\n+These requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+These admin operation requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+Configurations\n+--------------\n+\n+The client of course needs to expose options for specifying the address of the ksqlDB server to connect to.\n+Additional options important to expose include: \n+- Support for TLS-enabled ksqlDB servers\n+- Support for mutual-TLS-enabled ksqlDB servers\n+- Support for ksqlDB servers with HTTP basic authentication enabled\n+\n+It may also be nice to support configuring multiple ksqlDB server addresses, so the client may route requests\n+to a different server if one is down.\n+\n+Process\n+-------\n+\n+Thanks for your interest in contributing a client!\n+\n+To get started:\n+- Open [KLIP](../../../design-proposals/README.md) to propose the client you'd like to implement. The KLIP should include a high-level design and example interfaces.\n+- Contribute code to [ksql repo](https://github.com/confluentinc/ksql)\n+- Testing: Besides unit tests in the relevant language, there should also be integration tests to spin up a ksqlDB server and validate client behavior. TODO how to make this easier?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4NzAxMA=="}, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODA2OTU5OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOToyMDozMFrOGkp09Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNjoxMjozNVrOGqGF5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4NzIyMQ==", "bodyText": "Waiting on docs for the new server endpoints for these links.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441087221", "createdAt": "2020-06-16T19:20:30Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2MzE4Mg==", "bodyText": "Are these HTTP requests? Im confused about how to interact with the server right off the bat. We probably need an opening section about how to generally communicate between the client+server.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441163182", "createdAt": "2020-06-16T21:52:08Z", "author": {"login": "MichaelDrogalis"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4NzIyMQ=="}, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc5MzE4OA==", "bodyText": "Yup, they're HTTP requests. Clarified inline and also added a couple sentences up front.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r446793188", "createdAt": "2020-06-29T06:12:35Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4NzIyMQ=="}, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODA3Mzc5OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOToyMTo1M1rOGkp3uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDowMzoyOFrOG81AFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4NzkzMQ==", "bodyText": "Is the expectation that if someone wants to tackle a client, they're expected to complete the project (implement all the functionality listed above)? Seems like quite the commitment. Might be good to add a sentence clarifying the expectation one way or the other so readers aren't left wondering.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441087931", "createdAt": "2020-06-16T19:21:53Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Requests to terminate push queries should be sent to the [`/close-query` server endpoint](TODO).\n+The client should expose an interface that allows users to pass in a push query ID to be passed to this endpoint.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](TODO).\n+If the server successfully validates the target stream name from a request made to the `/inserts-stream` endpoint,\n+the client may then write JSON-serialized rows of data to the connection, and the server will insert each\n+asynchronously and write an ack containing the relevant sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](TODO) is one example, though details will likely vary by language.\n+\n+### Creation of new streams, tables, and persistent queries ###\n+\n+These DDL/DML requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Terminating persistent queries ###\n+\n+These requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+These admin operation requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+Configurations\n+--------------\n+\n+The client of course needs to expose options for specifying the address of the ksqlDB server to connect to.\n+Additional options important to expose include: \n+- Support for TLS-enabled ksqlDB servers\n+- Support for mutual-TLS-enabled ksqlDB servers\n+- Support for ksqlDB servers with HTTP basic authentication enabled\n+\n+It may also be nice to support configuring multiple ksqlDB server addresses, so the client may route requests\n+to a different server if one is down.\n+\n+Process\n+-------\n+\n+Thanks for your interest in contributing a client!\n+\n+To get started:\n+- Open [KLIP](../../../design-proposals/README.md) to propose the client you'd like to implement. The KLIP should include a high-level design and example interfaces.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3NTcyNg==", "bodyText": "I would say a client can choose to implement some or all of the functionality.  This will become more important as new features are added to the client API.\nThis allows contributes to submit clients that just support a minimal subset of operations, rather than putting them off by saying 'it's all or nothing mate'. Such minimal clients can be extended by others as required.\nOf course, we can say that anyone supporting push queries must support terminating them as well.\nSide question: if the client doesn't terminate the query, but just disconnects, are the queries terminated?", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r465075726", "createdAt": "2020-08-04T14:06:08Z", "author": {"login": "big-andy-coates"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Requests to terminate push queries should be sent to the [`/close-query` server endpoint](TODO).\n+The client should expose an interface that allows users to pass in a push query ID to be passed to this endpoint.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](TODO).\n+If the server successfully validates the target stream name from a request made to the `/inserts-stream` endpoint,\n+the client may then write JSON-serialized rows of data to the connection, and the server will insert each\n+asynchronously and write an ack containing the relevant sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](TODO) is one example, though details will likely vary by language.\n+\n+### Creation of new streams, tables, and persistent queries ###\n+\n+These DDL/DML requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Terminating persistent queries ###\n+\n+These requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+These admin operation requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+Configurations\n+--------------\n+\n+The client of course needs to expose options for specifying the address of the ksqlDB server to connect to.\n+Additional options important to expose include: \n+- Support for TLS-enabled ksqlDB servers\n+- Support for mutual-TLS-enabled ksqlDB servers\n+- Support for ksqlDB servers with HTTP basic authentication enabled\n+\n+It may also be nice to support configuring multiple ksqlDB server addresses, so the client may route requests\n+to a different server if one is down.\n+\n+Process\n+-------\n+\n+Thanks for your interest in contributing a client!\n+\n+To get started:\n+- Open [KLIP](../../../design-proposals/README.md) to propose the client you'd like to implement. The KLIP should include a high-level design and example interfaces.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4NzkzMQ=="}, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzNjExNg==", "bodyText": "Side question: if the client doesn't terminate the query, but just disconnects, are the queries terminated?\n\nPush queries are terminated when the underlying connection is closed, or by the server after 10 minutes of unresponsiveness from the client.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r466436116", "createdAt": "2020-08-06T14:03:28Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Requests to terminate push queries should be sent to the [`/close-query` server endpoint](TODO).\n+The client should expose an interface that allows users to pass in a push query ID to be passed to this endpoint.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](TODO).\n+If the server successfully validates the target stream name from a request made to the `/inserts-stream` endpoint,\n+the client may then write JSON-serialized rows of data to the connection, and the server will insert each\n+asynchronously and write an ack containing the relevant sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](TODO) is one example, though details will likely vary by language.\n+\n+### Creation of new streams, tables, and persistent queries ###\n+\n+These DDL/DML requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Terminating persistent queries ###\n+\n+These requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+These admin operation requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+Configurations\n+--------------\n+\n+The client of course needs to expose options for specifying the address of the ksqlDB server to connect to.\n+Additional options important to expose include: \n+- Support for TLS-enabled ksqlDB servers\n+- Support for mutual-TLS-enabled ksqlDB servers\n+- Support for ksqlDB servers with HTTP basic authentication enabled\n+\n+It may also be nice to support configuring multiple ksqlDB server addresses, so the client may route requests\n+to a different server if one is down.\n+\n+Process\n+-------\n+\n+Thanks for your interest in contributing a client!\n+\n+To get started:\n+- Open [KLIP](../../../design-proposals/README.md) to propose the client you'd like to implement. The KLIP should include a high-level design and example interfaces.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4NzkzMQ=="}, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODUyMjc5OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo0NTozM1rOGkuSVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOToxOToyMVrOHDVvAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2MDI3OA==", "bodyText": "Should or must?", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441160278", "createdAt": "2020-06-16T21:45:33Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxNzE3OQ==", "bodyText": "Good question. Depends on the resolution to the discussion in https://github.com/confluentinc/ksql/pull/5628/files#r441087931.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r446817179", "createdAt": "2020-06-29T07:13:06Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2MDI3OA=="}, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2Mzg3Mg==", "bodyText": "Based on discussion below, I think we should leave this as \"should\".", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r473263872", "createdAt": "2020-08-19T19:19:21Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2MDI3OA=="}, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODUyODk1OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo0Nzo1MFrOGkuWNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo0Nzo1MFrOGkuWNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2MTI3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            These metadata fields should be exposed from the client API. In particular, the query ID is used for\n          \n          \n            \n            The client API must expose these metadata fields from the client API. In particular, the query ID is used for", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441161271", "createdAt": "2020-06-16T21:47:50Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODUzMDQyOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo0ODoxOVrOGkuXGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzoxMDozN1rOGqHfSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2MTQ5Nw==", "bodyText": "Are any optional?", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441161497", "createdAt": "2020-06-16T21:48:19Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxNjA3NQ==", "bodyText": "Nope, updated \"should\" to \"must\".", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r446816075", "createdAt": "2020-06-29T07:10:37Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2MTQ5Nw=="}, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODUzMTYwOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo0ODo0OVrOGkuX5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo0ODo0OVrOGkuX5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2MTcwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)\n          \n          \n            \n            Details of client interfaces to support these methods vary by language. For example, the [Java client](java-client.md)", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441161703", "createdAt": "2020-06-16T21:48:49Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODUzNDE4OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo0OTo0N1rOGkuZig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo0OTo0N1rOGkuZig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2MjEyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Requests to terminate push queries should be sent to the [`/close-query` server endpoint](TODO).\n          \n          \n            \n            Terminate push queries by sending requests to the [`/close-query` server endpoint](TODO).", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441162122", "createdAt": "2020-06-16T21:49:47Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Requests to terminate push queries should be sent to the [`/close-query` server endpoint](TODO).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODUzNTc0OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1MDoyM1rOGkuafA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1MDoyM1rOGkuafA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2MjM2NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The client should expose an interface that allows users to pass in a push query ID to be passed to this endpoint.\n          \n          \n            \n            The client must expose an interface that enables users to pass in a push query ID to be passed to this endpoint.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441162364", "createdAt": "2020-06-16T21:50:23Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Requests to terminate push queries should be sent to the [`/close-query` server endpoint](TODO).\n+The client should expose an interface that allows users to pass in a push query ID to be passed to this endpoint.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODUzNzIxOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1MDo1M1rOGkubUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1MDo1M1rOGkubUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2MjU3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            the client may then write JSON-serialized rows of data to the connection, and the server will insert each\n          \n          \n            \n            the client may then write JSON-serialized rows of data to the connection, and the server inserts each", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441162579", "createdAt": "2020-06-16T21:50:53Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Requests to terminate push queries should be sent to the [`/close-query` server endpoint](TODO).\n+The client should expose an interface that allows users to pass in a push query ID to be passed to this endpoint.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](TODO).\n+If the server successfully validates the target stream name from a request made to the `/inserts-stream` endpoint,\n+the client may then write JSON-serialized rows of data to the connection, and the server will insert each", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODUzODEwOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1MTowOFrOGkub1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1MTowOFrOGkub1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2MjcwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            asynchronously and write an ack containing the relevant sequence number to the response.\n          \n          \n            \n            asynchronously and writes an ack containing the relevant sequence number to the response.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441162708", "createdAt": "2020-06-16T21:51:08Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Requests to terminate push queries should be sent to the [`/close-query` server endpoint](TODO).\n+The client should expose an interface that allows users to pass in a push query ID to be passed to this endpoint.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](TODO).\n+If the server successfully validates the target stream name from a request made to the `/inserts-stream` endpoint,\n+the client may then write JSON-serialized rows of data to the connection, and the server will insert each\n+asynchronously and write an ack containing the relevant sequence number to the response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODUzODM3OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1MToxM1rOGkucCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1MToxM1rOGkucCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2Mjc2MA==", "bodyText": "Maybe we could say something more inviting, like: \"If you're interested in using ksqlDB from a programming language we don't yet support, we've built out a guide to make it easy to add your own client. .... \"", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441162760", "createdAt": "2020-06-16T21:51:13Z", "author": {"login": "MichaelDrogalis"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODU0MDY2OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1MTo1OFrOGkudaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1MTo1OFrOGkudaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2MzExNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            These DDL/DML requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n          \n          \n            \n            Send these DDL/DML requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441163115", "createdAt": "2020-06-16T21:51:58Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Requests to terminate push queries should be sent to the [`/close-query` server endpoint](TODO).\n+The client should expose an interface that allows users to pass in a push query ID to be passed to this endpoint.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](TODO).\n+If the server successfully validates the target stream name from a request made to the `/inserts-stream` endpoint,\n+the client may then write JSON-serialized rows of data to the connection, and the server will insert each\n+asynchronously and write an ack containing the relevant sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](TODO) is one example, though details will likely vary by language.\n+\n+### Creation of new streams, tables, and persistent queries ###\n+\n+These DDL/DML requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODU0MTUxOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1MjoxNVrOGkud6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1MjoxNVrOGkud6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2MzI0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            These requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n          \n          \n            \n            Send these requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441163241", "createdAt": "2020-06-16T21:52:15Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Requests to terminate push queries should be sent to the [`/close-query` server endpoint](TODO).\n+The client should expose an interface that allows users to pass in a push query ID to be passed to this endpoint.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](TODO).\n+If the server successfully validates the target stream name from a request made to the `/inserts-stream` endpoint,\n+the client may then write JSON-serialized rows of data to the connection, and the server will insert each\n+asynchronously and write an ack containing the relevant sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](TODO) is one example, though details will likely vary by language.\n+\n+### Creation of new streams, tables, and persistent queries ###\n+\n+These DDL/DML requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Terminating persistent queries ###\n+\n+These requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODU0Mzg3OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1Mjo1OVrOGkufUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1Mjo1OVrOGkufUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2MzYwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            These admin operation requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n          \n          \n            \n            Send these admin operation requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441163603", "createdAt": "2020-06-16T21:52:59Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Requests to terminate push queries should be sent to the [`/close-query` server endpoint](TODO).\n+The client should expose an interface that allows users to pass in a push query ID to be passed to this endpoint.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](TODO).\n+If the server successfully validates the target stream name from a request made to the `/inserts-stream` endpoint,\n+the client may then write JSON-serialized rows of data to the connection, and the server will insert each\n+asynchronously and write an ack containing the relevant sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](TODO) is one example, though details will likely vary by language.\n+\n+### Creation of new streams, tables, and persistent queries ###\n+\n+These DDL/DML requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Terminating persistent queries ###\n+\n+These requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+These admin operation requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODU0NDY1OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1MzoxM1rOGkufvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1MzoxM1rOGkufvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2MzcxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The client of course needs to expose options for specifying the address of the ksqlDB server to connect to.\n          \n          \n            \n            The client must expose options for specifying the address of the ksqlDB server to connect to.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441163710", "createdAt": "2020-06-16T21:53:13Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Requests to terminate push queries should be sent to the [`/close-query` server endpoint](TODO).\n+The client should expose an interface that allows users to pass in a push query ID to be passed to this endpoint.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](TODO).\n+If the server successfully validates the target stream name from a request made to the `/inserts-stream` endpoint,\n+the client may then write JSON-serialized rows of data to the connection, and the server will insert each\n+asynchronously and write an ack containing the relevant sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](TODO) is one example, though details will likely vary by language.\n+\n+### Creation of new streams, tables, and persistent queries ###\n+\n+These DDL/DML requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Terminating persistent queries ###\n+\n+These requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+These admin operation requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+Configurations\n+--------------\n+\n+The client of course needs to expose options for specifying the address of the ksqlDB server to connect to.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODU0NTYwOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1MzozM1rOGkugRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzoxMDowN1rOGqHeZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2Mzg0NQ==", "bodyText": "I can parse what kind of response I should expect from the server, but I don't understand what I need to supply in the request. It might be good to divide these categories up into subsections and make tables out of them. This is the kind of information that's really important to be able to correctly reference as you work.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441163845", "createdAt": "2020-06-16T21:53:33Z", "author": {"login": "MichaelDrogalis"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2NDI0Nw==", "bodyText": "Ditto with the rest of the sections. Im not sure what I should really expect to supply in the request or expect in the response. If all of that will show in the server docs, we should note that every time.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441164247", "createdAt": "2020-06-16T21:54:36Z", "author": {"login": "MichaelDrogalis"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2Mzg0NQ=="}, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxNTg0Nw==", "bodyText": "Good call. I've explicitly called out that implementers should reference the server docs in each section, and added information in places where more details were needed.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r446815847", "createdAt": "2020-06-29T07:10:07Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2Mzg0NQ=="}, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODU0NTY5OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1MzozNlrOGkugUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1MzozNlrOGkugUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2Mzg1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Additional options important to expose include: \n          \n          \n            \n            Additional options that are important to expose include:", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441163858", "createdAt": "2020-06-16T21:53:36Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Requests to terminate push queries should be sent to the [`/close-query` server endpoint](TODO).\n+The client should expose an interface that allows users to pass in a push query ID to be passed to this endpoint.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](TODO).\n+If the server successfully validates the target stream name from a request made to the `/inserts-stream` endpoint,\n+the client may then write JSON-serialized rows of data to the connection, and the server will insert each\n+asynchronously and write an ack containing the relevant sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](TODO) is one example, though details will likely vary by language.\n+\n+### Creation of new streams, tables, and persistent queries ###\n+\n+These DDL/DML requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Terminating persistent queries ###\n+\n+These requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+These admin operation requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+Configurations\n+--------------\n+\n+The client of course needs to expose options for specifying the address of the ksqlDB server to connect to.\n+Additional options important to expose include: ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODU1NDExOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1Njo0MlrOGkulYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOToyMjoxOFrOHDV1Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2NTE1NQ==", "bodyText": "Might want to move this to the top.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441165155", "createdAt": "2020-06-16T21:56:42Z", "author": {"login": "MichaelDrogalis"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Requests to terminate push queries should be sent to the [`/close-query` server endpoint](TODO).\n+The client should expose an interface that allows users to pass in a push query ID to be passed to this endpoint.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](TODO).\n+If the server successfully validates the target stream name from a request made to the `/inserts-stream` endpoint,\n+the client may then write JSON-serialized rows of data to the connection, and the server will insert each\n+asynchronously and write an ack containing the relevant sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](TODO) is one example, though details will likely vary by language.\n+\n+### Creation of new streams, tables, and persistent queries ###\n+\n+These DDL/DML requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Terminating persistent queries ###\n+\n+These requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+These admin operation requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+Configurations\n+--------------\n+\n+The client of course needs to expose options for specifying the address of the ksqlDB server to connect to.\n+Additional options important to expose include: \n+- Support for TLS-enabled ksqlDB servers\n+- Support for mutual-TLS-enabled ksqlDB servers\n+- Support for ksqlDB servers with HTTP basic authentication enabled\n+\n+It may also be nice to support configuring multiple ksqlDB server addresses, so the client may route requests\n+to a different server if one is down.\n+\n+Process\n+-------\n+\n+Thanks for your interest in contributing a client!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxNjk0NA==", "bodyText": "Wasn't sure how to move the entire sentence to the top without clashing with the current intro, but I did add a bit of thanks to the top as well. LMK if you had something else in mind.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r446816944", "createdAt": "2020-06-29T07:12:34Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Requests to terminate push queries should be sent to the [`/close-query` server endpoint](TODO).\n+The client should expose an interface that allows users to pass in a push query ID to be passed to this endpoint.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](TODO).\n+If the server successfully validates the target stream name from a request made to the `/inserts-stream` endpoint,\n+the client may then write JSON-serialized rows of data to the connection, and the server will insert each\n+asynchronously and write an ack containing the relevant sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](TODO) is one example, though details will likely vary by language.\n+\n+### Creation of new streams, tables, and persistent queries ###\n+\n+These DDL/DML requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Terminating persistent queries ###\n+\n+These requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+These admin operation requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+Configurations\n+--------------\n+\n+The client of course needs to expose options for specifying the address of the ksqlDB server to connect to.\n+Additional options important to expose include: \n+- Support for TLS-enabled ksqlDB servers\n+- Support for mutual-TLS-enabled ksqlDB servers\n+- Support for ksqlDB servers with HTTP basic authentication enabled\n+\n+It may also be nice to support configuring multiple ksqlDB server addresses, so the client may route requests\n+to a different server if one is down.\n+\n+Process\n+-------\n+\n+Thanks for your interest in contributing a client!", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2NTE1NQ=="}, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA4NDg1MQ==", "bodyText": "I don't think we should assume anyone writing a client will contribute it back. I'd have the 'how to write a client' section at the top (as it currently is), and then have a 'how to contribute your client to the project' section below.  We should support people just wanting to link their public client repo, as well as those wanting to submit the code to our repo.\nThe latter has challenges around how we compile such a multi-language project.  The Kafka client's team are probably good people to talk to about this. @edenhill or @ryanatconfluent may be good people to talk to about this.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r465084851", "createdAt": "2020-08-04T14:18:09Z", "author": {"login": "big-andy-coates"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Requests to terminate push queries should be sent to the [`/close-query` server endpoint](TODO).\n+The client should expose an interface that allows users to pass in a push query ID to be passed to this endpoint.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](TODO).\n+If the server successfully validates the target stream name from a request made to the `/inserts-stream` endpoint,\n+the client may then write JSON-serialized rows of data to the connection, and the server will insert each\n+asynchronously and write an ack containing the relevant sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](TODO) is one example, though details will likely vary by language.\n+\n+### Creation of new streams, tables, and persistent queries ###\n+\n+These DDL/DML requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Terminating persistent queries ###\n+\n+These requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+These admin operation requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+Configurations\n+--------------\n+\n+The client of course needs to expose options for specifying the address of the ksqlDB server to connect to.\n+Additional options important to expose include: \n+- Support for TLS-enabled ksqlDB servers\n+- Support for mutual-TLS-enabled ksqlDB servers\n+- Support for ksqlDB servers with HTTP basic authentication enabled\n+\n+It may also be nice to support configuring multiple ksqlDB server addresses, so the client may route requests\n+to a different server if one is down.\n+\n+Process\n+-------\n+\n+Thanks for your interest in contributing a client!", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2NTE1NQ=="}, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2NTQ5NA==", "bodyText": "That's a really good point, I hadn't thought about the logistics of compiling a multi-language project. Does it make sense to have clients from other languages in the main ksql repository, or should they be separate repositories?", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r473265494", "createdAt": "2020-08-19T19:22:18Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Requests to terminate push queries should be sent to the [`/close-query` server endpoint](TODO).\n+The client should expose an interface that allows users to pass in a push query ID to be passed to this endpoint.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](TODO).\n+If the server successfully validates the target stream name from a request made to the `/inserts-stream` endpoint,\n+the client may then write JSON-serialized rows of data to the connection, and the server will insert each\n+asynchronously and write an ack containing the relevant sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](TODO) is one example, though details will likely vary by language.\n+\n+### Creation of new streams, tables, and persistent queries ###\n+\n+These DDL/DML requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Terminating persistent queries ###\n+\n+These requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+These admin operation requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+Configurations\n+--------------\n+\n+The client of course needs to expose options for specifying the address of the ksqlDB server to connect to.\n+Additional options important to expose include: \n+- Support for TLS-enabled ksqlDB servers\n+- Support for mutual-TLS-enabled ksqlDB servers\n+- Support for ksqlDB servers with HTTP basic authentication enabled\n+\n+It may also be nice to support configuring multiple ksqlDB server addresses, so the client may route requests\n+to a different server if one is down.\n+\n+Process\n+-------\n+\n+Thanks for your interest in contributing a client!", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2NTE1NQ=="}, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODU1NTk0OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQyMTo1NzoyNFrOGkumjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNzoxMToyMVrOGqHgnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2NTQ1Mw==", "bodyText": "This part could use a little more substance. Maybe linking to an example in the Java client would help? I read this and Im not quite sure what to do as an implementer.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r441165453", "createdAt": "2020-06-16T21:57:24Z", "author": {"login": "MichaelDrogalis"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Requests to terminate push queries should be sent to the [`/close-query` server endpoint](TODO).\n+The client should expose an interface that allows users to pass in a push query ID to be passed to this endpoint.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](TODO).\n+If the server successfully validates the target stream name from a request made to the `/inserts-stream` endpoint,\n+the client may then write JSON-serialized rows of data to the connection, and the server will insert each\n+asynchronously and write an ack containing the relevant sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](TODO) is one example, though details will likely vary by language.\n+\n+### Creation of new streams, tables, and persistent queries ###\n+\n+These DDL/DML requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Terminating persistent queries ###\n+\n+These requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+These admin operation requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+Configurations", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgxNjQxMg==", "bodyText": "Linked to the Java client API docs.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r446816412", "createdAt": "2020-06-29T07:11:21Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,112 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+This page contains information and recommendations for how to contribute a new [ksqlDB client](index.md).\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Creation of new streams, tables, and persistent queries](#creation-of-new-streams-tables-and-persistent-queries)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending requests to the [`/query-stream` server endpoint](TODO).\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+These metadata fields should be exposed from the client API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows should support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods will likely vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Requests to terminate push queries should be sent to the [`/close-query` server endpoint](TODO).\n+The client should expose an interface that allows users to pass in a push query ID to be passed to this endpoint.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](TODO).\n+If the server successfully validates the target stream name from a request made to the `/inserts-stream` endpoint,\n+the client may then write JSON-serialized rows of data to the connection, and the server will insert each\n+asynchronously and write an ack containing the relevant sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](TODO) is one example, though details will likely vary by language.\n+\n+### Creation of new streams, tables, and persistent queries ###\n+\n+These DDL/DML requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Terminating persistent queries ###\n+\n+These requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+These admin operation requests should be sent to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+Configurations", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTE2NTQ1Mw=="}, "originalCommit": {"oid": "1b606009264ea6164395bba093fb39daf8e4b52a"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDYzMTcxOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzo0ODozMVrOG7hMNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzo0ODozMVrOG7hMNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA2Mjk2Ng==", "bodyText": "Probably worth mentioning the query ID is returned in the original request to start a push query, (with link to above section).\nIt should be pretty obvious to most people, but it avoids confusion ;)", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r465062966", "createdAt": "2020-08-04T13:48:31Z", "author": {"login": "big-andy-coates"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,175 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+If you're interested in using ksqlDB from a programming language we don't yet support, we've created\n+this guide to make it easy to add your own [ksqlDB client](index.md). Thanks for your contribution!\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+- [Creation and deletion of streams and tables](#creation-and-deletion-of-streams-and-tables)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+\n+The easiest way for a ksqlDB client to implement each of these pieces of functionality is to send HTTP\n+requests to the ksqlDB server. See below for the relevant server endpoints.\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending HTTP requests to the [`/query-stream` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries).\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries),\n+the body of the HTTP request includes the query statement as well as any relevant query properties.\n+\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+The client must expose these metadata fields as part of its API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows must support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Terminate push queries by sending HTTP requests to the [`/close-query` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#terminating-queries).\n+The client must expose an interface that enables users to pass in a push query ID to be passed to this endpoint.\n+\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#terminating-queries),\n+the body of the HTTP request specifies the query ID. For successful requests, the response body will be empty.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eab6c70e3c25dc6a3614a3152e3cc954f5f4a134"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDY0NTM3OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzo1MTozOFrOG7hUwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMDowNzoxMFrOHEngmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA2NTE1Mg==", "bodyText": "Suggest linking to the Sql data types section in docs/concepts/schemas.md, rather than having a copy of the list here.  Less likely to get out of date...", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r465065152", "createdAt": "2020-08-04T13:51:38Z", "author": {"login": "big-andy-coates"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,175 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+If you're interested in using ksqlDB from a programming language we don't yet support, we've created\n+this guide to make it easy to add your own [ksqlDB client](index.md). Thanks for your contribution!\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+- [Creation and deletion of streams and tables](#creation-and-deletion-of-streams-and-tables)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+\n+The easiest way for a ksqlDB client to implement each of these pieces of functionality is to send HTTP\n+requests to the ksqlDB server. See below for the relevant server endpoints.\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending HTTP requests to the [`/query-stream` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries).\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries),\n+the body of the HTTP request includes the query statement as well as any relevant query properties.\n+\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+The client must expose these metadata fields as part of its API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows must support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eab6c70e3c25dc6a3614a3152e3cc954f5f4a134"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2NDYwOQ==", "bodyText": "I've added the link but also the left the table (clarifying that they are merely examples) as I think the table is helpful for showing exactly how the different types are represented by the server endpoint. I considered moving the table into the server endpoint docs but the level of detail seemed a bit overkill, especially compared to the rest of the server endpoint docs.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r473264609", "createdAt": "2020-08-19T19:20:40Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,175 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+If you're interested in using ksqlDB from a programming language we don't yet support, we've created\n+this guide to make it easy to add your own [ksqlDB client](index.md). Thanks for your contribution!\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+- [Creation and deletion of streams and tables](#creation-and-deletion-of-streams-and-tables)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+\n+The easiest way for a ksqlDB client to implement each of these pieces of functionality is to send HTTP\n+requests to the ksqlDB server. See below for the relevant server endpoints.\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending HTTP requests to the [`/query-stream` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries).\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries),\n+the body of the HTTP request includes the query statement as well as any relevant query properties.\n+\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+The client must expose these metadata fields as part of its API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows must support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA2NTE1Mg=="}, "originalCommit": {"oid": "eab6c70e3c25dc6a3614a3152e3cc954f5f4a134"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDYwMzY3NQ==", "bodyText": "Still not a fan of this kind of duplication, as this will likely get out of date. But no biggie.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r474603675", "createdAt": "2020-08-21T10:07:10Z", "author": {"login": "big-andy-coates"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,175 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+If you're interested in using ksqlDB from a programming language we don't yet support, we've created\n+this guide to make it easy to add your own [ksqlDB client](index.md). Thanks for your contribution!\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+- [Creation and deletion of streams and tables](#creation-and-deletion-of-streams-and-tables)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+\n+The easiest way for a ksqlDB client to implement each of these pieces of functionality is to send HTTP\n+requests to the ksqlDB server. See below for the relevant server endpoints.\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending HTTP requests to the [`/query-stream` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries).\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries),\n+the body of the HTTP request includes the query statement as well as any relevant query properties.\n+\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+The client must expose these metadata fields as part of its API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows must support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA2NTE1Mg=="}, "originalCommit": {"oid": "eab6c70e3c25dc6a3614a3152e3cc954f5f4a134"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDcwMDYyOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDowMzo0NVrOG7h3YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDowMzo0NVrOG7h3YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3NDAxNg==", "bodyText": "Could do with a preamble about the general design of the protocol e.g.\n\nClients communicate with the ksqlDB server via HTTP. Admin requests are submitted using POST requests. Query results and inserts are streaming over HTTP2.  The sections below cover the different types of functionality a client must/could (TBD) support and links to the appropriate API documentation., where example request and responses can be found.\n\nNot really sure if that's correct or not, but you hopefully get the idea: we need to explain to the would be client engineer the general architecture and what to expect in this pge.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r465074016", "createdAt": "2020-08-04T14:03:45Z", "author": {"login": "big-andy-coates"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,175 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+If you're interested in using ksqlDB from a programming language we don't yet support, we've created\n+this guide to make it easy to add your own [ksqlDB client](index.md). Thanks for your contribution!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eab6c70e3c25dc6a3614a3152e3cc954f5f4a134"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDczMTg3OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDoxMDoyM1rOG7iKdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxOToyMToxNlrOHDVzLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3ODkwMw==", "bodyText": "support for ksqlDB servers with custom auth?", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r465078903", "createdAt": "2020-08-04T14:10:23Z", "author": {"login": "big-andy-coates"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,175 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+If you're interested in using ksqlDB from a programming language we don't yet support, we've created\n+this guide to make it easy to add your own [ksqlDB client](index.md). Thanks for your contribution!\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+- [Creation and deletion of streams and tables](#creation-and-deletion-of-streams-and-tables)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+\n+The easiest way for a ksqlDB client to implement each of these pieces of functionality is to send HTTP\n+requests to the ksqlDB server. See below for the relevant server endpoints.\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending HTTP requests to the [`/query-stream` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries).\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries),\n+the body of the HTTP request includes the query statement as well as any relevant query properties.\n+\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+The client must expose these metadata fields as part of its API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows must support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Terminate push queries by sending HTTP requests to the [`/close-query` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#terminating-queries).\n+The client must expose an interface that enables users to pass in a push query ID to be passed to this endpoint.\n+\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#terminating-queries),\n+the body of the HTTP request specifies the query ID. For successful requests, the response body will be empty.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#inserting-rows-into-an-existing-stream).\n+\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#inserting-rows-into-an-existing-stream),\n+the initial HTTP request body specifies the name of the target stream. If the server successfully\n+validates this target stream name, the client may then write JSON-serialized rows of data to the\n+connection. The server inserts each row asynchronously and writes an ack containing the relevant\n+sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](api/io/confluent/ksql/api/client/KsqlObject.html) is one example,\n+though details will vary by language.\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+Send these admin operation requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+The following table contains the statement text that should be sent in the body of the HTTP request\n+for each type of client admin operation:\n+\n+| Admin operation             | SQL statement text |\n+|-----------------------------|--------------------|\n+| List ksqlDB streams         | LIST STREAMS;      |\n+| List ksqlDB tables          | LIST TABLES;       |\n+| List Kafka topics           | LIST TOPICS;       |\n+| List running ksqlDB queries | LIST QUERIES;      |\n+\n+The [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md)\n+contains the format of the server response body for each type of request. For example, the response of\n+a `LIST STREAMS;` command is a JSON object with an array-type field with name `streams`. Each element\n+of the array is a JSON object with fields `name`, `topic` , `format`, and `type`, each of type string.\n+\n+### Creation and deletion of streams and tables ###\n+\n+These DDL/DML statements include:\n+- Creation of source streams and tables: `CREATE STREAM`, `CREATE TABLE`\n+- Creation of persistent queries: `CREATE STREAM AS SELECT`, `CREATE TABLE AS SELECT`\n+- Deletion of streams and tables: `DROP STREAM`, `DROP TABLE`\n+\n+Send these DDL/DML requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+As explained in the [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md),\n+the HTTP request body contains the text of the ksqlDB statement as well as any relevant\n+query properties. Because ksqlDB supports many different types of statements for creating streams,\n+tables, and persistent queries, the client interface should accept a SQL statement and pass the statement\n+to the server endpoint directly.\n+\n+The server response will contain a command ID, command sequence number, and status information.\n+These pieces of information are typically do not inform actions of ksqlDB users and do not need to be\n+exposed as part of the client interface as a result.\n+\n+Note that the `/ksql` server endpoint accepts not only DDL/DML requests as described here, but also\n+other types of statements including admin operation requests described [above](#listing-existing-streams-tables-topics-and-queries).\n+If the server response for a SQL statement submitted to the `/ksql` endpoint has HTTP status code 200\n+but the response body does not fit the form documented above, then the submitted SQL statement did\n+not correspond to a DDL/DML statement. The client should handle this potential scenario by returning\n+an error to the user.\n+\n+### Terminating persistent queries ###\n+\n+Send these requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+The SQL statement that should be sent in the HTTP request body is `TERMINATE <persistent_query_id>;`.\n+\n+As noted in the [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md),\n+the format of the response body for terminate query requests is the same as for other DDL/DML requests\n+[above](#creation-and-deletion-of-streams-and-tables).\n+\n+Configurations\n+--------------\n+\n+The client must expose options for specifying the address of the ksqlDB server to connect to.\n+Additional options that are important to expose include:\n+- Support for TLS-enabled ksqlDB servers\n+- Support for mutual-TLS-enabled ksqlDB servers\n+- Support for ksqlDB servers with HTTP basic authentication enabled", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eab6c70e3c25dc6a3614a3152e3cc954f5f4a134"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzMzU2NA==", "bodyText": "What kind of custom auth are you thinking of? If we're talking about situations where clients need to pass custom HTTP auth headers, those aren't currently supported by the Java client. The way to support them would be to add an option to specify custom headers to be added to all requests.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r466433564", "createdAt": "2020-08-06T13:59:42Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,175 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+If you're interested in using ksqlDB from a programming language we don't yet support, we've created\n+this guide to make it easy to add your own [ksqlDB client](index.md). Thanks for your contribution!\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+- [Creation and deletion of streams and tables](#creation-and-deletion-of-streams-and-tables)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+\n+The easiest way for a ksqlDB client to implement each of these pieces of functionality is to send HTTP\n+requests to the ksqlDB server. See below for the relevant server endpoints.\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending HTTP requests to the [`/query-stream` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries).\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries),\n+the body of the HTTP request includes the query statement as well as any relevant query properties.\n+\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+The client must expose these metadata fields as part of its API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows must support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Terminate push queries by sending HTTP requests to the [`/close-query` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#terminating-queries).\n+The client must expose an interface that enables users to pass in a push query ID to be passed to this endpoint.\n+\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#terminating-queries),\n+the body of the HTTP request specifies the query ID. For successful requests, the response body will be empty.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#inserting-rows-into-an-existing-stream).\n+\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#inserting-rows-into-an-existing-stream),\n+the initial HTTP request body specifies the name of the target stream. If the server successfully\n+validates this target stream name, the client may then write JSON-serialized rows of data to the\n+connection. The server inserts each row asynchronously and writes an ack containing the relevant\n+sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](api/io/confluent/ksql/api/client/KsqlObject.html) is one example,\n+though details will vary by language.\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+Send these admin operation requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+The following table contains the statement text that should be sent in the body of the HTTP request\n+for each type of client admin operation:\n+\n+| Admin operation             | SQL statement text |\n+|-----------------------------|--------------------|\n+| List ksqlDB streams         | LIST STREAMS;      |\n+| List ksqlDB tables          | LIST TABLES;       |\n+| List Kafka topics           | LIST TOPICS;       |\n+| List running ksqlDB queries | LIST QUERIES;      |\n+\n+The [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md)\n+contains the format of the server response body for each type of request. For example, the response of\n+a `LIST STREAMS;` command is a JSON object with an array-type field with name `streams`. Each element\n+of the array is a JSON object with fields `name`, `topic` , `format`, and `type`, each of type string.\n+\n+### Creation and deletion of streams and tables ###\n+\n+These DDL/DML statements include:\n+- Creation of source streams and tables: `CREATE STREAM`, `CREATE TABLE`\n+- Creation of persistent queries: `CREATE STREAM AS SELECT`, `CREATE TABLE AS SELECT`\n+- Deletion of streams and tables: `DROP STREAM`, `DROP TABLE`\n+\n+Send these DDL/DML requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+As explained in the [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md),\n+the HTTP request body contains the text of the ksqlDB statement as well as any relevant\n+query properties. Because ksqlDB supports many different types of statements for creating streams,\n+tables, and persistent queries, the client interface should accept a SQL statement and pass the statement\n+to the server endpoint directly.\n+\n+The server response will contain a command ID, command sequence number, and status information.\n+These pieces of information are typically do not inform actions of ksqlDB users and do not need to be\n+exposed as part of the client interface as a result.\n+\n+Note that the `/ksql` server endpoint accepts not only DDL/DML requests as described here, but also\n+other types of statements including admin operation requests described [above](#listing-existing-streams-tables-topics-and-queries).\n+If the server response for a SQL statement submitted to the `/ksql` endpoint has HTTP status code 200\n+but the response body does not fit the form documented above, then the submitted SQL statement did\n+not correspond to a DDL/DML statement. The client should handle this potential scenario by returning\n+an error to the user.\n+\n+### Terminating persistent queries ###\n+\n+Send these requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+The SQL statement that should be sent in the HTTP request body is `TERMINATE <persistent_query_id>;`.\n+\n+As noted in the [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md),\n+the format of the response body for terminate query requests is the same as for other DDL/DML requests\n+[above](#creation-and-deletion-of-streams-and-tables).\n+\n+Configurations\n+--------------\n+\n+The client must expose options for specifying the address of the ksqlDB server to connect to.\n+Additional options that are important to expose include:\n+- Support for TLS-enabled ksqlDB servers\n+- Support for mutual-TLS-enabled ksqlDB servers\n+- Support for ksqlDB servers with HTTP basic authentication enabled", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3ODkwMw=="}, "originalCommit": {"oid": "eab6c70e3c25dc6a3614a3152e3cc954f5f4a134"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1MTUzOA==", "bodyText": "The server supports a plugging in custom authentication mechanisms.  This means someone could write a client that was compatible. Not sure what that means in the context of this document. Maybe its sufficient to just call out this is possible.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r466451538", "createdAt": "2020-08-06T14:25:18Z", "author": {"login": "big-andy-coates"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,175 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+If you're interested in using ksqlDB from a programming language we don't yet support, we've created\n+this guide to make it easy to add your own [ksqlDB client](index.md). Thanks for your contribution!\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+- [Creation and deletion of streams and tables](#creation-and-deletion-of-streams-and-tables)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+\n+The easiest way for a ksqlDB client to implement each of these pieces of functionality is to send HTTP\n+requests to the ksqlDB server. See below for the relevant server endpoints.\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending HTTP requests to the [`/query-stream` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries).\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries),\n+the body of the HTTP request includes the query statement as well as any relevant query properties.\n+\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+The client must expose these metadata fields as part of its API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows must support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Terminate push queries by sending HTTP requests to the [`/close-query` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#terminating-queries).\n+The client must expose an interface that enables users to pass in a push query ID to be passed to this endpoint.\n+\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#terminating-queries),\n+the body of the HTTP request specifies the query ID. For successful requests, the response body will be empty.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#inserting-rows-into-an-existing-stream).\n+\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#inserting-rows-into-an-existing-stream),\n+the initial HTTP request body specifies the name of the target stream. If the server successfully\n+validates this target stream name, the client may then write JSON-serialized rows of data to the\n+connection. The server inserts each row asynchronously and writes an ack containing the relevant\n+sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](api/io/confluent/ksql/api/client/KsqlObject.html) is one example,\n+though details will vary by language.\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+Send these admin operation requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+The following table contains the statement text that should be sent in the body of the HTTP request\n+for each type of client admin operation:\n+\n+| Admin operation             | SQL statement text |\n+|-----------------------------|--------------------|\n+| List ksqlDB streams         | LIST STREAMS;      |\n+| List ksqlDB tables          | LIST TABLES;       |\n+| List Kafka topics           | LIST TOPICS;       |\n+| List running ksqlDB queries | LIST QUERIES;      |\n+\n+The [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md)\n+contains the format of the server response body for each type of request. For example, the response of\n+a `LIST STREAMS;` command is a JSON object with an array-type field with name `streams`. Each element\n+of the array is a JSON object with fields `name`, `topic` , `format`, and `type`, each of type string.\n+\n+### Creation and deletion of streams and tables ###\n+\n+These DDL/DML statements include:\n+- Creation of source streams and tables: `CREATE STREAM`, `CREATE TABLE`\n+- Creation of persistent queries: `CREATE STREAM AS SELECT`, `CREATE TABLE AS SELECT`\n+- Deletion of streams and tables: `DROP STREAM`, `DROP TABLE`\n+\n+Send these DDL/DML requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+As explained in the [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md),\n+the HTTP request body contains the text of the ksqlDB statement as well as any relevant\n+query properties. Because ksqlDB supports many different types of statements for creating streams,\n+tables, and persistent queries, the client interface should accept a SQL statement and pass the statement\n+to the server endpoint directly.\n+\n+The server response will contain a command ID, command sequence number, and status information.\n+These pieces of information are typically do not inform actions of ksqlDB users and do not need to be\n+exposed as part of the client interface as a result.\n+\n+Note that the `/ksql` server endpoint accepts not only DDL/DML requests as described here, but also\n+other types of statements including admin operation requests described [above](#listing-existing-streams-tables-topics-and-queries).\n+If the server response for a SQL statement submitted to the `/ksql` endpoint has HTTP status code 200\n+but the response body does not fit the form documented above, then the submitted SQL statement did\n+not correspond to a DDL/DML statement. The client should handle this potential scenario by returning\n+an error to the user.\n+\n+### Terminating persistent queries ###\n+\n+Send these requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+The SQL statement that should be sent in the HTTP request body is `TERMINATE <persistent_query_id>;`.\n+\n+As noted in the [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md),\n+the format of the response body for terminate query requests is the same as for other DDL/DML requests\n+[above](#creation-and-deletion-of-streams-and-tables).\n+\n+Configurations\n+--------------\n+\n+The client must expose options for specifying the address of the ksqlDB server to connect to.\n+Additional options that are important to expose include:\n+- Support for TLS-enabled ksqlDB servers\n+- Support for mutual-TLS-enabled ksqlDB servers\n+- Support for ksqlDB servers with HTTP basic authentication enabled", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3ODkwMw=="}, "originalCommit": {"oid": "eab6c70e3c25dc6a3614a3152e3cc954f5f4a134"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI2NDk0MA==", "bodyText": "Ack. Clarified along with the wording change suggested below (regarding supporting multiple ksqlDB server addresses).", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r473264940", "createdAt": "2020-08-19T19:21:16Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,175 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+If you're interested in using ksqlDB from a programming language we don't yet support, we've created\n+this guide to make it easy to add your own [ksqlDB client](index.md). Thanks for your contribution!\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+- [Creation and deletion of streams and tables](#creation-and-deletion-of-streams-and-tables)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+\n+The easiest way for a ksqlDB client to implement each of these pieces of functionality is to send HTTP\n+requests to the ksqlDB server. See below for the relevant server endpoints.\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending HTTP requests to the [`/query-stream` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries).\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries),\n+the body of the HTTP request includes the query statement as well as any relevant query properties.\n+\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+The client must expose these metadata fields as part of its API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows must support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Terminate push queries by sending HTTP requests to the [`/close-query` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#terminating-queries).\n+The client must expose an interface that enables users to pass in a push query ID to be passed to this endpoint.\n+\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#terminating-queries),\n+the body of the HTTP request specifies the query ID. For successful requests, the response body will be empty.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#inserting-rows-into-an-existing-stream).\n+\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#inserting-rows-into-an-existing-stream),\n+the initial HTTP request body specifies the name of the target stream. If the server successfully\n+validates this target stream name, the client may then write JSON-serialized rows of data to the\n+connection. The server inserts each row asynchronously and writes an ack containing the relevant\n+sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](api/io/confluent/ksql/api/client/KsqlObject.html) is one example,\n+though details will vary by language.\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+Send these admin operation requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+The following table contains the statement text that should be sent in the body of the HTTP request\n+for each type of client admin operation:\n+\n+| Admin operation             | SQL statement text |\n+|-----------------------------|--------------------|\n+| List ksqlDB streams         | LIST STREAMS;      |\n+| List ksqlDB tables          | LIST TABLES;       |\n+| List Kafka topics           | LIST TOPICS;       |\n+| List running ksqlDB queries | LIST QUERIES;      |\n+\n+The [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md)\n+contains the format of the server response body for each type of request. For example, the response of\n+a `LIST STREAMS;` command is a JSON object with an array-type field with name `streams`. Each element\n+of the array is a JSON object with fields `name`, `topic` , `format`, and `type`, each of type string.\n+\n+### Creation and deletion of streams and tables ###\n+\n+These DDL/DML statements include:\n+- Creation of source streams and tables: `CREATE STREAM`, `CREATE TABLE`\n+- Creation of persistent queries: `CREATE STREAM AS SELECT`, `CREATE TABLE AS SELECT`\n+- Deletion of streams and tables: `DROP STREAM`, `DROP TABLE`\n+\n+Send these DDL/DML requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+As explained in the [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md),\n+the HTTP request body contains the text of the ksqlDB statement as well as any relevant\n+query properties. Because ksqlDB supports many different types of statements for creating streams,\n+tables, and persistent queries, the client interface should accept a SQL statement and pass the statement\n+to the server endpoint directly.\n+\n+The server response will contain a command ID, command sequence number, and status information.\n+These pieces of information are typically do not inform actions of ksqlDB users and do not need to be\n+exposed as part of the client interface as a result.\n+\n+Note that the `/ksql` server endpoint accepts not only DDL/DML requests as described here, but also\n+other types of statements including admin operation requests described [above](#listing-existing-streams-tables-topics-and-queries).\n+If the server response for a SQL statement submitted to the `/ksql` endpoint has HTTP status code 200\n+but the response body does not fit the form documented above, then the submitted SQL statement did\n+not correspond to a DDL/DML statement. The client should handle this potential scenario by returning\n+an error to the user.\n+\n+### Terminating persistent queries ###\n+\n+Send these requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+The SQL statement that should be sent in the HTTP request body is `TERMINATE <persistent_query_id>;`.\n+\n+As noted in the [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md),\n+the format of the response body for terminate query requests is the same as for other DDL/DML requests\n+[above](#creation-and-deletion-of-streams-and-tables).\n+\n+Configurations\n+--------------\n+\n+The client must expose options for specifying the address of the ksqlDB server to connect to.\n+Additional options that are important to expose include:\n+- Support for TLS-enabled ksqlDB servers\n+- Support for mutual-TLS-enabled ksqlDB servers\n+- Support for ksqlDB servers with HTTP basic authentication enabled", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3ODkwMw=="}, "originalCommit": {"oid": "eab6c70e3c25dc6a3614a3152e3cc954f5f4a134"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNDczNjU3OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-clients/contributing.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNDoxMToyM1rOG7iNVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDozOToxNFrOG82j5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3OTYzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It may also be nice to support configuring multiple ksqlDB server addresses, so the client may route requests\n          \n          \n            \n            It is encouraged that clients support multiple ksqlDB server addresses, so the client may route requests\n          \n      \n    \n    \n  \n\nNot that our CLI does! (Unless that's changed recently)", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r465079639", "createdAt": "2020-08-04T14:11:23Z", "author": {"login": "big-andy-coates"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,175 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+If you're interested in using ksqlDB from a programming language we don't yet support, we've created\n+this guide to make it easy to add your own [ksqlDB client](index.md). Thanks for your contribution!\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+- [Creation and deletion of streams and tables](#creation-and-deletion-of-streams-and-tables)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+\n+The easiest way for a ksqlDB client to implement each of these pieces of functionality is to send HTTP\n+requests to the ksqlDB server. See below for the relevant server endpoints.\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending HTTP requests to the [`/query-stream` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries).\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries),\n+the body of the HTTP request includes the query statement as well as any relevant query properties.\n+\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+The client must expose these metadata fields as part of its API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows must support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Terminate push queries by sending HTTP requests to the [`/close-query` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#terminating-queries).\n+The client must expose an interface that enables users to pass in a push query ID to be passed to this endpoint.\n+\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#terminating-queries),\n+the body of the HTTP request specifies the query ID. For successful requests, the response body will be empty.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#inserting-rows-into-an-existing-stream).\n+\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#inserting-rows-into-an-existing-stream),\n+the initial HTTP request body specifies the name of the target stream. If the server successfully\n+validates this target stream name, the client may then write JSON-serialized rows of data to the\n+connection. The server inserts each row asynchronously and writes an ack containing the relevant\n+sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](api/io/confluent/ksql/api/client/KsqlObject.html) is one example,\n+though details will vary by language.\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+Send these admin operation requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+The following table contains the statement text that should be sent in the body of the HTTP request\n+for each type of client admin operation:\n+\n+| Admin operation             | SQL statement text |\n+|-----------------------------|--------------------|\n+| List ksqlDB streams         | LIST STREAMS;      |\n+| List ksqlDB tables          | LIST TABLES;       |\n+| List Kafka topics           | LIST TOPICS;       |\n+| List running ksqlDB queries | LIST QUERIES;      |\n+\n+The [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md)\n+contains the format of the server response body for each type of request. For example, the response of\n+a `LIST STREAMS;` command is a JSON object with an array-type field with name `streams`. Each element\n+of the array is a JSON object with fields `name`, `topic` , `format`, and `type`, each of type string.\n+\n+### Creation and deletion of streams and tables ###\n+\n+These DDL/DML statements include:\n+- Creation of source streams and tables: `CREATE STREAM`, `CREATE TABLE`\n+- Creation of persistent queries: `CREATE STREAM AS SELECT`, `CREATE TABLE AS SELECT`\n+- Deletion of streams and tables: `DROP STREAM`, `DROP TABLE`\n+\n+Send these DDL/DML requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+As explained in the [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md),\n+the HTTP request body contains the text of the ksqlDB statement as well as any relevant\n+query properties. Because ksqlDB supports many different types of statements for creating streams,\n+tables, and persistent queries, the client interface should accept a SQL statement and pass the statement\n+to the server endpoint directly.\n+\n+The server response will contain a command ID, command sequence number, and status information.\n+These pieces of information are typically do not inform actions of ksqlDB users and do not need to be\n+exposed as part of the client interface as a result.\n+\n+Note that the `/ksql` server endpoint accepts not only DDL/DML requests as described here, but also\n+other types of statements including admin operation requests described [above](#listing-existing-streams-tables-topics-and-queries).\n+If the server response for a SQL statement submitted to the `/ksql` endpoint has HTTP status code 200\n+but the response body does not fit the form documented above, then the submitted SQL statement did\n+not correspond to a DDL/DML statement. The client should handle this potential scenario by returning\n+an error to the user.\n+\n+### Terminating persistent queries ###\n+\n+Send these requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+The SQL statement that should be sent in the HTTP request body is `TERMINATE <persistent_query_id>;`.\n+\n+As noted in the [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md),\n+the format of the response body for terminate query requests is the same as for other DDL/DML requests\n+[above](#creation-and-deletion-of-streams-and-tables).\n+\n+Configurations\n+--------------\n+\n+The client must expose options for specifying the address of the ksqlDB server to connect to.\n+Additional options that are important to expose include:\n+- Support for TLS-enabled ksqlDB servers\n+- Support for mutual-TLS-enabled ksqlDB servers\n+- Support for ksqlDB servers with HTTP basic authentication enabled\n+\n+As an example, users specify options for the Java client via a [ClientOptions](api/io/confluent/ksql/api/client/ClientOptions.html)\n+object that is passed when [creating a Client instance](api/io/confluent/ksql/api/client/Client.html#create(io.confluent.ksql.api.client.ClientOptions)).\n+\n+It may also be nice to support configuring multiple ksqlDB server addresses, so the client may route requests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eab6c70e3c25dc6a3614a3152e3cc954f5f4a134"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzNDk2Mg==", "bodyText": "Does our CLI actually support this? I know the REST client (and therefore the CLI) supports parsing multiple server addresses, but AFAIA it only ever uses the first one (i.e., no fallback logic if the first one becomes unavailable): https://github.com/confluentinc/ksql/blob/master/ksqldb-rest-client/src/main/java/io/confluent/ksql/rest/client/KsqlRestClient.java#L110", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r466434962", "createdAt": "2020-08-06T14:01:44Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,175 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+If you're interested in using ksqlDB from a programming language we don't yet support, we've created\n+this guide to make it easy to add your own [ksqlDB client](index.md). Thanks for your contribution!\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+- [Creation and deletion of streams and tables](#creation-and-deletion-of-streams-and-tables)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+\n+The easiest way for a ksqlDB client to implement each of these pieces of functionality is to send HTTP\n+requests to the ksqlDB server. See below for the relevant server endpoints.\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending HTTP requests to the [`/query-stream` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries).\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries),\n+the body of the HTTP request includes the query statement as well as any relevant query properties.\n+\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+The client must expose these metadata fields as part of its API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows must support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Terminate push queries by sending HTTP requests to the [`/close-query` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#terminating-queries).\n+The client must expose an interface that enables users to pass in a push query ID to be passed to this endpoint.\n+\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#terminating-queries),\n+the body of the HTTP request specifies the query ID. For successful requests, the response body will be empty.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#inserting-rows-into-an-existing-stream).\n+\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#inserting-rows-into-an-existing-stream),\n+the initial HTTP request body specifies the name of the target stream. If the server successfully\n+validates this target stream name, the client may then write JSON-serialized rows of data to the\n+connection. The server inserts each row asynchronously and writes an ack containing the relevant\n+sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](api/io/confluent/ksql/api/client/KsqlObject.html) is one example,\n+though details will vary by language.\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+Send these admin operation requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+The following table contains the statement text that should be sent in the body of the HTTP request\n+for each type of client admin operation:\n+\n+| Admin operation             | SQL statement text |\n+|-----------------------------|--------------------|\n+| List ksqlDB streams         | LIST STREAMS;      |\n+| List ksqlDB tables          | LIST TABLES;       |\n+| List Kafka topics           | LIST TOPICS;       |\n+| List running ksqlDB queries | LIST QUERIES;      |\n+\n+The [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md)\n+contains the format of the server response body for each type of request. For example, the response of\n+a `LIST STREAMS;` command is a JSON object with an array-type field with name `streams`. Each element\n+of the array is a JSON object with fields `name`, `topic` , `format`, and `type`, each of type string.\n+\n+### Creation and deletion of streams and tables ###\n+\n+These DDL/DML statements include:\n+- Creation of source streams and tables: `CREATE STREAM`, `CREATE TABLE`\n+- Creation of persistent queries: `CREATE STREAM AS SELECT`, `CREATE TABLE AS SELECT`\n+- Deletion of streams and tables: `DROP STREAM`, `DROP TABLE`\n+\n+Send these DDL/DML requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+As explained in the [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md),\n+the HTTP request body contains the text of the ksqlDB statement as well as any relevant\n+query properties. Because ksqlDB supports many different types of statements for creating streams,\n+tables, and persistent queries, the client interface should accept a SQL statement and pass the statement\n+to the server endpoint directly.\n+\n+The server response will contain a command ID, command sequence number, and status information.\n+These pieces of information are typically do not inform actions of ksqlDB users and do not need to be\n+exposed as part of the client interface as a result.\n+\n+Note that the `/ksql` server endpoint accepts not only DDL/DML requests as described here, but also\n+other types of statements including admin operation requests described [above](#listing-existing-streams-tables-topics-and-queries).\n+If the server response for a SQL statement submitted to the `/ksql` endpoint has HTTP status code 200\n+but the response body does not fit the form documented above, then the submitted SQL statement did\n+not correspond to a DDL/DML statement. The client should handle this potential scenario by returning\n+an error to the user.\n+\n+### Terminating persistent queries ###\n+\n+Send these requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+The SQL statement that should be sent in the HTTP request body is `TERMINATE <persistent_query_id>;`.\n+\n+As noted in the [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md),\n+the format of the response body for terminate query requests is the same as for other DDL/DML requests\n+[above](#creation-and-deletion-of-streams-and-tables).\n+\n+Configurations\n+--------------\n+\n+The client must expose options for specifying the address of the ksqlDB server to connect to.\n+Additional options that are important to expose include:\n+- Support for TLS-enabled ksqlDB servers\n+- Support for mutual-TLS-enabled ksqlDB servers\n+- Support for ksqlDB servers with HTTP basic authentication enabled\n+\n+As an example, users specify options for the Java client via a [ClientOptions](api/io/confluent/ksql/api/client/ClientOptions.html)\n+object that is passed when [creating a Client instance](api/io/confluent/ksql/api/client/Client.html#create(io.confluent.ksql.api.client.ClientOptions)).\n+\n+It may also be nice to support configuring multiple ksqlDB server addresses, so the client may route requests", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3OTYzOQ=="}, "originalCommit": {"oid": "eab6c70e3c25dc6a3614a3152e3cc954f5f4a134"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1MjEyNw==", "bodyText": "No... you obviously missed the last line of my comment.\nOf course, the CLI should support this ;)", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r466452127", "createdAt": "2020-08-06T14:26:03Z", "author": {"login": "big-andy-coates"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,175 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+If you're interested in using ksqlDB from a programming language we don't yet support, we've created\n+this guide to make it easy to add your own [ksqlDB client](index.md). Thanks for your contribution!\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+- [Creation and deletion of streams and tables](#creation-and-deletion-of-streams-and-tables)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+\n+The easiest way for a ksqlDB client to implement each of these pieces of functionality is to send HTTP\n+requests to the ksqlDB server. See below for the relevant server endpoints.\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending HTTP requests to the [`/query-stream` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries).\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries),\n+the body of the HTTP request includes the query statement as well as any relevant query properties.\n+\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+The client must expose these metadata fields as part of its API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows must support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Terminate push queries by sending HTTP requests to the [`/close-query` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#terminating-queries).\n+The client must expose an interface that enables users to pass in a push query ID to be passed to this endpoint.\n+\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#terminating-queries),\n+the body of the HTTP request specifies the query ID. For successful requests, the response body will be empty.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#inserting-rows-into-an-existing-stream).\n+\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#inserting-rows-into-an-existing-stream),\n+the initial HTTP request body specifies the name of the target stream. If the server successfully\n+validates this target stream name, the client may then write JSON-serialized rows of data to the\n+connection. The server inserts each row asynchronously and writes an ack containing the relevant\n+sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](api/io/confluent/ksql/api/client/KsqlObject.html) is one example,\n+though details will vary by language.\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+Send these admin operation requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+The following table contains the statement text that should be sent in the body of the HTTP request\n+for each type of client admin operation:\n+\n+| Admin operation             | SQL statement text |\n+|-----------------------------|--------------------|\n+| List ksqlDB streams         | LIST STREAMS;      |\n+| List ksqlDB tables          | LIST TABLES;       |\n+| List Kafka topics           | LIST TOPICS;       |\n+| List running ksqlDB queries | LIST QUERIES;      |\n+\n+The [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md)\n+contains the format of the server response body for each type of request. For example, the response of\n+a `LIST STREAMS;` command is a JSON object with an array-type field with name `streams`. Each element\n+of the array is a JSON object with fields `name`, `topic` , `format`, and `type`, each of type string.\n+\n+### Creation and deletion of streams and tables ###\n+\n+These DDL/DML statements include:\n+- Creation of source streams and tables: `CREATE STREAM`, `CREATE TABLE`\n+- Creation of persistent queries: `CREATE STREAM AS SELECT`, `CREATE TABLE AS SELECT`\n+- Deletion of streams and tables: `DROP STREAM`, `DROP TABLE`\n+\n+Send these DDL/DML requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+As explained in the [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md),\n+the HTTP request body contains the text of the ksqlDB statement as well as any relevant\n+query properties. Because ksqlDB supports many different types of statements for creating streams,\n+tables, and persistent queries, the client interface should accept a SQL statement and pass the statement\n+to the server endpoint directly.\n+\n+The server response will contain a command ID, command sequence number, and status information.\n+These pieces of information are typically do not inform actions of ksqlDB users and do not need to be\n+exposed as part of the client interface as a result.\n+\n+Note that the `/ksql` server endpoint accepts not only DDL/DML requests as described here, but also\n+other types of statements including admin operation requests described [above](#listing-existing-streams-tables-topics-and-queries).\n+If the server response for a SQL statement submitted to the `/ksql` endpoint has HTTP status code 200\n+but the response body does not fit the form documented above, then the submitted SQL statement did\n+not correspond to a DDL/DML statement. The client should handle this potential scenario by returning\n+an error to the user.\n+\n+### Terminating persistent queries ###\n+\n+Send these requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+The SQL statement that should be sent in the HTTP request body is `TERMINATE <persistent_query_id>;`.\n+\n+As noted in the [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md),\n+the format of the response body for terminate query requests is the same as for other DDL/DML requests\n+[above](#creation-and-deletion-of-streams-and-tables).\n+\n+Configurations\n+--------------\n+\n+The client must expose options for specifying the address of the ksqlDB server to connect to.\n+Additional options that are important to expose include:\n+- Support for TLS-enabled ksqlDB servers\n+- Support for mutual-TLS-enabled ksqlDB servers\n+- Support for ksqlDB servers with HTTP basic authentication enabled\n+\n+As an example, users specify options for the Java client via a [ClientOptions](api/io/confluent/ksql/api/client/ClientOptions.html)\n+object that is passed when [creating a Client instance](api/io/confluent/ksql/api/client/Client.html#create(io.confluent.ksql.api.client.ClientOptions)).\n+\n+It may also be nice to support configuring multiple ksqlDB server addresses, so the client may route requests", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3OTYzOQ=="}, "originalCommit": {"oid": "eab6c70e3c25dc6a3614a3152e3cc954f5f4a134"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2MTY3MQ==", "bodyText": "Oh LOL I read your comment as \"Note that our CLI does\" rather than \"Not that our CLI does\" -- I read it two or three times the same way each time :P Glad we're on the same page.", "url": "https://github.com/confluentinc/ksql/pull/5628#discussion_r466461671", "createdAt": "2020-08-06T14:39:14Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-clients/contributing.md", "diffHunk": "@@ -0,0 +1,175 @@\n+---\n+layout: page\n+title: Contributing a new ksqlDB client\n+tagline: Contributing a new ksqlDB client\n+description: Contribute a new ksqlDB client for your favorite language.\n+keywords: ksqlDB, client\n+---\n+\n+If you're interested in using ksqlDB from a programming language we don't yet support, we've created\n+this guide to make it easy to add your own [ksqlDB client](index.md). Thanks for your contribution!\n+\n+Functionality\n+-------------\n+\n+Clients should support the following functionality:\n+- [Push and pull queries](#push-and-pull-queries)\n+- [Terminating push queries](#terminating-push-queries)\n+- [Inserting new rows of data into existing ksqlDB streams](#inserting-new-rows-of-data-into-existing-ksqldb-streams)\n+- [Listing existing streams, tables, topics, and queries](#listing-existing-streams-tables-topics-and-queries)\n+- [Creation and deletion of streams and tables](#creation-and-deletion-of-streams-and-tables)\n+- [Terminating persistent queries](#terminating-persistent-queries)\n+\n+The easiest way for a ksqlDB client to implement each of these pieces of functionality is to send HTTP\n+requests to the ksqlDB server. See below for the relevant server endpoints.\n+\n+### Push and pull queries ###\n+\n+Push and pull queries may be issued by sending HTTP requests to the [`/query-stream` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries).\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#executing-pull-or-push-queries),\n+the body of the HTTP request includes the query statement as well as any relevant query properties.\n+\n+If no errors are encountered while processing the query statement, the server will write a\n+metadata row to the response, followed by one or more result rows.\n+\n+The metadata includes:\n+- result column names\n+- result column types, e.g., `STRING`, `INTEGER`, `DOUBLE`, `DECIMAL(4, 2)`, `ARRAY<STRING>`, ``STRUCT<`F1` STRING, `F2` INTEGER>``, etc.\n+- query ID, in the case of push queries\n+\n+The client must expose these metadata fields as part of its API. In particular, the query ID is used for\n+[terminating push queries](#terminating-push-queries).\n+\n+The client representation of result rows must support all of the different data types supported by ksqlDB:\n+\n+| Data type | Example column type string in metadata |\n+|-----------|----------------------------------------|\n+| STRING    | STRING                                 |\n+| INTEGER   | INTEGER                                |\n+| BIGINT    | BIGINT                                 |\n+| DOUBLE    | DOUBLE                                 |\n+| BOOLEAN   | BOOLEAN                                |\n+| DECIMAL   | DECIMAL(4, 2)                          |\n+| ARRAY     | ARRAY<INTEGER>                         |\n+| MAP       | MAP<STRING, DOUBLE>                    |\n+| STRUCT    | STRUCT<\\`F1\\` STRING, \\`F2\\` INTEGER>  |\n+\n+Array, map, and struct types may be recursively nested within each other, and may contain any of the other types as well.\n+\n+Users of the client may wish to receive result rows in different ways:\n+- Do not block. Rather, perform an action asynchronously on each new row as it arrives\n+- Block until the next row arrives\n+- Block until all rows have arrived. This only makes sense in the context of pull queries and push queries with `LIMIT` clauses. \n+\n+Details of client interfaces to support these methods vary by language. For example, the [Java client](java-client.md)\n+uses [Reactive Streams](http://www.reactive-streams.org/) for its asynchronous streaming interface. \n+\n+### Terminating push queries ###\n+\n+Terminate push queries by sending HTTP requests to the [`/close-query` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#terminating-queries).\n+The client must expose an interface that enables users to pass in a push query ID to be passed to this endpoint.\n+\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#terminating-queries),\n+the body of the HTTP request specifies the query ID. For successful requests, the response body will be empty.\n+\n+### Inserting new rows of data into existing ksqlDB streams ###\n+\n+ksqlDB supports inserting new rows of data into existing ksqlDB streams via the [`/inserts-stream` server endpoint](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#inserting-rows-into-an-existing-stream).\n+\n+As explained in the [server endpoint documentation](../../developer-guide/ksqldb-rest-api/streaming-endpoint.md#inserting-rows-into-an-existing-stream),\n+the initial HTTP request body specifies the name of the target stream. If the server successfully\n+validates this target stream name, the client may then write JSON-serialized rows of data to the\n+connection. The server inserts each row asynchronously and writes an ack containing the relevant\n+sequence number to the response.\n+\n+Because the insertions happen asynchronously on the server side, it makes sense for the client to expose APIs\n+for inserting one row at a time, but inserting batches of rows is less useful due to the lack of transactional guarantees.\n+\n+The client should provide a convenient way for users to create rows of data to insert.\n+The Java client's [KsqlObject](api/io/confluent/ksql/api/client/KsqlObject.html) is one example,\n+though details will vary by language.\n+\n+### Listing existing streams, tables, topics, and queries ###\n+\n+Send these admin operation requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+The following table contains the statement text that should be sent in the body of the HTTP request\n+for each type of client admin operation:\n+\n+| Admin operation             | SQL statement text |\n+|-----------------------------|--------------------|\n+| List ksqlDB streams         | LIST STREAMS;      |\n+| List ksqlDB tables          | LIST TABLES;       |\n+| List Kafka topics           | LIST TOPICS;       |\n+| List running ksqlDB queries | LIST QUERIES;      |\n+\n+The [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md)\n+contains the format of the server response body for each type of request. For example, the response of\n+a `LIST STREAMS;` command is a JSON object with an array-type field with name `streams`. Each element\n+of the array is a JSON object with fields `name`, `topic` , `format`, and `type`, each of type string.\n+\n+### Creation and deletion of streams and tables ###\n+\n+These DDL/DML statements include:\n+- Creation of source streams and tables: `CREATE STREAM`, `CREATE TABLE`\n+- Creation of persistent queries: `CREATE STREAM AS SELECT`, `CREATE TABLE AS SELECT`\n+- Deletion of streams and tables: `DROP STREAM`, `DROP TABLE`\n+\n+Send these DDL/DML requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+As explained in the [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md),\n+the HTTP request body contains the text of the ksqlDB statement as well as any relevant\n+query properties. Because ksqlDB supports many different types of statements for creating streams,\n+tables, and persistent queries, the client interface should accept a SQL statement and pass the statement\n+to the server endpoint directly.\n+\n+The server response will contain a command ID, command sequence number, and status information.\n+These pieces of information are typically do not inform actions of ksqlDB users and do not need to be\n+exposed as part of the client interface as a result.\n+\n+Note that the `/ksql` server endpoint accepts not only DDL/DML requests as described here, but also\n+other types of statements including admin operation requests described [above](#listing-existing-streams-tables-topics-and-queries).\n+If the server response for a SQL statement submitted to the `/ksql` endpoint has HTTP status code 200\n+but the response body does not fit the form documented above, then the submitted SQL statement did\n+not correspond to a DDL/DML statement. The client should handle this potential scenario by returning\n+an error to the user.\n+\n+### Terminating persistent queries ###\n+\n+Send these requests to the [`/ksql` server endpoint](../ksqldb-rest-api/ksql-endpoint.md).\n+\n+The SQL statement that should be sent in the HTTP request body is `TERMINATE <persistent_query_id>;`.\n+\n+As noted in the [server endpoint documentation](../ksqldb-rest-api/ksql-endpoint.md),\n+the format of the response body for terminate query requests is the same as for other DDL/DML requests\n+[above](#creation-and-deletion-of-streams-and-tables).\n+\n+Configurations\n+--------------\n+\n+The client must expose options for specifying the address of the ksqlDB server to connect to.\n+Additional options that are important to expose include:\n+- Support for TLS-enabled ksqlDB servers\n+- Support for mutual-TLS-enabled ksqlDB servers\n+- Support for ksqlDB servers with HTTP basic authentication enabled\n+\n+As an example, users specify options for the Java client via a [ClientOptions](api/io/confluent/ksql/api/client/ClientOptions.html)\n+object that is passed when [creating a Client instance](api/io/confluent/ksql/api/client/Client.html#create(io.confluent.ksql.api.client.ClientOptions)).\n+\n+It may also be nice to support configuring multiple ksqlDB server addresses, so the client may route requests", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA3OTYzOQ=="}, "originalCommit": {"oid": "eab6c70e3c25dc6a3614a3152e3cc954f5f4a134"}, "originalPosition": 159}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3167, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}