{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0NTYxMzcy", "number": 5083, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTowODo0MlrODyo0_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToyODowNFrODypOsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDI0MzE3OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/joins/join-streams-and-tables.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOTowODo0MlrOGGzZEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToyOTo0NFrOGG0F2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NjY0Mg==", "bodyText": "Would it make sense to include the error message in the docs? This way if someone is searching google for the error (which is typical), they can land up here and educate themselves.", "url": "https://github.com/confluentinc/ksql/pull/5083#discussion_r409786642", "createdAt": "2020-04-16T19:08:42Z", "author": {"login": "apurvam"}, "path": "docs-md/developer-guide/joins/join-streams-and-tables.md", "diffHunk": "@@ -299,3 +299,44 @@ table, if the corresponding key exists already in the join result table.\n | 14        |                  | d                |                  |                  | [null, d]        |\n | 15        | D                |                  | [D, d]           | [D, d]           | [D, d]           |\n \n+N-Way Joins\n+-----------\n+\n+ksqlDB supports joining more than two sources in a single statement. These\n+joins are semantically equivalent to joining N sources consecutively, and\n+the order of the joins is controlled by the order in which the joins are\n+written.\n+\n+Let's take the following query as an example, where `A` is a stream of events\n+and `B` and `C` are both tables:\n+```sql\n+CREATE STREAM joined AS SELECT * FROM A\n+        JOIN B ON A.id = B.product_id\n+        JOIN C ON A.id = C.purchased_id;\n+```\n+\n+The output of this query would be a stream, and the intermediate join result\n+would be the stream `A \u22c8 B`. If `C` were a stream instead of a table, we would \n+rewrite the join accordingly by adding a `WITHIN` clause because joining `A \u22c8 B`\n+with `C` is a stream-stream join:\n+\n+```sql\n+CREATE STREAM joined AS SELECT * FROM A\n+        JOIN B ON A.id = B.product_id\n+        JOIN C WITHIN 10 SECONDS ON A.id = C.purchased_id;\n+```\n+\n+### Limitations of N-Way Joins\n+\n+The limitations and restrictions described in the sections above apply to each intermediate \n+step in N-way joins. For example, `FULL OUTER` joins between streams and tables are\n+not supported. This means that if any stage in the N-way join resolves to a `FULL OUTER`\n+join between a strem and a table the entire query will fail:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704e136a25e30ead07aee66ebe844de77358ba"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5ODEwNA==", "bodyText": "Excellent idea!", "url": "https://github.com/confluentinc/ksql/pull/5083#discussion_r409798104", "createdAt": "2020-04-16T19:29:44Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/joins/join-streams-and-tables.md", "diffHunk": "@@ -299,3 +299,44 @@ table, if the corresponding key exists already in the join result table.\n | 14        |                  | d                |                  |                  | [null, d]        |\n | 15        | D                |                  | [D, d]           | [D, d]           | [D, d]           |\n \n+N-Way Joins\n+-----------\n+\n+ksqlDB supports joining more than two sources in a single statement. These\n+joins are semantically equivalent to joining N sources consecutively, and\n+the order of the joins is controlled by the order in which the joins are\n+written.\n+\n+Let's take the following query as an example, where `A` is a stream of events\n+and `B` and `C` are both tables:\n+```sql\n+CREATE STREAM joined AS SELECT * FROM A\n+        JOIN B ON A.id = B.product_id\n+        JOIN C ON A.id = C.purchased_id;\n+```\n+\n+The output of this query would be a stream, and the intermediate join result\n+would be the stream `A \u22c8 B`. If `C` were a stream instead of a table, we would \n+rewrite the join accordingly by adding a `WITHIN` clause because joining `A \u22c8 B`\n+with `C` is a stream-stream join:\n+\n+```sql\n+CREATE STREAM joined AS SELECT * FROM A\n+        JOIN B ON A.id = B.product_id\n+        JOIN C WITHIN 10 SECONDS ON A.id = C.purchased_id;\n+```\n+\n+### Limitations of N-Way Joins\n+\n+The limitations and restrictions described in the sections above apply to each intermediate \n+step in N-way joins. For example, `FULL OUTER` joins between streams and tables are\n+not supported. This means that if any stage in the N-way join resolves to a `FULL OUTER`\n+join between a strem and a table the entire query will fail:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc4NjY0Mg=="}, "originalCommit": {"oid": "85704e136a25e30ead07aee66ebe844de77358ba"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDI3NjgxOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/joins/join-streams-and-tables.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToxODo0MFrOGGzuPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToxODo0MFrOGGzuPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MjA2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Let's take the following query as an example, where `A` is a stream of events\n          \n          \n            \n            Consider the following query as an example, where `A` is a stream of events", "url": "https://github.com/confluentinc/ksql/pull/5083#discussion_r409792063", "createdAt": "2020-04-16T19:18:40Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/joins/join-streams-and-tables.md", "diffHunk": "@@ -299,3 +299,44 @@ table, if the corresponding key exists already in the join result table.\n | 14        |                  | d                |                  |                  | [null, d]        |\n | 15        | D                |                  | [D, d]           | [D, d]           | [D, d]           |\n \n+N-Way Joins\n+-----------\n+\n+ksqlDB supports joining more than two sources in a single statement. These\n+joins are semantically equivalent to joining N sources consecutively, and\n+the order of the joins is controlled by the order in which the joins are\n+written.\n+\n+Let's take the following query as an example, where `A` is a stream of events", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704e136a25e30ead07aee66ebe844de77358ba"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDI3ODUyOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/joins/join-streams-and-tables.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToxOTowN1rOGGzvTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToxOTowN1rOGGzvTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5MjMzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The output of this query would be a stream, and the intermediate join result\n          \n          \n            \n            The output of this query is a stream, and the intermediate join result", "url": "https://github.com/confluentinc/ksql/pull/5083#discussion_r409792332", "createdAt": "2020-04-16T19:19:07Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/joins/join-streams-and-tables.md", "diffHunk": "@@ -299,3 +299,44 @@ table, if the corresponding key exists already in the join result table.\n | 14        |                  | d                |                  |                  | [null, d]        |\n | 15        | D                |                  | [D, d]           | [D, d]           | [D, d]           |\n \n+N-Way Joins\n+-----------\n+\n+ksqlDB supports joining more than two sources in a single statement. These\n+joins are semantically equivalent to joining N sources consecutively, and\n+the order of the joins is controlled by the order in which the joins are\n+written.\n+\n+Let's take the following query as an example, where `A` is a stream of events\n+and `B` and `C` are both tables:\n+```sql\n+CREATE STREAM joined AS SELECT * FROM A\n+        JOIN B ON A.id = B.product_id\n+        JOIN C ON A.id = C.purchased_id;\n+```\n+\n+The output of this query would be a stream, and the intermediate join result", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704e136a25e30ead07aee66ebe844de77358ba"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDMwMDAxOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/joins/join-streams-and-tables.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToyNToyMVrOGGz8tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToyNToyMVrOGGz8tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5NTc2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            would be the stream `A \u22c8 B`. If `C` were a stream instead of a table, we would \n          \n          \n            \n            is the stream `A \u22c8 B`. If `C` were a stream instead of a table, you would", "url": "https://github.com/confluentinc/ksql/pull/5083#discussion_r409795766", "createdAt": "2020-04-16T19:25:21Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/joins/join-streams-and-tables.md", "diffHunk": "@@ -299,3 +299,44 @@ table, if the corresponding key exists already in the join result table.\n | 14        |                  | d                |                  |                  | [null, d]        |\n | 15        | D                |                  | [D, d]           | [D, d]           | [D, d]           |\n \n+N-Way Joins\n+-----------\n+\n+ksqlDB supports joining more than two sources in a single statement. These\n+joins are semantically equivalent to joining N sources consecutively, and\n+the order of the joins is controlled by the order in which the joins are\n+written.\n+\n+Let's take the following query as an example, where `A` is a stream of events\n+and `B` and `C` are both tables:\n+```sql\n+CREATE STREAM joined AS SELECT * FROM A\n+        JOIN B ON A.id = B.product_id\n+        JOIN C ON A.id = C.purchased_id;\n+```\n+\n+The output of this query would be a stream, and the intermediate join result\n+would be the stream `A \u22c8 B`. If `C` were a stream instead of a table, we would ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704e136a25e30ead07aee66ebe844de77358ba"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDMwNjU2OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/joins/join-streams-and-tables.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToyNzoyMlrOGG0AyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToyNzoyMlrOGG0AyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5NjgwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            rewrite the join accordingly by adding a `WITHIN` clause because joining `A \u22c8 B`\n          \n          \n            \n            rewrite the join accordingly by adding a `WITHIN` clause, because joining `A \u22c8 B`", "url": "https://github.com/confluentinc/ksql/pull/5083#discussion_r409796808", "createdAt": "2020-04-16T19:27:22Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/joins/join-streams-and-tables.md", "diffHunk": "@@ -299,3 +299,44 @@ table, if the corresponding key exists already in the join result table.\n | 14        |                  | d                |                  |                  | [null, d]        |\n | 15        | D                |                  | [D, d]           | [D, d]           | [D, d]           |\n \n+N-Way Joins\n+-----------\n+\n+ksqlDB supports joining more than two sources in a single statement. These\n+joins are semantically equivalent to joining N sources consecutively, and\n+the order of the joins is controlled by the order in which the joins are\n+written.\n+\n+Let's take the following query as an example, where `A` is a stream of events\n+and `B` and `C` are both tables:\n+```sql\n+CREATE STREAM joined AS SELECT * FROM A\n+        JOIN B ON A.id = B.product_id\n+        JOIN C ON A.id = C.purchased_id;\n+```\n+\n+The output of this query would be a stream, and the intermediate join result\n+would be the stream `A \u22c8 B`. If `C` were a stream instead of a table, we would \n+rewrite the join accordingly by adding a `WITHIN` clause because joining `A \u22c8 B`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704e136a25e30ead07aee66ebe844de77358ba"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDMwNzk5OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/joins/join-streams-and-tables.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToyNzo0NVrOGG0BoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToyNzo0NVrOGG0BoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5NzAyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The limitations and restrictions described in the sections above apply to each intermediate \n          \n          \n            \n            The limitations and restrictions described in the previous sections apply to each intermediate", "url": "https://github.com/confluentinc/ksql/pull/5083#discussion_r409797024", "createdAt": "2020-04-16T19:27:45Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/joins/join-streams-and-tables.md", "diffHunk": "@@ -299,3 +299,44 @@ table, if the corresponding key exists already in the join result table.\n | 14        |                  | d                |                  |                  | [null, d]        |\n | 15        | D                |                  | [D, d]           | [D, d]           | [D, d]           |\n \n+N-Way Joins\n+-----------\n+\n+ksqlDB supports joining more than two sources in a single statement. These\n+joins are semantically equivalent to joining N sources consecutively, and\n+the order of the joins is controlled by the order in which the joins are\n+written.\n+\n+Let's take the following query as an example, where `A` is a stream of events\n+and `B` and `C` are both tables:\n+```sql\n+CREATE STREAM joined AS SELECT * FROM A\n+        JOIN B ON A.id = B.product_id\n+        JOIN C ON A.id = C.purchased_id;\n+```\n+\n+The output of this query would be a stream, and the intermediate join result\n+would be the stream `A \u22c8 B`. If `C` were a stream instead of a table, we would \n+rewrite the join accordingly by adding a `WITHIN` clause because joining `A \u22c8 B`\n+with `C` is a stream-stream join:\n+\n+```sql\n+CREATE STREAM joined AS SELECT * FROM A\n+        JOIN B ON A.id = B.product_id\n+        JOIN C WITHIN 10 SECONDS ON A.id = C.purchased_id;\n+```\n+\n+### Limitations of N-Way Joins\n+\n+The limitations and restrictions described in the sections above apply to each intermediate ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704e136a25e30ead07aee66ebe844de77358ba"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NDMwODk4OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/joins/join-streams-and-tables.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToyODowNFrOGG0CRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxOToyODowNFrOGG0CRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTc5NzE4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            join between a strem and a table the entire query will fail:\n          \n          \n            \n            join between a strem and a table the entire query fails:", "url": "https://github.com/confluentinc/ksql/pull/5083#discussion_r409797188", "createdAt": "2020-04-16T19:28:04Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/joins/join-streams-and-tables.md", "diffHunk": "@@ -299,3 +299,44 @@ table, if the corresponding key exists already in the join result table.\n | 14        |                  | d                |                  |                  | [null, d]        |\n | 15        | D                |                  | [D, d]           | [D, d]           | [D, d]           |\n \n+N-Way Joins\n+-----------\n+\n+ksqlDB supports joining more than two sources in a single statement. These\n+joins are semantically equivalent to joining N sources consecutively, and\n+the order of the joins is controlled by the order in which the joins are\n+written.\n+\n+Let's take the following query as an example, where `A` is a stream of events\n+and `B` and `C` are both tables:\n+```sql\n+CREATE STREAM joined AS SELECT * FROM A\n+        JOIN B ON A.id = B.product_id\n+        JOIN C ON A.id = C.purchased_id;\n+```\n+\n+The output of this query would be a stream, and the intermediate join result\n+would be the stream `A \u22c8 B`. If `C` were a stream instead of a table, we would \n+rewrite the join accordingly by adding a `WITHIN` clause because joining `A \u22c8 B`\n+with `C` is a stream-stream join:\n+\n+```sql\n+CREATE STREAM joined AS SELECT * FROM A\n+        JOIN B ON A.id = B.product_id\n+        JOIN C WITHIN 10 SECONDS ON A.id = C.purchased_id;\n+```\n+\n+### Limitations of N-Way Joins\n+\n+The limitations and restrictions described in the sections above apply to each intermediate \n+step in N-way joins. For example, `FULL OUTER` joins between streams and tables are\n+not supported. This means that if any stage in the N-way join resolves to a `FULL OUTER`\n+join between a strem and a table the entire query will fail:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85704e136a25e30ead07aee66ebe844de77358ba"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3573, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}