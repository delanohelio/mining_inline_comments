{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyODU1MDUy", "number": 6806, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODo1MTozOVrOFLAerw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyOTowMFrOFLWUxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDg2NTExOnYy", "diffSide": "RIGHT", "path": "design-proposals/klip-43-timestamp-data-type-support.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODo1MTozOVrOIN89oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODo1MTozOVrOIN89oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUwMTIxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            **Status**: Approved | \n          \n          \n            \n            **Status**: In development |", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551501217", "createdAt": "2021-01-04T18:51:39Z", "author": {"login": "spena"}, "path": "design-proposals/klip-43-timestamp-data-type-support.md", "diffHunk": "@@ -1,8 +1,8 @@\n # KLIP-43: TIMESTAMP Data Type Support\n \n **Author**: @jzaralim | \n-**Release Target**: 0.15, 0.16 | \n-**Status**: In Discussion | \n+**Release Target**: 0.16 | \n+**Status**: Approved | ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTE0NzkwOnYy", "diffSide": "RIGHT", "path": "ksqldb-common/src/main/java/io/confluent/ksql/function/types/TimestampType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDoxNjo0M1rOIN_mnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDoxNjo0M1rOIN_mnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU0NDQ3Nw==", "bodyText": "Why is this hashcode?", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551544477", "createdAt": "2021-01-04T20:16:43Z", "author": {"login": "spena"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/function/types/TimestampType.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.types;\n+\n+public final class TimestampType extends ObjectType {\n+  public static final TimestampType INSTANCE = new TimestampType();\n+\n+  private TimestampType() {\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTE3Njk5OnYy", "diffSide": "RIGHT", "path": "ksqldb-common/src/test/java/io/confluent/ksql/schema/ksql/SchemaConvertersTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDoyNDo0MVrOIN_4bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODoxNDowOFrOIO1gTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU0OTAzOQ==", "bodyText": "What is version 1?", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551549039", "createdAt": "2021-01-04T20:24:41Z", "author": {"login": "spena"}, "path": "ksqldb-common/src/test/java/io/confluent/ksql/schema/ksql/SchemaConvertersTest.java", "diffHunk": "@@ -62,13 +63,16 @@\n   private static final Schema CONNECT_BIGINT_SCHEMA = SchemaBuilder.int64().optional().build();\n   private static final Schema CONNECT_DOUBLE_SCHEMA = SchemaBuilder.float64().optional().build();\n   private static final Schema CONNECT_STRING_SCHEMA = SchemaBuilder.string().optional().build();\n+  private static final Schema CONNECT_TIMESTAMP_SCHEMA =\n+      SchemaBuilder.int64().name(\"org.apache.kafka.connect.data.Timestamp\").version(1).optional().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQyNzU5OQ==", "bodyText": "It's a part of the schema from the Timestamp class. This ended up being replaced by the builder from the Timestamp class though.", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552427599", "createdAt": "2021-01-06T08:14:08Z", "author": {"login": "jzaralim"}, "path": "ksqldb-common/src/test/java/io/confluent/ksql/schema/ksql/SchemaConvertersTest.java", "diffHunk": "@@ -62,13 +63,16 @@\n   private static final Schema CONNECT_BIGINT_SCHEMA = SchemaBuilder.int64().optional().build();\n   private static final Schema CONNECT_DOUBLE_SCHEMA = SchemaBuilder.float64().optional().build();\n   private static final Schema CONNECT_STRING_SCHEMA = SchemaBuilder.string().optional().build();\n+  private static final Schema CONNECT_TIMESTAMP_SCHEMA =\n+      SchemaBuilder.int64().name(\"org.apache.kafka.connect.data.Timestamp\").version(1).optional().build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU0OTAzOQ=="}, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTE4NTAxOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine-common/src/main/java/io/confluent/ksql/schema/ksql/SqlTimestamps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDoyNjo1OFrOIN_84g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDoyNjo1OFrOIN_84g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1MDE3OA==", "bodyText": "SQL double?", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551550178", "createdAt": "2021-01-04T20:26:58Z", "author": {"login": "spena"}, "path": "ksqldb-engine-common/src/main/java/io/confluent/ksql/schema/ksql/SqlTimestamps.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.schema.ksql;\n+\n+import io.confluent.ksql.util.KsqlConstants;\n+import io.confluent.ksql.util.timestamp.PartialStringToTimestampParser;\n+import java.sql.Timestamp;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * Helpers for working with Sql {@code TIMESTAMP}.\n+ */\n+public final class SqlTimestamps {\n+\n+  private SqlTimestamps() {\n+  }\n+\n+  /**\n+   * Parse a SQL double from a string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTIwMDEzOnYy", "diffSide": "RIGHT", "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/timestamp/PartialStringToTimestampParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDozMjoxMVrOIOAGTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDozMjoxMVrOIOAGTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1MjU5MQ==", "bodyText": "parse is gonna parse strings with timezones if the string contains +0200 for instance. Isn't this going to cause an issue?", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551552591", "createdAt": "2021-01-04T20:32:11Z", "author": {"login": "spena"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/timestamp/PartialStringToTimestampParser.java", "diffHunk": "@@ -31,12 +32,16 @@\n   private static final String HELP_MESSAGE = System.lineSeparator()\n       + \"Required format is: \\\"\" + KsqlConstants.DATE_TIME_PATTERN + \"\\\", \"\n       + \"with an optional numeric 4-digit timezone, for example: \"\n-      + \"'2020-05-26T23.59.58.000' or with tz: '2020-05-26T23.59.58.000+0200'. \"\n+      + \"'2020-05-26T23:59:58.000' or with tz: '2020-05-26T23:59:58.000+0200'. \"\n       + \"Partials are also supported, for example \\\"2020-05-26\\\"\";\n \n   private static final StringToTimestampParser PARSER =\n       new StringToTimestampParser(KsqlConstants.DATE_TIME_PATTERN);\n \n+  public Timestamp parseToTimestamp(final String text) {\n+    return new Timestamp(parse(text));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTIwNDM4OnYy", "diffSide": "RIGHT", "path": "ksqldb-common/src/test/java/io/confluent/ksql/util/timestamp/PartialStringToTimestampParserTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDozMzozOFrOIOAI3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODoyODoxOFrOIO12uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1MzI0Ng==", "bodyText": "Add a test to parse a time without timezone. Btw, are we supporting this? or what is the behavior we discussed when using timezone values in the a string?", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551553246", "createdAt": "2021-01-04T20:33:38Z", "author": {"login": "spena"}, "path": "ksqldb-common/src/test/java/io/confluent/ksql/util/timestamp/PartialStringToTimestampParserTest.java", "diffHunk": "@@ -129,6 +129,11 @@ public void shouldIncludeRequiredFormatInErrorMessage() {\n             + \"with an optional numeric 4-digit timezone\"));\n   }\n \n+  @Test\n+  public void shouldParseToTimestamp() {\n+    assertThat(parser.parseToTimestamp(\"2017-11-13T23:59:58.999-0100\").getTime(), is(1510621198999L));\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzMzMzNw==", "bodyText": "The conclusion was to include a conversion function and to not store timezone information. Timezones in strings were not specified in the klip, but I think it makes sense to support it because this is basically the same thing as calling CONVERT_TZ(\"2017-11-13T23:59:58.999\",\"-0100\"), and it is something we already support in some filter expressions.", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552433337", "createdAt": "2021-01-06T08:28:18Z", "author": {"login": "jzaralim"}, "path": "ksqldb-common/src/test/java/io/confluent/ksql/util/timestamp/PartialStringToTimestampParserTest.java", "diffHunk": "@@ -129,6 +129,11 @@ public void shouldIncludeRequiredFormatInErrorMessage() {\n             + \"with an optional numeric 4-digit timezone\"));\n   }\n \n+  @Test\n+  public void shouldParseToTimestamp() {\n+    assertThat(parser.parseToTimestamp(\"2017-11-13T23:59:58.999-0100\").getTime(), is(1510621198999L));\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1MzI0Ng=="}, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTIwNzQxOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine-common/src/main/java/io/confluent/ksql/schema/ksql/SqlTimestamps.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDozNDozNlrOIOAKoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDozNDozNlrOIOAKoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1MzY5Nw==", "bodyText": "Can PartialStringToTimestampParser be a static field in the class? It will avoid re-creating this object every time we parse a timestamp.", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551553697", "createdAt": "2021-01-04T20:34:36Z", "author": {"login": "spena"}, "path": "ksqldb-engine-common/src/main/java/io/confluent/ksql/schema/ksql/SqlTimestamps.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.schema.ksql;\n+\n+import io.confluent.ksql.util.KsqlConstants;\n+import io.confluent.ksql.util.timestamp.PartialStringToTimestampParser;\n+import java.sql.Timestamp;\n+import java.time.ZoneId;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * Helpers for working with Sql {@code TIMESTAMP}.\n+ */\n+public final class SqlTimestamps {\n+\n+  private SqlTimestamps() {\n+  }\n+\n+  /**\n+   * Parse a SQL double from a string.\n+   *\n+   * <p>Rejects {@code Infinity} and {@code Nan} as invalid.\n+   *\n+   * @param str the string to parse.\n+   * @return the double value.\n+   */\n+  public static Timestamp parseTimestamp(final String str) {\n+    return new PartialStringToTimestampParser().parseToTimestamp(str);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTIxNjgwOnYy", "diffSide": "LEFT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/AstBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDozNzozMVrOIOAQHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODozMDoxMlrOIO15rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1NTEwMw==", "bodyText": "Question: why is it removed? I did not understand what this condition does.", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551555103", "createdAt": "2021-01-04T20:37:31Z", "author": {"login": "spena"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/AstBuilder.java", "diffHunk": "@@ -1211,9 +1210,6 @@ public Node visitTypeConstructor(final SqlBaseParser.TypeConstructorContext cont\n       if (type.equals(\"TIME\")) {\n         return new TimeLiteral(location, value);\n       }\n-      if (type.equals(\"TIMESTAMP\")) {\n-        return new TimestampLiteral(location, value);\n-      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNDA5Mw==", "bodyText": "This function for types that are declared using a construction, such as DECIMAL(4,2). There seems to have been some sort of attempt to include the timestamp type in the beginning of the project, which is why this is here.", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552434093", "createdAt": "2021-01-06T08:30:12Z", "author": {"login": "jzaralim"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/AstBuilder.java", "diffHunk": "@@ -1211,9 +1210,6 @@ public Node visitTypeConstructor(final SqlBaseParser.TypeConstructorContext cont\n       if (type.equals(\"TIME\")) {\n         return new TimeLiteral(location, value);\n       }\n-      if (type.equals(\"TIMESTAMP\")) {\n-        return new TimestampLiteral(location, value);\n-      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1NTEwMw=="}, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MTIyNjExOnYy", "diffSide": "RIGHT", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/expression/tree/TimestampLiteral.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMDo0MDoyM1rOIOAVoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODozNDoxNFrOIO1_vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1NjUxMw==", "bodyText": "Why not passing the long value instead of the Timestamp?\nI was going to ask why not storing the Timestamp object instead of the long, but I noticed Timestamp is mutable.", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r551556513", "createdAt": "2021-01-04T20:40:23Z", "author": {"login": "spena"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/expression/tree/TimestampLiteral.java", "diffHunk": "@@ -19,26 +19,27 @@\n \n import com.google.errorprone.annotations.Immutable;\n import io.confluent.ksql.parser.NodeLocation;\n+import java.sql.Timestamp;\n import java.util.Objects;\n import java.util.Optional;\n \n @Immutable\n public class TimestampLiteral extends Literal {\n \n-  private final String value;\n+  private final long value;\n \n-  public TimestampLiteral(final String value) {\n+  public TimestampLiteral(final Timestamp value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzNTY0Nw==", "bodyText": "The code passes around a Timestamp value. We could intitialize with a long value instead, but the conversion would still have to be made at some other location in the code.", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552435647", "createdAt": "2021-01-06T08:34:14Z", "author": {"login": "jzaralim"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/expression/tree/TimestampLiteral.java", "diffHunk": "@@ -19,26 +19,27 @@\n \n import com.google.errorprone.annotations.Immutable;\n import io.confluent.ksql.parser.NodeLocation;\n+import java.sql.Timestamp;\n import java.util.Objects;\n import java.util.Optional;\n \n @Immutable\n public class TimestampLiteral extends Literal {\n \n-  private final String value;\n+  private final long value;\n \n-  public TimestampLiteral(final String value) {\n+  public TimestampLiteral(final Timestamp value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTU1NjUxMw=="}, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDI1MjMxOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/generic/GenericExpressionResolverTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTo0Mzo1MFrOIOcQvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTo0Mzo1MFrOIOcQvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAxNDAxMg==", "bodyText": "Add another test that allows parsing a string timestamp.", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552014012", "createdAt": "2021-01-05T15:43:50Z", "author": {"login": "spena"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/generic/GenericExpressionResolverTest.java", "diffHunk": "@@ -90,5 +90,18 @@ public void shouldThrowIfCannotCoerce() {\n     assertThat(e.getMessage(), containsString(\"Expected type ARRAY<INTEGER> for field `FOO` but got INTEGER(1)\"));\n   }\n \n+  @Test\n+  public void shouldThrowIfCannotParseTimestamp() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDI5MTU0OnYy", "diffSide": "RIGHT", "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/codegen/helpers/CastEvaluatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTo1Mjo1N1rOIOcoZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNTo1Mjo1N1rOIOcoZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAyMDA2OA==", "bodyText": "All the types have the SqlBaseType. reference. Can we keep that consistent for the timestamp in all the code? (SqlBaseType.TIMESTAMP)", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552020068", "createdAt": "2021-01-05T15:52:57Z", "author": {"login": "spena"}, "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/codegen/helpers/CastEvaluatorTest.java", "diffHunk": "@@ -732,19 +784,24 @@ static Object instanceFor(final SqlType type) {\n                 .add(SqlBaseType.DECIMAL)\n                 .add(SqlBaseType.DOUBLE)\n                 .add(SqlBaseType.STRING)\n+                .add(TIMESTAMP)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDM4MDEyOnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/serde/ConnectSerdeSupplier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoxMzo1NFrOIOdfAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNlQwODo0MTozMFrOIO2MHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzNDA1MQ==", "bodyText": "Does it need changes in connectToSpec?\nI see this code in that method:\ncase INT64:\n          if (Timestamp.LOGICAL_NAME.equals(schema.name())) {\n            return Timestamp.fromLogical(schema, (Date) data);\n          }", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552034051", "createdAt": "2021-01-05T16:13:54Z", "author": {"login": "spena"}, "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/serde/ConnectSerdeSupplier.java", "diffHunk": "@@ -125,10 +125,11 @@ private Object specToConnect(final Object spec, final Schema schema) {\n         case INT32:\n           return Integer.valueOf(spec.toString());\n         case INT64:\n+          final Long longVal = Long.valueOf(spec.toString());\n           if (Timestamp.LOGICAL_NAME.equals(schema.name())) {\n-            return Timestamp.toLogical(schema, (Long) spec);\n+            return new java.sql.Timestamp(longVal);\n           }\n-          return Long.valueOf(spec.toString());\n+          return longVal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjQzODgxMg==", "bodyText": "connectToSpec is used for checking the values in streams in functional tests. These values are verified against values in a json file and since json files cannot store timestamp objects, comparing the millis is the only way to check timestamp values.", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552438812", "createdAt": "2021-01-06T08:41:30Z", "author": {"login": "jzaralim"}, "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/serde/ConnectSerdeSupplier.java", "diffHunk": "@@ -125,10 +125,11 @@ private Object specToConnect(final Object spec, final Schema schema) {\n         case INT32:\n           return Integer.valueOf(spec.toString());\n         case INT64:\n+          final Long longVal = Long.valueOf(spec.toString());\n           if (Timestamp.LOGICAL_NAME.equals(schema.name())) {\n-            return Timestamp.toLogical(schema, (Long) spec);\n+            return new java.sql.Timestamp(longVal);\n           }\n-          return Long.valueOf(spec.toString());\n+          return longVal;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzNDA1MQ=="}, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDQxNjQxOnYy", "diffSide": "RIGHT", "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/delimited/KsqlDelimitedDeserializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyMjoyNVrOIOd1LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyMjoyNVrOIOd1LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjAzOTcyNA==", "bodyText": "Don't you mean this?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static Parser dateParser(final SqlType sqlType) {\n          \n          \n            \n              private static Parser timestampParser(final SqlType sqlType) {", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552039724", "createdAt": "2021-01-05T16:22:25Z", "author": {"login": "spena"}, "path": "ksqldb-serde/src/main/java/io/confluent/ksql/serde/delimited/KsqlDelimitedDeserializer.java", "diffHunk": "@@ -126,6 +128,10 @@ private static Parser decimalParser(final SqlType sqlType) {\n     return v -> DecimalUtil.ensureFit(new BigDecimal(v), decimalType);\n   }\n \n+  private static Parser dateParser(final SqlType sqlType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDQ0NDIyOnYy", "diffSide": "RIGHT", "path": "ksqldb-serde/src/test/java/io/confluent/ksql/serde/json/KsqlJsonSerializerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyOTowMFrOIOeGKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjoyOTowMFrOIOeGKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA0NDA3NQ==", "bodyText": "Should we use the Timestamp.LOGICAL_NAME instead of hardcoding the name?", "url": "https://github.com/confluentinc/ksql/pull/6806#discussion_r552044075", "createdAt": "2021-01-05T16:29:00Z", "author": {"login": "spena"}, "path": "ksqldb-serde/src/test/java/io/confluent/ksql/serde/json/KsqlJsonSerializerTest.java", "diffHunk": "@@ -91,6 +93,7 @@\n           .optional()\n           .build())\n       .field(DECIMALCOL, Decimal.builder(5).optional().parameter(DecimalUtil.PRECISION_FIELD, \"10\").build())\n+      .field(TIMESTAMPCOL, SchemaBuilder.int64().name(\"org.apache.kafka.connect.data.Timestamp\").version(1).optional().build())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf26747e6cf728710ddebda1e3149927fe831716"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2391, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}