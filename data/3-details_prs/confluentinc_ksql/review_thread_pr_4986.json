{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MTIyMTk5", "number": 4986, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoxNDo1OFrODucchg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzo0NToyN1rODvWGLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDI3MTQyOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoxNDo1OFrOGAcVog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoxNDo1OFrOGAcVog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzExNzQ3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\n          \n          \n            \n            A ksqlDB STREAM is a stream of _facts_. Each fact is immutable and unique.", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403117474", "createdAt": "2020-04-03T16:14:58Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -13,16 +13,37 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE STREAM stream_name ( { column_name data_type } [, ...] )\r\n+CREATE STREAM stream_name ( { column_name data_type (KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new stream with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new stream with the specified columns and properties.\r\n+\r\n+A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDI5MDIzOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoxNzo0NFrOGAcfnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoxNzo0NFrOGAcfnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyMDAzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\n          \n          \n            \n            | Tombstones               | No <br> Messages with NULL values are ignored.                | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted.|", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403120031", "createdAt": "2020-04-03T16:17:44Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -13,16 +13,37 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE STREAM stream_name ( { column_name data_type } [, ...] )\r\n+CREATE STREAM stream_name ( { column_name data_type (KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new stream with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new stream with the specified columns and properties.\r\n+\r\n+A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\r\n+A stream can store its data in either `KEY` or `VALUE` columns.\r\n+Both `KEY` and `VALUE` columns can be NULL. No special processing is done if two rows have the same\r\n+key. The table below contrasts this to a [ksqlDB TABLE](./create-table):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDI5NTUxOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoxODozOFrOGAciiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoxODozOFrOGAciiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyMDc3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\n          \n          \n            \n            | NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored.|", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403120777", "createdAt": "2020-04-03T16:18:38Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -13,16 +13,37 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE STREAM stream_name ( { column_name data_type } [, ...] )\r\n+CREATE STREAM stream_name ( { column_name data_type (KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new stream with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new stream with the specified columns and properties.\r\n+\r\n+A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\r\n+A stream can store its data in either `KEY` or `VALUE` columns.\r\n+Both `KEY` and `VALUE` columns can be NULL. No special processing is done if two rows have the same\r\n+key. The table below contrasts this to a [ksqlDB TABLE](./create-table):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDI5ODg0OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoxOTowNlrOGAckMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoxOTowNlrOGAckMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyMTIwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\n          \n          \n            \n            | NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored.|", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403121201", "createdAt": "2020-04-03T16:19:06Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -13,16 +13,37 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE STREAM stream_name ( { column_name data_type } [, ...] )\r\n+CREATE STREAM stream_name ( { column_name data_type (KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new stream with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new stream with the specified columns and properties.\r\n+\r\n+A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\r\n+A stream can store its data in either `KEY` or `VALUE` columns.\r\n+Both `KEY` and `VALUE` columns can be NULL. No special processing is done if two rows have the same\r\n+key. The table below contrasts this to a [ksqlDB TABLE](./create-table):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDMxMTYwOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoyMToyNFrOGAcrlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoyMToyNFrOGAcrlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyMzA5NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            key. The table below contrasts this to a [ksqlDB TABLE](./create-table):\n          \n          \n            \n            key. This situation is handled differently by a [ksqlDB TABLE](./create-table), as shown in the following table.", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403123095", "createdAt": "2020-04-03T16:21:24Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -13,16 +13,37 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE STREAM stream_name ( { column_name data_type } [, ...] )\r\n+CREATE STREAM stream_name ( { column_name data_type (KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new stream with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new stream with the specified columns and properties.\r\n+\r\n+A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\r\n+A stream can store its data in either `KEY` or `VALUE` columns.\r\n+Both `KEY` and `VALUE` columns can be NULL. No special processing is done if two rows have the same\r\n+key. The table below contrasts this to a [ksqlDB TABLE](./create-table):\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDMxNDU0OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoyMTo1N1rOGActiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoyMTo1N1rOGActiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyMzU5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * `column_name`: the name of the column. If unquoted the name must be a valid\n          \n          \n            \n             * `column_name`: the name of the column. If unquoted, the name must be a valid", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403123593", "createdAt": "2020-04-03T16:21:57Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -13,16 +13,37 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE STREAM stream_name ( { column_name data_type } [, ...] )\r\n+CREATE STREAM stream_name ( { column_name data_type (KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new stream with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new stream with the specified columns and properties.\r\n+\r\n+A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\r\n+A stream can store its data in either `KEY` or `VALUE` columns.\r\n+Both `KEY` and `VALUE` columns can be NULL. No special processing is done if two rows have the same\r\n+key. The table below contrasts this to a [ksqlDB TABLE](./create-table):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r\n+\r\n+Each column is defined by:\r\n+ * `column_name`: the name of the column. If unquoted the name must be a valid\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDMyNTQ0OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoyMzo1N1rOGAczwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoyMzo1N1rOGAczwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzEyNTE4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               [SQL identifier](../../concepts/schemas#valid-identifiers) and will be converted to uppercase.\n          \n          \n            \n               [SQL identifier](../../concepts/schemas#valid-identifiers) and ksqlDB converts it to uppercase.", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403125184", "createdAt": "2020-04-03T16:23:57Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -13,16 +13,37 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE STREAM stream_name ( { column_name data_type } [, ...] )\r\n+CREATE STREAM stream_name ( { column_name data_type (KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new stream with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new stream with the specified columns and properties.\r\n+\r\n+A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\r\n+A stream can store its data in either `KEY` or `VALUE` columns.\r\n+Both `KEY` and `VALUE` columns can be NULL. No special processing is done if two rows have the same\r\n+key. The table below contrasts this to a [ksqlDB TABLE](./create-table):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r\n+\r\n+Each column is defined by:\r\n+ * `column_name`: the name of the column. If unquoted the name must be a valid\r\n+   [SQL identifier](../../concepts/schemas#valid-identifiers) and will be converted to uppercase.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTE1NzIxOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo1MjoyOFrOGAj_Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo1MjoyOFrOGAj_Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0Mjg1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               identifier, for example ``` `mixedCaseId` ``` or ``` `$with@invalid!chars`.\n          \n          \n            \n               identifier, for example ``` `mixedCaseId` ``` or ``` `$with@invalid!chars` ```.", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403242855", "createdAt": "2020-04-03T18:52:28Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -13,16 +13,37 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE STREAM stream_name ( { column_name data_type } [, ...] )\r\n+CREATE STREAM stream_name ( { column_name data_type (KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new stream with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new stream with the specified columns and properties.\r\n+\r\n+A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\r\n+A stream can store its data in either `KEY` or `VALUE` columns.\r\n+Both `KEY` and `VALUE` columns can be NULL. No special processing is done if two rows have the same\r\n+key. The table below contrasts this to a [ksqlDB TABLE](./create-table):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r\n+\r\n+Each column is defined by:\r\n+ * `column_name`: the name of the column. If unquoted the name must be a valid\r\n+   [SQL identifier](../../concepts/schemas#valid-identifiers) and will be converted to uppercase.\r\n+   The name can be quoted if case needs to be preserved or if the name is not a valid SQL\r\n+   identifier, for example ``` `mixedCaseId` ``` or ``` `$with@invalid!chars`.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTE1OTg5OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo1MzoxNVrOGAkBHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo1MzoxNVrOGAkBHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0MzI5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               If a column is not marked as a `KEY` column ksqlDB will load it from the Kafka message's value.\n          \n          \n            \n               If a column is not marked as a `KEY` column, ksqlDB loads it from the Kafka message's value.", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403243292", "createdAt": "2020-04-03T18:53:15Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -13,16 +13,37 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE STREAM stream_name ( { column_name data_type } [, ...] )\r\n+CREATE STREAM stream_name ( { column_name data_type (KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new stream with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new stream with the specified columns and properties.\r\n+\r\n+A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\r\n+A stream can store its data in either `KEY` or `VALUE` columns.\r\n+Both `KEY` and `VALUE` columns can be NULL. No special processing is done if two rows have the same\r\n+key. The table below contrasts this to a [ksqlDB TABLE](./create-table):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r\n+\r\n+Each column is defined by:\r\n+ * `column_name`: the name of the column. If unquoted the name must be a valid\r\n+   [SQL identifier](../../concepts/schemas#valid-identifiers) and will be converted to uppercase.\r\n+   The name can be quoted if case needs to be preserved or if the name is not a valid SQL\r\n+   identifier, for example ``` `mixedCaseId` ``` or ``` `$with@invalid!chars`.\r\n+ * `data_type`: the SQL type of the column. Columns can be any of the\r\n+   [data types](../syntax-reference.md#ksqldb-data-types) supported by ksqlDB.\r\n+ * `KEY`: columns that are stored in the Kafka message's key should be marked as `KEY` columns.\r\n+   If a column is not marked as a `KEY` column ksqlDB will load it from the Kafka message's value.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTE4NDkxOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo1ODozM1rOGAkPYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODo1ODozM1rOGAkPYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0Njk0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\n          \n          \n            \n            underlying Kafka topic that has the same key as an existing row will _replace_ the earlier row in the", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403246947", "createdAt": "2020-04-03T18:58:33Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -10,25 +10,44 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE TABLE table_name ( { column_name data_type } [, ...] )\r\n+CREATE TABLE table_name ( { column_name data_type (PRIMARY KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new table with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new table with the specified columns and properties.\r\n+\r\n+A ksqlDB TABLE works much like tables in other SQL systems. A table has zero or more rows. Each\r\n+row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL. A message in the\r\n+underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTE5MzY2OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMDowMVrOGAkUYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMDowMVrOGAkUYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0ODIyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            a later timestamp / `ROWTIME`. The table below contrasts this to a [ksqlDB STREAM](./create-stream):\n          \n          \n            \n            a later timestamp / `ROWTIME`. This situation is handled differently by a [ksqlDB STREAM](./create-stream), as shown in the following table.", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403248227", "createdAt": "2020-04-03T19:00:01Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -10,25 +10,44 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE TABLE table_name ( { column_name data_type } [, ...] )\r\n+CREATE TABLE table_name ( { column_name data_type (PRIMARY KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new table with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new table with the specified columns and properties.\r\n+\r\n+A ksqlDB TABLE works much like tables in other SQL systems. A table has zero or more rows. Each\r\n+row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL. A message in the\r\n+underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\r\n+table, or _delete_ the row if the message's value is NULL, as long as the earlier row does not have\r\n+a later timestamp / `ROWTIME`. The table below contrasts this to a [ksqlDB STREAM](./create-stream):\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTE5NTYyOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMDoyNlrOGAkVnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMDoyNlrOGAkVnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0ODU0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\n          \n          \n            \n            | NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored.|", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403248543", "createdAt": "2020-04-03T19:00:26Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -10,25 +10,44 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE TABLE table_name ( { column_name data_type } [, ...] )\r\n+CREATE TABLE table_name ( { column_name data_type (PRIMARY KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new table with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new table with the specified columns and properties.\r\n+\r\n+A ksqlDB TABLE works much like tables in other SQL systems. A table has zero or more rows. Each\r\n+row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL. A message in the\r\n+underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\r\n+table, or _delete_ the row if the message's value is NULL, as long as the earlier row does not have\r\n+a later timestamp / `ROWTIME`. The table below contrasts this to a [ksqlDB STREAM](./create-stream):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTE5ODMwOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMDo1M1rOGAkW-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMDo1M1rOGAkW-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0ODg4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\n          \n          \n            \n            | Unique key constraint    | No <br> Messages with the same key as another have no special meaning.| Yes <br> Later messages with the same key _replace_ earlier.|", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403248888", "createdAt": "2020-04-03T19:00:53Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -10,25 +10,44 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE TABLE table_name ( { column_name data_type } [, ...] )\r\n+CREATE TABLE table_name ( { column_name data_type (PRIMARY KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new table with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new table with the specified columns and properties.\r\n+\r\n+A ksqlDB TABLE works much like tables in other SQL systems. A table has zero or more rows. Each\r\n+row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL. A message in the\r\n+underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\r\n+table, or _delete_ the row if the message's value is NULL, as long as the earlier row does not have\r\n+a later timestamp / `ROWTIME`. The table below contrasts this to a [ksqlDB STREAM](./create-stream):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTIwNTIzOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMjowN1rOGAkang==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMjowN1rOGAkang==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI0OTgyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            | Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\n          \n          \n            \n            | Tombstones               | No <br> Messages with NULL values are ignored.                | Yes <br> NULL message values are treated as a _tombstone_. <br> Any existing row with a matching key is deleted. |", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403249822", "createdAt": "2020-04-03T19:02:07Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -10,25 +10,44 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE TABLE table_name ( { column_name data_type } [, ...] )\r\n+CREATE TABLE table_name ( { column_name data_type (PRIMARY KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new table with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new table with the specified columns and properties.\r\n+\r\n+A ksqlDB TABLE works much like tables in other SQL systems. A table has zero or more rows. Each\r\n+row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL. A message in the\r\n+underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\r\n+table, or _delete_ the row if the message's value is NULL, as long as the earlier row does not have\r\n+a later timestamp / `ROWTIME`. The table below contrasts this to a [ksqlDB STREAM](./create-stream):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTIwNjU4OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMjoyOVrOGAkbYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMjoyOVrOGAkbYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MDAxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * `column_name`: the name of the column. If unquoted the name must be a valid\n          \n          \n            \n             * `column_name`: the name of the column. If unquoted, the name must be a valid", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403250018", "createdAt": "2020-04-03T19:02:29Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -10,25 +10,44 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE TABLE table_name ( { column_name data_type } [, ...] )\r\n+CREATE TABLE table_name ( { column_name data_type (PRIMARY KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new table with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new table with the specified columns and properties.\r\n+\r\n+A ksqlDB TABLE works much like tables in other SQL systems. A table has zero or more rows. Each\r\n+row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL. A message in the\r\n+underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\r\n+table, or _delete_ the row if the message's value is NULL, as long as the earlier row does not have\r\n+a later timestamp / `ROWTIME`. The table below contrasts this to a [ksqlDB STREAM](./create-stream):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r\n+\r\n+Each column is defined by:\r\n+ * `column_name`: the name of the column. If unquoted the name must be a valid\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTIxMjI5OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMzoyM1rOGAkeRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowMzoyM1rOGAkeRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MDc1Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               [SQL identifier](../../concepts/schemas#valid-identifiers) and will be converted to uppercase.\n          \n          \n            \n               [SQL identifier](../../concepts/schemas#valid-identifiers) and and ksqlDB converts it to uppercase.", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403250757", "createdAt": "2020-04-03T19:03:23Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -10,25 +10,44 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE TABLE table_name ( { column_name data_type } [, ...] )\r\n+CREATE TABLE table_name ( { column_name data_type (PRIMARY KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new table with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new table with the specified columns and properties.\r\n+\r\n+A ksqlDB TABLE works much like tables in other SQL systems. A table has zero or more rows. Each\r\n+row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL. A message in the\r\n+underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\r\n+table, or _delete_ the row if the message's value is NULL, as long as the earlier row does not have\r\n+a later timestamp / `ROWTIME`. The table below contrasts this to a [ksqlDB STREAM](./create-stream):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r\n+\r\n+Each column is defined by:\r\n+ * `column_name`: the name of the column. If unquoted the name must be a valid\r\n+   [SQL identifier](../../concepts/schemas#valid-identifiers) and will be converted to uppercase.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTIxNzQ2OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowNDoxM1rOGAkg3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowNDoxM1rOGAkg3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MTQyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               identifier, for example ``` `mixedCaseId` ``` or ``` `$with@invalid!chars`.\n          \n          \n            \n               identifier, for example ``` `mixedCaseId` ``` or ``` `$with@invalid!chars` ```.", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403251423", "createdAt": "2020-04-03T19:04:13Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -10,25 +10,44 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE TABLE table_name ( { column_name data_type } [, ...] )\r\n+CREATE TABLE table_name ( { column_name data_type (PRIMARY KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new table with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new table with the specified columns and properties.\r\n+\r\n+A ksqlDB TABLE works much like tables in other SQL systems. A table has zero or more rows. Each\r\n+row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL. A message in the\r\n+underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\r\n+table, or _delete_ the row if the message's value is NULL, as long as the earlier row does not have\r\n+a later timestamp / `ROWTIME`. The table below contrasts this to a [ksqlDB STREAM](./create-stream):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r\n+\r\n+Each column is defined by:\r\n+ * `column_name`: the name of the column. If unquoted the name must be a valid\r\n+   [SQL identifier](../../concepts/schemas#valid-identifiers) and will be converted to uppercase.\r\n+   The name can be quoted if case needs to be preserved or if the name is not a valid SQL\r\n+   identifier, for example ``` `mixedCaseId` ``` or ``` `$with@invalid!chars`.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTIxOTI1OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowNDo0M1rOGAkiCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowNDo0M1rOGAkiCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MTcyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               `PRIMARY KEY` columns. If a column is not marked as a `PRIMARY KEY` column ksqlDB will load it\n          \n          \n            \n               `PRIMARY KEY` columns. If a column is not marked as a `PRIMARY KEY` column, ksqlDB loads it", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403251720", "createdAt": "2020-04-03T19:04:43Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -10,25 +10,44 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE TABLE table_name ( { column_name data_type } [, ...] )\r\n+CREATE TABLE table_name ( { column_name data_type (PRIMARY KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new table with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new table with the specified columns and properties.\r\n+\r\n+A ksqlDB TABLE works much like tables in other SQL systems. A table has zero or more rows. Each\r\n+row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL. A message in the\r\n+underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\r\n+table, or _delete_ the row if the message's value is NULL, as long as the earlier row does not have\r\n+a later timestamp / `ROWTIME`. The table below contrasts this to a [ksqlDB STREAM](./create-stream):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r\n+\r\n+Each column is defined by:\r\n+ * `column_name`: the name of the column. If unquoted the name must be a valid\r\n+   [SQL identifier](../../concepts/schemas#valid-identifiers) and will be converted to uppercase.\r\n+   The name can be quoted if case needs to be preserved or if the name is not a valid SQL\r\n+   identifier, for example ``` `mixedCaseId` ``` or ``` `$with@invalid!chars`.\r\n+ * `data_type`: the SQL type of the column. Columns can be any of the\r\n+   [data types](../syntax-reference.md#ksqldb-data-types) supported by ksqlDB.\r\n+ * `PRIMARY KEY`: columns that are stored in the Kafka message's key should be marked as\r\n+   `PRIMARY KEY` columns. If a column is not marked as a `PRIMARY KEY` column ksqlDB will load it\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTIyMjI5OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowNTo0MlrOGAkjzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxOTowNTo0MlrOGAkjzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzI1MjE3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               are NON NULL. Any records in the Kafka topic with NULL key columns will be dropped.\n          \n          \n            \n               is NON NULL. Any records in the Kafka topic with NULL key columns are dropped.", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403252173", "createdAt": "2020-04-03T19:05:42Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -10,25 +10,44 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE TABLE table_name ( { column_name data_type } [, ...] )\r\n+CREATE TABLE table_name ( { column_name data_type (PRIMARY KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new table with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new table with the specified columns and properties.\r\n+\r\n+A ksqlDB TABLE works much like tables in other SQL systems. A table has zero or more rows. Each\r\n+row is identified by its `PRIMARY KEY`. `PRIMARY KEY` values can not be NULL. A message in the\r\n+underlying Kafka topic with the same key as an existing row will _replace_ the earlier row in the\r\n+table, or _delete_ the row if the message's value is NULL, as long as the earlier row does not have\r\n+a later timestamp / `ROWTIME`. The table below contrasts this to a [ksqlDB STREAM](./create-stream):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r\n+| Unique key constraint    | No <br> Messages with the same key as another have no special meaning | Yes <br> Later messages with the same key _replace_ earlier |\r\n+| Tombstones               | No <br> Messages with NULL values are ignored                 | Yes <br> NULL message values are treated as a _tombstone_ <br> Any existing row with a matching key is deleted |\r\n+\r\n+Each column is defined by:\r\n+ * `column_name`: the name of the column. If unquoted the name must be a valid\r\n+   [SQL identifier](../../concepts/schemas#valid-identifiers) and will be converted to uppercase.\r\n+   The name can be quoted if case needs to be preserved or if the name is not a valid SQL\r\n+   identifier, for example ``` `mixedCaseId` ``` or ``` `$with@invalid!chars`.\r\n+ * `data_type`: the SQL type of the column. Columns can be any of the\r\n+   [data types](../syntax-reference.md#ksqldb-data-types) supported by ksqlDB.\r\n+ * `PRIMARY KEY`: columns that are stored in the Kafka message's key should be marked as\r\n+   `PRIMARY KEY` columns. If a column is not marked as a `PRIMARY KEY` column ksqlDB will load it\r\n+   from the Kafka message's value. Unlike a stream's `KEY` column, a table's `PRIMARY KEY` column\r\n+   are NON NULL. Any records in the Kafka topic with NULL key columns will be dropped.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNjAyMDkyOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwNzowMjoyNFrOGBKMCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwOTo0NDoyOVrOGBP1bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2ODY4MQ==", "bodyText": "This is true for now (since we only support unwrapped primitive keys), but it won't be true in the future if we support single-element wrapped keys right?", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403868681", "createdAt": "2020-04-06T07:02:24Z", "author": {"login": "rodesai"}, "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -13,16 +13,37 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE STREAM stream_name ( { column_name data_type } [, ...] )\r\n+CREATE STREAM stream_name ( { column_name data_type (KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new stream with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new stream with the specified columns and properties.\r\n+\r\n+A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\r\n+A stream can store its data in either `KEY` or `VALUE` columns.\r\n+Both `KEY` and `VALUE` columns can be NULL. No special processing is done if two rows have the same\r\n+key. The table below contrasts this to a [ksqlDB TABLE](./create-table):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzk2MTE5OA==", "bodyText": "In a strict SQL sense this should remain true for wrapped and multi-column primary keys. Primary key columns in SQL must be NON NULL.\nThe main reason for this is that an SQL NULL is not comparable to another SQL NULL, i.e. NULL = NULL returns false.  So a NULL value in a primary key could never be matched.", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r403961198", "createdAt": "2020-04-06T09:44:29Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -13,16 +13,37 @@ Synopsis\n --------\r\n \r\n ```sql\r\n-CREATE STREAM stream_name ( { column_name data_type } [, ...] )\r\n+CREATE STREAM stream_name ( { column_name data_type (KEY) } [, ...] )\r\n   WITH ( property_name = expression [, ...] );\r\n ```\r\n \r\n Description\r\n -----------\r\n \r\n-Create a new stream with the specified columns and properties. Columns\r\n-can be any of the [data types](../syntax-reference.md#ksqldb-data-types) supported by\r\n-ksqlDB.\r\n+Create a new stream with the specified columns and properties.\r\n+\r\n+A ksqlDB STREAM is a stream of _facts_. Each _fact_ is immutable and is unique.\r\n+A stream can store its data in either `KEY` or `VALUE` columns.\r\n+Both `KEY` and `VALUE` columns can be NULL. No special processing is done if two rows have the same\r\n+key. The table below contrasts this to a [ksqlDB TABLE](./create-table):\r\n+\r\n+|                          |  STREAM                                                       | TABLE                                                             |\r\n+| ------------------------ | --------------------------------------------------------------| ----------------------------------------------------------------- |\r\n+| Key column type          | `KEY`                                                         | `PRIMARY KEY`                                                     |\r\n+| NON NULL key constraint  | No                                                            | Yes <br> Messages in the Kafka topic with a NULL `PRIMARY KEY` are ignored |\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzg2ODY4MQ=="}, "originalCommit": {"oid": "ce5e8f0b1033ce1ed0b34809101b57da87407d05"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTcxNjE4OnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzo0NTowNlrOGBt55Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTo0OTo0NlrOGB7xdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1Mzg2MQ==", "bodyText": "nit: we should start with the error message (Streams do not support ...) and then give what failed (thinking about cases where only number of chars are returned)", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r404453861", "createdAt": "2020-04-06T23:45:06Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateStream.java", "diffHunk": "@@ -83,4 +88,25 @@ public String toString() {\n         .add(\"properties\", getProperties())\n         .toString();\n   }\n+\n+  private static void throwOnPrimaryKeys(final TableElements elements) {\n+    final String badEs = elements.stream()\n+        .filter(e -> e.getNamespace().isKey() && e.getNamespace() != Namespace.KEY)\n+        .map(badE ->\n+            badE.getLocation().map(NodeLocation::asPrefix).orElse(\"\") + badE.getName())\n+        .collect(Collectors.joining(System.lineSeparator()));\n+\n+    if (!badEs.isEmpty()) {\n+      throw new KsqlException(\"The following columns are defined as PRIMARY KEY columns. \"\n+          + \"Streams do not support PRIMARY KEY columns, only KEY columns.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8a869a64a0707a8deaf2f8357e404ed274c4469"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4MTA3Ng==", "bodyText": "done", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r404681076", "createdAt": "2020-04-07T09:49:46Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateStream.java", "diffHunk": "@@ -83,4 +88,25 @@ public String toString() {\n         .add(\"properties\", getProperties())\n         .toString();\n   }\n+\n+  private static void throwOnPrimaryKeys(final TableElements elements) {\n+    final String badEs = elements.stream()\n+        .filter(e -> e.getNamespace().isKey() && e.getNamespace() != Namespace.KEY)\n+        .map(badE ->\n+            badE.getLocation().map(NodeLocation::asPrefix).orElse(\"\") + badE.getName())\n+        .collect(Collectors.joining(System.lineSeparator()));\n+\n+    if (!badEs.isEmpty()) {\n+      throw new KsqlException(\"The following columns are defined as PRIMARY KEY columns. \"\n+          + \"Streams do not support PRIMARY KEY columns, only KEY columns.\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1Mzg2MQ=="}, "originalCommit": {"oid": "f8a869a64a0707a8deaf2f8357e404ed274c4469"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwOTcxNjkyOnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateTable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQyMzo0NToyN1rOGBt6Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTo0OTo1MFrOGB7xmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1Mzk5MQ==", "bodyText": "ditto", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r404453991", "createdAt": "2020-04-06T23:45:27Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateTable.java", "diffHunk": "@@ -83,4 +88,25 @@ public String toString() {\n         .add(\"properties\", getProperties())\n         .toString();\n   }\n+\n+  private static void throwOnNonPrimaryKeys(final TableElements elements) {\n+    final String badEs = elements.stream()\n+        .filter(e -> e.getNamespace().isKey() && e.getNamespace() != Namespace.PRIMARY_KEY)\n+        .map(badE ->\n+            badE.getLocation().map(NodeLocation::asPrefix).orElse(\"\") + badE.getName())\n+        .collect(Collectors.joining(System.lineSeparator()));\n+\n+    if (!badEs.isEmpty()) {\n+      throw new KsqlException(\"The following columns are defined as KEY columns. \"\n+          + \"Tables do not support KEY columns, only PRIMARY KEY columns.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8a869a64a0707a8deaf2f8357e404ed274c4469"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4MTExMg==", "bodyText": "done", "url": "https://github.com/confluentinc/ksql/pull/4986#discussion_r404681112", "createdAt": "2020-04-07T09:49:50Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/parser/tree/CreateTable.java", "diffHunk": "@@ -83,4 +88,25 @@ public String toString() {\n         .add(\"properties\", getProperties())\n         .toString();\n   }\n+\n+  private static void throwOnNonPrimaryKeys(final TableElements elements) {\n+    final String badEs = elements.stream()\n+        .filter(e -> e.getNamespace().isKey() && e.getNamespace() != Namespace.PRIMARY_KEY)\n+        .map(badE ->\n+            badE.getLocation().map(NodeLocation::asPrefix).orElse(\"\") + badE.getName())\n+        .collect(Collectors.joining(System.lineSeparator()));\n+\n+    if (!badEs.isEmpty()) {\n+      throw new KsqlException(\"The following columns are defined as KEY columns. \"\n+          + \"Tables do not support KEY columns, only PRIMARY KEY columns.\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDQ1Mzk5MQ=="}, "originalCommit": {"oid": "f8a869a64a0707a8deaf2f8357e404ed274c4469"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3732, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}