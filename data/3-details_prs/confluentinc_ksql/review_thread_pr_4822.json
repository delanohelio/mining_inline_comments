{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwOTg3OTAy", "number": 4822, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoyNTozNFrODqenig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoyNzoyOVrODqeqgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODY4NDI2OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/function/udf/ThrowingUdtf.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoyNTozNFrOF6QE4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODoxODoyOVrOF6SO8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNTEyMg==", "bodyText": "get with the times! (\ud83d\ude09 update your file template)", "url": "https://github.com/confluentinc/ksql/pull/4822#discussion_r396625122", "createdAt": "2020-03-23T17:25:34Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/function/udf/ThrowingUdtf.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2019 Confluent Inc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5e91b83ebd9d3322121401039340a872850be26"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY2MDQ2NA==", "bodyText": "My template is a macro..... weird...", "url": "https://github.com/confluentinc/ksql/pull/4822#discussion_r396660464", "createdAt": "2020-03-23T18:18:29Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/function/udf/ThrowingUdtf.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2019 Confluent Inc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNTEyMg=="}, "originalCommit": {"oid": "a5e91b83ebd9d3322121401039340a872850be26"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODY5MTg1OnYy", "diffSide": "RIGHT", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/ExpressionMetadata.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNzoyNzoyOVrOF6QKBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo0Nzo1NVrOF6TaYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNjQzNg==", "bodyText": "I think there's an existing configuration about whether to hard-fail on error or log-and-continue. If there is, we should respect that, and if there isn't we should add one so people can control if they want their application skipping events", "url": "https://github.com/confluentinc/ksql/pull/4822#discussion_r396626436", "createdAt": "2020-03-23T17:27:29Z", "author": {"login": "agavra"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/ExpressionMetadata.java", "diffHunk": "@@ -62,16 +64,35 @@ public Expression getExpression() {\n     return expression;\n   }\n \n-  public Object evaluate(final GenericRow row) {\n+  /**\n+   * Evaluate the expression against the supplied {@code row}.\n+   *\n+   * <p>On error the supplied {@code logger} is called with the details of the error and the method\n+   * return {@code null}.\n+   *\n+   * @param row the row of data to evaluate the expression against.\n+   * @param defaultValue the value to return if an exception is thrown.\n+   * @param logger an optional logger to log errors to. If not supplied the method throws on error.\n+   * @param errorMsg called to get the text for the logged error.\n+   * @return the result of the evaluation.\n+   */\n+  public Object evaluate(\n+      final GenericRow row,\n+      final Object defaultValue,\n+      final ProcessingLogger logger,\n+      final Supplier<String> errorMsg\n+  ) {\n     try {\n       return expressionEvaluator.evaluate(getParameters(row));\n     } catch (final InvocationTargetException e) {\n-      throw new KsqlException(e.getCause().getMessage(), e.getCause());\n+      logger.error(RecordProcessingError.recordProcessingError(errorMsg.get(), e.getCause(), row));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5e91b83ebd9d3322121401039340a872850be26"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY2NDQwNQ==", "bodyText": "It's an interesting point...\nHowever, the changes I've made in this PR close a few holes where we invoke evaluate but don't protect it within a try/catch(log) block.\nThe existing places that do this try/catch(log) block do NOT honour any streams exception handling config on whether to exist or log-and-continue.\nHence, while I think it's an interesting point, I also think its outside the scope of this change.  A log of our code / UDFs etc throw NPEs and a variety of other exceptions. We'd need to clean all those up before having a query terminate due to bad data...", "url": "https://github.com/confluentinc/ksql/pull/4822#discussion_r396664405", "createdAt": "2020-03-23T18:23:30Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/ExpressionMetadata.java", "diffHunk": "@@ -62,16 +64,35 @@ public Expression getExpression() {\n     return expression;\n   }\n \n-  public Object evaluate(final GenericRow row) {\n+  /**\n+   * Evaluate the expression against the supplied {@code row}.\n+   *\n+   * <p>On error the supplied {@code logger} is called with the details of the error and the method\n+   * return {@code null}.\n+   *\n+   * @param row the row of data to evaluate the expression against.\n+   * @param defaultValue the value to return if an exception is thrown.\n+   * @param logger an optional logger to log errors to. If not supplied the method throws on error.\n+   * @param errorMsg called to get the text for the logged error.\n+   * @return the result of the evaluation.\n+   */\n+  public Object evaluate(\n+      final GenericRow row,\n+      final Object defaultValue,\n+      final ProcessingLogger logger,\n+      final Supplier<String> errorMsg\n+  ) {\n     try {\n       return expressionEvaluator.evaluate(getParameters(row));\n     } catch (final InvocationTargetException e) {\n-      throw new KsqlException(e.getCause().getMessage(), e.getCause());\n+      logger.error(RecordProcessingError.recordProcessingError(errorMsg.get(), e.getCause(), row));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNjQzNg=="}, "originalCommit": {"oid": "a5e91b83ebd9d3322121401039340a872850be26"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3OTc3Nw==", "bodyText": "Talked offline - @agavra's happy with this.", "url": "https://github.com/confluentinc/ksql/pull/4822#discussion_r396679777", "createdAt": "2020-03-23T18:47:55Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/ExpressionMetadata.java", "diffHunk": "@@ -62,16 +64,35 @@ public Expression getExpression() {\n     return expression;\n   }\n \n-  public Object evaluate(final GenericRow row) {\n+  /**\n+   * Evaluate the expression against the supplied {@code row}.\n+   *\n+   * <p>On error the supplied {@code logger} is called with the details of the error and the method\n+   * return {@code null}.\n+   *\n+   * @param row the row of data to evaluate the expression against.\n+   * @param defaultValue the value to return if an exception is thrown.\n+   * @param logger an optional logger to log errors to. If not supplied the method throws on error.\n+   * @param errorMsg called to get the text for the logged error.\n+   * @return the result of the evaluation.\n+   */\n+  public Object evaluate(\n+      final GenericRow row,\n+      final Object defaultValue,\n+      final ProcessingLogger logger,\n+      final Supplier<String> errorMsg\n+  ) {\n     try {\n       return expressionEvaluator.evaluate(getParameters(row));\n     } catch (final InvocationTargetException e) {\n-      throw new KsqlException(e.getCause().getMessage(), e.getCause());\n+      logger.error(RecordProcessingError.recordProcessingError(errorMsg.get(), e.getCause(), row));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjYyNjQzNg=="}, "originalCommit": {"oid": "a5e91b83ebd9d3322121401039340a872850be26"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3793, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}