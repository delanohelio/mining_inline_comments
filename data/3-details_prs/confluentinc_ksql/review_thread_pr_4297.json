{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMjM0OTA1", "number": 4297, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODoxODo1MFrODXnJgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODoxOTo1OFrODXnK3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDg1MjQ4OnYy", "diffSide": "RIGHT", "path": "ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODoxODo1MFrOFdACbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMDoyODoxMVrOFdSu8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1MzY0NA==", "bodyText": "nit: the name makes it sound like a it's a queue of queries, not a blocking queue for a query. thoughts on BlockingEventQueue or BlockingRowQueue (a queue that fills up with events/rows)?", "url": "https://github.com/confluentinc/ksql/pull/4297#discussion_r365953644", "createdAt": "2020-01-13T18:18:50Z", "author": {"login": "agavra"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.query;\n+\n+import io.confluent.ksql.GenericRow;\n+import java.util.Collection;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.kafka.streams.KeyValue;\n+\n+/**\n+ * The queue between the Kafka-streams topology and the client connection.\n+ *\n+ * <p>The KS topology writes to the queue from its {@code StreamThread}, while the KSQL server\n+ * thread that is servicing the client request reads from the queue and writes to the client\n+ * socket.\n+ */\n+public interface BlockingQueryQueue {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cfcbd1590712267f39aec7a21529f64b24bb950"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI1OTk1Mg==", "bodyText": "sure.", "url": "https://github.com/confluentinc/ksql/pull/4297#discussion_r366259952", "createdAt": "2020-01-14T10:28:11Z", "author": {"login": "big-andy-coates"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.query;\n+\n+import io.confluent.ksql.GenericRow;\n+import java.util.Collection;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.kafka.streams.KeyValue;\n+\n+/**\n+ * The queue between the Kafka-streams topology and the client connection.\n+ *\n+ * <p>The KS topology writes to the queue from its {@code StreamThread}, while the KSQL server\n+ * thread that is servicing the client request reads from the queue and writes to the client\n+ * socket.\n+ */\n+public interface BlockingQueryQueue {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1MzY0NA=="}, "originalCommit": {"oid": "9cfcbd1590712267f39aec7a21529f64b24bb950"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDg1NDU4OnYy", "diffSide": "RIGHT", "path": "ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODoxOTozNFrOFdADuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMDoyODoyNVrOFdSvbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1Mzk3OQ==", "bodyText": "would be nice to also document this (or add documentation to LimitHandler) to describe when exactly the limit is considered reached", "url": "https://github.com/confluentinc/ksql/pull/4297#discussion_r365953979", "createdAt": "2020-01-13T18:19:34Z", "author": {"login": "agavra"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.query;\n+\n+import io.confluent.ksql.GenericRow;\n+import java.util.Collection;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.kafka.streams.KeyValue;\n+\n+/**\n+ * The queue between the Kafka-streams topology and the client connection.\n+ *\n+ * <p>The KS topology writes to the queue from its {@code StreamThread}, while the KSQL server\n+ * thread that is servicing the client request reads from the queue and writes to the client\n+ * socket.\n+ */\n+public interface BlockingQueryQueue {\n+\n+  void setLimitHandler(LimitHandler limitHandler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cfcbd1590712267f39aec7a21529f64b24bb950"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI2MDA3OQ==", "bodyText": "sure", "url": "https://github.com/confluentinc/ksql/pull/4297#discussion_r366260079", "createdAt": "2020-01-14T10:28:25Z", "author": {"login": "big-andy-coates"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.query;\n+\n+import io.confluent.ksql.GenericRow;\n+import java.util.Collection;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.kafka.streams.KeyValue;\n+\n+/**\n+ * The queue between the Kafka-streams topology and the client connection.\n+ *\n+ * <p>The KS topology writes to the queue from its {@code StreamThread}, while the KSQL server\n+ * thread that is servicing the client request reads from the queue and writes to the client\n+ * socket.\n+ */\n+public interface BlockingQueryQueue {\n+\n+  void setLimitHandler(LimitHandler limitHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1Mzk3OQ=="}, "originalCommit": {"oid": "9cfcbd1590712267f39aec7a21529f64b24bb950"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDg1NTk4OnYy", "diffSide": "RIGHT", "path": "ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODoxOTo1OFrOFdAElA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMDoyODozNVrOFdSvxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1NDE5Ng==", "bodyText": "self-referential javadoc?", "url": "https://github.com/confluentinc/ksql/pull/4297#discussion_r365954196", "createdAt": "2020-01-13T18:19:58Z", "author": {"login": "agavra"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.query;\n+\n+import io.confluent.ksql.GenericRow;\n+import java.util.Collection;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.kafka.streams.KeyValue;\n+\n+/**\n+ * The queue between the Kafka-streams topology and the client connection.\n+ *\n+ * <p>The KS topology writes to the queue from its {@code StreamThread}, while the KSQL server\n+ * thread that is servicing the client request reads from the queue and writes to the client\n+ * socket.\n+ */\n+public interface BlockingQueryQueue {\n+\n+  void setLimitHandler(LimitHandler limitHandler);\n+\n+  /**\n+   * Poll the queue for a single row\n+   *\n+   * @see BlockingQueryQueue#poll(long, TimeUnit)\n+   */\n+  KeyValue<String, GenericRow> poll(long timeout, TimeUnit unit)\n+      throws InterruptedException;\n+\n+  /**\n+   * Drain the queue to the supplied {@code collection}.\n+   *\n+   * @see BlockingQueryQueue#drainTo(Collection)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cfcbd1590712267f39aec7a21529f64b24bb950"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI2MDE2Nw==", "bodyText": "oops", "url": "https://github.com/confluentinc/ksql/pull/4297#discussion_r366260167", "createdAt": "2020-01-14T10:28:35Z", "author": {"login": "big-andy-coates"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.query;\n+\n+import io.confluent.ksql.GenericRow;\n+import java.util.Collection;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.kafka.streams.KeyValue;\n+\n+/**\n+ * The queue between the Kafka-streams topology and the client connection.\n+ *\n+ * <p>The KS topology writes to the queue from its {@code StreamThread}, while the KSQL server\n+ * thread that is servicing the client request reads from the queue and writes to the client\n+ * socket.\n+ */\n+public interface BlockingQueryQueue {\n+\n+  void setLimitHandler(LimitHandler limitHandler);\n+\n+  /**\n+   * Poll the queue for a single row\n+   *\n+   * @see BlockingQueryQueue#poll(long, TimeUnit)\n+   */\n+  KeyValue<String, GenericRow> poll(long timeout, TimeUnit unit)\n+      throws InterruptedException;\n+\n+  /**\n+   * Drain the queue to the supplied {@code collection}.\n+   *\n+   * @see BlockingQueryQueue#drainTo(Collection)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1NDE5Ng=="}, "originalCommit": {"oid": "9cfcbd1590712267f39aec7a21529f64b24bb950"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2213, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}