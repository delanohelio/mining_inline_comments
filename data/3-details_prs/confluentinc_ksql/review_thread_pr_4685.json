{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNzczMTk4", "number": 4685, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzowODoyM1rODlPESg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoxNzowOVrODlXUyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzcwNzYyOnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/auth/BasicCallbackHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzowODoyM1rOFyA84Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOToyMjoxMFrOFyL10A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4ODcwNQ==", "bodyText": "AFAIC, Current JAAS login modules only send NameCallback, ObjectCallback, and PasswordCallback, so this section isn't strictly needed, but having it also doesn't hurt. Happy to remove if we'd like to keep the code cleaner.", "url": "https://github.com/confluentinc/ksql/pull/4685#discussion_r387988705", "createdAt": "2020-03-04T23:08:23Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/auth/BasicCallbackHandler.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+import javax.security.auth.callback.Callback;\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.auth.callback.NameCallback;\n+import javax.security.auth.callback.PasswordCallback;\n+import javax.security.auth.callback.TextOutputCallback;\n+import javax.security.auth.callback.UnsupportedCallbackException;\n+import org.eclipse.jetty.jaas.callback.ObjectCallback;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+class BasicCallbackHandler implements CallbackHandler {\n+\n+  private static final Logger log = LoggerFactory.getLogger(BasicCallbackHandler.class);\n+\n+  private final String username;\n+  private final String password;\n+\n+  BasicCallbackHandler(final String username, final String password) {\n+    this.username = Objects.requireNonNull(username, \"username\");\n+    this.password = Objects.requireNonNull(password, \"password\");\n+  }\n+\n+  @Override\n+  public void handle(final Callback[] callbacks)\n+      throws IOException, UnsupportedCallbackException {\n+    for (final Callback callback : callbacks) {\n+      if (callback instanceof NameCallback) {\n+        final NameCallback nc = (NameCallback)callback;\n+        nc.setName(username);\n+      } else if (callback instanceof ObjectCallback) {\n+        final ObjectCallback oc = (ObjectCallback)callback;\n+        oc.setObject(password);\n+      } else if (callback instanceof PasswordCallback) {\n+        final PasswordCallback pc = (PasswordCallback)callback;\n+        pc.setPassword(password.toCharArray());\n+      } else if (callback instanceof TextOutputCallback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a8bae9df46689f8d01f7bd769880cdbf476c53"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2NzEyMA==", "bodyText": "I think no harm in leaving it for now.", "url": "https://github.com/confluentinc/ksql/pull/4685#discussion_r388167120", "createdAt": "2020-03-05T09:22:10Z", "author": {"login": "purplefox"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/auth/BasicCallbackHandler.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;\n+\n+import java.io.IOException;\n+import java.util.Objects;\n+import javax.security.auth.callback.Callback;\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.auth.callback.NameCallback;\n+import javax.security.auth.callback.PasswordCallback;\n+import javax.security.auth.callback.TextOutputCallback;\n+import javax.security.auth.callback.UnsupportedCallbackException;\n+import org.eclipse.jetty.jaas.callback.ObjectCallback;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+class BasicCallbackHandler implements CallbackHandler {\n+\n+  private static final Logger log = LoggerFactory.getLogger(BasicCallbackHandler.class);\n+\n+  private final String username;\n+  private final String password;\n+\n+  BasicCallbackHandler(final String username, final String password) {\n+    this.username = Objects.requireNonNull(username, \"username\");\n+    this.password = Objects.requireNonNull(password, \"password\");\n+  }\n+\n+  @Override\n+  public void handle(final Callback[] callbacks)\n+      throws IOException, UnsupportedCallbackException {\n+    for (final Callback callback : callbacks) {\n+      if (callback instanceof NameCallback) {\n+        final NameCallback nc = (NameCallback)callback;\n+        nc.setName(username);\n+      } else if (callback instanceof ObjectCallback) {\n+        final ObjectCallback oc = (ObjectCallback)callback;\n+        oc.setObject(password);\n+      } else if (callback instanceof PasswordCallback) {\n+        final PasswordCallback pc = (PasswordCallback)callback;\n+        pc.setPassword(password.toCharArray());\n+      } else if (callback instanceof TextOutputCallback) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4ODcwNQ=="}, "originalCommit": {"oid": "b9a8bae9df46689f8d01f7bd769880cdbf476c53"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzcxMjgzOnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/auth/JaasAuthProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzoxMDozN1rOFyBABA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzoxMDozN1rOFyBABA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk4OTUwOA==", "bodyText": "The AbstractUser interface is deprecated in vert.x 3.8.5 along with most methods of the User interface, but their replacements (discussed in https://groups.google.com/d/msg/vertx/Nq20qhvUFzo/j5UAE2QCAwAJ) are not available in 3.8.5 so it's not clear to me what should be implemented instead. Thus this suppression.", "url": "https://github.com/confluentinc/ksql/pull/4685#discussion_r387989508", "createdAt": "2020-03-04T23:10:37Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/auth/JaasAuthProvider.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.ksql.api.server.ApiServerConfig;\n+import io.confluent.ksql.api.server.Server;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.auth.AuthProvider;\n+import io.vertx.ext.auth.User;\n+import java.security.Principal;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.auth.login.LoginContext;\n+import javax.security.auth.login.LoginException;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Authentication provider that checks credentials specified in the JAAS config.\n+ */\n+public class JaasAuthProvider implements AuthProvider {\n+\n+  private static final Logger log = LoggerFactory.getLogger(JaasAuthProvider.class);\n+\n+  private final Server server;\n+  private final ApiServerConfig config;\n+  private final LoginContextSupplier loginContextSupplier;\n+\n+  public JaasAuthProvider(final Server server, final ApiServerConfig config) {\n+    this(server, config, LoginContext::new);\n+  }\n+\n+  @VisibleForTesting\n+  JaasAuthProvider(\n+      final Server server,\n+      final ApiServerConfig config,\n+      final LoginContextSupplier loginContextSupplier\n+  ) {\n+    this.server = Objects.requireNonNull(server, \"server\");\n+    this.config = Objects.requireNonNull(config, \"config\");\n+    this.loginContextSupplier =\n+        Objects.requireNonNull(loginContextSupplier, \"loginContextSupplier\");\n+  }\n+\n+  @VisibleForTesting\n+  @FunctionalInterface\n+  interface LoginContextSupplier {\n+    LoginContext get(String name, CallbackHandler callbackHandler) throws LoginException;\n+  }\n+\n+  @Override\n+  public void authenticate(\n+      final JsonObject authInfo,\n+      final Handler<AsyncResult<User>> resultHandler\n+  ) {\n+    final String username = authInfo.getString(\"username\");\n+    if (username == null) {\n+      resultHandler.handle(Future.failedFuture(\"authInfo missing 'username' field\"));\n+      return;\n+    }\n+    final String password = authInfo.getString(\"password\");\n+    if (password == null) {\n+      resultHandler.handle(Future.failedFuture(\"authInfo missing 'password' field\"));\n+      return;\n+    }\n+\n+    final String contextName = config.getString(ApiServerConfig.AUTHENTICATION_REALM_CONFIG);\n+    final List<String> allowedRoles = config.getList(ApiServerConfig.AUTHENTICATION_ROLES_CONFIG);\n+\n+    server.getWorkerExecutor().executeBlocking(\n+        p -> getUser(contextName, username, password, allowedRoles, p),\n+        resultHandler\n+    );\n+  }\n+\n+  private void getUser(\n+      final String contextName,\n+      final String username,\n+      final String password,\n+      final List<String> allowedRoles,\n+      final Promise<User> promise\n+  ) {\n+    final LoginContext lc;\n+    try {\n+      lc = loginContextSupplier.get(contextName, new BasicCallbackHandler(username, password));\n+    } catch (LoginException | SecurityException e) {\n+      log.error(\"Failed to create LoginContext. \" + e.getMessage());\n+      promise.fail(\"Failed to create LoginContext.\");\n+      return;\n+    }\n+\n+    try {\n+      lc.login();\n+    } catch (LoginException le) {\n+      log.error(\"Failed to log in. \" + le.getMessage());\n+      promise.fail(\"Failed to log in: Invalid username/password.\");\n+      return;\n+    }\n+\n+    if (!validateRoles(lc, allowedRoles)) {\n+      log.error(\"Failed to log in: Invalid roles.\");\n+      promise.fail(\"Failed to log in: Invalid roles.\");\n+      return;\n+    }\n+\n+    promise.complete(new JaasUser(username, this));\n+  }\n+\n+  private void checkUserPermission(\n+      final String username,\n+      final Handler<AsyncResult<Boolean>> resultHandler\n+  ) {\n+    // no authorization yet (besides JAAS role check during login)\n+    // consequently, authenticated users have all permissions\n+    resultHandler.handle(Future.succeededFuture(true));\n+  }\n+\n+  private static boolean validateRoles(final LoginContext lc, final List<String> allowedRoles) {\n+    if (allowedRoles.contains(\"*\")) {\n+      // all users allowed\n+      return true;\n+    }\n+\n+    final Set<String> userRoles = lc.getSubject().getPrincipals().stream()\n+        .map(Principal::getName)\n+        .collect(Collectors.toSet());\n+    return !CollectionUtils.intersection(userRoles, allowedRoles).isEmpty();\n+  }\n+\n+  @SuppressWarnings(\"deprecation\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a8bae9df46689f8d01f7bd769880cdbf476c53"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDkxMTI0OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/auth/JaasAuthProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTozNTo1M1rOFyMUdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODoyOToxOFrOFye-FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3NDk2Nw==", "bodyText": "Does AbstractUser need to be fully qualified?", "url": "https://github.com/confluentinc/ksql/pull/4685#discussion_r388174967", "createdAt": "2020-03-05T09:35:53Z", "author": {"login": "purplefox"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/auth/JaasAuthProvider.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.ksql.api.server.ApiServerConfig;\n+import io.confluent.ksql.api.server.Server;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.auth.AuthProvider;\n+import io.vertx.ext.auth.User;\n+import java.security.Principal;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.auth.login.LoginContext;\n+import javax.security.auth.login.LoginException;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Authentication provider that checks credentials specified in the JAAS config.\n+ */\n+public class JaasAuthProvider implements AuthProvider {\n+\n+  private static final Logger log = LoggerFactory.getLogger(JaasAuthProvider.class);\n+\n+  private final Server server;\n+  private final ApiServerConfig config;\n+  private final LoginContextSupplier loginContextSupplier;\n+\n+  public JaasAuthProvider(final Server server, final ApiServerConfig config) {\n+    this(server, config, LoginContext::new);\n+  }\n+\n+  @VisibleForTesting\n+  JaasAuthProvider(\n+      final Server server,\n+      final ApiServerConfig config,\n+      final LoginContextSupplier loginContextSupplier\n+  ) {\n+    this.server = Objects.requireNonNull(server, \"server\");\n+    this.config = Objects.requireNonNull(config, \"config\");\n+    this.loginContextSupplier =\n+        Objects.requireNonNull(loginContextSupplier, \"loginContextSupplier\");\n+  }\n+\n+  @VisibleForTesting\n+  @FunctionalInterface\n+  interface LoginContextSupplier {\n+    LoginContext get(String name, CallbackHandler callbackHandler) throws LoginException;\n+  }\n+\n+  @Override\n+  public void authenticate(\n+      final JsonObject authInfo,\n+      final Handler<AsyncResult<User>> resultHandler\n+  ) {\n+    final String username = authInfo.getString(\"username\");\n+    if (username == null) {\n+      resultHandler.handle(Future.failedFuture(\"authInfo missing 'username' field\"));\n+      return;\n+    }\n+    final String password = authInfo.getString(\"password\");\n+    if (password == null) {\n+      resultHandler.handle(Future.failedFuture(\"authInfo missing 'password' field\"));\n+      return;\n+    }\n+\n+    final String contextName = config.getString(ApiServerConfig.AUTHENTICATION_REALM_CONFIG);\n+    final List<String> allowedRoles = config.getList(ApiServerConfig.AUTHENTICATION_ROLES_CONFIG);\n+\n+    server.getWorkerExecutor().executeBlocking(\n+        p -> getUser(contextName, username, password, allowedRoles, p),\n+        resultHandler\n+    );\n+  }\n+\n+  private void getUser(\n+      final String contextName,\n+      final String username,\n+      final String password,\n+      final List<String> allowedRoles,\n+      final Promise<User> promise\n+  ) {\n+    final LoginContext lc;\n+    try {\n+      lc = loginContextSupplier.get(contextName, new BasicCallbackHandler(username, password));\n+    } catch (LoginException | SecurityException e) {\n+      log.error(\"Failed to create LoginContext. \" + e.getMessage());\n+      promise.fail(\"Failed to create LoginContext.\");\n+      return;\n+    }\n+\n+    try {\n+      lc.login();\n+    } catch (LoginException le) {\n+      log.error(\"Failed to log in. \" + le.getMessage());\n+      promise.fail(\"Failed to log in: Invalid username/password.\");\n+      return;\n+    }\n+\n+    if (!validateRoles(lc, allowedRoles)) {\n+      log.error(\"Failed to log in: Invalid roles.\");\n+      promise.fail(\"Failed to log in: Invalid roles.\");\n+      return;\n+    }\n+\n+    promise.complete(new JaasUser(username, this));\n+  }\n+\n+  private void checkUserPermission(\n+      final String username,\n+      final Handler<AsyncResult<Boolean>> resultHandler\n+  ) {\n+    // no authorization yet (besides JAAS role check during login)\n+    // consequently, authenticated users have all permissions\n+    resultHandler.handle(Future.succeededFuture(true));\n+  }\n+\n+  private static boolean validateRoles(final LoginContext lc, final List<String> allowedRoles) {\n+    if (allowedRoles.contains(\"*\")) {\n+      // all users allowed\n+      return true;\n+    }\n+\n+    final Set<String> userRoles = lc.getSubject().getPrincipals().stream()\n+        .map(Principal::getName)\n+        .collect(Collectors.toSet());\n+    return !CollectionUtils.intersection(userRoles, allowedRoles).isEmpty();\n+  }\n+\n+  @SuppressWarnings(\"deprecation\")\n+  static class JaasUser extends io.vertx.ext.auth.AbstractUser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a8bae9df46689f8d01f7bd769880cdbf476c53"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4MDUzMw==", "bodyText": "The entire interface is deprecated and there's no way to suppress a deprecation warning on an import statement, so this was the workaround I found.", "url": "https://github.com/confluentinc/ksql/pull/4685#discussion_r388480533", "createdAt": "2020-03-05T18:29:18Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/auth/JaasAuthProvider.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.ksql.api.server.ApiServerConfig;\n+import io.confluent.ksql.api.server.Server;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Future;\n+import io.vertx.core.Handler;\n+import io.vertx.core.Promise;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.auth.AuthProvider;\n+import io.vertx.ext.auth.User;\n+import java.security.Principal;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.auth.login.LoginContext;\n+import javax.security.auth.login.LoginException;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Authentication provider that checks credentials specified in the JAAS config.\n+ */\n+public class JaasAuthProvider implements AuthProvider {\n+\n+  private static final Logger log = LoggerFactory.getLogger(JaasAuthProvider.class);\n+\n+  private final Server server;\n+  private final ApiServerConfig config;\n+  private final LoginContextSupplier loginContextSupplier;\n+\n+  public JaasAuthProvider(final Server server, final ApiServerConfig config) {\n+    this(server, config, LoginContext::new);\n+  }\n+\n+  @VisibleForTesting\n+  JaasAuthProvider(\n+      final Server server,\n+      final ApiServerConfig config,\n+      final LoginContextSupplier loginContextSupplier\n+  ) {\n+    this.server = Objects.requireNonNull(server, \"server\");\n+    this.config = Objects.requireNonNull(config, \"config\");\n+    this.loginContextSupplier =\n+        Objects.requireNonNull(loginContextSupplier, \"loginContextSupplier\");\n+  }\n+\n+  @VisibleForTesting\n+  @FunctionalInterface\n+  interface LoginContextSupplier {\n+    LoginContext get(String name, CallbackHandler callbackHandler) throws LoginException;\n+  }\n+\n+  @Override\n+  public void authenticate(\n+      final JsonObject authInfo,\n+      final Handler<AsyncResult<User>> resultHandler\n+  ) {\n+    final String username = authInfo.getString(\"username\");\n+    if (username == null) {\n+      resultHandler.handle(Future.failedFuture(\"authInfo missing 'username' field\"));\n+      return;\n+    }\n+    final String password = authInfo.getString(\"password\");\n+    if (password == null) {\n+      resultHandler.handle(Future.failedFuture(\"authInfo missing 'password' field\"));\n+      return;\n+    }\n+\n+    final String contextName = config.getString(ApiServerConfig.AUTHENTICATION_REALM_CONFIG);\n+    final List<String> allowedRoles = config.getList(ApiServerConfig.AUTHENTICATION_ROLES_CONFIG);\n+\n+    server.getWorkerExecutor().executeBlocking(\n+        p -> getUser(contextName, username, password, allowedRoles, p),\n+        resultHandler\n+    );\n+  }\n+\n+  private void getUser(\n+      final String contextName,\n+      final String username,\n+      final String password,\n+      final List<String> allowedRoles,\n+      final Promise<User> promise\n+  ) {\n+    final LoginContext lc;\n+    try {\n+      lc = loginContextSupplier.get(contextName, new BasicCallbackHandler(username, password));\n+    } catch (LoginException | SecurityException e) {\n+      log.error(\"Failed to create LoginContext. \" + e.getMessage());\n+      promise.fail(\"Failed to create LoginContext.\");\n+      return;\n+    }\n+\n+    try {\n+      lc.login();\n+    } catch (LoginException le) {\n+      log.error(\"Failed to log in. \" + le.getMessage());\n+      promise.fail(\"Failed to log in: Invalid username/password.\");\n+      return;\n+    }\n+\n+    if (!validateRoles(lc, allowedRoles)) {\n+      log.error(\"Failed to log in: Invalid roles.\");\n+      promise.fail(\"Failed to log in: Invalid roles.\");\n+      return;\n+    }\n+\n+    promise.complete(new JaasUser(username, this));\n+  }\n+\n+  private void checkUserPermission(\n+      final String username,\n+      final Handler<AsyncResult<Boolean>> resultHandler\n+  ) {\n+    // no authorization yet (besides JAAS role check during login)\n+    // consequently, authenticated users have all permissions\n+    resultHandler.handle(Future.succeededFuture(true));\n+  }\n+\n+  private static boolean validateRoles(final LoginContext lc, final List<String> allowedRoles) {\n+    if (allowedRoles.contains(\"*\")) {\n+      // all users allowed\n+      return true;\n+    }\n+\n+    final Set<String> userRoles = lc.getSubject().getPrincipals().stream()\n+        .map(Principal::getName)\n+        .collect(Collectors.toSet());\n+    return !CollectionUtils.intersection(userRoles, allowedRoles).isEmpty();\n+  }\n+\n+  @SuppressWarnings(\"deprecation\")\n+  static class JaasUser extends io.vertx.ext.auth.AbstractUser {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3NDk2Nw=="}, "originalCommit": {"oid": "b9a8bae9df46689f8d01f7bd769880cdbf476c53"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDk1Mjg4OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo0NzowNlrOFyMtWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODozMDoxMFrOFye_ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MTMzOA==", "bodyText": "I think it would be best to always add a pause handler then the auth handler as the first handlers in all routes. If the auth handler added after the body handler then a bad user with bad credentials could DoS the server by sending a request with a huge body, before auth occurs.", "url": "https://github.com/confluentinc/ksql/pull/4685#discussion_r388181338", "createdAt": "2020-03-05T09:47:06Z", "author": {"login": "purplefox"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -74,18 +80,45 @@ public void stop(final Promise<Void> stopPromise) {\n \n   private Router setupRouter() {\n     final Router router = Router.router(vertx);\n-    router.route(HttpMethod.POST, \"/query-stream\")\n-        .produces(\"application/vnd.ksqlapi.delimited.v1\")\n-        .produces(\"application/json\")\n-        .handler(BodyHandler.create())\n-        .handler(new QueryStreamHandler(endpoints, connectionQueryManager, context,\n-            server));\n-    router.route(HttpMethod.POST, \"/inserts-stream\")\n-        .produces(\"application/vnd.ksqlapi.delimited.v1\")\n-        .produces(\"application/json\")\n-        .handler(new InsertsStreamHandler(context, endpoints, server.getWorkerExecutor()));\n-    router.route(HttpMethod.POST, \"/close-query\").handler(BodyHandler.create())\n-        .handler(new CloseQueryHandler(server));\n+\n+    final List<Pair<Route, Handler<RoutingContext>>> routes = new ArrayList<>();\n+    routes.add(Pair.of(\n+        router.route(HttpMethod.POST, \"/query-stream\")\n+            .produces(\"application/vnd.ksqlapi.delimited.v1\")\n+            .produces(\"application/json\")\n+            .handler(BodyHandler.create()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a8bae9df46689f8d01f7bd769880cdbf476c53"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4Nzc5Ng==", "bodyText": "If they're always added at the beginning you don't need to a loop to add them, you can just define them once at the  beginning without a path and they will apply to all routes.\nI'd also recommend creating methods void pauseHandler(RoutingContext rc) and void resumeHandler(RoutingContext rc)`, then you can avoid the looping logic and do something like:\n    // This applies to all routes\n    router.route()\n        .handler(this::pauseHandler)\n        .handler(this::authHandler)\n        .handler(this::resumeHandler);\n\n    router.route(HttpMethod.POST, \"/query-stream\")\n        .produces(\"application/vnd.ksqlapi.delimited.v1\")\n        .produces(\"application/json\")\n        .handler(BodyHandler.create())\n        .handler(new QueryStreamHandler(endpoints, connectionQueryManager, context, server));\n\n    router.route(HttpMethod.POST, \"/inserts-stream\")\n        .produces(\"application/vnd.ksqlapi.delimited.v1\")\n        .produces(\"application/json\")\n        .handler(new InsertsStreamHandler(context, endpoints, server.getWorkerExecutor()));", "url": "https://github.com/confluentinc/ksql/pull/4685#discussion_r388187796", "createdAt": "2020-03-05T09:58:07Z", "author": {"login": "purplefox"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -74,18 +80,45 @@ public void stop(final Promise<Void> stopPromise) {\n \n   private Router setupRouter() {\n     final Router router = Router.router(vertx);\n-    router.route(HttpMethod.POST, \"/query-stream\")\n-        .produces(\"application/vnd.ksqlapi.delimited.v1\")\n-        .produces(\"application/json\")\n-        .handler(BodyHandler.create())\n-        .handler(new QueryStreamHandler(endpoints, connectionQueryManager, context,\n-            server));\n-    router.route(HttpMethod.POST, \"/inserts-stream\")\n-        .produces(\"application/vnd.ksqlapi.delimited.v1\")\n-        .produces(\"application/json\")\n-        .handler(new InsertsStreamHandler(context, endpoints, server.getWorkerExecutor()));\n-    router.route(HttpMethod.POST, \"/close-query\").handler(BodyHandler.create())\n-        .handler(new CloseQueryHandler(server));\n+\n+    final List<Pair<Route, Handler<RoutingContext>>> routes = new ArrayList<>();\n+    routes.add(Pair.of(\n+        router.route(HttpMethod.POST, \"/query-stream\")\n+            .produces(\"application/vnd.ksqlapi.delimited.v1\")\n+            .produces(\"application/json\")\n+            .handler(BodyHandler.create()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MTMzOA=="}, "originalCommit": {"oid": "b9a8bae9df46689f8d01f7bd769880cdbf476c53"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4MDk1NA==", "bodyText": "Much cleaner! Will do. Thanks for the tip.", "url": "https://github.com/confluentinc/ksql/pull/4685#discussion_r388480954", "createdAt": "2020-03-05T18:30:10Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -74,18 +80,45 @@ public void stop(final Promise<Void> stopPromise) {\n \n   private Router setupRouter() {\n     final Router router = Router.router(vertx);\n-    router.route(HttpMethod.POST, \"/query-stream\")\n-        .produces(\"application/vnd.ksqlapi.delimited.v1\")\n-        .produces(\"application/json\")\n-        .handler(BodyHandler.create())\n-        .handler(new QueryStreamHandler(endpoints, connectionQueryManager, context,\n-            server));\n-    router.route(HttpMethod.POST, \"/inserts-stream\")\n-        .produces(\"application/vnd.ksqlapi.delimited.v1\")\n-        .produces(\"application/json\")\n-        .handler(new InsertsStreamHandler(context, endpoints, server.getWorkerExecutor()));\n-    router.route(HttpMethod.POST, \"/close-query\").handler(BodyHandler.create())\n-        .handler(new CloseQueryHandler(server));\n+\n+    final List<Pair<Route, Handler<RoutingContext>>> routes = new ArrayList<>();\n+    routes.add(Pair.of(\n+        router.route(HttpMethod.POST, \"/query-stream\")\n+            .produces(\"application/vnd.ksqlapi.delimited.v1\")\n+            .produces(\"application/json\")\n+            .handler(BodyHandler.create()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4MTMzOA=="}, "originalCommit": {"oid": "b9a8bae9df46689f8d01f7bd769880cdbf476c53"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTAwNjY5OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/test/java/io/confluent/ksql/api/ApiTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDowMTo0NlrOFyNPDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxODozMjo1NVrOFyfFPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4OTk2Nw==", "bodyText": "What's the thinking behind the new annotation?", "url": "https://github.com/confluentinc/ksql/pull/4685#discussion_r388189967", "createdAt": "2020-03-05T10:01:46Z", "author": {"login": "purplefox"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/api/ApiTest.java", "diffHunk": "@@ -54,9 +52,12 @@\n \n public class ApiTest extends BaseApiTest {\n \n-  private static final Logger log = LoggerFactory.getLogger(ApiTest.class);\n+  protected static final Logger log = LoggerFactory.getLogger(ApiTest.class);\n+\n+  protected static final List<JsonObject> DEFAULT_INSERT_ROWS = generateInsertRows();\n \n   @Test\n+  @CoreApiTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a8bae9df46689f8d01f7bd769880cdbf476c53"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ4MjM2Nw==", "bodyText": "I didn't think we needed to run all the tests in ApiTest with basic auth (some of the negative tests also won't work since the expected error code changes with auth). Between duplicating code for the tests I did want to run with basic auth and adding an annotation to filter tests on, I went with the annotation approach. This way it's re-usable in that if we add other auth mechanisms, or other non-auth client/server mechanisms we want to run ApiTests against, the annotation allows for these future use cases as well.", "url": "https://github.com/confluentinc/ksql/pull/4685#discussion_r388482367", "createdAt": "2020-03-05T18:32:55Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/api/ApiTest.java", "diffHunk": "@@ -54,9 +52,12 @@\n \n public class ApiTest extends BaseApiTest {\n \n-  private static final Logger log = LoggerFactory.getLogger(ApiTest.class);\n+  protected static final Logger log = LoggerFactory.getLogger(ApiTest.class);\n+\n+  protected static final List<JsonObject> DEFAULT_INSERT_ROWS = generateInsertRows();\n \n   @Test\n+  @CoreApiTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4OTk2Nw=="}, "originalCommit": {"oid": "b9a8bae9df46689f8d01f7bd769880cdbf476c53"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTAyNzQ0OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/test/java/io/confluent/ksql/api/ApiTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDowNzo1NFrOFyNbgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTowMToyMVrOFykBBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MzE1Mw==", "bodyText": "Maybe just call it sendRequest()? As it can be used for sending arbitrary requests.", "url": "https://github.com/confluentinc/ksql/pull/4685#discussion_r388193153", "createdAt": "2020-03-05T10:07:54Z", "author": {"login": "purplefox"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/api/ApiTest.java", "diffHunk": "@@ -296,16 +298,19 @@ public void shouldRejectWhenInternalErrorInProcessingPullQuery() throws Exceptio\n   }\n \n   @Test\n+  @CoreApiTest\n   public void shouldCloseQuery() throws Exception {\n \n     // Create a write stream to capture the incomplete response\n     ReceiveStream writeStream = new ReceiveStream(vertx);\n \n     VertxCompletableFuture<HttpResponse<Void>> responseFuture = new VertxCompletableFuture<>();\n     // Make the request to stream a query\n-    client.post(\"/query-stream\")\n-        .as(BodyCodec.pipe(writeStream))\n-        .sendJsonObject(DEFAULT_PUSH_QUERY_REQUEST_BODY, responseFuture);\n+    streamRequest(\"/query-stream\", (request) ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a8bae9df46689f8d01f7bd769880cdbf476c53"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2MzIwNA==", "bodyText": "Ah interesting, I had named it streamRequest() not in reference to the endpoint (the same helper method is also used for the /inserts-stream endpoint in one of the tests) but because of how the request sender opens a write stream to stream back the response. As you've pointed out, though, the name is a bit confusing and the request sender could be more generic so I've renamed this to sendRequest() as you've suggested.\nMy original concern with this was that overloading sendRequest() could be confusing but I think it's fine for now.", "url": "https://github.com/confluentinc/ksql/pull/4685#discussion_r388563204", "createdAt": "2020-03-05T21:01:21Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/api/ApiTest.java", "diffHunk": "@@ -296,16 +298,19 @@ public void shouldRejectWhenInternalErrorInProcessingPullQuery() throws Exceptio\n   }\n \n   @Test\n+  @CoreApiTest\n   public void shouldCloseQuery() throws Exception {\n \n     // Create a write stream to capture the incomplete response\n     ReceiveStream writeStream = new ReceiveStream(vertx);\n \n     VertxCompletableFuture<HttpResponse<Void>> responseFuture = new VertxCompletableFuture<>();\n     // Make the request to stream a query\n-    client.post(\"/query-stream\")\n-        .as(BodyCodec.pipe(writeStream))\n-        .sendJsonObject(DEFAULT_PUSH_QUERY_REQUEST_BODY, responseFuture);\n+    streamRequest(\"/query-stream\", (request) ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MzE1Mw=="}, "originalCommit": {"oid": "b9a8bae9df46689f8d01f7bd769880cdbf476c53"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTA0MTQ3OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/test/java/io/confluent/ksql/api/BasicAuthTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoxMTo0NlrOFyNjwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDo1ODozOFrOFyj8BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5NTI2Ng==", "bodyText": "We probably don't need different tests for pull and push queries as they're handled on the same endpoint.", "url": "https://github.com/confluentinc/ksql/pull/4685#discussion_r388195266", "createdAt": "2020-03-05T10:11:46Z", "author": {"login": "purplefox"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/api/BasicAuthTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+import io.confluent.ksql.api.server.ApiServerConfig;\n+import io.confluent.ksql.test.util.TestBasicJaasConfig;\n+import io.confluent.ksql.util.VertxCompletableFuture;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpRequest;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@RunWith(CoreApiTestRunner.class)\n+public class BasicAuthTest extends ApiTest {\n+\n+  protected static final Logger log = LoggerFactory.getLogger(BasicAuthTest.class);\n+\n+  private static final String PROPS_JAAS_REALM = \"KsqlServer-Props\";\n+  private static final String KSQL_RESOURCE = \"ksql-user\";\n+  private static final String OTHER_RESOURCE = \"not-ksql\";\n+  private static final String USER_WITH_ACCESS = \"harry\";\n+  private static final String USER_WITH_ACCESS_PWD = \"changeme\";\n+  private static final String USER_WITHOUT_ACCESS = \"john\";\n+  private static final String USER_WITHOUT_ACCESS_PWD = \"bad\";\n+  private static final String USER_WITH_INCORRECT_ROLE = \"maud\";\n+  private static final String USER_WITH_INCORRECT_ROLE_PWD = \"1234\";\n+\n+  @ClassRule\n+  public static final TestBasicJaasConfig JAAS_CONFIG = TestBasicJaasConfig\n+      .builder(PROPS_JAAS_REALM)\n+      .addUser(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, KSQL_RESOURCE)\n+      .addUser(USER_WITH_INCORRECT_ROLE, USER_WITH_INCORRECT_ROLE_PWD, OTHER_RESOURCE)\n+      .build();\n+\n+  @Override\n+  protected ApiServerConfig createServerConfig() {\n+    ApiServerConfig config = super.createServerConfig();\n+    Map<String, Object> origs = config.originals();\n+    origs.put(\n+        ApiServerConfig.AUTHENTICATION_METHOD_CONFIG,\n+        ApiServerConfig.AUTHENTICATION_METHOD_BASIC);\n+    origs.put(\n+        ApiServerConfig.AUTHENTICATION_REALM_CONFIG,\n+        PROPS_JAAS_REALM\n+    );\n+    origs.put(\n+        ApiServerConfig.AUTHENTICATION_ROLES_CONFIG,\n+        KSQL_RESOURCE\n+    );\n+    return new ApiServerConfig(origs);\n+  }\n+\n+  @Override\n+  protected HttpResponse<Buffer> sendRequest(final WebClient client, final String uri,\n+      final Buffer requestBody)\n+      throws Exception {\n+    return sendRequestWithCreds(client, uri, requestBody, USER_WITH_ACCESS, USER_WITH_ACCESS_PWD);\n+  }\n+\n+  @Override\n+  protected void streamRequest(\n+      final WebClient client,\n+      final String uri,\n+      final Consumer<HttpRequest<Buffer>> requestSender) {\n+    requestSender.accept(\n+        client.post(uri)\n+            .basicAuthentication(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD)\n+    );\n+  }\n+\n+  @Test\n+  public void shouldFailPullQueryWithBadCredentials() throws Exception {\n+    shouldFailPullQuery(USER_WITHOUT_ACCESS, USER_WITHOUT_ACCESS_PWD);\n+  }\n+\n+  @Test\n+  public void shouldFailPushQueryWithBadCredentials() throws Exception {\n+    shouldFailPushQuery(USER_WITHOUT_ACCESS, USER_WITHOUT_ACCESS_PWD);\n+  }\n+\n+  @Test\n+  public void shouldFailCloseQueryWithBadCredentials() throws Exception {\n+    shouldFailCloseQuery(USER_WITHOUT_ACCESS, USER_WITHOUT_ACCESS_PWD);\n+  }\n+\n+  @Test\n+  public void shouldFailInsertRequestWithBadCredentials() throws Exception {\n+    shouldFailInsertRequest(USER_WITHOUT_ACCESS, USER_WITHOUT_ACCESS_PWD);\n+  }\n+\n+  @Test\n+  public void shouldFailPullQueryWithIncorrectRole() throws Exception {\n+    shouldFailPullQuery(USER_WITH_INCORRECT_ROLE, USER_WITH_INCORRECT_ROLE_PWD);\n+  }\n+\n+  @Test\n+  public void shouldFailPushQueryWithIncorrectRole() throws Exception {\n+    shouldFailPushQuery(USER_WITH_INCORRECT_ROLE, USER_WITH_INCORRECT_ROLE_PWD);\n+  }\n+\n+  @Test\n+  public void shouldFailCloseQueryWithIncorrectRole() throws Exception {\n+    shouldFailCloseQuery(USER_WITH_INCORRECT_ROLE, USER_WITH_INCORRECT_ROLE_PWD);\n+  }\n+\n+  @Test\n+  public void shouldFailInsertRequestWithIncorrectRole() throws Exception {\n+    shouldFailInsertRequest(USER_WITH_INCORRECT_ROLE, USER_WITH_INCORRECT_ROLE_PWD);\n+  }\n+\n+  private void shouldFailPullQuery(final String username, final String password) throws Exception {\n+    // Given\n+    JsonObject requestBody = new JsonObject().put(\"sql\", DEFAULT_PULL_QUERY);\n+    JsonObject properties = new JsonObject().put(\"prop1\", \"val1\").put(\"prop2\", 23);\n+    requestBody.put(\"properties\", properties);\n+\n+    // When\n+    HttpResponse<Buffer> response = sendRequestWithCreds(\n+        \"/query-stream\",\n+        requestBody.toBuffer(),\n+        username,\n+        password\n+    );\n+\n+    // Then\n+    assertThat(response.statusCode(), is(401));\n+    assertThat(response.statusMessage(), is(\"Unauthorized\"));\n+  }\n+\n+  private void shouldFailPushQuery(final String username, final String password) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a8bae9df46689f8d01f7bd769880cdbf476c53"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2MTkyNA==", "bodyText": "Done.", "url": "https://github.com/confluentinc/ksql/pull/4685#discussion_r388561924", "createdAt": "2020-03-05T20:58:38Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/api/BasicAuthTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+import io.confluent.ksql.api.server.ApiServerConfig;\n+import io.confluent.ksql.test.util.TestBasicJaasConfig;\n+import io.confluent.ksql.util.VertxCompletableFuture;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpRequest;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@RunWith(CoreApiTestRunner.class)\n+public class BasicAuthTest extends ApiTest {\n+\n+  protected static final Logger log = LoggerFactory.getLogger(BasicAuthTest.class);\n+\n+  private static final String PROPS_JAAS_REALM = \"KsqlServer-Props\";\n+  private static final String KSQL_RESOURCE = \"ksql-user\";\n+  private static final String OTHER_RESOURCE = \"not-ksql\";\n+  private static final String USER_WITH_ACCESS = \"harry\";\n+  private static final String USER_WITH_ACCESS_PWD = \"changeme\";\n+  private static final String USER_WITHOUT_ACCESS = \"john\";\n+  private static final String USER_WITHOUT_ACCESS_PWD = \"bad\";\n+  private static final String USER_WITH_INCORRECT_ROLE = \"maud\";\n+  private static final String USER_WITH_INCORRECT_ROLE_PWD = \"1234\";\n+\n+  @ClassRule\n+  public static final TestBasicJaasConfig JAAS_CONFIG = TestBasicJaasConfig\n+      .builder(PROPS_JAAS_REALM)\n+      .addUser(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, KSQL_RESOURCE)\n+      .addUser(USER_WITH_INCORRECT_ROLE, USER_WITH_INCORRECT_ROLE_PWD, OTHER_RESOURCE)\n+      .build();\n+\n+  @Override\n+  protected ApiServerConfig createServerConfig() {\n+    ApiServerConfig config = super.createServerConfig();\n+    Map<String, Object> origs = config.originals();\n+    origs.put(\n+        ApiServerConfig.AUTHENTICATION_METHOD_CONFIG,\n+        ApiServerConfig.AUTHENTICATION_METHOD_BASIC);\n+    origs.put(\n+        ApiServerConfig.AUTHENTICATION_REALM_CONFIG,\n+        PROPS_JAAS_REALM\n+    );\n+    origs.put(\n+        ApiServerConfig.AUTHENTICATION_ROLES_CONFIG,\n+        KSQL_RESOURCE\n+    );\n+    return new ApiServerConfig(origs);\n+  }\n+\n+  @Override\n+  protected HttpResponse<Buffer> sendRequest(final WebClient client, final String uri,\n+      final Buffer requestBody)\n+      throws Exception {\n+    return sendRequestWithCreds(client, uri, requestBody, USER_WITH_ACCESS, USER_WITH_ACCESS_PWD);\n+  }\n+\n+  @Override\n+  protected void streamRequest(\n+      final WebClient client,\n+      final String uri,\n+      final Consumer<HttpRequest<Buffer>> requestSender) {\n+    requestSender.accept(\n+        client.post(uri)\n+            .basicAuthentication(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD)\n+    );\n+  }\n+\n+  @Test\n+  public void shouldFailPullQueryWithBadCredentials() throws Exception {\n+    shouldFailPullQuery(USER_WITHOUT_ACCESS, USER_WITHOUT_ACCESS_PWD);\n+  }\n+\n+  @Test\n+  public void shouldFailPushQueryWithBadCredentials() throws Exception {\n+    shouldFailPushQuery(USER_WITHOUT_ACCESS, USER_WITHOUT_ACCESS_PWD);\n+  }\n+\n+  @Test\n+  public void shouldFailCloseQueryWithBadCredentials() throws Exception {\n+    shouldFailCloseQuery(USER_WITHOUT_ACCESS, USER_WITHOUT_ACCESS_PWD);\n+  }\n+\n+  @Test\n+  public void shouldFailInsertRequestWithBadCredentials() throws Exception {\n+    shouldFailInsertRequest(USER_WITHOUT_ACCESS, USER_WITHOUT_ACCESS_PWD);\n+  }\n+\n+  @Test\n+  public void shouldFailPullQueryWithIncorrectRole() throws Exception {\n+    shouldFailPullQuery(USER_WITH_INCORRECT_ROLE, USER_WITH_INCORRECT_ROLE_PWD);\n+  }\n+\n+  @Test\n+  public void shouldFailPushQueryWithIncorrectRole() throws Exception {\n+    shouldFailPushQuery(USER_WITH_INCORRECT_ROLE, USER_WITH_INCORRECT_ROLE_PWD);\n+  }\n+\n+  @Test\n+  public void shouldFailCloseQueryWithIncorrectRole() throws Exception {\n+    shouldFailCloseQuery(USER_WITH_INCORRECT_ROLE, USER_WITH_INCORRECT_ROLE_PWD);\n+  }\n+\n+  @Test\n+  public void shouldFailInsertRequestWithIncorrectRole() throws Exception {\n+    shouldFailInsertRequest(USER_WITH_INCORRECT_ROLE, USER_WITH_INCORRECT_ROLE_PWD);\n+  }\n+\n+  private void shouldFailPullQuery(final String username, final String password) throws Exception {\n+    // Given\n+    JsonObject requestBody = new JsonObject().put(\"sql\", DEFAULT_PULL_QUERY);\n+    JsonObject properties = new JsonObject().put(\"prop1\", \"val1\").put(\"prop2\", 23);\n+    requestBody.put(\"properties\", properties);\n+\n+    // When\n+    HttpResponse<Buffer> response = sendRequestWithCreds(\n+        \"/query-stream\",\n+        requestBody.toBuffer(),\n+        username,\n+        password\n+    );\n+\n+    // Then\n+    assertThat(response.statusCode(), is(401));\n+    assertThat(response.statusMessage(), is(\"Unauthorized\"));\n+  }\n+\n+  private void shouldFailPushQuery(final String username, final String password) throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5NTI2Ng=="}, "originalCommit": {"oid": "b9a8bae9df46689f8d01f7bd769880cdbf476c53"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTA0NTE3OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/test/java/io/confluent/ksql/api/BasicAuthTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoxMjo1MFrOFyNl_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDo1ODozNVrOFyj76w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5NTgzNw==", "bodyText": "I think it would also be good to add a test that checks request is rejected if no creds are provided (not bad creds)", "url": "https://github.com/confluentinc/ksql/pull/4685#discussion_r388195837", "createdAt": "2020-03-05T10:12:50Z", "author": {"login": "purplefox"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/api/BasicAuthTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+import io.confluent.ksql.api.server.ApiServerConfig;\n+import io.confluent.ksql.test.util.TestBasicJaasConfig;\n+import io.confluent.ksql.util.VertxCompletableFuture;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpRequest;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@RunWith(CoreApiTestRunner.class)\n+public class BasicAuthTest extends ApiTest {\n+\n+  protected static final Logger log = LoggerFactory.getLogger(BasicAuthTest.class);\n+\n+  private static final String PROPS_JAAS_REALM = \"KsqlServer-Props\";\n+  private static final String KSQL_RESOURCE = \"ksql-user\";\n+  private static final String OTHER_RESOURCE = \"not-ksql\";\n+  private static final String USER_WITH_ACCESS = \"harry\";\n+  private static final String USER_WITH_ACCESS_PWD = \"changeme\";\n+  private static final String USER_WITHOUT_ACCESS = \"john\";\n+  private static final String USER_WITHOUT_ACCESS_PWD = \"bad\";\n+  private static final String USER_WITH_INCORRECT_ROLE = \"maud\";\n+  private static final String USER_WITH_INCORRECT_ROLE_PWD = \"1234\";\n+\n+  @ClassRule\n+  public static final TestBasicJaasConfig JAAS_CONFIG = TestBasicJaasConfig\n+      .builder(PROPS_JAAS_REALM)\n+      .addUser(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, KSQL_RESOURCE)\n+      .addUser(USER_WITH_INCORRECT_ROLE, USER_WITH_INCORRECT_ROLE_PWD, OTHER_RESOURCE)\n+      .build();\n+\n+  @Override\n+  protected ApiServerConfig createServerConfig() {\n+    ApiServerConfig config = super.createServerConfig();\n+    Map<String, Object> origs = config.originals();\n+    origs.put(\n+        ApiServerConfig.AUTHENTICATION_METHOD_CONFIG,\n+        ApiServerConfig.AUTHENTICATION_METHOD_BASIC);\n+    origs.put(\n+        ApiServerConfig.AUTHENTICATION_REALM_CONFIG,\n+        PROPS_JAAS_REALM\n+    );\n+    origs.put(\n+        ApiServerConfig.AUTHENTICATION_ROLES_CONFIG,\n+        KSQL_RESOURCE\n+    );\n+    return new ApiServerConfig(origs);\n+  }\n+\n+  @Override\n+  protected HttpResponse<Buffer> sendRequest(final WebClient client, final String uri,\n+      final Buffer requestBody)\n+      throws Exception {\n+    return sendRequestWithCreds(client, uri, requestBody, USER_WITH_ACCESS, USER_WITH_ACCESS_PWD);\n+  }\n+\n+  @Override\n+  protected void streamRequest(\n+      final WebClient client,\n+      final String uri,\n+      final Consumer<HttpRequest<Buffer>> requestSender) {\n+    requestSender.accept(\n+        client.post(uri)\n+            .basicAuthentication(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD)\n+    );\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a8bae9df46689f8d01f7bd769880cdbf476c53"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2MTg5OQ==", "bodyText": "Done.", "url": "https://github.com/confluentinc/ksql/pull/4685#discussion_r388561899", "createdAt": "2020-03-05T20:58:35Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/api/BasicAuthTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+import io.confluent.ksql.api.server.ApiServerConfig;\n+import io.confluent.ksql.test.util.TestBasicJaasConfig;\n+import io.confluent.ksql.util.VertxCompletableFuture;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.web.client.HttpRequest;\n+import io.vertx.ext.web.client.HttpResponse;\n+import io.vertx.ext.web.client.WebClient;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@RunWith(CoreApiTestRunner.class)\n+public class BasicAuthTest extends ApiTest {\n+\n+  protected static final Logger log = LoggerFactory.getLogger(BasicAuthTest.class);\n+\n+  private static final String PROPS_JAAS_REALM = \"KsqlServer-Props\";\n+  private static final String KSQL_RESOURCE = \"ksql-user\";\n+  private static final String OTHER_RESOURCE = \"not-ksql\";\n+  private static final String USER_WITH_ACCESS = \"harry\";\n+  private static final String USER_WITH_ACCESS_PWD = \"changeme\";\n+  private static final String USER_WITHOUT_ACCESS = \"john\";\n+  private static final String USER_WITHOUT_ACCESS_PWD = \"bad\";\n+  private static final String USER_WITH_INCORRECT_ROLE = \"maud\";\n+  private static final String USER_WITH_INCORRECT_ROLE_PWD = \"1234\";\n+\n+  @ClassRule\n+  public static final TestBasicJaasConfig JAAS_CONFIG = TestBasicJaasConfig\n+      .builder(PROPS_JAAS_REALM)\n+      .addUser(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD, KSQL_RESOURCE)\n+      .addUser(USER_WITH_INCORRECT_ROLE, USER_WITH_INCORRECT_ROLE_PWD, OTHER_RESOURCE)\n+      .build();\n+\n+  @Override\n+  protected ApiServerConfig createServerConfig() {\n+    ApiServerConfig config = super.createServerConfig();\n+    Map<String, Object> origs = config.originals();\n+    origs.put(\n+        ApiServerConfig.AUTHENTICATION_METHOD_CONFIG,\n+        ApiServerConfig.AUTHENTICATION_METHOD_BASIC);\n+    origs.put(\n+        ApiServerConfig.AUTHENTICATION_REALM_CONFIG,\n+        PROPS_JAAS_REALM\n+    );\n+    origs.put(\n+        ApiServerConfig.AUTHENTICATION_ROLES_CONFIG,\n+        KSQL_RESOURCE\n+    );\n+    return new ApiServerConfig(origs);\n+  }\n+\n+  @Override\n+  protected HttpResponse<Buffer> sendRequest(final WebClient client, final String uri,\n+      final Buffer requestBody)\n+      throws Exception {\n+    return sendRequestWithCreds(client, uri, requestBody, USER_WITH_ACCESS, USER_WITH_ACCESS_PWD);\n+  }\n+\n+  @Override\n+  protected void streamRequest(\n+      final WebClient client,\n+      final String uri,\n+      final Consumer<HttpRequest<Buffer>> requestSender) {\n+    requestSender.accept(\n+        client.post(uri)\n+            .basicAuthentication(USER_WITH_ACCESS, USER_WITH_ACCESS_PWD)\n+    );\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5NTgzNw=="}, "originalCommit": {"oid": "b9a8bae9df46689f8d01f7bd769880cdbf476c53"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTA1NDgyOnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/test/java/io/confluent/ksql/api/auth/BasicCallbackHandlerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoxNTo0MVrOFyNrzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTowMzo0MVrOFykFNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5NzMyNw==", "bodyText": "Personally I am not a big fan of these kinds of fine grained unit tests for simple classes. I don't think they tell you much, plus they're a fair amount of work to write ;)", "url": "https://github.com/confluentinc/ksql/pull/4685#discussion_r388197327", "createdAt": "2020-03-05T10:15:41Z", "author": {"login": "purplefox"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/api/auth/BasicCallbackHandlerTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a8bae9df46689f8d01f7bd769880cdbf476c53"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NDI3Ng==", "bodyText": "That's fair. The value I see in simple tests like these is that I often find it easier to understand what a class is meant to do by scanning the unit tests rather than reading the code directly, but perhaps it was overkill this time. I'll leave them in since I've already written them, but if they become problematic later (if we, e.g., evolve the class in a way that requires updating the tests) I'm fine with removing them.", "url": "https://github.com/confluentinc/ksql/pull/4685#discussion_r388564276", "createdAt": "2020-03-05T21:03:41Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/api/auth/BasicCallbackHandlerTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5NzMyNw=="}, "originalCommit": {"oid": "b9a8bae9df46689f8d01f7bd769880cdbf476c53"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTA2MDU3OnYy", "diffSide": "RIGHT", "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/integration/PullQueryFunctionalTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoxNzowOVrOFyNvVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTowMzo0NVrOFykFSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5ODIyOA==", "bodyText": "Not related to your PR.. but is PullQueryFunctionalTest the only integration test which tests with actual Jaas config? That worries me slightly!", "url": "https://github.com/confluentinc/ksql/pull/4685#discussion_r388198228", "createdAt": "2020-03-05T10:17:09Z", "author": {"login": "purplefox"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/integration/PullQueryFunctionalTest.java", "diffHunk": "@@ -91,7 +91,7 @@\n   private static final Format VALUE_FORMAT = FormatFactory.JSON;\n   private static final int HEADER = 1;\n \n-  private static final TestBasicJaasConfig JASS_CONFIG = TestBasicJaasConfig\n+  private static final TestBasicJaasConfig JAAS_CONFIG = TestBasicJaasConfig", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a8bae9df46689f8d01f7bd769880cdbf476c53"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NDI5Nw==", "bodyText": "Nope, there's also https://github.com/confluentinc/ksql/blob/master/ksql-cli/src/test/java/io/confluent/ksql/cli/BasicAuthFunctionalTest.java. Not sure why creation of the JAAS config isn't standardized among integration tests. Probably worth cleaning up at some point.", "url": "https://github.com/confluentinc/ksql/pull/4685#discussion_r388564297", "createdAt": "2020-03-05T21:03:45Z", "author": {"login": "vcrfxia"}, "path": "ksql-rest-app/src/test/java/io/confluent/ksql/rest/integration/PullQueryFunctionalTest.java", "diffHunk": "@@ -91,7 +91,7 @@\n   private static final Format VALUE_FORMAT = FormatFactory.JSON;\n   private static final int HEADER = 1;\n \n-  private static final TestBasicJaasConfig JASS_CONFIG = TestBasicJaasConfig\n+  private static final TestBasicJaasConfig JAAS_CONFIG = TestBasicJaasConfig", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5ODIyOA=="}, "originalCommit": {"oid": "b9a8bae9df46689f8d01f7bd769880cdbf476c53"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2026, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}