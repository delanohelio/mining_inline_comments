{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NDE3NjQy", "number": 5639, "title": "docs: API docs for new Server endpoints", "bodyText": "Description\nThis PR contains API docs for the new server streaming endpoints.\nTesting done\nN/A\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-06-18T11:45:13Z", "url": "https://github.com/confluentinc/ksql/pull/5639", "merged": true, "mergeCommit": {"oid": "6520d386239def87e3d5d5806177ecc566c7ed99"}, "closed": true, "closedAt": "2020-06-25T20:41:51Z", "author": {"login": "purplefox"}, "timelineItems": {"totalCount": 52, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsLc7PAH2gAyNDM2NDE3NjQyOmFiNTZhZTNlM2ExYzBlNDg2NmM2MWFkNDFjZjhlNWY3MmM2MDdhMDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcus0BzgH2gAyNDM2NDE3NjQyOmZmYTI0ZjUyNDNhNjQxNWViMThhYzhiZjc5M2I1YTRlNzhmMTYyMmQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02", "committedDate": "2020-06-17T15:19:18Z", "message": "api docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODE1MTQ2", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436815146", "createdAt": "2020-06-24T16:31:12Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozMToxMlrOGoaA4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozMToxMlrOGoaA4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyMjQzMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\n          \n          \n            \n            !!! note\n          \n          \n            \n                These endpoints are used by the ksqlDB Java client. If you're using Java, consider", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445022433", "createdAt": "2020-06-24T16:31:12Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODE1Mzcw", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436815370", "createdAt": "2020-06-24T16:31:28Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozMToyOVrOGoaBig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozMToyOVrOGoaBig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyMjYwMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            to consider using the Java client rather than using this API directly.\n          \n          \n            \n            using the Java client rather than using this API directly.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445022602", "createdAt": "2020-06-24T16:31:29Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODE1NjI3", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436815627", "createdAt": "2020-06-24T16:31:50Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozMTo1MFrOGoaCTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozMTo1MFrOGoaCTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyMjc5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The request method will be a POST.\n          \n          \n            \n            The request method is a POST.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445022799", "createdAt": "2020-06-24T16:31:50Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODE1ODYy", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436815862", "createdAt": "2020-06-24T16:32:09Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozMjowOVrOGoaDBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozMjowOVrOGoaDBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyMjk4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Requests will be made to the endpoint \"/query-stream\".\n          \n          \n            \n            Send requests to the `/query-stream` endpoint.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445022980", "createdAt": "2020-06-24T16:32:09Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODE2MzMx", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436816331", "createdAt": "2020-06-24T16:32:45Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozMjo0NVrOGoaEdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozMjo0NVrOGoaEdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyMzM0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            operation (newlines have been added here for the sake of clarity but the real JSON must not contain\n          \n          \n            \n            operation. Newlines have been added here for the sake of clarity, but actual JSON must not contain", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445023349", "createdAt": "2020-06-24T16:32:45Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODE2NDk2", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436816496", "createdAt": "2020-06-24T16:32:59Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozMzowMVrOGoaE_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozMzowMVrOGoaE_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyMzQ4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             unescaped newlines)\n          \n          \n            \n             unescaped newlines.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445023485", "createdAt": "2020-06-24T16:33:01Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODE2Njk1", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436816695", "createdAt": "2020-06-24T16:33:12Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozMzoxMlrOGoaFiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozMzoxMlrOGoaFiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyMzYyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ````\n          \n          \n            \n            ```json", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445023627", "createdAt": "2020-06-24T16:33:12Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODE3MDIz", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436817023", "createdAt": "2020-06-24T16:33:39Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozMzozOVrOGoaGdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozMzozOVrOGoaGdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyMzg2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ````", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445023860", "createdAt": "2020-06-24T16:33:39Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODE3NTc2", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436817576", "createdAt": "2020-06-24T16:34:19Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNDoyMFrOGoaIGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNDoyMFrOGoaIGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNDI4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The endpoint produces responses with two possible content types `application/json` and\n          \n          \n            \n            The endpoint produces responses with two possible content types: `application/json` and", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445024282", "createdAt": "2020-06-24T16:34:20Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODE4MDUx", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436818051", "createdAt": "2020-06-24T16:34:56Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNDo1NlrOGoaJdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNDo1NlrOGoaJdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNDYyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\n          \n          \n            \n            `application/vnd.ksqlapi.delimited.v1`. To specify the content type, set the `Accept`", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445024628", "createdAt": "2020-06-24T16:34:56Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODE4MjYy", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436818262", "createdAt": "2020-06-24T16:35:12Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNToxMlrOGoaKEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNToxMlrOGoaKEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNDc4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\n          \n          \n            \n            In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`,", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445024787", "createdAt": "2020-06-24T16:35:12Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODE4NDY0", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436818464", "createdAt": "2020-06-24T16:35:29Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNToyOVrOGoaKog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNToyOVrOGoaKog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNDkzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            then the results are returned as a header JSON object followed by zero or more JSON arrays\n          \n          \n            \n            the results are returned as a header JSON object followed by zero or more JSON arrays", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445024930", "createdAt": "2020-06-24T16:35:29Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODE4ODA1", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436818805", "createdAt": "2020-06-24T16:35:54Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNTo1NFrOGoaLpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNTo1NFrOGoaLpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNTE5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\n          \n          \n            \n            that are delimited by newlines. Newline-delimited formats are easy to parse by clients and don't require", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445025191", "createdAt": "2020-06-24T16:35:54Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODE5MDQx", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436819041", "createdAt": "2020-06-24T16:36:11Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNjoxMVrOGoaMYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNjoxMVrOGoaMYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNTM3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ````\n          \n          \n            \n            ```json", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445025379", "createdAt": "2020-06-24T16:36:11Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODIwMjM0", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436820234", "createdAt": "2020-06-24T16:37:46Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNzo0NlrOGoaP_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNzo0NlrOGoaP_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNjMwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ````", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445026300", "createdAt": "2020-06-24T16:37:46Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODIwNTg0", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436820584", "createdAt": "2020-06-24T16:38:14Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozODoxNFrOGoaREw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozODoxNFrOGoaREw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNjU3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ````", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445026579", "createdAt": "2020-06-24T16:38:14Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODIwODE3", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436820817", "createdAt": "2020-06-24T16:38:32Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozODozMlrOGoaRxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozODozMlrOGoaRxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNjc1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ````\n          \n          \n            \n            ```json", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445026759", "createdAt": "2020-06-24T16:38:32Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODIxMTI1", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436821125", "createdAt": "2020-06-24T16:38:57Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozODo1N1rOGoaSlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozODo1N1rOGoaSlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNjk2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If you prefer to receive the entire response as valid JSON then you can request\n          \n          \n            \n            If you prefer to receive the entire response as valid JSON, request the", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445026965", "createdAt": "2020-06-24T16:38:57Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODIxNTQ2", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436821546", "createdAt": "2020-06-24T16:39:29Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozOTozMFrOGoaT6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozOTozMFrOGoaT6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNzMwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            content type `application/json`. In which case you will receive the results, as a single JSON\n          \n          \n            \n            `application/json` content type. In this case, you receive the results as a single JSON", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445027305", "createdAt": "2020-06-24T16:39:30Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODIyMTcx", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436822171", "createdAt": "2020-06-24T16:40:19Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0MDoxOVrOGoaVqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0MDoxOVrOGoaVqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNzc1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            array, for example: (newlines have been added for clarity, the response body\n          \n          \n            \n            array, as shown in the following example. Newlines have been added for clarity, and the response body", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445027753", "createdAt": "2020-06-24T16:40:19Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODIyMzA3", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436822307", "createdAt": "2020-06-24T16:40:31Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0MDozMVrOGoaWIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0MDozMVrOGoaWIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNzg3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            won't contain newlines).\n          \n          \n            \n            won't contain newlines.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445027872", "createdAt": "2020-06-24T16:40:31Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODIyNTEz", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436822513", "createdAt": "2020-06-24T16:40:46Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0MDo0NlrOGoaWyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0MDo0NlrOGoaWyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyODA0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ````\n          \n          \n            \n            ```json", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445028042", "createdAt": "2020-06-24T16:40:46Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODIyNjYx", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436822661", "createdAt": "2020-06-24T16:40:56Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0MDo1N1rOGoaXPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0MDo1N1rOGoaXPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyODE1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ````", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445028157", "createdAt": "2020-06-24T16:40:57Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODIzNjg5", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436823689", "createdAt": "2020-06-24T16:42:15Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0MjoxNVrOGoaacg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0MjoxNVrOGoaacg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyODk3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Push queries can be explicitly terminated by the client by making a request to this endpoint\n          \n          \n            \n            You can terminate push queries explicitly in the client by making a request to this endpoint.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445028978", "createdAt": "2020-06-24T16:42:15Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODIzOTE4", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436823918", "createdAt": "2020-06-24T16:42:30Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0MjozMFrOGoabNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0MjozMFrOGoabNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyOTE3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The request method will be a POST.\n          \n          \n            \n            The request method is POST.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445029174", "createdAt": "2020-06-24T16:42:30Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI0MzY5", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436824369", "createdAt": "2020-06-24T16:43:05Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0MzowNVrOGoachA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0MzowNVrOGoachA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyOTUwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Requests will be made to the endpoint \"/close-query\"\n          \n          \n            \n            Send requests to the `/close-query` endpoint.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445029508", "createdAt": "2020-06-24T16:43:05Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 85}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI0NzMw", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436824730", "createdAt": "2020-06-24T16:43:33Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0MzozM1rOGoadoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0MzozM1rOGoadoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyOTc5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            query to close. (newlines have been added here for the sake of clarity but the real JSON must not\n          \n          \n            \n            query to close. Newlines are added here for the sake of clarity, but the actual JSON must not", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445029792", "createdAt": "2020-06-24T16:43:33Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 88}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI0ODY0", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436824864", "createdAt": "2020-06-24T16:43:43Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0Mzo0NFrOGoaeAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0Mzo0NFrOGoaeAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyOTg4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            contain newlines)\n          \n          \n            \n            contain newlines.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445029888", "createdAt": "2020-06-24T16:43:44Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI1MDMy", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436825032", "createdAt": "2020-06-24T16:43:56Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0Mzo1N1rOGoaegw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0Mzo1N1rOGoaegw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMDAxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ````\n          \n          \n            \n            ```json", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445030019", "createdAt": "2020-06-24T16:43:57Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI1MTYz", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436825163", "createdAt": "2020-06-24T16:44:08Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NDowOFrOGoae7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NDowOFrOGoae7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMDEyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ````", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445030126", "createdAt": "2020-06-24T16:44:08Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI1NDI4", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436825428", "createdAt": "2020-06-24T16:44:29Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NDozMFrOGoafyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NDozMFrOGoafyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMDM0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The request method will be a POST.\n          \n          \n            \n            The request method is POST.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445030344", "createdAt": "2020-06-24T16:44:30Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI1NzY0", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436825764", "createdAt": "2020-06-24T16:44:53Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NDo1NFrOGoagxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NDo1NFrOGoagxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMDU5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Requests will be made to the endpoint \"/insert-stream\".\n          \n          \n            \n            Send requests to the `/insert-stream` endpoint.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445030597", "createdAt": "2020-06-24T16:44:54Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI2MjQy", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436826242", "createdAt": "2020-06-24T16:45:27Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NToyN1rOGoaiQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NToyN1rOGoaiQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMDk3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            operation (newlines have been added for clarity, the real JSON must not contain newlines):\n          \n          \n            \n            operation. Newlines are added for clarity, but the actual JSON must not contain newlines.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445030976", "createdAt": "2020-06-24T16:45:27Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added for clarity, the real JSON must not contain newlines):\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 105}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI2Mzc3", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436826377", "createdAt": "2020-06-24T16:45:37Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NTozN1rOGoaimA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NTozN1rOGoaimA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMTA2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ````\n          \n          \n            \n            ```json", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445031064", "createdAt": "2020-06-24T16:45:37Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added for clarity, the real JSON must not contain newlines):\r\n+\r\n+````\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI2NTE4", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436826518", "createdAt": "2020-06-24T16:45:47Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NTo0N1rOGoajBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NTo0N1rOGoajBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMTE3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ````", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445031174", "createdAt": "2020-06-24T16:45:47Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added for clarity, the real JSON must not contain newlines):\r\n+\r\n+````\r\n+{\r\n+\"target\": \"my-stream\" <----- The name of the KSQL stream to insert into\r\n+}\r\n+\r\n+````\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI2Nzcz", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436826773", "createdAt": "2020-06-24T16:46:06Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NjowNlrOGoaj2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NjowNlrOGoaj2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMTM4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ````\n          \n          \n            \n            ```json", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445031384", "createdAt": "2020-06-24T16:46:06Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added for clarity, the real JSON must not contain newlines):\r\n+\r\n+````\r\n+{\r\n+\"target\": \"my-stream\" <----- The name of the KSQL stream to insert into\r\n+}\r\n+\r\n+````\r\n+\r\n+Followed by zero or more JSON objects representing the values to insert:\r\n+\r\n+````\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI2OTIw", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436826920", "createdAt": "2020-06-24T16:46:16Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NjoxNlrOGoakRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NjoxNlrOGoakRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMTQ5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ````", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445031494", "createdAt": "2020-06-24T16:46:16Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added for clarity, the real JSON must not contain newlines):\r\n+\r\n+````\r\n+{\r\n+\"target\": \"my-stream\" <----- The name of the KSQL stream to insert into\r\n+}\r\n+\r\n+````\r\n+\r\n+Followed by zero or more JSON objects representing the values to insert:\r\n+\r\n+````\r\n+{\r\n+\"col1\" : \"val1\",\r\n+\"col2\": 2.3,\r\n+\"col3\", true\r\n+}\r\n+````\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 122}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI3MTIz", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436827123", "createdAt": "2020-06-24T16:46:31Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NjozMlrOGoak-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NjozMlrOGoak-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMTY3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Each JSON object will be separated by a new line.\n          \n          \n            \n            Each JSON object is separated by a newline.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445031675", "createdAt": "2020-06-24T16:46:32Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added for clarity, the real JSON must not contain newlines):\r\n+\r\n+````\r\n+{\r\n+\"target\": \"my-stream\" <----- The name of the KSQL stream to insert into\r\n+}\r\n+\r\n+````\r\n+\r\n+Followed by zero or more JSON objects representing the values to insert:\r\n+\r\n+````\r\n+{\r\n+\"col1\" : \"val1\",\r\n+\"col2\": 2.3,\r\n+\"col3\", true\r\n+}\r\n+````\r\n+Each JSON object will be separated by a new line.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI3MzIy", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436827322", "createdAt": "2020-06-24T16:46:48Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0Njo0OFrOGoaloQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0Njo0OFrOGoaloQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMTg0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            To terminate the insert stream the client should end the request.\n          \n          \n            \n            To terminate the insert stream, the client must end the request.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445031841", "createdAt": "2020-06-24T16:46:48Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added for clarity, the real JSON must not contain newlines):\r\n+\r\n+````\r\n+{\r\n+\"target\": \"my-stream\" <----- The name of the KSQL stream to insert into\r\n+}\r\n+\r\n+````\r\n+\r\n+Followed by zero or more JSON objects representing the values to insert:\r\n+\r\n+````\r\n+{\r\n+\"col1\" : \"val1\",\r\n+\"col2\": 2.3,\r\n+\"col3\", true\r\n+}\r\n+````\r\n+Each JSON object will be separated by a new line.\r\n+\r\n+To terminate the insert stream the client should end the request.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI3NzQy", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436827742", "createdAt": "2020-06-24T16:47:21Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NzoyMVrOGoam-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NzoyMVrOGoam-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMjE4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Acks will be written to the response when each row has been\n          \n          \n            \n            An ack is written to the response when each row has been", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445032185", "createdAt": "2020-06-24T16:47:21Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added for clarity, the real JSON must not contain newlines):\r\n+\r\n+````\r\n+{\r\n+\"target\": \"my-stream\" <----- The name of the KSQL stream to insert into\r\n+}\r\n+\r\n+````\r\n+\r\n+Followed by zero or more JSON objects representing the values to insert:\r\n+\r\n+````\r\n+{\r\n+\"col1\" : \"val1\",\r\n+\"col2\": 2.3,\r\n+\"col3\", true\r\n+}\r\n+````\r\n+Each JSON object will be separated by a new line.\r\n+\r\n+To terminate the insert stream the client should end the request.\r\n+\r\n+Acks will be written to the response when each row has been\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI4MDEy", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436828012", "createdAt": "2020-06-24T16:47:40Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0Nzo0MFrOGoan2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0Nzo0MFrOGoan2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMjQwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            successfully committed to the underlying topic. Rows are committed in the order they are provided.\n          \n          \n            \n            committed successfully to the underlying topic. Rows are committed in the order they are provided.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445032408", "createdAt": "2020-06-24T16:47:40Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added for clarity, the real JSON must not contain newlines):\r\n+\r\n+````\r\n+{\r\n+\"target\": \"my-stream\" <----- The name of the KSQL stream to insert into\r\n+}\r\n+\r\n+````\r\n+\r\n+Followed by zero or more JSON objects representing the values to insert:\r\n+\r\n+````\r\n+{\r\n+\"col1\" : \"val1\",\r\n+\"col2\": 2.3,\r\n+\"col3\", true\r\n+}\r\n+````\r\n+Each JSON object will be separated by a new line.\r\n+\r\n+To terminate the insert stream the client should end the request.\r\n+\r\n+Acks will be written to the response when each row has been\r\n+successfully committed to the underlying topic. Rows are committed in the order they are provided.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI4MTkz", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436828193", "createdAt": "2020-06-24T16:47:53Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0Nzo1M1rOGoaodQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0Nzo1M1rOGoaodQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMjU2NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ````\n          \n          \n            \n            ```json", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445032565", "createdAt": "2020-06-24T16:47:53Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added for clarity, the real JSON must not contain newlines):\r\n+\r\n+````\r\n+{\r\n+\"target\": \"my-stream\" <----- The name of the KSQL stream to insert into\r\n+}\r\n+\r\n+````\r\n+\r\n+Followed by zero or more JSON objects representing the values to insert:\r\n+\r\n+````\r\n+{\r\n+\"col1\" : \"val1\",\r\n+\"col2\": 2.3,\r\n+\"col3\", true\r\n+}\r\n+````\r\n+Each JSON object will be separated by a new line.\r\n+\r\n+To terminate the insert stream the client should end the request.\r\n+\r\n+Acks will be written to the response when each row has been\r\n+successfully committed to the underlying topic. Rows are committed in the order they are provided.\r\n+Each ack in the response is a JSON object, separated by newlines:\r\n+\r\n+````\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI4MzY3", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436828367", "createdAt": "2020-06-24T16:48:04Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0ODowNVrOGoao8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0ODowNVrOGoao8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMjY5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ````", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445032690", "createdAt": "2020-06-24T16:48:05Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added for clarity, the real JSON must not contain newlines):\r\n+\r\n+````\r\n+{\r\n+\"target\": \"my-stream\" <----- The name of the KSQL stream to insert into\r\n+}\r\n+\r\n+````\r\n+\r\n+Followed by zero or more JSON objects representing the values to insert:\r\n+\r\n+````\r\n+{\r\n+\"col1\" : \"val1\",\r\n+\"col2\": 2.3,\r\n+\"col3\", true\r\n+}\r\n+````\r\n+Each JSON object will be separated by a new line.\r\n+\r\n+To terminate the insert stream the client should end the request.\r\n+\r\n+Acks will be written to the response when each row has been\r\n+successfully committed to the underlying topic. Rows are committed in the order they are provided.\r\n+Each ack in the response is a JSON object, separated by newlines:\r\n+\r\n+````\r\n+{\"status\":\"ok\",\"seq\":0}\r\n+{\"status\":\"ok\",\"seq\":2}\r\n+{\"status\":\"ok\",\"seq\":1}\r\n+{\"status\":\"ok\",\"seq\":3}\r\n+````\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI4Njk0", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436828694", "createdAt": "2020-06-24T16:48:26Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0ODoyNlrOGoap1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0ODoyNlrOGoap1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMjkxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A successful ack will contain a field `status` with value `ok`.\n          \n          \n            \n            A successful ack contains a `status` field with value of `ok`.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445032918", "createdAt": "2020-06-24T16:48:26Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added for clarity, the real JSON must not contain newlines):\r\n+\r\n+````\r\n+{\r\n+\"target\": \"my-stream\" <----- The name of the KSQL stream to insert into\r\n+}\r\n+\r\n+````\r\n+\r\n+Followed by zero or more JSON objects representing the values to insert:\r\n+\r\n+````\r\n+{\r\n+\"col1\" : \"val1\",\r\n+\"col2\": 2.3,\r\n+\"col3\", true\r\n+}\r\n+````\r\n+Each JSON object will be separated by a new line.\r\n+\r\n+To terminate the insert stream the client should end the request.\r\n+\r\n+Acks will be written to the response when each row has been\r\n+successfully committed to the underlying topic. Rows are committed in the order they are provided.\r\n+Each ack in the response is a JSON object, separated by newlines:\r\n+\r\n+````\r\n+{\"status\":\"ok\",\"seq\":0}\r\n+{\"status\":\"ok\",\"seq\":2}\r\n+{\"status\":\"ok\",\"seq\":1}\r\n+{\"status\":\"ok\",\"seq\":3}\r\n+````\r\n+\r\n+A successful ack will contain a field `status` with value `ok`.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI5MTIz", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436829123", "createdAt": "2020-06-24T16:48:59Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0ODo1OVrOGoarMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0ODo1OVrOGoarMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMzI2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            All ack responses also contain a field `seq` with a 64 bit signed integer value. This number\n          \n          \n            \n            All ack responses also contain a `seq` field with a 64-bit signed integer value. This number", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445033264", "createdAt": "2020-06-24T16:48:59Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added for clarity, the real JSON must not contain newlines):\r\n+\r\n+````\r\n+{\r\n+\"target\": \"my-stream\" <----- The name of the KSQL stream to insert into\r\n+}\r\n+\r\n+````\r\n+\r\n+Followed by zero or more JSON objects representing the values to insert:\r\n+\r\n+````\r\n+{\r\n+\"col1\" : \"val1\",\r\n+\"col2\": 2.3,\r\n+\"col3\", true\r\n+}\r\n+````\r\n+Each JSON object will be separated by a new line.\r\n+\r\n+To terminate the insert stream the client should end the request.\r\n+\r\n+Acks will be written to the response when each row has been\r\n+successfully committed to the underlying topic. Rows are committed in the order they are provided.\r\n+Each ack in the response is a JSON object, separated by newlines:\r\n+\r\n+````\r\n+{\"status\":\"ok\",\"seq\":0}\r\n+{\"status\":\"ok\",\"seq\":2}\r\n+{\"status\":\"ok\",\"seq\":1}\r\n+{\"status\":\"ok\",\"seq\":3}\r\n+````\r\n+\r\n+A successful ack will contain a field `status` with value `ok`.\r\n+\r\n+All ack responses also contain a field `seq` with a 64 bit signed integer value. This number\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 140}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI5NjI0", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436829624", "createdAt": "2020-06-24T16:49:36Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0OTozN1rOGoastw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0OTozN1rOGoastw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMzY1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In case of error, an error response (see below) will be sent. For an error response for a send, the\n          \n          \n            \n            In case of error, an error response (see below) is sent. For an error response for a send, the", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445033655", "createdAt": "2020-06-24T16:49:37Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added for clarity, the real JSON must not contain newlines):\r\n+\r\n+````\r\n+{\r\n+\"target\": \"my-stream\" <----- The name of the KSQL stream to insert into\r\n+}\r\n+\r\n+````\r\n+\r\n+Followed by zero or more JSON objects representing the values to insert:\r\n+\r\n+````\r\n+{\r\n+\"col1\" : \"val1\",\r\n+\"col2\": 2.3,\r\n+\"col3\", true\r\n+}\r\n+````\r\n+Each JSON object will be separated by a new line.\r\n+\r\n+To terminate the insert stream the client should end the request.\r\n+\r\n+Acks will be written to the response when each row has been\r\n+successfully committed to the underlying topic. Rows are committed in the order they are provided.\r\n+Each ack in the response is a JSON object, separated by newlines:\r\n+\r\n+````\r\n+{\"status\":\"ok\",\"seq\":0}\r\n+{\"status\":\"ok\",\"seq\":2}\r\n+{\"status\":\"ok\",\"seq\":1}\r\n+{\"status\":\"ok\",\"seq\":3}\r\n+````\r\n+\r\n+A successful ack will contain a field `status` with value `ok`.\r\n+\r\n+All ack responses also contain a field `seq` with a 64 bit signed integer value. This number\r\n+corresponds to the sequence of the insert on the request. The first send has sequence `0`, the second\r\n+`1`, the third `2`, etc. It allows the client to correlate the ack to the corresponding send.\r\n+\r\n+In case of error, an error response (see below) will be sent. For an error response for a send, the\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 144}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODI5ODk4", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436829898", "createdAt": "2020-06-24T16:49:58Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0OTo1OFrOGoatkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0OTo1OFrOGoatkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMzg3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `seq` field will also be included. \n          \n          \n            \n            `seq` field is included.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445033874", "createdAt": "2020-06-24T16:49:58Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added for clarity, the real JSON must not contain newlines):\r\n+\r\n+````\r\n+{\r\n+\"target\": \"my-stream\" <----- The name of the KSQL stream to insert into\r\n+}\r\n+\r\n+````\r\n+\r\n+Followed by zero or more JSON objects representing the values to insert:\r\n+\r\n+````\r\n+{\r\n+\"col1\" : \"val1\",\r\n+\"col2\": 2.3,\r\n+\"col3\", true\r\n+}\r\n+````\r\n+Each JSON object will be separated by a new line.\r\n+\r\n+To terminate the insert stream the client should end the request.\r\n+\r\n+Acks will be written to the response when each row has been\r\n+successfully committed to the underlying topic. Rows are committed in the order they are provided.\r\n+Each ack in the response is a JSON object, separated by newlines:\r\n+\r\n+````\r\n+{\"status\":\"ok\",\"seq\":0}\r\n+{\"status\":\"ok\",\"seq\":2}\r\n+{\"status\":\"ok\",\"seq\":1}\r\n+{\"status\":\"ok\",\"seq\":3}\r\n+````\r\n+\r\n+A successful ack will contain a field `status` with value `ok`.\r\n+\r\n+All ack responses also contain a field `seq` with a 64 bit signed integer value. This number\r\n+corresponds to the sequence of the insert on the request. The first send has sequence `0`, the second\r\n+`1`, the third `2`, etc. It allows the client to correlate the ack to the corresponding send.\r\n+\r\n+In case of error, an error response (see below) will be sent. For an error response for a send, the\r\n+`seq` field will also be included. \r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 145}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODMwNjc1", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436830675", "createdAt": "2020-06-24T16:51:04Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo1MTowNFrOGoav4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo1MTowNFrOGoav4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzNDQ2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Please note that acks can be returned in a different sequence to which the inserts were submitted. \n          \n          \n            \n            !!! note\n          \n          \n            \n                Acks can be returned in a different sequence to which the inserts were submitted.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445034466", "createdAt": "2020-06-24T16:51:04Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added for clarity, the real JSON must not contain newlines):\r\n+\r\n+````\r\n+{\r\n+\"target\": \"my-stream\" <----- The name of the KSQL stream to insert into\r\n+}\r\n+\r\n+````\r\n+\r\n+Followed by zero or more JSON objects representing the values to insert:\r\n+\r\n+````\r\n+{\r\n+\"col1\" : \"val1\",\r\n+\"col2\": 2.3,\r\n+\"col3\", true\r\n+}\r\n+````\r\n+Each JSON object will be separated by a new line.\r\n+\r\n+To terminate the insert stream the client should end the request.\r\n+\r\n+Acks will be written to the response when each row has been\r\n+successfully committed to the underlying topic. Rows are committed in the order they are provided.\r\n+Each ack in the response is a JSON object, separated by newlines:\r\n+\r\n+````\r\n+{\"status\":\"ok\",\"seq\":0}\r\n+{\"status\":\"ok\",\"seq\":2}\r\n+{\"status\":\"ok\",\"seq\":1}\r\n+{\"status\":\"ok\",\"seq\":3}\r\n+````\r\n+\r\n+A successful ack will contain a field `status` with value `ok`.\r\n+\r\n+All ack responses also contain a field `seq` with a 64 bit signed integer value. This number\r\n+corresponds to the sequence of the insert on the request. The first send has sequence `0`, the second\r\n+`1`, the third `2`, etc. It allows the client to correlate the ack to the corresponding send.\r\n+\r\n+In case of error, an error response (see below) will be sent. For an error response for a send, the\r\n+`seq` field will also be included. \r\n+\r\n+Please note that acks can be returned in a different sequence to which the inserts were submitted. \r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 147}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODMyOTUy", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436832952", "createdAt": "2020-06-24T16:54:04Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODIxNTcy", "url": "https://github.com/confluentinc/ksql/pull/5639#pullrequestreview-436821572", "createdAt": "2020-06-24T16:39:31Z", "commit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "state": "APPROVED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozOTozMVrOGoaT9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo1ODo1MFrOGobB1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNzMxNw==", "bodyText": "Clarify that this is empty in the case of pull queries (and non-empty in the case of push queries).", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445027317", "createdAt": "2020-06-24T16:39:31Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyOTIwMg==", "bodyText": "Can we also add a note about the error response format? Specifically, the rows are JSON arrays unless an error is encountered while streaming, in which case a JSON object of a particular format is returned. I know last time we said this doesn't appear to actually happen even though the infrastructure is set up for it, but it'd still be useful to call out since clients should handle this case.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445029202", "createdAt": "2020-06-24T16:42:32Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyOTYxMg==", "bodyText": "As above: clarify that this is empty in the case of pull queries (and non-empty in the case of push queries).", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445029612", "createdAt": "2020-06-24T16:43:16Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMDA3OA==", "bodyText": "Are there supposed to be commas after each of these lines? This doesn't look like valid JSON as written.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445030078", "createdAt": "2020-06-24T16:44:03Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMDczMA==", "bodyText": "The endpoint is /inserts-stream, not /insert-stream.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445030730", "createdAt": "2020-06-24T16:45:04Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMTYyNA==", "bodyText": "Clarify that this is case-insensitive (uppercased by default). Users can surround the name in either backticks or double quotes to make it case-sensitive.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445031624", "createdAt": "2020-06-24T16:46:27Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added for clarity, the real JSON must not contain newlines):\r\n+\r\n+````\r\n+{\r\n+\"target\": \"my-stream\" <----- The name of the KSQL stream to insert into\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMTk4MQ==", "bodyText": "Clarify that these field names are case-insensitive (uppercased by default). Users can surround the names in either backticks or double quotes to make them case-sensitive.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445031981", "createdAt": "2020-06-24T16:47:00Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added for clarity, the real JSON must not contain newlines):\r\n+\r\n+````\r\n+{\r\n+\"target\": \"my-stream\" <----- The name of the KSQL stream to insert into\r\n+}\r\n+\r\n+````\r\n+\r\n+Followed by zero or more JSON objects representing the values to insert:\r\n+\r\n+````\r\n+{\r\n+\"col1\" : \"val1\",\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMzk4MQ==", "bodyText": "Do we have a section on error responses? I agree it'd be useful to have.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445033981", "createdAt": "2020-06-24T16:50:09Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added for clarity, the real JSON must not contain newlines):\r\n+\r\n+````\r\n+{\r\n+\"target\": \"my-stream\" <----- The name of the KSQL stream to insert into\r\n+}\r\n+\r\n+````\r\n+\r\n+Followed by zero or more JSON objects representing the values to insert:\r\n+\r\n+````\r\n+{\r\n+\"col1\" : \"val1\",\r\n+\"col2\": 2.3,\r\n+\"col3\", true\r\n+}\r\n+````\r\n+Each JSON object will be separated by a new line.\r\n+\r\n+To terminate the insert stream the client should end the request.\r\n+\r\n+Acks will be written to the response when each row has been\r\n+successfully committed to the underlying topic. Rows are committed in the order they are provided.\r\n+Each ack in the response is a JSON object, separated by newlines:\r\n+\r\n+````\r\n+{\"status\":\"ok\",\"seq\":0}\r\n+{\"status\":\"ok\",\"seq\":2}\r\n+{\"status\":\"ok\",\"seq\":1}\r\n+{\"status\":\"ok\",\"seq\":3}\r\n+````\r\n+\r\n+A successful ack will contain a field `status` with value `ok`.\r\n+\r\n+All ack responses also contain a field `seq` with a 64 bit signed integer value. This number\r\n+corresponds to the sequence of the insert on the request. The first send has sequence `0`, the second\r\n+`1`, the third `2`, etc. It allows the client to correlate the ack to the corresponding send.\r\n+\r\n+In case of error, an error response (see below) will be sent. For an error response for a send, the\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzNDgxMA==", "bodyText": "Perhaps replace with \"Inserting rows into an existing stream\" to clarify the use case?\nRegardless of whether we change the subheading, we should clarify that this endpoint only allows insertion of rows into ksqlDB streams and not tables. (I see the comment in the example specifies \"KSQL stream\" but I think this is worth calling out explicitly in the text as well.)", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445034810", "createdAt": "2020-06-24T16:51:37Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzNTc0NQ==", "bodyText": "Also, ksqlDB, not KSQL.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445035745", "createdAt": "2020-06-24T16:53:13Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r\n+}\r\n+\r\n+````\r\n+ \r\n+### Streaming inserts\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/insert-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added for clarity, the real JSON must not contain newlines):\r\n+\r\n+````\r\n+{\r\n+\"target\": \"my-stream\" <----- The name of the KSQL stream to insert into\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMTYyNA=="}, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzNzA3MA==", "bodyText": "Remove this comma so this is valid JSON.", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445037070", "createdAt": "2020-06-24T16:55:30Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/ksqldb-rest-api/streaming-endpoint.md", "diffHunk": "@@ -0,0 +1,147 @@\n+---\r\n+layout: page\r\n+title: HTTP Streaming API\r\n+tagline: streaming endpoints\r\n+description: The HTTP Streaming API lets you execute pull or push queries and stream inserts to the\r\n+server\r\n+keywords: ksqlDB, query, insert, select\r\n+---\r\n+\r\n+Please note: These endpoints are used by the ksqlDB Java client. If you are using Java you might want\r\n+to consider using the Java client rather than using this API directly.\r\n+\r\n+These endpoints are only available when using HTTP 2.\r\n+\r\n+### Executing pull or push queries\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/query-stream\".\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the arguments for the\r\n+operation (newlines have been added here for the sake of clarity but the real JSON must not contain\r\n+ unescaped newlines)\r\n+\r\n+````\r\n+{\r\n+\"sql\": \"select * from foo\", <----- the SQL of the query to execute\r\n+\"properties\": {             <----- Optional properties for the query\r\n+    \"prop1\": \"val1\",\r\n+    \"prop2\": \"val2\"\r\n+   }\r\n+}\r\n+\r\n+````\r\n+\r\n+The endpoint produces responses with two possible content types `application/json` and\r\n+`application/vnd.ksqlapi.delimited.v1`. To choose one or the other you should set the `Accept`\r\n+header in the request. The default is `application/vnd.ksqlapi.delimited.v1`.\r\n+\r\n+In the case of a successful query, if the content type is `application/vnd.ksqlapi.delimited.v1`\r\n+then the results are returned as a header JSON object followed by zero or more JSON arrays\r\n+delimited by newlines. Newline delimited formats are easy to parse by clients, and don't require\r\n+a streaming JSON parser on the client in the case that intermediate results need to be output.\r\n+\r\n+````\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+}\r\n+````\r\n+\r\n+Followed by zero or more JSON arrays:\r\n+\r\n+````\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+````\r\n+\r\n+If you prefer to receive the entire response as valid JSON then you can request\r\n+content type `application/json`. In which case you will receive the results, as a single JSON\r\n+array, for example: (newlines have been added for clarity, the response body\r\n+won't contain newlines).\r\n+\r\n+````\r\n+[\r\n+{\r\n+\"queryId\", \"xyz123\",                          <---- unique ID of the query, used when terminating the query\r\n+\"columnNames\":[\"col\", \"col2\", \"col3\"],        <---- the names of the columns\r\n+\"columnTypes\":[\"BIGINT\", \"STRING\", \"BOOLEAN\"] <---- The types of the columns\r\n+},\r\n+[123, \"blah\", true]\r\n+[432, \"foo\", true]\r\n+[765, \"whatever\", false]\r\n+]\r\n+````\r\n+\r\n+### Terminating queries\r\n+\r\n+Push queries can be explicitly terminated by the client by making a request to this endpoint\r\n+\r\n+The request method will be a POST.\r\n+\r\n+Requests will be made to the endpoint \"/close-query\"\r\n+\r\n+The body of the request is a JSON object UTF-8 encoded as text, containing the id of the \r\n+query to close. (newlines have been added here for the sake of clarity but the real JSON must not\r\n+contain newlines)\r\n+\r\n+````\r\n+{\r\n+\"queryId\": \"xyz123\", <----- the ID of the query to terminate\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzODI2MQ==", "bodyText": "This should say /query endpoint rather than /query-stream endpoint, right?\nAlso, are we officially deprecating this endpoint? Are there any situations in which clients can't use HTTP/2?", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445038261", "createdAt": "2020-06-24T16:57:29Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/api.md", "diffHunk": "@@ -1,22 +1,24 @@\n ---\n layout: page\n-title: ksqlDB REST API Reference\n-tagline: Run queries over REST\n+title: ksqlDB HTTP API Reference\n+tagline: Run queries over HTTP\n description: Learn how to communicate with ksqlDB by using HTTP\n ---\n \n - [Get the Status of a ksqlDB Server (/info endpoint)](ksqldb-rest-api/info-endpoint.md)\n - [Run a ksqlDB Statement (/ksql endpoint)](ksqldb-rest-api/ksql-endpoint.md)\n-- [Run A Query And Stream Back The Output (/query endpoint)](ksqldb-rest-api/query-endpoint.md)\n+- [Execute a push or pull query and stream the results back (/query-stream endpoint)](ksqldb-rest-api/streaming-endpoint.md)\n+- [Stream inserts to the server (/inserts-stream endpoint)](ksqldb-rest-api/streaming-endpoint.md)\n+- [Deprecated: Run A Pull or Push Query And Stream Back The Chunked Output (/query-stream endpoint)](ksqldb-rest-api/query-endpoint.md)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzOTA2Mw==", "bodyText": "nit: can we link to the subheadings on this page for each of these two, so users don't have to additionally figure out where to go on the page? Or we can have intro text at the top of the streaming-endpoint.md file with links to each of the subheadings, similar to the intro on this page. Or both :)", "url": "https://github.com/confluentinc/ksql/pull/5639#discussion_r445039063", "createdAt": "2020-06-24T16:58:50Z", "author": {"login": "vcrfxia"}, "path": "docs/developer-guide/api.md", "diffHunk": "@@ -1,22 +1,24 @@\n ---\n layout: page\n-title: ksqlDB REST API Reference\n-tagline: Run queries over REST\n+title: ksqlDB HTTP API Reference\n+tagline: Run queries over HTTP\n description: Learn how to communicate with ksqlDB by using HTTP\n ---\n \n - [Get the Status of a ksqlDB Server (/info endpoint)](ksqldb-rest-api/info-endpoint.md)\n - [Run a ksqlDB Statement (/ksql endpoint)](ksqldb-rest-api/ksql-endpoint.md)\n-- [Run A Query And Stream Back The Output (/query endpoint)](ksqldb-rest-api/query-endpoint.md)\n+- [Execute a push or pull query and stream the results back (/query-stream endpoint)](ksqldb-rest-api/streaming-endpoint.md)\n+- [Stream inserts to the server (/inserts-stream endpoint)](ksqldb-rest-api/streaming-endpoint.md)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab56ae3e3a1c0e4866c61ad41cf8e5f72c607a02"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffa24f5243a6415eb18ac8bf793b5a4e78f1622d", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/ffa24f5243a6415eb18ac8bf793b5a4e78f1622d", "committedDate": "2020-06-25T11:19:15Z", "message": "Review updates"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 225, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}