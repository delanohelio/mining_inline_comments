{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNTAyMDg2", "number": 6795, "title": "chore: clarify single key unwrapping during schema inference (MINOR)", "bodyText": "Description\nDocs changes and a minor refactor to clarify that key schema inference always results in an unwrapped key today. Also adds a QTT for multi-column key schema inference to confirm.\nTesting done\nNew QTT passes.\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-12-16T23:34:09Z", "url": "https://github.com/confluentinc/ksql/pull/6795", "merged": true, "mergeCommit": {"oid": "112e38450ab349b37a929b7a3ed1da5dc618cf74"}, "closed": true, "closedAt": "2020-12-17T23:20:19Z", "author": {"login": "vcrfxia"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdm3m4IAH2gAyNTQxNTAyMDg2OjRmNDU1MTE3NzJjMDEyOWJhZWU5ZTJkYjU0NzYzM2I1OGE5ZTBiNTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnLP3ZAFqTU1NTAzNzE1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4f45511772c0129baee9e2db547633b58a9e0b51", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/4f45511772c0129baee9e2db547633b58a9e0b51", "committedDate": "2020-12-16T23:33:36Z", "message": "chore: clarify single key unwrapping during schema inference (MINOR)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MTc2OTI2", "url": "https://github.com/confluentinc/ksql/pull/6795#pullrequestreview-554176926", "createdAt": "2020-12-16T23:49:45Z", "commit": {"oid": "4f45511772c0129baee9e2db547633b58a9e0b51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMzo0OTo0NlrOIHeOAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMzo0OTo0NlrOIHeOAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwNjA0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                will always be unwrapped. If your key is contained in an outer record or object, the\n          \n          \n            \n                is always unwrapped. If your key is contained in an outer record or object, the", "url": "https://github.com/confluentinc/ksql/pull/6795#discussion_r544706048", "createdAt": "2020-12-16T23:49:46Z", "author": {"login": "JimGalasyn"}, "path": "docs/concepts/schemas.md", "diffHunk": "@@ -104,13 +104,21 @@ don't supply one the stream is created without a key column.\n \r\n The following example statements show how to create streams and tables that have \r\n Avro-formatted data. If you want to use Protobuf- or JSON-formatted data,\r\n-substitute `PROTOBUF`, `JSON` or `JSON_SR` for `AVRO` in each statement.\r\n+substitute `PROTOBUF` or `JSON_SR` for `AVRO` in each statement.\r\n \r\n !!! note\r\n     ksqlDB handles the `JSON` and `JSON_SR` formats differently. `JSON_SR` reads and \r\n     registers new schemas with {{ site.sr }} as necessary, while `JSON` requires you\r\n     to specify the schema. Data formatted with `JSON_SR` is not binary compatible with\r\n     the `JSON` format.\r\n+    \r\n+!!! note\r\n+    When performing schema inference to infer value schemas, ksqlDB takes user-specified\r\n+    [single field (un)wrapping](../developer-guide/serialization.md#single-field-unwrapping) \r\n+    into account. When performing schema inference on key schemas, the resulting key schema\r\n+    will always be unwrapped. If your key is contained in an outer record or object, the\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f45511772c0129baee9e2db547633b58a9e0b51"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MTc3MDEy", "url": "https://github.com/confluentinc/ksql/pull/6795#pullrequestreview-554177012", "createdAt": "2020-12-16T23:50:00Z", "commit": {"oid": "4f45511772c0129baee9e2db547633b58a9e0b51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMzo1MDowMFrOIHeORA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMzo1MDowMFrOIHeORA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwNjExNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                inferred key will be represented as a `STRUCT`. You can access individual fields within\n          \n          \n            \n                inferred key is represented as a `STRUCT`. You can access individual fields within", "url": "https://github.com/confluentinc/ksql/pull/6795#discussion_r544706116", "createdAt": "2020-12-16T23:50:00Z", "author": {"login": "JimGalasyn"}, "path": "docs/concepts/schemas.md", "diffHunk": "@@ -104,13 +104,21 @@ don't supply one the stream is created without a key column.\n \r\n The following example statements show how to create streams and tables that have \r\n Avro-formatted data. If you want to use Protobuf- or JSON-formatted data,\r\n-substitute `PROTOBUF`, `JSON` or `JSON_SR` for `AVRO` in each statement.\r\n+substitute `PROTOBUF` or `JSON_SR` for `AVRO` in each statement.\r\n \r\n !!! note\r\n     ksqlDB handles the `JSON` and `JSON_SR` formats differently. `JSON_SR` reads and \r\n     registers new schemas with {{ site.sr }} as necessary, while `JSON` requires you\r\n     to specify the schema. Data formatted with `JSON_SR` is not binary compatible with\r\n     the `JSON` format.\r\n+    \r\n+!!! note\r\n+    When performing schema inference to infer value schemas, ksqlDB takes user-specified\r\n+    [single field (un)wrapping](../developer-guide/serialization.md#single-field-unwrapping) \r\n+    into account. When performing schema inference on key schemas, the resulting key schema\r\n+    will always be unwrapped. If your key is contained in an outer record or object, the\r\n+    inferred key will be represented as a `STRUCT`. You can access individual fields within\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f45511772c0129baee9e2db547633b58a9e0b51"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MTc3MTA2", "url": "https://github.com/confluentinc/ksql/pull/6795#pullrequestreview-554177106", "createdAt": "2020-12-16T23:50:13Z", "commit": {"oid": "4f45511772c0129baee9e2db547633b58a9e0b51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMzo1MDoxM1rOIHeOnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMzo1MDoxM1rOIHeOnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDcwNjIwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                the `STRUCT` via [STRUCT dereference](../developer-guide/ksqldb-reference/operators.md#struct-dereference).\n          \n          \n            \n                the `STRUCT` by using [STRUCT dereference](../developer-guide/ksqldb-reference/operators.md#struct-dereference).", "url": "https://github.com/confluentinc/ksql/pull/6795#discussion_r544706207", "createdAt": "2020-12-16T23:50:13Z", "author": {"login": "JimGalasyn"}, "path": "docs/concepts/schemas.md", "diffHunk": "@@ -104,13 +104,21 @@ don't supply one the stream is created without a key column.\n \r\n The following example statements show how to create streams and tables that have \r\n Avro-formatted data. If you want to use Protobuf- or JSON-formatted data,\r\n-substitute `PROTOBUF`, `JSON` or `JSON_SR` for `AVRO` in each statement.\r\n+substitute `PROTOBUF` or `JSON_SR` for `AVRO` in each statement.\r\n \r\n !!! note\r\n     ksqlDB handles the `JSON` and `JSON_SR` formats differently. `JSON_SR` reads and \r\n     registers new schemas with {{ site.sr }} as necessary, while `JSON` requires you\r\n     to specify the schema. Data formatted with `JSON_SR` is not binary compatible with\r\n     the `JSON` format.\r\n+    \r\n+!!! note\r\n+    When performing schema inference to infer value schemas, ksqlDB takes user-specified\r\n+    [single field (un)wrapping](../developer-guide/serialization.md#single-field-unwrapping) \r\n+    into account. When performing schema inference on key schemas, the resulting key schema\r\n+    will always be unwrapped. If your key is contained in an outer record or object, the\r\n+    inferred key will be represented as a `STRUCT`. You can access individual fields within\r\n+    the `STRUCT` via [STRUCT dereference](../developer-guide/ksqldb-reference/operators.md#struct-dereference).\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f45511772c0129baee9e2db547633b58a9e0b51"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MTc3MjI0", "url": "https://github.com/confluentinc/ksql/pull/6795#pullrequestreview-554177224", "createdAt": "2020-12-16T23:50:33Z", "commit": {"oid": "4f45511772c0129baee9e2db547633b58a9e0b51"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21e5607730c53a25821918577dbca98b5305fb59", "author": {"user": {"login": "vcrfxia", "name": "Victoria Xia"}}, "url": "https://github.com/confluentinc/ksql/commit/21e5607730c53a25821918577dbca98b5305fb59", "committedDate": "2020-12-17T00:15:20Z", "message": "chore: feedback and touchups"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1MDM3MTUw", "url": "https://github.com/confluentinc/ksql/pull/6795#pullrequestreview-555037150", "createdAt": "2020-12-17T22:26:34Z", "commit": {"oid": "21e5607730c53a25821918577dbca98b5305fb59"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4529, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}