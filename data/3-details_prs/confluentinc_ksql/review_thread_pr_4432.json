{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNTkyMjIy", "number": 4432, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzoxMzowMVrODdDxFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzoxMzowMVrODdDxFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzk3MDE1OnYy", "diffSide": "RIGHT", "path": "ksql-functional-tests/src/test/resources/query-validation-tests/delimited.json", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzoxMzowMVrOFlcXAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNzo1NTozNFrOFldsfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwNjI3NA==", "bodyText": "Switching this means poor UX: if a user submits a request with multiple statements in it, the error doesn't identify which statement had the error.   This can make it hard(er) for the user to track down the cause of the error.\nBetter to fix the code to ensure the statement exception is thrown.", "url": "https://github.com/confluentinc/ksql/pull/4432#discussion_r374806274", "createdAt": "2020-02-04T17:13:01Z", "author": {"login": "big-andy-coates"}, "path": "ksql-functional-tests/src/test/resources/query-validation-tests/delimited.json", "diffHunk": "@@ -178,7 +178,7 @@\n         }\n       ],\n       \"expectedException\": {\n-        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n+        \"type\": \"io.confluent.ksql.util.KsqlException\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d589b34dbc03ccab3e1acf5f4ebc073afd70929d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgxNjQ4MA==", "bodyText": "I tried to do this but it wasn't super straightforward because we no longer have access to the statement itself where the exception is thrown. I was thinking of just wrapping all exceptions thrown from the Analyzer somewhere high up - I will just do that.", "url": "https://github.com/confluentinc/ksql/pull/4432#discussion_r374816480", "createdAt": "2020-02-04T17:31:46Z", "author": {"login": "agavra"}, "path": "ksql-functional-tests/src/test/resources/query-validation-tests/delimited.json", "diffHunk": "@@ -178,7 +178,7 @@\n         }\n       ],\n       \"expectedException\": {\n-        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n+        \"type\": \"io.confluent.ksql.util.KsqlException\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwNjI3NA=="}, "originalCommit": {"oid": "d589b34dbc03ccab3e1acf5f4ebc073afd70929d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgyODE1Nw==", "bodyText": "Since the build is green and I've got a follow-up refactor coming up I'll address these in that one.", "url": "https://github.com/confluentinc/ksql/pull/4432#discussion_r374828157", "createdAt": "2020-02-04T17:55:34Z", "author": {"login": "agavra"}, "path": "ksql-functional-tests/src/test/resources/query-validation-tests/delimited.json", "diffHunk": "@@ -178,7 +178,7 @@\n         }\n       ],\n       \"expectedException\": {\n-        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n+        \"type\": \"io.confluent.ksql.util.KsqlException\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgwNjI3NA=="}, "originalCommit": {"oid": "d589b34dbc03ccab3e1acf5f4ebc073afd70929d"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2074, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}