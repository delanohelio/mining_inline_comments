{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2Mzk5OTEw", "number": 5877, "title": "feat: New ksql.properties.overrides.denylist to deny clients configs overrides", "bodyText": "Description\nAdded a new configuration ksql.properties.overrides.denylist to specify which server properties cannot be overridden by the KSQL clients/users.\nThere is currently an internal hard-coded list of properties that cannot be overriden. However, there are KSQL admins that also want other properties to be in the list. To make this dynamic, this new denylist property allow those admins to specify which properties should not be overridden, without making changes in the code.\nThe only disadvantage on this dynamic property over the hard-coded is the validation happens only until executing a DDL or query statements.\nTesting done\n\nAdded unit tests\nVerify the CLI manually\n\nksql> set 'ksql.streams.num.stream.threads'='4';\nSuccessfully changed local property 'ksql.streams.num.stream.threads' from '4' to '4'.\n\nksql> show streams;\nCannot override property 'ksql.streams.num.stream.threads'\n\nksql> unset 'ksql.streams.num.stream.threads';\nSuccessfully unset local property 'ksql.streams.num.stream.threads' (value was '4').\n\nksql> show streams;\n\n Stream Name         | Kafka Topic                 | Format \n------------------------------------------------------------\n KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON   \n------------------------------------------------------------\n\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-07-24T17:19:16Z", "url": "https://github.com/confluentinc/ksql/pull/5877", "merged": true, "mergeCommit": {"oid": "7d1ad25f751dd670ef027a48529613424e3aed3e"}, "closed": true, "closedAt": "2020-08-06T17:40:09Z", "author": {"login": "spena"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5ZSbLgFqTQ1NjgxNTc3Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8PdufgFqTQ2MjQ5NTU2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2ODE1Nzcy", "url": "https://github.com/confluentinc/ksql/pull/5877#pullrequestreview-456815772", "createdAt": "2020-07-28T16:39:43Z", "commit": {"oid": "2a6e624bf05cfbb2837b32bba61f3af3a3b1cfc3"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNjozOTo0M1rOG4VM0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNjo0NzoyOFrOG4Vftw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyMDc4Nw==", "bodyText": "I feel like this user experience is a little weird. The error message should be more descriptive, like: \"A property override was set locally for a property that the server prohibits overrides for: {}\"", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r461720787", "createdAt": "2020-07-28T16:39:43Z", "author": {"login": "agavra"}, "path": "ksqldb-common/src/test/java/io/confluent/ksql/properties/DenyListPropertyValidatorTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.properties;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.util.KsqlException;\n+import org.junit.Before;\n+import org.junit.Test;\n+import java.util.Arrays;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.junit.Assert.assertThrows;\n+\n+public class DenyListPropertyValidatorTest {\n+  private DenyListPropertyValidator validator;\n+\n+  @Before\n+  public void setUp() {\n+    validator = new DenyListPropertyValidator(Arrays.asList(\n+        \"immutable-property\"\n+    ));\n+  }\n+\n+  @Test\n+  public void shouldThrowOnDenyListedProperty() {\n+    // When:\n+    final KsqlException e = assertThrows(\n+        KsqlException.class,\n+        () -> validator.validateAll(ImmutableMap.of(\n+            \"immutable-property\", \"v1\",\n+            \"anything\", \"v2\"\n+        ))\n+    );\n+\n+    // Then:\n+    assertThat(e.getMessage(), containsString(\n+        \"Cannot override property 'immutable-property'\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a6e624bf05cfbb2837b32bba61f3af3a3b1cfc3"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyNTYyMw==", "bodyText": "it seems weird to need to do this validation at each endpoint, what if we add another one in the future? is there a place in the engine we can do this validation in one place that would work for all endpoints?", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r461725623", "createdAt": "2020-07-28T16:47:28Z", "author": {"login": "agavra"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java", "diffHunk": "@@ -214,15 +219,21 @@ private EndpointResponse handleStatement(\n               statement.getStatement())\n       );\n \n+      final Map<String, Object> requestProperties = request.getRequestProperties();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a6e624bf05cfbb2837b32bba61f3af3a3b1cfc3"}, "originalPosition": 30}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a6e624bf05cfbb2837b32bba61f3af3a3b1cfc3", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/2a6e624bf05cfbb2837b32bba61f3af3a3b1cfc3", "committedDate": "2020-07-24T16:48:00Z", "message": "feat: Add ksql.client.properties.denylist to deny clients configs overrides"}, "afterCommit": {"oid": "d4e555d935837d87f3918cf8cf0215efec1ea0ee", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/d4e555d935837d87f3918cf8cf0215efec1ea0ee", "committedDate": "2020-07-31T19:04:38Z", "message": "fix: Address 1st round of reviews\n\n- change error message for a more descriptive error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMjI4MjMw", "url": "https://github.com/confluentinc/ksql/pull/5877#pullrequestreview-460228230", "createdAt": "2020-08-03T17:54:09Z", "commit": {"oid": "d4e555d935837d87f3918cf8cf0215efec1ea0ee"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzo1NDoxMFrOG7DNTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODoxNzoyNlrOG7D7HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MTcyNQ==", "bodyText": "Could throw an exception with ALL the immutable properties, for a better UX.", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464571725", "createdAt": "2020-08-03T17:54:10Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/properties/DenyListPropertyValidator.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.properties;\n+\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.util.KsqlException;\n+\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Class that validates if a property, or list of properties, is part of a list of denied\n+ * properties.\n+ */\n+public class DenyListPropertyValidator {\n+  private final Set<String> immutableProps;\n+\n+  public DenyListPropertyValidator(final Collection<String> immutableProps) {\n+    this.immutableProps = ImmutableSet.copyOf(\n+        Objects.requireNonNull(immutableProps, \"immutableProps\"));\n+  }\n+\n+  /**\n+   * Validates if a list of properties are part of the list of denied properties.\n+   * @throws if a property is part of the denied list.\n+   */\n+  public void validateAll(final Map<String, Object> properties) {\n+    properties.forEach((name ,v) -> {\n+      if (immutableProps.contains(name)) {\n+        throw new KsqlException(String.format(\"A property override was set locally for a \"\n+            + \"property that the server prohibits overrides for: '%s'\", name));\n+      }\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e555d935837d87f3918cf8cf0215efec1ea0ee"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MjE1Ng==", "bodyText": "nit: this can be inlined. It isn't referenced from else where.", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464572156", "createdAt": "2020-08-03T17:54:55Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -316,6 +316,12 @@\n       .put(KSQL_STREAMS_PREFIX + StreamsConfig.MAX_TASK_IDLE_MS_CONFIG, 500L)\n       .build();\n \n+  public static final String KSQL_PROPERTIES_OVERRIDES_DENYLIST =\n+      \"ksql.properties.overrides.denylist\";\n+  public static final String KSQL_PROPERTIES_OVERRIDES_DENYLIST_DEFAULT = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e555d935837d87f3918cf8cf0215efec1ea0ee"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MjMzNA==", "bodyText": "nit: this can be private.  It isn't referenced from elsewhere.", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464572334", "createdAt": "2020-08-03T17:55:16Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -316,6 +316,12 @@\n       .put(KSQL_STREAMS_PREFIX + StreamsConfig.MAX_TASK_IDLE_MS_CONFIG, 500L)\n       .build();\n \n+  public static final String KSQL_PROPERTIES_OVERRIDES_DENYLIST =\n+      \"ksql.properties.overrides.denylist\";\n+  public static final String KSQL_PROPERTIES_OVERRIDES_DENYLIST_DEFAULT = \"\";\n+  public static final String KSQL_PROPERTIES_OVERRIDES_DENYLIST_DOC = \"Comma-separated list of \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e555d935837d87f3918cf8cf0215efec1ea0ee"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3Mjg0Mw==", "bodyText": "ConfigurableProp?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldNotThrowOnConfigurableProp() {\n          \n          \n            \n              public void shouldNotThrowOnAllowedProp() {", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464572843", "createdAt": "2020-08-03T17:56:22Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-common/src/test/java/io/confluent/ksql/properties/DenyListPropertyValidatorTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.properties;\n+\n+import com.google.common.collect.ImmutableMap;\n+import io.confluent.ksql.util.KsqlException;\n+import org.junit.Before;\n+import org.junit.Test;\n+import java.util.Arrays;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsString;\n+import static org.junit.Assert.assertThrows;\n+\n+public class DenyListPropertyValidatorTest {\n+  private DenyListPropertyValidator validator;\n+\n+  @Before\n+  public void setUp() {\n+    validator = new DenyListPropertyValidator(Arrays.asList(\n+        \"immutable-property\"\n+    ));\n+  }\n+\n+  @Test\n+  public void shouldThrowOnDenyListedProperty() {\n+    // When:\n+    final KsqlException e = assertThrows(\n+        KsqlException.class,\n+        () -> validator.validateAll(ImmutableMap.of(\n+            \"immutable-property\", \"v1\",\n+            \"anything\", \"v2\"\n+        ))\n+    );\n+\n+    // Then:\n+    assertThat(e.getMessage(), containsString(\n+        \"A property override was set locally for a property that the server prohibits \"\n+            + \"overrides for: 'immutable-property'\"\n+    ));\n+\n+  }\n+\n+  @Test\n+  public void shouldNotThrowOnConfigurableProp() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e555d935837d87f3918cf8cf0215efec1ea0ee"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MzMxNw==", "bodyText": "Probably better injecting this, than creating it.", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464573317", "createdAt": "2020-08-03T17:57:17Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java", "diffHunk": "@@ -187,6 +190,9 @@ public void configure(final KsqlConfig config) {\n             distributedCmdResponseTimeout\n         )\n     );\n+\n+    this.denyListPropertyValidator = new DenyListPropertyValidator(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e555d935837d87f3918cf8cf0215efec1ea0ee"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MzM3MQ==", "bodyText": "Probably better injecting this, than creating it.", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464573371", "createdAt": "2020-08-03T17:57:22Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java", "diffHunk": "@@ -150,6 +152,9 @@ public void configure(final KsqlConfig config) {\n         ksqlEngine.getServiceId(),\n         ksqlConfig.getStringAsMap(KsqlConfig.KSQL_CUSTOM_METRICS_TAGS)))\n         : empty();\n+\n+    this.denyListPropertyValidator = new DenyListPropertyValidator(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e555d935837d87f3918cf8cf0215efec1ea0ee"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3MzUyMg==", "bodyText": "Probably better injecting this, than creating it.", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464573522", "createdAt": "2020-08-03T17:57:39Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/WSQueryEndpoint.java", "diffHunk": "@@ -135,6 +137,9 @@ public WSQueryEndpoint(\n         Objects.requireNonNull(authorizationValidator, \"authorizationValidator\");\n     this.errorHandler = Objects.requireNonNull(errorHandler, \"errorHandler\");\n     this.pullQueryExecutor = Objects.requireNonNull(pullQueryExecutor, \"pullQueryExecutor\");\n+\n+    this.denyListPropertyValidator = new DenyListPropertyValidator(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e555d935837d87f3918cf8cf0215efec1ea0ee"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3NTg1MA==", "bodyText": "I don't think it makes sense to validate request properties.  I think this may just break stuff.  @vpapavas thoughts?", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464575850", "createdAt": "2020-08-03T18:02:15Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java", "diffHunk": "@@ -232,14 +241,20 @@ public EndpointResponse handleKsqlStatements(\n           request,\n           distributedCmdResponseTimeout);\n \n-      final KsqlRequestConfig requestConfig =\n-          new KsqlRequestConfig(request.getRequestProperties());\n+      final Map<String, Object> requestProperties = request.getRequestProperties();\n+      denyListPropertyValidator.validateAll(requestProperties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e555d935837d87f3918cf8cf0215efec1ea0ee"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU3OTQ3NQ==", "bodyText": "The engine is littered with code that passes the KsqlConfig ksqlConfig and Map<String, ?> overrides pair around.  I think the overrides is now mostly being correctly applied before the config is used... but... it's pretty ugly and unclear if the config you've got has overrides or not.\nI've thought for a while that it would be much cleaner to have:\n\nKsqlConfig which is always the server config.\nSessionConfig which wraps a KsqlConfig and a map of overrides.\n\nHeadless mode just has a single session, where as each user request can build its own SessionConfig and pass this around, rather than the two params.\nIdeally, the engine would take SessionConfig, not KsqlConfig.  SessionConfig can have a very similar / same interface as KsqlConfig.\nThe SessionConfig constructor, which takes the server's KsqlConfig and the map of overrides can then validate the overrides, i.e. only one place for override validation.\nThe SessionConfig would allow access to the serverConfig, then overrides and then 'mergedConfig`.  Different parts of the code need each of these,  if memory serves me right.\nOf course, this is a much bigger change. Simple, but wide ranging.  However, I wonder if this PR could start us down this road (Assuming we agree it's a good idea).  For example, this PR could add the SessionConfig class, and pass this around in the rest-server model, before converting to a KsqlConfig that's passed to the engine.  If you want to also switch the engine to use SessionConfig, then awesome - but maybe in follow up PR.", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464579475", "createdAt": "2020-08-03T18:09:28Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/StreamedQueryResource.java", "diffHunk": "@@ -214,15 +219,21 @@ private EndpointResponse handleStatement(\n               statement.getStatement())\n       );\n \n+      final Map<String, Object> requestProperties = request.getRequestProperties();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTcyNTYyMw=="}, "originalCommit": {"oid": "2a6e624bf05cfbb2837b32bba61f3af3a3b1cfc3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4MjYxNw==", "bodyText": "Would be much easier to test if you inject it. Then all you need to do is verify its being called with the right params, i.e. one simple test.", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464582617", "createdAt": "2020-08-03T18:15:44Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/resources/KsqlResourceTest.java", "diffHunk": "@@ -2180,6 +2180,82 @@ private void setUpKsqlResource() {\n     ksqlResource.configure(ksqlConfig);\n   }\n \n+  @Test\n+  public void shouldThrowOnDenyListedStreamProperty() {\n+    // Given:\n+    ksqlResource = new KsqlResource(\n+        ksqlEngine,\n+        commandStore,\n+        DISTRIBUTED_COMMAND_RESPONSE_TIMEOUT,\n+        activenessRegistrar,\n+        (ec, sc) -> InjectorChain.of(\n+            schemaInjectorFactory.apply(sc),\n+            topicInjectorFactory.apply(ec),\n+            new TopicDeleteInjector(ec, sc)),\n+        Optional.of(authorizationValidator),\n+        errorsHandler\n+    );\n+    final Map<String, Object> props = new HashMap<>(ksqlRestConfig.getKsqlConfigProperties());\n+    props.put(KsqlConfig.KSQL_PROPERTIES_OVERRIDES_DENYLIST,\n+        StreamsConfig.NUM_STREAM_THREADS_CONFIG);\n+    ksqlResource.configure(new KsqlConfig(props));\n+\n+    // When:\n+    final EndpointResponse response = ksqlResource.handleKsqlStatements(\n+        securityContext,\n+        new KsqlRequest(\n+            \"query\",\n+            ImmutableMap.of(StreamsConfig.NUM_STREAM_THREADS_CONFIG, \"1\"), // stream properties\n+            emptyMap(), // config properties\n+            null\n+        )\n+    );\n+\n+    // Then:\n+    assertThat(response.getStatus(), CoreMatchers.is(BAD_REQUEST.code()));\n+    assertThat(((KsqlErrorMessage) response.getEntity()).getMessage(),\n+        is(\"A property override was set locally for a property that the server prohibits \"\n+            + \"overrides for: '\" + StreamsConfig.NUM_STREAM_THREADS_CONFIG + \"'\"));\n+  }\n+\n+  @Test\n+  public void shouldThrowOnDenyListedConfigProperty() {\n+    // Given:\n+    ksqlResource = new KsqlResource(\n+        ksqlEngine,\n+        commandStore,\n+        DISTRIBUTED_COMMAND_RESPONSE_TIMEOUT,\n+        activenessRegistrar,\n+        (ec, sc) -> InjectorChain.of(\n+            schemaInjectorFactory.apply(sc),\n+            topicInjectorFactory.apply(ec),\n+            new TopicDeleteInjector(ec, sc)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e555d935837d87f3918cf8cf0215efec1ea0ee"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4Mjg4Ng==", "bodyText": "missing a unit test.", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464582886", "createdAt": "2020-08-03T18:16:17Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/WSQueryEndpoint.java", "diffHunk": "@@ -228,7 +233,7 @@ private KsqlRequest parseRequest(final MultiMap requestParams) {\n         throw new IllegalArgumentException(\"\\\"ksql\\\" field of \\\"request\\\" must be populated\");\n       }\n       // To validate props:\n-      request.getConfigOverrides();\n+      denyListPropertyValidator.validateAll(request.getConfigOverrides());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e555d935837d87f3918cf8cf0215efec1ea0ee"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4Mjk2Mg==", "bodyText": "missing a unit test.", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464582962", "createdAt": "2020-08-03T18:16:25Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/WSQueryEndpoint.java", "diffHunk": "@@ -245,6 +250,7 @@ private KsqlRequest parseRequest(final MultiMap requestParams) {\n \n   private void handleQuery(final RequestContext info, final Query query) {\n     final Map<String, Object> clientLocalProperties = info.request.getConfigOverrides();\n+    denyListPropertyValidator.validateAll(clientLocalProperties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e555d935837d87f3918cf8cf0215efec1ea0ee"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4MzQ1Mg==", "bodyText": "missing a unit test", "url": "https://github.com/confluentinc/ksql/pull/5877#discussion_r464583452", "createdAt": "2020-08-03T18:17:26Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java", "diffHunk": "@@ -199,11 +205,14 @@ public EndpointResponse terminateCluster(\n \n     ensureValidPatterns(request.getDeleteTopicList());\n     try {\n+      final Map<String, Object> streamsProperties = request.getStreamsProperties();\n+      denyListPropertyValidator.validateAll(streamsProperties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4e555d935837d87f3918cf8cf0215efec1ea0ee"}, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d4e555d935837d87f3918cf8cf0215efec1ea0ee", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/d4e555d935837d87f3918cf8cf0215efec1ea0ee", "committedDate": "2020-07-31T19:04:38Z", "message": "fix: Address 1st round of reviews\n\n- change error message for a more descriptive error"}, "afterCommit": {"oid": "27d264376c278633c010d02467c5e8284cb656f9", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/27d264376c278633c010d02467c5e8284cb656f9", "committedDate": "2020-08-04T21:13:09Z", "message": "fix: address Andy's comments\n\n- inject DenyListPropertyValidator to Resource classes\n- add unit tests for WSQueryEndpoint\n- validate only streamProperties (no requestProperties)\n- minor fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c432e4336e4586a1209f20d20c12412b121b40c7", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/c432e4336e4586a1209f20d20c12412b121b40c7", "committedDate": "2020-08-05T14:34:29Z", "message": "feat: Add ksql.client.properties.denylist to deny clients configs overrides"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71bbe6fa21e410441810315f5dbad8d5876103ef", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/71bbe6fa21e410441810315f5dbad8d5876103ef", "committedDate": "2020-08-05T14:34:29Z", "message": "fix: Address 1st round of reviews\n\n- change error message for a more descriptive error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "978c79ad2fa4b451c1022bb11fbf82d638e7635e", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/978c79ad2fa4b451c1022bb11fbf82d638e7635e", "committedDate": "2020-08-05T14:34:29Z", "message": "fix: address Andy's comments\n\n- inject DenyListPropertyValidator to Resource classes\n- add unit tests for WSQueryEndpoint\n- validate only streamProperties (no requestProperties)\n- minor fixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "27d264376c278633c010d02467c5e8284cb656f9", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/27d264376c278633c010d02467c5e8284cb656f9", "committedDate": "2020-08-04T21:13:09Z", "message": "fix: address Andy's comments\n\n- inject DenyListPropertyValidator to Resource classes\n- add unit tests for WSQueryEndpoint\n- validate only streamProperties (no requestProperties)\n- minor fixes"}, "afterCommit": {"oid": "978c79ad2fa4b451c1022bb11fbf82d638e7635e", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/978c79ad2fa4b451c1022bb11fbf82d638e7635e", "committedDate": "2020-08-05T14:34:29Z", "message": "fix: address Andy's comments\n\n- inject DenyListPropertyValidator to Resource classes\n- add unit tests for WSQueryEndpoint\n- validate only streamProperties (no requestProperties)\n- minor fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNDk1NTY4", "url": "https://github.com/confluentinc/ksql/pull/5877#pullrequestreview-462495568", "createdAt": "2020-08-06T13:02:35Z", "commit": {"oid": "978c79ad2fa4b451c1022bb11fbf82d638e7635e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4756, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}