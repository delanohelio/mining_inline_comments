{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NDg3MzUy", "number": 6685, "title": "feat: added NULLIF function (#6567)", "bodyText": "Description\n#6567\nThe NULLIF function returns NULL if and only if value1 and value2 are equal. Otherwise it returns value1.\nTesting done\n\nEngine. Unit test covering NULLIF function.\nFunctional-tests. Added test case in null.json and generated historial plan.\n\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-11-27T09:09:43Z", "url": "https://github.com/confluentinc/ksql/pull/6685", "merged": true, "mergeCommit": {"oid": "d7c9e4360b2ce2a52be51484790ee492b82b9605"}, "closed": true, "closedAt": "2021-05-06T16:47:26Z", "author": {"login": "fjbecerra"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdhnzwfAFqTU0MTA1ODA0OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABeUBPL9ABqjQ2OTMwMDk1NDI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMDU4MDQ5", "url": "https://github.com/confluentinc/ksql/pull/6685#pullrequestreview-541058049", "createdAt": "2020-11-30T16:08:42Z", "commit": {"oid": "8429d40f3f68e3b14d7692547cd7f4215541440a"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjowODo0MlrOH8CM0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjoxOToyNlrOH8CtEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxMjY1OQ==", "bodyText": "Could you add tests for the  NULLIF(COL0, 10) AS A, NULLIF(COL1, 'x') AS B cases?", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r532712659", "createdAt": "2020-11-30T16:08:42Z", "author": {"login": "spena"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/null.json", "diffHunk": "@@ -259,6 +259,29 @@\n         \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n         \"message\": \"Invalid comparison expression 'null' in join '(L.A = null)'. Each side of the join comparision must contain references from exactly one source.\"\n       }\n+    },\n+    {\n+      \"name\": \"null if\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (COL0 INT KEY, COL1 STRING, COL2 ARRAY<INT>) WITH (kafka_topic='test_topic', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT AS SELECT COL0, NULLIF(COL0, 10) AS A, NULLIF(COL1, 'x') AS B, NULLIF(COL2, ARRAY[1, 2, 3]) AS C FROM INPUT;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"key\": 1, \"value\": {\"COL1\": \"not null\", \"COL2\": [1, 2, 3]}},\n+        {\"topic\": \"test_topic\", \"key\": null, \"value\": {}},\n+        {\"topic\": \"test_topic\", \"key\": null, \"value\": null},\n+        {\"topic\": \"test_topic\", \"key\": 2, \"value\": {\"COL1\": \"not null\", \"COL2\": [4, 5, 6]}},\n+        {\"topic\": \"test_topic\", \"key\": 3, \"value\": {\"COL1\": \"not null\", \"COL2\": []}},\n+        {\"topic\": \"test_topic\", \"key\": 4, \"value\": {\"COL1\": null, \"COL2\": [7,8]}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 1, \"value\": {\"A\": 1, \"B\": \"not null\", \"C\": null}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"A\": null, \"B\": null, \"C\": null}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": null},\n+        {\"topic\": \"OUTPUT\", \"key\": 2, \"value\": {\"A\": 2, \"B\": \"not null\", \"C\": [4, 5, 6]}},\n+        {\"topic\": \"OUTPUT\", \"key\": 3, \"value\": {\"A\": 3, \"B\": \"not null\", \"C\": []}},\n+        {\"topic\": \"OUTPUT\", \"key\": 4, \"value\": {\"A\": 4, \"B\": null, \"C\": [7,8]}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8429d40f3f68e3b14d7692547cd7f4215541440a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcxNDc2MA==", "bodyText": "Do these parameters support any expression like IFNULL? If so, is it better to use NULLIF(expr1, expr2) instead?", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r532714760", "createdAt": "2020-11-30T16:11:19Z", "author": {"login": "spena"}, "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -1003,6 +1003,19 @@ If the provided `expression` is NULL, returns `altValue`, otherwise, returns `ex\n Where the parameter type is a complex type, for example `ARRAY` or `STRUCT`, the contents of the\n complex type are not inspected.\n \n+### `NULLIF`\n+\n+Since: -\n+\n+```sql\n+NULLIF(parameter1, parameter2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8429d40f3f68e3b14d7692547cd7f4215541440a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjcyMDkxNQ==", "bodyText": "Could you add a test when value2 is null and value1 is not null?\nCould you add a test to verify case-sensitive comparison? nullif(\"a\", \"A\")", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r532720915", "createdAt": "2020-11-30T16:19:26Z", "author": {"login": "spena"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/function/udf/nulls/NullIfTest.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package io.confluent.ksql.function.udf.nulls;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+public class NullIfTest {\n+\n+  private NullIf udf;\n+\n+  @Before\n+  public void setUp() {\n+    udf = new NullIf();\n+  }\n+\n+  @Test\n+  public void shouldReturnNullIfBothValuesAreNulls() {\n+    assertThat(udf.nullIf(null, null), is(nullValue()));\n+  }\n+\n+  @Test\n+  public void shouldReturnNullIfValue1IsNull() {\n+    assertThat(udf.nullIf(null, \"a\"), is(nullValue()));\n+  }\n+\n+  @Test\n+  public void shouldReturnNullIfBothValuesAreEqual() {\n+    assertThat(udf.nullIf(\"a\", \"a\"), is(nullValue()));\n+  }\n+\n+  @Test\n+  public void shouldReturnValue1IfBothValuesAreNonEqual() {\n+    assertThat(udf.nullIf(\"a\", \"b\"), is(\"a\"));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8429d40f3f68e3b14d7692547cd7f4215541440a"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMTM4MTM0", "url": "https://github.com/confluentinc/ksql/pull/6685#pullrequestreview-541138134", "createdAt": "2020-11-30T17:34:16Z", "commit": {"oid": "8429d40f3f68e3b14d7692547cd7f4215541440a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzozNDoxNlrOH8GBKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzozNDoxNlrOH8GBKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3NTIwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the provided `parameter1` is equal to `parameter2`, returns NULL, otherwise, returns `parameter1`.\n          \n          \n            \n            Returns NULL if `parameter1` is equal to `parameter2`; otherwise, returns `parameter1`.", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r532775209", "createdAt": "2020-11-30T17:34:16Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -1003,6 +1003,19 @@ If the provided `expression` is NULL, returns `altValue`, otherwise, returns `ex\n Where the parameter type is a complex type, for example `ARRAY` or `STRUCT`, the contents of the\n complex type are not inspected.\n \n+### `NULLIF`\n+\n+Since: -\n+\n+```sql\n+NULLIF(parameter1, parameter2)\n+```\n+\n+If the provided `parameter1` is equal to `parameter2`, returns NULL, otherwise, returns `parameter1`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8429d40f3f68e3b14d7692547cd7f4215541440a"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMTM4Njc2", "url": "https://github.com/confluentinc/ksql/pull/6685#pullrequestreview-541138676", "createdAt": "2020-11-30T17:34:53Z", "commit": {"oid": "8429d40f3f68e3b14d7692547cd7f4215541440a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzozNDo1M1rOH8GC7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzozNDo1M1rOH8GC7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc3NTY2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Where the parameter type is a complex type, for example `ARRAY` or `STRUCT`, the contents of the\n          \n          \n            \n            If the parameter type is a complex type, for example, `ARRAY` or `STRUCT`, the contents of the", "url": "https://github.com/confluentinc/ksql/pull/6685#discussion_r532775662", "createdAt": "2020-11-30T17:34:53Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -1003,6 +1003,19 @@ If the provided `expression` is NULL, returns `altValue`, otherwise, returns `ex\n Where the parameter type is a complex type, for example `ARRAY` or `STRUCT`, the contents of the\n complex type are not inspected.\n \n+### `NULLIF`\n+\n+Since: -\n+\n+```sql\n+NULLIF(parameter1, parameter2)\n+```\n+\n+If the provided `parameter1` is equal to `parameter2`, returns NULL, otherwise, returns `parameter1`.\n+\n+Where the parameter type is a complex type, for example `ARRAY` or `STRUCT`, the contents of the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8429d40f3f68e3b14d7692547cd7f4215541440a"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMTQwMzEw", "url": "https://github.com/confluentinc/ksql/pull/6685#pullrequestreview-541140310", "createdAt": "2020-11-30T17:36:50Z", "commit": {"oid": "8429d40f3f68e3b14d7692547cd7f4215541440a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8429d40f3f68e3b14d7692547cd7f4215541440a", "author": {"user": {"login": "fjbecerra", "name": "Francisco Jose Becerra"}}, "url": "https://github.com/confluentinc/ksql/commit/8429d40f3f68e3b14d7692547cd7f4215541440a", "committedDate": "2020-11-27T07:04:38Z", "message": "feat: added NULLIF function (#6567)"}, "afterCommit": {"oid": "97d48f5e8cf37f40c4d3f97c6b9e5bc0ed00ce21", "author": {"user": {"login": "fjbecerra", "name": "Francisco Jose Becerra"}}, "url": "https://github.com/confluentinc/ksql/commit/97d48f5e8cf37f40c4d3f97c6b9e5bc0ed00ce21", "committedDate": "2020-12-02T08:00:44Z", "message": "feat: added NULLIF function (#6567)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MjQxNDUx", "url": "https://github.com/confluentinc/ksql/pull/6685#pullrequestreview-547241451", "createdAt": "2020-12-08T13:39:33Z", "commit": {"oid": "97d48f5e8cf37f40c4d3f97c6b9e5bc0ed00ce21"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5e35c154336c5d66e90a8f0bf5ddd607c51a8ed", "author": {"user": {"login": "fjbecerra", "name": "Francisco Jose Becerra"}}, "url": "https://github.com/confluentinc/ksql/commit/d5e35c154336c5d66e90a8f0bf5ddd607c51a8ed", "committedDate": "2021-05-06T06:06:26Z", "message": "feat: added NULLIF function (#6567)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "97d48f5e8cf37f40c4d3f97c6b9e5bc0ed00ce21", "author": {"user": {"login": "fjbecerra", "name": "Francisco Jose Becerra"}}, "url": "https://github.com/confluentinc/ksql/commit/97d48f5e8cf37f40c4d3f97c6b9e5bc0ed00ce21", "committedDate": "2020-12-02T08:00:44Z", "message": "feat: added NULLIF function (#6567)"}, "afterCommit": {"oid": "d5e35c154336c5d66e90a8f0bf5ddd607c51a8ed", "author": {"user": {"login": "fjbecerra", "name": "Francisco Jose Becerra"}}, "url": "https://github.com/confluentinc/ksql/commit/d5e35c154336c5d66e90a8f0bf5ddd607c51a8ed", "committedDate": "2021-05-06T06:06:26Z", "message": "feat: added NULLIF function (#6567)"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4557, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}