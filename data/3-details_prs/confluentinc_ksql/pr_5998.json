{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2OTY2NzA5", "number": 5998, "title": "feat: Support subscript and nested functions in grouping queries ", "bodyText": "Description\nFixes #5906 and #5967\nTesting done\nAdded test cases in group-by.json\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-08-12T19:36:25Z", "url": "https://github.com/confluentinc/ksql/pull/5998", "merged": true, "mergeCommit": {"oid": "8d383db7d730bc3a63f462994913ead5146e7edd"}, "closed": true, "closedAt": "2020-08-21T16:56:39Z", "author": {"login": "vpapavas"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-VLSFgBqjM2NDk5NTAyNDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBCzxTgFqTQ3MjQwMjUxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1ebf482075b7f97b6e161245f8777eb4e020850a", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/1ebf482075b7f97b6e161245f8777eb4e020850a", "committedDate": "2020-08-12T19:33:48Z", "message": "remove intermediate topics from test file"}, "afterCommit": {"oid": "2f21890966358df12225c90e6c37fed7f32f8a48", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/2f21890966358df12225c90e6c37fed7f32f8a48", "committedDate": "2020-08-13T00:49:12Z", "message": "remove intermediate topics from test file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2ODk4OTQ5", "url": "https://github.com/confluentinc/ksql/pull/5998#pullrequestreview-466898949", "createdAt": "2020-08-13T15:56:50Z", "commit": {"oid": "2f21890966358df12225c90e6c37fed7f32f8a48"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo1Njo1MFrOHAR-aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNjoxNjoyMlrOHASt0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1NjU1NQ==", "bodyText": "nit: update the comment above (and on line 83) - might also want to mention that it is only used to validate (i.e. throw exception)", "url": "https://github.com/confluentinc/ksql/pull/5998#discussion_r470056555", "createdAt": "2020-08-13T15:56:50Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/AggregateAnalyzer.java", "diffHunk": "@@ -68,17 +69,19 @@ public AggregateAnalysisResult analyze(\n     private final MutableAggregateAnalysis aggregateAnalysis = new MutableAggregateAnalysis();\n     private final FunctionRegistry functionRegistry;\n     private final Set<Expression> groupBy;\n+    private boolean foundExpressionInGroupBy = false;\n+\n \n     // The list of columns from the source schema that are used in aggregate columns, but not as\n     // parameters to the aggregate functions and which are not part of the GROUP BY clause:\n-    private final List<ColumnReferenceExp> aggSelectsNotPartOfGroupBy = new ArrayList<>();\n+    private final List<Expression> aggSelectsNotPartOfGroupBy = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f21890966358df12225c90e6c37fed7f32f8a48"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1ODY1OA==", "bodyText": "is there a reason this code is still commented out?", "url": "https://github.com/confluentinc/ksql/pull/5998#discussion_r470058658", "createdAt": "2020-08-13T16:00:05Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/AggregateAnalyzer.java", "diffHunk": "@@ -204,9 +226,18 @@ private void throwOnWindowBoundColumnIfWindowedAggregate(\n \n     private void captureNonAggregateSelectNotPartOfGroupBy(\n         final Expression expression,\n-        final Set<ColumnReferenceExp> nonAggParams\n+        final Set<Expression> nonAggParams\n     ) {\n-      final boolean matchesGroupBy = groupBy.contains(expression);\n+\n+      boolean matchesGroupBy = false;\n+      // If the non-Agg expression is a function, then all its arguments must be part of the\n+      // grouping columns. Note, they may be nested inside other functions.\n+      /*if (expression instanceof FunctionCall) {\n+        matchesGroupBy = functionContainsOnlyGroupingColumns(expression, true);\n+      } else {\n+        matchesGroupBy = groupBy.contains(expression);\n+      }*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f21890966358df12225c90e6c37fed7f32f8a48"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1OTA0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void captureNoneAggregateHavingNotPartOfGroupBy(final Expression nonAggColumn) {\n          \n          \n            \n                private void captureNonAggregateHavingNotPartOfGroupBy(final Expression nonAggColumn) {", "url": "https://github.com/confluentinc/ksql/pull/5998#discussion_r470059044", "createdAt": "2020-08-13T16:00:44Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/AggregateAnalyzer.java", "diffHunk": "@@ -221,15 +252,15 @@ private void captureNonAggregateSelectNotPartOfGroupBy(\n     }\n \n     private void captureAggregateSelectNotPartOfGroupBy(\n-        final Set<ColumnReferenceExp> nonAggParams\n+        final Set<Expression> nonAggParams\n     ) {\n       nonAggParams.stream()\n           .filter(param -> !groupBy.contains(param))\n           .forEach(aggSelectsNotPartOfGroupBy::add);\n     }\n \n-    private void captureNoneAggregateHavingNotPartOfGroupBy(final ColumnReferenceExp nonAggColumn) {\n-      if (groupBy.contains(new UnqualifiedColumnReferenceExp(nonAggColumn.getColumnName()))) {\n+    private void captureNoneAggregateHavingNotPartOfGroupBy(final Expression nonAggColumn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f21890966358df12225c90e6c37fed7f32f8a48"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA2MTUyNw==", "bodyText": "I'm a little confused here, why do we unset the foundExpressioninGroupBy here? I feel like we should set it right after we set it and call super. For example we should unset it after calling super.visitSubscriptExpression(node, context);", "url": "https://github.com/confluentinc/ksql/pull/5998#discussion_r470061527", "createdAt": "2020-08-13T16:04:38Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/AggregateAnalyzer.java", "diffHunk": "@@ -344,8 +384,10 @@ public Void visitUnqualifiedColumnReference(\n         final UnqualifiedColumnReferenceExp node,\n         final Void context\n     ) {\n-      dereferenceCollector.accept(aggFunctionName, node);\n-\n+      if (!foundExpressionInGroupBy || visitedAggFunction) {\n+        dereferenceCollector.accept(aggFunctionName, node);\n+      }\n+      foundExpressionInGroupBy = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f21890966358df12225c90e6c37fed7f32f8a48"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA2NDYyNQ==", "bodyText": "are there any other expressions that we should be looking that can match exactly other than function calls and subscript expressions? i.e. what about arithmetic expressions (SELECT AS_VALUE(a + b) AS foo GROUP BY a + b)\nI think it makes sense to implement this in visitExpression instead of in each individual expression type. We would only \"override\" this behavior when we need to (e.g. inside visitFuncitonCall)", "url": "https://github.com/confluentinc/ksql/pull/5998#discussion_r470064625", "createdAt": "2020-08-13T16:09:39Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/AggregateAnalyzer.java", "diffHunk": "@@ -359,5 +401,14 @@ public Void visitQualifiedColumnReference(\n     ) {\n       throw new UnsupportedOperationException(\"Should of been converted to unqualified\");\n     }\n+\n+    @Override\n+    public Void visitSubscriptExpression(final SubscriptExpression node, final Void context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f21890966358df12225c90e6c37fed7f32f8a48"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA2NzYwMw==", "bodyText": "one more test (may or may not already be there) - we should group by a map and select a value within the map as a column:\nSELECT col1, col1['foo'] AS foo FROM .. GROUP BY col1;", "url": "https://github.com/confluentinc/ksql/pull/5998#discussion_r470067603", "createdAt": "2020-08-13T16:14:31Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/group-by.json", "diffHunk": "@@ -511,6 +605,17 @@\n         \"message\": \"Duplicate value columns found in schema: `COUNT` BIGINT\"\n       }\n     },\n+    {\n+      \"name\": \"map used in non-aggregate function in select when group by uses subscript\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f21890966358df12225c90e6c37fed7f32f8a48"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA2ODUxNw==", "bodyText": "why can't this be part of the Visitor directly? it seems weird for this to carry over between process steps (lines 95 -> 109)", "url": "https://github.com/confluentinc/ksql/pull/5998#discussion_r470068517", "createdAt": "2020-08-13T16:16:05Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/AggregateAnalyzer.java", "diffHunk": "@@ -68,17 +69,19 @@ public AggregateAnalysisResult analyze(\n     private final MutableAggregateAnalysis aggregateAnalysis = new MutableAggregateAnalysis();\n     private final FunctionRegistry functionRegistry;\n     private final Set<Expression> groupBy;\n+    private boolean foundExpressionInGroupBy = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f21890966358df12225c90e6c37fed7f32f8a48"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA2ODY5MA==", "bodyText": "can we add corresponding tests for HAVING?", "url": "https://github.com/confluentinc/ksql/pull/5998#discussion_r470068690", "createdAt": "2020-08-13T16:16:22Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/group-by.json", "diffHunk": "@@ -362,6 +362,100 @@\n         ]\n       }\n     },\n+    {\n+      \"name\": \"subscript in group-by and select\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f21890966358df12225c90e6c37fed7f32f8a48"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5MTU1NzIy", "url": "https://github.com/confluentinc/ksql/pull/5998#pullrequestreview-469155722", "createdAt": "2020-08-18T09:33:29Z", "commit": {"oid": "2f21890966358df12225c90e6c37fed7f32f8a48"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTozMzoyOVrOHCLdaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwOTozNjo0MVrOHCLkyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0Njk1NQ==", "bodyText": "+1", "url": "https://github.com/confluentinc/ksql/pull/5998#discussion_r472046955", "createdAt": "2020-08-18T09:33:29Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/AggregateAnalyzer.java", "diffHunk": "@@ -68,17 +69,19 @@ public AggregateAnalysisResult analyze(\n     private final MutableAggregateAnalysis aggregateAnalysis = new MutableAggregateAnalysis();\n     private final FunctionRegistry functionRegistry;\n     private final Set<Expression> groupBy;\n+    private boolean foundExpressionInGroupBy = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA2ODUxNw=="}, "originalCommit": {"oid": "2f21890966358df12225c90e6c37fed7f32f8a48"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0ODY1OQ==", "bodyText": "The comment on line 190 refers to code now on line 194.  Can you move this if statement above the comment please?", "url": "https://github.com/confluentinc/ksql/pull/5998#discussion_r472048659", "createdAt": "2020-08-18T09:36:24Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/AggregateAnalyzer.java", "diffHunk": "@@ -128,48 +137,61 @@ private void processSelect(final Expression expression) {\n     }\n \n     private void processGroupBy(final Expression expression) {\n-      final AggregateVisitor visitor = new AggregateVisitor(this, (aggFuncName, node) -> {\n-        if (aggFuncName.isPresent()) {\n-          throw new KsqlException(\"GROUP BY does not support aggregate functions: \"\n-              + aggFuncName.get().text() + \" is an aggregate function.\");\n-        }\n-        throwOnWindowBoundColumnIfWindowedAggregate(node);\n-      });\n+      final AggregateVisitor visitor = new AggregateVisitor(\n+          this,\n+          groupBy,\n+          foundExpressionInGroupBy,\n+          (aggFuncName, node) -> {\n+            if (aggFuncName.isPresent()) {\n+              throw new KsqlException(\"GROUP BY does not support aggregate functions: \"\n+                  + aggFuncName.get().text() + \" is an aggregate function.\");\n+            }\n+            throwOnWindowBoundColumnIfWindowedAggregate(node);\n+          });\n \n       visitor.process(expression, null);\n     }\n \n     private void processWhere(final Expression expression) {\n-      final AggregateVisitor visitor = new AggregateVisitor(this, (aggFuncName, node) ->\n-          throwOnWindowBoundColumnIfWindowedAggregate(node));\n+      final AggregateVisitor visitor = new AggregateVisitor(\n+          this,\n+          groupBy,\n+          foundExpressionInGroupBy,\n+          (aggFuncName, node) ->\n+            throwOnWindowBoundColumnIfWindowedAggregate(node));\n \n       visitor.process(expression, null);\n     }\n \n     private void processHaving(final Expression expression) {\n-      final AggregateVisitor visitor = new AggregateVisitor(this, (aggFuncName, node) -> {\n-        throwOnWindowBoundColumnIfWindowedAggregate(node);\n-\n-        if (!aggFuncName.isPresent()) {\n-          captureNoneAggregateHavingNotPartOfGroupBy(node);\n-        }\n-      });\n+      final AggregateVisitor visitor = new AggregateVisitor(\n+          this,\n+          groupBy,\n+          foundExpressionInGroupBy,\n+          (aggFuncName, node) -> {\n+            throwOnWindowBoundColumnIfWindowedAggregate(node);\n+\n+            if (!aggFuncName.isPresent()) {\n+              captureNoneAggregateHavingNotPartOfGroupBy(node);\n+            }\n+          });\n \n       visitor.process(expression, null);\n \n       aggregateAnalysis.setHavingExpression(expression);\n     }\n \n-    private void throwOnWindowBoundColumnIfWindowedAggregate(\n-        final ColumnReferenceExp node\n-    ) {\n+    private void throwOnWindowBoundColumnIfWindowedAggregate(final Expression node) {\n       // Window bounds are supported for operations on windowed sources\n       if (!analysis.getWindowExpression().isPresent()) {\n         return;\n       }\n \n       // For non-windowed sources, with a windowed GROUP BY, they are only supported in selects:\n-      if (SystemColumns.isWindowBound(node.getColumnName())) {\n+      if (!(node instanceof ColumnReferenceExp)) {\n+        return;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f21890966358df12225c90e6c37fed7f32f8a48"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjA0ODg0MA==", "bodyText": "+1", "url": "https://github.com/confluentinc/ksql/pull/5998#discussion_r472048840", "createdAt": "2020-08-18T09:36:41Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/AggregateAnalyzer.java", "diffHunk": "@@ -204,9 +226,18 @@ private void throwOnWindowBoundColumnIfWindowedAggregate(\n \n     private void captureNonAggregateSelectNotPartOfGroupBy(\n         final Expression expression,\n-        final Set<ColumnReferenceExp> nonAggParams\n+        final Set<Expression> nonAggParams\n     ) {\n-      final boolean matchesGroupBy = groupBy.contains(expression);\n+\n+      boolean matchesGroupBy = false;\n+      // If the non-Agg expression is a function, then all its arguments must be part of the\n+      // grouping columns. Note, they may be nested inside other functions.\n+      /*if (expression instanceof FunctionCall) {\n+        matchesGroupBy = functionContainsOnlyGroupingColumns(expression, true);\n+      } else {\n+        matchesGroupBy = groupBy.contains(expression);\n+      }*/", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1ODY1OA=="}, "originalCommit": {"oid": "2f21890966358df12225c90e6c37fed7f32f8a48"}, "originalPosition": 157}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f21890966358df12225c90e6c37fed7f32f8a48", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/2f21890966358df12225c90e6c37fed7f32f8a48", "committedDate": "2020-08-13T00:49:12Z", "message": "remove intermediate topics from test file"}, "afterCommit": {"oid": "3b13e92ce5bf09c84b11f20223cb4edb972e9919", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/3b13e92ce5bf09c84b11f20223cb4edb972e9919", "committedDate": "2020-08-19T17:31:13Z", "message": "fixed window bounds error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ae5730aaebb0bc0866409fb2221103a7d59ed98", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/0ae5730aaebb0bc0866409fb2221103a7d59ed98", "committedDate": "2020-08-19T19:34:29Z", "message": "fixed handling subscript and nested functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d8c340df9b8cd219224ea08ca006a5a3fe9513d", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/9d8c340df9b8cd219224ea08ca006a5a3fe9513d", "committedDate": "2020-08-19T19:34:29Z", "message": "remove intermediate topics from test file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d81c2553142f4ca3a877edf54909b903dd330587", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/d81c2553142f4ca3a877edf54909b903dd330587", "committedDate": "2020-08-19T19:34:29Z", "message": "addressed comments, handle struct and arithmetic, added plans"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1056b221b710bec7d8c01590caa249c7fa3e84e5", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/1056b221b710bec7d8c01590caa249c7fa3e84e5", "committedDate": "2020-08-19T19:34:30Z", "message": "fixed window bounds error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdd21f7139fc6c11f2d7d8ca11a4766ffe6c63b0", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/cdd21f7139fc6c11f2d7d8ca11a4766ffe6c63b0", "committedDate": "2020-08-19T19:53:37Z", "message": "adding historic plans"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b13e92ce5bf09c84b11f20223cb4edb972e9919", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/3b13e92ce5bf09c84b11f20223cb4edb972e9919", "committedDate": "2020-08-19T17:31:13Z", "message": "fixed window bounds error"}, "afterCommit": {"oid": "cdd21f7139fc6c11f2d7d8ca11a4766ffe6c63b0", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/cdd21f7139fc6c11f2d7d8ca11a4766ffe6c63b0", "committedDate": "2020-08-19T19:53:37Z", "message": "adding historic plans"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwOTg4ODUz", "url": "https://github.com/confluentinc/ksql/pull/5998#pullrequestreview-470988853", "createdAt": "2020-08-19T21:48:18Z", "commit": {"oid": "cdd21f7139fc6c11f2d7d8ca11a4766ffe6c63b0"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMTo0ODoxOFrOHDbXdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjowOTo0MlrOHDcbXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM1NjE0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean foundExpressionInGroupBy;\n          \n          \n            \n                private boolean currentlyInExpressionThatIsPartOfGroupBy;\n          \n      \n    \n    \n  \n\nVery lengthy name, but I think it'll make the code easier to read", "url": "https://github.com/confluentinc/ksql/pull/5998#discussion_r473356148", "createdAt": "2020-08-19T21:48:18Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/AggregateAnalyzer.java", "diffHunk": "@@ -290,21 +278,25 @@ private void enforceAggregateRules() {\n \n   private static final class AggregateVisitor extends TraversalExpressionVisitor<Void> {\n \n-    private final BiConsumer<Optional<FunctionName>, ColumnReferenceExp> dereferenceCollector;\n+    private final BiConsumer<Optional<FunctionName>, Expression> dereferenceCollector;\n     private final ColumnReferenceExp defaultArgument;\n     private final MutableAggregateAnalysis aggregateAnalysis;\n     private final FunctionRegistry functionRegistry;\n+    private final Set<Expression> groupBy;\n+    private boolean foundExpressionInGroupBy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd21f7139fc6c11f2d7d8ca11a4766ffe6c63b0"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM1NjQxOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean visitedAggFunction = false;\n          \n          \n            \n                private boolean currentlyInAggegateFunctionCall = false;", "url": "https://github.com/confluentinc/ksql/pull/5998#discussion_r473356418", "createdAt": "2020-08-19T21:48:38Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/AggregateAnalyzer.java", "diffHunk": "@@ -290,21 +278,25 @@ private void enforceAggregateRules() {\n \n   private static final class AggregateVisitor extends TraversalExpressionVisitor<Void> {\n \n-    private final BiConsumer<Optional<FunctionName>, ColumnReferenceExp> dereferenceCollector;\n+    private final BiConsumer<Optional<FunctionName>, Expression> dereferenceCollector;\n     private final ColumnReferenceExp defaultArgument;\n     private final MutableAggregateAnalysis aggregateAnalysis;\n     private final FunctionRegistry functionRegistry;\n+    private final Set<Expression> groupBy;\n+    private boolean foundExpressionInGroupBy;\n \n     private Optional<FunctionName> aggFunctionName = Optional.empty();\n     private boolean visitedAggFunction = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd21f7139fc6c11f2d7d8ca11a4766ffe6c63b0"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3MTQ4Mg==", "bodyText": "tl;dr this comment is a little hard to follow because I was understanding the problem as I wrote the comment. basically we need to make sure that only the first node that sets foundExpressionInGroupBy=true can set it back to false.\n\nso here's a freak scenario:\nSELECT as_value(a['idx'] + b['idx']) FROM s GROUP BY a['idx'], a['idx'] + b['idx']\nvisit a['idx'] + b['idx'] and set foundExpressionInGroupBy = true\nvisit (left)  a['idx'] and set foundExpressionInGroupBy = true\nvisit 'idx'\ngo back to a['idx'] and set foundExpressionInGroupBy = false\nvisit (right) b['idx'] and fail because b['idx'] is not in group by\nI think there are actually a few bugs here:\n\nis what I showed with the weird group by scenario\nthere is another bug where we shouldn't set foundExpressionInGroupBy to false unless the exact node that set it to true decides so\n\nthat (number 2 above) could be an even simpler bug:\n-- a is map<string, map<string, string>>\nSELECT as_value(a[b][c]) FROM s GROUP BY a[b][c];\nwe set foundExpressionInGroupBy to true when we visit a[b][c] but then set it to false when we visit a[b] causing us to fail when we visit [c]\nI think the solution here is to have a more complicated foundExpressionInGroupBy that once it is set, nobody else can set/unset it until we get back to whoever it was that first set it. You can use a tuple of (foundExpressionInGroupBy, theGroupByExpression) to achieve this\nplease add tests for this too!", "url": "https://github.com/confluentinc/ksql/pull/5998#discussion_r473371482", "createdAt": "2020-08-19T22:07:20Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/AggregateAnalyzer.java", "diffHunk": "@@ -359,5 +359,46 @@ public Void visitQualifiedColumnReference(\n     ) {\n       throw new UnsupportedOperationException(\"Should of been converted to unqualified\");\n     }\n+\n+    @Override\n+    public Void visitSubscriptExpression(final SubscriptExpression node, final Void context) {\n+      if (groupBy.contains(node)) {\n+        foundExpressionInGroupBy = true;\n+      }\n+      super.visitSubscriptExpression(node, context);\n+      foundExpressionInGroupBy = false;\n+      return null;\n+    }\n+\n+    @Override\n+    public Void visitArithmeticBinary(final ArithmeticBinaryExpression node, final Void context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdd21f7139fc6c11f2d7d8ca11a4766ffe6c63b0"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM3MzUzMg==", "bodyText": "look at my newest comment, I think we have that problem anyway. I still think we should be able to do this in the common process if you take the suggestion I have there.", "url": "https://github.com/confluentinc/ksql/pull/5998#discussion_r473373532", "createdAt": "2020-08-19T22:09:42Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/AggregateAnalyzer.java", "diffHunk": "@@ -359,5 +401,14 @@ public Void visitQualifiedColumnReference(\n     ) {\n       throw new UnsupportedOperationException(\"Should of been converted to unqualified\");\n     }\n+\n+    @Override\n+    public Void visitSubscriptExpression(final SubscriptExpression node, final Void context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA2NDYyNQ=="}, "originalCommit": {"oid": "2f21890966358df12225c90e6c37fed7f32f8a48"}, "originalPosition": 240}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b76bb75946057442239f74eef06e192522d2071e", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/b76bb75946057442239f74eef06e192522d2071e", "committedDate": "2020-08-20T02:12:03Z", "message": "addressed Almog's comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNzgyMzgy", "url": "https://github.com/confluentinc/ksql/pull/5998#pullrequestreview-471782382", "createdAt": "2020-08-20T16:24:13Z", "commit": {"oid": "b76bb75946057442239f74eef06e192522d2071e"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoyNDoxM1rOHEJbgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoyODo0OVrOHEJnYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExMDg0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * 1) expressions in non-aggregate functions are part of the grouping clause,\n          \n          \n            \n               * 1) expressions not in aggregate functions are part of the grouping clause,", "url": "https://github.com/confluentinc/ksql/pull/5998#discussion_r474110849", "createdAt": "2020-08-20T16:24:13Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/AggregateAnalyzer.java", "diffHunk": "@@ -276,17 +273,31 @@ private void enforceAggregateRules() {\n     }\n   }\n \n+  /**\n+   * This visitor performs two tasks: Create the input schema to the AggregateNode and validations.\n+   *\n+   * For creating the input schema, it checks if any expression along the path from the root\n+   * expression to the leaf (UnqualifiedColumnReference) is part of the groupBy. If at least one is,\n+   * then the UnqualifiedColumnReference is added to the schema.\n+   *\n+   * For validation, the visitor checks that:\n+   * 1) expressions in non-aggregate functions are part of the grouping clause,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b76bb75946057442239f74eef06e192522d2071e"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExMDg3NQ==", "bodyText": "first, yay for comments! Thanks for writing this detailed comment, helps future people (including me when I forget what this does) understand it \ud83c\udf89\nsecond, nit: i'm pretty sure checkstyle forces the following format, but if it doesn't it'll make it easier to read anyway :D\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n               * This visitor performs two tasks: Create the input schema to the AggregateNode and validations.\n          \n          \n            \n               *\n          \n          \n            \n               * For creating the input schema, it checks if any expression along the path from the root\n          \n          \n            \n               * expression to the leaf (UnqualifiedColumnReference) is part of the groupBy. If at least one is,\n          \n          \n            \n               * then the UnqualifiedColumnReference is added to the schema.\n          \n          \n            \n               *\n          \n          \n            \n               * For validation, the visitor checks that:\n          \n          \n            \n               * 1) expressions in non-aggregate functions are part of the grouping clause,\n          \n          \n            \n               * 2) aggregate functions are not nested\n          \n          \n            \n               * 3) window clauses (windowstart, windowend) don't appear in aggregate functions or groupBy\n          \n          \n            \n               * 4) aggregate functions don't appear in the groupBy clause\n          \n          \n            \n               * 5) expressions in the having clause are either aggregate functions or grouping keys\n          \n          \n            \n               */\n          \n          \n            \n              /**\n          \n          \n            \n               * This visitor performs two tasks: Create the input schema to the AggregateNode and validations.\n          \n          \n            \n               *\n          \n          \n            \n               * <p> For creating the input schema, it checks if any expression along the path from the root\n          \n          \n            \n               * expression to the leaf (UnqualifiedColumnReference) is part of the groupBy. If at least one is,\n          \n          \n            \n               * then the UnqualifiedColumnReference is added to the schema.\n          \n          \n            \n               *\n          \n          \n            \n               * <p>For validation, the visitor checks that:\n          \n          \n            \n               * <ol>\n          \n          \n            \n               *   <li> expressions in non-aggregate functions are part of the grouping clause </li>\n          \n          \n            \n               *   <li> aggregate functions are not nested </li>\n          \n          \n            \n               *   <li> window clauses (windowstart, windowend) don't appear in aggregate functions or groupBy </li>\n          \n          \n            \n               *   <li> aggregate functions don't appear in the groupBy clause </li>\n          \n          \n            \n               *   <li> expressions in the having clause are either aggregate functions or grouping keys </li>\n          \n          \n            \n               * </ol>\n          \n          \n            \n               */", "url": "https://github.com/confluentinc/ksql/pull/5998#discussion_r474110875", "createdAt": "2020-08-20T16:24:17Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/AggregateAnalyzer.java", "diffHunk": "@@ -276,17 +273,31 @@ private void enforceAggregateRules() {\n     }\n   }\n \n+  /**\n+   * This visitor performs two tasks: Create the input schema to the AggregateNode and validations.\n+   *\n+   * For creating the input schema, it checks if any expression along the path from the root\n+   * expression to the leaf (UnqualifiedColumnReference) is part of the groupBy. If at least one is,\n+   * then the UnqualifiedColumnReference is added to the schema.\n+   *\n+   * For validation, the visitor checks that:\n+   * 1) expressions in non-aggregate functions are part of the grouping clause,\n+   * 2) aggregate functions are not nested\n+   * 3) window clauses (windowstart, windowend) don't appear in aggregate functions or groupBy\n+   * 4) aggregate functions don't appear in the groupBy clause\n+   * 5) expressions in the having clause are either aggregate functions or grouping keys\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b76bb75946057442239f74eef06e192522d2071e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExMjU0MA==", "bodyText": "do we ever actually use the boolean? it looks like we proxy for it by checking != null", "url": "https://github.com/confluentinc/ksql/pull/5998#discussion_r474112540", "createdAt": "2020-08-20T16:26:44Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/analyzer/AggregateAnalyzer.java", "diffHunk": "@@ -300,6 +311,19 @@ private AggregateVisitor(\n       this.dereferenceCollector = requireNonNull(dereferenceCollector, \"dereferenceCollector\");\n     }\n \n+    @Override\n+    public Void process(final Expression node, final Void context) {\n+      if (groupBy.contains(node) && currentlyInExpressionPartOfGroupBy == null) {\n+        currentlyInExpressionPartOfGroupBy = new Pair<>(node, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b76bb75946057442239f74eef06e192522d2071e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExMzg4OA==", "bodyText": "shouldn't there be four outputs here? or am i missing something?", "url": "https://github.com/confluentinc/ksql/pull/5998#discussion_r474113888", "createdAt": "2020-08-20T16:28:49Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/group-by.json", "diffHunk": "@@ -514,6 +514,22 @@\n         {\"topic\": \"OUTPUT\", \"key\": 8, \"value\": {\"KSQL_COL_0\": 8, \"KSQL_COL_1\": 1}}\n       ]\n     },\n+    {\n+      \"name\": \"expressions used in non-aggregate function in select whose children are not part of group-by\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (id INT KEY, col1 MAP<VARCHAR, INT>, col2 MAP<VARCHAR, INT>) WITH (kafka_topic='test_topic', value_format='json');\",\n+        \"CREATE TABLE OUTPUT AS SELECT col1['foo']+col2['bar'] AS G1, AS_VALUE(col1['foo']+col2['bar']), COUNT(*) FROM input GROUP BY col1['foo']+col2['bar'];\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"key\": 0, \"value\": {\"col1\": {\"a\" : 1}, \"col2\": {\"b\" : 1}}},\n+        {\"topic\": \"test_topic\", \"key\": 1, \"value\": {\"col1\": {\"foo\" : 1}, \"col2\": {\"bar\" : 1}}},\n+        {\"topic\": \"test_topic\", \"key\": 2, \"value\": {\"col1\": {\"bar\" : 1}, \"col2\": {\"foo\" : 1}}},\n+        {\"topic\": \"test_topic\", \"key\": 3, \"value\": {\"col1\": {\"foo\" : 1}, \"col2\": {\"foo\" : 1}}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 2, \"value\": {\"KSQL_COL_0\": 2, \"KSQL_COL_1\": 1}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b76bb75946057442239f74eef06e192522d2071e"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a50410accd82614ed30f12bae414b41720e7d74", "author": {"user": {"login": "vpapavas", "name": "Vicky Papavasileiou"}}, "url": "https://github.com/confluentinc/ksql/commit/3a50410accd82614ed30f12bae414b41720e7d74", "committedDate": "2020-08-20T19:33:47Z", "message": "minor fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNDAyNTEy", "url": "https://github.com/confluentinc/ksql/pull/5998#pullrequestreview-472402512", "createdAt": "2020-08-21T11:07:31Z", "commit": {"oid": "3a50410accd82614ed30f12bae414b41720e7d74"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4681, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}