{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MTYzNDc4", "number": 4563, "title": "feat: support JSON schema inference in ksqlDB", "bodyText": "Description\nThis is the first cut toward support JSON schemas in ksqlDB. Creating a topic with C* and JSON no longer requires specifying the schema if the schema exists in schema registry, but when you create a JSON topic (either with C*AS or C*) the schema is not registered into schema-registry.\nThis PR is pretty straightforward, but there's one thing to understand - the schema registry converters add a magic byte (0x00) and four bytes to represent the schema ID at the beginning of every message. I made the choice to rely on standard JSON encoding - so we serialize without the magic byte/schemaID and when we deserialize we make sure to cut off the first 5 bytes from non-null events.\nThe only concern with this approach (cc @derekjn @MichaelDrogalis @colinhicks) is that even if data coming into ksqlDB is serialized with the JsonSchemaConverter (schema registry's format), data coming out will be vanilla JSON - this means that the JsonSchemaConverter will throw a missing magic byte error when trying to deserialize data coming out of ksqlDB.\nTo allow users to output the data in the schema registry format, we will later introduce a new Format: JSON_SR which will (like JSON) be able to read either format, but will output data with the magic byte and schemaID prepended.\nTesting done\n\nCreate a topic with JSON schema registered\n\n> ./bin/kafka-json-schema-console-producer --broker-list localhost:9092 --topic json --property value.schema='{\"type\":\"object\",\"properties\":{\"f1\":{\"type\":\"string\"}}}'\n{\"f1\":\"foo\"}\n\nImport that stream to ksqlDB (see #4556):\n\nksql> CREATE STREAM json WITH(KAFKA_TOPIC='json', VALUE_FORMAT='json');\n\n Message\n----------------\n Stream created\n----------------\nksql> DESCRIBE EXTENDED JSON;\n\nName                 : JSON\nType                 : STREAM\nKey field            :\nTimestamp field      : Not set - using <ROWTIME>\nKey format           : KAFKA\nValue format         : JSON\nKafka topic          : json (partitions: 1, replication: 1)\nStatement            : CREATE STREAM JSON (F1 STRING) WITH (AVRO_SCHEMA_ID=2, KAFKA_TOPIC='json', VALUE_FORMAT='json');\n\n Field   | Type\n-------------------------------------\n ROWTIME | BIGINT           (system)\n ROWKEY  | VARCHAR(STRING)  (system)\n F1      | VARCHAR(STRING)\n-------------------------------------\n\n\nINSERT INTO (note that this uses the standard JSON serialization, so we will have a topic with mixed serializations) also see (#4555):\n\nksql> INSERT INTO json (f1) VALUES ('bar');\nksql> PRINT json FROM BEGINNING;\nFormat:STRING\n2/13/20 11:02:26 AM PST , NULL , \\x00\\x00\\x00\\x00\\x02{\"f1\":\"foo\"}\n2/13/20 11:36:55 AM PST , NULL , {\"F1\":\"bar\"}\n\n\nMake sure we can read from it:\n\nksql> SELECT * FROM JSON EMIT CHANGES;\n+------------------------------+------------------------------+------------------------------+\n|ROWTIME                       |ROWKEY                        |F1                            |\n+------------------------------+------------------------------+------------------------------+\n|1581620546467                 |null                          |foo                           |\n|1581622615960                 |null                          |bar                           |\n\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-02-14T01:05:21Z", "url": "https://github.com/confluentinc/ksql/pull/4563", "merged": true, "mergeCommit": {"oid": "fcd6c7f4e83b16f05960d0cc7977fb6a093ef8ca"}, "closed": true, "closedAt": "2020-02-19T21:30:55Z", "author": {"login": "agavra"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFmmuwAFqTM2MDU4NzU2Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcF8miXAH2gAyMzc1MTYzNDc4Ojk1NWUwMGQwZjcyZjBmMmM3ZmJlYThiYWY1YmQ2NmY0YWMyMTc4ZDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNTg3NTYz", "url": "https://github.com/confluentinc/ksql/pull/4563#pullrequestreview-360587563", "createdAt": "2020-02-18T18:52:49Z", "commit": {"oid": "18ea41af51945a20c1d808e08e086ea7fcc3d672"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo1Mjo1MFrOFrOT7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODo1Mjo1MFrOFrOT7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2NzU2NA==", "bodyText": "Seems to only be used in tests... is it needed?", "url": "https://github.com/confluentinc/ksql/pull/4563#discussion_r380867564", "createdAt": "2020-02-18T18:52:50Z", "author": {"login": "big-andy-coates"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/json/JsonSerdeUtils.java", "diffHunk": "@@ -23,14 +23,66 @@\n import io.confluent.ksql.schema.connect.SchemaWalker.Visitor;\n import io.confluent.ksql.schema.ksql.PersistenceSchema;\n import io.confluent.ksql.schema.ksql.SqlBaseType;\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import javax.annotation.Nonnull;\n+import javax.annotation.Nullable;\n import org.apache.kafka.connect.data.Schema;\n import org.apache.kafka.connect.data.Schema.Type;\n \n final class JsonSerdeUtils {\n \n+  // the JsonSchemaConverter adds a magic NULL byte and 4 bytes for the\n+  // schema ID at the start of the message\n+  private static final int SIZE_OF_SR_PREFIX = Byte.BYTES + Integer.BYTES;\n+\n   private JsonSerdeUtils() {\n   }\n \n+  /**\n+   * Convert JSON serialized with {@link io.confluent.connect.json.JsonSchemaConverter}\n+   * to standard JSON serialization.\n+   *\n+   * @param json the bytes representing the serialized JSON\n+   * @return the serialized form with the magic byte and schemaID, or {@code json}\n+   *         if it was not serialized with a magic byte to begin with\n+   */\n+  static byte[] removeMagicAndSchemaId(@Nullable final byte[] json) {\n+    if (!hasMagicByte(json)) {\n+      return json;\n+    }\n+\n+    final byte[] out = new byte[json.length - SIZE_OF_SR_PREFIX];\n+    System.arraycopy(json, SIZE_OF_SR_PREFIX, out, 0, json.length - SIZE_OF_SR_PREFIX);\n+    return out;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18ea41af51945a20c1d808e08e086ea7fcc3d672"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecae03a2b07eb3fb03e7ff069023291b284c85ef", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/ecae03a2b07eb3fb03e7ff069023291b284c85ef", "committedDate": "2020-02-18T20:39:08Z", "message": "feat: support JSON schema inference in ksqlDB"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "18ea41af51945a20c1d808e08e086ea7fcc3d672", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/18ea41af51945a20c1d808e08e086ea7fcc3d672", "committedDate": "2020-02-13T20:03:30Z", "message": "feat: support JSON schema inference in ksqlDB"}, "afterCommit": {"oid": "ecae03a2b07eb3fb03e7ff069023291b284c85ef", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/ecae03a2b07eb3fb03e7ff069023291b284c85ef", "committedDate": "2020-02-18T20:39:08Z", "message": "feat: support JSON schema inference in ksqlDB"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb4b76b734286792f05f256726dbb9b631865e83", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/eb4b76b734286792f05f256726dbb9b631865e83", "committedDate": "2020-02-18T21:04:54Z", "message": "chore: update SR version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6961326dcc5533b01834ce83c1efba64d32795a2", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/6961326dcc5533b01834ce83c1efba64d32795a2", "committedDate": "2020-02-18T21:33:44Z", "message": "chore: fix ksqlAuthFilter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "679c5a6677b7616588223e5b28d0c01f82268e88", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/679c5a6677b7616588223e5b28d0c01f82268e88", "committedDate": "2020-02-19T00:11:24Z", "message": "fix: commit the plan for elements.json"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "955e00d0f72f0f2c7fbea8baf5bd66f4ac2178d5", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/955e00d0f72f0f2c7fbea8baf5bd66f4ac2178d5", "committedDate": "2020-02-19T20:32:06Z", "message": "feat: remove the cross-serde compatbility"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 27, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}