{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4Mjg0NDE4", "number": 5895, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDoyNzowMlrOETR7Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODowMTozNVrOETyXFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjUyMDU0OnYy", "diffSide": "LEFT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/StandaloneExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDoyNzowMlrOG47GjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDoxOTowNVrOG5IoeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0MTc3Mw==", "bodyText": "Was it a bug that this was here previously, since it means triggerShutdown() was being called from both StandaloneExecutor and KsqlServerMain? (Checking my understanding for why this was removed.)", "url": "https://github.com/confluentinc/ksql/pull/5895#discussion_r462341773", "createdAt": "2020-07-29T14:27:02Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/StandaloneExecutor.java", "diffHunk": "@@ -129,12 +129,17 @@ public void startAsync() {\n       versionChecker.start(KsqlModuleType.SERVER, properties);\n     } catch (final Exception e) {\n       log.error(\"Failed to start KSQL Server with query file: \" + queriesFile, e);\n-      triggerShutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36cb530e7611b76b7f3dd07bf8d471c827b3a3f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2MzQ0OA==", "bodyText": "I don't think it's a bug necessarily (since triggerShutdown is idempotent). Just not needed.", "url": "https://github.com/confluentinc/ksql/pull/5895#discussion_r462563448", "createdAt": "2020-07-29T20:19:05Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/StandaloneExecutor.java", "diffHunk": "@@ -129,12 +129,17 @@ public void startAsync() {\n       versionChecker.start(KsqlModuleType.SERVER, properties);\n     } catch (final Exception e) {\n       log.error(\"Failed to start KSQL Server with query file: \" + queriesFile, e);\n-      triggerShutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0MTc3Mw=="}, "originalCommit": {"oid": "c36cb530e7611b76b7f3dd07bf8d471c827b3a3f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjUzOTkyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/KsqlServerMainTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDozMDo1MVrOG47SdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDoyNDo0M1rOG5I0CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NDgyMA==", "bodyText": "I'm not understanding this test. Are we missing an expectLastCall(); after this line?", "url": "https://github.com/confluentinc/ksql/pull/5895#discussion_r462344820", "createdAt": "2020-07-29T14:30:51Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/KsqlServerMainTest.java", "diffHunk": "@@ -90,6 +96,23 @@ public void shouldStopAppOnErrorStarting() throws Exception {\n     verify(executable);\n   }\n \n+  @Test\n+  public void shouldNotifyAppOnTerminate() throws Exception {\n+    // Given:\n+    final Capture<Runnable> captureShutdownHandler = newCapture();\n+    shutdownHandler.execute(capture(captureShutdownHandler));\n+    executable.notifyTerminated();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36cb530e7611b76b7f3dd07bf8d471c827b3a3f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU2NjQwOQ==", "bodyText": "oof yeah - fixed", "url": "https://github.com/confluentinc/ksql/pull/5895#discussion_r462566409", "createdAt": "2020-07-29T20:24:43Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/KsqlServerMainTest.java", "diffHunk": "@@ -90,6 +96,23 @@ public void shouldStopAppOnErrorStarting() throws Exception {\n     verify(executable);\n   }\n \n+  @Test\n+  public void shouldNotifyAppOnTerminate() throws Exception {\n+    // Given:\n+    final Capture<Runnable> captureShutdownHandler = newCapture();\n+    shutdownHandler.execute(capture(captureShutdownHandler));\n+    executable.notifyTerminated();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NDgyMA=="}, "originalCommit": {"oid": "c36cb530e7611b76b7f3dd07bf8d471c827b3a3f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTc2MjE2OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzo0MToyMVrOG5tR4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMDo0NzozMVrOG7w7oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2Mzg3Mw==", "bodyText": "Should we use CAS if startAsync is mistakenly triggered multiple times?", "url": "https://github.com/confluentinc/ksql/pull/5895#discussion_r463163873", "createdAt": "2020-07-30T17:41:21Z", "author": {"login": "guozhangwang"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -305,7 +304,7 @@ public void startAsync() {\n         pullQueryExecutor\n     );\n \n-    startAsyncThread = Thread.currentThread();\n+    startAsyncThreadRef.set(Thread.currentThread());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ed1ce09e55a9bb2c92841fb7aacc2918393b349"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyMDg2NA==", "bodyText": "Makes sense. We could move this to be the first thing in the method and then throw if it's ever non-null.", "url": "https://github.com/confluentinc/ksql/pull/5895#discussion_r465320864", "createdAt": "2020-08-04T20:47:31Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -305,7 +304,7 @@ public void startAsync() {\n         pullQueryExecutor\n     );\n \n-    startAsyncThread = Thread.currentThread();\n+    startAsyncThreadRef.set(Thread.currentThread());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2Mzg3Mw=="}, "originalCommit": {"oid": "5ed1ce09e55a9bb2c92841fb7aacc2918393b349"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MTgzNTExOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlServerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODowMTozNVrOG5uAEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMDo0Mzo1OFrOG7w0Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NTY5Ng==", "bodyText": "For my own clarification: why we design tryStartApp itself to be blocking until shutdown, instead of letting this function to return after startup procedure completed, and then having another shutdown function that block until shutdown completes?", "url": "https://github.com/confluentinc/ksql/pull/5895#discussion_r463175696", "createdAt": "2020-07-30T18:01:35Z", "author": {"login": "guozhangwang"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlServerMain.java", "diffHunk": "@@ -55,29 +58,46 @@ public static void main(final String[] args) {\n       final Optional<String> queriesFile = serverOptions.getQueriesFile(properties);\n       final Executable executable = createExecutable(\n           properties, queriesFile, installDir, ksqlConfig);\n-      new KsqlServerMain(executable).tryStartApp();\n+      new KsqlServerMain(\n+          executable,\n+          r -> Runtime.getRuntime().addShutdownHook(new Thread(r))\n+      ).tryStartApp();\n     } catch (final Exception e) {\n       log.error(\"Failed to start KSQL\", e);\n       System.exit(-1);\n     }\n   }\n \n-  KsqlServerMain(final Executable executable) {\n+  KsqlServerMain(final Executable executable, final Executor shutdownHandler) {\n     this.executable = Objects.requireNonNull(executable, \"executable\");\n+    this.shutdownHandler = Objects.requireNonNull(shutdownHandler, \"shutdownHandler\");\n   }\n \n   void tryStartApp() throws Exception {\n+    final CountDownLatch latch = new CountDownLatch(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ed1ce09e55a9bb2c92841fb7aacc2918393b349"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMxOTAwNw==", "bodyText": "I think this might just be my C background talking, but the pattern I've gotten used to is to have the main thread own the application's lifecycle. It starts up all services, waits for a notification to initiate shutdown, and then orchestrates the shutdown process. This pattern makes a great deal of sense in that world because usually you'd write your shutdown in response to a signal, and a signal handler should not block. I think following this pattern in Java makes sense too for the following reasons:\n\nI wasn't totally sure what constraints the jvm would run the shutdown thread under. It seemed simplest to just have it do as little as possible and let the main thread manage shutdown\nThis gives you the guarantee that start is only ever called before shutdown, so it's easier to reason about the two (no synchronization needed, don't need to worry about entering start after calling shutdown).", "url": "https://github.com/confluentinc/ksql/pull/5895#discussion_r465319007", "createdAt": "2020-08-04T20:43:58Z", "author": {"login": "rodesai"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlServerMain.java", "diffHunk": "@@ -55,29 +58,46 @@ public static void main(final String[] args) {\n       final Optional<String> queriesFile = serverOptions.getQueriesFile(properties);\n       final Executable executable = createExecutable(\n           properties, queriesFile, installDir, ksqlConfig);\n-      new KsqlServerMain(executable).tryStartApp();\n+      new KsqlServerMain(\n+          executable,\n+          r -> Runtime.getRuntime().addShutdownHook(new Thread(r))\n+      ).tryStartApp();\n     } catch (final Exception e) {\n       log.error(\"Failed to start KSQL\", e);\n       System.exit(-1);\n     }\n   }\n \n-  KsqlServerMain(final Executable executable) {\n+  KsqlServerMain(final Executable executable, final Executor shutdownHandler) {\n     this.executable = Objects.requireNonNull(executable, \"executable\");\n+    this.shutdownHandler = Objects.requireNonNull(shutdownHandler, \"shutdownHandler\");\n   }\n \n   void tryStartApp() throws Exception {\n+    final CountDownLatch latch = new CountDownLatch(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NTY5Ng=="}, "originalCommit": {"oid": "5ed1ce09e55a9bb2c92841fb7aacc2918393b349"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3000, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}