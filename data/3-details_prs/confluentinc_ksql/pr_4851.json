{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNjAzNDYz", "number": 4851, "title": "feat: Migrate /ksql and /ksql/terminate endpoints", "bodyText": "Description\nThis PR migrates the /ksql and /ksql/terminate endpoint to the new Vert.x implementation.\nIt also includes some changes around security to make sure things work properly with the custom security plugins in CP and Cloud.\nIt also some refactoring and cleanup in the verticle handlers.\nOnce this PR is merged it means the /ksql and /ksql/terminate endpoints will no longer be served by Jetty. This means we've had to also introduce new custom authentication plugins for CP and cloud, and those must be merged before we merge this.\nTesting done\nNon functional change.\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-03-20T15:46:03Z", "url": "https://github.com/confluentinc/ksql/pull/4851", "merged": true, "mergeCommit": {"oid": "af6c7922d3c1b0afdd87e9a079e6f95be9780172"}, "closed": true, "closedAt": "2020-04-15T07:22:02Z", "author": {"login": "purplefox"}, "timelineItems": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPvP-aABqjMxNTE1MDA5NzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVoJQIABqjMyMTQxNzg3OTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a07147aef009126c4293a175c135f47eb7322903", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/a07147aef009126c4293a175c135f47eb7322903", "committedDate": "2020-03-20T21:00:59Z", "message": "fixed tests"}, "afterCommit": {"oid": "3d0ce10a7d63b87d951f63338dde966123e6e2ac", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/3d0ce10a7d63b87d951f63338dde966123e6e2ac", "committedDate": "2020-03-21T06:36:36Z", "message": "deliberately break to check muckrake is working"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMjE1ODE4", "url": "https://github.com/confluentinc/ksql/pull/4851#pullrequestreview-380215818", "createdAt": "2020-03-24T11:22:54Z", "commit": {"oid": "6668d50b61f5456de1d9c287eb2d4b813897b51d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMToyMjo1NFrOF6rxjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMToyMjo1NFrOF6rxjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3ODkyNA==", "bodyText": "I'm assuming committing this was unintentional ;)\nProbably worth updating git ignore...", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397078924", "createdAt": "2020-03-24T11:22:54Z", "author": {"login": "big-andy-coates"}, "path": "hs_err_pid47193.log", "diffHunk": "@@ -0,0 +1,612 @@\n+#", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6668d50b61f5456de1d9c287eb2d4b813897b51d"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMjE2Mjcz", "url": "https://github.com/confluentinc/ksql/pull/4851#pullrequestreview-380216273", "createdAt": "2020-03-24T11:23:31Z", "commit": {"oid": "6668d50b61f5456de1d9c287eb2d4b813897b51d"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMToyMzozMVrOF6ry8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTozMDo1MlrOF6sCmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3OTI4Mw==", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397079283", "createdAt": "2020-03-24T11:23:31Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/AuthenticationPluginHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;\n+\n+import io.confluent.ksql.api.server.ErrorCodes;\n+import io.confluent.ksql.api.server.KsqlApiException;\n+import io.confluent.ksql.api.server.Server;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.auth.AuthProvider;\n+import io.vertx.ext.auth.User;\n+import io.vertx.ext.web.RoutingContext;\n+import java.security.Principal;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Handler that calls any authentication plugin\n+ */\n+public class AuthenticationPluginHandler implements Handler<RoutingContext> {\n+\n+  private final Server server;\n+  private final AuthenticationPlugin securityHandlerPlugin;\n+\n+  public AuthenticationPluginHandler(final Server server,\n+      final AuthenticationPlugin securityHandlerPlugin) {\n+    this.server = server;\n+    this.securityHandlerPlugin = securityHandlerPlugin;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6668d50b61f5456de1d9c287eb2d4b813897b51d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA3OTY0Mw==", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397079643", "createdAt": "2020-03-24T11:24:09Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/AuthenticationPluginHandler.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;\n+\n+import io.confluent.ksql.api.server.ErrorCodes;\n+import io.confluent.ksql.api.server.KsqlApiException;\n+import io.confluent.ksql.api.server.Server;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.auth.AuthProvider;\n+import io.vertx.ext.auth.User;\n+import io.vertx.ext.web.RoutingContext;\n+import java.security.Principal;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Handler that calls any authentication plugin\n+ */\n+public class AuthenticationPluginHandler implements Handler<RoutingContext> {\n+\n+  private final Server server;\n+  private final AuthenticationPlugin securityHandlerPlugin;\n+\n+  public AuthenticationPluginHandler(final Server server,\n+      final AuthenticationPlugin securityHandlerPlugin) {\n+    this.server = server;\n+    this.securityHandlerPlugin = securityHandlerPlugin;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    final CompletableFuture<Principal> cf = securityHandlerPlugin\n+        .handleAuth(routingContext, server.getWorkerExecutor());\n+    cf.thenAccept(principal -> {\n+      if (principal == null) {\n+        // Not authenticated\n+        routingContext.fail(401, new KsqlApiException(\"Failed authentication\",\n+            ErrorCodes.ERROR_FAILED_AUTHENTICATION));\n+      } else {\n+        routingContext.setUser(new AuthPluginUser(principal));\n+        routingContext.next();\n+      }\n+    }).exceptionally(t -> {\n+      // An internal error occurred\n+      routingContext.fail(t);\n+      return null;\n+    });\n+  }\n+\n+  private static class AuthPluginUser implements ApiUser {\n+\n+    private final Principal principal;\n+\n+    AuthPluginUser(final Principal principal) {\n+      this.principal = principal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6668d50b61f5456de1d9c287eb2d4b813897b51d"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MDIyMw==", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397080223", "createdAt": "2020-03-24T11:25:14Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/JaasPrincipal.java", "diffHunk": "@@ -17,11 +17,14 @@\n \n import java.security.Principal;\n \n-class ApiPrincipal implements Principal {\n+/**\n+ * Principal implementation created when authenticating with the JaasAuthProvider\n+ */\n+class JaasPrincipal implements Principal {\n \n   private final String name;\n \n-  ApiPrincipal(final String name) {\n+  JaasPrincipal(final String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6668d50b61f5456de1d9c287eb2d4b813897b51d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MDYwMA==", "bodyText": "We generally avoid reference to RBAC / CP in the OSS ksqlDB code base.", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397080600", "createdAt": "2020-03-24T11:25:52Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/KsqlAuthorizationProviderHandler.java", "diffHunk": "@@ -23,9 +23,12 @@\n import io.vertx.core.WorkerExecutor;\n import io.vertx.ext.auth.User;\n import io.vertx.ext.web.RoutingContext;\n-import java.security.Principal;\n import java.util.Set;\n \n+/**\n+ * Handler that calls a KsqlAuthorizationProvider plugin that can be used for custom authorization\n+ * (e.g. RBAC in Confluent platform)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6668d50b61f5456de1d9c287eb2d4b813897b51d"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MTAxNw==", "bodyText": "nit: no need to null check ksqlResource here - that should be the responsibility of the KsqlStatementsEndpoint constructor...", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397081017", "createdAt": "2020-03-24T11:26:36Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/KsqlServerEndpoints.java", "diffHunk": "@@ -42,17 +46,22 @@\n   private final PullQueryExecutor pullQueryExecutor;\n   private final ReservedInternalTopics reservedInternalTopics;\n   private final KsqlSecurityContextProvider ksqlSecurityContextProvider;\n+  private final KsqlStatementsEndpoint ksqlStatementsEndpoint;\n+  private final TerminateEndpoint terminateEndpoint;\n \n   public KsqlServerEndpoints(\n       final KsqlEngine ksqlEngine,\n       final KsqlConfig ksqlConfig,\n       final PullQueryExecutor pullQueryExecutor,\n-      final KsqlSecurityContextProvider ksqlSecurityContextProvider) {\n+      final KsqlSecurityContextProvider ksqlSecurityContextProvider,\n+      final KsqlResource ksqlResource) {\n     this.ksqlEngine = Objects.requireNonNull(ksqlEngine);\n     this.ksqlConfig = Objects.requireNonNull(ksqlConfig);\n     this.pullQueryExecutor = Objects.requireNonNull(pullQueryExecutor);\n     this.reservedInternalTopics = new ReservedInternalTopics(ksqlConfig);\n     this.ksqlSecurityContextProvider = Objects.requireNonNull(ksqlSecurityContextProvider);\n+    this.ksqlStatementsEndpoint = new KsqlStatementsEndpoint(Objects.requireNonNull(ksqlResource));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6668d50b61f5456de1d9c287eb2d4b813897b51d"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MTEzMQ==", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397081131", "createdAt": "2020-03-24T11:26:51Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/KsqlStatementsEndpoint.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.endpoints;\n+\n+import io.confluent.ksql.api.spi.EndpointResponse;\n+import io.confluent.ksql.rest.entity.KsqlRequest;\n+import io.confluent.ksql.rest.server.resources.KsqlResource;\n+import io.confluent.ksql.security.KsqlSecurityContext;\n+import io.confluent.ksql.util.VertxUtils;\n+import javax.ws.rs.core.Response;\n+\n+public class KsqlStatementsEndpoint {\n+\n+  private final KsqlResource ksqlResource;\n+\n+  public KsqlStatementsEndpoint(final KsqlResource ksqlResource) {\n+    this.ksqlResource = ksqlResource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6668d50b61f5456de1d9c287eb2d4b813897b51d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MTIzMA==", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397081230", "createdAt": "2020-03-24T11:27:01Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/endpoints/TerminateEndpoint.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.endpoints;\n+\n+import io.confluent.ksql.api.spi.EndpointResponse;\n+import io.confluent.ksql.rest.entity.ClusterTerminateRequest;\n+import io.confluent.ksql.rest.server.resources.KsqlResource;\n+import io.confluent.ksql.security.KsqlSecurityContext;\n+import io.confluent.ksql.util.VertxUtils;\n+import javax.ws.rs.core.Response;\n+\n+public class TerminateEndpoint {\n+\n+  private final KsqlResource ksqlResource;\n+\n+  public TerminateEndpoint(final KsqlResource ksqlResource) {\n+    this.ksqlResource = ksqlResource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6668d50b61f5456de1d9c287eb2d4b813897b51d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MTcwNQ==", "bodyText": "Can we use one of the enums for more descriptive status codes please, e.g. HttpStatusCode.SERVER_ERROR rather than 500.", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397081705", "createdAt": "2020-03-24T11:27:56Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/InsertsStreamHandler.java", "diffHunk": "@@ -157,9 +157,10 @@ private Void handleInsertSubscriberException(final Throwable t,\n       }\n       log.error(\"Failed to execute inserts\", toLog);\n       // We don't expose internal error message via public API\n-      ServerUtils.handleError(routingContext.response(), 500, ErrorCodes.ERROR_CODE_INTERNAL_ERROR,\n-          \"The server encountered an internal error when processing inserts.\"\n-              + \" Please consult the server logs for more information.\");\n+      routingContext.fail(500,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6668d50b61f5456de1d9c287eb2d4b813897b51d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MTgxNA==", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397081814", "createdAt": "2020-03-24T11:28:09Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/PortedEndpoints.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.Errors.toErrorCode;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.api.auth.ApiSecurityContext;\n+import io.confluent.ksql.api.auth.DefaultApiSecurityContext;\n+import io.confluent.ksql.api.spi.EndpointResponse;\n+import io.confluent.ksql.api.spi.Endpoints;\n+import io.confluent.ksql.json.JsonMapper;\n+import io.confluent.ksql.rest.entity.ClusterTerminateRequest;\n+import io.confluent.ksql.rest.entity.KsqlErrorMessage;\n+import io.confluent.ksql.rest.entity.KsqlRequest;\n+import io.confluent.ksql.rest.entity.Versions;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.BiFunction;\n+import javax.ws.rs.core.MediaType;\n+\n+public class PortedEndpoints {\n+\n+  private static final Set<String> PORTED_ENDPOINTS = ImmutableSet.of(\"/ksql\");\n+\n+  private final Endpoints endpoints;\n+  private final Server server;\n+\n+  public PortedEndpoints(final Endpoints endpoints, final Server server) {\n+    this.endpoints = endpoints;\n+    this.server = server;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6668d50b61f5456de1d9c287eb2d4b813897b51d"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MjQxNg==", "bodyText": "ditto on the enum vs 400.", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397082416", "createdAt": "2020-03-24T11:29:16Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java", "diffHunk": "@@ -114,19 +113,19 @@ private Void handleQueryPublisherException(final Throwable t,\n     if (t instanceof CompletionException) {\n       final Throwable actual = t.getCause();\n       if (actual instanceof KsqlStatementException) {\n-        ServerUtils.handleError(routingContext.response(), 400, ErrorCodes.ERROR_CODE_INVALID_QUERY,\n-            actual.getMessage());\n+        routingContext.fail(400,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6668d50b61f5456de1d9c287eb2d4b813897b51d"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MjUyMg==", "bodyText": "ditto on the enum vs 500", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397082522", "createdAt": "2020-03-24T11:29:29Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/QueryStreamHandler.java", "diffHunk": "@@ -114,19 +113,19 @@ private Void handleQueryPublisherException(final Throwable t,\n     if (t instanceof CompletionException) {\n       final Throwable actual = t.getCause();\n       if (actual instanceof KsqlStatementException) {\n-        ServerUtils.handleError(routingContext.response(), 400, ErrorCodes.ERROR_CODE_INVALID_QUERY,\n-            actual.getMessage());\n+        routingContext.fail(400,\n+            new KsqlApiException(actual.getMessage(), ErrorCodes.ERROR_CODE_INVALID_QUERY));\n         return null;\n       } else if (actual instanceof KsqlApiException) {\n-        ServerUtils\n-            .handleError(routingContext.response(), 400, ((KsqlApiException) actual).getErrorCode(),\n-                actual.getMessage());\n+        routingContext.fail(400, actual);\n+        return null;\n       }\n     }\n     // We don't expose internal error message via public API\n-    ServerUtils.handleError(routingContext.response(), 500, ErrorCodes.ERROR_CODE_INTERNAL_ERROR,\n+    routingContext.fail(500, new KsqlApiException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6668d50b61f5456de1d9c287eb2d4b813897b51d"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MjcwOQ==", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397082709", "createdAt": "2020-03-24T11:29:47Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java", "diffHunk": "@@ -34,47 +35,36 @@\n   private ServerUtils() {\n   }\n \n-  public static void handleError(final HttpServerResponse response, final int statusCode,\n-      final int errorCode, final String errMsg) {\n-    final ErrorResponse errorResponse = new ErrorResponse(errorCode, errMsg);\n-    final Buffer buffer = errorResponse.toBuffer();\n-    response.setStatusCode(statusCode).end(buffer);\n-  }\n-\n-  public static void unhandledExceptionHandler(final Throwable t) {\n-    log.error(\"Unhandled exception\", t);\n-  }\n-\n   public static <T> Optional<T> deserialiseObject(final Buffer buffer,\n-      final HttpServerResponse response,\n+      final RoutingContext routingContext,\n       final Class<T> clazz) {\n-    return PojoCodec.deserialiseObject(buffer, new HttpResponseErrorHandler(response), clazz);\n+    return PojoCodec.deserialiseObject(buffer, new HttpResponseErrorHandler(routingContext), clazz);\n   }\n \n   private static class HttpResponseErrorHandler implements PojoDeserializerErrorHandler {\n \n-    private final HttpServerResponse response;\n+    private final RoutingContext routingContext;\n \n-    HttpResponseErrorHandler(final HttpServerResponse response) {\n-      this.response = response;\n+    HttpResponseErrorHandler(final RoutingContext routingContext) {\n+      this.routingContext = routingContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6668d50b61f5456de1d9c287eb2d4b813897b51d"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA4MzI4OA==", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state.", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r397083288", "createdAt": "2020-03-24T11:30:52Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/spi/EndpointResponse.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.spi;\n+\n+public interface EndpointResponse {\n+\n+  int getStatusCode();\n+\n+  String getStatusMessage();\n+\n+  Object getResponseBody();\n+\n+  static EndpointResponse create(final int errorCode, final String statusMessage,\n+      final Object responseBody) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6668d50b61f5456de1d9c287eb2d4b813897b51d"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd41c86c9bf4b1a0380868a78c95b8d892f80af6", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/bd41c86c9bf4b1a0380868a78c95b8d892f80af6", "committedDate": "2020-03-25T09:39:21Z", "message": "more review updates"}, "afterCommit": {"oid": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f", "committedDate": "2020-03-26T17:44:43Z", "message": "Implement unauthed paths for authentication plugin"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNjAzNjU2", "url": "https://github.com/confluentinc/ksql/pull/4851#pullrequestreview-382603656", "createdAt": "2020-03-27T06:21:57Z", "commit": {"oid": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNjoyMTo1OFrOF8kesg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwNjoyOTo1N1rOF8knmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1NjU2Mg==", "bodyText": "Why is the plugin handler failing the context? This seems to contradict the expectation that implementations of AuthenticationPlugin should end the response if the user fails to authenticate.", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399056562", "createdAt": "2020-03-27T06:21:58Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/auth/AuthenticationPluginHandler.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.auth;\n+\n+import io.confluent.ksql.api.server.ApiServerConfig;\n+import io.confluent.ksql.api.server.ErrorCodes;\n+import io.confluent.ksql.api.server.KsqlApiException;\n+import io.confluent.ksql.api.server.Server;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.auth.AuthProvider;\n+import io.vertx.ext.auth.User;\n+import io.vertx.ext.web.RoutingContext;\n+import java.security.Principal;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import org.apache.http.HttpStatus;\n+\n+/**\n+ * Handler that calls any authentication plugin\n+ */\n+public class AuthenticationPluginHandler implements Handler<RoutingContext> {\n+\n+  private final Server server;\n+  private final AuthenticationPlugin securityHandlerPlugin;\n+  private final Set<String> unauthenticatedPaths = new HashSet<>();\n+\n+  public AuthenticationPluginHandler(final Server server,\n+      final AuthenticationPlugin securityHandlerPlugin) {\n+    this.server = Objects.requireNonNull(server);\n+    this.securityHandlerPlugin = Objects.requireNonNull(securityHandlerPlugin);\n+    // We add in all the paths that don't require authorization from KsqlAuthorizationProviderHandler\n+    unauthenticatedPaths.addAll(KsqlAuthorizationProviderHandler.PATHS_WITHOUT_AUTHORIZATION);\n+    // And then we add anything from the property authentication.skip.paths\n+    // This preserves the behaviour from the previous Jetty based implementation\n+    final List<String> unauthed = server.getConfig()\n+        .getList(ApiServerConfig.AUTHENTICATION_SKIP_PATHS_CONFIG);\n+    unauthenticatedPaths.addAll(unauthed);\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    if (unauthenticatedPaths.contains(routingContext.normalisedPath())) {\n+      routingContext.next();\n+      return;\n+    }\n+    final CompletableFuture<Principal> cf = securityHandlerPlugin\n+        .handleAuth(routingContext, server.getWorkerExecutor());\n+    cf.thenAccept(principal -> {\n+      if (principal == null) {\n+        // Not authenticated\n+        routingContext\n+            .fail(HttpStatus.SC_UNAUTHORIZED, new KsqlApiException(\"Failed authentication\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1NzIyOA==", "bodyText": "Before this refactor, handleError() was populating the status code and providing a message when ending the response, but the new code that previously called this method does not. Was this a conscious decision? I think it's nice to populate the response because otherwise failures appear silent from curl (and probably other tools as well?).", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399057228", "createdAt": "2020-03-27T06:24:11Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java", "diffHunk": "@@ -34,47 +37,39 @@\n   private ServerUtils() {\n   }\n \n-  public static void handleError(final HttpServerResponse response, final int statusCode,\n-      final int errorCode, final String errMsg) {\n-    final ErrorResponse errorResponse = new ErrorResponse(errorCode, errMsg);\n-    final Buffer buffer = errorResponse.toBuffer();\n-    response.setStatusCode(statusCode).end(buffer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1NzQwMg==", "bodyText": "Why is this public?", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399057402", "createdAt": "2020-03-27T06:24:48Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/PortedEndpoints.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.Errors.toErrorCode;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.api.auth.ApiSecurityContext;\n+import io.confluent.ksql.api.auth.DefaultApiSecurityContext;\n+import io.confluent.ksql.api.spi.EndpointResponse;\n+import io.confluent.ksql.api.spi.Endpoints;\n+import io.confluent.ksql.json.JsonMapper;\n+import io.confluent.ksql.rest.entity.ClusterTerminateRequest;\n+import io.confluent.ksql.rest.entity.KsqlErrorMessage;\n+import io.confluent.ksql.rest.entity.KsqlRequest;\n+import io.confluent.ksql.rest.entity.Versions;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.BiFunction;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.http.HttpStatus;\n+\n+public class PortedEndpoints {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1NzQ3MA==", "bodyText": "Why is this public?", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399057470", "createdAt": "2020-03-27T06:25:06Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/PortedEndpoints.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.Errors.toErrorCode;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.api.auth.ApiSecurityContext;\n+import io.confluent.ksql.api.auth.DefaultApiSecurityContext;\n+import io.confluent.ksql.api.spi.EndpointResponse;\n+import io.confluent.ksql.api.spi.Endpoints;\n+import io.confluent.ksql.json.JsonMapper;\n+import io.confluent.ksql.rest.entity.ClusterTerminateRequest;\n+import io.confluent.ksql.rest.entity.KsqlErrorMessage;\n+import io.confluent.ksql.rest.entity.KsqlRequest;\n+import io.confluent.ksql.rest.entity.Versions;\n+import io.vertx.core.buffer.Buffer;\n+import io.vertx.core.http.HttpMethod;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.ext.web.Router;\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.BodyHandler;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.function.BiFunction;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.http.HttpStatus;\n+\n+public class PortedEndpoints {\n+\n+  private static final Set<String> PORTED_ENDPOINTS = ImmutableSet.of(\"/ksql\");\n+\n+  private final Endpoints endpoints;\n+  private final Server server;\n+\n+  public PortedEndpoints(final Endpoints endpoints, final Server server) {\n+    this.endpoints = endpoints;\n+    this.server = server;\n+  }\n+\n+  static void setupEndpoints(final Endpoints endpoints, final Server server,\n+      final Router router) {\n+    router.route(HttpMethod.POST, \"/ksql\")\n+        .handler(BodyHandler.create())\n+        .produces(Versions.KSQL_V1_JSON)\n+        .produces(MediaType.APPLICATION_JSON)\n+        .handler(new PortedEndpoints(endpoints, server)::handleKsqlRequest);\n+    router.route(HttpMethod.POST, \"/ksql/terminate\")\n+        .handler(BodyHandler.create())\n+        .produces(Versions.KSQL_V1_JSON)\n+        .produces(MediaType.APPLICATION_JSON)\n+        .handler(new PortedEndpoints(endpoints, server)::handleTerminateRequest);\n+  }\n+\n+  static void setupFailureHandler(final Router router) {\n+    for (String path : PORTED_ENDPOINTS) {\n+      router.route(path).failureHandler(PortedEndpoints::oldApiFailureHandler);\n+    }\n+  }\n+\n+  void handleKsqlRequest(final RoutingContext routingContext) {\n+    handlePortedOldApiRequest(routingContext, KsqlRequest.class,\n+        (ksqlRequest, apiSecurityContext) ->\n+            endpoints\n+                .executeKsqlRequest(ksqlRequest, server.getWorkerExecutor(),\n+                    DefaultApiSecurityContext.create(routingContext))\n+    );\n+  }\n+\n+  void handleTerminateRequest(final RoutingContext routingContext) {\n+    handlePortedOldApiRequest(routingContext, ClusterTerminateRequest.class,\n+        (request, apiSecurityContext) ->\n+            endpoints\n+                .executeTerminate(request, server.getWorkerExecutor(),\n+                    DefaultApiSecurityContext.create(routingContext))\n+    );\n+  }\n+\n+  private static <T> void handlePortedOldApiRequest(final RoutingContext routingContext,\n+      final Class<T> requestClass,\n+      final BiFunction<T, ApiSecurityContext, CompletableFuture<EndpointResponse>> requestor) {\n+    final HttpServerResponse response = routingContext.response();\n+    final ObjectMapper objectMapper = JsonMapper.INSTANCE.mapper;\n+    final T requestObject;\n+    try {\n+      requestObject = objectMapper.readValue(routingContext.getBody().getBytes(), requestClass);\n+    } catch (Exception e) {\n+      routingContext.fail(HttpStatus.SC_BAD_REQUEST,\n+          new KsqlApiException(\"Malformed JSON\", ErrorCodes.ERROR_CODE_MALFORMED_REQUEST));\n+      return;\n+    }\n+    final CompletableFuture<EndpointResponse> completableFuture = requestor\n+        .apply(requestObject, DefaultApiSecurityContext.create(routingContext));\n+    completableFuture.thenAccept(endpointResponse -> {\n+\n+      final Buffer responseBody;\n+      try {\n+        final byte[] bytes = objectMapper.writeValueAsBytes(endpointResponse.getResponseBody());\n+        responseBody = Buffer.buffer(bytes);\n+      } catch (JsonProcessingException e) {\n+        // This is an internal error as it's a bug in the server\n+        routingContext.fail(HttpStatus.SC_INTERNAL_SERVER_ERROR, e);\n+        return;\n+      }\n+\n+      response.setStatusCode(endpointResponse.getStatusCode())\n+          .setStatusMessage(endpointResponse.getStatusMessage())\n+          .end(responseBody);\n+\n+    }).exceptionally(t -> {\n+      routingContext.fail(HttpStatus.SC_INTERNAL_SERVER_ERROR, t);\n+      return null;\n+    });\n+  }\n+\n+  public static void oldApiFailureHandler(final RoutingContext routingContext) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1ODMzOQ==", "bodyText": "nit: inconsistent static imports. ERROR_CODE_MISSING_PARAM above is a static import but this error code (and the one below) aren't.", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399058339", "createdAt": "2020-03-27T06:28:16Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerUtils.java", "diffHunk": "@@ -34,47 +37,39 @@\n   private ServerUtils() {\n   }\n \n-  public static void handleError(final HttpServerResponse response, final int statusCode,\n-      final int errorCode, final String errMsg) {\n-    final ErrorResponse errorResponse = new ErrorResponse(errorCode, errMsg);\n-    final Buffer buffer = errorResponse.toBuffer();\n-    response.setStatusCode(statusCode).end(buffer);\n-  }\n-\n-  public static void unhandledExceptionHandler(final Throwable t) {\n-    log.error(\"Unhandled exception\", t);\n-  }\n-\n   public static <T> Optional<T> deserialiseObject(final Buffer buffer,\n-      final HttpServerResponse response,\n+      final RoutingContext routingContext,\n       final Class<T> clazz) {\n-    return PojoCodec.deserialiseObject(buffer, new HttpResponseErrorHandler(response), clazz);\n+    return PojoCodec.deserialiseObject(buffer, new HttpResponseErrorHandler(routingContext), clazz);\n   }\n \n   private static class HttpResponseErrorHandler implements PojoDeserializerErrorHandler {\n \n-    private final HttpServerResponse response;\n+    private final RoutingContext routingContext;\n \n-    HttpResponseErrorHandler(final HttpServerResponse response) {\n-      this.response = response;\n+    HttpResponseErrorHandler(final RoutingContext routingContext) {\n+      this.routingContext = Objects.requireNonNull(routingContext);\n     }\n \n     @Override\n     public void onMissingParam(final String paramName) {\n-      handleError(response, 400, ErrorCodes.ERROR_CODE_MISSING_PARAM,\n-          \"No \" + paramName + \" in arguments\");\n+      routingContext\n+          .fail(HttpStatus.SC_BAD_REQUEST, new KsqlApiException(\"No \" + paramName + \" in arguments\",\n+              ERROR_CODE_MISSING_PARAM));\n     }\n \n     @Override\n     public void onExtraParam(final String paramName) {\n-      handleError(response, 400, ErrorCodes.ERROR_CODE_UNKNOWN_PARAM,\n-          \"Unknown arg \" + paramName);\n+      routingContext\n+          .fail(HttpStatus.SC_BAD_REQUEST, new KsqlApiException(\"Unknown arg \" + paramName,\n+              ErrorCodes.ERROR_CODE_UNKNOWN_PARAM));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTA1ODg0Mg==", "bodyText": "Thanks for including this. Hopefully we won't need it but it's reassuring to know we can easily undo this change if something comes up.", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399058842", "createdAt": "2020-03-27T06:29:57Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -52,8 +54,11 @@\n   // CHECKSTYLE_RULES.ON: ClassDataAbstractionCoupling\n   private static final Logger log = LoggerFactory.getLogger(ServerVerticle.class);\n \n-  private static final Set<String> NEW_API_ENDPOINTS = ImmutableSet\n-      .of(\"/query-stream\", \"/inserts-stream\", \"/close-query\");\n+  private static final Set<String> NON_PROXIED_ENDPOINTS = ImmutableSet\n+      .of(\"/query-stream\", \"/inserts-stream\", \"/close-query\", \"/ksql\");\n+\n+  // Quick switch so we can easily revert to not serving ported endpoints directly\n+  private static final boolean SERVE_PORTED_ENDPOINTS = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4327322ec9ef1dfd372f22c9c07c2eb58d4d0f"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyOTM5OTYw", "url": "https://github.com/confluentinc/ksql/pull/4851#pullrequestreview-382939960", "createdAt": "2020-03-27T15:03:13Z", "commit": {"oid": "0c66060c7e115a45571b36668716046fb121cd56"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTowMzoxNFrOF81LXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNTowMzoxNFrOF81LXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTMzMDE0MA==", "bodyText": "Seems this is set only if keyStoreLocation is not null/empty. Why is that?", "url": "https://github.com/confluentinc/ksql/pull/4851#discussion_r399330140", "createdAt": "2020-03-27T15:03:14Z", "author": {"login": "spena"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -234,6 +236,10 @@ public static KsqlRestConfig convertToApiServerConfig(final KsqlRestConfig confi\n           origs.put(ApiServerConfig.TLS_CLIENT_AUTH_REQUIRED, \"required\");\n         }\n       }\n+      final List<String> unauthedPaths = config.getList(RestConfig.AUTHENTICATION_SKIP_PATHS);\n+      if (unauthedPaths != null) {\n+        origs.put(ApiServerConfig.AUTHENTICATION_SKIP_PATHS_CONFIG, unauthedPaths);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c66060c7e115a45571b36668716046fb121cd56"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMDMzODk3", "url": "https://github.com/confluentinc/ksql/pull/4851#pullrequestreview-383033897", "createdAt": "2020-03-27T16:51:36Z", "commit": {"oid": "f2e4b192a71f15291355728e9fe73faa33b2ac38"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "032fb750b86af3a0fff0b12a4158da2f05ead408", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/032fb750b86af3a0fff0b12a4158da2f05ead408", "committedDate": "2020-03-30T09:46:02Z", "message": "Updated docs on AuthenticationPlugin"}, "afterCommit": {"oid": "6b190ec39b690cb3005ff899a56deec0424b8813", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/6b190ec39b690cb3005ff899a56deec0424b8813", "committedDate": "2020-04-01T12:18:22Z", "message": "Updated docs on AuthenticationPlugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eeff0cd96c69a374610eba770190b80e0f3546f5", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/eeff0cd96c69a374610eba770190b80e0f3546f5", "committedDate": "2020-04-08T13:43:09Z", "message": "migrate ksql endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da031831f4491ff16a68a978a412675ebcb57479", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/da031831f4491ff16a68a978a412675ebcb57479", "committedDate": "2020-04-08T13:43:09Z", "message": "Consolidate the error handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "694e8f790f58dcf82c56ca61832bff4fc394c72d", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/694e8f790f58dcf82c56ca61832bff4fc394c72d", "committedDate": "2020-04-08T13:43:09Z", "message": "migrate /terminate and some refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae7f4a93d4d1a17bd87b9fe205cb601bd66e2d04", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/ae7f4a93d4d1a17bd87b9fe205cb601bd66e2d04", "committedDate": "2020-04-08T13:43:09Z", "message": "remove jx-ws annotations from KsqlResource"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bbff3c56091ddf9aa8065f55117aa932ae520e2", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/3bbff3c56091ddf9aa8065f55117aa932ae520e2", "committedDate": "2020-04-08T13:43:09Z", "message": "further auth fixes to get the plugins working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74c33674b1e09b012704596af7d097b00df3c6b5", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/74c33674b1e09b012704596af7d097b00df3c6b5", "committedDate": "2020-04-08T13:43:09Z", "message": "remove dead code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "035c0f36132102ea2172e6d0691453833f25bc00", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/035c0f36132102ea2172e6d0691453833f25bc00", "committedDate": "2020-04-08T13:43:09Z", "message": "rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "240ad857674cf62f9e0ff4d63a4aac6b2509f31c", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/240ad857674cf62f9e0ff4d63a4aac6b2509f31c", "committedDate": "2020-04-08T13:43:09Z", "message": "Added switch to be able to revert back to old endpoints serving quickly"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b936c4d12da32c99afa82b89318e0e5faa20423", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/9b936c4d12da32c99afa82b89318e0e5faa20423", "committedDate": "2020-04-08T13:43:09Z", "message": "disabled serving of ported endpoints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "757c1800835448e2bdb8a119454352734bef62e3", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/757c1800835448e2bdb8a119454352734bef62e3", "committedDate": "2020-04-08T13:43:09Z", "message": "remove println"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c52ba8fcca51610ac59e17b060e7d8183c7489a", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/7c52ba8fcca51610ac59e17b060e7d8183c7489a", "committedDate": "2020-04-08T13:43:09Z", "message": "enable ksql endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4e34944c203d693c8b535ef8ac584b313d3a2c5", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/b4e34944c203d693c8b535ef8ac584b313d3a2c5", "committedDate": "2020-04-08T13:43:10Z", "message": "fixed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62e617799c5bbf35d37fefeaf6996f80ec638723", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/62e617799c5bbf35d37fefeaf6996f80ec638723", "committedDate": "2020-04-08T13:43:10Z", "message": "deliberately break to check muckrake is working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "829cad4016b23857f253572a3fec6d85adcb817f", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/829cad4016b23857f253572a3fec6d85adcb817f", "committedDate": "2020-04-08T13:43:10Z", "message": "unbreak auth"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b02e976748495d572fffd9e59b072c083f603df", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/9b02e976748495d572fffd9e59b072c083f603df", "committedDate": "2020-04-08T13:43:10Z", "message": "Move ApiServerConfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de1786642d390bc4c8df166247a46317d229899a", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/de1786642d390bc4c8df166247a46317d229899a", "committedDate": "2020-04-08T13:43:10Z", "message": "Review updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c9cd050adf414a31d550cb0d9562c1d959a833a", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/2c9cd050adf414a31d550cb0d9562c1d959a833a", "committedDate": "2020-04-08T13:43:10Z", "message": "more review updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac1637c621da1feb21f2ce88596633150f357422", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/ac1637c621da1feb21f2ce88596633150f357422", "committedDate": "2020-04-08T13:43:10Z", "message": "Implement unauthed paths for authentication plugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f6a55b2b4c78011009d9fdad057265c382b6d11", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/1f6a55b2b4c78011009d9fdad057265c382b6d11", "committedDate": "2020-04-08T13:43:10Z", "message": "further updates from review comments and checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51f10ebf4afbdef20e0bd12c71793f4ead62ea12", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/51f10ebf4afbdef20e0bd12c71793f4ead62ea12", "committedDate": "2020-04-08T13:43:10Z", "message": "Fix location of unauthedpaths population"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95fdd161642f40c443438cb791a323b1dde42054", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/95fdd161642f40c443438cb791a323b1dde42054", "committedDate": "2020-04-08T13:43:10Z", "message": "Added sanity check to ensure both vert.x and jetty plugin classes are specified together"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3af2d3429bb17f7f00c28c1fcd81c5172882ee3", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/d3af2d3429bb17f7f00c28c1fcd81c5172882ee3", "committedDate": "2020-04-08T13:43:10Z", "message": "Updated docs on AuthenticationPlugin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91942e973aab814ce01974b627cdb9561a7de4ab", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/91942e973aab814ce01974b627cdb9561a7de4ab", "committedDate": "2020-04-08T13:44:31Z", "message": "fixed test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b190ec39b690cb3005ff899a56deec0424b8813", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/6b190ec39b690cb3005ff899a56deec0424b8813", "committedDate": "2020-04-01T12:18:22Z", "message": "Updated docs on AuthenticationPlugin"}, "afterCommit": {"oid": "91942e973aab814ce01974b627cdb9561a7de4ab", "author": {"user": {"login": "purplefox", "name": "Tim Fox"}}, "url": "https://github.com/confluentinc/ksql/commit/91942e973aab814ce01974b627cdb9561a7de4ab", "committedDate": "2020-04-08T13:44:31Z", "message": "fixed test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 61, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}