{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU4Mjg0NDE4", "number": 5895, "title": "fix: adds a handler to gracefully shutdown", "bodyText": "Description\nCouple changes related to application lifecycle management. Firstly, adds a shutdown handler\nthat gracefully shuts down the service when the jvm determines its time to shut down (e.g.\nwhen it receives a termination signal). Secondly, this patch reorganizes some of the startup,\nsteady-state, and shutdown code to make shutdown easier to reason about. Specifically, all\nthese methods are now called from the same thread, so both the thread-safety and order of\nexecution are guaranteed. All the shutdown hook does is notify the main thread and then wait\nfor it to exit.\nTesting done\nunit test to ensure shutdown handler is called\nmanual testing of shutdown process\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-07-29T08:38:13Z", "url": "https://github.com/confluentinc/ksql/pull/5895", "merged": true, "mergeCommit": {"oid": "5fbf17188282684834ba45077b45ea65c028c9cb"}, "closed": true, "closedAt": "2020-07-30T04:40:20Z", "author": {"login": "rodesai"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5r8GsAFqTQ1NzU3NzQ5Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6DjA7gFqTQ1ODYxOTg0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NTc3NDky", "url": "https://github.com/confluentinc/ksql/pull/5895#pullrequestreview-457577492", "createdAt": "2020-07-29T14:27:02Z", "commit": {"oid": "c36cb530e7611b76b7f3dd07bf8d471c827b3a3f"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDoyNzowMlrOG47GjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDozMDo1MVrOG47SdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0MTc3Mw==", "bodyText": "Was it a bug that this was here previously, since it means triggerShutdown() was being called from both StandaloneExecutor and KsqlServerMain? (Checking my understanding for why this was removed.)", "url": "https://github.com/confluentinc/ksql/pull/5895#discussion_r462341773", "createdAt": "2020-07-29T14:27:02Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/StandaloneExecutor.java", "diffHunk": "@@ -129,12 +129,17 @@ public void startAsync() {\n       versionChecker.start(KsqlModuleType.SERVER, properties);\n     } catch (final Exception e) {\n       log.error(\"Failed to start KSQL Server with query file: \" + queriesFile, e);\n-      triggerShutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36cb530e7611b76b7f3dd07bf8d471c827b3a3f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0NDgyMA==", "bodyText": "I'm not understanding this test. Are we missing an expectLastCall(); after this line?", "url": "https://github.com/confluentinc/ksql/pull/5895#discussion_r462344820", "createdAt": "2020-07-29T14:30:51Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/rest/server/KsqlServerMainTest.java", "diffHunk": "@@ -90,6 +96,23 @@ public void shouldStopAppOnErrorStarting() throws Exception {\n     verify(executable);\n   }\n \n+  @Test\n+  public void shouldNotifyAppOnTerminate() throws Exception {\n+    // Given:\n+    final Capture<Runnable> captureShutdownHandler = newCapture();\n+    shutdownHandler.execute(capture(captureShutdownHandler));\n+    executable.notifyTerminated();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c36cb530e7611b76b7f3dd07bf8d471c827b3a3f"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd96c84757b80a822103116e06ab5608fccae1e3", "author": {"user": {"login": "rodesai", "name": "Rohan"}}, "url": "https://github.com/confluentinc/ksql/commit/cd96c84757b80a822103116e06ab5608fccae1e3", "committedDate": "2020-07-29T19:48:43Z", "message": "fix: adds a handler to gracefully shutdown service\n\nCouple changes related to application lifecycle management. Firstly, adds a shutdown handler\nthat gracefully shuts down the service when the jvm determines its time to shut down (e.g.\nwhen it receives a termination signal). Secondly, this patch reorganizes some of the startup,\nsteady-state, and shutdown code to make shutdown easier to reason about. Specifically, all\nthese methods are now called from the same thread, so both the thread-safety and order of\nexecution are guaranteed. All the shutdown hook does is notify the main thread and then wait\nfor it to exit."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39f91cd06f6313cbecaf278629d5eb374e2527cf", "author": {"user": {"login": "rodesai", "name": "Rohan"}}, "url": "https://github.com/confluentinc/ksql/commit/39f91cd06f6313cbecaf278629d5eb374e2527cf", "committedDate": "2020-07-29T20:17:16Z", "message": "review feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c36cb530e7611b76b7f3dd07bf8d471c827b3a3f", "author": {"user": {"login": "rodesai", "name": "Rohan"}}, "url": "https://github.com/confluentinc/ksql/commit/c36cb530e7611b76b7f3dd07bf8d471c827b3a3f", "committedDate": "2020-07-29T08:36:28Z", "message": "fix: adds a handler to gracefully shutdown service\n\nCouple changes related to application lifecycle management. Firstly, adds a shutdown handler\nthat gracefully shuts down the service when the jvm determines its time to shut down (e.g.\nwhen it receives a termination signal). Secondly, this patch reorganizes some of the startup,\nsteady-state, and shutdown code to make shutdown easier to reason about. Specifically, all\nthese methods are now called from the same thread, so both the thread-safety and order of\nexecution are guaranteed. All the shutdown hook does is notify the main thread and then wait\nfor it to exit."}, "afterCommit": {"oid": "39f91cd06f6313cbecaf278629d5eb374e2527cf", "author": {"user": {"login": "rodesai", "name": "Rohan"}}, "url": "https://github.com/confluentinc/ksql/commit/39f91cd06f6313cbecaf278629d5eb374e2527cf", "committedDate": "2020-07-29T20:17:16Z", "message": "review feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODY1MTMy", "url": "https://github.com/confluentinc/ksql/pull/5895#pullrequestreview-457865132", "createdAt": "2020-07-29T20:18:28Z", "commit": {"oid": "c36cb530e7611b76b7f3dd07bf8d471c827b3a3f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ed1ce09e55a9bb2c92841fb7aacc2918393b349", "author": {"user": {"login": "rodesai", "name": "Rohan"}}, "url": "https://github.com/confluentinc/ksql/commit/5ed1ce09e55a9bb2c92841fb7aacc2918393b349", "committedDate": "2020-07-30T03:00:37Z", "message": "don't wait for terminates during the test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NjE5ODQw", "url": "https://github.com/confluentinc/ksql/pull/5895#pullrequestreview-458619840", "createdAt": "2020-07-30T17:41:20Z", "commit": {"oid": "5ed1ce09e55a9bb2c92841fb7aacc2918393b349"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzo0MToyMVrOG5tR4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODowMTozNVrOG5uAEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2Mzg3Mw==", "bodyText": "Should we use CAS if startAsync is mistakenly triggered multiple times?", "url": "https://github.com/confluentinc/ksql/pull/5895#discussion_r463163873", "createdAt": "2020-07-30T17:41:21Z", "author": {"login": "guozhangwang"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestApplication.java", "diffHunk": "@@ -305,7 +304,7 @@ public void startAsync() {\n         pullQueryExecutor\n     );\n \n-    startAsyncThread = Thread.currentThread();\n+    startAsyncThreadRef.set(Thread.currentThread());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ed1ce09e55a9bb2c92841fb7aacc2918393b349"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NTY5Ng==", "bodyText": "For my own clarification: why we design tryStartApp itself to be blocking until shutdown, instead of letting this function to return after startup procedure completed, and then having another shutdown function that block until shutdown completes?", "url": "https://github.com/confluentinc/ksql/pull/5895#discussion_r463175696", "createdAt": "2020-07-30T18:01:35Z", "author": {"login": "guozhangwang"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlServerMain.java", "diffHunk": "@@ -55,29 +58,46 @@ public static void main(final String[] args) {\n       final Optional<String> queriesFile = serverOptions.getQueriesFile(properties);\n       final Executable executable = createExecutable(\n           properties, queriesFile, installDir, ksqlConfig);\n-      new KsqlServerMain(executable).tryStartApp();\n+      new KsqlServerMain(\n+          executable,\n+          r -> Runtime.getRuntime().addShutdownHook(new Thread(r))\n+      ).tryStartApp();\n     } catch (final Exception e) {\n       log.error(\"Failed to start KSQL\", e);\n       System.exit(-1);\n     }\n   }\n \n-  KsqlServerMain(final Executable executable) {\n+  KsqlServerMain(final Executable executable, final Executor shutdownHandler) {\n     this.executable = Objects.requireNonNull(executable, \"executable\");\n+    this.shutdownHandler = Objects.requireNonNull(shutdownHandler, \"shutdownHandler\");\n   }\n \n   void tryStartApp() throws Exception {\n+    final CountDownLatch latch = new CountDownLatch(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ed1ce09e55a9bb2c92841fb7aacc2918393b349"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4765, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}