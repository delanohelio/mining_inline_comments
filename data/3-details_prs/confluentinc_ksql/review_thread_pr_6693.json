{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5ODQzMjI2", "number": 6693, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTozOTo1MVrOE-6fJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTo0MTowMFrOE-6gMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDA1NDEzOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTozOTo1MVrOH8UwHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTo0NjowMFrOH8U3kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxNjYwNQ==", "bodyText": "This looks like it should be package-private and marked as VisibleForTesting?", "url": "https://github.com/confluentinc/ksql/pull/6693#discussion_r533016605", "createdAt": "2020-12-01T01:39:51Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SERVER_RATE_LIMITED_REQUEST_PATHS_CONFIG;\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.RateLimiter;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+public class LoggingRateLimiter {\n+\n+  private final Map<String, Double> rateLimitedPaths;\n+  private final Function<Double, RateLimiter> rateLimiterFactory;\n+\n+  private final Map<String, RateLimiter> rateLimiters = new ConcurrentHashMap<>();\n+\n+  public LoggingRateLimiter(final KsqlRestConfig ksqlRestConfig) {\n+    this(ksqlRestConfig, RateLimiter::create);\n+  }\n+\n+  public LoggingRateLimiter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52635ac5a662a8093df86df433b52f8fda27f1c7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxODUxNA==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/6693#discussion_r533018514", "createdAt": "2020-12-01T01:46:00Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SERVER_RATE_LIMITED_REQUEST_PATHS_CONFIG;\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.RateLimiter;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+public class LoggingRateLimiter {\n+\n+  private final Map<String, Double> rateLimitedPaths;\n+  private final Function<Double, RateLimiter> rateLimiterFactory;\n+\n+  private final Map<String, RateLimiter> rateLimiters = new ConcurrentHashMap<>();\n+\n+  public LoggingRateLimiter(final KsqlRestConfig ksqlRestConfig) {\n+    this(ksqlRestConfig, RateLimiter::create);\n+  }\n+\n+  public LoggingRateLimiter(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxNjYwNQ=="}, "originalCommit": {"oid": "52635ac5a662a8093df86df433b52f8fda27f1c7"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDA1NjczOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTo0MDo1NVrOH8Uxgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTo0ODo0OFrOH8U7LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxNjk2Mg==", "bodyText": "Since only the path of the routing context is used here, would it make more sense to pass just the path into this method rather than the entire routing context?", "url": "https://github.com/confluentinc/ksql/pull/6693#discussion_r533016962", "createdAt": "2020-12-01T01:40:55Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SERVER_RATE_LIMITED_REQUEST_PATHS_CONFIG;\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.RateLimiter;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+public class LoggingRateLimiter {\n+\n+  private final Map<String, Double> rateLimitedPaths;\n+  private final Function<Double, RateLimiter> rateLimiterFactory;\n+\n+  private final Map<String, RateLimiter> rateLimiters = new ConcurrentHashMap<>();\n+\n+  public LoggingRateLimiter(final KsqlRestConfig ksqlRestConfig) {\n+    this(ksqlRestConfig, RateLimiter::create);\n+  }\n+\n+  public LoggingRateLimiter(\n+      final KsqlRestConfig ksqlRestConfig,\n+      final Function<Double, RateLimiter> rateLimiterFactory) {\n+    requireNonNull(ksqlRestConfig);\n+    this.rateLimiterFactory = requireNonNull(rateLimiterFactory);\n+    this.rateLimitedPaths = getRateLimitedRequestPaths(ksqlRestConfig);\n+  }\n+\n+  public boolean shouldLog(final RoutingContext routingContext) {\n+    if (rateLimitedPaths.containsKey(routingContext.request().path())) {\n+      final String path = routingContext.request().path();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52635ac5a662a8093df86df433b52f8fda27f1c7"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxOTQzNg==", "bodyText": "I was debating that a bit.  At the moment it only rate limits based upon the path, but in the future, it could be broader.  I'm fine to pass path now and revise in the future.", "url": "https://github.com/confluentinc/ksql/pull/6693#discussion_r533019436", "createdAt": "2020-12-01T01:48:48Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingRateLimiter.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SERVER_RATE_LIMITED_REQUEST_PATHS_CONFIG;\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.RateLimiter;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+public class LoggingRateLimiter {\n+\n+  private final Map<String, Double> rateLimitedPaths;\n+  private final Function<Double, RateLimiter> rateLimiterFactory;\n+\n+  private final Map<String, RateLimiter> rateLimiters = new ConcurrentHashMap<>();\n+\n+  public LoggingRateLimiter(final KsqlRestConfig ksqlRestConfig) {\n+    this(ksqlRestConfig, RateLimiter::create);\n+  }\n+\n+  public LoggingRateLimiter(\n+      final KsqlRestConfig ksqlRestConfig,\n+      final Function<Double, RateLimiter> rateLimiterFactory) {\n+    requireNonNull(ksqlRestConfig);\n+    this.rateLimiterFactory = requireNonNull(rateLimiterFactory);\n+    this.rateLimitedPaths = getRateLimitedRequestPaths(ksqlRestConfig);\n+  }\n+\n+  public boolean shouldLog(final RoutingContext routingContext) {\n+    if (rateLimitedPaths.containsKey(routingContext.request().path())) {\n+      final String path = routingContext.request().path();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxNjk2Mg=="}, "originalCommit": {"oid": "52635ac5a662a8093df86df433b52f8fda27f1c7"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NDA1NjgyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/server/LoggingRateLimiterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTo0MTowMFrOH8UxlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwMTo1Mjo1NVrOH8VAlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxNjk4MQ==", "bodyText": "nit (was confused by the name for a while):\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldLog_notIncluded() {\n          \n          \n            \n              public void shouldLog_notRateLimited) {", "url": "https://github.com/confluentinc/ksql/pull/6693#discussion_r533016981", "createdAt": "2020-12-01T01:41:00Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/server/LoggingRateLimiterTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package io.confluent.ksql.api.server;\n+\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.RateLimiter;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.net.SocketAddress;\n+import io.vertx.ext.web.RoutingContext;\n+import java.time.Clock;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.slf4j.Logger;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LoggingRateLimiterTest {\n+\n+  @Mock\n+  private Server server;\n+  @Mock\n+  private Logger logger;\n+  @Mock\n+  private RateLimiter rateLimiter;\n+  @Mock\n+  private RoutingContext routingContext;\n+  @Mock\n+  private KsqlRestConfig ksqlRestConfig;\n+  @Mock\n+  private HttpServerRequest request;\n+  @Mock\n+  private HttpServerResponse response;\n+  @Mock\n+  private SocketAddress socketAddress;\n+  @Mock\n+  private Clock clock;\n+  @Captor\n+  private ArgumentCaptor<String> logStringCaptor;\n+  @Captor\n+  private ArgumentCaptor<Handler<AsyncResult<Void>>> endCallback;\n+\n+  private LoggingRateLimiter loggingRateLimiter;\n+\n+\n+  @Before\n+  public void setUp() {\n+    when(routingContext.request()).thenReturn(request);\n+    when(request.path()).thenReturn(\"/query\");\n+    when(ksqlRestConfig.getStringAsMap(any())).thenReturn(ImmutableMap.of(\"/query\", \"2\"));\n+    when(rateLimiter.tryAcquire()).thenReturn(true);\n+    loggingRateLimiter = new LoggingRateLimiter(ksqlRestConfig, (rateLimit) -> rateLimiter);\n+  }\n+\n+  @Test\n+  public void shouldLog() {\n+    // When:\n+    assertThat(loggingRateLimiter.shouldLog(routingContext), is(true));\n+\n+    // Then:\n+    verify(rateLimiter).tryAcquire();\n+  }\n+\n+  @Test\n+  public void shouldSkipRateLimited() {\n+    // Given:\n+    when(rateLimiter.tryAcquire()).thenReturn(true, true, false, false);\n+\n+    // When:\n+    assertThat(loggingRateLimiter.shouldLog(routingContext), is(true));\n+    assertThat(loggingRateLimiter.shouldLog(routingContext), is(true));\n+    assertThat(loggingRateLimiter.shouldLog(routingContext), is(false));\n+    assertThat(loggingRateLimiter.shouldLog(routingContext), is(false));\n+\n+    // Then:\n+    verify(rateLimiter, times(4)).tryAcquire();\n+  }\n+\n+  @Test\n+  public void shouldLog_notIncluded() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52635ac5a662a8093df86df433b52f8fda27f1c7"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyMDgyMQ==", "bodyText": "Done.\nI agree, the name was unclear.", "url": "https://github.com/confluentinc/ksql/pull/6693#discussion_r533020821", "createdAt": "2020-12-01T01:52:55Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/server/LoggingRateLimiterTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package io.confluent.ksql.api.server;\n+\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.RateLimiter;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.net.SocketAddress;\n+import io.vertx.ext.web.RoutingContext;\n+import java.time.Clock;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.slf4j.Logger;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LoggingRateLimiterTest {\n+\n+  @Mock\n+  private Server server;\n+  @Mock\n+  private Logger logger;\n+  @Mock\n+  private RateLimiter rateLimiter;\n+  @Mock\n+  private RoutingContext routingContext;\n+  @Mock\n+  private KsqlRestConfig ksqlRestConfig;\n+  @Mock\n+  private HttpServerRequest request;\n+  @Mock\n+  private HttpServerResponse response;\n+  @Mock\n+  private SocketAddress socketAddress;\n+  @Mock\n+  private Clock clock;\n+  @Captor\n+  private ArgumentCaptor<String> logStringCaptor;\n+  @Captor\n+  private ArgumentCaptor<Handler<AsyncResult<Void>>> endCallback;\n+\n+  private LoggingRateLimiter loggingRateLimiter;\n+\n+\n+  @Before\n+  public void setUp() {\n+    when(routingContext.request()).thenReturn(request);\n+    when(request.path()).thenReturn(\"/query\");\n+    when(ksqlRestConfig.getStringAsMap(any())).thenReturn(ImmutableMap.of(\"/query\", \"2\"));\n+    when(rateLimiter.tryAcquire()).thenReturn(true);\n+    loggingRateLimiter = new LoggingRateLimiter(ksqlRestConfig, (rateLimit) -> rateLimiter);\n+  }\n+\n+  @Test\n+  public void shouldLog() {\n+    // When:\n+    assertThat(loggingRateLimiter.shouldLog(routingContext), is(true));\n+\n+    // Then:\n+    verify(rateLimiter).tryAcquire();\n+  }\n+\n+  @Test\n+  public void shouldSkipRateLimited() {\n+    // Given:\n+    when(rateLimiter.tryAcquire()).thenReturn(true, true, false, false);\n+\n+    // When:\n+    assertThat(loggingRateLimiter.shouldLog(routingContext), is(true));\n+    assertThat(loggingRateLimiter.shouldLog(routingContext), is(true));\n+    assertThat(loggingRateLimiter.shouldLog(routingContext), is(false));\n+    assertThat(loggingRateLimiter.shouldLog(routingContext), is(false));\n+\n+    // Then:\n+    verify(rateLimiter, times(4)).tryAcquire();\n+  }\n+\n+  @Test\n+  public void shouldLog_notIncluded() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAxNjk4MQ=="}, "originalCommit": {"oid": "52635ac5a662a8093df86df433b52f8fda27f1c7"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2467, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}