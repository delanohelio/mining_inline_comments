{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NDk2MDg5", "number": 4596, "title": "feat: introduce JSON_SR format", "bodyText": "Description\nIntroduce a new format to be able to read the data that is produced by confluent's json serializers that append a magic byte and the schema ID to standard JSON. Note that we can't just use the standard deserializer because we require the mapper to use USE_BIG_DECIMAL_FOR_FLOATS to avoid deserializing\nTesting done\nUnit testing and local testing.\nNOTE: still needs support for print topic\nksql> CREATE STREAM json_sr (col1 VARCHAR, col2 INT) WITH (kafka_topic='json_sr', value_format='JSON_SR', partitions=1);\n\n Message\n----------------\n Stream created\n----------------\nksql> INSERT INTO json_sr (col1, col2) VALUES ('foo', 1);\nksql> PRINT json_sr FROM BEGINNING;\nKey format: UNDEFINED\nValue format: KAFKA (STRING)\nrowtime: 2/19/20 3:33:07 PM PST, key: <null>, value: {\"COL1\":\"foo\",\"COL2\":1}\n+----------------------+----------------------+----------------------+----------------------+\n|ROWTIME               |ROWKEY                |COL1                  |COL2                  |\n+----------------------+----------------------+----------------------+----------------------+\n|1582155187492         |null                  |foo                   |1                     |\n\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-02-20T00:59:35Z", "url": "https://github.com/confluentinc/ksql/pull/4596", "merged": true, "mergeCommit": {"oid": "daa04d237aa78041cd85f813dbbba27fcf464452"}, "closed": true, "closedAt": "2020-02-26T20:57:31Z", "author": {"login": "agavra"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGR4ebABqjMwNTgyNjUzODU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcINFQZgFqTM2NTIzMjU3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a1ef922587f59e34160d11031896dfb96c9ee96b", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/a1ef922587f59e34160d11031896dfb96c9ee96b", "committedDate": "2020-02-20T00:26:13Z", "message": "feat: introduce JSON_SR format"}, "afterCommit": {"oid": "70c401d2744b837ee78bf69713f1312f09ef21ae", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/70c401d2744b837ee78bf69713f1312f09ef21ae", "committedDate": "2020-02-20T21:19:22Z", "message": "feat: introduce JSON_SR format"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "70c401d2744b837ee78bf69713f1312f09ef21ae", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/70c401d2744b837ee78bf69713f1312f09ef21ae", "committedDate": "2020-02-20T21:19:22Z", "message": "feat: introduce JSON_SR format"}, "afterCommit": {"oid": "479c78603a5a71a36f7703353ed7258c25b823ab", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/479c78603a5a71a36f7703353ed7258c25b823ab", "committedDate": "2020-02-20T21:24:25Z", "message": "feat: introduce JSON_SR format"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "479c78603a5a71a36f7703353ed7258c25b823ab", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/479c78603a5a71a36f7703353ed7258c25b823ab", "committedDate": "2020-02-20T21:24:25Z", "message": "feat: introduce JSON_SR format"}, "afterCommit": {"oid": "1a8cc2911ca05e881a84c617021bc505d1d3f8a8", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/1a8cc2911ca05e881a84c617021bc505d1d3f8a8", "committedDate": "2020-02-20T22:30:52Z", "message": "feat: introduce JSON_SR format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MDQ5NzU3", "url": "https://github.com/confluentinc/ksql/pull/4596#pullrequestreview-364049757", "createdAt": "2020-02-25T10:56:03Z", "commit": {"oid": "1a8cc2911ca05e881a84c617021bc505d1d3f8a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDo1NjowM1rOFuBqEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDo1NjowM1rOFuBqEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgwNTk2OQ==", "bodyText": "Why does this need to return an InputStream? It seems that all the callers really just want the bytes.\nWould it be simpler (and more efficient) just to slice the byte[] and return another one with the prefix removed?\nAlso.. I know this InputStream won't block, but as we move to a more reactive / non blocking model in the server we should avoid using blocking constructs such as input and output streams and favour buffers.", "url": "https://github.com/confluentinc/ksql/pull/4596#discussion_r383805969", "createdAt": "2020-02-25T10:56:03Z", "author": {"login": "purplefox"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/json/JsonSerdeUtils.java", "diffHunk": "@@ -23,14 +23,59 @@\n import io.confluent.ksql.schema.connect.SchemaWalker.Visitor;\n import io.confluent.ksql.schema.ksql.PersistenceSchema;\n import io.confluent.ksql.schema.ksql.SqlBaseType;\n+import io.confluent.ksql.util.KsqlException;\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import javax.annotation.Nonnull;\n import org.apache.kafka.connect.data.Schema;\n import org.apache.kafka.connect.data.Schema.Type;\n \n-final class JsonSerdeUtils {\n+public final class JsonSerdeUtils {\n+\n+  // the JsonSchemaConverter adds a magic NULL byte and 4 bytes for the\n+  // schema ID at the start of the message\n+  private static final int SIZE_OF_SR_PREFIX = Byte.BYTES + Integer.BYTES;\n \n   private JsonSerdeUtils() {\n   }\n \n+  /**\n+   * Converts {@code jsonWithMagic} into an {@link InputStream} that represents\n+   * standard JSON encoding.\n+   *\n+   * @param jsonWithMagic the serialized JSON\n+   * @return the corresponding input stream\n+   * @throws io.confluent.ksql.util.KsqlException If the input is not encoded\n+   *         using the schema registry format (first byte magic byte, then\n+   *         four bytes for the schemaID).\n+   */\n+  public static InputStream asStandardJson(@Nonnull final byte[] jsonWithMagic) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a8cc2911ca05e881a84c617021bc505d1d3f8a8"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MjAzNTAz", "url": "https://github.com/confluentinc/ksql/pull/4596#pullrequestreview-364203503", "createdAt": "2020-02-25T14:54:23Z", "commit": {"oid": "1a8cc2911ca05e881a84c617021bc505d1d3f8a8"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNDo1NDoyM1rOFuJJ5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxNToyNjo0N1rOFuKd5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyODgwNg==", "bodyText": "Can we rename this to make the code where its use read more intuitively?  Maybe:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static InputStream asStandardJson(@Nonnull final byte[] jsonWithMagic) {\n          \n          \n            \n              public static InputStream stripSchemaId(@Nonnull final byte[] jsonWithMagic) {", "url": "https://github.com/confluentinc/ksql/pull/4596#discussion_r383928806", "createdAt": "2020-02-25T14:54:23Z", "author": {"login": "big-andy-coates"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/json/JsonSerdeUtils.java", "diffHunk": "@@ -23,14 +23,59 @@\n import io.confluent.ksql.schema.connect.SchemaWalker.Visitor;\n import io.confluent.ksql.schema.ksql.PersistenceSchema;\n import io.confluent.ksql.schema.ksql.SqlBaseType;\n+import io.confluent.ksql.util.KsqlException;\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import javax.annotation.Nonnull;\n import org.apache.kafka.connect.data.Schema;\n import org.apache.kafka.connect.data.Schema.Type;\n \n-final class JsonSerdeUtils {\n+public final class JsonSerdeUtils {\n+\n+  // the JsonSchemaConverter adds a magic NULL byte and 4 bytes for the\n+  // schema ID at the start of the message\n+  private static final int SIZE_OF_SR_PREFIX = Byte.BYTES + Integer.BYTES;\n \n   private JsonSerdeUtils() {\n   }\n \n+  /**\n+   * Converts {@code jsonWithMagic} into an {@link InputStream} that represents\n+   * standard JSON encoding.\n+   *\n+   * @param jsonWithMagic the serialized JSON\n+   * @return the corresponding input stream\n+   * @throws io.confluent.ksql.util.KsqlException If the input is not encoded\n+   *         using the schema registry format (first byte magic byte, then\n+   *         four bytes for the schemaID).\n+   */\n+  public static InputStream asStandardJson(@Nonnull final byte[] jsonWithMagic) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a8cc2911ca05e881a84c617021bc505d1d3f8a8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzkyOTM1Mw==", "bodyText": "Are we sure this error message is the right way around?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          + \"the stream is declared with JSON_SR format (not JSON).\");\n          \n          \n            \n                          + \"the stream is declared with JSON format (not JSON_SR).\");\n          \n      \n    \n    \n  \n\nAlso, not sure users will know what JsonSchemaConverter is.  Can we explain this in a more simple manner? e.g. maybe talking about \"serialized by a SchemaRegistry aware serializer\"?", "url": "https://github.com/confluentinc/ksql/pull/4596#discussion_r383929353", "createdAt": "2020-02-25T14:55:11Z", "author": {"login": "big-andy-coates"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/json/JsonSerdeUtils.java", "diffHunk": "@@ -23,14 +23,59 @@\n import io.confluent.ksql.schema.connect.SchemaWalker.Visitor;\n import io.confluent.ksql.schema.ksql.PersistenceSchema;\n import io.confluent.ksql.schema.ksql.SqlBaseType;\n+import io.confluent.ksql.util.KsqlException;\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import javax.annotation.Nonnull;\n import org.apache.kafka.connect.data.Schema;\n import org.apache.kafka.connect.data.Schema.Type;\n \n-final class JsonSerdeUtils {\n+public final class JsonSerdeUtils {\n+\n+  // the JsonSchemaConverter adds a magic NULL byte and 4 bytes for the\n+  // schema ID at the start of the message\n+  private static final int SIZE_OF_SR_PREFIX = Byte.BYTES + Integer.BYTES;\n \n   private JsonSerdeUtils() {\n   }\n \n+  /**\n+   * Converts {@code jsonWithMagic} into an {@link InputStream} that represents\n+   * standard JSON encoding.\n+   *\n+   * @param jsonWithMagic the serialized JSON\n+   * @return the corresponding input stream\n+   * @throws io.confluent.ksql.util.KsqlException If the input is not encoded\n+   *         using the schema registry format (first byte magic byte, then\n+   *         four bytes for the schemaID).\n+   */\n+  public static InputStream asStandardJson(@Nonnull final byte[] jsonWithMagic) {\n+    if (!hasMagicByte(jsonWithMagic)) {\n+      // don't log contents of jsonWithMagic to avoid leaking data into the logs\n+      throw new KsqlException(\n+          \"Got unexpected JSON serialization format that did not start with the magic byte. If \"\n+              + \"this stream was not serialized using the JsonSchemaConverter, then make sure \"\n+              + \"the stream is declared with JSON_SR format (not JSON).\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a8cc2911ca05e881a84c617021bc505d1d3f8a8"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0MDc3MA==", "bodyText": "If we need the mapper to have USE_BIG_DECIMAL_FOR_FLOATS for decimals to work, should we maybe include some doubles and decimals in the test data?", "url": "https://github.com/confluentinc/ksql/pull/4596#discussion_r383940770", "createdAt": "2020-02-25T15:12:10Z", "author": {"login": "big-andy-coates"}, "path": "ksql-functional-tests/src/test/resources/query-validation-tests/elements.json", "diffHunk": "@@ -60,6 +60,27 @@\n       \"inputs\": [{\"topic\": \"input\", \"value\": {\"c1\": 4}}],\n       \"outputs\": [{\"topic\": \"OUTPUT\", \"value\": {\"C1\": 4}}]\n     },\n+    {\n+      \"name\": \"validate without elements OK - JSON_SR SCHEMA\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT WITH (kafka_topic='input', value_format='JSON_SR');\",\n+        \"CREATE STREAM OUTPUT WITH(PARTITIONS = 4) as SELECT * FROM input;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input\",\n+          \"schema\": {\"type\": \"object\",\"properties\": {\"c1\": {\"type\": \"integer\"}}},\n+          \"format\": \"JSON_SR\"\n+        },\n+        {\n+          \"name\": \"OUTPUT\",\n+          \"format\": \"JSON_SR\",\n+          \"partitions\": 4\n+        }\n+      ],\n+      \"inputs\": [{\"topic\": \"input\", \"value\": {\"c1\": 4}}],\n+      \"outputs\": [{\"topic\": \"OUTPUT\", \"value\": {\"C1\": 4}}]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a8cc2911ca05e881a84c617021bc505d1d3f8a8"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0MTQ2OQ==", "bodyText": "nit: The naming JsonSchemaFormat doesn't make it immediately obvious how this is different to JsonFormat. Maybe SchemaRegistryJsonFormat?", "url": "https://github.com/confluentinc/ksql/pull/4596#discussion_r383941469", "createdAt": "2020-02-25T15:13:16Z", "author": {"login": "big-andy-coates"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/FormatFactory.java", "diffHunk": "@@ -52,6 +54,7 @@ public static Format fromName(final String name) {\n     switch (name) {\n       case AvroFormat.NAME:       return AVRO;\n       case JsonFormat.NAME:       return JSON;\n+      case JsonSchemaFormat.NAME: return JSON_SR;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a8cc2911ca05e881a84c617021bc505d1d3f8a8"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0MjM4NQ==", "bodyText": "nit: final", "url": "https://github.com/confluentinc/ksql/pull/4596#discussion_r383942385", "createdAt": "2020-02-25T15:14:41Z", "author": {"login": "big-andy-coates"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/json/JsonSchemaFormat.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.serde.json;\n+\n+import io.confluent.connect.json.JsonSchemaData;\n+import io.confluent.kafka.schemaregistry.ParsedSchema;\n+import io.confluent.kafka.schemaregistry.json.JsonSchema;\n+import io.confluent.ksql.serde.Format;\n+import io.confluent.ksql.serde.FormatInfo;\n+import io.confluent.ksql.serde.KsqlSerdeFactory;\n+import org.apache.kafka.connect.data.Schema;\n+\n+public class JsonSchemaFormat implements Format {\n+\n+  public static final String NAME = \"JSON_SR\";\n+\n+  private JsonSchemaData jsonData;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a8cc2911ca05e881a84c617021bc505d1d3f8a8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk0MzY2OQ==", "bodyText": "Now both JsonSchemaformat and JsonFormat say they support schema inference from the Schema Registry.\nIs this still correct, or should JsonFormat no longer be saying it supports schema inference?  If it is still the case, isn't this going to be confusing for users?", "url": "https://github.com/confluentinc/ksql/pull/4596#discussion_r383943669", "createdAt": "2020-02-25T15:16:38Z", "author": {"login": "big-andy-coates"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/json/JsonSchemaFormat.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.serde.json;\n+\n+import io.confluent.connect.json.JsonSchemaData;\n+import io.confluent.kafka.schemaregistry.ParsedSchema;\n+import io.confluent.kafka.schemaregistry.json.JsonSchema;\n+import io.confluent.ksql.serde.Format;\n+import io.confluent.ksql.serde.FormatInfo;\n+import io.confluent.ksql.serde.KsqlSerdeFactory;\n+import org.apache.kafka.connect.data.Schema;\n+\n+public class JsonSchemaFormat implements Format {\n+\n+  public static final String NAME = \"JSON_SR\";\n+\n+  private JsonSchemaData jsonData;\n+\n+  public JsonSchemaFormat() {\n+    this.jsonData = new JsonSchemaData();\n+  }\n+\n+  @Override\n+  public String name() {\n+    return NAME;\n+  }\n+\n+  @Override\n+  public boolean supportsSchemaInference() {\n+    return true;\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a8cc2911ca05e881a84c617021bc505d1d3f8a8"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzk1MDMwOA==", "bodyText": "I think Almog is trying to avoid the array copy for every message when deserializing. This could be premature optimisation, but I'm guessing it will hurt performance as we already know serialization is a large cost to us.\nAn alternative to copying the data into a new buffer would be to build a parser with the original buffer and with the suitable offset:, i.e. change a line like:\n// Original code that deserialized the whole byte array:\nMAPPER.readTree(bytes);\nto\n// Build a parser with the whole array and appropriate offset into that array:\n// This avoids the array copy at the cost of slightly more complex code.\nfinal int offset = isJsonSchema ? JsonSerdeUtils.SIZE_OF_SR_PREFIX : 0;\nMAPPER.readTree(MAPPER.getFactory().createParser(bytes, offset, bytes.length - offset));", "url": "https://github.com/confluentinc/ksql/pull/4596#discussion_r383950308", "createdAt": "2020-02-25T15:26:47Z", "author": {"login": "big-andy-coates"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/json/JsonSerdeUtils.java", "diffHunk": "@@ -23,14 +23,59 @@\n import io.confluent.ksql.schema.connect.SchemaWalker.Visitor;\n import io.confluent.ksql.schema.ksql.PersistenceSchema;\n import io.confluent.ksql.schema.ksql.SqlBaseType;\n+import io.confluent.ksql.util.KsqlException;\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import javax.annotation.Nonnull;\n import org.apache.kafka.connect.data.Schema;\n import org.apache.kafka.connect.data.Schema.Type;\n \n-final class JsonSerdeUtils {\n+public final class JsonSerdeUtils {\n+\n+  // the JsonSchemaConverter adds a magic NULL byte and 4 bytes for the\n+  // schema ID at the start of the message\n+  private static final int SIZE_OF_SR_PREFIX = Byte.BYTES + Integer.BYTES;\n \n   private JsonSerdeUtils() {\n   }\n \n+  /**\n+   * Converts {@code jsonWithMagic} into an {@link InputStream} that represents\n+   * standard JSON encoding.\n+   *\n+   * @param jsonWithMagic the serialized JSON\n+   * @return the corresponding input stream\n+   * @throws io.confluent.ksql.util.KsqlException If the input is not encoded\n+   *         using the schema registry format (first byte magic byte, then\n+   *         four bytes for the schemaID).\n+   */\n+  public static InputStream asStandardJson(@Nonnull final byte[] jsonWithMagic) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgwNTk2OQ=="}, "originalCommit": {"oid": "1a8cc2911ca05e881a84c617021bc505d1d3f8a8"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68e092e7a781ec7b9c146aa92cb659f15e5d530a", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/68e092e7a781ec7b9c146aa92cb659f15e5d530a", "committedDate": "2020-02-26T18:22:27Z", "message": "feat: introduce JSON_SR format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "149c74a588a71e9ae8c4d77de6ab09f9fcb85897", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/149c74a588a71e9ae8c4d77de6ab09f9fcb85897", "committedDate": "2020-02-26T18:22:28Z", "message": "fix: address andy/tims comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "536fac33ed5587b43188818a032baad34015972a", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/536fac33ed5587b43188818a032baad34015972a", "committedDate": "2020-02-26T18:30:49Z", "message": "test: more tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a8cc2911ca05e881a84c617021bc505d1d3f8a8", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/1a8cc2911ca05e881a84c617021bc505d1d3f8a8", "committedDate": "2020-02-20T22:30:52Z", "message": "feat: introduce JSON_SR format"}, "afterCommit": {"oid": "536fac33ed5587b43188818a032baad34015972a", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/536fac33ed5587b43188818a032baad34015972a", "committedDate": "2020-02-26T18:30:49Z", "message": "test: more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e8a2960d37d51697842a9d756f0aa0c72053af4", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/1e8a2960d37d51697842a9d756f0aa0c72053af4", "committedDate": "2020-02-26T19:52:15Z", "message": "test: add generated plan"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjE4NjU0", "url": "https://github.com/confluentinc/ksql/pull/4596#pullrequestreview-365218654", "createdAt": "2020-02-26T20:29:08Z", "commit": {"oid": "1e8a2960d37d51697842a9d756f0aa0c72053af4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoyOTowOVrOFu7Dgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMDoyOTowOVrOFu7Dgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc0NjM3MQ==", "bodyText": "Null check here?", "url": "https://github.com/confluentinc/ksql/pull/4596#discussion_r384746371", "createdAt": "2020-02-26T20:29:09Z", "author": {"login": "vpapavas"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/json/KsqlJsonDeserializer.java", "diffHunk": "@@ -75,12 +75,15 @@\n       .build();\n \n   private final PersistenceSchema physicalSchema;\n+  private final boolean isJsonSchema;\n   private String target = \"?\";\n \n   public KsqlJsonDeserializer(\n-      final PersistenceSchema physicalSchema\n+      final PersistenceSchema physicalSchema,\n+      final boolean isJsonSchema\n   ) {\n     this.physicalSchema = JsonSerdeUtils.validateSchema(physicalSchema);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e8a2960d37d51697842a9d756f0aa0c72053af4"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MjMyNTc0", "url": "https://github.com/confluentinc/ksql/pull/4596#pullrequestreview-365232574", "createdAt": "2020-02-26T20:51:59Z", "commit": {"oid": "1e8a2960d37d51697842a9d756f0aa0c72053af4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4847, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}