{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NzE1Njg0", "number": 4404, "title": " chore: add full window bounds support to pull queries", "bodyText": "Description\nfixes: #3633\nfixes: #3619\nThis change sees pull queries share more functionality and code around the window bounds columns WINDOWSTART and WINDOWEND introduced in #4388 and #4401.\n\npull queries on time windowed sources, i.e. TUMBLING and HOPPING, now have a WINDOWEND in their schema, just like SESSION and the new push query functionality.\nwindow bound columns are now accessible within the projection of a pull query, e.g. SELECT WINDOWSTART, WINDOWEND FROM FOO WHERE ROWKEY=1;\n\nReviewing notes:\n\nTo support WINDOWEND for hopping and tumbling windows I've passed the window size down to KsMaterializedWindowTable. This also means Windows end time no longer needs to be Optional.\nThe PullQueryExecutor and TableRowEntityFactory have been updated to add WINDOWSTART and WINDOWEND by using LogicalSchema.withMetaAndKeyValueColumns(). This also means we no longer need the referenceValueColumnsOnly flag on ExpressionTypeManager\nThe PullQueryExecutor has been updated to insert the window.end time when processing rows.\n\nSo the only files that really have meaningful code changes are:\n\nWindow.java\nKsMaterializedWindowTable.java\nPullQueryExecutor.java\nTableRowEntityFactory.java\nExpressionTypeManager.java\nand the JSON test files.\n\nThe rest is just plumbing or changing related to removed parameter on ExpressionTypeManager or non-optional end time on Window..\nTesting done\nusual\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-01-29T19:01:09Z", "url": "https://github.com/confluentinc/ksql/pull/4404", "merged": true, "mergeCommit": {"oid": "87d9fb8efd57eec9e7e709e58c71b76844b15f87"}, "closed": true, "closedAt": "2020-01-30T10:22:13Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_ELmfgH2gAyMzY4NzE1Njg0OmQ5ZDRiMzkwMWM1NWRmMjk2ODIyMWQ3NzkzYzQ5MmQ5YWU1MDdiYzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_TxRFAFqTM1MDU4OTc2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d9d4b3901c55df2968221d7793c492d9ae507bc1", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/d9d4b3901c55df2968221d7793c492d9ae507bc1", "committedDate": "2020-01-29T11:24:27Z", "message": "chore: support window bounds columns in persistent and pull queries\n\nfixes: https://github.com/confluentinc/ksql/issues/3871\n\nIs needed to fix:\n- https://github.com/confluentinc/ksql/issues/3633\n- https://github.com/confluentinc/ksql/issues/4015\n\nBefore this change the version of `ROWKEY` copied to the value schema during processing of data in the Streams topology was always of type `STRING` regardless of the actual key type. This is because windowed keys had a `ROWKEY` in the format `<actual key> : Window{start=<windowStart>, end=<windowEnd>}`. While `ROWKEY` in the value schema was a `STRING`, `ROWKEY` in the key schema was the actual type, e.g. `INT`.  This is confusing and will lead to bugs.  Also, the formated string isn't very friendly for users.\n\nThis change looks to introduce the `WINDOWSTART` and `WINDOWEND` columns that were reserved in https://github.com/confluentinc/ksql/pull/4388. The obvious approach would be to add `WINDOWSTART` and `WINDOWEND` as columns in the key schema. Unfortunately, this would be a much bigger change as many parts of the code currently rely on there being only a single key column. The planned structured key work will resolve this.\n\nFor now, we only add the windows bounds columns when we `LogicalSchema.withMetaAndKeyColsInValue(true)`. This is a bit of a temporary hack, but gets us where we need to be. This will be cleaned up as part of the structured key work.\n\nWith this change `ROWKEY` for windowed sources no longer has the format `<actual key> : Window{start=<windowStart>, end=<windowEnd>}`: `ROWKEY` is now only the _actual_ key and the window bounds can be accessed by `WINDOWSTART` and `WINDOWEND`. These two window bounds columns are included in a pull `SELECT *` query. Likewise a join will include the window bounds columns from both sides in the join result if the join is `SELECT *`.\n\n## Examples:\n\n### Push queries\n\n* A select * on a windowed source will not include `WINDOWSTART` and `WINDOWEND`. `ROWKEY` will be the actual key, not a formatted string.\n\n```\nksql> SELECT * FROM windowedSource emit changes\n\n-- old output\n+---------------+------------------------------------------------------+--------+---------+------+\n| ROWTIME       | ROWKEY                                               | USERID | PAGEID  | TOTAL|\n+---------------+------------------------------------------------------+--------+---------+------+\n| 1557183929488 | User_9|+|Page_39 : Window{start=1557183900000 end=-} | User_9 | Page_39 | 1    |\n| 1557183930211 | User_1|+|Page_79 : Window{start=1557183900000 end=-} | User_1 | Page_79 | 1    |\n\n-- new output\n+---------------+---------------+---------------+------------------+--------+---------+------+\n| ROWTIME       | WINDOWSTART   | WINDOWEND     | ROWKEY           | USERID | PAGEID  | TOTAL|\n+---------------+---------------+---------------+------------------+--------+---------+------+\n| 1557183919786 | 1557183900000 | 1557183960000 | User_5|+|Page_12 | User_5 | Page_12 | 1    |\n| 1557183929488 | 1557183900000 | 1557183960000 | User_9|+|Page_39 | User_9 | Page_39 | 1    |\n```\n\n* `WINDOWSTART` and `WINDOWEND` are available in the SELECT, GROUPBY, WHERE, HAVING clauses etc.\n\nFor example:\n\n```sql\nSELECT TIMESTAMPTOSTRING(WINDOWSTART,'yyyy-MM-dd HH:mm:ss Z') FROM windowedSource emit changes;\n```\n\nHowever, don't get too excited just yet as there is a known limitation that drastically reduces the availability of this syntax:\n\n**KNOWN LIMITATION**\nWhere a query builds a windowed source from a non-windowed source the window bounds columns are not available.  For example:\n\n```\n-- won't yet work:\nSELECT WINDOWSTART FROM FROM someSource WINDOW TUMBLING (SIZE 1 SECOND) group by ROWKEY;\n```\n\nThis issue is tracked by: https://github.com/confluentinc/ksql/issues/4397\n\n* Joins of windowed sources include the `WINDOWSTART` and `WINDOWEND` columns from both sides.\n\n### Pull queries\n\n**KNOWN LIMITATION**\nPull queries have not been updated yet. This will be done in a follow up PR https://github.com/confluentinc/ksql/issues/3633. This is mainly to keep this PR manageable.\n\n### Persistent queries\n\nPersistent C*AS queries work similar to push queries and have the same known limitation.\n\nBREAKING CHANGE: Any query of a windowed source that uses `ROWKEY` in the SELECT projection will see the contents of `ROWKEY` change from a formatted `STRING` containing the underlying key and the window bounds, to just the underlying key.  Queries can access the window bounds using `WINDOWSTART` and `WINDOWEND`.\n\nBREAKING CHANGE: Joins on windowed sources now include `WINDOWSTART` and `WINDOWEND` columns from both sides on a `SELECT *`."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acd9f27000a7fa80024d5dc5dfee12a28db6784d", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/acd9f27000a7fa80024d5dc5dfee12a28db6784d", "committedDate": "2020-01-29T12:03:01Z", "message": "chore: must of been tripping\n\nKSQL does support `<` operator for strings... revert doc change & add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "537aa562f086c1694ecf55843db623c4a00a898e", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/537aa562f086c1694ecf55843db623c4a00a898e", "committedDate": "2020-01-29T19:00:08Z", "message": "chore: add full window bounds support to pull queries\n\nfixes: https://github.com/confluentinc/ksql/issues/3633\n\nThis change sees pull queries share more functionality and code around the window bounds columns `WINDOWSTART` and `WINDOWEND` introduced in https://github.com/confluentinc/ksql/pull/4388 and https://github.com/confluentinc/ksql/pull/4401.\n\n* pull queries on time windowed sources, i.e. `TUMBLING` and `HOPPING`, now have a `WINDOWEND` in their schema, just like `SESSION` and the new push query functionality.\n* window bound columns are now accessible within the projection of a pull query, e.g. `SELECT WINDOWSTART, WINDOWEND FROM FOO WHERE ROWKEY=1;`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22239bbb730084ab53d8dd5feead9d45eacccd99", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/22239bbb730084ab53d8dd5feead9d45eacccd99", "committedDate": "2020-01-29T21:44:06Z", "message": "chore: merge from master\n\nConflicting files\ndocs-md/developer-guide/create-a-stream.md\ndocs-md/developer-guide/create-a-table.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNDUxNDI5", "url": "https://github.com/confluentinc/ksql/pull/4404#pullrequestreview-350451429", "createdAt": "2020-01-29T21:53:56Z", "commit": {"oid": "22239bbb730084ab53d8dd5feead9d45eacccd99"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo1Mzo1N1rOFjY24Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMTo1Mzo1N1rOFjY24Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjY1MTc0NQ==", "bodyText": "Bit hacky, but will work for now.", "url": "https://github.com/confluentinc/ksql/pull/4404#discussion_r372651745", "createdAt": "2020-01-29T21:53:57Z", "author": {"login": "big-andy-coates"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -647,22 +657,27 @@ private static void validateProjection(\n   private static LogicalSchema selectOutputSchema(\n       final Result input,\n       final KsqlExecutionContext executionContext,\n-      final ImmutableAnalysis analysis\n+      final ImmutableAnalysis analysis,\n+      final Optional<WindowType> windowType\n   ) {\n     final Builder schemaBuilder = LogicalSchema.builder()\n         .noImplicitColumns();\n \n-    final ExpressionTypeManager expressionTypeManager = new ExpressionTypeManager(\n-        input.schema,\n-        executionContext.getMetaStore(),\n-        false\n-    );\n+    // Copy meta & key columns into the value schema as SelectValueMapper expects it:\n+    final LogicalSchema schema = input.schema\n+        .withMetaAndKeyColsInValue(windowType.isPresent());\n+\n+    final ExpressionTypeManager expressionTypeManager =\n+        new ExpressionTypeManager(schema, executionContext.getMetaStore());\n \n     for (int idx = 0; idx < analysis.getSelectExpressions().size(); idx++) {\n       final SelectExpression select = analysis.getSelectExpressions().get(idx);\n       final SqlType type = expressionTypeManager.getExpressionSqlType(select.getExpression());\n \n-      if (input.schema.isKeyColumn(select.getAlias())) {\n+      if (input.schema.isKeyColumn(select.getAlias())\n+          || select.getAlias().equals(SchemaUtil.WINDOWSTART_NAME)\n+          || select.getAlias().equals(SchemaUtil.WINDOWEND_NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22239bbb730084ab53d8dd5feead9d45eacccd99"}, "originalPosition": 143}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNTE4ODI5", "url": "https://github.com/confluentinc/ksql/pull/4404#pullrequestreview-350518829", "createdAt": "2020-01-30T00:34:07Z", "commit": {"oid": "22239bbb730084ab53d8dd5feead9d45eacccd99"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMDozNDowN1rOFjcLyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMDozNjozNVrOFjcOKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcwNjI0OA==", "bodyText": "please make sure to specify 'UTC' as the time zone :) it passes on your local machine, it passes on jenkins, but it breaks on our plebeian PTC machines.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"SELECT ROWKEY, TIMESTAMPTOSTRING(WINDOWSTART, 'yyyy-MM-dd HH:mm:ss Z') AS WSTART, TIMESTAMPTOSTRING(WINDOWEND, 'yyyy-MM-dd HH:mm:ss Z') AS WEND, COUNT FROM AGGREGATE WHERE ROWKEY='10';\"\n          \n          \n            \n                    \"SELECT ROWKEY, TIMESTAMPTOSTRING(WINDOWSTART, 'yyyy-MM-dd HH:mm:ss Z', 'UTC') AS WSTART, TIMESTAMPTOSTRING(WINDOWEND, 'yyyy-MM-dd HH:mm:ss Z', 'UTC') AS WEND, COUNT FROM AGGREGATE WHERE ROWKEY='10';\"", "url": "https://github.com/confluentinc/ksql/pull/4404#discussion_r372706248", "createdAt": "2020-01-30T00:34:07Z", "author": {"login": "agavra"}, "path": "ksql-functional-tests/src/test/resources/rest-query-validation-tests/pull-queries-against-materialized-aggregates.json", "diffHunk": "@@ -955,6 +955,25 @@\n         \"message\": \"Column 'AGGREGATE.WINDOWSTART' cannot be resolved\",\n         \"status\": 400\n       }\n+    },\n+    {\n+      \"name\": \"window bounds in projection UDF\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (IGNORED INT) WITH (kafka_topic='test_topic', value_format='JSON');\",\n+        \"CREATE TABLE AGGREGATE AS SELECT COUNT(1) AS COUNT FROM INPUT WINDOW TUMBLING(SIZE 1 SECOND) GROUP BY ROWKEY;\",\n+        \"SELECT ROWKEY, TIMESTAMPTOSTRING(WINDOWSTART, 'yyyy-MM-dd HH:mm:ss Z') AS WSTART, TIMESTAMPTOSTRING(WINDOWEND, 'yyyy-MM-dd HH:mm:ss Z') AS WEND, COUNT FROM AGGREGATE WHERE ROWKEY='10';\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22239bbb730084ab53d8dd5feead9d45eacccd99"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcwNjg1OQ==", "bodyText": "just sanity checking, the reason we're adding this at 1 and 2 is so that they come after the ROWTIME but before the ROWKEY? Might help to have constants for these numbers. Also might help to add the key fields after the start/end. Super nits.", "url": "https://github.com/confluentinc/ksql/pull/4404#discussion_r372706859", "createdAt": "2020-01-30T00:36:35Z", "author": {"login": "agavra"}, "path": "ksql-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -559,37 +563,43 @@ private static boolean isSelectStar(final Select select) {\n       final KsqlExecutionContext executionContext,\n       final ImmutableAnalysis analysis,\n       final LogicalSchema outputSchema,\n+      final Optional<WindowType> windowType,\n       final QueryId queryId,\n       final Stacker contextStacker\n   ) {\n-    final boolean referencesRowTime = analysis.getSelectColumnRefs().stream()\n-        .anyMatch(ref -> ref.name().equals(SchemaUtil.ROWTIME_NAME));\n-\n-    final boolean referencesRowKey = analysis.getSelectColumnRefs().stream()\n-        .anyMatch(ref -> ref.name().equals(SchemaUtil.ROWKEY_NAME));\n+    final boolean noSystemColumns = analysis.getSelectColumnRefs().stream()\n+        .noneMatch(ref -> SchemaUtil.systemColumnNames().contains(ref.name()));\n \n     final LogicalSchema intermediateSchema;\n-    final PreSelectTransformer preSelectTransform;\n-    if (!referencesRowTime && !referencesRowKey) {\n+    final Function<TableRow, GenericRow> preSelectTransform;\n+    if (noSystemColumns) {\n       intermediateSchema = input.schema;\n-      preSelectTransform = (rowTime, key, value) -> value;\n+      preSelectTransform = TableRow::value;\n     } else {\n       // SelectValueMapper requires the rowTime & key fields in the value schema :(\n-      intermediateSchema = LogicalSchema.builder()\n-          .keyColumns(input.schema.key())\n-          .valueColumns(input.schema.value())\n-          .valueColumns(input.schema.metadata())\n-          .valueColumns(input.schema.key())\n-          .build();\n-\n-      preSelectTransform = (rowTime, key, value) -> {\n-        value.getColumns().add(rowTime);\n-\n-        key.schema().fields().forEach(f -> {\n-          final Object keyField = key.get(f);\n-          value.getColumns().add(keyField);\n+      final boolean windowed = windowType.isPresent();\n+\n+      intermediateSchema = input.schema\n+          .withMetaAndKeyColsInValue(windowed);\n+\n+      preSelectTransform = row -> {\n+        final Struct key = row.key();\n+        final List<Object> columns = row.value().getColumns();\n+\n+        columns.add(0, row.rowTime());\n+\n+        final List<Object> keyFields = key.schema().fields().stream()\n+            .map(key::get)\n+            .collect(Collectors.toList());\n+\n+        columns.addAll(1, keyFields);\n+\n+        row.window().ifPresent(window -> {\n+          columns.add(1, window.start().toEpochMilli());\n+          columns.add(2, window.end().toEpochMilli());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22239bbb730084ab53d8dd5feead9d45eacccd99"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNTg5NzYw", "url": "https://github.com/confluentinc/ksql/pull/4404#pullrequestreview-350589760", "createdAt": "2020-01-30T05:34:10Z", "commit": {"oid": "22239bbb730084ab53d8dd5feead9d45eacccd99"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 169, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}