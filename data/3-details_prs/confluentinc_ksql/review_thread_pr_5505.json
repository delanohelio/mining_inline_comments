{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NzQ3NTMx", "number": 5505, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjo1Mzo1MFrOEAs7AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzowNTowOFrOEAtEVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTcxNDU3OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/array/ArrayMax.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjo1Mzo1MFrOGcJaLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzoyNzo1NlrOGcKDzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2NzQ3MQ==", "bodyText": "I'm guessing this isn't the intended description.", "url": "https://github.com/confluentinc/ksql/pull/5505#discussion_r432167471", "createdAt": "2020-05-28T22:53:50Z", "author": {"login": "derekjn"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/array/ArrayMax.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the\n+ * License.\n+ */\n+\n+package io.confluent.ksql.function.udf.array;\n+\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import java.util.List;\n+\n+/**\n+ * This UDF traverses the elements of an Array field to find and return the maximum contained value.\n+ */\n+@UdfDescription(\n+    name = \"array_max\",\n+    description = \"Return the maximum value from within an array of primitive values, according to\"\n+        + \" their natural sort order. If the array is NULL, or contains only NULLs, return NULL.\")\n+public class ArrayMax {\n+\n+  @Udf\n+  public <T extends Comparable<? super T>> T arrayMax(@UdfParameter(\n+      description = \"The array to sort\") final List<T> input) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "537274c048785b94866ebddff27b584a9b3952fb"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3NDc5OA==", "bodyText": "good catch, thx!", "url": "https://github.com/confluentinc/ksql/pull/5505#discussion_r432174798", "createdAt": "2020-05-28T23:16:42Z", "author": {"login": "blueedgenick"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/array/ArrayMax.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the\n+ * License.\n+ */\n+\n+package io.confluent.ksql.function.udf.array;\n+\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import java.util.List;\n+\n+/**\n+ * This UDF traverses the elements of an Array field to find and return the maximum contained value.\n+ */\n+@UdfDescription(\n+    name = \"array_max\",\n+    description = \"Return the maximum value from within an array of primitive values, according to\"\n+        + \" their natural sort order. If the array is NULL, or contains only NULLs, return NULL.\")\n+public class ArrayMax {\n+\n+  @Udf\n+  public <T extends Comparable<? super T>> T arrayMax(@UdfParameter(\n+      description = \"The array to sort\") final List<T> input) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2NzQ3MQ=="}, "originalCommit": {"oid": "537274c048785b94866ebddff27b584a9b3952fb"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3ODEyNg==", "bodyText": "addressed", "url": "https://github.com/confluentinc/ksql/pull/5505#discussion_r432178126", "createdAt": "2020-05-28T23:27:56Z", "author": {"login": "blueedgenick"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/array/ArrayMax.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the\n+ * License.\n+ */\n+\n+package io.confluent.ksql.function.udf.array;\n+\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import java.util.List;\n+\n+/**\n+ * This UDF traverses the elements of an Array field to find and return the maximum contained value.\n+ */\n+@UdfDescription(\n+    name = \"array_max\",\n+    description = \"Return the maximum value from within an array of primitive values, according to\"\n+        + \" their natural sort order. If the array is NULL, or contains only NULLs, return NULL.\")\n+public class ArrayMax {\n+\n+  @Udf\n+  public <T extends Comparable<? super T>> T arrayMax(@UdfParameter(\n+      description = \"The array to sort\") final List<T> input) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2NzQ3MQ=="}, "originalCommit": {"oid": "537274c048785b94866ebddff27b584a9b3952fb"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTcxNjIzOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/array/ArrayMin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMjo1NDo0MVrOGcJbOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzoyODowNFrOGcKD-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2NzczOQ==", "bodyText": "I'm guessing this isn't the intended description.", "url": "https://github.com/confluentinc/ksql/pull/5505#discussion_r432167739", "createdAt": "2020-05-28T22:54:41Z", "author": {"login": "derekjn"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/array/ArrayMin.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the\n+ * License.\n+ */\n+\n+package io.confluent.ksql.function.udf.array;\n+\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import java.util.List;\n+\n+/**\n+ * This UDF traverses the elements of an Array field to find and return the minimum contained value.\n+ */\n+@UdfDescription(\n+    name = \"array_min\",\n+    description = \"Return the minimum value from within an array of primitive values, according to\"\n+        + \" their natural sort order. If the array is NULL, or contains only NULLs, return NULL.\")\n+public class ArrayMin {\n+\n+  @Udf\n+  public <T extends Comparable<? super T>> T arrayMin(@UdfParameter(\n+      description = \"The array to sort\") final List<T> input) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "537274c048785b94866ebddff27b584a9b3952fb"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3ODE3MA==", "bodyText": "fixed", "url": "https://github.com/confluentinc/ksql/pull/5505#discussion_r432178170", "createdAt": "2020-05-28T23:28:04Z", "author": {"login": "blueedgenick"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/array/ArrayMin.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use this file except\n+ * in compliance with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and limitations under the\n+ * License.\n+ */\n+\n+package io.confluent.ksql.function.udf.array;\n+\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import java.util.List;\n+\n+/**\n+ * This UDF traverses the elements of an Array field to find and return the minimum contained value.\n+ */\n+@UdfDescription(\n+    name = \"array_min\",\n+    description = \"Return the minimum value from within an array of primitive values, according to\"\n+        + \" their natural sort order. If the array is NULL, or contains only NULLs, return NULL.\")\n+public class ArrayMin {\n+\n+  @Udf\n+  public <T extends Comparable<? super T>> T arrayMin(@UdfParameter(\n+      description = \"The array to sort\") final List<T> input) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE2NzczOQ=="}, "originalCommit": {"oid": "537274c048785b94866ebddff27b584a9b3952fb"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTczNjI2OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzowMzo1OFrOGcJnXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzoyODoyMlrOGcKETw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3MDg0NQ==", "bodyText": "I know this array literal isn't intended to be a valid argument, but it may be worth using single quotes here since ARRAY[\"foo\", \"bar\"] wouldn't parse.", "url": "https://github.com/confluentinc/ksql/pull/5505#discussion_r432170845", "createdAt": "2020-05-28T23:03:58Z", "author": {"login": "derekjn"}, "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -158,31 +156,60 @@ Given an array, checks if a search value is contained in the array.\n \n Accepts any `ARRAY` type. The type of the second param must match the element type of the `ARRAY`.\n \n-### `JSON_ARRAY_CONTAINS`\n+### `ARRAY_LENGTH`\n \n ```sql\n-JSON_ARRAY_CONTAINS('[1, 2, 3]', 3)\n+ARRAY_LENGTH(ARRAY[1, 2, 3])\n ```\n \n-Given a `STRING` containing a JSON array, checks if a search value is contained in the array.\n+Given an array, return the number of elements in the array.\n \n-Returns `false` if the first parameter does not contain a JSON array.\n+If the supplied parameter is NULL the method returns NULL.\n \n-### `ARRAY`\n+### ``ARRAY_MAX``\n \n ```sql\n-ARRAY[col1, col2, ...]\n+ARRAY_MAX([\"foo\", \"bar\", \"baz\"])\n ```\n \n-Construct an array from a variable number of inputs.\n+Returns the maximum value from within a given array of primitive elements (not arrays of other arrays, or maps, or structs, or combinations thereof). \n \n-### `MAP`\n+Array entries are compared according to their natural sort order, which sorts the various data-types per the following examples:\n+- ```array_max[-1, 2, NULL, 0] -> 2```\n+- ```array_max[false, NULL, true] -> true```\n+- ```array_max[\"Foo\", \"Bar\", NULL, \"baz\"] -> \"baz\"``` (lower-case characters are \"greater\" than upper-case characters)\n+\n+If the array field is NULL, or contains only NULLs, then NULL is returned.\n+\n+### ``ARRAY_MIN``\n \n ```sql\n-MAP(key VARCHAR := value, ...)\n+ARRAY_MIN([\"foo\", \"bar\", \"baz\"])\n ```\n \n-Construct a map from specific key-value tuples.\n+Returns the minimum value from within a given array of primitive elements (not arrays of other arrays, or maps, or structs, or combinations thereof). \n+\n+Array entries are compared according to their natural sort order, which sorts the various data-types per the following examples:\n+- ```array_min[-1, 2, NULL, 0] -> -1```\n+- ```array_min[false, NULL, true] -> false```\n+- ```array_min[\"Foo\", \"Bar\", NULL, \"baz\"] -> \"Bar\"```\n+\n+If the array field is NULL, or contains only NULLs, then NULL is returned.\n+\n+### ``ARRAY_SORT``\n+\n+```sql\n+ARRAY_SORT([\"foo\", \"bar\", \"baz\"])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "537274c048785b94866ebddff27b584a9b3952fb"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3ODI1NQ==", "bodyText": "fixed all the occurrences i could find", "url": "https://github.com/confluentinc/ksql/pull/5505#discussion_r432178255", "createdAt": "2020-05-28T23:28:22Z", "author": {"login": "blueedgenick"}, "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -158,31 +156,60 @@ Given an array, checks if a search value is contained in the array.\n \n Accepts any `ARRAY` type. The type of the second param must match the element type of the `ARRAY`.\n \n-### `JSON_ARRAY_CONTAINS`\n+### `ARRAY_LENGTH`\n \n ```sql\n-JSON_ARRAY_CONTAINS('[1, 2, 3]', 3)\n+ARRAY_LENGTH(ARRAY[1, 2, 3])\n ```\n \n-Given a `STRING` containing a JSON array, checks if a search value is contained in the array.\n+Given an array, return the number of elements in the array.\n \n-Returns `false` if the first parameter does not contain a JSON array.\n+If the supplied parameter is NULL the method returns NULL.\n \n-### `ARRAY`\n+### ``ARRAY_MAX``\n \n ```sql\n-ARRAY[col1, col2, ...]\n+ARRAY_MAX([\"foo\", \"bar\", \"baz\"])\n ```\n \n-Construct an array from a variable number of inputs.\n+Returns the maximum value from within a given array of primitive elements (not arrays of other arrays, or maps, or structs, or combinations thereof). \n \n-### `MAP`\n+Array entries are compared according to their natural sort order, which sorts the various data-types per the following examples:\n+- ```array_max[-1, 2, NULL, 0] -> 2```\n+- ```array_max[false, NULL, true] -> true```\n+- ```array_max[\"Foo\", \"Bar\", NULL, \"baz\"] -> \"baz\"``` (lower-case characters are \"greater\" than upper-case characters)\n+\n+If the array field is NULL, or contains only NULLs, then NULL is returned.\n+\n+### ``ARRAY_MIN``\n \n ```sql\n-MAP(key VARCHAR := value, ...)\n+ARRAY_MIN([\"foo\", \"bar\", \"baz\"])\n ```\n \n-Construct a map from specific key-value tuples.\n+Returns the minimum value from within a given array of primitive elements (not arrays of other arrays, or maps, or structs, or combinations thereof). \n+\n+Array entries are compared according to their natural sort order, which sorts the various data-types per the following examples:\n+- ```array_min[-1, 2, NULL, 0] -> -1```\n+- ```array_min[false, NULL, true] -> false```\n+- ```array_min[\"Foo\", \"Bar\", NULL, \"baz\"] -> \"Bar\"```\n+\n+If the array field is NULL, or contains only NULLs, then NULL is returned.\n+\n+### ``ARRAY_SORT``\n+\n+```sql\n+ARRAY_SORT([\"foo\", \"bar\", \"baz\"])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3MDg0NQ=="}, "originalCommit": {"oid": "537274c048785b94866ebddff27b584a9b3952fb"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MTczODQ2OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzowNTowOFrOGcJosw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMzoyMjoyN1rOGcJ9iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3MTE4Nw==", "bodyText": "I think it would be worth adding a note and example or two about the optional ASC or DESC order specifier since that's pretty useful.", "url": "https://github.com/confluentinc/ksql/pull/5505#discussion_r432171187", "createdAt": "2020-05-28T23:05:08Z", "author": {"login": "derekjn"}, "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -158,31 +156,60 @@ Given an array, checks if a search value is contained in the array.\n \n Accepts any `ARRAY` type. The type of the second param must match the element type of the `ARRAY`.\n \n-### `JSON_ARRAY_CONTAINS`\n+### `ARRAY_LENGTH`\n \n ```sql\n-JSON_ARRAY_CONTAINS('[1, 2, 3]', 3)\n+ARRAY_LENGTH(ARRAY[1, 2, 3])\n ```\n \n-Given a `STRING` containing a JSON array, checks if a search value is contained in the array.\n+Given an array, return the number of elements in the array.\n \n-Returns `false` if the first parameter does not contain a JSON array.\n+If the supplied parameter is NULL the method returns NULL.\n \n-### `ARRAY`\n+### ``ARRAY_MAX``\n \n ```sql\n-ARRAY[col1, col2, ...]\n+ARRAY_MAX([\"foo\", \"bar\", \"baz\"])\n ```\n \n-Construct an array from a variable number of inputs.\n+Returns the maximum value from within a given array of primitive elements (not arrays of other arrays, or maps, or structs, or combinations thereof). \n \n-### `MAP`\n+Array entries are compared according to their natural sort order, which sorts the various data-types per the following examples:\n+- ```array_max[-1, 2, NULL, 0] -> 2```\n+- ```array_max[false, NULL, true] -> true```\n+- ```array_max[\"Foo\", \"Bar\", NULL, \"baz\"] -> \"baz\"``` (lower-case characters are \"greater\" than upper-case characters)\n+\n+If the array field is NULL, or contains only NULLs, then NULL is returned.\n+\n+### ``ARRAY_MIN``\n \n ```sql\n-MAP(key VARCHAR := value, ...)\n+ARRAY_MIN([\"foo\", \"bar\", \"baz\"])\n ```\n \n-Construct a map from specific key-value tuples.\n+Returns the minimum value from within a given array of primitive elements (not arrays of other arrays, or maps, or structs, or combinations thereof). \n+\n+Array entries are compared according to their natural sort order, which sorts the various data-types per the following examples:\n+- ```array_min[-1, 2, NULL, 0] -> -1```\n+- ```array_min[false, NULL, true] -> false```\n+- ```array_min[\"Foo\", \"Bar\", NULL, \"baz\"] -> \"Bar\"```\n+\n+If the array field is NULL, or contains only NULLs, then NULL is returned.\n+\n+### ``ARRAY_SORT``\n+\n+```sql\n+ARRAY_SORT([\"foo\", \"bar\", \"baz\"])\n+```\n+\n+Given an array of primitive elements (not arrays of other arrays, or maps, or structs, or combinations thereof), returns an array of the same elements sorted according to their natural sort order. Any NULLs contained in the array will always be moved to the end.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "537274c048785b94866ebddff27b584a9b3952fb"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3NjUyMA==", "bodyText": "yep, oversight on my part. adding now", "url": "https://github.com/confluentinc/ksql/pull/5505#discussion_r432176520", "createdAt": "2020-05-28T23:22:27Z", "author": {"login": "blueedgenick"}, "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -158,31 +156,60 @@ Given an array, checks if a search value is contained in the array.\n \n Accepts any `ARRAY` type. The type of the second param must match the element type of the `ARRAY`.\n \n-### `JSON_ARRAY_CONTAINS`\n+### `ARRAY_LENGTH`\n \n ```sql\n-JSON_ARRAY_CONTAINS('[1, 2, 3]', 3)\n+ARRAY_LENGTH(ARRAY[1, 2, 3])\n ```\n \n-Given a `STRING` containing a JSON array, checks if a search value is contained in the array.\n+Given an array, return the number of elements in the array.\n \n-Returns `false` if the first parameter does not contain a JSON array.\n+If the supplied parameter is NULL the method returns NULL.\n \n-### `ARRAY`\n+### ``ARRAY_MAX``\n \n ```sql\n-ARRAY[col1, col2, ...]\n+ARRAY_MAX([\"foo\", \"bar\", \"baz\"])\n ```\n \n-Construct an array from a variable number of inputs.\n+Returns the maximum value from within a given array of primitive elements (not arrays of other arrays, or maps, or structs, or combinations thereof). \n \n-### `MAP`\n+Array entries are compared according to their natural sort order, which sorts the various data-types per the following examples:\n+- ```array_max[-1, 2, NULL, 0] -> 2```\n+- ```array_max[false, NULL, true] -> true```\n+- ```array_max[\"Foo\", \"Bar\", NULL, \"baz\"] -> \"baz\"``` (lower-case characters are \"greater\" than upper-case characters)\n+\n+If the array field is NULL, or contains only NULLs, then NULL is returned.\n+\n+### ``ARRAY_MIN``\n \n ```sql\n-MAP(key VARCHAR := value, ...)\n+ARRAY_MIN([\"foo\", \"bar\", \"baz\"])\n ```\n \n-Construct a map from specific key-value tuples.\n+Returns the minimum value from within a given array of primitive elements (not arrays of other arrays, or maps, or structs, or combinations thereof). \n+\n+Array entries are compared according to their natural sort order, which sorts the various data-types per the following examples:\n+- ```array_min[-1, 2, NULL, 0] -> -1```\n+- ```array_min[false, NULL, true] -> false```\n+- ```array_min[\"Foo\", \"Bar\", NULL, \"baz\"] -> \"Bar\"```\n+\n+If the array field is NULL, or contains only NULLs, then NULL is returned.\n+\n+### ``ARRAY_SORT``\n+\n+```sql\n+ARRAY_SORT([\"foo\", \"bar\", \"baz\"])\n+```\n+\n+Given an array of primitive elements (not arrays of other arrays, or maps, or structs, or combinations thereof), returns an array of the same elements sorted according to their natural sort order. Any NULLs contained in the array will always be moved to the end.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE3MTE4Nw=="}, "originalCommit": {"oid": "537274c048785b94866ebddff27b584a9b3952fb"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3311, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}