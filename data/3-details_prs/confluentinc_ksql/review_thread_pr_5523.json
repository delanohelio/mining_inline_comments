{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2Mjg0NDE0", "number": 5523, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo0MDowNlrOEB2Zdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzowMTo1NVrOECPnDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzc1Mjg3OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo0MDowNlrOGd8r0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo0MDowNlrOGd8r0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA1NjE0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Given a STRING that is encoded as input_encoding, encode it using the output_encoding. The accepted input and output encodings are:\n          \n          \n            \n            Given a STRING that is encoded as `input_encoding`, encode it using the `output_encoding`. The accepted input and output encodings are:", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434056145", "createdAt": "2020-06-02T17:40:06Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -279,6 +279,16 @@ CONCAT(col1, '_hello')\n \n Concatenate two or more strings.\n \n+### `ENCODE`\n+\n+```sql\n+ENCODE(col1, input_encoding, output_encoding)\n+```\n+\n+Given a STRING that is encoded as input_encoding, encode it using the output_encoding. The accepted input and output encodings are:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b10506c43d82c783c5aa51cd3f1261a8c5eaa54"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzc1NDczOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo0MDozOFrOGd8tDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo0MDozOFrOGd8tDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA1NjQ2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            hex, utf8, ascii and base64. Throws exception if provided encodings are not supported.\n          \n          \n            \n            `hex`, `utf8`, `ascii`, and `base64`. Throws an exception if the provided encodings are not supported.", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434056461", "createdAt": "2020-06-02T17:40:38Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -279,6 +279,16 @@ CONCAT(col1, '_hello')\n \n Concatenate two or more strings.\n \n+### `ENCODE`\n+\n+```sql\n+ENCODE(col1, input_encoding, output_encoding)\n+```\n+\n+Given a STRING that is encoded as input_encoding, encode it using the output_encoding. The accepted input and output encodings are:\n+hex, utf8, ascii and base64. Throws exception if provided encodings are not supported.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b10506c43d82c783c5aa51cd3f1261a8c5eaa54"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzc1NjQxOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo0MTowMVrOGd8uAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzo0MTowMVrOGd8uAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA1NjcwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For example, to encode a string in hex to utf8 use `ENCODE(string, 'hex', 'utf8')` \n          \n          \n            \n            For example, to encode a string in `hex` to `utf8`, use `ENCODE(string, 'hex', 'utf8')`.", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434056704", "createdAt": "2020-06-02T17:41:01Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-reference/scalar-functions.md", "diffHunk": "@@ -279,6 +279,16 @@ CONCAT(col1, '_hello')\n \n Concatenate two or more strings.\n \n+### `ENCODE`\n+\n+```sql\n+ENCODE(col1, input_encoding, output_encoding)\n+```\n+\n+Given a STRING that is encoded as input_encoding, encode it using the output_encoding. The accepted input and output encodings are:\n+hex, utf8, ascii and base64. Throws exception if provided encodings are not supported.\n+\n+For example, to encode a string in hex to utf8 use `ENCODE(string, 'hex', 'utf8')` ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b10506c43d82c783c5aa51cd3f1261a8c5eaa54"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDk2MDc0OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDo0NzowN1rOGeIhZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDo0NzowN1rOGeIhZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MDA4NA==", "bodyText": "ENCODER_MAP?", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434250084", "createdAt": "2020-06-03T00:47:07Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.string;\n+\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import io.confluent.ksql.util.KsqlConstants;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.codec.binary.Hex;\n+\n+@SuppressWarnings(\"checkstyle:ClassDataAbstractionCoupling\")\n+@UdfDescription(name = \"encode\",\n+    author = KsqlConstants.CONFLUENT_AUTHOR,\n+    description = \"Takes an input string s, which is encoded as input_encoding, \"\n+        + \"and encodes it as output_encoding. The accepted input and output encodings are: \"\n+        + \"hex, utf8, ascii and base64. Throws exception if provided encodings are not supported.\")\n+public class Encode {\n+\n+  static Map<String, Encoder> encoderMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e44bbbdc4cbb06243635cad714ef1312d9a63688"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDk2NjkyOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDo1MDo0OVrOGeIlGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzoxMzowMVrOGelnoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MTAzMg==", "bodyText": "Do we want the url safe version?  Not sure if we have a precedent elsewhere in the codebase.", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434251032", "createdAt": "2020-06-03T00:50:49Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.string;\n+\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import io.confluent.ksql.util.KsqlConstants;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.codec.binary.Hex;\n+\n+@SuppressWarnings(\"checkstyle:ClassDataAbstractionCoupling\")\n+@UdfDescription(name = \"encode\",\n+    author = KsqlConstants.CONFLUENT_AUTHOR,\n+    description = \"Takes an input string s, which is encoded as input_encoding, \"\n+        + \"and encodes it as output_encoding. The accepted input and output encodings are: \"\n+        + \"hex, utf8, ascii and base64. Throws exception if provided encodings are not supported.\")\n+public class Encode {\n+\n+  static Map<String, Encoder> encoderMap = new HashMap<>();\n+\n+  static {\n+    encoderMap.put(\"hexascii\", new HexToAscii());\n+    encoderMap.put(\"hexutf8\", new HexToUtf8());\n+    encoderMap.put(\"hexbase64\", new HexToBase64());\n+    encoderMap.put(\"utf8ascii\", new Utf8ToAscii());\n+    encoderMap.put(\"utf8hex\", new Utf8ToHex());\n+    encoderMap.put(\"utf8base64\", new Utf8ToBase64());\n+    encoderMap.put(\"asciiutf8\", new AsciiToUtf8());\n+    encoderMap.put(\"asciihex\", new AsciiToHex());\n+    encoderMap.put(\"asciibase64\", new AsciiToBase64());\n+    encoderMap.put(\"base64ascii\", new Base64ToAscii());\n+    encoderMap.put(\"base64utf8\", new Base64ToUtf8());\n+    encoderMap.put(\"base64hex\", new Base64ToHex());\n+  }\n+\n+  @Udf(description = \"Returns a new string encoded using the outputEncoding \")\n+  public String encode(\n+      @UdfParameter(\n+          description = \"The source string. If null, then function returns null.\") final String str,\n+      @UdfParameter(\n+          description = \"The input encoding.\"\n+              + \" If null, then function returns null.\") final String inputEncoding,\n+      @UdfParameter(\n+          description = \"The output encoding.\"\n+              + \" If null, then function returns null.\") final String outputEncoding) {\n+    if (str == null || inputEncoding == null || outputEncoding == null) {\n+      return null;\n+    }\n+\n+    final String encodedString = inputEncoding.toLowerCase() + outputEncoding.toLowerCase();\n+\n+    if (encoderMap.get(encodedString) == null) {\n+      throw new KsqlFunctionException(\"Supported input and output encodings are: \"\n+                                  + \"hex, utf8, ascii and base64\");\n+    }\n+    return encoderMap.get(encodedString).apply(str);\n+  }\n+\n+\n+  interface Encoder {\n+    String apply(String input) throws KsqlFunctionException;\n+  }\n+\n+  static class HexToAscii implements Encoder {\n+\n+    @Override\n+    public String apply(final String input) {\n+      try {\n+        final byte[] decoded = Hex.decodeHex(input);\n+        return new String(decoded, StandardCharsets.US_ASCII);\n+      } catch (DecoderException e) {\n+        throw new KsqlFunctionException(e.getMessage());\n+      }\n+    }\n+  }\n+\n+  static class HexToBase64 implements Encoder {\n+\n+    @Override\n+    public String apply(final String input) throws KsqlFunctionException {\n+      final byte[] decodedHex;\n+      try {\n+        decodedHex = Hex.decodeHex(input);\n+      } catch (DecoderException e) {\n+        throw new KsqlFunctionException(e.getMessage());\n+      }\n+      final byte[] encodedB64 = Base64.encodeBase64(decodedHex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e44bbbdc4cbb06243635cad714ef1312d9a63688"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0NTM5Ng==", "bodyText": "What do you mean?", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434645396", "createdAt": "2020-06-03T15:15:06Z", "author": {"login": "vpapavas"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.string;\n+\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import io.confluent.ksql.util.KsqlConstants;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.codec.binary.Hex;\n+\n+@SuppressWarnings(\"checkstyle:ClassDataAbstractionCoupling\")\n+@UdfDescription(name = \"encode\",\n+    author = KsqlConstants.CONFLUENT_AUTHOR,\n+    description = \"Takes an input string s, which is encoded as input_encoding, \"\n+        + \"and encodes it as output_encoding. The accepted input and output encodings are: \"\n+        + \"hex, utf8, ascii and base64. Throws exception if provided encodings are not supported.\")\n+public class Encode {\n+\n+  static Map<String, Encoder> encoderMap = new HashMap<>();\n+\n+  static {\n+    encoderMap.put(\"hexascii\", new HexToAscii());\n+    encoderMap.put(\"hexutf8\", new HexToUtf8());\n+    encoderMap.put(\"hexbase64\", new HexToBase64());\n+    encoderMap.put(\"utf8ascii\", new Utf8ToAscii());\n+    encoderMap.put(\"utf8hex\", new Utf8ToHex());\n+    encoderMap.put(\"utf8base64\", new Utf8ToBase64());\n+    encoderMap.put(\"asciiutf8\", new AsciiToUtf8());\n+    encoderMap.put(\"asciihex\", new AsciiToHex());\n+    encoderMap.put(\"asciibase64\", new AsciiToBase64());\n+    encoderMap.put(\"base64ascii\", new Base64ToAscii());\n+    encoderMap.put(\"base64utf8\", new Base64ToUtf8());\n+    encoderMap.put(\"base64hex\", new Base64ToHex());\n+  }\n+\n+  @Udf(description = \"Returns a new string encoded using the outputEncoding \")\n+  public String encode(\n+      @UdfParameter(\n+          description = \"The source string. If null, then function returns null.\") final String str,\n+      @UdfParameter(\n+          description = \"The input encoding.\"\n+              + \" If null, then function returns null.\") final String inputEncoding,\n+      @UdfParameter(\n+          description = \"The output encoding.\"\n+              + \" If null, then function returns null.\") final String outputEncoding) {\n+    if (str == null || inputEncoding == null || outputEncoding == null) {\n+      return null;\n+    }\n+\n+    final String encodedString = inputEncoding.toLowerCase() + outputEncoding.toLowerCase();\n+\n+    if (encoderMap.get(encodedString) == null) {\n+      throw new KsqlFunctionException(\"Supported input and output encodings are: \"\n+                                  + \"hex, utf8, ascii and base64\");\n+    }\n+    return encoderMap.get(encodedString).apply(str);\n+  }\n+\n+\n+  interface Encoder {\n+    String apply(String input) throws KsqlFunctionException;\n+  }\n+\n+  static class HexToAscii implements Encoder {\n+\n+    @Override\n+    public String apply(final String input) {\n+      try {\n+        final byte[] decoded = Hex.decodeHex(input);\n+        return new String(decoded, StandardCharsets.US_ASCII);\n+      } catch (DecoderException e) {\n+        throw new KsqlFunctionException(e.getMessage());\n+      }\n+    }\n+  }\n+\n+  static class HexToBase64 implements Encoder {\n+\n+    @Override\n+    public String apply(final String input) throws KsqlFunctionException {\n+      final byte[] decodedHex;\n+      try {\n+        decodedHex = Hex.decodeHex(input);\n+      } catch (DecoderException e) {\n+        throw new KsqlFunctionException(e.getMessage());\n+      }\n+      final byte[] encodedB64 = Base64.encodeBase64(decodedHex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MTAzMg=="}, "originalCommit": {"oid": "e44bbbdc4cbb06243635cad714ef1312d9a63688"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyNjgxNg==", "bodyText": "There's a Base64 that's url safe, meaning it swaps a few characters to that it doesn't use any URL special characters.  https://commons.apache.org/proper/commons-codec/apidocs/org/apache/commons/codec/binary/Base64.html#encodeBase64URLSafe-byte:A-\nI think it's fine not to do that.  This is the standard version.", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434726816", "createdAt": "2020-06-03T17:13:01Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.string;\n+\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import io.confluent.ksql.util.KsqlConstants;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.codec.binary.Hex;\n+\n+@SuppressWarnings(\"checkstyle:ClassDataAbstractionCoupling\")\n+@UdfDescription(name = \"encode\",\n+    author = KsqlConstants.CONFLUENT_AUTHOR,\n+    description = \"Takes an input string s, which is encoded as input_encoding, \"\n+        + \"and encodes it as output_encoding. The accepted input and output encodings are: \"\n+        + \"hex, utf8, ascii and base64. Throws exception if provided encodings are not supported.\")\n+public class Encode {\n+\n+  static Map<String, Encoder> encoderMap = new HashMap<>();\n+\n+  static {\n+    encoderMap.put(\"hexascii\", new HexToAscii());\n+    encoderMap.put(\"hexutf8\", new HexToUtf8());\n+    encoderMap.put(\"hexbase64\", new HexToBase64());\n+    encoderMap.put(\"utf8ascii\", new Utf8ToAscii());\n+    encoderMap.put(\"utf8hex\", new Utf8ToHex());\n+    encoderMap.put(\"utf8base64\", new Utf8ToBase64());\n+    encoderMap.put(\"asciiutf8\", new AsciiToUtf8());\n+    encoderMap.put(\"asciihex\", new AsciiToHex());\n+    encoderMap.put(\"asciibase64\", new AsciiToBase64());\n+    encoderMap.put(\"base64ascii\", new Base64ToAscii());\n+    encoderMap.put(\"base64utf8\", new Base64ToUtf8());\n+    encoderMap.put(\"base64hex\", new Base64ToHex());\n+  }\n+\n+  @Udf(description = \"Returns a new string encoded using the outputEncoding \")\n+  public String encode(\n+      @UdfParameter(\n+          description = \"The source string. If null, then function returns null.\") final String str,\n+      @UdfParameter(\n+          description = \"The input encoding.\"\n+              + \" If null, then function returns null.\") final String inputEncoding,\n+      @UdfParameter(\n+          description = \"The output encoding.\"\n+              + \" If null, then function returns null.\") final String outputEncoding) {\n+    if (str == null || inputEncoding == null || outputEncoding == null) {\n+      return null;\n+    }\n+\n+    final String encodedString = inputEncoding.toLowerCase() + outputEncoding.toLowerCase();\n+\n+    if (encoderMap.get(encodedString) == null) {\n+      throw new KsqlFunctionException(\"Supported input and output encodings are: \"\n+                                  + \"hex, utf8, ascii and base64\");\n+    }\n+    return encoderMap.get(encodedString).apply(str);\n+  }\n+\n+\n+  interface Encoder {\n+    String apply(String input) throws KsqlFunctionException;\n+  }\n+\n+  static class HexToAscii implements Encoder {\n+\n+    @Override\n+    public String apply(final String input) {\n+      try {\n+        final byte[] decoded = Hex.decodeHex(input);\n+        return new String(decoded, StandardCharsets.US_ASCII);\n+      } catch (DecoderException e) {\n+        throw new KsqlFunctionException(e.getMessage());\n+      }\n+    }\n+  }\n+\n+  static class HexToBase64 implements Encoder {\n+\n+    @Override\n+    public String apply(final String input) throws KsqlFunctionException {\n+      final byte[] decodedHex;\n+      try {\n+        decodedHex = Hex.decodeHex(input);\n+      } catch (DecoderException e) {\n+        throw new KsqlFunctionException(e.getMessage());\n+      }\n+      final byte[] encodedB64 = Base64.encodeBase64(decodedHex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MTAzMg=="}, "originalCommit": {"oid": "e44bbbdc4cbb06243635cad714ef1312d9a63688"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDk3ODk4OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDo1ODoyMlrOGeIsRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNToxNTozNVrOGegrDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1Mjg3MA==", "bodyText": "https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#String(byte[],%20java.nio.charset.Charset)\nSays that it will replace unmappable chars to the default character for the charset.  This might be fine, but just wanted to point out we could throw an error.\nI tend to think programmer mistakes should be errors, whereas row by row data mistakes should be more forgiving, so maybe what you have is the right thing, but just wanted to point it out.", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434252870", "createdAt": "2020-06-03T00:58:22Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.string;\n+\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import io.confluent.ksql.util.KsqlConstants;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.codec.binary.Hex;\n+\n+@SuppressWarnings(\"checkstyle:ClassDataAbstractionCoupling\")\n+@UdfDescription(name = \"encode\",\n+    author = KsqlConstants.CONFLUENT_AUTHOR,\n+    description = \"Takes an input string s, which is encoded as input_encoding, \"\n+        + \"and encodes it as output_encoding. The accepted input and output encodings are: \"\n+        + \"hex, utf8, ascii and base64. Throws exception if provided encodings are not supported.\")\n+public class Encode {\n+\n+  static Map<String, Encoder> encoderMap = new HashMap<>();\n+\n+  static {\n+    encoderMap.put(\"hexascii\", new HexToAscii());\n+    encoderMap.put(\"hexutf8\", new HexToUtf8());\n+    encoderMap.put(\"hexbase64\", new HexToBase64());\n+    encoderMap.put(\"utf8ascii\", new Utf8ToAscii());\n+    encoderMap.put(\"utf8hex\", new Utf8ToHex());\n+    encoderMap.put(\"utf8base64\", new Utf8ToBase64());\n+    encoderMap.put(\"asciiutf8\", new AsciiToUtf8());\n+    encoderMap.put(\"asciihex\", new AsciiToHex());\n+    encoderMap.put(\"asciibase64\", new AsciiToBase64());\n+    encoderMap.put(\"base64ascii\", new Base64ToAscii());\n+    encoderMap.put(\"base64utf8\", new Base64ToUtf8());\n+    encoderMap.put(\"base64hex\", new Base64ToHex());\n+  }\n+\n+  @Udf(description = \"Returns a new string encoded using the outputEncoding \")\n+  public String encode(\n+      @UdfParameter(\n+          description = \"The source string. If null, then function returns null.\") final String str,\n+      @UdfParameter(\n+          description = \"The input encoding.\"\n+              + \" If null, then function returns null.\") final String inputEncoding,\n+      @UdfParameter(\n+          description = \"The output encoding.\"\n+              + \" If null, then function returns null.\") final String outputEncoding) {\n+    if (str == null || inputEncoding == null || outputEncoding == null) {\n+      return null;\n+    }\n+\n+    final String encodedString = inputEncoding.toLowerCase() + outputEncoding.toLowerCase();\n+\n+    if (encoderMap.get(encodedString) == null) {\n+      throw new KsqlFunctionException(\"Supported input and output encodings are: \"\n+                                  + \"hex, utf8, ascii and base64\");\n+    }\n+    return encoderMap.get(encodedString).apply(str);\n+  }\n+\n+\n+  interface Encoder {\n+    String apply(String input) throws KsqlFunctionException;\n+  }\n+\n+  static class HexToAscii implements Encoder {\n+\n+    @Override\n+    public String apply(final String input) {\n+      try {\n+        final byte[] decoded = Hex.decodeHex(input);\n+        return new String(decoded, StandardCharsets.US_ASCII);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e44bbbdc4cbb06243635cad714ef1312d9a63688"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0NTc3Mg==", "bodyText": "Yes, that was my thinking as well", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434645772", "createdAt": "2020-06-03T15:15:35Z", "author": {"login": "vpapavas"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.string;\n+\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import io.confluent.ksql.util.KsqlConstants;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.codec.binary.Hex;\n+\n+@SuppressWarnings(\"checkstyle:ClassDataAbstractionCoupling\")\n+@UdfDescription(name = \"encode\",\n+    author = KsqlConstants.CONFLUENT_AUTHOR,\n+    description = \"Takes an input string s, which is encoded as input_encoding, \"\n+        + \"and encodes it as output_encoding. The accepted input and output encodings are: \"\n+        + \"hex, utf8, ascii and base64. Throws exception if provided encodings are not supported.\")\n+public class Encode {\n+\n+  static Map<String, Encoder> encoderMap = new HashMap<>();\n+\n+  static {\n+    encoderMap.put(\"hexascii\", new HexToAscii());\n+    encoderMap.put(\"hexutf8\", new HexToUtf8());\n+    encoderMap.put(\"hexbase64\", new HexToBase64());\n+    encoderMap.put(\"utf8ascii\", new Utf8ToAscii());\n+    encoderMap.put(\"utf8hex\", new Utf8ToHex());\n+    encoderMap.put(\"utf8base64\", new Utf8ToBase64());\n+    encoderMap.put(\"asciiutf8\", new AsciiToUtf8());\n+    encoderMap.put(\"asciihex\", new AsciiToHex());\n+    encoderMap.put(\"asciibase64\", new AsciiToBase64());\n+    encoderMap.put(\"base64ascii\", new Base64ToAscii());\n+    encoderMap.put(\"base64utf8\", new Base64ToUtf8());\n+    encoderMap.put(\"base64hex\", new Base64ToHex());\n+  }\n+\n+  @Udf(description = \"Returns a new string encoded using the outputEncoding \")\n+  public String encode(\n+      @UdfParameter(\n+          description = \"The source string. If null, then function returns null.\") final String str,\n+      @UdfParameter(\n+          description = \"The input encoding.\"\n+              + \" If null, then function returns null.\") final String inputEncoding,\n+      @UdfParameter(\n+          description = \"The output encoding.\"\n+              + \" If null, then function returns null.\") final String outputEncoding) {\n+    if (str == null || inputEncoding == null || outputEncoding == null) {\n+      return null;\n+    }\n+\n+    final String encodedString = inputEncoding.toLowerCase() + outputEncoding.toLowerCase();\n+\n+    if (encoderMap.get(encodedString) == null) {\n+      throw new KsqlFunctionException(\"Supported input and output encodings are: \"\n+                                  + \"hex, utf8, ascii and base64\");\n+    }\n+    return encoderMap.get(encodedString).apply(str);\n+  }\n+\n+\n+  interface Encoder {\n+    String apply(String input) throws KsqlFunctionException;\n+  }\n+\n+  static class HexToAscii implements Encoder {\n+\n+    @Override\n+    public String apply(final String input) {\n+      try {\n+        final byte[] decoded = Hex.decodeHex(input);\n+        return new String(decoded, StandardCharsets.US_ASCII);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1Mjg3MA=="}, "originalCommit": {"oid": "e44bbbdc4cbb06243635cad714ef1312d9a63688"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDk4MDc1OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDo1OTozNVrOGeItcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDo1OTozNVrOGeItcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MzE3MA==", "bodyText": "No need for var encodedHex", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434253170", "createdAt": "2020-06-03T00:59:35Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.string;\n+\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import io.confluent.ksql.util.KsqlConstants;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.codec.binary.Hex;\n+\n+@SuppressWarnings(\"checkstyle:ClassDataAbstractionCoupling\")\n+@UdfDescription(name = \"encode\",\n+    author = KsqlConstants.CONFLUENT_AUTHOR,\n+    description = \"Takes an input string s, which is encoded as input_encoding, \"\n+        + \"and encodes it as output_encoding. The accepted input and output encodings are: \"\n+        + \"hex, utf8, ascii and base64. Throws exception if provided encodings are not supported.\")\n+public class Encode {\n+\n+  static Map<String, Encoder> encoderMap = new HashMap<>();\n+\n+  static {\n+    encoderMap.put(\"hexascii\", new HexToAscii());\n+    encoderMap.put(\"hexutf8\", new HexToUtf8());\n+    encoderMap.put(\"hexbase64\", new HexToBase64());\n+    encoderMap.put(\"utf8ascii\", new Utf8ToAscii());\n+    encoderMap.put(\"utf8hex\", new Utf8ToHex());\n+    encoderMap.put(\"utf8base64\", new Utf8ToBase64());\n+    encoderMap.put(\"asciiutf8\", new AsciiToUtf8());\n+    encoderMap.put(\"asciihex\", new AsciiToHex());\n+    encoderMap.put(\"asciibase64\", new AsciiToBase64());\n+    encoderMap.put(\"base64ascii\", new Base64ToAscii());\n+    encoderMap.put(\"base64utf8\", new Base64ToUtf8());\n+    encoderMap.put(\"base64hex\", new Base64ToHex());\n+  }\n+\n+  @Udf(description = \"Returns a new string encoded using the outputEncoding \")\n+  public String encode(\n+      @UdfParameter(\n+          description = \"The source string. If null, then function returns null.\") final String str,\n+      @UdfParameter(\n+          description = \"The input encoding.\"\n+              + \" If null, then function returns null.\") final String inputEncoding,\n+      @UdfParameter(\n+          description = \"The output encoding.\"\n+              + \" If null, then function returns null.\") final String outputEncoding) {\n+    if (str == null || inputEncoding == null || outputEncoding == null) {\n+      return null;\n+    }\n+\n+    final String encodedString = inputEncoding.toLowerCase() + outputEncoding.toLowerCase();\n+\n+    if (encoderMap.get(encodedString) == null) {\n+      throw new KsqlFunctionException(\"Supported input and output encodings are: \"\n+                                  + \"hex, utf8, ascii and base64\");\n+    }\n+    return encoderMap.get(encodedString).apply(str);\n+  }\n+\n+\n+  interface Encoder {\n+    String apply(String input) throws KsqlFunctionException;\n+  }\n+\n+  static class HexToAscii implements Encoder {\n+\n+    @Override\n+    public String apply(final String input) {\n+      try {\n+        final byte[] decoded = Hex.decodeHex(input);\n+        return new String(decoded, StandardCharsets.US_ASCII);\n+      } catch (DecoderException e) {\n+        throw new KsqlFunctionException(e.getMessage());\n+      }\n+    }\n+  }\n+\n+  static class HexToBase64 implements Encoder {\n+\n+    @Override\n+    public String apply(final String input) throws KsqlFunctionException {\n+      final byte[] decodedHex;\n+      try {\n+        decodedHex = Hex.decodeHex(input);\n+      } catch (DecoderException e) {\n+        throw new KsqlFunctionException(e.getMessage());\n+      }\n+      final byte[] encodedB64 = Base64.encodeBase64(decodedHex);\n+      return new String(encodedB64, StandardCharsets.UTF_8);\n+\n+    }\n+  }\n+\n+  static class HexToUtf8 implements Encoder {\n+\n+    @Override\n+    public String apply(final String input) throws KsqlFunctionException {\n+      final byte[] decodedHex;\n+      try {\n+        decodedHex = Hex.decodeHex(input);\n+      } catch (DecoderException e) {\n+        throw new KsqlFunctionException(e.getMessage());\n+      }\n+      return new String(decodedHex, StandardCharsets.UTF_8);\n+    }\n+  }\n+\n+  static class AsciiToHex implements Encoder {\n+\n+    @Override\n+    public String apply(final String input) {\n+      final String encodedHex = Hex.encodeHexString(input.getBytes(StandardCharsets.US_ASCII));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e44bbbdc4cbb06243635cad714ef1312d9a63688"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDk4NzM1OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/function/udf/string/EncodeTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMTowMzo0MlrOGeIxoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNToxNDo0OFrOGegooA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NDI0MA==", "bodyText": "Isn't the input here not ascii?  I guess these get replaces with the default character and that's what's getting encoded?", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434254240", "createdAt": "2020-06-03T01:03:42Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/function/udf/string/EncodeTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.string;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import org.junit.Test;\n+\n+public class EncodeTest {\n+\n+  private Encode udf = new Encode();\n+\n+  @Test\n+  public void shouldReturnNullOnNullValue() {\n+    assertThat(udf.encode(null, \"hex\", \"ascii\"), is(nullValue()));\n+    assertThat(udf.encode(null, \"utf8\", \"base64\"), is(nullValue()));\n+    assertThat(udf.encode(\"some string\", null, \"utf8\"), is(nullValue()));\n+    assertThat(udf.encode(\"some string\", \"hex\", null), is(nullValue()));\n+  }\n+\n+  @Test\n+  public void shouldEncodeHexToAscii() {\n+    assertThat(udf.encode(\"4578616d706C6521\", \"hex\", \"ascii\"), is(\"Example!\"));\n+    assertThat(udf.encode(\"506C616E74207472656573\", \"hex\", \"ascii\"), is(\"Plant trees\"));\n+    assertThat(udf.encode(\"31202b2031203d2031\", \"hex\", \"ascii\"), is(\"1 + 1 = 1\"));\n+    assertThat(udf.encode(\"ce95cebbcebbceacceb4ceb1\", \"hex\", \"ascii\"), is(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\"));\n+    assertThat(udf.encode(\"c39c6265726d656e736368\", \"hex\", \"ascii\"), is(\"\ufffd\ufffdbermensch\"));\n+  }\n+\n+  @Test\n+  public void shouldEncodeHexToUtf8() {\n+    assertThat(udf.encode(\"4578616d706c6521\", \"hex\", \"utf8\"), is(\"Example!\"));\n+    assertThat(udf.encode(\"506c616e74207472656573\", \"hex\", \"utf8\"), is(\"Plant trees\"));\n+    assertThat(udf.encode(\"31202b2031203d2031\", \"hex\", \"utf8\"), is(\"1 + 1 = 1\"));\n+    assertThat(udf.encode(\"ce95cebbcebbceacceb4ceb1\", \"hex\", \"utf8\"), is(\"\u0395\u03bb\u03bb\u03ac\u03b4\u03b1\"));\n+    assertThat(udf.encode(\"c39c6265726d656e736368\", \"hex\", \"utf8\"), is(\"\u00dcbermensch\"));\n+\n+  }\n+\n+  @Test\n+  public void shouldEncodeHexToBase64() {\n+    assertThat(udf.encode(\"4578616d706c6521\", \"hex\", \"base64\"), is(\"RXhhbXBsZSE=\"));\n+    assertThat(udf.encode(\"506c616e74207472656573\", \"hex\", \"base64\"), is(\"UGxhbnQgdHJlZXM=\"));\n+    assertThat(udf.encode(\"31202b2031203d2031\", \"hex\", \"base64\"), is(\"MSArIDEgPSAx\"));\n+    assertThat(udf.encode(\"ce95cebbcebbceacceb4ceb1\", \"hex\", \"base64\"), is(\"zpXOu867zqzOtM6x\"));\n+    assertThat(udf.encode(\"c39c6265726d656e736368\", \"hex\", \"base64\"), is(\"w5xiZXJtZW5zY2g=\"));\n+\n+  }\n+\n+  @Test\n+  public void shouldEncodeAsciiToHex() {\n+    assertThat(udf.encode(\"Example!\", \"ascii\", \"hex\"), is(\"4578616d706c6521\"));\n+    assertThat(udf.encode(\"Plant trees\", \"ascii\", \"hex\"), is(\"506c616e74207472656573\"));\n+    assertThat(udf.encode(\"1 + 1 = 1\", \"ascii\", \"hex\"), is(\"31202b2031203d2031\"));\n+    assertThat(udf.encode(\"\u0395\u03bb\u03bb\u03ac\u03b4\u03b1\", \"ascii\", \"hex\"), is(\"3f3f3f3f3f3f\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e44bbbdc4cbb06243635cad714ef1312d9a63688"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0NTE1Mg==", "bodyText": "Correct", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434645152", "createdAt": "2020-06-03T15:14:48Z", "author": {"login": "vpapavas"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/function/udf/string/EncodeTest.java", "diffHunk": "@@ -0,0 +1,154 @@\n+/*\n+ * Copyright 2019 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.string;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.nullValue;\n+\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import org.junit.Test;\n+\n+public class EncodeTest {\n+\n+  private Encode udf = new Encode();\n+\n+  @Test\n+  public void shouldReturnNullOnNullValue() {\n+    assertThat(udf.encode(null, \"hex\", \"ascii\"), is(nullValue()));\n+    assertThat(udf.encode(null, \"utf8\", \"base64\"), is(nullValue()));\n+    assertThat(udf.encode(\"some string\", null, \"utf8\"), is(nullValue()));\n+    assertThat(udf.encode(\"some string\", \"hex\", null), is(nullValue()));\n+  }\n+\n+  @Test\n+  public void shouldEncodeHexToAscii() {\n+    assertThat(udf.encode(\"4578616d706C6521\", \"hex\", \"ascii\"), is(\"Example!\"));\n+    assertThat(udf.encode(\"506C616E74207472656573\", \"hex\", \"ascii\"), is(\"Plant trees\"));\n+    assertThat(udf.encode(\"31202b2031203d2031\", \"hex\", \"ascii\"), is(\"1 + 1 = 1\"));\n+    assertThat(udf.encode(\"ce95cebbcebbceacceb4ceb1\", \"hex\", \"ascii\"), is(\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\"));\n+    assertThat(udf.encode(\"c39c6265726d656e736368\", \"hex\", \"ascii\"), is(\"\ufffd\ufffdbermensch\"));\n+  }\n+\n+  @Test\n+  public void shouldEncodeHexToUtf8() {\n+    assertThat(udf.encode(\"4578616d706c6521\", \"hex\", \"utf8\"), is(\"Example!\"));\n+    assertThat(udf.encode(\"506c616e74207472656573\", \"hex\", \"utf8\"), is(\"Plant trees\"));\n+    assertThat(udf.encode(\"31202b2031203d2031\", \"hex\", \"utf8\"), is(\"1 + 1 = 1\"));\n+    assertThat(udf.encode(\"ce95cebbcebbceacceb4ceb1\", \"hex\", \"utf8\"), is(\"\u0395\u03bb\u03bb\u03ac\u03b4\u03b1\"));\n+    assertThat(udf.encode(\"c39c6265726d656e736368\", \"hex\", \"utf8\"), is(\"\u00dcbermensch\"));\n+\n+  }\n+\n+  @Test\n+  public void shouldEncodeHexToBase64() {\n+    assertThat(udf.encode(\"4578616d706c6521\", \"hex\", \"base64\"), is(\"RXhhbXBsZSE=\"));\n+    assertThat(udf.encode(\"506c616e74207472656573\", \"hex\", \"base64\"), is(\"UGxhbnQgdHJlZXM=\"));\n+    assertThat(udf.encode(\"31202b2031203d2031\", \"hex\", \"base64\"), is(\"MSArIDEgPSAx\"));\n+    assertThat(udf.encode(\"ce95cebbcebbceacceb4ceb1\", \"hex\", \"base64\"), is(\"zpXOu867zqzOtM6x\"));\n+    assertThat(udf.encode(\"c39c6265726d656e736368\", \"hex\", \"base64\"), is(\"w5xiZXJtZW5zY2g=\"));\n+\n+  }\n+\n+  @Test\n+  public void shouldEncodeAsciiToHex() {\n+    assertThat(udf.encode(\"Example!\", \"ascii\", \"hex\"), is(\"4578616d706c6521\"));\n+    assertThat(udf.encode(\"Plant trees\", \"ascii\", \"hex\"), is(\"506c616e74207472656573\"));\n+    assertThat(udf.encode(\"1 + 1 = 1\", \"ascii\", \"hex\"), is(\"31202b2031203d2031\"));\n+    assertThat(udf.encode(\"\u0395\u03bb\u03bb\u03ac\u03b4\u03b1\", \"ascii\", \"hex\"), is(\"3f3f3f3f3f3f\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NDI0MA=="}, "originalCommit": {"oid": "e44bbbdc4cbb06243635cad714ef1312d9a63688"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDk5MDIxOnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/encode.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMTowNTo1MVrOGeIznQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMTowNTo1MVrOGeIznQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1NDc0OQ==", "bodyText": "Test case that covers null values for the from and to types as well?", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434254749", "createdAt": "2020-06-03T01:05:51Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/encode.json", "diffHunk": "@@ -0,0 +1,60 @@\n+{\n+  \"comments\": [\n+    \"Tests covering the use of the encode UDF. The currently supported encodings are: hex, ascii, utf8 and base64.\"\n+  ],\n+  \"tests\": [\n+    {\n+      \"name\": \"encode hex\",\n+      \"statements\": [\n+        \"CREATE STREAM TEST (K STRING KEY, input_string VARCHAR) WITH (kafka_topic='test_topic', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT AS SELECT K, encode(input_string, 'hex', 'ascii') AS ASCII, encode(input_string, 'hex', 'utf8') as UTF8, encode(input_string, 'hex', 'base64') as BASE64 FROM TEST;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"test_topic\", \"value\": {\"input_string\": \"4578616d706C6521\"}},\n+        {\"topic\": \"test_topic\", \"value\": {\"input_string\": \"ce95cebbcebbceacceb4ceb1\"}},\n+        {\"topic\": \"test_topic\", \"value\": {\"input_string\": \"c39c6265726d656e736368\"}},\n+        {\"topic\": \"test_topic\", \"value\": {\"input_string\": null}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"value\": {\"ASCII\":\"Example!\", \"UTF8\": \"Example!\", \"BASE64\": \"RXhhbXBsZSE=\"}},\n+        {\"topic\": \"OUTPUT\", \"value\": {\"ASCII\":\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\", \"UTF8\": \"\u0395\u03bb\u03bb\u03ac\u03b4\u03b1\", \"BASE64\": \"zpXOu867zqzOtM6x\"}},\n+        {\"topic\": \"OUTPUT\", \"value\": {\"ASCII\":\"\ufffd\ufffdbermensch\", \"UTF8\": \"\u00dcbermensch\", \"BASE64\": \"w5xiZXJtZW5zY2g=\"}},\n+        {\"topic\": \"OUTPUT\", \"value\": {\"HEX\":null, \"UTF8\": null, \"BASE64\": null}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e44bbbdc4cbb06243635cad714ef1312d9a63688"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzg4MzY3OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzowMTo1NVrOGelO8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNzowMTo1NVrOGelO8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMDQ5OQ==", "bodyText": "This is public mutable state.   Better to make it immutable, i.e. use ImmutableMap.builder().", "url": "https://github.com/confluentinc/ksql/pull/5523#discussion_r434720499", "createdAt": "2020-06-03T17:01:55Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udf/string/Encode.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udf.string;\n+\n+import io.confluent.ksql.function.KsqlFunctionException;\n+import io.confluent.ksql.function.udf.Udf;\n+import io.confluent.ksql.function.udf.UdfDescription;\n+import io.confluent.ksql.function.udf.UdfParameter;\n+import io.confluent.ksql.util.KsqlConstants;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.commons.codec.DecoderException;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.codec.binary.Hex;\n+\n+@SuppressWarnings(\"checkstyle:ClassDataAbstractionCoupling\")\n+@UdfDescription(name = \"encode\",\n+    author = KsqlConstants.CONFLUENT_AUTHOR,\n+    description = \"Takes an input string s, which is encoded as input_encoding, \"\n+        + \"and encodes it as output_encoding. The accepted input and output encodings are: \"\n+        + \"hex, utf8, ascii and base64. Throws exception if provided encodings are not supported.\")\n+public class Encode {\n+\n+  static Map<String, Encoder> encoderMap = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e44bbbdc4cbb06243635cad714ef1312d9a63688"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3329, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}