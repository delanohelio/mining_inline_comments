{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMDg2MTI4", "number": 5049, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzo0MDozMVrODxbNLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzo0MDozMVrODxbNLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTUyNTU3OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-model/src/main/java/io/confluent/ksql/rest/entity/QueryDescription.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzo0MDozMVrOGE4-KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMDowNjo1M1rOGE5ebA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc4MDkwNA==", "bodyText": "Aren't there other states like REBALANCING, PENDING_SHUTDOWN etc.?  Should we document our rationale for clubbing all non-error states as RUNNING?", "url": "https://github.com/confluentinc/ksql/pull/5049#discussion_r407780904", "createdAt": "2020-04-13T23:40:31Z", "author": {"login": "apurvam"}, "path": "ksqldb-rest-model/src/main/java/io/confluent/ksql/rest/entity/QueryDescription.java", "diffHunk": "@@ -116,7 +116,13 @@ public String getExecutionPlan() {\n   // kept for backwards compatibility\n   @JsonProperty(\"state\")\n   public Optional<String> getState() {\n-    return Optional.of(ksqlHostQueryStatus.toString());\n+    if (ksqlHostQueryStatus.isEmpty()) {\n+      return Optional.empty();\n+    }\n+\n+    return Optional.of(\n+        (ksqlHostQueryStatus.containsValue(KsqlQueryStatus.ERROR)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b27464a8cbf046ab89bbc4019b9b3746dc5642"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc4OTE2NA==", "bodyText": "I was basing this off of the upcoming query error handling work being done. In the design doc, we're only exposing RUNNING and ERROR. Only having these two states probably makes more sense once that work is done, but I preemptively added them to KsqlQueryStatus.", "url": "https://github.com/confluentinc/ksql/pull/5049#discussion_r407789164", "createdAt": "2020-04-14T00:06:53Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-rest-model/src/main/java/io/confluent/ksql/rest/entity/QueryDescription.java", "diffHunk": "@@ -116,7 +116,13 @@ public String getExecutionPlan() {\n   // kept for backwards compatibility\n   @JsonProperty(\"state\")\n   public Optional<String> getState() {\n-    return Optional.of(ksqlHostQueryStatus.toString());\n+    if (ksqlHostQueryStatus.isEmpty()) {\n+      return Optional.empty();\n+    }\n+\n+    return Optional.of(\n+        (ksqlHostQueryStatus.containsValue(KsqlQueryStatus.ERROR)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc4MDkwNA=="}, "originalCommit": {"oid": "14b27464a8cbf046ab89bbc4019b9b3746dc5642"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3550, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}