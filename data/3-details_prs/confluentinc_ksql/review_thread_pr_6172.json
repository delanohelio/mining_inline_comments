{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMjA5ODk0", "number": 6172, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDowMTowN1rOEh5how==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDowMTowN1rOEh5how==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTgwOTYzOnYy", "diffSide": "LEFT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/query/QueryExecutor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDowMTowN1rOHPeNpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMToyMToxN1rOHPfiAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4NTcwMg==", "bodyText": "I assume the new exception is thrown for both a missing source topic and sink topic, replicating this behavior.  Is that right?", "url": "https://github.com/confluentinc/ksql/pull/6172#discussion_r485985702", "createdAt": "2020-09-10T00:01:07Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/query/QueryExecutor.java", "diffHunk": "@@ -326,20 +317,6 @@ private KsqlQueryBuilder queryBuilder(final QueryId queryId) {\n     return Optional.ofNullable(combined);\n   }\n \n-  private static Set<String> extractTopics(final Topology topology) {\n-    final Set<String> usedTopics = new HashSet<>();\n-    for (final Subtopology subtopology : topology.describe().subtopologies()) {\n-      for (final Node node : subtopology.nodes()) {\n-        if (node instanceof Source) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cce1e5666de585a7c1d23837c13cf8383c16c06"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5NTgyNA==", "bodyText": "Thanks for pointing this out, I thought about this and just assumed it did but now that I checked it... It seems like it does not actually capture missing sink topics :( cc @ableegoldman\nI created a stream A and then B that was just SELECT * FROM A. Then I deleted topic B and waited:\n[2020-09-09 17:34:24,536] ERROR Unhandled exception caught in streams thread _confluent-ksql-default_query_CSAS_B\n_0-3ebb4954-2cfb-40b0-b703-ae2828d3aa0a-StreamThread-2. (io.confluent.ksql.util.QueryMetadata:158)\norg.apache.kafka.streams.errors.StreamsException: Error encountered sending record to topic B for task 0_0 due to\n:\norg.apache.kafka.common.errors.TimeoutException: Topic B not present in metadata after 60000 ms.\n\nThis PR is probably still an improvement over what was there beforehand, which seemed to just not work (at least in the confluent cloud environment with multiple brokers). I'm going to test to see what happens if a repartition topic is deleted.", "url": "https://github.com/confluentinc/ksql/pull/6172#discussion_r485995824", "createdAt": "2020-09-10T00:37:53Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/query/QueryExecutor.java", "diffHunk": "@@ -326,20 +317,6 @@ private KsqlQueryBuilder queryBuilder(final QueryId queryId) {\n     return Optional.ofNullable(combined);\n   }\n \n-  private static Set<String> extractTopics(final Topology topology) {\n-    final Set<String> usedTopics = new HashSet<>();\n-    for (final Subtopology subtopology : topology.describe().subtopologies()) {\n-      for (final Node node : subtopology.nodes()) {\n-        if (node instanceof Source) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4NTcwMg=="}, "originalCommit": {"oid": "0cce1e5666de585a7c1d23837c13cf8383c16c06"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwMTEyNQ==", "bodyText": "It's only for missing source topics specifically. It doesn't apply to repartition topics either; that's trickier, how do we tell the difference between a deleted repartition topic and a repartition topic that we just need to create? There's followup work planned for all that, but this change was just a quick and easy fix for the user input topic case so we could make some progress", "url": "https://github.com/confluentinc/ksql/pull/6172#discussion_r486001125", "createdAt": "2020-09-10T00:57:59Z", "author": {"login": "ableegoldman"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/query/QueryExecutor.java", "diffHunk": "@@ -326,20 +317,6 @@ private KsqlQueryBuilder queryBuilder(final QueryId queryId) {\n     return Optional.ofNullable(combined);\n   }\n \n-  private static Set<String> extractTopics(final Topology topology) {\n-    final Set<String> usedTopics = new HashSet<>();\n-    for (final Subtopology subtopology : topology.describe().subtopologies()) {\n-      for (final Node node : subtopology.nodes()) {\n-        if (node instanceof Source) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4NTcwMg=="}, "originalCommit": {"oid": "0cce1e5666de585a7c1d23837c13cf8383c16c06"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjAwNzI5Nw==", "bodyText": "Thanks @ableegoldman - I'll go ahead and merge this and we can improve it as we go on.", "url": "https://github.com/confluentinc/ksql/pull/6172#discussion_r486007297", "createdAt": "2020-09-10T01:21:17Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/query/QueryExecutor.java", "diffHunk": "@@ -326,20 +317,6 @@ private KsqlQueryBuilder queryBuilder(final QueryId queryId) {\n     return Optional.ofNullable(combined);\n   }\n \n-  private static Set<String> extractTopics(final Topology topology) {\n-    final Set<String> usedTopics = new HashSet<>();\n-    for (final Subtopology subtopology : topology.describe().subtopologies()) {\n-      for (final Node node : subtopology.nodes()) {\n-        if (node instanceof Source) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk4NTcwMg=="}, "originalCommit": {"oid": "0cce1e5666de585a7c1d23837c13cf8383c16c06"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2746, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}