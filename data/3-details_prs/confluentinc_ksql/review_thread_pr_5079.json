{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0Mzg1MTQ3", "number": 5079, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1NDoyOFrOD0l3mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1NDoyOFrOD0l3mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDcyOTg0OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/PortedEndpoints.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjo1NDoyOFrOGJmTrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwODoxMToxNlrOGJpU1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxNzk5Ng==", "bodyText": "It's interesting that we choose to fail HTTP2 requests to the /query endpoint when the response is being returned, rather than when the request is received. What's the reasoning for this?", "url": "https://github.com/confluentinc/ksql/pull/5079#discussion_r412717996", "createdAt": "2020-04-22T06:54:28Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/PortedEndpoints.java", "diffHunk": "@@ -113,28 +142,59 @@ void handleTerminateRequest(final RoutingContext routingContext) {\n         .apply(requestObject, DefaultApiSecurityContext.create(routingContext));\n     completableFuture.thenAccept(endpointResponse -> {\n \n-      final Buffer responseBody;\n-      try {\n-        final byte[] bytes = OBJECT_MAPPER.writeValueAsBytes(endpointResponse.getResponseBody());\n-        responseBody = Buffer.buffer(bytes);\n-      } catch (JsonProcessingException e) {\n-        // This is an internal error as it's a bug in the server\n-        routingContext.fail(HttpStatus.SC_INTERNAL_SERVER_ERROR, e);\n-        return;\n-      }\n-\n       response.putHeader(CONTENT_TYPE_HEADER, JSON_CONTENT_TYPE);\n \n       response.setStatusCode(endpointResponse.getStatusCode())\n-          .setStatusMessage(endpointResponse.getStatusMessage())\n-          .end(responseBody);\n-\n+          .setStatusMessage(endpointResponse.getStatusMessage());\n+\n+      // What the old API returns in it's response is something of a mishmash - sometimes it's\n+      // a plain String, other times it's an object that needs to be JSON encoded, other times\n+      // it represents a stream.\n+      if (endpointResponse instanceof StreamedEndpointResponse) {\n+        if (routingContext.request().version() == HttpVersion.HTTP_2) {\n+          // The old /query endpoint uses chunked encoding which is not supported in HTTP2\n+          routingContext.response().setStatusCode(HttpStatus.SC_METHOD_NOT_ALLOWED)\n+              .setStatusMessage(\"The /query endpoint is not available using HTTP2\").end();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a352ccc63d3f547540683f03f6aa4c4db0154b03"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc2NzQ0NQ==", "bodyText": "This is because we don't know if the endpoint will return a StreamingOutput (for a print topic or a push query) or just a normal response (for a pull query) until it's been executed. It's just the StreamingOutput (chunked encoding) that's not supported in HTTP2", "url": "https://github.com/confluentinc/ksql/pull/5079#discussion_r412767445", "createdAt": "2020-04-22T08:11:16Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/PortedEndpoints.java", "diffHunk": "@@ -113,28 +142,59 @@ void handleTerminateRequest(final RoutingContext routingContext) {\n         .apply(requestObject, DefaultApiSecurityContext.create(routingContext));\n     completableFuture.thenAccept(endpointResponse -> {\n \n-      final Buffer responseBody;\n-      try {\n-        final byte[] bytes = OBJECT_MAPPER.writeValueAsBytes(endpointResponse.getResponseBody());\n-        responseBody = Buffer.buffer(bytes);\n-      } catch (JsonProcessingException e) {\n-        // This is an internal error as it's a bug in the server\n-        routingContext.fail(HttpStatus.SC_INTERNAL_SERVER_ERROR, e);\n-        return;\n-      }\n-\n       response.putHeader(CONTENT_TYPE_HEADER, JSON_CONTENT_TYPE);\n \n       response.setStatusCode(endpointResponse.getStatusCode())\n-          .setStatusMessage(endpointResponse.getStatusMessage())\n-          .end(responseBody);\n-\n+          .setStatusMessage(endpointResponse.getStatusMessage());\n+\n+      // What the old API returns in it's response is something of a mishmash - sometimes it's\n+      // a plain String, other times it's an object that needs to be JSON encoded, other times\n+      // it represents a stream.\n+      if (endpointResponse instanceof StreamedEndpointResponse) {\n+        if (routingContext.request().version() == HttpVersion.HTTP_2) {\n+          // The old /query endpoint uses chunked encoding which is not supported in HTTP2\n+          routingContext.response().setStatusCode(HttpStatus.SC_METHOD_NOT_ALLOWED)\n+              .setStatusMessage(\"The /query endpoint is not available using HTTP2\").end();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcxNzk5Ng=="}, "originalCommit": {"oid": "a352ccc63d3f547540683f03f6aa4c4db0154b03"}, "originalPosition": 133}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3565, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}