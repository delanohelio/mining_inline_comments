{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNzA2MjEy", "number": 6073, "title": "fix: CREATE IF NOT EXISTS does not work at all", "bodyText": "Description\nIF NOT EXISTS were not added to the docs for Streams , even though support has been provided in code.\nThis came up in discussion of #6036\nAdded docs for the same\nTesting done\nNone\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-08-21T15:38:55Z", "url": "https://github.com/confluentinc/ksql/pull/6073", "merged": true, "mergeCommit": {"oid": "6edf7ec27aa346198d2548287b1f9f11b9729a3b"}, "closed": true, "closedAt": "2020-12-08T13:32:59Z", "author": {"login": "hemantgs"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEq54ZABqjM3MTYwNzE4MDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkAbG1gBqjQwODI1MDkwOTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "760f5d8b5c99dc7a6d372351f24c9264cc25abae", "author": {"user": {"login": "hemantgs", "name": null}}, "url": "https://github.com/confluentinc/ksql/commit/760f5d8b5c99dc7a6d372351f24c9264cc25abae", "committedDate": "2020-08-21T15:34:08Z", "message": "docs: Added missing IF NOT EXISTS to Streams and Tables doc"}, "afterCommit": {"oid": "04546cc0c95c82da1233926eed8a7b69e2b10d19", "author": {"user": {"login": "hemantgs", "name": null}}, "url": "https://github.com/confluentinc/ksql/commit/04546cc0c95c82da1233926eed8a7b69e2b10d19", "committedDate": "2020-09-01T17:30:56Z", "message": "Fix for streams IF NOT EXISTS failing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5OTcyNzk4", "url": "https://github.com/confluentinc/ksql/pull/6073#pullrequestreview-479972798", "createdAt": "2020-09-01T17:37:01Z", "commit": {"oid": "04546cc0c95c82da1233926eed8a7b69e2b10d19"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozNzowMlrOHLBTew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozNzowMlrOHLBTew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNzc1NQ==", "bodyText": "@big-andy-coates @spena\nI noticed that CreateStreamCommand did not have the boolean flag for ifNotExists set here , I thought if this approach is ok , I will add that too and fail the query if its not set and source exists", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r481317755", "createdAt": "2020-09-01T17:37:02Z", "author": {"login": "hemantgs"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DdlCommandExec.java", "diffHunk": "@@ -75,6 +75,13 @@ public DdlCommandResult executeCreateStream(final CreateStreamCommand createStre\n           withQuery,\n           getKsqlTopic(createStream)\n       );\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04546cc0c95c82da1233926eed8a7b69e2b10d19"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDA0OTAy", "url": "https://github.com/confluentinc/ksql/pull/6073#pullrequestreview-480004902", "createdAt": "2020-09-01T18:22:24Z", "commit": {"oid": "04546cc0c95c82da1233926eed8a7b69e2b10d19"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMjoyNFrOHLC2sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODozNDozM1rOHLDQfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MzE1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the IF NOT EXISTS clause is present, the statement doesn't fail if the\n          \n          \n            \n            stream doesn't exist.\n          \n          \n            \n            If the IF NOT EXISTS clause is present, the statement won't fail if a\n          \n          \n            \n            stream with the same name already exists.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r481343155", "createdAt": "2020-09-01T18:22:24Z", "author": {"login": "big-andy-coates"}, "path": "docs/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -22,6 +22,10 @@ Description\n \r\n Create a new stream with the specified columns and properties.\r\n \r\n+If the IF NOT EXISTS clause is present, the statement doesn't fail if the\r\n+stream doesn't exist.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04546cc0c95c82da1233926eed8a7b69e2b10d19"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MzYxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the IF NOT EXISTS clause is present, the statement doesn't fail if the\n          \n          \n            \n            table doesn't exist.\n          \n          \n            \n            If the IF NOT EXISTS clause is present, the statement won't fail if a\n          \n          \n            \n            table with the same name already exists.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r481343610", "createdAt": "2020-09-01T18:23:16Z", "author": {"login": "big-andy-coates"}, "path": "docs/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -19,6 +19,9 @@ Description\n \r\n Create a new table with the specified columns and properties.\r\n \r\n+If the IF NOT EXISTS clause is present, the statement doesn't fail if the\r\n+table doesn't exist.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04546cc0c95c82da1233926eed8a7b69e2b10d19"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0OTI2MA==", "bodyText": "The place to put the check is in the CreateSourceFactory.  You'll need to pass the MetaStore in to the factory's constructor.\nSee DropSourceFactory for an example of the pattern.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r481349260", "createdAt": "2020-09-01T18:33:32Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DdlCommandExec.java", "diffHunk": "@@ -75,6 +75,13 @@ public DdlCommandResult executeCreateStream(final CreateStreamCommand createStre\n           withQuery,\n           getKsqlTopic(createStream)\n       );\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNzc1NQ=="}, "originalCommit": {"oid": "04546cc0c95c82da1233926eed8a7b69e2b10d19"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0OTc1OA==", "bodyText": "We shouldn't be splitting this into two methods, as this makes it much more likely someone will call putSource and inadvertently overwrite a source that they shouldn't.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r481349758", "createdAt": "2020-09-01T18:34:33Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-metastore/src/main/java/io/confluent/ksql/metastore/MetaStoreImpl.java", "diffHunk": "@@ -77,22 +77,20 @@ public DataSource getSource(final SourceName sourceName) {\n   }\n \n   @Override\n-  public void putSource(final DataSource dataSource, final boolean allowReplace) {\n+  public boolean validateSource(final DataSource dataSource, final boolean allowReplace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04546cc0c95c82da1233926eed8a7b69e2b10d19"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "04546cc0c95c82da1233926eed8a7b69e2b10d19", "author": {"user": {"login": "hemantgs", "name": null}}, "url": "https://github.com/confluentinc/ksql/commit/04546cc0c95c82da1233926eed8a7b69e2b10d19", "committedDate": "2020-09-01T17:30:56Z", "message": "Fix for streams IF NOT EXISTS failing"}, "afterCommit": {"oid": "3f58cd7f36ac21a669a065df18216a070b47f92c", "author": {"user": {"login": "hemantgs", "name": null}}, "url": "https://github.com/confluentinc/ksql/commit/3f58cd7f36ac21a669a065df18216a070b47f92c", "committedDate": "2020-09-03T07:48:05Z", "message": "Fix for streams IF NOT EXISTS failing\n\nChanges reverted and added to CommandFactories\n\nFixed and added tests\n\nFixed and added tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f58cd7f36ac21a669a065df18216a070b47f92c", "author": {"user": {"login": "hemantgs", "name": null}}, "url": "https://github.com/confluentinc/ksql/commit/3f58cd7f36ac21a669a065df18216a070b47f92c", "committedDate": "2020-09-03T07:48:05Z", "message": "Fix for streams IF NOT EXISTS failing\n\nChanges reverted and added to CommandFactories\n\nFixed and added tests\n\nFixed and added tests"}, "afterCommit": {"oid": "2559b8c8fd3072aa00c9b9808ef6b88fd41497c6", "author": {"user": {"login": "hemantgs", "name": null}}, "url": "https://github.com/confluentinc/ksql/commit/2559b8c8fd3072aa00c9b9808ef6b88fd41497c6", "committedDate": "2020-09-03T14:56:11Z", "message": "Fix for streams IF NOT EXISTS failing\n\nChanges reverted and added to CommandFactories\n\nFixed and added tests\n\nFixed and added tests\n\nFixed tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2559b8c8fd3072aa00c9b9808ef6b88fd41497c6", "author": {"user": {"login": "hemantgs", "name": null}}, "url": "https://github.com/confluentinc/ksql/commit/2559b8c8fd3072aa00c9b9808ef6b88fd41497c6", "committedDate": "2020-09-03T14:56:11Z", "message": "Fix for streams IF NOT EXISTS failing\n\nChanges reverted and added to CommandFactories\n\nFixed and added tests\n\nFixed and added tests\n\nFixed tests"}, "afterCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433", "author": {"user": {"login": "hemantgs", "name": null}}, "url": "https://github.com/confluentinc/ksql/commit/fa376379e975aebdaa414b59d5f8ebd7616cb433", "committedDate": "2020-09-04T10:59:49Z", "message": "Fixed tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2Njk4MDM2", "url": "https://github.com/confluentinc/ksql/pull/6073#pullrequestreview-486698036", "createdAt": "2020-09-11T10:41:26Z", "commit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo0MToyNlrOHQZ0-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo1MDo1MlrOHQaGPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MjQyNg==", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state. i.e. use requireNonNull.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486962426", "createdAt": "2020-09-11T10:41:26Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/CreateSourceFactory.java", "diffHunk": "@@ -68,20 +72,32 @@ public CreateSourceFactory(final ServiceContext serviceContext) {\n       final ServiceContext serviceContext,\n       final SerdeOptionsSupplier serdeOptionsSupplier,\n       final KeySerdeFactory keySerdeFactory,\n-      final ValueSerdeFactory valueSerdeFactory\n+      final ValueSerdeFactory valueSerdeFactory,\n+      final MetaStore metaStore\n   ) {\n     this.serviceContext = Objects.requireNonNull(serviceContext, \"serviceContext\");\n     this.serdeOptionsSupplier =\n         Objects.requireNonNull(serdeOptionsSupplier, \"serdeOptionsSupplier\");\n     this.keySerdeFactory = Objects.requireNonNull(keySerdeFactory, \"keySerdeFactory\");\n     this.valueSerdeFactory = Objects.requireNonNull(valueSerdeFactory, \"valueSerdeFactory\");\n+    this.metaStore = metaStore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MzAwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (dataSource != null) {\n          \n          \n            \n                if (dataSource != null && !statement.isOrReplace()) {", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486963007", "createdAt": "2020-09-11T10:42:47Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/CreateSourceFactory.java", "diffHunk": "@@ -115,6 +131,17 @@ public CreateTableCommand createTableCommand(\n       final KsqlConfig ksqlConfig\n   ) {\n     final SourceName sourceName = statement.getName();\n+    final DataSource dataSource = metaStore.getSource(sourceName);\n+\n+    if (dataSource != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MzM0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String.format(\"Cannot add %s '%s': A %s with the same name already exists\",\n          \n          \n            \n                            sourceType, sourceName.text(), sourceType));\n          \n          \n            \n                        String.format(\"Cannot add stream '%s': A %s with the same name already exists\",\n          \n          \n            \n                            sourceName.text(), sourceType.toLowerCase()));", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486963348", "createdAt": "2020-09-11T10:43:32Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/CreateSourceFactory.java", "diffHunk": "@@ -68,20 +72,32 @@ public CreateSourceFactory(final ServiceContext serviceContext) {\n       final ServiceContext serviceContext,\n       final SerdeOptionsSupplier serdeOptionsSupplier,\n       final KeySerdeFactory keySerdeFactory,\n-      final ValueSerdeFactory valueSerdeFactory\n+      final ValueSerdeFactory valueSerdeFactory,\n+      final MetaStore metaStore\n   ) {\n     this.serviceContext = Objects.requireNonNull(serviceContext, \"serviceContext\");\n     this.serdeOptionsSupplier =\n         Objects.requireNonNull(serdeOptionsSupplier, \"serdeOptionsSupplier\");\n     this.keySerdeFactory = Objects.requireNonNull(keySerdeFactory, \"keySerdeFactory\");\n     this.valueSerdeFactory = Objects.requireNonNull(valueSerdeFactory, \"valueSerdeFactory\");\n+    this.metaStore = metaStore;\n   }\n \n   public CreateStreamCommand createStreamCommand(\n       final CreateStream statement,\n       final KsqlConfig ksqlConfig\n   ) {\n     final SourceName sourceName = statement.getName();\n+    final DataSource dataSource = metaStore.getSource(sourceName);\n+\n+    if (dataSource != null && !statement.isOrReplace()) {\n+      final String sourceType = dataSource.getDataSourceType().getKsqlType();\n+      if (!statement.isNotExists()) {\n+        throw new KsqlException(\n+            String.format(\"Cannot add %s '%s': A %s with the same name already exists\",\n+                sourceType, sourceName.text(), sourceType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MzUwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String.format(\"Cannot add %s '%s': A %s with the same name already exists\",\n          \n          \n            \n                            sourceType, sourceName.text(), sourceType));\n          \n          \n            \n                        String.format(\"Cannot add table '%s': A %s with the same name already exists\",\n          \n          \n            \n                            sourceName.text(), sourceType.toLowerCase()));", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486963504", "createdAt": "2020-09-11T10:43:53Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/CreateSourceFactory.java", "diffHunk": "@@ -115,6 +131,17 @@ public CreateTableCommand createTableCommand(\n       final KsqlConfig ksqlConfig\n   ) {\n     final SourceName sourceName = statement.getName();\n+    final DataSource dataSource = metaStore.getSource(sourceName);\n+\n+    if (dataSource != null) {\n+      final String sourceType = dataSource.getDataSourceType().getKsqlType();\n+      if (!statement.isNotExists()) {\n+        throw new KsqlException(\n+            String.format(\"Cannot add %s '%s': A %s with the same name already exists\",\n+                sourceType, sourceName.text(), sourceType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NDkxMA==", "bodyText": "Isn't this check now redundant, given there is code in CreateSourceFactory to do this now?  We should let the code do what it used to do, which is throw an exception, not return a success code!", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486964910", "createdAt": "2020-09-11T10:46:57Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DdlCommandExec.java", "diffHunk": "@@ -66,6 +66,16 @@ private Executor(final String sql, final boolean withQuery) {\n \n     @Override\n     public DdlCommandResult executeCreateStream(final CreateStreamCommand createStream) {\n+      final SourceName sourceName = createStream.getSourceName();\n+      final DataSource dataSource = metaStore.getSource(sourceName);\n+\n+      if (dataSource != null && !createStream.isOrReplace()) {\n+        return new DdlCommandResult(true,\n+            String.format(\"Cannot add stream %s: A stream with the same name \"\n+                    + \"already exists.\",\n+                sourceName));\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NTAzMg==", "bodyText": "Isn't this check now redundant, given there is code in CreateSourceFactory to do this now?  We should let the code do what it used to do, which is throw an exception, not return a success code!", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486965032", "createdAt": "2020-09-11T10:47:10Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DdlCommandExec.java", "diffHunk": "@@ -75,12 +85,22 @@ public DdlCommandResult executeCreateStream(final CreateStreamCommand createStre\n           withQuery,\n           getKsqlTopic(createStream)\n       );\n+\n       metaStore.putSource(ksqlStream, createStream.isOrReplace());\n       return new DdlCommandResult(true, \"Stream created\");\n     }\n \n     @Override\n     public DdlCommandResult executeCreateTable(final CreateTableCommand createTable) {\n+      final SourceName sourceName = createTable.getSourceName();\n+      final DataSource dataSource = metaStore.getSource(sourceName);\n+\n+      if (dataSource != null && !createTable.isOrReplace()) {\n+        return new DdlCommandResult(true,\n+            String.format(\"Cannot add table %s: A table with the same name \"\n+                    + \"already exists.\",\n+                sourceName));\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NTY0OA==", "bodyText": "Add another two tests testing it does NOT throw if IF NOT EXIST is set.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486965648", "createdAt": "2020-09-11T10:48:20Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/CreateSourceFactoryTest.java", "diffHunk": "@@ -904,6 +921,41 @@ public void shouldThrowIfTableIsMissingPrimaryKey() {\n         containsString(\"Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\"));\n   }\n \n+  @Test\n+  public void shouldThrowIfStreamExits() {\n+    // Given:\n+    final CreateStream ddlStatement =\n+        new CreateStream(SOME_NAME, STREAM_ELEMENTS, false, false, withProperties);\n+\n+    // When:\n+    final Exception e = assertThrows(\n+        KsqlException.class, () -> createSourceFactory\n+            .createStreamCommand(ddlStatement, ksqlConfig));\n+\n+    // Then:\n+    assertThat(e.getMessage(),\n+        containsString(\"A STREAM with the same name already exists\"));\n+  }\n+\n+  @Test\n+  public void shouldThrowIfTableExits() {\n+    //Given\n+    final CreateTable ddlStatement = new CreateTable(TABLE_NAME,\n+        TableElements.of(\n+            tableElement(PRIMARY_KEY, \"COL1\", new Type(BIGINT)),\n+            tableElement(VALUE, \"COL2\", new Type(SqlTypes.STRING))),\n+        false, false, withProperties);\n+\n+    // When:\n+    final Exception e = assertThrows(\n+        KsqlException.class, () -> createSourceFactory\n+            .createTableCommand(ddlStatement, ksqlConfig));\n+\n+    // Then:\n+    assertThat(e.getMessage(),\n+        containsString(\"A TABLE with the same name already exists\"));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NTg3Ng==", "bodyText": "This test change should be reverted, right?", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486965876", "createdAt": "2020-09-11T10:48:51Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/DdlCommandExecTest.java", "diffHunk": "@@ -271,17 +271,18 @@ public void shouldDropMissingType() {\n   }\n \n   @Test\n-  public void shouldFailAddDuplicateStreamWithoutReplace() {\n+  public void shouldWarnAddDuplicateStreamWithoutReplace() {\n     // Given:\n     givenCreateStream();\n     cmdExec.execute(SQL_TEXT, createStream, false);\n \n     // When:\n     givenCreateStream(SCHEMA2, false);\n-    final KsqlException e = assertThrows(KsqlException.class, () -> cmdExec.execute(SQL_TEXT, createStream, false));\n+    final DdlCommandResult result =cmdExec.execute(SQL_TEXT, createStream, false);\n \n     // Then:\n-    assertThat(e.getMessage(), containsString(\"A stream with the same name already exists\"));\n+    assertThat(\"Expected successful execution\", result.isSuccess());\n+    assertThat(result.getMessage(), containsString(\"A stream with the same name already exists\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NjYwNw==", "bodyText": "This change should be reverted.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486966607", "createdAt": "2020-09-11T10:50:20Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/KsqlEngineTest.java", "diffHunk": "@@ -981,27 +981,21 @@ public void shouldNotThrowWhenPreparingDuplicateTable() {\n   public void shouldThrowWhenExecutingDuplicateTable() {\n     // Given:\n     final List<ParsedStatement> parsed = ksqlEngine.parse(\n-        \"CREATE TABLE FOO AS SELECT * FROM TEST2; \"\n+        \"CREATE TABLE FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM TEST2; \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NjY5MA==", "bodyText": "This change should be reverted.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486966690", "createdAt": "2020-09-11T10:50:30Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/KsqlEngineTest.java", "diffHunk": "@@ -981,27 +981,21 @@ public void shouldNotThrowWhenPreparingDuplicateTable() {\n   public void shouldThrowWhenExecutingDuplicateTable() {\n     // Given:\n     final List<ParsedStatement> parsed = ksqlEngine.parse(\n-        \"CREATE TABLE FOO AS SELECT * FROM TEST2; \"\n+        \"CREATE TABLE FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM TEST2; \"\n             + \"CREATE TABLE FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM TEST2;\");\n \n     givenStatementAlreadyExecuted(parsed.get(0));\n \n-    final PreparedStatement<?> prepared = prepare(parsed.get(1));\n+    final PreparedStatement<?> prepared = ksqlEngine.prepare(parsed.get(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NjcyNg==", "bodyText": "This change should be reverted.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486966726", "createdAt": "2020-09-11T10:50:35Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/KsqlEngineTest.java", "diffHunk": "@@ -981,27 +981,21 @@ public void shouldNotThrowWhenPreparingDuplicateTable() {\n   public void shouldThrowWhenExecutingDuplicateTable() {\n     // Given:\n     final List<ParsedStatement> parsed = ksqlEngine.parse(\n-        \"CREATE TABLE FOO AS SELECT * FROM TEST2; \"\n+        \"CREATE TABLE FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM TEST2; \"\n             + \"CREATE TABLE FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM TEST2;\");\n \n     givenStatementAlreadyExecuted(parsed.get(0));\n \n-    final PreparedStatement<?> prepared = prepare(parsed.get(1));\n+    final PreparedStatement<?> prepared = ksqlEngine.prepare(parsed.get(1));\n \n     // When:\n-    final KsqlStatementException e = assertThrows(\n-        KsqlStatementException.class,\n-        () -> ksqlEngine.execute(\n-            serviceContext,\n-            ConfiguredStatement.of(prepared, new HashMap<>(), KSQL_CONFIG)\n-        )\n+    ExecuteResult executeResult = ksqlEngine.execute(\n+        serviceContext,\n+        of(prepared, new HashMap<>(), KSQL_CONFIG)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2Njc1MQ==", "bodyText": "This change should be reverted.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486966751", "createdAt": "2020-09-11T10:50:39Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/KsqlEngineTest.java", "diffHunk": "@@ -981,27 +981,21 @@ public void shouldNotThrowWhenPreparingDuplicateTable() {\n   public void shouldThrowWhenExecutingDuplicateTable() {\n     // Given:\n     final List<ParsedStatement> parsed = ksqlEngine.parse(\n-        \"CREATE TABLE FOO AS SELECT * FROM TEST2; \"\n+        \"CREATE TABLE FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM TEST2; \"\n             + \"CREATE TABLE FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM TEST2;\");\n \n     givenStatementAlreadyExecuted(parsed.get(0));\n \n-    final PreparedStatement<?> prepared = prepare(parsed.get(1));\n+    final PreparedStatement<?> prepared = ksqlEngine.prepare(parsed.get(1));\n \n     // When:\n-    final KsqlStatementException e = assertThrows(\n-        KsqlStatementException.class,\n-        () -> ksqlEngine.execute(\n-            serviceContext,\n-            ConfiguredStatement.of(prepared, new HashMap<>(), KSQL_CONFIG)\n-        )\n+    ExecuteResult executeResult = ksqlEngine.execute(\n+        serviceContext,\n+        of(prepared, new HashMap<>(), KSQL_CONFIG)\n     );\n \n     // Then:\n-    assertThat(e, rawMessage(is(\n-        \"Cannot add table 'FOO': A table with the same name already exists\")));\n-    assertThat(e, statementText(is(\n-        \"CREATE TABLE FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM TEST2;\")));\n+    assertThat(executeResult.getQuery(), is(not(Optional.empty())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NjgxMA==", "bodyText": "This change should be reverted.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486966810", "createdAt": "2020-09-11T10:50:47Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/KsqlEngineTest.java", "diffHunk": "@@ -1036,32 +1030,24 @@ public void shouldNotThrowWhenPreparingDuplicateStream() {\n   }\n \n   @Test\n-  public void shouldThrowWhenExecutingDuplicateStream() {\n+  public void shouldNotThrowWhenExecutingDuplicateStream() {\n     // Given:\n     final List<ParsedStatement> parsed = ksqlEngine.parse(\n-        \"CREATE STREAM FOO AS SELECT * FROM ORDERS; \"\n+        \"CREATE STREAM FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM ORDERS; \"\n             + \"CREATE STREAM FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM ORDERS;\");\n \n     givenStatementAlreadyExecuted(parsed.get(0));\n \n     final PreparedStatement<?> prepared = ksqlEngine.prepare(parsed.get(1));\n \n     // When:\n-    final KsqlStatementException e = assertThrows(\n-        KsqlStatementException.class,\n-        () -> ksqlEngine.execute(\n-            serviceContext,\n-            of(prepared, new HashMap<>(), KSQL_CONFIG)\n-        )\n+    ExecuteResult executeResult = ksqlEngine.execute(\n+        serviceContext,\n+        of(prepared, new HashMap<>(), KSQL_CONFIG)\n     );\n \n     // Then:\n-    assertThat(e, rawMessage(\n-        is(\n-            \"Cannot add stream 'FOO': A stream with the same name already exists\")));\n-    assertThat(e, statementText(\n-        is(\n-            \"CREATE STREAM FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM ORDERS;\")));\n+    assertThat(executeResult.getQuery(), is(not(Optional.empty())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2Njg0NQ==", "bodyText": "This change should be reverted.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486966845", "createdAt": "2020-09-11T10:50:52Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java", "diffHunk": "@@ -63,6 +63,7 @@\n import io.confluent.ksql.version.metrics.ActivenessRegistrar;\n import java.net.URL;\n import java.time.Duration;\n+import java.util.Arrays;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2OTc0OTg5", "url": "https://github.com/confluentinc/ksql/pull/6073#pullrequestreview-486974989", "createdAt": "2020-09-11T17:02:05Z", "commit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433", "author": {"user": {"login": "hemantgs", "name": null}}, "url": "https://github.com/confluentinc/ksql/commit/fa376379e975aebdaa414b59d5f8ebd7616cb433", "committedDate": "2020-09-04T10:59:49Z", "message": "Fixed tests"}, "afterCommit": {"oid": "678163151432e1e935c4acbb426f41b75b22b488", "author": {"user": {"login": "hemantgs", "name": null}}, "url": "https://github.com/confluentinc/ksql/commit/678163151432e1e935c4acbb426f41b75b22b488", "committedDate": "2020-09-26T07:42:56Z", "message": "Fixed tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNjg4MjE3", "url": "https://github.com/confluentinc/ksql/pull/6073#pullrequestreview-521688217", "createdAt": "2020-11-02T14:40:43Z", "commit": {"oid": "7e21ffdca8e2558c7baef50a474643a2d260bd2d"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNDo0MDo0M1rOHsHKjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNDo0NToyMFrOHsHXEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAxNjc4MA==", "bodyText": "Seems redundant, but it is what DROP IF NOT EXIST does too. It has a check in the DropSourceCommand and another in this class, which returns the DdlCommandResult message without causing a failure.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r516016780", "createdAt": "2020-11-02T14:40:43Z", "author": {"login": "spena"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DdlCommandExec.java", "diffHunk": "@@ -66,6 +66,16 @@ private Executor(final String sql, final boolean withQuery) {\n \n     @Override\n     public DdlCommandResult executeCreateStream(final CreateStreamCommand createStream) {\n+      final SourceName sourceName = createStream.getSourceName();\n+      final DataSource dataSource = metaStore.getSource(sourceName);\n+\n+      if (dataSource != null && !createStream.isOrReplace()) {\n+        return new DdlCommandResult(true,\n+            String.format(\"Cannot add stream %s: A stream with the same name \"\n+                    + \"already exists.\",\n+                sourceName));\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NDkxMA=="}, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAxODk0MQ==", "bodyText": "Could you add two more tests shouldNotThrowWhenCreateStreamIfNotExistsIsSet and same for a table?", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r516018941", "createdAt": "2020-11-02T14:43:51Z", "author": {"login": "spena"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/CreateSourceFactoryTest.java", "diffHunk": "@@ -911,6 +929,41 @@ public void shouldThrowIfTableIsMissingPrimaryKey() {\n         containsString(\"Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\"));\n   }\n \n+  @Test\n+  public void shouldThrowIfStreamExits() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e21ffdca8e2558c7baef50a474643a2d260bd2d"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAxOTk4NQ==", "bodyText": "Is this part of the changes? Should it be reverted?", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r516019985", "createdAt": "2020-11-02T14:45:20Z", "author": {"login": "spena"}, "path": "ksqldb-version-metrics-client/src/main/java/io/confluent/support/metrics/BaseMetricsReporter.java", "diffHunk": "@@ -109,11 +109,11 @@ public void init() {\n \n     final String endpointHttp = supportConfig.getEndpointHttp();\n     final String endpointHttps = supportConfig.getEndpointHttps();\n-    final String proxyURI = supportConfig.getProxy();\n+    final String proxyUri = supportConfig.getProxy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e21ffdca8e2558c7baef50a474643a2d260bd2d"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7e21ffdca8e2558c7baef50a474643a2d260bd2d", "author": {"user": {"login": "hemantgs", "name": null}}, "url": "https://github.com/confluentinc/ksql/commit/7e21ffdca8e2558c7baef50a474643a2d260bd2d", "committedDate": "2020-09-26T08:45:52Z", "message": "Checkstyle fix"}, "afterCommit": {"oid": "b7aada836ecdaaa0aa882d5d1a5fd1a26fac263b", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/b7aada836ecdaaa0aa882d5d1a5fd1a26fac263b", "committedDate": "2020-11-06T18:51:47Z", "message": "fix: check IF NOT EXISTS is set in EngineExecutor"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7aada836ecdaaa0aa882d5d1a5fd1a26fac263b", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/b7aada836ecdaaa0aa882d5d1a5fd1a26fac263b", "committedDate": "2020-11-06T18:51:47Z", "message": "fix: check IF NOT EXISTS is set in EngineExecutor"}, "afterCommit": {"oid": "b1ea1535fbf00211e33449cddf2ba64792c1b9c3", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/b1ea1535fbf00211e33449cddf2ba64792c1b9c3", "committedDate": "2020-11-13T22:01:32Z", "message": "fix: display warning message with C*AS + IF NOT EXISTS statements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNDQ3NTg0", "url": "https://github.com/confluentinc/ksql/pull/6073#pullrequestreview-530447584", "createdAt": "2020-11-13T22:05:11Z", "commit": {"oid": "b1ea1535fbf00211e33449cddf2ba64792c1b9c3"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjowNToxMVrOHzBKEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjowNTo1N1rOHzBLFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI1ODM4NQ==", "bodyText": "I had to build the query information from the plan instead of executing it. This avoids failing with an error if the IF NOT EXISTS keyword is used in the CREATE_AS statement. Also, this seems a better approach than execution 'cause this injector is only registering the schema in SR.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r523258385", "createdAt": "2020-11-13T22:05:11Z", "author": {"login": "spena"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/schema/ksql/inference/SchemaRegisterInjector.java", "diffHunk": "@@ -110,26 +109,28 @@ private void registerForCreateSource(final ConfiguredStatement<? extends CreateS\n   }\n \n   private void registerForCreateAs(final ConfiguredStatement<? extends CreateAsSelect> cas) {\n-    final ServiceContext sandboxServiceContext = SandboxedServiceContext.create(serviceContext);\n-    final ExecuteResult executeResult = executionContext\n-        .createSandbox(sandboxServiceContext)\n-        .execute(sandboxServiceContext, cas);\n-\n-    final PersistentQueryMetadata queryMetadata = (PersistentQueryMetadata) executeResult\n-        .getQuery()\n-        .orElseThrow(() -> new KsqlStatementException(\n-            \"Could not determine output schema for query due to error: \"\n-                + executeResult.getCommandResult(),\n-            cas.getStatementText()\n-        ));\n+    final CreateSourceCommand createSourceCommand;\n+\n+    try {\n+      final ServiceContext sandboxServiceContext = SandboxedServiceContext.create(serviceContext);\n+      createSourceCommand = (CreateSourceCommand)\n+          executionContext.createSandbox(sandboxServiceContext)\n+              .plan(sandboxServiceContext, cas)\n+              .getDdlCommand()\n+              .get();\n+    } catch (final Exception e) {\n+      throw new KsqlStatementException(\n+          \"Could not determine output schema for query due to error: \"\n+              + e.getMessage(), cas.getStatementText(), e);\n+    }\n \n     registerSchemas(\n-        queryMetadata.getLogicalSchema(),\n-        queryMetadata.getResultTopic().getKafkaTopicName(),\n-        queryMetadata.getResultTopic().getKeyFormat().getFormatInfo(),\n-        queryMetadata.getPhysicalSchema().keySchema().features(),\n-        queryMetadata.getResultTopic().getValueFormat().getFormatInfo(),\n-        queryMetadata.getPhysicalSchema().valueSchema().features(),\n+        createSourceCommand.getSchema(),\n+        createSourceCommand.getTopicName(),\n+        createSourceCommand.getFormats().getKeyFormat(),\n+        createSourceCommand.getFormats().getKeyFeatures(),\n+        createSourceCommand.getFormats().getValueFormat(),\n+        createSourceCommand.getFormats().getValueFeatures(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ea1535fbf00211e33449cddf2ba64792c1b9c3"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI1ODY0Ng==", "bodyText": "This is a new test now that verifies the IF NOT EXISTS works.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r523258646", "createdAt": "2020-11-13T22:05:57Z", "author": {"login": "spena"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/KsqlEngineTest.java", "diffHunk": "@@ -981,27 +981,21 @@ public void shouldNotThrowWhenPreparingDuplicateTable() {\n   public void shouldThrowWhenExecutingDuplicateTable() {\n     // Given:\n     final List<ParsedStatement> parsed = ksqlEngine.parse(\n-        \"CREATE TABLE FOO AS SELECT * FROM TEST2; \"\n+        \"CREATE TABLE FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM TEST2; \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NjYwNw=="}, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1ea1535fbf00211e33449cddf2ba64792c1b9c3", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/b1ea1535fbf00211e33449cddf2ba64792c1b9c3", "committedDate": "2020-11-13T22:01:32Z", "message": "fix: display warning message with C*AS + IF NOT EXISTS statements"}, "afterCommit": {"oid": "a8a1850d3d7d44231692c64c6d24e74e6e8273f2", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/a8a1850d3d7d44231692c64c6d24e74e6e8273f2", "committedDate": "2020-11-19T14:34:02Z", "message": "fix: display warning message with C*AS + IF NOT EXISTS statements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a8a1850d3d7d44231692c64c6d24e74e6e8273f2", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/a8a1850d3d7d44231692c64c6d24e74e6e8273f2", "committedDate": "2020-11-19T14:34:02Z", "message": "fix: display warning message with C*AS + IF NOT EXISTS statements"}, "afterCommit": {"oid": "9a1c44072fa8f33ae5d1faaa185bbabf1c066525", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/9a1c44072fa8f33ae5d1faaa185bbabf1c066525", "committedDate": "2020-12-01T03:22:10Z", "message": "chore: fix test issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NjI4MjQx", "url": "https://github.com/confluentinc/ksql/pull/6073#pullrequestreview-546628241", "createdAt": "2020-12-07T23:31:07Z", "commit": {"oid": "9a1c44072fa8f33ae5d1faaa185bbabf1c066525"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzozMTowN1rOIA_uLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzozMTowN1rOIA_uLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxNDkyNA==", "bodyText": "nit: i think we should use dataSource.getDataSourceType().getKsqlType() here and in executeCreateTable", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r537914924", "createdAt": "2020-12-07T23:31:07Z", "author": {"login": "jzaralim"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DdlCommandExec.java", "diffHunk": "@@ -81,6 +81,16 @@ private Executor(\n \n     @Override\n     public DdlCommandResult executeCreateStream(final CreateStreamCommand createStream) {\n+      final SourceName sourceName = createStream.getSourceName();\n+      final DataSource dataSource = metaStore.getSource(sourceName);\n+\n+      if (dataSource != null && !createStream.isOrReplace()) {\n+        return new DdlCommandResult(true,\n+            String.format(\"Cannot add stream %s: A stream with the same name \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a1c44072fa8f33ae5d1faaa185bbabf1c066525"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2965dcdfbf2497364f33506bc22997f9f2bded83", "author": {"user": {"login": "hemantgs", "name": null}}, "url": "https://github.com/confluentinc/ksql/commit/2965dcdfbf2497364f33506bc22997f9f2bded83", "committedDate": "2020-12-08T02:07:47Z", "message": "docs: Added missing IF NOT EXISTS to Streams and Tables doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b01aebc5c183bccf95895a9952edd7e40aed243f", "author": {"user": {"login": "hemantgs", "name": null}}, "url": "https://github.com/confluentinc/ksql/commit/b01aebc5c183bccf95895a9952edd7e40aed243f", "committedDate": "2020-12-08T02:07:47Z", "message": "Fix for streams IF NOT EXISTS failing\n\nChanges reverted and added to CommandFactories\n\nFixed and added tests\n\nFixed and added tests\n\nFixed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a21ee7f4984d61247c6c1c760c496e6496b95ee4", "author": {"user": {"login": "hemantgs", "name": null}}, "url": "https://github.com/confluentinc/ksql/commit/a21ee7f4984d61247c6c1c760c496e6496b95ee4", "committedDate": "2020-12-08T02:07:47Z", "message": "Fixed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b86142608b747306c05e75a72537ede230189c87", "author": {"user": {"login": "hemantgs", "name": null}}, "url": "https://github.com/confluentinc/ksql/commit/b86142608b747306c05e75a72537ede230189c87", "committedDate": "2020-12-08T02:07:47Z", "message": "Review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bc0a99931a32165c416d02b1de6a9bb90325caf", "author": {"user": {"login": "hemantgs", "name": null}}, "url": "https://github.com/confluentinc/ksql/commit/6bc0a99931a32165c416d02b1de6a9bb90325caf", "committedDate": "2020-12-08T02:07:47Z", "message": "Fixed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dfd7f5c9b3ceddd3a3db61aed750b6f82044927", "author": {"user": {"login": "hemantgs", "name": null}}, "url": "https://github.com/confluentinc/ksql/commit/7dfd7f5c9b3ceddd3a3db61aed750b6f82044927", "committedDate": "2020-12-08T02:07:48Z", "message": "Checkstyle fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff9c504abdc3f4c58e8066e277b9ffc08ad12b6a", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/ff9c504abdc3f4c58e8066e277b9ffc08ad12b6a", "committedDate": "2020-12-08T02:07:48Z", "message": "fix: check IF NOT EXISTS is set in EngineExecutor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fe2c4aa6d6f6d44305d43bb1e03c6a757634b49", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/9fe2c4aa6d6f6d44305d43bb1e03c6a757634b49", "committedDate": "2020-12-08T02:07:48Z", "message": "fix: display warning message with C*AS + IF NOT EXISTS statements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a847007e1406f7ddab8263b7f824013be25f230", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/8a847007e1406f7ddab8263b7f824013be25f230", "committedDate": "2020-12-08T02:07:48Z", "message": "chore: fix test issue"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a1c44072fa8f33ae5d1faaa185bbabf1c066525", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/9a1c44072fa8f33ae5d1faaa185bbabf1c066525", "committedDate": "2020-12-01T03:22:10Z", "message": "chore: fix test issue"}, "afterCommit": {"oid": "8a847007e1406f7ddab8263b7f824013be25f230", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/8a847007e1406f7ddab8263b7f824013be25f230", "committedDate": "2020-12-08T02:07:48Z", "message": "chore: fix test issue"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4724, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}