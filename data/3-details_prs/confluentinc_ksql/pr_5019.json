{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMzM2MjQ5", "number": 5019, "title": "fix: improve handling of NULLs", "bodyText": "Description\nThis PR replaces #4869. It has many of the same changes, but not SqlNull type, and more fixes on top.\nfixes: #4912 and may other bugs around use of NULL, you can now:\n\ninsert NULL values using INSERT INTO, for example INSERT INTO foo VALUES (NULL, NULL);, including use of ARRAY, MAP & STRUCT constructors with NULLs.\ncreate MAPs with null keys and values, for example MAP('k0' := NULL, CAST(NULL AS STRING) := 10).  (At least one key needs to be non-null or CAST so that ksqlDB can determine the schema of the map).\nCAST NULL to any type, including the complex types ARRAY, MAP and STRUCT.\n\nAlso, better error messages, on:\n\nPull query on NULL key.  Previously, blew up for non-string keys.\nPull query with non-literal expression for the key. Previously blew up.\n\nTesting done\nusual.\nReviewing notes:\nCommits are broken down as follows:\n\nProduction changes.  I've added notes inline where I thought it might help.\nRemove some unused functions in production code.\nTest code updates (including (r)QTT).\nhistorical plans\n\nI advise reviewing each commit separately.  It may help to view the QTT & RQTT test changes in the third commit to understand the problems being solved.\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-04-07T15:22:21Z", "url": "https://github.com/confluentinc/ksql/pull/5019", "merged": true, "mergeCommit": {"oid": "c53dd68bd912d79ced54403650ba13597ffe35a0"}, "closed": true, "closedAt": "2020-04-14T13:31:14Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVU4OEAH2gAyNDAwMzM2MjQ5OjFhMTE1M2JiOWIzZGM0NjRiZTg2OTI0YWNhZDJkN2E3NWY2ZDVkNWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXhiIIgH2gAyNDAwMzM2MjQ5OmY2YTQxNDRmYzg0ZDkwZDVmOTY4Y2RiOTc1Y2RjNDJiODhkOWMwODg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/1a1153bb9b3dc464be86924acad2d7a75f6d5d5d", "committedDate": "2020-04-07T15:18:00Z", "message": "fix: improve handling of NULLs\n\nfixes: #4912 and may other bugs around use of NULL.\n\nfixes a few issues with NULLs in ksqlDB. You can now:\n\n - insert NULL values using `INSERT INTO`, for example `INSERT INTO foo VALUES (NULL, NULL);`, including use of `ARRAY`, `MAP` & `STRUCT` constructors with `NULL`s.\n - create MAPs with null keys and values, for example `MAP('k0' := NULL, CAST(NULL AS STRING) := 10)`.  (At least one key needs to be non-null or CAST so that ksqlDB can determine the schema of the map).\n - CAST NULL to any type, including the complex types `ARRAY`, `MAP` and `STRUCT`.\n\nAlso, better error messages, on:\n\n - Pull query on NULL key.  Previously, blew up for non-string keys.\n - Pull query with non-literal expression for the key. Previously blew up."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "841c804dbb8aa722093bda3290f2f68302644ea4", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/841c804dbb8aa722093bda3290f2f68302644ea4", "committedDate": "2020-04-07T15:22:48Z", "message": "chore: remove unused code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d22ed7eb91bba8607f8873ff4c0cdcdda41d062", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/5d22ed7eb91bba8607f8873ff4c0cdcdda41d062", "committedDate": "2020-04-07T15:23:38Z", "message": "test: tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0d8792d9d7d95d64f3bb075acdc2fdaee4ded55", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/c0d8792d9d7d95d64f3bb075acdc2fdaee4ded55", "committedDate": "2020-04-07T15:23:49Z", "message": "test: historical plans"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MjMyNTk1", "url": "https://github.com/confluentinc/ksql/pull/5019#pullrequestreview-389232595", "createdAt": "2020-04-07T15:28:25Z", "commit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNToyODoyNlrOGCJMnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNToyODoyNlrOGCJMnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkwMTAyMw==", "bodyText": "This avoids any compiling of code etc to handle a NULL literal.", "url": "https://github.com/confluentinc/ksql/pull/5019#discussion_r404901023", "createdAt": "2020-04-07T15:28:26Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java", "diffHunk": "@@ -588,8 +589,13 @@ protected Object visitExpression(final Expression expression, final Void context\n                     fieldName,\n                     valueSqlType,\n                     value));\n+          })\n+          .orElse(null);\n+    }\n \n-          });\n+    @Override\n+    public Object visitNullLiteral(final NullLiteral node, final Void context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MjMzMjQ2", "url": "https://github.com/confluentinc/ksql/pull/5019#pullrequestreview-389233246", "createdAt": "2020-04-07T15:29:08Z", "commit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNToyOTowOFrOGCJO0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNToyOTowOFrOGCJO0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkwMTU4NQ==", "bodyText": "This avoids an NPE.  If not called the return value is left at the default Object, which is fine for nulls.", "url": "https://github.com/confluentinc/ksql/pull/5019#discussion_r404901585", "createdAt": "2020-04-07T15:29:08Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/CodeGenRunner.java", "diffHunk": "@@ -112,7 +112,10 @@ public ExpressionMetadata buildCodeGenFromParseTree(\n       final SqlType expressionType = expressionTypeManager\n           .getExpressionSqlType(expression);\n \n-      ee.setExpressionType(SQL_TO_JAVA_TYPE_CONVERTER.toJavaType(expressionType));\n+      if (expressionType != null) {\n+        // expressionType can be null if expression is NULL.\n+        ee.setExpressionType(SQL_TO_JAVA_TYPE_CONVERTER.toJavaType(expressionType));\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MjMzNjgz", "url": "https://github.com/confluentinc/ksql/pull/5019#pullrequestreview-389233683", "createdAt": "2020-04-07T15:29:36Z", "commit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNToyOTozNlrOGCJQIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNToyOTozNlrOGCJQIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkwMTkyMA==", "bodyText": "Switch to a new builder type that won't throw on null keys or values.", "url": "https://github.com/confluentinc/ksql/pull/5019#discussion_r404901920", "createdAt": "2020-04-07T15:29:36Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/SqlToJavaVisitor.java", "diffHunk": "@@ -834,7 +836,9 @@ private String buildSupplierCode(final String typeString, final String code) {\n         final CreateMapExpression exp,\n         final Void context\n     ) {\n-      final StringBuilder map = new StringBuilder(\"ImmutableMap.builder()\");\n+      final StringBuilder map = new StringBuilder(\"new MapBuilder(\");\n+      map.append(exp.getMap().size());\n+      map.append((')'));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MjM1NzQz", "url": "https://github.com/confluentinc/ksql/pull/5019#pullrequestreview-389235743", "createdAt": "2020-04-07T15:31:46Z", "commit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTozMTo0NlrOGCJW4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTozMTo0NlrOGCJW4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkwMzY0OA==", "bodyText": "getCast no longer calls sqlType.supportsCast as it is this the getCast method that determines which casts are supported and which are not. Hence supportsCast is superfluous and likely to get out of date with what this method supports.", "url": "https://github.com/confluentinc/ksql/pull/5019#discussion_r404903648", "createdAt": "2020-04-07T15:31:46Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/SqlToJavaVisitor.java", "diffHunk": "@@ -925,27 +929,25 @@ private CastVisitor() {\n     }\n \n     static Pair<String, SqlType> getCast(final Pair<String, SqlType> expr, final SqlType sqlType) {\n-      if (!sqlType.supportsCast()) {\n-        throw new KsqlFunctionException(\n-            \"Only casts to primitive types and decimal are supported: \" + sqlType);\n-      }\n-\n-      final SqlType rightSchema = expr.getRight();\n-      if (sqlType.equals(rightSchema) || rightSchema == null) {\n+      final SqlType sourceType = expr.getRight();\n+      if (sourceType == null || sqlType.equals(sourceType)) {\n+        // sourceType is null if source is SQL NULL\n         return new Pair<>(expr.getLeft(), sqlType);\n       }\n \n-      return CASTERS.getOrDefault(\n-          sqlType.baseType(),\n-          (e, t, r) -> {\n-            throw new KsqlException(\"Invalid cast operation: \" + t);\n-          }\n-      )\n-          .cast(expr, sqlType, sqlType);\n+      return CASTERS.getOrDefault(sqlType.baseType(), CastVisitor::unsupportedCast)\n+          .cast(expr, sqlType);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MjM2NTg2", "url": "https://github.com/confluentinc/ksql/pull/5019#pullrequestreview-389236586", "createdAt": "2020-04-07T15:32:39Z", "commit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTozMjozOVrOGCJZrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTozMjozOVrOGCJZrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkwNDM2Ng==", "bodyText": "note: these methods were always called with the same param for returnType and sqlType: removed the duplication.", "url": "https://github.com/confluentinc/ksql/pull/5019#discussion_r404904366", "createdAt": "2020-04-07T15:32:39Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/SqlToJavaVisitor.java", "diffHunk": "@@ -1003,13 +1005,13 @@ private CastVisitor() {\n     }\n \n     private static Pair<String, SqlType> castDecimal(\n-        final Pair<String, SqlType> expr, final SqlType sqltype, final SqlType returnType\n+        final Pair<String, SqlType> expr, final SqlType returnType\n     ) {\n-      if (!(sqltype instanceof SqlDecimal)) {\n-        throw new KsqlException(\"Expected decimal type: \" + sqltype);\n+      if (!(returnType instanceof SqlDecimal)) {\n+        throw new KsqlException(\"Expected decimal type: \" + returnType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MjM3MDEw", "url": "https://github.com/confluentinc/ksql/pull/5019#pullrequestreview-389237010", "createdAt": "2020-04-07T15:33:05Z", "commit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTozMzowNVrOGCJbFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTozMzowNVrOGCJbFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkwNDcyNA==", "bodyText": "Builder of maps with nulls", "url": "https://github.com/confluentinc/ksql/pull/5019#discussion_r404904724", "createdAt": "2020-04-07T15:33:05Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/codegen/helpers/MapBuilder.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.codegen.helpers;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Used to construct maps using the builder pattern. Note that we cannot use {@link\n+ * com.google.common.collect.ImmutableMap} because it does not accept null values.\n+ */\n+public class MapBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MjM4Njcx", "url": "https://github.com/confluentinc/ksql/pull/5019#pullrequestreview-389238671", "createdAt": "2020-04-07T15:34:54Z", "commit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTozNDo1NFrOGCJgqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTozNDo1NFrOGCJgqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkwNjE1Mw==", "bodyText": "Removed this as its not needed.  It's getCast in SqlToJavaVisitor that determines what casts are supported.  Removing this check just means it fails, with the same error, slightly later in flow.", "url": "https://github.com/confluentinc/ksql/pull/5019#discussion_r404906153", "createdAt": "2020-04-07T15:34:54Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/util/ExpressionTypeManager.java", "diffHunk": "@@ -146,13 +145,7 @@ public Void visitNotExpression(\n \n     @Override\n     public Void visitCast(final Cast node, final ExpressionTypeContext expressionTypeContext) {\n-      final SqlType sqlType = node.getType().getSqlType();\n-      if (!sqlType.supportsCast()) {\n-        throw new KsqlFunctionException(\"Only casts to primitive types or decimals \"\n-            + \"are supported: \" + sqlType);\n-      }\n-\n-      expressionTypeContext.setSqlType(sqlType);\n+      expressionTypeContext.setSqlType(node.getType().getSqlType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MjQwNTYz", "url": "https://github.com/confluentinc/ksql/pull/5019#pullrequestreview-389240563", "createdAt": "2020-04-07T15:36:52Z", "commit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTozNjo1MlrOGCJmcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTozNjo1MlrOGCJmcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkwNzYzMw==", "bodyText": "refactored to allow coerce to return a successful coercion with a no value result, i.e. coercion of nulls.  Previous return value would not differentiate between a failure and 'no value'", "url": "https://github.com/confluentinc/ksql/pull/5019#discussion_r404907633", "createdAt": "2020-04-07T15:36:52Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/schema/ksql/DefaultSqlValueCoercer.java", "diffHunk": "@@ -37,28 +37,33 @@\n \n   INSTANCE;\n \n-  private static final Map<SqlBaseType, BiFunction<Number, SqlType, Optional<Number>>> UPCASTER =\n-      ImmutableMap.<SqlBaseType, BiFunction<Number, SqlType, Optional<Number>>>builder()\n-          .put(SqlBaseType.INTEGER, (num, type) -> Optional.of(num.intValue()))\n-          .put(SqlBaseType.BIGINT, (num, type) -> Optional.of(num.longValue()))\n-          .put(SqlBaseType.DOUBLE, (num, type) -> Optional.of(num.doubleValue()))\n+  private static final Map<SqlBaseType, BiFunction<Number, SqlType, Result>> UPCASTER =\n+      ImmutableMap.<SqlBaseType, BiFunction<Number, SqlType, Result>>builder()\n+          .put(SqlBaseType.INTEGER, (num, type) -> Result.of(num.intValue()))\n+          .put(SqlBaseType.BIGINT, (num, type) -> Result.of(num.longValue()))\n+          .put(SqlBaseType.DOUBLE, (num, type) -> Result.of(num.doubleValue()))\n           .put(SqlBaseType.DECIMAL, (num, type) -> {\n             try {\n-              return Optional.ofNullable(\n+              return Result.of(\n                   DecimalUtil.ensureFit(\n                       new BigDecimal(String.format(\"%s\", num)),\n                       (SqlDecimal) type));\n             } catch (final Exception e) {\n-              return Optional.empty();\n+              return Result.failure();\n             }\n           }).build();\n \n   @Override\n-  public Optional<?> coerce(final Object value, final SqlType targetType) {\n+  public Result coerce(final Object value, final SqlType targetType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MjYwNTg2", "url": "https://github.com/confluentinc/ksql/pull/5019#pullrequestreview-389260586", "createdAt": "2020-04-07T15:57:58Z", "commit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTo1Nzo1OFrOGCKl1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTo1Nzo1OFrOGCKl1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyMzg2MQ==", "bodyText": "look mar, null handling!", "url": "https://github.com/confluentinc/ksql/pull/5019#discussion_r404923861", "createdAt": "2020-04-07T15:57:58Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/schema/ksql/DefaultSqlValueCoercer.java", "diffHunk": "@@ -37,28 +37,33 @@\n \n   INSTANCE;\n \n-  private static final Map<SqlBaseType, BiFunction<Number, SqlType, Optional<Number>>> UPCASTER =\n-      ImmutableMap.<SqlBaseType, BiFunction<Number, SqlType, Optional<Number>>>builder()\n-          .put(SqlBaseType.INTEGER, (num, type) -> Optional.of(num.intValue()))\n-          .put(SqlBaseType.BIGINT, (num, type) -> Optional.of(num.longValue()))\n-          .put(SqlBaseType.DOUBLE, (num, type) -> Optional.of(num.doubleValue()))\n+  private static final Map<SqlBaseType, BiFunction<Number, SqlType, Result>> UPCASTER =\n+      ImmutableMap.<SqlBaseType, BiFunction<Number, SqlType, Result>>builder()\n+          .put(SqlBaseType.INTEGER, (num, type) -> Result.of(num.intValue()))\n+          .put(SqlBaseType.BIGINT, (num, type) -> Result.of(num.longValue()))\n+          .put(SqlBaseType.DOUBLE, (num, type) -> Result.of(num.doubleValue()))\n           .put(SqlBaseType.DECIMAL, (num, type) -> {\n             try {\n-              return Optional.ofNullable(\n+              return Result.of(\n                   DecimalUtil.ensureFit(\n                       new BigDecimal(String.format(\"%s\", num)),\n                       (SqlDecimal) type));\n             } catch (final Exception e) {\n-              return Optional.empty();\n+              return Result.failure();\n             }\n           }).build();\n \n   @Override\n-  public Optional<?> coerce(final Object value, final SqlType targetType) {\n+  public Result coerce(final Object value, final SqlType targetType) {\n     return doCoerce(value, targetType);\n   }\n \n-  private static Optional<?> doCoerce(final Object value, final SqlType targetType) {\n+  private static Result doCoerce(final Object value, final SqlType targetType) {\n+    if (value == null) {\n+      // NULL can be cast to any type:\n+      return Result.nullResult();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MjYyOTU1", "url": "https://github.com/confluentinc/ksql/pull/5019#pullrequestreview-389262955", "createdAt": "2020-04-07T16:00:26Z", "commit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjowMDoyNlrOGCKs8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjowMDoyNlrOGCKs8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNTY4MQ==", "bodyText": "As above, this change in return value is to allow callers to differentiate between:\n\nthe coercion failed. Previously this returned Optional.empty and now returns Result.failed.\nthe coercion succeeded and the result was null. Previously, this threw an NPE and now returns Result.nullResult.\n\nNormal results where previously Optional.of(whateva) and are now Result.of(whateva).", "url": "https://github.com/confluentinc/ksql/pull/5019#discussion_r404925681", "createdAt": "2020-04-07T16:00:26Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/schema/ksql/SqlValueCoercer.java", "diffHunk": "@@ -26,11 +28,71 @@\n   /**\n    * Coerce the supplied {@code value} to the supplied {@code sqlType}.\n    *\n-   * <p>Complex SQL types are not supported, (yet).\n-   *\n    * @param value the value to try to coerce.\n    * @param targetSchema the target SQL type.\n-   * @return the coerced value if the value could be coerced, {@link Optional#empty()} otherwise.\n+   * @return the Result of the coercion.\n    */\n-  Optional<?> coerce(Object value, SqlType targetSchema);\n+  Result coerce(Object value, SqlType targetSchema);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MjY5MzYx", "url": "https://github.com/confluentinc/ksql/pull/5019#pullrequestreview-389269361", "createdAt": "2020-04-07T16:06:36Z", "commit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjowNjozNlrOGCK_WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjowNjozNlrOGCK_WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkzMDM5Mw==", "bodyText": "Catches errors on pull queries.\n\nfirst one catches comparison of ROWKEY to non-literal, e.g. a udf call, or some other expression. Previously this would blow up with class cast exception.\nsecond one catches comparison with NULL.  For STRING keys this previously returned some weird streams error and for non-STRING keys some confusing error about not being able to coerce a STRING to the required key type. (NullLiteral returns \"null\" from getValue for some weird reason).", "url": "https://github.com/confluentinc/ksql/pull/5019#discussion_r404930393", "createdAt": "2020-04-07T16:06:36Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -564,8 +565,15 @@ private static Object extractKeyWhereClause(\n     }\n \n     final Expression other = getNonColumnRefSide(comparison);\n-    final Object right = ((Literal) other).getValue();\n+    if (!(other instanceof Literal)) {\n+      throw new KsqlException(\"Ony comparison to literals is currently supported: \" + comparison);\n+    }\n \n+    if (other instanceof NullLiteral) {\n+      throw new KsqlException(\"Primary key columns can not be NULL: \" + comparison);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a1153bb9b3dc464be86924acad2d7a75f6d5d5d"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2028a47dc628eefea415204d8a4c09f006eed869", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/2028a47dc628eefea415204d8a4c09f006eed869", "committedDate": "2020-04-07T16:26:34Z", "message": "Merge branch 'master' into nulls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "746e65dd5e02cc7c56ccbd54d6727aaa878f5338", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/746e65dd5e02cc7c56ccbd54d6727aaa878f5338", "committedDate": "2020-04-07T17:06:43Z", "message": "chore: fix spot bugs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMTI5MDI5", "url": "https://github.com/confluentinc/ksql/pull/5019#pullrequestreview-391129029", "createdAt": "2020-04-09T21:00:38Z", "commit": {"oid": "746e65dd5e02cc7c56ccbd54d6727aaa878f5338"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6a4144fc84d90d5f968cdb975cdc42b88d9c088", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/f6a4144fc84d90d5f968cdb975cdc42b88d9c088", "committedDate": "2020-04-14T11:10:29Z", "message": "Merge branch 'master' into nulls"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4823, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}