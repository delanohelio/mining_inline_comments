{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MTIzMDEy", "number": 4733, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTo1MTozNlrODn9HbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMToyNTo0MVrODn_KrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjIyMzgxOnYy", "diffSide": "RIGHT", "path": "docs-md/concepts/time-and-windows-in-ksqldb-queries.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTo1MTozNlrOF2QdFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTo1MTozNlrOF2QdFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQzNzAxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Often times, events that belong to a window can arrive late (e.g slow networks) and a grace period \n          \n          \n            \n            Frequently, events that belong to a window can arrive late, for example, over slow networks, and a grace period", "url": "https://github.com/confluentinc/ksql/pull/4733#discussion_r392437015", "createdAt": "2020-03-13T19:51:36Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/concepts/time-and-windows-in-ksqldb-queries.md", "diffHunk": "@@ -365,4 +365,42 @@ SELECT o.order_id, o.total_amount, o.customer_name, s.shipment_id, s.warehouse\n For more information on joins, see\n [Join Event Streams with ksqlDB](../developer-guide/joins/join-streams-and-tables.md).\n \n+### Late Arriving Events\n+\n+Often times, events that belong to a window can arrive late (e.g slow networks) and a grace period ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07035ebdebfdda5d0506066e115f634f9013aecb"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjIyNTAzOnYy", "diffSide": "RIGHT", "path": "docs-md/concepts/time-and-windows-in-ksqldb-queries.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTo1MjowMVrOF2Qdww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTo1MjowMVrOF2Qdww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQzNzE4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            may be required to ensure the events are accepted into the window. ksqlDB allows configuring this\n          \n          \n            \n            may be required to ensure the events are accepted into the window. ksqlDB enables configuring this", "url": "https://github.com/confluentinc/ksql/pull/4733#discussion_r392437187", "createdAt": "2020-03-13T19:52:01Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/concepts/time-and-windows-in-ksqldb-queries.md", "diffHunk": "@@ -365,4 +365,42 @@ SELECT o.order_id, o.total_amount, o.customer_name, s.shipment_id, s.warehouse\n For more information on joins, see\n [Join Event Streams with ksqlDB](../developer-guide/joins/join-streams-and-tables.md).\n \n+### Late Arriving Events\n+\n+Often times, events that belong to a window can arrive late (e.g slow networks) and a grace period \n+may be required to ensure the events are accepted into the window. ksqlDB allows configuring this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07035ebdebfdda5d0506066e115f634f9013aecb"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjIyNTk3OnYy", "diffSide": "RIGHT", "path": "docs-md/concepts/time-and-windows-in-ksqldb-queries.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTo1MjoyNFrOF2QeXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTo1MjoyNFrOF2QeXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQzNzM0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            behavior, for each of the window types above. \n          \n          \n            \n            behavior, for each of the window types.", "url": "https://github.com/confluentinc/ksql/pull/4733#discussion_r392437342", "createdAt": "2020-03-13T19:52:24Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/concepts/time-and-windows-in-ksqldb-queries.md", "diffHunk": "@@ -365,4 +365,42 @@ SELECT o.order_id, o.total_amount, o.customer_name, s.shipment_id, s.warehouse\n For more information on joins, see\n [Join Event Streams with ksqlDB](../developer-guide/joins/join-streams-and-tables.md).\n \n+### Late Arriving Events\n+\n+Often times, events that belong to a window can arrive late (e.g slow networks) and a grace period \n+may be required to ensure the events are accepted into the window. ksqlDB allows configuring this\n+behavior, for each of the window types above. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07035ebdebfdda5d0506066e115f634f9013aecb"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjIyODUwOnYy", "diffSide": "RIGHT", "path": "docs-md/concepts/time-and-windows-in-ksqldb-queries.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTo1MzoxOVrOF2Qf0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTo1MzoxOVrOF2Qf0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQzNzcxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For example, to allow events to be accepted upto 2 hours of delay after the window ends, \n          \n          \n            \n            For example, to allow events to be accepted for up to two hours after the window ends,", "url": "https://github.com/confluentinc/ksql/pull/4733#discussion_r392437714", "createdAt": "2020-03-13T19:53:19Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/concepts/time-and-windows-in-ksqldb-queries.md", "diffHunk": "@@ -365,4 +365,42 @@ SELECT o.order_id, o.total_amount, o.customer_name, s.shipment_id, s.warehouse\n For more information on joins, see\n [Join Event Streams with ksqlDB](../developer-guide/joins/join-streams-and-tables.md).\n \n+### Late Arriving Events\n+\n+Often times, events that belong to a window can arrive late (e.g slow networks) and a grace period \n+may be required to ensure the events are accepted into the window. ksqlDB allows configuring this\n+behavior, for each of the window types above. \n+\n+For example, to allow events to be accepted upto 2 hours of delay after the window ends, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07035ebdebfdda5d0506066e115f634f9013aecb"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjIzMDAzOnYy", "diffSide": "RIGHT", "path": "docs-md/concepts/time-and-windows-in-ksqldb-queries.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTo1Mzo0N1rOF2QgqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTo1Mzo0N1rOF2QgqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQzNzkyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Events that arrive later than the grace period, are dropped and not included in the aggregate result.\n          \n          \n            \n            Events that arrive later than the grace period are dropped and not included in the aggregate result.", "url": "https://github.com/confluentinc/ksql/pull/4733#discussion_r392437928", "createdAt": "2020-03-13T19:53:47Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/concepts/time-and-windows-in-ksqldb-queries.md", "diffHunk": "@@ -365,4 +365,42 @@ SELECT o.order_id, o.total_amount, o.customer_name, s.shipment_id, s.warehouse\n For more information on joins, see\n [Join Event Streams with ksqlDB](../developer-guide/joins/join-streams-and-tables.md).\n \n+### Late Arriving Events\n+\n+Often times, events that belong to a window can arrive late (e.g slow networks) and a grace period \n+may be required to ensure the events are accepted into the window. ksqlDB allows configuring this\n+behavior, for each of the window types above. \n+\n+For example, to allow events to be accepted upto 2 hours of delay after the window ends, \n+you might run a query like:\n+\n+```sql\n+SELECT orderzip_code, TOPK(order_total, 5) FROM orders\n+  WINDOW TUMBLING (SIZE 1 HOUR, GRACE PERIOD 2 HOURS) \n+  GROUP BY order_zipcode\n+  EMIT CHANGES;\n+```\n+\n+Events that arrive later than the grace period, are dropped and not included in the aggregate result.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07035ebdebfdda5d0506066e115f634f9013aecb"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjIzNDg4OnYy", "diffSide": "RIGHT", "path": "docs-md/concepts/time-and-windows-in-ksqldb-queries.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTo1NToyOFrOF2Qjkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTo1NToyOFrOF2Qjkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQzODY3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ksqlDB supports configuring how many windows in the past to retain for pull and push queries for \n          \n          \n            \n            For each window type, you can configure the number of windows in the past that ksqlDB retains.", "url": "https://github.com/confluentinc/ksql/pull/4733#discussion_r392438675", "createdAt": "2020-03-13T19:55:28Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/concepts/time-and-windows-in-ksqldb-queries.md", "diffHunk": "@@ -365,4 +365,42 @@ SELECT o.order_id, o.total_amount, o.customer_name, s.shipment_id, s.warehouse\n For more information on joins, see\n [Join Event Streams with ksqlDB](../developer-guide/joins/join-streams-and-tables.md).\n \n+### Late Arriving Events\n+\n+Often times, events that belong to a window can arrive late (e.g slow networks) and a grace period \n+may be required to ensure the events are accepted into the window. ksqlDB allows configuring this\n+behavior, for each of the window types above. \n+\n+For example, to allow events to be accepted upto 2 hours of delay after the window ends, \n+you might run a query like:\n+\n+```sql\n+SELECT orderzip_code, TOPK(order_total, 5) FROM orders\n+  WINDOW TUMBLING (SIZE 1 HOUR, GRACE PERIOD 2 HOURS) \n+  GROUP BY order_zipcode\n+  EMIT CHANGES;\n+```\n+\n+Events that arrive later than the grace period, are dropped and not included in the aggregate result.\n+\n+### Window Retention \n+\n+ksqlDB supports configuring how many windows in the past to retain for pull and push queries for ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07035ebdebfdda5d0506066e115f634f9013aecb"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjIzOTY5OnYy", "diffSide": "RIGHT", "path": "docs-md/concepts/time-and-windows-in-ksqldb-queries.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTo1NzoyNlrOF2Qmeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxOTo1NzoyNlrOF2Qmeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQzOTQxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            each window type. This capability can be very useful for interactive applications that use ksqlDB \n          \n          \n            \n            This capability is useful for interactive applications that use ksqlDB", "url": "https://github.com/confluentinc/ksql/pull/4733#discussion_r392439418", "createdAt": "2020-03-13T19:57:26Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/concepts/time-and-windows-in-ksqldb-queries.md", "diffHunk": "@@ -365,4 +365,42 @@ SELECT o.order_id, o.total_amount, o.customer_name, s.shipment_id, s.warehouse\n For more information on joins, see\n [Join Event Streams with ksqlDB](../developer-guide/joins/join-streams-and-tables.md).\n \n+### Late Arriving Events\n+\n+Often times, events that belong to a window can arrive late (e.g slow networks) and a grace period \n+may be required to ensure the events are accepted into the window. ksqlDB allows configuring this\n+behavior, for each of the window types above. \n+\n+For example, to allow events to be accepted upto 2 hours of delay after the window ends, \n+you might run a query like:\n+\n+```sql\n+SELECT orderzip_code, TOPK(order_total, 5) FROM orders\n+  WINDOW TUMBLING (SIZE 1 HOUR, GRACE PERIOD 2 HOURS) \n+  GROUP BY order_zipcode\n+  EMIT CHANGES;\n+```\n+\n+Events that arrive later than the grace period, are dropped and not included in the aggregate result.\n+\n+### Window Retention \n+\n+ksqlDB supports configuring how many windows in the past to retain for pull and push queries for \n+each window type. This capability can be very useful for interactive applications that use ksqlDB ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07035ebdebfdda5d0506066e115f634f9013aecb"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjMyODkzOnYy", "diffSide": "RIGHT", "path": "docs-md/concepts/time-and-windows-in-ksqldb-queries.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDoyNzoyNlrOF2Rb3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMTowMToyMVrOF2St0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ1MzA4NQ==", "bodyText": "commenting here before reading the code - we should make sure that this is enforced in the code (and if it is, we might want to call that out here)\nEDIT: I see that it is, feel free to ignore this comment or clarify the docs. I'm happy either way", "url": "https://github.com/confluentinc/ksql/pull/4733#discussion_r392453085", "createdAt": "2020-03-13T20:27:26Z", "author": {"login": "agavra"}, "path": "docs-md/concepts/time-and-windows-in-ksqldb-queries.md", "diffHunk": "@@ -365,4 +365,42 @@ SELECT o.order_id, o.total_amount, o.customer_name, s.shipment_id, s.warehouse\n For more information on joins, see\n [Join Event Streams with ksqlDB](../developer-guide/joins/join-streams-and-tables.md).\n \n+### Late Arriving Events\n+\n+Often times, events that belong to a window can arrive late (e.g slow networks) and a grace period \n+may be required to ensure the events are accepted into the window. ksqlDB allows configuring this\n+behavior, for each of the window types above. \n+\n+For example, to allow events to be accepted upto 2 hours of delay after the window ends, \n+you might run a query like:\n+\n+```sql\n+SELECT orderzip_code, TOPK(order_total, 5) FROM orders\n+  WINDOW TUMBLING (SIZE 1 HOUR, GRACE PERIOD 2 HOURS) \n+  GROUP BY order_zipcode\n+  EMIT CHANGES;\n+```\n+\n+Events that arrive later than the grace period, are dropped and not included in the aggregate result.\n+\n+### Window Retention \n+\n+ksqlDB supports configuring how many windows in the past to retain for pull and push queries for \n+each window type. This capability can be very useful for interactive applications that use ksqlDB \n+as their primary serving data store.\n+\n+For example, to retain the computed windowed aggregation results for a week, \n+you might run the following query:\n+\n+```sql\n+SELECT regionid, COUNT(*) FROM pageviews\n+  WINDOW HOPPING (SIZE 30 SECONDS, ADVANCE BY 10 SECONDS, RETENTION 7 DAYS, GRACE PERIOD 30 MINUTES)\n+  WHERE UCASE(gender)='FEMALE' AND LCASE (regionid) LIKE '%_6'\n+  GROUP BY regionid\n+  EMIT CHANGES;\n+```\n+\n+Note that the specified retention period should be larger than the sum of window size and any grace\n+period.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07035ebdebfdda5d0506066e115f634f9013aecb"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ3NDA2NQ==", "bodyText": "So the error is thrown from Streams. and there is no good way to read the applied value for RETENTION or GRACE PERIOD to do the check in ksql..", "url": "https://github.com/confluentinc/ksql/pull/4733#discussion_r392474065", "createdAt": "2020-03-13T21:01:21Z", "author": {"login": "vinothchandar"}, "path": "docs-md/concepts/time-and-windows-in-ksqldb-queries.md", "diffHunk": "@@ -365,4 +365,42 @@ SELECT o.order_id, o.total_amount, o.customer_name, s.shipment_id, s.warehouse\n For more information on joins, see\n [Join Event Streams with ksqlDB](../developer-guide/joins/join-streams-and-tables.md).\n \n+### Late Arriving Events\n+\n+Often times, events that belong to a window can arrive late (e.g slow networks) and a grace period \n+may be required to ensure the events are accepted into the window. ksqlDB allows configuring this\n+behavior, for each of the window types above. \n+\n+For example, to allow events to be accepted upto 2 hours of delay after the window ends, \n+you might run a query like:\n+\n+```sql\n+SELECT orderzip_code, TOPK(order_total, 5) FROM orders\n+  WINDOW TUMBLING (SIZE 1 HOUR, GRACE PERIOD 2 HOURS) \n+  GROUP BY order_zipcode\n+  EMIT CHANGES;\n+```\n+\n+Events that arrive later than the grace period, are dropped and not included in the aggregate result.\n+\n+### Window Retention \n+\n+ksqlDB supports configuring how many windows in the past to retain for pull and push queries for \n+each window type. This capability can be very useful for interactive applications that use ksqlDB \n+as their primary serving data store.\n+\n+For example, to retain the computed windowed aggregation results for a week, \n+you might run the following query:\n+\n+```sql\n+SELECT regionid, COUNT(*) FROM pageviews\n+  WINDOW HOPPING (SIZE 30 SECONDS, ADVANCE BY 10 SECONDS, RETENTION 7 DAYS, GRACE PERIOD 30 MINUTES)\n+  WHERE UCASE(gender)='FEMALE' AND LCASE (regionid) LIKE '%_6'\n+  GROUP BY regionid\n+  EMIT CHANGES;\n+```\n+\n+Note that the specified retention period should be larger than the sum of window size and any grace\n+period.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ1MzA4NQ=="}, "originalCommit": {"oid": "07035ebdebfdda5d0506066e115f634f9013aecb"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjM3NjY5OnYy", "diffSide": "RIGHT", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/windows/WindowTimeClause.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDozODozM1rOF2R30w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMTowMjozOFrOF2SvrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2MDI0Mw==", "bodyText": "why not java.time.Duration? seems to do the same thing but with more utility methods. Happy either way", "url": "https://github.com/confluentinc/ksql/pull/4733#discussion_r392460243", "createdAt": "2020-03-13T20:38:33Z", "author": {"login": "agavra"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/windows/WindowTimeClause.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.windows;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.errorprone.annotations.Immutable;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Pojo for a time clause added to a window expression\n+ */\n+@Immutable\n+public class WindowTimeClause {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f367ac0c8b6d2c83cb3b3dd8edc1c606519228f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ3NDU0MQ==", "bodyText": "we need this class mostly because we print the expressions in the toString method.. If we eagerly convert to Duration, we lose information on the actual SQL clause i.e 60 SECONDS vs 1 MINUTE", "url": "https://github.com/confluentinc/ksql/pull/4733#discussion_r392474541", "createdAt": "2020-03-13T21:02:38Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/windows/WindowTimeClause.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.windows;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+import com.google.errorprone.annotations.Immutable;\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Pojo for a time clause added to a window expression\n+ */\n+@Immutable\n+public class WindowTimeClause {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2MDI0Mw=="}, "originalCommit": {"oid": "1f367ac0c8b6d2c83cb3b3dd8edc1c606519228f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjM4MDA1OnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/antlr4/io/confluent/ksql/parser/SqlBase.g4", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDozOToyM1rOF2R58g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMTo1NDoxOFrOF2UhUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2MDc4Ng==", "bodyText": "I think we should add these to nonReservedWords - since these can only occur in the window clause it should be safe for users to use them without backquoting them as columns", "url": "https://github.com/confluentinc/ksql/pull/4733#discussion_r392460786", "createdAt": "2020-03-13T20:39:23Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/antlr4/io/confluent/ksql/parser/SqlBase.g4", "diffHunk": "@@ -387,6 +395,9 @@ TUMBLING: 'TUMBLING';\n HOPPING: 'HOPPING';\n SIZE: 'SIZE';\n ADVANCE: 'ADVANCE';\n+RETENTION: 'RETENTION';\n+GRACE: 'GRACE';\n+PERIOD: 'PERIOD';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f367ac0c8b6d2c83cb3b3dd8edc1c606519228f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ3Nzc2MQ==", "bodyText": "Rest of the WINDOW keywords are reserved. So wondering if we can tease this apart as a separate issue.. wdyt.. Happy either way", "url": "https://github.com/confluentinc/ksql/pull/4733#discussion_r392477761", "createdAt": "2020-03-13T21:08:15Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-parser/src/main/antlr4/io/confluent/ksql/parser/SqlBase.g4", "diffHunk": "@@ -387,6 +395,9 @@ TUMBLING: 'TUMBLING';\n HOPPING: 'HOPPING';\n SIZE: 'SIZE';\n ADVANCE: 'ADVANCE';\n+RETENTION: 'RETENTION';\n+GRACE: 'GRACE';\n+PERIOD: 'PERIOD';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2MDc4Ng=="}, "originalCommit": {"oid": "1f367ac0c8b6d2c83cb3b3dd8edc1c606519228f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ4NjQwOA==", "bodyText": "YEAR | MONTH | DAY | HOUR | MINUTE | SECOND are non reserved, which is interesting... but I'm happy to punt this to another time.", "url": "https://github.com/confluentinc/ksql/pull/4733#discussion_r392486408", "createdAt": "2020-03-13T21:22:30Z", "author": {"login": "agavra"}, "path": "ksqldb-parser/src/main/antlr4/io/confluent/ksql/parser/SqlBase.g4", "diffHunk": "@@ -387,6 +395,9 @@ TUMBLING: 'TUMBLING';\n HOPPING: 'HOPPING';\n SIZE: 'SIZE';\n ADVANCE: 'ADVANCE';\n+RETENTION: 'RETENTION';\n+GRACE: 'GRACE';\n+PERIOD: 'PERIOD';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2MDc4Ng=="}, "originalCommit": {"oid": "1f367ac0c8b6d2c83cb3b3dd8edc1c606519228f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUwMzYzMw==", "bodyText": "yes HOPPING, TUMBLING etc are .. Raised #4773 (nice coincidence with the issue number)", "url": "https://github.com/confluentinc/ksql/pull/4733#discussion_r392503633", "createdAt": "2020-03-13T21:54:18Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-parser/src/main/antlr4/io/confluent/ksql/parser/SqlBase.g4", "diffHunk": "@@ -387,6 +395,9 @@ TUMBLING: 'TUMBLING';\n HOPPING: 'HOPPING';\n SIZE: 'SIZE';\n ADVANCE: 'ADVANCE';\n+RETENTION: 'RETENTION';\n+GRACE: 'GRACE';\n+PERIOD: 'PERIOD';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2MDc4Ng=="}, "originalCommit": {"oid": "1f367ac0c8b6d2c83cb3b3dd8edc1c606519228f"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjM5MTc0OnYy", "diffSide": "RIGHT", "path": "ksqldb-streams/src/test/java/io/confluent/ksql/execution/streams/StreamAggregateBuilderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDo0MjoxMVrOF2SBGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMTowNTowM1rOF2S0cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2MjYxOQ==", "bodyText": "not sure how much extra values these assertions give and they force us to use spys. is there any way we can check that the properties are being set on the table instead?", "url": "https://github.com/confluentinc/ksql/pull/4733#discussion_r392462619", "createdAt": "2020-03-13T20:42:11Z", "author": {"login": "agavra"}, "path": "ksqldb-streams/src/test/java/io/confluent/ksql/execution/streams/StreamAggregateBuilderTest.java", "diffHunk": "@@ -420,14 +438,17 @@ public void shouldBuildTumblingWindowedAggregateCorrectly() {\n \n     // Then:\n     assertThat(result.getTable(), is(windowedWithWindowBounds));\n+    verify(gracePeriodClause).toDuration();\n+    verify(retentionClause).toDuration();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f367ac0c8b6d2c83cb3b3dd8edc1c606519228f"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ3NTc2Mg==", "bodyText": "Like I mentioned.. KTable does not allow me to read these properties out.. So had the spys ensure if grace period and retention are set, then some code uses them as Duration..", "url": "https://github.com/confluentinc/ksql/pull/4733#discussion_r392475762", "createdAt": "2020-03-13T21:05:03Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-streams/src/test/java/io/confluent/ksql/execution/streams/StreamAggregateBuilderTest.java", "diffHunk": "@@ -420,14 +438,17 @@ public void shouldBuildTumblingWindowedAggregateCorrectly() {\n \n     // Then:\n     assertThat(result.getTable(), is(windowedWithWindowBounds));\n+    verify(gracePeriodClause).toDuration();\n+    verify(retentionClause).toDuration();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ2MjYxOQ=="}, "originalCommit": {"oid": "1f367ac0c8b6d2c83cb3b3dd8edc1c606519228f"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMjU1OTgwOnYy", "diffSide": "LEFT", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/windows/TumblingWindowExpression.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMToyNTo0MVrOF2Tl7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMzoyNDozM1rOF2V5SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ4ODQzMQ==", "bodyText": "this is what ends up being included in the query plan, do we need to encode the retention and gracePeriod here?", "url": "https://github.com/confluentinc/ksql/pull/4733#discussion_r392488431", "createdAt": "2020-03-13T21:25:41Z", "author": {"login": "agavra"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/windows/TumblingWindowExpression.java", "diffHunk": "@@ -21,44 +21,37 @@\n import io.confluent.ksql.model.WindowType;\n import io.confluent.ksql.parser.NodeLocation;\n import io.confluent.ksql.serde.WindowInfo;\n-import java.time.Duration;\n import java.util.Objects;\n import java.util.Optional;\n-import java.util.concurrent.TimeUnit;\n \n @Immutable\n public class TumblingWindowExpression extends KsqlWindowExpression {\n \n-  private final long size;\n-  private final TimeUnit sizeUnit;\n+  private final WindowTimeClause size;\n \n-  public TumblingWindowExpression(final long size, final TimeUnit sizeUnit) {\n-    this(Optional.empty(), size, sizeUnit);\n+  public TumblingWindowExpression(final WindowTimeClause size) {\n+    this(Optional.empty(), size, Optional.empty(), Optional.empty());\n   }\n \n   public TumblingWindowExpression(\n       final Optional<NodeLocation> location,\n-      final long size,\n-      final TimeUnit sizeUnit\n+      final WindowTimeClause size,\n+      final Optional<WindowTimeClause> retention,\n+      final Optional<WindowTimeClause> gracePeriod\n   ) {\n-    super(location);\n-    this.size = size;\n-    this.sizeUnit = requireNonNull(sizeUnit, \"sizeUnit\");\n+    super(location, retention, gracePeriod);\n+    this.size = requireNonNull(size, \"size\");\n   }\n \n   @Override\n   public WindowInfo getWindowInfo() {\n     return WindowInfo.of(\n         WindowType.TUMBLING,\n-        Optional.of(Duration.ofNanos(sizeUnit.toNanos(size)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "febc520ea4e4e4b0905e0eb4db925cc803aed3dd"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUwMzkyOQ==", "bodyText": "I would like to context on this. I may not be fully understanding this. If this will affect recoverability i.e take the cluster down and when queries are recreated, then we probably need to..", "url": "https://github.com/confluentinc/ksql/pull/4733#discussion_r392503929", "createdAt": "2020-03-13T21:55:18Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/windows/TumblingWindowExpression.java", "diffHunk": "@@ -21,44 +21,37 @@\n import io.confluent.ksql.model.WindowType;\n import io.confluent.ksql.parser.NodeLocation;\n import io.confluent.ksql.serde.WindowInfo;\n-import java.time.Duration;\n import java.util.Objects;\n import java.util.Optional;\n-import java.util.concurrent.TimeUnit;\n \n @Immutable\n public class TumblingWindowExpression extends KsqlWindowExpression {\n \n-  private final long size;\n-  private final TimeUnit sizeUnit;\n+  private final WindowTimeClause size;\n \n-  public TumblingWindowExpression(final long size, final TimeUnit sizeUnit) {\n-    this(Optional.empty(), size, sizeUnit);\n+  public TumblingWindowExpression(final WindowTimeClause size) {\n+    this(Optional.empty(), size, Optional.empty(), Optional.empty());\n   }\n \n   public TumblingWindowExpression(\n       final Optional<NodeLocation> location,\n-      final long size,\n-      final TimeUnit sizeUnit\n+      final WindowTimeClause size,\n+      final Optional<WindowTimeClause> retention,\n+      final Optional<WindowTimeClause> gracePeriod\n   ) {\n-    super(location);\n-    this.size = size;\n-    this.sizeUnit = requireNonNull(sizeUnit, \"sizeUnit\");\n+    super(location, retention, gracePeriod);\n+    this.size = requireNonNull(size, \"size\");\n   }\n \n   @Override\n   public WindowInfo getWindowInfo() {\n     return WindowInfo.of(\n         WindowType.TUMBLING,\n-        Optional.of(Duration.ofNanos(sizeUnit.toNanos(size)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ4ODQzMQ=="}, "originalCommit": {"oid": "febc520ea4e4e4b0905e0eb4db925cc803aed3dd"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjUyNjE1Mg==", "bodyText": "@rodesai as well..\nSince rohan confirmed that the window expression is what we use, added cases in SqlFormatterTest around the two clauses.. They are working as expected.. (parsing, formatting)", "url": "https://github.com/confluentinc/ksql/pull/4733#discussion_r392526152", "createdAt": "2020-03-13T23:24:33Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/windows/TumblingWindowExpression.java", "diffHunk": "@@ -21,44 +21,37 @@\n import io.confluent.ksql.model.WindowType;\n import io.confluent.ksql.parser.NodeLocation;\n import io.confluent.ksql.serde.WindowInfo;\n-import java.time.Duration;\n import java.util.Objects;\n import java.util.Optional;\n-import java.util.concurrent.TimeUnit;\n \n @Immutable\n public class TumblingWindowExpression extends KsqlWindowExpression {\n \n-  private final long size;\n-  private final TimeUnit sizeUnit;\n+  private final WindowTimeClause size;\n \n-  public TumblingWindowExpression(final long size, final TimeUnit sizeUnit) {\n-    this(Optional.empty(), size, sizeUnit);\n+  public TumblingWindowExpression(final WindowTimeClause size) {\n+    this(Optional.empty(), size, Optional.empty(), Optional.empty());\n   }\n \n   public TumblingWindowExpression(\n       final Optional<NodeLocation> location,\n-      final long size,\n-      final TimeUnit sizeUnit\n+      final WindowTimeClause size,\n+      final Optional<WindowTimeClause> retention,\n+      final Optional<WindowTimeClause> gracePeriod\n   ) {\n-    super(location);\n-    this.size = size;\n-    this.sizeUnit = requireNonNull(sizeUnit, \"sizeUnit\");\n+    super(location, retention, gracePeriod);\n+    this.size = requireNonNull(size, \"size\");\n   }\n \n   @Override\n   public WindowInfo getWindowInfo() {\n     return WindowInfo.of(\n         WindowType.TUMBLING,\n-        Optional.of(Duration.ofNanos(sizeUnit.toNanos(size)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ4ODQzMQ=="}, "originalCommit": {"oid": "febc520ea4e4e4b0905e0eb4db925cc803aed3dd"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2059, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}