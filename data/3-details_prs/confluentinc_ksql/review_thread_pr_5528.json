{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NzQ1MDcy", "number": 5528, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxODo0MDo0MVrOECRrUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTowNzowOFrOECSNZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODIyMjI1OnYy", "diffSide": "RIGHT", "path": "ksqldb-common/src/main/java/io/confluent/ksql/metrics/MetricCollectors.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxODo0MDo0MVrOGeosYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDo1Njo1MFrOGetD4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3NzE4NA==", "bodyText": "You don't need this. According to KIP-606, \"kafka.cluster.id\" is for kafka broker. For client of TelemetryReporter, you only need resource.cluster.id", "url": "https://github.com/confluentinc/ksql/pull/5528#discussion_r434777184", "createdAt": "2020-06-03T18:40:41Z", "author": {"login": "xiaodongdu"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/metrics/MetricCollectors.java", "diffHunk": "@@ -96,15 +117,51 @@ static String addCollector(final String id, final MetricCollector collector) {\n     return finalId;\n   }\n \n-  public static void addConfigurableReporter(final KsqlConfig ksqlConfig) {\n+  public static void addConfigurableReporter(\n+      final KsqlConfig ksqlConfig,\n+      final String kafkaClusterId\n+  ) {\n+    final String ksqlServiceId = ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG);\n     final List<MetricsReporter> reporters = ksqlConfig.getConfiguredInstances(\n         KsqlConfig.METRIC_REPORTER_CLASSES_CONFIG,\n-        MetricsReporter.class);\n-    for (final MetricsReporter reporter: reporters) {\n-      metrics.addReporter(reporter);\n+        MetricsReporter.class,\n+        Collections.singletonMap(\n+            KsqlConfig.KSQL_SERVICE_ID_CONFIG,\n+            ksqlServiceId));\n+\n+    if (reporters.size() > 0) {\n+      final Map<String, Object> metadata =\n+          new HashMap<>(ksqlConfig.originalsWithPrefix(CommonClientConfigs.METRICS_CONTEXT_PREFIX));\n+      final MetricsContext metricsContext =\n+          new KafkaMetricsContext(\n+              KSQL_JMX_PREFIX,\n+              addConfluentMetricsContextConfigs(\n+                  metadata,\n+                  ksqlServiceId,\n+                  kafkaClusterId));\n+\n+      for (final MetricsReporter reporter : reporters) {\n+        reporter.contextChange(metricsContext);\n+        metrics.addReporter(reporter);\n+      }\n     }\n   }\n \n+  public static Map<String, Object> addConfluentMetricsContextConfigs(\n+      final Map<String,Object> props,\n+      final String ksqlServiceId,\n+      final String kafkaClusterId\n+  ) {\n+    final Map<String, Object> updatedProps = new HashMap<>(props);\n+    updatedProps.put(RESOURCE_LABEL_VERSION, AppInfo.getVersion());\n+    updatedProps.put(RESOURCE_LABEL_COMMIT_ID, AppInfo.getCommitId());\n+    updatedProps.put(RESOURCE_LABEL_TYPE, KSQL_RESOURCE_TYPE);\n+    updatedProps.put(RESOURCE_LABEL_KSQL_SERVICE_ID, ksqlServiceId);\n+    updatedProps.put(RESOURCE_LABEL_CLUSTER_ID, ksqlServiceId);\n+    updatedProps.put(RESOURCE_LABEL_KAFKA_CLUSTER_ID, kafkaClusterId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26fff4854f6d36514d8bf250a24b598a2de2e367"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0ODczNg==", "bodyText": "removed", "url": "https://github.com/confluentinc/ksql/pull/5528#discussion_r434848736", "createdAt": "2020-06-03T20:56:50Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/metrics/MetricCollectors.java", "diffHunk": "@@ -96,15 +117,51 @@ static String addCollector(final String id, final MetricCollector collector) {\n     return finalId;\n   }\n \n-  public static void addConfigurableReporter(final KsqlConfig ksqlConfig) {\n+  public static void addConfigurableReporter(\n+      final KsqlConfig ksqlConfig,\n+      final String kafkaClusterId\n+  ) {\n+    final String ksqlServiceId = ksqlConfig.getString(KsqlConfig.KSQL_SERVICE_ID_CONFIG);\n     final List<MetricsReporter> reporters = ksqlConfig.getConfiguredInstances(\n         KsqlConfig.METRIC_REPORTER_CLASSES_CONFIG,\n-        MetricsReporter.class);\n-    for (final MetricsReporter reporter: reporters) {\n-      metrics.addReporter(reporter);\n+        MetricsReporter.class,\n+        Collections.singletonMap(\n+            KsqlConfig.KSQL_SERVICE_ID_CONFIG,\n+            ksqlServiceId));\n+\n+    if (reporters.size() > 0) {\n+      final Map<String, Object> metadata =\n+          new HashMap<>(ksqlConfig.originalsWithPrefix(CommonClientConfigs.METRICS_CONTEXT_PREFIX));\n+      final MetricsContext metricsContext =\n+          new KafkaMetricsContext(\n+              KSQL_JMX_PREFIX,\n+              addConfluentMetricsContextConfigs(\n+                  metadata,\n+                  ksqlServiceId,\n+                  kafkaClusterId));\n+\n+      for (final MetricsReporter reporter : reporters) {\n+        reporter.contextChange(metricsContext);\n+        metrics.addReporter(reporter);\n+      }\n     }\n   }\n \n+  public static Map<String, Object> addConfluentMetricsContextConfigs(\n+      final Map<String,Object> props,\n+      final String ksqlServiceId,\n+      final String kafkaClusterId\n+  ) {\n+    final Map<String, Object> updatedProps = new HashMap<>(props);\n+    updatedProps.put(RESOURCE_LABEL_VERSION, AppInfo.getVersion());\n+    updatedProps.put(RESOURCE_LABEL_COMMIT_ID, AppInfo.getCommitId());\n+    updatedProps.put(RESOURCE_LABEL_TYPE, KSQL_RESOURCE_TYPE);\n+    updatedProps.put(RESOURCE_LABEL_KSQL_SERVICE_ID, ksqlServiceId);\n+    updatedProps.put(RESOURCE_LABEL_CLUSTER_ID, ksqlServiceId);\n+    updatedProps.put(RESOURCE_LABEL_KAFKA_CLUSTER_ID, kafkaClusterId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc3NzE4NA=="}, "originalCommit": {"oid": "26fff4854f6d36514d8bf250a24b598a2de2e367"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODMwNjcwOnYy", "diffSide": "RIGHT", "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTowNjoyOFrOGepiUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDo1Njo0MFrOGetDgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5MDk5Mw==", "bodyText": "If you want ksql cluster id and application propagate to AdminClient, you should add as part of admin client properties:\nmetrics.context.cluster.id, metrics.context.ksql.application.id\nBecause in KafkaAdminClient, we treat properties as metrics reporter properties if it starts with metrics.context: https://github.com/confluentinc/ce-kafka/blob/0f61da6b355f2f34e1b6d2f30072bb47f600bdae/clients/src/main/java/org/apache/kafka/clients/admin/KafkaAdminClient.java#L495", "url": "https://github.com/confluentinc/ksql/pull/5528#discussion_r434790993", "createdAt": "2020-06-03T19:06:28Z", "author": {"login": "xiaodongdu"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -768,15 +775,25 @@ private KsqlConfig(final ConfigGeneration generation,\n     for (final ConfigValue config : ksqlStreamConfigProps.values()) {\n       props.put(config.key, config.value);\n     }\n+\n+    props.putAll(getConfigsForPrefix(REPORTER_CONFIGS_PREFIXES));\n     return Collections.unmodifiableMap(props);\n   }\n \n   public Map<String, Object> getKsqlAdminClientConfigProps() {\n-    return getConfigsFor(AdminClientConfig.configNames());\n+    final Map<String, Object> map = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26fff4854f6d36514d8bf250a24b598a2de2e367"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg0ODY0Mg==", "bodyText": "I updated it so that metrics.context.resource.cluster.id=<ksql-service-id> is being passed in for adminClient, producer, and streams", "url": "https://github.com/confluentinc/ksql/pull/5528#discussion_r434848642", "createdAt": "2020-06-03T20:56:40Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -768,15 +775,25 @@ private KsqlConfig(final ConfigGeneration generation,\n     for (final ConfigValue config : ksqlStreamConfigProps.values()) {\n       props.put(config.key, config.value);\n     }\n+\n+    props.putAll(getConfigsForPrefix(REPORTER_CONFIGS_PREFIXES));\n     return Collections.unmodifiableMap(props);\n   }\n \n   public Map<String, Object> getKsqlAdminClientConfigProps() {\n-    return getConfigsFor(AdminClientConfig.configNames());\n+    final Map<String, Object> map = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5MDk5Mw=="}, "originalCommit": {"oid": "26fff4854f6d36514d8bf250a24b598a2de2e367"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODMwOTUxOnYy", "diffSide": "RIGHT", "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTowNzowOFrOGepj8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTowNzowOFrOGepj8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5MTQwOA==", "bodyText": "Same comments as AdminClient", "url": "https://github.com/confluentinc/ksql/pull/5528#discussion_r434791408", "createdAt": "2020-06-03T19:07:08Z", "author": {"login": "xiaodongdu"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -768,15 +775,25 @@ private KsqlConfig(final ConfigGeneration generation,\n     for (final ConfigValue config : ksqlStreamConfigProps.values()) {\n       props.put(config.key, config.value);\n     }\n+\n+    props.putAll(getConfigsForPrefix(REPORTER_CONFIGS_PREFIXES));\n     return Collections.unmodifiableMap(props);\n   }\n \n   public Map<String, Object> getKsqlAdminClientConfigProps() {\n-    return getConfigsFor(AdminClientConfig.configNames());\n+    final Map<String, Object> map = new HashMap<>();\n+    map.putAll(getConfigsFor(AdminClientConfig.configNames()));\n+\n+    map.putAll(getConfigsForPrefix(REPORTER_CONFIGS_PREFIXES));\n+    return Collections.unmodifiableMap(map);\n   }\n \n   public Map<String, Object> getProducerClientConfigProps() {\n-    return getConfigsFor(ProducerConfig.configNames());\n+    final Map<String, Object> map = new HashMap<>();\n+    map.putAll(getConfigsFor(ProducerConfig.configNames()));\n+\n+    map.putAll(getConfigsForPrefix(REPORTER_CONFIGS_PREFIXES));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26fff4854f6d36514d8bf250a24b598a2de2e367"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3332, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}