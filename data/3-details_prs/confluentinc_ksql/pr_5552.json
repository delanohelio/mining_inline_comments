{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3ODk1ODU3", "number": 5552, "title": "fix: improve print topic", "bodyText": "Description\nPRINT topic tries to determine the format of a topic's key and value.  Sometimes it can mis-detect the key. For example, if the key is a string, and the first value is Die Hard (as bytes) then it would interpret this as a BIGINT as its eight bytes.  Once it seems more rows it will likely work out the key is a STRING, (assuming at least one key is not 8bytes long.\nWith this change PRINT will process the whole batch of messages retrieved from the broker to determine the formats and only then output them. This makes it much more likely it will output the first few rows with the right formats, at the cost of formatting all the rows in the batch, even if the user only wanted to see one or two.\nA good example of this can be seen in our own Tumbling Windows tutorial.  It includes PRINT topic output that looks like this:\nKey format: HOPPING(KAFKA_STRING) or TUMBLING(KAFKA_STRING)\nValue format: AVRO\nrowtime: 2019/07/09 01:00:00.000 Z, key: [4929582456461423204@1562630400000/-], value: {\"TITLE\": \"Die Hard\", \"RATING_COUNT\": 1, \"WINDOW_START\": 1562630400000, \"WINDOW_END\": 1562652000000}\nrowtime: 2019/07/09 05:00:00.000 Z, key: [4929582456461423204@1562630400000/-], value: {\"TITLE\": \"Die Hard\", \"RATING_COUNT\": 2, \"WINDOW_START\": 1562630400000, \"WINDOW_END\": 1562652000000}\nrowtime: 2019/07/09 07:00:00.000 Z, key: [4929582456461423204@1562652000000/-], value: {\"TITLE\": \"Die Hard\", \"RATING_COUNT\": 1, \"WINDOW_START\": 1562652000000, \"WINDOW_END\": 1562673600000}\nrowtime: 2019/07/09 09:00:00.000 Z, key: [Tree of Life@1562652000000/-], value: {\"TITLE\": \"Tree of Life\", \"RATING_COUNT\": 1, \"WINDOW_START\": 1562652000000, \"WINDOW_END\": 1562673600000}\nrowtime: 2019/07/09 09:00:00.000 Z, key: [Tree of Life@1562652000000/-], value: {\"TITLE\": \"Tree of Life\", \"RATING_COUNT\": 2, \"WINDOW_START\": 1562652000000, \"WINDOW_END\": 1562673600000}\nrowtime: 2019/07/09 12:00:00.000 Z, key: [A Walk in the Clouds@1562673600000/-], value: {\"TITLE\": \"A Walk in the Clouds\", \"RATING_COUNT\": 1, \"WINDOW_START\": 1562673600000, \"WINDOW_END\": 1562695200000}\nrowtime: 2019/07/09 15:00:00.000 Z, key: [A Walk in the Clouds@1562673600000/-], value: {\"TITLE\": \"A Walk in the Clouds\", \"RATING_COUNT\": 2, \"WINDOW_START\": 1562673600000, \"WINDOW_END\": 1562695200000}\nrowtime: 2019/07/09 22:00:00.000 Z, key: [A Walk in the Clouds@1562695200000/-], value: {\"TITLE\": \"A Walk in the Clouds\", \"RATING_COUNT\": 1, \"WINDOW_START\": 1562695200000, \"WINDOW_END\": 1562716800000}\nrowtime: 2019/07/09 05:00:00.000 Z, key: [The Big Lebowski@1562630400000/-], value: {\"TITLE\": \"The Big Lebowski\", \"RATING_COUNT\": 1, \"WINDOW_START\": 1562630400000, \"WINDOW_END\": 1562652000000}\nrowtime: 2019/07/09 05:00:00.000 Z, key: [The Big Lebowski@1562630400000/-], value: {\"TITLE\": \"The Big Lebowski\", \"RATING_COUNT\": 2, \"WINDOW_START\": 1562630400000, \"WINDOW_END\": 1562652000000}\nrowtime: 2019/07/09 18:00:00.000 Z, key: [Super Mario Bros.@1562695200000/-], value: {\"TITLE\": \"Super Mario Bros.\", \"RATING_COUNT\": 1, \"WINDOW_START\": 1562695200000, \"WINDOW_END\": 1562716800000}\nTopic printing ceased\n\nThe first three rows are incorrectly being formatted as a windowed BIGINT, when the actual key is Die Hard.\nThis PR will mean the output is more correctly:\nKey format: HOPPING(KAFKA_STRING) or TUMBLING(KAFKA_STRING)\nValue format: AVRO\nrowtime: 2019/07/09 01:00:00.000 Z, key: [Die Hard@1562630400000/-], value: {\"TITLE\": \"Die Hard\", \"RATING_COUNT\": 1, \"WINDOW_START\": 1562630400000, \"WINDOW_END\": 1562652000000}\nrowtime: 2019/07/09 05:00:00.000 Z, key: [Die Hard@1562630400000/-], value: {\"TITLE\": \"Die Hard\", \"RATING_COUNT\": 2, \"WINDOW_START\": 1562630400000, \"WINDOW_END\": 1562652000000}\nrowtime: 2019/07/09 07:00:00.000 Z, key: [Die Hard@1562652000000/-], value: {\"TITLE\": \"Die Hard\", \"RATING_COUNT\": 1, \"WINDOW_START\": 1562652000000, \"WINDOW_END\": 1562673600000}\nrowtime: 2019/07/09 09:00:00.000 Z, key: [Tree of Life@1562652000000/-], value: {\"TITLE\": \"Tree of Life\", \"RATING_COUNT\": 1, \"WINDOW_START\": 1562652000000, \"WINDOW_END\": 1562673600000}\nrowtime: 2019/07/09 09:00:00.000 Z, key: [Tree of Life@1562652000000/-], value: {\"TITLE\": \"Tree of Life\", \"RATING_COUNT\": 2, \"WINDOW_START\": 1562652000000, \"WINDOW_END\": 1562673600000}\nrowtime: 2019/07/09 12:00:00.000 Z, key: [A Walk in the Clouds@1562673600000/-], value: {\"TITLE\": \"A Walk in the Clouds\", \"RATING_COUNT\": 1, \"WINDOW_START\": 1562673600000, \"WINDOW_END\": 1562695200000}\nrowtime: 2019/07/09 15:00:00.000 Z, key: [A Walk in the Clouds@1562673600000/-], value: {\"TITLE\": \"A Walk in the Clouds\", \"RATING_COUNT\": 2, \"WINDOW_START\": 1562673600000, \"WINDOW_END\": 1562695200000}\nrowtime: 2019/07/09 22:00:00.000 Z, key: [A Walk in the Clouds@1562695200000/-], value: {\"TITLE\": \"A Walk in the Clouds\", \"RATING_COUNT\": 1, \"WINDOW_START\": 1562695200000, \"WINDOW_END\": 1562716800000}\nrowtime: 2019/07/09 05:00:00.000 Z, key: [The Big Lebowski@1562630400000/-], value: {\"TITLE\": \"The Big Lebowski\", \"RATING_COUNT\": 1, \"WINDOW_START\": 1562630400000, \"WINDOW_END\": 1562652000000}\nrowtime: 2019/07/09 05:00:00.000 Z, key: [The Big Lebowski@1562630400000/-], value: {\"TITLE\": \"The Big Lebowski\", \"RATING_COUNT\": 2, \"WINDOW_START\": 1562630400000, \"WINDOW_END\": 1562652000000}\nrowtime: 2019/07/09 18:00:00.000 Z, key: [Super Mario Bros.@1562695200000/-], value: {\"TITLE\": \"Super Mario Bros.\", \"RATING_COUNT\": 1, \"WINDOW_START\": 1562695200000, \"WINDOW_END\": 1562716800000}\nTopic printing ceased\n\nThis change will also help with, though not entirely fix, #5514.  Even with this fix is it still possible to misdetect a while batch of records as windowed strings, when they are actually strings. However, ever record would need to have window bounds.\nTesting done\nusual\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-06-04T14:56:01Z", "url": "https://github.com/confluentinc/ksql/pull/5552", "merged": true, "mergeCommit": {"oid": "e193576c0f6c0295da6f4357391639e49a45863b"}, "closed": true, "closedAt": "2020-06-05T09:37:34Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcn_ULJgH2gAyNDI3ODk1ODU3OmUzMjNjMTVjMGQ3ZDliNDQ5NTE0YWJhY2U2NDJmOWYxMGUzOGY0NmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoD51GAFqTQyNDc5NTA4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e323c15c0d7d9b449514abace642f9f10e38f46f", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/e323c15c0d7d9b449514abace642f9f10e38f46f", "committedDate": "2020-06-04T14:55:11Z", "message": "fix: improve print topic\n\nPRINT topic tries to determine the format of a topic's key and value.  Sometimes it can mis-detect the key. For example, if the key is a string, and the first value is `Die Hard` (as bytes) then it would interpret this as a `BIGINT` as its eight bytes.  Once it seems more rows it will likely work out the key is a `STRING`, (assuming at least one key is not 8bytes long.\n\nWith this change PRINT will process the whole batch of messages retrieved from the broker to determine the formats and only then output them. This makes it much more likely it will output the first few rows with the right formats, at the cost of formatting all the rows in the batch, even if the user only wanted to see one or two."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NzkwOTcy", "url": "https://github.com/confluentinc/ksql/pull/5552#pullrequestreview-424790972", "createdAt": "2020-06-04T20:09:43Z", "commit": {"oid": "e323c15c0d7d9b449514abace642f9f10e38f46f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDowOTo0M1rOGfWDhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDowOTo0M1rOGfWDhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyMDM4OA==", "bodyText": "Why do call formatRecords here again when you already formatted them at line 110?", "url": "https://github.com/confluentinc/ksql/pull/5552#discussion_r435520388", "createdAt": "2020-06-04T20:09:43Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/RecordFormatter.java", "diffHunk": "@@ -103,10 +103,25 @@ public RecordFormatter(\n     this.valueDeserializers = requireNonNull(valueDeserializers, \"valueDeserializers\");\n   }\n \n-  public List<Supplier<String>> format(final Iterable<ConsumerRecord<Bytes, Bytes>> records) {\n-    return StreamSupport.stream(records.spliterator(), false)\n-        .map(this::delayedFormat)\n-        .collect(Collectors.toList());\n+  public List<String> format(final Iterable<ConsumerRecord<Bytes, Bytes>> records) {\n+    final String activeKeyFormat = keyDeserializers.getPossibleFormats().get(0);\n+    final String activeValueFormat = valueDeserializers.getPossibleFormats().get(0);\n+\n+    final List<String> formatted = formatRecords(records);\n+\n+    final boolean sameKeyFormatChanged = activeKeyFormat\n+        .equals(keyDeserializers.getPossibleFormats().get(0));\n+\n+    final boolean sameValueFormatChanged = activeValueFormat\n+        .equals(valueDeserializers.getPossibleFormats().get(0));\n+\n+    if (sameKeyFormatChanged && sameValueFormatChanged) {\n+      return formatted;\n+    }\n+\n+    // The active key/value format has been eliminated as a possibility while processing this batch.\n+    // Reformat with the new active format:\n+    return formatRecords(records);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e323c15c0d7d9b449514abace642f9f10e38f46f"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NzkyMzUw", "url": "https://github.com/confluentinc/ksql/pull/5552#pullrequestreview-424792350", "createdAt": "2020-06-04T20:11:41Z", "commit": {"oid": "e323c15c0d7d9b449514abace642f9f10e38f46f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDoxMTo0MVrOGfWHnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDoxMTo0MVrOGfWHnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyMTQzOQ==", "bodyText": "This is that sets the batch size? So if it is not set then it is (Integer.MAX_VALUE) - numWritten  where numWritten is what has been processed up to this point?", "url": "https://github.com/confluentinc/ksql/pull/5552#discussion_r435521439", "createdAt": "2020-06-04T20:11:41Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/streaming/PrintPublisher.java", "diffHunk": "@@ -112,8 +110,8 @@ public void subscribe(final Flow.Subscriber<Collection<String>> subscriber) {\n           return null;\n         }\n \n-        final Collection<Supplier<String>> formatted = formatter.format(records);\n-        final Collection<Supplier<String>> limited = new LimitIntervalCollection<>(\n+        final Collection<String> formatted = formatter.format(records);\n+        final Collection<String> limited = new LimitIntervalCollection<>(\n             formatted,\n             printTopic.getLimit().orElse(Integer.MAX_VALUE) - numWritten,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e323c15c0d7d9b449514abace642f9f10e38f46f"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0Nzk1MDgz", "url": "https://github.com/confluentinc/ksql/pull/5552#pullrequestreview-424795083", "createdAt": "2020-06-04T20:15:56Z", "commit": {"oid": "e323c15c0d7d9b449514abace642f9f10e38f46f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4717, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}