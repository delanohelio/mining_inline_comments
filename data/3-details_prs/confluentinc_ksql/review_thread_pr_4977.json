{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NTAxMzE0", "number": 4977, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo1NDoxOVrODt5luw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoxOTo1M1rODvNHoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NDU2MDU5OnYy", "diffSide": "LEFT", "path": "ksqldb-common/src/test/java/io/confluent/ksql/name/ColumnNamesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo1NDoxOVrOF_l11w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMDo1NDoxOVrOF_l11w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjIyNDU5OQ==", "bodyText": "This hasn't been deleted. Git just hasn't picked up the file move...", "url": "https://github.com/confluentinc/ksql/pull/4977#discussion_r402224599", "createdAt": "2020-04-02T10:54:19Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-common/src/test/java/io/confluent/ksql/name/ColumnNamesTest.java", "diffHunk": "@@ -1,90 +0,0 @@\n-/*\n- * Copyright 2020 Confluent Inc.\n- *\n- * Licensed under the Confluent Community License (the \"License\"); you may not use\n- * this file except in compliance with the License.  You may obtain a copy of the\n- * License at\n- *\n- * http://www.confluent.io/confluent-community-license\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations under the License.\n- */\n-\n-package io.confluent.ksql.name;\n-\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.hamcrest.Matchers.contains;\n-import static org.hamcrest.Matchers.is;\n-import static org.junit.Assert.assertThrows;\n-\n-import com.google.common.collect.ImmutableSet;\n-import io.confluent.ksql.name.ColumnNames.AliasGenerator;\n-import io.confluent.ksql.schema.ksql.LogicalSchema;\n-import io.confluent.ksql.schema.ksql.types.SqlTypes;\n-import io.confluent.ksql.util.KsqlException;\n-import java.util.List;\n-import java.util.function.Supplier;\n-import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n-import java.util.stream.Stream;\n-import org.junit.Test;\n-\n-public class ColumnNamesTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e029bee60fcb4a66d08cdd7409a4daeb4e8202c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODI0NjA5OnYy", "diffSide": "RIGHT", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/name/ColumnNames.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNjoxOTo1M1rOGBfoPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxMDowMToyMlrOGB8M9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxOTk2NQ==", "bodyText": "can we have a comment explaining the regex? also instead of relying on ?: and indexed groups we should take advantages of named groups (https://docs.oracle.com/javase/7/docs/api/java/util/regex/Matcher.html#group%28java.lang.String%29)", "url": "https://github.com/confluentinc/ksql/pull/4977#discussion_r404219965", "createdAt": "2020-04-06T16:19:53Z", "author": {"login": "agavra"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/name/ColumnNames.java", "diffHunk": "@@ -17,28 +17,30 @@\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.confluent.ksql.execution.expression.tree.DereferenceExpression;\n+import io.confluent.ksql.execution.expression.tree.Expression;\n import io.confluent.ksql.schema.ksql.Column;\n import io.confluent.ksql.schema.ksql.LogicalSchema;\n-import io.confluent.ksql.util.KsqlConstants;\n import io.confluent.ksql.util.KsqlException;\n+import java.util.HashMap;\n import java.util.List;\n-import java.util.OptionalInt;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n import java.util.Set;\n-import java.util.function.Supplier;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n import java.util.stream.Stream;\n \n public final class ColumnNames {\n \n   private static final String AGGREGATE_COLUMN_PREFIX = \"KSQL_AGG_VARIABLE_\";\n-  private static final String GENERATED_ALIAS_PREFIX = \"KSQL_COL_\";\n+  private static final String GENERATED_ALIAS_PREFIX = \"KSQL_COL\";\n   private static final String SYNTHESISED_COLUMN_PREFIX = \"KSQL_SYNTH_\";\n \n-  private static final Pattern GENERATED_ALIAS_PATTERN = Pattern\n-      .compile(GENERATED_ALIAS_PREFIX + \"(\\\\d+)\");\n+  private static final Pattern NUMBERED_COLUMN_PATTERN = Pattern.compile(\"(.*?)?(?:_(\\\\d+))?\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b16b8d5907b2b9be93f46f06c32cc42c432887bd"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY4ODExOQ==", "bodyText": "Your wish....", "url": "https://github.com/confluentinc/ksql/pull/4977#discussion_r404688119", "createdAt": "2020-04-07T10:01:22Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/name/ColumnNames.java", "diffHunk": "@@ -17,28 +17,30 @@\n \n import com.google.common.annotations.VisibleForTesting;\n import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import io.confluent.ksql.execution.expression.tree.DereferenceExpression;\n+import io.confluent.ksql.execution.expression.tree.Expression;\n import io.confluent.ksql.schema.ksql.Column;\n import io.confluent.ksql.schema.ksql.LogicalSchema;\n-import io.confluent.ksql.util.KsqlConstants;\n import io.confluent.ksql.util.KsqlException;\n+import java.util.HashMap;\n import java.util.List;\n-import java.util.OptionalInt;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Objects;\n import java.util.Set;\n-import java.util.function.Supplier;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n-import java.util.stream.IntStream;\n import java.util.stream.Stream;\n \n public final class ColumnNames {\n \n   private static final String AGGREGATE_COLUMN_PREFIX = \"KSQL_AGG_VARIABLE_\";\n-  private static final String GENERATED_ALIAS_PREFIX = \"KSQL_COL_\";\n+  private static final String GENERATED_ALIAS_PREFIX = \"KSQL_COL\";\n   private static final String SYNTHESISED_COLUMN_PREFIX = \"KSQL_SYNTH_\";\n \n-  private static final Pattern GENERATED_ALIAS_PATTERN = Pattern\n-      .compile(GENERATED_ALIAS_PREFIX + \"(\\\\d+)\");\n+  private static final Pattern NUMBERED_COLUMN_PATTERN = Pattern.compile(\"(.*?)?(?:_(\\\\d+))?\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIxOTk2NQ=="}, "originalCommit": {"oid": "b16b8d5907b2b9be93f46f06c32cc42c432887bd"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3721, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}