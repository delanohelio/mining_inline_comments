{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyODU4ODkx", "number": 6726, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODo1OTozNFrOFG29RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOToxMDo0OVrOFG3O2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzM2MTk2OnYy", "diffSide": "RIGHT", "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/materialization/ks/KsLocator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODo1OTozNFrOIIESyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOTozODozMFrOIN-dKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyOTg2NQ==", "bodyText": "Can we please add Javadocs for this class? It's getting more and more complex and for a first-timer looking at it, it's impossible to figure out what the purpose of the class is, what the algorithm is and what the methods and data structures represent", "url": "https://github.com/confluentinc/ksql/pull/6726#discussion_r545329865", "createdAt": "2020-12-17T18:59:34Z", "author": {"login": "vpapavas"}, "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/materialization/ks/KsLocator.java", "diffHunk": "@@ -43,12 +48,14 @@\n import org.apache.kafka.streams.KafkaStreams;\n import org.apache.kafka.streams.KeyQueryMetadata;\n import org.apache.kafka.streams.state.HostInfo;\n+import org.apache.kafka.streams.state.StreamsMetadata;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n  * Kafka Streams implementation of {@link Locator}.\n  */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf5af26e00bfc4728ced4bb8c06fdb210a6effe5"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUyNTY3Mw==", "bodyText": "Sure.  Added many more comments.", "url": "https://github.com/confluentinc/ksql/pull/6726#discussion_r551525673", "createdAt": "2021-01-04T19:38:30Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/materialization/ks/KsLocator.java", "diffHunk": "@@ -43,12 +48,14 @@\n import org.apache.kafka.streams.KafkaStreams;\n import org.apache.kafka.streams.KeyQueryMetadata;\n import org.apache.kafka.streams.state.HostInfo;\n+import org.apache.kafka.streams.state.StreamsMetadata;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n /**\n  * Kafka Streams implementation of {@link Locator}.\n  */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyOTg2NQ=="}, "originalCommit": {"oid": "cf5af26e00bfc4728ced4bb8c06fdb210a6effe5"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzM3NTUzOnYy", "diffSide": "RIGHT", "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/materialization/ks/KsLocator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOTowMjo1MFrOIIEasg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMjozMTo0M1rOIODfrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzMTg5MA==", "bodyText": "We should add tests in KsLocatorTest to make sure that the data structures are populated correctly with all active and standby partitions the underlying store has", "url": "https://github.com/confluentinc/ksql/pull/6726#discussion_r545331890", "createdAt": "2020-12-17T19:02:50Z", "author": {"login": "vpapavas"}, "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/materialization/ks/KsLocator.java", "diffHunk": "@@ -108,20 +146,42 @@\n \n       keysByPartition.putIfAbsent(metadata.partition(), new LinkedHashSet<>());\n       keysByPartition.get(metadata.partition()).add(key);\n+      metadataList.add(metadata);\n+    }\n+    return new Metadata(metadataList, Optional.of(keysByPartition));\n+  }\n \n-      if (locationsByPartition.containsKey(metadata.partition())) {\n-        continue;\n-      }\n+  private Metadata getMetadataForAllPartitions(final Set<Integer> filterPartitions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf5af26e00bfc4728ced4bb8c06fdb210a6effe5"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYwODIzOQ==", "bodyText": "Good call.  Forgot to test that.  Added a test that covers this case.", "url": "https://github.com/confluentinc/ksql/pull/6726#discussion_r551608239", "createdAt": "2021-01-04T22:31:43Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/materialization/ks/KsLocator.java", "diffHunk": "@@ -108,20 +146,42 @@\n \n       keysByPartition.putIfAbsent(metadata.partition(), new LinkedHashSet<>());\n       keysByPartition.get(metadata.partition()).add(key);\n+      metadataList.add(metadata);\n+    }\n+    return new Metadata(metadataList, Optional.of(keysByPartition));\n+  }\n \n-      if (locationsByPartition.containsKey(metadata.partition())) {\n-        continue;\n-      }\n+  private Metadata getMetadataForAllPartitions(final Set<Integer> filterPartitions) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzMTg5MA=="}, "originalCommit": {"oid": "cf5af26e00bfc4728ced4bb8c06fdb210a6effe5"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzM3OTI4OnYy", "diffSide": "RIGHT", "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/materialization/ks/KsMaterializedSessionTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOTowMzo1MVrOIIEdAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQyMzozMzo0OFrOIOE2zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzMjQ4Mg==", "bodyText": "Why is this?", "url": "https://github.com/confluentinc/ksql/pull/6726#discussion_r545332482", "createdAt": "2020-12-17T19:03:51Z", "author": {"login": "vpapavas"}, "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/materialization/ks/KsMaterializedSessionTable.java", "diffHunk": "@@ -65,6 +66,12 @@\n     }\n   }\n \n+  @Override\n+  public Iterator<WindowedRow> get(final int partition, final Range<Instant> windowStartBounds,\n+      final Range<Instant> windowEndBounds) {\n+    throw new MaterializationException(\"Table scan unsupported on session tables\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf5af26e00bfc4728ced4bb8c06fdb210a6effe5"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYzMDU0Mg==", "bodyText": "Session tables don't support table scans at the moment.  They have to be added in the future.  I think our only choice for now is to throw an error.", "url": "https://github.com/confluentinc/ksql/pull/6726#discussion_r551630542", "createdAt": "2021-01-04T23:33:48Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-streams/src/main/java/io/confluent/ksql/execution/streams/materialization/ks/KsMaterializedSessionTable.java", "diffHunk": "@@ -65,6 +66,12 @@\n     }\n   }\n \n+  @Override\n+  public Iterator<WindowedRow> get(final int partition, final Range<Instant> windowStartBounds,\n+      final Range<Instant> windowEndBounds) {\n+    throw new MaterializationException(\"Table scan unsupported on session tables\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzMjQ4Mg=="}, "originalCommit": {"oid": "cf5af26e00bfc4728ced4bb8c06fdb210a6effe5"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNzQwNjk3OnYy", "diffSide": "RIGHT", "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/IteratorUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxOToxMDo0OVrOIIEtCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxOTozNzo1M1rOIN-b8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzNjU4Nw==", "bodyText": "What's the purpose of this iterator? Why do we need a special class? I see that this is used to close the iterator? Aren't iterators closed when done automatically?", "url": "https://github.com/confluentinc/ksql/pull/6726#discussion_r545336587", "createdAt": "2020-12-17T19:10:49Z", "author": {"login": "vpapavas"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/IteratorUtil.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.util;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+public final class IteratorUtil {\n+\n+  private IteratorUtil() {}\n+\n+  public static <T> Iterator<T> onComplete(final Iterator<T> iterator, final Runnable runnable) {\n+    return new IteratorWithCallbacks<T>(iterator, runnable);\n+  }\n+\n+  public static <T> Iterator<T> of(final T... elements) {\n+    return ImmutableList.copyOf(elements).iterator();\n+  }\n+\n+  private static class IteratorWithCallbacks<T> implements Iterator<T> {\n+\n+    private final Iterator<T> backingIterator;\n+    private final Runnable completeRunnable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf5af26e00bfc4728ced4bb8c06fdb210a6effe5"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTUyNTM2MA==", "bodyText": "Normal iterators don't have a close method.  The ones returned by streams do after a lookup.  Previously, I believe we were using the auto close functionality but this requires iterating through it all in one shot.  In this case, since we're returning an iterator, we aren't just returning one big complete list of rows so we can't rely on that.  Also, once we do everything async, we may not even consume all of the rows before the client closes the connection.\nSo to address this, I created a callback mechanism on the iterator that calls the callback on completion.  In this case, it does it for the special streams close call, which otherwise wouldn't be called.", "url": "https://github.com/confluentinc/ksql/pull/6726#discussion_r551525360", "createdAt": "2021-01-04T19:37:53Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/IteratorUtil.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.util;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.Iterator;\n+import java.util.NoSuchElementException;\n+\n+public final class IteratorUtil {\n+\n+  private IteratorUtil() {}\n+\n+  public static <T> Iterator<T> onComplete(final Iterator<T> iterator, final Runnable runnable) {\n+    return new IteratorWithCallbacks<T>(iterator, runnable);\n+  }\n+\n+  public static <T> Iterator<T> of(final T... elements) {\n+    return ImmutableList.copyOf(elements).iterator();\n+  }\n+\n+  private static class IteratorWithCallbacks<T> implements Iterator<T> {\n+\n+    private final Iterator<T> backingIterator;\n+    private final Runnable completeRunnable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMzNjU4Nw=="}, "originalCommit": {"oid": "cf5af26e00bfc4728ced4bb8c06fdb210a6effe5"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2516, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}