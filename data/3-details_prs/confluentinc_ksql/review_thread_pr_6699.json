{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNjM5MjI1", "number": 6699, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDo1ODoyN1rOE_Zx-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjo0NDowOVrOFA4nzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTE4MTM5OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/offset/KudafByOffsetUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDo1ODoyN1rOH9GA5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDo1ODoyN1rOH9GA5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgyMzcxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Deal with overflow - we assume if one is positive and the other negative then the\n          \n          \n            \n                    // sequence has overflowed - in which case the latest is the one with the smallest sequence\n          \n          \n            \n                    final long sequence1 = struct1.getInt64(SEQ_FIELD);\n          \n          \n            \n                    final long sequence2 = struct2.getInt64(SEQ_FIELD);\n          \n          \n            \n                    if (sequence1 < 0 && sequence2 >= 0) {\n          \n          \n            \n                      return 1;\n          \n          \n            \n                    } else if (sequence2 < 0 && sequence1 >= 0) {\n          \n          \n            \n                      return -1;\n          \n          \n            \n                    } else {\n          \n          \n            \n                      return Long.compare(sequence1, sequence2);\n          \n          \n            \n                    }\n          \n          \n            \n                    return INTERMEDIATE_STRUCT_COMPARATOR.compare(struct1, struct2);", "url": "https://github.com/confluentinc/ksql/pull/6699#discussion_r533823719", "createdAt": "2020-12-02T00:58:27Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/offset/KudafByOffsetUtils.java", "diffHunk": "@@ -64,6 +64,29 @@\n     }\n   };\n \n+  static final Comparator<Struct> INTERMEDIATE_STRUCT_COMPARATOR_IGNORE_NULLS =\n+      (struct1, struct2) -> {\n+        // Ignore nulls: If one of the structs has a null value, then return the other irrespective\n+        // of sequence.\n+        if (struct1.get(VAL_FIELD) == null) {\n+          return -1;\n+        } else if (struct2.get(VAL_FIELD) == null) {\n+          return 1;\n+        }\n+\n+        // Deal with overflow - we assume if one is positive and the other negative then the\n+        // sequence has overflowed - in which case the latest is the one with the smallest sequence\n+        final long sequence1 = struct1.getInt64(SEQ_FIELD);\n+        final long sequence2 = struct2.getInt64(SEQ_FIELD);\n+        if (sequence1 < 0 && sequence2 >= 0) {\n+          return 1;\n+        } else if (sequence2 < 0 && sequence1 >= 0) {\n+          return -1;\n+        } else {\n+          return Long.compare(sequence1, sequence2);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c88e17d8db8434b468d50745002b771a7ab4662"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTE4NDAxOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/offset/LatestByOffset.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDo1OToxOFrOH9GCXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMDo1OToxOFrOH9GCXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgyNDA5Mg==", "bodyText": "nit: makes sense to make this decision once instead of every time we call merge", "url": "https://github.com/confluentinc/ksql/pull/6699#discussion_r533824092", "createdAt": "2020-12-02T00:59:18Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/offset/LatestByOffset.java", "diffHunk": "@@ -220,7 +222,13 @@ public Struct aggregate(final T current, final Struct aggregate) {\n       public Struct merge(final Struct aggOne, final Struct aggTwo) {\n         // When merging we need some way of evaluating the \"latest' one.\n         // We do this by keeping track of the sequence of when it was originally processed\n-        if (INTERMEDIATE_STRUCT_COMPARATOR.compare(aggOne, aggTwo) >= 0) {\n+        final Comparator<Struct> comparator;\n+        if (ignoreNulls) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c88e17d8db8434b468d50745002b771a7ab4662"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0OTE4NzM4OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/offset/KudafByOffsetUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMTowMDoyOVrOH9GEOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwMTowMDoyOVrOH9GEOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzgyNDU2OA==", "bodyText": "nit: what if they're both null? then we should probably return 0 (I don't think it'll make a difference, but better to be correct)", "url": "https://github.com/confluentinc/ksql/pull/6699#discussion_r533824568", "createdAt": "2020-12-02T01:00:29Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/offset/KudafByOffsetUtils.java", "diffHunk": "@@ -64,6 +64,29 @@\n     }\n   };\n \n+  static final Comparator<Struct> INTERMEDIATE_STRUCT_COMPARATOR_IGNORE_NULLS =\n+      (struct1, struct2) -> {\n+        // Ignore nulls: If one of the structs has a null value, then return the other irrespective\n+        // of sequence.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c88e17d8db8434b468d50745002b771a7ab4662"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDcxMTk5OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/offset/KudafByOffsetUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjo0MjoxM1rOH_Y9xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwMTo1MDoxN1rOH_oCjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzMTM2Nw==", "bodyText": "this condition will never be hit - it needs to be the first in the if/else branches", "url": "https://github.com/confluentinc/ksql/pull/6699#discussion_r536231367", "createdAt": "2020-12-04T16:42:13Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/offset/KudafByOffsetUtils.java", "diffHunk": "@@ -64,6 +64,21 @@\n     }\n   };\n \n+  static final Comparator<Struct> INTERMEDIATE_STRUCT_COMPARATOR_IGNORE_NULLS =\n+      (struct1, struct2) -> {\n+        // Ignore nulls: If one of the structs has a null value, then return the other irrespective\n+        // of sequence.\n+        if (struct1.get(VAL_FIELD) == null) {\n+          return -1;\n+        } else if (struct2.get(VAL_FIELD) == null) {\n+          return 1;\n+        } else if (struct1.get(VAL_FIELD) == null && struct2.get(VAL_FIELD) == null) {\n+          return 0;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff6521eb2d34c18c67c6c530b190ddd99db69822"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjQ3ODM0OA==", "bodyText": "These are what happens when you work on the 3 PRs in parallel and the release", "url": "https://github.com/confluentinc/ksql/pull/6699#discussion_r536478348", "createdAt": "2020-12-05T01:50:17Z", "author": {"login": "vpapavas"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/offset/KudafByOffsetUtils.java", "diffHunk": "@@ -64,6 +64,21 @@\n     }\n   };\n \n+  static final Comparator<Struct> INTERMEDIATE_STRUCT_COMPARATOR_IGNORE_NULLS =\n+      (struct1, struct2) -> {\n+        // Ignore nulls: If one of the structs has a null value, then return the other irrespective\n+        // of sequence.\n+        if (struct1.get(VAL_FIELD) == null) {\n+          return -1;\n+        } else if (struct2.get(VAL_FIELD) == null) {\n+          return 1;\n+        } else if (struct1.get(VAL_FIELD) == null && struct2.get(VAL_FIELD) == null) {\n+          return 0;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzMTM2Nw=="}, "originalCommit": {"oid": "ff6521eb2d34c18c67c6c530b190ddd99db69822"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDcyMDE0OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/offset/LatestByOffset.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjo0NDowOVrOH_ZCwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNjo0NDowOVrOH_ZCwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjIzMjY0MQ==", "bodyText": "we should not be relying on static state - if people create two different latest by offests (one to ignore nulls and one not to) whichever is created second will override the comparator for the first. Instead, it should be created when latestN method is called as a local variable and referenced in the anonymous class\nIn general, if you see code with static, non-final state it's probably a bug and best to avoid.", "url": "https://github.com/confluentinc/ksql/pull/6699#discussion_r536232641", "createdAt": "2020-12-04T16:44:09Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/offset/LatestByOffset.java", "diffHunk": "@@ -50,6 +52,7 @@ private LatestByOffset() {\n   }\n \n   static AtomicLong sequence = new AtomicLong();\n+  private static Comparator<Struct> comparator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff6521eb2d34c18c67c6c530b190ddd99db69822"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2473, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}