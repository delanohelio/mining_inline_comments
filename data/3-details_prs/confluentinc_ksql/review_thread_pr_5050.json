{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMDg4MzYw", "number": 5050, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMzoxNDoyOVrODw4iCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOToyNToxOFrODxyjIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTg0NDU5OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMzoxNDoyOVrOGEIC1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMzoxNDoyOVrOGEIC1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3OTI4Ng==", "bodyText": "in the next PR, we will recurse here instead of throwing an exception\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  throw new KsqlException(\n          \n          \n            \n                      \"Invalid join criteria specified; KSQL does not support multi-way joins.\");\n          \n          \n            \n                  left = buildJoin(root.getLeft());", "url": "https://github.com/confluentinc/ksql/pull/5050#discussion_r406979286", "createdAt": "2020-04-10T23:14:29Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "diffHunk": "@@ -431,52 +433,57 @@ private PlanNode buildSourceForJoin(\n   }\n \n   private PlanNode buildSourceNode() {\n-\n-    final List<AliasedDataSource> sources = analysis.getAllDataSources();\n-\n     if (!analysis.isJoin()) {\n-      return buildNonJoinNode(sources);\n+      return buildNonJoinNode(analysis.getFrom());\n     }\n \n-    if (sources.size() == 1) {\n-      throw new IllegalStateException(\"Expected more than one source. Got \" + sources.size());\n-    } else if (sources.size() != 2) {\n-      throw new KsqlException(\n-          \"Invalid join criteria specified; KSQL does not support multi-way joins.\");\n+    final List<JoinInfo> joinInfo = analysis.getOriginal().getJoin();\n+    final JoinTree.Node tree = JoinTree.build(joinInfo);\n+    if (tree instanceof JoinTree.Leaf) {\n+      throw new IllegalStateException(\"Expected more than one source:\"\n+          + analysis.getAllDataSources());\n     }\n \n-    final AliasedDataSource left = sources.get(0);\n-    final AliasedDataSource right = sources.get(1);\n+    return buildJoin((Join) tree);\n+  }\n \n-    final List<JoinInfo> joinInfo = analysis.getOriginal().getJoin();\n \n-    final PlanNode leftSourceNode = buildSourceForJoin(\n-        left,\n-        \"Left\",\n-        joinInfo.get(0).getLeftJoinExpression()\n-    );\n+  /**\n+   * @param root  the root of the Join Tree\n+   * @return the PlanNode representing this Join Tree\n+   */\n+  private PlanNode buildJoin(final Join root) {\n+    final PlanNode left;\n+    if (root.getLeft() instanceof JoinTree.Join) {\n+      throw new KsqlException(\n+          \"Invalid join criteria specified; KSQL does not support multi-way joins.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14df72f6013e694f60b964ff38c5a0abf82ebc47"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNTg0NTU5OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMzoxNTowOFrOGEIDZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMzoxNTowOFrOGEIDZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk3OTQyOQ==", "bodyText": "The next PR will also change the IDs of the plan nodes - this will make sure that they are unique when we generate multi-join topologies. This will require updating the historical plans.", "url": "https://github.com/confluentinc/ksql/pull/5050#discussion_r406979429", "createdAt": "2020-04-10T23:15:08Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/LogicalPlanner.java", "diffHunk": "@@ -431,52 +433,57 @@ private PlanNode buildSourceForJoin(\n   }\n \n   private PlanNode buildSourceNode() {\n-\n-    final List<AliasedDataSource> sources = analysis.getAllDataSources();\n-\n     if (!analysis.isJoin()) {\n-      return buildNonJoinNode(sources);\n+      return buildNonJoinNode(analysis.getFrom());\n     }\n \n-    if (sources.size() == 1) {\n-      throw new IllegalStateException(\"Expected more than one source. Got \" + sources.size());\n-    } else if (sources.size() != 2) {\n-      throw new KsqlException(\n-          \"Invalid join criteria specified; KSQL does not support multi-way joins.\");\n+    final List<JoinInfo> joinInfo = analysis.getOriginal().getJoin();\n+    final JoinTree.Node tree = JoinTree.build(joinInfo);\n+    if (tree instanceof JoinTree.Leaf) {\n+      throw new IllegalStateException(\"Expected more than one source:\"\n+          + analysis.getAllDataSources());\n     }\n \n-    final AliasedDataSource left = sources.get(0);\n-    final AliasedDataSource right = sources.get(1);\n+    return buildJoin((Join) tree);\n+  }\n \n-    final List<JoinInfo> joinInfo = analysis.getOriginal().getJoin();\n \n-    final PlanNode leftSourceNode = buildSourceForJoin(\n-        left,\n-        \"Left\",\n-        joinInfo.get(0).getLeftJoinExpression()\n-    );\n+  /**\n+   * @param root  the root of the Join Tree\n+   * @return the PlanNode representing this Join Tree\n+   */\n+  private PlanNode buildJoin(final Join root) {\n+    final PlanNode left;\n+    if (root.getLeft() instanceof JoinTree.Join) {\n+      throw new KsqlException(\n+          \"Invalid join criteria specified; KSQL does not support multi-way joins.\");\n+    } else {\n+      final JoinTree.Leaf leaf = (Leaf) root.getLeft();\n+      left = buildSourceForJoin(\n+          leaf.getSource(), \"Left\", root.getInfo().getLeftJoinExpression());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14df72f6013e694f60b964ff38c5a0abf82ebc47"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTMxOTI2OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/JoinTree.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOToxNjo1NFrOGFdRGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMTo1MjoyNVrOGFiT2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM3NTU3OA==", "bodyText": "I don't understand the rational behind this. Why create a right-deep tree here?", "url": "https://github.com/confluentinc/ksql/pull/5050#discussion_r408375578", "createdAt": "2020-04-14T19:16:54Z", "author": {"login": "vpapavas"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/JoinTree.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.planner;\n+\n+import io.confluent.ksql.analyzer.Analysis.AliasedDataSource;\n+import io.confluent.ksql.analyzer.Analysis.JoinInfo;\n+import io.confluent.ksql.schema.ksql.FormatOptions;\n+import io.confluent.ksql.util.KsqlException;\n+import java.util.List;\n+import java.util.Objects;\n+import org.apache.commons.lang3.StringUtils;\n+\n+/**\n+ * {@code JoinTree} constructs the logical order for which the\n+ * joins should be executed. At the moment, there is no optimization\n+ * done and it simply follows the order of execution that the user\n+ * indicates.\n+ *\n+ * <p>The algorithm is simple: the root is the very first source that\n+ * we encounter (in the case of a single join, we ensure that the left\n+ * root is the FROM source). From then on, any join that happens will\n+ * check if either the left or right source is within the join tree and\n+ * add the other to the corresponding side of the join tree.</p>\n+ *\n+ * <p>For example, take the following join statement:\n+ * <pre>\n+ * {@code\n+ *    SELECT * FROM a\n+ *      JOIN b ON a.id = b.id\n+ *      JOIN c ON a.id = c.id;\n+ * }\n+ * </pre>\n+ * The resulting join tree would look like:\n+ * <pre>\n+ * {@code\n+ *       \u22c8\n+ *      / \\\n+ *     \u22c8   C\n+ *    / \\\n+ *   A   B\n+ * }\n+ * </pre>\n+ * If the statement was modified so that the final expression was\n+ * {@code JOIN c ON c.id = a.id} (note that {@code c.id} has moved\n+ * to the left side of the join), then the resulting join tree would\n+ * look like:\n+ * <pre>\n+ * {@code\n+ *     \u22c8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb953aa25a3150aff048ddf864d68fa1651434d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQyMTMxNQ==", "bodyText": "this just let's the user express it however they'd like - it's not necessarily \"right deep\". If i write:\nSELECT * FROM A \n  JOIN B ON b.id = a.id\n  JOIN C on b.id = c.id\n  JOIN D on d.id = b.id\nI would get:\n   \u22c8\n  / \\\n D   \u22c8\n    / \\\n   \u22c8   C\n  / \\\n B   A\n\nThe short of it is that I put the right expression on the right side and the left expression on the left side.\n\nReally, it just made the code easier to write (I don't have to \"flip\" any of the expressions) and it gives more control to the user (which isn't a bad thing, given we don't do any optimizations)", "url": "https://github.com/confluentinc/ksql/pull/5050#discussion_r408421315", "createdAt": "2020-04-14T20:40:14Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/JoinTree.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.planner;\n+\n+import io.confluent.ksql.analyzer.Analysis.AliasedDataSource;\n+import io.confluent.ksql.analyzer.Analysis.JoinInfo;\n+import io.confluent.ksql.schema.ksql.FormatOptions;\n+import io.confluent.ksql.util.KsqlException;\n+import java.util.List;\n+import java.util.Objects;\n+import org.apache.commons.lang3.StringUtils;\n+\n+/**\n+ * {@code JoinTree} constructs the logical order for which the\n+ * joins should be executed. At the moment, there is no optimization\n+ * done and it simply follows the order of execution that the user\n+ * indicates.\n+ *\n+ * <p>The algorithm is simple: the root is the very first source that\n+ * we encounter (in the case of a single join, we ensure that the left\n+ * root is the FROM source). From then on, any join that happens will\n+ * check if either the left or right source is within the join tree and\n+ * add the other to the corresponding side of the join tree.</p>\n+ *\n+ * <p>For example, take the following join statement:\n+ * <pre>\n+ * {@code\n+ *    SELECT * FROM a\n+ *      JOIN b ON a.id = b.id\n+ *      JOIN c ON a.id = c.id;\n+ * }\n+ * </pre>\n+ * The resulting join tree would look like:\n+ * <pre>\n+ * {@code\n+ *       \u22c8\n+ *      / \\\n+ *     \u22c8   C\n+ *    / \\\n+ *   A   B\n+ * }\n+ * </pre>\n+ * If the statement was modified so that the final expression was\n+ * {@code JOIN c ON c.id = a.id} (note that {@code c.id} has moved\n+ * to the left side of the join), then the resulting join tree would\n+ * look like:\n+ * <pre>\n+ * {@code\n+ *     \u22c8", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM3NTU3OA=="}, "originalCommit": {"oid": "0fb953aa25a3150aff048ddf864d68fa1651434d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQ1ODIwMQ==", "bodyText": "Nevermind... I just realized that these are the same trees. I Don't think it matters which source is on the left and which source is on the right in the join tree. I can rewrite it to always be left deep.", "url": "https://github.com/confluentinc/ksql/pull/5050#discussion_r408458201", "createdAt": "2020-04-14T21:52:25Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/JoinTree.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.planner;\n+\n+import io.confluent.ksql.analyzer.Analysis.AliasedDataSource;\n+import io.confluent.ksql.analyzer.Analysis.JoinInfo;\n+import io.confluent.ksql.schema.ksql.FormatOptions;\n+import io.confluent.ksql.util.KsqlException;\n+import java.util.List;\n+import java.util.Objects;\n+import org.apache.commons.lang3.StringUtils;\n+\n+/**\n+ * {@code JoinTree} constructs the logical order for which the\n+ * joins should be executed. At the moment, there is no optimization\n+ * done and it simply follows the order of execution that the user\n+ * indicates.\n+ *\n+ * <p>The algorithm is simple: the root is the very first source that\n+ * we encounter (in the case of a single join, we ensure that the left\n+ * root is the FROM source). From then on, any join that happens will\n+ * check if either the left or right source is within the join tree and\n+ * add the other to the corresponding side of the join tree.</p>\n+ *\n+ * <p>For example, take the following join statement:\n+ * <pre>\n+ * {@code\n+ *    SELECT * FROM a\n+ *      JOIN b ON a.id = b.id\n+ *      JOIN c ON a.id = c.id;\n+ * }\n+ * </pre>\n+ * The resulting join tree would look like:\n+ * <pre>\n+ * {@code\n+ *       \u22c8\n+ *      / \\\n+ *     \u22c8   C\n+ *    / \\\n+ *   A   B\n+ * }\n+ * </pre>\n+ * If the statement was modified so that the final expression was\n+ * {@code JOIN c ON c.id = a.id} (note that {@code c.id} has moved\n+ * to the left side of the join), then the resulting join tree would\n+ * look like:\n+ * <pre>\n+ * {@code\n+ *     \u22c8", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM3NTU3OA=="}, "originalCommit": {"oid": "0fb953aa25a3150aff048ddf864d68fa1651434d"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNTM1MDA5OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/JoinTree.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOToyNToxOFrOGFdj_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOToyNToxOFrOGFdj_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM4MDQxMw==", "bodyText": "<3", "url": "https://github.com/confluentinc/ksql/pull/5050#discussion_r408380413", "createdAt": "2020-04-14T19:25:18Z", "author": {"login": "vpapavas"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/planner/JoinTree.java", "diffHunk": "@@ -0,0 +1,240 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.planner;\n+\n+import io.confluent.ksql.analyzer.Analysis.AliasedDataSource;\n+import io.confluent.ksql.analyzer.Analysis.JoinInfo;\n+import io.confluent.ksql.schema.ksql.FormatOptions;\n+import io.confluent.ksql.util.KsqlException;\n+import java.util.List;\n+import java.util.Objects;\n+import org.apache.commons.lang3.StringUtils;\n+\n+/**\n+ * {@code JoinTree} constructs the logical order for which the\n+ * joins should be executed. At the moment, there is no optimization\n+ * done and it simply follows the order of execution that the user\n+ * indicates.\n+ *\n+ * <p>The algorithm is simple: the root is the very first source that\n+ * we encounter (in the case of a single join, we ensure that the left\n+ * root is the FROM source). From then on, any join that happens will\n+ * check if either the left or right source is within the join tree and\n+ * add the other to the corresponding side of the join tree.</p>\n+ *\n+ * <p>For example, take the following join statement:\n+ * <pre>\n+ * {@code\n+ *    SELECT * FROM a\n+ *      JOIN b ON a.id = b.id\n+ *      JOIN c ON a.id = c.id;\n+ * }\n+ * </pre>\n+ * The resulting join tree would look like:\n+ * <pre>\n+ * {@code\n+ *       \u22c8\n+ *      / \\\n+ *     \u22c8   C\n+ *    / \\\n+ *   A   B\n+ * }\n+ * </pre>\n+ * If the statement was modified so that the final expression was\n+ * {@code JOIN c ON c.id = a.id} (note that {@code c.id} has moved\n+ * to the left side of the join), then the resulting join tree would\n+ * look like:\n+ * <pre>\n+ * {@code\n+ *     \u22c8\n+ *   /   \\\n+ *  C    \u22c8\n+ *      / \\\n+ *     A   B\n+ * }\n+ * </pre>\n+ * </p>\n+ */\n+final class JoinTree {\n+\n+  private JoinTree() {\n+  }\n+\n+  /**\n+   * Constructs the join tree given a list of {@code JoinInfo}\n+   *\n+   * @param joins the joins\n+   * @return the tree indicating the order of the join\n+   * @see JoinTree\n+   */\n+  public static Node build(final List<JoinInfo> joins) {\n+    Node root = null;\n+\n+    for (final JoinInfo join : joins) {\n+      if (root == null) {\n+        root = new Leaf(join.getLeftSource());\n+      }\n+\n+      if (root.containsSource(join.getRightSource()) && root.containsSource(join.getLeftSource())) {\n+        throw new KsqlException(\"Cannot perform circular join - both \" + join.getRightSource()\n+            + \" and \" + join.getLeftJoinExpression()\n+            + \" are already included in the current join tree: \" + root.debugString(0));\n+      } else if (root.containsSource(join.getLeftSource())) {\n+        root = new Join(root, new Leaf(join.getRightSource()), join);\n+      } else if (root.containsSource(join.getRightSource())) {\n+        root = new Join(new Leaf(join.getLeftSource()), root, join);\n+      } else {\n+        throw new KsqlException(\n+            \"Cannot build JOIN tree; neither source in the join is the FROM source or included \"\n+                + \"in a previous JOIN: \" + join + \". The current join tree is \"\n+                + root.debugString(0)\n+        );\n+      }\n+    }\n+\n+    return root;\n+  }\n+\n+  /**\n+   * A node in the {@code JoinTree} that represents either a Leaf node or a Join\n+   * node.\n+   */\n+  interface Node {\n+\n+    /**\n+     * @param dataSource the data source to search for\n+     * @return whether or not this node already references the {@code dataSource}\n+     */\n+    boolean containsSource(AliasedDataSource dataSource);\n+\n+    /**\n+     * @return a debug string that pretty prints the tree\n+     */\n+    String debugString(int indent);\n+  }\n+\n+  static class Join implements Node {\n+\n+    private final Node left;\n+    private final Node right;\n+    private final JoinInfo info;\n+\n+    Join(final Node left, final Node right, final JoinInfo info) {\n+      this.left = left;\n+      this.right = right;\n+      this.info = info;\n+    }\n+\n+    public JoinInfo getInfo() {\n+      return info;\n+    }\n+\n+    public Node getLeft() {\n+      return left;\n+    }\n+\n+    public Node getRight() {\n+      return right;\n+    }\n+\n+    @Override\n+    public boolean containsSource(final AliasedDataSource dataSource) {\n+      return left.containsSource(dataSource) || right.containsSource(dataSource);\n+    }\n+\n+    @Override\n+    public String debugString(final int indent) {\n+      return \"\u22c8\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb953aa25a3150aff048ddf864d68fa1651434d"}, "originalPosition": 160}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3553, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}