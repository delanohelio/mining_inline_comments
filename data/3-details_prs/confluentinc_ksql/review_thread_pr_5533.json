{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2OTAwMDMz", "number": 5533, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMTozOTowM1rOEB-Quw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMTo0Mjo0OVrOEB-S7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTA0MTIzOnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/elements.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMTozOTowM1rOGeJSsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTowNjozOFrOGeS5lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2MjcwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    {\"topic\": \"input\", \"key\": null, \"value\": {\"ID\": 1, \"F0\": 2}}\n          \n          \n            \n                    {\"topic\": \"input\", \"key\": null, \"value\": {\"ID\": 1, \"F0\": 2}},\n          \n          \n            \n                    {\"topic\": \"input\", \"key\": \"foo\", \"value\": {\"ID\": 1, \"F0\": 2}}\n          \n      \n    \n    \n  \n\nlet's also test what happens when there is a key in the message but one isn't declared", "url": "https://github.com/confluentinc/ksql/pull/5533#discussion_r434262706", "createdAt": "2020-06-03T01:39:03Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/elements.json", "diffHunk": "@@ -859,6 +859,52 @@\n           {\"name\": \"OUTPUT\", \"type\": \"stream\", \"schema\": \"ID INT KEY, ID_COPY INT\"}\n         ]\n       }\n+    },\n+    {\n+      \"name\": \"table without primary key fails\",\n+      \"statements\": [\n+        \"CREATE TABLE INPUT (ID INT, F0 INT) WITH (kafka_topic='input', value_format='JSON');\"\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n+        \"message\": \"Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\"\n+      }\n+    },\n+    {\n+      \"name\": \"table without primary key fails - schema inference\",\n+      \"statements\": [\n+        \"CREATE TABLE INPUT WITH (kafka_topic='input', value_format='Avro');\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input\",\n+          \"schema\": {\"name\": \"blah\", \"type\": \"record\", \"fields\": [{\"name\": \"c1\", \"type\": \"int\"}]},\n+          \"format\": \"AVRO\"\n+        }\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlException\",\n+        \"message\": \"Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\\nUse a partial schema to define the primary key and still load the value columns from the Schema Registry, for example:\\n\\tCREATE TABLE INPUT (ID INT PRIMARY KEY) WITH (...);\"\n+      }\n+    },\n+    {\n+      \"name\": \"stream without key column\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID INT, F0 INT) WITH (kafka_topic='input', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input\", \"key\": null, \"value\": {\"ID\": 1, \"F0\": 2}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e952d9133ae0ab5f60957f82acfbd91223062e89"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQyMDExOQ==", "bodyText": "sure.", "url": "https://github.com/confluentinc/ksql/pull/5533#discussion_r434420119", "createdAt": "2020-06-03T09:06:38Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/elements.json", "diffHunk": "@@ -859,6 +859,52 @@\n           {\"name\": \"OUTPUT\", \"type\": \"stream\", \"schema\": \"ID INT KEY, ID_COPY INT\"}\n         ]\n       }\n+    },\n+    {\n+      \"name\": \"table without primary key fails\",\n+      \"statements\": [\n+        \"CREATE TABLE INPUT (ID INT, F0 INT) WITH (kafka_topic='input', value_format='JSON');\"\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n+        \"message\": \"Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\"\n+      }\n+    },\n+    {\n+      \"name\": \"table without primary key fails - schema inference\",\n+      \"statements\": [\n+        \"CREATE TABLE INPUT WITH (kafka_topic='input', value_format='Avro');\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input\",\n+          \"schema\": {\"name\": \"blah\", \"type\": \"record\", \"fields\": [{\"name\": \"c1\", \"type\": \"int\"}]},\n+          \"format\": \"AVRO\"\n+        }\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlException\",\n+        \"message\": \"Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\\nUse a partial schema to define the primary key and still load the value columns from the Schema Registry, for example:\\n\\tCREATE TABLE INPUT (ID INT PRIMARY KEY) WITH (...);\"\n+      }\n+    },\n+    {\n+      \"name\": \"stream without key column\",\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (ID INT, F0 INT) WITH (kafka_topic='input', value_format='JSON');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input\", \"key\": null, \"value\": {\"ID\": 1, \"F0\": 2}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2MjcwNg=="}, "originalCommit": {"oid": "e952d9133ae0ab5f60957f82acfbd91223062e89"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTA0Njg0OnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/joins.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMTo0Mjo0OVrOGeJWIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOTo0MzowN1rOGeUQgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2MzU4Ng==", "bodyText": "dont want to be too picky, but let's also add a stream no-key --> table join", "url": "https://github.com/confluentinc/ksql/pull/5533#discussion_r434263586", "createdAt": "2020-06-03T01:42:49Z", "author": {"login": "agavra"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/joins.json", "diffHunk": "@@ -1966,6 +1966,26 @@\n       \"outputs\": [\n         {\"topic\": \"OUTPUT\", \"key\": \"user_0\", \"value\": {\"IMPRESSION_ID\": 24, \"URL\": \"urlA\"}, \"timestamp\":  12}\n       ]\n+    },\n+    {\n+      \"name\": \"streams with no key columns\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e952d9133ae0ab5f60957f82acfbd91223062e89"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ0MjM2OQ==", "bodyText": "done", "url": "https://github.com/confluentinc/ksql/pull/5533#discussion_r434442369", "createdAt": "2020-06-03T09:43:07Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/joins.json", "diffHunk": "@@ -1966,6 +1966,26 @@\n       \"outputs\": [\n         {\"topic\": \"OUTPUT\", \"key\": \"user_0\", \"value\": {\"IMPRESSION_ID\": 24, \"URL\": \"urlA\"}, \"timestamp\":  12}\n       ]\n+    },\n+    {\n+      \"name\": \"streams with no key columns\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI2MzU4Ng=="}, "originalCommit": {"oid": "e952d9133ae0ab5f60957f82acfbd91223062e89"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3344, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}