{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NDA1OTAy", "number": 5886, "title": "docs: how-to guide to control casing (DOCS-4102)", "bodyText": "Description\nA new how-to guide to answer a commonly asked question: how do I make ksqlDB stop uppercasing everything?", "createdAt": "2020-07-27T21:14:21Z", "url": "https://github.com/confluentinc/ksql/pull/5886", "merged": true, "mergeCommit": {"oid": "583ab8c969c34e5a8a6c87c4df1c8a01af06f8b7"}, "closed": true, "closedAt": "2020-07-28T15:42:48Z", "author": {"login": "MichaelDrogalis"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5IdtBgH2gAyNDU3NDA1OTAyOjc0YjVmNzU2YmEwMWQwYmIyOTUyMjc0MThjNjFmZGFlODJhZDkwMjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5YVzTAH2gAyNDU3NDA1OTAyOjdkMzUxOGI1NGJiZGU5OTFlY2U4NzBiN2M5ODg2YmNjYTQwYTc5NjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "74b5f756ba01d0bb295227418c61fdae82ad9023", "author": {"user": {"login": "MichaelDrogalis", "name": "Michael Drogalis"}}, "url": "https://github.com/confluentinc/ksql/commit/74b5f756ba01d0bb295227418c61fdae82ad9023", "committedDate": "2020-07-27T21:11:27Z", "message": "docs: how-to guide to control casing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a869ae3b87626998d84d5641f96f5853173893f3", "author": {"user": {"login": "MichaelDrogalis", "name": "Michael Drogalis"}}, "url": "https://github.com/confluentinc/ksql/commit/a869ae3b87626998d84d5641f96f5853173893f3", "committedDate": "2020-07-27T21:15:19Z", "message": "docs: update index"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MTQzNTE1", "url": "https://github.com/confluentinc/ksql/pull/5886#pullrequestreview-456143515", "createdAt": "2020-07-27T21:19:47Z", "commit": {"oid": "a869ae3b87626998d84d5641f96f5853173893f3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMToxOTo0N1rOG3z_aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMToxOTo0N1rOG3z_aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE3NjY4MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            UDFs, see the struct section of the [<span class=\"x x-first x-last\">wow</span> to create a user-defined\n          \n          \n            \n            UDFs, see the struct section of the [<span class=\"x x-first x-last\">how</span> to create a user-defined", "url": "https://github.com/confluentinc/ksql/pull/5886#discussion_r461176680", "createdAt": "2020-07-27T21:19:47Z", "author": {"login": "JimGalasyn"}, "path": "docs/how-to-guides/control-the-case-of-identifiers.md", "diffHunk": "@@ -0,0 +1,103 @@\n+# How to control the case of identifiers\n+\n+## Context\n+\n+You have identifiers, like row names, that will be used outside of\n+ksqlDB. You want to control the exact casing (capitalization) of how\n+they are represented to make them consumable by downstream\n+programs. Because ksqlDB uppercases all identifiers by default, you\n+need to use backticks to preserve the desired casing.\n+\n+## In action\n+\n+```sql\n+CREATE STREAM `s1` (\n+    `a` VARCHAR KEY,\n+    `B` INT,\n+    `c` VARCHAR\n+) WITH (\n+    kafka_topic = 's1',\n+    partitions = 1,\n+    value_format = 'avro'\n+);\n+```\n+\n+## Backticks\n+\n+Begin by telling ksqlDB to start all queries from the earliest point\n+in each topic.\n+\n+```sql\n+SET 'auto.offset.reset' = 'earliest';\n+```\n+\n+Declare a new stream named `s2`. In this example, you override\n+ksqlDB's default behavior to uppercase all identifiers. Use backticks\n+to control the casing of the stream name and two of the column names,\n+`a` and `B`. `c` receives the default behavior of uppercasing.\n+\n+```sql\n+CREATE STREAM `s2` (\n+    `a` VARCHAR KEY,\n+    `B` INT,\n+    c VARCHAR\n+) WITH (\n+    kafka_topic = 's2',\n+    partitions = 1,\n+    value_format = 'avro'\n+);\n+```\n+\n+Insert some rows into `s2`. Notice how you need to use backticks each\n+time to reference a field that doesn't have the default casing:\n+\n+```sql\n+INSERT INTO `s2` (`a`, `B`, c) VALUES ('k1', 1, 'x');\n+INSERT INTO `s2` (`a`, `B`, c) VALUES ('k2', 2, 'y');\n+INSERT INTO `s2` (`a`, `B`, c) VALUES ('k3', 3, 'z');\n+```\n+\n+Issue a push query to select the rows. The relevant identifiers are\n+again surrounded with backticks:\n+\n+```sql\n+select `a`, `B`, c from `s2` emit changes;\n+```\n+\n+Your output should resemble the following. Notice the casing of the\n+headers that ksqlDB prints:\n+\n+```\n++----------------------------------------+----------------------------------------+----------------------------------------+\n+|a                                       |B                                       |C                                       |\n++----------------------------------------+----------------------------------------+----------------------------------------+\n+|k1                                      |1                                       |x                                       |\n+|k2                                      |2                                       |y                                       |\n+|k3                                      |3                                       |z                                       |\n+```\n+\n+\n+## User-defined functions\n+\n+Another area where casing is important is user-defined functions\n+(UDFs) that work with struct parameters. This is the case whenever you\n+use a UDF that either receives an incoming struct or returns a custom\n+struct. Any references to struct fields must exactly match the casing\n+ksqlDB expects. ksqlDB will reject any UDF invocations that do not\n+match it.\n+\n+Here is a quick example of using backticks in a UDF that returns a\n+custom struct. The first two fields override the default behavior. The\n+last uses the default casing. That means that when you work with the\n+data returned from the UDF in ksqlDB, all select statements must use\n+this exact casing. For more information on working with structs in\n+UDFs, see the struct section of the [wow to create a user-defined", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a869ae3b87626998d84d5641f96f5853173893f3"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MTQzODgw", "url": "https://github.com/confluentinc/ksql/pull/5886#pullrequestreview-456143880", "createdAt": "2020-07-27T21:20:25Z", "commit": {"oid": "a869ae3b87626998d84d5641f96f5853173893f3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbbf7847a52dc1db604085e746556a8c68edbb93", "author": {"user": {"login": "MichaelDrogalis", "name": "Michael Drogalis"}}, "url": "https://github.com/confluentinc/ksql/commit/dbbf7847a52dc1db604085e746556a8c68edbb93", "committedDate": "2020-07-27T21:24:39Z", "message": "Update docs/how-to-guides/control-the-case-of-identifiers.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MTQ4NzQw", "url": "https://github.com/confluentinc/ksql/pull/5886#pullrequestreview-456148740", "createdAt": "2020-07-27T21:28:59Z", "commit": {"oid": "dbbf7847a52dc1db604085e746556a8c68edbb93"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMToyODo1OVrOG30Qpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMTozMDozOVrOG30TuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MTA5NQ==", "bodyText": "unless it's all uppercase \ud83d\ude02 you could reference B without quotes. might be good to have an example with mixed case (`Dog`)", "url": "https://github.com/confluentinc/ksql/pull/5886#discussion_r461181095", "createdAt": "2020-07-27T21:28:59Z", "author": {"login": "agavra"}, "path": "docs/how-to-guides/control-the-case-of-identifiers.md", "diffHunk": "@@ -0,0 +1,103 @@\n+# How to control the case of identifiers\n+\n+## Context\n+\n+You have identifiers, like row names, that will be used outside of\n+ksqlDB. You want to control the exact casing (capitalization) of how\n+they are represented to make them consumable by downstream\n+programs. Because ksqlDB uppercases all identifiers by default, you\n+need to use backticks to preserve the desired casing.\n+\n+## In action\n+\n+```sql\n+CREATE STREAM `s1` (\n+    `a` VARCHAR KEY,\n+    `B` INT,\n+    `c` VARCHAR\n+) WITH (\n+    kafka_topic = 's1',\n+    partitions = 1,\n+    value_format = 'avro'\n+);\n+```\n+\n+## Backticks\n+\n+Begin by telling ksqlDB to start all queries from the earliest point\n+in each topic.\n+\n+```sql\n+SET 'auto.offset.reset' = 'earliest';\n+```\n+\n+Declare a new stream named `s2`. In this example, you override\n+ksqlDB's default behavior to uppercase all identifiers. Use backticks\n+to control the casing of the stream name and two of the column names,\n+`a` and `B`. `c` receives the default behavior of uppercasing.\n+\n+```sql\n+CREATE STREAM `s2` (\n+    `a` VARCHAR KEY,\n+    `B` INT,\n+    c VARCHAR\n+) WITH (\n+    kafka_topic = 's2',\n+    partitions = 1,\n+    value_format = 'avro'\n+);\n+```\n+\n+Insert some rows into `s2`. Notice how you need to use backticks each\n+time to reference a field that doesn't have the default casing:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbbf7847a52dc1db604085e746556a8c68edbb93"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MTM0MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            INSERT INTO `s2` (`a`, `B`, <span class=\"x x-first x-last\">c</span>) VALUES ('k2', 2, 'y');\n          \n          \n            \n            INSERT INTO `s2` (`a`, `B`, <span class=\"x x-first x-last\">C</span>) VALUES ('k2', 2, 'y');\n          \n      \n    \n    \n  \n\nto illustrate that unquoted cols are case-insensitive", "url": "https://github.com/confluentinc/ksql/pull/5886#discussion_r461181340", "createdAt": "2020-07-27T21:29:26Z", "author": {"login": "agavra"}, "path": "docs/how-to-guides/control-the-case-of-identifiers.md", "diffHunk": "@@ -0,0 +1,103 @@\n+# How to control the case of identifiers\n+\n+## Context\n+\n+You have identifiers, like row names, that will be used outside of\n+ksqlDB. You want to control the exact casing (capitalization) of how\n+they are represented to make them consumable by downstream\n+programs. Because ksqlDB uppercases all identifiers by default, you\n+need to use backticks to preserve the desired casing.\n+\n+## In action\n+\n+```sql\n+CREATE STREAM `s1` (\n+    `a` VARCHAR KEY,\n+    `B` INT,\n+    `c` VARCHAR\n+) WITH (\n+    kafka_topic = 's1',\n+    partitions = 1,\n+    value_format = 'avro'\n+);\n+```\n+\n+## Backticks\n+\n+Begin by telling ksqlDB to start all queries from the earliest point\n+in each topic.\n+\n+```sql\n+SET 'auto.offset.reset' = 'earliest';\n+```\n+\n+Declare a new stream named `s2`. In this example, you override\n+ksqlDB's default behavior to uppercase all identifiers. Use backticks\n+to control the casing of the stream name and two of the column names,\n+`a` and `B`. `c` receives the default behavior of uppercasing.\n+\n+```sql\n+CREATE STREAM `s2` (\n+    `a` VARCHAR KEY,\n+    `B` INT,\n+    c VARCHAR\n+) WITH (\n+    kafka_topic = 's2',\n+    partitions = 1,\n+    value_format = 'avro'\n+);\n+```\n+\n+Insert some rows into `s2`. Notice how you need to use backticks each\n+time to reference a field that doesn't have the default casing:\n+\n+```sql\n+INSERT INTO `s2` (`a`, `B`, c) VALUES ('k1', 1, 'x');\n+INSERT INTO `s2` (`a`, `B`, c) VALUES ('k2', 2, 'y');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbbf7847a52dc1db604085e746556a8c68edbb93"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTE4MTg4MQ==", "bodyText": "might be good to have a struct example where the fields in the struct are cased (and link it to the example below)", "url": "https://github.com/confluentinc/ksql/pull/5886#discussion_r461181881", "createdAt": "2020-07-27T21:30:39Z", "author": {"login": "agavra"}, "path": "docs/how-to-guides/control-the-case-of-identifiers.md", "diffHunk": "@@ -0,0 +1,103 @@\n+# How to control the case of identifiers\n+\n+## Context\n+\n+You have identifiers, like row names, that will be used outside of\n+ksqlDB. You want to control the exact casing (capitalization) of how\n+they are represented to make them consumable by downstream\n+programs. Because ksqlDB uppercases all identifiers by default, you\n+need to use backticks to preserve the desired casing.\n+\n+## In action\n+\n+```sql\n+CREATE STREAM `s1` (\n+    `a` VARCHAR KEY,\n+    `B` INT,\n+    `c` VARCHAR\n+) WITH (\n+    kafka_topic = 's1',\n+    partitions = 1,\n+    value_format = 'avro'\n+);\n+```\n+\n+## Backticks\n+\n+Begin by telling ksqlDB to start all queries from the earliest point\n+in each topic.\n+\n+```sql\n+SET 'auto.offset.reset' = 'earliest';\n+```\n+\n+Declare a new stream named `s2`. In this example, you override\n+ksqlDB's default behavior to uppercase all identifiers. Use backticks\n+to control the casing of the stream name and two of the column names,\n+`a` and `B`. `c` receives the default behavior of uppercasing.\n+\n+```sql\n+CREATE STREAM `s2` (\n+    `a` VARCHAR KEY,\n+    `B` INT,\n+    c VARCHAR", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbbf7847a52dc1db604085e746556a8c68edbb93"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22efb8d3d7cac7943c7ce07b597d3e1a22cb0771", "author": {"user": {"login": "MichaelDrogalis", "name": "Michael Drogalis"}}, "url": "https://github.com/confluentinc/ksql/commit/22efb8d3d7cac7943c7ce07b597d3e1a22cb0771", "committedDate": "2020-07-27T22:57:38Z", "message": "docs: integrated suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "612b51ba08b7c5be57fb4a8dabb3af8803052b67", "author": {"user": {"login": "MichaelDrogalis", "name": "Michael Drogalis"}}, "url": "https://github.com/confluentinc/ksql/commit/612b51ba08b7c5be57fb4a8dabb3af8803052b67", "committedDate": "2020-07-27T22:58:27Z", "message": "docs: fix merge conflict"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2MTk0OTg3", "url": "https://github.com/confluentinc/ksql/pull/5886#pullrequestreview-456194987", "createdAt": "2020-07-27T23:08:30Z", "commit": {"oid": "612b51ba08b7c5be57fb4a8dabb3af8803052b67"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowODozMFrOG32s9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QyMzowOTozN1rOG32uZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMTExMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            this behavior, `<span class=\"x x-first x-last\">quz</span>` is declared without backticks to demonstrate\n          \n          \n            \n            this behavior, `<span class=\"x x-first x-last\">qux</span>` is declared without backticks to demonstrate", "url": "https://github.com/confluentinc/ksql/pull/5886#discussion_r461221111", "createdAt": "2020-07-27T23:08:30Z", "author": {"login": "agavra"}, "path": "docs/how-to-guides/control-the-case-of-identifiers.md", "diffHunk": "@@ -0,0 +1,134 @@\n+# How to control the case of identifiers\n+\n+## Context\n+\n+You have identifiers, like row names, that will be used outside of\n+ksqlDB. You want to control the exact casing (capitalization) of how\n+they are represented to make them consumable by downstream\n+programs. Because ksqlDB uppercases all identifiers by default, you\n+need to use backticks to preserve the desired casing.\n+\n+## In action\n+\n+```sql\n+CREATE STREAM `s1` (\n+    `foo` VARCHAR KEY,\n+    `BAR` INT,\n+    `Baz` VARCHAR\n+) WITH (\n+    kafka_topic = 's1',\n+    partitions = 1,\n+    value_format = 'avro'\n+);\n+```\n+\n+## Backticks\n+\n+Begin by telling ksqlDB to start all queries from the earliest point\n+in each topic.\n+\n+```sql\n+SET 'auto.offset.reset' = 'earliest';\n+```\n+\n+Declare a new stream named `s2`. In this example, you override\n+ksqlDB's default behavior to uppercase all identifiers. Use backticks\n+to control the casing of the stream name and column names. To contrast\n+this behavior, `quz` is declared without backticks to demonstrate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "612b51ba08b7c5be57fb4a8dabb3af8803052b67"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyMTQ3OQ==", "bodyText": "out of interest, where did you come up with these? \ud83d\ude02", "url": "https://github.com/confluentinc/ksql/pull/5886#discussion_r461221479", "createdAt": "2020-07-27T23:09:37Z", "author": {"login": "agavra"}, "path": "docs/how-to-guides/control-the-case-of-identifiers.md", "diffHunk": "@@ -0,0 +1,134 @@\n+# How to control the case of identifiers\n+\n+## Context\n+\n+You have identifiers, like row names, that will be used outside of\n+ksqlDB. You want to control the exact casing (capitalization) of how\n+they are represented to make them consumable by downstream\n+programs. Because ksqlDB uppercases all identifiers by default, you\n+need to use backticks to preserve the desired casing.\n+\n+## In action\n+\n+```sql\n+CREATE STREAM `s1` (\n+    `foo` VARCHAR KEY,\n+    `BAR` INT,\n+    `Baz` VARCHAR\n+) WITH (\n+    kafka_topic = 's1',\n+    partitions = 1,\n+    value_format = 'avro'\n+);\n+```\n+\n+## Backticks\n+\n+Begin by telling ksqlDB to start all queries from the earliest point\n+in each topic.\n+\n+```sql\n+SET 'auto.offset.reset' = 'earliest';\n+```\n+\n+Declare a new stream named `s2`. In this example, you override\n+ksqlDB's default behavior to uppercase all identifiers. Use backticks\n+to control the casing of the stream name and column names. To contrast\n+this behavior, `quz` is declared without backticks to demonstrate\n+the default behavior of uppercasing.\n+\n+```sql\n+CREATE STREAM `s2` (\n+    `foo` VARCHAR KEY,\n+    `BAR` INT,\n+    `Baz` VARCHAR,\n+    `grault` STRUCT<\n+        `Corge` VARCHAR,\n+        `garply` INT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "612b51ba08b7c5be57fb4a8dabb3af8803052b67"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d3518b54bbde991ece870b7c9886bcca40a7965", "author": {"user": {"login": "MichaelDrogalis", "name": "Michael Drogalis"}}, "url": "https://github.com/confluentinc/ksql/commit/7d3518b54bbde991ece870b7c9886bcca40a7965", "committedDate": "2020-07-28T15:41:18Z", "message": "Update docs/how-to-guides/control-the-case-of-identifiers.md\n\nCo-authored-by: Almog Gavra <almog@confluent.io>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4763, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}