{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMjk0Nzgx", "number": 6523, "reviewThreads": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1NToyOFrOEyFXvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyODo0OFrOEyGDkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTUyMjU0OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1NToyOFrOHoiAng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1NToyOFrOHoiAng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MjMwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ---------------------------------------------------------\n          \n          \n            \n            ---", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512262302", "createdAt": "2020-10-26T20:55:28Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTUyNzAwOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1NjozN1rOHoiDPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1NjozN1rOHoiDPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2Mjk3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n          \n          \n            \n            Valid variable names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512262972", "createdAt": "2020-10-26T20:56:37Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTUyOTM2OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1NzoyM1rOHoiEyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1NzoyM1rOHoiEyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2MzM3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            There are no type definition for values.  All variables values must be wrapped into single-quotes.\n          \n          \n            \n            There is no type declaration for a value.  All variable values must be enclosed into single-quotes.", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512263371", "createdAt": "2020-10-26T20:57:23Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTUzNDQxOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1OTowMlrOHoiIEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1OTowMlrOHoiIEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NDIxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Example:\n          \n          \n            \n            The following DEFINE statements show example assignments to variable values.", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512264211", "createdAt": "2020-10-26T20:59:02Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTUzNjc4OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1OTo0M1rOHoiJiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMDo1OTo0M1rOHoiJiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NDU4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n          \n          \n            \n            Single-quotes are removed during variable substitution. To escape single-quotes, enclose the value with triple-quotes.", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512264584", "createdAt": "2020-10-26T20:59:43Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU1MjEyOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNDowMVrOHoiStQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNDowMVrOHoiStQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NjkzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Example:\n          \n          \n            \n            The following DEFINE statement shows an example variable assignment that embeds single quotes in the value.", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512266933", "createdAt": "2020-10-26T21:04:01Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU1MzAwOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNDoxNFrOHoiTNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNDoxNFrOHoiTNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NzA2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Deleting variables\n          \n          \n            \n            Delete variables", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512267063", "createdAt": "2020-10-26T21:04:14Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU1NDQyOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNDozN1rOHoiUBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNDozN1rOHoiUBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NzI2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ------------------\n          \n          \n            \n            ----------------", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512267268", "createdAt": "2020-10-26T21:04:37Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU1NjcxOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNToxNlrOHoiVdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNToxNlrOHoiVdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NzYzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can delete defined variables with the `UNDEFINE` syntax.\n          \n          \n            \n            Delete defined variables by using the `UNDEFINE` statement.", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512267636", "createdAt": "2020-10-26T21:05:16Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU1NzI5OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNToyOVrOHoiV0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNToyOVrOHoiV0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NzcyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Printing variables\n          \n          \n            \n            Print variables", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512267729", "createdAt": "2020-10-26T21:05:29Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU1Nzg3OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNTo0MFrOHoiWKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNTo0MFrOHoiWKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2NzgxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ------------------\n          \n          \n            \n            ---------------", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512267819", "createdAt": "2020-10-26T21:05:40Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU2MjM0OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNjo1NlrOHoiY3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNjo1NlrOHoiY3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2ODUwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Example:\n          \n          \n            \n            The following example shows how to assign and print variable values.", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512268508", "createdAt": "2020-10-26T21:06:56Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU2MzUxOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNzoxM1rOHoiZhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNzoxM1rOHoiZhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2ODY3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Referencing substitution variables\n          \n          \n            \n            Reference substitution variables", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512268678", "createdAt": "2020-10-26T21:07:13Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU2NDExOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNzoyNFrOHoiZ4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowNzoyNFrOHoiZ4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2ODc3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ----------------------------------\n          \n          \n            \n            --------------------------------", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512268770", "createdAt": "2020-10-26T21:07:24Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU2NjY1OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowODoxNlrOHoibdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowODoxNlrOHoibdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2OTE3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n          \n          \n            \n            Reference a variable by enclosing the variable name between `${}` characters, for example, `${replicas}`.", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512269173", "createdAt": "2020-10-26T21:08:16Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU2OTI5OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowOTowMlrOHoidDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTowOTowMlrOHoidDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI2OTU4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Example:\n          \n          \n            \n            The following example shows how to assign and reference variable values.", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512269582", "createdAt": "2020-10-26T21:09:02Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU3NTQ3OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxMDo0MVrOHoiguQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxMDo0MVrOHoiguQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3MDUyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n          \n          \n            \n            ksqlDB doesn't add single-quotes to values during variable substitution. Also, you must know the data type of a variable to use it.", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512270521", "createdAt": "2020-10-26T21:10:41Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU3NzY3OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxMToxMVrOHoiiCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxMToxMVrOHoiiCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3MDg1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n          \n          \n            \n            !!! note\n          \n          \n            \n                Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512270856", "createdAt": "2020-10-26T21:11:11Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU4MDIyOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxMTo1N1rOHoijow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxMTo1N1rOHoijow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3MTI2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n          \n          \n            \n            Variable substitution is allowed in specific SQL statements. You can replace text and non-text literals, and identifiers like", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512271267", "createdAt": "2020-10-26T21:11:57Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTU4MTY4OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxMjoyMVrOHoikdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToxMjoyMVrOHoikdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3MTQ3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            column names and stream/table names. Variables cannot be used as reserved keywords.\n          \n          \n            \n            column names and stream/table names. You can't use variables as reserved keywords.", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512271478", "createdAt": "2020-10-26T21:12:21Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTYwNzM5OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyMDowOFrOHoiz_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyMDowOFrOHoiz_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3NTQ1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For instance:\n          \n          \n            \n            The following statements show examples of using variables for stream and column names, and in other places.", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512275454", "createdAt": "2020-10-26T21:20:08Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTYxMjE2OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyMTozOVrOHoi3AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyMTozOVrOHoi3AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3NjIyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Any attempt of using variables on non-permitted places will fail with the current SQL parsing error found when parsing the variable string.\n          \n          \n            \n            Using a variable in a statement that doesn't support variables causes a SQL parsing error.", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512276224", "createdAt": "2020-10-26T21:21:39Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n+      WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);\n+      \n+ksql> INSERT INTO ${streamName} (${colName1}, ${colName2}) \\\n+      VALUES (${val1}, '${val2}');\n+\n+ksql> SELECT * FROM ${streamName} \\\n+      WHERE ${colName1} == ${val1} and ${colName2} == '${val2}' EMIT CHANGES; \n+```\n+\n+Any attempt of using variables on non-permitted places will fail with the current SQL parsing error found when parsing the variable string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTYxNTU5OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyMjo0NlrOHoi5RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyMjo0NlrOHoi5RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3NjgwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Enable/disable substitution variables\n          \n          \n            \n            Enable or disable substitution variables", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512276804", "createdAt": "2020-10-26T21:22:46Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n+      WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);\n+      \n+ksql> INSERT INTO ${streamName} (${colName1}, ${colName2}) \\\n+      VALUES (${val1}, '${val2}');\n+\n+ksql> SELECT * FROM ${streamName} \\\n+      WHERE ${colName1} == ${val1} and ${colName2} == '${val2}' EMIT CHANGES; \n+```\n+\n+Any attempt of using variables on non-permitted places will fail with the current SQL parsing error found when parsing the variable string.\n+\n+Enable/disable substitution variables", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTYxNjI1OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyMjo1OFrOHoi5sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyMjo1OFrOHoi5sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3NjkxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            -------------------------------------\n          \n          \n            \n            ----------------------------------------", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512276912", "createdAt": "2020-10-26T21:22:58Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n+      WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);\n+      \n+ksql> INSERT INTO ${streamName} (${colName1}, ${colName2}) \\\n+      VALUES (${val1}, '${val2}');\n+\n+ksql> SELECT * FROM ${streamName} \\\n+      WHERE ${colName1} == ${val1} and ${colName2} == '${val2}' EMIT CHANGES; \n+```\n+\n+Any attempt of using variables on non-permitted places will fail with the current SQL parsing error found when parsing the variable string.\n+\n+Enable/disable substitution variables\n+-------------------------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTYyMTgxOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyNDozN1rOHoi9CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyNDozN1rOHoi9CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3Nzc2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `ksql.variable.substitution.enable` config will be used to enable/disable this feature. The config can be enabled from\n          \n          \n            \n            Enable or disable variable substitution by setting the `ksql.variable.substitution.enable` config. You can set this config in", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512277769", "createdAt": "2020-10-26T21:24:37Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n+      WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);\n+      \n+ksql> INSERT INTO ${streamName} (${colName1}, ${colName2}) \\\n+      VALUES (${val1}, '${val2}');\n+\n+ksql> SELECT * FROM ${streamName} \\\n+      WHERE ${colName1} == ${val1} and ${colName2} == '${val2}' EMIT CHANGES; \n+```\n+\n+Any attempt of using variables on non-permitted places will fail with the current SQL parsing error found when parsing the variable string.\n+\n+Enable/disable substitution variables\n+-------------------------------------\n+\n+The `ksql.variable.substitution.enable` config will be used to enable/disable this feature. The config can be enabled from", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTYyNTcxOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyNTo1MFrOHoi_eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyNTo1MFrOHoi_eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3ODM5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            the server-side configuration (ksql-server.properties), or it can be overriden by the users in the CLI or HTTP requests.\n          \n          \n            \n            the server-side configuration file (`ksql-server.properties`), or you can set it in CLI and HTTP requests.", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512278392", "createdAt": "2020-10-26T21:25:50Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n+      WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);\n+      \n+ksql> INSERT INTO ${streamName} (${colName1}, ${colName2}) \\\n+      VALUES (${val1}, '${val2}');\n+\n+ksql> SELECT * FROM ${streamName} \\\n+      WHERE ${colName1} == ${val1} and ${colName2} == '${val2}' EMIT CHANGES; \n+```\n+\n+Any attempt of using variables on non-permitted places will fail with the current SQL parsing error found when parsing the variable string.\n+\n+Enable/disable substitution variables\n+-------------------------------------\n+\n+The `ksql.variable.substitution.enable` config will be used to enable/disable this feature. The config can be enabled from\n+the server-side configuration (ksql-server.properties), or it can be overriden by the users in the CLI or HTTP requests.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTYyNzgyOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyNjozM1rOHojA3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyNjozM1rOHojA3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3ODc1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n          \n          \n            \n            CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512278750", "createdAt": "2020-10-26T21:26:33Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTYyODk3OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyNjo1M1rOHojBkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyNjo1M1rOHojBkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3ODkzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);\n          \n          \n            \n            WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512278930", "createdAt": "2020-10-26T21:26:53Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n+      WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTYyOTY1OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyNzowNlrOHojCAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyNzowNlrOHojCAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3OTA0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ksql> INSERT INTO ${streamName} (${colName1}, ${colName2}) \\\n          \n          \n            \n            INSERT INTO ${streamName} (${colName1}, ${colName2}) \\", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512279043", "createdAt": "2020-10-26T21:27:06Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n+      WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);\n+      \n+ksql> INSERT INTO ${streamName} (${colName1}, ${colName2}) \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTYzMDMwOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyNzoyMFrOHojCaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyNzoyMFrOHojCaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3OTE0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  VALUES (${val1}, '${val2}');\n          \n          \n            \n            VALUES (${val1}, '${val2}');", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512279147", "createdAt": "2020-10-26T21:27:20Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n+      WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);\n+      \n+ksql> INSERT INTO ${streamName} (${colName1}, ${colName2}) \\\n+      VALUES (${val1}, '${val2}');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTYzMDg3OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyNzozM1rOHojCzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyNzozM1rOHojCzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3OTI0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ksql> SELECT * FROM ${streamName} \\\n          \n          \n            \n            SELECT * FROM ${streamName} \\", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512279245", "createdAt": "2020-10-26T21:27:33Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n+      WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);\n+      \n+ksql> INSERT INTO ${streamName} (${colName1}, ${colName2}) \\\n+      VALUES (${val1}, '${val2}');\n+\n+ksql> SELECT * FROM ${streamName} \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTYzMTUwOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyNzo0N1rOHojDLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyNzo0N1rOHojDLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3OTM0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  WHERE ${colName1} == ${val1} and ${colName2} == '${val2}' EMIT CHANGES; \n          \n          \n            \n            WHERE ${colName1} == ${val1} and ${colName2} == '${val2}' EMIT CHANGES;", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512279340", "createdAt": "2020-10-26T21:27:47Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n+```\n+\n+Substitution will not attempt to add single-quotes to the values. You need to know the data type to use when using a variable.\n+\n+Note: Variables are case-insensitive. A reference to `${replicas}` is the same as `${REPLICAS}`.\n+\n+Context for substitution variables\n+----------------------------------\n+\n+Variable substitution are allowed in specific SQL statements. They can be used to replace text and non-text literals, and identifiers such as\n+column names and stream/table names. Variables cannot be used as reserved keywords.\n+\n+For instance:\n+\n+```\n+ksql> CREATE STREAM ${streamName} (${colName1} INT, ${colName2} STRING) \\\n+      WITH (kafka_topic='${topicName}', format='${format}', replicas=${replicas}, ...);\n+      \n+ksql> INSERT INTO ${streamName} (${colName1}, ${colName2}) \\\n+      VALUES (${val1}, '${val2}');\n+\n+ksql> SELECT * FROM ${streamName} \\\n+      WHERE ${colName1} == ${val1} and ${colName2} == '${val2}' EMIT CHANGES; ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTYzMzExOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyODoyMlrOHojEQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMTozMToyMFrOHojKRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3OTYxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ksql> DEFINE format = 'AVRO';\n          \n          \n            \n            DEFINE format = 'AVRO';", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512279616", "createdAt": "2020-10-26T21:28:22Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI4MTE1OA==", "bodyText": "Usually, we don't include command prompts in example commands, to enable easy copy-paste from the page. But if there's example output, like you have in the previous example, we'll include the command prompts, for clarity.", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512281158", "createdAt": "2020-10-26T21:31:20Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3OTYxNg=="}, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTYzMzgyOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyODozNFrOHojEqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyODozNFrOHojEqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3OTcyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ksql> DEFINE replicas = '3';\n          \n          \n            \n            DEFINE replicas = '3';", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512279721", "createdAt": "2020-10-26T21:28:34Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTYzNDc0OnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/variable-substitution.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyODo0OFrOHojFLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQyMToyODo0OFrOHojFLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjI3OTg1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});\n          \n          \n            \n            CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});", "url": "https://github.com/confluentinc/ksql/pull/6523#discussion_r512279852", "createdAt": "2020-10-26T21:28:48Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/variable-substitution.md", "diffHunk": "@@ -0,0 +1,119 @@\n+---\n+layout: page\n+title: ksqlDB Variable Substitution\n+tagline: Use variables in SQL statements\n+description: Learn how to use variables in SQL statements\n+---------------------------------------------------------\n+\n+Define variables\n+----------------\n+\n+Syntax:\n+```\n+DEFINE <name> = '<value>';\n+\n+Where: \n+  <name>     is the variable name\n+  <value>    is the variable value\n+```\n+\n+Valid variables names start with a letter or underscore (\\_) followed by zero or more alphanumeric characters or underscores (_).\n+\n+There are no type definition for values.  All variables values must be wrapped into single-quotes.\n+\n+Example:\n+```\n+DEFINE replicas = '3';\n+DEFINE format = 'JSON';\n+DEFINE name = 'Tom Sawyer';\n+```\n+\n+Single-quotes are removed during variable substitution. If you need to escape single-quotes, then wrap the value with triple-quotes.\n+\n+Example:\n+```\n+# becomes 'my_topic'\n+DEFINE topicName = '''my_topic''';      \n+```\n+\n+Deleting variables\n+------------------\n+\n+Syntax:\n+```\n+UNDEFINE name;\n+```\n+\n+You can delete defined variables with the `UNDEFINE` syntax.\n+\n+Printing variables\n+------------------\n+\n+Syntax:\n+```\n+SHOW VARIABLES;\n+```\n+\n+Example:\n+```\n+ksql> DEFINE replicas = '3';\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE topicName = '''my_topic''';\n+ksql> SHOW VARIABLES;\n+\n+ Variable Name | Value      \n+----------------------------\n+ replicas      | 3\n+ format        | AVRO         \n+ topicName     | 'my_topic' \n+----------------------------\n+```\n+\n+Referencing substitution variables\n+----------------------------------\n+\n+Variables are referenced by wrapping the variable name between `${}` characters (i.e. `${replicas}`).\n+\n+Example:\n+```\n+ksql> DEFINE format = 'AVRO';\n+ksql> DEFINE replicas = '3';\n+ksql> CREATE STREAM stream1 (id INT) WITH (kafka_topic='stream1', value_format='${format}', replicas=${replicas});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f32187dc5b6fdc0a2b6952765f7344b1f0914af"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2577, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}