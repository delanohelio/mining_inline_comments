{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NDM4MTgy", "number": 5911, "title": "test: fix JoinIntTest by changing generated timestamp for table source", "bodyText": "Description\nThere's some weird behavior going on in the JoinIntTest, but I'm fixing it here to unblock the master branch for now.\nEssentially we have a stream of events that are produced using a timestamp extractor that extracts timestamps equal to the offset within the stream. Since there are 8 events in the stream, the max timestamp is 8L and the first timestamp is 1L. The raw time on these events (without the extractor) is System.currentTimeInMillis() There is also a table that is produced with System.currentTimeInMillis() - 500 to ensure that the join events show up \"before\" the stream events. The problem is that when the timestamp extractor is applied, the table events are no longer \"before\" the stream events.\nThe weird part, is that it works if we set the timestamp to anything less than 9L - meaning that if my stream event has timestamp 1L it can join with a table entry that has timestamp 8L only if there exists an event in the stream that has a timestamp greater than or equal to 8L.\nAnyway, until we figure that out, this fixes master.\nPS I'm also removing the deprecated suppression and replacing them with other configs.\nTesting done\nTest only change\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-07-30T17:39:57Z", "url": "https://github.com/confluentinc/ksql/pull/5911", "merged": true, "mergeCommit": {"oid": "8001a9a6b9a1d142bebd484f5555ab8f774c7264"}, "closed": true, "closedAt": "2020-07-30T18:59:55Z", "author": {"login": "agavra"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6DLj9AH2gAyNDU5NDM4MTgyOjA5NGY3NTFkMzcxOWIxYzJiY2QyYjBlZDM3NzliYTY0MmI0ZTZkYjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc6DjgLgFqTQ1ODYzNTAzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "094f751d3719b1c2bcd2b0ed3779ba642b4e6db3", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/094f751d3719b1c2bcd2b0ed3779ba642b4e6db3", "committedDate": "2020-07-30T17:36:02Z", "message": "test: fix JoinIntTest by changing generated timestamp for table source"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NjI2MDE0", "url": "https://github.com/confluentinc/ksql/pull/5911#pullrequestreview-458626014", "createdAt": "2020-07-30T17:49:46Z", "commit": {"oid": "094f751d3719b1c2bcd2b0ed3779ba642b4e6db3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzo0OTo0NlrOG5tkkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNzo0OTo0NlrOG5tkkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2ODY1Ng==", "bodyText": "Judging by your description, any stream event with timestamp greater than 0 shouldn't be able to join with this, right?\nAre you assuming that once you address the other bug, this should fail?  (That would validate the assertion that the join shouldn't happen with this timestamp)", "url": "https://github.com/confluentinc/ksql/pull/5911#discussion_r463168656", "createdAt": "2020-07-30T17:49:46Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/integration/JoinIntTest.java", "diffHunk": "@@ -82,8 +85,10 @@ public void before() {\n     TEST_HARNESS.ensureTopics(itemTableTopicJson, itemTableTopicAvro,\n         orderStreamTopicJson, orderStreamTopicAvro);\n \n-    TEST_HARNESS.produceRows(itemTableTopicJson, ITEM_DATA_PROVIDER, JSON, () -> now - 500);\n-    TEST_HARNESS.produceRows(itemTableTopicAvro, ITEM_DATA_PROVIDER, AVRO, () -> now - 500);\n+    // we want the table events to always be present (less than the ts in the stream\n+    // including the time extractor)\n+    TEST_HARNESS.produceRows(itemTableTopicJson, ITEM_DATA_PROVIDER, JSON, () -> 0L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "094f751d3719b1c2bcd2b0ed3779ba642b4e6db3"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NjM1MDM3", "url": "https://github.com/confluentinc/ksql/pull/5911#pullrequestreview-458635037", "createdAt": "2020-07-30T18:02:07Z", "commit": {"oid": "094f751d3719b1c2bcd2b0ed3779ba642b4e6db3"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODowMjowOFrOG5uBNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxODowMjowOFrOG5uBNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE3NTk4OQ==", "bodyText": "You're right, I got that backward.\nThe other bug I was referring to was this:\n\nThe weird part, is that it works if we set the timestamp to anything less than 9L - meaning that if my stream event has timestamp 1L it can join with a table entry that has timestamp 8L only if there exists an event in the stream that has a timestamp greater than or equal to 8L.\n\nI was mainly pointing out that if this was a bug, it might make sense to set a value that should not work (but does!), so that if this is uncovered in the future, the test will break.  Or maybe that should be its own test.\nJust a thought.", "url": "https://github.com/confluentinc/ksql/pull/5911#discussion_r463175989", "createdAt": "2020-07-30T18:02:08Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/integration/JoinIntTest.java", "diffHunk": "@@ -82,8 +85,10 @@ public void before() {\n     TEST_HARNESS.ensureTopics(itemTableTopicJson, itemTableTopicAvro,\n         orderStreamTopicJson, orderStreamTopicAvro);\n \n-    TEST_HARNESS.produceRows(itemTableTopicJson, ITEM_DATA_PROVIDER, JSON, () -> now - 500);\n-    TEST_HARNESS.produceRows(itemTableTopicAvro, ITEM_DATA_PROVIDER, AVRO, () -> now - 500);\n+    // we want the table events to always be present (less than the ts in the stream\n+    // including the time extractor)\n+    TEST_HARNESS.produceRows(itemTableTopicJson, ITEM_DATA_PROVIDER, JSON, () -> 0L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzE2ODY1Ng=="}, "originalCommit": {"oid": "094f751d3719b1c2bcd2b0ed3779ba642b4e6db3"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4771, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}