{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAyOTY5Mzky", "number": 6432, "title": "chore: qtt coverage for avro primitive keys", "bodyText": "Description\nAdds coverage for AVRO in QTT tests. In order to support decimal (and in future when we want to compare structs) I needed to change the test framework to compare the JsonNode instead of the java-ified value, piggy-backing on the existing value comparison framework.\nTesting done\nRan the QTT tests :)\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-10-13T23:19:31Z", "url": "https://github.com/confluentinc/ksql/pull/6432", "merged": true, "mergeCommit": {"oid": "98800388d5229c0130b0ded5b7e9a7566949d0a2"}, "closed": true, "closedAt": "2020-10-15T18:23:27Z", "author": {"login": "agavra"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSqPaPgFqTUwODkzMTE5NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSzzSZgBqjM4ODIzMjg4MzM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4OTMxMTk1", "url": "https://github.com/confluentinc/ksql/pull/6432#pullrequestreview-508931195", "createdAt": "2020-10-15T04:38:47Z", "commit": {"oid": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2"}, "state": "APPROVED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNDozODo0N1rOHhwebA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwNDo0MDoyNVrOHhwf_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTI3Ng==", "bodyText": "Is there a purpose to including this value schema here, given that the test does not use value inference? If we want to test that this value schema is ignored in favor of the schema that's explicitly supplied in the statement, we should update this schema to be different. If not, can we remove this in order to clean up the tests?\nOr does the QTT framework require that it's present for Avro types, even if the schema inference isn't used...?", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505159276", "createdAt": "2020-10-15T04:38:47Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/avro.json", "diffHunk": "@@ -667,6 +667,33 @@\n         {\"topic\": \"OUTPUT\", \"value\": null}\n       ]\n     },\n+    {\n+      \"name\": \"BOOLEAN - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"boolean\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTM4Ng==", "bodyText": "Same question about whether this key schema needs to be provided, given that there is no key inference in this test.", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505159386", "createdAt": "2020-10-15T04:39:14Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/avro.json", "diffHunk": "@@ -696,6 +723,340 @@\n         {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n       ]\n     },\n+    {\n+      \"name\": \"INT - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"int\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 10, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": 12, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 10, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": 12, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"BIGINT - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K BIGINT KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"long\"},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTQ1Mg==", "bodyText": "nit: unused import.", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505159452", "createdAt": "2020-10-15T04:39:28Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/tools/RecordTest.java", "diffHunk": "@@ -19,6 +19,7 @@\n import static org.hamcrest.CoreMatchers.instanceOf;\n import static org.hamcrest.MatcherAssert.assertThat;\n \n+import com.fasterxml.jackson.databind.node.JsonNodeFactory;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTQ2NQ==", "bodyText": "Is this different from TextNode.valueOf(\"k1\")? Curious about the inconsistency between the key and value nodes.", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505159465", "createdAt": "2020-10-15T04:39:31Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/tools/TestExecutorTest.java", "diffHunk": "@@ -414,9 +415,9 @@ public void shouldPassOnExpectedOutput() {\n     final ProducerRecord<byte[], byte[]> rec1 = producerRecord(sinkTopic, 123456789L, \"k2\", \"v2\");\n     when(kafkaService.readRecords(SINK_TOPIC_NAME)).thenReturn(ImmutableList.of(rec0, rec1));\n \n-    final Record expected_0 = new Record(SINK_TOPIC_NAME, \"k1\", \"v1\", TextNode.valueOf(\"v1\"),\n+    final Record expected_0 = new Record(SINK_TOPIC_NAME, \"k1\", JsonNodeFactory.instance.textNode(\"k1\"), \"v1\", TextNode.valueOf(\"v1\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTE1OTY3OQ==", "bodyText": "Whoops, this should be renamed to ROWKEY with the change in #6436. You should merge first and I'll update the test in my PR accordingly :)", "url": "https://github.com/confluentinc/ksql/pull/6432#discussion_r505159679", "createdAt": "2020-10-15T04:40:25Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/avro.json", "diffHunk": "@@ -696,6 +723,340 @@\n         {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n       ]\n     },\n+    {\n+      \"name\": \"INT - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"int\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 10, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": 12, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 10, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": 12, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"BIGINT - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K BIGINT KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"long\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 998877665544332211, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 998877665544332211, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"BIGINT - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"long\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 998877665544332211, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 998877665544332211, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"DOUBLE - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K DOUBLE KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"double\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 654.321, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 654.321, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"DOUBLE - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"double\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 654.321, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 654.321, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"STRING - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K VARCHAR KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"string\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"foo\", \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"foo\", \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"STRING - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\"type\": \"string\"},\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": \"foo\", \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": \"foo\", \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"DECIMAL - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K DECIMAL(4,2) KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\n+            \"type\": \"bytes\",\n+            \"logicalType\": \"decimal\",\n+            \"precision\": 4,\n+            \"scale\": 2\n+          },\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 65.21, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 65.21, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"DECIMAL - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\",\n+        \"CREATE STREAM OUTPUT AS SELECT * FROM INPUT;\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\n+            \"type\": \"bytes\",\n+            \"logicalType\": \"decimal\",\n+            \"precision\": 4,\n+            \"scale\": 2\n+          },\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"inputs\": [\n+        {\"topic\": \"input_topic\", \"key\": 65.21, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"input_topic\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ],\n+      \"outputs\": [\n+        {\"topic\": \"OUTPUT\", \"key\": 65.21, \"value\": {\"FOO\": 10}},\n+        {\"topic\": \"OUTPUT\", \"key\": null, \"value\": {\"FOO\": 10}}\n+      ]\n+    },\n+    {\n+      \"name\": \"ARRAY - key - no inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (K ARRAY<VARCHAR> KEY, foo INT) WITH (kafka_topic='input_topic', format='AVRO');\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\n+            \"type\": \"array\",\n+            \"items\": \"string\"\n+          },\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n+        \"message\": \"Unsupported key schema: [`K` ARRAY<STRING> KEY]\"\n+      }\n+    },\n+    {\n+      \"name\": \"ARRAY - key - inference\",\n+      \"properties\": {\n+        \"ksql.key.format.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE STREAM INPUT (foo INT) WITH (kafka_topic='input_topic', format='AVRO');\"\n+      ],\n+      \"topics\": [\n+        {\n+          \"name\": \"input_topic\",\n+          \"keySchema\": {\n+            \"type\": \"array\",\n+            \"items\": \"string\"\n+          },\n+          \"keyFormat\": \"AVRO\",\n+          \"valueSchema\": {\"name\": \"ignored\", \"type\": \"record\", \"fields\": [{\"name\": \"FOO\", \"type\": \"int\"}]},\n+          \"valueFormat\": \"AVRO\"\n+        }\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlStatementException\",\n+        \"message\": \"Unsupported key schema: [`ROWVAL` ARRAY<STRING> KEY]\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2"}, "originalPosition": 340}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b82a62d65400c9fc3f2c57ac8e0052d2d3d438c", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/0b82a62d65400c9fc3f2c57ac8e0052d2d3d438c", "committedDate": "2020-10-15T15:44:55Z", "message": "chore: qtt coverage for avro primitive keys"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f0b10acd678fa017d1c86f974ca94852161b151", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/3f0b10acd678fa017d1c86f974ca94852161b151", "committedDate": "2020-10-15T15:44:55Z", "message": "chore: fix checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f70f6b70fbc64d64af59cc0f2aa4504a7558f381", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/f70f6b70fbc64d64af59cc0f2aa4504a7558f381", "committedDate": "2020-10-15T15:44:55Z", "message": "test: fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eca777c1544c2a2fbb254d58b2e742f154236202", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/eca777c1544c2a2fbb254d58b2e742f154236202", "committedDate": "2020-10-15T15:48:55Z", "message": "chore: address pr comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c045e7d5617311a8a400ae3af94f2e8b1dfd55d2", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/c045e7d5617311a8a400ae3af94f2e8b1dfd55d2", "committedDate": "2020-10-14T03:41:58Z", "message": "test: fix tests"}, "afterCommit": {"oid": "eca777c1544c2a2fbb254d58b2e742f154236202", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/eca777c1544c2a2fbb254d58b2e742f154236202", "committedDate": "2020-10-15T15:48:55Z", "message": "chore: address pr comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4630, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}