{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NTQyOTk0", "number": 5516, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMTo1ODoyM1rOEBLRuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzoyNTo0MVrOEDjSRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjY4NzkyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/FileWatcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMTo1ODoyM1rOGc4iNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMTo1OToyOFrOGc4ihA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkzOTU3NQ==", "bodyText": "As a general design principle best not to rely on statics as they pollute the global namespace.", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r432939575", "createdAt": "2020-05-31T11:58:23Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/FileWatcher.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardWatchEventKinds;\n+import java.nio.file.WatchEvent;\n+import java.nio.file.WatchKey;\n+import java.nio.file.WatchService;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// reference:\n+// https://gist.github.com/danielflower/f54c2fe42d32356301c68860a4ab21ed\n+// https://github.com/confluentinc/rest-utils/blob/master/core/src/main/java/io/confluent/rest/FileWatcher.java\n+public class FileWatcher implements Runnable {\n+\n+  private static final Logger log = LoggerFactory.getLogger(FileWatcher.class);\n+  private static final ExecutorService executor = Executors.newFixedThreadPool(1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ffaf29d8bac086c29b2352412ae422cc0745836"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkzOTY1Mg==", "bodyText": "Also you probably don't need a custom executor at all - you can use a Vert.x worker thread for this.", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r432939652", "createdAt": "2020-05-31T11:59:28Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/FileWatcher.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardWatchEventKinds;\n+import java.nio.file.WatchEvent;\n+import java.nio.file.WatchKey;\n+import java.nio.file.WatchService;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ThreadFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// reference:\n+// https://gist.github.com/danielflower/f54c2fe42d32356301c68860a4ab21ed\n+// https://github.com/confluentinc/rest-utils/blob/master/core/src/main/java/io/confluent/rest/FileWatcher.java\n+public class FileWatcher implements Runnable {\n+\n+  private static final Logger log = LoggerFactory.getLogger(FileWatcher.class);\n+  private static final ExecutorService executor = Executors.newFixedThreadPool(1,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkzOTU3NQ=="}, "originalCommit": {"oid": "0ffaf29d8bac086c29b2352412ae422cc0745836"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjY4OTg5OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMjowMTo1NlrOGc4jWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxODo0MDozNlrOGdVu7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkzOTg2Ng==", "bodyText": "I think this is more complex than it needs to be. Instead of individually starting and stopping each http server in each ServerVerticle I think it would be simpler just to add a restart() method to Server which simply stopped the Server and started it again, e.g.:\npublic void restart() {\n  stop();\n  start();\n}\n\nI haven't tried this, but seems like it should work (?)", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r432939866", "createdAt": "2020-05-31T12:01:56Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -324,4 +345,28 @@ private static HttpServerOptions createHttpServerOptions(final KsqlRestConfig ks\n     return listeners;\n   }\n \n+  private static void configureTlsCertReload(\n+      final KsqlRestConfig config,\n+      final Set<ServerVerticle> serverVerticles\n+  ) {\n+    if (config.getBoolean(KsqlRestConfig.SSL_KEYSTORE_RELOAD_CONFIG)) {\n+      final Path watchLocation;\n+      if (!config.getString(KsqlRestConfig.SSL_KEYSTORE_WATCH_LOCATION_CONFIG).isEmpty()) {\n+        watchLocation = Paths.get(\n+            config.getString(KsqlRestConfig.SSL_KEYSTORE_WATCH_LOCATION_CONFIG));\n+      } else {\n+        watchLocation = Paths.get(config.getString(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG));\n+      }\n+\n+      try {\n+        FileWatcher.onFileChange(\n+            watchLocation,\n+            () -> serverVerticles.forEach(ServerVerticle::restartServer)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ffaf29d8bac086c29b2352412ae422cc0745836"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNzE4Mw==", "bodyText": "This does not work. (I had this initially.) As explained in the PR description:\n\nIt's necessary to recreate rather than simply restart the servers because Vert.x only loads TLS certs at the time that the KeyStoreHelper is created, which is only when servers are created.", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r433017183", "createdAt": "2020-06-01T02:25:06Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -324,4 +345,28 @@ private static HttpServerOptions createHttpServerOptions(final KsqlRestConfig ks\n     return listeners;\n   }\n \n+  private static void configureTlsCertReload(\n+      final KsqlRestConfig config,\n+      final Set<ServerVerticle> serverVerticles\n+  ) {\n+    if (config.getBoolean(KsqlRestConfig.SSL_KEYSTORE_RELOAD_CONFIG)) {\n+      final Path watchLocation;\n+      if (!config.getString(KsqlRestConfig.SSL_KEYSTORE_WATCH_LOCATION_CONFIG).isEmpty()) {\n+        watchLocation = Paths.get(\n+            config.getString(KsqlRestConfig.SSL_KEYSTORE_WATCH_LOCATION_CONFIG));\n+      } else {\n+        watchLocation = Paths.get(config.getString(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG));\n+      }\n+\n+      try {\n+        FileWatcher.onFileChange(\n+            watchLocation,\n+            () -> serverVerticles.forEach(ServerVerticle::restartServer)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkzOTg2Ng=="}, "originalCommit": {"oid": "0ffaf29d8bac086c29b2352412ae422cc0745836"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzEzMTU2NQ==", "bodyText": "I'm referring to Server.start/stop not ServerVerticle.start/stop.\nIf you do that, it will take care of creating new Http Servers for you, no?", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r433131565", "createdAt": "2020-06-01T09:25:52Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -324,4 +345,28 @@ private static HttpServerOptions createHttpServerOptions(final KsqlRestConfig ks\n     return listeners;\n   }\n \n+  private static void configureTlsCertReload(\n+      final KsqlRestConfig config,\n+      final Set<ServerVerticle> serverVerticles\n+  ) {\n+    if (config.getBoolean(KsqlRestConfig.SSL_KEYSTORE_RELOAD_CONFIG)) {\n+      final Path watchLocation;\n+      if (!config.getString(KsqlRestConfig.SSL_KEYSTORE_WATCH_LOCATION_CONFIG).isEmpty()) {\n+        watchLocation = Paths.get(\n+            config.getString(KsqlRestConfig.SSL_KEYSTORE_WATCH_LOCATION_CONFIG));\n+      } else {\n+        watchLocation = Paths.get(config.getString(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG));\n+      }\n+\n+      try {\n+        FileWatcher.onFileChange(\n+            watchLocation,\n+            () -> serverVerticles.forEach(ServerVerticle::restartServer)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkzOTg2Ng=="}, "originalCommit": {"oid": "0ffaf29d8bac086c29b2352412ae422cc0745836"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM2Nzg4OA==", "bodyText": "Ah, I understand your suggestion now. We'll still need custom logic to ensure the HTTP servers are restarted with the same ports, in the event that port 0 is specified (as is the case in our tests). It's not clear to me that this is actually simpler.", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r433367888", "createdAt": "2020-06-01T17:05:48Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -324,4 +345,28 @@ private static HttpServerOptions createHttpServerOptions(final KsqlRestConfig ks\n     return listeners;\n   }\n \n+  private static void configureTlsCertReload(\n+      final KsqlRestConfig config,\n+      final Set<ServerVerticle> serverVerticles\n+  ) {\n+    if (config.getBoolean(KsqlRestConfig.SSL_KEYSTORE_RELOAD_CONFIG)) {\n+      final Path watchLocation;\n+      if (!config.getString(KsqlRestConfig.SSL_KEYSTORE_WATCH_LOCATION_CONFIG).isEmpty()) {\n+        watchLocation = Paths.get(\n+            config.getString(KsqlRestConfig.SSL_KEYSTORE_WATCH_LOCATION_CONFIG));\n+      } else {\n+        watchLocation = Paths.get(config.getString(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG));\n+      }\n+\n+      try {\n+        FileWatcher.onFileChange(\n+            watchLocation,\n+            () -> serverVerticles.forEach(ServerVerticle::restartServer)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkzOTg2Ng=="}, "originalCommit": {"oid": "0ffaf29d8bac086c29b2352412ae422cc0745836"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM3MTM5MA==", "bodyText": "Here's a commit where I've made your suggested change: vcrfxia@612b215\nThe new test, TlsTest#shouldReloadCert() fails because the server ports changed during the restart but the client still tries to connect to the old port.\nIf we're OK with the ports changing on restart, we can update the test to recreate the client after the restart.", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r433371390", "createdAt": "2020-06-01T17:12:44Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -324,4 +345,28 @@ private static HttpServerOptions createHttpServerOptions(final KsqlRestConfig ks\n     return listeners;\n   }\n \n+  private static void configureTlsCertReload(\n+      final KsqlRestConfig config,\n+      final Set<ServerVerticle> serverVerticles\n+  ) {\n+    if (config.getBoolean(KsqlRestConfig.SSL_KEYSTORE_RELOAD_CONFIG)) {\n+      final Path watchLocation;\n+      if (!config.getString(KsqlRestConfig.SSL_KEYSTORE_WATCH_LOCATION_CONFIG).isEmpty()) {\n+        watchLocation = Paths.get(\n+            config.getString(KsqlRestConfig.SSL_KEYSTORE_WATCH_LOCATION_CONFIG));\n+      } else {\n+        watchLocation = Paths.get(config.getString(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG));\n+      }\n+\n+      try {\n+        FileWatcher.onFileChange(\n+            watchLocation,\n+            () -> serverVerticles.forEach(ServerVerticle::restartServer)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkzOTg2Ng=="}, "originalCommit": {"oid": "0ffaf29d8bac086c29b2352412ae422cc0745836"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQxNzk2Nw==", "bodyText": "Discussed offline. The only use case for setting port 0 at the moment is in our tests, so we're not going to worry about preserving ports across restarts. As such, I've moved the restart logic from ServerVerticle to Server as suggested, and updated the test to re-create clients in order to use the most up-to-date port.", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r433417967", "createdAt": "2020-06-01T18:40:36Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -324,4 +345,28 @@ private static HttpServerOptions createHttpServerOptions(final KsqlRestConfig ks\n     return listeners;\n   }\n \n+  private static void configureTlsCertReload(\n+      final KsqlRestConfig config,\n+      final Set<ServerVerticle> serverVerticles\n+  ) {\n+    if (config.getBoolean(KsqlRestConfig.SSL_KEYSTORE_RELOAD_CONFIG)) {\n+      final Path watchLocation;\n+      if (!config.getString(KsqlRestConfig.SSL_KEYSTORE_WATCH_LOCATION_CONFIG).isEmpty()) {\n+        watchLocation = Paths.get(\n+            config.getString(KsqlRestConfig.SSL_KEYSTORE_WATCH_LOCATION_CONFIG));\n+      } else {\n+        watchLocation = Paths.get(config.getString(SslConfigs.SSL_KEYSTORE_LOCATION_CONFIG));\n+      }\n+\n+      try {\n+        FileWatcher.onFileChange(\n+            watchLocation,\n+            () -> serverVerticles.forEach(ServerVerticle::restartServer)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkzOTg2Ng=="}, "originalCommit": {"oid": "0ffaf29d8bac086c29b2352412ae422cc0745836"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjY5MDA5OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMjowMjoyOFrOGc4jeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMjoyNTozNlrOGc9Rtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkzOTg5OA==", "bodyText": "As previous comment, seems overcomplex - just stopped and starting the Server should do the trick?", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r432939898", "createdAt": "2020-05-31T12:02:28Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -99,10 +100,39 @@ public void stop(final Promise<Void> stopPromise) {\n     }\n   }\n \n+  // Creates a new server, rather than simply stopping and restarting, in order to reload TLS certs\n+  public void restartServer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ffaf29d8bac086c29b2352412ae422cc0745836"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxNzI3MA==", "bodyText": "As above -- I initially misunderstood the suggestion. I've made the switch now.", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r433017270", "createdAt": "2020-06-01T02:25:36Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/ServerVerticle.java", "diffHunk": "@@ -99,10 +100,39 @@ public void stop(final Promise<Void> stopPromise) {\n     }\n   }\n \n+  // Creates a new server, rather than simply stopping and restarting, in order to reload TLS certs\n+  public void restartServer() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkzOTg5OA=="}, "originalCommit": {"oid": "0ffaf29d8bac086c29b2352412ae422cc0745836"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDcwNTc5OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/FileWatcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwOTo1OToxMVrOGfoRuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo1MTozOVrOGf30Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgxODkzNg==", "bodyText": "Is there any need to interrupt the thread here? If shutdown() is called from this same thread then you set the shutdown flag which means the run() method will return exit ok.", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r435818936", "createdAt": "2020-06-05T09:59:11Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/FileWatcher.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardWatchEventKinds;\n+import java.nio.file.WatchEvent;\n+import java.nio.file.WatchKey;\n+import java.nio.file.WatchService;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// reference:\n+// https://gist.github.com/danielflower/f54c2fe42d32356301c68860a4ab21ed\n+// https://github.com/confluentinc/rest-utils/blob/master/core/src/main/java/io/confluent/rest/FileWatcher.java\n+/**\n+ * Watches a file and calls a callback when it is changed.\n+ */\n+public class FileWatcher implements Runnable {\n+\n+  private static final Logger log = LoggerFactory.getLogger(FileWatcher.class);\n+\n+  public interface Callback {\n+    void run() throws Exception;\n+  }\n+\n+  private volatile boolean shutdown;\n+  private final WatchService watchService;\n+  private final Path file;\n+  private final Callback callback;\n+  private Thread thread;\n+\n+  @SuppressFBWarnings(\n+      value = \"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\",\n+      justification = \"Null check on file.getParent() is present\"\n+  )\n+  public FileWatcher(final Path file, final Callback callback) throws IOException {\n+    this.file = Objects.requireNonNull(file);\n+    Objects.requireNonNull(file.getParent(), \"Watch location must have parent\");\n+    this.watchService = FileSystems.getDefault().newWatchService();\n+    // Listen to both CREATE and MODIFY to reload, which handles delete then create.\n+    file.getParent().register(watchService,\n+        StandardWatchEventKinds.ENTRY_CREATE,\n+        StandardWatchEventKinds.ENTRY_MODIFY);\n+    this.callback = Objects.requireNonNull(callback);\n+  }\n+\n+  /**\n+   * Starts the file watcher in a separate thread\n+   */\n+  public synchronized void start() {\n+    log.info(\"Starting file watcher to watch for changes: \" + file);\n+    thread = new Thread(this);\n+    thread.start();\n+  }\n+\n+  /**\n+   * Stops watching the file and closes the watch service\n+   */\n+  public synchronized void shutdown() {\n+    shutdown = true;\n+    log.info(\"Stopped watching for TLS cert changes.\");\n+    if (thread != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b23542f9b62de47fa3535694231b8d991bd22490"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3MzUxOQ==", "bodyText": "I had the redundancy as extra insurance that we wouldn't leak resources (in case something changes with the FileWatcher code and shutdown() is no longer foolproof) but I think that was overkill. I've removed the interrupt() and simplified the Server code as you suggested.", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r436073519", "createdAt": "2020-06-05T17:51:39Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/FileWatcher.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardWatchEventKinds;\n+import java.nio.file.WatchEvent;\n+import java.nio.file.WatchKey;\n+import java.nio.file.WatchService;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// reference:\n+// https://gist.github.com/danielflower/f54c2fe42d32356301c68860a4ab21ed\n+// https://github.com/confluentinc/rest-utils/blob/master/core/src/main/java/io/confluent/rest/FileWatcher.java\n+/**\n+ * Watches a file and calls a callback when it is changed.\n+ */\n+public class FileWatcher implements Runnable {\n+\n+  private static final Logger log = LoggerFactory.getLogger(FileWatcher.class);\n+\n+  public interface Callback {\n+    void run() throws Exception;\n+  }\n+\n+  private volatile boolean shutdown;\n+  private final WatchService watchService;\n+  private final Path file;\n+  private final Callback callback;\n+  private Thread thread;\n+\n+  @SuppressFBWarnings(\n+      value = \"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\",\n+      justification = \"Null check on file.getParent() is present\"\n+  )\n+  public FileWatcher(final Path file, final Callback callback) throws IOException {\n+    this.file = Objects.requireNonNull(file);\n+    Objects.requireNonNull(file.getParent(), \"Watch location must have parent\");\n+    this.watchService = FileSystems.getDefault().newWatchService();\n+    // Listen to both CREATE and MODIFY to reload, which handles delete then create.\n+    file.getParent().register(watchService,\n+        StandardWatchEventKinds.ENTRY_CREATE,\n+        StandardWatchEventKinds.ENTRY_MODIFY);\n+    this.callback = Objects.requireNonNull(callback);\n+  }\n+\n+  /**\n+   * Starts the file watcher in a separate thread\n+   */\n+  public synchronized void start() {\n+    log.info(\"Starting file watcher to watch for changes: \" + file);\n+    thread = new Thread(this);\n+    thread.start();\n+  }\n+\n+  /**\n+   * Stops watching the file and closes the watch service\n+   */\n+  public synchronized void shutdown() {\n+    shutdown = true;\n+    log.info(\"Stopped watching for TLS cert changes.\");\n+    if (thread != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgxODkzNg=="}, "originalCommit": {"oid": "b23542f9b62de47fa3535694231b8d991bd22490"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDcxMDM5OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDowMDoyNFrOGfoUmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDowMDoyNFrOGfoUmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgxOTY3NQ==", "bodyText": "I don't think the startFileWatcher flag is necessary if you don't interrupt the watcher thread (see previous comment). This means you can simplify things and have a simple start/stop method as before and always create a new filewatcher in start().", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r435819675", "createdAt": "2020-06-05T10:00:24Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -89,6 +93,10 @@ public Server(final Vertx vertx, final KsqlRestConfig config, final Endpoints en\n   }\n \n   public synchronized void start() {\n+    start(true);\n+  }\n+\n+  private synchronized void start(final boolean startFileWatcher) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b23542f9b62de47fa3535694231b8d991bd22490"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDcxMTEyOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDowMDozOVrOGfoVHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDowMDozOVrOGfoVHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgxOTgwNg==", "bodyText": "As above, parameter is unnecessary", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r435819806", "createdAt": "2020-06-05T10:00:39Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -156,12 +166,19 @@ public synchronized void start() {\n   }\n \n   public synchronized void stop() {\n+    stop(true);\n+  }\n+\n+  private synchronized void stop(final boolean stopFileWatcher) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b23542f9b62de47fa3535694231b8d991bd22490"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDcxODYzOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/FileWatcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDowMjo1MFrOGfoZzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo0ODo1N1rOGf3u4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyMTAwNA==", "bodyText": "You can avoid this if FileWatcher extends Thread", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r435821004", "createdAt": "2020-06-05T10:02:50Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/FileWatcher.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardWatchEventKinds;\n+import java.nio.file.WatchEvent;\n+import java.nio.file.WatchKey;\n+import java.nio.file.WatchService;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// reference:\n+// https://gist.github.com/danielflower/f54c2fe42d32356301c68860a4ab21ed\n+// https://github.com/confluentinc/rest-utils/blob/master/core/src/main/java/io/confluent/rest/FileWatcher.java\n+/**\n+ * Watches a file and calls a callback when it is changed.\n+ */\n+public class FileWatcher implements Runnable {\n+\n+  private static final Logger log = LoggerFactory.getLogger(FileWatcher.class);\n+\n+  public interface Callback {\n+    void run() throws Exception;\n+  }\n+\n+  private volatile boolean shutdown;\n+  private final WatchService watchService;\n+  private final Path file;\n+  private final Callback callback;\n+  private Thread thread;\n+\n+  @SuppressFBWarnings(\n+      value = \"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\",\n+      justification = \"Null check on file.getParent() is present\"\n+  )\n+  public FileWatcher(final Path file, final Callback callback) throws IOException {\n+    this.file = Objects.requireNonNull(file);\n+    Objects.requireNonNull(file.getParent(), \"Watch location must have parent\");\n+    this.watchService = FileSystems.getDefault().newWatchService();\n+    // Listen to both CREATE and MODIFY to reload, which handles delete then create.\n+    file.getParent().register(watchService,\n+        StandardWatchEventKinds.ENTRY_CREATE,\n+        StandardWatchEventKinds.ENTRY_MODIFY);\n+    this.callback = Objects.requireNonNull(callback);\n+  }\n+\n+  /**\n+   * Starts the file watcher in a separate thread\n+   */\n+  public synchronized void start() {\n+    log.info(\"Starting file watcher to watch for changes: \" + file);\n+    thread = new Thread(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b23542f9b62de47fa3535694231b8d991bd22490"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3MjE2Mw==", "bodyText": "Ah yes, this is a lot better. Thanks for the suggestion! I thought what I was doing didn't feel right, heh :)", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r436072163", "createdAt": "2020-06-05T17:48:57Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/FileWatcher.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardWatchEventKinds;\n+import java.nio.file.WatchEvent;\n+import java.nio.file.WatchKey;\n+import java.nio.file.WatchService;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// reference:\n+// https://gist.github.com/danielflower/f54c2fe42d32356301c68860a4ab21ed\n+// https://github.com/confluentinc/rest-utils/blob/master/core/src/main/java/io/confluent/rest/FileWatcher.java\n+/**\n+ * Watches a file and calls a callback when it is changed.\n+ */\n+public class FileWatcher implements Runnable {\n+\n+  private static final Logger log = LoggerFactory.getLogger(FileWatcher.class);\n+\n+  public interface Callback {\n+    void run() throws Exception;\n+  }\n+\n+  private volatile boolean shutdown;\n+  private final WatchService watchService;\n+  private final Path file;\n+  private final Callback callback;\n+  private Thread thread;\n+\n+  @SuppressFBWarnings(\n+      value = \"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\",\n+      justification = \"Null check on file.getParent() is present\"\n+  )\n+  public FileWatcher(final Path file, final Callback callback) throws IOException {\n+    this.file = Objects.requireNonNull(file);\n+    Objects.requireNonNull(file.getParent(), \"Watch location must have parent\");\n+    this.watchService = FileSystems.getDefault().newWatchService();\n+    // Listen to both CREATE and MODIFY to reload, which handles delete then create.\n+    file.getParent().register(watchService,\n+        StandardWatchEventKinds.ENTRY_CREATE,\n+        StandardWatchEventKinds.ENTRY_MODIFY);\n+    this.callback = Objects.requireNonNull(callback);\n+  }\n+\n+  /**\n+   * Starts the file watcher in a separate thread\n+   */\n+  public synchronized void start() {\n+    log.info(\"Starting file watcher to watch for changes: \" + file);\n+    thread = new Thread(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyMTAwNA=="}, "originalCommit": {"oid": "b23542f9b62de47fa3535694231b8d991bd22490"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDcyMjY0OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/FileWatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDowNDoxNlrOGfocdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDowNDoxNlrOGfocdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyMTY4Nw==", "bodyText": "Doesn't need to be synchronized if we don't have a thread member and shutdown is volatile", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r435821687", "createdAt": "2020-06-05T10:04:16Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/FileWatcher.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardWatchEventKinds;\n+import java.nio.file.WatchEvent;\n+import java.nio.file.WatchKey;\n+import java.nio.file.WatchService;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// reference:\n+// https://gist.github.com/danielflower/f54c2fe42d32356301c68860a4ab21ed\n+// https://github.com/confluentinc/rest-utils/blob/master/core/src/main/java/io/confluent/rest/FileWatcher.java\n+/**\n+ * Watches a file and calls a callback when it is changed.\n+ */\n+public class FileWatcher implements Runnable {\n+\n+  private static final Logger log = LoggerFactory.getLogger(FileWatcher.class);\n+\n+  public interface Callback {\n+    void run() throws Exception;\n+  }\n+\n+  private volatile boolean shutdown;\n+  private final WatchService watchService;\n+  private final Path file;\n+  private final Callback callback;\n+  private Thread thread;\n+\n+  @SuppressFBWarnings(\n+      value = \"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\",\n+      justification = \"Null check on file.getParent() is present\"\n+  )\n+  public FileWatcher(final Path file, final Callback callback) throws IOException {\n+    this.file = Objects.requireNonNull(file);\n+    Objects.requireNonNull(file.getParent(), \"Watch location must have parent\");\n+    this.watchService = FileSystems.getDefault().newWatchService();\n+    // Listen to both CREATE and MODIFY to reload, which handles delete then create.\n+    file.getParent().register(watchService,\n+        StandardWatchEventKinds.ENTRY_CREATE,\n+        StandardWatchEventKinds.ENTRY_MODIFY);\n+    this.callback = Objects.requireNonNull(callback);\n+  }\n+\n+  /**\n+   * Starts the file watcher in a separate thread\n+   */\n+  public synchronized void start() {\n+    log.info(\"Starting file watcher to watch for changes: \" + file);\n+    thread = new Thread(this);\n+    thread.start();\n+  }\n+\n+  /**\n+   * Stops watching the file and closes the watch service\n+   */\n+  public synchronized void shutdown() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b23542f9b62de47fa3535694231b8d991bd22490"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDczMDEzOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/FileWatcher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDowNjozMVrOGfohIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDowNjozMVrOGfohIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyMjg4Mw==", "bodyText": "Probably should log at error unless this is expected in normal operation?", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r435822883", "createdAt": "2020-06-05T10:06:31Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/FileWatcher.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardWatchEventKinds;\n+import java.nio.file.WatchEvent;\n+import java.nio.file.WatchKey;\n+import java.nio.file.WatchService;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// reference:\n+// https://gist.github.com/danielflower/f54c2fe42d32356301c68860a4ab21ed\n+// https://github.com/confluentinc/rest-utils/blob/master/core/src/main/java/io/confluent/rest/FileWatcher.java\n+/**\n+ * Watches a file and calls a callback when it is changed.\n+ */\n+public class FileWatcher implements Runnable {\n+\n+  private static final Logger log = LoggerFactory.getLogger(FileWatcher.class);\n+\n+  public interface Callback {\n+    void run() throws Exception;\n+  }\n+\n+  private volatile boolean shutdown;\n+  private final WatchService watchService;\n+  private final Path file;\n+  private final Callback callback;\n+  private Thread thread;\n+\n+  @SuppressFBWarnings(\n+      value = \"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\",\n+      justification = \"Null check on file.getParent() is present\"\n+  )\n+  public FileWatcher(final Path file, final Callback callback) throws IOException {\n+    this.file = Objects.requireNonNull(file);\n+    Objects.requireNonNull(file.getParent(), \"Watch location must have parent\");\n+    this.watchService = FileSystems.getDefault().newWatchService();\n+    // Listen to both CREATE and MODIFY to reload, which handles delete then create.\n+    file.getParent().register(watchService,\n+        StandardWatchEventKinds.ENTRY_CREATE,\n+        StandardWatchEventKinds.ENTRY_MODIFY);\n+    this.callback = Objects.requireNonNull(callback);\n+  }\n+\n+  /**\n+   * Starts the file watcher in a separate thread\n+   */\n+  public synchronized void start() {\n+    log.info(\"Starting file watcher to watch for changes: \" + file);\n+    thread = new Thread(this);\n+    thread.start();\n+  }\n+\n+  /**\n+   * Stops watching the file and closes the watch service\n+   */\n+  public synchronized void shutdown() {\n+    shutdown = true;\n+    log.info(\"Stopped watching for TLS cert changes.\");\n+    if (thread != null) {\n+      thread.interrupt();\n+    }\n+    try {\n+      watchService.close();\n+    } catch (IOException e) {\n+      log.info(\"Error closing watch service\", e);\n+    }\n+  }\n+\n+  @Override\n+  public void run() {\n+    try {\n+      while (!shutdown) {\n+        try {\n+          handleNextWatchNotification();\n+        } catch (InterruptedException e) {\n+          throw e;\n+        } catch (Exception e) {\n+          log.info(\"Watch service caught exception, will continue:\" + e);\n+        }\n+      }\n+    } catch (InterruptedException e) {\n+      log.info(\"Ending watch due to interrupt\");\n+    }\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  @SuppressFBWarnings(\n+      value = \"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\",\n+      justification = \"Null check on file.getParent() is present above\"\n+  )\n+  private void handleNextWatchNotification() throws InterruptedException {\n+    // wait for key to be signalled\n+    final WatchKey key = watchService.take();\n+    log.info(\"Watch Key notified\");\n+    for (WatchEvent<?> event : key.pollEvents()) {\n+      final WatchEvent.Kind<?> kind = event.kind();\n+      if (kind == StandardWatchEventKinds.OVERFLOW) {\n+        log.debug(\"Watch event is OVERFLOW\");\n+        continue;\n+      }\n+      final WatchEvent<Path> ev = (WatchEvent<Path>)event;\n+      final Path changed = file.getParent().resolve(ev.context());\n+      log.debug(\"Watch file change: \" + ev.context() + \"=>\" + changed);\n+      // use Path.equals rather than Files.isSameFile to handle updated symlinks\n+      if (Files.exists(changed) && changed.equals(file)) {\n+        log.info(\"Change event for watched file: \" + file);\n+        try {\n+          callback.run();\n+        } catch (Exception e) {\n+          log.warn(\"Hit error callback on file change\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b23542f9b62de47fa3535694231b8d991bd22490"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNDczNjM3OnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/TlsTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDowODo0NFrOGfolOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODoxMjozNlrOGf4jGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyMzkyOQ==", "bodyText": "I think it would be good to test reloading the server more than once - i.e. changing the cert more than once, as there might be a bug in the filewatcher/reloading that only manifests after the reload has been done once.", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r435823929", "createdAt": "2020-06-05T10:08:44Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/TlsTest.java", "diffHunk": "@@ -49,18 +61,82 @@ protected KsqlRestConfig createServerConfig() {\n     config.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, trustStorePassword);\n     config.put(KsqlRestConfig.VERTICLE_INSTANCES, 4);\n \n+    config.put(KsqlRestConfig.SSL_KEYSTORE_RELOAD_CONFIG, true);\n+\n     return new KsqlRestConfig(config);\n   }\n \n   @Override\n   protected WebClientOptions createClientOptions() {\n+    // for this test file, the client must use a different trust store location than the server\n+    // since the client store should always be valid even when the server store is loaded with an\n+    // invalid cert\n+    String clientTrustStorePath = ServerKeyStore.clientKeyStoreProps()\n+        .get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n+    String clientTrustStorePassword = ServerKeyStore.clientKeyStoreProps()\n+        .get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n+\n     return new WebClientOptions().setSsl(true).\n         setUseAlpn(true).\n         setProtocolVersion(HttpVersion.HTTP_2).\n-        setTrustAll(true).\n+        setTrustStoreOptions(\n+            new JksOptions().setPath(clientTrustStorePath).setPassword(clientTrustStorePassword)).\n         setVerifyHost(false).\n         setDefaultHost(\"localhost\").\n         setDefaultPort(server.getListeners().get(0).getPort());\n   }\n \n+  @Test\n+  public void shouldReloadCert() throws Exception {\n+    JsonObject requestBody = new JsonObject().put(\"sql\", DEFAULT_PULL_QUERY);\n+\n+    // Given: sanity check that a query succeeds\n+    HttpResponse<Buffer> response = sendRequest(\"/query-stream\", requestBody.toBuffer());\n+    assertThat(response.statusCode(), is(200));\n+    assertThat(response.statusMessage(), is(\"OK\"));\n+\n+    try {\n+      // When: load expired key store\n+      ServerKeyStore.loadExpiredServerKeyStore();\n+      assertThatEventually(\n+          \"Should fail to execute query with expired key store\",\n+          () -> {\n+            // re-create client since server port changes on restart\n+            this.client = createClient();\n+\n+            try {\n+              // this should fail\n+              sendRequest(\"/query-stream\", requestBody.toBuffer());\n+              return \"error: request should have failed but did not\";\n+            } catch (Exception e) {\n+              assertThat(e,\n+                  instanceOf(ExecutionException.class)); // thrown from CompletableFuture.get()\n+              return e.getMessage();\n+            }\n+          },\n+          containsString(\"javax.net.ssl.SSLHandshakeException: Failed to create SSL connection\"),\n+          TimeUnit.SECONDS.toMillis(1),\n+          TimeUnit.SECONDS.toMillis(1)\n+      );\n+    } finally { // restore cert regardless of failure above so as to not affect other tests\n+      // When: load valid store\n+      ServerKeyStore.loadValidServerKeyStore();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b23542f9b62de47fa3535694231b8d991bd22490"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3MjYxNQ==", "bodyText": "The test already reloads the server twice: once with a bad cert, and then again with a good cert. Are you suggesting we should repeat the cycle twice, for a total of four reloads?", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r436072615", "createdAt": "2020-06-05T17:49:51Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/TlsTest.java", "diffHunk": "@@ -49,18 +61,82 @@ protected KsqlRestConfig createServerConfig() {\n     config.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, trustStorePassword);\n     config.put(KsqlRestConfig.VERTICLE_INSTANCES, 4);\n \n+    config.put(KsqlRestConfig.SSL_KEYSTORE_RELOAD_CONFIG, true);\n+\n     return new KsqlRestConfig(config);\n   }\n \n   @Override\n   protected WebClientOptions createClientOptions() {\n+    // for this test file, the client must use a different trust store location than the server\n+    // since the client store should always be valid even when the server store is loaded with an\n+    // invalid cert\n+    String clientTrustStorePath = ServerKeyStore.clientKeyStoreProps()\n+        .get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n+    String clientTrustStorePassword = ServerKeyStore.clientKeyStoreProps()\n+        .get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n+\n     return new WebClientOptions().setSsl(true).\n         setUseAlpn(true).\n         setProtocolVersion(HttpVersion.HTTP_2).\n-        setTrustAll(true).\n+        setTrustStoreOptions(\n+            new JksOptions().setPath(clientTrustStorePath).setPassword(clientTrustStorePassword)).\n         setVerifyHost(false).\n         setDefaultHost(\"localhost\").\n         setDefaultPort(server.getListeners().get(0).getPort());\n   }\n \n+  @Test\n+  public void shouldReloadCert() throws Exception {\n+    JsonObject requestBody = new JsonObject().put(\"sql\", DEFAULT_PULL_QUERY);\n+\n+    // Given: sanity check that a query succeeds\n+    HttpResponse<Buffer> response = sendRequest(\"/query-stream\", requestBody.toBuffer());\n+    assertThat(response.statusCode(), is(200));\n+    assertThat(response.statusMessage(), is(\"OK\"));\n+\n+    try {\n+      // When: load expired key store\n+      ServerKeyStore.loadExpiredServerKeyStore();\n+      assertThatEventually(\n+          \"Should fail to execute query with expired key store\",\n+          () -> {\n+            // re-create client since server port changes on restart\n+            this.client = createClient();\n+\n+            try {\n+              // this should fail\n+              sendRequest(\"/query-stream\", requestBody.toBuffer());\n+              return \"error: request should have failed but did not\";\n+            } catch (Exception e) {\n+              assertThat(e,\n+                  instanceOf(ExecutionException.class)); // thrown from CompletableFuture.get()\n+              return e.getMessage();\n+            }\n+          },\n+          containsString(\"javax.net.ssl.SSLHandshakeException: Failed to create SSL connection\"),\n+          TimeUnit.SECONDS.toMillis(1),\n+          TimeUnit.SECONDS.toMillis(1)\n+      );\n+    } finally { // restore cert regardless of failure above so as to not affect other tests\n+      // When: load valid store\n+      ServerKeyStore.loadValidServerKeyStore();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyMzkyOQ=="}, "originalCommit": {"oid": "b23542f9b62de47fa3535694231b8d991bd22490"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4NTUyOA==", "bodyText": "Ah, if you're already reloading more than once that seems fine :)", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r436085528", "createdAt": "2020-06-05T18:12:36Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/TlsTest.java", "diffHunk": "@@ -49,18 +61,82 @@ protected KsqlRestConfig createServerConfig() {\n     config.put(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG, trustStorePassword);\n     config.put(KsqlRestConfig.VERTICLE_INSTANCES, 4);\n \n+    config.put(KsqlRestConfig.SSL_KEYSTORE_RELOAD_CONFIG, true);\n+\n     return new KsqlRestConfig(config);\n   }\n \n   @Override\n   protected WebClientOptions createClientOptions() {\n+    // for this test file, the client must use a different trust store location than the server\n+    // since the client store should always be valid even when the server store is loaded with an\n+    // invalid cert\n+    String clientTrustStorePath = ServerKeyStore.clientKeyStoreProps()\n+        .get(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG);\n+    String clientTrustStorePassword = ServerKeyStore.clientKeyStoreProps()\n+        .get(SslConfigs.SSL_TRUSTSTORE_PASSWORD_CONFIG);\n+\n     return new WebClientOptions().setSsl(true).\n         setUseAlpn(true).\n         setProtocolVersion(HttpVersion.HTTP_2).\n-        setTrustAll(true).\n+        setTrustStoreOptions(\n+            new JksOptions().setPath(clientTrustStorePath).setPassword(clientTrustStorePassword)).\n         setVerifyHost(false).\n         setDefaultHost(\"localhost\").\n         setDefaultPort(server.getListeners().get(0).getPort());\n   }\n \n+  @Test\n+  public void shouldReloadCert() throws Exception {\n+    JsonObject requestBody = new JsonObject().put(\"sql\", DEFAULT_PULL_QUERY);\n+\n+    // Given: sanity check that a query succeeds\n+    HttpResponse<Buffer> response = sendRequest(\"/query-stream\", requestBody.toBuffer());\n+    assertThat(response.statusCode(), is(200));\n+    assertThat(response.statusMessage(), is(\"OK\"));\n+\n+    try {\n+      // When: load expired key store\n+      ServerKeyStore.loadExpiredServerKeyStore();\n+      assertThatEventually(\n+          \"Should fail to execute query with expired key store\",\n+          () -> {\n+            // re-create client since server port changes on restart\n+            this.client = createClient();\n+\n+            try {\n+              // this should fail\n+              sendRequest(\"/query-stream\", requestBody.toBuffer());\n+              return \"error: request should have failed but did not\";\n+            } catch (Exception e) {\n+              assertThat(e,\n+                  instanceOf(ExecutionException.class)); // thrown from CompletableFuture.get()\n+              return e.getMessage();\n+            }\n+          },\n+          containsString(\"javax.net.ssl.SSLHandshakeException: Failed to create SSL connection\"),\n+          TimeUnit.SECONDS.toMillis(1),\n+          TimeUnit.SECONDS.toMillis(1)\n+      );\n+    } finally { // restore cert regardless of failure above so as to not affect other tests\n+      // When: load valid store\n+      ServerKeyStore.loadValidServerKeyStore();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyMzkyOQ=="}, "originalCommit": {"oid": "b23542f9b62de47fa3535694231b8d991bd22490"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTU5MzAxOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/FileWatcher.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzoyNTo0MVrOGgok6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwODo0OToxNFrOGg_HJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg3MjQyNA==", "bodyText": "Hey @purplefox , now that FileWatcher extends Thread, do you think it makes sense to get rid of this shutdown() method and instead call interrupt() to terminate the file watcher? I'm wondering whether it's canonical to have a \"clean\" shutdown method like this, or if interrupt() is understood to be used for that purpose.", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r436872424", "createdAt": "2020-06-08T17:25:41Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/FileWatcher.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardWatchEventKinds;\n+import java.nio.file.WatchEvent;\n+import java.nio.file.WatchKey;\n+import java.nio.file.WatchService;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// reference:\n+// https://gist.github.com/danielflower/f54c2fe42d32356301c68860a4ab21ed\n+// https://github.com/confluentinc/rest-utils/blob/master/core/src/main/java/io/confluent/rest/FileWatcher.java\n+/**\n+ * Watches a file and calls a callback when it is changed.\n+ */\n+public class FileWatcher extends Thread {\n+\n+  private static final Logger log = LoggerFactory.getLogger(FileWatcher.class);\n+\n+  public interface Callback {\n+    void run() throws Exception;\n+  }\n+\n+  private volatile boolean shutdown;\n+  private final WatchService watchService;\n+  private final Path file;\n+  private final Callback callback;\n+\n+  @SuppressFBWarnings(\n+      value = \"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\",\n+      justification = \"Null check on file.getParent() is present\"\n+  )\n+  public FileWatcher(final Path file, final Callback callback) throws IOException {\n+    this.file = Objects.requireNonNull(file);\n+    Objects.requireNonNull(file.getParent(), \"Watch location must have parent\");\n+    this.watchService = FileSystems.getDefault().newWatchService();\n+    // Listen to both CREATE and MODIFY to reload, which handles delete then create.\n+    file.getParent().register(watchService,\n+        StandardWatchEventKinds.ENTRY_CREATE,\n+        StandardWatchEventKinds.ENTRY_MODIFY);\n+    this.callback = Objects.requireNonNull(callback);\n+  }\n+\n+  /**\n+   * Closes the file watcher\n+   */\n+  public void shutdown() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a1d13695028acd42f4a7b9920457446304f962c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg3OTI5Mw==", "bodyText": "Merging PR for now -- will make this improvement in a follow-up (if we think it'd be an improvement).", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r436879293", "createdAt": "2020-06-08T17:36:34Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/FileWatcher.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardWatchEventKinds;\n+import java.nio.file.WatchEvent;\n+import java.nio.file.WatchKey;\n+import java.nio.file.WatchService;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// reference:\n+// https://gist.github.com/danielflower/f54c2fe42d32356301c68860a4ab21ed\n+// https://github.com/confluentinc/rest-utils/blob/master/core/src/main/java/io/confluent/rest/FileWatcher.java\n+/**\n+ * Watches a file and calls a callback when it is changed.\n+ */\n+public class FileWatcher extends Thread {\n+\n+  private static final Logger log = LoggerFactory.getLogger(FileWatcher.class);\n+\n+  public interface Callback {\n+    void run() throws Exception;\n+  }\n+\n+  private volatile boolean shutdown;\n+  private final WatchService watchService;\n+  private final Path file;\n+  private final Callback callback;\n+\n+  @SuppressFBWarnings(\n+      value = \"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\",\n+      justification = \"Null check on file.getParent() is present\"\n+  )\n+  public FileWatcher(final Path file, final Callback callback) throws IOException {\n+    this.file = Objects.requireNonNull(file);\n+    Objects.requireNonNull(file.getParent(), \"Watch location must have parent\");\n+    this.watchService = FileSystems.getDefault().newWatchService();\n+    // Listen to both CREATE and MODIFY to reload, which handles delete then create.\n+    file.getParent().register(watchService,\n+        StandardWatchEventKinds.ENTRY_CREATE,\n+        StandardWatchEventKinds.ENTRY_MODIFY);\n+    this.callback = Objects.requireNonNull(callback);\n+  }\n+\n+  /**\n+   * Closes the file watcher\n+   */\n+  public void shutdown() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg3MjQyNA=="}, "originalCommit": {"oid": "7a1d13695028acd42f4a7b9920457446304f962c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI0MTYzOQ==", "bodyText": "I think it's preferable to shut cleanly without interrupting threads if you can. Interrupting threads is only necessary if the thread is blocked on something that is interruptable. In our case we only call shutdown() from the thread itself so we can guarantee it's not blocked so there's no need to interrupt anything.\nIf the method was intended to be used elsewhere from a different thread then we should call Thread.interrupt() but that's not the case here.\nAs a sanity check you could add this in shutdown() to make sure that is the case\nif (this != Thread.currentThread()) {\n   throw new IllegalStateException(\"Can only be called from file watcher thread\");\n}", "url": "https://github.com/confluentinc/ksql/pull/5516#discussion_r437241639", "createdAt": "2020-06-09T08:49:14Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/FileWatcher.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n+import java.io.IOException;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardWatchEventKinds;\n+import java.nio.file.WatchEvent;\n+import java.nio.file.WatchKey;\n+import java.nio.file.WatchService;\n+import java.util.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// reference:\n+// https://gist.github.com/danielflower/f54c2fe42d32356301c68860a4ab21ed\n+// https://github.com/confluentinc/rest-utils/blob/master/core/src/main/java/io/confluent/rest/FileWatcher.java\n+/**\n+ * Watches a file and calls a callback when it is changed.\n+ */\n+public class FileWatcher extends Thread {\n+\n+  private static final Logger log = LoggerFactory.getLogger(FileWatcher.class);\n+\n+  public interface Callback {\n+    void run() throws Exception;\n+  }\n+\n+  private volatile boolean shutdown;\n+  private final WatchService watchService;\n+  private final Path file;\n+  private final Callback callback;\n+\n+  @SuppressFBWarnings(\n+      value = \"NP_NULL_ON_SOME_PATH_FROM_RETURN_VALUE\",\n+      justification = \"Null check on file.getParent() is present\"\n+  )\n+  public FileWatcher(final Path file, final Callback callback) throws IOException {\n+    this.file = Objects.requireNonNull(file);\n+    Objects.requireNonNull(file.getParent(), \"Watch location must have parent\");\n+    this.watchService = FileSystems.getDefault().newWatchService();\n+    // Listen to both CREATE and MODIFY to reload, which handles delete then create.\n+    file.getParent().register(watchService,\n+        StandardWatchEventKinds.ENTRY_CREATE,\n+        StandardWatchEventKinds.ENTRY_MODIFY);\n+    this.callback = Objects.requireNonNull(callback);\n+  }\n+\n+  /**\n+   * Closes the file watcher\n+   */\n+  public void shutdown() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg3MjQyNA=="}, "originalCommit": {"oid": "7a1d13695028acd42f4a7b9920457446304f962c"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3321, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}