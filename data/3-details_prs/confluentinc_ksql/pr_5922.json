{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwMzU2MTYz", "number": 5922, "title": "chore: add basic validation for table upgrades (MINOR)", "bodyText": "Description\nThe corresponding code for table filters/selects as #5880 did for streams.\nTesting done\nQTT tests covering the supported and some unsupported upgrades.\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-07-31T17:48:56Z", "url": "https://github.com/confluentinc/ksql/pull/5922", "merged": true, "mergeCommit": {"oid": "0094e2bd860e6058f40dc2c2b5b21251af5a3919"}, "closed": true, "closedAt": "2020-08-04T21:41:16Z", "author": {"login": "agavra"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6X7q-gH2gAyNDYwMzU2MTYzOjNhNmQ1NTBmZjAwNzliMDlkY2RiZTlmNjI0YjM4ZGUzMzkwZGJhNjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7s2FtgH2gAyNDYwMzU2MTYzOjM5ZDY1MGMzNmVlMmJiMTlmMDViYjQ4OTQ5MjExZDU5Y2RjYzBhNGM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3a6d550ff0079b09dcdbe9f624b38de3390dba66", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/3a6d550ff0079b09dcdbe9f624b38de3390dba66", "committedDate": "2020-07-31T17:46:41Z", "message": "chore: add basic validation for table upgrades"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwODE2Mzcw", "url": "https://github.com/confluentinc/ksql/pull/5922#pullrequestreview-460816370", "createdAt": "2020-08-04T13:33:27Z", "commit": {"oid": "3a6d550ff0079b09dcdbe9f624b38de3390dba66"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzozMzoyN1rOG7glQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxMzo0MzowMVrOG7g88Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1Mjk5NA==", "bodyText": "This will likely results in the order of entries in the returned list changing from what it was before, and not being non-deterministic.\nNot sure if this is important, just flagging as a potential unforeseen side effect of the change.", "url": "https://github.com/confluentinc/ksql/pull/5922#discussion_r465052994", "createdAt": "2020-08-04T13:33:27Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/tools/TestExecutorUtil.java", "diffHunk": "@@ -268,7 +273,8 @@ private static void initializeTopics(\n       final StubKafkaService stubKafkaService,\n       final TestExecutionListener listener\n   ) {\n-    final ImmutableList.Builder<PersistentQueryAndSources> queriesBuilder = new Builder<>();\n+    final Map<QueryId, PersistentQueryAndSources> queries = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a6d550ff0079b09dcdbe9f624b38de3390dba66"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1MzIwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return new ArrayList<>(queries.values());\n          \n          \n            \n                return ImmutableList.copyOf(queries.values());", "url": "https://github.com/confluentinc/ksql/pull/5922#discussion_r465053200", "createdAt": "2020-08-04T13:33:47Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/tools/TestExecutorUtil.java", "diffHunk": "@@ -284,9 +290,11 @@ private static void initializeTopics(\n \n       listener.acceptQuery(query);\n \n-      queriesBuilder.add(new PersistentQueryAndSources(query, result.getSources().get()));\n+      queries.put(\n+          query.getQueryId(),\n+          new PersistentQueryAndSources(query, result.getSources().get()));\n     }\n-    return queriesBuilder.build();\n+    return new ArrayList<>(queries.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a6d550ff0079b09dcdbe9f624b38de3390dba66"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NDE2NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"message\": \"Cannot REPLACE data source: DataSource '`BAR`' has schema = `ID` STRING KEY, `COL1` STRING, `COL2` STRING which is not upgradeable to `ID` STRING KEY, `COL1` STRING(The following columns are changed or missing: [`COL2` STRING])\"\n          \n          \n            \n                    \"message\": \"Cannot REPLACE data source: DataSource '`BAR`' has schema = `ID` STRING KEY, `COL1` STRING, `COL2` STRING which is not upgradeable to `ID` STRING KEY, `COL1` STRING. (The following columns are changed or missing: [`COL2` STRING])\"", "url": "https://github.com/confluentinc/ksql/pull/5922#discussion_r465054164", "createdAt": "2020-08-04T13:35:20Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/upgrades.json", "diffHunk": "@@ -201,9 +214,79 @@\n         \"CREATE TABLE bar AS SELECT * FROM foo;\",\n         \"CREATE OR REPLACE TABLE bar AS SELECT * FROM foo WHERE col1 = '123';\"\n       ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - add column\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1, col2 FROM foo;\"\n+      ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - add column via select *\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT * FROM foo;\"\n+      ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - remove column\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1, col2 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1 FROM foo;\"\n+      ],\n       \"expectedException\": {\n         \"type\": \"io.confluent.ksql.util.KsqlException\",\n-        \"message\": \"Upgrades not yet supported for io.confluent.ksql.execution.plan.TableSink\"\n+        \"message\": \"Cannot REPLACE data source: DataSource '`BAR`' has schema = `ID` STRING KEY, `COL1` STRING, `COL2` STRING which is not upgradeable to `ID` STRING KEY, `COL1` STRING(The following columns are changed or missing: [`COL2` STRING])\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a6d550ff0079b09dcdbe9f624b38de3390dba66"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NDcxMw==", "bodyText": "Exposing internal implementation details?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"message\": \"Query is not upgradeable. Plan step of type class io.confluent.ksql.execution.plan.TableSource must have matching topicName. Values differ: foo vs. baz\"\n          \n          \n            \n                    \"message\": \"Query is not upgradeable. TableSource must have matching topicName. Values differ: foo vs. baz\"", "url": "https://github.com/confluentinc/ksql/pull/5922#discussion_r465054713", "createdAt": "2020-08-04T13:36:13Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/upgrades.json", "diffHunk": "@@ -201,9 +214,79 @@\n         \"CREATE TABLE bar AS SELECT * FROM foo;\",\n         \"CREATE OR REPLACE TABLE bar AS SELECT * FROM foo WHERE col1 = '123';\"\n       ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - add column\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1, col2 FROM foo;\"\n+      ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - add column via select *\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT * FROM foo;\"\n+      ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - remove column\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1, col2 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1 FROM foo;\"\n+      ],\n       \"expectedException\": {\n         \"type\": \"io.confluent.ksql.util.KsqlException\",\n-        \"message\": \"Upgrades not yet supported for io.confluent.ksql.execution.plan.TableSink\"\n+        \"message\": \"Cannot REPLACE data source: DataSource '`BAR`' has schema = `ID` STRING KEY, `COL1` STRING, `COL2` STRING which is not upgradeable to `ID` STRING KEY, `COL1` STRING(The following columns are changed or missing: [`COL2` STRING])\"\n+      }\n+    },\n+    {\n+      \"name\": \"DML - TABLE - change source\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE baz (id VARCHAR PRIMARY KEY, col1 VARCHAR) WITH (kafka_topic='baz', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1 FROM baz;\"\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlException\",\n+        \"message\": \"Query is not upgradeable. Plan step of type class io.confluent.ksql.execution.plan.TableSource must have matching topicName. Values differ: foo vs. baz\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a6d550ff0079b09dcdbe9f624b38de3390dba66"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NTU0Mg==", "bodyText": "Exposing Optional in error message isn't ideal. Can we avoid?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"message\": \"Cannot REPLACE data source: DataSource '`BAR`' has timestampColumn = Optional.empty which is not upgradeable to Optional[TimestampColumn{column=`COL1`, format=Optional[YYYY]}]\"\n          \n          \n            \n                    \"message\": \"Cannot REPLACE data source: DataSource '`BAR`' has timestampColumn = None which is not upgradeable to TimestampColumn{column=`COL1`, format=Optional[YYYY]}\"", "url": "https://github.com/confluentinc/ksql/pull/5922#discussion_r465055542", "createdAt": "2020-08-04T13:37:32Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/upgrades.json", "diffHunk": "@@ -201,9 +214,79 @@\n         \"CREATE TABLE bar AS SELECT * FROM foo;\",\n         \"CREATE OR REPLACE TABLE bar AS SELECT * FROM foo WHERE col1 = '123';\"\n       ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - add column\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1, col2 FROM foo;\"\n+      ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - add column via select *\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT * FROM foo;\"\n+      ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - remove column\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1, col2 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1 FROM foo;\"\n+      ],\n       \"expectedException\": {\n         \"type\": \"io.confluent.ksql.util.KsqlException\",\n-        \"message\": \"Upgrades not yet supported for io.confluent.ksql.execution.plan.TableSink\"\n+        \"message\": \"Cannot REPLACE data source: DataSource '`BAR`' has schema = `ID` STRING KEY, `COL1` STRING, `COL2` STRING which is not upgradeable to `ID` STRING KEY, `COL1` STRING(The following columns are changed or missing: [`COL2` STRING])\"\n+      }\n+    },\n+    {\n+      \"name\": \"DML - TABLE - change source\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE baz (id VARCHAR PRIMARY KEY, col1 VARCHAR) WITH (kafka_topic='baz', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1 FROM baz;\"\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlException\",\n+        \"message\": \"Query is not upgradeable. Plan step of type class io.confluent.ksql.execution.plan.TableSource must have matching topicName. Values differ: foo vs. baz\"\n+      }\n+    },\n+    {\n+      \"name\": \"DML - TABLE - change timestampColumn\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar WITH (timestamp='col1', timestamp_format='YYYY') AS SELECT id, col1 FROM bar;\"\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlException\",\n+        \"message\": \"Cannot REPLACE data source: DataSource '`BAR`' has timestampColumn = Optional.empty which is not upgradeable to Optional[TimestampColumn{column=`COL1`, format=Optional[YYYY]}]\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a6d550ff0079b09dcdbe9f624b38de3390dba66"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1NTcwNg==", "bodyText": "Can we add a negative test for:\n\nthe timestamp format changing?\nbigger changes, like adding:\n\nJoin\nPartition by\nGROUP BY\netc.", "url": "https://github.com/confluentinc/ksql/pull/5922#discussion_r465055706", "createdAt": "2020-08-04T13:37:48Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/upgrades.json", "diffHunk": "@@ -201,9 +214,79 @@\n         \"CREATE TABLE bar AS SELECT * FROM foo;\",\n         \"CREATE OR REPLACE TABLE bar AS SELECT * FROM foo WHERE col1 = '123';\"\n       ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - add column\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1, col2 FROM foo;\"\n+      ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - add column via select *\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT * FROM foo;\"\n+      ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - remove column\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1, col2 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1 FROM foo;\"\n+      ],\n       \"expectedException\": {\n         \"type\": \"io.confluent.ksql.util.KsqlException\",\n-        \"message\": \"Upgrades not yet supported for io.confluent.ksql.execution.plan.TableSink\"\n+        \"message\": \"Cannot REPLACE data source: DataSource '`BAR`' has schema = `ID` STRING KEY, `COL1` STRING, `COL2` STRING which is not upgradeable to `ID` STRING KEY, `COL1` STRING(The following columns are changed or missing: [`COL2` STRING])\"\n+      }\n+    },\n+    {\n+      \"name\": \"DML - TABLE - change source\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE baz (id VARCHAR PRIMARY KEY, col1 VARCHAR) WITH (kafka_topic='baz', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1 FROM baz;\"\n+      ],\n+      \"expectedException\": {\n+        \"type\": \"io.confluent.ksql.util.KsqlException\",\n+        \"message\": \"Query is not upgradeable. Plan step of type class io.confluent.ksql.execution.plan.TableSource must have matching topicName. Values differ: foo vs. baz\"\n+      }\n+    },\n+    {\n+      \"name\": \"DML - TABLE - change timestampColumn\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a6d550ff0079b09dcdbe9f624b38de3390dba66"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTA1OTA1Nw==", "bodyText": "Do you have plans to extend the testing done around upgrades?\nIt seems to me that we need testing not only to ensure commands run, but that state isn't corrupted and the outputs are correct.\nE.g. we should be pumping in some initial state, (confirming the output / schemas registered in SR / metastore state), performing the upgrade, then pumping in more state and again confirming the output, SR and metastore state.\nWe likely also need tests around pull queries while upgrades are running.\nThoughts?", "url": "https://github.com/confluentinc/ksql/pull/5922#discussion_r465059057", "createdAt": "2020-08-04T13:43:01Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/test/resources/query-validation-tests/upgrades.json", "diffHunk": "@@ -201,9 +214,79 @@\n         \"CREATE TABLE bar AS SELECT * FROM foo;\",\n         \"CREATE OR REPLACE TABLE bar AS SELECT * FROM foo WHERE col1 = '123';\"\n       ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },\n+    {\n+      \"name\": \"DML - TABLE - add column\",\n+      \"properties\": {\n+        \"ksql.create.or.replace.enabled\": true\n+      },\n+      \"statements\": [\n+        \"CREATE TABLE foo (id VARCHAR PRIMARY KEY, col1 VARCHAR, col2 VARCHAR) WITH (kafka_topic='foo', value_format='JSON');\",\n+        \"CREATE TABLE bar AS SELECT id, col1 FROM foo;\",\n+        \"CREATE OR REPLACE TABLE bar AS SELECT id, col1, col2 FROM foo;\"\n+      ],\n+      \"inputs\": [],\n+      \"outputs\": []\n+    },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a6d550ff0079b09dcdbe9f624b38de3390dba66"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39d650c36ee2bb19f05bb48949211d59cdcc0a4c", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/39d650c36ee2bb19f05bb48949211d59cdcc0a4c", "committedDate": "2020-08-04T20:42:31Z", "message": "test: fix up tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4775, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}