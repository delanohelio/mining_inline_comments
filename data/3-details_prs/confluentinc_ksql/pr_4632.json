{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5OTIyNTcz", "number": 4632, "title": "fix: change default exception handling for timestamp extractors", "bodyText": "fixes #2609\nDescription\nksqlDB currently fails violently whenever a timestamp cannot be extracted from a record. Perhaps more fatally, it also does not log anything to the processing log meaning users that are using the cloud offering of ksql will not be able to see what happened to their queries.\nThis PR addresses both of those concerns and gives users the ability to toggle whether they want the failure to be violent or graceful so that they can choose not to lose data.\nTesting done\nNew unit tests and end to end testing:\nksql> PRINT ts FROM BEGINNING;\nValue format: JSON or KAFKA_STRING\nrowtime: 2/25/20 3:11:47 PM PST, key: <null>, value: {\"TS\":\"10-04-19 12:00:17\"}\nrowtime: 2/25/20 3:11:52 PM PST, key: <null>, value: {\"TS\":\"10-04-19 X 12:00:17\"}\nrowtime: 2/25/20 3:11:55 PM PST, key: <null>, value: {\"TS\":\"10-04-19 12:00:17\"}\n\nksql> CREATE STREAM ts (ts VARCHAR) WITH (value_format='json', kafka_topic='ts', partitions=1, timestamp='ts', timestamp_format='yy-MM-dd HH:mm:ss')\n\nksql> SELECT * FROM ts EMIT CHANGES;\n+--------------------------------------------------------------+--------------------------------------------------------------+--------------------------------------------------------------+\n|ROWTIME                                                       |ROWKEY                                                        |TS                                                            |\n+--------------------------------------------------------------+--------------------------------------------------------------+--------------------------------------------------------------+\n|1271703617000                                                 |null                                                          |10-04-19 12:00:17                                             |\n|1271703617000                                                 |null                                                          |10-04-19 12:00:17                                             |\n^CQuery terminated\n\nksql> SELECT * FROM KSQL_PROCESSING_LOG EMIT CHANGES;\n+--------------+--------------+--------------+--------------+--------------+--------------+\n|ROWTIME       |ROWKEY        |LOGGER        |LEVEL         |TIME          |MESSAGE       |\n+--------------+--------------+--------------+--------------+--------------+--------------+\n|1582672325285 |null          |processing.211|ERROR         |1582672325277 |{TYPE=0, DESER|\n|              |              |78117353354788|              |              |IALIZATIONERRO|\n|              |              |25            |              |              |R={ERRORMESSAG|\n|              |              |              |              |              |E=Text '10-04-|\n|              |              |              |              |              |19 X 12:00:17'|\n|              |              |              |              |              | could not be |\n|              |              |              |              |              |parsed at inde|\n|              |              |              |              |              |x 9, RECORDB64|\n|              |              |              |              |              |=null, CAUSE=[|\n|              |              |              |              |              |]}, RECORDPROC|\n|              |              |              |              |              |ESSINGERROR=nu|\n|              |              |              |              |              |ll, PRODUCTION|\n|              |              |              |              |              |ERROR=null}   |\n\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-02-26T00:53:20Z", "url": "https://github.com/confluentinc/ksql/pull/4632", "merged": true, "mergeCommit": {"oid": "1576af04107915d6aa37fc02158facc0c66d0a0c"}, "closed": true, "closedAt": "2020-03-03T00:44:26Z", "author": {"login": "agavra"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIe_zTgFqTM2NTg2Mjk3MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJ3X2nAFqTM2NzYzMTgyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1ODYyOTcw", "url": "https://github.com/confluentinc/ksql/pull/4632#pullrequestreview-365862970", "createdAt": "2020-02-27T17:38:24Z", "commit": {"oid": "bd10cfba4aab634f85965d8fa5493114f921ce30"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzozODoyNVrOFvauqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzo0Mzo1NVrOFva6Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2NTMyMg==", "bodyText": "You might want to implement from KsqlTimestampExtractor to we can support this on CSAS/CTAS statements too.", "url": "https://github.com/confluentinc/ksql/pull/4632#discussion_r385265322", "createdAt": "2020-02-27T17:38:25Z", "author": {"login": "spena"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/LoggingTimestampExtractor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams.timestamp;\n+\n+import static io.confluent.ksql.serde.util.SerdeProcessingLogMessageFactory.deserializationErrorMsg;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.ksql.logging.processing.ProcessingLogger;\n+import java.util.Objects;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.streams.processor.TimestampExtractor;\n+\n+/**\n+ * A wrapper around {@code TimestampExtractor} that can be configured to suppress any\n+ * errors and instead returns a negative timestamp (indicating to streams that the message\n+ * should be ignored). Additionally, this class ensures that any errors are logged to the\n+ * processing log (even the fatal ones) for visibility.\n+ */\n+public class LoggingTimestampExtractor implements TimestampExtractor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd10cfba4aab634f85965d8fa5493114f921ce30"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI2ODIzOQ==", "bodyText": "Will this allow KSQL to display the row with ROWTIME = -1 in case of a failure?\nI'm trying to understand how the FailOnInvalidTimestamp will work in this situation. If a -1 is found on the row, then the FailOnInvalidTimestamp will throw an exception which this code will catch and log it to the processing log. But it returns a -1 back to stream, so the stream will set it to as ROWTIME, won't it?", "url": "https://github.com/confluentinc/ksql/pull/4632#discussion_r385268239", "createdAt": "2020-02-27T17:43:55Z", "author": {"login": "spena"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/timestamp/LoggingTimestampExtractor.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.execution.streams.timestamp;\n+\n+import static io.confluent.ksql.serde.util.SerdeProcessingLogMessageFactory.deserializationErrorMsg;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import io.confluent.ksql.logging.processing.ProcessingLogger;\n+import java.util.Objects;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.streams.processor.TimestampExtractor;\n+\n+/**\n+ * A wrapper around {@code TimestampExtractor} that can be configured to suppress any\n+ * errors and instead returns a negative timestamp (indicating to streams that the message\n+ * should be ignored). Additionally, this class ensures that any errors are logged to the\n+ * processing log (even the fatal ones) for visibility.\n+ */\n+public class LoggingTimestampExtractor implements TimestampExtractor {\n+\n+  private final TimestampExtractor delegate;\n+  private final ProcessingLogger logger;\n+  private final boolean failOnError;\n+\n+  public LoggingTimestampExtractor(\n+      final TimestampExtractor delegate,\n+      final ProcessingLogger logger,\n+      final boolean failOnError\n+  ) {\n+    this.delegate = Objects.requireNonNull(delegate, \"delegate\");\n+    this.logger = Objects.requireNonNull(logger, \"logger\");\n+    this.failOnError = failOnError;\n+  }\n+\n+  @Override\n+  public long extract(final ConsumerRecord<Object, Object> record, final long partitionTime) {\n+    try {\n+      return delegate.extract(record, partitionTime);\n+    } catch (final Exception e) {\n+      logger.error(deserializationErrorMsg(e, record));\n+      if (failOnError) {\n+        throw e;\n+      }\n+      return -1L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd10cfba4aab634f85965d8fa5493114f921ce30"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1ODc1OTMx", "url": "https://github.com/confluentinc/ksql/pull/4632#pullrequestreview-365875931", "createdAt": "2020-02-27T17:57:28Z", "commit": {"oid": "bd10cfba4aab634f85965d8fa5493114f921ce30"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzo1NzoyOFrOFvbWag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNzo1NzoyOFrOFvbWag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3NTQ5OA==", "bodyText": "Use this for the logger name instead of the id directly:\nfinal QueryId queryId = queryBuilder.getQueryId();\nfinal QueryContext queryContex = source.getProperties().getQueryContext()\nfinal String loggerNamePrefix = QueryLoggerUtil.queryLoggerName(queryId, queryContext);\n\nThis way you will get a more specific logger prefix that tells you where in the query plan the message was generated.", "url": "https://github.com/confluentinc/ksql/pull/4632#discussion_r385275498", "createdAt": "2020-02-27T17:57:28Z", "author": {"login": "rodesai"}, "path": "ksql-streams/src/main/java/io/confluent/ksql/execution/streams/SourceBuilder.java", "diffHunk": "@@ -314,7 +315,13 @@ private static TimestampExtractor timestampExtractor(\n         .map(Column::index)\n         .orElse(-1);\n \n-    return timestampPolicy.create(timestampIndex);\n+    return timestampPolicy.create(\n+        timestampIndex,\n+        ksqlConfig.getBoolean(KsqlConfig.KSQL_TIMESTAMP_THROW_ON_INVALID),\n+        queryBuilder.getProcessingLogContext()\n+            .getLoggerFactory()\n+            .getLogger(queryBuilder.getQueryId().getId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd10cfba4aab634f85965d8fa5493114f921ce30"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1ODc4OTE1", "url": "https://github.com/confluentinc/ksql/pull/4632#pullrequestreview-365878915", "createdAt": "2020-02-27T18:01:53Z", "commit": {"oid": "bd10cfba4aab634f85965d8fa5493114f921ce30"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODowMTo1M1rOFvbfvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxODowMTo1M1rOFvbfvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTI3Nzg4NA==", "bodyText": "I'd use a different message type for this error. Deserialization error messages generally mean the serde couldn't deserialize the record in the topic, and contain a base64 encoded representation of the data inside (in a field called recordB64). The data written out here represents something different - KSQL's view of the row once it's been deserialized.", "url": "https://github.com/confluentinc/ksql/pull/4632#discussion_r385277884", "createdAt": "2020-02-27T18:01:53Z", "author": {"login": "rodesai"}, "path": "ksql-serde/src/main/java/io/confluent/ksql/serde/util/SerdeProcessingLogMessageFactory.java", "diffHunk": "@@ -34,6 +36,20 @@ private SerdeProcessingLogMessageFactory() {\n   public static Function<ProcessingLogConfig, SchemaAndValue> deserializationErrorMsg(\n       final Throwable exception,\n       final Optional<byte[]> record\n+  ) {\n+    return message(exception, () -> record.map(Base64.getEncoder()::encodeToString).orElse(null));\n+  }\n+\n+  public static Function<ProcessingLogConfig, SchemaAndValue> deserializationErrorMsg(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd10cfba4aab634f85965d8fa5493114f921ce30"}, "originalPosition": 17}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd10cfba4aab634f85965d8fa5493114f921ce30", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/bd10cfba4aab634f85965d8fa5493114f921ce30", "committedDate": "2020-02-26T00:50:50Z", "message": "fix: change default exception handling for ksql timestamp extractors"}, "afterCommit": {"oid": "ba8cea08d2b72b5a45e392a565cc43941748ee5b", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/ba8cea08d2b72b5a45e392a565cc43941748ee5b", "committedDate": "2020-02-28T23:22:44Z", "message": "fix: change default exception handling for ksql timestamp extractors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NzY3ODAy", "url": "https://github.com/confluentinc/ksql/pull/4632#pullrequestreview-366767802", "createdAt": "2020-02-29T01:55:52Z", "commit": {"oid": "ba8cea08d2b72b5a45e392a565cc43941748ee5b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba8cea08d2b72b5a45e392a565cc43941748ee5b", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/ba8cea08d2b72b5a45e392a565cc43941748ee5b", "committedDate": "2020-02-28T23:22:44Z", "message": "fix: change default exception handling for ksql timestamp extractors"}, "afterCommit": {"oid": "5b36b47df39ede62e8f28448c0b5b77102df75c0", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/5b36b47df39ede62e8f28448c0b5b77102df75c0", "committedDate": "2020-03-02T18:06:37Z", "message": "fix: change default exception handling for ksql timestamp extractors"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b36b47df39ede62e8f28448c0b5b77102df75c0", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/5b36b47df39ede62e8f28448c0b5b77102df75c0", "committedDate": "2020-03-02T18:06:37Z", "message": "fix: change default exception handling for ksql timestamp extractors"}, "afterCommit": {"oid": "571760b13cea3872e67b19e4210f87eb7bd772e4", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/571760b13cea3872e67b19e4210f87eb7bd772e4", "committedDate": "2020-03-02T21:00:48Z", "message": "fix: change default exception handling for ksql timestamp extractors"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "571760b13cea3872e67b19e4210f87eb7bd772e4", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/571760b13cea3872e67b19e4210f87eb7bd772e4", "committedDate": "2020-03-02T21:00:48Z", "message": "fix: change default exception handling for ksql timestamp extractors"}, "afterCommit": {"oid": "a28de9705b3209a1c5b45fe6b6e10e9724033d16", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/a28de9705b3209a1c5b45fe6b6e10e9724033d16", "committedDate": "2020-03-02T21:11:19Z", "message": "fix: change default exception handling for ksql timestamp extractors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2272e45949129ceea498c4ae945a04bca1c2d613", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/2272e45949129ceea498c4ae945a04bca1c2d613", "committedDate": "2020-03-02T22:53:39Z", "message": "fix: change default exception handling for ksql timestamp extractors"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a28de9705b3209a1c5b45fe6b6e10e9724033d16", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/a28de9705b3209a1c5b45fe6b6e10e9724033d16", "committedDate": "2020-03-02T21:11:19Z", "message": "fix: change default exception handling for ksql timestamp extractors"}, "afterCommit": {"oid": "2272e45949129ceea498c4ae945a04bca1c2d613", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/2272e45949129ceea498c4ae945a04bca1c2d613", "committedDate": "2020-03-02T22:53:39Z", "message": "fix: change default exception handling for ksql timestamp extractors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NjMxODIy", "url": "https://github.com/confluentinc/ksql/pull/4632#pullrequestreview-367631822", "createdAt": "2020-03-03T00:42:14Z", "commit": {"oid": "2272e45949129ceea498c4ae945a04bca1c2d613"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4874, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}