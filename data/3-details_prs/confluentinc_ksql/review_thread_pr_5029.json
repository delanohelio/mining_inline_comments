{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwOTY3MjQw", "number": 5029, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToyMzoyNVrODwc9Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzo0NjozNVrODxpx9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTMyNjkwOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/show-queries.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToyMzoyNVrOGDdpfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDoxNTo0NFrOGDtbCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4NDY3MA==", "bodyText": "Suggest a bullet list:\n\nRUNNING: the query was either started recently or has been running without errors.\nERROR: the query has entered an error state.\nUNRESPONSIVE: the host running the query returned an error when the query status was requested.", "url": "https://github.com/confluentinc/ksql/pull/5029#discussion_r406284670", "createdAt": "2020-04-09T15:23:25Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/show-queries.md", "diffHunk": "@@ -23,6 +23,15 @@ Description\n \r\n `SHOW QUERIES EXTENDED` lists queries running in the cluster in more detail.\r\n \r\n+Query Status\r\n+-----------\r\n+\r\n+`RUNNING`: the query was either just started, or has been running without errors.\r\n+\r\n+`ERROR`: the query has entered an error state.\r\n+\r\n+`UNRESPONSIVE`: the host running the query returned an error when requesting the query status.\r\n+\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e34a12743792dc0963b702acd25a0e31ad456f83"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0MzExMw==", "bodyText": "made it a bullet list", "url": "https://github.com/confluentinc/ksql/pull/5029#discussion_r406543113", "createdAt": "2020-04-10T00:15:44Z", "author": {"login": "stevenpyzhang"}, "path": "docs-md/developer-guide/ksqldb-reference/show-queries.md", "diffHunk": "@@ -23,6 +23,15 @@ Description\n \r\n `SHOW QUERIES EXTENDED` lists queries running in the cluster in more detail.\r\n \r\n+Query Status\r\n+-----------\r\n+\r\n+`RUNNING`: the query was either just started, or has been running without errors.\r\n+\r\n+`ERROR`: the query has entered an error state.\r\n+\r\n+`UNRESPONSIVE`: the host running the query returned an error when requesting the query status.\r\n+\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4NDY3MA=="}, "originalCommit": {"oid": "e34a12743792dc0963b702acd25a0e31ad456f83"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTY0NzY4OnYy", "diffSide": "RIGHT", "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConstants.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo0NDo1NFrOGDg18A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMDo0MDoxNlrOGDtylQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNzAwOA==", "bodyText": "KsqlQueryState makes it sounds like its referring to a state store or underlying state.. May be KsqlQueryStatus is a better name?\nJust a thought. Leave it to you :)", "url": "https://github.com/confluentinc/ksql/pull/5029#discussion_r406337008", "createdAt": "2020-04-09T16:44:54Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConstants.java", "diffHunk": "@@ -44,7 +49,24 @@ private KsqlConstants() {\n   public static final String AVRO_SCHEMA_NAMESPACE = \"io.confluent.ksql.avro_schemas\";\n   public static final String AVRO_SCHEMA_NAME = \"KsqlDataSourceSchema\";\n   public static final String DEFAULT_AVRO_SCHEMA_FULL_NAME =\n-          AVRO_SCHEMA_NAMESPACE + \".\" + AVRO_SCHEMA_NAME;\n+      AVRO_SCHEMA_NAMESPACE + \".\" + AVRO_SCHEMA_NAME;\n+\n+  public enum KsqlQueryState {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a475bdadead4b63164918efa52745e9c2a12ae5"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQxMjAzNw==", "bodyText": "hmm, I see what you mean and I agree. I used state here because we previously had getState for the QueryMetadata object so I just continued using State in the recent changes I made and this current one.\nI'm not sure exactly what we want to be calling this, should we just make the change in this PR to try to use status wherever we can instead of state?", "url": "https://github.com/confluentinc/ksql/pull/5029#discussion_r406412037", "createdAt": "2020-04-09T18:57:12Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConstants.java", "diffHunk": "@@ -44,7 +49,24 @@ private KsqlConstants() {\n   public static final String AVRO_SCHEMA_NAMESPACE = \"io.confluent.ksql.avro_schemas\";\n   public static final String AVRO_SCHEMA_NAME = \"KsqlDataSourceSchema\";\n   public static final String DEFAULT_AVRO_SCHEMA_FULL_NAME =\n-          AVRO_SCHEMA_NAMESPACE + \".\" + AVRO_SCHEMA_NAME;\n+      AVRO_SCHEMA_NAMESPACE + \".\" + AVRO_SCHEMA_NAME;\n+\n+  public enum KsqlQueryState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNzAwOA=="}, "originalCommit": {"oid": "9a475bdadead4b63164918efa52745e9c2a12ae5"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ2OTI3Mw==", "bodyText": "@vinothchandar I think I'm leaning more on the side of just keeping it state for now since I'm keeping the state field in the RunningQuery and QueryDescription response objects for backwards compatibility.\nAny thoughts @rodesai ? The upcoming query error handling would be using this enum.", "url": "https://github.com/confluentinc/ksql/pull/5029#discussion_r406469273", "createdAt": "2020-04-09T20:50:21Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConstants.java", "diffHunk": "@@ -44,7 +49,24 @@ private KsqlConstants() {\n   public static final String AVRO_SCHEMA_NAMESPACE = \"io.confluent.ksql.avro_schemas\";\n   public static final String AVRO_SCHEMA_NAME = \"KsqlDataSourceSchema\";\n   public static final String DEFAULT_AVRO_SCHEMA_FULL_NAME =\n-          AVRO_SCHEMA_NAMESPACE + \".\" + AVRO_SCHEMA_NAME;\n+      AVRO_SCHEMA_NAMESPACE + \".\" + AVRO_SCHEMA_NAME;\n+\n+  public enum KsqlQueryState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNzAwOA=="}, "originalCommit": {"oid": "9a475bdadead4b63164918efa52745e9c2a12ae5"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ5ODgzMg==", "bodyText": "I vote for status to disambiguate from queryable state.", "url": "https://github.com/confluentinc/ksql/pull/5029#discussion_r406498832", "createdAt": "2020-04-09T21:52:35Z", "author": {"login": "rodesai"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConstants.java", "diffHunk": "@@ -44,7 +49,24 @@ private KsqlConstants() {\n   public static final String AVRO_SCHEMA_NAMESPACE = \"io.confluent.ksql.avro_schemas\";\n   public static final String AVRO_SCHEMA_NAME = \"KsqlDataSourceSchema\";\n   public static final String DEFAULT_AVRO_SCHEMA_FULL_NAME =\n-          AVRO_SCHEMA_NAMESPACE + \".\" + AVRO_SCHEMA_NAME;\n+      AVRO_SCHEMA_NAMESPACE + \".\" + AVRO_SCHEMA_NAME;\n+\n+  public enum KsqlQueryState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNzAwOA=="}, "originalCommit": {"oid": "9a475bdadead4b63164918efa52745e9c2a12ae5"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUzMzUzMA==", "bodyText": "error and status go more hand in hand IMO.. I do see this is \"Streams' state\" per se. leave it to you :)", "url": "https://github.com/confluentinc/ksql/pull/5029#discussion_r406533530", "createdAt": "2020-04-09T23:39:47Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConstants.java", "diffHunk": "@@ -44,7 +49,24 @@ private KsqlConstants() {\n   public static final String AVRO_SCHEMA_NAMESPACE = \"io.confluent.ksql.avro_schemas\";\n   public static final String AVRO_SCHEMA_NAME = \"KsqlDataSourceSchema\";\n   public static final String DEFAULT_AVRO_SCHEMA_FULL_NAME =\n-          AVRO_SCHEMA_NAMESPACE + \".\" + AVRO_SCHEMA_NAME;\n+      AVRO_SCHEMA_NAMESPACE + \".\" + AVRO_SCHEMA_NAME;\n+\n+  public enum KsqlQueryState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNzAwOA=="}, "originalCommit": {"oid": "9a475bdadead4b63164918efa52745e9c2a12ae5"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU0OTE0MQ==", "bodyText": "I've changed it to KsqlQueryStatus now", "url": "https://github.com/confluentinc/ksql/pull/5029#discussion_r406549141", "createdAt": "2020-04-10T00:40:16Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConstants.java", "diffHunk": "@@ -44,7 +49,24 @@ private KsqlConstants() {\n   public static final String AVRO_SCHEMA_NAMESPACE = \"io.confluent.ksql.avro_schemas\";\n   public static final String AVRO_SCHEMA_NAME = \"KsqlDataSourceSchema\";\n   public static final String DEFAULT_AVRO_SCHEMA_FULL_NAME =\n-          AVRO_SCHEMA_NAMESPACE + \".\" + AVRO_SCHEMA_NAME;\n+      AVRO_SCHEMA_NAMESPACE + \".\" + AVRO_SCHEMA_NAME;\n+\n+  public enum KsqlQueryState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNzAwOA=="}, "originalCommit": {"oid": "9a475bdadead4b63164918efa52745e9c2a12ae5"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjI5ODU5OnYy", "diffSide": "RIGHT", "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConstants.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTo1NTozM1rOGDnQBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMjoyMzowN1rOGDraqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0MTk5MA==", "bodyText": "nit: I feel like this is better implemented as a method:\npublic static KsqlQueryState fromStreamsState(final KafkaStreams.State state) {\n  return state == KafkaStreams.State.ERROR ? KsqlQueryState.ERROR : KsqlQueryState.RUNNING;\n}\n\nthe benefit is that you avoid the static constructor, which can cause very confusing ClassNotFoundException if it fails due to some errror", "url": "https://github.com/confluentinc/ksql/pull/5029#discussion_r406441990", "createdAt": "2020-04-09T19:55:33Z", "author": {"login": "agavra"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConstants.java", "diffHunk": "@@ -44,7 +49,24 @@ private KsqlConstants() {\n   public static final String AVRO_SCHEMA_NAMESPACE = \"io.confluent.ksql.avro_schemas\";\n   public static final String AVRO_SCHEMA_NAME = \"KsqlDataSourceSchema\";\n   public static final String DEFAULT_AVRO_SCHEMA_FULL_NAME =\n-          AVRO_SCHEMA_NAMESPACE + \".\" + AVRO_SCHEMA_NAME;\n+      AVRO_SCHEMA_NAMESPACE + \".\" + AVRO_SCHEMA_NAME;\n+\n+  public enum KsqlQueryState {\n+    RUNNING,\n+    ERROR,\n+    UNRESPONSIVE,\n+  }\n+\n+  public static final Map<KafkaStreams.State, KsqlQueryState> STREAMS_STATE_TO_KSQL_QUERY_STATE;\n+\n+  static {\n+    final Map<KafkaStreams.State, KsqlQueryState> stateMapping = new HashMap<>();\n+    for (KafkaStreams.State state:KafkaStreams.State.values()) {\n+      stateMapping.put(state, KsqlQueryState.RUNNING);\n+    }\n+    stateMapping.put(KafkaStreams.State.ERROR, KsqlQueryState.ERROR);\n+    STREAMS_STATE_TO_KSQL_QUERY_STATE = ImmutableMap.copyOf(stateMapping);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a475bdadead4b63164918efa52745e9c2a12ae5"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjUxMDI1MQ==", "bodyText": "moved to a method in QueryStatusCount class", "url": "https://github.com/confluentinc/ksql/pull/5029#discussion_r406510251", "createdAt": "2020-04-09T22:23:07Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConstants.java", "diffHunk": "@@ -44,7 +49,24 @@ private KsqlConstants() {\n   public static final String AVRO_SCHEMA_NAMESPACE = \"io.confluent.ksql.avro_schemas\";\n   public static final String AVRO_SCHEMA_NAME = \"KsqlDataSourceSchema\";\n   public static final String DEFAULT_AVRO_SCHEMA_FULL_NAME =\n-          AVRO_SCHEMA_NAMESPACE + \".\" + AVRO_SCHEMA_NAME;\n+      AVRO_SCHEMA_NAMESPACE + \".\" + AVRO_SCHEMA_NAME;\n+\n+  public enum KsqlQueryState {\n+    RUNNING,\n+    ERROR,\n+    UNRESPONSIVE,\n+  }\n+\n+  public static final Map<KafkaStreams.State, KsqlQueryState> STREAMS_STATE_TO_KSQL_QUERY_STATE;\n+\n+  static {\n+    final Map<KafkaStreams.State, KsqlQueryState> stateMapping = new HashMap<>();\n+    for (KafkaStreams.State state:KafkaStreams.State.values()) {\n+      stateMapping.put(state, KsqlQueryState.RUNNING);\n+    }\n+    stateMapping.put(KafkaStreams.State.ERROR, KsqlQueryState.ERROR);\n+    STREAMS_STATE_TO_KSQL_QUERY_STATE = ImmutableMap.copyOf(stateMapping);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0MTk5MA=="}, "originalCommit": {"oid": "9a475bdadead4b63164918efa52745e9c2a12ae5"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzkxMzUwOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListQueriesExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzo0NjozNVrOGFPaQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOTowODozMlrOGFc-zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0ODU0NQ==", "bodyText": "It would be better if CompletableFuture was used here instead of the legacy blocking Future class.\nThat way we wouldn't have to refactor this code when we move to a non blocking model.\nThis is a general point really, we shouldn't be using Future in new code.", "url": "https://github.com/confluentinc/ksql/pull/5029#discussion_r408148545", "createdAt": "2020-04-14T13:46:35Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListQueriesExecutor.java", "diffHunk": "@@ -168,43 +181,55 @@ private static void mergeSimple(\n                 query,\n                 Collections.singletonMap(\n                     new KsqlHostInfoEntity(sessionProperties.getKsqlHostInfo()),\n-                    query.getState()))));\n+                    KsqlConstants.fromStreamsState(\n+                        KafkaStreams.State.valueOf(query.getState()))\n+                ))));\n   }\n \n   private static void mergeExtended(\n-      final List<KsqlEntity> remoteResults,\n+      final Pair<List<KsqlEntity>, Set<HostInfo>> remoteResults,\n       final Map<QueryId, QueryDescription> allResults\n   ) {\n-    final List<QueryDescription> remoteQueryDescriptions = remoteResults.stream()\n+    final List<KsqlEntity> remoteQueries = remoteResults.getLeft();\n+    final List<QueryDescription> remoteQueryDescriptions = remoteQueries.stream()\n         .map(QueryDescriptionList.class::cast)\n         .map(QueryDescriptionList::getQueryDescriptions)\n         .flatMap(List::stream)\n         .collect(Collectors.toList());\n     for (QueryDescription q : remoteQueryDescriptions) {\n       final QueryId queryId = q.getId();\n \n-      // If the query has already been discovered, add to the ksqlQueryHostState mapping\n+      // If the query has already been discovered, add to the ksqlQueryHostStatus mapping\n       if (allResults.containsKey(queryId)) {\n-        for (Map.Entry<KsqlHostInfoEntity, String> entry :\n-            q.getKsqlHostQueryState().entrySet()) {\n+        for (Map.Entry<KsqlHostInfoEntity, KsqlQueryStatus> entry :\n+            q.getKsqlHostQueryStatus().entrySet()) {\n           allResults\n               .get(queryId)\n-              .updateKsqlHostQueryState(entry.getKey(), entry.getValue());\n+              .updateKsqlHostQueryStatus(entry.getKey(), entry.getValue());\n         }\n       } else {\n         allResults.put(queryId, q);\n       }\n     }\n+    \n+    final Set<HostInfo> unresponsiveRemoteHosts = remoteResults.getRight();\n+    for (HostInfo hostInfo: unresponsiveRemoteHosts) {\n+      for (QueryDescription queryDescription: allResults.values()) {\n+        queryDescription.updateKsqlHostQueryStatus(\n+            new KsqlHostInfoEntity(hostInfo.host(), hostInfo.port()),\n+            KsqlQueryStatus.UNRESPONSIVE);\n+      }\n+    }\n   }\n \n-  private static List<KsqlEntity> scatterGather(\n+  private static Pair<List<KsqlEntity>, Set<HostInfo>> scatterGather(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "706d514d69c025f50b00cff571c74d0b76055417"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM3MDg5Mg==", "bodyText": "I can open another PR to change it to use CompletableFuture", "url": "https://github.com/confluentinc/ksql/pull/5029#discussion_r408370892", "createdAt": "2020-04-14T19:08:32Z", "author": {"login": "stevenpyzhang"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListQueriesExecutor.java", "diffHunk": "@@ -168,43 +181,55 @@ private static void mergeSimple(\n                 query,\n                 Collections.singletonMap(\n                     new KsqlHostInfoEntity(sessionProperties.getKsqlHostInfo()),\n-                    query.getState()))));\n+                    KsqlConstants.fromStreamsState(\n+                        KafkaStreams.State.valueOf(query.getState()))\n+                ))));\n   }\n \n   private static void mergeExtended(\n-      final List<KsqlEntity> remoteResults,\n+      final Pair<List<KsqlEntity>, Set<HostInfo>> remoteResults,\n       final Map<QueryId, QueryDescription> allResults\n   ) {\n-    final List<QueryDescription> remoteQueryDescriptions = remoteResults.stream()\n+    final List<KsqlEntity> remoteQueries = remoteResults.getLeft();\n+    final List<QueryDescription> remoteQueryDescriptions = remoteQueries.stream()\n         .map(QueryDescriptionList.class::cast)\n         .map(QueryDescriptionList::getQueryDescriptions)\n         .flatMap(List::stream)\n         .collect(Collectors.toList());\n     for (QueryDescription q : remoteQueryDescriptions) {\n       final QueryId queryId = q.getId();\n \n-      // If the query has already been discovered, add to the ksqlQueryHostState mapping\n+      // If the query has already been discovered, add to the ksqlQueryHostStatus mapping\n       if (allResults.containsKey(queryId)) {\n-        for (Map.Entry<KsqlHostInfoEntity, String> entry :\n-            q.getKsqlHostQueryState().entrySet()) {\n+        for (Map.Entry<KsqlHostInfoEntity, KsqlQueryStatus> entry :\n+            q.getKsqlHostQueryStatus().entrySet()) {\n           allResults\n               .get(queryId)\n-              .updateKsqlHostQueryState(entry.getKey(), entry.getValue());\n+              .updateKsqlHostQueryStatus(entry.getKey(), entry.getValue());\n         }\n       } else {\n         allResults.put(queryId, q);\n       }\n     }\n+    \n+    final Set<HostInfo> unresponsiveRemoteHosts = remoteResults.getRight();\n+    for (HostInfo hostInfo: unresponsiveRemoteHosts) {\n+      for (QueryDescription queryDescription: allResults.values()) {\n+        queryDescription.updateKsqlHostQueryStatus(\n+            new KsqlHostInfoEntity(hostInfo.host(), hostInfo.port()),\n+            KsqlQueryStatus.UNRESPONSIVE);\n+      }\n+    }\n   }\n \n-  private static List<KsqlEntity> scatterGather(\n+  private static Pair<List<KsqlEntity>, Set<HostInfo>> scatterGather(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0ODU0NQ=="}, "originalCommit": {"oid": "706d514d69c025f50b00cff571c74d0b76055417"}, "originalPosition": 154}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3548, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}