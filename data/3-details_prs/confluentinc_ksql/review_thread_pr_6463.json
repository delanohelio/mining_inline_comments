{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2MTAzNTM1", "number": 6463, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoxNTo1OVrOEvZSQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoxNjoyN1rOEvZTOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTMyODAzOnYy", "diffSide": "LEFT", "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/loader/JsonTestLoader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoxNTo1OVrOHkWl2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoxNTo1OVrOHkWl2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4MDkyMw==", "bodyText": "This was pointless as getTestLocation finds the first test in the file with the supplied name - so all get the same location.", "url": "https://github.com/confluentinc/ksql/pull/6463#discussion_r507880923", "createdAt": "2020-10-19T16:15:59Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/main/java/io/confluent/ksql/test/loader/JsonTestLoader.java", "diffHunk": "@@ -146,10 +145,8 @@ private static void throwOnDuplicateNames(final List<? extends Test> testCases)\n         .stream()\n         .filter(e -> e.getValue().size() > 1)\n         .map(e -> \"test name: '\" + e.getKey()\n-            + \"' found in files: \" + e.getValue().stream()\n-            .map(Test::getTestLocation)\n-            .map(TestLocation::toString)\n-            .collect(Collectors.joining(\",\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dd39f62c2567dd7894c227865088fe03b485076"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MTMzMDUwOnYy", "diffSide": "LEFT", "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/rest/RestTestExecutor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxNjoxNjoyN1rOHkWnOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOTowMTowNFrOHlM0sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4MTI3NQ==", "bodyText": "This code was neither waiting for the message to actually be sent, not failing if the message failed to send.", "url": "https://github.com/confluentinc/ksql/pull/6463#discussion_r507881275", "createdAt": "2020-10-19T16:16:27Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/rest/RestTestExecutor.java", "diffHunk": "@@ -215,14 +217,19 @@ private void produceInputs(final Map<String, List<Record>> inputs) {\n           topicInfo.getKeySerializer(),\n           topicInfo.getValueSerializer()\n       )) {\n-        for (final Record record : records) {\n-          producer.send(new ProducerRecord<>(\n-              topicName,\n-              null,\n-              record.timestamp().orElse(0L),\n-              record.key(),\n-              record.value()\n-          ));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9dd39f62c2567dd7894c227865088fe03b485076"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODA3NDkxNg==", "bodyText": "How did the tests pass if the test wasn't waiting for the records to be sent? Was the downstream validation waiting for records to arrive? (Took a quick skim of the code but didn't see it.) Was it just luck that record production tended to be quick?", "url": "https://github.com/confluentinc/ksql/pull/6463#discussion_r508074916", "createdAt": "2020-10-19T21:31:59Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/rest/RestTestExecutor.java", "diffHunk": "@@ -215,14 +217,19 @@ private void produceInputs(final Map<String, List<Record>> inputs) {\n           topicInfo.getKeySerializer(),\n           topicInfo.getValueSerializer()\n       )) {\n-        for (final Record record : records) {\n-          producer.send(new ProducerRecord<>(\n-              topicName,\n-              null,\n-              record.timestamp().orElse(0L),\n-              record.key(),\n-              record.value()\n-          ));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4MTI3NQ=="}, "originalCommit": {"oid": "9dd39f62c2567dd7894c227865088fe03b485076"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc2OTQ1Ng==", "bodyText": "I think there's code that waits for the response for a period of time.  It's mainly about detecting failures.", "url": "https://github.com/confluentinc/ksql/pull/6463#discussion_r508769456", "createdAt": "2020-10-20T19:01:04Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/rest/RestTestExecutor.java", "diffHunk": "@@ -215,14 +217,19 @@ private void produceInputs(final Map<String, List<Record>> inputs) {\n           topicInfo.getKeySerializer(),\n           topicInfo.getValueSerializer()\n       )) {\n-        for (final Record record : records) {\n-          producer.send(new ProducerRecord<>(\n-              topicName,\n-              null,\n-              record.timestamp().orElse(0L),\n-              record.key(),\n-              record.value()\n-          ));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzg4MTI3NQ=="}, "originalCommit": {"oid": "9dd39f62c2567dd7894c227865088fe03b485076"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2537, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}