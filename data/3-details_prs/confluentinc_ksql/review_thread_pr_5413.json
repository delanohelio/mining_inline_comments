{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMjc4OTg5", "number": 5413, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo0NzozNlrOD97YjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDoxODo1N1rOD99SlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjYyNjY4OnYy", "diffSide": "RIGHT", "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/StreamSelect.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxODo0NzozNlrOGXt_bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODo1MDo1OFrOGYBqDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyMzk0OQ==", "bodyText": "github issue?", "url": "https://github.com/confluentinc/ksql/pull/5413#discussion_r427523949", "createdAt": "2020-05-19T18:47:36Z", "author": {"login": "agavra"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/StreamSelect.java", "diffHunk": "@@ -16,30 +16,49 @@\n \n import static java.util.Objects.requireNonNull;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.google.common.collect.ImmutableList;\n import com.google.errorprone.annotations.Immutable;\n+import io.confluent.ksql.name.ColumnName;\n import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n \n @Immutable\n public class StreamSelect<K> implements ExecutionStep<KStreamHolder<K>> {\n \n   private final ExecutionStepPropertiesV1 properties;\n   private final ExecutionStep<KStreamHolder<K>> source;\n+  private final ImmutableList<ColumnName> keyColumnNames;\n   private final ImmutableList<SelectExpression> selectExpressions;\n \n   public StreamSelect(\n+      final ExecutionStepPropertiesV1 props,\n+      final ExecutionStep<KStreamHolder<K>> source,\n+      final List<ColumnName> keyColumnNames,\n+      final List<SelectExpression> selectExpressions\n+  ) {\n+    this.properties = requireNonNull(props, \"props\");\n+    this.source = requireNonNull(source, \"source\");\n+    this.keyColumnNames = ImmutableList.copyOf(keyColumnNames);\n+    this.selectExpressions = ImmutableList.copyOf(selectExpressions);\n+  }\n+\n+  @SuppressWarnings(\"unused\") // Invoked via reflection by Jackson\n+  @JsonCreator\n+  private StreamSelect(\n       @JsonProperty(value = \"properties\", required = true) final ExecutionStepPropertiesV1 props,\n       @JsonProperty(value = \"source\", required = true) final ExecutionStep<KStreamHolder<K>> source,\n+      // keyColumnNames introduced in 0.10.0.\n+      // Can be mandatory once 0.9.0 query plans are unsupported.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51f0b44b9ce4a994ea169712dba30c4a09e7627e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg0NjE1OA==", "bodyText": "#5420", "url": "https://github.com/confluentinc/ksql/pull/5413#discussion_r427846158", "createdAt": "2020-05-20T08:50:58Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/main/java/io/confluent/ksql/execution/plan/StreamSelect.java", "diffHunk": "@@ -16,30 +16,49 @@\n \n import static java.util.Objects.requireNonNull;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n import com.google.common.collect.ImmutableList;\n import com.google.errorprone.annotations.Immutable;\n+import io.confluent.ksql.name.ColumnName;\n import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n \n @Immutable\n public class StreamSelect<K> implements ExecutionStep<KStreamHolder<K>> {\n \n   private final ExecutionStepPropertiesV1 properties;\n   private final ExecutionStep<KStreamHolder<K>> source;\n+  private final ImmutableList<ColumnName> keyColumnNames;\n   private final ImmutableList<SelectExpression> selectExpressions;\n \n   public StreamSelect(\n+      final ExecutionStepPropertiesV1 props,\n+      final ExecutionStep<KStreamHolder<K>> source,\n+      final List<ColumnName> keyColumnNames,\n+      final List<SelectExpression> selectExpressions\n+  ) {\n+    this.properties = requireNonNull(props, \"props\");\n+    this.source = requireNonNull(source, \"source\");\n+    this.keyColumnNames = ImmutableList.copyOf(keyColumnNames);\n+    this.selectExpressions = ImmutableList.copyOf(selectExpressions);\n+  }\n+\n+  @SuppressWarnings(\"unused\") // Invoked via reflection by Jackson\n+  @JsonCreator\n+  private StreamSelect(\n       @JsonProperty(value = \"properties\", required = true) final ExecutionStepPropertiesV1 props,\n       @JsonProperty(value = \"source\", required = true) final ExecutionStep<KStreamHolder<K>> source,\n+      // keyColumnNames introduced in 0.10.0.\n+      // Can be mandatory once 0.9.0 query plans are unsupported.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUyMzk0OQ=="}, "originalCommit": {"oid": "51f0b44b9ce4a994ea169712dba30c4a09e7627e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjkzOTA5OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/QueryPlanTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMDoxODo1N1rOGXxFjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwODo0MTo1N1rOGYBSXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3NDY3MQ==", "bodyText": "derp... did this test never do anything? \ud83d\ude02", "url": "https://github.com/confluentinc/ksql/pull/5413#discussion_r427574671", "createdAt": "2020-05-19T20:18:57Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/QueryPlanTest.java", "diffHunk": "@@ -62,6 +63,7 @@ public void shouldImplementEquals() {\n         .addEqualityGroup(new QueryPlan(sources2, sink1, plan1, id1))\n         .addEqualityGroup(new QueryPlan(sources1, sink2, plan1, id1))\n         .addEqualityGroup(new QueryPlan(sources1, sink1, plan2, id1))\n-        .addEqualityGroup(new QueryPlan(sources1, sink1, plan1, id2));\n+        .addEqualityGroup(new QueryPlan(sources1, sink1, plan1, id2))\n+        .testEquals();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8408c7778a45cdbb4f37e254d866ffd8dd4bf1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg0MDA5NQ==", "bodyText": "Nope, a whole set of these were missing this rather important call.  Only found two classes that had bad impls.", "url": "https://github.com/confluentinc/ksql/pull/5413#discussion_r427840095", "createdAt": "2020-05-20T08:41:57Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/QueryPlanTest.java", "diffHunk": "@@ -62,6 +63,7 @@ public void shouldImplementEquals() {\n         .addEqualityGroup(new QueryPlan(sources2, sink1, plan1, id1))\n         .addEqualityGroup(new QueryPlan(sources1, sink2, plan1, id1))\n         .addEqualityGroup(new QueryPlan(sources1, sink1, plan2, id1))\n-        .addEqualityGroup(new QueryPlan(sources1, sink1, plan1, id2));\n+        .addEqualityGroup(new QueryPlan(sources1, sink1, plan1, id2))\n+        .testEquals();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzU3NDY3MQ=="}, "originalCommit": {"oid": "bd8408c7778a45cdbb4f37e254d866ffd8dd4bf1"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3470, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}