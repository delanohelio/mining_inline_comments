{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzOTAwOTc3", "number": 5621, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODowNTozOVrOEFblrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODowNjo1NlrOEFbngQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTMwMzQ4OnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/schema/ksql/DefaultSqlValueCoercer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODowNTozOVrOGjnYjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzoxMToxN1rOGj7P3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5ODYwNA==", "bodyText": "I don't think it's necessary to create special classes JavaListObject/JsonListObject etc.\nCan just call getList() on the JsonArray to get the List. This should simplify things quite a bit?", "url": "https://github.com/confluentinc/ksql/pull/5621#discussion_r439998604", "createdAt": "2020-06-15T08:05:39Z", "author": {"login": "purplefox"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/schema/ksql/DefaultSqlValueCoercer.java", "diffHunk": "@@ -129,15 +162,19 @@ private static Result coerceStruct(final Object value, final SqlStruct targetTyp\n     return Result.of(coerced);\n   }\n \n-  private static Result coerceArray(final Object value, final SqlArray targetType) {\n-    if (!(value instanceof List<?>)) {\n+  private Result coerceArray(final Object value, final SqlArray targetType) {\n+    final ListObject list;\n+    if (value instanceof List<?>) {\n+      list = JavaListObject.of((List<?>) value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1246c7b8747f755a770ea8208f17d6fe77c7df79"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMyNDA2MQ==", "bodyText": "I had this in an earlier version but it fails for structs nested inside arrays/maps because once getList() is called on the JsonArray, extracting a nested struct-type comes back as a LinkedHashMap rather than a JsonObject. When the LinkedHashMap is passed to coerceStruct(), coerceStruct() throws an exception because DefaultSqlValueCoercer is intended to fail if a caller attempts to coerce a map to a struct.\nThe other solutions I could think of for working around this were more complex than having the special classes JavaListObject/JsonListObject/etc.", "url": "https://github.com/confluentinc/ksql/pull/5621#discussion_r440324061", "createdAt": "2020-06-15T17:11:17Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/schema/ksql/DefaultSqlValueCoercer.java", "diffHunk": "@@ -129,15 +162,19 @@ private static Result coerceStruct(final Object value, final SqlStruct targetTyp\n     return Result.of(coerced);\n   }\n \n-  private static Result coerceArray(final Object value, final SqlArray targetType) {\n-    if (!(value instanceof List<?>)) {\n+  private Result coerceArray(final Object value, final SqlArray targetType) {\n+    final ListObject list;\n+    if (value instanceof List<?>) {\n+      list = JavaListObject.of((List<?>) value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5ODYwNA=="}, "originalCommit": {"oid": "1246c7b8747f755a770ea8208f17d6fe77c7df79"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTMwODE3OnYy", "diffSide": "RIGHT", "path": "ksqldb-parser/src/main/java/io/confluent/ksql/schema/ksql/DefaultSqlValueCoercer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODowNjo1NlrOGjnbcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNzozNzoxOVrOGj8HVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5OTM0NA==", "bodyText": "As previous comment, I don't think these classes are necessary (?)", "url": "https://github.com/confluentinc/ksql/pull/5621#discussion_r439999344", "createdAt": "2020-06-15T08:06:56Z", "author": {"login": "purplefox"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/schema/ksql/DefaultSqlValueCoercer.java", "diffHunk": "@@ -167,4 +208,162 @@ private static Result coerceMap(final Object value, final SqlMap targetType) {\n \n     return Result.of(coerced);\n   }\n+\n+  private interface ListObject {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1246c7b8747f755a770ea8208f17d6fe77c7df79"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMzODI2Mw==", "bodyText": "As above.\nMerging this for now, will open a follow-up if it turns out I've missed something. Thanks!", "url": "https://github.com/confluentinc/ksql/pull/5621#discussion_r440338263", "createdAt": "2020-06-15T17:37:19Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-parser/src/main/java/io/confluent/ksql/schema/ksql/DefaultSqlValueCoercer.java", "diffHunk": "@@ -167,4 +208,162 @@ private static Result coerceMap(final Object value, final SqlMap targetType) {\n \n     return Result.of(coerced);\n   }\n+\n+  private interface ListObject {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTk5OTM0NA=="}, "originalCommit": {"oid": "1246c7b8747f755a770ea8208f17d6fe77c7df79"}, "originalPosition": 166}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3159, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}