{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNzA2MjEy", "number": 6073, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozNzowMlrOEfAuhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzozMTowN1rOFCCpfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTUzMjIyOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DdlCommandExec.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozNzowMlrOHLBTew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODozMzozMlrOHLDOjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNzc1NQ==", "bodyText": "@big-andy-coates @spena\nI noticed that CreateStreamCommand did not have the boolean flag for ifNotExists set here , I thought if this approach is ok , I will add that too and fail the query if its not set and source exists", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r481317755", "createdAt": "2020-09-01T17:37:02Z", "author": {"login": "hemantgs"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DdlCommandExec.java", "diffHunk": "@@ -75,6 +75,13 @@ public DdlCommandResult executeCreateStream(final CreateStreamCommand createStre\n           withQuery,\n           getKsqlTopic(createStream)\n       );\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04546cc0c95c82da1233926eed8a7b69e2b10d19"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0OTI2MA==", "bodyText": "The place to put the check is in the CreateSourceFactory.  You'll need to pass the MetaStore in to the factory's constructor.\nSee DropSourceFactory for an example of the pattern.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r481349260", "createdAt": "2020-09-01T18:33:32Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DdlCommandExec.java", "diffHunk": "@@ -75,6 +75,13 @@ public DdlCommandResult executeCreateStream(final CreateStreamCommand createStre\n           withQuery,\n           getKsqlTopic(createStream)\n       );\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNzc1NQ=="}, "originalCommit": {"oid": "04546cc0c95c82da1233926eed8a7b69e2b10d19"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY4OTAyOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-reference/create-stream.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMjoyNFrOHLC2sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjozMTowM1rOHNLtWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MzE1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the IF NOT EXISTS clause is present, the statement doesn't fail if the\n          \n          \n            \n            stream doesn't exist.\n          \n          \n            \n            If the IF NOT EXISTS clause is present, the statement won't fail if a\n          \n          \n            \n            stream with the same name already exists.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r481343155", "createdAt": "2020-09-01T18:22:24Z", "author": {"login": "big-andy-coates"}, "path": "docs/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -22,6 +22,10 @@ Description\n \r\n Create a new stream with the specified columns and properties.\r\n \r\n+If the IF NOT EXISTS clause is present, the statement doesn't fail if the\r\n+stream doesn't exist.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04546cc0c95c82da1233926eed8a7b69e2b10d19"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4NTM3MA==", "bodyText": "fixed this", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r483585370", "createdAt": "2020-09-04T12:31:03Z", "author": {"login": "hemantgs"}, "path": "docs/developer-guide/ksqldb-reference/create-stream.md", "diffHunk": "@@ -22,6 +22,10 @@ Description\n \r\n Create a new stream with the specified columns and properties.\r\n \r\n+If the IF NOT EXISTS clause is present, the statement doesn't fail if the\r\n+stream doesn't exist.\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MzE1NQ=="}, "originalCommit": {"oid": "04546cc0c95c82da1233926eed8a7b69e2b10d19"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY5MTgzOnYy", "diffSide": "RIGHT", "path": "docs/developer-guide/ksqldb-reference/create-table.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMzoxNlrOHLC4eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjozMToxMFrOHNLtmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MzYxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the IF NOT EXISTS clause is present, the statement doesn't fail if the\n          \n          \n            \n            table doesn't exist.\n          \n          \n            \n            If the IF NOT EXISTS clause is present, the statement won't fail if a\n          \n          \n            \n            table with the same name already exists.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r481343610", "createdAt": "2020-09-01T18:23:16Z", "author": {"login": "big-andy-coates"}, "path": "docs/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -19,6 +19,9 @@ Description\n \r\n Create a new table with the specified columns and properties.\r\n \r\n+If the IF NOT EXISTS clause is present, the statement doesn't fail if the\r\n+table doesn't exist.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04546cc0c95c82da1233926eed8a7b69e2b10d19"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4NTQzNQ==", "bodyText": "this too", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r483585435", "createdAt": "2020-09-04T12:31:10Z", "author": {"login": "hemantgs"}, "path": "docs/developer-guide/ksqldb-reference/create-table.md", "diffHunk": "@@ -19,6 +19,9 @@ Description\n \r\n Create a new table with the specified columns and properties.\r\n \r\n+If the IF NOT EXISTS clause is present, the statement doesn't fail if the\r\n+table doesn't exist.\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MzYxMA=="}, "originalCommit": {"oid": "04546cc0c95c82da1233926eed8a7b69e2b10d19"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTcyOTgzOnYy", "diffSide": "RIGHT", "path": "ksqldb-metastore/src/main/java/io/confluent/ksql/metastore/MetaStoreImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODozNDozM1rOHLDQfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjo0MzoyNlrOHNMEcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0OTc1OA==", "bodyText": "We shouldn't be splitting this into two methods, as this makes it much more likely someone will call putSource and inadvertently overwrite a source that they shouldn't.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r481349758", "createdAt": "2020-09-01T18:34:33Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-metastore/src/main/java/io/confluent/ksql/metastore/MetaStoreImpl.java", "diffHunk": "@@ -77,22 +77,20 @@ public DataSource getSource(final SourceName sourceName) {\n   }\n \n   @Override\n-  public void putSource(final DataSource dataSource, final boolean allowReplace) {\n+  public boolean validateSource(final DataSource dataSource, final boolean allowReplace) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04546cc0c95c82da1233926eed8a7b69e2b10d19"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjAzODQ4Mg==", "bodyText": "That's a good point,\nI looked at DropSourceFactory , even there\n if (dataSource == null) {\n      if (!ifExists) {\n        throw new KsqlException(\"Source \" + sourceName.text() + \" does not exist.\");\n      }\n    }\n\nWe throw an Exception which will Fail the command which should not be the outcome right ,\nThe only place I could find other than DdlCommandExec that had capability to pass along a warning was in KsqlResource.handleKsqlStatements()\nwhere if an exception is thrown in MetaStoreImpl we could possibly catch that and throw a warning like\ncatch (final KsqlStatementException e) {\n      LOG.info(\"Processed unsuccessfully: \" + request + \", reason: \" + e.getMessage());\n      Errors.badStatement(\"\",e.getSqlStatement(),new KsqlEntityList(\n          Arrays.asList(new WarningEntity(e.getSqlStatement(),\"Source Exists\"))\n      ));\n\nEven here the first parameter to badStatement() seems it needs to be an empty string , else the msg is printed in the client in red . What do you suggest we do", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r482038482", "createdAt": "2020-09-02T12:43:49Z", "author": {"login": "hemantgs"}, "path": "ksqldb-metastore/src/main/java/io/confluent/ksql/metastore/MetaStoreImpl.java", "diffHunk": "@@ -77,22 +77,20 @@ public DataSource getSource(final SourceName sourceName) {\n   }\n \n   @Override\n-  public void putSource(final DataSource dataSource, final boolean allowReplace) {\n+  public boolean validateSource(final DataSource dataSource, final boolean allowReplace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0OTc1OA=="}, "originalCommit": {"oid": "04546cc0c95c82da1233926eed8a7b69e2b10d19"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUyNDU0OQ==", "bodyText": "We throw an Exception which will Fail the command which should not be the outcome right ,\n\nThat code looks correct to me for dropping a source.  It means if I say DROP TABLE IF EXISTS FOO that it won't throw if FOO doesn't exist, which is what we want.\nAs to where to put this new check - you'll need two changes:\n\n\nas above, put a check in CreateSourceFactory so that it throws an exception if IF NOT EXIST is not present and a source with the same name already exists.  (Following a similar pattern to DropSourceFactory).\n\n\nIn DdlCommandExec.executeCreateStream and executeCreateTable you will need to add a check to see if a source with the same name already exists and isOrReplace() is false, e.g.\n\n\n    @Override\n    public DdlCommandResult executeCreateStream(final CreateStreamCommand createStream) {\n      final SourceName sourceName = createStream.getSourceName();\n      final DataSource existing = metaStore.getSource(sourceName);\n      if (existing != null && !createStream.isOrReplace()) {\n        return new DdlCommandResult(true, \"Stream \" + sourceName + \" does not exist.\");\n      }\n\n      final KsqlStream<?> ksqlStream = new KsqlStream<>(\n          sql,\n          sourceName,\n          createStream.getSchema(),\n          createStream.getFormats().getOptions(),\n          createStream.getTimestampColumn(),\n          withQuery,\n          getKsqlTopic(createStream)\n      );\n      \n      metaStore.putSource(ksqlStream, createStream.isOrReplace());\n      return new DdlCommandResult(true, \"Stream created\");\n    }", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r482524549", "createdAt": "2020-09-02T22:10:47Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-metastore/src/main/java/io/confluent/ksql/metastore/MetaStoreImpl.java", "diffHunk": "@@ -77,22 +77,20 @@ public DataSource getSource(final SourceName sourceName) {\n   }\n \n   @Override\n-  public void putSource(final DataSource dataSource, final boolean allowReplace) {\n+  public boolean validateSource(final DataSource dataSource, final boolean allowReplace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0OTc1OA=="}, "originalCommit": {"oid": "04546cc0c95c82da1233926eed8a7b69e2b10d19"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU5MTI4Mg==", "bodyText": "That code looks correct to me for dropping a source. It means if I say DROP TABLE IF EXISTS FOO that it won't throw if FOO doesn't exist, which is what we want.\n\n@big-andy-coates I always seem to confuse myself with that part :| , so anyway I have made the changes\ni have made changes to KsqlEngineTest.shouldNotThrowWhenExecutingDuplicateStream() and KsqlEngineTest.shouldThrowWhenExecutingDuplicateTable() , these tests were failing when the query plans for both create source queries had different Kafka topics one had FOO(stream name) and other had BAR, before this PR the test would have failed much before getting to the planning phase, so I have made changes to the queries in the tests , I am unsure if that is alright\nAlso build in Jenkins has failed I get 404 when I try to open the link ,\nWhen I try mvn verify I get\n[INFO] [ERROR] Failed to execute goal on project my-first-test-udf: Could not resolve dependencies for project com.acme.ksql.functions:my-first-test-udf:jar:0.1.0-SNAPSHOT: Could not find artifact io.confluent.ksql:ksqldb-udf:jar:6.1.0-SNAPSHOT in confluent (https://packages.confluent.io/maven/) -> [Help 1]\n[INFO] org.apache.maven.lifecycle.LifecycleExecutionException: Failed to execute goal on project my-first-test-udf: Could not resolve dependencies for project com.acme.ksql.functions:my-first-test-udf:jar:0.1.0-SNAPSHOT: Could not find artifact io.confluent.ksql:ksqldb-udf:jar:6.1.0-SNAPSHOT in confluent (https://packages.confluent.io/maven/)\n\nand it fails\nI am a bit unsure as to how to run all the tests", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r483591282", "createdAt": "2020-09-04T12:43:26Z", "author": {"login": "hemantgs"}, "path": "ksqldb-metastore/src/main/java/io/confluent/ksql/metastore/MetaStoreImpl.java", "diffHunk": "@@ -77,22 +77,20 @@ public DataSource getSource(final SourceName sourceName) {\n   }\n \n   @Override\n-  public void putSource(final DataSource dataSource, final boolean allowReplace) {\n+  public boolean validateSource(final DataSource dataSource, final boolean allowReplace) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0OTc1OA=="}, "originalCommit": {"oid": "04546cc0c95c82da1233926eed8a7b69e2b10d19"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjAzOTE3OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/CreateSourceFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo0MToyNlrOHQZ0-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwOToxOTozNFrOHYfDWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MjQyNg==", "bodyText": "nit: validate params that will be stored in object state; ensuring object does not get into an invalid state. i.e. use requireNonNull.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486962426", "createdAt": "2020-09-11T10:41:26Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/CreateSourceFactory.java", "diffHunk": "@@ -68,20 +72,32 @@ public CreateSourceFactory(final ServiceContext serviceContext) {\n       final ServiceContext serviceContext,\n       final SerdeOptionsSupplier serdeOptionsSupplier,\n       final KeySerdeFactory keySerdeFactory,\n-      final ValueSerdeFactory valueSerdeFactory\n+      final ValueSerdeFactory valueSerdeFactory,\n+      final MetaStore metaStore\n   ) {\n     this.serviceContext = Objects.requireNonNull(serviceContext, \"serviceContext\");\n     this.serdeOptionsSupplier =\n         Objects.requireNonNull(serdeOptionsSupplier, \"serdeOptionsSupplier\");\n     this.keySerdeFactory = Objects.requireNonNull(keySerdeFactory, \"keySerdeFactory\");\n     this.valueSerdeFactory = Objects.requireNonNull(valueSerdeFactory, \"valueSerdeFactory\");\n+    this.metaStore = metaStore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzNjYzMg==", "bodyText": "this is done", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r495436632", "createdAt": "2020-09-26T09:19:34Z", "author": {"login": "hemantgs"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/CreateSourceFactory.java", "diffHunk": "@@ -68,20 +72,32 @@ public CreateSourceFactory(final ServiceContext serviceContext) {\n       final ServiceContext serviceContext,\n       final SerdeOptionsSupplier serdeOptionsSupplier,\n       final KeySerdeFactory keySerdeFactory,\n-      final ValueSerdeFactory valueSerdeFactory\n+      final ValueSerdeFactory valueSerdeFactory,\n+      final MetaStore metaStore\n   ) {\n     this.serviceContext = Objects.requireNonNull(serviceContext, \"serviceContext\");\n     this.serdeOptionsSupplier =\n         Objects.requireNonNull(serdeOptionsSupplier, \"serdeOptionsSupplier\");\n     this.keySerdeFactory = Objects.requireNonNull(keySerdeFactory, \"keySerdeFactory\");\n     this.valueSerdeFactory = Objects.requireNonNull(valueSerdeFactory, \"valueSerdeFactory\");\n+    this.metaStore = metaStore;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MjQyNg=="}, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjA0MzI2OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/CreateSourceFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo0Mjo0N1rOHQZ3Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwOToxOTo0MVrOHYfDXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MzAwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (dataSource != null) {\n          \n          \n            \n                if (dataSource != null && !statement.isOrReplace()) {", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486963007", "createdAt": "2020-09-11T10:42:47Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/CreateSourceFactory.java", "diffHunk": "@@ -115,6 +131,17 @@ public CreateTableCommand createTableCommand(\n       final KsqlConfig ksqlConfig\n   ) {\n     final SourceName sourceName = statement.getName();\n+    final DataSource dataSource = metaStore.getSource(sourceName);\n+\n+    if (dataSource != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzNjYzNw==", "bodyText": "this is done", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r495436637", "createdAt": "2020-09-26T09:19:41Z", "author": {"login": "hemantgs"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/CreateSourceFactory.java", "diffHunk": "@@ -115,6 +131,17 @@ public CreateTableCommand createTableCommand(\n       final KsqlConfig ksqlConfig\n   ) {\n     final SourceName sourceName = statement.getName();\n+    final DataSource dataSource = metaStore.getSource(sourceName);\n+\n+    if (dataSource != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MzAwNw=="}, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjA0NTUwOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/CreateSourceFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo0MzozMlrOHQZ4lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwOToxOTo0NVrOHYfDYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MzM0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String.format(\"Cannot add %s '%s': A %s with the same name already exists\",\n          \n          \n            \n                            sourceType, sourceName.text(), sourceType));\n          \n          \n            \n                        String.format(\"Cannot add stream '%s': A %s with the same name already exists\",\n          \n          \n            \n                            sourceName.text(), sourceType.toLowerCase()));", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486963348", "createdAt": "2020-09-11T10:43:32Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/CreateSourceFactory.java", "diffHunk": "@@ -68,20 +72,32 @@ public CreateSourceFactory(final ServiceContext serviceContext) {\n       final ServiceContext serviceContext,\n       final SerdeOptionsSupplier serdeOptionsSupplier,\n       final KeySerdeFactory keySerdeFactory,\n-      final ValueSerdeFactory valueSerdeFactory\n+      final ValueSerdeFactory valueSerdeFactory,\n+      final MetaStore metaStore\n   ) {\n     this.serviceContext = Objects.requireNonNull(serviceContext, \"serviceContext\");\n     this.serdeOptionsSupplier =\n         Objects.requireNonNull(serdeOptionsSupplier, \"serdeOptionsSupplier\");\n     this.keySerdeFactory = Objects.requireNonNull(keySerdeFactory, \"keySerdeFactory\");\n     this.valueSerdeFactory = Objects.requireNonNull(valueSerdeFactory, \"valueSerdeFactory\");\n+    this.metaStore = metaStore;\n   }\n \n   public CreateStreamCommand createStreamCommand(\n       final CreateStream statement,\n       final KsqlConfig ksqlConfig\n   ) {\n     final SourceName sourceName = statement.getName();\n+    final DataSource dataSource = metaStore.getSource(sourceName);\n+\n+    if (dataSource != null && !statement.isOrReplace()) {\n+      final String sourceType = dataSource.getDataSourceType().getKsqlType();\n+      if (!statement.isNotExists()) {\n+        throw new KsqlException(\n+            String.format(\"Cannot add %s '%s': A %s with the same name already exists\",\n+                sourceType, sourceName.text(), sourceType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzNjY0MA==", "bodyText": "this is done", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r495436640", "createdAt": "2020-09-26T09:19:45Z", "author": {"login": "hemantgs"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/CreateSourceFactory.java", "diffHunk": "@@ -68,20 +72,32 @@ public CreateSourceFactory(final ServiceContext serviceContext) {\n       final ServiceContext serviceContext,\n       final SerdeOptionsSupplier serdeOptionsSupplier,\n       final KeySerdeFactory keySerdeFactory,\n-      final ValueSerdeFactory valueSerdeFactory\n+      final ValueSerdeFactory valueSerdeFactory,\n+      final MetaStore metaStore\n   ) {\n     this.serviceContext = Objects.requireNonNull(serviceContext, \"serviceContext\");\n     this.serdeOptionsSupplier =\n         Objects.requireNonNull(serdeOptionsSupplier, \"serdeOptionsSupplier\");\n     this.keySerdeFactory = Objects.requireNonNull(keySerdeFactory, \"keySerdeFactory\");\n     this.valueSerdeFactory = Objects.requireNonNull(valueSerdeFactory, \"valueSerdeFactory\");\n+    this.metaStore = metaStore;\n   }\n \n   public CreateStreamCommand createStreamCommand(\n       final CreateStream statement,\n       final KsqlConfig ksqlConfig\n   ) {\n     final SourceName sourceName = statement.getName();\n+    final DataSource dataSource = metaStore.getSource(sourceName);\n+\n+    if (dataSource != null && !statement.isOrReplace()) {\n+      final String sourceType = dataSource.getDataSourceType().getKsqlType();\n+      if (!statement.isNotExists()) {\n+        throw new KsqlException(\n+            String.format(\"Cannot add %s '%s': A %s with the same name already exists\",\n+                sourceType, sourceName.text(), sourceType));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MzM0OA=="}, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjA0NjQxOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/CreateSourceFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo0Mzo1M1rOHQZ5MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwOToxOTo1MFrOHYfDaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MzUwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        String.format(\"Cannot add %s '%s': A %s with the same name already exists\",\n          \n          \n            \n                            sourceType, sourceName.text(), sourceType));\n          \n          \n            \n                        String.format(\"Cannot add table '%s': A %s with the same name already exists\",\n          \n          \n            \n                            sourceName.text(), sourceType.toLowerCase()));", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486963504", "createdAt": "2020-09-11T10:43:53Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/CreateSourceFactory.java", "diffHunk": "@@ -115,6 +131,17 @@ public CreateTableCommand createTableCommand(\n       final KsqlConfig ksqlConfig\n   ) {\n     final SourceName sourceName = statement.getName();\n+    final DataSource dataSource = metaStore.getSource(sourceName);\n+\n+    if (dataSource != null) {\n+      final String sourceType = dataSource.getDataSourceType().getKsqlType();\n+      if (!statement.isNotExists()) {\n+        throw new KsqlException(\n+            String.format(\"Cannot add %s '%s': A %s with the same name already exists\",\n+                sourceType, sourceName.text(), sourceType));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzNjY0OA==", "bodyText": "this is done", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r495436648", "createdAt": "2020-09-26T09:19:50Z", "author": {"login": "hemantgs"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/CreateSourceFactory.java", "diffHunk": "@@ -115,6 +131,17 @@ public CreateTableCommand createTableCommand(\n       final KsqlConfig ksqlConfig\n   ) {\n     final SourceName sourceName = statement.getName();\n+    final DataSource dataSource = metaStore.getSource(sourceName);\n+\n+    if (dataSource != null) {\n+      final String sourceType = dataSource.getDataSourceType().getKsqlType();\n+      if (!statement.isNotExists()) {\n+        throw new KsqlException(\n+            String.format(\"Cannot add %s '%s': A %s with the same name already exists\",\n+                sourceType, sourceName.text(), sourceType));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2MzUwNA=="}, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjA1NTgwOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DdlCommandExec.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo0Njo1N1rOHQZ-rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODo1NzowOFrOHu51fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NDkxMA==", "bodyText": "Isn't this check now redundant, given there is code in CreateSourceFactory to do this now?  We should let the code do what it used to do, which is throw an exception, not return a success code!", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486964910", "createdAt": "2020-09-11T10:46:57Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DdlCommandExec.java", "diffHunk": "@@ -66,6 +66,16 @@ private Executor(final String sql, final boolean withQuery) {\n \n     @Override\n     public DdlCommandResult executeCreateStream(final CreateStreamCommand createStream) {\n+      final SourceName sourceName = createStream.getSourceName();\n+      final DataSource dataSource = metaStore.getSource(sourceName);\n+\n+      if (dataSource != null && !createStream.isOrReplace()) {\n+        return new DdlCommandResult(true,\n+            String.format(\"Cannot add stream %s: A stream with the same name \"\n+                    + \"already exists.\",\n+                sourceName));\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzNzA1Ng==", "bodyText": "@big-andy-coates The code in CreateSourceFactory checks if a dataSource  already exists , if isOrReplace() is not set and ifNotExists is also not set and throws exception , which seems right\nIf the code passes the checks in that gate ,it means in DdlCommandExec it would mean the ifNotExists flag is set to true and we need to ensure that the statement does NOT fail ?", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r495437056", "createdAt": "2020-09-26T09:24:44Z", "author": {"login": "hemantgs"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DdlCommandExec.java", "diffHunk": "@@ -66,6 +66,16 @@ private Executor(final String sql, final boolean withQuery) {\n \n     @Override\n     public DdlCommandResult executeCreateStream(final CreateStreamCommand createStream) {\n+      final SourceName sourceName = createStream.getSourceName();\n+      final DataSource dataSource = metaStore.getSource(sourceName);\n+\n+      if (dataSource != null && !createStream.isOrReplace()) {\n+        return new DdlCommandResult(true,\n+            String.format(\"Cannot add stream %s: A stream with the same name \"\n+                    + \"already exists.\",\n+                sourceName));\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NDkxMA=="}, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAxNjc4MA==", "bodyText": "Seems redundant, but it is what DROP IF NOT EXIST does too. It has a check in the DropSourceCommand and another in this class, which returns the DdlCommandResult message without causing a failure.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r516016780", "createdAt": "2020-11-02T14:40:43Z", "author": {"login": "spena"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DdlCommandExec.java", "diffHunk": "@@ -66,6 +66,16 @@ private Executor(final String sql, final boolean withQuery) {\n \n     @Override\n     public DdlCommandResult executeCreateStream(final CreateStreamCommand createStream) {\n+      final SourceName sourceName = createStream.getSourceName();\n+      final DataSource dataSource = metaStore.getSource(sourceName);\n+\n+      if (dataSource != null && !createStream.isOrReplace()) {\n+        return new DdlCommandResult(true,\n+            String.format(\"Cannot add stream %s: A stream with the same name \"\n+                    + \"already exists.\",\n+                sourceName));\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NDkxMA=="}, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0NDEyNg==", "bodyText": "I figured out why we need this repeated code. Turns out that CreateSourceFactory is only called for CREATE without queries statements. For CREATE AS, a different code path is called, which creates the Create command similar to the CreateSourceFactory, but without the factory validations and with more parameters. That path is EngineExecutor.maybeCreateSinkDdl.\nI was thinking on refactor the code, but seems it requires several changes. For now, I leave this temporary and do a check inside the maybeCreateSinkDdl for the isNotExists value. I'll do the refactor in another PR.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r518944126", "createdAt": "2020-11-06T18:57:08Z", "author": {"login": "spena"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DdlCommandExec.java", "diffHunk": "@@ -66,6 +66,16 @@ private Executor(final String sql, final boolean withQuery) {\n \n     @Override\n     public DdlCommandResult executeCreateStream(final CreateStreamCommand createStream) {\n+      final SourceName sourceName = createStream.getSourceName();\n+      final DataSource dataSource = metaStore.getSource(sourceName);\n+\n+      if (dataSource != null && !createStream.isOrReplace()) {\n+        return new DdlCommandResult(true,\n+            String.format(\"Cannot add stream %s: A stream with the same name \"\n+                    + \"already exists.\",\n+                sourceName));\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NDkxMA=="}, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjA1NjY0OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DdlCommandExec.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo0NzoxMFrOHQZ_KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo0NzoxMFrOHQZ_KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NTAzMg==", "bodyText": "Isn't this check now redundant, given there is code in CreateSourceFactory to do this now?  We should let the code do what it used to do, which is throw an exception, not return a success code!", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486965032", "createdAt": "2020-09-11T10:47:10Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DdlCommandExec.java", "diffHunk": "@@ -75,12 +85,22 @@ public DdlCommandResult executeCreateStream(final CreateStreamCommand createStre\n           withQuery,\n           getKsqlTopic(createStream)\n       );\n+\n       metaStore.putSource(ksqlStream, createStream.isOrReplace());\n       return new DdlCommandResult(true, \"Stream created\");\n     }\n \n     @Override\n     public DdlCommandResult executeCreateTable(final CreateTableCommand createTable) {\n+      final SourceName sourceName = createTable.getSourceName();\n+      final DataSource dataSource = metaStore.getSource(sourceName);\n+\n+      if (dataSource != null && !createTable.isOrReplace()) {\n+        return new DdlCommandResult(true,\n+            String.format(\"Cannot add table %s: A table with the same name \"\n+                    + \"already exists.\",\n+                sourceName));\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjA2MTAxOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/CreateSourceFactoryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo0ODoyMFrOHQaBkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo0ODoyMFrOHQaBkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NTY0OA==", "bodyText": "Add another two tests testing it does NOT throw if IF NOT EXIST is set.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486965648", "createdAt": "2020-09-11T10:48:20Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/CreateSourceFactoryTest.java", "diffHunk": "@@ -904,6 +921,41 @@ public void shouldThrowIfTableIsMissingPrimaryKey() {\n         containsString(\"Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\"));\n   }\n \n+  @Test\n+  public void shouldThrowIfStreamExits() {\n+    // Given:\n+    final CreateStream ddlStatement =\n+        new CreateStream(SOME_NAME, STREAM_ELEMENTS, false, false, withProperties);\n+\n+    // When:\n+    final Exception e = assertThrows(\n+        KsqlException.class, () -> createSourceFactory\n+            .createStreamCommand(ddlStatement, ksqlConfig));\n+\n+    // Then:\n+    assertThat(e.getMessage(),\n+        containsString(\"A STREAM with the same name already exists\"));\n+  }\n+\n+  @Test\n+  public void shouldThrowIfTableExits() {\n+    //Given\n+    final CreateTable ddlStatement = new CreateTable(TABLE_NAME,\n+        TableElements.of(\n+            tableElement(PRIMARY_KEY, \"COL1\", new Type(BIGINT)),\n+            tableElement(VALUE, \"COL2\", new Type(SqlTypes.STRING))),\n+        false, false, withProperties);\n+\n+    // When:\n+    final Exception e = assertThrows(\n+        KsqlException.class, () -> createSourceFactory\n+            .createTableCommand(ddlStatement, ksqlConfig));\n+\n+    // Then:\n+    assertThat(e.getMessage(),\n+        containsString(\"A TABLE with the same name already exists\"));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjA2MjQzOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/DdlCommandExecTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo0ODo1MVrOHQaCdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo0ODo1MVrOHQaCdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NTg3Ng==", "bodyText": "This test change should be reverted, right?", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486965876", "createdAt": "2020-09-11T10:48:51Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/DdlCommandExecTest.java", "diffHunk": "@@ -271,17 +271,18 @@ public void shouldDropMissingType() {\n   }\n \n   @Test\n-  public void shouldFailAddDuplicateStreamWithoutReplace() {\n+  public void shouldWarnAddDuplicateStreamWithoutReplace() {\n     // Given:\n     givenCreateStream();\n     cmdExec.execute(SQL_TEXT, createStream, false);\n \n     // When:\n     givenCreateStream(SCHEMA2, false);\n-    final KsqlException e = assertThrows(KsqlException.class, () -> cmdExec.execute(SQL_TEXT, createStream, false));\n+    final DdlCommandResult result =cmdExec.execute(SQL_TEXT, createStream, false);\n \n     // Then:\n-    assertThat(e.getMessage(), containsString(\"A stream with the same name already exists\"));\n+    assertThat(\"Expected successful execution\", result.isSuccess());\n+    assertThat(result.getMessage(), containsString(\"A stream with the same name already exists\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjA2NzIyOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/KsqlEngineTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo1MDoyMFrOHQaFTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjowNTo1N1rOHzBLFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NjYwNw==", "bodyText": "This change should be reverted.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486966607", "createdAt": "2020-09-11T10:50:20Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/KsqlEngineTest.java", "diffHunk": "@@ -981,27 +981,21 @@ public void shouldNotThrowWhenPreparingDuplicateTable() {\n   public void shouldThrowWhenExecutingDuplicateTable() {\n     // Given:\n     final List<ParsedStatement> parsed = ksqlEngine.parse(\n-        \"CREATE TABLE FOO AS SELECT * FROM TEST2; \"\n+        \"CREATE TABLE FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM TEST2; \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI1ODY0Ng==", "bodyText": "This is a new test now that verifies the IF NOT EXISTS works.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r523258646", "createdAt": "2020-11-13T22:05:57Z", "author": {"login": "spena"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/KsqlEngineTest.java", "diffHunk": "@@ -981,27 +981,21 @@ public void shouldNotThrowWhenPreparingDuplicateTable() {\n   public void shouldThrowWhenExecutingDuplicateTable() {\n     // Given:\n     final List<ParsedStatement> parsed = ksqlEngine.parse(\n-        \"CREATE TABLE FOO AS SELECT * FROM TEST2; \"\n+        \"CREATE TABLE FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM TEST2; \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NjYwNw=="}, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjA2Nzc0OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/KsqlEngineTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo1MDozMFrOHQaFog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo1MDozMFrOHQaFog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NjY5MA==", "bodyText": "This change should be reverted.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486966690", "createdAt": "2020-09-11T10:50:30Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/KsqlEngineTest.java", "diffHunk": "@@ -981,27 +981,21 @@ public void shouldNotThrowWhenPreparingDuplicateTable() {\n   public void shouldThrowWhenExecutingDuplicateTable() {\n     // Given:\n     final List<ParsedStatement> parsed = ksqlEngine.parse(\n-        \"CREATE TABLE FOO AS SELECT * FROM TEST2; \"\n+        \"CREATE TABLE FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM TEST2; \"\n             + \"CREATE TABLE FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM TEST2;\");\n \n     givenStatementAlreadyExecuted(parsed.get(0));\n \n-    final PreparedStatement<?> prepared = prepare(parsed.get(1));\n+    final PreparedStatement<?> prepared = ksqlEngine.prepare(parsed.get(1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjA2Nzk5OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/KsqlEngineTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo1MDozNVrOHQaFxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo1MDozNVrOHQaFxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NjcyNg==", "bodyText": "This change should be reverted.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486966726", "createdAt": "2020-09-11T10:50:35Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/KsqlEngineTest.java", "diffHunk": "@@ -981,27 +981,21 @@ public void shouldNotThrowWhenPreparingDuplicateTable() {\n   public void shouldThrowWhenExecutingDuplicateTable() {\n     // Given:\n     final List<ParsedStatement> parsed = ksqlEngine.parse(\n-        \"CREATE TABLE FOO AS SELECT * FROM TEST2; \"\n+        \"CREATE TABLE FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM TEST2; \"\n             + \"CREATE TABLE FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM TEST2;\");\n \n     givenStatementAlreadyExecuted(parsed.get(0));\n \n-    final PreparedStatement<?> prepared = prepare(parsed.get(1));\n+    final PreparedStatement<?> prepared = ksqlEngine.prepare(parsed.get(1));\n \n     // When:\n-    final KsqlStatementException e = assertThrows(\n-        KsqlStatementException.class,\n-        () -> ksqlEngine.execute(\n-            serviceContext,\n-            ConfiguredStatement.of(prepared, new HashMap<>(), KSQL_CONFIG)\n-        )\n+    ExecuteResult executeResult = ksqlEngine.execute(\n+        serviceContext,\n+        of(prepared, new HashMap<>(), KSQL_CONFIG)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjA2ODE3OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/KsqlEngineTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo1MDozOVrOHQaF3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo1MDozOVrOHQaF3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2Njc1MQ==", "bodyText": "This change should be reverted.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486966751", "createdAt": "2020-09-11T10:50:39Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/KsqlEngineTest.java", "diffHunk": "@@ -981,27 +981,21 @@ public void shouldNotThrowWhenPreparingDuplicateTable() {\n   public void shouldThrowWhenExecutingDuplicateTable() {\n     // Given:\n     final List<ParsedStatement> parsed = ksqlEngine.parse(\n-        \"CREATE TABLE FOO AS SELECT * FROM TEST2; \"\n+        \"CREATE TABLE FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM TEST2; \"\n             + \"CREATE TABLE FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM TEST2;\");\n \n     givenStatementAlreadyExecuted(parsed.get(0));\n \n-    final PreparedStatement<?> prepared = prepare(parsed.get(1));\n+    final PreparedStatement<?> prepared = ksqlEngine.prepare(parsed.get(1));\n \n     // When:\n-    final KsqlStatementException e = assertThrows(\n-        KsqlStatementException.class,\n-        () -> ksqlEngine.execute(\n-            serviceContext,\n-            ConfiguredStatement.of(prepared, new HashMap<>(), KSQL_CONFIG)\n-        )\n+    ExecuteResult executeResult = ksqlEngine.execute(\n+        serviceContext,\n+        of(prepared, new HashMap<>(), KSQL_CONFIG)\n     );\n \n     // Then:\n-    assertThat(e, rawMessage(is(\n-        \"Cannot add table 'FOO': A table with the same name already exists\")));\n-    assertThat(e, statementText(is(\n-        \"CREATE TABLE FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM TEST2;\")));\n+    assertThat(executeResult.getQuery(), is(not(Optional.empty())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjA2ODUzOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/KsqlEngineTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo1MDo0N1rOHQaGGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo1MDo0N1rOHQaGGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2NjgxMA==", "bodyText": "This change should be reverted.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486966810", "createdAt": "2020-09-11T10:50:47Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/engine/KsqlEngineTest.java", "diffHunk": "@@ -1036,32 +1030,24 @@ public void shouldNotThrowWhenPreparingDuplicateStream() {\n   }\n \n   @Test\n-  public void shouldThrowWhenExecutingDuplicateStream() {\n+  public void shouldNotThrowWhenExecutingDuplicateStream() {\n     // Given:\n     final List<ParsedStatement> parsed = ksqlEngine.parse(\n-        \"CREATE STREAM FOO AS SELECT * FROM ORDERS; \"\n+        \"CREATE STREAM FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM ORDERS; \"\n             + \"CREATE STREAM FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM ORDERS;\");\n \n     givenStatementAlreadyExecuted(parsed.get(0));\n \n     final PreparedStatement<?> prepared = ksqlEngine.prepare(parsed.get(1));\n \n     // When:\n-    final KsqlStatementException e = assertThrows(\n-        KsqlStatementException.class,\n-        () -> ksqlEngine.execute(\n-            serviceContext,\n-            of(prepared, new HashMap<>(), KSQL_CONFIG)\n-        )\n+    ExecuteResult executeResult = ksqlEngine.execute(\n+        serviceContext,\n+        of(prepared, new HashMap<>(), KSQL_CONFIG)\n     );\n \n     // Then:\n-    assertThat(e, rawMessage(\n-        is(\n-            \"Cannot add stream 'FOO': A stream with the same name already exists\")));\n-    assertThat(e, statementText(\n-        is(\n-            \"CREATE STREAM FOO WITH (KAFKA_TOPIC='BAR') AS SELECT * FROM ORDERS;\")));\n+    assertThat(executeResult.getQuery(), is(not(Optional.empty())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjA2ODczOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo1MDo1MlrOHQaGPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMDo1MDo1MlrOHQaGPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Njk2Njg0NQ==", "bodyText": "This change should be reverted.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r486966845", "createdAt": "2020-09-11T10:50:52Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/resources/KsqlResource.java", "diffHunk": "@@ -63,6 +63,7 @@\n import io.confluent.ksql.version.metrics.ActivenessRegistrar;\n import java.net.URL;\n import java.time.Duration;\n+import java.util.Arrays;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa376379e975aebdaa414b59d5f8ebd7616cb433"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzg4MTM2OnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/CreateSourceFactoryTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNDo0Mzo1MVrOHsHS_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNDo0Mzo1MVrOHsHS_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAxODk0MQ==", "bodyText": "Could you add two more tests shouldNotThrowWhenCreateStreamIfNotExistsIsSet and same for a table?", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r516018941", "createdAt": "2020-11-02T14:43:51Z", "author": {"login": "spena"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/ddl/commands/CreateSourceFactoryTest.java", "diffHunk": "@@ -911,6 +929,41 @@ public void shouldThrowIfTableIsMissingPrimaryKey() {\n         containsString(\"Tables require a PRIMARY KEY. Please define the PRIMARY KEY.\"));\n   }\n \n+  @Test\n+  public void shouldThrowIfStreamExits() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e21ffdca8e2558c7baef50a474643a2d260bd2d"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzg4Nzk4OnYy", "diffSide": "RIGHT", "path": "ksqldb-version-metrics-client/src/main/java/io/confluent/support/metrics/BaseMetricsReporter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNDo0NToyMFrOHsHXEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNDo0NToyMFrOHsHXEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjAxOTk4NQ==", "bodyText": "Is this part of the changes? Should it be reverted?", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r516019985", "createdAt": "2020-11-02T14:45:20Z", "author": {"login": "spena"}, "path": "ksqldb-version-metrics-client/src/main/java/io/confluent/support/metrics/BaseMetricsReporter.java", "diffHunk": "@@ -109,11 +109,11 @@ public void init() {\n \n     final String endpointHttp = supportConfig.getEndpointHttp();\n     final String endpointHttps = supportConfig.getEndpointHttps();\n-    final String proxyURI = supportConfig.getProxy();\n+    final String proxyUri = supportConfig.getProxy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e21ffdca8e2558c7baef50a474643a2d260bd2d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4MDQ4OTgxOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/schema/ksql/inference/SchemaRegisterInjector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjowNToxMVrOHzBKEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMjowNToxMVrOHzBKEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI1ODM4NQ==", "bodyText": "I had to build the query information from the plan instead of executing it. This avoids failing with an error if the IF NOT EXISTS keyword is used in the CREATE_AS statement. Also, this seems a better approach than execution 'cause this injector is only registering the schema in SR.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r523258385", "createdAt": "2020-11-13T22:05:11Z", "author": {"login": "spena"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/schema/ksql/inference/SchemaRegisterInjector.java", "diffHunk": "@@ -110,26 +109,28 @@ private void registerForCreateSource(final ConfiguredStatement<? extends CreateS\n   }\n \n   private void registerForCreateAs(final ConfiguredStatement<? extends CreateAsSelect> cas) {\n-    final ServiceContext sandboxServiceContext = SandboxedServiceContext.create(serviceContext);\n-    final ExecuteResult executeResult = executionContext\n-        .createSandbox(sandboxServiceContext)\n-        .execute(sandboxServiceContext, cas);\n-\n-    final PersistentQueryMetadata queryMetadata = (PersistentQueryMetadata) executeResult\n-        .getQuery()\n-        .orElseThrow(() -> new KsqlStatementException(\n-            \"Could not determine output schema for query due to error: \"\n-                + executeResult.getCommandResult(),\n-            cas.getStatementText()\n-        ));\n+    final CreateSourceCommand createSourceCommand;\n+\n+    try {\n+      final ServiceContext sandboxServiceContext = SandboxedServiceContext.create(serviceContext);\n+      createSourceCommand = (CreateSourceCommand)\n+          executionContext.createSandbox(sandboxServiceContext)\n+              .plan(sandboxServiceContext, cas)\n+              .getDdlCommand()\n+              .get();\n+    } catch (final Exception e) {\n+      throw new KsqlStatementException(\n+          \"Could not determine output schema for query due to error: \"\n+              + e.getMessage(), cas.getStatementText(), e);\n+    }\n \n     registerSchemas(\n-        queryMetadata.getLogicalSchema(),\n-        queryMetadata.getResultTopic().getKafkaTopicName(),\n-        queryMetadata.getResultTopic().getKeyFormat().getFormatInfo(),\n-        queryMetadata.getPhysicalSchema().keySchema().features(),\n-        queryMetadata.getResultTopic().getValueFormat().getFormatInfo(),\n-        queryMetadata.getPhysicalSchema().valueSchema().features(),\n+        createSourceCommand.getSchema(),\n+        createSourceCommand.getTopicName(),\n+        createSourceCommand.getFormats().getKeyFormat(),\n+        createSourceCommand.getFormats().getKeyFeatures(),\n+        createSourceCommand.getFormats().getValueFormat(),\n+        createSourceCommand.getFormats().getValueFeatures(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1ea1535fbf00211e33449cddf2ba64792c1b9c3"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Njg0ODYzOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DdlCommandExec.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzozMTowN1rOIA_uLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMjowODoxMVrOIBDjDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxNDkyNA==", "bodyText": "nit: i think we should use dataSource.getDataSourceType().getKsqlType() here and in executeCreateTable", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r537914924", "createdAt": "2020-12-07T23:31:07Z", "author": {"login": "jzaralim"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DdlCommandExec.java", "diffHunk": "@@ -81,6 +81,16 @@ private Executor(\n \n     @Override\n     public DdlCommandResult executeCreateStream(final CreateStreamCommand createStream) {\n+      final SourceName sourceName = createStream.getSourceName();\n+      final DataSource dataSource = metaStore.getSource(sourceName);\n+\n+      if (dataSource != null && !createStream.isOrReplace()) {\n+        return new DdlCommandResult(true,\n+            String.format(\"Cannot add stream %s: A stream with the same name \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a1c44072fa8f33ae5d1faaa185bbabf1c066525"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk3NzYxNA==", "bodyText": "Thanks. I updated the PR.", "url": "https://github.com/confluentinc/ksql/pull/6073#discussion_r537977614", "createdAt": "2020-12-08T02:08:11Z", "author": {"login": "spena"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/ddl/commands/DdlCommandExec.java", "diffHunk": "@@ -81,6 +81,16 @@ private Executor(\n \n     @Override\n     public DdlCommandResult executeCreateStream(final CreateStreamCommand createStream) {\n+      final SourceName sourceName = createStream.getSourceName();\n+      final DataSource dataSource = metaStore.getSource(sourceName);\n+\n+      if (dataSource != null && !createStream.isOrReplace()) {\n+        return new DdlCommandResult(true,\n+            String.format(\"Cannot add stream %s: A stream with the same name \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkxNDkyNA=="}, "originalCommit": {"oid": "9a1c44072fa8f33ae5d1faaa185bbabf1c066525"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2927, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}