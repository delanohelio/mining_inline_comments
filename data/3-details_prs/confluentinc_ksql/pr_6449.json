{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MDA0MzY5", "number": 6449, "title": "chore: clean up SR key intergration", "bodyText": "Description\nNearly completes the work for #6394 and #6395 - I haven't done any work around cleaning up AvroUtil because I think we should just remove it (c.f. #6133). If we merge #6452 first, then I can go ahead and close the two issues above and make the constants private.\nTesting done\nUpdated all the unit tests and added new ones where appropriate\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-10-16T17:43:42Z", "url": "https://github.com/confluentinc/ksql/pull/6449", "merged": true, "mergeCommit": {"oid": "3d697d805ea670bcc180f1d96661e5f938f78b33"}, "closed": true, "closedAt": "2020-10-16T23:32:03Z", "author": {"login": "agavra"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdTKQg0gH2gAyNTA1MDA0MzY5OjQzN2VmNGJmMDhhOTAyMGQyM2YzMTUzMDY3MTFkOGUwOTBlNDczYWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTO7lcgFqTUxMDg0NTQ0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "437ef4bf08a9020d23f315306711d8e090e473aa", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/437ef4bf08a9020d23f315306711d8e090e473aa", "committedDate": "2020-10-16T17:58:53Z", "message": "chore: clean up SR key intergration"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5d6c9c49407ca5c69bcff88d2977081079029a89", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/5d6c9c49407ca5c69bcff88d2977081079029a89", "committedDate": "2020-10-16T17:43:00Z", "message": "chore: clean up SR key intergration"}, "afterCommit": {"oid": "437ef4bf08a9020d23f315306711d8e090e473aa", "author": {"user": {"login": "agavra", "name": "Almog Gavra"}}, "url": "https://github.com/confluentinc/ksql/commit/437ef4bf08a9020d23f315306711d8e090e473aa", "committedDate": "2020-10-16T17:58:53Z", "message": "chore: clean up SR key intergration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwODQ1NDQw", "url": "https://github.com/confluentinc/ksql/pull/6449#pullrequestreview-510845440", "createdAt": "2020-10-16T23:25:04Z", "commit": {"oid": "437ef4bf08a9020d23f315306711d8e090e473aa"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMzoyNTowNFrOHjSOjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQyMzoyNToxMlrOHjSOrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MDg0NQ==", "bodyText": "Is this functional?", "url": "https://github.com/confluentinc/ksql/pull/6449#discussion_r506760845", "createdAt": "2020-10-16T23:25:04Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/topic/TopicDeleteInjector.java", "diffHunk": "@@ -100,26 +98,18 @@ public TopicDeleteInjector(\n \n     if (source != null) {\n       checkTopicRefs(source);\n-      try {\n-        ExecutorUtil.executeWithRetries(\n-            () -> topicClient.deleteTopics(ImmutableList.of(source.getKafkaTopicName())),\n-            ExecutorUtil.RetryBehaviour.ALWAYS);\n-      } catch (final Exception e) {\n-        throw new RuntimeException(\"Could not delete the corresponding kafka topic: \"\n-                + source.getKafkaTopicName(), e);\n-      }\n \n+      deleteTopic(source);\n+\n+      final Closer closer = Closer.create();\n+      deleteValueSubject(source);\n+      deleteKeySubject(source);\n       try {\n-        final Format valueFormat = FormatFactory\n-            .fromName(source.getKsqlTopic().getValueFormat().getFormat());\n-\n-        if (valueFormat.supportsFeature(SerdeFeature.SCHEMA_INFERENCE)) {\n-          SchemaRegistryUtil.deleteSubjectWithRetries(\n-                  schemaRegistryClient,\n-                  source.getKafkaTopicName() + KsqlConstants.SCHEMA_REGISTRY_VALUE_SUFFIX);\n-        }\n+        closer.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "437ef4bf08a9020d23f315306711d8e090e473aa"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MDg1OQ==", "bodyText": "We're planning on enabling Avro keys soon, right? We should remember to pull these out when we do.", "url": "https://github.com/confluentinc/ksql/pull/6449#discussion_r506760859", "createdAt": "2020-10-16T23:25:09Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-engine/src/test/java/io/confluent/ksql/integration/EndToEndIntegrationTest.java", "diffHunk": "@@ -123,6 +123,10 @@\n       .withAdditionalConfig(\n           KsqlConfig.SCHEMA_REGISTRY_URL_PROPERTY,\n           \"http://foo:8080\")\n+      .withAdditionalConfig(\n+          KsqlConfig.KSQL_KEY_FORMAT_ENABLED,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "437ef4bf08a9020d23f315306711d8e090e473aa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc2MDg3Ng==", "bodyText": "nit (not your code): can we update the error message here to say Could not serialize value? To me \"row\" could refer to either the key or the value. Seems good to be more specific when we can.", "url": "https://github.com/confluentinc/ksql/pull/6449#discussion_r506760876", "createdAt": "2020-10-16T23:25:12Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/InsertValuesExecutor.java", "diffHunk": "@@ -292,29 +299,39 @@ private void throwIfDisabled(final KsqlConfig config) {\n     try {\n       return valueSerde.serializer().serialize(topicName, row);\n     } catch (final Exception e) {\n-      final Format valueFormat = FormatFactory\n-          .fromName(dataSource.getKsqlTopic().getValueFormat().getFormat());\n-      if (valueFormat.supportsFeature(SerdeFeature.SCHEMA_INFERENCE)) {\n-        final Throwable rootCause = ExceptionUtils.getRootCause(e);\n-        if (rootCause instanceof RestClientException) {\n-          switch (((RestClientException) rootCause).getStatus()) {\n-            case HttpStatus.SC_UNAUTHORIZED:\n-            case HttpStatus.SC_FORBIDDEN:\n-              throw new KsqlException(String.format(\n-                  \"Not authorized to write Schema Registry subject: [%s]\",\n-                  topicName + KsqlConstants.SCHEMA_REGISTRY_VALUE_SUFFIX\n-              ));\n-            default:\n-              break;\n-          }\n-        }\n-      }\n-\n+      maybeThrowSchemaRegistryAuthError(\n+          FormatFactory.fromName(dataSource.getKsqlTopic().getValueFormat().getFormat()),\n+          topicName,\n+          false,\n+          e);\n       LOG.error(\"Could not serialize row.\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "437ef4bf08a9020d23f315306711d8e090e473aa"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4635, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}