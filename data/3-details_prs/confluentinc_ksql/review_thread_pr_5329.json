{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1ODUyOTQx", "number": 5329, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTowOTowOVrOD7MbsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTowOTowOVrOD7MbsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzk2MjczOnYy", "diffSide": "RIGHT", "path": "ksqldb-api-client/src/test/java/io/confluent/ksql/api/client/ClientTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTowOTowOVrOGTXp4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMzoxNjo0OVrOGTwnxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk2MzY4MA==", "bodyText": "Would be nice to add a couple of tests which do the following:\n\nTerminate the connection from the server side and verify that the query results is completed on the client\nEnds the response (before limit) on the server side and verify that the query result is complete on client.", "url": "https://github.com/confluentinc/ksql/pull/5329#discussion_r422963680", "createdAt": "2020-05-11T11:09:09Z", "author": {"login": "purplefox"}, "path": "ksqldb-api-client/src/test/java/io/confluent/ksql/api/client/ClientTest.java", "diffHunk": "@@ -168,10 +223,42 @@ public void shouldHandleErrorResponseFromStreamQuery() {\n     );\n \n     // Then\n+    assertThat(e.getCause(), instanceOf(KsqlRestClientException.class));\n     assertThat(e.getCause().getMessage(), containsString(\"Received 400 response from server\"));\n     assertThat(e.getCause().getMessage(), containsString(\"invalid query blah\"));\n   }\n \n+  @Test\n+  public void shouldFailPollStreamedQueryResultIfSubscribed() throws Exception {\n+    // Given\n+    final StreamedQueryResult streamedQueryResult =\n+        javaClient.streamQuery(DEFAULT_PUSH_QUERY, DEFAULT_PUSH_QUERY_REQUEST_PROPERTIES).get();\n+    streamedQueryResult.subscribe(new TestSubscriber<>());\n+\n+    // When\n+    final Exception e = assertThrows(IllegalStateException.class, streamedQueryResult::poll);\n+\n+    // Then\n+    assertThat(e.getMessage(), containsString(\"Cannot poll if subscriber has been set\"));\n+  }\n+\n+  @Test\n+  public void shouldFailSubscribeStreamedQueryResultIfPolling() throws Exception {\n+    // Given\n+    final StreamedQueryResult streamedQueryResult =\n+        javaClient.streamQuery(DEFAULT_PUSH_QUERY, DEFAULT_PUSH_QUERY_REQUEST_PROPERTIES).get();\n+    streamedQueryResult.poll(1, TimeUnit.NANOSECONDS);\n+\n+    // When\n+    final Exception e = assertThrows(\n+        IllegalStateException.class,\n+        () -> streamedQueryResult.subscribe(new TestSubscriber<>())\n+    );\n+\n+    // Then\n+    assertThat(e.getMessage(), containsString(\"Cannot set subscriber if polling\"));\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00228ef27feb1b11e29e35e43f01f4cff72d84e5"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM0NzE2Mw==", "bodyText": "What do you mean by \"terminate the connection from the server\"? Would that be if the server encounters an exception, or something else? Is this the same as \"ends the response on the server side\"?", "url": "https://github.com/confluentinc/ksql/pull/5329#discussion_r423347163", "createdAt": "2020-05-11T22:05:52Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-api-client/src/test/java/io/confluent/ksql/api/client/ClientTest.java", "diffHunk": "@@ -168,10 +223,42 @@ public void shouldHandleErrorResponseFromStreamQuery() {\n     );\n \n     // Then\n+    assertThat(e.getCause(), instanceOf(KsqlRestClientException.class));\n     assertThat(e.getCause().getMessage(), containsString(\"Received 400 response from server\"));\n     assertThat(e.getCause().getMessage(), containsString(\"invalid query blah\"));\n   }\n \n+  @Test\n+  public void shouldFailPollStreamedQueryResultIfSubscribed() throws Exception {\n+    // Given\n+    final StreamedQueryResult streamedQueryResult =\n+        javaClient.streamQuery(DEFAULT_PUSH_QUERY, DEFAULT_PUSH_QUERY_REQUEST_PROPERTIES).get();\n+    streamedQueryResult.subscribe(new TestSubscriber<>());\n+\n+    // When\n+    final Exception e = assertThrows(IllegalStateException.class, streamedQueryResult::poll);\n+\n+    // Then\n+    assertThat(e.getMessage(), containsString(\"Cannot poll if subscriber has been set\"));\n+  }\n+\n+  @Test\n+  public void shouldFailSubscribeStreamedQueryResultIfPolling() throws Exception {\n+    // Given\n+    final StreamedQueryResult streamedQueryResult =\n+        javaClient.streamQuery(DEFAULT_PUSH_QUERY, DEFAULT_PUSH_QUERY_REQUEST_PROPERTIES).get();\n+    streamedQueryResult.poll(1, TimeUnit.NANOSECONDS);\n+\n+    // When\n+    final Exception e = assertThrows(\n+        IllegalStateException.class,\n+        () -> streamedQueryResult.subscribe(new TestSubscriber<>())\n+    );\n+\n+    // Then\n+    assertThat(e.getMessage(), containsString(\"Cannot set subscriber if polling\"));\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk2MzY4MA=="}, "originalCommit": {"oid": "00228ef27feb1b11e29e35e43f01f4cff72d84e5"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM3Mjc0Mg==", "bodyText": "I guess the connection could also be terminated if the query were terminated via /close-query. I can add a test for that as well.", "url": "https://github.com/confluentinc/ksql/pull/5329#discussion_r423372742", "createdAt": "2020-05-11T23:16:49Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-api-client/src/test/java/io/confluent/ksql/api/client/ClientTest.java", "diffHunk": "@@ -168,10 +223,42 @@ public void shouldHandleErrorResponseFromStreamQuery() {\n     );\n \n     // Then\n+    assertThat(e.getCause(), instanceOf(KsqlRestClientException.class));\n     assertThat(e.getCause().getMessage(), containsString(\"Received 400 response from server\"));\n     assertThat(e.getCause().getMessage(), containsString(\"invalid query blah\"));\n   }\n \n+  @Test\n+  public void shouldFailPollStreamedQueryResultIfSubscribed() throws Exception {\n+    // Given\n+    final StreamedQueryResult streamedQueryResult =\n+        javaClient.streamQuery(DEFAULT_PUSH_QUERY, DEFAULT_PUSH_QUERY_REQUEST_PROPERTIES).get();\n+    streamedQueryResult.subscribe(new TestSubscriber<>());\n+\n+    // When\n+    final Exception e = assertThrows(IllegalStateException.class, streamedQueryResult::poll);\n+\n+    // Then\n+    assertThat(e.getMessage(), containsString(\"Cannot poll if subscriber has been set\"));\n+  }\n+\n+  @Test\n+  public void shouldFailSubscribeStreamedQueryResultIfPolling() throws Exception {\n+    // Given\n+    final StreamedQueryResult streamedQueryResult =\n+        javaClient.streamQuery(DEFAULT_PUSH_QUERY, DEFAULT_PUSH_QUERY_REQUEST_PROPERTIES).get();\n+    streamedQueryResult.poll(1, TimeUnit.NANOSECONDS);\n+\n+    // When\n+    final Exception e = assertThrows(\n+        IllegalStateException.class,\n+        () -> streamedQueryResult.subscribe(new TestSubscriber<>())\n+    );\n+\n+    // Then\n+    assertThat(e.getMessage(), containsString(\"Cannot set subscriber if polling\"));\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk2MzY4MA=="}, "originalCommit": {"oid": "00228ef27feb1b11e29e35e43f01f4cff72d84e5"}, "originalPosition": 162}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3391, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}