{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5Njg3ODcz", "number": 5392, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo0Mzo1MlrOD9h5Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo0Mzo1MlrOD9h5Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1ODQ1MDcwOnYy", "diffSide": "RIGHT", "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQxOTo0Mzo1MlrOGXFIOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQyMDoyNzo1OVrOGXGaGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1NDQ1Nw==", "bodyText": "In which scenarios would isInternalRequest not be available? Don't we want these two variables (skipForwardRequest and  isInternalRequest) to always either both be true or both be false? Which makes me question whether we need both.", "url": "https://github.com/confluentinc/ksql/pull/5392#discussion_r426854457", "createdAt": "2020-05-18T19:43:52Z", "author": {"login": "vpapavas"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -178,7 +179,11 @@ public TableRowsEntity execute(\n     try {\n       final RoutingOptions routingOptions = new ConfigRoutingOptions(\n           statement.getConfig(), statement.getConfigOverrides(), statement.getRequestProperties());\n-      final boolean isAlreadyForwarded = routingOptions.skipForwardRequest();\n+      // If internal listeners are in use, we require the request to come from that listener to\n+      // treat it as having been forwarded.\n+      final boolean isAlreadyForwarded = routingOptions.skipForwardRequest() &&\n+          // Trust the forward request option if isInternalRequest isn't available.\n+          isInternalRequest.orElse(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bcf6312cb3c2b07ddd21c18c31f8b381fc455f3"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg3NTQxNw==", "bodyText": "isInternalRequest wouldn't be available when the internal listener functionality is not enabled, so we still would want skipForwardRequest in that case where it's running in a trusted setting and still wants to know to only forward the request once.  But yes, you're right that they aim to infer the identical thing -- that this request is forwarded rather than from the end user.", "url": "https://github.com/confluentinc/ksql/pull/5392#discussion_r426875417", "createdAt": "2020-05-18T20:27:59Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/PullQueryExecutor.java", "diffHunk": "@@ -178,7 +179,11 @@ public TableRowsEntity execute(\n     try {\n       final RoutingOptions routingOptions = new ConfigRoutingOptions(\n           statement.getConfig(), statement.getConfigOverrides(), statement.getRequestProperties());\n-      final boolean isAlreadyForwarded = routingOptions.skipForwardRequest();\n+      // If internal listeners are in use, we require the request to come from that listener to\n+      // treat it as having been forwarded.\n+      final boolean isAlreadyForwarded = routingOptions.skipForwardRequest() &&\n+          // Trust the forward request option if isInternalRequest isn't available.\n+          isInternalRequest.orElse(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjg1NDQ1Nw=="}, "originalCommit": {"oid": "8bcf6312cb3c2b07ddd21c18c31f8b381fc455f3"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3464, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}