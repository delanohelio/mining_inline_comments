{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNDg2MDQ1", "number": 4478, "reviewThreads": {"totalCount": 100, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoxMjo0MVrODeErrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoyODozM1rODeHGKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODYwNTkwOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/joins/partition-data.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoxMjo0MVrOFnCRwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoyMDoxN1rOFnF6dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ3NjA5OA==", "bodyText": "Note: changed from Primitive Keys to Keys as a primitive key means something very specific in SQL: its a unique non-null key.\nIn KSQL tables have primitive keys and streams do not. This is because stream are just a stream of facts/events. Each stands alone.  Keys are not unique: duplicate keys are allowed.\nHence, we should standardize on only using primitive keys when talking about tables and just keys when talking about streams.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376476098", "createdAt": "2020-02-07T16:12:41Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/joins/partition-data.md", "diffHunk": "@@ -16,67 +16,70 @@ records based on the joining column. To ensure that records with the same\n join column are co-located on the same stream task, the join column must\n coincide with the column that the sources are partitioned by.\n \n-Primary key\n------------\n+Keys", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzNTY2OA==", "bodyText": "I assume you meant s/primitive/primary/g?", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376535668", "createdAt": "2020-02-07T18:20:17Z", "author": {"login": "agavra"}, "path": "docs-md/developer-guide/joins/partition-data.md", "diffHunk": "@@ -16,67 +16,70 @@ records based on the joining column. To ensure that records with the same\n join column are co-located on the same stream task, the join column must\n coincide with the column that the sources are partitioned by.\n \n-Primary key\n------------\n+Keys", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ3NjA5OA=="}, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODYxNDE5OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/joins/partition-data.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoxNToxNVrOFnCW6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoxNToxNVrOFnCW6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ3NzQxOQ==", "bodyText": "Changed to join on a non-STRING column", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376477419", "createdAt": "2020-02-07T16:15:15Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/joins/partition-data.md", "diffHunk": "@@ -16,67 +16,70 @@ records based on the joining column. To ensure that records with the same\n join column are co-located on the same stream task, the join column must\n coincide with the column that the sources are partitioned by.\n \n-Primary key\n------------\n+Keys\n+----\n \n-A *primary key*, when present, defines the partitioning column. Tables are\n+A *key*, when present, defines the partitioning column. Tables are\n always partitioned by their primary key, and ksqlDB doesn't allow repartitioning\n of tables, so you can only use a table's primary key as a join column.\n \n Streams, on the other hand, may not have a defined key or may have a key that\n-differs from the join column. In these cases, ksqlDB repartitions the stream,\n-which implicitly defines a primary key for it. The primary keys for streams\n-and tables are of data type `VARCHAR`. \n+differs from the join column. In these cases, ksqlDB internally repartitions\n+the stream, which implicitly defines a key for it.\n \n-For primary keys to match, they must have the same serialization format. For\n-example, you can't join a `VARCHAR` key encoded as JSON with one encoded as\n-AVRO.\n-\n-!!! note\n-    ksqlDB requires that keys are encoded as UTF-8 strings.\n+ksqlDB requires keys to use the `KAFKA` format. For more information, see\n+[Serialization Formats](serialization.md#serialization-formats). If internally\n+repartitioning, the correct format will be used.\n \n Because you can only use the primary key of a table as a joining column, it's\n important to understand how keys are defined. For both streams and tables, the\n-column that represents the primary key has the name `ROWKEY`.\n+column that represents the key has the name `ROWKEY`.\n \n When you create a table by using a CREATE TABLE statement, the key of the\n table is the same as that of the records in the underlying Kafka topic.\n+It is important that you set the type of the `ROWKEY` column in the\n+CREATE TABLE statement to match the key data in the underlying Kafka topic.\n \n When you create a table by using a CREATE TABLE AS SELECT statement, the key of\n the resulting table is determined as follows:\n \n-- If the FROM clause is a single source, and the source is a stream, the\n-  statement must have a GROUP BY clause, where the grouping columns determine\n-  the key of the resulting table.\n-- If the single source is a table, the key is copied over from the key of the\n-  table in the FROM clause. If the FROM clause is a join, the primary key of the\n-  resulting table is the joining column, since joins are allowed only on keys.\n-- If the statement contains a GROUP BY, the key of the resulting table\n-  comprises the grouping columns.\n-\n-When the primary key consists of multiple columns, like when it's created as\n-the result of a GROUP BY clause with multiple grouping columns, you must use\n-ROWKEY as the joining column. Even when the primary key consists of a single\n-column, we recommend using ROWKEY as the joining column to avoid confusion.\n-\n-The following example shows a `users` table joined with a `clicks` stream \n+- If the FROM clause contains a stream, the statement must have a GROUP BY clause,\n+  and the grouping columns determine the key of the resulting table.\n+    - When grouping by a single column or expression the type of `ROWKEY` in the\n+    resulting stream matches the type of the column or expression.\n+    - When grouping by multiple columns or expressions the type of `ROWKEY` in the\n+    resulting stream is a `STRING`.\n+- If the FROM clause contains only tables and no GROUP BY clause, the key is\n+  copied over from the key of the table(s) in the FROM clause.\n+- If the FROM clause contains only tables and has a GROUP BY clause, the\n+  grouping columns determine the key of the resulting table.\n+    - When grouping by a single column or expression the type of `ROWKEY` in the\n+    resulting stream matches the type of the column or expression.\n+    - When grouping by multiple columns or expressions the type of `ROWKEY` in the\n+    resulting stream is a `STRING`.\n+\n+The following example shows a `users` table joined with a `clicks` stream\n on the `userId` column. The `users` table has the correct primary key\n `userId` that coincides with the joining column. But the `clicks` stream\n doesn't have a defined key, and ksqlDB must repartition it on the joining\n-column (`userId`) and assign the primary key before performing the join.\n+column (`userId`) and assign the key before performing the join.\n \n ```sql\n     -- clicks stream, with an unknown key.\n-    -- the schema of stream clicks is: ROWTIME | ROWKEY | USERID | URL\n-    CREATE STREAM clicks (userId STRING, url STRING) WITH(kafka_topic='clickstream', value_format='json');\n+    -- the schema of stream clicks is: ROWTIME BIGINT | ROWKEY STRING | USERID BIGINT | URL STRING\n+    CREATE STREAM clicks (userId BIGINT, url STRING) WITH(kafka_topic='clickstream', value_format='json');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODYxNzQzOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/print.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoxNjoyMlrOFnCZDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoxNjoyMlrOFnCZDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ3Nzk2NA==", "bodyText": "note: the PRINT command is now case-sensitive. (As it being case-insensitive was causing poor UX).", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376477964", "createdAt": "2020-02-07T16:16:22Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/ksqldb-reference/print.md", "diffHunk": "@@ -40,7 +36,7 @@ The following statement shows how to print all of the records in a topic named\n `ksql__commands`.\r\n \r\n ```sql\r\n-PRINT 'ksql__commands' FROM BEGINNING;\r\n+PRINT ksql__commands FROM BEGINNING;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODYyNzUxOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/test-and-debug/generate-custom-test-data.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoxOToyNFrOFnCfLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoxOToyNFrOFnCfLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ3OTUzMg==", "bodyText": "main change here is switching the deprecated maxInterval for its replacement: msgRate", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376479532", "createdAt": "2020-02-07T16:19:24Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/test-and-debug/generate-custom-test-data.md", "diffHunk": "@@ -66,20 +66,17 @@ Use the following command to generate records from one of the predefined schemas\n \n The following options apply to both the `schema` and `quickstart` options.\n \n-|                     Name                     |                       Default                       |                                                              Description                                                              |                                                      |                              |\n-| -------------------------------------------- | --------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------- | ---------------------------- |\n-| ``bootstrap-server=<kafka-server>:<port>``   | localhost:9092                                      | IP address and port for the Kafka server to connect to.                                                                               |                                                      |                              |\n-| ``key-format=<key format>``                  | Kafka                                               | Format of generated record keys: ``avro``, ``json``, ``delimited`` or ``kafka``. Case-insensitive. Required by the ``schema`` option. |                                                      |                              |\n-| ``value-format=<value format>``              | JSON                                                | Format of generated record values: ``avro``, ``json``, or ``delimited``.                                                              | Case-insensitive. Required by the ``schema`` option. |                              |\n-| ``topic=<kafka topic name>``                 |                                                     | Name of the topic that receives generated records. Required by the ``schema`` option.                                                 |                                                      |                              |\n-| ``key=<name of key column>``                 |                                                     | Field to use as the key for generated records. Required by the ``schema`` option.                                                     |                                                      |                              |\n-| ``iterations=<number of records>``           | 1,000,000                                           | The maximum number of records to generate.                                                                                            |                                                      |                              |\n-| ``maxInterval=<max time between records>``   | 500                                                 | Longest time to wait before generating a new record, in milliseconds.                                                                 |                                                      |                              |\n-| ``propertiesFile=<path-to-properties-file>`` | ``<path-to-confluent>/etc/ksql/datagen.properties`` | Path to the ``ksql-datagen`` properties file.                                                                                         |                                                      |                              |\n-| ``schemaRegistryUrl``                        | http://localhost:8081                               | URL of {{ site.sr }} when ``format`` is ``avro``. |\n-\n-Records are generated at random intervals, with the longest interval specified\n-by the `maxInterval` option.\n+|                     Name                     |                       Default                       |                                                              Description                                                              |                                                      |\n+| -------------------------------------------- | --------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------- |\n+| ``bootstrap-server=<kafka-server>:<port>``   | localhost:9092                                      | IP address and port for the Kafka server to connect to.                                                                               |                                                      |\n+| ``key-format=<key format>``                  | Kafka                                               | Format of generated record keys: ``avro``, ``json``, ``delimited`` or ``kafka``. Case-insensitive. Required by the ``schema`` option. |                                                      |\n+| ``value-format=<value format>``              | JSON                                                | Format of generated record values: ``avro``, ``json``, or ``delimited``.                                                              | Case-insensitive. Required by the ``schema`` option. |\n+| ``topic=<kafka topic name>``                 |                                                     | Name of the topic that receives generated records. Required by the ``schema`` option.                                                 |                                                      |\n+| ``key=<name of key column>``                 |                                                     | Field to use as the key for generated records. Required by the ``schema`` option.                                                     |                                                      |\n+| ``iterations=<number of records>``           | 1,000,000                                           | The maximum number of records to generate.                                                                                            |                                                      |\n+| ``msgRate=<rate to produce in msgs/second>`` | -1 (unlimited, i.e. as fast as possible)            | The rate to produce messages at, in messages-per-second.                                                                              |                                                      |\n+| ``propertiesFile=<path-to-properties-file>`` | ``<path-to-confluent>/etc/ksql/datagen.properties`` | Path to the ``ksql-datagen`` properties file.                                                                                         |                                                      |\n+| ``schemaRegistryUrl``                        | http://localhost:8081                               | URL of {{ site.sr }} when ``format`` is ``avro``.                                                                                     |                                                      |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODYzMDU1OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyMDoyMFrOFnChGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyMDoyMFrOFnChGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MDAyNg==", "bodyText": "I've switched this to Avro as I've had to switch later examples from Avro to Json as they have non-STRING keys and Avro schema inference currently only works with STRING keys :(", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376480026", "createdAt": "2020-02-07T16:20:20Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -85,9 +85,9 @@ docker run --network tutorials_default --rm --name datagen-users \\\n     ksql-datagen \\\n         bootstrap-server=kafka:39092 \\\n         quickstart=users \\\n-        format=json \\\n+        format=avro \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODYzMzU3OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyMTowNFrOFnCi8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyMTowNFrOFnCi8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MDQ5Ng==", "bodyText": "Added details of new SHOW ALL TOPICS command!", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376480496", "createdAt": "2020-02-07T16:21:04Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -141,25 +141,50 @@ SHOW TOPICS;\n Your output should resemble:\n \n ```\n- Kafka Topic        | Partitions | Partition Replicas\n-------------------------------------------------------\n- _confluent-metrics | 12         | 1\n- _schemas           | 1          | 1\n- pageviews          | 1          | 1\n- users              | 1          | 1\n-------------------------------------------------------\n+ Kafka Topic                 | Partitions | Partition Replicas\n+--------------------------------------------------------------\n+ default_ksql_processing_log | 1          | 1\n+ pageviews                   | 1          | 1\n+ users                       | 1          | 1\n+--------------------------------------------------------------\n+```\n+\n+By default, KSQL hides internal / system topics. Use the SHOW ALL TOPICS\n+statement to see the full list of topics in the Kafka cluster:\n+\n+```sql\n+SHOW ALL TOPICS;\n+```\n+\n+Your output should resemble:\n+\n+```\n+  Kafka Topic                            | Partitions | Partition Replicas \n+--------------------------------------------------------------------------\n+ __confluent.support.metrics            | 1          | 1                  \n+ _confluent-ksql-default__command_topic | 1          | 1                  \n+ _confluent-license                     | 1          | 1                  \n+ _confluent-metrics                     | 12         | 1                  \n+ default_ksql_processing_log            | 1          | 1                  \n+ pageviews                              | 1          | 1                  \n+ users                                  | 1          | 1                  \n+--------------------------------------------------------------------------", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODYzNjg1OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyMTo0OFrOFnCkvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyMTo0OFrOFnCkvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MDk1Nw==", "bodyText": "Call out the processing log!", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376480957", "createdAt": "2020-02-07T16:21:48Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream\n+    to see if ksqlDB is encountering data errors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODY0MTczOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyMzoxNlrOFnCnxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyMzoxNlrOFnCnxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MTczNQ==", "bodyText": "I'm not sure when, but the default behaviour of push queries on tables has changed: they now output all data without the need to set auto.offset.reset session property.\nThere may be other docs that need updating to reflect this @JimGalasyn", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376481735", "createdAt": "2020-02-07T16:23:16Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream\n+    to see if ksqlDB is encountering data errors.\n+\n+Viewing your data\n+-----------------\n+\n+1. Use `SELECT` to create a query that returns data from a TABLE. This\n+   query includes the `LIMIT` keyword to limit the number of rows\n+   returned in the query result, and the `EMIT CHANGES` keywords to\n+   indicate we wish to stream results back. This is known as a\n+   [pull query](../concepts/queries/pull.md). See the\n+   [queries](../concepts/queries/index.md) for an explanation of the\n+   different query types. Note that exact data output may vary because\n+   of the randomness of the data generation.\n+   ```sql\n+   SELECT * from users_original emit changes limit 5;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |ROWTIME             |ROWKEY        |REGISTERTIME  |GENDER   |REGIONID  |USERID       |\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |1581077558655       |User_9        |1513529638461 |OTHER    |Region_1  |User_9       |\n+   |1581077561454       |User_7        |1489408314958 |OTHER    |Region_2  |User_7       |\n+   |1581077561654       |User_3        |1511291005264 |MALE     |Region_2  |User_3       |\n+   |1581077561857       |User_4        |1496797956753 |OTHER    |Region_1  |User_4       |\n+   |1581077562858       |User_8        |1489169082491 |FEMALE   |Region_8  |User_8       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+   !!! note\n+         Push queries on tables will output the full history of the table that is stored\n+         in the Kafka changelog topic, i.e. it will output historic data, followed by the\n+         stream of updates to the table. It is therefore likely that rows with matching\n+         `ROWKEY` are output as existing rows in the table are updated.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODY0MzEwOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyMzozN1rOFnConA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyMzozN1rOFnConA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MTk0OA==", "bodyText": "Note: Streams still do start from the latest offset by default.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376481948", "createdAt": "2020-02-07T16:23:37Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream\n+    to see if ksqlDB is encountering data errors.\n+\n+Viewing your data\n+-----------------\n+\n+1. Use `SELECT` to create a query that returns data from a TABLE. This\n+   query includes the `LIMIT` keyword to limit the number of rows\n+   returned in the query result, and the `EMIT CHANGES` keywords to\n+   indicate we wish to stream results back. This is known as a\n+   [pull query](../concepts/queries/pull.md). See the\n+   [queries](../concepts/queries/index.md) for an explanation of the\n+   different query types. Note that exact data output may vary because\n+   of the randomness of the data generation.\n+   ```sql\n+   SELECT * from users_original emit changes limit 5;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |ROWTIME             |ROWKEY        |REGISTERTIME  |GENDER   |REGIONID  |USERID       |\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |1581077558655       |User_9        |1513529638461 |OTHER    |Region_1  |User_9       |\n+   |1581077561454       |User_7        |1489408314958 |OTHER    |Region_2  |User_7       |\n+   |1581077561654       |User_3        |1511291005264 |MALE     |Region_2  |User_3       |\n+   |1581077561857       |User_4        |1496797956753 |OTHER    |Region_1  |User_4       |\n+   |1581077562858       |User_8        |1489169082491 |FEMALE   |Region_8  |User_8       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+   !!! note\n+         Push queries on tables will output the full history of the table that is stored\n+         in the Kafka changelog topic, i.e. it will output historic data, followed by the\n+         stream of updates to the table. It is therefore likely that rows with matching\n+         `ROWKEY` are output as existing rows in the table are updated.\n+\n+2. View the data in your pageviews_original stream by issuing the following\n+   push query:\n+   ```sql\n+   SELECT viewtime, userid, pageid FROM pageviews_original emit changes LIMIT 3;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------+--------------+--------------+\n+   |VIEWTIME      |USERID        |PAGEID        |\n+   +--------------+--------------+--------------+\n+   |1581078296791 |User_1        |Page_54       |\n+   |1581078297792 |User_8        |Page_93       |\n+   |1581078298792 |User_6        |Page_26       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+\n+   !!! note\n+      By default, push queries on streams only output changes that occur\n+      after the query is started, i.e. historic data is not included.\n+      Run `set 'auto.offset.reset'='earliest';` to update your session\n+      properties if you want to see the historic data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODY0NjM4OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyNDozMVrOFnCqnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyNDozMVrOFnCqnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MjQ2Mw==", "bodyText": "Switched the example to something more useful to demo how a user might first get the query working with a transient query, before then converting it to a persistent query in the next step.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376482463", "createdAt": "2020-02-07T16:24:31Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream\n+    to see if ksqlDB is encountering data errors.\n+\n+Viewing your data\n+-----------------\n+\n+1. Use `SELECT` to create a query that returns data from a TABLE. This\n+   query includes the `LIMIT` keyword to limit the number of rows\n+   returned in the query result, and the `EMIT CHANGES` keywords to\n+   indicate we wish to stream results back. This is known as a\n+   [pull query](../concepts/queries/pull.md). See the\n+   [queries](../concepts/queries/index.md) for an explanation of the\n+   different query types. Note that exact data output may vary because\n+   of the randomness of the data generation.\n+   ```sql\n+   SELECT * from users_original emit changes limit 5;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |ROWTIME             |ROWKEY        |REGISTERTIME  |GENDER   |REGIONID  |USERID       |\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |1581077558655       |User_9        |1513529638461 |OTHER    |Region_1  |User_9       |\n+   |1581077561454       |User_7        |1489408314958 |OTHER    |Region_2  |User_7       |\n+   |1581077561654       |User_3        |1511291005264 |MALE     |Region_2  |User_3       |\n+   |1581077561857       |User_4        |1496797956753 |OTHER    |Region_1  |User_4       |\n+   |1581077562858       |User_8        |1489169082491 |FEMALE   |Region_8  |User_8       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+   !!! note\n+         Push queries on tables will output the full history of the table that is stored\n+         in the Kafka changelog topic, i.e. it will output historic data, followed by the\n+         stream of updates to the table. It is therefore likely that rows with matching\n+         `ROWKEY` are output as existing rows in the table are updated.\n+\n+2. View the data in your pageviews_original stream by issuing the following\n+   push query:\n+   ```sql\n+   SELECT viewtime, userid, pageid FROM pageviews_original emit changes LIMIT 3;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------+--------------+--------------+\n+   |VIEWTIME      |USERID        |PAGEID        |\n+   +--------------+--------------+--------------+\n+   |1581078296791 |User_1        |Page_54       |\n+   |1581078297792 |User_8        |Page_93       |\n+   |1581078298792 |User_6        |Page_26       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+\n+   !!! note\n+      By default, push queries on streams only output changes that occur\n+      after the query is started, i.e. historic data is not included.\n+      Run `set 'auto.offset.reset'='earliest';` to update your session\n+      properties if you want to see the historic data.\n+\n Write Queries\n -------------\n \n These examples write queries using ksqlDB.\n \n-!!! note\n-\tBy default ksqlDB reads the topics for streams and tables from\n-    the latest offset.\n-\n ### 1. Create a query that returns data from a ksqlDB stream\n \n-Use `SELECT` to create a query that returns data from a STREAM. This\n-query includes the `LIMIT` keyword to limit the number of rows\n-returned in the query result. Note that exact data output may vary\n-because of the randomness of the data generation.\n+Create query that enriches the pageviews data with the user's gender\n+and regionid from the users table. The following query enriches the\n+`pageviews_original` STREAM by doing a `LEFT JOIN` with the\n+`users_original` TABLE on the userid column.\n \n ```sql\n-SELECT pageid FROM pageviews_original LIMIT 3;\n+SELECT users_original.userid AS userid, pageid, regionid, gender\n+  FROM pageviews_original\n+  LEFT JOIN users_original\n+    ON pageviews_original.userid = users_original.userid\n+  EMIT CHANGES\n+  LIMIT 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 282}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODY0ODExOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyNTowNlrOFnCrvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyNTowNlrOFnCrvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4Mjc0OA==", "bodyText": "Added section on pull queries!", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376482748", "createdAt": "2020-02-07T16:25:06Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -400,48 +533,129 @@ format. ksqlDB registers the Avro schema with the configured\n \n ```sql\n CREATE TABLE pageviews_regions\n-    WITH (VALUE_FORMAT='avro') AS\n+ WITH (VALUE_FORMAT='avro') AS\n SELECT gender, regionid , COUNT(*) AS numusers\n FROM pageviews_enriched\n-    WINDOW TUMBLING (size 30 second)\n+  WINDOW TUMBLING (size 30 second)\n GROUP BY gender, regionid\n-HAVING COUNT(*) > 1;\n+EMIT CHANGES;\n ```\n \n Your output should resemble:\n \n ```\n-  Message\n----------------------------\n-  Table created and running\n----------------------------\n+ Message                                                                                                \n+--------------------------------------------------------------------------------------------------------\n+ Table PAGEVIEWS_REGIONS created and running. Created by query with query ID: CTAS_PAGEVIEWS_REGIONS_15 \n+--------------------------------------------------------------------------------------------------------\n ```\n \n !!! tip\n     You can run `DESCRIBE pageviews_regions;` to describe the table.\n \n-### 7. View query results\n+### 7. View query results using push query\n \n View results from the previous queries by using the `SELECT` statement.\n \n ```sql\n-SELECT gender, regionid, numusers FROM pageviews_regions LIMIT 5;\n+SELECT * FROM pageviews_regions EMIT CHANGES LIMIT 5;\n ```\n \n Your output should resemble:\n \n ```\n-FEMALE | Region_6 | 3\n-FEMALE | Region_1 | 4\n-FEMALE | Region_9 | 6\n-MALE | Region_8 | 2\n-OTHER | Region_5 | 4\n-LIMIT reached\n++---------------+-----------------+---------------+---------------+---------------+---------------+---------------+\n+|ROWTIME        |ROWKEY           |WINDOWSTART    |WINDOWEND      |GENDER         |REGIONID       |NUMUSERS       |\n++---------------+-----------------+---------------+---------------+---------------+---------------+---------------+\n+|1581080500530  |OTHER|+|Region_9 |1581080490000  |1581080520000  |OTHER          |Region_9       |1              |\n+|1581080501530  |OTHER|+|Region_5 |1581080490000  |1581080520000  |OTHER          |Region_5       |2              |\n+|1581080510532  |MALE|+|Region_7  |1581080490000  |1581080520000  |MALE           |Region_7       |4              |\n+|1581080513532  |FEMALE|+|Region_1|1581080490000  |1581080520000  |FEMALE         |Region_1       |2              |\n+|1581080516533  |MALE|+|Region_2  |1581080490000  |1581080520000  |MALE           |Region_2       |3              |\n+Limit Reached\n Query terminated\n-ksql>\n ```\n \n-### 8. View persistent queries\n+!!! note\n+   Notice the addition of the WINDOWSTART and WINDOWEND columns.\n+   These are available because `pageviews_regions` is aggregating data\n+   per 30 second _window_. ksqlDB automatically adds these system columns\n+   for windowed results.\n+\n+### 8. View query results using pull query", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 500}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODY1MDY1OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyNTo1MVrOFnCtRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyNTo1MVrOFnCtRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MzE0MA==", "bodyText": "had to switch to Json as the key type is not a STRING, so schema inference does not work yet :(", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376483140", "createdAt": "2020-02-07T16:25:51Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -522,18 +741,27 @@ docker run --network tutorials_default --rm  \\\n   confluentinc/ksql-examples:{{ site.release }} \\\n   ksql-datagen \\\n       quickstart=orders \\\n-      format=avro \\\n+      format=json \\", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 665}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODY1MjU3OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyNjoyNVrOFnCuag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyNjoyNVrOFnCuag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MzQzNA==", "bodyText": "Switched from using kafkacat to using INSERT VALUES!", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376483434", "createdAt": "2020-02-07T16:26:25Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -651,10 +857,29 @@ After both `CREATE STREAM` statements, your output should resemble:\n ----------------\n ```\n \n+### 2. Populate two source topics\n+\n+Populate the streams with some sample data using the INSERT VALUES statement:\n+\n+```sql\n+-- Insert values in NEW_ORDERS:\n+-- insert supplying the list of columns to insert:\n+INSERT INTO NEW_ORDERS (ROWKEY, CUSTOMER_NAME, TOTAL_AMOUNT) \n+  VALUES (1, 'Bob Smith', 10.50);\n+  \n+-- short hand version can be used when inserting values for all columns, (except ROWTIME), in column order:\n+INSERT INTO NEW_ORDERS  VALUES (2, 3.32, 'Sarah Black');\n+INSERT INTO NEW_ORDERS  VALUES (3, 21.00, 'Emma Turner');\n+\n+-- Insert values in SHIPMENTS:\n+INSERT INTO SHIPMENTS VALUES (1, 42, 'Nashville');\n+INSERT INTO SHIPMENTS VALUES (3, 43, 'Palo Alto');\n+```\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 816}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODY1Mzk3OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyNjo0OVrOFnCvTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyNjo0OVrOFnCvTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4MzY2Mg==", "bodyText": "Added steps to show real-time updates on a running push query.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376483662", "createdAt": "2020-02-07T16:26:49Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -701,25 +936,56 @@ Run the following query, which will show orders with associated\n shipments, based on a join window of 1 hour.\n \n ```sql\n-SELECT O.ORDER_ID, O.TOTAL_AMOUNT, O.CUSTOMER_NAME,\n+SELECT O.ROWKEY AS ORDER_ID, O.TOTAL_AMOUNT, O.CUSTOMER_NAME,\n S.SHIPMENT_ID, S.WAREHOUSE\n FROM NEW_ORDERS O\n INNER JOIN SHIPMENTS S\n   WITHIN 1 HOURS\n-  ON O.ORDER_ID = S.ORDER_ID;\n+  ON O.ROWKEY = S.ROWKEY\n+EMIT CHANGES;\n ```\n \n Your output should resemble:\n \n ```\n-1 | 10.5 | Bob Smith | 42 | Nashville\n-3 | 21.0 | Emma Turner | 43 | Palo Alto\n++--------------------------+--------------------------+--------------------------+--------------------------+--------------------------+\n+|ORDER_ID                  |TOTAL_AMOUNT              |CUSTOMER_NAME             |SHIPMENT_ID               |WAREHOUSE                 |\n++--------------------------+--------------------------+--------------------------+--------------------------+--------------------------+\n+|1                         |10.5                      |Bob Smith                 |42                        |Nashville                 |\n+|3                         |21.0                      |Emma Turner               |43                        |Palo Alto                 |\n ```\n \n Messages with `ORDER_ID=2` have no corresponding `SHIPMENT_ID` or\n `WAREHOUSE`. This is because there's no corresponding row on the\n `SHIPMENTS` stream within the time window specified.\n \n+Start the ksqlDB CLI in a second window by running:\n+\n+```bash\n+docker run --network tutorials_default --rm --interactive --tty \\\n+    confluentinc/ksqldb-cli:{{ site.release }} ksql \\\n+    http://ksql-server:8088\n+```\n+\n+Enter the following INSERT VALUES statement to insert the shipment for\n+order id 2:\n+\n+```sql\n+INSERT INTO SHIPMENTS VALUES (2, 49, 'London');\n+```\n+\n+Switching back to your primary ksqlDB CLI window, notice that a third\n+row has now been output:\n+\n+```\n++--------------------------+--------------------------+--------------------------+--------------------------+--------------------------+\n+|ORDER_ID                  |TOTAL_AMOUNT              |CUSTOMER_NAME             |SHIPMENT_ID               |WAREHOUSE                 |\n++--------------------------+--------------------------+--------------------------+--------------------------+--------------------------+\n+|1                         |10.5                      |Bob Smith                 |42                        |Nashville                 |\n+|3                         |21.0                      |Emma Turner               |43                        |Palo Alto                 |\n+|2                         |3.32                      |Sarah Black               |49                        |London                    |\n+```\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 928}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODY1NTg1OnYy", "diffSide": "LEFT", "path": "ksql-examples/src/main/java/io/confluent/ksql/datagen/RowGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyNzoyN1rOFnCwlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjoyNzoyN1rOFnCwlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ4Mzk4OQ==", "bodyText": "DataGen now supports non-STRING keys.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376483989", "createdAt": "2020-02-07T16:27:27Z", "author": {"login": "big-andy-coates"}, "path": "ksql-examples/src/main/java/io/confluent/ksql/datagen/RowGenerator.java", "diffHunk": "@@ -38,39 +39,39 @@\n import org.apache.avro.generic.GenericRecord;\n import org.apache.kafka.connect.data.ConnectSchema;\n import org.apache.kafka.connect.data.Field;\n-import org.apache.kafka.connect.data.SchemaBuilder;\n import org.apache.kafka.connect.data.Struct;\n \n public class RowGenerator {\n \n-  static final ConnectSchema KEY_SCHEMA = (ConnectSchema) SchemaBuilder.struct()\n-      .field(\n-          SchemaUtil.ROWKEY_NAME.name(),\n-          org.apache.kafka.connect.data.Schema.OPTIONAL_STRING_SCHEMA)\n-      .build();\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODcxNDc1OnYy", "diffSide": "RIGHT", "path": "docs-md/concepts/stream-processing.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo0NTo1NFrOFnDVzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo0NTo1NFrOFnDVzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5MzUxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            sets the timestamp of the record written to Kafka. The value of system columns\n          \n          \n            \n            sets the timestamp of the record written to {{ site.ak }}. The value of system columns", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376493517", "createdAt": "2020-02-07T16:45:54Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/concepts/stream-processing.md", "diffHunk": "@@ -27,8 +27,10 @@ collection by using the `SELECT` statement on an existing collection. The\n result of the inner `SELECT` feeds into the outer declared collection. You\n don't need to declare a schema when deriving a new collection, because ksqlDB\n infers the column names and types from the inner `SELECT` statement. The\n-`ROWKEY` and `ROWTIME` fields of each row remain, unless you override them in\n-the `SELECT` statement.\n+`ROWKEY` of the row remains the same, unless the query includes either a\n+`PARTITION BY` or `GROUP BY` clause. The value of the `ROWTIME` column\n+sets the timestamp of the record written to Kafka. The value of system columns", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODcyMDA3OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/create-a-stream.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo0NzoyNlrOFnDY-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo0NzoyNlrOFnDY-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5NDMyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ksqlDB requires keys to have been serialized using Kafka's own, or compatible,\n          \n          \n            \n            ksqlDB requires keys to have been serialized using {{ site.ak }}'s own serializers or compatible", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376494329", "createdAt": "2020-02-07T16:47:26Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/create-a-stream.md", "diffHunk": "@@ -40,6 +40,9 @@ data format is `DELIMITED`. Other options are `Avro`, `JSON` and `KAFKA`.\n See [Serialization Formats](serialization.md#serialization-formats) for more\n details.\n \n+ksqlDB requires keys to have been serialized using Kafka's own, or compatible,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODcyMjcyOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/create-a-table.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo0ODoxOVrOFnDapg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo0ODoxOVrOFnDapg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5NDc1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ksqlDB requires keys to have been serialized using Kafka's own, or compatible,\n          \n          \n            \n            ksqlDB requires keys to have been serialized using {{ site.ak }}'s own serializers or compatible", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376494758", "createdAt": "2020-02-07T16:48:19Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/create-a-table.md", "diffHunk": "@@ -45,6 +45,9 @@ data format is `JSON`. Other options are `Avro`, `DELIMITED` and `KAFKA`. For\n more information, see\n [Serialization Formats](serialization.md#serialization-formats).\n \n+ksqlDB requires keys to have been serialized using Kafka's own, or compatible,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODcyOTUyOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/joins/partition-data.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1MDoyMlrOFnDe5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1MDoyMlrOFnDe5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5NTg0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            repartitioning, the correct format will be used.\n          \n          \n            \n            repartitioning, ksqlDB uses the correct format.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376495844", "createdAt": "2020-02-07T16:50:22Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/joins/partition-data.md", "diffHunk": "@@ -16,67 +16,70 @@ records based on the joining column. To ensure that records with the same\n join column are co-located on the same stream task, the join column must\n coincide with the column that the sources are partitioned by.\n \n-Primary key\n------------\n+Keys\n+----\n \n-A *primary key*, when present, defines the partitioning column. Tables are\n+A *key*, when present, defines the partitioning column. Tables are\n always partitioned by their primary key, and ksqlDB doesn't allow repartitioning\n of tables, so you can only use a table's primary key as a join column.\n \n Streams, on the other hand, may not have a defined key or may have a key that\n-differs from the join column. In these cases, ksqlDB repartitions the stream,\n-which implicitly defines a primary key for it. The primary keys for streams\n-and tables are of data type `VARCHAR`. \n+differs from the join column. In these cases, ksqlDB internally repartitions\n+the stream, which implicitly defines a key for it.\n \n-For primary keys to match, they must have the same serialization format. For\n-example, you can't join a `VARCHAR` key encoded as JSON with one encoded as\n-AVRO.\n-\n-!!! note\n-    ksqlDB requires that keys are encoded as UTF-8 strings.\n+ksqlDB requires keys to use the `KAFKA` format. For more information, see\n+[Serialization Formats](serialization.md#serialization-formats). If internally\n+repartitioning, the correct format will be used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODczMTk4OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/joins/partition-data.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1MTowN1rOFnDgaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1MTowN1rOFnDgaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5NjIzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It is important that you set the type of the `ROWKEY` column in the\n          \n          \n            \n            You must set the type of the `ROWKEY` column in the", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376496233", "createdAt": "2020-02-07T16:51:07Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/joins/partition-data.md", "diffHunk": "@@ -16,67 +16,70 @@ records based on the joining column. To ensure that records with the same\n join column are co-located on the same stream task, the join column must\n coincide with the column that the sources are partitioned by.\n \n-Primary key\n------------\n+Keys\n+----\n \n-A *primary key*, when present, defines the partitioning column. Tables are\n+A *key*, when present, defines the partitioning column. Tables are\n always partitioned by their primary key, and ksqlDB doesn't allow repartitioning\n of tables, so you can only use a table's primary key as a join column.\n \n Streams, on the other hand, may not have a defined key or may have a key that\n-differs from the join column. In these cases, ksqlDB repartitions the stream,\n-which implicitly defines a primary key for it. The primary keys for streams\n-and tables are of data type `VARCHAR`. \n+differs from the join column. In these cases, ksqlDB internally repartitions\n+the stream, which implicitly defines a key for it.\n \n-For primary keys to match, they must have the same serialization format. For\n-example, you can't join a `VARCHAR` key encoded as JSON with one encoded as\n-AVRO.\n-\n-!!! note\n-    ksqlDB requires that keys are encoded as UTF-8 strings.\n+ksqlDB requires keys to use the `KAFKA` format. For more information, see\n+[Serialization Formats](serialization.md#serialization-formats). If internally\n+repartitioning, the correct format will be used.\n \n Because you can only use the primary key of a table as a joining column, it's\n important to understand how keys are defined. For both streams and tables, the\n-column that represents the primary key has the name `ROWKEY`.\n+column that represents the key has the name `ROWKEY`.\n \n When you create a table by using a CREATE TABLE statement, the key of the\n table is the same as that of the records in the underlying Kafka topic.\n+It is important that you set the type of the `ROWKEY` column in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODczMzI3OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/joins/partition-data.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1MToyOVrOFnDhPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1MToyOVrOFnDhPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5NjQ0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            CREATE TABLE statement to match the key data in the underlying Kafka topic.\n          \n          \n            \n            CREATE TABLE statement to match the key data in the underlying {{ site.ak }} topic.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376496445", "createdAt": "2020-02-07T16:51:29Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/joins/partition-data.md", "diffHunk": "@@ -16,67 +16,70 @@ records based on the joining column. To ensure that records with the same\n join column are co-located on the same stream task, the join column must\n coincide with the column that the sources are partitioned by.\n \n-Primary key\n------------\n+Keys\n+----\n \n-A *primary key*, when present, defines the partitioning column. Tables are\n+A *key*, when present, defines the partitioning column. Tables are\n always partitioned by their primary key, and ksqlDB doesn't allow repartitioning\n of tables, so you can only use a table's primary key as a join column.\n \n Streams, on the other hand, may not have a defined key or may have a key that\n-differs from the join column. In these cases, ksqlDB repartitions the stream,\n-which implicitly defines a primary key for it. The primary keys for streams\n-and tables are of data type `VARCHAR`. \n+differs from the join column. In these cases, ksqlDB internally repartitions\n+the stream, which implicitly defines a key for it.\n \n-For primary keys to match, they must have the same serialization format. For\n-example, you can't join a `VARCHAR` key encoded as JSON with one encoded as\n-AVRO.\n-\n-!!! note\n-    ksqlDB requires that keys are encoded as UTF-8 strings.\n+ksqlDB requires keys to use the `KAFKA` format. For more information, see\n+[Serialization Formats](serialization.md#serialization-formats). If internally\n+repartitioning, the correct format will be used.\n \n Because you can only use the primary key of a table as a joining column, it's\n important to understand how keys are defined. For both streams and tables, the\n-column that represents the primary key has the name `ROWKEY`.\n+column that represents the key has the name `ROWKEY`.\n \n When you create a table by using a CREATE TABLE statement, the key of the\n table is the same as that of the records in the underlying Kafka topic.\n+It is important that you set the type of the `ROWKEY` column in the\n+CREATE TABLE statement to match the key data in the underlying Kafka topic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODczNTAxOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/joins/partition-data.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1MjowN1rOFnDiaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1MjowN1rOFnDiaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5Njc0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                - When grouping by a single column or expression the type of `ROWKEY` in the\n          \n          \n            \n                - When grouping by a single column or expression, the type of `ROWKEY` in the", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376496747", "createdAt": "2020-02-07T16:52:07Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/joins/partition-data.md", "diffHunk": "@@ -16,67 +16,70 @@ records based on the joining column. To ensure that records with the same\n join column are co-located on the same stream task, the join column must\n coincide with the column that the sources are partitioned by.\n \n-Primary key\n------------\n+Keys\n+----\n \n-A *primary key*, when present, defines the partitioning column. Tables are\n+A *key*, when present, defines the partitioning column. Tables are\n always partitioned by their primary key, and ksqlDB doesn't allow repartitioning\n of tables, so you can only use a table's primary key as a join column.\n \n Streams, on the other hand, may not have a defined key or may have a key that\n-differs from the join column. In these cases, ksqlDB repartitions the stream,\n-which implicitly defines a primary key for it. The primary keys for streams\n-and tables are of data type `VARCHAR`. \n+differs from the join column. In these cases, ksqlDB internally repartitions\n+the stream, which implicitly defines a key for it.\n \n-For primary keys to match, they must have the same serialization format. For\n-example, you can't join a `VARCHAR` key encoded as JSON with one encoded as\n-AVRO.\n-\n-!!! note\n-    ksqlDB requires that keys are encoded as UTF-8 strings.\n+ksqlDB requires keys to use the `KAFKA` format. For more information, see\n+[Serialization Formats](serialization.md#serialization-formats). If internally\n+repartitioning, the correct format will be used.\n \n Because you can only use the primary key of a table as a joining column, it's\n important to understand how keys are defined. For both streams and tables, the\n-column that represents the primary key has the name `ROWKEY`.\n+column that represents the key has the name `ROWKEY`.\n \n When you create a table by using a CREATE TABLE statement, the key of the\n table is the same as that of the records in the underlying Kafka topic.\n+It is important that you set the type of the `ROWKEY` column in the\n+CREATE TABLE statement to match the key data in the underlying Kafka topic.\n \n When you create a table by using a CREATE TABLE AS SELECT statement, the key of\n the resulting table is determined as follows:\n \n-- If the FROM clause is a single source, and the source is a stream, the\n-  statement must have a GROUP BY clause, where the grouping columns determine\n-  the key of the resulting table.\n-- If the single source is a table, the key is copied over from the key of the\n-  table in the FROM clause. If the FROM clause is a join, the primary key of the\n-  resulting table is the joining column, since joins are allowed only on keys.\n-- If the statement contains a GROUP BY, the key of the resulting table\n-  comprises the grouping columns.\n-\n-When the primary key consists of multiple columns, like when it's created as\n-the result of a GROUP BY clause with multiple grouping columns, you must use\n-ROWKEY as the joining column. Even when the primary key consists of a single\n-column, we recommend using ROWKEY as the joining column to avoid confusion.\n-\n-The following example shows a `users` table joined with a `clicks` stream \n+- If the FROM clause contains a stream, the statement must have a GROUP BY clause,\n+  and the grouping columns determine the key of the resulting table.\n+    - When grouping by a single column or expression the type of `ROWKEY` in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODczNTcwOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/joins/partition-data.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1MjoyMVrOFnDi3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1MjoyMVrOFnDi3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5Njg2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                - When grouping by multiple columns or expressions the type of `ROWKEY` in the\n          \n          \n            \n                - When grouping by multiple columns or expressions, the type of `ROWKEY` in the", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376496862", "createdAt": "2020-02-07T16:52:21Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/joins/partition-data.md", "diffHunk": "@@ -16,67 +16,70 @@ records based on the joining column. To ensure that records with the same\n join column are co-located on the same stream task, the join column must\n coincide with the column that the sources are partitioned by.\n \n-Primary key\n------------\n+Keys\n+----\n \n-A *primary key*, when present, defines the partitioning column. Tables are\n+A *key*, when present, defines the partitioning column. Tables are\n always partitioned by their primary key, and ksqlDB doesn't allow repartitioning\n of tables, so you can only use a table's primary key as a join column.\n \n Streams, on the other hand, may not have a defined key or may have a key that\n-differs from the join column. In these cases, ksqlDB repartitions the stream,\n-which implicitly defines a primary key for it. The primary keys for streams\n-and tables are of data type `VARCHAR`. \n+differs from the join column. In these cases, ksqlDB internally repartitions\n+the stream, which implicitly defines a key for it.\n \n-For primary keys to match, they must have the same serialization format. For\n-example, you can't join a `VARCHAR` key encoded as JSON with one encoded as\n-AVRO.\n-\n-!!! note\n-    ksqlDB requires that keys are encoded as UTF-8 strings.\n+ksqlDB requires keys to use the `KAFKA` format. For more information, see\n+[Serialization Formats](serialization.md#serialization-formats). If internally\n+repartitioning, the correct format will be used.\n \n Because you can only use the primary key of a table as a joining column, it's\n important to understand how keys are defined. For both streams and tables, the\n-column that represents the primary key has the name `ROWKEY`.\n+column that represents the key has the name `ROWKEY`.\n \n When you create a table by using a CREATE TABLE statement, the key of the\n table is the same as that of the records in the underlying Kafka topic.\n+It is important that you set the type of the `ROWKEY` column in the\n+CREATE TABLE statement to match the key data in the underlying Kafka topic.\n \n When you create a table by using a CREATE TABLE AS SELECT statement, the key of\n the resulting table is determined as follows:\n \n-- If the FROM clause is a single source, and the source is a stream, the\n-  statement must have a GROUP BY clause, where the grouping columns determine\n-  the key of the resulting table.\n-- If the single source is a table, the key is copied over from the key of the\n-  table in the FROM clause. If the FROM clause is a join, the primary key of the\n-  resulting table is the joining column, since joins are allowed only on keys.\n-- If the statement contains a GROUP BY, the key of the resulting table\n-  comprises the grouping columns.\n-\n-When the primary key consists of multiple columns, like when it's created as\n-the result of a GROUP BY clause with multiple grouping columns, you must use\n-ROWKEY as the joining column. Even when the primary key consists of a single\n-column, we recommend using ROWKEY as the joining column to avoid confusion.\n-\n-The following example shows a `users` table joined with a `clicks` stream \n+- If the FROM clause contains a stream, the statement must have a GROUP BY clause,\n+  and the grouping columns determine the key of the resulting table.\n+    - When grouping by a single column or expression the type of `ROWKEY` in the\n+    resulting stream matches the type of the column or expression.\n+    - When grouping by multiple columns or expressions the type of `ROWKEY` in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODczNzQ3OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/joins/partition-data.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1Mjo1MlrOFnDj6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1Mjo1MlrOFnDj6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5NzEzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                - When grouping by a single column or expression the type of `ROWKEY` in the\n          \n          \n            \n                - When grouping by a single column or expression, the type of `ROWKEY` in the", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376497131", "createdAt": "2020-02-07T16:52:52Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/joins/partition-data.md", "diffHunk": "@@ -16,67 +16,70 @@ records based on the joining column. To ensure that records with the same\n join column are co-located on the same stream task, the join column must\n coincide with the column that the sources are partitioned by.\n \n-Primary key\n------------\n+Keys\n+----\n \n-A *primary key*, when present, defines the partitioning column. Tables are\n+A *key*, when present, defines the partitioning column. Tables are\n always partitioned by their primary key, and ksqlDB doesn't allow repartitioning\n of tables, so you can only use a table's primary key as a join column.\n \n Streams, on the other hand, may not have a defined key or may have a key that\n-differs from the join column. In these cases, ksqlDB repartitions the stream,\n-which implicitly defines a primary key for it. The primary keys for streams\n-and tables are of data type `VARCHAR`. \n+differs from the join column. In these cases, ksqlDB internally repartitions\n+the stream, which implicitly defines a key for it.\n \n-For primary keys to match, they must have the same serialization format. For\n-example, you can't join a `VARCHAR` key encoded as JSON with one encoded as\n-AVRO.\n-\n-!!! note\n-    ksqlDB requires that keys are encoded as UTF-8 strings.\n+ksqlDB requires keys to use the `KAFKA` format. For more information, see\n+[Serialization Formats](serialization.md#serialization-formats). If internally\n+repartitioning, the correct format will be used.\n \n Because you can only use the primary key of a table as a joining column, it's\n important to understand how keys are defined. For both streams and tables, the\n-column that represents the primary key has the name `ROWKEY`.\n+column that represents the key has the name `ROWKEY`.\n \n When you create a table by using a CREATE TABLE statement, the key of the\n table is the same as that of the records in the underlying Kafka topic.\n+It is important that you set the type of the `ROWKEY` column in the\n+CREATE TABLE statement to match the key data in the underlying Kafka topic.\n \n When you create a table by using a CREATE TABLE AS SELECT statement, the key of\n the resulting table is determined as follows:\n \n-- If the FROM clause is a single source, and the source is a stream, the\n-  statement must have a GROUP BY clause, where the grouping columns determine\n-  the key of the resulting table.\n-- If the single source is a table, the key is copied over from the key of the\n-  table in the FROM clause. If the FROM clause is a join, the primary key of the\n-  resulting table is the joining column, since joins are allowed only on keys.\n-- If the statement contains a GROUP BY, the key of the resulting table\n-  comprises the grouping columns.\n-\n-When the primary key consists of multiple columns, like when it's created as\n-the result of a GROUP BY clause with multiple grouping columns, you must use\n-ROWKEY as the joining column. Even when the primary key consists of a single\n-column, we recommend using ROWKEY as the joining column to avoid confusion.\n-\n-The following example shows a `users` table joined with a `clicks` stream \n+- If the FROM clause contains a stream, the statement must have a GROUP BY clause,\n+  and the grouping columns determine the key of the resulting table.\n+    - When grouping by a single column or expression the type of `ROWKEY` in the\n+    resulting stream matches the type of the column or expression.\n+    - When grouping by multiple columns or expressions the type of `ROWKEY` in the\n+    resulting stream is a `STRING`.\n+- If the FROM clause contains only tables and no GROUP BY clause, the key is\n+  copied over from the key of the table(s) in the FROM clause.\n+- If the FROM clause contains only tables and has a GROUP BY clause, the\n+  grouping columns determine the key of the resulting table.\n+    - When grouping by a single column or expression the type of `ROWKEY` in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODczODE5OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/joins/partition-data.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1MzowNlrOFnDkVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1MzowNlrOFnDkVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5NzIzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                - When grouping by multiple columns or expressions the type of `ROWKEY` in the\n          \n          \n            \n                - When grouping by multiple columns or expressions, the type of `ROWKEY` in the", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376497239", "createdAt": "2020-02-07T16:53:06Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/joins/partition-data.md", "diffHunk": "@@ -16,67 +16,70 @@ records based on the joining column. To ensure that records with the same\n join column are co-located on the same stream task, the join column must\n coincide with the column that the sources are partitioned by.\n \n-Primary key\n------------\n+Keys\n+----\n \n-A *primary key*, when present, defines the partitioning column. Tables are\n+A *key*, when present, defines the partitioning column. Tables are\n always partitioned by their primary key, and ksqlDB doesn't allow repartitioning\n of tables, so you can only use a table's primary key as a join column.\n \n Streams, on the other hand, may not have a defined key or may have a key that\n-differs from the join column. In these cases, ksqlDB repartitions the stream,\n-which implicitly defines a primary key for it. The primary keys for streams\n-and tables are of data type `VARCHAR`. \n+differs from the join column. In these cases, ksqlDB internally repartitions\n+the stream, which implicitly defines a key for it.\n \n-For primary keys to match, they must have the same serialization format. For\n-example, you can't join a `VARCHAR` key encoded as JSON with one encoded as\n-AVRO.\n-\n-!!! note\n-    ksqlDB requires that keys are encoded as UTF-8 strings.\n+ksqlDB requires keys to use the `KAFKA` format. For more information, see\n+[Serialization Formats](serialization.md#serialization-formats). If internally\n+repartitioning, the correct format will be used.\n \n Because you can only use the primary key of a table as a joining column, it's\n important to understand how keys are defined. For both streams and tables, the\n-column that represents the primary key has the name `ROWKEY`.\n+column that represents the key has the name `ROWKEY`.\n \n When you create a table by using a CREATE TABLE statement, the key of the\n table is the same as that of the records in the underlying Kafka topic.\n+It is important that you set the type of the `ROWKEY` column in the\n+CREATE TABLE statement to match the key data in the underlying Kafka topic.\n \n When you create a table by using a CREATE TABLE AS SELECT statement, the key of\n the resulting table is determined as follows:\n \n-- If the FROM clause is a single source, and the source is a stream, the\n-  statement must have a GROUP BY clause, where the grouping columns determine\n-  the key of the resulting table.\n-- If the single source is a table, the key is copied over from the key of the\n-  table in the FROM clause. If the FROM clause is a join, the primary key of the\n-  resulting table is the joining column, since joins are allowed only on keys.\n-- If the statement contains a GROUP BY, the key of the resulting table\n-  comprises the grouping columns.\n-\n-When the primary key consists of multiple columns, like when it's created as\n-the result of a GROUP BY clause with multiple grouping columns, you must use\n-ROWKEY as the joining column. Even when the primary key consists of a single\n-column, we recommend using ROWKEY as the joining column to avoid confusion.\n-\n-The following example shows a `users` table joined with a `clicks` stream \n+- If the FROM clause contains a stream, the statement must have a GROUP BY clause,\n+  and the grouping columns determine the key of the resulting table.\n+    - When grouping by a single column or expression the type of `ROWKEY` in the\n+    resulting stream matches the type of the column or expression.\n+    - When grouping by multiple columns or expressions the type of `ROWKEY` in the\n+    resulting stream is a `STRING`.\n+- If the FROM clause contains only tables and no GROUP BY clause, the key is\n+  copied over from the key of the table(s) in the FROM clause.\n+- If the FROM clause contains only tables and has a GROUP BY clause, the\n+  grouping columns determine the key of the resulting table.\n+    - When grouping by a single column or expression the type of `ROWKEY` in the\n+    resulting stream matches the type of the column or expression.\n+    - When grouping by multiple columns or expressions the type of `ROWKEY` in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODc0MjE3OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/joins/partition-data.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1NDoxM1rOFnDmtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1NDoxM1rOFnDmtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5Nzg0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                -- join of users table with clicks stream, joining on the tables primary key alias and the streams userId column: \n          \n          \n            \n                -- join of users table with clicks stream, joining on the table's primary key alias and the stream's userId column:", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376497845", "createdAt": "2020-02-07T16:54:13Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/joins/partition-data.md", "diffHunk": "@@ -16,67 +16,70 @@ records based on the joining column. To ensure that records with the same\n join column are co-located on the same stream task, the join column must\n coincide with the column that the sources are partitioned by.\n \n-Primary key\n------------\n+Keys\n+----\n \n-A *primary key*, when present, defines the partitioning column. Tables are\n+A *key*, when present, defines the partitioning column. Tables are\n always partitioned by their primary key, and ksqlDB doesn't allow repartitioning\n of tables, so you can only use a table's primary key as a join column.\n \n Streams, on the other hand, may not have a defined key or may have a key that\n-differs from the join column. In these cases, ksqlDB repartitions the stream,\n-which implicitly defines a primary key for it. The primary keys for streams\n-and tables are of data type `VARCHAR`. \n+differs from the join column. In these cases, ksqlDB internally repartitions\n+the stream, which implicitly defines a key for it.\n \n-For primary keys to match, they must have the same serialization format. For\n-example, you can't join a `VARCHAR` key encoded as JSON with one encoded as\n-AVRO.\n-\n-!!! note\n-    ksqlDB requires that keys are encoded as UTF-8 strings.\n+ksqlDB requires keys to use the `KAFKA` format. For more information, see\n+[Serialization Formats](serialization.md#serialization-formats). If internally\n+repartitioning, the correct format will be used.\n \n Because you can only use the primary key of a table as a joining column, it's\n important to understand how keys are defined. For both streams and tables, the\n-column that represents the primary key has the name `ROWKEY`.\n+column that represents the key has the name `ROWKEY`.\n \n When you create a table by using a CREATE TABLE statement, the key of the\n table is the same as that of the records in the underlying Kafka topic.\n+It is important that you set the type of the `ROWKEY` column in the\n+CREATE TABLE statement to match the key data in the underlying Kafka topic.\n \n When you create a table by using a CREATE TABLE AS SELECT statement, the key of\n the resulting table is determined as follows:\n \n-- If the FROM clause is a single source, and the source is a stream, the\n-  statement must have a GROUP BY clause, where the grouping columns determine\n-  the key of the resulting table.\n-- If the single source is a table, the key is copied over from the key of the\n-  table in the FROM clause. If the FROM clause is a join, the primary key of the\n-  resulting table is the joining column, since joins are allowed only on keys.\n-- If the statement contains a GROUP BY, the key of the resulting table\n-  comprises the grouping columns.\n-\n-When the primary key consists of multiple columns, like when it's created as\n-the result of a GROUP BY clause with multiple grouping columns, you must use\n-ROWKEY as the joining column. Even when the primary key consists of a single\n-column, we recommend using ROWKEY as the joining column to avoid confusion.\n-\n-The following example shows a `users` table joined with a `clicks` stream \n+- If the FROM clause contains a stream, the statement must have a GROUP BY clause,\n+  and the grouping columns determine the key of the resulting table.\n+    - When grouping by a single column or expression the type of `ROWKEY` in the\n+    resulting stream matches the type of the column or expression.\n+    - When grouping by multiple columns or expressions the type of `ROWKEY` in the\n+    resulting stream is a `STRING`.\n+- If the FROM clause contains only tables and no GROUP BY clause, the key is\n+  copied over from the key of the table(s) in the FROM clause.\n+- If the FROM clause contains only tables and has a GROUP BY clause, the\n+  grouping columns determine the key of the resulting table.\n+    - When grouping by a single column or expression the type of `ROWKEY` in the\n+    resulting stream matches the type of the column or expression.\n+    - When grouping by multiple columns or expressions the type of `ROWKEY` in the\n+    resulting stream is a `STRING`.\n+\n+The following example shows a `users` table joined with a `clicks` stream\n on the `userId` column. The `users` table has the correct primary key\n `userId` that coincides with the joining column. But the `clicks` stream\n doesn't have a defined key, and ksqlDB must repartition it on the joining\n-column (`userId`) and assign the primary key before performing the join.\n+column (`userId`) and assign the key before performing the join.\n \n ```sql\n     -- clicks stream, with an unknown key.\n-    -- the schema of stream clicks is: ROWTIME | ROWKEY | USERID | URL\n-    CREATE STREAM clicks (userId STRING, url STRING) WITH(kafka_topic='clickstream', value_format='json');\n+    -- the schema of stream clicks is: ROWTIME BIGINT | ROWKEY STRING | USERID BIGINT | URL STRING\n+    CREATE STREAM clicks (userId BIGINT, url STRING) WITH(kafka_topic='clickstream', value_format='json');\n \n-    -- the primary key of table users becomes userId that is the key of the records topic:\n-    -- the schema of table users is: ROWTIME | ROWKEY | USERID | URL\n-    CREATE TABLE  users  (userId STRING, fullName STRING) WITH(kafka_topic='users', value_format='json', key='userId');\n+    -- the primary key of table users is a BIGINT. \n+    -- The userId column in the value matches the key, so can be used as an alias for ROWKEY in queries to make them more readable.\n+    -- the schema of table users is: ROWTIME BIGINT | ROWKEY BIGINT | USERID BIGINT | FULLNAME STRING\n+    CREATE TABLE  users  (ROWKEY BIGINT KEY, userId BIGINT, fullName STRING) WITH(kafka_topic='users', value_format='json', key='userId');\n \n-    -- join using primary key of table users with newly assigned key of stream clicks\n+    -- join of users table with clicks stream, joining on the tables primary key alias and the streams userId column: ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODc1NjE1OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/joins/partition-data.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1ODozMVrOFnDvHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjo1ODozMVrOFnDvHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ5OTk5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If the schema of the columns you wish to join on do not match it may be possible\n          \n          \n            \n            If the schema of the columns you wish to join on don't match, it may be possible", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376499999", "createdAt": "2020-02-07T16:58:31Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/joins/partition-data.md", "diffHunk": "@@ -98,26 +101,35 @@ When your inputs are co-partitioned, records with the same key, from\n both sides of the join, are delivered to the same stream task during\n processing.\n \n-### Records Have the Same Keying Scheme\n+### Records Have the Same Keying Schema\n \n-For a join to work, the keys from both sides must have the same serialized\n-binary data.\n+For a join to work, the keys from both sides must have the same SQL type.\n \n For example, you can join a stream of user clicks that's keyed on a `VARCHAR`\n user id with a table of user profiles that's also keyed on a `VARCHAR` user id.\n Records with the exact same user id on both sides will be joined.\n \n-ksqlDB requires that keys are UTF-8 encoded strings.\n+If the schema of the columns you wish to join on do not match it may be possible", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODc2Mjg3OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/syntax-reference.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowMDo0NlrOFnDzXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowMDo0NlrOFnDzXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwMTA4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                userid) in the message value but the actual message key in Kafka is\n          \n          \n            \n                `userid`) in the message value, but the actual message key in {{ site.ak }} is", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376501086", "createdAt": "2020-02-07T17:00:46Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/syntax-reference.md", "diffHunk": "@@ -458,63 +460,47 @@ Example:\n \n -   Goal: You want to create a table from a topic, which is keyed by\n     userid of type INT.\n--   Problem: The message key is present as a field/column (aptly named\n-    userid) in the message value but in the wrong format (INT instead of\n-    VARCHAR).\n+-   Problem: The required key is present as a field/column (aptly named\n+    userid) in the message value but the actual message key in Kafka is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODc2NTkwOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/syntax-reference.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowMTo0MVrOFnD1Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowMTo0MVrOFnD1Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwMTU0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            -- Or, if you would prefer, you can keep userId in the value of the repartitioned data\n          \n          \n            \n            -- Or, if you prefer, you can keep userId in the value of the repartitioned data", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376501547", "createdAt": "2020-02-07T17:01:41Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/syntax-reference.md", "diffHunk": "@@ -458,63 +460,47 @@ Example:\n \n -   Goal: You want to create a table from a topic, which is keyed by\n     userid of type INT.\n--   Problem: The message key is present as a field/column (aptly named\n-    userid) in the message value but in the wrong format (INT instead of\n-    VARCHAR).\n+-   Problem: The required key is present as a field/column (aptly named\n+    userid) in the message value but the actual message key in Kafka is\n+    not set or has some other value or format.\n \n ```sql\n -- Create a stream on the original topic\n-CREATE STREAM users_with_wrong_key_format (userid INT, username VARCHAR, email VARCHAR)\n+CREATE STREAM users_with_wrong_key (userid INT, username VARCHAR, email VARCHAR)\n   WITH (KAFKA_TOPIC='users', VALUE_FORMAT='JSON');\n-\n+  \n -- Derive a new stream with the required key changes.\n -- 1) The CAST statement converts the key to the required format.\n -- 2) The PARTITION BY clause re-partitions the stream based on the new, converted key.\n+-- The resulting schema will be: ROWKEY INT, USERNAME STRING, EMAIL STRING\n+-- the userId will be stored in ROWKEY.\n CREATE STREAM users_with_proper_key\n   WITH(KAFKA_TOPIC='users-with-proper-key') AS\n-  SELECT CAST(userid as VARCHAR) as userid_string, username, email\n-  FROM users_with_wrong_key_format\n-  PARTITION BY userid_string\n+  SELECT username, email\n+  FROM users_with_wrong_key\n+  PARTITION BY userid\n   EMIT CHANGES;\n \n -- Now you can create the table on the properly keyed stream.\n-CREATE TABLE users_table (userid_string VARCHAR, username VARCHAR, email VARCHAR)\n+CREATE TABLE users_table (ROWKEY INT KEY, username VARCHAR, email VARCHAR)\n   WITH (KAFKA_TOPIC='users-with-proper-key',\n-        VALUE_FORMAT='JSON',\n-        KEY='userid_string');\n-```\n-\n-Example:\n-\n--   Goal: You want to create a table from a topic, which is keyed by\n-    userid of type INT.\n--   Problem: The message key is not present as a field/column in the\n-    topic's message values.\n-\n-```sql\n--- Create a stream on the original topic.\n--- The topic is keyed by userid, which is available as the implicit column ROWKEY\n--- in the users_with_missing_key stream. Note how the explicit column definitions\n--- only define username and email but not userid.\n-CREATE STREAM users_with_missing_key (username VARCHAR, email VARCHAR)\n-  WITH (KAFKA_TOPIC='users', VALUE_FORMAT='JSON');\n-\n--- Derive a new stream with the required key changes.\n--- 1) The contents of ROWKEY (message key) are copied into the message value as the userid_string column,\n---    and the CAST statement converts the key to the required format.\n--- 2) The PARTITION BY clause re-partitions the stream based on the new, converted key.\n-CREATE STREAM users_with_proper_key\n-  WITH(KAFKA_TOPIC='users-with-proper-key') AS\n-  SELECT CAST(ROWKEY as VARCHAR) as userid_string, username, email\n-  FROM users_with_missing_key\n-  PARTITION BY userid_string\n+        VALUE_FORMAT='JSON');\n+\n+-- Or, if you would prefer, you can keep userId in the value of the repartitioned data", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODc2NzA0OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/syntax-reference.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowMjowNVrOFnD14w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowMjowNVrOFnD14w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwMTczMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            -- This would allow you to use the more descriptive `userId` rather than ROWTIME.\n          \n          \n            \n            -- This enables using the more descriptive `userId` rather than ROWTIME.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376501731", "createdAt": "2020-02-07T17:02:05Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/syntax-reference.md", "diffHunk": "@@ -458,63 +460,47 @@ Example:\n \n -   Goal: You want to create a table from a topic, which is keyed by\n     userid of type INT.\n--   Problem: The message key is present as a field/column (aptly named\n-    userid) in the message value but in the wrong format (INT instead of\n-    VARCHAR).\n+-   Problem: The required key is present as a field/column (aptly named\n+    userid) in the message value but the actual message key in Kafka is\n+    not set or has some other value or format.\n \n ```sql\n -- Create a stream on the original topic\n-CREATE STREAM users_with_wrong_key_format (userid INT, username VARCHAR, email VARCHAR)\n+CREATE STREAM users_with_wrong_key (userid INT, username VARCHAR, email VARCHAR)\n   WITH (KAFKA_TOPIC='users', VALUE_FORMAT='JSON');\n-\n+  \n -- Derive a new stream with the required key changes.\n -- 1) The CAST statement converts the key to the required format.\n -- 2) The PARTITION BY clause re-partitions the stream based on the new, converted key.\n+-- The resulting schema will be: ROWKEY INT, USERNAME STRING, EMAIL STRING\n+-- the userId will be stored in ROWKEY.\n CREATE STREAM users_with_proper_key\n   WITH(KAFKA_TOPIC='users-with-proper-key') AS\n-  SELECT CAST(userid as VARCHAR) as userid_string, username, email\n-  FROM users_with_wrong_key_format\n-  PARTITION BY userid_string\n+  SELECT username, email\n+  FROM users_with_wrong_key\n+  PARTITION BY userid\n   EMIT CHANGES;\n \n -- Now you can create the table on the properly keyed stream.\n-CREATE TABLE users_table (userid_string VARCHAR, username VARCHAR, email VARCHAR)\n+CREATE TABLE users_table (ROWKEY INT KEY, username VARCHAR, email VARCHAR)\n   WITH (KAFKA_TOPIC='users-with-proper-key',\n-        VALUE_FORMAT='JSON',\n-        KEY='userid_string');\n-```\n-\n-Example:\n-\n--   Goal: You want to create a table from a topic, which is keyed by\n-    userid of type INT.\n--   Problem: The message key is not present as a field/column in the\n-    topic's message values.\n-\n-```sql\n--- Create a stream on the original topic.\n--- The topic is keyed by userid, which is available as the implicit column ROWKEY\n--- in the users_with_missing_key stream. Note how the explicit column definitions\n--- only define username and email but not userid.\n-CREATE STREAM users_with_missing_key (username VARCHAR, email VARCHAR)\n-  WITH (KAFKA_TOPIC='users', VALUE_FORMAT='JSON');\n-\n--- Derive a new stream with the required key changes.\n--- 1) The contents of ROWKEY (message key) are copied into the message value as the userid_string column,\n---    and the CAST statement converts the key to the required format.\n--- 2) The PARTITION BY clause re-partitions the stream based on the new, converted key.\n-CREATE STREAM users_with_proper_key\n-  WITH(KAFKA_TOPIC='users-with-proper-key') AS\n-  SELECT CAST(ROWKEY as VARCHAR) as userid_string, username, email\n-  FROM users_with_missing_key\n-  PARTITION BY userid_string\n+        VALUE_FORMAT='JSON');\n+\n+-- Or, if you would prefer, you can keep userId in the value of the repartitioned data\n+-- This would allow you to use the more descriptive `userId` rather than ROWTIME.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODc3MTgxOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowMzo0NlrOFnD48Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowMzo0NlrOFnD48Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwMjUxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            By default, KSQL hides internal / system topics. Use the SHOW ALL TOPICS\n          \n          \n            \n            By default, KSQL hides internal and system topics. Use the SHOW ALL TOPICS", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376502513", "createdAt": "2020-02-07T17:03:46Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -141,25 +141,50 @@ SHOW TOPICS;\n Your output should resemble:\n \n ```\n- Kafka Topic        | Partitions | Partition Replicas\n-------------------------------------------------------\n- _confluent-metrics | 12         | 1\n- _schemas           | 1          | 1\n- pageviews          | 1          | 1\n- users              | 1          | 1\n-------------------------------------------------------\n+ Kafka Topic                 | Partitions | Partition Replicas\n+--------------------------------------------------------------\n+ default_ksql_processing_log | 1          | 1\n+ pageviews                   | 1          | 1\n+ users                       | 1          | 1\n+--------------------------------------------------------------\n+```\n+\n+By default, KSQL hides internal / system topics. Use the SHOW ALL TOPICS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODc3MjYzOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowNDowM1rOFnD5cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowNDowM1rOFnD5cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwMjY0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            statement to see the full list of topics in the Kafka cluster:\n          \n          \n            \n            statement to see the full list of topics in the {{ site.ak }} cluster:", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376502642", "createdAt": "2020-02-07T17:04:03Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -141,25 +141,50 @@ SHOW TOPICS;\n Your output should resemble:\n \n ```\n- Kafka Topic        | Partitions | Partition Replicas\n-------------------------------------------------------\n- _confluent-metrics | 12         | 1\n- _schemas           | 1          | 1\n- pageviews          | 1          | 1\n- users              | 1          | 1\n-------------------------------------------------------\n+ Kafka Topic                 | Partitions | Partition Replicas\n+--------------------------------------------------------------\n+ default_ksql_processing_log | 1          | 1\n+ pageviews                   | 1          | 1\n+ users                       | 1          | 1\n+--------------------------------------------------------------\n+```\n+\n+By default, KSQL hides internal / system topics. Use the SHOW ALL TOPICS\n+statement to see the full list of topics in the Kafka cluster:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODc3Mzc0OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowNDoyOVrOFnD6Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowNDoyOVrOFnD6Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwMjgxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              Kafka Topic                            | Partitions | Partition Replicas \n          \n          \n            \n             Kafka Topic                            | Partitions | Partition Replicas", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376502818", "createdAt": "2020-02-07T17:04:29Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -141,25 +141,50 @@ SHOW TOPICS;\n Your output should resemble:\n \n ```\n- Kafka Topic        | Partitions | Partition Replicas\n-------------------------------------------------------\n- _confluent-metrics | 12         | 1\n- _schemas           | 1          | 1\n- pageviews          | 1          | 1\n- users              | 1          | 1\n-------------------------------------------------------\n+ Kafka Topic                 | Partitions | Partition Replicas\n+--------------------------------------------------------------\n+ default_ksql_processing_log | 1          | 1\n+ pageviews                   | 1          | 1\n+ users                       | 1          | 1\n+--------------------------------------------------------------\n+```\n+\n+By default, KSQL hides internal / system topics. Use the SHOW ALL TOPICS\n+statement to see the full list of topics in the Kafka cluster:\n+\n+```sql\n+SHOW ALL TOPICS;\n+```\n+\n+Your output should resemble:\n+\n+```\n+  Kafka Topic                            | Partitions | Partition Replicas ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODc3Njc0OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowNTo0MFrOFnD8Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowNTo0MFrOFnD8Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwMzMxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               The PRINT statement is one of the few commands in ksqlDB that are\n          \n          \n            \n               The PRINT statement is one of the few case-sensitive commands in ksqlDB,", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376503310", "createdAt": "2020-02-07T17:05:40Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -141,25 +141,50 @@ SHOW TOPICS;\n Your output should resemble:\n \n ```\n- Kafka Topic        | Partitions | Partition Replicas\n-------------------------------------------------------\n- _confluent-metrics | 12         | 1\n- _schemas           | 1          | 1\n- pageviews          | 1          | 1\n- users              | 1          | 1\n-------------------------------------------------------\n+ Kafka Topic                 | Partitions | Partition Replicas\n+--------------------------------------------------------------\n+ default_ksql_processing_log | 1          | 1\n+ pageviews                   | 1          | 1\n+ users                       | 1          | 1\n+--------------------------------------------------------------\n+```\n+\n+By default, KSQL hides internal / system topics. Use the SHOW ALL TOPICS\n+statement to see the full list of topics in the Kafka cluster:\n+\n+```sql\n+SHOW ALL TOPICS;\n+```\n+\n+Your output should resemble:\n+\n+```\n+  Kafka Topic                            | Partitions | Partition Replicas \n+--------------------------------------------------------------------------\n+ __confluent.support.metrics            | 1          | 1                  \n+ _confluent-ksql-default__command_topic | 1          | 1                  \n+ _confluent-license                     | 1          | 1                  \n+ _confluent-metrics                     | 12         | 1                  \n+ default_ksql_processing_log            | 1          | 1                  \n+ pageviews                              | 1          | 1                  \n+ users                                  | 1          | 1                  \n+--------------------------------------------------------------------------\n ```\n \n Inspect the `users` topic by using the PRINT statement:\n \n ```sql\n-PRINT 'users';\n+PRINT users;\n ```\n \n+!!! note\n+   The PRINT statement is one of the few commands in ksqlDB that are", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODc3NzU3OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowNTo1NlrOFnD8fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowNTo1NlrOFnD8fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwMzQyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               case-sensitive, even when the topic name is not quoted.\n          \n          \n            \n               even when the topic name is not quoted.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376503422", "createdAt": "2020-02-07T17:05:56Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -141,25 +141,50 @@ SHOW TOPICS;\n Your output should resemble:\n \n ```\n- Kafka Topic        | Partitions | Partition Replicas\n-------------------------------------------------------\n- _confluent-metrics | 12         | 1\n- _schemas           | 1          | 1\n- pageviews          | 1          | 1\n- users              | 1          | 1\n-------------------------------------------------------\n+ Kafka Topic                 | Partitions | Partition Replicas\n+--------------------------------------------------------------\n+ default_ksql_processing_log | 1          | 1\n+ pageviews                   | 1          | 1\n+ users                       | 1          | 1\n+--------------------------------------------------------------\n+```\n+\n+By default, KSQL hides internal / system topics. Use the SHOW ALL TOPICS\n+statement to see the full list of topics in the Kafka cluster:\n+\n+```sql\n+SHOW ALL TOPICS;\n+```\n+\n+Your output should resemble:\n+\n+```\n+  Kafka Topic                            | Partitions | Partition Replicas \n+--------------------------------------------------------------------------\n+ __confluent.support.metrics            | 1          | 1                  \n+ _confluent-ksql-default__command_topic | 1          | 1                  \n+ _confluent-license                     | 1          | 1                  \n+ _confluent-metrics                     | 12         | 1                  \n+ default_ksql_processing_log            | 1          | 1                  \n+ pageviews                              | 1          | 1                  \n+ users                                  | 1          | 1                  \n+--------------------------------------------------------------------------\n ```\n \n Inspect the `users` topic by using the PRINT statement:\n \n ```sql\n-PRINT 'users';\n+PRINT users;\n ```\n \n+!!! note\n+   The PRINT statement is one of the few commands in ksqlDB that are\n+   case-sensitive, even when the topic name is not quoted.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODc3OTQ1OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowNjozM1rOFnD9og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowNjozM1rOFnD9og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwMzcxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if Avro, and the DataGen tool publishes the Avro schema to the {{ site.sr }}.\n          \n          \n            \n                  is Avro, and the DataGen tool publishes the Avro schema to {{ site.sr }}.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376503714", "createdAt": "2020-02-07T17:06:33Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -243,6 +266,25 @@ Your output should resemble:\n ---------------\n ```\n \n+!!! note\n+      You may have noticed the CREATE TABLE did not define the set of columns\n+      like the CREATE STREAM statement did. This is because the value format\n+      if Avro, and the DataGen tool publishes the Avro schema to the {{ site.sr }}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODc4MzUzOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowODowMVrOFnEAKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowODowMVrOFnEAKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwNDM2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  ksqlDB retrieves the schema from the Schema Registry and uses this to build\n          \n          \n            \n                  ksqlDB retrieves the schema from {{ site.sr }} and uses this to build", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376504363", "createdAt": "2020-02-07T17:08:01Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -243,6 +266,25 @@ Your output should resemble:\n ---------------\n ```\n \n+!!! note\n+      You may have noticed the CREATE TABLE did not define the set of columns\n+      like the CREATE STREAM statement did. This is because the value format\n+      if Avro, and the DataGen tool publishes the Avro schema to the {{ site.sr }}.\n+      ksqlDB retrieves the schema from the Schema Registry and uses this to build", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODc4NTYxOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowODo0MVrOFnEBZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowODo0MVrOFnEBZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwNDY3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  The data generated has the same value in the Kafka record's key\n          \n          \n            \n                  The data generated has the same value in the {{ site.ak }} record's key", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376504679", "createdAt": "2020-02-07T17:08:41Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -243,6 +266,25 @@ Your output should resemble:\n ---------------\n ```\n \n+!!! note\n+      You may have noticed the CREATE TABLE did not define the set of columns\n+      like the CREATE STREAM statement did. This is because the value format\n+      if Avro, and the DataGen tool publishes the Avro schema to the {{ site.sr }}.\n+      ksqlDB retrieves the schema from the Schema Registry and uses this to build\n+      the SQL schema for the table. You may still provide the schema if you wish.\n+      Until [Github issue #4462](https://github.com/confluentinc/ksql/issues/4462)\n+      is complete, schema inference is only available where the key of the data\n+      is a STRING, as is the case here.\n+\n+!!! note\n+      The data generated has the same value in the Kafka record's key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODc4OTUzOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowOTo1OVrOFnEDzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowOTo1OVrOFnEDzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwNTI5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  as is in the userId field in the value. Specifying `key='userId'`\n          \n          \n            \n                  as the `userId` field in the value. Specifying `key='userId'`", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376505292", "createdAt": "2020-02-07T17:09:59Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -243,6 +266,25 @@ Your output should resemble:\n ---------------\n ```\n \n+!!! note\n+      You may have noticed the CREATE TABLE did not define the set of columns\n+      like the CREATE STREAM statement did. This is because the value format\n+      if Avro, and the DataGen tool publishes the Avro schema to the {{ site.sr }}.\n+      ksqlDB retrieves the schema from the Schema Registry and uses this to build\n+      the SQL schema for the table. You may still provide the schema if you wish.\n+      Until [Github issue #4462](https://github.com/confluentinc/ksql/issues/4462)\n+      is complete, schema inference is only available where the key of the data\n+      is a STRING, as is the case here.\n+\n+!!! note\n+      The data generated has the same value in the Kafka record's key\n+      as is in the userId field in the value. Specifying `key='userId'`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODc5Mjg3OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoxMToxM1rOFnEF-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoxMToxM1rOFnEF-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwNTg1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  will be used later allow joins against the table to use the more\n          \n          \n            \n                  to allow joins against the table to use the more", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376505850", "createdAt": "2020-02-07T17:11:13Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -243,6 +266,25 @@ Your output should resemble:\n ---------------\n ```\n \n+!!! note\n+      You may have noticed the CREATE TABLE did not define the set of columns\n+      like the CREATE STREAM statement did. This is because the value format\n+      if Avro, and the DataGen tool publishes the Avro schema to the {{ site.sr }}.\n+      ksqlDB retrieves the schema from the Schema Registry and uses this to build\n+      the SQL schema for the table. You may still provide the schema if you wish.\n+      Until [Github issue #4462](https://github.com/confluentinc/ksql/issues/4462)\n+      is complete, schema inference is only available where the key of the data\n+      is a STRING, as is the case here.\n+\n+!!! note\n+      The data generated has the same value in the Kafka record's key\n+      as is in the userId field in the value. Specifying `key='userId'`\n+      in the WITH clause above lets ksqlDB know this. This information\n+      will be used later allow joins against the table to use the more", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODc5MzgzOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoxMTozMVrOFnEGlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoxMTozMVrOFnEGlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwNjAwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  in the WITH clause above lets ksqlDB know this. This information\n          \n          \n            \n                  in the WITH clause above lets ksqlDB know this. ksqlDB uses this information", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376506006", "createdAt": "2020-02-07T17:11:31Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -243,6 +266,25 @@ Your output should resemble:\n ---------------\n ```\n \n+!!! note\n+      You may have noticed the CREATE TABLE did not define the set of columns\n+      like the CREATE STREAM statement did. This is because the value format\n+      if Avro, and the DataGen tool publishes the Avro schema to the {{ site.sr }}.\n+      ksqlDB retrieves the schema from the Schema Registry and uses this to build\n+      the SQL schema for the table. You may still provide the schema if you wish.\n+      Until [Github issue #4462](https://github.com/confluentinc/ksql/issues/4462)\n+      is complete, schema inference is only available where the key of the data\n+      is a STRING, as is the case here.\n+\n+!!! note\n+      The data generated has the same value in the Kafka record's key\n+      as is in the userId field in the value. Specifying `key='userId'`\n+      in the WITH clause above lets ksqlDB know this. This information", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODgxOTIwOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyMTowNFrOFnEXEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyMTowNFrOFnEXEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMDIyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  on either will yield the same results. If your data does not\n          \n          \n            \n                  on either yields the same results. If your data doesn't", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376510224", "createdAt": "2020-02-07T17:21:04Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -243,6 +266,25 @@ Your output should resemble:\n ---------------\n ```\n \n+!!! note\n+      You may have noticed the CREATE TABLE did not define the set of columns\n+      like the CREATE STREAM statement did. This is because the value format\n+      if Avro, and the DataGen tool publishes the Avro schema to the {{ site.sr }}.\n+      ksqlDB retrieves the schema from the Schema Registry and uses this to build\n+      the SQL schema for the table. You may still provide the schema if you wish.\n+      Until [Github issue #4462](https://github.com/confluentinc/ksql/issues/4462)\n+      is complete, schema inference is only available where the key of the data\n+      is a STRING, as is the case here.\n+\n+!!! note\n+      The data generated has the same value in the Kafka record's key\n+      as is in the userId field in the value. Specifying `key='userId'`\n+      in the WITH clause above lets ksqlDB know this. This information\n+      will be used later allow joins against the table to use the more\n+      descriptive `userId` column name, rather than `ROWKEY`. Joining\n+      on either will yield the same results. If your data does not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODgyMDI5OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyMToyN1rOFnEXvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyMToyN1rOFnEXvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMDM5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  contain a copy of the key in the value simply join on `ROWKEY`.\n          \n          \n            \n                  contain a copy of the key in the value, you can join on `ROWKEY`.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376510399", "createdAt": "2020-02-07T17:21:27Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -243,6 +266,25 @@ Your output should resemble:\n ---------------\n ```\n \n+!!! note\n+      You may have noticed the CREATE TABLE did not define the set of columns\n+      like the CREATE STREAM statement did. This is because the value format\n+      if Avro, and the DataGen tool publishes the Avro schema to the {{ site.sr }}.\n+      ksqlDB retrieves the schema from the Schema Registry and uses this to build\n+      the SQL schema for the table. You may still provide the schema if you wish.\n+      Until [Github issue #4462](https://github.com/confluentinc/ksql/issues/4462)\n+      is complete, schema inference is only available where the key of the data\n+      is a STRING, as is the case here.\n+\n+!!! note\n+      The data generated has the same value in the Kafka record's key\n+      as is in the userId field in the value. Specifying `key='userId'`\n+      in the WITH clause above lets ksqlDB know this. This information\n+      will be used later allow joins against the table to use the more\n+      descriptive `userId` column name, rather than `ROWKEY`. Joining\n+      on either will yield the same results. If your data does not\n+      contain a copy of the key in the value simply join on `ROWKEY`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODgyMjA3OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyMjoxNFrOFnEY4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyMjoxNFrOFnEY4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMDY5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                output? KsqlDB will append messages detailing any issues it\n          \n          \n            \n                output? ksqlDB appends messages that describe any issues it", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376510690", "createdAt": "2020-02-07T17:22:14Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODgyMzMwOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyMjo0MlrOFnEZrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyMjo0MlrOFnEZrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMDg5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                encountered while processing your data. If things are not working\n          \n          \n            \n                encountered while processing your data. If things aren't working", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376510892", "createdAt": "2020-02-07T17:22:42Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODgyNDE0OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyMzowM1rOFnEaRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyMzowM1rOFnEaRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMTA0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                as you expect it can be worth checking the contents of this stream\n          \n          \n            \n                as you expect, check the contents of this stream", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376511045", "createdAt": "2020-02-07T17:23:03Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODgyNzU2OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyNDoyMVrOFnEcWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyNDoyMVrOFnEcWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMTU3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               indicate we wish to stream results back. This is known as a\n          \n          \n            \n               indicate you that want to stream results back. This is known as a", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376511577", "createdAt": "2020-02-07T17:24:21Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream\n+    to see if ksqlDB is encountering data errors.\n+\n+Viewing your data\n+-----------------\n+\n+1. Use `SELECT` to create a query that returns data from a TABLE. This\n+   query includes the `LIMIT` keyword to limit the number of rows\n+   returned in the query result, and the `EMIT CHANGES` keywords to\n+   indicate we wish to stream results back. This is known as a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODgzMDU3OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyNTozMVrOFnEeSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyNTozMVrOFnEeSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMjA3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               [pull query](../concepts/queries/pull.md). See the\n          \n          \n            \n               [push query](../concepts/queries/push.md). See the", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376512073", "createdAt": "2020-02-07T17:25:31Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream\n+    to see if ksqlDB is encountering data errors.\n+\n+Viewing your data\n+-----------------\n+\n+1. Use `SELECT` to create a query that returns data from a TABLE. This\n+   query includes the `LIMIT` keyword to limit the number of rows\n+   returned in the query result, and the `EMIT CHANGES` keywords to\n+   indicate we wish to stream results back. This is known as a\n+   [pull query](../concepts/queries/pull.md). See the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODgzMzc3OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyNjozNFrOFnEgQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyNjozNFrOFnEgQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMjU3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               [queries](../concepts/queries/index.md) for an explanation of the\n          \n          \n            \n               [queries](../concepts/queries/index.md) section for an explanation of the", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376512577", "createdAt": "2020-02-07T17:26:34Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream\n+    to see if ksqlDB is encountering data errors.\n+\n+Viewing your data\n+-----------------\n+\n+1. Use `SELECT` to create a query that returns data from a TABLE. This\n+   query includes the `LIMIT` keyword to limit the number of rows\n+   returned in the query result, and the `EMIT CHANGES` keywords to\n+   indicate we wish to stream results back. This is known as a\n+   [pull query](../concepts/queries/pull.md). See the\n+   [queries](../concepts/queries/index.md) for an explanation of the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODgzNjE5OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyNzoyMFrOFnEhrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyNzoyMFrOFnEhrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMjk0MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     Push queries on tables will output the full history of the table that is stored\n          \n          \n            \n                     Push queries on tables output the full history of the table that is stored", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376512941", "createdAt": "2020-02-07T17:27:20Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream\n+    to see if ksqlDB is encountering data errors.\n+\n+Viewing your data\n+-----------------\n+\n+1. Use `SELECT` to create a query that returns data from a TABLE. This\n+   query includes the `LIMIT` keyword to limit the number of rows\n+   returned in the query result, and the `EMIT CHANGES` keywords to\n+   indicate we wish to stream results back. This is known as a\n+   [pull query](../concepts/queries/pull.md). See the\n+   [queries](../concepts/queries/index.md) for an explanation of the\n+   different query types. Note that exact data output may vary because\n+   of the randomness of the data generation.\n+   ```sql\n+   SELECT * from users_original emit changes limit 5;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |ROWTIME             |ROWKEY        |REGISTERTIME  |GENDER   |REGIONID  |USERID       |\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |1581077558655       |User_9        |1513529638461 |OTHER    |Region_1  |User_9       |\n+   |1581077561454       |User_7        |1489408314958 |OTHER    |Region_2  |User_7       |\n+   |1581077561654       |User_3        |1511291005264 |MALE     |Region_2  |User_3       |\n+   |1581077561857       |User_4        |1496797956753 |OTHER    |Region_1  |User_4       |\n+   |1581077562858       |User_8        |1489169082491 |FEMALE   |Region_8  |User_8       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+   !!! note\n+         Push queries on tables will output the full history of the table that is stored", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODgzNzQ3OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyNzo1N1rOFnEijw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyNzo1N1rOFnEijw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMzE2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     in the Kafka changelog topic, i.e. it will output historic data, followed by the\n          \n          \n            \n                     in the {{ site.ak }} changelog topic, which means that it outputs historic data, followed by the", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376513167", "createdAt": "2020-02-07T17:27:57Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream\n+    to see if ksqlDB is encountering data errors.\n+\n+Viewing your data\n+-----------------\n+\n+1. Use `SELECT` to create a query that returns data from a TABLE. This\n+   query includes the `LIMIT` keyword to limit the number of rows\n+   returned in the query result, and the `EMIT CHANGES` keywords to\n+   indicate we wish to stream results back. This is known as a\n+   [pull query](../concepts/queries/pull.md). See the\n+   [queries](../concepts/queries/index.md) for an explanation of the\n+   different query types. Note that exact data output may vary because\n+   of the randomness of the data generation.\n+   ```sql\n+   SELECT * from users_original emit changes limit 5;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |ROWTIME             |ROWKEY        |REGISTERTIME  |GENDER   |REGIONID  |USERID       |\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |1581077558655       |User_9        |1513529638461 |OTHER    |Region_1  |User_9       |\n+   |1581077561454       |User_7        |1489408314958 |OTHER    |Region_2  |User_7       |\n+   |1581077561654       |User_3        |1511291005264 |MALE     |Region_2  |User_3       |\n+   |1581077561857       |User_4        |1496797956753 |OTHER    |Region_1  |User_4       |\n+   |1581077562858       |User_8        |1489169082491 |FEMALE   |Region_8  |User_8       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+   !!! note\n+         Push queries on tables will output the full history of the table that is stored\n+         in the Kafka changelog topic, i.e. it will output historic data, followed by the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 226}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg0MDg1OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyOToxNVrOFnEkxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyOToxNVrOFnEkxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMzczMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                     stream of updates to the table. It is therefore likely that rows with matching\n          \n          \n            \n                     stream of updates to the table. So it's likely that rows with matching", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376513732", "createdAt": "2020-02-07T17:29:15Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream\n+    to see if ksqlDB is encountering data errors.\n+\n+Viewing your data\n+-----------------\n+\n+1. Use `SELECT` to create a query that returns data from a TABLE. This\n+   query includes the `LIMIT` keyword to limit the number of rows\n+   returned in the query result, and the `EMIT CHANGES` keywords to\n+   indicate we wish to stream results back. This is known as a\n+   [pull query](../concepts/queries/pull.md). See the\n+   [queries](../concepts/queries/index.md) for an explanation of the\n+   different query types. Note that exact data output may vary because\n+   of the randomness of the data generation.\n+   ```sql\n+   SELECT * from users_original emit changes limit 5;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |ROWTIME             |ROWKEY        |REGISTERTIME  |GENDER   |REGIONID  |USERID       |\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |1581077558655       |User_9        |1513529638461 |OTHER    |Region_1  |User_9       |\n+   |1581077561454       |User_7        |1489408314958 |OTHER    |Region_2  |User_7       |\n+   |1581077561654       |User_3        |1511291005264 |MALE     |Region_2  |User_3       |\n+   |1581077561857       |User_4        |1496797956753 |OTHER    |Region_1  |User_4       |\n+   |1581077562858       |User_8        |1489169082491 |FEMALE   |Region_8  |User_8       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+   !!! note\n+         Push queries on tables will output the full history of the table that is stored\n+         in the Kafka changelog topic, i.e. it will output historic data, followed by the\n+         stream of updates to the table. It is therefore likely that rows with matching", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg0MTYxOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyOTozN1rOFnElTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzoyOTozN1rOFnElTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxMzg3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            2. View the data in your pageviews_original stream by issuing the following\n          \n          \n            \n            2. View the data in your `pageviews_original` stream by issuing the following", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376513871", "createdAt": "2020-02-07T17:29:37Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream\n+    to see if ksqlDB is encountering data errors.\n+\n+Viewing your data\n+-----------------\n+\n+1. Use `SELECT` to create a query that returns data from a TABLE. This\n+   query includes the `LIMIT` keyword to limit the number of rows\n+   returned in the query result, and the `EMIT CHANGES` keywords to\n+   indicate we wish to stream results back. This is known as a\n+   [pull query](../concepts/queries/pull.md). See the\n+   [queries](../concepts/queries/index.md) for an explanation of the\n+   different query types. Note that exact data output may vary because\n+   of the randomness of the data generation.\n+   ```sql\n+   SELECT * from users_original emit changes limit 5;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |ROWTIME             |ROWKEY        |REGISTERTIME  |GENDER   |REGIONID  |USERID       |\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |1581077558655       |User_9        |1513529638461 |OTHER    |Region_1  |User_9       |\n+   |1581077561454       |User_7        |1489408314958 |OTHER    |Region_2  |User_7       |\n+   |1581077561654       |User_3        |1511291005264 |MALE     |Region_2  |User_3       |\n+   |1581077561857       |User_4        |1496797956753 |OTHER    |Region_1  |User_4       |\n+   |1581077562858       |User_8        |1489169082491 |FEMALE   |Region_8  |User_8       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+   !!! note\n+         Push queries on tables will output the full history of the table that is stored\n+         in the Kafka changelog topic, i.e. it will output historic data, followed by the\n+         stream of updates to the table. It is therefore likely that rows with matching\n+         `ROWKEY` are output as existing rows in the table are updated.\n+\n+2. View the data in your pageviews_original stream by issuing the following", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg0MzAzOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozMDoxMlrOFnEmNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozMDoxMlrOFnEmNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNDEwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  after the query is started, i.e. historic data is not included.\n          \n          \n            \n                  after the query is started, which means that historic data isn't included.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376514102", "createdAt": "2020-02-07T17:30:12Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream\n+    to see if ksqlDB is encountering data errors.\n+\n+Viewing your data\n+-----------------\n+\n+1. Use `SELECT` to create a query that returns data from a TABLE. This\n+   query includes the `LIMIT` keyword to limit the number of rows\n+   returned in the query result, and the `EMIT CHANGES` keywords to\n+   indicate we wish to stream results back. This is known as a\n+   [pull query](../concepts/queries/pull.md). See the\n+   [queries](../concepts/queries/index.md) for an explanation of the\n+   different query types. Note that exact data output may vary because\n+   of the randomness of the data generation.\n+   ```sql\n+   SELECT * from users_original emit changes limit 5;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |ROWTIME             |ROWKEY        |REGISTERTIME  |GENDER   |REGIONID  |USERID       |\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |1581077558655       |User_9        |1513529638461 |OTHER    |Region_1  |User_9       |\n+   |1581077561454       |User_7        |1489408314958 |OTHER    |Region_2  |User_7       |\n+   |1581077561654       |User_3        |1511291005264 |MALE     |Region_2  |User_3       |\n+   |1581077561857       |User_4        |1496797956753 |OTHER    |Region_1  |User_4       |\n+   |1581077562858       |User_8        |1489169082491 |FEMALE   |Region_8  |User_8       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+   !!! note\n+         Push queries on tables will output the full history of the table that is stored\n+         in the Kafka changelog topic, i.e. it will output historic data, followed by the\n+         stream of updates to the table. It is therefore likely that rows with matching\n+         `ROWKEY` are output as existing rows in the table are updated.\n+\n+2. View the data in your pageviews_original stream by issuing the following\n+   push query:\n+   ```sql\n+   SELECT viewtime, userid, pageid FROM pageviews_original emit changes LIMIT 3;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------+--------------+--------------+\n+   |VIEWTIME      |USERID        |PAGEID        |\n+   +--------------+--------------+--------------+\n+   |1581078296791 |User_1        |Page_54       |\n+   |1581078297792 |User_8        |Page_93       |\n+   |1581078298792 |User_6        |Page_26       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+\n+   !!! note\n+      By default, push queries on streams only output changes that occur\n+      after the query is started, i.e. historic data is not included.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg0NjEyOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozMTowNVrOFnEoBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozMTowNVrOFnEoBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNDU2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Create query that enriches the pageviews data with the user's gender\n          \n          \n            \n            Create a query that enriches the pageviews data with the user's `gender`", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376514565", "createdAt": "2020-02-07T17:31:05Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream\n+    to see if ksqlDB is encountering data errors.\n+\n+Viewing your data\n+-----------------\n+\n+1. Use `SELECT` to create a query that returns data from a TABLE. This\n+   query includes the `LIMIT` keyword to limit the number of rows\n+   returned in the query result, and the `EMIT CHANGES` keywords to\n+   indicate we wish to stream results back. This is known as a\n+   [pull query](../concepts/queries/pull.md). See the\n+   [queries](../concepts/queries/index.md) for an explanation of the\n+   different query types. Note that exact data output may vary because\n+   of the randomness of the data generation.\n+   ```sql\n+   SELECT * from users_original emit changes limit 5;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |ROWTIME             |ROWKEY        |REGISTERTIME  |GENDER   |REGIONID  |USERID       |\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |1581077558655       |User_9        |1513529638461 |OTHER    |Region_1  |User_9       |\n+   |1581077561454       |User_7        |1489408314958 |OTHER    |Region_2  |User_7       |\n+   |1581077561654       |User_3        |1511291005264 |MALE     |Region_2  |User_3       |\n+   |1581077561857       |User_4        |1496797956753 |OTHER    |Region_1  |User_4       |\n+   |1581077562858       |User_8        |1489169082491 |FEMALE   |Region_8  |User_8       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+   !!! note\n+         Push queries on tables will output the full history of the table that is stored\n+         in the Kafka changelog topic, i.e. it will output historic data, followed by the\n+         stream of updates to the table. It is therefore likely that rows with matching\n+         `ROWKEY` are output as existing rows in the table are updated.\n+\n+2. View the data in your pageviews_original stream by issuing the following\n+   push query:\n+   ```sql\n+   SELECT viewtime, userid, pageid FROM pageviews_original emit changes LIMIT 3;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------+--------------+--------------+\n+   |VIEWTIME      |USERID        |PAGEID        |\n+   +--------------+--------------+--------------+\n+   |1581078296791 |User_1        |Page_54       |\n+   |1581078297792 |User_8        |Page_93       |\n+   |1581078298792 |User_6        |Page_26       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+\n+   !!! note\n+      By default, push queries on streams only output changes that occur\n+      after the query is started, i.e. historic data is not included.\n+      Run `set 'auto.offset.reset'='earliest';` to update your session\n+      properties if you want to see the historic data.\n+\n Write Queries\n -------------\n \n These examples write queries using ksqlDB.\n \n-!!! note\n-\tBy default ksqlDB reads the topics for streams and tables from\n-    the latest offset.\n-\n ### 1. Create a query that returns data from a ksqlDB stream\n \n-Use `SELECT` to create a query that returns data from a STREAM. This\n-query includes the `LIMIT` keyword to limit the number of rows\n-returned in the query result. Note that exact data output may vary\n-because of the randomness of the data generation.\n+Create query that enriches the pageviews data with the user's gender", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 270}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg0NzIwOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozMTozMFrOFnEouQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozMTozMFrOFnEouQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNDc0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            and regionid from the users table. The following query enriches the\n          \n          \n            \n            and `regionid` from the `users` table. The following query enriches the", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376514745", "createdAt": "2020-02-07T17:31:30Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream\n+    to see if ksqlDB is encountering data errors.\n+\n+Viewing your data\n+-----------------\n+\n+1. Use `SELECT` to create a query that returns data from a TABLE. This\n+   query includes the `LIMIT` keyword to limit the number of rows\n+   returned in the query result, and the `EMIT CHANGES` keywords to\n+   indicate we wish to stream results back. This is known as a\n+   [pull query](../concepts/queries/pull.md). See the\n+   [queries](../concepts/queries/index.md) for an explanation of the\n+   different query types. Note that exact data output may vary because\n+   of the randomness of the data generation.\n+   ```sql\n+   SELECT * from users_original emit changes limit 5;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |ROWTIME             |ROWKEY        |REGISTERTIME  |GENDER   |REGIONID  |USERID       |\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |1581077558655       |User_9        |1513529638461 |OTHER    |Region_1  |User_9       |\n+   |1581077561454       |User_7        |1489408314958 |OTHER    |Region_2  |User_7       |\n+   |1581077561654       |User_3        |1511291005264 |MALE     |Region_2  |User_3       |\n+   |1581077561857       |User_4        |1496797956753 |OTHER    |Region_1  |User_4       |\n+   |1581077562858       |User_8        |1489169082491 |FEMALE   |Region_8  |User_8       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+   !!! note\n+         Push queries on tables will output the full history of the table that is stored\n+         in the Kafka changelog topic, i.e. it will output historic data, followed by the\n+         stream of updates to the table. It is therefore likely that rows with matching\n+         `ROWKEY` are output as existing rows in the table are updated.\n+\n+2. View the data in your pageviews_original stream by issuing the following\n+   push query:\n+   ```sql\n+   SELECT viewtime, userid, pageid FROM pageviews_original emit changes LIMIT 3;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------+--------------+--------------+\n+   |VIEWTIME      |USERID        |PAGEID        |\n+   +--------------+--------------+--------------+\n+   |1581078296791 |User_1        |Page_54       |\n+   |1581078297792 |User_8        |Page_93       |\n+   |1581078298792 |User_6        |Page_26       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+\n+   !!! note\n+      By default, push queries on streams only output changes that occur\n+      after the query is started, i.e. historic data is not included.\n+      Run `set 'auto.offset.reset'='earliest';` to update your session\n+      properties if you want to see the historic data.\n+\n Write Queries\n -------------\n \n These examples write queries using ksqlDB.\n \n-!!! note\n-\tBy default ksqlDB reads the topics for streams and tables from\n-    the latest offset.\n-\n ### 1. Create a query that returns data from a ksqlDB stream\n \n-Use `SELECT` to create a query that returns data from a STREAM. This\n-query includes the `LIMIT` keyword to limit the number of rows\n-returned in the query result. Note that exact data output may vary\n-because of the randomness of the data generation.\n+Create query that enriches the pageviews data with the user's gender\n+and regionid from the users table. The following query enriches the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 271}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg0ODIwOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozMTo1MVrOFnEpVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozMTo1MVrOFnEpVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNDkwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `users_original` TABLE on the userid column.\n          \n          \n            \n            `users_original` TABLE on the `userid` column.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376514902", "createdAt": "2020-02-07T17:31:51Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream\n+    to see if ksqlDB is encountering data errors.\n+\n+Viewing your data\n+-----------------\n+\n+1. Use `SELECT` to create a query that returns data from a TABLE. This\n+   query includes the `LIMIT` keyword to limit the number of rows\n+   returned in the query result, and the `EMIT CHANGES` keywords to\n+   indicate we wish to stream results back. This is known as a\n+   [pull query](../concepts/queries/pull.md). See the\n+   [queries](../concepts/queries/index.md) for an explanation of the\n+   different query types. Note that exact data output may vary because\n+   of the randomness of the data generation.\n+   ```sql\n+   SELECT * from users_original emit changes limit 5;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |ROWTIME             |ROWKEY        |REGISTERTIME  |GENDER   |REGIONID  |USERID       |\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |1581077558655       |User_9        |1513529638461 |OTHER    |Region_1  |User_9       |\n+   |1581077561454       |User_7        |1489408314958 |OTHER    |Region_2  |User_7       |\n+   |1581077561654       |User_3        |1511291005264 |MALE     |Region_2  |User_3       |\n+   |1581077561857       |User_4        |1496797956753 |OTHER    |Region_1  |User_4       |\n+   |1581077562858       |User_8        |1489169082491 |FEMALE   |Region_8  |User_8       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+   !!! note\n+         Push queries on tables will output the full history of the table that is stored\n+         in the Kafka changelog topic, i.e. it will output historic data, followed by the\n+         stream of updates to the table. It is therefore likely that rows with matching\n+         `ROWKEY` are output as existing rows in the table are updated.\n+\n+2. View the data in your pageviews_original stream by issuing the following\n+   push query:\n+   ```sql\n+   SELECT viewtime, userid, pageid FROM pageviews_original emit changes LIMIT 3;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------+--------------+--------------+\n+   |VIEWTIME      |USERID        |PAGEID        |\n+   +--------------+--------------+--------------+\n+   |1581078296791 |User_1        |Page_54       |\n+   |1581078297792 |User_8        |Page_93       |\n+   |1581078298792 |User_6        |Page_26       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+\n+   !!! note\n+      By default, push queries on streams only output changes that occur\n+      after the query is started, i.e. historic data is not included.\n+      Run `set 'auto.offset.reset'='earliest';` to update your session\n+      properties if you want to see the historic data.\n+\n Write Queries\n -------------\n \n These examples write queries using ksqlDB.\n \n-!!! note\n-\tBy default ksqlDB reads the topics for streams and tables from\n-    the latest offset.\n-\n ### 1. Create a query that returns data from a ksqlDB stream\n \n-Use `SELECT` to create a query that returns data from a STREAM. This\n-query includes the `LIMIT` keyword to limit the number of rows\n-returned in the query result. Note that exact data output may vary\n-because of the randomness of the data generation.\n+Create query that enriches the pageviews data with the user's gender\n+and regionid from the users table. The following query enriches the\n+`pageviews_original` STREAM by doing a `LEFT JOIN` with the\n+`users_original` TABLE on the userid column.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg0OTM5OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozMjoxOVrOFnEqGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozMjoxOVrOFnEqGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNTA5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              The join to the users table is on the userid column, which was identified as\n          \n          \n            \n              The join to the `users` table is on the `userid` column, which was identified as", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376515099", "createdAt": "2020-02-07T17:32:19Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream\n+    to see if ksqlDB is encountering data errors.\n+\n+Viewing your data\n+-----------------\n+\n+1. Use `SELECT` to create a query that returns data from a TABLE. This\n+   query includes the `LIMIT` keyword to limit the number of rows\n+   returned in the query result, and the `EMIT CHANGES` keywords to\n+   indicate we wish to stream results back. This is known as a\n+   [pull query](../concepts/queries/pull.md). See the\n+   [queries](../concepts/queries/index.md) for an explanation of the\n+   different query types. Note that exact data output may vary because\n+   of the randomness of the data generation.\n+   ```sql\n+   SELECT * from users_original emit changes limit 5;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |ROWTIME             |ROWKEY        |REGISTERTIME  |GENDER   |REGIONID  |USERID       |\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |1581077558655       |User_9        |1513529638461 |OTHER    |Region_1  |User_9       |\n+   |1581077561454       |User_7        |1489408314958 |OTHER    |Region_2  |User_7       |\n+   |1581077561654       |User_3        |1511291005264 |MALE     |Region_2  |User_3       |\n+   |1581077561857       |User_4        |1496797956753 |OTHER    |Region_1  |User_4       |\n+   |1581077562858       |User_8        |1489169082491 |FEMALE   |Region_8  |User_8       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+   !!! note\n+         Push queries on tables will output the full history of the table that is stored\n+         in the Kafka changelog topic, i.e. it will output historic data, followed by the\n+         stream of updates to the table. It is therefore likely that rows with matching\n+         `ROWKEY` are output as existing rows in the table are updated.\n+\n+2. View the data in your pageviews_original stream by issuing the following\n+   push query:\n+   ```sql\n+   SELECT viewtime, userid, pageid FROM pageviews_original emit changes LIMIT 3;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------+--------------+--------------+\n+   |VIEWTIME      |USERID        |PAGEID        |\n+   +--------------+--------------+--------------+\n+   |1581078296791 |User_1        |Page_54       |\n+   |1581078297792 |User_8        |Page_93       |\n+   |1581078298792 |User_6        |Page_26       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+\n+   !!! note\n+      By default, push queries on streams only output changes that occur\n+      after the query is started, i.e. historic data is not included.\n+      Run `set 'auto.offset.reset'='earliest';` to update your session\n+      properties if you want to see the historic data.\n+\n Write Queries\n -------------\n \n These examples write queries using ksqlDB.\n \n-!!! note\n-\tBy default ksqlDB reads the topics for streams and tables from\n-    the latest offset.\n-\n ### 1. Create a query that returns data from a ksqlDB stream\n \n-Use `SELECT` to create a query that returns data from a STREAM. This\n-query includes the `LIMIT` keyword to limit the number of rows\n-returned in the query result. Note that exact data output may vary\n-because of the randomness of the data generation.\n+Create query that enriches the pageviews data with the user's gender\n+and regionid from the users table. The following query enriches the\n+`pageviews_original` STREAM by doing a `LEFT JOIN` with the\n+`users_original` TABLE on the userid column.\n \n ```sql\n-SELECT pageid FROM pageviews_original LIMIT 3;\n+SELECT users_original.userid AS userid, pageid, regionid, gender\n+  FROM pageviews_original\n+  LEFT JOIN users_original\n+    ON pageviews_original.userid = users_original.userid\n+  EMIT CHANGES\n+  LIMIT 5;\n ```\n \n Your output should resemble:\n \n ```\n-Page_24\n-Page_73\n-Page_78\n-LIMIT reached\n++-------------------+-------------------+-------------------+-------------------+\n+|USERID             |PAGEID             |REGIONID           |GENDER             |\n++-------------------+-------------------+-------------------+-------------------+\n+|User_7             |Page_23            |Region_2           |OTHER              |\n+|User_3             |Page_42            |Region_2           |MALE               |\n+|User_7             |Page_87            |Region_2           |OTHER              |\n+|User_2             |Page_57            |Region_5           |FEMALE             |\n+|User_9             |Page_59            |Region_1           |OTHER              |\n+Limit Reached\n Query terminated\n ```\n \n+!!! note\n+  The join to the users table is on the userid column, which was identified as", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 305}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg1MDM3OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozMjozNlrOFnEqrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozMjozNlrOFnEqrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNTI0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              an alias for the tables primary key, `ROWKEY`, in the CREATE TABLE statement.\n          \n          \n            \n              an alias for the table's primary key, `ROWKEY`, in the CREATE TABLE statement.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376515246", "createdAt": "2020-02-07T17:32:36Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream\n+    to see if ksqlDB is encountering data errors.\n+\n+Viewing your data\n+-----------------\n+\n+1. Use `SELECT` to create a query that returns data from a TABLE. This\n+   query includes the `LIMIT` keyword to limit the number of rows\n+   returned in the query result, and the `EMIT CHANGES` keywords to\n+   indicate we wish to stream results back. This is known as a\n+   [pull query](../concepts/queries/pull.md). See the\n+   [queries](../concepts/queries/index.md) for an explanation of the\n+   different query types. Note that exact data output may vary because\n+   of the randomness of the data generation.\n+   ```sql\n+   SELECT * from users_original emit changes limit 5;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |ROWTIME             |ROWKEY        |REGISTERTIME  |GENDER   |REGIONID  |USERID       |\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |1581077558655       |User_9        |1513529638461 |OTHER    |Region_1  |User_9       |\n+   |1581077561454       |User_7        |1489408314958 |OTHER    |Region_2  |User_7       |\n+   |1581077561654       |User_3        |1511291005264 |MALE     |Region_2  |User_3       |\n+   |1581077561857       |User_4        |1496797956753 |OTHER    |Region_1  |User_4       |\n+   |1581077562858       |User_8        |1489169082491 |FEMALE   |Region_8  |User_8       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+   !!! note\n+         Push queries on tables will output the full history of the table that is stored\n+         in the Kafka changelog topic, i.e. it will output historic data, followed by the\n+         stream of updates to the table. It is therefore likely that rows with matching\n+         `ROWKEY` are output as existing rows in the table are updated.\n+\n+2. View the data in your pageviews_original stream by issuing the following\n+   push query:\n+   ```sql\n+   SELECT viewtime, userid, pageid FROM pageviews_original emit changes LIMIT 3;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------+--------------+--------------+\n+   |VIEWTIME      |USERID        |PAGEID        |\n+   +--------------+--------------+--------------+\n+   |1581078296791 |User_1        |Page_54       |\n+   |1581078297792 |User_8        |Page_93       |\n+   |1581078298792 |User_6        |Page_26       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+\n+   !!! note\n+      By default, push queries on streams only output changes that occur\n+      after the query is started, i.e. historic data is not included.\n+      Run `set 'auto.offset.reset'='earliest';` to update your session\n+      properties if you want to see the historic data.\n+\n Write Queries\n -------------\n \n These examples write queries using ksqlDB.\n \n-!!! note\n-\tBy default ksqlDB reads the topics for streams and tables from\n-    the latest offset.\n-\n ### 1. Create a query that returns data from a ksqlDB stream\n \n-Use `SELECT` to create a query that returns data from a STREAM. This\n-query includes the `LIMIT` keyword to limit the number of rows\n-returned in the query result. Note that exact data output may vary\n-because of the randomness of the data generation.\n+Create query that enriches the pageviews data with the user's gender\n+and regionid from the users table. The following query enriches the\n+`pageviews_original` STREAM by doing a `LEFT JOIN` with the\n+`users_original` TABLE on the userid column.\n \n ```sql\n-SELECT pageid FROM pageviews_original LIMIT 3;\n+SELECT users_original.userid AS userid, pageid, regionid, gender\n+  FROM pageviews_original\n+  LEFT JOIN users_original\n+    ON pageviews_original.userid = users_original.userid\n+  EMIT CHANGES\n+  LIMIT 5;\n ```\n \n Your output should resemble:\n \n ```\n-Page_24\n-Page_73\n-Page_78\n-LIMIT reached\n++-------------------+-------------------+-------------------+-------------------+\n+|USERID             |PAGEID             |REGIONID           |GENDER             |\n++-------------------+-------------------+-------------------+-------------------+\n+|User_7             |Page_23            |Region_2           |OTHER              |\n+|User_3             |Page_42            |Region_2           |MALE               |\n+|User_7             |Page_87            |Region_2           |OTHER              |\n+|User_2             |Page_57            |Region_5           |FEMALE             |\n+|User_9             |Page_59            |Region_1           |OTHER              |\n+Limit Reached\n Query terminated\n ```\n \n+!!! note\n+  The join to the users table is on the userid column, which was identified as\n+  an alias for the tables primary key, `ROWKEY`, in the CREATE TABLE statement.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 306}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg1MTk2OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozMzoxM1rOFnErqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozMzoxM1rOFnErqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNTQ5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              the stream's key. Hence, ksqlDB will first internally repartition the stream\n          \n          \n            \n              the stream's key. Hence, ksqlDB internally repartitions the stream", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376515497", "createdAt": "2020-02-07T17:33:13Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream\n+    to see if ksqlDB is encountering data errors.\n+\n+Viewing your data\n+-----------------\n+\n+1. Use `SELECT` to create a query that returns data from a TABLE. This\n+   query includes the `LIMIT` keyword to limit the number of rows\n+   returned in the query result, and the `EMIT CHANGES` keywords to\n+   indicate we wish to stream results back. This is known as a\n+   [pull query](../concepts/queries/pull.md). See the\n+   [queries](../concepts/queries/index.md) for an explanation of the\n+   different query types. Note that exact data output may vary because\n+   of the randomness of the data generation.\n+   ```sql\n+   SELECT * from users_original emit changes limit 5;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |ROWTIME             |ROWKEY        |REGISTERTIME  |GENDER   |REGIONID  |USERID       |\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |1581077558655       |User_9        |1513529638461 |OTHER    |Region_1  |User_9       |\n+   |1581077561454       |User_7        |1489408314958 |OTHER    |Region_2  |User_7       |\n+   |1581077561654       |User_3        |1511291005264 |MALE     |Region_2  |User_3       |\n+   |1581077561857       |User_4        |1496797956753 |OTHER    |Region_1  |User_4       |\n+   |1581077562858       |User_8        |1489169082491 |FEMALE   |Region_8  |User_8       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+   !!! note\n+         Push queries on tables will output the full history of the table that is stored\n+         in the Kafka changelog topic, i.e. it will output historic data, followed by the\n+         stream of updates to the table. It is therefore likely that rows with matching\n+         `ROWKEY` are output as existing rows in the table are updated.\n+\n+2. View the data in your pageviews_original stream by issuing the following\n+   push query:\n+   ```sql\n+   SELECT viewtime, userid, pageid FROM pageviews_original emit changes LIMIT 3;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------+--------------+--------------+\n+   |VIEWTIME      |USERID        |PAGEID        |\n+   +--------------+--------------+--------------+\n+   |1581078296791 |User_1        |Page_54       |\n+   |1581078297792 |User_8        |Page_93       |\n+   |1581078298792 |User_6        |Page_26       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+\n+   !!! note\n+      By default, push queries on streams only output changes that occur\n+      after the query is started, i.e. historic data is not included.\n+      Run `set 'auto.offset.reset'='earliest';` to update your session\n+      properties if you want to see the historic data.\n+\n Write Queries\n -------------\n \n These examples write queries using ksqlDB.\n \n-!!! note\n-\tBy default ksqlDB reads the topics for streams and tables from\n-    the latest offset.\n-\n ### 1. Create a query that returns data from a ksqlDB stream\n \n-Use `SELECT` to create a query that returns data from a STREAM. This\n-query includes the `LIMIT` keyword to limit the number of rows\n-returned in the query result. Note that exact data output may vary\n-because of the randomness of the data generation.\n+Create query that enriches the pageviews data with the user's gender\n+and regionid from the users table. The following query enriches the\n+`pageviews_original` STREAM by doing a `LEFT JOIN` with the\n+`users_original` TABLE on the userid column.\n \n ```sql\n-SELECT pageid FROM pageviews_original LIMIT 3;\n+SELECT users_original.userid AS userid, pageid, regionid, gender\n+  FROM pageviews_original\n+  LEFT JOIN users_original\n+    ON pageviews_original.userid = users_original.userid\n+  EMIT CHANGES\n+  LIMIT 5;\n ```\n \n Your output should resemble:\n \n ```\n-Page_24\n-Page_73\n-Page_78\n-LIMIT reached\n++-------------------+-------------------+-------------------+-------------------+\n+|USERID             |PAGEID             |REGIONID           |GENDER             |\n++-------------------+-------------------+-------------------+-------------------+\n+|User_7             |Page_23            |Region_2           |OTHER              |\n+|User_3             |Page_42            |Region_2           |MALE               |\n+|User_7             |Page_87            |Region_2           |OTHER              |\n+|User_2             |Page_57            |Region_5           |FEMALE             |\n+|User_9             |Page_59            |Region_1           |OTHER              |\n+Limit Reached\n Query terminated\n ```\n \n+!!! note\n+  The join to the users table is on the userid column, which was identified as\n+  an alias for the tables primary key, `ROWKEY`, in the CREATE TABLE statement.\n+  `userId` and `ROWKEY` can be used interchangeably as the join criteria for\n+  the table. However, the data in `userid` on the stream side does not match\n+  the stream's key. Hence, ksqlDB will first internally repartition the stream", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 309}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg1MzI1OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozMzo0NFrOFnEsdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozMzo0NFrOFnEsdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNTcwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              by the `userId` column.\n          \n          \n            \n              by the `userId` column before performing the join.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376515703", "createdAt": "2020-02-07T17:33:44Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream\n+    to see if ksqlDB is encountering data errors.\n+\n+Viewing your data\n+-----------------\n+\n+1. Use `SELECT` to create a query that returns data from a TABLE. This\n+   query includes the `LIMIT` keyword to limit the number of rows\n+   returned in the query result, and the `EMIT CHANGES` keywords to\n+   indicate we wish to stream results back. This is known as a\n+   [pull query](../concepts/queries/pull.md). See the\n+   [queries](../concepts/queries/index.md) for an explanation of the\n+   different query types. Note that exact data output may vary because\n+   of the randomness of the data generation.\n+   ```sql\n+   SELECT * from users_original emit changes limit 5;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |ROWTIME             |ROWKEY        |REGISTERTIME  |GENDER   |REGIONID  |USERID       |\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |1581077558655       |User_9        |1513529638461 |OTHER    |Region_1  |User_9       |\n+   |1581077561454       |User_7        |1489408314958 |OTHER    |Region_2  |User_7       |\n+   |1581077561654       |User_3        |1511291005264 |MALE     |Region_2  |User_3       |\n+   |1581077561857       |User_4        |1496797956753 |OTHER    |Region_1  |User_4       |\n+   |1581077562858       |User_8        |1489169082491 |FEMALE   |Region_8  |User_8       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+   !!! note\n+         Push queries on tables will output the full history of the table that is stored\n+         in the Kafka changelog topic, i.e. it will output historic data, followed by the\n+         stream of updates to the table. It is therefore likely that rows with matching\n+         `ROWKEY` are output as existing rows in the table are updated.\n+\n+2. View the data in your pageviews_original stream by issuing the following\n+   push query:\n+   ```sql\n+   SELECT viewtime, userid, pageid FROM pageviews_original emit changes LIMIT 3;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------+--------------+--------------+\n+   |VIEWTIME      |USERID        |PAGEID        |\n+   +--------------+--------------+--------------+\n+   |1581078296791 |User_1        |Page_54       |\n+   |1581078297792 |User_8        |Page_93       |\n+   |1581078298792 |User_6        |Page_26       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+\n+   !!! note\n+      By default, push queries on streams only output changes that occur\n+      after the query is started, i.e. historic data is not included.\n+      Run `set 'auto.offset.reset'='earliest';` to update your session\n+      properties if you want to see the historic data.\n+\n Write Queries\n -------------\n \n These examples write queries using ksqlDB.\n \n-!!! note\n-\tBy default ksqlDB reads the topics for streams and tables from\n-    the latest offset.\n-\n ### 1. Create a query that returns data from a ksqlDB stream\n \n-Use `SELECT` to create a query that returns data from a STREAM. This\n-query includes the `LIMIT` keyword to limit the number of rows\n-returned in the query result. Note that exact data output may vary\n-because of the randomness of the data generation.\n+Create query that enriches the pageviews data with the user's gender\n+and regionid from the users table. The following query enriches the\n+`pageviews_original` STREAM by doing a `LEFT JOIN` with the\n+`users_original` TABLE on the userid column.\n \n ```sql\n-SELECT pageid FROM pageviews_original LIMIT 3;\n+SELECT users_original.userid AS userid, pageid, regionid, gender\n+  FROM pageviews_original\n+  LEFT JOIN users_original\n+    ON pageviews_original.userid = users_original.userid\n+  EMIT CHANGES\n+  LIMIT 5;\n ```\n \n Your output should resemble:\n \n ```\n-Page_24\n-Page_73\n-Page_78\n-LIMIT reached\n++-------------------+-------------------+-------------------+-------------------+\n+|USERID             |PAGEID             |REGIONID           |GENDER             |\n++-------------------+-------------------+-------------------+-------------------+\n+|User_7             |Page_23            |Region_2           |OTHER              |\n+|User_3             |Page_42            |Region_2           |MALE               |\n+|User_7             |Page_87            |Region_2           |OTHER              |\n+|User_2             |Page_57            |Region_5           |FEMALE             |\n+|User_9             |Page_59            |Region_1           |OTHER              |\n+Limit Reached\n Query terminated\n ```\n \n+!!! note\n+  The join to the users table is on the userid column, which was identified as\n+  an alias for the tables primary key, `ROWKEY`, in the CREATE TABLE statement.\n+  `userId` and `ROWKEY` can be used interchangeably as the join criteria for\n+  the table. However, the data in `userid` on the stream side does not match\n+  the stream's key. Hence, ksqlDB will first internally repartition the stream\n+  by the `userId` column.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 310}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg1NjMzOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozNDo1MFrOFnEuSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozNDo1MFrOFnEuSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNjE2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The results from this query are written to the `PAGEVIEWS_ENRICHED` Kafka topic.\n          \n          \n            \n            The results from this query are written to the `PAGEVIEWS_ENRICHED` {{ site.ak }} topic.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376516169", "createdAt": "2020-02-07T17:34:50Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream\n+    to see if ksqlDB is encountering data errors.\n+\n+Viewing your data\n+-----------------\n+\n+1. Use `SELECT` to create a query that returns data from a TABLE. This\n+   query includes the `LIMIT` keyword to limit the number of rows\n+   returned in the query result, and the `EMIT CHANGES` keywords to\n+   indicate we wish to stream results back. This is known as a\n+   [pull query](../concepts/queries/pull.md). See the\n+   [queries](../concepts/queries/index.md) for an explanation of the\n+   different query types. Note that exact data output may vary because\n+   of the randomness of the data generation.\n+   ```sql\n+   SELECT * from users_original emit changes limit 5;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |ROWTIME             |ROWKEY        |REGISTERTIME  |GENDER   |REGIONID  |USERID       |\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |1581077558655       |User_9        |1513529638461 |OTHER    |Region_1  |User_9       |\n+   |1581077561454       |User_7        |1489408314958 |OTHER    |Region_2  |User_7       |\n+   |1581077561654       |User_3        |1511291005264 |MALE     |Region_2  |User_3       |\n+   |1581077561857       |User_4        |1496797956753 |OTHER    |Region_1  |User_4       |\n+   |1581077562858       |User_8        |1489169082491 |FEMALE   |Region_8  |User_8       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+   !!! note\n+         Push queries on tables will output the full history of the table that is stored\n+         in the Kafka changelog topic, i.e. it will output historic data, followed by the\n+         stream of updates to the table. It is therefore likely that rows with matching\n+         `ROWKEY` are output as existing rows in the table are updated.\n+\n+2. View the data in your pageviews_original stream by issuing the following\n+   push query:\n+   ```sql\n+   SELECT viewtime, userid, pageid FROM pageviews_original emit changes LIMIT 3;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------+--------------+--------------+\n+   |VIEWTIME      |USERID        |PAGEID        |\n+   +--------------+--------------+--------------+\n+   |1581078296791 |User_1        |Page_54       |\n+   |1581078297792 |User_8        |Page_93       |\n+   |1581078298792 |User_6        |Page_26       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+\n+   !!! note\n+      By default, push queries on streams only output changes that occur\n+      after the query is started, i.e. historic data is not included.\n+      Run `set 'auto.offset.reset'='earliest';` to update your session\n+      properties if you want to see the historic data.\n+\n Write Queries\n -------------\n \n These examples write queries using ksqlDB.\n \n-!!! note\n-\tBy default ksqlDB reads the topics for streams and tables from\n-    the latest offset.\n-\n ### 1. Create a query that returns data from a ksqlDB stream\n \n-Use `SELECT` to create a query that returns data from a STREAM. This\n-query includes the `LIMIT` keyword to limit the number of rows\n-returned in the query result. Note that exact data output may vary\n-because of the randomness of the data generation.\n+Create query that enriches the pageviews data with the user's gender\n+and regionid from the users table. The following query enriches the\n+`pageviews_original` STREAM by doing a `LEFT JOIN` with the\n+`users_original` TABLE on the userid column.\n \n ```sql\n-SELECT pageid FROM pageviews_original LIMIT 3;\n+SELECT users_original.userid AS userid, pageid, regionid, gender\n+  FROM pageviews_original\n+  LEFT JOIN users_original\n+    ON pageviews_original.userid = users_original.userid\n+  EMIT CHANGES\n+  LIMIT 5;\n ```\n \n Your output should resemble:\n \n ```\n-Page_24\n-Page_73\n-Page_78\n-LIMIT reached\n++-------------------+-------------------+-------------------+-------------------+\n+|USERID             |PAGEID             |REGIONID           |GENDER             |\n++-------------------+-------------------+-------------------+-------------------+\n+|User_7             |Page_23            |Region_2           |OTHER              |\n+|User_3             |Page_42            |Region_2           |MALE               |\n+|User_7             |Page_87            |Region_2           |OTHER              |\n+|User_2             |Page_57            |Region_5           |FEMALE             |\n+|User_9             |Page_59            |Region_1           |OTHER              |\n+Limit Reached\n Query terminated\n ```\n \n+!!! note\n+  The join to the users table is on the userid column, which was identified as\n+  an alias for the tables primary key, `ROWKEY`, in the CREATE TABLE statement.\n+  `userId` and `ROWKEY` can be used interchangeably as the join criteria for\n+  the table. However, the data in `userid` on the stream side does not match\n+  the stream's key. Hence, ksqlDB will first internally repartition the stream\n+  by the `userId` column.\n+\n ### 2. Create a persistent query\n \n Create a persistent query by using the `CREATE STREAM` keywords to\n-precede the `SELECT` statement. The results from this query are\n-written to the `PAGEVIEWS_ENRICHED` Kafka topic. The following query\n-enriches the `pageviews_original` STREAM by doing a `LEFT JOIN` with\n-the `users_original` TABLE on the user ID.\n+precede the `SELECT` statement, and removing the `LIMIT` clause.\n+The results from this query are written to the `PAGEVIEWS_ENRICHED` Kafka topic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 320}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg1OTQ1OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozNjowMlrOFnEwKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozNjowMlrOFnEwKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNjY0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            precede the `SELECT` statement, and removing the `LIMIT` clause.\n          \n          \n            \n            precede the `SELECT` statement and removing the `LIMIT` clause.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376516649", "createdAt": "2020-02-07T17:36:02Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -252,70 +294,153 @@ Optional: Show all streams and tables.\n ```\n ksql> SHOW STREAMS;\n \n-Stream Name              | Kafka Topic              | Format\n------------------------------------------------------------------\n-PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+ Stream Name         | Kafka Topic                 | Format    \n+---------------------------------------------------------------\n+ KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+ PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+---------------------------------------------------------------\n \n ksql> SHOW TABLES;\n \n-Table Name        | Kafka Topic       | Format    | Windowed\n---------------------------------------------------------------\n-USERS_ORIGINAL    | users             | JSON      | false\n+ Table Name     | Kafka Topic | Format | Windowed \n+--------------------------------------------------\n+ USERS_ORIGINAL | users       | AVRO   | false    \n+--------------------------------------------------\n ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream\n+    to see if ksqlDB is encountering data errors.\n+\n+Viewing your data\n+-----------------\n+\n+1. Use `SELECT` to create a query that returns data from a TABLE. This\n+   query includes the `LIMIT` keyword to limit the number of rows\n+   returned in the query result, and the `EMIT CHANGES` keywords to\n+   indicate we wish to stream results back. This is known as a\n+   [pull query](../concepts/queries/pull.md). See the\n+   [queries](../concepts/queries/index.md) for an explanation of the\n+   different query types. Note that exact data output may vary because\n+   of the randomness of the data generation.\n+   ```sql\n+   SELECT * from users_original emit changes limit 5;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |ROWTIME             |ROWKEY        |REGISTERTIME  |GENDER   |REGIONID  |USERID       |\n+   +--------------------+--------------+--------------+---------+----------+-------------+\n+   |1581077558655       |User_9        |1513529638461 |OTHER    |Region_1  |User_9       |\n+   |1581077561454       |User_7        |1489408314958 |OTHER    |Region_2  |User_7       |\n+   |1581077561654       |User_3        |1511291005264 |MALE     |Region_2  |User_3       |\n+   |1581077561857       |User_4        |1496797956753 |OTHER    |Region_1  |User_4       |\n+   |1581077562858       |User_8        |1489169082491 |FEMALE   |Region_8  |User_8       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+   !!! note\n+         Push queries on tables will output the full history of the table that is stored\n+         in the Kafka changelog topic, i.e. it will output historic data, followed by the\n+         stream of updates to the table. It is therefore likely that rows with matching\n+         `ROWKEY` are output as existing rows in the table are updated.\n+\n+2. View the data in your pageviews_original stream by issuing the following\n+   push query:\n+   ```sql\n+   SELECT viewtime, userid, pageid FROM pageviews_original emit changes LIMIT 3;\n+   ```\n+\n+   Your output should resemble:\n+\n+   ```\n+   +--------------+--------------+--------------+\n+   |VIEWTIME      |USERID        |PAGEID        |\n+   +--------------+--------------+--------------+\n+   |1581078296791 |User_1        |Page_54       |\n+   |1581078297792 |User_8        |Page_93       |\n+   |1581078298792 |User_6        |Page_26       |\n+   Limit Reached\n+   Query terminated\n+   ```\n+\n+   !!! note\n+      By default, push queries on streams only output changes that occur\n+      after the query is started, i.e. historic data is not included.\n+      Run `set 'auto.offset.reset'='earliest';` to update your session\n+      properties if you want to see the historic data.\n+\n Write Queries\n -------------\n \n These examples write queries using ksqlDB.\n \n-!!! note\n-\tBy default ksqlDB reads the topics for streams and tables from\n-    the latest offset.\n-\n ### 1. Create a query that returns data from a ksqlDB stream\n \n-Use `SELECT` to create a query that returns data from a STREAM. This\n-query includes the `LIMIT` keyword to limit the number of rows\n-returned in the query result. Note that exact data output may vary\n-because of the randomness of the data generation.\n+Create query that enriches the pageviews data with the user's gender\n+and regionid from the users table. The following query enriches the\n+`pageviews_original` STREAM by doing a `LEFT JOIN` with the\n+`users_original` TABLE on the userid column.\n \n ```sql\n-SELECT pageid FROM pageviews_original LIMIT 3;\n+SELECT users_original.userid AS userid, pageid, regionid, gender\n+  FROM pageviews_original\n+  LEFT JOIN users_original\n+    ON pageviews_original.userid = users_original.userid\n+  EMIT CHANGES\n+  LIMIT 5;\n ```\n \n Your output should resemble:\n \n ```\n-Page_24\n-Page_73\n-Page_78\n-LIMIT reached\n++-------------------+-------------------+-------------------+-------------------+\n+|USERID             |PAGEID             |REGIONID           |GENDER             |\n++-------------------+-------------------+-------------------+-------------------+\n+|User_7             |Page_23            |Region_2           |OTHER              |\n+|User_3             |Page_42            |Region_2           |MALE               |\n+|User_7             |Page_87            |Region_2           |OTHER              |\n+|User_2             |Page_57            |Region_5           |FEMALE             |\n+|User_9             |Page_59            |Region_1           |OTHER              |\n+Limit Reached\n Query terminated\n ```\n \n+!!! note\n+  The join to the users table is on the userid column, which was identified as\n+  an alias for the tables primary key, `ROWKEY`, in the CREATE TABLE statement.\n+  `userId` and `ROWKEY` can be used interchangeably as the join criteria for\n+  the table. However, the data in `userid` on the stream side does not match\n+  the stream's key. Hence, ksqlDB will first internally repartition the stream\n+  by the `userId` column.\n+\n ### 2. Create a persistent query\n \n Create a persistent query by using the `CREATE STREAM` keywords to\n-precede the `SELECT` statement. The results from this query are\n-written to the `PAGEVIEWS_ENRICHED` Kafka topic. The following query\n-enriches the `pageviews_original` STREAM by doing a `LEFT JOIN` with\n-the `users_original` TABLE on the user ID.\n+precede the `SELECT` statement, and removing the `LIMIT` clause.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 319}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg2MTczOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozNjo1OFrOFnExrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozNjo1OFrOFnExrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNzAzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### 7. View query results using push query\n          \n          \n            \n            ### 7. View query results using a push query", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376517038", "createdAt": "2020-02-07T17:36:58Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -400,48 +533,129 @@ format. ksqlDB registers the Avro schema with the configured\n \n ```sql\n CREATE TABLE pageviews_regions\n-    WITH (VALUE_FORMAT='avro') AS\n+ WITH (VALUE_FORMAT='avro') AS\n SELECT gender, regionid , COUNT(*) AS numusers\n FROM pageviews_enriched\n-    WINDOW TUMBLING (size 30 second)\n+  WINDOW TUMBLING (size 30 second)\n GROUP BY gender, regionid\n-HAVING COUNT(*) > 1;\n+EMIT CHANGES;\n ```\n \n Your output should resemble:\n \n ```\n-  Message\n----------------------------\n-  Table created and running\n----------------------------\n+ Message                                                                                                \n+--------------------------------------------------------------------------------------------------------\n+ Table PAGEVIEWS_REGIONS created and running. Created by query with query ID: CTAS_PAGEVIEWS_REGIONS_15 \n+--------------------------------------------------------------------------------------------------------\n ```\n \n !!! tip\n     You can run `DESCRIBE pageviews_regions;` to describe the table.\n \n-### 7. View query results\n+### 7. View query results using push query", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 462}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg2MjQyOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozNzoxNlrOFnEyHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozNzoxNlrOFnEyHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNzE1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            ### 8. View query results using pull query\n          \n          \n            \n            ### 8. View query results using a pull query", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376517151", "createdAt": "2020-02-07T17:37:16Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -400,48 +533,129 @@ format. ksqlDB registers the Avro schema with the configured\n \n ```sql\n CREATE TABLE pageviews_regions\n-    WITH (VALUE_FORMAT='avro') AS\n+ WITH (VALUE_FORMAT='avro') AS\n SELECT gender, regionid , COUNT(*) AS numusers\n FROM pageviews_enriched\n-    WINDOW TUMBLING (size 30 second)\n+  WINDOW TUMBLING (size 30 second)\n GROUP BY gender, regionid\n-HAVING COUNT(*) > 1;\n+EMIT CHANGES;\n ```\n \n Your output should resemble:\n \n ```\n-  Message\n----------------------------\n-  Table created and running\n----------------------------\n+ Message                                                                                                \n+--------------------------------------------------------------------------------------------------------\n+ Table PAGEVIEWS_REGIONS created and running. Created by query with query ID: CTAS_PAGEVIEWS_REGIONS_15 \n+--------------------------------------------------------------------------------------------------------\n ```\n \n !!! tip\n     You can run `DESCRIBE pageviews_regions;` to describe the table.\n \n-### 7. View query results\n+### 7. View query results using push query\n \n View results from the previous queries by using the `SELECT` statement.\n \n ```sql\n-SELECT gender, regionid, numusers FROM pageviews_regions LIMIT 5;\n+SELECT * FROM pageviews_regions EMIT CHANGES LIMIT 5;\n ```\n \n Your output should resemble:\n \n ```\n-FEMALE | Region_6 | 3\n-FEMALE | Region_1 | 4\n-FEMALE | Region_9 | 6\n-MALE | Region_8 | 2\n-OTHER | Region_5 | 4\n-LIMIT reached\n++---------------+-----------------+---------------+---------------+---------------+---------------+---------------+\n+|ROWTIME        |ROWKEY           |WINDOWSTART    |WINDOWEND      |GENDER         |REGIONID       |NUMUSERS       |\n++---------------+-----------------+---------------+---------------+---------------+---------------+---------------+\n+|1581080500530  |OTHER|+|Region_9 |1581080490000  |1581080520000  |OTHER          |Region_9       |1              |\n+|1581080501530  |OTHER|+|Region_5 |1581080490000  |1581080520000  |OTHER          |Region_5       |2              |\n+|1581080510532  |MALE|+|Region_7  |1581080490000  |1581080520000  |MALE           |Region_7       |4              |\n+|1581080513532  |FEMALE|+|Region_1|1581080490000  |1581080520000  |FEMALE         |Region_1       |2              |\n+|1581080516533  |MALE|+|Region_2  |1581080490000  |1581080520000  |MALE           |Region_2       |3              |\n+Limit Reached\n Query terminated\n-ksql>\n ```\n \n-### 8. View persistent queries\n+!!! note\n+   Notice the addition of the WINDOWSTART and WINDOWEND columns.\n+   These are available because `pageviews_regions` is aggregating data\n+   per 30 second _window_. ksqlDB automatically adds these system columns\n+   for windowed results.\n+\n+### 8. View query results using pull query", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 500}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg2NDE1OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozNzo1OVrOFnEzRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozNzo1OVrOFnEzRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNzQ0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            When a CREATE TABLE statement contains a GROUP BY clause, ksqlDB is internally building an\n          \n          \n            \n            When a CREATE TABLE statement contains a GROUP BY clause, ksqlDB builds an internal", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376517444", "createdAt": "2020-02-07T17:37:59Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -400,48 +533,129 @@ format. ksqlDB registers the Avro schema with the configured\n \n ```sql\n CREATE TABLE pageviews_regions\n-    WITH (VALUE_FORMAT='avro') AS\n+ WITH (VALUE_FORMAT='avro') AS\n SELECT gender, regionid , COUNT(*) AS numusers\n FROM pageviews_enriched\n-    WINDOW TUMBLING (size 30 second)\n+  WINDOW TUMBLING (size 30 second)\n GROUP BY gender, regionid\n-HAVING COUNT(*) > 1;\n+EMIT CHANGES;\n ```\n \n Your output should resemble:\n \n ```\n-  Message\n----------------------------\n-  Table created and running\n----------------------------\n+ Message                                                                                                \n+--------------------------------------------------------------------------------------------------------\n+ Table PAGEVIEWS_REGIONS created and running. Created by query with query ID: CTAS_PAGEVIEWS_REGIONS_15 \n+--------------------------------------------------------------------------------------------------------\n ```\n \n !!! tip\n     You can run `DESCRIBE pageviews_regions;` to describe the table.\n \n-### 7. View query results\n+### 7. View query results using push query\n \n View results from the previous queries by using the `SELECT` statement.\n \n ```sql\n-SELECT gender, regionid, numusers FROM pageviews_regions LIMIT 5;\n+SELECT * FROM pageviews_regions EMIT CHANGES LIMIT 5;\n ```\n \n Your output should resemble:\n \n ```\n-FEMALE | Region_6 | 3\n-FEMALE | Region_1 | 4\n-FEMALE | Region_9 | 6\n-MALE | Region_8 | 2\n-OTHER | Region_5 | 4\n-LIMIT reached\n++---------------+-----------------+---------------+---------------+---------------+---------------+---------------+\n+|ROWTIME        |ROWKEY           |WINDOWSTART    |WINDOWEND      |GENDER         |REGIONID       |NUMUSERS       |\n++---------------+-----------------+---------------+---------------+---------------+---------------+---------------+\n+|1581080500530  |OTHER|+|Region_9 |1581080490000  |1581080520000  |OTHER          |Region_9       |1              |\n+|1581080501530  |OTHER|+|Region_5 |1581080490000  |1581080520000  |OTHER          |Region_5       |2              |\n+|1581080510532  |MALE|+|Region_7  |1581080490000  |1581080520000  |MALE           |Region_7       |4              |\n+|1581080513532  |FEMALE|+|Region_1|1581080490000  |1581080520000  |FEMALE         |Region_1       |2              |\n+|1581080516533  |MALE|+|Region_2  |1581080490000  |1581080520000  |MALE           |Region_2       |3              |\n+Limit Reached\n Query terminated\n-ksql>\n ```\n \n-### 8. View persistent queries\n+!!! note\n+   Notice the addition of the WINDOWSTART and WINDOWEND columns.\n+   These are available because `pageviews_regions` is aggregating data\n+   per 30 second _window_. ksqlDB automatically adds these system columns\n+   for windowed results.\n+\n+### 8. View query results using pull query\n+\n+When a CREATE TABLE statement contains a GROUP BY clause, ksqlDB is internally building an", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 502}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg2NzA4OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozOTowM1rOFnE1Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozOTowM1rOFnE1Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxNzkwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Push queries do not have the `EMIT CHANGES` clause.\n          \n          \n            \n            Pull queries do not have the `EMIT CHANGES` clause.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376517907", "createdAt": "2020-02-07T17:39:03Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -400,48 +533,129 @@ format. ksqlDB registers the Avro schema with the configured\n \n ```sql\n CREATE TABLE pageviews_regions\n-    WITH (VALUE_FORMAT='avro') AS\n+ WITH (VALUE_FORMAT='avro') AS\n SELECT gender, regionid , COUNT(*) AS numusers\n FROM pageviews_enriched\n-    WINDOW TUMBLING (size 30 second)\n+  WINDOW TUMBLING (size 30 second)\n GROUP BY gender, regionid\n-HAVING COUNT(*) > 1;\n+EMIT CHANGES;\n ```\n \n Your output should resemble:\n \n ```\n-  Message\n----------------------------\n-  Table created and running\n----------------------------\n+ Message                                                                                                \n+--------------------------------------------------------------------------------------------------------\n+ Table PAGEVIEWS_REGIONS created and running. Created by query with query ID: CTAS_PAGEVIEWS_REGIONS_15 \n+--------------------------------------------------------------------------------------------------------\n ```\n \n !!! tip\n     You can run `DESCRIBE pageviews_regions;` to describe the table.\n \n-### 7. View query results\n+### 7. View query results using push query\n \n View results from the previous queries by using the `SELECT` statement.\n \n ```sql\n-SELECT gender, regionid, numusers FROM pageviews_regions LIMIT 5;\n+SELECT * FROM pageviews_regions EMIT CHANGES LIMIT 5;\n ```\n \n Your output should resemble:\n \n ```\n-FEMALE | Region_6 | 3\n-FEMALE | Region_1 | 4\n-FEMALE | Region_9 | 6\n-MALE | Region_8 | 2\n-OTHER | Region_5 | 4\n-LIMIT reached\n++---------------+-----------------+---------------+---------------+---------------+---------------+---------------+\n+|ROWTIME        |ROWKEY           |WINDOWSTART    |WINDOWEND      |GENDER         |REGIONID       |NUMUSERS       |\n++---------------+-----------------+---------------+---------------+---------------+---------------+---------------+\n+|1581080500530  |OTHER|+|Region_9 |1581080490000  |1581080520000  |OTHER          |Region_9       |1              |\n+|1581080501530  |OTHER|+|Region_5 |1581080490000  |1581080520000  |OTHER          |Region_5       |2              |\n+|1581080510532  |MALE|+|Region_7  |1581080490000  |1581080520000  |MALE           |Region_7       |4              |\n+|1581080513532  |FEMALE|+|Region_1|1581080490000  |1581080520000  |FEMALE         |Region_1       |2              |\n+|1581080516533  |MALE|+|Region_2  |1581080490000  |1581080520000  |MALE           |Region_2       |3              |\n+Limit Reached\n Query terminated\n-ksql>\n ```\n \n-### 8. View persistent queries\n+!!! note\n+   Notice the addition of the WINDOWSTART and WINDOWEND columns.\n+   These are available because `pageviews_regions` is aggregating data\n+   per 30 second _window_. ksqlDB automatically adds these system columns\n+   for windowed results.\n+\n+### 8. View query results using pull query\n+\n+When a CREATE TABLE statement contains a GROUP BY clause, ksqlDB is internally building an\n+table containing the results of the aggregation. ksqlDB supports pull queries against\n+such aggregation results.\n+\n+Unlike the push query used in the previous step, which _pushes_ a stream of results to you,\n+pull queries pull a result set and automatically terminate.\n+\n+Push queries do not have the `EMIT CHANGES` clause.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 509}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg2ODQ0OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozOTozNVrOFnE19A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzozOTozNVrOFnE19A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxODEzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            View all the windows and user counts available for a specific gender and region using a pull query:\n          \n          \n            \n            View all of the windows and user counts that are available for a specific gender and region by using a pull query:", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376518132", "createdAt": "2020-02-07T17:39:35Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -400,48 +533,129 @@ format. ksqlDB registers the Avro schema with the configured\n \n ```sql\n CREATE TABLE pageviews_regions\n-    WITH (VALUE_FORMAT='avro') AS\n+ WITH (VALUE_FORMAT='avro') AS\n SELECT gender, regionid , COUNT(*) AS numusers\n FROM pageviews_enriched\n-    WINDOW TUMBLING (size 30 second)\n+  WINDOW TUMBLING (size 30 second)\n GROUP BY gender, regionid\n-HAVING COUNT(*) > 1;\n+EMIT CHANGES;\n ```\n \n Your output should resemble:\n \n ```\n-  Message\n----------------------------\n-  Table created and running\n----------------------------\n+ Message                                                                                                \n+--------------------------------------------------------------------------------------------------------\n+ Table PAGEVIEWS_REGIONS created and running. Created by query with query ID: CTAS_PAGEVIEWS_REGIONS_15 \n+--------------------------------------------------------------------------------------------------------\n ```\n \n !!! tip\n     You can run `DESCRIBE pageviews_regions;` to describe the table.\n \n-### 7. View query results\n+### 7. View query results using push query\n \n View results from the previous queries by using the `SELECT` statement.\n \n ```sql\n-SELECT gender, regionid, numusers FROM pageviews_regions LIMIT 5;\n+SELECT * FROM pageviews_regions EMIT CHANGES LIMIT 5;\n ```\n \n Your output should resemble:\n \n ```\n-FEMALE | Region_6 | 3\n-FEMALE | Region_1 | 4\n-FEMALE | Region_9 | 6\n-MALE | Region_8 | 2\n-OTHER | Region_5 | 4\n-LIMIT reached\n++---------------+-----------------+---------------+---------------+---------------+---------------+---------------+\n+|ROWTIME        |ROWKEY           |WINDOWSTART    |WINDOWEND      |GENDER         |REGIONID       |NUMUSERS       |\n++---------------+-----------------+---------------+---------------+---------------+---------------+---------------+\n+|1581080500530  |OTHER|+|Region_9 |1581080490000  |1581080520000  |OTHER          |Region_9       |1              |\n+|1581080501530  |OTHER|+|Region_5 |1581080490000  |1581080520000  |OTHER          |Region_5       |2              |\n+|1581080510532  |MALE|+|Region_7  |1581080490000  |1581080520000  |MALE           |Region_7       |4              |\n+|1581080513532  |FEMALE|+|Region_1|1581080490000  |1581080520000  |FEMALE         |Region_1       |2              |\n+|1581080516533  |MALE|+|Region_2  |1581080490000  |1581080520000  |MALE           |Region_2       |3              |\n+Limit Reached\n Query terminated\n-ksql>\n ```\n \n-### 8. View persistent queries\n+!!! note\n+   Notice the addition of the WINDOWSTART and WINDOWEND columns.\n+   These are available because `pageviews_regions` is aggregating data\n+   per 30 second _window_. ksqlDB automatically adds these system columns\n+   for windowed results.\n+\n+### 8. View query results using pull query\n+\n+When a CREATE TABLE statement contains a GROUP BY clause, ksqlDB is internally building an\n+table containing the results of the aggregation. ksqlDB supports pull queries against\n+such aggregation results.\n+\n+Unlike the push query used in the previous step, which _pushes_ a stream of results to you,\n+pull queries pull a result set and automatically terminate.\n+\n+Push queries do not have the `EMIT CHANGES` clause.\n+\n+View all the windows and user counts available for a specific gender and region using a pull query:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 511}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg3MDMwOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0MDoyNlrOFnE3PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0MDoyNlrOFnE3PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxODQ2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Pull queries on windowed tables such as pageviews_regions also supports querying a single window's result:\n          \n          \n            \n            Pull queries on windowed tables such as `pageviews_regions` also support querying a single window's result:", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376518460", "createdAt": "2020-02-07T17:40:26Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -400,48 +533,129 @@ format. ksqlDB registers the Avro schema with the configured\n \n ```sql\n CREATE TABLE pageviews_regions\n-    WITH (VALUE_FORMAT='avro') AS\n+ WITH (VALUE_FORMAT='avro') AS\n SELECT gender, regionid , COUNT(*) AS numusers\n FROM pageviews_enriched\n-    WINDOW TUMBLING (size 30 second)\n+  WINDOW TUMBLING (size 30 second)\n GROUP BY gender, regionid\n-HAVING COUNT(*) > 1;\n+EMIT CHANGES;\n ```\n \n Your output should resemble:\n \n ```\n-  Message\n----------------------------\n-  Table created and running\n----------------------------\n+ Message                                                                                                \n+--------------------------------------------------------------------------------------------------------\n+ Table PAGEVIEWS_REGIONS created and running. Created by query with query ID: CTAS_PAGEVIEWS_REGIONS_15 \n+--------------------------------------------------------------------------------------------------------\n ```\n \n !!! tip\n     You can run `DESCRIBE pageviews_regions;` to describe the table.\n \n-### 7. View query results\n+### 7. View query results using push query\n \n View results from the previous queries by using the `SELECT` statement.\n \n ```sql\n-SELECT gender, regionid, numusers FROM pageviews_regions LIMIT 5;\n+SELECT * FROM pageviews_regions EMIT CHANGES LIMIT 5;\n ```\n \n Your output should resemble:\n \n ```\n-FEMALE | Region_6 | 3\n-FEMALE | Region_1 | 4\n-FEMALE | Region_9 | 6\n-MALE | Region_8 | 2\n-OTHER | Region_5 | 4\n-LIMIT reached\n++---------------+-----------------+---------------+---------------+---------------+---------------+---------------+\n+|ROWTIME        |ROWKEY           |WINDOWSTART    |WINDOWEND      |GENDER         |REGIONID       |NUMUSERS       |\n++---------------+-----------------+---------------+---------------+---------------+---------------+---------------+\n+|1581080500530  |OTHER|+|Region_9 |1581080490000  |1581080520000  |OTHER          |Region_9       |1              |\n+|1581080501530  |OTHER|+|Region_5 |1581080490000  |1581080520000  |OTHER          |Region_5       |2              |\n+|1581080510532  |MALE|+|Region_7  |1581080490000  |1581080520000  |MALE           |Region_7       |4              |\n+|1581080513532  |FEMALE|+|Region_1|1581080490000  |1581080520000  |FEMALE         |Region_1       |2              |\n+|1581080516533  |MALE|+|Region_2  |1581080490000  |1581080520000  |MALE           |Region_2       |3              |\n+Limit Reached\n Query terminated\n-ksql>\n ```\n \n-### 8. View persistent queries\n+!!! note\n+   Notice the addition of the WINDOWSTART and WINDOWEND columns.\n+   These are available because `pageviews_regions` is aggregating data\n+   per 30 second _window_. ksqlDB automatically adds these system columns\n+   for windowed results.\n+\n+### 8. View query results using pull query\n+\n+When a CREATE TABLE statement contains a GROUP BY clause, ksqlDB is internally building an\n+table containing the results of the aggregation. ksqlDB supports pull queries against\n+such aggregation results.\n+\n+Unlike the push query used in the previous step, which _pushes_ a stream of results to you,\n+pull queries pull a result set and automatically terminate.\n+\n+Push queries do not have the `EMIT CHANGES` clause.\n+\n+View all the windows and user counts available for a specific gender and region using a pull query:\n+\n+```sql\n+SELECT * FROM pageviews_regions WHERE ROWKEY='OTHER|+|Region_9';\n+```\n+\n+Your output should resemble:\n+\n+```\n++------------------+------------------+------------------+------------------+------------------+------------------+------------------+\n+|ROWKEY            |WINDOWSTART       |WINDOWEND         |ROWTIME           |GENDER            |REGIONID          |NUMUSERS          |\n++------------------+------------------+------------------+------------------+------------------+------------------+------------------+\n+|OTHER|+|Region_9  |1581080490000     |1581080520000     |1581080500530     |OTHER             |Region_9          |1                 |\n+|OTHER|+|Region_9  |1581080550000     |1581080580000     |1581080576526     |OTHER             |Region_9          |4                 |\n+|OTHER|+|Region_9  |1581080580000     |1581080610000     |1581080606525     |OTHER             |Region_9          |4                 |\n+|OTHER|+|Region_9  |1581080610000     |1581080640000     |1581080622524     |OTHER             |Region_9          |3                 |\n+|OTHER|+|Region_9  |1581080640000     |1581080670000     |1581080667528     |OTHER             |Region_9          |6                 |\n+...\n+```\n+\n+Pull queries on windowed tables such as pageviews_regions also supports querying a single window's result:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 531}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg3MTk4OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0MTowMFrOFnE4Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0MTowMFrOFnE4Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxODczMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               You will need to change value of `WINDOWSTART` in the above SQL to match one of the window boundaries in your data.\n          \n          \n            \n               You must change the value of `WINDOWSTART` in the above SQL to match one of the window boundaries in your data.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376518730", "createdAt": "2020-02-07T17:41:00Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -400,48 +533,129 @@ format. ksqlDB registers the Avro schema with the configured\n \n ```sql\n CREATE TABLE pageviews_regions\n-    WITH (VALUE_FORMAT='avro') AS\n+ WITH (VALUE_FORMAT='avro') AS\n SELECT gender, regionid , COUNT(*) AS numusers\n FROM pageviews_enriched\n-    WINDOW TUMBLING (size 30 second)\n+  WINDOW TUMBLING (size 30 second)\n GROUP BY gender, regionid\n-HAVING COUNT(*) > 1;\n+EMIT CHANGES;\n ```\n \n Your output should resemble:\n \n ```\n-  Message\n----------------------------\n-  Table created and running\n----------------------------\n+ Message                                                                                                \n+--------------------------------------------------------------------------------------------------------\n+ Table PAGEVIEWS_REGIONS created and running. Created by query with query ID: CTAS_PAGEVIEWS_REGIONS_15 \n+--------------------------------------------------------------------------------------------------------\n ```\n \n !!! tip\n     You can run `DESCRIBE pageviews_regions;` to describe the table.\n \n-### 7. View query results\n+### 7. View query results using push query\n \n View results from the previous queries by using the `SELECT` statement.\n \n ```sql\n-SELECT gender, regionid, numusers FROM pageviews_regions LIMIT 5;\n+SELECT * FROM pageviews_regions EMIT CHANGES LIMIT 5;\n ```\n \n Your output should resemble:\n \n ```\n-FEMALE | Region_6 | 3\n-FEMALE | Region_1 | 4\n-FEMALE | Region_9 | 6\n-MALE | Region_8 | 2\n-OTHER | Region_5 | 4\n-LIMIT reached\n++---------------+-----------------+---------------+---------------+---------------+---------------+---------------+\n+|ROWTIME        |ROWKEY           |WINDOWSTART    |WINDOWEND      |GENDER         |REGIONID       |NUMUSERS       |\n++---------------+-----------------+---------------+---------------+---------------+---------------+---------------+\n+|1581080500530  |OTHER|+|Region_9 |1581080490000  |1581080520000  |OTHER          |Region_9       |1              |\n+|1581080501530  |OTHER|+|Region_5 |1581080490000  |1581080520000  |OTHER          |Region_5       |2              |\n+|1581080510532  |MALE|+|Region_7  |1581080490000  |1581080520000  |MALE           |Region_7       |4              |\n+|1581080513532  |FEMALE|+|Region_1|1581080490000  |1581080520000  |FEMALE         |Region_1       |2              |\n+|1581080516533  |MALE|+|Region_2  |1581080490000  |1581080520000  |MALE           |Region_2       |3              |\n+Limit Reached\n Query terminated\n-ksql>\n ```\n \n-### 8. View persistent queries\n+!!! note\n+   Notice the addition of the WINDOWSTART and WINDOWEND columns.\n+   These are available because `pageviews_regions` is aggregating data\n+   per 30 second _window_. ksqlDB automatically adds these system columns\n+   for windowed results.\n+\n+### 8. View query results using pull query\n+\n+When a CREATE TABLE statement contains a GROUP BY clause, ksqlDB is internally building an\n+table containing the results of the aggregation. ksqlDB supports pull queries against\n+such aggregation results.\n+\n+Unlike the push query used in the previous step, which _pushes_ a stream of results to you,\n+pull queries pull a result set and automatically terminate.\n+\n+Push queries do not have the `EMIT CHANGES` clause.\n+\n+View all the windows and user counts available for a specific gender and region using a pull query:\n+\n+```sql\n+SELECT * FROM pageviews_regions WHERE ROWKEY='OTHER|+|Region_9';\n+```\n+\n+Your output should resemble:\n+\n+```\n++------------------+------------------+------------------+------------------+------------------+------------------+------------------+\n+|ROWKEY            |WINDOWSTART       |WINDOWEND         |ROWTIME           |GENDER            |REGIONID          |NUMUSERS          |\n++------------------+------------------+------------------+------------------+------------------+------------------+------------------+\n+|OTHER|+|Region_9  |1581080490000     |1581080520000     |1581080500530     |OTHER             |Region_9          |1                 |\n+|OTHER|+|Region_9  |1581080550000     |1581080580000     |1581080576526     |OTHER             |Region_9          |4                 |\n+|OTHER|+|Region_9  |1581080580000     |1581080610000     |1581080606525     |OTHER             |Region_9          |4                 |\n+|OTHER|+|Region_9  |1581080610000     |1581080640000     |1581080622524     |OTHER             |Region_9          |3                 |\n+|OTHER|+|Region_9  |1581080640000     |1581080670000     |1581080667528     |OTHER             |Region_9          |6                 |\n+...\n+```\n+\n+Pull queries on windowed tables such as pageviews_regions also supports querying a single window's result:\n+\n+```sql\n+SELECT NUMUSERS FROM pageviews_regions WHERE ROWKEY='OTHER|+|Region_9' AND WINDOWSTART=1581080550000;\n+```\n+\n+!!! important\n+   You will need to change value of `WINDOWSTART` in the above SQL to match one of the window boundaries in your data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 538}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg3MzMwOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0MToyNVrOFnE5KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0MToyNVrOFnE5KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxODk1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               You will need to change value of `WINDOWSTART` in the above SQL to match one of the window boundaries in your data.\n          \n          \n            \n               You must change the value of `WINDOWSTART` in the above SQL to match one of the window boundaries in your data.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376518953", "createdAt": "2020-02-07T17:41:25Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -400,48 +533,129 @@ format. ksqlDB registers the Avro schema with the configured\n \n ```sql\n CREATE TABLE pageviews_regions\n-    WITH (VALUE_FORMAT='avro') AS\n+ WITH (VALUE_FORMAT='avro') AS\n SELECT gender, regionid , COUNT(*) AS numusers\n FROM pageviews_enriched\n-    WINDOW TUMBLING (size 30 second)\n+  WINDOW TUMBLING (size 30 second)\n GROUP BY gender, regionid\n-HAVING COUNT(*) > 1;\n+EMIT CHANGES;\n ```\n \n Your output should resemble:\n \n ```\n-  Message\n----------------------------\n-  Table created and running\n----------------------------\n+ Message                                                                                                \n+--------------------------------------------------------------------------------------------------------\n+ Table PAGEVIEWS_REGIONS created and running. Created by query with query ID: CTAS_PAGEVIEWS_REGIONS_15 \n+--------------------------------------------------------------------------------------------------------\n ```\n \n !!! tip\n     You can run `DESCRIBE pageviews_regions;` to describe the table.\n \n-### 7. View query results\n+### 7. View query results using push query\n \n View results from the previous queries by using the `SELECT` statement.\n \n ```sql\n-SELECT gender, regionid, numusers FROM pageviews_regions LIMIT 5;\n+SELECT * FROM pageviews_regions EMIT CHANGES LIMIT 5;\n ```\n \n Your output should resemble:\n \n ```\n-FEMALE | Region_6 | 3\n-FEMALE | Region_1 | 4\n-FEMALE | Region_9 | 6\n-MALE | Region_8 | 2\n-OTHER | Region_5 | 4\n-LIMIT reached\n++---------------+-----------------+---------------+---------------+---------------+---------------+---------------+\n+|ROWTIME        |ROWKEY           |WINDOWSTART    |WINDOWEND      |GENDER         |REGIONID       |NUMUSERS       |\n++---------------+-----------------+---------------+---------------+---------------+---------------+---------------+\n+|1581080500530  |OTHER|+|Region_9 |1581080490000  |1581080520000  |OTHER          |Region_9       |1              |\n+|1581080501530  |OTHER|+|Region_5 |1581080490000  |1581080520000  |OTHER          |Region_5       |2              |\n+|1581080510532  |MALE|+|Region_7  |1581080490000  |1581080520000  |MALE           |Region_7       |4              |\n+|1581080513532  |FEMALE|+|Region_1|1581080490000  |1581080520000  |FEMALE         |Region_1       |2              |\n+|1581080516533  |MALE|+|Region_2  |1581080490000  |1581080520000  |MALE           |Region_2       |3              |\n+Limit Reached\n Query terminated\n-ksql>\n ```\n \n-### 8. View persistent queries\n+!!! note\n+   Notice the addition of the WINDOWSTART and WINDOWEND columns.\n+   These are available because `pageviews_regions` is aggregating data\n+   per 30 second _window_. ksqlDB automatically adds these system columns\n+   for windowed results.\n+\n+### 8. View query results using pull query\n+\n+When a CREATE TABLE statement contains a GROUP BY clause, ksqlDB is internally building an\n+table containing the results of the aggregation. ksqlDB supports pull queries against\n+such aggregation results.\n+\n+Unlike the push query used in the previous step, which _pushes_ a stream of results to you,\n+pull queries pull a result set and automatically terminate.\n+\n+Push queries do not have the `EMIT CHANGES` clause.\n+\n+View all the windows and user counts available for a specific gender and region using a pull query:\n+\n+```sql\n+SELECT * FROM pageviews_regions WHERE ROWKEY='OTHER|+|Region_9';\n+```\n+\n+Your output should resemble:\n+\n+```\n++------------------+------------------+------------------+------------------+------------------+------------------+------------------+\n+|ROWKEY            |WINDOWSTART       |WINDOWEND         |ROWTIME           |GENDER            |REGIONID          |NUMUSERS          |\n++------------------+------------------+------------------+------------------+------------------+------------------+------------------+\n+|OTHER|+|Region_9  |1581080490000     |1581080520000     |1581080500530     |OTHER             |Region_9          |1                 |\n+|OTHER|+|Region_9  |1581080550000     |1581080580000     |1581080576526     |OTHER             |Region_9          |4                 |\n+|OTHER|+|Region_9  |1581080580000     |1581080610000     |1581080606525     |OTHER             |Region_9          |4                 |\n+|OTHER|+|Region_9  |1581080610000     |1581080640000     |1581080622524     |OTHER             |Region_9          |3                 |\n+|OTHER|+|Region_9  |1581080640000     |1581080670000     |1581080667528     |OTHER             |Region_9          |6                 |\n+...\n+```\n+\n+Pull queries on windowed tables such as pageviews_regions also supports querying a single window's result:\n+\n+```sql\n+SELECT NUMUSERS FROM pageviews_regions WHERE ROWKEY='OTHER|+|Region_9' AND WINDOWSTART=1581080550000;\n+```\n+\n+!!! important\n+   You will need to change value of `WINDOWSTART` in the above SQL to match one of the window boundaries in your data.\n+   Otherwise no results will be returned.\n+\n+Your output should resemble:\n+\n+```\n++----------+\n+|NUMUSERS  |\n++----------+\n+|4         |\n+Query terminated\n+```\n+\n+Or querying a range of windows:\n+\n+```sql\n+SELECT WINDOWSTART, WINDOWEND, NUMUSERS FROM pageviews_regions WHERE ROWKEY='OTHER|+|Region_9' AND 1581080550000 <= WINDOWSTART AND WINDOWSTART <= 1581080610000;\n+```\n+\n+!!! important\n+   You will need to change value of `WINDOWSTART` in the above SQL to match one of the window boundaries in your data.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 558}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg3Njc0OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0Mjo1MVrOFnE7aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0Mjo1MVrOFnE7aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxOTUyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            In the ksqlDB CLI create two new streams, both streams will store their\n          \n          \n            \n            In the ksqlDB CLI create two new streams. Both streams will store their", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376519528", "createdAt": "2020-02-07T17:42:51Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -600,48 +831,23 @@ common key. An example of this could be a stream of order events and\n a stream of shipment events. By joining these on the order key, you can\n see shipment information alongside the order.\n \n-### 1. Populate two source topics\n-\n-In a separate console window, populate the `orders` and `shipments`\n-topics by using the `kafkacat` utility:\n-\n-```bash\n-docker run --interactive --rm --network tutorials_default \\\n-  confluentinc/cp-kafkacat \\\n-  kafkacat -b kafka:39092 \\\n-          -t new_orders \\\n-          -K: \\\n-          -P <<EOF\n-1:{\"order_id\":1,\"total_amount\":10.50,\"customer_name\":\"Bob Smith\"}\n-2:{\"order_id\":2,\"total_amount\":3.32,\"customer_name\":\"Sarah Black\"}\n-3:{\"order_id\":3,\"total_amount\":21.00,\"customer_name\":\"Emma Turner\"}\n-EOF\n-```\n-\n-```bash\n-docker run --interactive --rm --network tutorials_default \\\n-  confluentinc/cp-kafkacat \\\n-  kafkacat -b kafka:39092 \\\n-          -t shipments \\\n-          -K: \\\n-          -P <<EOF\n-1:{\"order_id\":1,\"shipment_id\":42,\"warehouse\":\"Nashville\"}\n-3:{\"order_id\":3,\"shipment_id\":43,\"warehouse\":\"Palo Alto\"}\n-EOF\n-```\n-\n-### 2. Register two streams\n+### 1. Create two streams\n \n-In the ksqlDB CLI, register both topics as ksqlDB streams:\n+In the ksqlDB CLI create two new streams, both streams will store their", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 772}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg3NzM5OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0MzowNlrOFnE73A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0MzowNlrOFnE73A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxOTY0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            order id in ROWKEY:\n          \n          \n            \n            order ID in ROWKEY:", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376519644", "createdAt": "2020-02-07T17:43:06Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -600,48 +831,23 @@ common key. An example of this could be a stream of order events and\n a stream of shipment events. By joining these on the order key, you can\n see shipment information alongside the order.\n \n-### 1. Populate two source topics\n-\n-In a separate console window, populate the `orders` and `shipments`\n-topics by using the `kafkacat` utility:\n-\n-```bash\n-docker run --interactive --rm --network tutorials_default \\\n-  confluentinc/cp-kafkacat \\\n-  kafkacat -b kafka:39092 \\\n-          -t new_orders \\\n-          -K: \\\n-          -P <<EOF\n-1:{\"order_id\":1,\"total_amount\":10.50,\"customer_name\":\"Bob Smith\"}\n-2:{\"order_id\":2,\"total_amount\":3.32,\"customer_name\":\"Sarah Black\"}\n-3:{\"order_id\":3,\"total_amount\":21.00,\"customer_name\":\"Emma Turner\"}\n-EOF\n-```\n-\n-```bash\n-docker run --interactive --rm --network tutorials_default \\\n-  confluentinc/cp-kafkacat \\\n-  kafkacat -b kafka:39092 \\\n-          -t shipments \\\n-          -K: \\\n-          -P <<EOF\n-1:{\"order_id\":1,\"shipment_id\":42,\"warehouse\":\"Nashville\"}\n-3:{\"order_id\":3,\"shipment_id\":43,\"warehouse\":\"Palo Alto\"}\n-EOF\n-```\n-\n-### 2. Register two streams\n+### 1. Create two streams\n \n-In the ksqlDB CLI, register both topics as ksqlDB streams:\n+In the ksqlDB CLI create two new streams, both streams will store their\n+order id in ROWKEY:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 773}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg3OTc1OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0Mzo0NlrOFnE9MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0Mzo0NlrOFnE9MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUxOTk4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              ksqlDB will create the underlying topics in Kafka when these statements\n          \n          \n            \n              ksqlDB creates the underlying topics in {{ site.ak }} when it executes these statements.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376519984", "createdAt": "2020-02-07T17:43:46Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -600,48 +831,23 @@ common key. An example of this could be a stream of order events and\n a stream of shipment events. By joining these on the order key, you can\n see shipment information alongside the order.\n \n-### 1. Populate two source topics\n-\n-In a separate console window, populate the `orders` and `shipments`\n-topics by using the `kafkacat` utility:\n-\n-```bash\n-docker run --interactive --rm --network tutorials_default \\\n-  confluentinc/cp-kafkacat \\\n-  kafkacat -b kafka:39092 \\\n-          -t new_orders \\\n-          -K: \\\n-          -P <<EOF\n-1:{\"order_id\":1,\"total_amount\":10.50,\"customer_name\":\"Bob Smith\"}\n-2:{\"order_id\":2,\"total_amount\":3.32,\"customer_name\":\"Sarah Black\"}\n-3:{\"order_id\":3,\"total_amount\":21.00,\"customer_name\":\"Emma Turner\"}\n-EOF\n-```\n-\n-```bash\n-docker run --interactive --rm --network tutorials_default \\\n-  confluentinc/cp-kafkacat \\\n-  kafkacat -b kafka:39092 \\\n-          -t shipments \\\n-          -K: \\\n-          -P <<EOF\n-1:{\"order_id\":1,\"shipment_id\":42,\"warehouse\":\"Nashville\"}\n-3:{\"order_id\":3,\"shipment_id\":43,\"warehouse\":\"Palo Alto\"}\n-EOF\n-```\n-\n-### 2. Register two streams\n+### 1. Create two streams\n \n-In the ksqlDB CLI, register both topics as ksqlDB streams:\n+In the ksqlDB CLI create two new streams, both streams will store their\n+order id in ROWKEY:\n \n ```sql\n-CREATE STREAM NEW_ORDERS (ORDER_ID INT, TOTAL_AMOUNT DOUBLE, CUSTOMER_NAME VARCHAR)\n-WITH (KAFKA_TOPIC='new_orders', VALUE_FORMAT='JSON');\n+CREATE STREAM NEW_ORDERS (ROWKEY INT KEY, TOTAL_AMOUNT DOUBLE, CUSTOMER_NAME VARCHAR)\n+WITH (KAFKA_TOPIC='new_orders', VALUE_FORMAT='JSON', PARTITIONS=2);\n \n-CREATE STREAM SHIPMENTS (ORDER_ID INT, SHIPMENT_ID INT, WAREHOUSE VARCHAR)\n-WITH (KAFKA_TOPIC='shipments', VALUE_FORMAT='JSON');\n+CREATE STREAM SHIPMENTS (ROWKEY INT KEY, SHIPMENT_ID INT, WAREHOUSE VARCHAR)\n+WITH (KAFKA_TOPIC='shipments', VALUE_FORMAT='JSON', PARTITIONS=2);\n ```\n \n+!!! note\n+  ksqlDB will create the underlying topics in Kafka when these statements", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 788}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg4MDYyOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0NDowMFrOFnE9pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0NDowMFrOFnE9pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyMDEwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              are executed. You can also specify the `REPLICAS` count.\n          \n          \n            \n              You can also specify the `REPLICAS` count.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376520101", "createdAt": "2020-02-07T17:44:00Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -600,48 +831,23 @@ common key. An example of this could be a stream of order events and\n a stream of shipment events. By joining these on the order key, you can\n see shipment information alongside the order.\n \n-### 1. Populate two source topics\n-\n-In a separate console window, populate the `orders` and `shipments`\n-topics by using the `kafkacat` utility:\n-\n-```bash\n-docker run --interactive --rm --network tutorials_default \\\n-  confluentinc/cp-kafkacat \\\n-  kafkacat -b kafka:39092 \\\n-          -t new_orders \\\n-          -K: \\\n-          -P <<EOF\n-1:{\"order_id\":1,\"total_amount\":10.50,\"customer_name\":\"Bob Smith\"}\n-2:{\"order_id\":2,\"total_amount\":3.32,\"customer_name\":\"Sarah Black\"}\n-3:{\"order_id\":3,\"total_amount\":21.00,\"customer_name\":\"Emma Turner\"}\n-EOF\n-```\n-\n-```bash\n-docker run --interactive --rm --network tutorials_default \\\n-  confluentinc/cp-kafkacat \\\n-  kafkacat -b kafka:39092 \\\n-          -t shipments \\\n-          -K: \\\n-          -P <<EOF\n-1:{\"order_id\":1,\"shipment_id\":42,\"warehouse\":\"Nashville\"}\n-3:{\"order_id\":3,\"shipment_id\":43,\"warehouse\":\"Palo Alto\"}\n-EOF\n-```\n-\n-### 2. Register two streams\n+### 1. Create two streams\n \n-In the ksqlDB CLI, register both topics as ksqlDB streams:\n+In the ksqlDB CLI create two new streams, both streams will store their\n+order id in ROWKEY:\n \n ```sql\n-CREATE STREAM NEW_ORDERS (ORDER_ID INT, TOTAL_AMOUNT DOUBLE, CUSTOMER_NAME VARCHAR)\n-WITH (KAFKA_TOPIC='new_orders', VALUE_FORMAT='JSON');\n+CREATE STREAM NEW_ORDERS (ROWKEY INT KEY, TOTAL_AMOUNT DOUBLE, CUSTOMER_NAME VARCHAR)\n+WITH (KAFKA_TOPIC='new_orders', VALUE_FORMAT='JSON', PARTITIONS=2);\n \n-CREATE STREAM SHIPMENTS (ORDER_ID INT, SHIPMENT_ID INT, WAREHOUSE VARCHAR)\n-WITH (KAFKA_TOPIC='shipments', VALUE_FORMAT='JSON');\n+CREATE STREAM SHIPMENTS (ROWKEY INT KEY, SHIPMENT_ID INT, WAREHOUSE VARCHAR)\n+WITH (KAFKA_TOPIC='shipments', VALUE_FORMAT='JSON', PARTITIONS=2);\n ```\n \n+!!! note\n+  ksqlDB will create the underlying topics in Kafka when these statements\n+  are executed. You can also specify the `REPLICAS` count.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 789}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg4MTU0OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0NDoyM1rOFnE-Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0NDoyM1rOFnE-Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyMDI1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Populate the streams with some sample data using the INSERT VALUES statement:\n          \n          \n            \n            Populate the streams with some sample data by using the INSERT VALUES statement:", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376520255", "createdAt": "2020-02-07T17:44:23Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -651,10 +857,29 @@ After both `CREATE STREAM` statements, your output should resemble:\n ----------------\n ```\n \n+### 2. Populate two source topics\n+\n+Populate the streams with some sample data using the INSERT VALUES statement:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 800}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg4Mjc3OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0NDo1NVrOFnE_Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0NDo1NVrOFnE_Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyMDQ3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            -- short hand version can be used when inserting values for all columns, (except ROWTIME), in column order:\n          \n          \n            \n            -- shorthand version can be used when inserting values for all columns, (except ROWTIME), in column order:", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376520474", "createdAt": "2020-02-07T17:44:55Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -651,10 +857,29 @@ After both `CREATE STREAM` statements, your output should resemble:\n ----------------\n ```\n \n+### 2. Populate two source topics\n+\n+Populate the streams with some sample data using the INSERT VALUES statement:\n+\n+```sql\n+-- Insert values in NEW_ORDERS:\n+-- insert supplying the list of columns to insert:\n+INSERT INTO NEW_ORDERS (ROWKEY, CUSTOMER_NAME, TOTAL_AMOUNT) \n+  VALUES (1, 'Bob Smith', 10.50);\n+  \n+-- short hand version can be used when inserting values for all columns, (except ROWTIME), in column order:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 808}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg4ODE0OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-docker.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0NzowNFrOFnFCkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0NzowNFrOFnFCkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyMTM2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            You can also use `kafkacat` command line tool\n          \n          \n            \n            You can also use the `kafkacat` command line tool:", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376521363", "createdAt": "2020-02-07T17:47:04Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-docker.md", "diffHunk": "@@ -1114,7 +1396,22 @@ key3:{\"id\":\"key3\",\"col1\":\"v7\",\"col2\":\"v8\",\"col3\":\"v9\"}\n key1:{\"id\":\"key1\",\"col1\":\"v10\",\"col2\":\"v11\",\"col3\":\"v12\"}\n ```\n \n-You can also use `kafkacat` from Docker, as demonstrated in the previous\n+You can also use `kafkacat` command line tool", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 1280}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg4OTg5OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-local.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0Nzo1MFrOFnFDrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0Nzo1MFrOFnFDrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyMTY0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            By default, KSQL hides internal / system topics. Use the SHOW ALL TOPICS\n          \n          \n            \n            By default, KSQL hides internal and system topics. Use the SHOW ALL TOPICS", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376521647", "createdAt": "2020-02-07T17:47:50Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-local.md", "diffHunk": "@@ -119,25 +119,50 @@ SHOW TOPICS;\n Your output should resemble:\n \n ```\n- Kafka Topic        | Partitions | Partition Replicas\n-------------------------------------------------------\n- _confluent-metrics | 12         | 1\n- _schemas           | 1          | 1\n- pageviews          | 1          | 1\n- users              | 1          | 1\n-------------------------------------------------------\n+ Kafka Topic                 | Partitions | Partition Replicas\n+--------------------------------------------------------------\n+ default_ksql_processing_log | 1          | 1\n+ pageviews                   | 1          | 1\n+ users                       | 1          | 1\n+--------------------------------------------------------------\n+```\n+\n+By default, KSQL hides internal / system topics. Use the SHOW ALL TOPICS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg5MTQ0OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-local.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0ODoyNVrOFnFEow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0ODoyNVrOFnFEow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyMTg5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               The PRINT statement is one of the few commands in ksqlDB that are\n          \n          \n            \n               The PRINT statement is one of the few case-sensitive commands in ksqlDB,", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376521891", "createdAt": "2020-02-07T17:48:25Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-local.md", "diffHunk": "@@ -119,25 +119,50 @@ SHOW TOPICS;\n Your output should resemble:\n \n ```\n- Kafka Topic        | Partitions | Partition Replicas\n-------------------------------------------------------\n- _confluent-metrics | 12         | 1\n- _schemas           | 1          | 1\n- pageviews          | 1          | 1\n- users              | 1          | 1\n-------------------------------------------------------\n+ Kafka Topic                 | Partitions | Partition Replicas\n+--------------------------------------------------------------\n+ default_ksql_processing_log | 1          | 1\n+ pageviews                   | 1          | 1\n+ users                       | 1          | 1\n+--------------------------------------------------------------\n+```\n+\n+By default, KSQL hides internal / system topics. Use the SHOW ALL TOPICS\n+statement to see the full list of topics in the Kafka cluster:\n+\n+```sql\n+SHOW ALL TOPICS;\n+```\n+\n+Your output should resemble:\n+\n+```\n+  Kafka Topic                            | Partitions | Partition Replicas \n+--------------------------------------------------------------------------\n+ __confluent.support.metrics            | 1          | 1                  \n+ _confluent-ksql-default__command_topic | 1          | 1                  \n+ _confluent-license                     | 1          | 1                  \n+ _confluent-metrics                     | 12         | 1                  \n+ default_ksql_processing_log            | 1          | 1                  \n+ pageviews                              | 1          | 1                  \n+ users                                  | 1          | 1                  \n+--------------------------------------------------------------------------\n ```\n \n Inspect the `users` topic by using the PRINT statement:\n \n ```sql\n-PRINT 'users';\n+PRINT users;\n ```\n \n+!!! note\n+   The PRINT statement is one of the few commands in ksqlDB that are", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg5MjE0OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-local.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0ODo0NVrOFnFFHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0ODo0NVrOFnFFHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyMjAxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               case-sensitive, even when the topic name is not quoted.\n          \n          \n            \n               even when the topic name is not quoted.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376522015", "createdAt": "2020-02-07T17:48:45Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-local.md", "diffHunk": "@@ -119,25 +119,50 @@ SHOW TOPICS;\n Your output should resemble:\n \n ```\n- Kafka Topic        | Partitions | Partition Replicas\n-------------------------------------------------------\n- _confluent-metrics | 12         | 1\n- _schemas           | 1          | 1\n- pageviews          | 1          | 1\n- users              | 1          | 1\n-------------------------------------------------------\n+ Kafka Topic                 | Partitions | Partition Replicas\n+--------------------------------------------------------------\n+ default_ksql_processing_log | 1          | 1\n+ pageviews                   | 1          | 1\n+ users                       | 1          | 1\n+--------------------------------------------------------------\n+```\n+\n+By default, KSQL hides internal / system topics. Use the SHOW ALL TOPICS\n+statement to see the full list of topics in the Kafka cluster:\n+\n+```sql\n+SHOW ALL TOPICS;\n+```\n+\n+Your output should resemble:\n+\n+```\n+  Kafka Topic                            | Partitions | Partition Replicas \n+--------------------------------------------------------------------------\n+ __confluent.support.metrics            | 1          | 1                  \n+ _confluent-ksql-default__command_topic | 1          | 1                  \n+ _confluent-license                     | 1          | 1                  \n+ _confluent-metrics                     | 12         | 1                  \n+ default_ksql_processing_log            | 1          | 1                  \n+ pageviews                              | 1          | 1                  \n+ users                                  | 1          | 1                  \n+--------------------------------------------------------------------------\n ```\n \n Inspect the `users` topic by using the PRINT statement:\n \n ```sql\n-PRINT 'users';\n+PRINT users;\n ```\n \n+!!! note\n+   The PRINT statement is one of the few commands in ksqlDB that are\n+   case-sensitive, even when the topic name is not quoted.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg5MzU5OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-local.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0OToyMFrOFnFGCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0OToyMFrOFnFGCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyMjI0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      stream. Notice that KSQL created an additional columns, named\n          \n          \n            \n                      stream. Notice that ksqlDB created an additional column, named", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376522249", "createdAt": "2020-02-07T17:49:20Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-local.md", "diffHunk": "@@ -196,16 +221,14 @@ These examples query messages from Kafka topics called `pageviews` and\n \n     !!! tip\n           You can run `DESCRIBE pageviews_original;` to see the schema for the\n-          stream. Notice that KSQL created two additional columns, named\n-          `ROWTIME`, which corresponds with the Kafka message timestamp, and\n-          `ROWKEY`, which corresponds with the Kafka message key.\n+          stream. Notice that KSQL created an additional columns, named", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg5NDM3OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-local.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0OTo0M1rOFnFGkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo0OTo0M1rOFnFGkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyMjM4Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      `ROWTIME`, which corresponds with the Kafka message timestamp.\n          \n          \n            \n                      `ROWTIME`, which corresponds with the {{ site.ak }} message timestamp.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376522386", "createdAt": "2020-02-07T17:49:43Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-local.md", "diffHunk": "@@ -196,16 +221,14 @@ These examples query messages from Kafka topics called `pageviews` and\n \n     !!! tip\n           You can run `DESCRIBE pageviews_original;` to see the schema for the\n-          stream. Notice that KSQL created two additional columns, named\n-          `ROWTIME`, which corresponds with the Kafka message timestamp, and\n-          `ROWKEY`, which corresponds with the Kafka message key.\n+          stream. Notice that KSQL created an additional columns, named\n+          `ROWTIME`, which corresponds with the Kafka message timestamp.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg5NjYyOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-local.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1MDo0MFrOFnFIDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1MDo0MFrOFnFIDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyMjc2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      if Avro, and the DataGen tool publishes the Avro schema to the {{ site.sr }}.\n          \n          \n            \n                      is Avro, and the DataGen tool publishes the Avro schema to {{ site.sr }}.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376522766", "createdAt": "2020-02-07T17:50:40Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-local.md", "diffHunk": "@@ -217,6 +240,25 @@ These examples query messages from Kafka topics called `pageviews` and\n     ---------------\n     ```\n \n+    !!! note\n+          You may have noticed the CREATE TABLE did not define the set of columns\n+          like the CREATE STREAM statement did. This is because the value format\n+          if Avro, and the DataGen tool publishes the Avro schema to the {{ site.sr }}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODg5OTYwOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-local.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1MTozOFrOFnFJ6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1MTozOFrOFnFJ6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyMzI0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      ksqlDB retrieves the schema from the Schema Registry and uses this to build\n          \n          \n            \n                      ksqlDB retrieves the schema from {{ site.sr }} and uses this to build", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376523242", "createdAt": "2020-02-07T17:51:38Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-local.md", "diffHunk": "@@ -217,6 +240,25 @@ These examples query messages from Kafka topics called `pageviews` and\n     ---------------\n     ```\n \n+    !!! note\n+          You may have noticed the CREATE TABLE did not define the set of columns\n+          like the CREATE STREAM statement did. This is because the value format\n+          if Avro, and the DataGen tool publishes the Avro schema to the {{ site.sr }}.\n+          ksqlDB retrieves the schema from the Schema Registry and uses this to build", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODkwMTI3OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-local.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1MjoyM1rOFnFLFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1MjoyM1rOFnFLFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyMzU0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      The data generated has the same value in the Kafka record's key\n          \n          \n            \n                      The data generated has the same value in the {{ site.ak }} record's key", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376523542", "createdAt": "2020-02-07T17:52:23Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-local.md", "diffHunk": "@@ -217,6 +240,25 @@ These examples query messages from Kafka topics called `pageviews` and\n     ---------------\n     ```\n \n+    !!! note\n+          You may have noticed the CREATE TABLE did not define the set of columns\n+          like the CREATE STREAM statement did. This is because the value format\n+          if Avro, and the DataGen tool publishes the Avro schema to the {{ site.sr }}.\n+          ksqlDB retrieves the schema from the Schema Registry and uses this to build\n+          the SQL schema for the table. You may still provide the schema if you wish.\n+          Until [Github issue #4462](https://github.com/confluentinc/ksql/issues/4462)\n+          is complete, schema inference is only available where the key of the data\n+          is a STRING, as is the case here.\n+\n+    !!! note\n+          The data generated has the same value in the Kafka record's key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODkwNDM1OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-local.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1MzozM1rOFnFNBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1MzozM1rOFnFNBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNDAzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      as is in the userId field in the value. Specifying `key='userId'`\n          \n          \n            \n                      as the `userId` field in the value. Specifying `key='userId'`", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376524037", "createdAt": "2020-02-07T17:53:33Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-local.md", "diffHunk": "@@ -217,6 +240,25 @@ These examples query messages from Kafka topics called `pageviews` and\n     ---------------\n     ```\n \n+    !!! note\n+          You may have noticed the CREATE TABLE did not define the set of columns\n+          like the CREATE STREAM statement did. This is because the value format\n+          if Avro, and the DataGen tool publishes the Avro schema to the {{ site.sr }}.\n+          ksqlDB retrieves the schema from the Schema Registry and uses this to build\n+          the SQL schema for the table. You may still provide the schema if you wish.\n+          Until [Github issue #4462](https://github.com/confluentinc/ksql/issues/4462)\n+          is complete, schema inference is only available where the key of the data\n+          is a STRING, as is the case here.\n+\n+    !!! note\n+          The data generated has the same value in the Kafka record's key\n+          as is in the userId field in the value. Specifying `key='userId'`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODkwOTQzOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-local.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1NToyN1rOFnFQQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1NToyN1rOFnFQQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNDg2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      in the WITH clause above lets ksqlDB know this. This information\n          \n          \n            \n                      in the WITH clause above lets ksqlDB know this. ksqlDB uses this information", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376524866", "createdAt": "2020-02-07T17:55:27Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-local.md", "diffHunk": "@@ -217,6 +240,25 @@ These examples query messages from Kafka topics called `pageviews` and\n     ---------------\n     ```\n \n+    !!! note\n+          You may have noticed the CREATE TABLE did not define the set of columns\n+          like the CREATE STREAM statement did. This is because the value format\n+          if Avro, and the DataGen tool publishes the Avro schema to the {{ site.sr }}.\n+          ksqlDB retrieves the schema from the Schema Registry and uses this to build\n+          the SQL schema for the table. You may still provide the schema if you wish.\n+          Until [Github issue #4462](https://github.com/confluentinc/ksql/issues/4462)\n+          is complete, schema inference is only available where the key of the data\n+          is a STRING, as is the case here.\n+\n+    !!! note\n+          The data generated has the same value in the Kafka record's key\n+          as is in the userId field in the value. Specifying `key='userId'`\n+          in the WITH clause above lets ksqlDB know this. This information", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODkxMTI0OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-local.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1NjowNVrOFnFRVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1NjowNVrOFnFRVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNTE0Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      will be used later allow joins against the table to use the more\n          \n          \n            \n                      to allow joins against the table to use the more", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376525143", "createdAt": "2020-02-07T17:56:05Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-local.md", "diffHunk": "@@ -217,6 +240,25 @@ These examples query messages from Kafka topics called `pageviews` and\n     ---------------\n     ```\n \n+    !!! note\n+          You may have noticed the CREATE TABLE did not define the set of columns\n+          like the CREATE STREAM statement did. This is because the value format\n+          if Avro, and the DataGen tool publishes the Avro schema to the {{ site.sr }}.\n+          ksqlDB retrieves the schema from the Schema Registry and uses this to build\n+          the SQL schema for the table. You may still provide the schema if you wish.\n+          Until [Github issue #4462](https://github.com/confluentinc/ksql/issues/4462)\n+          is complete, schema inference is only available where the key of the data\n+          is a STRING, as is the case here.\n+\n+    !!! note\n+          The data generated has the same value in the Kafka record's key\n+          as is in the userId field in the value. Specifying `key='userId'`\n+          in the WITH clause above lets ksqlDB know this. This information\n+          will be used later allow joins against the table to use the more", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODkxMjk4OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-local.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1Njo0NFrOFnFSeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1Njo0NFrOFnFSeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNTQzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      on either will yield the same results. If your data does not\n          \n          \n            \n                      on either yields the same results. If your data doesn't", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376525434", "createdAt": "2020-02-07T17:56:44Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-local.md", "diffHunk": "@@ -217,6 +240,25 @@ These examples query messages from Kafka topics called `pageviews` and\n     ---------------\n     ```\n \n+    !!! note\n+          You may have noticed the CREATE TABLE did not define the set of columns\n+          like the CREATE STREAM statement did. This is because the value format\n+          if Avro, and the DataGen tool publishes the Avro schema to the {{ site.sr }}.\n+          ksqlDB retrieves the schema from the Schema Registry and uses this to build\n+          the SQL schema for the table. You may still provide the schema if you wish.\n+          Until [Github issue #4462](https://github.com/confluentinc/ksql/issues/4462)\n+          is complete, schema inference is only available where the key of the data\n+          is a STRING, as is the case here.\n+\n+    !!! note\n+          The data generated has the same value in the Kafka record's key\n+          as is in the userId field in the value. Specifying `key='userId'`\n+          in the WITH clause above lets ksqlDB know this. This information\n+          will be used later allow joins against the table to use the more\n+          descriptive `userId` column name, rather than `ROWKEY`. Joining\n+          on either will yield the same results. If your data does not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODkxNDY2OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-local.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1NzoyMlrOFnFTjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1NzoyMlrOFnFTjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNTcwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      contain a copy of the key in the value simply join on `ROWKEY`.\n          \n          \n            \n                      contain a copy of the key in the value, you can join on `ROWKEY`.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376525709", "createdAt": "2020-02-07T17:57:22Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-local.md", "diffHunk": "@@ -217,6 +240,25 @@ These examples query messages from Kafka topics called `pageviews` and\n     ---------------\n     ```\n \n+    !!! note\n+          You may have noticed the CREATE TABLE did not define the set of columns\n+          like the CREATE STREAM statement did. This is because the value format\n+          if Avro, and the DataGen tool publishes the Avro schema to the {{ site.sr }}.\n+          ksqlDB retrieves the schema from the Schema Registry and uses this to build\n+          the SQL schema for the table. You may still provide the schema if you wish.\n+          Until [Github issue #4462](https://github.com/confluentinc/ksql/issues/4462)\n+          is complete, schema inference is only available where the key of the data\n+          is a STRING, as is the case here.\n+\n+    !!! note\n+          The data generated has the same value in the Kafka record's key\n+          as is in the userId field in the value. Specifying `key='userId'`\n+          in the WITH clause above lets ksqlDB know this. This information\n+          will be used later allow joins against the table to use the more\n+          descriptive `userId` column name, rather than `ROWKEY`. Joining\n+          on either will yield the same results. If your data does not\n+          contain a copy of the key in the value simply join on `ROWKEY`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODkxNjYyOnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-local.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1ODowNlrOFnFU1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1ODowNlrOFnFU1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNjAzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                output? KsqlDB will append messages detailing any issues it\n          \n          \n            \n                output? ksqlDB appends messages that describe any issues it", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376526037", "createdAt": "2020-02-07T17:58:06Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-local.md", "diffHunk": "@@ -225,66 +267,149 @@ These examples query messages from Kafka topics called `pageviews` and\n     ```\n     ksql> SHOW STREAMS;\n \n-    Stream Name              | Kafka Topic              | Format\n-    -----------------------------------------------------------------\n-    PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+     Stream Name         | Kafka Topic                 | Format    \n+    ---------------------------------------------------------------\n+     KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+     PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+    ---------------------------------------------------------------\n \n     ksql> SHOW TABLES;\n \n-    Table Name        | Kafka Topic       | Format    | Windowed\n-    --------------------------------------------------------------\n-    USERS_ORIGINAL    | users             | JSON      | false\n+     Table Name     | Kafka Topic | Format | Windowed \n+    --------------------------------------------------\n+     USERS_ORIGINAL | users       | AVRO   | false    \n+    --------------------------------------------------\n     ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODkxODU3OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-local.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1ODo0NVrOFnFWDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1ODo0NVrOFnFWDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNjM1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                encountered while processing your data. If things are not working\n          \n          \n            \n                encountered while processing your data. If things aren't working", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376526351", "createdAt": "2020-02-07T17:58:45Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-local.md", "diffHunk": "@@ -225,66 +267,149 @@ These examples query messages from Kafka topics called `pageviews` and\n     ```\n     ksql> SHOW STREAMS;\n \n-    Stream Name              | Kafka Topic              | Format\n-    -----------------------------------------------------------------\n-    PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+     Stream Name         | Kafka Topic                 | Format    \n+    ---------------------------------------------------------------\n+     KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+     PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+    ---------------------------------------------------------------\n \n     ksql> SHOW TABLES;\n \n-    Table Name        | Kafka Topic       | Format    | Windowed\n-    --------------------------------------------------------------\n-    USERS_ORIGINAL    | users             | JSON      | false\n+     Table Name     | Kafka Topic | Format | Windowed \n+    --------------------------------------------------\n+     USERS_ORIGINAL | users       | AVRO   | false    \n+    --------------------------------------------------\n     ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODkyMDQ1OnYy", "diffSide": "RIGHT", "path": "docs-md/tutorials/basics-local.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1OToyNlrOFnFXLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzo1OToyNlrOFnFXLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUyNjYzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                as you expect it can be worth checking the contents of this stream\n          \n          \n            \n                as you expect, check the contents of this stream", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376526636", "createdAt": "2020-02-07T17:59:26Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/tutorials/basics-local.md", "diffHunk": "@@ -225,66 +267,149 @@ These examples query messages from Kafka topics called `pageviews` and\n     ```\n     ksql> SHOW STREAMS;\n \n-    Stream Name              | Kafka Topic              | Format\n-    -----------------------------------------------------------------\n-    PAGEVIEWS_ORIGINAL       | pageviews                | DELIMITED\n+     Stream Name         | Kafka Topic                 | Format    \n+    ---------------------------------------------------------------\n+     KSQL_PROCESSING_LOG | default_ksql_processing_log | JSON      \n+     PAGEVIEWS_ORIGINAL  | pageviews                   | DELIMITED \n+    ---------------------------------------------------------------\n \n     ksql> SHOW TABLES;\n \n-    Table Name        | Kafka Topic       | Format    | Windowed\n-    --------------------------------------------------------------\n-    USERS_ORIGINAL    | users             | JSON      | false\n+     Table Name     | Kafka Topic | Format | Windowed \n+    --------------------------------------------------\n+     USERS_ORIGINAL | users       | AVRO   | false    \n+    --------------------------------------------------\n     ```\n \n+!!! tip\n+    Notice the `KSQL_PROCESSING_LOG` stream listed in the SHOW STREAMS\n+    output? KsqlDB will append messages detailing any issues it\n+    encountered while processing your data. If things are not working\n+    as you expect it can be worth checking the contents of this stream", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fec77204c76b39cf294d9a39c0b05ca0334f9477"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODk3MjY2OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/joins/partition-data.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoxOToxNVrOFnF4Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTowNzoyMlrOFpPxlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzNTA5MQ==", "bodyText": "would be nice to clarify what this STRING is (or link to some documentation that clarifies it)", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376535091", "createdAt": "2020-02-07T18:19:15Z", "author": {"login": "agavra"}, "path": "docs-md/developer-guide/joins/partition-data.md", "diffHunk": "@@ -16,67 +16,70 @@ records based on the joining column. To ensure that records with the same\n join column are co-located on the same stream task, the join column must\n coincide with the column that the sources are partitioned by.\n \n-Primary key\n------------\n+Keys\n+----\n \n-A *primary key*, when present, defines the partitioning column. Tables are\n+A *key*, when present, defines the partitioning column. Tables are\n always partitioned by their primary key, and ksqlDB doesn't allow repartitioning\n of tables, so you can only use a table's primary key as a join column.\n \n Streams, on the other hand, may not have a defined key or may have a key that\n-differs from the join column. In these cases, ksqlDB repartitions the stream,\n-which implicitly defines a primary key for it. The primary keys for streams\n-and tables are of data type `VARCHAR`. \n+differs from the join column. In these cases, ksqlDB internally repartitions\n+the stream, which implicitly defines a key for it.\n \n-For primary keys to match, they must have the same serialization format. For\n-example, you can't join a `VARCHAR` key encoded as JSON with one encoded as\n-AVRO.\n-\n-!!! note\n-    ksqlDB requires that keys are encoded as UTF-8 strings.\n+ksqlDB requires keys to use the `KAFKA` format. For more information, see\n+[Serialization Formats](serialization.md#serialization-formats). If internally\n+repartitioning, ksqlDB uses the correct format.\n \n Because you can only use the primary key of a table as a joining column, it's\n important to understand how keys are defined. For both streams and tables, the\n-column that represents the primary key has the name `ROWKEY`.\n+column that represents the key has the name `ROWKEY`.\n \n When you create a table by using a CREATE TABLE statement, the key of the\n table is the same as that of the records in the underlying Kafka topic.\n+You must set the type of the `ROWKEY` column in the\n+CREATE TABLE statement to match the key data in the underlying {{ site.ak }} topic.\n \n When you create a table by using a CREATE TABLE AS SELECT statement, the key of\n the resulting table is determined as follows:\n \n-- If the FROM clause is a single source, and the source is a stream, the\n-  statement must have a GROUP BY clause, where the grouping columns determine\n-  the key of the resulting table.\n-- If the single source is a table, the key is copied over from the key of the\n-  table in the FROM clause. If the FROM clause is a join, the primary key of the\n-  resulting table is the joining column, since joins are allowed only on keys.\n-- If the statement contains a GROUP BY, the key of the resulting table\n-  comprises the grouping columns.\n-\n-When the primary key consists of multiple columns, like when it's created as\n-the result of a GROUP BY clause with multiple grouping columns, you must use\n-ROWKEY as the joining column. Even when the primary key consists of a single\n-column, we recommend using ROWKEY as the joining column to avoid confusion.\n-\n-The following example shows a `users` table joined with a `clicks` stream \n+- If the FROM clause contains a stream, the statement must have a GROUP BY clause,\n+  and the grouping columns determine the key of the resulting table.\n+    - When grouping by a single column or expression, the type of `ROWKEY` in the\n+    resulting stream matches the type of the column or expression.\n+    - When grouping by multiple columns or expressions, the type of `ROWKEY` in the\n+    resulting stream is a `STRING`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd88d5d2b20fdf04ee0e0637b0776db021e7d3f4"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc5NDM5MA==", "bodyText": "Will be done in next PR!", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r378794390", "createdAt": "2020-02-13T11:07:22Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/joins/partition-data.md", "diffHunk": "@@ -16,67 +16,70 @@ records based on the joining column. To ensure that records with the same\n join column are co-located on the same stream task, the join column must\n coincide with the column that the sources are partitioned by.\n \n-Primary key\n------------\n+Keys\n+----\n \n-A *primary key*, when present, defines the partitioning column. Tables are\n+A *key*, when present, defines the partitioning column. Tables are\n always partitioned by their primary key, and ksqlDB doesn't allow repartitioning\n of tables, so you can only use a table's primary key as a join column.\n \n Streams, on the other hand, may not have a defined key or may have a key that\n-differs from the join column. In these cases, ksqlDB repartitions the stream,\n-which implicitly defines a primary key for it. The primary keys for streams\n-and tables are of data type `VARCHAR`. \n+differs from the join column. In these cases, ksqlDB internally repartitions\n+the stream, which implicitly defines a key for it.\n \n-For primary keys to match, they must have the same serialization format. For\n-example, you can't join a `VARCHAR` key encoded as JSON with one encoded as\n-AVRO.\n-\n-!!! note\n-    ksqlDB requires that keys are encoded as UTF-8 strings.\n+ksqlDB requires keys to use the `KAFKA` format. For more information, see\n+[Serialization Formats](serialization.md#serialization-formats). If internally\n+repartitioning, ksqlDB uses the correct format.\n \n Because you can only use the primary key of a table as a joining column, it's\n important to understand how keys are defined. For both streams and tables, the\n-column that represents the primary key has the name `ROWKEY`.\n+column that represents the key has the name `ROWKEY`.\n \n When you create a table by using a CREATE TABLE statement, the key of the\n table is the same as that of the records in the underlying Kafka topic.\n+You must set the type of the `ROWKEY` column in the\n+CREATE TABLE statement to match the key data in the underlying {{ site.ak }} topic.\n \n When you create a table by using a CREATE TABLE AS SELECT statement, the key of\n the resulting table is determined as follows:\n \n-- If the FROM clause is a single source, and the source is a stream, the\n-  statement must have a GROUP BY clause, where the grouping columns determine\n-  the key of the resulting table.\n-- If the single source is a table, the key is copied over from the key of the\n-  table in the FROM clause. If the FROM clause is a join, the primary key of the\n-  resulting table is the joining column, since joins are allowed only on keys.\n-- If the statement contains a GROUP BY, the key of the resulting table\n-  comprises the grouping columns.\n-\n-When the primary key consists of multiple columns, like when it's created as\n-the result of a GROUP BY clause with multiple grouping columns, you must use\n-ROWKEY as the joining column. Even when the primary key consists of a single\n-column, we recommend using ROWKEY as the joining column to avoid confusion.\n-\n-The following example shows a `users` table joined with a `clicks` stream \n+- If the FROM clause contains a stream, the statement must have a GROUP BY clause,\n+  and the grouping columns determine the key of the resulting table.\n+    - When grouping by a single column or expression, the type of `ROWKEY` in the\n+    resulting stream matches the type of the column or expression.\n+    - When grouping by multiple columns or expressions, the type of `ROWKEY` in the\n+    resulting stream is a `STRING`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzNTA5MQ=="}, "originalCommit": {"oid": "bd88d5d2b20fdf04ee0e0637b0776db021e7d3f4"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODk4MzMwOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/joins/partition-data.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoyMjozNVrOFnF-kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTowNzoxNFrOFpPxWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzNjcyMg==", "bodyText": "I think it would be good to have the example above explicitly name userID as the KEY - I know this isn't necessary for the example, but I think it's good to have an example of a stream with a key declared using the KEY syntax", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376536722", "createdAt": "2020-02-07T18:22:35Z", "author": {"login": "agavra"}, "path": "docs-md/developer-guide/joins/partition-data.md", "diffHunk": "@@ -98,26 +101,35 @@ When your inputs are co-partitioned, records with the same key, from\n both sides of the join, are delivered to the same stream task during\n processing.\n \n-### Records Have the Same Keying Scheme\n+### Records Have the Same Keying Schema\n \n-For a join to work, the keys from both sides must have the same serialized\n-binary data.\n+For a join to work, the keys from both sides must have the same SQL type.\n \n For example, you can join a stream of user clicks that's keyed on a `VARCHAR`\n user id with a table of user profiles that's also keyed on a `VARCHAR` user id.\n Records with the exact same user id on both sides will be joined.\n \n-ksqlDB requires that keys are UTF-8 encoded strings.\n+If the schema of the columns you wish to join on don't match, it may be possible\n+to `CAST` one side to match the other. For example, if one side of the join\n+had a `INT` userId column, and the other a `LONG`, then you may choose to cast\n+the `INT` side to a `LONG`:\n+\n+```sql\n+    -- stream with INT userId\n+    CREATE STREAM clicks (userId INT, url STRING) WITH(kafka_topic='clickstream', value_format='json');\n+\n+    -- table with BIGINT userId stored in they key:\n+    CREATE TABLE  users  (ROWKEY BIGINT KEY, fullName STRING) WITH(kafka_topic='users', value_format='json');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd88d5d2b20fdf04ee0e0637b0776db021e7d3f4"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc5NDMyOA==", "bodyText": "I've deliberately not added the WITH KEY bit as its not required. The example only has what's needed.  Adding additional stuff if just noise IMHO and can lead to confusion.\nPlus I intend to drop the whole WITH KEY thing soon.\nSo do you mind if we leave this as it is?", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r378794328", "createdAt": "2020-02-13T11:07:14Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/joins/partition-data.md", "diffHunk": "@@ -98,26 +101,35 @@ When your inputs are co-partitioned, records with the same key, from\n both sides of the join, are delivered to the same stream task during\n processing.\n \n-### Records Have the Same Keying Scheme\n+### Records Have the Same Keying Schema\n \n-For a join to work, the keys from both sides must have the same serialized\n-binary data.\n+For a join to work, the keys from both sides must have the same SQL type.\n \n For example, you can join a stream of user clicks that's keyed on a `VARCHAR`\n user id with a table of user profiles that's also keyed on a `VARCHAR` user id.\n Records with the exact same user id on both sides will be joined.\n \n-ksqlDB requires that keys are UTF-8 encoded strings.\n+If the schema of the columns you wish to join on don't match, it may be possible\n+to `CAST` one side to match the other. For example, if one side of the join\n+had a `INT` userId column, and the other a `LONG`, then you may choose to cast\n+the `INT` side to a `LONG`:\n+\n+```sql\n+    -- stream with INT userId\n+    CREATE STREAM clicks (userId INT, url STRING) WITH(kafka_topic='clickstream', value_format='json');\n+\n+    -- table with BIGINT userId stored in they key:\n+    CREATE TABLE  users  (ROWKEY BIGINT KEY, fullName STRING) WITH(kafka_topic='users', value_format='json');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzNjcyMg=="}, "originalCommit": {"oid": "bd88d5d2b20fdf04ee0e0637b0776db021e7d3f4"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODk4ODQ2OnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/select-push-query.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoyNDoxM1rOFnGByA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTowODoyNFrOFpPzbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzNzU0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            including the system columns `ROWTIME` and `ROWKEY`.\n          \n          \n            \n            including the `ROWTIME` and `ROWKEY` system columns .", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376537544", "createdAt": "2020-02-07T18:24:13Z", "author": {"login": "agavra"}, "path": "docs-md/developer-guide/ksqldb-reference/select-push-query.md", "diffHunk": "@@ -48,7 +48,7 @@ In the previous statements, `from_item` is one of the following:\n -   `from_item LEFT JOIN from_item ON join_condition`\r\n \r\n The WHERE clause can refer to any column defined for a stream or table,\r\n-including the two implicit columns `ROWTIME` and `ROWKEY`.\r\n+including the system columns `ROWTIME` and `ROWKEY`.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd88d5d2b20fdf04ee0e0637b0776db021e7d3f4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc5NDg2MA==", "bodyText": "Coming in the next PR.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r378794860", "createdAt": "2020-02-13T11:08:24Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/ksqldb-reference/select-push-query.md", "diffHunk": "@@ -48,7 +48,7 @@ In the previous statements, `from_item` is one of the following:\n -   `from_item LEFT JOIN from_item ON join_condition`\r\n \r\n The WHERE clause can refer to any column defined for a stream or table,\r\n-including the two implicit columns `ROWTIME` and `ROWKEY`.\r\n+including the system columns `ROWTIME` and `ROWKEY`.\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzNzU0NA=="}, "originalCommit": {"oid": "bd88d5d2b20fdf04ee0e0637b0776db021e7d3f4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODk4OTkyOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/ksqldb-reference/select-push-query.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoyNDo0NFrOFnGCrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTowODo0NVrOFpP0Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzNzc3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            KsqlDB supports the following WINDOW types.\n          \n          \n            \n            KsqlDB supports the following WINDOW types:", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376537772", "createdAt": "2020-02-07T18:24:44Z", "author": {"login": "agavra"}, "path": "docs-md/developer-guide/ksqldb-reference/select-push-query.md", "diffHunk": "@@ -109,8 +109,12 @@ SET 'auto.offset.reset' = 'earliest';\n \r\n The WINDOW clause lets you control how to group input records *that have\r\n the same key* into so-called *windows* for operations like aggregations\r\n-or joins. Windows are tracked per record key. ksqlDB supports the following\r\n-WINDOW types.\r\n+or joins. Windows are tracked per record key.\r\n+\r\n+Windowing adds two additional system columns to the data, which provide\r\n+the window bounds: `WINDOWSTART` and `WINDOWEND`.\r\n+\r\n+KsqlDB supports the following WINDOW types.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd88d5d2b20fdf04ee0e0637b0776db021e7d3f4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc5NTA2Ng==", "bodyText": "Coming in the next PR", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r378795066", "createdAt": "2020-02-13T11:08:45Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/ksqldb-reference/select-push-query.md", "diffHunk": "@@ -109,8 +109,12 @@ SET 'auto.offset.reset' = 'earliest';\n \r\n The WINDOW clause lets you control how to group input records *that have\r\n the same key* into so-called *windows* for operations like aggregations\r\n-or joins. Windows are tracked per record key. ksqlDB supports the following\r\n-WINDOW types.\r\n+or joins. Windows are tracked per record key.\r\n+\r\n+Windowing adds two additional system columns to the data, which provide\r\n+the window bounds: `WINDOWSTART` and `WINDOWEND`.\r\n+\r\n+KsqlDB supports the following WINDOW types.\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzNzc3Mg=="}, "originalCommit": {"oid": "bd88d5d2b20fdf04ee0e0637b0776db021e7d3f4"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODk5ODAxOnYy", "diffSide": "RIGHT", "path": "docs-md/developer-guide/syntax-reference.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoyNzoyN1rOFnGHdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMToxMDo1M1rOFpP3_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzODk5Ng==", "bodyText": "all the examples have added ROWKEY <TYPE> KEY - is this now a requirement or is it just illustrative?", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376538996", "createdAt": "2020-02-07T18:27:27Z", "author": {"login": "agavra"}, "path": "docs-md/developer-guide/syntax-reference.md", "diffHunk": "@@ -398,14 +398,16 @@ message key by setting the `KEY` property of the `WITH` clause.\n Example:\n \n ```sql\n-CREATE TABLE users (registertime BIGINT, gender VARCHAR, regionid VARCHAR, userid VARCHAR)\n+CREATE TABLE users (rowkey INT KEY, registertime BIGINT, gender VARCHAR, regionid VARCHAR, userid INT)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd88d5d2b20fdf04ee0e0637b0776db021e7d3f4"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc5NjAzMA==", "bodyText": "It's not currently required. If you don't add one KSQL currently defaults to ROWKEY STRING KEY.  However, we should encourage people to be explicit, rather than rely on implicit.\nI've not documented this yet as its a bit meh.  Ideally, if you don't supply the key column it should mean there is no key column.  We can update the docs when this is the case.", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r378796030", "createdAt": "2020-02-13T11:10:53Z", "author": {"login": "big-andy-coates"}, "path": "docs-md/developer-guide/syntax-reference.md", "diffHunk": "@@ -398,14 +398,16 @@ message key by setting the `KEY` property of the `WITH` clause.\n Example:\n \n ```sql\n-CREATE TABLE users (registertime BIGINT, gender VARCHAR, regionid VARCHAR, userid VARCHAR)\n+CREATE TABLE users (rowkey INT KEY, registertime BIGINT, gender VARCHAR, regionid VARCHAR, userid INT)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzODk5Ng=="}, "originalCommit": {"oid": "bd88d5d2b20fdf04ee0e0637b0776db021e7d3f4"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyOTAwMTM4OnYy", "diffSide": "RIGHT", "path": "ksql-benchmark/src/main/java/io/confluent/ksql/benchmark/SerdeBenchmark.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxODoyODozM1rOFnGJkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMToxMToxMlrOFpP4sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzOTUzNg==", "bodyText": "sneaky! code changes in a docs pr \ud83d\ude1b", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r376539536", "createdAt": "2020-02-07T18:28:33Z", "author": {"login": "agavra"}, "path": "ksql-benchmark/src/main/java/io/confluent/ksql/benchmark/SerdeBenchmark.java", "diffHunk": "@@ -98,7 +98,7 @@ public void setUp() throws Exception {\n \n       final Pair<Struct, GenericRow> genericRowPair = rowGenerator.generateRow();\n       row = genericRowPair.getRight();\n-      schema = rowGenerator.schema().valueConnectSchema();\n+      schema = rowGenerator.valueSchema();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd88d5d2b20fdf04ee0e0637b0776db021e7d3f4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc5NjIxMA==", "bodyText": "Big brother is watching!", "url": "https://github.com/confluentinc/ksql/pull/4478#discussion_r378796210", "createdAt": "2020-02-13T11:11:12Z", "author": {"login": "big-andy-coates"}, "path": "ksql-benchmark/src/main/java/io/confluent/ksql/benchmark/SerdeBenchmark.java", "diffHunk": "@@ -98,7 +98,7 @@ public void setUp() throws Exception {\n \n       final Pair<Struct, GenericRow> genericRowPair = rowGenerator.generateRow();\n       row = genericRowPair.getRight();\n-      schema = rowGenerator.schema().valueConnectSchema();\n+      schema = rowGenerator.valueSchema();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUzOTUzNg=="}, "originalCommit": {"oid": "bd88d5d2b20fdf04ee0e0637b0776db021e7d3f4"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2115, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}