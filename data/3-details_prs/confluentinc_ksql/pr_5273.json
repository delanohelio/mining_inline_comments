{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNjcyNzk5", "number": 5273, "title": "feat: implement earliest_by_offset() UDAF", "bodyText": "Description\nFixes #5268\nImplements earliest_by_offset() UDAF which computes the earliest value for a column. Earliest being defined as offset order.\nNote for the reviewer:\n\nThe implementation is taken from the latest_by_offset() code #4782, and modified to return the earliest offset. Expect similar concerns and questions commented in the mentioned PR.\n\nTesting done\nAdded new unit test and QTT test\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-05-05T18:10:50Z", "url": "https://github.com/confluentinc/ksql/pull/5273", "merged": true, "mergeCommit": {"oid": "bc17046f1e71f80e4c17b67496acea92d702917f"}, "closed": true, "closedAt": "2020-05-14T02:14:27Z", "author": {"login": "spena"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceYS_6gFqTQwNjA0NDM2Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABchye6WAFqTQxMzA1OTQ0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDQ0MzYz", "url": "https://github.com/confluentinc/ksql/pull/5273#pullrequestreview-406044363", "createdAt": "2020-05-05T18:22:17Z", "commit": {"oid": "6fe5b470e91567bf3a4cfb5d57d825589a152352"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDQ0NTkz", "url": "https://github.com/confluentinc/ksql/pull/5273#pullrequestreview-406044593", "createdAt": "2020-05-05T18:22:40Z", "commit": {"oid": "6fe5b470e91567bf3a4cfb5d57d825589a152352"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyMjo0MFrOGQ2CcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyMjo0MFrOGQ2CcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNTc2MQ==", "bodyText": "Please add a link to the TOC at the top of the page. Thanks!", "url": "https://github.com/confluentinc/ksql/pull/5273#discussion_r420315761", "createdAt": "2020-05-05T18:22:40Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/ksqldb-reference/aggregate-functions.md", "diffHunk": "@@ -100,6 +100,16 @@ Returns the _approximate_ number of unique values of `col1` in a group.\n The function implementation uses [HyperLogLog](https://en.wikipedia.org/wiki/HyperLogLog)\r\n to estimate cardinalities of 10^9 with a typical standard error of 2%.\r\n \r\n+EARLIEST_BY_OFFSET\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fe5b470e91567bf3a4cfb5d57d825589a152352"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6fe5b470e91567bf3a4cfb5d57d825589a152352", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/6fe5b470e91567bf3a4cfb5d57d825589a152352", "committedDate": "2020-05-05T18:05:55Z", "message": "feat: implement earliest_by_offset() UDAF"}, "afterCommit": {"oid": "07cecf73948423c8fe4a684c75157a96995ae639", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/07cecf73948423c8fe4a684c75157a96995ae639", "committedDate": "2020-05-08T14:22:30Z", "message": "docs: add link at top of aggregate-functions.md"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07cecf73948423c8fe4a684c75157a96995ae639", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/07cecf73948423c8fe4a684c75157a96995ae639", "committedDate": "2020-05-08T14:22:30Z", "message": "docs: add link at top of aggregate-functions.md"}, "afterCommit": {"oid": "cf2d84672c2d1d291b4b7b8a2e3ba00588acb33e", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/cf2d84672c2d1d291b4b7b8a2e3ba00588acb33e", "committedDate": "2020-05-11T14:53:51Z", "message": "docs: add link at top of aggregate-functions.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTE2NDE0", "url": "https://github.com/confluentinc/ksql/pull/5273#pullrequestreview-410116414", "createdAt": "2020-05-12T14:44:00Z", "commit": {"oid": "cf2d84672c2d1d291b4b7b8a2e3ba00588acb33e"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDo0NDowMVrOGUKLpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDo0NjoxMVrOGUKSqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5MTUyNA==", "bodyText": "All these constants look the same as the ones in LatestbyOffset. It would be nice to move them to another shared file instead of duplicating them.", "url": "https://github.com/confluentinc/ksql/pull/5273#discussion_r423791524", "createdAt": "2020-05-12T14:44:01Z", "author": {"login": "purplefox"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/earliest/EarliestByOffset.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udaf.earliest;\n+\n+import io.confluent.ksql.function.udaf.Udaf;\n+import io.confluent.ksql.function.udaf.UdafDescription;\n+import io.confluent.ksql.function.udaf.UdafFactory;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.SchemaBuilder;\n+import org.apache.kafka.connect.data.Struct;\n+\n+@UdafDescription(\n+    name = \"EARLIEST_BY_OFFSET\",\n+    description = EarliestByOffset.DESCRIPTION\n+)\n+public final class EarliestByOffset {\n+  static final String DESCRIPTION =\n+      \"This function returns the oldest value for the column, computed by offset.\";\n+\n+  private EarliestByOffset() {\n+  }\n+\n+  static final String SEQ_FIELD = \"SEQ\";\n+  static final String VAL_FIELD = \"VAL\";\n+\n+  public static final Schema STRUCT_INTEGER = SchemaBuilder.struct().optional()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2d84672c2d1d291b4b7b8a2e3ba00588acb33e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5MjI0MA==", "bodyText": "This could go in a common base class instead of duplicating (or a utils class)", "url": "https://github.com/confluentinc/ksql/pull/5273#discussion_r423792240", "createdAt": "2020-05-12T14:44:56Z", "author": {"login": "purplefox"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/earliest/EarliestByOffset.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udaf.earliest;\n+\n+import io.confluent.ksql.function.udaf.Udaf;\n+import io.confluent.ksql.function.udaf.UdafDescription;\n+import io.confluent.ksql.function.udaf.UdafFactory;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.SchemaBuilder;\n+import org.apache.kafka.connect.data.Struct;\n+\n+@UdafDescription(\n+    name = \"EARLIEST_BY_OFFSET\",\n+    description = EarliestByOffset.DESCRIPTION\n+)\n+public final class EarliestByOffset {\n+  static final String DESCRIPTION =\n+      \"This function returns the oldest value for the column, computed by offset.\";\n+\n+  private EarliestByOffset() {\n+  }\n+\n+  static final String SEQ_FIELD = \"SEQ\";\n+  static final String VAL_FIELD = \"VAL\";\n+\n+  public static final Schema STRUCT_INTEGER = SchemaBuilder.struct().optional()\n+      .field(SEQ_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .field(VAL_FIELD, Schema.OPTIONAL_INT32_SCHEMA)\n+      .build();\n+\n+  public static final Schema STRUCT_LONG = SchemaBuilder.struct().optional()\n+      .field(SEQ_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .field(VAL_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .build();\n+\n+  public static final Schema STRUCT_DOUBLE = SchemaBuilder.struct().optional()\n+      .field(SEQ_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .field(VAL_FIELD, Schema.OPTIONAL_FLOAT64_SCHEMA)\n+      .build();\n+\n+  public static final Schema STRUCT_BOOLEAN = SchemaBuilder.struct().optional()\n+      .field(SEQ_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .field(VAL_FIELD, Schema.OPTIONAL_BOOLEAN_SCHEMA)\n+      .build();\n+\n+  public static final Schema STRUCT_STRING = SchemaBuilder.struct().optional()\n+      .field(SEQ_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .field(VAL_FIELD, Schema.OPTIONAL_STRING_SCHEMA)\n+      .build();\n+\n+  static AtomicLong sequence = new AtomicLong();\n+\n+  @UdafFactory(description = \"return the earliest value of an integer column\",\n+      aggregateSchema = \"STRUCT<SEQ BIGINT, VAL INT>\")\n+  public static Udaf<Integer, Struct, Integer> earliestInteger() {\n+    return earliest(STRUCT_INTEGER);\n+  }\n+\n+  @UdafFactory(description = \"return the earliest value of an big integer column\",\n+      aggregateSchema = \"STRUCT<SEQ BIGINT, VAL BIGINT>\")\n+  public static Udaf<Long, Struct, Long> earliestLong() {\n+    return earliest(STRUCT_LONG);\n+  }\n+\n+  @UdafFactory(description = \"return the earliest value of a double column\",\n+      aggregateSchema = \"STRUCT<SEQ BIGINT, VAL DOUBLE>\")\n+  public static Udaf<Double, Struct, Double> earliestDouble() {\n+    return earliest(STRUCT_DOUBLE);\n+  }\n+\n+  @UdafFactory(description = \"return the earliest value of a boolean column\",\n+      aggregateSchema = \"STRUCT<SEQ BIGINT, VAL BOOLEAN>\")\n+  public static Udaf<Boolean, Struct, Boolean> earliestBoolean() {\n+    return earliest(STRUCT_BOOLEAN);\n+  }\n+\n+  @UdafFactory(description = \"return the earliest value of a string column\",\n+      aggregateSchema = \"STRUCT<SEQ BIGINT, VAL STRING>\")\n+  public static Udaf<String, Struct, String> earliestString() {\n+    return earliest(STRUCT_STRING);\n+  }\n+\n+  static <T> Struct createStruct(final Schema schema, final T val) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2d84672c2d1d291b4b7b8a2e3ba00588acb33e"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5MzMyMA==", "bodyText": "This could go in common class too.", "url": "https://github.com/confluentinc/ksql/pull/5273#discussion_r423793320", "createdAt": "2020-05-12T14:46:11Z", "author": {"login": "purplefox"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/earliest/EarliestByOffset.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udaf.earliest;\n+\n+import io.confluent.ksql.function.udaf.Udaf;\n+import io.confluent.ksql.function.udaf.UdafDescription;\n+import io.confluent.ksql.function.udaf.UdafFactory;\n+import java.util.concurrent.atomic.AtomicLong;\n+import org.apache.kafka.connect.data.Schema;\n+import org.apache.kafka.connect.data.SchemaBuilder;\n+import org.apache.kafka.connect.data.Struct;\n+\n+@UdafDescription(\n+    name = \"EARLIEST_BY_OFFSET\",\n+    description = EarliestByOffset.DESCRIPTION\n+)\n+public final class EarliestByOffset {\n+  static final String DESCRIPTION =\n+      \"This function returns the oldest value for the column, computed by offset.\";\n+\n+  private EarliestByOffset() {\n+  }\n+\n+  static final String SEQ_FIELD = \"SEQ\";\n+  static final String VAL_FIELD = \"VAL\";\n+\n+  public static final Schema STRUCT_INTEGER = SchemaBuilder.struct().optional()\n+      .field(SEQ_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .field(VAL_FIELD, Schema.OPTIONAL_INT32_SCHEMA)\n+      .build();\n+\n+  public static final Schema STRUCT_LONG = SchemaBuilder.struct().optional()\n+      .field(SEQ_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .field(VAL_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .build();\n+\n+  public static final Schema STRUCT_DOUBLE = SchemaBuilder.struct().optional()\n+      .field(SEQ_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .field(VAL_FIELD, Schema.OPTIONAL_FLOAT64_SCHEMA)\n+      .build();\n+\n+  public static final Schema STRUCT_BOOLEAN = SchemaBuilder.struct().optional()\n+      .field(SEQ_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .field(VAL_FIELD, Schema.OPTIONAL_BOOLEAN_SCHEMA)\n+      .build();\n+\n+  public static final Schema STRUCT_STRING = SchemaBuilder.struct().optional()\n+      .field(SEQ_FIELD, Schema.OPTIONAL_INT64_SCHEMA)\n+      .field(VAL_FIELD, Schema.OPTIONAL_STRING_SCHEMA)\n+      .build();\n+\n+  static AtomicLong sequence = new AtomicLong();\n+\n+  @UdafFactory(description = \"return the earliest value of an integer column\",\n+      aggregateSchema = \"STRUCT<SEQ BIGINT, VAL INT>\")\n+  public static Udaf<Integer, Struct, Integer> earliestInteger() {\n+    return earliest(STRUCT_INTEGER);\n+  }\n+\n+  @UdafFactory(description = \"return the earliest value of an big integer column\",\n+      aggregateSchema = \"STRUCT<SEQ BIGINT, VAL BIGINT>\")\n+  public static Udaf<Long, Struct, Long> earliestLong() {\n+    return earliest(STRUCT_LONG);\n+  }\n+\n+  @UdafFactory(description = \"return the earliest value of a double column\",\n+      aggregateSchema = \"STRUCT<SEQ BIGINT, VAL DOUBLE>\")\n+  public static Udaf<Double, Struct, Double> earliestDouble() {\n+    return earliest(STRUCT_DOUBLE);\n+  }\n+\n+  @UdafFactory(description = \"return the earliest value of a boolean column\",\n+      aggregateSchema = \"STRUCT<SEQ BIGINT, VAL BOOLEAN>\")\n+  public static Udaf<Boolean, Struct, Boolean> earliestBoolean() {\n+    return earliest(STRUCT_BOOLEAN);\n+  }\n+\n+  @UdafFactory(description = \"return the earliest value of a string column\",\n+      aggregateSchema = \"STRUCT<SEQ BIGINT, VAL STRING>\")\n+  public static Udaf<String, Struct, String> earliestString() {\n+    return earliest(STRUCT_STRING);\n+  }\n+\n+  static <T> Struct createStruct(final Schema schema, final T val) {\n+    final Struct struct = new Struct(schema);\n+    struct.put(SEQ_FIELD, generateSequence());\n+    struct.put(VAL_FIELD, val);\n+    return struct;\n+  }\n+\n+  private static long generateSequence() {\n+    return sequence.getAndIncrement();\n+  }\n+\n+  private static int compareStructs(final Struct struct1, final Struct struct2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf2d84672c2d1d291b4b7b8a2e3ba00588acb33e"}, "originalPosition": 108}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf2d84672c2d1d291b4b7b8a2e3ba00588acb33e", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/cf2d84672c2d1d291b4b7b8a2e3ba00588acb33e", "committedDate": "2020-05-11T14:53:51Z", "message": "docs: add link at top of aggregate-functions.md"}, "afterCommit": {"oid": "4a7a99bf69a5a05539372a95ed9d4d80c23ed980", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/4a7a99bf69a5a05539372a95ed9d4d80c23ed980", "committedDate": "2020-05-12T17:09:31Z", "message": "chore: update tests with latest rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a9b4417eabda686eaedee287d23b74a87541971", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/9a9b4417eabda686eaedee287d23b74a87541971", "committedDate": "2020-05-13T21:46:26Z", "message": "feat: implement earliest_by_offset() UDAF"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a40127856591a27916cdd7f41e4a8e857ea3516d", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/a40127856591a27916cdd7f41e4a8e857ea3516d", "committedDate": "2020-05-13T21:46:26Z", "message": "docs: add link at top of aggregate-functions.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7676b428e66362a798eede8014583e09b868b5d", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/c7676b428e66362a798eede8014583e09b868b5d", "committedDate": "2020-05-13T21:46:26Z", "message": "chore: update tests with latest rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1517c0623de35a3c564391ee81655496a1a2a727", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/1517c0623de35a3c564391ee81655496a1a2a727", "committedDate": "2020-05-13T22:14:06Z", "message": "chore: move common variables to a utils class"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a7a99bf69a5a05539372a95ed9d4d80c23ed980", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/4a7a99bf69a5a05539372a95ed9d4d80c23ed980", "committedDate": "2020-05-12T17:09:31Z", "message": "chore: update tests with latest rebase"}, "afterCommit": {"oid": "1517c0623de35a3c564391ee81655496a1a2a727", "author": {"user": {"login": "spena", "name": "Sergio Pe\u00f1a"}}, "url": "https://github.com/confluentinc/ksql/commit/1517c0623de35a3c564391ee81655496a1a2a727", "committedDate": "2020-05-13T22:14:06Z", "message": "chore: move common variables to a utils class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDU5NDQw", "url": "https://github.com/confluentinc/ksql/pull/5273#pullrequestreview-413059440", "createdAt": "2020-05-16T08:34:36Z", "commit": {"oid": "1517c0623de35a3c564391ee81655496a1a2a727"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwODozNDozNlrOGWZF4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwODozNDozNlrOGWZF4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEzMjk2MA==", "bodyText": "Imho we should create a directory and put both udafs and this file in the same package. That way it can be package protected.", "url": "https://github.com/confluentinc/ksql/pull/5273#discussion_r426132960", "createdAt": "2020-05-16T08:34:36Z", "author": {"login": "purplefox"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/function/udaf/KudafByOffsetUtils.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"; you may not use\n+ * this file except in compliance with the License. You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.function.udaf;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1517c0623de35a3c564391ee81655496a1a2a727"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4821, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}