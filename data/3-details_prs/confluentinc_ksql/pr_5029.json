{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwOTY3MjQw", "number": 5029, "title": "feat: add KsqlQueryStatus to decouple from KafkaStreams.State", "bodyText": "Description\nFollow up to #4875\nHosts that don't respond in the scatter gather have an UNRESPONSIVE query state assigned to them instead of ignoring them in the results of Show Query\nAdded a KsqlQueryStatus enum and updated some classes to use that. Changed mentions of state to status in several places.\nKsqlEngineMetrics is still emitting the KafkaStreams State for now.\nTesting done\nMore unit tests\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-04-08T16:57:04Z", "url": "https://github.com/confluentinc/ksql/pull/5029", "merged": true, "mergeCommit": {"oid": "e8cbcde548e1f3078b1396173a3f55f86ee20626"}, "closed": true, "closedAt": "2020-04-10T18:23:09Z", "author": {"login": "stevenpyzhang"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVtBfhgBqjMyMTU1MTk2Nzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXjxMYgFqTM5Mjk0MjI3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a9c15f7a715b5afbbe21bbf826f68858d7da6cb1", "author": {"user": {"login": "stevenpyzhang", "name": "Steven Zhang"}}, "url": "https://github.com/confluentinc/ksql/commit/a9c15f7a715b5afbbe21bbf826f68858d7da6cb1", "committedDate": "2020-04-08T16:56:48Z", "message": "feat: add KsqlQueryState to decouple from KafkaStreams.State"}, "afterCommit": {"oid": "89c2492ad6b3dad3e7270ff4a40de473d9b5d40b", "author": {"user": {"login": "stevenpyzhang", "name": "Steven Zhang"}}, "url": "https://github.com/confluentinc/ksql/commit/89c2492ad6b3dad3e7270ff4a40de473d9b5d40b", "committedDate": "2020-04-08T19:25:45Z", "message": "feat: add KsqlQueryState to decouple from KafkaStreams.State"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "89c2492ad6b3dad3e7270ff4a40de473d9b5d40b", "author": {"user": {"login": "stevenpyzhang", "name": "Steven Zhang"}}, "url": "https://github.com/confluentinc/ksql/commit/89c2492ad6b3dad3e7270ff4a40de473d9b5d40b", "committedDate": "2020-04-08T19:25:45Z", "message": "feat: add KsqlQueryState to decouple from KafkaStreams.State"}, "afterCommit": {"oid": "f42c11bae1c6980533d46e860a4a1d51424d9638", "author": {"user": {"login": "stevenpyzhang", "name": "Steven Zhang"}}, "url": "https://github.com/confluentinc/ksql/commit/f42c11bae1c6980533d46e860a4a1d51424d9638", "committedDate": "2020-04-08T21:06:18Z", "message": "feat: add KsqlQueryState to decouple from KafkaStreams.State"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f42c11bae1c6980533d46e860a4a1d51424d9638", "author": {"user": {"login": "stevenpyzhang", "name": "Steven Zhang"}}, "url": "https://github.com/confluentinc/ksql/commit/f42c11bae1c6980533d46e860a4a1d51424d9638", "committedDate": "2020-04-08T21:06:18Z", "message": "feat: add KsqlQueryState to decouple from KafkaStreams.State"}, "afterCommit": {"oid": "e34a12743792dc0963b702acd25a0e31ad456f83", "author": {"user": {"login": "stevenpyzhang", "name": "Steven Zhang"}}, "url": "https://github.com/confluentinc/ksql/commit/e34a12743792dc0963b702acd25a0e31ad456f83", "committedDate": "2020-04-08T22:49:19Z", "message": "feat: add KsqlQueryState to decouple from KafkaStreams.State"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODk0MDcz", "url": "https://github.com/confluentinc/ksql/pull/5029#pullrequestreview-390894073", "createdAt": "2020-04-09T15:23:24Z", "commit": {"oid": "e34a12743792dc0963b702acd25a0e31ad456f83"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToyMzoyNVrOGDdpfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToyMzoyNVrOGDdpfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4NDY3MA==", "bodyText": "Suggest a bullet list:\n\nRUNNING: the query was either started recently or has been running without errors.\nERROR: the query has entered an error state.\nUNRESPONSIVE: the host running the query returned an error when the query status was requested.", "url": "https://github.com/confluentinc/ksql/pull/5029#discussion_r406284670", "createdAt": "2020-04-09T15:23:25Z", "author": {"login": "JimGalasyn"}, "path": "docs-md/developer-guide/ksqldb-reference/show-queries.md", "diffHunk": "@@ -23,6 +23,15 @@ Description\n \r\n `SHOW QUERIES EXTENDED` lists queries running in the cluster in more detail.\r\n \r\n+Query Status\r\n+-----------\r\n+\r\n+`RUNNING`: the query was either just started, or has been running without errors.\r\n+\r\n+`ERROR`: the query has entered an error state.\r\n+\r\n+`UNRESPONSIVE`: the host running the query returned an error when requesting the query status.\r\n+\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e34a12743792dc0963b702acd25a0e31ad456f83"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODk0NDEz", "url": "https://github.com/confluentinc/ksql/pull/5029#pullrequestreview-390894413", "createdAt": "2020-04-09T15:23:48Z", "commit": {"oid": "e34a12743792dc0963b702acd25a0e31ad456f83"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a475bdadead4b63164918efa52745e9c2a12ae5", "author": {"user": {"login": "stevenpyzhang", "name": "Steven Zhang"}}, "url": "https://github.com/confluentinc/ksql/commit/9a475bdadead4b63164918efa52745e9c2a12ae5", "committedDate": "2020-04-09T16:17:37Z", "message": "feat: add KsqlQueryState to decouple from KafkaStreams.State"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e34a12743792dc0963b702acd25a0e31ad456f83", "author": {"user": {"login": "stevenpyzhang", "name": "Steven Zhang"}}, "url": "https://github.com/confluentinc/ksql/commit/e34a12743792dc0963b702acd25a0e31ad456f83", "committedDate": "2020-04-08T22:49:19Z", "message": "feat: add KsqlQueryState to decouple from KafkaStreams.State"}, "afterCommit": {"oid": "9a475bdadead4b63164918efa52745e9c2a12ae5", "author": {"user": {"login": "stevenpyzhang", "name": "Steven Zhang"}}, "url": "https://github.com/confluentinc/ksql/commit/9a475bdadead4b63164918efa52745e9c2a12ae5", "committedDate": "2020-04-09T16:17:37Z", "message": "feat: add KsqlQueryState to decouple from KafkaStreams.State"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTYwMTk1", "url": "https://github.com/confluentinc/ksql/pull/5029#pullrequestreview-390960195", "createdAt": "2020-04-09T16:44:54Z", "commit": {"oid": "9a475bdadead4b63164918efa52745e9c2a12ae5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo0NDo1NFrOGDg18A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo0NDo1NFrOGDg18A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNzAwOA==", "bodyText": "KsqlQueryState makes it sounds like its referring to a state store or underlying state.. May be KsqlQueryStatus is a better name?\nJust a thought. Leave it to you :)", "url": "https://github.com/confluentinc/ksql/pull/5029#discussion_r406337008", "createdAt": "2020-04-09T16:44:54Z", "author": {"login": "vinothchandar"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConstants.java", "diffHunk": "@@ -44,7 +49,24 @@ private KsqlConstants() {\n   public static final String AVRO_SCHEMA_NAMESPACE = \"io.confluent.ksql.avro_schemas\";\n   public static final String AVRO_SCHEMA_NAME = \"KsqlDataSourceSchema\";\n   public static final String DEFAULT_AVRO_SCHEMA_FULL_NAME =\n-          AVRO_SCHEMA_NAMESPACE + \".\" + AVRO_SCHEMA_NAME;\n+      AVRO_SCHEMA_NAMESPACE + \".\" + AVRO_SCHEMA_NAME;\n+\n+  public enum KsqlQueryState {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a475bdadead4b63164918efa52745e9c2a12ae5"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMDg4OTQw", "url": "https://github.com/confluentinc/ksql/pull/5029#pullrequestreview-391088940", "createdAt": "2020-04-09T19:55:33Z", "commit": {"oid": "9a475bdadead4b63164918efa52745e9c2a12ae5"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTo1NTozM1rOGDnQBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTo1NTozM1rOGDnQBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ0MTk5MA==", "bodyText": "nit: I feel like this is better implemented as a method:\npublic static KsqlQueryState fromStreamsState(final KafkaStreams.State state) {\n  return state == KafkaStreams.State.ERROR ? KsqlQueryState.ERROR : KsqlQueryState.RUNNING;\n}\n\nthe benefit is that you avoid the static constructor, which can cause very confusing ClassNotFoundException if it fails due to some errror", "url": "https://github.com/confluentinc/ksql/pull/5029#discussion_r406441990", "createdAt": "2020-04-09T19:55:33Z", "author": {"login": "agavra"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConstants.java", "diffHunk": "@@ -44,7 +49,24 @@ private KsqlConstants() {\n   public static final String AVRO_SCHEMA_NAMESPACE = \"io.confluent.ksql.avro_schemas\";\n   public static final String AVRO_SCHEMA_NAME = \"KsqlDataSourceSchema\";\n   public static final String DEFAULT_AVRO_SCHEMA_FULL_NAME =\n-          AVRO_SCHEMA_NAMESPACE + \".\" + AVRO_SCHEMA_NAME;\n+      AVRO_SCHEMA_NAMESPACE + \".\" + AVRO_SCHEMA_NAME;\n+\n+  public enum KsqlQueryState {\n+    RUNNING,\n+    ERROR,\n+    UNRESPONSIVE,\n+  }\n+\n+  public static final Map<KafkaStreams.State, KsqlQueryState> STREAMS_STATE_TO_KSQL_QUERY_STATE;\n+\n+  static {\n+    final Map<KafkaStreams.State, KsqlQueryState> stateMapping = new HashMap<>();\n+    for (KafkaStreams.State state:KafkaStreams.State.values()) {\n+      stateMapping.put(state, KsqlQueryState.RUNNING);\n+    }\n+    stateMapping.put(KafkaStreams.State.ERROR, KsqlQueryState.ERROR);\n+    STREAMS_STATE_TO_KSQL_QUERY_STATE = ImmutableMap.copyOf(stateMapping);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a475bdadead4b63164918efa52745e9c2a12ae5"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "079f4aea5fb1f84e791c7e9abd6e7580b3d7707f", "author": {"user": {"login": "stevenpyzhang", "name": "Steven Zhang"}}, "url": "https://github.com/confluentinc/ksql/commit/079f4aea5fb1f84e791c7e9abd6e7580b3d7707f", "committedDate": "2020-04-09T21:51:00Z", "message": "comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e023bb73d90069f64095b96a32fef82e2d0e40d7", "author": {"user": {"login": "stevenpyzhang", "name": "Steven Zhang"}}, "url": "https://github.com/confluentinc/ksql/commit/e023bb73d90069f64095b96a32fef82e2d0e40d7", "committedDate": "2020-04-09T22:21:45Z", "message": "change mentions of state to status"}, "afterCommit": {"oid": "e9b067fa0570c974448b48639b63cf394bdf4077", "author": {"user": {"login": "stevenpyzhang", "name": "Steven Zhang"}}, "url": "https://github.com/confluentinc/ksql/commit/e9b067fa0570c974448b48639b63cf394bdf4077", "committedDate": "2020-04-09T22:24:01Z", "message": "change mentions of state to status"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e9b067fa0570c974448b48639b63cf394bdf4077", "author": {"user": {"login": "stevenpyzhang", "name": "Steven Zhang"}}, "url": "https://github.com/confluentinc/ksql/commit/e9b067fa0570c974448b48639b63cf394bdf4077", "committedDate": "2020-04-09T22:24:01Z", "message": "change mentions of state to status"}, "afterCommit": {"oid": "2110c883b8705a130a0d043b85c1fa85d3727012", "author": {"user": {"login": "stevenpyzhang", "name": "Steven Zhang"}}, "url": "https://github.com/confluentinc/ksql/commit/2110c883b8705a130a0d043b85c1fa85d3727012", "committedDate": "2020-04-09T23:12:52Z", "message": "change mentions of state to status"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "706d514d69c025f50b00cff571c74d0b76055417", "author": {"user": {"login": "stevenpyzhang", "name": "Steven Zhang"}}, "url": "https://github.com/confluentinc/ksql/commit/706d514d69c025f50b00cff571c74d0b76055417", "committedDate": "2020-04-09T23:16:53Z", "message": "change mentions of state to status"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2110c883b8705a130a0d043b85c1fa85d3727012", "author": {"user": {"login": "stevenpyzhang", "name": "Steven Zhang"}}, "url": "https://github.com/confluentinc/ksql/commit/2110c883b8705a130a0d043b85c1fa85d3727012", "committedDate": "2020-04-09T23:12:52Z", "message": "change mentions of state to status"}, "afterCommit": {"oid": "706d514d69c025f50b00cff571c74d0b76055417", "author": {"user": {"login": "stevenpyzhang", "name": "Steven Zhang"}}, "url": "https://github.com/confluentinc/ksql/commit/706d514d69c025f50b00cff571c74d0b76055417", "committedDate": "2020-04-09T23:16:53Z", "message": "change mentions of state to status"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyOTQyMjcy", "url": "https://github.com/confluentinc/ksql/pull/5029#pullrequestreview-392942272", "createdAt": "2020-04-14T13:46:35Z", "commit": {"oid": "706d514d69c025f50b00cff571c74d0b76055417"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzo0NjozNVrOGFPaQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzo0NjozNVrOGFPaQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE0ODU0NQ==", "bodyText": "It would be better if CompletableFuture was used here instead of the legacy blocking Future class.\nThat way we wouldn't have to refactor this code when we move to a non blocking model.\nThis is a general point really, we shouldn't be using Future in new code.", "url": "https://github.com/confluentinc/ksql/pull/5029#discussion_r408148545", "createdAt": "2020-04-14T13:46:35Z", "author": {"login": "purplefox"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/execution/ListQueriesExecutor.java", "diffHunk": "@@ -168,43 +181,55 @@ private static void mergeSimple(\n                 query,\n                 Collections.singletonMap(\n                     new KsqlHostInfoEntity(sessionProperties.getKsqlHostInfo()),\n-                    query.getState()))));\n+                    KsqlConstants.fromStreamsState(\n+                        KafkaStreams.State.valueOf(query.getState()))\n+                ))));\n   }\n \n   private static void mergeExtended(\n-      final List<KsqlEntity> remoteResults,\n+      final Pair<List<KsqlEntity>, Set<HostInfo>> remoteResults,\n       final Map<QueryId, QueryDescription> allResults\n   ) {\n-    final List<QueryDescription> remoteQueryDescriptions = remoteResults.stream()\n+    final List<KsqlEntity> remoteQueries = remoteResults.getLeft();\n+    final List<QueryDescription> remoteQueryDescriptions = remoteQueries.stream()\n         .map(QueryDescriptionList.class::cast)\n         .map(QueryDescriptionList::getQueryDescriptions)\n         .flatMap(List::stream)\n         .collect(Collectors.toList());\n     for (QueryDescription q : remoteQueryDescriptions) {\n       final QueryId queryId = q.getId();\n \n-      // If the query has already been discovered, add to the ksqlQueryHostState mapping\n+      // If the query has already been discovered, add to the ksqlQueryHostStatus mapping\n       if (allResults.containsKey(queryId)) {\n-        for (Map.Entry<KsqlHostInfoEntity, String> entry :\n-            q.getKsqlHostQueryState().entrySet()) {\n+        for (Map.Entry<KsqlHostInfoEntity, KsqlQueryStatus> entry :\n+            q.getKsqlHostQueryStatus().entrySet()) {\n           allResults\n               .get(queryId)\n-              .updateKsqlHostQueryState(entry.getKey(), entry.getValue());\n+              .updateKsqlHostQueryStatus(entry.getKey(), entry.getValue());\n         }\n       } else {\n         allResults.put(queryId, q);\n       }\n     }\n+    \n+    final Set<HostInfo> unresponsiveRemoteHosts = remoteResults.getRight();\n+    for (HostInfo hostInfo: unresponsiveRemoteHosts) {\n+      for (QueryDescription queryDescription: allResults.values()) {\n+        queryDescription.updateKsqlHostQueryStatus(\n+            new KsqlHostInfoEntity(hostInfo.host(), hostInfo.port()),\n+            KsqlQueryStatus.UNRESPONSIVE);\n+      }\n+    }\n   }\n \n-  private static List<KsqlEntity> scatterGather(\n+  private static Pair<List<KsqlEntity>, Set<HostInfo>> scatterGather(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "706d514d69c025f50b00cff571c74d0b76055417"}, "originalPosition": 154}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4826, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}