{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyODQ2MTky", "number": 4686, "title": "docs: update docs inline latest syntax changes", "bodyText": "Description\nFixes: #4927\nNEEDS MERGING TO 6.0.0\nUpdate the docs inline with work to allow any arbitrary key column name, i.e. remove the restriction that key columns must be named ROWKEY.\nDoc change for PRs:\n\n#4701: Any key name\nAS_VALUE UDF documentation\nRemoval of WITH(KEY)\nNew key semantics\nRequire key column\nStreams without key columns\nKLIP-24: #5257\n\nTesting done\nDoc only change.\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-03-03T09:49:31Z", "url": "https://github.com/confluentinc/ksql/pull/4686", "merged": true, "mergeCommit": {"oid": "613d3870c1706bf891ef96fc15ae482de8f4b7b4"}, "closed": true, "closedAt": "2020-06-23T20:45:48Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcJ_L8eAH2gAyMzgyODQ2MTkyOjgwYjM2ZTU3MTg4YmI4NjRlMDNhZjFlZjExNjFjMGE5YWY1YmZiMjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcskCG1AH2gAyMzgyODQ2MTkyOjJjMTA4ODZmYWIyNDM4NDU5ODMyOTI1MmNjNjAyMmVkN2Q1MGZkY2I=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "80b36e57188bb864e03af1ef1161c0a9af5bfb28", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/80b36e57188bb864e03af1ef1161c0a9af5bfb28", "committedDate": "2020-03-03T09:48:28Z", "message": "docs: update inline with ability for arbitrary key column names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "753adc015a67e40fd32279f61d41786ac4450c8f", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/753adc015a67e40fd32279f61d41786ac4450c8f", "committedDate": "2020-03-03T11:01:55Z", "message": "Merge branch 'master' into any_key_docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97ea2534eb7c14eae32880f9a2ba0ecb48b5706a", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/97ea2534eb7c14eae32880f9a2ba0ecb48b5706a", "committedDate": "2020-03-03T11:02:22Z", "message": "docs: update help docs in code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0789f1d26ec6abbf50b26dc754f5d4bfa41e41a6", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/0789f1d26ec6abbf50b26dc754f5d4bfa41e41a6", "committedDate": "2020-06-16T14:21:45Z", "message": "docs: meh"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7041be4a90ca88aaf31b05454138c205232e3dee", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/7041be4a90ca88aaf31b05454138c205232e3dee", "committedDate": "2020-06-16T14:27:39Z", "message": "chore: merge from master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "995c147e0147176a1f0f29c22aa1cea519e12bd1", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/995c147e0147176a1f0f29c22aa1cea519e12bd1", "committedDate": "2020-06-18T13:30:46Z", "message": "docs: update with latest syntax"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea29249c48d425b0fa7b861d24bd8ed737638859", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/ea29249c48d425b0fa7b861d24bd8ed737638859", "committedDate": "2020-06-18T13:36:37Z", "message": "docs: add AS_VALUE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "924faea82b766af4018f3e833199386894e14ead", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/924faea82b766af4018f3e833199386894e14ead", "committedDate": "2020-06-18T15:33:53Z", "message": "test: update tests inline with doc changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTU2Mzcw", "url": "https://github.com/confluentinc/ksql/pull/4686#pullrequestreview-433556370", "createdAt": "2020-06-18T18:48:58Z", "commit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo0ODo1OFrOGl78DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo0ODo1OFrOGl78DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzMjUyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It's important that the columns we've defined match the data in the existing topic.\n          \n          \n            \n            It's important that the columns you define match the data in the existing topic.", "url": "https://github.com/confluentinc/ksql/pull/4686#discussion_r442432525", "createdAt": "2020-06-18T18:48:58Z", "author": {"login": "JimGalasyn"}, "path": "docs/concepts/collections/streams.md", "diffHunk": "@@ -53,14 +57,36 @@ Internally, ksqlDB simply registers the topic with the provided schema\n and doesn't create anything new. \n \n ```sql\n-CREATE STREAM publications (author VARCHAR, title VARCHAR)\n-    WITH (kafka_topic = 'publication_events',\n-          value_format = 'avro');\n+CREATE STREAM publications (\n+    author VARCHAR KEY, \n+    title VARCHAR\n+  ) WITH (\n+    kafka_topic = 'publication_events',\n+    value_format = 'avro'\n+  );\n ```\n \n-Because the topic already exists, you can't specify the number of partitions.\n-The key shouldn't be set here either, because any data that already exists in\n-the same topic has a given key.\n+Because the topic already exists, you do not need to specify the number of partitions.\n+\n+It's important that the columns we've defined match the data in the existing topic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTU3MDI0", "url": "https://github.com/confluentinc/ksql/pull/4686#pullrequestreview-433557024", "createdAt": "2020-06-18T18:49:49Z", "commit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo0OTo1MFrOGl793g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo0OTo1MFrOGl793g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzMjk5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            If both the `author` and `title` columns where in the message value we could write: \n          \n          \n            \n            If both the `author` and `title` columns are in the message value, you can write:", "url": "https://github.com/confluentinc/ksql/pull/4686#discussion_r442432990", "createdAt": "2020-06-18T18:49:50Z", "author": {"login": "JimGalasyn"}, "path": "docs/concepts/collections/streams.md", "diffHunk": "@@ -53,14 +57,36 @@ Internally, ksqlDB simply registers the topic with the provided schema\n and doesn't create anything new. \n \n ```sql\n-CREATE STREAM publications (author VARCHAR, title VARCHAR)\n-    WITH (kafka_topic = 'publication_events',\n-          value_format = 'avro');\n+CREATE STREAM publications (\n+    author VARCHAR KEY, \n+    title VARCHAR\n+  ) WITH (\n+    kafka_topic = 'publication_events',\n+    value_format = 'avro'\n+  );\n ```\n \n-Because the topic already exists, you can't specify the number of partitions.\n-The key shouldn't be set here either, because any data that already exists in\n-the same topic has a given key.\n+Because the topic already exists, you do not need to specify the number of partitions.\n+\n+It's important that the columns we've defined match the data in the existing topic.\n+In this case, the message would need a `KAFKA` serialized `VARCHAR` in the message key\n+and an `AVRO` serialized record containing a `title` field in the message value.\n+\n+If both the `author` and `title` columns where in the message value we could write: ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTU3Njc0", "url": "https://github.com/confluentinc/ksql/pull/4686#pullrequestreview-433557674", "createdAt": "2020-06-18T18:50:40Z", "commit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1MDo0MVrOGl7_yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1MDo0MVrOGl7_yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzMzQ4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            It's important that the columns we've defined match the data in the existing topic.\n          \n          \n            \n            It's important that the columns you define match the data in the existing topic.", "url": "https://github.com/confluentinc/ksql/pull/4686#discussion_r442433482", "createdAt": "2020-06-18T18:50:41Z", "author": {"login": "JimGalasyn"}, "path": "docs/concepts/collections/tables.md", "diffHunk": "@@ -69,14 +73,21 @@ Internally, ksqlDB simply registers the topic with the provided schema\n and doesn't create anything new. \n \n ```sql\n-CREATE TABLE movies (title VARCHAR, release_year INT)\n-    WITH (kafka_topic = 'movies',\n-          value_format = 'avro');\n+CREATE TABLE movies (\n+    title VARCHAR PRIMARY KEY, \n+    release_year INT\n+  ) WITH (\n+    kafka_topic = 'movies',\n+    value_format = 'avro'\n+  );\n ```\n \n-Because the topic already exists, you can't specify the number of partitions.\n-The key shouldn't be set here either, because any data that already exists in\n-the same topic has a given key.\n+Because the topic already exists, you do not need to specify the number of partitions.\n+\n+It's important that the columns we've defined match the data in the existing topic.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTU4MDk4", "url": "https://github.com/confluentinc/ksql/pull/4686#pullrequestreview-433558098", "createdAt": "2020-06-18T18:51:16Z", "commit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1MToxNlrOGl8BGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1MToxNlrOGl8BGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzMzgxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            - WHERE clauses can only have constrains on the key column for non-windowed tables.\n          \n          \n            \n            - WHERE clauses can only have constraints on the key column for non-windowed tables.", "url": "https://github.com/confluentinc/ksql/pull/4686#discussion_r442433816", "createdAt": "2020-06-18T18:51:16Z", "author": {"login": "JimGalasyn"}, "path": "docs/concepts/queries/pull.md", "diffHunk": "@@ -36,8 +36,8 @@ Pull query features and limitations\n   with a GROUP BY clause.\r\n - For non-windowed aggregations, pull queries only support looking up events\r\n   by key.\r\n-- WHERE clauses can only have `ROWKEY=x`-style bounds for non-windowed tables.\r\n-- Windowed tables support bounds on WINDOWSTART using operators\r\n+- WHERE clauses can only have constrains on the key column for non-windowed tables.\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTYwNzM0", "url": "https://github.com/confluentinc/ksql/pull/4686#pullrequestreview-433560734", "createdAt": "2020-06-18T18:54:59Z", "commit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1NDo1OVrOGl8I1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1NDo1OVrOGl8I1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNTc5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `pageviews` topic: `viewtime`, `userid`, and `pageid`. All these columns will be loaded from the \n          \n          \n            \n            `pageviews` topic: `viewtime`, `userid`, and `pageid`. All of these columns are loaded from the", "url": "https://github.com/confluentinc/ksql/pull/4686#discussion_r442435799", "createdAt": "2020-06-18T18:54:59Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/create-a-stream.md", "diffHunk": "@@ -30,26 +30,26 @@ named `pageviews`.\n ### Create a Stream with Selected Columns\n \n The following example creates a stream that has three columns from the\n-`pageviews` topic: `viewtime`, `userid`, and `pageid`.\n+`pageviews` topic: `viewtime`, `userid`, and `pageid`. All these columns will be loaded from the ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTYxMjAw", "url": "https://github.com/confluentinc/ksql/pull/4686#pullrequestreview-433561200", "createdAt": "2020-06-18T18:55:32Z", "commit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1NTozMlrOGl8KSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1NTozMlrOGl8KSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNjE3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            {{ site.ak }} topic message value. If you wish to access data in your message key see \n          \n          \n            \n            {{ site.ak }} topic message value. To access data in your message key, see", "url": "https://github.com/confluentinc/ksql/pull/4686#discussion_r442436170", "createdAt": "2020-06-18T18:55:32Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/create-a-stream.md", "diffHunk": "@@ -30,26 +30,26 @@ named `pageviews`.\n ### Create a Stream with Selected Columns\n \n The following example creates a stream that has three columns from the\n-`pageviews` topic: `viewtime`, `userid`, and `pageid`.\n+`pageviews` topic: `viewtime`, `userid`, and `pageid`. All these columns will be loaded from the \n+{{ site.ak }} topic message value. If you wish to access data in your message key see ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTYyMTQy", "url": "https://github.com/confluentinc/ksql/pull/4686#pullrequestreview-433562142", "createdAt": "2020-06-18T18:56:47Z", "commit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1Njo0N1rOGl8NEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1Njo0N1rOGl8NEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNjg4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This will create the pageviews topics for you with the supplied partition and replica count. The \n          \n          \n            \n            This statement creates the `pageviews` topic for you with the supplied partition and replica count. The", "url": "https://github.com/confluentinc/ksql/pull/4686#discussion_r442436881", "createdAt": "2020-06-18T18:56:47Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/create-a-stream.md", "diffHunk": "@@ -193,17 +202,21 @@ Kafka topic does not already exist, you can create the stream by pasting\n the following CREATE STREAM statement into the CLI:\n \n ```sql\n-CREATE STREAM pageviews\n-  (viewtime BIGINT KEY,\n-   userid VARCHAR,\n-   pageid VARCHAR)\n-  WITH (KAFKA_TOPIC='pageviews',\n-        PARTITIONS=4,\n-        REPLICAS=3\n-        VALUE_FORMAT='DELIMITED')\n-```\n-\n-This will create the pageviews topics for you with the supplied partition and replica count.\n+CREATE STREAM pageviews(\n+    viewtime BIGINT KEY,\n+    userid VARCHAR,\n+    pageid VARCHAR\n+  ) WITH (\n+    KAFKA_TOPIC='pageviews',\n+    VALUE_FORMAT='DELIMITED',\n+    PARTITIONS=4,\n+    REPLICAS=3\n+  );\n+```\n+\n+This will create the pageviews topics for you with the supplied partition and replica count. The ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTYyNDAx", "url": "https://github.com/confluentinc/ksql/pull/4686#pullrequestreview-433562401", "createdAt": "2020-06-18T18:57:10Z", "commit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1NzoxMFrOGl8N5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1NzoxMFrOGl8N5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzA5NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            value of `viewTime` will be stored in the {{ site.ak }} topic message key. If you wish to store\n          \n          \n            \n            value of `viewTime` is stored in the {{ site.ak }} topic message key. To store", "url": "https://github.com/confluentinc/ksql/pull/4686#discussion_r442437094", "createdAt": "2020-06-18T18:57:10Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/create-a-stream.md", "diffHunk": "@@ -193,17 +202,21 @@ Kafka topic does not already exist, you can create the stream by pasting\n the following CREATE STREAM statement into the CLI:\n \n ```sql\n-CREATE STREAM pageviews\n-  (viewtime BIGINT KEY,\n-   userid VARCHAR,\n-   pageid VARCHAR)\n-  WITH (KAFKA_TOPIC='pageviews',\n-        PARTITIONS=4,\n-        REPLICAS=3\n-        VALUE_FORMAT='DELIMITED')\n-```\n-\n-This will create the pageviews topics for you with the supplied partition and replica count.\n+CREATE STREAM pageviews(\n+    viewtime BIGINT KEY,\n+    userid VARCHAR,\n+    pageid VARCHAR\n+  ) WITH (\n+    KAFKA_TOPIC='pageviews',\n+    VALUE_FORMAT='DELIMITED',\n+    PARTITIONS=4,\n+    REPLICAS=3\n+  );\n+```\n+\n+This will create the pageviews topics for you with the supplied partition and replica count. The \n+value of `viewTime` will be stored in the {{ site.ak }} topic message key. If you wish to store", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTYyNTQ0", "url": "https://github.com/confluentinc/ksql/pull/4686#pullrequestreview-433562544", "createdAt": "2020-06-18T18:57:20Z", "commit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1NzoyMFrOGl8OQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1NzoyMFrOGl8OQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzE4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            the column in the message value, simple remove `KEY` from the column definition.\n          \n          \n            \n            the column in the message value, simply remove `KEY` from the column definition.", "url": "https://github.com/confluentinc/ksql/pull/4686#discussion_r442437184", "createdAt": "2020-06-18T18:57:20Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/create-a-stream.md", "diffHunk": "@@ -193,17 +202,21 @@ Kafka topic does not already exist, you can create the stream by pasting\n the following CREATE STREAM statement into the CLI:\n \n ```sql\n-CREATE STREAM pageviews\n-  (viewtime BIGINT KEY,\n-   userid VARCHAR,\n-   pageid VARCHAR)\n-  WITH (KAFKA_TOPIC='pageviews',\n-        PARTITIONS=4,\n-        REPLICAS=3\n-        VALUE_FORMAT='DELIMITED')\n-```\n-\n-This will create the pageviews topics for you with the supplied partition and replica count.\n+CREATE STREAM pageviews(\n+    viewtime BIGINT KEY,\n+    userid VARCHAR,\n+    pageid VARCHAR\n+  ) WITH (\n+    KAFKA_TOPIC='pageviews',\n+    VALUE_FORMAT='DELIMITED',\n+    PARTITIONS=4,\n+    REPLICAS=3\n+  );\n+```\n+\n+This will create the pageviews topics for you with the supplied partition and replica count. The \n+value of `viewTime` will be stored in the {{ site.ak }} topic message key. If you wish to store\n+the column in the message value, simple remove `KEY` from the column definition.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTYzMjk1", "url": "https://github.com/confluentinc/ksql/pull/4686#pullrequestreview-433563295", "createdAt": "2020-06-18T18:58:25Z", "commit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1ODoyNVrOGl8QkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1ODoyNVrOGl8QkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzc3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            The `userid` column is the primary key of the table. This means it is loaded from the Kafka message\n          \n          \n            \n            The `userid` column is the primary key of the table. This means that it's loaded from the {{ site.ak }} message", "url": "https://github.com/confluentinc/ksql/pull/4686#discussion_r442437777", "createdAt": "2020-06-18T18:58:25Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/create-a-table.md", "diffHunk": "@@ -30,32 +30,32 @@ named `users`.\n ### Create a Table with Selected Columns\n \n The following example creates a table that has four columns from the\n-`users` topic: `registertime`, `userid`, `gender`, and `regionid`. Also,\n-the `userid` field is assigned as the table's KEY property.\n-\n-!!! note\n-      The KEY field is optional. For more information, see\n-      [Key Requirements](syntax-reference.md#key-requirements).\n+`users` topic: `registertime`, `userid`, `gender`, and `regionid`. \n+The `userid` column is the primary key of the table. This means it is loaded from the Kafka message", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTYzNTU1", "url": "https://github.com/confluentinc/ksql/pull/4686#pullrequestreview-433563555", "createdAt": "2020-06-18T18:58:46Z", "commit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1ODo0NlrOGl8RXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxODo1ODo0NlrOGl8RXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzNzk4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            key. Primary key columns can not be `NULL`.\n          \n          \n            \n            key. Primary key columns can't be `NULL`.", "url": "https://github.com/confluentinc/ksql/pull/4686#discussion_r442437981", "createdAt": "2020-06-18T18:58:46Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/create-a-table.md", "diffHunk": "@@ -30,32 +30,32 @@ named `users`.\n ### Create a Table with Selected Columns\n \n The following example creates a table that has four columns from the\n-`users` topic: `registertime`, `userid`, `gender`, and `regionid`. Also,\n-the `userid` field is assigned as the table's KEY property.\n-\n-!!! note\n-      The KEY field is optional. For more information, see\n-      [Key Requirements](syntax-reference.md#key-requirements).\n+`users` topic: `registertime`, `userid`, `gender`, and `regionid`. \n+The `userid` column is the primary key of the table. This means it is loaded from the Kafka message\n+key. Primary key columns can not be `NULL`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTY0OTU4", "url": "https://github.com/confluentinc/ksql/pull/4686#pullrequestreview-433564958", "createdAt": "2020-06-18T19:00:44Z", "commit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowMDo0NFrOGl8V0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowMDo0NFrOGl8V0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzOTEyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            KsqlDB attempts to process both sides of a join in event-time order, \n          \n          \n            \n            ksqlDB attempts to process both sides of a join in event-time order,", "url": "https://github.com/confluentinc/ksql/pull/4686#discussion_r442439120", "createdAt": "2020-06-18T19:00:44Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/joins/join-streams-and-tables.md", "diffHunk": "@@ -232,14 +230,19 @@ the key from the table. Tombstones don't trigger the join.\n | 14        |             | d                |            |           |\n | 15        | D           |                  | [D, d]     | [D, d]    |\n \n-For stream-table joins, ksqlDB assumes that the joining stream and table\n-follow the event-time ordering exactly. Follow these steps to ensure\n-that joins are synchronized:\n+Notice that the INNER JOIN doesn't result in any output if the table-side\n+does not already contain a value for the key, even if the table-side is\n+later populated. For the LEFT JOIN the same scenario results in an output \n+of leftRecord-NULL.  It is therefore important that the table data is \n+loaded _before_ the stream event is received. \n \n-1.  Start the query, which starts consumers.\n-2.  Populate the table completely. This ensures that the table items\n-    exist when the stream events come in to trigger the join.\n-3.  Populate the stream completely.\n+KsqlDB attempts to process both sides of a join in event-time order, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "originalPosition": 135}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTY1MzIw", "url": "https://github.com/confluentinc/ksql/pull/4686#pullrequestreview-433565320", "createdAt": "2020-06-18T19:01:16Z", "commit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowMToxN1rOGl8XAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowMToxN1rOGl8XAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzOTQyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            but can not offer strong guarantees, especially in the presence of \n          \n          \n            \n            but it can't offer strong guarantees, especially in the presence of", "url": "https://github.com/confluentinc/ksql/pull/4686#discussion_r442439426", "createdAt": "2020-06-18T19:01:17Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/joins/join-streams-and-tables.md", "diffHunk": "@@ -232,14 +230,19 @@ the key from the table. Tombstones don't trigger the join.\n | 14        |             | d                |            |           |\n | 15        | D           |                  | [D, d]     | [D, d]    |\n \n-For stream-table joins, ksqlDB assumes that the joining stream and table\n-follow the event-time ordering exactly. Follow these steps to ensure\n-that joins are synchronized:\n+Notice that the INNER JOIN doesn't result in any output if the table-side\n+does not already contain a value for the key, even if the table-side is\n+later populated. For the LEFT JOIN the same scenario results in an output \n+of leftRecord-NULL.  It is therefore important that the table data is \n+loaded _before_ the stream event is received. \n \n-1.  Start the query, which starts consumers.\n-2.  Populate the table completely. This ensures that the table items\n-    exist when the stream events come in to trigger the join.\n-3.  Populate the stream completely.\n+KsqlDB attempts to process both sides of a join in event-time order, \n+but can not offer strong guarantees, especially in the presence of ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTY1NjU4", "url": "https://github.com/confluentinc/ksql/pull/4686#pullrequestreview-433565658", "createdAt": "2020-06-18T19:01:47Z", "commit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowMTo0N1rOGl8YCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowMTo0N1rOGl8YCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQzOTY5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            source topic, the query is running and the ksqlDB has had enough time to process \n          \n          \n            \n            source topic, the query is running, and ksqlDB has had enough time to process", "url": "https://github.com/confluentinc/ksql/pull/4686#discussion_r442439690", "createdAt": "2020-06-18T19:01:47Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/joins/join-streams-and-tables.md", "diffHunk": "@@ -232,14 +230,19 @@ the key from the table. Tombstones don't trigger the join.\n | 14        |             | d                |            |           |\n | 15        | D           |                  | [D, d]     | [D, d]    |\n \n-For stream-table joins, ksqlDB assumes that the joining stream and table\n-follow the event-time ordering exactly. Follow these steps to ensure\n-that joins are synchronized:\n+Notice that the INNER JOIN doesn't result in any output if the table-side\n+does not already contain a value for the key, even if the table-side is\n+later populated. For the LEFT JOIN the same scenario results in an output \n+of leftRecord-NULL.  It is therefore important that the table data is \n+loaded _before_ the stream event is received. \n \n-1.  Start the query, which starts consumers.\n-2.  Populate the table completely. This ensures that the table items\n-    exist when the stream events come in to trigger the join.\n-3.  Populate the stream completely.\n+KsqlDB attempts to process both sides of a join in event-time order, \n+but can not offer strong guarantees, especially in the presence of \n+out-of-order rows. \n+\n+To maximise join predictability, ensure historic table data is available in the \n+source topic, the query is running and the ksqlDB has had enough time to process ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "originalPosition": 140}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTY2NDg0", "url": "https://github.com/confluentinc/ksql/pull/4686#pullrequestreview-433566484", "createdAt": "2020-06-18T19:03:01Z", "commit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowMzowMVrOGl8aaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowMzowMVrOGl8aaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MDI5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Streams, on the other hand, do not have primary keys. However, they do have an optional `KEY` \n          \n          \n            \n            Streams don't have primary keys, but they do have an optional `KEY`", "url": "https://github.com/confluentinc/ksql/pull/4686#discussion_r442440299", "createdAt": "2020-06-18T19:03:01Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/joins/partition-data.md", "diffHunk": "@@ -19,13 +19,15 @@ coincide with the column that the sources are partitioned by.\n Keys\n ----\n \n-A *key*, when present, defines the partitioning column. Tables are\n-always partitioned by their primary key, and ksqlDB doesn't allow repartitioning\n-of tables, so you can only use a table's primary key as a join column.\n+Tables are always partitioned by their `PRIMARY KEY`, and ksqlDB doesn't allow repartitioning\n+of tables, meaning you can only use a table's primary key as a join column.\n \n-Streams, on the other hand, may not have a defined key or may have a key that\n-differs from the join column. In these cases, ksqlDB internally repartitions\n-the stream, which implicitly defines the correct key for it.\n+Streams, on the other hand, do not have primary keys. However, they do have an optional `KEY` ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTY2Njkx", "url": "https://github.com/confluentinc/ksql/pull/4686#pullrequestreview-433566691", "createdAt": "2020-06-18T19:03:19Z", "commit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowMzoxOVrOGl8bCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowMzoxOVrOGl8bCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MDQ1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            Streams allow joins on expressions other than their key column. When the join criteria differs \n          \n          \n            \n            Streams allow joins on expressions other than their key column. When the join criteria differ", "url": "https://github.com/confluentinc/ksql/pull/4686#discussion_r442440456", "createdAt": "2020-06-18T19:03:19Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/joins/partition-data.md", "diffHunk": "@@ -19,13 +19,15 @@ coincide with the column that the sources are partitioned by.\n Keys\n ----\n \n-A *key*, when present, defines the partitioning column. Tables are\n-always partitioned by their primary key, and ksqlDB doesn't allow repartitioning\n-of tables, so you can only use a table's primary key as a join column.\n+Tables are always partitioned by their `PRIMARY KEY`, and ksqlDB doesn't allow repartitioning\n+of tables, meaning you can only use a table's primary key as a join column.\n \n-Streams, on the other hand, may not have a defined key or may have a key that\n-differs from the join column. In these cases, ksqlDB internally repartitions\n-the stream, which implicitly defines the correct key for it.\n+Streams, on the other hand, do not have primary keys. However, they do have an optional `KEY` \n+column. A `KEY` column, when present, defines the partitioning column.\n+\n+Streams allow joins on expressions other than their key column. When the join criteria differs ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTY3MTQ2", "url": "https://github.com/confluentinc/ksql/pull/4686#pullrequestreview-433567146", "createdAt": "2020-06-18T19:04:04Z", "commit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowNDowNFrOGl8cgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowNDowNFrOGl8cgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MDgzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            As the KAFKA format does not support serialize the column name within the data the key column name is \n          \n          \n            \n            The KAFKA format doesn't support serializing the column name within the data, so the key column name is", "url": "https://github.com/confluentinc/ksql/pull/4686#discussion_r442440835", "createdAt": "2020-06-18T19:04:04Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/joins/partition-data.md", "diffHunk": "@@ -35,61 +37,48 @@ the stream, which implicitly defines the correct key for it.\n \n ksqlDB requires keys to use the `KAFKA` format. For more information, see\n [Serialization Formats](../serialization.md#serialization-formats). If internally\n-repartitioning, ksqlDB uses the correct format.\n-\n-Because you can only use the primary key of a table as a joining column, it's\n-important to understand how keys are defined.\n-\n-When you create a table by using a CREATE TABLE statement you define the key in the schema and\n-it must be the same as that of the records in the underlying {{ site.ak }} topic. As the\n-KAFKA format does not support named fields that key has no implicit name, so the key can be\n-given any name in the schema definition.\n-\n-When you create a table by using a CREATE TABLE AS SELECT statement, the key of\n-the resulting table is determined as follows:\n-\n-- If the statement contains neither a JOIN nor GROUP BY clause, the key type of the resulting\n-  table matches the key type of the source table, and the name matches the source unless the\n-  projection defines an alias for the column.\n-- If the statement contains a JOIN and no GROUP BY clause, the key type of the resulting table\n-  matches the type of the join columns. The key name is defined by these conditions:\n-    - FULL OUTER joins and joins on expressions other than column references have a\n-      system-generated name in the form `KSQL_COL_n`, where `n` is a positive integer,\n-      unless the projection defines an alias for the column.\n-    - For other joins that contain at least one column reference in their join criteria,\n-      the name matches the leftmost column reference in the join criteria.\n-- If the statement contains a GROUP BY clause, the grouping columns determine the key\n-  of the resulting table.\n-    - When grouping by a single column or STRUCT field, the name of the key column in the\n-      resulting table matches the name of the column or field, unless the projection includes\n-      an alias for the column or field. The type of the key column matches the column or field.\n-    - When grouping by a single expression that is not a column or STRUCT field, the resulting table\n-      has a system-generated key column name in the form `KSQL_COL_n`, where `n` is a positive\n-      integer, unless the projection contains an alias for the expression. The type of the\n-      column matches the result of the expression.\n-    - When grouping by multiple expressions, the resulting table has a system-generated key\n-      name in the form `KSQL_COL_n`, where `n` is a positive integer. The type of the column is\n-      a [SQL `STRING`](../../concepts/schemas), containing the grouping expressions concatenated\n-      together.\n+repartitioning, ksqlDB uses the correct format. If the data in your {{ site.ak }} topics \n+does not have a suitable key format, see [Key Requirements](syntax-reference.md#key-requirements).\n+\n+As the KAFKA format does not support serialize the column name within the data the key column name is ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTY3NzU5", "url": "https://github.com/confluentinc/ksql/pull/4686#pullrequestreview-433567759", "createdAt": "2020-06-18T19:05:01Z", "commit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowNTowMVrOGl8eUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowNTowMVrOGl8eUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MTI5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            not important when it comes to joins. The key column type is important: for the join to be valid\n          \n          \n            \n            not important for joins. The key column type is important: for the join to be valid,", "url": "https://github.com/confluentinc/ksql/pull/4686#discussion_r442441297", "createdAt": "2020-06-18T19:05:01Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/joins/partition-data.md", "diffHunk": "@@ -35,61 +37,48 @@ the stream, which implicitly defines the correct key for it.\n \n ksqlDB requires keys to use the `KAFKA` format. For more information, see\n [Serialization Formats](../serialization.md#serialization-formats). If internally\n-repartitioning, ksqlDB uses the correct format.\n-\n-Because you can only use the primary key of a table as a joining column, it's\n-important to understand how keys are defined.\n-\n-When you create a table by using a CREATE TABLE statement you define the key in the schema and\n-it must be the same as that of the records in the underlying {{ site.ak }} topic. As the\n-KAFKA format does not support named fields that key has no implicit name, so the key can be\n-given any name in the schema definition.\n-\n-When you create a table by using a CREATE TABLE AS SELECT statement, the key of\n-the resulting table is determined as follows:\n-\n-- If the statement contains neither a JOIN nor GROUP BY clause, the key type of the resulting\n-  table matches the key type of the source table, and the name matches the source unless the\n-  projection defines an alias for the column.\n-- If the statement contains a JOIN and no GROUP BY clause, the key type of the resulting table\n-  matches the type of the join columns. The key name is defined by these conditions:\n-    - FULL OUTER joins and joins on expressions other than column references have a\n-      system-generated name in the form `KSQL_COL_n`, where `n` is a positive integer,\n-      unless the projection defines an alias for the column.\n-    - For other joins that contain at least one column reference in their join criteria,\n-      the name matches the leftmost column reference in the join criteria.\n-- If the statement contains a GROUP BY clause, the grouping columns determine the key\n-  of the resulting table.\n-    - When grouping by a single column or STRUCT field, the name of the key column in the\n-      resulting table matches the name of the column or field, unless the projection includes\n-      an alias for the column or field. The type of the key column matches the column or field.\n-    - When grouping by a single expression that is not a column or STRUCT field, the resulting table\n-      has a system-generated key column name in the form `KSQL_COL_n`, where `n` is a positive\n-      integer, unless the projection contains an alias for the expression. The type of the\n-      column matches the result of the expression.\n-    - When grouping by multiple expressions, the resulting table has a system-generated key\n-      name in the form `KSQL_COL_n`, where `n` is a positive integer. The type of the column is\n-      a [SQL `STRING`](../../concepts/schemas), containing the grouping expressions concatenated\n-      together.\n+repartitioning, ksqlDB uses the correct format. If the data in your {{ site.ak }} topics \n+does not have a suitable key format, see [Key Requirements](syntax-reference.md#key-requirements).\n+\n+As the KAFKA format does not support serialize the column name within the data the key column name is \n+not important when it comes to joins. The key column type is important: for the join to be valid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTY4MjEy", "url": "https://github.com/confluentinc/ksql/pull/4686#pullrequestreview-433568212", "createdAt": "2020-06-18T19:05:42Z", "commit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowNTo0MlrOGl8fsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOTowNTo0MlrOGl8fsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ0MTY0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            `id`, of the same SQL type. The `clicks` stream  doesn't have a defined key, \n          \n          \n            \n            `id`, of the same SQL type. The `clicks` stream doesn't have a defined key,", "url": "https://github.com/confluentinc/ksql/pull/4686#discussion_r442441649", "createdAt": "2020-06-18T19:05:42Z", "author": {"login": "JimGalasyn"}, "path": "docs/developer-guide/joins/partition-data.md", "diffHunk": "@@ -35,61 +37,48 @@ the stream, which implicitly defines the correct key for it.\n \n ksqlDB requires keys to use the `KAFKA` format. For more information, see\n [Serialization Formats](../serialization.md#serialization-formats). If internally\n-repartitioning, ksqlDB uses the correct format.\n-\n-Because you can only use the primary key of a table as a joining column, it's\n-important to understand how keys are defined.\n-\n-When you create a table by using a CREATE TABLE statement you define the key in the schema and\n-it must be the same as that of the records in the underlying {{ site.ak }} topic. As the\n-KAFKA format does not support named fields that key has no implicit name, so the key can be\n-given any name in the schema definition.\n-\n-When you create a table by using a CREATE TABLE AS SELECT statement, the key of\n-the resulting table is determined as follows:\n-\n-- If the statement contains neither a JOIN nor GROUP BY clause, the key type of the resulting\n-  table matches the key type of the source table, and the name matches the source unless the\n-  projection defines an alias for the column.\n-- If the statement contains a JOIN and no GROUP BY clause, the key type of the resulting table\n-  matches the type of the join columns. The key name is defined by these conditions:\n-    - FULL OUTER joins and joins on expressions other than column references have a\n-      system-generated name in the form `KSQL_COL_n`, where `n` is a positive integer,\n-      unless the projection defines an alias for the column.\n-    - For other joins that contain at least one column reference in their join criteria,\n-      the name matches the leftmost column reference in the join criteria.\n-- If the statement contains a GROUP BY clause, the grouping columns determine the key\n-  of the resulting table.\n-    - When grouping by a single column or STRUCT field, the name of the key column in the\n-      resulting table matches the name of the column or field, unless the projection includes\n-      an alias for the column or field. The type of the key column matches the column or field.\n-    - When grouping by a single expression that is not a column or STRUCT field, the resulting table\n-      has a system-generated key column name in the form `KSQL_COL_n`, where `n` is a positive\n-      integer, unless the projection contains an alias for the expression. The type of the\n-      column matches the result of the expression.\n-    - When grouping by multiple expressions, the resulting table has a system-generated key\n-      name in the form `KSQL_COL_n`, where `n` is a positive integer. The type of the column is\n-      a [SQL `STRING`](../../concepts/schemas), containing the grouping expressions concatenated\n-      together.\n+repartitioning, ksqlDB uses the correct format. If the data in your {{ site.ak }} topics \n+does not have a suitable key format, see [Key Requirements](syntax-reference.md#key-requirements).\n+\n+As the KAFKA format does not support serialize the column name within the data the key column name is \n+not important when it comes to joins. The key column type is important: for the join to be valid\n+both sides must have a key with the same SQL type.\n \n The following example shows a `users` table joined with a `clicks` stream\n-on the `userId` column. The `users` table has the correct primary key\n-`userId` that coincides with the joining column. But the `clicks` stream\n-doesn't have a defined key, so ksqlDB repartitions it on the joining\n-column (`userId`) to assign the key before performing the join.\n+on the click's `userId` column. The `users` table has a correct primary key,\n+`id`, of the same SQL type. The `clicks` stream  doesn't have a defined key, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTY4OTA4", "url": "https://github.com/confluentinc/ksql/pull/4686#pullrequestreview-433568908", "createdAt": "2020-06-18T19:06:42Z", "commit": {"oid": "924faea82b766af4018f3e833199386894e14ead"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80d328ff08edc79145236bcf21de4f9a9a5599b7", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/80d328ff08edc79145236bcf21de4f9a9a5599b7", "committedDate": "2020-06-18T19:46:40Z", "message": "Update docs/concepts/collections/streams.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ac786ecb33cf674d85066011598a28c5520c03b", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/5ac786ecb33cf674d85066011598a28c5520c03b", "committedDate": "2020-06-18T19:46:48Z", "message": "Update docs/concepts/collections/streams.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "451615ea4237a398c4f42bbeff05c06f2a45fcd2", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/451615ea4237a398c4f42bbeff05c06f2a45fcd2", "committedDate": "2020-06-18T19:46:56Z", "message": "Update docs/concepts/collections/tables.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "060edd1789406683b212644e3857365006b8c689", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/060edd1789406683b212644e3857365006b8c689", "committedDate": "2020-06-18T19:47:04Z", "message": "Update docs/concepts/queries/pull.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd2d69c3aba86b8988bab290ffda163f83ee11c3", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/fd2d69c3aba86b8988bab290ffda163f83ee11c3", "committedDate": "2020-06-18T19:47:12Z", "message": "Update docs/developer-guide/create-a-stream.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07b6592af47bb677a55c7b5ff9ed2f900ddcd618", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/07b6592af47bb677a55c7b5ff9ed2f900ddcd618", "committedDate": "2020-06-18T19:47:19Z", "message": "Update docs/developer-guide/create-a-stream.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ee0ea0c1c27c6d38a6b1114761244e63b9d236c", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/5ee0ea0c1c27c6d38a6b1114761244e63b9d236c", "committedDate": "2020-06-18T19:47:26Z", "message": "Update docs/developer-guide/create-a-stream.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d73b57a2aad90a24a353510ca75d83f27a14c11", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/6d73b57a2aad90a24a353510ca75d83f27a14c11", "committedDate": "2020-06-18T19:47:34Z", "message": "Update docs/developer-guide/create-a-stream.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fef855378fb1f4350661b13d50d4365d2a3b3e5", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/6fef855378fb1f4350661b13d50d4365d2a3b3e5", "committedDate": "2020-06-18T19:47:42Z", "message": "Update docs/developer-guide/create-a-stream.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64679b77579ac3d147137a582ec9df62d330ba94", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/64679b77579ac3d147137a582ec9df62d330ba94", "committedDate": "2020-06-18T19:47:49Z", "message": "Update docs/developer-guide/create-a-table.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf26e26fc3b1ae38a87dc2466b28042f729ebc22", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/bf26e26fc3b1ae38a87dc2466b28042f729ebc22", "committedDate": "2020-06-18T19:47:56Z", "message": "Update docs/developer-guide/create-a-table.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4ed114cada9d06a23a5fd83ca5694ae446ad962", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/a4ed114cada9d06a23a5fd83ca5694ae446ad962", "committedDate": "2020-06-18T19:48:04Z", "message": "Update docs/developer-guide/joins/join-streams-and-tables.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e539269247696e5ee92986048b423358052bafa", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/1e539269247696e5ee92986048b423358052bafa", "committedDate": "2020-06-18T19:56:56Z", "message": "Update docs/developer-guide/joins/join-streams-and-tables.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8d13bc76e34dd862c07360adbaff6a888715577", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/e8d13bc76e34dd862c07360adbaff6a888715577", "committedDate": "2020-06-18T19:57:03Z", "message": "Update docs/developer-guide/joins/join-streams-and-tables.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8144661c694a109fc530d4bda93ba70ee014ac01", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/8144661c694a109fc530d4bda93ba70ee014ac01", "committedDate": "2020-06-18T19:57:11Z", "message": "Update docs/developer-guide/joins/partition-data.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b0b76718a0366beff5254639fcdeb190d0b6446", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/3b0b76718a0366beff5254639fcdeb190d0b6446", "committedDate": "2020-06-18T19:57:18Z", "message": "Update docs/developer-guide/joins/partition-data.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8873086e883458c21468344bc97d4ed472ec7b6", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/a8873086e883458c21468344bc97d4ed472ec7b6", "committedDate": "2020-06-18T19:57:25Z", "message": "Update docs/developer-guide/joins/partition-data.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6afb78fcba4ce886254b3735bbcf8d5836a6a8b7", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/6afb78fcba4ce886254b3735bbcf8d5836a6a8b7", "committedDate": "2020-06-18T19:57:31Z", "message": "Update docs/developer-guide/joins/partition-data.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c10886fab24384598329252cc6022ed7d50fdcb", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/2c10886fab24384598329252cc6022ed7d50fdcb", "committedDate": "2020-06-18T19:57:38Z", "message": "Update docs/developer-guide/joins/partition-data.md\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4905, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}