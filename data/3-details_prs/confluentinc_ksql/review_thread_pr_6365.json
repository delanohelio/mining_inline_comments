{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4Njg4NzUy", "number": 6365, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDowOTo1MlrOEq506w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDowOTo1NVrOEq51Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDIzMDgzOnYy", "diffSide": "RIGHT", "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/builder/KsqlQueryBuilderTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDowOTo1MlrOHdYIkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMTowODozN1rOHdaAuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU2NjE2Mg==", "bodyText": "Is it worth adding a unit test to cover the merge() functionality required for tracking both key and value schema for the same logger prefix? I don't see coverage for that at the moment but I also don't feel too strongly since this code is essentially test-only.", "url": "https://github.com/confluentinc/ksql/pull/6365#discussion_r500566162", "createdAt": "2020-10-06T20:09:52Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/builder/KsqlQueryBuilderTest.java", "diffHunk": "@@ -234,39 +241,44 @@ public void shouldBuildValueSerde() {\n   }\n \n   @Test\n-  public void shouldTrackSchemasUsed() {\n+  public void shouldTrackKeySchemasUsed() {\n     // When:\n-    ksqlQueryBuilder.buildValueSerde(\n+    ksqlQueryBuilder.buildKeySerde(\n         FORMAT_INFO,\n-        SOME_SCHEMA,\n+        PHYSICAL_SCHEMA,\n         queryContext\n     );\n \n     // Then:\n-    final Map<String, PhysicalSchema> schemas = ksqlQueryBuilder.getSchemas().getSchemas();\n+    final Map<String, SchemaInfo> schemas = ksqlQueryBuilder.getSchemas().getSchemas();\n     assertThat(schemas.entrySet(), hasSize(1));\n-    assertThat(schemas.get(\"fred.context\"), is(SOME_SCHEMA));\n+    assertThat(schemas.get(\"fred.context\"), is(new SchemaInfo(\n+        LOGICAL_SCHEMA,\n+        Optional.of(KeyFormat.nonWindowed(\n+            FormatInfo.of(\"AVRO\", ImmutableMap.of(\"fullSchemaName\", \"io.confluent.ksql\")),\n+            SerdeFeatures.of(SerdeFeature.UNWRAP_SINGLES))),\n+        Optional.empty()\n+    )));\n   }\n \n   @Test\n-  public void shouldTrackSchemasTakingIntoAccountSerdeFeatures() {\n-    // Given:\n-    final PhysicalSchema schema = PhysicalSchema.from(\n-        SOME_SCHEMA.logicalSchema(),\n-        SerdeFeatures.of(),\n-        SerdeFeatures.of(SerdeFeature.UNWRAP_SINGLES)\n-    );\n-\n+  public void shouldTrackValueSchemasUsed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8854de7a2b114d4d5be3b1ee525ec51bf0560a5c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU5MDU3MA==", "bodyText": "I'll add to the follow up PR.", "url": "https://github.com/confluentinc/ksql/pull/6365#discussion_r500590570", "createdAt": "2020-10-06T20:56:20Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/builder/KsqlQueryBuilderTest.java", "diffHunk": "@@ -234,39 +241,44 @@ public void shouldBuildValueSerde() {\n   }\n \n   @Test\n-  public void shouldTrackSchemasUsed() {\n+  public void shouldTrackKeySchemasUsed() {\n     // When:\n-    ksqlQueryBuilder.buildValueSerde(\n+    ksqlQueryBuilder.buildKeySerde(\n         FORMAT_INFO,\n-        SOME_SCHEMA,\n+        PHYSICAL_SCHEMA,\n         queryContext\n     );\n \n     // Then:\n-    final Map<String, PhysicalSchema> schemas = ksqlQueryBuilder.getSchemas().getSchemas();\n+    final Map<String, SchemaInfo> schemas = ksqlQueryBuilder.getSchemas().getSchemas();\n     assertThat(schemas.entrySet(), hasSize(1));\n-    assertThat(schemas.get(\"fred.context\"), is(SOME_SCHEMA));\n+    assertThat(schemas.get(\"fred.context\"), is(new SchemaInfo(\n+        LOGICAL_SCHEMA,\n+        Optional.of(KeyFormat.nonWindowed(\n+            FormatInfo.of(\"AVRO\", ImmutableMap.of(\"fullSchemaName\", \"io.confluent.ksql\")),\n+            SerdeFeatures.of(SerdeFeature.UNWRAP_SINGLES))),\n+        Optional.empty()\n+    )));\n   }\n \n   @Test\n-  public void shouldTrackSchemasTakingIntoAccountSerdeFeatures() {\n-    // Given:\n-    final PhysicalSchema schema = PhysicalSchema.from(\n-        SOME_SCHEMA.logicalSchema(),\n-        SerdeFeatures.of(),\n-        SerdeFeatures.of(SerdeFeature.UNWRAP_SINGLES)\n-    );\n-\n+  public void shouldTrackValueSchemasUsed() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU2NjE2Mg=="}, "originalCommit": {"oid": "8854de7a2b114d4d5be3b1ee525ec51bf0560a5c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU5NjkyMw==", "bodyText": "see #6366", "url": "https://github.com/confluentinc/ksql/pull/6365#discussion_r500596923", "createdAt": "2020-10-06T21:08:37Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-execution/src/test/java/io/confluent/ksql/execution/builder/KsqlQueryBuilderTest.java", "diffHunk": "@@ -234,39 +241,44 @@ public void shouldBuildValueSerde() {\n   }\n \n   @Test\n-  public void shouldTrackSchemasUsed() {\n+  public void shouldTrackKeySchemasUsed() {\n     // When:\n-    ksqlQueryBuilder.buildValueSerde(\n+    ksqlQueryBuilder.buildKeySerde(\n         FORMAT_INFO,\n-        SOME_SCHEMA,\n+        PHYSICAL_SCHEMA,\n         queryContext\n     );\n \n     // Then:\n-    final Map<String, PhysicalSchema> schemas = ksqlQueryBuilder.getSchemas().getSchemas();\n+    final Map<String, SchemaInfo> schemas = ksqlQueryBuilder.getSchemas().getSchemas();\n     assertThat(schemas.entrySet(), hasSize(1));\n-    assertThat(schemas.get(\"fred.context\"), is(SOME_SCHEMA));\n+    assertThat(schemas.get(\"fred.context\"), is(new SchemaInfo(\n+        LOGICAL_SCHEMA,\n+        Optional.of(KeyFormat.nonWindowed(\n+            FormatInfo.of(\"AVRO\", ImmutableMap.of(\"fullSchemaName\", \"io.confluent.ksql\")),\n+            SerdeFeatures.of(SerdeFeature.UNWRAP_SINGLES))),\n+        Optional.empty()\n+    )));\n   }\n \n   @Test\n-  public void shouldTrackSchemasTakingIntoAccountSerdeFeatures() {\n-    // Given:\n-    final PhysicalSchema schema = PhysicalSchema.from(\n-        SOME_SCHEMA.logicalSchema(),\n-        SerdeFeatures.of(),\n-        SerdeFeatures.of(SerdeFeature.UNWRAP_SINGLES)\n-    );\n-\n+  public void shouldTrackValueSchemasUsed() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU2NjE2Mg=="}, "originalCommit": {"oid": "8854de7a2b114d4d5be3b1ee525ec51bf0560a5c"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDIzMTA2OnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/model/SchemaNodeTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDowOTo1NVrOHdYIsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMTowODozNVrOHdaAqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU2NjE5Mw==", "bodyText": "nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public void shouldRoundNoKeyFormat() {\n          \n          \n            \n              public void shouldRoundTripNoKeyFormat() {\n          \n      \n    \n    \n  \n\nand similarly for the other test below.", "url": "https://github.com/confluentinc/ksql/pull/6365#discussion_r500566193", "createdAt": "2020-10-06T20:09:55Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/model/SchemaNodeTest.java", "diffHunk": "@@ -39,7 +49,12 @@ public void shouldRoundTrip() {\n   }\n \n   @Test\n-  public void shouldRoundTripWithoutFeatures() {\n-    ModelTester.assertRoundTrip(NO_SERDE_FEATURES);\n+  public void shouldRoundNoKeyFormat() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8854de7a2b114d4d5be3b1ee525ec51bf0560a5c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU5MDYwMg==", "bodyText": "I'll add to the follow up PR.", "url": "https://github.com/confluentinc/ksql/pull/6365#discussion_r500590602", "createdAt": "2020-10-06T20:56:24Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/model/SchemaNodeTest.java", "diffHunk": "@@ -39,7 +49,12 @@ public void shouldRoundTrip() {\n   }\n \n   @Test\n-  public void shouldRoundTripWithoutFeatures() {\n-    ModelTester.assertRoundTrip(NO_SERDE_FEATURES);\n+  public void shouldRoundNoKeyFormat() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU2NjE5Mw=="}, "originalCommit": {"oid": "8854de7a2b114d4d5be3b1ee525ec51bf0560a5c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU5NjkwNQ==", "bodyText": "see #6366", "url": "https://github.com/confluentinc/ksql/pull/6365#discussion_r500596905", "createdAt": "2020-10-06T21:08:35Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/model/SchemaNodeTest.java", "diffHunk": "@@ -39,7 +49,12 @@ public void shouldRoundTrip() {\n   }\n \n   @Test\n-  public void shouldRoundTripWithoutFeatures() {\n-    ModelTester.assertRoundTrip(NO_SERDE_FEATURES);\n+  public void shouldRoundNoKeyFormat() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU2NjE5Mw=="}, "originalCommit": {"oid": "8854de7a2b114d4d5be3b1ee525ec51bf0560a5c"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2665, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}