{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2MDYwMjAy", "number": 6663, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzo0Mjo0NVrOE8cOlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzo0NDo0OFrOE8cQZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODEyNTAyOnYy", "diffSide": "RIGHT", "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/EngineExecutor.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzo0Mjo0NVrOH4jwhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwOTozNToxMVrOH41IZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2ODE2Nw==", "bodyText": "This must have accidentally been introduced in the refactor.  I'm surprised it didn't show up in benchmarking if the threads were being leaked.  I think that technically, it would have been eventually garbage collected once the executor was GCed, but it is certainly preferable to shut it down immediately.", "url": "https://github.com/confluentinc/ksql/pull/6663#discussion_r529068167", "createdAt": "2020-11-23T23:42:45Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/EngineExecutor.java", "diffHunk": "@@ -164,10 +164,12 @@ PullQueryResult executePullQuery(\n           ksqlConfig,\n           analysis,\n           statement);\n-      final HARouting routing = new HARouting(\n+\n+      try (HARouting routing = new HARouting(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0400597448ec04159d8a9bc151856302bb19ca"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA3MTI3NQ==", "bodyText": "Are we sure the change was properly picked up when benchmarked? It looks like it used to be created once per PullQueryExecutor (which I think was once per request). It could be that the benchmarks didn't catch it because the newFixedThreadPool is good about not allocating 100 threads unless it needs them (so we were really only leaking one thread each time). I still suspect that this would have very quickly caused OOM (cannot allocate native thread) after we issue a few thousand pull queries.", "url": "https://github.com/confluentinc/ksql/pull/6663#discussion_r529071275", "createdAt": "2020-11-23T23:51:17Z", "author": {"login": "agavra"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/EngineExecutor.java", "diffHunk": "@@ -164,10 +164,12 @@ PullQueryResult executePullQuery(\n           ksqlConfig,\n           analysis,\n           statement);\n-      final HARouting routing = new HARouting(\n+\n+      try (HARouting routing = new HARouting(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2ODE2Nw=="}, "originalCommit": {"oid": "8c0400597448ec04159d8a9bc151856302bb19ca"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA3Mjc0Mg==", "bodyText": "It is GC'd, but leaving threads lying around is not good practice as they are an OS resource and hold a chunk of memory too.  A bug such as this can result in requests failing due to insufficient resources, especially in something like pull queries that can see high call volumes.", "url": "https://github.com/confluentinc/ksql/pull/6663#discussion_r529072742", "createdAt": "2020-11-23T23:55:29Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/EngineExecutor.java", "diffHunk": "@@ -164,10 +164,12 @@ PullQueryResult executePullQuery(\n           ksqlConfig,\n           analysis,\n           statement);\n-      final HARouting routing = new HARouting(\n+\n+      try (HARouting routing = new HARouting(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2ODE2Nw=="}, "originalCommit": {"oid": "8c0400597448ec04159d8a9bc151856302bb19ca"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA3NjA0OQ==", "bodyText": "PullQueryExecutor was created once per application before the refactor.  @vpapavas did benchmark this with the new physical plan code, but it must not have shown up only doing high qps for ~30 minutes at a time.  Well, good to catch before hitting the soak cluster.", "url": "https://github.com/confluentinc/ksql/pull/6663#discussion_r529076049", "createdAt": "2020-11-24T00:05:21Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/EngineExecutor.java", "diffHunk": "@@ -164,10 +164,12 @@ PullQueryResult executePullQuery(\n           ksqlConfig,\n           analysis,\n           statement);\n-      final HARouting routing = new HARouting(\n+\n+      try (HARouting routing = new HARouting(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2ODE2Nw=="}, "originalCommit": {"oid": "8c0400597448ec04159d8a9bc151856302bb19ca"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA4NzA4NQ==", "bodyText": "If it's not too big of a change for this PR, it would be great to make the threadpool one per application.  Otherwise we can do it after this PR.  We should make sure we do that before 0.15 regardless.", "url": "https://github.com/confluentinc/ksql/pull/6663#discussion_r529087085", "createdAt": "2020-11-24T00:38:12Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/EngineExecutor.java", "diffHunk": "@@ -164,10 +164,12 @@ PullQueryResult executePullQuery(\n           ksqlConfig,\n           analysis,\n           statement);\n-      final HARouting routing = new HARouting(\n+\n+      try (HARouting routing = new HARouting(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2ODE2Nw=="}, "originalCommit": {"oid": "8c0400597448ec04159d8a9bc151856302bb19ca"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTM1MjgwNA==", "bodyText": "#6666", "url": "https://github.com/confluentinc/ksql/pull/6663#discussion_r529352804", "createdAt": "2020-11-24T09:35:11Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-engine/src/main/java/io/confluent/ksql/engine/EngineExecutor.java", "diffHunk": "@@ -164,10 +164,12 @@ PullQueryResult executePullQuery(\n           ksqlConfig,\n           analysis,\n           statement);\n-      final HARouting routing = new HARouting(\n+\n+      try (HARouting routing = new HARouting(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2ODE2Nw=="}, "originalCommit": {"oid": "8c0400597448ec04159d8a9bc151856302bb19ca"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODEyOTY3OnYy", "diffSide": "RIGHT", "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/rest/RestQueryTranslationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzo0NDo0OFrOH4jzcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QyMzo1MjoyMVrOH4j-Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2ODkxMw==", "bodyText": "Very useful.  How did you discover the leak without this kind of test in place to begin with?", "url": "https://github.com/confluentinc/ksql/pull/6663#discussion_r529068913", "createdAt": "2020-11-23T23:44:48Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/rest/RestQueryTranslationTest.java", "diffHunk": "@@ -121,6 +127,17 @@ public void tearDown() {\n     REST_APP.closePersistentQueries();\n     REST_APP.dropSourcesExcept();\n     TEST_HARNESS.getKafkaCluster().deleteAllTopics(TestKsqlRestApp.getCommandTopicName());\n+\n+    if (STARTING_THREADS.get() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c0400597448ec04159d8a9bc151856302bb19ca"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA3MTY1OA==", "bodyText": "I knew there was an issue because RQTT wouldn't run locally in the IDE for me.  Then investigated  with VisualVM :D", "url": "https://github.com/confluentinc/ksql/pull/6663#discussion_r529071658", "createdAt": "2020-11-23T23:52:21Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-functional-tests/src/test/java/io/confluent/ksql/test/rest/RestQueryTranslationTest.java", "diffHunk": "@@ -121,6 +127,17 @@ public void tearDown() {\n     REST_APP.closePersistentQueries();\n     REST_APP.dropSourcesExcept();\n     TEST_HARNESS.getKafkaCluster().deleteAllTopics(TestKsqlRestApp.getCommandTopicName());\n+\n+    if (STARTING_THREADS.get() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTA2ODkxMw=="}, "originalCommit": {"oid": "8c0400597448ec04159d8a9bc151856302bb19ca"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2452, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}