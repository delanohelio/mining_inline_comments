{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3ODUyNDU4", "number": 6135, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoyMjowOVrOEfeouA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjoxMTo1MFrOEfh2cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDQzMjU2OnYy", "diffSide": "RIGHT", "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoyMjowOVrOHLxjgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNDoyMjowOVrOHLxjgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjEwODI4OA==", "bodyText": "Adding a validator here removes the need for a null check later.", "url": "https://github.com/confluentinc/ksql/pull/6135#discussion_r482108288", "createdAt": "2020-09-02T14:22:09Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-common/src/main/java/io/confluent/ksql/util/KsqlConfig.java", "diffHunk": "@@ -523,6 +523,7 @@ private static ConfigDef buildConfigDef(final ConfigGeneration generation) {\n             SCHEMA_REGISTRY_URL_PROPERTY,\n             ConfigDef.Type.STRING,\n             \"\",\n+            new ConfigDef.NonNullValidator(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8927ae9cc4ec537040b0637fbcfb041aa672e099"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDk1OTIyOnYy", "diffSide": "RIGHT", "path": "ksqldb-serde/src/test/java/io/confluent/ksql/serde/connect/ConnectFormatTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNjoxMTo1MFrOHL2uJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNzoyMTo0NlrOHL5mMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE5MjkzNA==", "bodyText": "Add two more tests to validate the negative cases?\nif (unwrapSingle && !singleField) {\n      throw new KsqlException(\"'\" + CommonCreateConfigs.WRAP_SINGLE_VALUE + \"' \"\n          + \"is only valid for single-field value schemas\");\n    }", "url": "https://github.com/confluentinc/ksql/pull/6135#discussion_r482192934", "createdAt": "2020-09-02T16:11:50Z", "author": {"login": "spena"}, "path": "ksqldb-serde/src/test/java/io/confluent/ksql/serde/connect/ConnectFormatTest.java", "diffHunk": "@@ -95,6 +105,26 @@ public void shouldConvertTransformedConnectSchemaToColumns() {\n     assertThat(result.get(1).type(), is(SqlTypes.BIGINT));\n   }\n \n+  @Test\n+  public void shouldSupportPrimitiveSchemas() {\n+    // When:\n+    format.toParsedSchema(\n+        ImmutableList.of(column(\"bob\", SqlTypes.INTEGER)),\n+        SerdeOptions.of(SerdeOption.UNWRAP_SINGLE_VALUES),\n+        formatInfo\n+    );\n+\n+    // Then:\n+    assertThat(capturedConnectSchema, is(SchemaBuilder.int32().optional().build()));\n+  }\n+\n+  private static SimpleColumn column(final String name, final SqlType sqlType) {\n+    final SimpleColumn column = mock(SimpleColumn.class);\n+    when(column.name()).thenReturn(ColumnName.of(name));\n+    when(column.type()).thenReturn(sqlType);\n+    return column;\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8927ae9cc4ec537040b0637fbcfb041aa672e099"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI0MDA0OA==", "bodyText": "That code added to ConnectFormat will be removed again in the next PR, (its code duplication at the moment), hence no tests.", "url": "https://github.com/confluentinc/ksql/pull/6135#discussion_r482240048", "createdAt": "2020-09-02T17:21:46Z", "author": {"login": "big-andy-coates"}, "path": "ksqldb-serde/src/test/java/io/confluent/ksql/serde/connect/ConnectFormatTest.java", "diffHunk": "@@ -95,6 +105,26 @@ public void shouldConvertTransformedConnectSchemaToColumns() {\n     assertThat(result.get(1).type(), is(SqlTypes.BIGINT));\n   }\n \n+  @Test\n+  public void shouldSupportPrimitiveSchemas() {\n+    // When:\n+    format.toParsedSchema(\n+        ImmutableList.of(column(\"bob\", SqlTypes.INTEGER)),\n+        SerdeOptions.of(SerdeOption.UNWRAP_SINGLE_VALUES),\n+        formatInfo\n+    );\n+\n+    // Then:\n+    assertThat(capturedConnectSchema, is(SchemaBuilder.int32().optional().build()));\n+  }\n+\n+  private static SimpleColumn column(final String name, final SqlType sqlType) {\n+    final SimpleColumn column = mock(SimpleColumn.class);\n+    when(column.name()).thenReturn(ColumnName.of(name));\n+    when(column.type()).thenReturn(sqlType);\n+    return column;\n+  }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE5MjkzNA=="}, "originalCommit": {"oid": "8927ae9cc4ec537040b0637fbcfb041aa672e099"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2971, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}