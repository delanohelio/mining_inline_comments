{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMjM0OTA1", "number": 4297, "title": "fix: deadlock when closing transient push query", "bodyText": "Description\nfixes: #4296\nThe produce side not calls offer in a loop, with a short timeout, to try and put the row into the blocking queue. When the consume side closes the query, e.g. on an EOFException if the user has closed the connection, the query first closes the queue; setting a flag the producers are checking on each loop; causing any producers to exit the loop. Then it can safely close the KS topology.\nTesting done\nAdded unit tests and manual testing\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-01-13T17:26:26Z", "url": "https://github.com/confluentinc/ksql/pull/4297", "merged": true, "mergeCommit": {"oid": "6b5ce0c1a6f34891dcac88ad7454a06f3ed08f37"}, "closed": true, "closedAt": "2020-01-14T12:52:38Z", "author": {"login": "big-andy-coates"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb5_wtTAH2gAyMzYyMjM0OTA1OjljZmNiZDE1OTA3MTIyNjdmMzlhZWM3YTIxNTI5ZjY0YjI0YmI5NTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6OinYgH2gAyMzYyMjM0OTA1OmM2MDBjZTViMmE3Y2NjMTdlNWU3ZDVkMTk3NjcxMWM4MTVmYTFiMDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9cfcbd1590712267f39aec7a21529f64b24bb950", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/9cfcbd1590712267f39aec7a21529f64b24bb950", "committedDate": "2020-01-13T17:25:50Z", "message": "fix: deadlock when closing transient push query\n\nfixes: https://github.com/confluentinc/ksql/issues/4296\n\nThe produce side not calls `offer` in a loop, with a short timeout, to try and put the row into the blocking queue. When the consume side closes the query, e.g. on an `EOFException` if the user has closed the connection, the query first closes the queue; setting a flag the producers are checking on each loop; causing any producers to exit the loop. Then it can safely close the KS topology."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMDQxODU2", "url": "https://github.com/confluentinc/ksql/pull/4297#pullrequestreview-342041856", "createdAt": "2020-01-13T18:18:50Z", "commit": {"oid": "9cfcbd1590712267f39aec7a21529f64b24bb950"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODoxODo1MFrOFdACbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxODoxOTo1OFrOFdAElA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1MzY0NA==", "bodyText": "nit: the name makes it sound like a it's a queue of queries, not a blocking queue for a query. thoughts on BlockingEventQueue or BlockingRowQueue (a queue that fills up with events/rows)?", "url": "https://github.com/confluentinc/ksql/pull/4297#discussion_r365953644", "createdAt": "2020-01-13T18:18:50Z", "author": {"login": "agavra"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.query;\n+\n+import io.confluent.ksql.GenericRow;\n+import java.util.Collection;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.kafka.streams.KeyValue;\n+\n+/**\n+ * The queue between the Kafka-streams topology and the client connection.\n+ *\n+ * <p>The KS topology writes to the queue from its {@code StreamThread}, while the KSQL server\n+ * thread that is servicing the client request reads from the queue and writes to the client\n+ * socket.\n+ */\n+public interface BlockingQueryQueue {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cfcbd1590712267f39aec7a21529f64b24bb950"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1Mzk3OQ==", "bodyText": "would be nice to also document this (or add documentation to LimitHandler) to describe when exactly the limit is considered reached", "url": "https://github.com/confluentinc/ksql/pull/4297#discussion_r365953979", "createdAt": "2020-01-13T18:19:34Z", "author": {"login": "agavra"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.query;\n+\n+import io.confluent.ksql.GenericRow;\n+import java.util.Collection;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.kafka.streams.KeyValue;\n+\n+/**\n+ * The queue between the Kafka-streams topology and the client connection.\n+ *\n+ * <p>The KS topology writes to the queue from its {@code StreamThread}, while the KSQL server\n+ * thread that is servicing the client request reads from the queue and writes to the client\n+ * socket.\n+ */\n+public interface BlockingQueryQueue {\n+\n+  void setLimitHandler(LimitHandler limitHandler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cfcbd1590712267f39aec7a21529f64b24bb950"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk1NDE5Ng==", "bodyText": "self-referential javadoc?", "url": "https://github.com/confluentinc/ksql/pull/4297#discussion_r365954196", "createdAt": "2020-01-13T18:19:58Z", "author": {"login": "agavra"}, "path": "ksql-engine/src/main/java/io/confluent/ksql/query/BlockingQueryQueue.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.query;\n+\n+import io.confluent.ksql.GenericRow;\n+import java.util.Collection;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.kafka.streams.KeyValue;\n+\n+/**\n+ * The queue between the Kafka-streams topology and the client connection.\n+ *\n+ * <p>The KS topology writes to the queue from its {@code StreamThread}, while the KSQL server\n+ * thread that is servicing the client request reads from the queue and writes to the client\n+ * socket.\n+ */\n+public interface BlockingQueryQueue {\n+\n+  void setLimitHandler(LimitHandler limitHandler);\n+\n+  /**\n+   * Poll the queue for a single row\n+   *\n+   * @see BlockingQueryQueue#poll(long, TimeUnit)\n+   */\n+  KeyValue<String, GenericRow> poll(long timeout, TimeUnit unit)\n+      throws InterruptedException;\n+\n+  /**\n+   * Drain the queue to the supplied {@code collection}.\n+   *\n+   * @see BlockingQueryQueue#drainTo(Collection)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cfcbd1590712267f39aec7a21529f64b24bb950"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c30385e68401fbc2599e74f5ca8d009c865704ee", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/c30385e68401fbc2599e74f5ca8d009c865704ee", "committedDate": "2020-01-14T10:35:27Z", "message": "fix: spotbugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c600ce5b2a7ccc17e5e7d5d1976711c815fa1b06", "author": {"user": {"login": "big-andy-coates", "name": "Andy Coates"}}, "url": "https://github.com/confluentinc/ksql/commit/c600ce5b2a7ccc17e5e7d5d1976711c815fa1b06", "committedDate": "2020-01-14T10:39:01Z", "message": "chore: make Almog's requested changes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 79, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}