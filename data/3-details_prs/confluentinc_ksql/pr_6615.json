{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwOTMyMTg2", "number": 6615, "title": "feat: Adds logging for every request to ksqlDB", "bodyText": "Description\nAdds logging to every request that comes in with standard fields so it's easier to monitor incoming traffic.\nTesting done\nRan unit tests and manually tested.\nReviewer checklist\n\n Ensure docs are updated if necessary. (eg. if a user visible feature is being added or changed).\n Ensure relevant issues are linked (description should include text like \"Fixes #\")", "createdAt": "2020-11-14T01:33:23Z", "url": "https://github.com/confluentinc/ksql/pull/6615", "merged": true, "mergeCommit": {"oid": "57b0c91380754e1de36527bd3254f67d42b9083e"}, "closed": true, "closedAt": "2020-11-30T19:39:20Z", "author": {"login": "AlanConfluent"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdcRc0rgH2gAyNTIwOTMyMTg2OjhjYWFhMzQwYjJjNzYxZDc4Y2M4N2Y2MjI5Y2NjYzk0OWZkZWViNmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfxrsvAH2gAyNTIwOTMyMTg2OjMyZjZiOGViNzczODgwNTc5Mjc3NzQ3NzRkMzdmZDMyMDJjODZjN2U=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8caaa340b2c761d78cc87f6229cccc949fdeeb6a", "author": {"user": {"login": "AlanConfluent", "name": "Alan Sheinberg"}}, "url": "https://github.com/confluentinc/ksql/commit/8caaa340b2c761d78cc87f6229cccc949fdeeb6a", "committedDate": "2020-11-14T01:26:59Z", "message": "feat: Adds logging for every request that comes in"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "295a0a875157739b45323f5a385e51851f801e5e", "author": {"user": {"login": "AlanConfluent", "name": "Alan Sheinberg"}}, "url": "https://github.com/confluentinc/ksql/commit/295a0a875157739b45323f5a385e51851f801e5e", "committedDate": "2020-11-16T19:05:54Z", "message": "Feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTE3MTYw", "url": "https://github.com/confluentinc/ksql/pull/6615#pullrequestreview-531917160", "createdAt": "2020-11-16T23:56:18Z", "commit": {"oid": "295a0a875157739b45323f5a385e51851f801e5e"}, "state": "APPROVED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMzo1NjoxOFrOH0dyog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMzo1ODozNlrOH0d7fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NjA5OA==", "bodyText": "Can we add a validator on the config to ensure that the config parses properly? Then we can throw a ConfigException rather than IllegalStateException.", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r524776098", "createdAt": "2020-11-16T23:56:18Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LoggingHandler implements Handler<RoutingContext> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(LoggingHandler.class);\n+  static final String HTTP_HEADER_USER_AGENT = \"User-Agent\";\n+\n+  private final Set<Integer> skipResponseCodes;\n+  private final Consumer<String> logger;\n+\n+  public LoggingHandler(final Server server) {\n+    this(server, LOG::info);\n+  }\n+\n+  @VisibleForTesting\n+  LoggingHandler(final Server server, final Consumer<String> logger) {\n+    this.skipResponseCodes = getSkipResponseCodes(server.getConfig());\n+    this.logger = logger;\n+  }\n+\n+  private static Set<Integer> getSkipResponseCodes(final KsqlRestConfig config) {\n+    final Set<Integer> skipCodes = config.getList(KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG)\n+        .stream()\n+        .map(responseCode -> {\n+          try {\n+            return Integer.parseInt(responseCode);\n+          } catch (NumberFormatException e) {\n+            throw new IllegalStateException(\"Configured bad response code \" + responseCode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295a0a875157739b45323f5a385e51851f801e5e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NjE2Nw==", "bodyText": "I don't think this comment adds anything -- I was also confused the first time I read it since I thought it was describing the line below.", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r524776167", "createdAt": "2020-11-16T23:56:23Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LoggingHandler implements Handler<RoutingContext> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(LoggingHandler.class);\n+  static final String HTTP_HEADER_USER_AGENT = \"User-Agent\";\n+\n+  private final Set<Integer> skipResponseCodes;\n+  private final Consumer<String> logger;\n+\n+  public LoggingHandler(final Server server) {\n+    this(server, LOG::info);\n+  }\n+\n+  @VisibleForTesting\n+  LoggingHandler(final Server server, final Consumer<String> logger) {\n+    this.skipResponseCodes = getSkipResponseCodes(server.getConfig());\n+    this.logger = logger;\n+  }\n+\n+  private static Set<Integer> getSkipResponseCodes(final KsqlRestConfig config) {\n+    final Set<Integer> skipCodes = config.getList(KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG)\n+        .stream()\n+        .map(responseCode -> {\n+          try {\n+            return Integer.parseInt(responseCode);\n+          } catch (NumberFormatException e) {\n+            throw new IllegalStateException(\"Configured bad response code \" + responseCode);\n+          }\n+        }).collect(ImmutableSet.toImmutableSet());\n+    return skipCodes;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    // If we wanted to log at the beginning of a request, it would go here.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295a0a875157739b45323f5a385e51851f801e5e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NjE4Ng==", "bodyText": "What's the purpose of this? Why would we have a situation where an erroneous response code was returned with no message, and why would we want to log the body in this case?", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r524776186", "createdAt": "2020-11-16T23:56:24Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LoggingHandler implements Handler<RoutingContext> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(LoggingHandler.class);\n+  static final String HTTP_HEADER_USER_AGENT = \"User-Agent\";\n+\n+  private final Set<Integer> skipResponseCodes;\n+  private final Consumer<String> logger;\n+\n+  public LoggingHandler(final Server server) {\n+    this(server, LOG::info);\n+  }\n+\n+  @VisibleForTesting\n+  LoggingHandler(final Server server, final Consumer<String> logger) {\n+    this.skipResponseCodes = getSkipResponseCodes(server.getConfig());\n+    this.logger = logger;\n+  }\n+\n+  private static Set<Integer> getSkipResponseCodes(final KsqlRestConfig config) {\n+    final Set<Integer> skipCodes = config.getList(KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG)\n+        .stream()\n+        .map(responseCode -> {\n+          try {\n+            return Integer.parseInt(responseCode);\n+          } catch (NumberFormatException e) {\n+            throw new IllegalStateException(\"Configured bad response code \" + responseCode);\n+          }\n+        }).collect(ImmutableSet.toImmutableSet());\n+    return skipCodes;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    // If we wanted to log at the beginning of a request, it would go here.\n+    routingContext.addEndHandler(ar -> {\n+      // After the response is complete, log results here.\n+      if (skipResponseCodes.contains(routingContext.response().getStatusCode())) {\n+        return;\n+      }\n+      String errorMessage = \"none\";\n+      if (routingContext.response().getStatusCode() > 300) {\n+        errorMessage = routingContext.response().getStatusMessage();\n+        if (Strings.isNullOrEmpty(errorMessage)) {\n+          errorMessage = routingContext.getBodyAsString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295a0a875157739b45323f5a385e51851f801e5e"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NjIzOQ==", "bodyText": "Let's also add the HTTP method. (We used to have Jetty HTTP request logging. This is the information we had at the time: https://www.eclipse.org/jetty/documentation/current/configuring-jetty-request-logs.html#constructing-request-log-entry)", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r524776239", "createdAt": "2020-11-16T23:56:26Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LoggingHandler implements Handler<RoutingContext> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(LoggingHandler.class);\n+  static final String HTTP_HEADER_USER_AGENT = \"User-Agent\";\n+\n+  private final Set<Integer> skipResponseCodes;\n+  private final Consumer<String> logger;\n+\n+  public LoggingHandler(final Server server) {\n+    this(server, LOG::info);\n+  }\n+\n+  @VisibleForTesting\n+  LoggingHandler(final Server server, final Consumer<String> logger) {\n+    this.skipResponseCodes = getSkipResponseCodes(server.getConfig());\n+    this.logger = logger;\n+  }\n+\n+  private static Set<Integer> getSkipResponseCodes(final KsqlRestConfig config) {\n+    final Set<Integer> skipCodes = config.getList(KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG)\n+        .stream()\n+        .map(responseCode -> {\n+          try {\n+            return Integer.parseInt(responseCode);\n+          } catch (NumberFormatException e) {\n+            throw new IllegalStateException(\"Configured bad response code \" + responseCode);\n+          }\n+        }).collect(ImmutableSet.toImmutableSet());\n+    return skipCodes;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    // If we wanted to log at the beginning of a request, it would go here.\n+    routingContext.addEndHandler(ar -> {\n+      // After the response is complete, log results here.\n+      if (skipResponseCodes.contains(routingContext.response().getStatusCode())) {\n+        return;\n+      }\n+      String errorMessage = \"none\";\n+      if (routingContext.response().getStatusCode() > 300) {\n+        errorMessage = routingContext.response().getStatusMessage();\n+        if (Strings.isNullOrEmpty(errorMessage)) {\n+          errorMessage = routingContext.getBodyAsString();\n+        }\n+      }\n+      logger.accept(String.format(\n+          \"Request complete - %s %s status: %d, user agent: %s, request body: %d bytes,\"\n+              + \" error response: %s\",\n+          routingContext.request().remoteAddress().host(),\n+          routingContext.request().uri(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295a0a875157739b45323f5a385e51851f801e5e"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NjI5NQ==", "bodyText": "Is this just the size of the request body, or does it include the size of the headers as well? It'd be nice to have both. At minimum we should understand which this is.", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r524776295", "createdAt": "2020-11-16T23:56:30Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LoggingHandler implements Handler<RoutingContext> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(LoggingHandler.class);\n+  static final String HTTP_HEADER_USER_AGENT = \"User-Agent\";\n+\n+  private final Set<Integer> skipResponseCodes;\n+  private final Consumer<String> logger;\n+\n+  public LoggingHandler(final Server server) {\n+    this(server, LOG::info);\n+  }\n+\n+  @VisibleForTesting\n+  LoggingHandler(final Server server, final Consumer<String> logger) {\n+    this.skipResponseCodes = getSkipResponseCodes(server.getConfig());\n+    this.logger = logger;\n+  }\n+\n+  private static Set<Integer> getSkipResponseCodes(final KsqlRestConfig config) {\n+    final Set<Integer> skipCodes = config.getList(KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG)\n+        .stream()\n+        .map(responseCode -> {\n+          try {\n+            return Integer.parseInt(responseCode);\n+          } catch (NumberFormatException e) {\n+            throw new IllegalStateException(\"Configured bad response code \" + responseCode);\n+          }\n+        }).collect(ImmutableSet.toImmutableSet());\n+    return skipCodes;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    // If we wanted to log at the beginning of a request, it would go here.\n+    routingContext.addEndHandler(ar -> {\n+      // After the response is complete, log results here.\n+      if (skipResponseCodes.contains(routingContext.response().getStatusCode())) {\n+        return;\n+      }\n+      String errorMessage = \"none\";\n+      if (routingContext.response().getStatusCode() > 300) {\n+        errorMessage = routingContext.response().getStatusMessage();\n+        if (Strings.isNullOrEmpty(errorMessage)) {\n+          errorMessage = routingContext.getBodyAsString();\n+        }\n+      }\n+      logger.accept(String.format(\n+          \"Request complete - %s %s status: %d, user agent: %s, request body: %d bytes,\"\n+              + \" error response: %s\",\n+          routingContext.request().remoteAddress().host(),\n+          routingContext.request().uri(),\n+          routingContext.response().getStatusCode(),\n+          routingContext.request().getHeader(HTTP_HEADER_USER_AGENT),\n+          routingContext.request().bytesRead(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295a0a875157739b45323f5a385e51851f801e5e"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3Njg2OA==", "bodyText": "Add docs for this new config?", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r524776868", "createdAt": "2020-11-16T23:57:04Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -319,6 +319,11 @@\n       \"The key store certificate alias to be used for internal client requests. If not set, \"\n           + \"the system will fall back on the Vert.x default choice\";\n \n+  public static final String KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295a0a875157739b45323f5a385e51851f801e5e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NzIzMg==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  \"A list of response codes to skip logging\";\n          \n          \n            \n                  \"A list of HTTP response codes to skip during server request logging\";", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r524777232", "createdAt": "2020-11-16T23:57:26Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -319,6 +319,11 @@\n       \"The key store certificate alias to be used for internal client requests. If not set, \"\n           + \"the system will fall back on the Vert.x default choice\";\n \n+  public static final String KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG =\n+      KSQL_CONFIG_PREFIX + \"logging.skip.response.codes\";\n+  private static final String KSQL_LOGGING_SKIP_RESPONSE_CODES_DOC =\n+      \"A list of response codes to skip logging\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295a0a875157739b45323f5a385e51851f801e5e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NzMxMQ==", "bodyText": "nit: these three lines can be moved into setUp() and removed from the individual tests.", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r524777311", "createdAt": "2020-11-16T23:57:31Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/server/LoggingHandlerTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.api.server.LoggingHandler.HTTP_HEADER_USER_AGENT;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.net.SocketAddress;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.function.Consumer;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LoggingHandlerTest {\n+\n+  @Mock\n+  private Server server;\n+  @Mock\n+  private Consumer<String> logger;\n+  @Mock\n+  private RoutingContext routingContext;\n+  @Mock\n+  private KsqlRestConfig ksqlRestConfig;\n+  @Mock\n+  private HttpServerRequest request;\n+  @Mock\n+  private HttpServerResponse response;\n+  @Mock\n+  private SocketAddress socketAddress;\n+  @Captor\n+  private ArgumentCaptor<String> logStringCaptor;\n+  @Captor\n+  private ArgumentCaptor<Handler<AsyncResult<Void>>> endCallback;\n+\n+  private LoggingHandler loggingHandler;\n+\n+\n+  @Before\n+  public void setUp() {\n+    when(server.getConfig()).thenReturn(ksqlRestConfig);\n+    when(routingContext.response()).thenReturn(response);\n+    when(routingContext.request()).thenReturn(request);\n+    when(request.remoteAddress()).thenReturn(socketAddress);\n+    when(ksqlRestConfig.getList(any())).thenReturn(ImmutableList.of(\"401\"));\n+    loggingHandler = new LoggingHandler(server, logger);\n+  }\n+\n+  @Test\n+  public void shouldProduceLog() {\n+    when(response.getStatusCode()).thenReturn(200);\n+    when(request.uri()).thenReturn(\"/query\");\n+    when(request.getHeader(HTTP_HEADER_USER_AGENT)).thenReturn(\"bot\");\n+    when(socketAddress.host()).thenReturn(\"123.111.222.333\");\n+    when(request.bytesRead()).thenReturn(3456L);\n+    loggingHandler.handle(routingContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295a0a875157739b45323f5a385e51851f801e5e"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3ODM2NA==", "bodyText": "nit: can we follow the Given / When / Then pattern for these new tests, as we do throughout the rest of the repo? I think it helps pretty significantly with readable, especially for longer tests.", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r524778364", "createdAt": "2020-11-16T23:58:36Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/server/LoggingHandlerTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.api.server.LoggingHandler.HTTP_HEADER_USER_AGENT;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.net.SocketAddress;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.function.Consumer;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LoggingHandlerTest {\n+\n+  @Mock\n+  private Server server;\n+  @Mock\n+  private Consumer<String> logger;\n+  @Mock\n+  private RoutingContext routingContext;\n+  @Mock\n+  private KsqlRestConfig ksqlRestConfig;\n+  @Mock\n+  private HttpServerRequest request;\n+  @Mock\n+  private HttpServerResponse response;\n+  @Mock\n+  private SocketAddress socketAddress;\n+  @Captor\n+  private ArgumentCaptor<String> logStringCaptor;\n+  @Captor\n+  private ArgumentCaptor<Handler<AsyncResult<Void>>> endCallback;\n+\n+  private LoggingHandler loggingHandler;\n+\n+\n+  @Before\n+  public void setUp() {\n+    when(server.getConfig()).thenReturn(ksqlRestConfig);\n+    when(routingContext.response()).thenReturn(response);\n+    when(routingContext.request()).thenReturn(request);\n+    when(request.remoteAddress()).thenReturn(socketAddress);\n+    when(ksqlRestConfig.getList(any())).thenReturn(ImmutableList.of(\"401\"));\n+    loggingHandler = new LoggingHandler(server, logger);\n+  }\n+\n+  @Test\n+  public void shouldProduceLog() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295a0a875157739b45323f5a385e51851f801e5e"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff2e715cadb4a7e7bbfc57d9d2dedf45b7524a7e", "author": {"user": {"login": "AlanConfluent", "name": "Alan Sheinberg"}}, "url": "https://github.com/confluentinc/ksql/commit/ff2e715cadb4a7e7bbfc57d9d2dedf45b7524a7e", "committedDate": "2020-11-20T23:18:20Z", "message": "Feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "051a4ddd2274bf6963fd620dcc989b82c300f7b5", "author": {"user": {"login": "AlanConfluent", "name": "Alan Sheinberg"}}, "url": "https://github.com/confluentinc/ksql/commit/051a4ddd2274bf6963fd620dcc989b82c300f7b5", "committedDate": "2020-11-20T23:33:24Z", "message": "lint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyODU0MTQ0", "url": "https://github.com/confluentinc/ksql/pull/6615#pullrequestreview-532854144", "createdAt": "2020-11-17T22:09:10Z", "commit": {"oid": "295a0a875157739b45323f5a385e51851f801e5e"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjowOToxMFrOH1Nfpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMzoxODowOFrOH3jyrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NzY3MQ==", "bodyText": "Done.  Added validator.  It's somewhat irritating that you can't actually do the parsing as well as part of the validation stage because I effectively have to parse again.", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r525557671", "createdAt": "2020-11-17T22:09:10Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LoggingHandler implements Handler<RoutingContext> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(LoggingHandler.class);\n+  static final String HTTP_HEADER_USER_AGENT = \"User-Agent\";\n+\n+  private final Set<Integer> skipResponseCodes;\n+  private final Consumer<String> logger;\n+\n+  public LoggingHandler(final Server server) {\n+    this(server, LOG::info);\n+  }\n+\n+  @VisibleForTesting\n+  LoggingHandler(final Server server, final Consumer<String> logger) {\n+    this.skipResponseCodes = getSkipResponseCodes(server.getConfig());\n+    this.logger = logger;\n+  }\n+\n+  private static Set<Integer> getSkipResponseCodes(final KsqlRestConfig config) {\n+    final Set<Integer> skipCodes = config.getList(KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG)\n+        .stream()\n+        .map(responseCode -> {\n+          try {\n+            return Integer.parseInt(responseCode);\n+          } catch (NumberFormatException e) {\n+            throw new IllegalStateException(\"Configured bad response code \" + responseCode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NjA5OA=="}, "originalCommit": {"oid": "295a0a875157739b45323f5a385e51851f801e5e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1Nzc4OA==", "bodyText": "Makes sense.  Removed.", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r525557788", "createdAt": "2020-11-17T22:09:25Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LoggingHandler implements Handler<RoutingContext> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(LoggingHandler.class);\n+  static final String HTTP_HEADER_USER_AGENT = \"User-Agent\";\n+\n+  private final Set<Integer> skipResponseCodes;\n+  private final Consumer<String> logger;\n+\n+  public LoggingHandler(final Server server) {\n+    this(server, LOG::info);\n+  }\n+\n+  @VisibleForTesting\n+  LoggingHandler(final Server server, final Consumer<String> logger) {\n+    this.skipResponseCodes = getSkipResponseCodes(server.getConfig());\n+    this.logger = logger;\n+  }\n+\n+  private static Set<Integer> getSkipResponseCodes(final KsqlRestConfig config) {\n+    final Set<Integer> skipCodes = config.getList(KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG)\n+        .stream()\n+        .map(responseCode -> {\n+          try {\n+            return Integer.parseInt(responseCode);\n+          } catch (NumberFormatException e) {\n+            throw new IllegalStateException(\"Configured bad response code \" + responseCode);\n+          }\n+        }).collect(ImmutableSet.toImmutableSet());\n+    return skipCodes;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    // If we wanted to log at the beginning of a request, it would go here.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NjE2Nw=="}, "originalCommit": {"oid": "295a0a875157739b45323f5a385e51851f801e5e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1ODU3Ng==", "bodyText": "I was looking through the code and though it was possible to not set the status message.  Either way, in conforming to the Apache log format, I'm just going to remove this.", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r525558576", "createdAt": "2020-11-17T22:10:52Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LoggingHandler implements Handler<RoutingContext> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(LoggingHandler.class);\n+  static final String HTTP_HEADER_USER_AGENT = \"User-Agent\";\n+\n+  private final Set<Integer> skipResponseCodes;\n+  private final Consumer<String> logger;\n+\n+  public LoggingHandler(final Server server) {\n+    this(server, LOG::info);\n+  }\n+\n+  @VisibleForTesting\n+  LoggingHandler(final Server server, final Consumer<String> logger) {\n+    this.skipResponseCodes = getSkipResponseCodes(server.getConfig());\n+    this.logger = logger;\n+  }\n+\n+  private static Set<Integer> getSkipResponseCodes(final KsqlRestConfig config) {\n+    final Set<Integer> skipCodes = config.getList(KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG)\n+        .stream()\n+        .map(responseCode -> {\n+          try {\n+            return Integer.parseInt(responseCode);\n+          } catch (NumberFormatException e) {\n+            throw new IllegalStateException(\"Configured bad response code \" + responseCode);\n+          }\n+        }).collect(ImmutableSet.toImmutableSet());\n+    return skipCodes;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    // If we wanted to log at the beginning of a request, it would go here.\n+    routingContext.addEndHandler(ar -> {\n+      // After the response is complete, log results here.\n+      if (skipResponseCodes.contains(routingContext.response().getStatusCode())) {\n+        return;\n+      }\n+      String errorMessage = \"none\";\n+      if (routingContext.response().getStatusCode() > 300) {\n+        errorMessage = routingContext.response().getStatusMessage();\n+        if (Strings.isNullOrEmpty(errorMessage)) {\n+          errorMessage = routingContext.getBodyAsString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NjE4Ng=="}, "originalCommit": {"oid": "295a0a875157739b45323f5a385e51851f801e5e"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI3MDI2MA==", "bodyText": "Done.  I kept a mostly apache like log message with the addition of request body bytes.", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r527270260", "createdAt": "2020-11-19T23:22:53Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LoggingHandler implements Handler<RoutingContext> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(LoggingHandler.class);\n+  static final String HTTP_HEADER_USER_AGENT = \"User-Agent\";\n+\n+  private final Set<Integer> skipResponseCodes;\n+  private final Consumer<String> logger;\n+\n+  public LoggingHandler(final Server server) {\n+    this(server, LOG::info);\n+  }\n+\n+  @VisibleForTesting\n+  LoggingHandler(final Server server, final Consumer<String> logger) {\n+    this.skipResponseCodes = getSkipResponseCodes(server.getConfig());\n+    this.logger = logger;\n+  }\n+\n+  private static Set<Integer> getSkipResponseCodes(final KsqlRestConfig config) {\n+    final Set<Integer> skipCodes = config.getList(KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG)\n+        .stream()\n+        .map(responseCode -> {\n+          try {\n+            return Integer.parseInt(responseCode);\n+          } catch (NumberFormatException e) {\n+            throw new IllegalStateException(\"Configured bad response code \" + responseCode);\n+          }\n+        }).collect(ImmutableSet.toImmutableSet());\n+    return skipCodes;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    // If we wanted to log at the beginning of a request, it would go here.\n+    routingContext.addEndHandler(ar -> {\n+      // After the response is complete, log results here.\n+      if (skipResponseCodes.contains(routingContext.response().getStatusCode())) {\n+        return;\n+      }\n+      String errorMessage = \"none\";\n+      if (routingContext.response().getStatusCode() > 300) {\n+        errorMessage = routingContext.response().getStatusMessage();\n+        if (Strings.isNullOrEmpty(errorMessage)) {\n+          errorMessage = routingContext.getBodyAsString();\n+        }\n+      }\n+      logger.accept(String.format(\n+          \"Request complete - %s %s status: %d, user agent: %s, request body: %d bytes,\"\n+              + \" error response: %s\",\n+          routingContext.request().remoteAddress().host(),\n+          routingContext.request().uri(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NjIzOQ=="}, "originalCommit": {"oid": "295a0a875157739b45323f5a385e51851f801e5e"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI3MjQzOQ==", "bodyText": "It's just the body.  There's no API I've seen for the header size, though we do have access to the headers.  I was going to try to estimate the size, by looking at java objects, since from all of my research they're always ASCII, but this seems a bit hacky.  I can try that out if we really want that.", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r527272439", "createdAt": "2020-11-19T23:28:37Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Confluent Inc.\n+ *\n+ * Licensed under the Confluent Community License (the \"License\"); you may not use\n+ * this file except in compliance with the License.  You may obtain a copy of the\n+ * License at\n+ *\n+ * http://www.confluent.io/confluent-community-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OF ANY KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations under the License.\n+ */\n+\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.rest.server.KsqlRestConfig.KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.Handler;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LoggingHandler implements Handler<RoutingContext> {\n+\n+  private static final Logger LOG = LoggerFactory.getLogger(LoggingHandler.class);\n+  static final String HTTP_HEADER_USER_AGENT = \"User-Agent\";\n+\n+  private final Set<Integer> skipResponseCodes;\n+  private final Consumer<String> logger;\n+\n+  public LoggingHandler(final Server server) {\n+    this(server, LOG::info);\n+  }\n+\n+  @VisibleForTesting\n+  LoggingHandler(final Server server, final Consumer<String> logger) {\n+    this.skipResponseCodes = getSkipResponseCodes(server.getConfig());\n+    this.logger = logger;\n+  }\n+\n+  private static Set<Integer> getSkipResponseCodes(final KsqlRestConfig config) {\n+    final Set<Integer> skipCodes = config.getList(KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG)\n+        .stream()\n+        .map(responseCode -> {\n+          try {\n+            return Integer.parseInt(responseCode);\n+          } catch (NumberFormatException e) {\n+            throw new IllegalStateException(\"Configured bad response code \" + responseCode);\n+          }\n+        }).collect(ImmutableSet.toImmutableSet());\n+    return skipCodes;\n+  }\n+\n+  @Override\n+  public void handle(final RoutingContext routingContext) {\n+    // If we wanted to log at the beginning of a request, it would go here.\n+    routingContext.addEndHandler(ar -> {\n+      // After the response is complete, log results here.\n+      if (skipResponseCodes.contains(routingContext.response().getStatusCode())) {\n+        return;\n+      }\n+      String errorMessage = \"none\";\n+      if (routingContext.response().getStatusCode() > 300) {\n+        errorMessage = routingContext.response().getStatusMessage();\n+        if (Strings.isNullOrEmpty(errorMessage)) {\n+          errorMessage = routingContext.getBodyAsString();\n+        }\n+      }\n+      logger.accept(String.format(\n+          \"Request complete - %s %s status: %d, user agent: %s, request body: %d bytes,\"\n+              + \" error response: %s\",\n+          routingContext.request().remoteAddress().host(),\n+          routingContext.request().uri(),\n+          routingContext.response().getStatusCode(),\n+          routingContext.request().getHeader(HTTP_HEADER_USER_AGENT),\n+          routingContext.request().bytesRead(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NjI5NQ=="}, "originalCommit": {"oid": "295a0a875157739b45323f5a385e51851f801e5e"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI3MzAzMw==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r527273033", "createdAt": "2020-11-19T23:30:12Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -319,6 +319,11 @@\n       \"The key store certificate alias to be used for internal client requests. If not set, \"\n           + \"the system will fall back on the Vert.x default choice\";\n \n+  public static final String KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG =\n+      KSQL_CONFIG_PREFIX + \"logging.skip.response.codes\";\n+  private static final String KSQL_LOGGING_SKIP_RESPONSE_CODES_DOC =\n+      \"A list of response codes to skip logging\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NzIzMg=="}, "originalCommit": {"oid": "295a0a875157739b45323f5a385e51851f801e5e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAxODQ5OQ==", "bodyText": "Done", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528018499", "createdAt": "2020-11-20T23:12:14Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -319,6 +319,11 @@\n       \"The key store certificate alias to be used for internal client requests. If not set, \"\n           + \"the system will fall back on the Vert.x default choice\";\n \n+  public static final String KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3Njg2OA=="}, "originalCommit": {"oid": "295a0a875157739b45323f5a385e51851f801e5e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAyMDE0MA==", "bodyText": "I moved most of this to setup.  The handle line actually differs between tests.", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528020140", "createdAt": "2020-11-20T23:18:08Z", "author": {"login": "AlanConfluent"}, "path": "ksqldb-rest-app/src/test/java/io/confluent/ksql/api/server/LoggingHandlerTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package io.confluent.ksql.api.server;\n+\n+import static io.confluent.ksql.api.server.LoggingHandler.HTTP_HEADER_USER_AGENT;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.confluent.ksql.rest.server.KsqlRestConfig;\n+import io.vertx.core.AsyncResult;\n+import io.vertx.core.Handler;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.net.SocketAddress;\n+import io.vertx.ext.web.RoutingContext;\n+import java.util.function.Consumer;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class LoggingHandlerTest {\n+\n+  @Mock\n+  private Server server;\n+  @Mock\n+  private Consumer<String> logger;\n+  @Mock\n+  private RoutingContext routingContext;\n+  @Mock\n+  private KsqlRestConfig ksqlRestConfig;\n+  @Mock\n+  private HttpServerRequest request;\n+  @Mock\n+  private HttpServerResponse response;\n+  @Mock\n+  private SocketAddress socketAddress;\n+  @Captor\n+  private ArgumentCaptor<String> logStringCaptor;\n+  @Captor\n+  private ArgumentCaptor<Handler<AsyncResult<Void>>> endCallback;\n+\n+  private LoggingHandler loggingHandler;\n+\n+\n+  @Before\n+  public void setUp() {\n+    when(server.getConfig()).thenReturn(ksqlRestConfig);\n+    when(routingContext.response()).thenReturn(response);\n+    when(routingContext.request()).thenReturn(request);\n+    when(request.remoteAddress()).thenReturn(socketAddress);\n+    when(ksqlRestConfig.getList(any())).thenReturn(ImmutableList.of(\"401\"));\n+    loggingHandler = new LoggingHandler(server, logger);\n+  }\n+\n+  @Test\n+  public void shouldProduceLog() {\n+    when(response.getStatusCode()).thenReturn(200);\n+    when(request.uri()).thenReturn(\"/query\");\n+    when(request.getHeader(HTTP_HEADER_USER_AGENT)).thenReturn(\"bot\");\n+    when(socketAddress.host()).thenReturn(\"123.111.222.333\");\n+    when(request.bytesRead()).thenReturn(3456L);\n+    loggingHandler.handle(routingContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDc3NzMxMQ=="}, "originalCommit": {"oid": "295a0a875157739b45323f5a385e51851f801e5e"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1ODU0Mjcy", "url": "https://github.com/confluentinc/ksql/pull/6615#pullrequestreview-535854272", "createdAt": "2020-11-21T00:17:15Z", "commit": {"oid": "051a4ddd2274bf6963fd620dcc989b82c300f7b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDoxNzoxNVrOH3ktmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDoxNzoxNVrOH3ktmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzNTIyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This is a comma separated list of http response codes to skip when doing\n          \n          \n            \n            A comma-separated list of HTTP response codes to skip when doing", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528035224", "createdAt": "2020-11-21T00:17:15Z", "author": {"login": "JimGalasyn"}, "path": "docs/operate-and-deploy/installation/server-config/config-reference.md", "diffHunk": "@@ -607,6 +607,19 @@ property has the value `KSQL_PROCESSING_LOG`.\n Toggles whether or not the processing log should include rows in log\n messages. By default, this property has the value `false`.\n \n+### ksql.logging.skipped.response.codes\n+\n+This is a comma separated list of http response codes to skip when doing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "051a4ddd2274bf6963fd620dcc989b82c300f7b5"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1ODU0NTE4", "url": "https://github.com/confluentinc/ksql/pull/6615#pullrequestreview-535854518", "createdAt": "2020-11-21T00:18:23Z", "commit": {"oid": "051a4ddd2274bf6963fd620dcc989b82c300f7b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDoxODoyM1rOH3kugQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDoxODoyM1rOH3kugQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzNTQ1Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This is a list of path:rate_limit pairs, to rate limit the server request\n          \n          \n            \n            A list of `path:rate_limit` pairs, to limit the rate of server request", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528035457", "createdAt": "2020-11-21T00:18:23Z", "author": {"login": "JimGalasyn"}, "path": "docs/operate-and-deploy/installation/server-config/config-reference.md", "diffHunk": "@@ -607,6 +607,19 @@ property has the value `KSQL_PROCESSING_LOG`.\n Toggles whether or not the processing log should include rows in log\n messages. By default, this property has the value `false`.\n \n+### ksql.logging.skipped.response.codes\n+\n+This is a comma separated list of http response codes to skip when doing\n+request logging. This is useful for ignoring certain 4XX errors that you\n+might not want to show up in the logs.\n+\n+### ksql.logging.rate.limited.request.paths\n+\n+This is a list of path:rate_limit pairs, to rate limit the server request", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "051a4ddd2274bf6963fd620dcc989b82c300f7b5"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1ODU0NzQ4", "url": "https://github.com/confluentinc/ksql/pull/6615#pullrequestreview-535854748", "createdAt": "2020-11-21T00:19:27Z", "commit": {"oid": "051a4ddd2274bf6963fd620dcc989b82c300f7b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDoxOToyN1rOH3kvTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDoxOToyN1rOH3kvTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzNTY2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            such as for pull queries. It makes it possible to see the logs at a low rate\n          \n          \n            \n            such as for pull queries. This setting enables seeing the logs when the request rate is low", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528035660", "createdAt": "2020-11-21T00:19:27Z", "author": {"login": "JimGalasyn"}, "path": "docs/operate-and-deploy/installation/server-config/config-reference.md", "diffHunk": "@@ -607,6 +607,19 @@ property has the value `KSQL_PROCESSING_LOG`.\n Toggles whether or not the processing log should include rows in log\n messages. By default, this property has the value `false`.\n \n+### ksql.logging.skipped.response.codes\n+\n+This is a comma separated list of http response codes to skip when doing\n+request logging. This is useful for ignoring certain 4XX errors that you\n+might not want to show up in the logs.\n+\n+### ksql.logging.rate.limited.request.paths\n+\n+This is a list of path:rate_limit pairs, to rate limit the server request\n+logging.  This is useful for requests that are coming in at a high rate,\n+such as for pull queries. It makes it possible to see the logs at a low rate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "051a4ddd2274bf6963fd620dcc989b82c300f7b5"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d33faba6f01a8a950ed54a9d83c117af1551277", "author": {"user": {"login": "AlanConfluent", "name": "Alan Sheinberg"}}, "url": "https://github.com/confluentinc/ksql/commit/7d33faba6f01a8a950ed54a9d83c117af1551277", "committedDate": "2020-11-21T00:19:43Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1ODU0ODUw", "url": "https://github.com/confluentinc/ksql/pull/6615#pullrequestreview-535854850", "createdAt": "2020-11-21T00:19:55Z", "commit": {"oid": "051a4ddd2274bf6963fd620dcc989b82c300f7b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDoxOTo1NVrOH3kvvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDoxOTo1NVrOH3kvvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzNTc3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            of requests, but start dropping them when they go over the threshold.\n          \n          \n            \n            and dropping them when they go over the threshold.", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528035773", "createdAt": "2020-11-21T00:19:55Z", "author": {"login": "JimGalasyn"}, "path": "docs/operate-and-deploy/installation/server-config/config-reference.md", "diffHunk": "@@ -607,6 +607,19 @@ property has the value `KSQL_PROCESSING_LOG`.\n Toggles whether or not the processing log should include rows in log\n messages. By default, this property has the value `false`.\n \n+### ksql.logging.skipped.response.codes\n+\n+This is a comma separated list of http response codes to skip when doing\n+request logging. This is useful for ignoring certain 4XX errors that you\n+might not want to show up in the logs.\n+\n+### ksql.logging.rate.limited.request.paths\n+\n+This is a list of path:rate_limit pairs, to rate limit the server request\n+logging.  This is useful for requests that are coming in at a high rate,\n+such as for pull queries. It makes it possible to see the logs at a low rate\n+of requests, but start dropping them when they go over the threshold.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "051a4ddd2274bf6963fd620dcc989b82c300f7b5"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1ODU1MDE0", "url": "https://github.com/confluentinc/ksql/pull/6615#pullrequestreview-535855014", "createdAt": "2020-11-21T00:20:40Z", "commit": {"oid": "051a4ddd2274bf6963fd620dcc989b82c300f7b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d0425eeaaba14bc7b106ba350ecbc1678551e48", "author": {"user": {"login": "AlanConfluent", "name": "Alan Sheinberg"}}, "url": "https://github.com/confluentinc/ksql/commit/5d0425eeaaba14bc7b106ba350ecbc1678551e48", "committedDate": "2020-11-21T00:49:45Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Jim Galasyn <jim.galasyn@confluent.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e16849f59e290ca82cb75dc144e9201dfdecf71", "author": {"user": {"login": "AlanConfluent", "name": "Alan Sheinberg"}}, "url": "https://github.com/confluentinc/ksql/commit/3e16849f59e290ca82cb75dc144e9201dfdecf71", "committedDate": "2020-11-21T00:52:49Z", "message": "when, given, then"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NzIxMTEz", "url": "https://github.com/confluentinc/ksql/pull/6615#pullrequestreview-536721113", "createdAt": "2020-11-23T18:01:38Z", "commit": {"oid": "3e16849f59e290ca82cb75dc144e9201dfdecf71"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODowMTozOFrOH4ZR-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxODowMjoyMlrOH4ZTrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5NjUwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            A comma-separated list of HTTP response codes to skip when doing\n          \n          \n            \n            A comma-separated list of HTTP response codes to skip during server", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528896504", "createdAt": "2020-11-23T18:01:38Z", "author": {"login": "vcrfxia"}, "path": "docs/operate-and-deploy/installation/server-config/config-reference.md", "diffHunk": "@@ -607,6 +607,19 @@ property has the value `KSQL_PROCESSING_LOG`.\n Toggles whether or not the processing log should include rows in log\n messages. By default, this property has the value `false`.\n \n+### ksql.logging.skipped.response.codes\n+\n+A comma-separated list of HTTP response codes to skip when doing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e16849f59e290ca82cb75dc144e9201dfdecf71"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5NjYxOA==", "bodyText": "Can we make this ksql.logging.server.skipped.response.codes or similar to indicate that this is only for server request logging, in contrast to the ksql.logging.processing.* configs for the processing log? I considered suggesting ksql.logging.request.* rather than ksql.logging.server.*but I worry that a config such as ksql.logging.request.skipped.response.codes could be confusing. Maybe it's OK and that's actually better, unsure.\nIf we change the config name, we'll also have to update the docs. (Thanks for adding those!)", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528896618", "createdAt": "2020-11-23T18:01:51Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -319,10 +322,15 @@\n       \"The key store certificate alias to be used for internal client requests. If not set, \"\n           + \"the system will fall back on the Vert.x default choice\";\n \n-  public static final String KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG =\n-      KSQL_CONFIG_PREFIX + \"logging.skip.response.codes\";\n-  private static final String KSQL_LOGGING_SKIP_RESPONSE_CODES_DOC =\n-      \"A list of response codes to skip logging\";\n+  public static final String KSQL_LOGGING_SKIPPED_RESPONSE_CODES_CONFIG =\n+      KSQL_CONFIG_PREFIX + \"logging.skipped.response.codes\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e16849f59e290ca82cb75dc144e9201dfdecf71"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5NjY0MA==", "bodyText": "Same comment as above regarding clarifying that this a server request logging config, in contrast to other types of logging.", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528896640", "createdAt": "2020-11-23T18:01:53Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -319,10 +322,15 @@\n       \"The key store certificate alias to be used for internal client requests. If not set, \"\n           + \"the system will fall back on the Vert.x default choice\";\n \n-  public static final String KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG =\n-      KSQL_CONFIG_PREFIX + \"logging.skip.response.codes\";\n-  private static final String KSQL_LOGGING_SKIP_RESPONSE_CODES_DOC =\n-      \"A list of response codes to skip logging\";\n+  public static final String KSQL_LOGGING_SKIPPED_RESPONSE_CODES_CONFIG =\n+      KSQL_CONFIG_PREFIX + \"logging.skipped.response.codes\";\n+  private static final String KSQL_LOGGING_SKIPPED_RESPONSE_CODES_DOC =\n+      \"A list of HTTP response codes to skip during server request logging\";\n+\n+  public static final String KSQL_LOGGING_RATE_LIMITED_REQUEST_PATHS_CONFIG =\n+      KSQL_CONFIG_PREFIX + \"logging.rate.limited.request.paths\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e16849f59e290ca82cb75dc144e9201dfdecf71"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5NjczMw==", "bodyText": "This looks unused?", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528896733", "createdAt": "2020-11-23T18:02:01Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/rest/server/KsqlRestConfig.java", "diffHunk": "@@ -914,4 +930,8 @@ private static String getLocalHostName() {\n     }\n   }\n \n+  public Map<String, String> getStringAsMap(final String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e16849f59e290ca82cb75dc144e9201dfdecf71"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5Njc4Mw==", "bodyText": "Does it make sense to add a short docs topic on the meaning of this format, since there are adaptations from the standard Apache log format?", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528896783", "createdAt": "2020-11-23T18:02:08Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java", "diffHunk": "@@ -34,56 +45,110 @@\n   static final String HTTP_HEADER_USER_AGENT = \"User-Agent\";\n \n   private final Set<Integer> skipResponseCodes;\n-  private final Consumer<String> logger;\n+  private final Map<String, Double> rateLimitedPaths;\n+  private final Logger logger;\n+  private final Clock clock;\n+  private final Function<Double, RateLimiter> rateLimiterFactory;\n+\n+  private final Map<String, RateLimiter> rateLimiters = new ConcurrentHashMap<>();\n \n   public LoggingHandler(final Server server) {\n-    this(server, LOG::info);\n+    this(server, LOG, Clock.systemUTC(), RateLimiter::create);\n   }\n \n   @VisibleForTesting\n-  LoggingHandler(final Server server, final Consumer<String> logger) {\n+  LoggingHandler(\n+      final Server server,\n+      final Logger logger,\n+      final Clock clock,\n+      final Function<Double, RateLimiter> rateLimiterFactory) {\n     this.skipResponseCodes = getSkipResponseCodes(server.getConfig());\n+    this.rateLimitedPaths = getSkipRequestPaths(server.getConfig());\n     this.logger = logger;\n+    this.clock = clock;\n+    this.rateLimiterFactory = rateLimiterFactory;\n   }\n \n   private static Set<Integer> getSkipResponseCodes(final KsqlRestConfig config) {\n-    final Set<Integer> skipCodes = config.getList(KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG)\n+    // Already validated as all ints\n+    return config.getList(KSQL_LOGGING_SKIPPED_RESPONSE_CODES_CONFIG)\n         .stream()\n-        .map(responseCode -> {\n-          try {\n-            return Integer.parseInt(responseCode);\n-          } catch (NumberFormatException e) {\n-            throw new IllegalStateException(\"Configured bad response code \" + responseCode);\n-          }\n-        }).collect(ImmutableSet.toImmutableSet());\n-    return skipCodes;\n+        .map(Integer::parseInt).collect(ImmutableSet.toImmutableSet());\n+  }\n+\n+  private static Map<String, Double> getSkipRequestPaths(final KsqlRestConfig config) {\n+    // Already validated as having a double value\n+    return config.getStringAsMap(KSQL_LOGGING_RATE_LIMITED_REQUEST_PATHS_CONFIG)\n+        .entrySet().stream()\n+        .collect(ImmutableMap.toImmutableMap(Entry::getKey,\n+            entry -> Double.parseDouble(entry.getValue())));\n   }\n \n   @Override\n   public void handle(final RoutingContext routingContext) {\n-    // If we wanted to log at the beginning of a request, it would go here.\n     routingContext.addEndHandler(ar -> {\n       // After the response is complete, log results here.\n       if (skipResponseCodes.contains(routingContext.response().getStatusCode())) {\n         return;\n       }\n-      String errorMessage = \"none\";\n-      if (routingContext.response().getStatusCode() > 300) {\n-        errorMessage = routingContext.response().getStatusMessage();\n-        if (Strings.isNullOrEmpty(errorMessage)) {\n-          errorMessage = routingContext.getBodyAsString();\n+      if (rateLimitedPaths.containsKey(routingContext.request().path())) {\n+        final String path = routingContext.request().path();\n+        final double rateLimit = rateLimitedPaths.get(path);\n+        rateLimiters.computeIfAbsent(path, (k) -> rateLimiterFactory.apply(rateLimit));\n+        if (!rateLimiters.get(path).tryAcquire()) {\n+          return;\n         }\n       }\n-      logger.accept(String.format(\n-          \"Request complete - %s %s status: %d, user agent: %s, request body: %d bytes,\"\n-              + \" error response: %s\",\n+      final long contentLength = routingContext.request().response().bytesWritten();\n+      final HttpVersion version = routingContext.request().version();\n+      final HttpMethod method = routingContext.request().method();\n+      final String uri = routingContext.request().uri();\n+      final int status = routingContext.request().response().getStatusCode();\n+      final long requestBodyLength = routingContext.request().bytesRead();\n+      final String versionFormatted;\n+      switch (version) {\n+        case HTTP_1_0:\n+          versionFormatted = \"HTTP/1.0\";\n+          break;\n+        case HTTP_1_1:\n+          versionFormatted = \"HTTP/1.1\";\n+          break;\n+        case HTTP_2:\n+          versionFormatted = \"HTTP/2.0\";\n+          break;\n+        default:\n+          versionFormatted = \"-\";\n+      }\n+      final String name = Optional.ofNullable((ApiUser) routingContext.user())\n+          .map(u -> u.getPrincipal().getName())\n+          .orElse(\"-\");\n+      final String userAgent = Optional.ofNullable(\n+          routingContext.request().getHeader(HTTP_HEADER_USER_AGENT)).orElse(\"-\");\n+      final String timestamp = Utils.formatRFC1123DateTime(clock.millis());\n+      final String message = String.format(\n+          \"%s - %s [%s] \\\"%s %s %s\\\" %d %d \\\"-\\\" \\\"%s\\\" %d\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e16849f59e290ca82cb75dc144e9201dfdecf71"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5Njg1OQ==", "bodyText": "nit: spacing", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528896859", "createdAt": "2020-11-23T18:02:14Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/Server.java", "diffHunk": "@@ -117,7 +117,7 @@ public synchronized void start() {\n     final List<URI> allListenUris = new ArrayList<>(listenUris);\n     internalListenUri.ifPresent(allListenUris::add);\n \n-    final int instances = config.getInt(KsqlRestConfig.VERTICLE_INSTANCES);\n+    final int   instances = config.getInt(KsqlRestConfig.VERTICLE_INSTANCES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e16849f59e290ca82cb75dc144e9201dfdecf71"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5NjkwNw==", "bodyText": "nit: move private helper methods to end of file?", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528896907", "createdAt": "2020-11-23T18:02:18Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java", "diffHunk": "@@ -34,56 +45,110 @@\n   static final String HTTP_HEADER_USER_AGENT = \"User-Agent\";\n \n   private final Set<Integer> skipResponseCodes;\n-  private final Consumer<String> logger;\n+  private final Map<String, Double> rateLimitedPaths;\n+  private final Logger logger;\n+  private final Clock clock;\n+  private final Function<Double, RateLimiter> rateLimiterFactory;\n+\n+  private final Map<String, RateLimiter> rateLimiters = new ConcurrentHashMap<>();\n \n   public LoggingHandler(final Server server) {\n-    this(server, LOG::info);\n+    this(server, LOG, Clock.systemUTC(), RateLimiter::create);\n   }\n \n   @VisibleForTesting\n-  LoggingHandler(final Server server, final Consumer<String> logger) {\n+  LoggingHandler(\n+      final Server server,\n+      final Logger logger,\n+      final Clock clock,\n+      final Function<Double, RateLimiter> rateLimiterFactory) {\n     this.skipResponseCodes = getSkipResponseCodes(server.getConfig());\n+    this.rateLimitedPaths = getSkipRequestPaths(server.getConfig());\n     this.logger = logger;\n+    this.clock = clock;\n+    this.rateLimiterFactory = rateLimiterFactory;\n   }\n \n   private static Set<Integer> getSkipResponseCodes(final KsqlRestConfig config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e16849f59e290ca82cb75dc144e9201dfdecf71"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODg5Njk0Mg==", "bodyText": "nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Already validated as having a double value\n          \n          \n            \n                // Already validated as having double values", "url": "https://github.com/confluentinc/ksql/pull/6615#discussion_r528896942", "createdAt": "2020-11-23T18:02:22Z", "author": {"login": "vcrfxia"}, "path": "ksqldb-rest-app/src/main/java/io/confluent/ksql/api/server/LoggingHandler.java", "diffHunk": "@@ -34,56 +45,110 @@\n   static final String HTTP_HEADER_USER_AGENT = \"User-Agent\";\n \n   private final Set<Integer> skipResponseCodes;\n-  private final Consumer<String> logger;\n+  private final Map<String, Double> rateLimitedPaths;\n+  private final Logger logger;\n+  private final Clock clock;\n+  private final Function<Double, RateLimiter> rateLimiterFactory;\n+\n+  private final Map<String, RateLimiter> rateLimiters = new ConcurrentHashMap<>();\n \n   public LoggingHandler(final Server server) {\n-    this(server, LOG::info);\n+    this(server, LOG, Clock.systemUTC(), RateLimiter::create);\n   }\n \n   @VisibleForTesting\n-  LoggingHandler(final Server server, final Consumer<String> logger) {\n+  LoggingHandler(\n+      final Server server,\n+      final Logger logger,\n+      final Clock clock,\n+      final Function<Double, RateLimiter> rateLimiterFactory) {\n     this.skipResponseCodes = getSkipResponseCodes(server.getConfig());\n+    this.rateLimitedPaths = getSkipRequestPaths(server.getConfig());\n     this.logger = logger;\n+    this.clock = clock;\n+    this.rateLimiterFactory = rateLimiterFactory;\n   }\n \n   private static Set<Integer> getSkipResponseCodes(final KsqlRestConfig config) {\n-    final Set<Integer> skipCodes = config.getList(KSQL_LOGGING_SKIP_RESPONSE_CODES_CONFIG)\n+    // Already validated as all ints\n+    return config.getList(KSQL_LOGGING_SKIPPED_RESPONSE_CODES_CONFIG)\n         .stream()\n-        .map(responseCode -> {\n-          try {\n-            return Integer.parseInt(responseCode);\n-          } catch (NumberFormatException e) {\n-            throw new IllegalStateException(\"Configured bad response code \" + responseCode);\n-          }\n-        }).collect(ImmutableSet.toImmutableSet());\n-    return skipCodes;\n+        .map(Integer::parseInt).collect(ImmutableSet.toImmutableSet());\n+  }\n+\n+  private static Map<String, Double> getSkipRequestPaths(final KsqlRestConfig config) {\n+    // Already validated as having a double value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e16849f59e290ca82cb75dc144e9201dfdecf71"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "291558e9bace92a0c9bacfbe74ab8e02e1141547", "author": {"user": {"login": "AlanConfluent", "name": "Alan Sheinberg"}}, "url": "https://github.com/confluentinc/ksql/commit/291558e9bace92a0c9bacfbe74ab8e02e1141547", "committedDate": "2020-11-24T22:15:28Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Victoria Xia <victoria.f.xia281@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32f6b8eb77388057927774774d37fd3202c86c7e", "author": {"user": {"login": "AlanConfluent", "name": "Alan Sheinberg"}}, "url": "https://github.com/confluentinc/ksql/commit/32f6b8eb77388057927774774d37fd3202c86c7e", "committedDate": "2020-11-24T22:41:58Z", "message": "Feedback"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4541, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}